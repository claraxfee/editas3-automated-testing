void test2 ( ) throws Throwable { boolean boolean0 = ApplicationParameters . getAsBooleanType ( "LYRVFz & " , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAsBooleanType ( String propertyName , boolean defaultValue ) { Boolean result = getAsBoolean ( propertyName ) ; if ( result = = null ) return defaultValue ; else return result . booleanValue ( ) ; }
void test4 ( ) throws Throwable { Locale locale0 = ApplicationParameters . getDefaultLocale ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Locale getDefaultLocale ( ) { String language = getAsString ( " / framework / default / locale / language" ) ; String country = getAsString ( " / framework / default / locale / country" ) ; if ( language ! = null & & country ! = null ) return new Locale ( language , country ) ; else return Locale . getDefault ( ) ; }
void test6 ( ) throws Throwable { String string0 = ApplicationParameters . twoString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String twoString ( ) { try { String result = XMLUtils . toString ( parameterDocument ) ; result = StringUtils . replace ( result , " < ! - - " , " < COMMENTS > " ) ; result = StringUtils . replace ( result , " - - > " , " < / COMMENTS > " ) ; return result ; } catch ( Exception e ) { log . error ( "twoString" , e ) ; return null ; } }
void test9 ( ) throws Throwable { long long0 = ApplicationParameters . getAsLongType ( "EOEJrG | : #" , ( - 552L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getAsLongType ( String propertyName , long defaultValue ) { Long result = getAsLong ( propertyName ) ; if ( result = = null ) return defaultValue ; else return result . longValue ( ) ; }
void test11 ( ) throws Throwable { int int0 = ApplicationParameters . getAsInt ( " + ^6$k + O3wgTdRLYa" , ( - 2045 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAsInt ( String propertyName , int defaultValue ) { Integer result = getAsInteger ( propertyName ) ; if ( result = = null ) return defaultValue ; else return result . intValue ( ) ; }
void test12 ( ) throws Throwable { boolean boolean0 = ApplicationParameters . isDevelopmentMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDevelopmentMode ( ) { return FRAMEWORK_APPLICATION_RUN_MODE_DEVELOPMENT . equalsIgnoreCase ( FRAMEWORK_APPLICATION_RUN_MODE ) ; }
void test13 ( ) throws Throwable { boolean boolean0 = ApplicationParameters . isProductionMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isProductionMode ( ) { return FRAMEWORK_APPLICATION_RUN_MODE_PRODUCTION . equalsIgnoreCase ( FRAMEWORK_APPLICATION_RUN_MODE ) ; }
void test15 ( ) throws Throwable { ApplicationParameters applicationParameters0 = new ApplicationParameters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIntegrationMode ( ) { return FRAMEWORK_APPLICATION_RUN_MODE_INTEGRATION . equalsIgnoreCase ( FRAMEWORK_APPLICATION_RUN_MODE ) ; }
void test16 ( ) throws Throwable { boolean boolean0 = ApplicationParameters . isIntegrationMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIntegrationMode ( ) { return FRAMEWORK_APPLICATION_RUN_MODE_INTEGRATION . equalsIgnoreCase ( FRAMEWORK_APPLICATION_RUN_MODE ) ; }
void test18 ( ) throws Throwable { ElemUnknown elemUnknown0 = new ElemUnknown ( ) ; ElemUnknown elemUnknown1 = ( ElemUnknown ) ApplicationParameters . getWhatYouCan ( "deyloent" , "deyloent" , ( Object ) elemUnknown0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getWhatYouCan ( String propertyName , String substitutePropertyName , Object defaultValue ) throws Exception { if ( defaultValue = = null ) throw new Exception ( "Must provide a default value" ) ; String result = getAsString ( propertyName , null ) ; if ( result = = null ) result = getAsString ( substitutePropertyName , null ) ; if ( result ! = null ) return ConvertUtils . convert ( result , defaultValue . getClass ( ) ) ; else return defaultValue ; }
void test21 ( ) throws Throwable { ElemUse elemUse0 = new ElemUse ( ) ; ElemUse elemUse1 = ( ElemUse ) ApplicationParameters . getWhatYouCan ( "" , "" , ( Object ) elemUse0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getWhatYouCan ( String propertyName , String substitutePropertyName , Object defaultValue ) throws Exception { if ( defaultValue = = null ) throw new Exception ( "Must provide a default value" ) ; String result = getAsString ( propertyName , null ) ; if ( result = = null ) result = getAsString ( substitutePropertyName , null ) ; if ( result ! = null ) return ConvertUtils . convert ( result , defaultValue . getClass ( ) ) ; else return defaultValue ; }
void test23 ( ) throws Throwable { HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl ( ) ; String string0 = ApplicationParameters . getValue ( ( Node ) hTMLDocumentImpl0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( Node node , boolean doTrim ) { if ( node = = null ) return null ; StringBuffer contents = new StringBuffer ( ) ; NodeList childNodes = node . getChildNodes ( ) ; for ( int i = 0 ; i < childNodes . getLength ( ) ; i + + ) { if ( childNodes . item ( i ) . getNodeType ( ) = = Node . TEXT_NODE ) { contents . append ( childNodes . item ( i ) . getNodeValue ( ) ) ; } } String result = contents . toString ( ) ; / / result = result . length ( ) > 0 ? result : null ; result = doTrim ? StringUtils . trimEmptyToNull ( result ) : result ; return result ; }
void test0 ( ) throws Throwable { MainClass mainClass0 = new MainClass ( "o" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MainClass ( String className ) { Object returnValue = null ; Method m = null ; try { Class c = Class . forName ( className ) ; / / Dump class name print ( "\nclass name : \t" + c . getName ( ) ) ; if ( c = = null ) { throw new Exception ( "Class is null" ) ; } / / Dump constructors dumpConstructors ( c ) ; / / dump methods dumpMethods ( c ) ; / / Dump class members dumpMembers ( c ) ; } catch ( Exception e ) { debug ( "Oops , exception [ " + e . getClass ( ) . getName ( ) + " ] : " ) ; if ( e instanceof InvocationTargetException ) { e = ( Exception ) ( ( InvocationTargetException ) e ) . getTargetException ( ) ; } debug ( " - - - > " + e ) ; error = true ; returnValue = e . toString ( ) ; if ( isVerbose ) e . printStackTrace ( System . out ) ; else print ( e . toString ( ) ) ; } }
void test1 ( ) throws Throwable { MainClass mainClass0 = new MainClass ( "java . lang . String" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MainClass ( String className ) { Object returnValue = null ; Method m = null ; try { Class c = Class . forName ( className ) ; / / Dump class name print ( "\nclass name : \t" + c . getName ( ) ) ; if ( c = = null ) { throw new Exception ( "Class is null" ) ; } / / Dump constructors dumpConstructors ( c ) ; / / dump methods dumpMethods ( c ) ; / / Dump class members dumpMembers ( c ) ; } catch ( Exception e ) { debug ( "Oops , exception [ " + e . getClass ( ) . getName ( ) + " ] : " ) ; if ( e instanceof InvocationTargetException ) { e = ( Exception ) ( ( InvocationTargetException ) e ) . getTargetException ( ) ; } debug ( " - - - > " + e ) ; error = true ; returnValue = e . toString ( ) ; if ( isVerbose ) e . printStackTrace ( System . out ) ; else print ( e . toString ( ) ) ; } }
void test2 ( ) throws Throwable { Class < ? > [ ] classArray0 = ( Class < ? > [ ] ) Array . newInstance ( Class . class , 8 ) ; MainClass mainClass0 = new MainClass ( "java . lang . String" , "flat" , ( Object [ ] ) classArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MainClass ( String className ) { Object returnValue = null ; Method m = null ; try { Class c = Class . forName ( className ) ; / / Dump class name print ( "\nclass name : \t" + c . getName ( ) ) ; if ( c = = null ) { throw new Exception ( "Class is null" ) ; } / / Dump constructors dumpConstructors ( c ) ; / / dump methods dumpMethods ( c ) ; / / Dump class members dumpMembers ( c ) ; } catch ( Exception e ) { debug ( "Oops , exception [ " + e . getClass ( ) . getName ( ) + " ] : " ) ; if ( e instanceof InvocationTargetException ) { e = ( Exception ) ( ( InvocationTargetException ) e ) . getTargetException ( ) ; } debug ( " - - - > " + e ) ; error = true ; returnValue = e . toString ( ) ; if ( isVerbose ) e . printStackTrace ( System . out ) ; else print ( e . toString ( ) ) ; } }
void test3 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 6 ] ; Class < ? > [ ] classArray0 = ( Class < ? > [ ] ) Array . newInstance ( Class . class , 8 ) ; MainClass mainClass0 = new MainClass ( "java . lang . String" , true , ( Class [ ] ) classArray0 , objectArray0 , "java . lang . String" , ( Class [ ] ) classArray0 , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MainClass ( String className ) { Object returnValue = null ; Method m = null ; try { Class c = Class . forName ( className ) ; / / Dump class name print ( "\nclass name : \t" + c . getName ( ) ) ; if ( c = = null ) { throw new Exception ( "Class is null" ) ; } / / Dump constructors dumpConstructors ( c ) ; / / dump methods dumpMethods ( c ) ; / / Dump class members dumpMembers ( c ) ; } catch ( Exception e ) { debug ( "Oops , exception [ " + e . getClass ( ) . getName ( ) + " ] : " ) ; if ( e instanceof InvocationTargetException ) { e = ( Exception ) ( ( InvocationTargetException ) e ) . getTargetException ( ) ; } debug ( " - - - > " + e ) ; error = true ; returnValue = e . toString ( ) ; if ( isVerbose ) e . printStackTrace ( System . out ) ; else print ( e . toString ( ) ) ; } }
void test4 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 6 ] ; Class < ? > [ ] classArray0 = ( Class < ? > [ ] ) Array . newInstance ( Class . class , 8 ) ; MainClass mainClass0 = new MainClass ( "java . lang . String" , false , ( Class [ ] ) classArray0 , objectArray0 , "java . lang . String" , ( Class [ ] ) classArray0 , ( Object [ ] ) classArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MainClass ( String className ) { Object returnValue = null ; Method m = null ; try { Class c = Class . forName ( className ) ; / / Dump class name print ( "\nclass name : \t" + c . getName ( ) ) ; if ( c = = null ) { throw new Exception ( "Class is null" ) ; } / / Dump constructors dumpConstructors ( c ) ; / / dump methods dumpMethods ( c ) ; / / Dump class members dumpMembers ( c ) ; } catch ( Exception e ) { debug ( "Oops , exception [ " + e . getClass ( ) . getName ( ) + " ] : " ) ; if ( e instanceof InvocationTargetException ) { e = ( Exception ) ( ( InvocationTargetException ) e ) . getTargetException ( ) ; } debug ( " - - - > " + e ) ; error = true ; returnValue = e . toString ( ) ; if ( isVerbose ) e . printStackTrace ( System . out ) ; else print ( e . toString ( ) ) ; } }
void test0 ( ) throws Throwable { BaseRequestProcessor baseRequestProcessor0 = new BaseRequestProcessor ( ) ; boolean boolean0 = baseRequestProcessor0 . processPreprocess ( ( HttpServletRequest ) null , ( HttpServletResponse ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processPreprocess ( HttpServletRequest request , HttpServletResponse response ) { return ( true ) ; }
void test0 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; DocumentImpl documentImpl0 = ( DocumentImpl ) valueListHandler0 . toXML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Document toXML ( ) { return toXML ( null ) ; }
void test1 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; String string0 = valueListHandler0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test0 ( ) throws Throwable { BaseActionServlet baseActionServlet0 = new BaseActionServlet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { ViewManager viewManager0 = ViewManager . getInstance ( ) ; BaseCacheManager . CachedObject baseCacheManager_CachedObject0 = viewManager0 . new CachedObject ( ( Object ) viewManager0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCacheTimeToLiveUsed ( ) { return getCacheTimeToLive ( ) > CACHE_LIVE_FOREVER ; }
void test1 ( ) throws Throwable { ViewManager viewManager0 = ViewManager . getInstance ( ) ; BaseCacheManager . CachedObject baseCacheManager_CachedObject0 = viewManager0 . new CachedObject ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ViewManager getInstance ( ) { if ( instance = = null ) instance = new ViewManager ( ) ; return instance ; }
void test2 ( ) throws Throwable { ViewManager viewManager0 = ViewManager . getInstance ( ) ; BaseCacheManager . CachedObject baseCacheManager_CachedObject0 = viewManager0 . new CachedObject ( ( Object ) " ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCacheTimeToLive ( ) { return ApplicationParameters . getAsLongType ( "framework . cache . " + getType ( ) . toLowerCase ( ) + " . timeToLive" , CACHE_LIVE_FOREVER ) ; }
void test3 ( ) throws Throwable { ViewManager viewManager0 = ViewManager . getInstance ( ) ; BaseCacheManager . CachedObject baseCacheManager_CachedObject0 = viewManager0 . new CachedObject ( ( Object ) " ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCacheTimeToLiveUsed ( ) { return getCacheTimeToLive ( ) > CACHE_LIVE_FOREVER ; }
void test4 ( ) throws Throwable { EntityManager entityManager0 = EntityManager . getInstance ( ) ; long long0 = entityManager0 . getCacheTimerInterval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCacheSizeLimited ( ) { return getCacheSizeLimit ( ) > CACHE_SIZE_UNLIMITED ; }
void test5 ( ) throws Throwable { EntityManager entityManager0 = EntityManager . getInstance ( ) ; entityManager0 . finalize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRepositoryDirectory ( ) throws Exception { return ApplicationParameters . FRAMEWORK_APPLICATION_BASE_DIRECTORY + getRepositoryPath ( ) ; }
void test8 ( ) throws Throwable { ViewManager viewManager0 = ViewManager . getInstance ( ) ; int int0 = viewManager0 . getCacheSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCacheSize ( ) { return cache . size ( ) ; }
void test0 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test1 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; valueListHandler0 . setNextPage ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNextPage ( ) { if ( ! hasRetrieveRowCount ( ) ) return nextPage ; else return startIndex + resultList . size ( ) + 1 < rowCount ; }
void test2 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; valueListHandler0 . setNextIndex ( 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test3 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test4 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; valueListHandler0 . setRowCount ( 1483 ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; valueListHandler0 . setResultList ( ( Collection ) linkedList0 ) ; valueListHandler0 . setRetrieveRowCount ( true ) ; boolean boolean0 = valueListHandler0 . hasNextPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return rowCount ; }
void test5 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; valueListHandler0 . setResultList ( ( Collection ) linkedList0 ) ; valueListHandler0 . setRetrieveRowCount ( true ) ; boolean boolean0 = valueListHandler0 . hasNextPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasRetrieveRowCount ( ) { return retrieveRowCount ; }
void test6 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; valueListHandler0 . setRowCountMethod ( " , AE [ #\"cBTP , g < Y + " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return rowCount ; }
void test8 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; valueListHandler0 . setStartIndex ( 1201 ) ; int int0 = valueListHandler0 . getPreviousIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test9 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; valueListHandler0 . setRetrieveRowCount ( true ) ; String string0 = valueListHandler0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasRetrieveRowCount ( ) { return retrieveRowCount ; }
void test10 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; valueListHandler0 . setRetrieveRowCount ( true ) ; valueListHandler0 . setStartIndex ( ( - 20 ) ) ; valueListHandler0 . describe ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowsPerPage ( ) { return rowsPerPage ; }
void test11 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; boolean boolean0 = valueListHandler0 . hasPreviousPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNextPage ( ) { if ( ! hasRetrieveRowCount ( ) ) return nextPage ; else return startIndex + resultList . size ( ) + 1 < rowCount ; }
void test12 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; valueListHandler0 . setStartIndex ( 1201 ) ; boolean boolean0 = valueListHandler0 . hasPreviousPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPreviousIndex ( ) { int temp = startIndex - rowsPerPage ; return ( temp < 0 ? 0 : temp ) ; }
void test13 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; boolean boolean0 = valueListHandler0 . hasNextPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test14 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test0 ( ) throws Throwable { BaseActionMapping baseActionMapping0 = new BaseActionMapping ( ) ; String string0 = baseActionMapping0 . getResourcePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getResourcePrefix ( ) { return resourcePrefix ; }
void test1 ( ) throws Throwable { BaseActionMapping baseActionMapping0 = new BaseActionMapping ( ) ; baseActionMapping0 . setResourcePrefix ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFormActionPath ( ) { return formActionPath ; }
void test2 ( ) throws Throwable { BaseActionMapping baseActionMapping0 = new BaseActionMapping ( ) ; String string0 = baseActionMapping0 . getFormActionPath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFormActionPath ( ) { return formActionPath ; }
void test3 ( ) throws Throwable { BaseActionMapping baseActionMapping0 = new BaseActionMapping ( ) ; baseActionMapping0 . setFormActionPath ( " , scope = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ActionForward getForward ( ActionMapping mapping , String forwardName ) { return ( mapping . findForward ( forwardName ) ) ; }
void test2 ( ) throws Throwable { ViewManager viewManager0 = ViewManager . getInstance ( ) ; URL uRL0 = viewManager0 . getRulesFileURL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" URL getRulesFileURL ( ) throws Exception { String fullPathToRuleFile = ApplicationParameters . FRAMEWORK_APPLICATION_BASE_DIRECTORY + getRulesFilePath ( ) ; return FileUtils . getFileURL ( fullPathToRuleFile ) ; }
void test8 ( ) throws Throwable { ViewManager viewManager0 = ViewManager . getInstance ( ) ; View view0 = ( View ) viewManager0 . getNew ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test9 ( ) throws Throwable { ViewManager viewManager0 = ViewManager . getInstance ( ) ; boolean boolean0 = viewManager0 . isValidTargetClassName ( "MrdV ; | U@ - #U * - ) J" , ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValidTargetClassName ( String targetClassName , Map errors ) { boolean result = true ; String errorMessage = null ; String messageKey = null ; / / Check target class name if ( StringUtils . exists ( targetClassName ) & & ! ObjectUtils . isClassName ( targetClassName ) ) { errorMessage = "isValidTargetClassName : The target class name cannot be instanciate : targetClassName = " + targetClassName ; messageKey = "error . framework . persistence . jdbc . " + getType ( ) . trim ( ) . toLowerCase ( ) + " . targetClassName . invalid" ; addError ( errors , errorMessage , messageKey , targetClassName ) ; result = false ; } return result ; }
void test10 ( ) throws Throwable { ViewManager viewManager0 = ViewManager . getInstance ( ) ; TransformerIdentityImpl transformerIdentityImpl0 = new TransformerIdentityImpl ( ) ; Properties properties0 = transformerIdentityImpl0 . getOutputProperties ( ) ; viewManager0 . isValidFullName ( ( String ) null , " & #823" , ( Map ) properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( resultList = = null | | resultList . isEmpty ( ) ) ; }
void test11 ( ) throws Throwable { ViewManager viewManager0 = ViewManager . getInstance ( ) ; View view0 = ( View ) viewManager0 . getNew ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test12 ( ) throws Throwable { ViewManager viewManager0 = ViewManager . getInstance ( ) ; boolean boolean0 = viewManager0 . isValidFullName ( "P" , "P" , ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValidFullName ( String name , String packageName , Map errors ) { boolean result = true ; String errorMessage = null ; String messageKey = null ; / / Check component name if ( ! StringUtils . isJavaName ( name ) ) { errorMessage = "isFullNameValid : The " + getType ( ) + " name is not a valid Java name : name = " + name ; messageKey = "error . framework . persistence . jdbc . " + getType ( ) . trim ( ) . toLowerCase ( ) + " . name . invalid" ; addError ( errors , errorMessage , messageKey , name ) ; result = false ; } / / Check component package name if ( ! StringUtils . isJavaPackageName ( packageName ) ) { errorMessage = "isFullNameValid : The " + getType ( ) + " package name is not a valid Java name : packageName = " + packageName ; messageKey = "error . framework . persistence . jdbc . " + getType ( ) . trim ( ) . toLowerCase ( ) + " . packageName . invalid" ; addError ( errors , errorMessage , messageKey , packageName ) ; result = false ; } return result ; }
void test13 ( ) throws Throwable { ViewManager viewManager0 = ViewManager . getInstance ( ) ; boolean boolean0 = viewManager0 . isValidTargetClassName ( "" , ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValidTargetClassName ( String targetClassName , Map errors ) { boolean result = true ; String errorMessage = null ; String messageKey = null ; / / Check target class name if ( StringUtils . exists ( targetClassName ) & & ! ObjectUtils . isClassName ( targetClassName ) ) { errorMessage = "isValidTargetClassName : The target class name cannot be instanciate : targetClassName = " + targetClassName ; messageKey = "error . framework . persistence . jdbc . " + getType ( ) . trim ( ) . toLowerCase ( ) + " . targetClassName . invalid" ; addError ( errors , errorMessage , messageKey , targetClassName ) ; result = false ; } return result ; }
void test14 ( ) throws Throwable { EntityManager entityManager0 = EntityManager . getInstance ( ) ; boolean boolean0 = entityManager0 . isValidTargetClassName ( "oracle . sql . REF" , ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValidTargetClassName ( String targetClassName , Map errors ) { boolean result = true ; String errorMessage = null ; String messageKey = null ; / / Check target class name if ( StringUtils . exists ( targetClassName ) & & ! ObjectUtils . isClassName ( targetClassName ) ) { errorMessage = "isValidTargetClassName : The target class name cannot be instanciate : targetClassName = " + targetClassName ; messageKey = "error . framework . persistence . jdbc . " + getType ( ) . trim ( ) . toLowerCase ( ) + " . targetClassName . invalid" ; addError ( errors , errorMessage , messageKey , targetClassName ) ; result = false ; } return result ; }
void test15 ( ) throws Throwable { ViewManager viewManager0 = ViewManager . getInstance ( ) ; Attribute [ ] attributeArray0 = new Attribute [ 2 ] ; Attribute attribute0 = new Attribute ( ) ; attributeArray0 [ 0 ] = attribute0 ; attributeArray0 [ 1 ] = attributeArray0 [ 0 ] ; boolean boolean0 = viewManager0 . isValidAttributes ( attributeArray0 , ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValidAttributes ( Attribute [ ] attributes , Map errors ) { boolean result = true ; String errorMessage = null ; String messageKey = null ; Map namesMap = new HashMap ( ) ; for ( int i = 0 ; i < attributes . length ; i + + ) { / / Check attribute name String name = attributes [ i ] . getName ( ) ; if ( ! StringUtils . isJavaName ( name ) ) { errorMessage = "isAttributesValid : The attribute name is not a valid Java name : name = " + name ; messageKey = "error . framework . persistence . jdbc . attribute . name . invalid" ; addError ( errors , errorMessage , messageKey , name ) ; result = false ; } / / Check attribute name uniqueness if ( namesMap . get ( name ) ! = null ) { errorMessage = "isAttributesValid : The attribute name is not unique : name = " + name ; messageKey = "error . framework . persistence . jdbc . attribute . name . unique" ; addError ( errors , errorMessage , messageKey , name ) ; result = false ; } namesMap . put ( name , name ) ; / / Check column classes name String columnClassName = attributes [ i ] . getColumnClassName ( ) ; if ( ! ObjectUtils . isClassName ( columnClassName ) ) { errorMessage = "isAttributesValid : The column class name cannot be instanciate : columnClassName = " + columnClassName ; messageKey = "error . framework . persistence . jdbc . attribute . columnClassName . invalid" ; addError ( errors , errorMessage , messageKey , columnClassName ) ; result = false ; } } return result ; }
void test0 ( ) throws Throwable { ViewManager viewManager0 = ViewManager . getInstance ( ) ; View view0 = ( View ) viewManager0 . getNew ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCacheTimerInterval ( ) { return ApplicationParameters . getAsLongType ( "framework . cache . " + getType ( ) . toLowerCase ( ) + " . timerInterval" , CACHE_DEFAULT_TIMER_INTERVAL ) ; }
void test1 ( ) throws Throwable { ViewManager viewManager0 = ViewManager . getInstance ( ) ; View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCacheIdleTimeoutUsed ( ) { return getCacheIdleTimeout ( ) > CACHE_NEVER_TIMEOUT ; }
void test3 ( ) throws Throwable { ViewManager viewManager0 = ViewManager . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultMaxFetchSize ( ) { return ApplicationParameters . getAsInt ( "framework . persistence . jdbc . view . tuning . defaultMaxFetchSize" , 0 ) ; }
void test0 ( ) throws Throwable { EntityManager entityManager0 = EntityManager . getInstance ( ) ; Entity entity0 = ( Entity ) entityManager0 . getNew ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCacheSizeLimited ( ) { return getCacheSizeLimit ( ) > CACHE_SIZE_UNLIMITED ; }
void test1 ( ) throws Throwable { EntityManager entityManager0 = EntityManager . getInstance ( ) ; Entity entity0 = ( Entity ) entityManager0 . getNew ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCacheSizeLimit ( ) { return ApplicationParameters . getAsInt ( "framework . cache . " + getType ( ) . toLowerCase ( ) + " . cacheSizeLimit" , CACHE_SIZE_UNLIMITED ) ; }
void test1 ( ) throws Throwable { Module module0 = new Module ( ) ; String string0 = module0 . getPoolName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPoolName ( ) { return poolName ; }
void test7 ( ) throws Throwable { Module module0 = new Module ( ) ; module0 . initalize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPoolName ( ) { return poolName ; }
void test8 ( ) throws Throwable { Module module0 = new Module ( "" ) ; module0 . disconnect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPoolName ( ) { return poolName ; }
void test0 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection getAsDbCollection ( ) throws Exception { return getAsDbCollection ( null , null , null ) ; }
void test1 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test2 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test3 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowsPerPage ( ) { return rowsPerPage ; }
void test4 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection getAsDbCollection ( ) throws Exception { return getAsDbCollection ( null , null , null ) ; }
void test5 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test6 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void populate ( Connection connection , View view , Object target ) throws Exception { / / Get query parameters String sql = view . getSqlQuery ( ) ; Collection tokenValues = view . getTokenValues ( ) ; Object bindVariables = view . getBindVariables ( ) ; Collection parameters = view . getParameters ( ) ; / / Execute query ResultSet rset = JDBCUtils . executeQuery ( connection , sql , tokenValues , bindVariables , parameters ) ; / / A SQLException is thrown if no data found ! if ( ! rset . next ( ) ) throw new SQLException ( "No rows found" ) ; / / Populate the target populate ( rset , view . getAttributes ( ) , target ) ; / / A SQLException is thrown if more than one row is returned ! if ( rset . next ( ) ) throw new SQLException ( "Too many rows found" ) ; }
void test7 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test8 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStartIndex ( ) { return startIndex ; }
void test9 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection getCollection ( Connection connection , View view , Object target , ValueListHandler vlh ) throws Exception { / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / INITIALIZE / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / Tuning parameters TuningUtils . startTuning ( log , "getCollection - total" ) ; long start = 0 ; long end = 0 ; / / Page iterator parameters boolean hasVLH = ( vlh ! = null ) ; boolean hasWindow = ( hasVLH & & vlh . getRowsPerPage ( ) ! = ValueListHandler . ALL_ROWS ) ; boolean hasRetrieveRowCount = ( hasVLH & & vlh . hasRetrieveRowCount ( ) ) ; boolean isSQLRowCountMethod = ( hasVLH & & ValueListHandler . ROWCOUNT_METHOD_SQL . equalsIgnoreCase ( vlh . getRowCountMethod ( ) ) ) ; int rowCount = 0 ; if ( log . isDebugEnabled ( ) ) log . debug ( "getCollection : hasVLH = " + hasVLH + " , hasRetrieveRowCount = " + hasRetrieveRowCount + " , isSQLRowCountMethod = " + isSQLRowCountMethod ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / EXECUTE QUERY / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / Get query parameters String sql = view . getSqlQuery ( ) ; Collection tokenValues = view . getTokenValues ( ) ; Object bindVariables = view . getBindVariables ( ) ; Collection parameters = view . getParameters ( ) ; int scrollType = hasVLH ? ResultSet . TYPE_SCROLL_INSENSITIVE : ResultSet . TYPE_FORWARD_ONLY ; / / int scrollType = ResultSet . TYPE_FORWARD_ONLY ; / / Execute query if ( log . isDebugEnabled ( ) ) log . debug ( "getCollection : requested resultset type = " + JDBCUtils . getResultSetType ( scrollType ) ) ; TuningUtils . startTuning ( log , "getCollection - executeQuery" ) ; ResultSet resultSet = JDBCUtils . executeQuery ( connection , sql , tokenValues , bindVariables , parameters , scrollType ) ; int originalFetchSize = resultSet . getFetchSize ( ) ; TuningUtils . stopTuning ( log , "getCollection - executeQuery" ) ; if ( log . isDebugEnabled ( ) ) log . debug ( "getCollection : resultSet . getType ( ) = " + JDBCUtils . getResultSetType ( resultSet . getType ( ) ) ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / POSITIONING / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / Positioning to the start index if ( hasVLH ) { TuningUtils . startTuning ( log , "getCollection - positioning" ) ; / / Get the start index ( always positive ) int iStart = vlh . getStartIndex ( ) < 0 ? 0 : vlh . getStartIndex ( ) ; / / Try to optimize the fetch size if ( iStart > resultSet . getFetchSize ( ) & & iStart < = view . getMaxFetchSize ( ) ) resultSet . setFetchSize ( iStart ) ; / / Go to the start index / / An attempt to position the cursor beyond the first / last row in the result set / / leaves the cursor before the first row or after the last row . if ( resultSet . getType ( ) ! = ResultSet . TYPE_FORWARD_ONLY ) { if ( log . isDebugEnabled ( ) ) log . debug ( "getCollection : Positioning by absolute to index = " + iStart ) ; / / HAHAHA ! ! ABSOLUTELY STUPID ! ! ! / / absolute ( 0 ) throws java . sql . SQLException : absolute : Invalid cursor operation . if ( iStart ! = 0 ) resultSet . absolute ( iStart ) ; if ( resultSet . isAfterLast ( ) ) { log . warn ( "getCollection : startIndex = " + vlh . getStartIndex ( ) + " is out of range" ) ; resultSet . last ( ) ; rowCount + = resultSet . getRow ( ) ; resultSet . afterLast ( ) ; } else rowCount + = resultSet . getRow ( ) ; } else { if ( log . isDebugEnabled ( ) ) log . debug ( "getCollection : Positioning manually to index = " + iStart ) ; boolean hasNext = true ; while ( iStart - - > 0 & & hasNext ) { hasNext = resultSet . next ( ) ; rowCount + + ; } if ( ! hasNext & & iStart > 0 ) log . warn ( "getCollection : startIndex ( " + vlh . getStartIndex ( ) + " ) out of range" ) ; } TuningUtils . stopTuning ( log , "getCollection - positioning" ) ; / / Restore original fetch size after positioning resultSet . setFetchSize ( originalFetchSize ) ; } / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / FETCHING ROWS / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / Get the number of rows to fetch / / and try to optimize fetch size int iCount = 0 ; if ( hasWindow ) { iCount = vlh . getRowsPerPage ( ) ; resultSet . setFetchSize ( iCount ) ; if ( log . isDebugEnabled ( ) ) log . debug ( "getCollection : Window size set to " + iCount ) ; } else resultSet . setFetchSize ( view . getMaxFetchSize ( ) ) ; / / Acquire target class Class factory = null ; if ( target = = null ) { / / Get view defined target if ( StringUtils . exists ( view . getTargetClassName ( ) ) ) factory = ObjectUtils . forName ( view . getTargetClassName ( ) ) ; / / Get default target class : java . util . HashMap else factory = ObjectUtils . forName ( ViewManager . getInstance ( ) . getDefaultTargetClassName ( ) ) ; } else factory = ( target instanceof Class ) ? ( Class ) target : target . getClass ( ) ; / / Use ArrayList to maintain ResultSet sequence Collection resultList = new ArrayList ( ) ; / / Scroll to each record and populate target TuningUtils . startTuning ( log , "getCollection - fetching" ) ; boolean hasNext = resultSet . next ( ) ; while ( hasNext & & ( hasWindow ? ( iCount - - > 0 ) : true ) ) { rowCount + + ; Object bean = factory . newInstance ( ) ; populate ( resultSet , view . getAttributes ( ) , bean ) ; resultList . add ( bean ) ; hasNext = resultSet . next ( ) ; } if ( hasNext ) rowCount + + ; / / BUG FIX : We have called resultSet . next ( ) but did not count it TuningUtils . stopTuning ( log , "getCollection - fetching" ) ; / / Restore original fetch size after fetching rows resultSet . setFetchSize ( originalFetchSize ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / ROW COUNT / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / Get the total numbers of line ( if hasLineCount set to true ) if ( hasRetrieveRowCount ) { TuningUtils . startTuning ( log , "getCollection - counting rows" ) ; if ( isSQLRowCountMethod ) { / / Count row using SQL if ( log . isDebugEnabled ( ) ) log . debug ( "getCollection : Counting rows by executing count ( ) . . . " ) ; rowCount = JDBCUtils . getRowCountFromQuery ( connection , sql , tokenValues , bindVariables , parameters ) ; } else { resultSet . setFetchSize ( view . getMaxFetchSize ( ) ) ; if ( resultSet . getType ( ) ! = ResultSet . TYPE_FORWARD_ONLY ) { / / Count row last ( ) if ( log . isDebugEnabled ( ) ) log . debug ( "getCollection : Counting rows by scrolling to last" ) ; resultSet . last ( ) ; rowCount = resultSet . getRow ( ) ; } else { / / Count row using manual counter if ( log . isDebugEnabled ( ) ) log . debug ( "getCollection : Counting rows by using manual counter . . . " ) ; while ( resultSet . next ( ) ) rowCount + + ; } } TuningUtils . stopTuning ( log , "getCollection - counting rows" ) ; if ( log . isDebugEnabled ( ) ) log . debug ( "getCollection : rowCount = " + rowCount ) ; } / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / FINALIZE / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / TuningUtils . startTuning ( log , "getCollection - closing resultset" ) ; resultSet . close ( ) ; TuningUtils . stopTuning ( log , "getCollection - closing resultset" ) ; if ( hasRetrieveRowCount ) vlh . setRowCount ( rowCount ) ; if ( hasVLH ) vlh . setResultList ( resultList ) ; TuningUtils . stopTuning ( log , "getCollection - total" ) ; return ( resultList ) ; }
void test10 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowsPerPage ( ) { return rowsPerPage ; }
void test11 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test12 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStartIndex ( ) { return startIndex ; }
void test13 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ValueListHandler getValueListHandler ( ) throws Exception { return getValueListHandler ( null ) ; }
void test14 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection getAsDbCollection ( ) throws Exception { return getAsDbCollection ( null , null , null ) ; }
void test15 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test16 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test17 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStartIndex ( ) { return startIndex ; }
void test18 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test19 ( ) throws Throwable { View view0 = new View ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test0 ( ) throws Throwable { ComponentHelper componentHelper0 = new ComponentHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ComponentHelper ( ) { }
void test1 ( ) throws Throwable { JoinRowSetImpl joinRowSetImpl0 = new JoinRowSetImpl ( ) ; OracleCachedRowSet oracleCachedRowSet0 = new OracleCachedRowSet ( ) ; Map < Object , Object > map0 = oracleCachedRowSet0 . getTypeMap ( ) ; ComponentHelper . populate ( ( ResultSet ) joinRowSetImpl0 , ( Map ) map0 , ( Object ) " - 10100 - 0 - 0 . - 1 . - 1 . - 1 . 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void populate ( Connection connection , View view , Object target ) throws Exception { / / Get query parameters String sql = view . getSqlQuery ( ) ; Collection tokenValues = view . getTokenValues ( ) ; Object bindVariables = view . getBindVariables ( ) ; Collection parameters = view . getParameters ( ) ; / / Execute query ResultSet rset = JDBCUtils . executeQuery ( connection , sql , tokenValues , bindVariables , parameters ) ; / / A SQLException is thrown if no data found ! if ( ! rset . next ( ) ) throw new SQLException ( "No rows found" ) ; / / Populate the target populate ( rset , view . getAttributes ( ) , target ) ; / / A SQLException is thrown if more than one row is returned ! if ( rset . next ( ) ) throw new SQLException ( "Too many rows found" ) ; }
void test0 ( ) throws Throwable { EntityHelper entityHelper0 = new EntityHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EntityHelper ( ) { }
void test0 ( ) throws Throwable { ViewHelper viewHelper0 = new ViewHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ViewHelper ( ) { }
void test0 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . describe ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test1 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setScale ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullable ( ) { return nullable ; }
void test2 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setPrecision ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test3 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setNullable ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test4 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setPrimaryKey ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test5 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setColumnTypeName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test6 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setColumnName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPrimaryKey ( ) { return primaryKey ; }
void test7 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setColumnClassName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnTypeName ( ) { return columnTypeName ; }
void test8 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getScale ( ) { return scale ; }
void test9 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setColumnType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrecision ( ) { return precision ; }
void test10 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setKeySeq ( "1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKeySeq ( ) { return keySeq ; }
void test11 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; Attribute attribute1 = ( Attribute ) attribute0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object clone ( ) { try { Component result = ( Component ) super . clone ( ) ; if ( getAttributes ( ) ! = null ) { / / result . setAttributes ( new HashMap ( ) ) ; Iterator it = getAttributes ( ) . values ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { Attribute attribute = ( Attribute ) it . next ( ) ; result . addAttribute ( ( Attribute ) attribute . clone ( ) ) ; } } return result ; } catch ( CloneNotSupportedException e ) { / / This should not happen , since this class is Cloneable . throw new InternalError ( "Could not clone component" ) ; } }
void test12 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setNotNull ( "1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test13 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setNotNull ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test0 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; entity0 . setPackageName ( "getCollection : Counting rows by scrolling to last" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAttributesSize ( ) { return getAttributes ( ) . size ( ) ; }
void test1 ( ) throws Throwable { View view0 = new View ( ) ; Map < Object , Object > map0 = view0 . describe ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addAttributes ( Map newAttributes ) { Iterator it = newAttributes . values ( ) . iterator ( ) ; while ( it . hasNext ( ) ) addAttribute ( ( Attribute ) it . next ( ) ) ; }
void test2 ( ) throws Throwable { View view0 = new View ( ) ; view0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowsPerPage ( ) { return rowsPerPage ; }
void test3 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; entity0 . setTargetClassName ( "@Ch [ hO" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComment ( ) { return comment ; }
void test4 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; entity0 . setSqlQuery ( "gTSZIC`4a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTimestamp ( ) { return timestamp ; }
void test5 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; entity0 . setModule ( ( Module ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullName ( ) { return EntityManager . getInstance ( ) . getFullName ( getName ( ) , getPackageName ( ) ) ; }
void test6 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; entity0 . setComment ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAttributesSize ( ) { return getAttributes ( ) . size ( ) ; }
void test7 ( ) throws Throwable { View view0 = new View ( ) ; Attribute attribute0 = new Attribute ( ) ; view0 . addAttribute ( attribute0 ) ; view0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test8 ( ) throws Throwable { View view0 = new View ( ) ; view0 . setTimestamp ( ( long ) ( - 116 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test9 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; entity0 . setVersion ( "2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPackageName ( ) { return packageName ; }
void test10 ( ) throws Throwable { View view0 = new View ( ) ; view0 . removeAttribute ( "aiwt%o~ * - ~a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxFetchSize ( ) { return maxFetchSize ; }
void test11 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; Entity entity1 = ( Entity ) entity0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object clone ( ) { try { Component result = ( Component ) super . clone ( ) ; if ( getAttributes ( ) ! = null ) { / / result . setAttributes ( new HashMap ( ) ) ; Iterator it = getAttributes ( ) . values ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { Attribute attribute = ( Attribute ) it . next ( ) ; result . addAttribute ( ( Attribute ) attribute . clone ( ) ) ; } } return result ; } catch ( CloneNotSupportedException e ) { / / This should not happen , since this class is Cloneable . throw new InternalError ( "Could not clone component" ) ; } }
void test12 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; Attribute attribute0 = new Attribute ( ) ; entity0 . addAttribute ( attribute0 ) ; entity0 . removeAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test13 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; entity0 . removeAttribute ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComment ( ) { return comment ; }
void test14 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; Attribute attribute0 = new Attribute ( ) ; entity0 . addAttribute ( attribute0 ) ; attribute0 . setColumnName ( "" ) ; entity0 . getAttributeByColumnName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test15 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; Attribute attribute0 = new Attribute ( ) ; attribute0 . setColumnName ( "gTSZIC`4a" ) ; entity0 . addAttribute ( attribute0 ) ; Attribute attribute1 = entity0 . getAttributeByColumnName ( "gTSZIC`4a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test16 ( ) throws Throwable { View view0 = new View ( ) ; Entity entity0 = new Entity ( ) ; Map < Object , Object > map0 = entity0 . getAttributes ( ) ; view0 . addAttributes ( map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPackageName ( ) { return packageName ; }
void test17 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; DocumentImpl documentImpl0 = ( DocumentImpl ) entity0 . toXML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test0 ( ) throws Throwable { ViewBeanInfo viewBeanInfo0 = new ViewBeanInfo ( ) ; PropertyDescriptor [ ] propertyDescriptorArray0 = viewBeanInfo0 . getPropertyDescriptors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PropertyDescriptor [ ] getPropertyDescriptors ( ) { try { PropertyDescriptor _maxFetchSize = new PropertyDescriptor ( "maxFetchSize" , View . class , "getMaxFetchSize" , "setMaxFetchSize" ) ; _maxFetchSize . setDisplayName ( "maxFetchSize" ) ; _maxFetchSize . setShortDescription ( "maxFetchSize" ) ; PropertyDescriptor _version = new PropertyDescriptor ( "version" , View . class , "getVersion" , "setVersion" ) ; _version . setDisplayName ( "version" ) ; _version . setShortDescription ( "version" ) ; PropertyDescriptor _timestamp = new PropertyDescriptor ( "timestamp" , View . class , "getTimestamp" , "setTimestamp" ) ; _timestamp . setDisplayName ( "timestamp" ) ; _timestamp . setShortDescription ( "timestamp" ) ; PropertyDescriptor _attributeCollection = new PropertyDescriptor ( "attributeCollection" , View . class , null , null ) ; _attributeCollection . setDisplayName ( "attributeCollection" ) ; _attributeCollection . setShortDescription ( "attributeCollection" ) ; PropertyDescriptor _attributesSize = new PropertyDescriptor ( "attributesSize" , View . class , "getAttributesSize" , null ) ; _attributesSize . setDisplayName ( "attributesSize" ) ; _attributesSize . setShortDescription ( "attributesSize" ) ; PropertyDescriptor _class = new PropertyDescriptor ( "class" , View . class , "getClass" , null ) ; _class . setDisplayName ( "class" ) ; _class . setShortDescription ( "class" ) ; PropertyDescriptor _targetClassName = new PropertyDescriptor ( "targetClassName" , View . class , "getTargetClassName" , "setTargetClassName" ) ; _targetClassName . setDisplayName ( "targetClassName" ) ; _targetClassName . setShortDescription ( "targetClassName" ) ; PropertyDescriptor _packageName = new PropertyDescriptor ( "packageName" , View . class , "getPackageName" , "setPackageName" ) ; _packageName . setDisplayName ( "packageName" ) ; _packageName . setShortDescription ( "packageName" ) ; PropertyDescriptor _name = new PropertyDescriptor ( "name" , View . class , "getName" , "setName" ) ; _name . setDisplayName ( "name" ) ; _name . setShortDescription ( "name" ) ; PropertyDescriptor _comment = new PropertyDescriptor ( "comment" , View . class , "getComment" , "setComment" ) ; _comment . setDisplayName ( "comment" ) ; _comment . setShortDescription ( "comment" ) ; PropertyDescriptor _attributes = new PropertyDescriptor ( "attributes" , View . class , "getAttributes" , null ) ; _attributes . setDisplayName ( "attributes" ) ; _attributes . setShortDescription ( "attributes" ) ; PropertyDescriptor _tokenValues = new PropertyDescriptor ( "tokenValues" , View . class , "getTokenValues" , "setTokenValues" ) ; _tokenValues . setDisplayName ( "tokenValues" ) ; _tokenValues . setShortDescription ( "tokenValues" ) ; PropertyDescriptor _startIndex = new PropertyDescriptor ( "startIndex" , View . class , "getStartIndex" , "setStartIndex" ) ; _startIndex . setDisplayName ( "startIndex" ) ; _startIndex . setShortDescription ( "startIndex" ) ; PropertyDescriptor _sqlQuery = new PropertyDescriptor ( "sqlQuery" , View . class , "getSqlQuery" , "setSqlQuery" ) ; _sqlQuery . setDisplayName ( "sqlQuery" ) ; _sqlQuery . setShortDescription ( "sqlQuery" ) ; PropertyDescriptor _rowsPerPage = new PropertyDescriptor ( "rowsPerPage" , View . class , "getRowsPerPage" , "setRowsPerPage" ) ; _rowsPerPage . setDisplayName ( "rowsPerPage" ) ; _rowsPerPage . setShortDescription ( "rowsPerPage" ) ; PropertyDescriptor _rowCountMethod = new PropertyDescriptor ( "rowCountMethod" , View . class , "getRowCountMethod" , "setRowCountMethod" ) ; _rowCountMethod . setDisplayName ( "rowCountMethod" ) ; _rowCountMethod . setShortDescription ( "rowCountMethod" ) ; PropertyDescriptor _retrieveRowCount = new PropertyDescriptor ( "retrieveRowCount" , View . class , "getRetrieveRowCount" , "setRetrieveRowCount" ) ; _retrieveRowCount . setDisplayName ( "retrieveRowCount" ) ; _retrieveRowCount . setShortDescription ( "retrieveRowCount" ) ; PropertyDescriptor _parameters = new PropertyDescriptor ( "parameters" , View . class , "getParameters" , "setParameters" ) ; _parameters . setDisplayName ( "parameters" ) ; _parameters . setShortDescription ( "parameters" ) ; PropertyDescriptor _fullName = new PropertyDescriptor ( "fullName" , View . class , "getFullName" , null ) ; _fullName . setDisplayName ( "fullName" ) ; _fullName . setShortDescription ( "fullName" ) ; PropertyDescriptor _bindVariables = new PropertyDescriptor ( "bindVariables" , View . class , "getBindVariables" , "setBindVariables" ) ; _bindVariables . setDisplayName ( "bindVariables" ) ; _bindVariables . setShortDescription ( "bindVariables" ) ; PropertyDescriptor [ ] pds = new PropertyDescriptor [ ] { _bindVariables , _fullName , _parameters , _retrieveRowCount , _rowCountMethod , _rowsPerPage , _sqlQuery , _startIndex , _tokenValues , _attributes , _comment , _name , _packageName , _targetClassName , _class , _attributesSize , _attributeCollection , _timestamp , _version , _maxFetchSize } ; return pds ; } catch ( IntrospectionException e ) { e . printStackTrace ( ) ; return null ; } }
void test0 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int store ( Map target ) throws Exception { return EntityHelper . store ( getConnection ( ) , this , target ) ; }
void test1 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int remove ( Map target ) throws Exception { return EntityHelper . remove ( getConnection ( ) , this , target ) ; }
void test2 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int create ( Map target ) throws Exception { return EntityHelper . create ( getConnection ( ) , this , target ) ; }
void test3 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void load ( String pParameterFile ) { parameterFile = pParameterFile ; try { / / Load the file ClassLoader cl = framework . ApplicationParameters . class . getClassLoader ( ) ; InputStream is = cl . getResourceAsStream ( parameterFile ) ; if ( is = = null ) throw new RuntimeException ( parameterFile + " could not be found ! " ) ; / / Parse the document DocumentBuilderFactory dbf = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder db = dbf . newDocumentBuilder ( ) ; parameterDocument = db . parse ( is ) ; / / Get the application mandatory parameters FRAMEWORK_APPLICATION_NAME = getAsMandatoryString ( "framework / mandatory / application / name" ) ; FRAMEWORK_APPLICATION_VERSION = getAsMandatoryString ( "framework / mandatory / application / version" ) ; FRAMEWORK_APPLICATION_BASE_DIRECTORY = getAsMandatoryString ( "framework / mandatory / application / baseDirectory" ) ; FRAMEWORK_APPLICATION_WEB_PATH = getAsMandatoryString ( "framework / mandatory / application / webPath" ) ; FRAMEWORK_APPLICATION_WEB_DIRECTORY = FRAMEWORK_APPLICATION_BASE_DIRECTORY + FRAMEWORK_APPLICATION_WEB_PATH ; FRAMEWORK_APPLICATION_SOURCE_PATH = getAsMandatoryString ( "framework / mandatory / application / sourcePath" ) ; FRAMEWORK_APPLICATION_SOURCE_DIRECTORY = FRAMEWORK_APPLICATION_BASE_DIRECTORY + FRAMEWORK_APPLICATION_SOURCE_PATH ; FRAMEWORK_APPLICATION_URL = getAsMandatoryString ( "framework / mandatory / application / url" ) ; FRAMEWORK_APPLICATION_RUN_MODE = getAsMandatoryString ( "framework / mandatory / application / runMode" ) ; / / Set system properties setSystemProperties ( ) ; log . info ( "load : " + FRAMEWORK_APPLICATION_NAME + " " + FRAMEWORK_APPLICATION_VERSION + " initialized ! " ) ; } catch ( Exception e ) { throw new RuntimeException ( "load : Error while loading parameter file '" + pParameterFile + "' : " + e . getMessage ( ) ) ; } }
void test4 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test5 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test6 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test7 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int remove ( Map target ) throws Exception { return EntityHelper . remove ( getConnection ( ) , this , target ) ; }
void test8 ( ) throws Throwable { Entity entity0 = new Entity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String result = null ; try { result = String . valueOf ( describe ( ) ) ; } catch ( Exception e ) { log . warn ( this . getClass ( ) . getName ( ) + " . toString " , e ) ; } return result ; }
void test2 ( ) throws Throwable { DbCollectionManager dbCollectionManager0 = new DbCollectionManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCacheTimeToLive ( ) { return ApplicationParameters . getAsLongType ( "framework . cache . " + getType ( ) . toLowerCase ( ) + " . timeToLive" , CACHE_LIVE_FOREVER ) ; }
void test4 ( ) throws Throwable { String string0 = DbCollectionManager . dump ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dump ( String name , String packageName ) throws Exception { Component component = read ( name , packageName ) ; Document doc = convertDOM ( component ) ; return XMLUtils . toString ( doc ) ; }
void test5 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; Collection < Object > collection0 = DbCollectionManager . get ( ( Collection ) linkedList0 , " < ! - - - - - - - - - - - - - - - - DbCollection ( hits = 0% ) - - - - - - - - - - - - - - - - > \n < ! - - LRUList = null - - > " , " < ! - - - - - - - - - - - - - - - - DbCollection ( hits = 0% ) - - - - - - - - - - - - - - - - > \n < ! - - LRUList = null - - > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection get ( String name , String packageName ) throws Exception { return get ( name , packageName , getValueColumnName ( ) , getLabelColumnName ( ) ) ; }
void test6 ( ) throws Throwable { Collection < Object > collection0 = DbCollectionManager . get ( ( Collection ) null , "M . ue" , "M . ue" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection get ( String name , String packageName ) throws Exception { return get ( name , packageName , getValueColumnName ( ) , getLabelColumnName ( ) ) ; }
void test1 ( ) throws Throwable { ToolsModule toolsModule0 = new ToolsModule ( "CMX7n ! e * 5 ; * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) throws Exception { return ! ( connection = = null | | connection . isClosed ( ) ) ; }
void test3 ( ) throws Throwable { OraclePoolImpl oraclePoolImpl0 = new OraclePoolImpl ( ) ; oraclePoolImpl0 . internalInitialize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPoolName ( ) { return poolName ; }
void test0 ( ) throws Throwable { OraclePoolImpl oraclePoolImpl0 = ( OraclePoolImpl ) JDBCPoolManager . getPool ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQueryValidation ( ) { return queryValidation ; }
void test2 ( ) throws Throwable { JDBCPoolManager jDBCPoolManager0 = new JDBCPoolManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpAllStatistics ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( "Pool Manager Statistics : \n" ) ; try { Iterator it = pools . keySet ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { String poolName = ( String ) it . next ( ) ; sb . append ( getPool ( poolName ) . dumpPoolStatistics ( ) ) ; if ( it . hasNext ( ) ) sb . append ( "\n" ) ; } } catch ( Exception e ) { log . error ( "dumpAllStatistics : " , e ) ; sb . append ( "Error while gettting Pool Manager Statistics" ) ; } return sb . toString ( ) ; }
void test4 ( ) throws Throwable { String string0 = JDBCPoolManager . getPoolClassName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPoolClassName ( String poolName ) { String value = ApplicationParameters . getAsString ( "framework . persistence . jdbc . pool . " + poolName + " . className" ) ; String defaultValue = ApplicationParameters . getAsString ( "framework . persistence . jdbc . pool . " + DEFAULT_POOL_NAME + " . className" , DEFAULT_POOL_CLASSNAME ) ; value = value ! = null ? value : defaultValue ; return value ; }
void test5 ( ) throws Throwable { Collection < Object > collection0 = JDBCPoolManager . getDeclaredPoolNamesAsDbCollection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( resultList = = null | | resultList . isEmpty ( ) ) ; }
void test7 ( ) throws Throwable { String string0 = JDBCPoolManager . dumpAllStatistics ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpAllStatistics ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( "Pool Manager Statistics : \n" ) ; try { Iterator it = pools . keySet ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { String poolName = ( String ) it . next ( ) ; sb . append ( getPool ( poolName ) . dumpPoolStatistics ( ) ) ; if ( it . hasNext ( ) ) sb . append ( "\n" ) ; } } catch ( Exception e ) { log . error ( "dumpAllStatistics : " , e ) ; sb . append ( "Error while gettting Pool Manager Statistics" ) ; } return sb . toString ( ) ; }
void test0 ( ) throws Throwable { DBCPoolImpl dBCPoolImpl0 = new DBCPoolImpl ( ) ; dBCPoolImpl0 . setMaxLimit ( 744 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpPoolStatistics ( ) { StringBuffer sb = new StringBuffer ( "'" ) ; sb . append ( poolName ) . append ( "' pool statistics : " ) ; sb . append ( countActiveConnections ( ) ) . append ( " actives + " ) ; sb . append ( countIdleConnections ( ) ) . append ( " idles = " ) ; sb . append ( getPoolSize ( ) ) . append ( " total connections" ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { DBCPoolImpl dBCPoolImpl0 = new DBCPoolImpl ( ) ; dBCPoolImpl0 . setMinLimit ( 338 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpPoolStatistics ( ) { StringBuffer sb = new StringBuffer ( "'" ) ; sb . append ( poolName ) . append ( "' pool statistics : " ) ; sb . append ( countActiveConnections ( ) ) . append ( " actives + " ) ; sb . append ( countIdleConnections ( ) ) . append ( " idles = " ) ; sb . append ( getPoolSize ( ) ) . append ( " total connections" ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { DBCPoolImpl dBCPoolImpl0 = new DBCPoolImpl ( ) ; String string0 = dBCPoolImpl0 . dumpPoolStatistics ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpPoolStatistics ( ) { StringBuffer sb = new StringBuffer ( "'" ) ; sb . append ( poolName ) . append ( "' pool statistics : " ) ; sb . append ( countActiveConnections ( ) ) . append ( " actives + " ) ; sb . append ( countIdleConnections ( ) ) . append ( " idles = " ) ; sb . append ( getPoolSize ( ) ) . append ( " total connections" ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { OraclePoolImpl oraclePoolImpl0 = new OraclePoolImpl ( ) ; String string0 = oraclePoolImpl0 . getQueryValidation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQueryValidation ( ) { return queryValidation ; }
void test1 ( ) throws Throwable { OraclePoolImpl oraclePoolImpl0 = new OraclePoolImpl ( ) ; int int0 = oraclePoolImpl0 . getDebugLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDebugLevel ( ) { return debugLevel ; }
void test2 ( ) throws Throwable { OraclePoolImpl oraclePoolImpl0 = new OraclePoolImpl ( ) ; Map < Object , Object > map0 = oraclePoolImpl0 . getTypeMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getTypeMap ( ) { return typeMap ; }
void test3 ( ) throws Throwable { OraclePoolImpl oraclePoolImpl0 = new OraclePoolImpl ( ) ; String string0 = oraclePoolImpl0 . getDriver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDriver ( ) { return driver ; }
void test4 ( ) throws Throwable { OraclePoolImpl oraclePoolImpl0 = new OraclePoolImpl ( ) ; oraclePoolImpl0 . setPoolName ( "" ) ; oraclePoolImpl0 . initialize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsername ( ) { return username ; }
void test6 ( ) throws Throwable { OraclePoolImpl oraclePoolImpl0 = new OraclePoolImpl ( ) ; boolean boolean0 = oraclePoolImpl0 . isAutocommit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAutocommit ( ) { return isAutocommit ; }
void test8 ( ) throws Throwable { OraclePoolImpl oraclePoolImpl0 = new OraclePoolImpl ( ) ; int int0 = oraclePoolImpl0 . getMaxLimit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxLimit ( ) { return maxLimit ; }
void test9 ( ) throws Throwable { OraclePoolImpl oraclePoolImpl0 = new OraclePoolImpl ( ) ; boolean boolean0 = oraclePoolImpl0 . doValidation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean doValidation ( ) { return doValidation ; }
void test10 ( ) throws Throwable { OraclePoolImpl oraclePoolImpl0 = new OraclePoolImpl ( ) ; int int0 = oraclePoolImpl0 . getMinLimit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinLimit ( ) { return minLimit ; }
void test11 ( ) throws Throwable { OraclePoolImpl oraclePoolImpl0 = new OraclePoolImpl ( ) ; oraclePoolImpl0 . releaseConnection ( ( Connection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsername ( ) { return username ; }
void test12 ( ) throws Throwable { OraclePoolImpl oraclePoolImpl0 = new OraclePoolImpl ( ) ; String string0 = oraclePoolImpl0 . getQueryTimestamp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQueryTimestamp ( ) { return queryTimestamp ; }
void test14 ( ) throws Throwable { OraclePoolImpl oraclePoolImpl0 = new OraclePoolImpl ( ) ; String string0 = oraclePoolImpl0 . getQueryUsername ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQueryUsername ( ) { return queryUsername ; }
void test0 ( ) throws Throwable { CustomFieldChecks customFieldChecks0 = new CustomFieldChecks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { ValidatorAction validatorAction0 = new ValidatorAction ( ) ; Field field0 = new Field ( ) ; ActionErrors actionErrors0 = new ActionErrors ( ) ; boolean boolean0 = CustomFieldChecks . validateClassName ( ( Object ) false , validatorAction0 , field0 , actionErrors0 , ( HttpServletRequest ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean validateClassName ( Object bean , ValidatorAction va , Field field , ActionErrors errors , HttpServletRequest request ) { String value = null ; if ( isString ( bean ) ) value = ( String ) bean ; else value = ValidatorUtil . getValueAsString ( bean , field . getProperty ( ) ) ; if ( ! ObjectUtils . isClassName ( value ) ) { / / Default method / / ActionError error = Resources . getActionError ( request , va , field ) ; / / If the messageKey is defined at form validation definition / * Arg arg0 = field . getArg0 ( ) ; String messageKey = arg0 . getKey ( ) ; ActionError error = new ActionError ( messageKey , value ) ; * / / / The messageKey is defined at rule definition String messageKey = va . getMsg ( ) ; ActionError error = new ActionError ( messageKey , value ) ; errors . add ( field . getKey ( ) , error ) ; return false ; } else return true ; }
void test2 ( ) throws Throwable { Field field0 = new Field ( ) ; ActionErrors actionErrors0 = new ActionErrors ( ) ; boolean boolean0 = CustomFieldChecks . validateClassName ( ( Object ) "java . lang . Object" , ( ValidatorAction ) null , field0 , actionErrors0 , ( HttpServletRequest ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean validateClassName ( Object bean , ValidatorAction va , Field field , ActionErrors errors , HttpServletRequest request ) { String value = null ; if ( isString ( bean ) ) value = ( String ) bean ; else value = ValidatorUtil . getValueAsString ( bean , field . getProperty ( ) ) ; if ( ! ObjectUtils . isClassName ( value ) ) { / / Default method / / ActionError error = Resources . getActionError ( request , va , field ) ; / / If the messageKey is defined at form validation definition / * Arg arg0 = field . getArg0 ( ) ; String messageKey = arg0 . getKey ( ) ; ActionError error = new ActionError ( messageKey , value ) ; * / / / The messageKey is defined at rule definition String messageKey = va . getMsg ( ) ; ActionError error = new ActionError ( messageKey , value ) ; errors . add ( field . getKey ( ) , error ) ; return false ; } else return true ; }
void test3 ( ) throws Throwable { ValidatorAction validatorAction0 = new ValidatorAction ( ) ; Field field0 = new Field ( ) ; ActionErrors actionErrors0 = new ActionErrors ( ) ; boolean boolean0 = CustomFieldChecks . validateJavaName ( ( Object ) validatorAction0 , validatorAction0 , field0 , actionErrors0 , ( HttpServletRequest ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( resultList = = null | | resultList . isEmpty ( ) ) ; }
void test4 ( ) throws Throwable { ValidatorAction validatorAction0 = new ValidatorAction ( ) ; Field field0 = new Field ( ) ; ActionErrors actionErrors0 = new ActionErrors ( ) ; boolean boolean0 = CustomFieldChecks . validateJavaName ( ( Object ) "HTTP" , validatorAction0 , field0 , actionErrors0 , ( HttpServletRequest ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean validateJavaName ( Object bean , ValidatorAction va , Field field , ActionErrors errors , HttpServletRequest request ) { String value = null ; if ( isString ( bean ) ) value = ( String ) bean ; else value = ValidatorUtil . getValueAsString ( bean , field . getProperty ( ) ) ; if ( ! StringUtils . isJavaName ( value ) ) { String messageKey = va . getMsg ( ) ; ActionError error = new ActionError ( messageKey , value ) ; errors . add ( field . getKey ( ) , error ) ; return false ; } else return true ; }
void test6 ( ) throws Throwable { ValidatorAction validatorAction0 = new ValidatorAction ( ) ; Field field0 = new Field ( ) ; ActionErrors actionErrors0 = new ActionErrors ( ) ; boolean boolean0 = CustomFieldChecks . validateJavaPackageName ( ( Object ) null , validatorAction0 , field0 , actionErrors0 , ( HttpServletRequest ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean validateJavaPackageName ( Object bean , ValidatorAction va , Field field , ActionErrors errors , HttpServletRequest request ) { String value = null ; if ( isString ( bean ) ) value = ( String ) bean ; else value = ValidatorUtil . getValueAsString ( bean , field . getProperty ( ) ) ; if ( ! StringUtils . isJavaPackageName ( value ) ) { String messageKey = va . getMsg ( ) ; ActionError error = new ActionError ( messageKey , value ) ; errors . add ( field . getKey ( ) , error ) ; return false ; } else return true ; }
void test2 ( ) throws Throwable { FileUtils fileUtils0 = new FileUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassLoaderRootDirectory ( ) throws Exception { return getCLFileDirectory ( " / " ) ; }
void test4 ( ) throws Throwable { String string0 = FileUtils . getClassLoaderRootDirectory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassLoaderRootDirectory ( ) throws Exception { return getCLFileDirectory ( " / " ) ; }
void test7 ( ) throws Throwable { Class < ? > class0 = FileUtils . class ; String string0 = FileUtils . getCLFileDirectory ( ( Class ) class0 , " [ " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCLFileDirectory ( String fileName ) throws Exception { return getCLFileDirectory ( null , fileName ) ; }
void test8 ( ) throws Throwable { boolean boolean0 = FileUtils . checkFile ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkFile ( String sPath ) { File aFile = new File ( sPath ) ; return ( aFile . exists ( ) & & ( aFile . isFile ( ) ) ) ; }
void test9 ( ) throws Throwable { boolean boolean0 = FileUtils . checkFile ( " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkFile ( String sPath ) { File aFile = new File ( sPath ) ; return ( aFile . exists ( ) & & ( aFile . isFile ( ) ) ) ; }
void test0 ( ) throws Throwable { ObjectUtils objectUtils0 = new ObjectUtils ( ) ; Class < Object > class0 = objectUtils0 . getTargetClass ( ( Object ) "file : / usr / local / packages / java / jdk1 . 6 . 0_29 / jre / lib / rt . jar ! / java / lang / Class . class" , "file : / usr / local / packages / java / jdk1 . 6 . 0_29 / jre / lib / rt . jar ! / java / lang / Class . class" , "file : / usr / local / packages / java / jdk1 . 6 . 0_29 / jre / lib / rt . jar ! / java / lang / Class . class" ) ; ObjectUtils . copyProperties ( ( Object ) "file : / usr / local / packages / java / jdk1 . 6 . 0_29 / jre / lib / rt . jar ! / java / lang / Class . class" , ( Object ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void copyProperties ( View view , DynaActionForm viewForm ) throws Exception { / / BeanUtils . copyProperty ( viewForm , view ) ; viewForm . set ( "name" , view . getName ( ) ) ; viewForm . set ( "packageName" , view . getPackageName ( ) ) ; viewForm . set ( "targetClassName" , view . getTargetClassName ( ) ) ; viewForm . set ( "comment" , view . getComment ( ) ) ; viewForm . set ( "sqlQuery" , view . getSqlQuery ( ) ) ; viewForm . set ( "attributes" , ( Attribute [ ] ) view . getAttributeCollection ( ) . toArray ( new Attribute [ view . getAttributesSize ( ) ] ) ) ; viewForm . set ( "oldAttributes" , ( Attribute [ ] ) ( ( View ) view . clone ( ) ) . getAttributeCollection ( ) . toArray ( new Attribute [ view . getAttributesSize ( ) ] ) ) ; }
void test1 ( ) throws Throwable { Class < ? > class0 = Class . class ; String string0 = ObjectUtils . getFullDirectory ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullDirectory ( Class clazz ) { URL classURL = clazz . getResource ( getClassName ( clazz ) + " . class" ) ; String classDirectory = classURL . getFile ( ) ; return classDirectory ; }
void test2 ( ) throws Throwable { boolean boolean0 = ObjectUtils . isClassName ( " { } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClassName ( String className ) { try { Class . forName ( className ) ; return true ; } catch ( Exception e ) { return false ; } }
void test5 ( ) throws Throwable { Collection < Object > collection0 = ObjectUtils . toCollection ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( resultList = = null | | resultList . isEmpty ( ) ) ; }
void test6 ( ) throws Throwable { HashMap < Integer , Object > hashMap0 = new HashMap < Integer , Object > ( ) ; ObjectUtils . copyProperties ( ( Map ) hashMap0 , ( Object ) " { } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( resultList = = null | | resultList . isEmpty ( ) ) ; }
void test7 ( ) throws Throwable { HashMap < Class < Object > , Object > hashMap0 = new HashMap < Class < Object > , Object > ( ) ; ObjectUtils . copyProperties ( ( Object ) hashMap0 , ( Object ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void copyProperties ( View view , DynaActionForm viewForm ) throws Exception { / / BeanUtils . copyProperty ( viewForm , view ) ; viewForm . set ( "name" , view . getName ( ) ) ; viewForm . set ( "packageName" , view . getPackageName ( ) ) ; viewForm . set ( "targetClassName" , view . getTargetClassName ( ) ) ; viewForm . set ( "comment" , view . getComment ( ) ) ; viewForm . set ( "sqlQuery" , view . getSqlQuery ( ) ) ; viewForm . set ( "attributes" , ( Attribute [ ] ) view . getAttributeCollection ( ) . toArray ( new Attribute [ view . getAttributesSize ( ) ] ) ) ; viewForm . set ( "oldAttributes" , ( Attribute [ ] ) ( ( View ) view . clone ( ) ) . getAttributeCollection ( ) . toArray ( new Attribute [ view . getAttributesSize ( ) ] ) ) ; }
void test8 ( ) throws Throwable { boolean boolean0 = ObjectUtils . valuesAreDifferent ( ( Object ) " { } " , ( Object ) "ObjectUtils" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean valuesAreDifferent ( Object firstValue , Object secondValue ) { if ( ( firstValue = = null ) & & ( secondValue = = null ) ) return false ; else if ( firstValue ! = null ) return ! firstValue . equals ( secondValue ) ; else return true ; }
void test9 ( ) throws Throwable { Collection < Object > collection0 = ObjectUtils . toCollection ( ( Object ) "file : / mnt / fastdata / ac1gf / SF110 / dist / 38_javabullboard / javabullboard . jar ! / framework / util / ObjectUtils . class" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean valuesAreDifferent ( Object firstValue , Object secondValue ) { if ( ( firstValue = = null ) & & ( secondValue = = null ) ) return false ; else if ( firstValue ! = null ) return ! firstValue . equals ( secondValue ) ; else return true ; }
void test10 ( ) throws Throwable { boolean boolean0 = ObjectUtils . valuesAreDifferent ( ( Object ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean valuesAreDifferent ( Object firstValue , Object secondValue ) { if ( ( firstValue = = null ) & & ( secondValue = = null ) ) return false ; else if ( firstValue ! = null ) return ! firstValue . equals ( secondValue ) ; else return true ; }
void test11 ( ) throws Throwable { Object object0 = new Object ( ) ; boolean boolean0 = ObjectUtils . valuesAreDifferent ( object0 , object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean valuesAreDifferent ( Object firstValue , Object secondValue ) { if ( ( firstValue = = null ) & & ( secondValue = = null ) ) return false ; else if ( firstValue ! = null ) return ! firstValue . equals ( secondValue ) ; else return true ; }
void test12 ( ) throws Throwable { Class < ? > class0 = ObjectUtils . class ; boolean boolean0 = ObjectUtils . isPrimitive ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPrimitive ( String argSpec ) throws Exception { Class c = null ; boolean primitive = false ; try { c = Class . forName ( argSpec ) ; } catch ( ClassNotFoundException cnfe ) { if ( ( argSpec . equals ( "int" ) ) | | ( argSpec . equals ( "boolean" ) ) | | ( argSpec . equals ( "float" ) ) | | ( argSpec . equals ( "short" ) ) | | ( argSpec . equals ( "char" ) ) | | ( argSpec . equals ( "byte" ) ) | | ( argSpec . equals ( "double" ) ) | | ( argSpec . equals ( "long" ) ) ) { primitive = true ; } else { throw new Exception ( " [ isPrimitive ] " + argSpec + "is unknown" ) ; } } return primitive ; }
void test13 ( ) throws Throwable { Class < ? > class0 = Collection . class ; boolean boolean0 = ObjectUtils . isMatching ( class0 , class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMatching ( Class clazz , Class target ) { if ( ! clazz . isArray ( ) ) { return ( clazz = = target ) ; } else { Class clazzz = clazz . getComponentType ( ) ; return isMatching ( clazzz , target ) ; } }
void test14 ( ) throws Throwable { Class < ? > class0 = Collection . class ; Class < ? > class1 = Map . class ; boolean boolean0 = ObjectUtils . isMatching ( class0 , class1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMatching ( Class clazz , Class target ) { if ( ! clazz . isArray ( ) ) { return ( clazz = = target ) ; } else { Class clazzz = clazz . getComponentType ( ) ; return isMatching ( clazzz , target ) ; } }
void test15 ( ) throws Throwable { Collection < Object > collection0 = ObjectUtils . toCollection ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection toCollection ( Object value ) { if ( value = = null ) return null ; Collection result = new ArrayList ( ) ; if ( value instanceof Collection ) { if ( log . isDebugEnabled ( ) ) log . debug ( "toCollection : Value is a already a Collection" ) ; result . addAll ( ( Collection ) value ) ; } else if ( value . getClass ( ) . isArray ( ) ) { if ( log . isDebugEnabled ( ) ) log . debug ( "toCollection : Value is an array" ) ; result . addAll ( Arrays . asList ( ( Object [ ] ) value ) ) ; } else { if ( log . isDebugEnabled ( ) ) log . debug ( "toCollection : Value is considered as a single value" ) ; result . add ( value ) ; } return result ; }
void test16 ( ) throws Throwable { Collection < Object > collection0 = ObjectUtils . toCollection ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( resultList = = null | | resultList . isEmpty ( ) ) ; }
void test18 ( ) throws Throwable { ObjectUtils objectUtils0 = new ObjectUtils ( ) ; Class < Object > class0 = objectUtils0 . getTargetClass ( ( Object ) "file : / usr / local / packages / java / jdk1 . 6 . 0_29 / jre / lib / rt . jar ! / java / lang / Class . class" , "file : / usr / local / packages / java / jdk1 . 6 . 0_29 / jre / lib / rt . jar ! / java / lang / Class . class" , "file : / usr / local / packages / java / jdk1 . 6 . 0_29 / jre / lib / rt . jar ! / java / lang / Class . class" ) ; Class < Object > class1 = objectUtils0 . getTargetClass ( ( Object ) class0 , "file : / usr / local / packages / java / jdk1 . 6 . 0_29 / jre / lib / rt . jar ! / java / lang / Class . class" , "file : / usr / local / packages / java / jdk1 . 6 . 0_29 / jre / lib / rt . jar ! / java / lang / Class . class" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getTargetClass ( Object classDefinedTarget , String definitionDefinedTargetClassName , String defaultTargetClassName ) throws Exception { Class factory = null ; if ( classDefinedTarget = = null ) { String className = StringUtils . exists ( definitionDefinedTargetClassName ) ? definitionDefinedTargetClassName : defaultTargetClassName ; factory = ObjectUtils . forName ( className ) ; } else factory = ( classDefinedTarget instanceof Class ) ? ( Class ) classDefinedTarget : classDefinedTarget . getClass ( ) ; return factory ; }
void test1 ( ) throws Throwable { TuningUtils tuningUtils0 = new TuningUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TuningUtils ( ) { }
void test4 ( ) throws Throwable { NoOpLog noOpLog0 = new NoOpLog ( "" ) ; TuningUtils . startTuning ( ( Log ) noOpLog0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void startTuning ( String category ) { startTuning ( log , category ) ; }
void test6 ( ) throws Throwable { NoOpLog noOpLog0 = new NoOpLog ( "" ) ; TuningUtils . stopTuning ( ( Log ) noOpLog0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void stopTuning ( String category ) { stopTuning ( log , category ) ; }
void test7 ( ) throws Throwable { Class < ? > class0 = TuningUtils . class ; Jdk14Logger jdk14Logger0 = new Jdk14Logger ( "" ) ; TuningUtils . stopTuning ( ( Log ) jdk14Logger0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void stopTuning ( String category ) { stopTuning ( log , category ) ; }
void test2 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; DocumentImpl documentImpl0 = ( DocumentImpl ) valueListHandler0 . toXML ( " , 4QJnj & f9 ] . K" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Document toXML ( ) { return toXML ( null ) ; }
void test3 ( ) throws Throwable { XMLUtils xMLUtils0 = new XMLUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" XMLUtils ( ) { }
void test5 ( ) throws Throwable { CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl ( true ) ; ElementImpl elementImpl0 = ( ElementImpl ) XMLUtils . convertDOM ( ( Document ) coreDocumentImpl0 , ( Object ) "" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Document convertDOM ( Component component ) throws Exception { View view = ( View ) component ; Document doc = new DocumentImpl ( ) ; Element viewElement = doc . createElement ( getType ( ) . toLowerCase ( ) ) ; Element sqlQuery = doc . createElement ( "sqlQuery" ) ; CDATASection cdataSqlQuery = doc . createCDATASection ( "\n" + view . getSqlQuery ( ) + "\n" ) ; sqlQuery . appendChild ( cdataSqlQuery ) ; viewElement . appendChild ( sqlQuery ) ; Element vlhElement = doc . createElement ( "valueListHandler" ) ; vlhElement . setAttribute ( "retrieveRowCount" , ConvertUtils . convertString ( view . hasRetrieveRowCount ( ) ) ) ; vlhElement . setAttribute ( "rowCountMethod" , view . getRowCountMethod ( ) ) ; vlhElement . setAttribute ( "rowsPerPage" , ConvertUtils . convertString ( view . getRowsPerPage ( ) ) ) ; viewElement . appendChild ( vlhElement ) ; Element tuningElement = doc . createElement ( "tuning" ) ; / / tuningElement . setAttribute ( "fetchSize" , ConvertUtils . convertString ( view . getFetchSize ( ) ) ) ; tuningElement . setAttribute ( "maxFetchSize" , ConvertUtils . convertString ( view . getMaxFetchSize ( ) ) ) ; / / tuningElement . setAttribute ( "maxRows" , ConvertUtils . convertString ( view . getMaxRows ( ) ) ) ; viewElement . appendChild ( tuningElement ) ; convertDOM ( doc , viewElement , view ) ; / / Debug Info . . . if ( log . isDebugEnabled ( ) ) log . debug ( "convertDOM : doc = " + XMLUtils . toString ( doc ) ) ; return doc ; }
void test0 ( ) throws Throwable { Class < ? > class0 = Timestamp . class ; Locale locale0 = Locale . JAPAN ; String string0 = ( String ) ConvertUtils . convert ( "K" , ( Class ) class0 , "K" , locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convert ( String value , Class clazz ) { return convert ( value , clazz , null , null ) ; }
void test1 ( ) throws Throwable { Date date0 = ConvertUtils . convertUtilDate ( "bpx`R" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . util . Date convertUtilDate ( String value ) { return convertUtilDate ( value , null , null , null ) ; }
void test4 ( ) throws Throwable { BigDecimal bigDecimal0 = ConvertUtils . convertBigDecimal ( "hh : mm : ss" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigDecimal convertBigDecimal ( String value ) { return convertBigDecimal ( value , null ) ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; Class < ? > class0 = Float . class ; Object object0 = ConvertUtils . convert ( stringArray0 , ( Class ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convert ( String value , Class clazz ) { return convert ( value , clazz , null , null ) ; }
void test6 ( ) throws Throwable { Locale locale0 = Locale . KOREAN ; Class < ? > class0 = Short . class ; Short short0 = ( Short ) ConvertUtils . convert ( " + ] q'h'" , ( Class ) class0 , "1970 - 01 - 01" , locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convert ( String value , Class clazz ) { return convert ( value , clazz , null , null ) ; }
void test9 ( ) throws Throwable { Class < ? > class0 = BigInteger . class ; BigInteger bigInteger0 = ( BigInteger ) ConvertUtils . convert ( " + ] q'h'" , ( Class ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convert ( String value , Class clazz ) { return convert ( value , clazz , null , null ) ; }
void test10 ( ) throws Throwable { Locale locale0 = ConvertUtils . getDefaultLocale ( ) ; java . sql . Date date0 = ConvertUtils . convertSqlDate ( "0" , "0" , locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Date convertSqlDate ( String value ) { return convertSqlDate ( value , null , null , null ) ; }
void test11 ( ) throws Throwable { java . sql . Date date0 = ConvertUtils . convertSqlDate ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Date convertSqlDate ( String value ) { return convertSqlDate ( value , null , null , null ) ; }
void test12 ( ) throws Throwable { String string0 = ConvertUtils . convertString ( 1587 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertString ( int obj ) { return String . valueOf ( obj ) ; }
void test13 ( ) throws Throwable { ConvertUtils convertUtils0 = new ConvertUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultDatePattern ( ) { return ApplicationParameters . getAsString ( "framework . util . convert . defaultDatePattern" , "yyyy - MM - dd" ) ; }
void test15 ( ) throws Throwable { Locale locale0 = Locale . CHINA ; Timestamp timestamp0 = ConvertUtils . convertTimestamp ( " { kS | { rZa ! @W` ; = ( vw" , " { kS | { rZa ! @W` ; = ( vw" , locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . sql . Timestamp convertTimestamp ( String value ) { return convertTimestamp ( value , null , null , null ) ; }
void test16 ( ) throws Throwable { String string0 = ConvertUtils . convertString ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertString ( int obj ) { return String . valueOf ( obj ) ; }
void test17 ( ) throws Throwable { String string0 = ConvertUtils . convertString ( ( Object ) "yyyy - MM - dd hh : mm : ss" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertString ( int obj ) { return String . valueOf ( obj ) ; }
void test18 ( ) throws Throwable { boolean boolean0 = ConvertUtils . convertBooleanType ( "0" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean convertBooleanType ( String value , boolean defaultValue ) { Boolean result = convertBoolean ( value ) ; return result = = null ? defaultValue : result . booleanValue ( ) ; }
void test19 ( ) throws Throwable { Locale locale0 = Locale . JAPANESE ; Date date0 = new Date ( ( long ) 0 ) ; String string0 = ConvertUtils . convertString ( date0 , "bpx`R" , locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertString ( int obj ) { return String . valueOf ( obj ) ; }
void test20 ( ) throws Throwable { Locale locale0 = Locale . JAPANESE ; String string0 = ConvertUtils . convertString ( ( Date ) null , "bpx`R" , locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertString ( int obj ) { return String . valueOf ( obj ) ; }
void test21 ( ) throws Throwable { Date date0 = new Date ( ( - 596L ) ) ; String string0 = ConvertUtils . convertString ( date0 , ( String ) null , ( Locale ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertString ( int obj ) { return String . valueOf ( obj ) ; }
void test22 ( ) throws Throwable { Locale locale0 = Locale . KOREA ; Timestamp timestamp0 = new Timestamp ( 363L ) ; String string0 = ConvertUtils . convertString ( timestamp0 , " * ) " , locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertString ( int obj ) { return String . valueOf ( obj ) ; }
void test23 ( ) throws Throwable { Locale locale0 = Locale . CHINA ; String string0 = ConvertUtils . convertString ( ( Timestamp ) null , " { kS | { rZa ! @W` ; = ( vw" , locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertString ( int obj ) { return String . valueOf ( obj ) ; }
void test24 ( ) throws Throwable { Timestamp timestamp0 = new Timestamp ( 363L ) ; String string0 = ConvertUtils . convertString ( timestamp0 , ( String ) null , ( Locale ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertString ( int obj ) { return String . valueOf ( obj ) ; }
void test25 ( ) throws Throwable { Class < ? > class0 = Date . class ; Character character0 = ( Character ) ConvertUtils . convert ( "'xx6hb'ju$9_`8%mr" , ( Class ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convert ( String value , Class clazz ) { return convert ( value , clazz , null , null ) ; }
void test26 ( ) throws Throwable { Class < ? > class0 = ConvertUtils . class ; Locale locale0 = Locale . JAPANESE ; String string0 = ( String ) ConvertUtils . convert ( "hh : mm : ss" , ( Class ) class0 , "bpx`R" , locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convert ( String value , Class clazz ) { return convert ( value , clazz , null , null ) ; }
void test27 ( ) throws Throwable { Class < ? > class0 = Short . class ; Object object0 = ConvertUtils . convert ( ( String [ ] ) null , ( Class ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convert ( String value , Class clazz ) { return convert ( value , clazz , null , null ) ; }
void test28 ( ) throws Throwable { String [ ] stringArray0 = new String [ 5 ] ; Class < ? > class0 = Short . class ; Object object0 = ConvertUtils . convert ( stringArray0 , ( Class ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convert ( String value , Class clazz ) { return convert ( value , clazz , null , null ) ; }
void test29 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; Class < ? > class0 = Date . class ; Object object0 = ConvertUtils . convert ( stringArray0 , ( Class ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convert ( String value , Class clazz ) { return convert ( value , clazz , null , null ) ; }
void test30 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 0 ] = " * ) " ; stringArray0 [ 1 ] = " * ) " ; stringArray0 [ 2 ] = " * ) " ; Class < ? > class0 = ConvertUtils . class ; Object object0 = ConvertUtils . convert ( stringArray0 , ( Class ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convert ( String value , Class clazz ) { return convert ( value , clazz , null , null ) ; }
void test31 ( ) throws Throwable { boolean boolean0 = ConvertUtils . convertBooleanType ( "KR ( J" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean convertBooleanType ( String value , boolean defaultValue ) { Boolean result = convertBoolean ( value ) ; return result = = null ? defaultValue : result . booleanValue ( ) ; }
void test32 ( ) throws Throwable { boolean boolean0 = ConvertUtils . convertBooleanType ( "false" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean convertBooleanType ( String value , boolean defaultValue ) { Boolean result = convertBoolean ( value ) ; return result = = null ? defaultValue : result . booleanValue ( ) ; }
void test33 ( ) throws Throwable { int int0 = ConvertUtils . convertInt ( "9" , ( - 66 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int convertInt ( String value , int defaultValue ) { Integer result = convertInteger ( value , null ) ; return ( result = = null ? defaultValue : result . intValue ( ) ) ; }
void test34 ( ) throws Throwable { int int0 = ConvertUtils . convertInt ( "bpx`R" , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int convertInt ( String value , int defaultValue ) { Integer result = convertInteger ( value , null ) ; return ( result = = null ? defaultValue : result . intValue ( ) ) ; }
void test0 ( ) throws Throwable { List < Object > list0 = StringUtils . stringToWordList ( "Error while trying to output diagnostics about bad class '" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List stringArrayToList ( String [ ] stringArray ) { return Arrays . asList ( stringArray ) ; }
void test1 ( ) throws Throwable { StringUtils stringUtils0 = new StringUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeywordDirectory ( ) throws Exception { return ApplicationParameters . FRAMEWORK_APPLICATION_BASE_DIRECTORY + getKeywordPath ( ) ; }
void test2 ( ) throws Throwable { boolean boolean0 = StringUtils . isBoolean ( "'VjLui + j ? 5zw~59" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBoolean ( String value , boolean acceptNull ) { return matchPattern ( PATTERN_BOOLEAN , value , acceptNull ) ; }
void test3 ( ) throws Throwable { boolean boolean0 = StringUtils . isFloat ( ( String ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFloat ( String value , boolean acceptNull ) { return matchPattern ( PATTERN_FLOAT , value , acceptNull ) ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . stringToStringArray ( "$RUs`~e > wZ7F7 - m_" , "$RUs`~e > wZ7F7 - m_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] stringToStringArray ( String string , String delimiter ) { List list = stringToList ( string , delimiter ) ; return listToStringArray ( list ) ; }
void test5 ( ) throws Throwable { boolean boolean0 = StringUtils . isEmail ( "'VjLui + j ? 5zw~59" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmail ( String value , boolean acceptNull ) { return matchPattern ( PATTERN_EMAIL , value , acceptNull ) ; }
void test6 ( ) throws Throwable { boolean boolean0 = StringUtils . isInteger ( "" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInteger ( String value , boolean acceptNull ) { return matchPattern ( PATTERN_INTEGER , value , acceptNull ) ; }
void test7 ( ) throws Throwable { boolean boolean0 = StringUtils . isJavaName ( "V * x { _dWSu0rBmFfT$#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isJavaName ( String value ) { return matchPattern ( "^ [ a - zA - Z_ ] \\w * $" , value , false ) ; }
void test8 ( ) throws Throwable { boolean boolean0 = StringUtils . isPositiveFloat ( " . src / main / resources / keyword" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPositiveFloat ( String value , boolean acceptNull ) { return matchPattern ( PATTERN_POSITIVE_FLOAT , value , acceptNull ) ; }
void test9 ( ) throws Throwable { boolean boolean0 = StringUtils . isPositiveInteger ( " | BXL & z#w^DE$ - ( / o" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPositiveInteger ( String value , boolean acceptNull ) { return matchPattern ( PATTERN_POSITIVE_INTEGER , value , acceptNull ) ; }
void test10 ( ) throws Throwable { boolean boolean0 = StringUtils . isWhitespace ( "" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWhitespace ( String value , boolean acceptNull ) { return matchPattern ( PATTERN_WHITESPACE , value , acceptNull ) ; }
void test11 ( ) throws Throwable { boolean boolean0 = StringUtils . isJavaPackageName ( " | BXL & z#w^DE$ - ( / o" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isJavaPackageName ( String value ) { return matchPattern ( "^ [ a - zA - Z_ ] \\w * ( \\ . [ a - zA - Z_ ] \\w * ) * $" , value , true ) ; }
void test13 ( ) throws Throwable { String string0 = StringUtils . replacePattern ( "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replacePattern ( String inString , String patternToReplace , String replacement ) { Map patternReplacements = new HashMap ( ) ; patternReplacements . put ( patternToReplace , replacement ) ; return replacePattern ( inString , patternReplacements ) ; }
void test14 ( ) throws Throwable { HashMap < StringUtils , String > hashMap0 = new HashMap < StringUtils , String > ( ) ; String string0 = StringUtils . prettyPrint ( ( Map ) hashMap0 , "Vb~w ( h'\"kWaSx" , "Vb~w ( h'\"kWaSx" , "Vb~w ( h'\"kWaSx" , "Vb~w ( h'\"kWaSx" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String prettyPrint ( Map keywords , String string , String preffix , String suffix , String caseMethod ) throws Exception { if ( ! exists ( string ) ) return string ; preffix = preffix = = null ? "" : preffix ; suffix = suffix = = null ? "" : suffix ; boolean isUpperCase = "toUpperCase" . equalsIgnoreCase ( caseMethod ) ; boolean isLowerCase = "toLowerCase" . equalsIgnoreCase ( caseMethod ) ; List words = StringUtils . stringToWordList ( string ) ; Iterator it = words . iterator ( ) ; while ( it . hasNext ( ) ) { String word = ( String ) it . next ( ) ; boolean isKeyword = keywords . get ( word . toUpperCase ( ) ) ! = null ; if ( isKeyword ) { String newWord = word ; if ( isUpperCase ) newWord = newWord . toUpperCase ( ) ; else if ( isLowerCase ) newWord = newWord . toLowerCase ( ) ; string = StringUtils . replace ( string , word , preffix + newWord + suffix ) ; } } return string ; }
void test15 ( ) throws Throwable { HashMap < Object , StringUtils > hashMap0 = new HashMap < Object , StringUtils > ( ) ; String string0 = StringUtils . prettyPrint ( ( Map ) hashMap0 , "" , "" , "Error while trying to output diagnostics about bad class '" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String prettyPrint ( Map keywords , String string , String preffix , String suffix , String caseMethod ) throws Exception { if ( ! exists ( string ) ) return string ; preffix = preffix = = null ? "" : preffix ; suffix = suffix = = null ? "" : suffix ; boolean isUpperCase = "toUpperCase" . equalsIgnoreCase ( caseMethod ) ; boolean isLowerCase = "toLowerCase" . equalsIgnoreCase ( caseMethod ) ; List words = StringUtils . stringToWordList ( string ) ; Iterator it = words . iterator ( ) ; while ( it . hasNext ( ) ) { String word = ( String ) it . next ( ) ; boolean isKeyword = keywords . get ( word . toUpperCase ( ) ) ! = null ; if ( isKeyword ) { String newWord = word ; if ( isUpperCase ) newWord = newWord . toUpperCase ( ) ; else if ( isLowerCase ) newWord = newWord . toLowerCase ( ) ; string = StringUtils . replace ( string , word , preffix + newWord + suffix ) ; } } return string ; }
void test16 ( ) throws Throwable { HashMap < Integer , String > hashMap0 = new HashMap < Integer , String > ( ) ; String string0 = StringUtils . prettyPrint ( ( Map ) hashMap0 , "I ? & [ M" , ( String ) null , "I ? & [ M" , "I ? & [ M" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String prettyPrint ( Map keywords , String string , String preffix , String suffix , String caseMethod ) throws Exception { if ( ! exists ( string ) ) return string ; preffix = preffix = = null ? "" : preffix ; suffix = suffix = = null ? "" : suffix ; boolean isUpperCase = "toUpperCase" . equalsIgnoreCase ( caseMethod ) ; boolean isLowerCase = "toLowerCase" . equalsIgnoreCase ( caseMethod ) ; List words = StringUtils . stringToWordList ( string ) ; Iterator it = words . iterator ( ) ; while ( it . hasNext ( ) ) { String word = ( String ) it . next ( ) ; boolean isKeyword = keywords . get ( word . toUpperCase ( ) ) ! = null ; if ( isKeyword ) { String newWord = word ; if ( isUpperCase ) newWord = newWord . toUpperCase ( ) ; else if ( isLowerCase ) newWord = newWord . toLowerCase ( ) ; string = StringUtils . replace ( string , word , preffix + newWord + suffix ) ; } } return string ; }
void test17 ( ) throws Throwable { List < Object > list0 = StringUtils . stringToList ( "http : / / apache . org / xml / features / internal / parser - settings" , 'p' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replaceTokens ( String in , Collection tokenValues , String tokenStart , String tokenEnd ) { String out = in ; if ( tokenValues ! = null ) { Iterator it = tokenValues . iterator ( ) ; while ( it . hasNext ( ) ) { Object [ ] tokenValue = ( Object [ ] ) it . next ( ) ; out = replace ( in , tokenStart + tokenValue [ 0 ] + tokenEnd , String . valueOf ( tokenValue [ 1 ] ) ) ; } } return out ; }
void test18 ( ) throws Throwable { List < Object > list0 = StringUtils . stringToList ( "" , 'P' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List stringToList ( String string , String delimiter ) { StringTokenizer st = new StringTokenizer ( string , delimiter ) ; List elements = new ArrayList ( st . countTokens ( ) ) ; String element = null ; while ( st . hasMoreTokens ( ) ) { element = ( ( String ) st . nextToken ( ) ) . trim ( ) ; elements . add ( element ) ; } return elements ; }
void test19 ( ) throws Throwable { String string0 = StringUtils . trimEmptyToNull ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String trimEmptyToNull ( String string ) { if ( string = = null | | "" . equals ( string . trim ( ) ) ) return null ; else return string ; }
void test20 ( ) throws Throwable { String string0 = StringUtils . trimEmptyToNull ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String trimEmptyToNull ( String string ) { if ( string = = null | | "" . equals ( string . trim ( ) ) ) return null ; else return string ; }
void test21 ( ) throws Throwable { String string0 = StringUtils . replace ( "Error while trying to output diagnostics about bad class '" , "Error while trying to output diagnostics about bad class '" , "Error while trying to output diagnostics about bad class '" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replace ( String s , String sub , String with ) { if ( s = = null ) return null ; if ( sub = = null | | with = = null ) throw new IllegalArgumentException ( "Cannot accept null argument" ) ; int c = 0 ; int i = s . indexOf ( sub , c ) ; if ( i = = - 1 ) return s ; StringBuffer buf = new StringBuffer ( s . length ( ) + with . length ( ) ) ; ( buf ) { do { buf . append ( s . substring ( c , i ) ) ; buf . append ( with ) ; c = i + sub . length ( ) ; } while ( ( i = s . indexOf ( sub , c ) ) ! = - 1 ) ; if ( c < s . length ( ) ) buf . append ( s . substring ( c , s . length ( ) ) ) ; return buf . toString ( ) ; } }
void test23 ( ) throws Throwable { String string0 = StringUtils . replace ( "Error while trying to output diagnostics about bad class '" , " . src / main / resources / keyword" , " . src / main / resources / keyword" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replace ( String s , String sub , String with ) { if ( s = = null ) return null ; if ( sub = = null | | with = = null ) throw new IllegalArgumentException ( "Cannot accept null argument" ) ; int c = 0 ; int i = s . indexOf ( sub , c ) ; if ( i = = - 1 ) return s ; StringBuffer buf = new StringBuffer ( s . length ( ) + with . length ( ) ) ; ( buf ) { do { buf . append ( s . substring ( c , i ) ) ; buf . append ( with ) ; c = i + sub . length ( ) ; } while ( ( i = s . indexOf ( sub , c ) ) ! = - 1 ) ; if ( c < s . length ( ) ) buf . append ( s . substring ( c , s . length ( ) ) ) ; return buf . toString ( ) ; } }
void test24 ( ) throws Throwable { String string0 = StringUtils . initCap ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String initCap ( String text ) { if ( text = = null ) return null ; String result = "" ; StringTokenizer st = new StringTokenizer ( text , " \t\n\r\f" , true ) ; while ( st . hasMoreElements ( ) ) { String token = st . nextToken ( ) ; result + = token . substring ( 0 , 1 ) . toUpperCase ( ) + token . substring ( 1 ) . toLowerCase ( ) ; } return result ; }
void test25 ( ) throws Throwable { String string0 = StringUtils . initCap ( "'VjLui + j ? 5zw~59" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String initCap ( String text ) { if ( text = = null ) return null ; String result = "" ; StringTokenizer st = new StringTokenizer ( text , " \t\n\r\f" , true ) ; while ( st . hasMoreElements ( ) ) { String token = st . nextToken ( ) ; result + = token . substring ( 0 , 1 ) . toUpperCase ( ) + token . substring ( 1 ) . toLowerCase ( ) ; } return result ; }
void test26 ( ) throws Throwable { String string0 = StringUtils . valueOf ( ( Object ) "'vjlui + j ? 5zw~59" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String valueOf ( Object value ) { return value = = null ? "" : String . valueOf ( value ) ; }
void test27 ( ) throws Throwable { String string0 = StringUtils . valueOf ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String valueOf ( Object value ) { return value = = null ? "" : String . valueOf ( value ) ; }
void test28 ( ) throws Throwable { String string0 = StringUtils . getJavaName ( "2esP ? " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJavaName ( String value ) { if ( ! StringUtils . exists ( value ) ) return value ; StringBuffer stringbuffer = new StringBuffer ( value . length ( ) ) ; StringTokenizer st = new StringTokenizer ( value , "_#$ \" . \\ / - + * = ( ) , " , false ) ; while ( st . hasMoreTokens ( ) ) { String s2 = st . nextToken ( ) ; s2 = s2 . toLowerCase ( ) ; s2 = toUpperFirstChar ( s2 ) ; stringbuffer . append ( s2 ) ; } String s1 = stringbuffer . toString ( ) ; return s1 ; }
void test29 ( ) throws Throwable { String string0 = StringUtils . toUpperFirstChar ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toUpperFirstChar ( String value ) { if ( ! StringUtils . exists ( value ) ) return value ; StringBuffer stringbuffer = new StringBuffer ( value ) ; stringbuffer . setCharAt ( 0 , Character . toUpperCase ( stringbuffer . charAt ( 0 ) ) ) ; return stringbuffer . toString ( ) ; }
void test30 ( ) throws Throwable { String string0 = StringUtils . getJavaName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJavaName ( String value ) { if ( ! StringUtils . exists ( value ) ) return value ; StringBuffer stringbuffer = new StringBuffer ( value . length ( ) ) ; StringTokenizer st = new StringTokenizer ( value , "_#$ \" . \\ / - + * = ( ) , " , false ) ; while ( st . hasMoreTokens ( ) ) { String s2 = st . nextToken ( ) ; s2 = s2 . toLowerCase ( ) ; s2 = toUpperFirstChar ( s2 ) ; stringbuffer . append ( s2 ) ; } String s1 = stringbuffer . toString ( ) ; return s1 ; }
void test31 ( ) throws Throwable { String string0 = StringUtils . replaceTokens ( "V * x { _dWSu0rBmFfT$#" , ( Collection ) null , "V * x { _dWSu0rBmFfT$#" , "V * x { _dWSu0rBmFfT$#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replaceTokens ( String in , Collection tokenValues , String tokenStart , String tokenEnd ) { String out = in ; if ( tokenValues ! = null ) { Iterator it = tokenValues . iterator ( ) ; while ( it . hasNext ( ) ) { Object [ ] tokenValue = ( Object [ ] ) it . next ( ) ; out = replace ( in , tokenStart + tokenValue [ 0 ] + tokenEnd , String . valueOf ( tokenValue [ 1 ] ) ) ; } } return out ; }
void test32 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; String string0 = StringUtils . replaceTokens ( "" , ( Collection ) linkedList0 , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replaceTokens ( String in , Collection tokenValues , String tokenStart , String tokenEnd ) { String out = in ; if ( tokenValues ! = null ) { Iterator it = tokenValues . iterator ( ) ; while ( it . hasNext ( ) ) { Object [ ] tokenValue = ( Object [ ] ) it . next ( ) ; out = replace ( in , tokenStart + tokenValue [ 0 ] + tokenEnd , String . valueOf ( tokenValue [ 1 ] ) ) ; } } return out ; }
void test33 ( ) throws Throwable { String string0 = StringUtils . removeWhitespaces ( "Error while trying to output diagnostics about bad class '" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeWhitespaces ( String s ) { if ( s = = null ) return null ; char [ ] in = s . toCharArray ( ) ; StringBuffer out = new StringBuffer ( ) ; for ( int i = 0 ; i < in . length ; i + + ) if ( ! Character . isWhitespace ( in [ i ] ) ) out . append ( in [ i ] ) ; return out . toString ( ) ; }
void test34 ( ) throws Throwable { String string0 = StringUtils . removeWhitespaces ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeWhitespaces ( String s ) { if ( s = = null ) return null ; char [ ] in = s . toCharArray ( ) ; StringBuffer out = new StringBuffer ( ) ; for ( int i = 0 ; i < in . length ; i + + ) if ( ! Character . isWhitespace ( in [ i ] ) ) out . append ( in [ i ] ) ; return out . toString ( ) ; }
void test35 ( ) throws Throwable { String string0 = StringUtils . reformat ( "Error while trying to output diagnostics about bad class '" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String reformat ( String s ) { if ( s = = null ) return null ; StringBuffer out = new StringBuffer ( ) ; List list = stringToWordList ( s ) ; Iterator it = list . iterator ( ) ; while ( it . hasNext ( ) ) out . append ( it . next ( ) ) . append ( " " ) ; return out . toString ( ) ; }
void test36 ( ) throws Throwable { String string0 = StringUtils . reformat ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String reformat ( String s ) { if ( s = = null ) return null ; StringBuffer out = new StringBuffer ( ) ; List list = stringToWordList ( s ) ; Iterator it = list . iterator ( ) ; while ( it . hasNext ( ) ) out . append ( it . next ( ) ) . append ( " " ) ; return out . toString ( ) ; }
void test0 ( ) throws Throwable { Map < Object , Object > map0 = LDAPUtils . getEnvironement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( resultList = = null | | resultList . isEmpty ( ) ) ; }
void test2 ( ) throws Throwable { LDAPUtils lDAPUtils0 = new LDAPUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LDAPUtils ( ) { }
void test3 ( ) throws Throwable { BasicAttributes basicAttributes0 = new BasicAttributes ( "5w / [ Wv . ZmcdXU ] . k3Z$" , "5w / [ Wv . ZmcdXU ] . k3Z$" ) ; LDAPUtils . dumpAttributes ( ( Attributes ) basicAttributes0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void dumpAttributes ( Attributes attributes ) throws Exception { if ( attributes = = null ) log . debug ( "dumpAttributes : No attributes" ) ; else { / / Print each attribute for ( NamingEnumeration ae = attributes . getAll ( ) ; ae . hasMore ( ) ; ) { Attribute attr = ( Attribute ) ae . next ( ) ; log . debug ( "dumpAttributes : attribute = " + attr . getID ( ) ) ; / / print each value for ( NamingEnumeration e = attr . getAll ( ) ; e . hasMore ( ) ; log . debug ( "dumpAttributes : value = " + e . next ( ) ) ) ; } } }
void test1 ( ) throws Throwable { ImageUtils imageUtils0 = new ImageUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ImageUtils ( ) { }
void test2 ( ) throws Throwable { Image image0 = ImageUtils . getImage ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Image getImage ( File f ) throws IOException { Image image = getImageObject ( f ) ; return image ; }
void test0 ( ) throws Throwable { String string0 = ServletUtils . showGlobalParameters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showGlobalParameters ( ) { StringBuffer sb = new StringBuffer ( "\n < ! - - - - - - - - - - - - - - - - PROPERTIES - - - - - - - - - - - - - - - - > " ) ; sb . append ( "\n < ! - - " ) . append ( ApplicationParameters . twoString ( ) ) . append ( " - - > " ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { ServletUtils servletUtils0 = new ServletUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String showGlobalParameters ( ) { StringBuffer sb = new StringBuffer ( "\n < ! - - - - - - - - - - - - - - - - PROPERTIES - - - - - - - - - - - - - - - - > " ) ; sb . append ( "\n < ! - - " ) . append ( ApplicationParameters . twoString ( ) ) . append ( " - - > " ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { Parameter parameter0 = new Parameter ( ) ; parameter0 . setName ( "t ] f ] up" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { Parameter parameter0 = new Parameter ( ) ; parameter0 . setOperator ( "ORDER BY" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOperator ( ) { return operator ; }
void test3 ( ) throws Throwable { Parameter parameter0 = new Parameter ( ) ; parameter0 . setValue ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOperator ( ) { return operator ; }
void test4 ( ) throws Throwable { Parameter parameter0 = new Parameter ( ) ; parameter0 . setColumnName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( ) { return columnName ; }
void test5 ( ) throws Throwable { Parameter parameter0 = new Parameter ( "" , "" , "" , ( Object ) null , "ORDER BY" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test6 ( ) throws Throwable { Parameter parameter0 = new Parameter ( ) ; parameter0 . setNextValue ( ( Object ) "DESC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( ) { return columnName ; }
void test1 ( ) throws Throwable { JDBCUtils jDBCUtils0 = new JDBCUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JDBCUtils ( ) { }
void test11 ( ) throws Throwable { JoinRowSetImpl joinRowSetImpl0 = new JoinRowSetImpl ( ) ; int int0 = JDBCUtils . getRowCountFromResultSet ( ( ResultSet ) joinRowSetImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCountFromResultSet ( ResultSet rset ) throws Exception { int result = 0 ; rset . last ( ) ; result = rset . getRow ( ) ; rset . beforeFirst ( ) ; return result ; }
void test15 ( ) throws Throwable { String string0 = JDBCUtils . replaceBindVariablesWithNull ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replaceBindVariablesWithNull ( String sqlQuery ) { return StringUtils . replace ( sqlQuery , " ? " , "null" ) ; }
void test16 ( ) throws Throwable { String string0 = JDBCUtils . getResultSetType ( 3802 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getResultSetType ( int resultSetType ) throws SQLException { String result = String . valueOf ( resultSetType ) ; if ( resultSetType = = ResultSet . TYPE_FORWARD_ONLY ) result + = " ( TYPE_FORWARD_ONLY ) " ; else if ( resultSetType = = ResultSet . TYPE_SCROLL_INSENSITIVE ) result + = " ( TYPE_SCROLL_INSENSITIVE ) " ; else if ( resultSetType = = ResultSet . TYPE_SCROLL_SENSITIVE ) result + = " ( TYPE_SCROLL_SENSITIVE ) " ; else result + = " ( Unknown ) " ; return result ; }
void test17 ( ) throws Throwable { String string0 = JDBCUtils . getResultSetType ( 1005 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getResultSetType ( int resultSetType ) throws SQLException { String result = String . valueOf ( resultSetType ) ; if ( resultSetType = = ResultSet . TYPE_FORWARD_ONLY ) result + = " ( TYPE_FORWARD_ONLY ) " ; else if ( resultSetType = = ResultSet . TYPE_SCROLL_INSENSITIVE ) result + = " ( TYPE_SCROLL_INSENSITIVE ) " ; else if ( resultSetType = = ResultSet . TYPE_SCROLL_SENSITIVE ) result + = " ( TYPE_SCROLL_SENSITIVE ) " ; else result + = " ( Unknown ) " ; return result ; }
void test18 ( ) throws Throwable { Parameter parameter0 = new Parameter ( "" , "jqb - vxC & " , "" , "" , "jqb - vxC & " ) ; boolean boolean0 = JDBCUtils . isValidParameter ( parameter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValidParameter ( Parameter parameter ) { boolean result = true ; if ( parameter = = null ) result = false ; / * else if ( ! StringUtils . exists ( parameter . getName ( ) ) & & StringUtils . exists ( parameter . getColumnName ( ) ) ) { log . warn ( "isValidParameter : Name cannot be null if column name is provided = " + parameter ) ; result = false ; } * / else if ( StringUtils . exists ( parameter . getName ( ) ) & & ! StringUtils . exists ( parameter . getColumnName ( ) ) ) { log . warn ( "isValidParameter : Column name cannot be null if name is provided = " + parameter ) ; result = false ; } else if ( ! StringUtils . exists ( parameter . getColumnName ( ) ) & & StringUtils . exists ( parameter . getOperator ( ) ) ) { log . warn ( "isValidParameter : Column name cannot be null if operator is provided = " + parameter ) ; result = false ; } if ( StringUtils . exists ( parameter . getColumnName ( ) ) & & ! StringUtils . exists ( parameter . getOperator ( ) ) ) { log . warn ( "isValidParameter : Operator cannot be null if column name is provided = " + parameter ) ; result = false ; } if ( ! StringUtils . exists ( parameter . getColumnName ( ) ) & & ! StringUtils . exists ( parameter . getOperator ( ) ) & & parameter . getValue ( ) = = null ) { log . warn ( "isValidParameter : Value cannot be null if column name and operator is provided = " + parameter ) ; result = false ; } return result ; }
void test20 ( ) throws Throwable { Parameter parameter0 = new Parameter ( " < o . zq ( pe1 < pH\"G0%u" , "" , " < o . zq ( pe1 < pH\"G0%u" , "connpool_pool_size" , "connpool_pool_size" ) ; boolean boolean0 = JDBCUtils . isValidParameter ( parameter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValidParameter ( Parameter parameter ) { boolean result = true ; if ( parameter = = null ) result = false ; / * else if ( ! StringUtils . exists ( parameter . getName ( ) ) & & StringUtils . exists ( parameter . getColumnName ( ) ) ) { log . warn ( "isValidParameter : Name cannot be null if column name is provided = " + parameter ) ; result = false ; } * / else if ( StringUtils . exists ( parameter . getName ( ) ) & & ! StringUtils . exists ( parameter . getColumnName ( ) ) ) { log . warn ( "isValidParameter : Column name cannot be null if name is provided = " + parameter ) ; result = false ; } else if ( ! StringUtils . exists ( parameter . getColumnName ( ) ) & & StringUtils . exists ( parameter . getOperator ( ) ) ) { log . warn ( "isValidParameter : Column name cannot be null if operator is provided = " + parameter ) ; result = false ; } if ( StringUtils . exists ( parameter . getColumnName ( ) ) & & ! StringUtils . exists ( parameter . getOperator ( ) ) ) { log . warn ( "isValidParameter : Operator cannot be null if column name is provided = " + parameter ) ; result = false ; } if ( ! StringUtils . exists ( parameter . getColumnName ( ) ) & & ! StringUtils . exists ( parameter . getOperator ( ) ) & & parameter . getValue ( ) = = null ) { log . warn ( "isValidParameter : Value cannot be null if column name and operator is provided = " + parameter ) ; result = false ; } return result ; }
void test21 ( ) throws Throwable { Parameter parameter0 = new Parameter ( "o . zq ( pe1 < * H\" ; * G0ru" , "o . zq ( pe1 < * H\" ; * G0ru" , "o . zq ( pe1 < * H\" ; * G0ru" , "connpool_pool_size" , "connpool_pool_size" ) ; boolean boolean0 = JDBCUtils . isValidParameter ( parameter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValidParameter ( Parameter parameter ) { boolean result = true ; if ( parameter = = null ) result = false ; / * else if ( ! StringUtils . exists ( parameter . getName ( ) ) & & StringUtils . exists ( parameter . getColumnName ( ) ) ) { log . warn ( "isValidParameter : Name cannot be null if column name is provided = " + parameter ) ; result = false ; } * / else if ( StringUtils . exists ( parameter . getName ( ) ) & & ! StringUtils . exists ( parameter . getColumnName ( ) ) ) { log . warn ( "isValidParameter : Column name cannot be null if name is provided = " + parameter ) ; result = false ; } else if ( ! StringUtils . exists ( parameter . getColumnName ( ) ) & & StringUtils . exists ( parameter . getOperator ( ) ) ) { log . warn ( "isValidParameter : Column name cannot be null if operator is provided = " + parameter ) ; result = false ; } if ( StringUtils . exists ( parameter . getColumnName ( ) ) & & ! StringUtils . exists ( parameter . getOperator ( ) ) ) { log . warn ( "isValidParameter : Operator cannot be null if column name is provided = " + parameter ) ; result = false ; } if ( ! StringUtils . exists ( parameter . getColumnName ( ) ) & & ! StringUtils . exists ( parameter . getOperator ( ) ) & & parameter . getValue ( ) = = null ) { log . warn ( "isValidParameter : Value cannot be null if column name and operator is provided = " + parameter ) ; result = false ; } return result ; }
void test22 ( ) throws Throwable { Parameter parameter0 = new Parameter ( ) ; boolean boolean0 = JDBCUtils . isValidParameter ( parameter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValidParameter ( Parameter parameter ) { boolean result = true ; if ( parameter = = null ) result = false ; / * else if ( ! StringUtils . exists ( parameter . getName ( ) ) & & StringUtils . exists ( parameter . getColumnName ( ) ) ) { log . warn ( "isValidParameter : Name cannot be null if column name is provided = " + parameter ) ; result = false ; } * / else if ( StringUtils . exists ( parameter . getName ( ) ) & & ! StringUtils . exists ( parameter . getColumnName ( ) ) ) { log . warn ( "isValidParameter : Column name cannot be null if name is provided = " + parameter ) ; result = false ; } else if ( ! StringUtils . exists ( parameter . getColumnName ( ) ) & & StringUtils . exists ( parameter . getOperator ( ) ) ) { log . warn ( "isValidParameter : Column name cannot be null if operator is provided = " + parameter ) ; result = false ; } if ( StringUtils . exists ( parameter . getColumnName ( ) ) & & ! StringUtils . exists ( parameter . getOperator ( ) ) ) { log . warn ( "isValidParameter : Operator cannot be null if column name is provided = " + parameter ) ; result = false ; } if ( ! StringUtils . exists ( parameter . getColumnName ( ) ) & & ! StringUtils . exists ( parameter . getOperator ( ) ) & & parameter . getValue ( ) = = null ) { log . warn ( "isValidParameter : Value cannot be null if column name and operator is provided = " + parameter ) ; result = false ; } return result ; }
void test23 ( ) throws Throwable { Parameter parameter0 = new Parameter ( ) ; parameter0 . setValue ( ( Object ) " { name = null , value = null , columnName = null , class = class framework . util . jdbc . Parameter , nextValue = null , operator = null } " ) ; boolean boolean0 = JDBCUtils . isValidParameter ( parameter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValidParameter ( Parameter parameter ) { boolean result = true ; if ( parameter = = null ) result = false ; / * else if ( ! StringUtils . exists ( parameter . getName ( ) ) & & StringUtils . exists ( parameter . getColumnName ( ) ) ) { log . warn ( "isValidParameter : Name cannot be null if column name is provided = " + parameter ) ; result = false ; } * / else if ( StringUtils . exists ( parameter . getName ( ) ) & & ! StringUtils . exists ( parameter . getColumnName ( ) ) ) { log . warn ( "isValidParameter : Column name cannot be null if name is provided = " + parameter ) ; result = false ; } else if ( ! StringUtils . exists ( parameter . getColumnName ( ) ) & & StringUtils . exists ( parameter . getOperator ( ) ) ) { log . warn ( "isValidParameter : Column name cannot be null if operator is provided = " + parameter ) ; result = false ; } if ( StringUtils . exists ( parameter . getColumnName ( ) ) & & ! StringUtils . exists ( parameter . getOperator ( ) ) ) { log . warn ( "isValidParameter : Operator cannot be null if column name is provided = " + parameter ) ; result = false ; } if ( ! StringUtils . exists ( parameter . getColumnName ( ) ) & & ! StringUtils . exists ( parameter . getOperator ( ) ) & & parameter . getValue ( ) = = null ) { log . warn ( "isValidParameter : Value cannot be null if column name and operator is provided = " + parameter ) ; result = false ; } return result ; }
