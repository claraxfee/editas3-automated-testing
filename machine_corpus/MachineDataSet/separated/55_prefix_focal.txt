void test2 ( ) throws Throwable { LavaLogger lavaLogger0 = new LavaLogger ( ) ; Locale locale0 = Locale . CANADA_FRENCH ; GregorianCalendar gregorianCalendar0 = ( GregorianCalendar ) Calendar . getInstance ( locale0 ) ; lavaLogger0 . error ( ( Calendar ) gregorianCalendar0 , "#f ) 4uJB1guS3Qc~ * ] V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test0 ( ) throws Throwable { Off off0 = new Off ( ) ; off0 . setEnd ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStart ( ) { return start ; }
void test1 ( ) throws Throwable { Off off0 = new Off ( ) ; off0 . setStart ( "Do7 < l ! \" / N4l" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test2 ( ) throws Throwable { Off off0 = new Off ( ) ; String string0 = off0 . getEnd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test3 ( ) throws Throwable { Off off0 = new Off ( ) ; String string0 = off0 . getStart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test4 ( ) throws Throwable { Off off0 = new Off ( ) ; String string0 = off0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test0 ( ) throws Throwable { WebRun webRun0 = new WebRun ( ) ; ApplicationProperties applicationProperties0 = new ApplicationProperties ( ) ; webRun0 . setProperties ( applicationProperties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test0 ( ) throws Throwable { ApplicationProperties applicationProperties0 = new ApplicationProperties ( ) ; applicationProperties0 . setPort ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test1 ( ) throws Throwable { ApplicationProperties applicationProperties0 = new ApplicationProperties ( ) ; applicationProperties0 . getDeviceProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test2 ( ) throws Throwable { ApplicationProperties applicationProperties0 = new ApplicationProperties ( ) ; int int0 = applicationProperties0 . getRunInterval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test3 ( ) throws Throwable { ApplicationProperties applicationProperties0 = new ApplicationProperties ( ) ; boolean boolean0 = applicationProperties0 . isDebug ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test4 ( ) throws Throwable { ApplicationProperties applicationProperties0 = new ApplicationProperties ( ) ; String string0 = applicationProperties0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test5 ( ) throws Throwable { ApplicationProperties applicationProperties0 = new ApplicationProperties ( ) ; applicationProperties0 . setDebug ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test6 ( ) throws Throwable { ApplicationProperties applicationProperties0 = new ApplicationProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test7 ( ) throws Throwable { ApplicationProperties applicationProperties0 = new ApplicationProperties ( ) ; int int0 = applicationProperties0 . getPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test0 ( ) throws Throwable { BuildStatusServlet buildStatusServlet0 = new BuildStatusServlet ( ( DeviceController ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BuildStatusServlet ( DeviceController deviceController ) { this . deviceController = deviceController ; }
void test0 ( ) throws Throwable { WebRun webRun0 = new WebRun ( ) ; DeviceController deviceController0 = webRun0 . getDeviceController ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DeviceController getDeviceController ( ) { return deviceController ; }
void test0 ( ) throws Throwable { SiteProperties siteProperties0 = new SiteProperties ( ) ; String string0 = siteProperties0 . getGetterClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGetterClass ( ) { return getterClass ; }
void test1 ( ) throws Throwable { SiteProperties siteProperties0 = new SiteProperties ( ) ; siteProperties0 . setClassName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test2 ( ) throws Throwable { SiteProperties siteProperties0 = new SiteProperties ( ) ; siteProperties0 . setGetterClass ( "oV ! J ) ( q ? & D~ - ~q" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test3 ( ) throws Throwable { SiteProperties siteProperties0 = new SiteProperties ( ) ; siteProperties0 . getClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test4 ( ) throws Throwable { SiteProperties siteProperties0 = new SiteProperties ( ) ; siteProperties0 . getUrl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGetterClass ( ) { return getterClass ; }
void test5 ( ) throws Throwable { SiteProperties siteProperties0 = new SiteProperties ( ) ; String string0 = siteProperties0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test6 ( ) throws Throwable { SiteProperties siteProperties0 = new SiteProperties ( ) ; siteProperties0 . setUrl ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGetterClass ( ) { return getterClass ; }
void test0 ( ) throws Throwable { Build build0 = new Build ( "" ) ; String string0 = build0 . getIdentity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test1 ( ) throws Throwable { Build build0 = new Build ( "" ) ; build0 . getBuildSite ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test2 ( ) throws Throwable { Build build0 = new Build ( "81Lb`Qc@@cL2f" ) ; boolean boolean0 = build0 . isSuccessful ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSuccessful ( ) { return isSuccessful ; }
void test3 ( ) throws Throwable { Build build0 = new Build ( "" ) ; Hudson hudson0 = new Hudson ( ) ; build0 . setBuildSite ( ( BuildSite ) hudson0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSuccessful ( ) { return isSuccessful ; }
void test4 ( ) throws Throwable { Build build0 = new Build ( "ua$ ) W`Z * pQ5\"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSuccessful ( ) { return isSuccessful ; }
void test5 ( ) throws Throwable { Build build0 = new Build ( "" ) ; String string0 = build0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test0 ( ) throws Throwable { DummyRestGetter dummyRestGetter0 = new DummyRestGetter ( ) ; char [ ] charArray0 = new char [ 1 ] ; String string0 = dummyRestGetter0 . get ( "os_authType = basic" , charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String url ) throws IOException , LoginRequiredException { if ( url . contains ( "os_authType = basic" ) ) { return "state = \"Successful\"" ; } throw new LoginRequiredException ( ) ; }
void test2 ( ) throws Throwable { DummyRestGetter dummyRestGetter0 = new DummyRestGetter ( ) ; String string0 = dummyRestGetter0 . get ( "os_authType = basic" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String url ) throws IOException , LoginRequiredException { if ( url . contains ( "os_authType = basic" ) ) { return "state = \"Successful\"" ; } throw new LoginRequiredException ( ) ; }
void test0 ( ) throws Throwable { DummyRemoteGetter dummyRemoteGetter0 = new DummyRemoteGetter ( ) ; char [ ] charArray0 = new char [ 9 ] ; String string0 = dummyRemoteGetter0 . get ( "F" , charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String url ) throws IOException , LoginRequiredException { if ( url . contains ( "os_authType = basic" ) ) { return "state = \"Successful\"" ; } throw new LoginRequiredException ( ) ; }
void test1 ( ) throws Throwable { DummyRemoteGetter dummyRemoteGetter0 = new DummyRemoteGetter ( ) ; String string0 = dummyRemoteGetter0 . get ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String url ) throws IOException , LoginRequiredException { if ( url . contains ( "os_authType = basic" ) ) { return "state = \"Successful\"" ; } throw new LoginRequiredException ( ) ; }
void test2 ( ) throws Throwable { DummyRemoteGetter dummyRemoteGetter0 = new DummyRemoteGetter ( ) ; String string0 = dummyRemoteGetter0 . get ( "auth = auth12345" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String url ) throws IOException , LoginRequiredException { if ( url . contains ( "os_authType = basic" ) ) { return "state = \"Successful\"" ; } throw new LoginRequiredException ( ) ; }
void test0 ( ) throws Throwable { BuildProperties buildProperties0 = new BuildProperties ( ) ; String string0 = buildProperties0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test1 ( ) throws Throwable { BuildProperties buildProperties0 = new BuildProperties ( ) ; SiteProperties siteProperties0 = buildProperties0 . getSiteProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SiteProperties getSiteProperties ( ) { return siteProperties ; }
void test2 ( ) throws Throwable { BuildProperties buildProperties0 = new BuildProperties ( ) ; String string0 = buildProperties0 . getBuild ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Build getBuild ( String buildId ) throws MissingBuildException { for ( Device device : devices ) { try { return device . getBuilds ( ) . getBuild ( buildId ) ; } catch ( MissingBuildException e ) { logger . debug ( "Build " + buildId + " not found for device " + device ) ; } } throw new MissingBuildException ( buildId + " not found" ) ; }
void test3 ( ) throws Throwable { BuildProperties buildProperties0 = new BuildProperties ( ) ; SiteProperties siteProperties0 = new SiteProperties ( ) ; buildProperties0 . setSiteProperties ( siteProperties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGetterClass ( ) { return getterClass ; }
void test4 ( ) throws Throwable { BuildProperties buildProperties0 = new BuildProperties ( ) ; buildProperties0 . setBuild ( "" ) ; buildProperties0 . check ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test2 ( ) throws Throwable { UrlGetter urlGetter0 = new UrlGetter ( ) ; GetMethod getMethod0 = new GetMethod ( ) ; urlGetter0 . handleStatusCode ( getMethod0 , 200 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPath ( ) { return path ; }
void test0 ( ) throws Throwable { Builds builds0 = new Builds ( ) ; List < Build > list0 = builds0 . getBuilds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Builds getBuilds ( ) ; void setBuilds ( Builds builds ) ; }
void test1 ( ) throws Throwable { Builds builds0 = new Builds ( ) ; Build build0 = new Build ( "BppeN1xq0 > } " ) ; builds0 . add ( build0 ) ; boolean boolean0 = builds0 . allSuccessful ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean allSuccessful ( ) { for ( Build build : builds ) { boolean successful = build . isSuccessful ( ) ; logger . debug ( "buildId = " + build . getIdentity ( ) + " successful = " + successful ) ; if ( ! successful ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { Builds builds0 = new Builds ( ) ; boolean boolean0 = builds0 . allSuccessful ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean allSuccessful ( ) { for ( Build build : builds ) { boolean successful = build . isSuccessful ( ) ; logger . debug ( "buildId = " + build . getIdentity ( ) + " successful = " + successful ) ; if ( ! successful ) { return false ; } } return true ; }
void test3 ( ) throws Throwable { Builds builds0 = new Builds ( ) ; Build build0 = new Build ( "BppeN1xq0 > } " ) ; builds0 . add ( build0 ) ; build0 . setSuccessful ( false ) ; boolean boolean0 = builds0 . allSuccessful ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean allSuccessful ( ) { for ( Build build : builds ) { boolean successful = build . isSuccessful ( ) ; logger . debug ( "buildId = " + build . getIdentity ( ) + " successful = " + successful ) ; if ( ! successful ) { return false ; } } return true ; }
void test4 ( ) throws Throwable { Builds builds0 = new Builds ( ) ; Build build0 = new Build ( "DDJyhYBg7@iQL" ) ; builds0 . add ( build0 ) ; Build build1 = builds0 . getBuild ( "DDJyhYBg7@iQL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIdentity ( ) { return identity ; }
void test0 ( ) throws Throwable { Bamboo3RestApi bamboo3RestApi0 = new Bamboo3RestApi ( ) ; UsernamePasswordCredentials usernamePasswordCredentials0 = bamboo3RestApi0 . getCredentials ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UsernamePasswordCredentials getCredentials ( ) ; }
void test2 ( ) throws Throwable { Bamboo3RestApi bamboo3RestApi0 = new Bamboo3RestApi ( ) ; bamboo3RestApi0 . setCredentials ( "enter HttpClient . executeMethod ( HttpMethod ) " , ( UsernamePasswordCredentials ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test3 ( ) throws Throwable { Bamboo3RestApi bamboo3RestApi0 = new Bamboo3RestApi ( ) ; bamboo3RestApi0 . clearCredentials ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test0 ( ) throws Throwable { Hudson hudson0 = new Hudson ( ) ; hudson0 . setUrlGetter ( ( Getter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test1 ( ) throws Throwable { Hudson hudson0 = new Hudson ( ) ; SiteProperties siteProperties0 = new SiteProperties ( ) ; hudson0 . setProperties ( siteProperties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { return className ; }
void test2 ( ) throws Throwable { Hudson hudson0 = new Hudson ( ) ; hudson0 . login ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test3 ( ) throws Throwable { Bamboo3RestApi bamboo3RestApi0 = new Bamboo3RestApi ( ) ; String string0 = bamboo3RestApi0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return hours + " : " + minutes ; }
void test4 ( ) throws Throwable { Bamboo3RestApi bamboo3RestApi0 = new Bamboo3RestApi ( ) ; Getter getter0 = bamboo3RestApi0 . getUrlGetter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Getter getUrlGetter ( ) { return this . urlGetter ; }
