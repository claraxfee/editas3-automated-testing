void test0 ( ) throws Throwable { Boolean boolean0 = new Boolean ( "hq + " ) ; QueryOptions queryOptions0 = new QueryOptions ( boolean0 , boolean0 , 548 , 548 ) ; QueryOptions queryOptions1 = new QueryOptions ( queryOptions0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test1 ( ) throws Throwable { QueryOptions queryOptions0 = new QueryOptions ( ) ; QueryOptions . ATTRIBUTES [ ] queryOptions_ATTRIBUTESArray0 = queryOptions0 . getAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int childDepth ( ) { return childDepth ; }
void test2 ( ) throws Throwable { Boolean boolean0 = Boolean . FALSE ; StringMap stringMap0 = new StringMap ( ) ; QueryOptions . ATTRIBUTES [ ] queryOptions_ATTRIBUTESArray0 = new QueryOptions . ATTRIBUTES [ 10 ] ; QueryOptions queryOptions0 = new QueryOptions ( boolean0 , boolean0 , ( - 1044 ) , ( - 1044 ) , stringMap0 , queryOptions_ATTRIBUTESArray0 ) ; queryOptions0 . setAttributes ( queryOptions_ATTRIBUTESArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int parentHeight ( ) { return parentHeight ; }
void test3 ( ) throws Throwable { Boolean boolean0 = new Boolean ( "hq + " ) ; QueryOptions queryOptions0 = new QueryOptions ( boolean0 , boolean0 , 548 , 548 ) ; QueryOptions . ATTRIBUTES queryOptions_ATTRIBUTES0 = QueryOptions . ATTRIBUTES . DELETED ; queryOptions0 . addAttribute ( queryOptions_ATTRIBUTES0 ) ; QueryOptions queryOptions1 = new QueryOptions ( queryOptions0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test4 ( ) throws Throwable { QueryOptions queryOptions0 = new QueryOptions ( ) ; boolean boolean0 = queryOptions0 . allowsRecord ( ( Record ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasIndexableFilter ( ) { return indexableFilter ! = null ; }
void test6 ( ) throws Throwable { Boolean boolean0 = new Boolean ( "hq + " ) ; QueryOptions queryOptions0 = new QueryOptions ( boolean0 , boolean0 , 548 , 548 ) ; boolean boolean1 = queryOptions0 . hasIndexableFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test7 ( ) throws Throwable { QueryOptions queryOptions0 = new QueryOptions ( ) ; boolean boolean0 = queryOptions0 . hasMeta ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test8 ( ) throws Throwable { Boolean boolean0 = Boolean . FALSE ; StringMap stringMap0 = new StringMap ( ) ; QueryOptions . ATTRIBUTES [ ] queryOptions_ATTRIBUTESArray0 = new QueryOptions . ATTRIBUTES [ 10 ] ; QueryOptions queryOptions0 = new QueryOptions ( boolean0 , boolean0 , ( - 1044 ) , ( - 1044 ) , stringMap0 , queryOptions_ATTRIBUTESArray0 ) ; boolean boolean1 = queryOptions0 . hasMeta ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test9 ( ) throws Throwable { QueryOptions queryOptions0 = new QueryOptions ( ) ; queryOptions0 . meta ( "" , "" ) ; boolean boolean0 = queryOptions0 . hasMeta ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test10 ( ) throws Throwable { Boolean boolean0 = Boolean . FALSE ; StringMap stringMap0 = new StringMap ( ) ; QueryOptions . ATTRIBUTES [ ] queryOptions_ATTRIBUTESArray0 = new QueryOptions . ATTRIBUTES [ 10 ] ; QueryOptions queryOptions0 = new QueryOptions ( boolean0 , boolean0 , ( - 1044 ) , ( - 1044 ) , stringMap0 , queryOptions_ATTRIBUTESArray0 ) ; queryOptions0 . meta ( "Oi | V2 . Z@U * Jg" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test11 ( ) throws Throwable { QueryOptions queryOptions0 = new QueryOptions ( ) ; queryOptions0 . meta ( " ( 4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test12 ( ) throws Throwable { QueryOptions queryOptions0 = new QueryOptions ( ) ; queryOptions0 . meta ( "" , "" ) ; queryOptions0 . meta ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int childDepth ( ) { return childDepth ; }
void test13 ( ) throws Throwable { QueryOptions queryOptions0 = new QueryOptions ( ) ; boolean boolean0 = queryOptions0 . newRecordNeeded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test14 ( ) throws Throwable { QueryOptions queryOptions0 = new QueryOptions ( ) ; QueryOptions . ATTRIBUTES queryOptions_ATTRIBUTES0 = QueryOptions . ATTRIBUTES . CHILDREN ; queryOptions0 . addAttribute ( queryOptions_ATTRIBUTES0 ) ; boolean boolean0 = queryOptions0 . newRecordNeeded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test15 ( ) throws Throwable { QueryOptions queryOptions0 = new QueryOptions ( ) ; QueryOptions . ATTRIBUTES queryOptions_ATTRIBUTES0 = QueryOptions . ATTRIBUTES . CHILDREN ; queryOptions0 . addAttribute ( queryOptions_ATTRIBUTES0 ) ; queryOptions0 . addAttribute ( queryOptions_ATTRIBUTES0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test16 ( ) throws Throwable { QueryOptions queryOptions0 = new QueryOptions ( ) ; QueryOptions . ATTRIBUTES queryOptions_ATTRIBUTES0 = QueryOptions . ATTRIBUTES . CHILDREN ; queryOptions0 . addAttribute ( queryOptions_ATTRIBUTES0 ) ; QueryOptions . ATTRIBUTES queryOptions_ATTRIBUTES1 = QueryOptions . ATTRIBUTES . HAS_RELATIONS ; queryOptions0 . addAttribute ( queryOptions_ATTRIBUTES1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test17 ( ) throws Throwable { Boolean boolean0 = new Boolean ( "hq + " ) ; QueryOptions queryOptions0 = new QueryOptions ( boolean0 , boolean0 , 548 , 548 ) ; QueryOptions . ATTRIBUTES queryOptions_ATTRIBUTES0 = QueryOptions . ATTRIBUTES . DELETED ; queryOptions0 . addAttribute ( queryOptions_ATTRIBUTES0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int childDepth ( ) { return childDepth ; }
void test18 ( ) throws Throwable { QueryOptions queryOptions0 = new QueryOptions ( ) ; QueryOptions . ATTRIBUTES queryOptions_ATTRIBUTES0 = QueryOptions . ATTRIBUTES . DELETED ; queryOptions0 . removeAttribute ( queryOptions_ATTRIBUTES0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test19 ( ) throws Throwable { Boolean boolean0 = new Boolean ( "hq + " ) ; QueryOptions . ATTRIBUTES queryOptions_ATTRIBUTES0 = QueryOptions . ATTRIBUTES . DELETED ; StringMap stringMap0 = new StringMap ( 548 ) ; QueryOptions . ATTRIBUTES [ ] queryOptions_ATTRIBUTESArray0 = new QueryOptions . ATTRIBUTES [ 10 ] ; QueryOptions queryOptions0 = new QueryOptions ( boolean0 , boolean0 , 548 , 548 , stringMap0 , queryOptions_ATTRIBUTESArray0 ) ; queryOptions0 . removeAttribute ( queryOptions_ATTRIBUTES0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int childDepth ( ) { return childDepth ; }
void test20 ( ) throws Throwable { QueryOptions queryOptions0 = new QueryOptions ( ) ; QueryOptions . ATTRIBUTES queryOptions_ATTRIBUTES0 = QueryOptions . ATTRIBUTES . CHILDREN ; queryOptions0 . addAttribute ( queryOptions_ATTRIBUTES0 ) ; QueryOptions . ATTRIBUTES queryOptions_ATTRIBUTES1 = QueryOptions . ATTRIBUTES . HAS_RELATIONS ; queryOptions0 . removeAttribute ( queryOptions_ATTRIBUTES1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test21 ( ) throws Throwable { StringMap stringMap0 = new StringMap ( 516 , 516 ) ; QueryOptions . ATTRIBUTES [ ] queryOptions_ATTRIBUTESArray0 = new QueryOptions . ATTRIBUTES [ 13 ] ; QueryOptions . ATTRIBUTES queryOptions_ATTRIBUTES0 = QueryOptions . ATTRIBUTES . PARENTS ; queryOptions_ATTRIBUTESArray0 [ 1 ] = queryOptions_ATTRIBUTES0 ; QueryOptions queryOptions0 = new QueryOptions ( ( Boolean ) null , ( Boolean ) null , 516 , 516 , stringMap0 , queryOptions_ATTRIBUTESArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test22 ( ) throws Throwable { QueryOptions queryOptions0 = new QueryOptions ( ) ; queryOptions0 . meta ( "" , "" ) ; String string0 = queryOptions0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMeta ( ) { return meta ! = null & & ! meta . isEmpty ( ) ; }
void test23 ( ) throws Throwable { QueryOptions queryOptions0 = new QueryOptions ( ) ; String string0 = queryOptions0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test24 ( ) throws Throwable { QueryOptions queryOptions0 = new QueryOptions ( ) ; QueryOptions . ATTRIBUTES queryOptions_ATTRIBUTES0 = QueryOptions . ATTRIBUTES . CONTENT ; queryOptions0 . addAttribute ( queryOptions_ATTRIBUTES0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test1 ( ) throws Throwable { StorageTool storageTool0 = new StorageTool ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { File file0 = new File ( " < lastRecordTimestamp > < iso > - < / iso > < / lastRecordTimestamp > " ) ; ProgressTracker progressTracker0 = new ProgressTracker ( file0 , 10L , 10L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLastUpdateStr ( ) { try { return String . format ( ISO_TIME , lastExternalUpdate ) ; } catch ( Exception e ) { log . warn ( "Could not output properly formatted timestamp for " + lastExternalUpdate + " ms" ) ; return "N / A" ; } }
void test2 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; ProgressTracker progressTracker0 = new ProgressTracker ( file0 , 1341L , 1341L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLastUpdateStr ( ) { try { return String . format ( ISO_TIME , lastExternalUpdate ) ; } catch ( Exception e ) { log . warn ( "Could not output properly formatted timestamp for " + lastExternalUpdate + " ms" ) ; return "N / A" ; } }
void test3 ( ) throws Throwable { File file0 = new File ( "nCL - 1\r3oI } ! RX" , "nCL - 1\r3oI } ! RX" ) ; ProgressTracker progressTracker0 = new ProgressTracker ( file0 , ( - 2076L ) , ( - 2076L ) ) ; progressTracker0 . updated ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLastUpdate ( ) { return lastExternalUpdate ; }
void test5 ( ) throws Throwable { File file0 = new File ( "b . 5QH [ Q 0" , "b . 5QH [ Q 0" ) ; ProgressTracker progressTracker0 = new ProgressTracker ( file0 , 18L , 18L ) ; progressTracker0 . loadProgress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLastUpdate ( ) { return lastExternalUpdate ; }
void test6 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; ProgressTracker progressTracker0 = new ProgressTracker ( file0 , 1341L , 1341L ) ; progressTracker0 . loadProgress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLastUpdate ( ) { return lastExternalUpdate ; }
void test7 ( ) throws Throwable { File file0 = new File ( "b . 5QH [ Q 0" , "b . 5QH [ Q 0" ) ; ProgressTracker progressTracker0 = new ProgressTracker ( file0 , 18L , 18L ) ; progressTracker0 . clearProgressFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLastUpdate ( ) { return lastExternalUpdate ; }
void test9 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; long long0 = ProgressTracker . getTimestamp ( file0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTimestamp ( File progressFile , String xml ) { Matcher matcher = TIMESTAMP_PATTERN . matcher ( xml ) ; if ( ! matcher . matches ( ) | | matcher . groupCount ( ) ! = 1 ) { / / noinspection DuplicateStringLiteralInspection log . error ( "getTimestamp : Could not locate iso timestamp in file '" + progressFile + "' containing '" + xml + "' . Returning 0" ) ; return 0 ; } String iso = matcher . group ( 1 ) ; if ( iso . length ( ) = = 15 ) { / / Old second - granularity timestamp , so use epoch if available log . debug ( "Old iso - time '" + iso + "' detected in progress - file . Attempting epoch parsing" ) ; Matcher epochMatcher = EPOCH_TIMESTAMP_PATTERN . matcher ( xml ) ; if ( ! epochMatcher . matches ( ) | | epochMatcher . groupCount ( ) ! = 1 ) { log . warn ( "Old iso - time '" + iso + "' but no epoch . Using second - granularity iso time" ) ; try { return timeParser . parse ( iso ) . getTime ( ) ; } catch ( ParseException e ) { log . error ( "Unable to parse iso datetime '" + iso + "' . Returning epoch 0 ( 1970 - 01 - 01 ) " ) ; return 0 ; } } return Long . parseLong ( epochMatcher . group ( 1 ) ) ; } if ( iso . length ( ) ! = 19 ) { log . warn ( "Unsupported iso - time character count of " + iso . length ( ) + " ( expected 19 ) . " + "Attempting parsing anyway" ) ; } try { return timeParserMS . parse ( iso ) . getTime ( ) ; } catch ( ParseException e ) { log . error ( "Unable to parse iso datetime '" + iso + "' . Returning epoch 0 ( 1970 - 01 - 01 ) " ) ; } return 0 ; / * return new GregorianCalendar ( Integer . parseInt ( matcher . group ( 1 ) ) , / / Months in Calendar starts at 0 Integer . parseInt ( matcher . group ( 2 ) ) - 1 , Integer . parseInt ( matcher . group ( 3 ) ) , Integer . parseInt ( matcher . group ( 4 ) ) , Integer . parseInt ( matcher . group ( 5 ) ) , Integer . parseInt ( matcher . group ( 6 ) ) ) . getTimeInMillis ( ) ; * / }
void test2 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 1980 ) ; ObjectOutputStream objectOutputStream0 = new ObjectOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed ( ( OutputStream ) objectOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasIndent ( ) { return indent ; }
void test3 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 8203 ) ; MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed ( ( OutputStream ) byteArrayOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUnicodeNormalization ( ) { return normalize ; }
void test4 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed ( ( OutputStream ) pipedOutputStream0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUnicodeNormalization ( ) { return normalize ; }
void test5 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 8220 ) ; MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed ( ( OutputStream ) byteArrayOutputStream0 ) ; marcXmlWriterFixed0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUnicodeNormalization ( ) { return normalize ; }
void test12 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed ( ( OutputStream ) byteArrayOutputStream0 , true ) ; marcXmlWriterFixed0 . writeEndDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test13 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed ( ( OutputStream ) pipedOutputStream0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXml ( Record record ) throws SAXException { char temp [ ] ; AttributesImpl atts = new AttributesImpl ( ) ; if ( indent ) { handler . ignorableWhitespace ( "\n " . toCharArray ( ) , 0 , 3 ) ; } handler . startElement ( Constants . MARCXML_NS_URI , RECORD , RECORD , atts ) ; if ( indent ) { handler . ignorableWhitespace ( "\n " . toCharArray ( ) , 0 , 5 ) ; } handler . startElement ( Constants . MARCXML_NS_URI , LEADER , LEADER , atts ) ; Leader leader = record . getLeader ( ) ; temp = leader . toString ( ) . toCharArray ( ) ; handler . characters ( temp , 0 , temp . length ) ; handler . endElement ( Constants . MARCXML_NS_URI , LEADER , LEADER ) ; Iterator i = record . getControlFields ( ) . iterator ( ) ; while ( i . hasNext ( ) ) { ControlField field = ( ControlField ) i . next ( ) ; atts = new AttributesImpl ( ) ; atts . addAttribute ( "" , "tag" , "tag" , "CDATA" , field . getTag ( ) ) ; if ( indent ) { handler . ignorableWhitespace ( "\n " . toCharArray ( ) , 0 , 5 ) ; } handler . startElement ( Constants . MARCXML_NS_URI , CONTROL_FIELD , CONTROL_FIELD , atts ) ; temp = getDataElement ( field . getData ( ) ) ; handler . characters ( temp , 0 , temp . length ) ; handler . endElement ( Constants . MARCXML_NS_URI , CONTROL_FIELD , CONTROL_FIELD ) ; } i = record . getDataFields ( ) . iterator ( ) ; while ( i . hasNext ( ) ) { DataField field = ( DataField ) i . next ( ) ; atts = new AttributesImpl ( ) ; atts . addAttribute ( "" , "tag" , "tag" , "CDATA" , field . getTag ( ) ) ; atts . addAttribute ( "" , "ind1" , "ind1" , "CDATA" , String . valueOf ( field . getIndicator1 ( ) ) ) ; atts . addAttribute ( "" , "ind2" , "ind2" , "CDATA" , String . valueOf ( field . getIndicator2 ( ) ) ) ; if ( indent ) { handler . ignorableWhitespace ( "\n " . toCharArray ( ) , 0 , 5 ) ; } handler . startElement ( Constants . MARCXML_NS_URI , DATA_FIELD , DATA_FIELD , atts ) ; for ( Object o : field . getSubfields ( ) ) { Subfield subfield = ( Subfield ) o ; atts = new AttributesImpl ( ) ; atts . addAttribute ( "" , "code" , "code" , "CDATA" , String . valueOf ( subfield . getCode ( ) ) ) ; if ( indent ) { handler . ignorableWhitespace ( "\n " . toCharArray ( ) , 0 , 7 ) ; } handler . startElement ( Constants . MARCXML_NS_URI , SUBFIELD , SUBFIELD , atts ) ; temp = getDataElement ( subfield . getData ( ) ) ; handler . characters ( temp , 0 , temp . length ) ; handler . endElement ( Constants . MARCXML_NS_URI , SUBFIELD , SUBFIELD ) ; } if ( indent ) { handler . ignorableWhitespace ( "\n " . toCharArray ( ) , 0 , 5 ) ; } handler . endElement ( Constants . MARCXML_NS_URI , DATA_FIELD , DATA_FIELD ) ; } if ( indent ) { handler . ignorableWhitespace ( "\n " . toCharArray ( ) , 0 , 3 ) ; } handler . endElement ( Constants . MARCXML_NS_URI , RECORD , RECORD ) ; }
void test14 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 1980 ) ; ObjectOutputStream objectOutputStream0 = new ObjectOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed ( ( OutputStream ) objectOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUnicodeNormalization ( ) { return normalize ; }
void test15 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 8220 ) ; MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed ( ( OutputStream ) byteArrayOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUnicodeNormalization ( ) { return normalize ; }
void test3 ( ) throws Throwable { FlexibleMarcStreamReader flexibleMarcStreamReader0 = new FlexibleMarcStreamReader ( ( InputStream ) null , ( String ) null ) ; byte [ ] byteArray0 = new byte [ 12 ] ; String string0 = flexibleMarcStreamReader0 . getDataAsString ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDataAsString ( byte [ ] bytes ) { if ( charConverter ! = null ) { return charConverter . convert ( bytes ) ; } try { if ( encoding = = null ) { log . debug ( "Encoding is null . Returning default new String ( byte [ ] ) . This won't work for anything else" + " than plain ASCII" ) ; return new String ( bytes ) ; } return new String ( bytes , encoding ) ; } catch ( UnsupportedEncodingException e ) { throw new MarcException ( "unsupported encoding '" + encoding + "'" , e ) ; } }
void test4 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; FlexibleMarcStreamReader flexibleMarcStreamReader0 = new FlexibleMarcStreamReader ( ( InputStream ) pipedInputStream0 , "MARC8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { try { checkRecords ( ) ; } catch ( IOException e ) { log . warn ( "Failed to retrieve records : " + e . getMessage ( ) , e ) ; next = false ; } return next | | ! records . isEmpty ( ) ; }
void test5 ( ) throws Throwable { FlexibleMarcStreamReader flexibleMarcStreamReader0 = new FlexibleMarcStreamReader ( ( InputStream ) null , "ISO88591" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDataAsString ( byte [ ] bytes ) { if ( charConverter ! = null ) { return charConverter . convert ( bytes ) ; } try { if ( encoding = = null ) { log . debug ( "Encoding is null . Returning default new String ( byte [ ] ) . This won't work for anything else" + " than plain ASCII" ) ; return new String ( bytes ) ; } return new String ( bytes , encoding ) ; } catch ( UnsupportedEncodingException e ) { throw new MarcException ( "unsupported encoding '" + encoding + "'" , e ) ; } }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( int ) ( byte ) 33 , ( int ) ( byte ) 33 ) ; FlexibleMarcStreamReader flexibleMarcStreamReader0 = new FlexibleMarcStreamReader ( ( InputStream ) byteArrayInputStream0 , "M3Na" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { try { checkRecords ( ) ; } catch ( IOException e ) { log . warn ( "Failed to retrieve records : " + e . getMessage ( ) , e ) ; next = false ; } return next | | ! records . isEmpty ( ) ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; ReplayInputStream replayInputStream0 = new ReplayInputStream ( byteArray0 , ( long ) ( byte ) 0 , " & art" ) ; SequenceInputStream sequenceInputStream0 = new SequenceInputStream ( ( InputStream ) replayInputStream0 , ( InputStream ) replayInputStream0 ) ; FlexibleMarcStreamReader flexibleMarcStreamReader0 = new FlexibleMarcStreamReader ( ( InputStream ) sequenceInputStream0 , " & art" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { try { checkRecords ( ) ; } catch ( IOException e ) { log . warn ( "Failed to retrieve records : " + e . getMessage ( ) , e ) ; next = false ; } return next | | ! records . isEmpty ( ) ; }
void test0 ( ) throws Throwable { Status . CODE status_CODE0 = Status . CODE . crashed ; Status status0 = new Status ( status_CODE0 , "" ) ; Status . CODE status_CODE1 = status0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CODE getCode ( ) { return code ; }
void test1 ( ) throws Throwable { Status . CODE status_CODE0 = Status . CODE . crashed ; Status status0 = new Status ( status_CODE0 , "" ) ; String string0 = status0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test0 ( ) throws Throwable { ControlCommand controlCommand0 = new ControlCommand ( ( ConnectionManager < ControlConnection > ) null , "Z ! H ; { V7 ? Xz2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsage ( ) { return usage ; }
void test0 ( ) throws Throwable { StatusCommand statusCommand0 = new StatusCommand ( ( ConnectionManager < ControlConnection > ) null , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsage ( ) { return usage ; }
void test0 ( ) throws Throwable { ClientsCommand clientsCommand0 = new ClientsCommand ( ( ConnectionManager < ControlConnection > ) null , " ? } 4 { `sE3 1Mt : + 'vw" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsage ( ) { return usage ; }
void test0 ( ) throws Throwable { SpecCommand specCommand0 = new SpecCommand ( ( ConnectionManager < ClientConnection > ) null , "running" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsage ( ) { return usage ; }
void test0 ( ) throws Throwable { ServicesCommand servicesCommand0 = new ServicesCommand ( ( ConnectionManager < ClientConnection > ) null , "9 - [ + S5^~A\\A'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { RepositoryCommand repositoryCommand0 = new RepositoryCommand ( ( ConnectionManager < ClientConnection > ) null , "y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsage ( ) { return usage ; }
void test0 ( ) throws Throwable { KillCommand killCommand0 = new KillCommand ( ( ConnectionManager < ClientConnection > ) null , " | %3hE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsage ( ) { return usage ; }
void test0 ( ) throws Throwable { StatusCommand statusCommand0 = new StatusCommand ( ( ConnectionManager < ClientConnection > ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsage ( ) { return usage ; }
void test0 ( ) throws Throwable { IdCommand idCommand0 = new IdCommand ( ( ConnectionManager < Service > ) null , "`" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { TermStatPerformance termStatPerformance0 = new TermStatPerformance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { LuceneTestHelper luceneTestHelper0 = new LuceneTestHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test1 ( ) throws Throwable { ExtraAsserts extraAsserts0 = new ExtraAsserts ( ) ; extraAsserts0 . error ( ( SAXParseException ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test2 ( ) throws Throwable { ExtraAsserts extraAsserts0 = new ExtraAsserts ( ) ; extraAsserts0 . warning ( ( SAXParseException ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void warning ( SAXParseException exception ) throws SAXException { saxProblems . add ( exception ) ; }
void test3 ( ) throws Throwable { int [ ] intArray0 = new int [ 4 ] ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { int [ ] intArray0 = new int [ 6 ] ; int [ ] intArray1 = new int [ 1 ] ; / / Undeclared exception ! try { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test5 ( ) throws Throwable { int [ ] intArray0 = new int [ 4 ] ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test6 ( ) throws Throwable { int [ ] intArray0 = new int [ 6 ] ; / / Undeclared exception ! try { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test7 ( ) throws Throwable { long [ ] longArray0 = new long [ 3 ] ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test8 ( ) throws Throwable { long [ ] longArray0 = new long [ 3 ] ; long [ ] longArray1 = new long [ 7 ] ; / / Undeclared exception ! try { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test9 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . add ( "\" 7^ > BwfcHn ? FLf > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return responses . isEmpty ( ) ; }
void test10 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . add ( "\" 7^ > BwfcHn ? FLf > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test11 ( ) throws Throwable { / / Undeclared exception ! try { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { NoExitTestCase noExitTestCase0 = new NoExitTestCase ( "kan6 [ wR < ~Pa'" ) ; noExitTestCase0 . tearDown ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { XMLStepper xMLStepper0 = new XMLStepper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { VoidShellContext voidShellContext0 = new VoidShellContext ( ) ; voidShellContext0 . warn ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String readLine ( ) { if ( ! lineBuffer . isEmpty ( ) ) { String line = lineBuffer . pop ( ) ; log . trace ( "Returning string from line buffer : " + line ) ; return line ; } log . trace ( "Requesting line from feedback" ) ; try { Message msg = new Message ( Message . MESSAGE_REQUEST , "" ) ; feedback . putMessage ( msg ) ; return msg . getResponse ( ) ; } catch ( IOException e ) { log . warn ( "Failed to post readline request to feedback" , e ) ; return "" ; } }
void test3 ( ) throws Throwable { VoidShellContext voidShellContext0 = new VoidShellContext ( ) ; voidShellContext0 . prompt ( "zkswi6vqpXV% > 5qm" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Throwable getLastError ( ) { return lastError ; }
void test4 ( ) throws Throwable { VoidShellContext voidShellContext0 = new VoidShellContext ( "2Tmo3 = `pZL ( $p`hKn" ) ; String string0 = voidShellContext0 . getLastError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Throwable getLastError ( ) { return lastError ; }
void test5 ( ) throws Throwable { VoidShellContext voidShellContext0 = new VoidShellContext ( ) ; voidShellContext0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String readLine ( ) { if ( ! lineBuffer . isEmpty ( ) ) { String line = lineBuffer . pop ( ) ; log . trace ( "Returning string from line buffer : " + line ) ; return line ; } log . trace ( "Requesting line from feedback" ) ; try { Message msg = new Message ( Message . MESSAGE_REQUEST , "" ) ; feedback . putMessage ( msg ) ; return msg . getResponse ( ) ; } catch ( IOException e ) { log . warn ( "Failed to post readline request to feedback" , e ) ; return "" ; } }
void test6 ( ) throws Throwable { VoidShellContext voidShellContext0 = new VoidShellContext ( ) ; voidShellContext0 . info ( "The class \"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String readLine ( ) { if ( ! lineBuffer . isEmpty ( ) ) { String line = lineBuffer . pop ( ) ; log . trace ( "Returning string from line buffer : " + line ) ; return line ; } log . trace ( "Requesting line from feedback" ) ; try { Message msg = new Message ( Message . MESSAGE_REQUEST , "" ) ; feedback . putMessage ( msg ) ; return msg . getResponse ( ) ; } catch ( IOException e ) { log . warn ( "Failed to post readline request to feedback" , e ) ; return "" ; } }
void test7 ( ) throws Throwable { VoidShellContext voidShellContext0 = new VoidShellContext ( ) ; voidShellContext0 . debug ( "K^I ( ; X ! D * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String readLine ( ) { if ( ! lineBuffer . isEmpty ( ) ) { String line = lineBuffer . pop ( ) ; log . trace ( "Returning string from line buffer : " + line ) ; return line ; } log . trace ( "Requesting line from feedback" ) ; try { Message msg = new Message ( Message . MESSAGE_REQUEST , "" ) ; feedback . putMessage ( msg ) ; return msg . getResponse ( ) ; } catch ( IOException e ) { log . warn ( "Failed to post readline request to feedback" , e ) ; return "" ; } }
void test8 ( ) throws Throwable { VoidShellContext voidShellContext0 = new VoidShellContext ( ) ; String string0 = voidShellContext0 . readLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String readLine ( ) { if ( ! lineBuffer . isEmpty ( ) ) { String line = lineBuffer . pop ( ) ; log . trace ( "Returning string from line buffer : " + line ) ; return line ; } log . trace ( "Requesting line from feedback" ) ; try { Message msg = new Message ( Message . MESSAGE_REQUEST , "" ) ; feedback . putMessage ( msg ) ; return msg . getResponse ( ) ; } catch ( IOException e ) { log . warn ( "Failed to post readline request to feedback" , e ) ; return "" ; } }
void test0 ( ) throws Throwable { Help help0 = new Help ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsage ( ) { return usage ; }
void test2 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; PushbackInputStream pushbackInputStream0 = new PushbackInputStream ( ( InputStream ) pipedInputStream0 ) ; PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) pipedOutputStream0 , false ) ; CopyingInputStream copyingInputStream0 = new CopyingInputStream ( ( InputStream ) pushbackInputStream0 , ( OutputStream ) printStream0 , false ) ; copyingInputStream0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean markSupported ( ) { / / If the Stream is auto - closing , we cannot support marking return ! autoClose & & in . markSupported ( ) ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 122 ) ; CopyingInputStream copyingInputStream0 = new CopyingInputStream ( ( InputStream ) byteArrayInputStream0 , ( OutputStream ) byteArrayOutputStream0 , false ) ; int int0 = copyingInputStream0 . read ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int available ( ) throws IOException { return is . available ( ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 16 ] ; ReplayInputStream replayInputStream0 = new ReplayInputStream ( byteArray0 , ( long ) ( byte ) 0 , ( - 784L ) , ( String ) null ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; CopyingInputStream copyingInputStream0 = new CopyingInputStream ( ( InputStream ) replayInputStream0 , ( OutputStream ) byteArrayOutputStream0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 122 ) ; CopyingInputStream copyingInputStream0 = new CopyingInputStream ( ( InputStream ) byteArrayInputStream0 , ( OutputStream ) byteArrayOutputStream0 , false ) ; long long0 = copyingInputStream0 . skip ( ( long ) ( byte ) 77 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 16 ] ; ReplayInputStream replayInputStream0 = new ReplayInputStream ( byteArray0 , ( long ) ( byte ) 0 , ( - 784L ) , ( String ) null ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; CopyingInputStream copyingInputStream0 = new CopyingInputStream ( ( InputStream ) replayInputStream0 , ( OutputStream ) byteArrayOutputStream0 , true ) ; copyingInputStream0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int available ( ) throws IOException { return is . available ( ) ; }
void test1 ( ) throws Throwable { PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; / * * * @param element the element to virtually add to the tracker . * / void add ( T element ) ; / * * * @param elements the elements to virtually add to the tracker . * / void add ( Collection < T > elements ) ; / * * * @param element the element to virtually remove from the tracker . * / void remove ( T element ) ; / * * * @param elements the elements to virtually remove from the tracker . * / void remove ( Collection < T > elements ) ; / * * * Clear all tracking data . * / void clear ( ) ; }
void test3 ( ) throws Throwable { PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMin ( ) { return min ; }
void test4 ( ) throws Throwable { PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValues ( T [ ] values , int size , boolean reuseArray , int maxCapacity ) { if ( size > values . length ) { throw new IllegalArgumentException ( String . format ( "The size ( %d ) must be equal to or smaller than the length of values ( %d ) " , size , values . length ) ) ; } if ( maxCapacity < size ) { throw new IllegalArgumentException ( String . format ( "The maxCapacity ( %d ) must be equal to or greater than size ( %d ) " , maxCapacity , size ) ) ; } this . maxCapacity = maxCapacity ; this . size = size ; if ( reuseArray ) { heap = values ; } else { / / noinspection unchecked heap = ( T [ ] ) new Comparable [ Math . max ( Math . min ( DEFAULT_INITIAL_CAPACITY , maxCapacity ) , size ) ] ; System . arraycopy ( values , 0 , heap , 0 , size ) ; } / / This is O ( n ) , although it looks like O ( n * log ( n ) ) for ( int position = size / 2 - 1 ; position > = 0 ; position - - ) { siftDown ( position ) ; } }
void test6 ( ) throws Throwable { PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong ( 7 , 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; / * * * @param element the element to virtually add to the tracker . * / void add ( T element ) ; / * * * @param elements the elements to virtually add to the tracker . * / void add ( Collection < T > elements ) ; / * * * @param element the element to virtually remove from the tracker . * / void remove ( T element ) ; / * * * @param elements the elements to virtually remove from the tracker . * / void remove ( Collection < T > elements ) ; / * * * Clear all tracking data . * / void clear ( ) ; }
void test7 ( ) throws Throwable { PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; / * * * @param element the element to virtually add to the tracker . * / void add ( T element ) ; / * * * @param elements the elements to virtually add to the tracker . * / void add ( Collection < T > elements ) ; / * * * @param element the element to virtually remove from the tracker . * / void remove ( T element ) ; / * * * @param elements the elements to virtually remove from the tracker . * / void remove ( Collection < T > elements ) ; / * * * Clear all tracking data . * / void clear ( ) ; }
void test8 ( ) throws Throwable { PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMin ( ) { return min ; }
void test9 ( ) throws Throwable { PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T removeMin ( ) { T result = getMin ( ) ; heap [ 0 ] = heap [ size - 1 ] ; size - - ; siftDown ( ) ; return result ; }
void test10 ( ) throws Throwable { PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; / * * * @param element the element to virtually add to the tracker . * / void add ( T element ) ; / * * * @param elements the elements to virtually add to the tracker . * / void add ( Collection < T > elements ) ; / * * * @param element the element to virtually remove from the tracker . * / void remove ( T element ) ; / * * * @param elements the elements to virtually remove from the tracker . * / void remove ( Collection < T > elements ) ; / * * * Clear all tracking data . * / void clear ( ) ; }
void test1 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; FutureInputStream futureInputStream0 = new FutureInputStream ( ( InputStream ) pipedInputStream0 ) ; boolean boolean0 = futureInputStream0 . isClosed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) throws SQLException { return stmt . isClosed ( ) ; }
void test3 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; FutureInputStream futureInputStream0 = new FutureInputStream ( ( InputStream ) pipedInputStream0 ) ; futureInputStream0 . mark ( ( - 607 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) throws SQLException { return stmt . isClosed ( ) ; }
void test4 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; FutureInputStream futureInputStream0 = new FutureInputStream ( ( InputStream ) pipedInputStream0 ) ; futureInputStream0 . setDoNotCloseSource ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) throws SQLException { return stmt . isClosed ( ) ; }
void test5 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; FutureInputStream futureInputStream0 = new FutureInputStream ( ( InputStream ) pipedInputStream0 ) ; futureInputStream0 . markSupported ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) throws SQLException { return stmt . isClosed ( ) ; }
void test6 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; FutureInputStream futureInputStream0 = new FutureInputStream ( ( InputStream ) pipedInputStream0 ) ; futureInputStream0 . skip ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) throws SQLException { return stmt . isClosed ( ) ; }
void test8 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; FutureInputStream futureInputStream0 = new FutureInputStream ( ( InputStream ) pipedInputStream0 ) ; futureInputStream0 . available ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) throws SQLException { return stmt . isClosed ( ) ; }
void test10 ( ) throws Throwable { FutureInputStream futureInputStream0 = new FutureInputStream ( ( InputStream ) null ) ; boolean boolean0 = futureInputStream0 . waitForClose ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void waitForClose ( ) { while ( ! closed ) { ( waiter ) { try { waiter . wait ( ) ; } catch ( InterruptedException e ) { log . debug ( "Received InterruptedException while waiting for close . Retrying waitForclose ( ) " ) ; } } } }
void test11 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; FutureInputStream futureInputStream0 = new FutureInputStream ( ( InputStream ) pipedInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) throws SQLException { return stmt . isClosed ( ) ; }
void test1 ( ) throws Throwable { ULocale uLocale0 = ULocale . GERMAN ; Locale locale0 = uLocale0 . toLocale ( ) ; RuleBasedCollator ruleBasedCollator0 = ( RuleBasedCollator ) CollatorFactory . createCollator ( locale0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collator createCollator ( Locale locale ) { Collator collator = Collator . getInstance ( locale ) ; if ( collator instanceof RuleBasedCollator ) { / / true ignores spaces and punctuation but at SB space is just / / as significant as letters ( and comes before them ) ( ( RuleBasedCollator ) collator ) . setAlternateHandlingShifted ( false ) ; } else { log . warn ( "Expected the ICU Collator to be a " + RuleBasedCollator . class . getSimpleName ( ) + " but got " + collator . getClass ( ) ) ; } return collator ; }
void test2 ( ) throws Throwable { CollatorFactory collatorFactory0 = new CollatorFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { Locale locale0 = Locale . FRENCH ; String string0 = CollatorFactory . getCollatorKey ( locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollatorKey ( Locale locale ) { return "icu_collator_" + locale . toString ( ) ; }
void test5 ( ) throws Throwable { ULocale uLocale0 = ULocale . GERMAN ; RuleBasedCollator ruleBasedCollator0 = ( RuleBasedCollator ) Collator . getInstance ( uLocale0 ) ; RuleBasedCollator ruleBasedCollator1 = ( RuleBasedCollator ) CollatorFactory . fixCollator ( ( Collator ) ruleBasedCollator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collator fixCollator ( Collator collator ) { return fixCollator ( collator , true ) ; }
void test6 ( ) throws Throwable { ULocale uLocale0 = ULocale . GERMAN ; RuleBasedCollator ruleBasedCollator0 = ( RuleBasedCollator ) Collator . getInstance ( uLocale0 ) ; RuleBasedCollator ruleBasedCollator1 = ( RuleBasedCollator ) CollatorFactory . adjustAASorting ( ( Collator ) ruleBasedCollator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collator adjustAASorting ( Collator collator ) { String AA = " , AA , Aa , aA , aa" ; if ( ! ( collator instanceof RuleBasedCollator ) ) { log . warn ( String . format ( "adjustAASorting expected a RuleBasedCollator but got %s . Unable to update Collator" , collator . getClass ( ) ) ) ; return collator ; } String rules = ( ( RuleBasedCollator ) collator ) . getRules ( ) ; if ( ! rules . contains ( AA ) ) { log . debug ( "adjustAASorting : The received Collator already treats aa as 2 * a" ) ; return collator ; } try { RuleBasedCollator newCollator = new RuleBasedCollator ( rules . replace ( AA , "" ) ) ; log . trace ( "adjustAASorting : Successfully updated Collator to treat aa as 2 * a" ) ; return newCollator ; } catch ( ParseException e ) { throw new RuntimeException ( "ParseException while parsing\n" + rules , e ) ; } catch ( Exception e ) { throw new RuntimeException ( "Exception while parsing\n" + rules , e ) ; } }
void test0 ( ) throws Throwable { ListSorter listSorter0 = new ListSorter ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . add ( "" ) ; listSorter0 . sort ( ( List < String > ) linkedList0 , ( Comparator < ? super String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test1 ( ) throws Throwable { DeferredSystemExit deferredSystemExit0 = new DeferredSystemExit ( 446 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DeferredSystemExit ( int exitCode , int delay ) { this . exitCode = exitCode ; this . delay = delay ; startExit ( ) ; }
void test1 ( ) throws Throwable { NoOpLog noOpLog0 = new NoOpLog ( "GN * " ) ; StringReader stringReader0 = new StringReader ( "GN * " ) ; LoggingReader loggingReader0 = new LoggingReader ( ( Log ) noOpLog0 , "GN * " , ( Reader ) stringReader0 ) ; loggingReader0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test3 ( ) throws Throwable { NoOpLog noOpLog0 = new NoOpLog ( "" ) ; StringReader stringReader0 = new StringReader ( "" ) ; LoggingReader loggingReader0 = new LoggingReader ( ( Log ) noOpLog0 , "" , ( Reader ) stringReader0 ) ; long long0 = loggingReader0 . skip ( ( - 1639L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long skip ( long n ) throws IOException { return source . skip ( n ) ; }
void test4 ( ) throws Throwable { SimpleLog simpleLog0 = new SimpleLog ( "J" ) ; char [ ] charArray0 = new char [ 4 ] ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; LoggingReader loggingReader0 = new LoggingReader ( ( Log ) simpleLog0 , "J" , ( Reader ) charArrayReader0 ) ; int int0 = loggingReader0 . read ( charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ready ( ) throws IOException { return source . ready ( ) ; }
void test5 ( ) throws Throwable { NoOpLog noOpLog0 = new NoOpLog ( "GN * " ) ; StringReader stringReader0 = new StringReader ( "GN * " ) ; LoggingReader loggingReader0 = new LoggingReader ( ( Log ) noOpLog0 , "GN * " , ( Reader ) stringReader0 ) ; loggingReader0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean markSupported ( ) { / / If the Stream is auto - closing , we cannot support marking return ! autoClose & & in . markSupported ( ) ; }
void test6 ( ) throws Throwable { NoOpLog noOpLog0 = new NoOpLog ( "GN * " ) ; StringReader stringReader0 = new StringReader ( "GN * " ) ; LoggingReader loggingReader0 = new LoggingReader ( ( Log ) noOpLog0 , "GN * " , ( Reader ) stringReader0 ) ; boolean boolean0 = loggingReader0 . ready ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test7 ( ) throws Throwable { NoOpLog noOpLog0 = new NoOpLog ( "GN * " ) ; StringReader stringReader0 = new StringReader ( "GN * " ) ; LoggingReader loggingReader0 = new LoggingReader ( ( Log ) noOpLog0 , "GN * " , ( Reader ) stringReader0 ) ; loggingReader0 . mark ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test9 ( ) throws Throwable { SimpleLog simpleLog0 = new SimpleLog ( "J" ) ; char [ ] charArray0 = new char [ 4 ] ; simpleLog0 . setLevel ( 0 ) ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; LoggingReader loggingReader0 = new LoggingReader ( ( Log ) simpleLog0 , "J" , ( Reader ) charArrayReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test1 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; LineInputStream lineInputStream0 = new LineInputStream ( ( InputStream ) pipedInputStream0 , "T\"J^ ; wU23 [ io ( DJU" ) ; boolean boolean0 = lineInputStream0 . markSupported ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean markSupported ( ) { / / If the Stream is auto - closing , we cannot support marking return ! autoClose & & in . markSupported ( ) ; }
void test2 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( 29 ) ; PushbackInputStream pushbackInputStream0 = new PushbackInputStream ( ( InputStream ) pipedInputStream0 ) ; LineInputStream lineInputStream0 = new LineInputStream ( ( InputStream ) pushbackInputStream0 , "" ) ; lineInputStream0 . mark ( 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean markSupported ( ) { / / If the Stream is auto - closing , we cannot support marking return ! autoClose & & in . markSupported ( ) ; }
void test3 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; LineInputStream lineInputStream0 = new LineInputStream ( ( InputStream ) pipedInputStream0 , "T\"J^ ; wU23 [ io ( DJU" ) ; lineInputStream0 . close ( ) ; String string0 = lineInputStream0 . readLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String readLine ( ) { if ( ! lineBuffer . isEmpty ( ) ) { String line = lineBuffer . pop ( ) ; log . trace ( "Returning string from line buffer : " + line ) ; return line ; } log . trace ( "Requesting line from feedback" ) ; try { Message msg = new Message ( Message . MESSAGE_REQUEST , "" ) ; feedback . putMessage ( msg ) ; return msg . getResponse ( ) ; } catch ( IOException e ) { log . warn ( "Failed to post readline request to feedback" , e ) ; return "" ; } }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; SequenceInputStream sequenceInputStream0 = new SequenceInputStream ( ( InputStream ) byteArrayInputStream0 , ( InputStream ) byteArrayInputStream0 ) ; LineInputStream lineInputStream0 = new LineInputStream ( ( InputStream ) sequenceInputStream0 , "" ) ; try { lineInputStream0 . readLine ( ) ; fail ( "Expecting exception : UnsupportedEncodingException" ) ; } catch ( UnsupportedEncodingException e ) { / * * * / } "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test5 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( 1473 ) ; LineInputStream lineInputStream0 = new LineInputStream ( ( InputStream ) pipedInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test6 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; LineInputStream lineInputStream0 = new LineInputStream ( ( InputStream ) pipedInputStream0 , "T\"J^ ; wU23 [ io ( DJU" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; ReplayInputStream replayInputStream0 = new ReplayInputStream ( byteArray0 , ( long ) ( byte ) 0 , "$mQWFtgO" ) ; LineInputStream lineInputStream0 = new LineInputStream ( ( InputStream ) replayInputStream0 , "$mQWFtgO" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test8 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; LineInputStream lineInputStream0 = new LineInputStream ( ( InputStream ) pipedInputStream0 , "T\"J^ ; wU23 [ io ( DJU" ) ; long long0 = lineInputStream0 . skip ( ( long ) ( byte ) ( - 12 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long skip ( long n ) throws IOException { return source . skip ( n ) ; }
void test9 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; LineInputStream lineInputStream0 = new LineInputStream ( ( InputStream ) pipedInputStream0 , "5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long skip ( long n ) throws IOException { return source . skip ( n ) ; }
void test10 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; LineInputStream lineInputStream0 = new LineInputStream ( ( InputStream ) pipedInputStream0 , "T\"J^ ; wU23 [ io ( DJU" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int available ( ) throws IOException { return is . available ( ) ; }
void test0 ( ) throws Throwable { RangeNumber rangeNumber0 = new RangeNumber ( ( - 2147483635 ) , ( - 2147483635 ) , ( - 2147483635 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( int ) ( modificationTime ^ modificationTime > > > 32 ) ; result = 29 * result + ( int ) ( getLength ( ) ^ getLength ( ) > > > 32 ) ; result = 29 * result + ( id ! = null ? id . hashCode ( ) : 0 ) ; return result ; }
void test1 ( ) throws Throwable { RangeNumber rangeNumber0 = new RangeNumber ( ( - 2147483635 ) , ( - 2147483635 ) , ( - 2147483635 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean add ( Response response ) { / / noinspection DuplicateStringLiteralInspection log . trace ( "Adding '" + response + "' to collection" ) ; Response oldResponse = responses . get ( response . getName ( ) ) ; if ( oldResponse = = null ) { responses . put ( response . getName ( ) , response ) ; / / log . info ( "Put responses with timing total : " + getTiming ( ) ) ; return true ; } / / noinspection ObjectEquality if ( oldResponse = = response ) { return false ; } oldResponse . merge ( response ) ; if ( "dummy" . equals ( getTiming ( ) ) ) { throw new IllegalStateException ( "JIT - guard test . Should never be thrown" ) ; } return true ; }
void test2 ( ) throws Throwable { RangeNumber rangeNumber0 = new RangeNumber ( 1377 , 1377 , 1377 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMax ( ) { return max ; }
void test3 ( ) throws Throwable { RangeNumber rangeNumber0 = new RangeNumber ( 534 , Integer . MIN_VALUE , 534 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RangeNumber subtract ( RangeNumber other ) { return new RangeNumber ( edge ( ( long ) getPivot ( ) - ( long ) other . getPivot ( ) ) , edge ( ( long ) getMin ( ) - ( long ) other . getMin ( ) ) , edge ( ( long ) getMax ( ) - ( long ) other . getMax ( ) ) ) ; }
void test5 ( ) throws Throwable { RangeNumber rangeNumber0 = new RangeNumber ( 1385 , 1385 , Integer . MAX_VALUE ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMax ( ) { return max ; }
void test6 ( ) throws Throwable { RangeNumber rangeNumber0 = new RangeNumber ( 1385 , 1385 , Integer . MAX_VALUE ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPivot ( ) { return pivot ; }
void test7 ( ) throws Throwable { RangeNumber rangeNumber0 = new RangeNumber ( 534 , Integer . MIN_VALUE , 534 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMin ( ) { return min ; }
void test8 ( ) throws Throwable { RangeNumber rangeNumber0 = new RangeNumber ( 534 , Integer . MIN_VALUE , 534 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RangeNumber max ( RangeNumber other ) { return new RangeNumber ( edge ( Math . max ( ( long ) getPivot ( ) , ( long ) other . getPivot ( ) ) ) , getMin ( ) = = NEG_INF | | other . getMin ( ) = = NEG_INF ? NEG_INF : edge ( Math . max ( ( long ) getMax ( ) , ( long ) other . getMax ( ) ) ) , edge ( Math . max ( ( long ) getMin ( ) , ( long ) other . getMin ( ) ) ) ) ; }
void test9 ( ) throws Throwable { RangeNumber rangeNumber0 = new RangeNumber ( 534 , Integer . MIN_VALUE , 534 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( File f1 , File f2 ) { return f1 = = null & & f2 = = null | | f1 ! = null & & f1 . equals ( f2 ) ; }
void test10 ( ) throws Throwable { RangeNumber rangeNumber0 = new RangeNumber ( ( - 2147483635 ) , ( - 2147483635 ) , ( - 2147483635 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPivot ( ) { return pivot ; }
void test11 ( ) throws Throwable { RangeNumber rangeNumber0 = new RangeNumber ( ( - 663 ) , ( - 663 ) , ( - 663 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMin ( ) { return min ; }
void test12 ( ) throws Throwable { RangeNumber rangeNumber0 = new RangeNumber ( ( - 663 ) , ( - 663 ) , ( - 663 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMin ( ) { return min ; }
void test13 ( ) throws Throwable { RangeNumber rangeNumber0 = new RangeNumber ( 1377 , 1377 , 1377 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( File f1 , File f2 ) { return f1 = = null & & f2 = = null | | f1 ! = null & & f1 . equals ( f2 ) ; }
void test14 ( ) throws Throwable { RangeNumber rangeNumber0 = new RangeNumber ( ( - 2147483635 ) , ( - 2147483635 ) , ( - 2147483635 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPivot ( ) { return pivot ; }
void test0 ( ) throws Throwable { BitUtil bitUtil0 = new BitUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; ReplayInputStream replayInputStream0 = new ReplayInputStream ( byteArray0 , ( long ) ( byte ) ( - 1 ) , ( - 1303L ) , "" ) ; long long0 = BitUtil . readLong ( ( InputStream ) replayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long readLong ( ) throws IOException { return BitUtil . readLong ( this ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = BitUtil . longToBytes ( ( - 1L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long readLong ( ) throws IOException { return BitUtil . readLong ( this ) ; }
void test1 ( ) throws Throwable { LinkedHashSet < String > linkedHashSet0 = new LinkedHashSet < String > ( ) ; linkedHashSet0 . add ( "rq" ) ; List < String > list0 = Environment . escapeSystemProperties ( ( Iterable < String > ) linkedHashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return responses . isEmpty ( ) ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 9 ] ; stringArray0 [ 7 ] = "$ { " ; String [ ] stringArray1 = Environment . escapeSystemProperties ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String escapeSystemProperties ( String s ) { if ( s = = null ) { return null ; } String result = s ; / / Micro optimization to not escape anything if there are no refs in s if ( ! s . contains ( "$ { " ) ) { return s ; } / / This is ridiculously inefficient , but it gets the job done . . . for ( Map . Entry entry : System . getProperties ( ) . entrySet ( ) ) { String pattern = "$ { " + entry . getKey ( ) . toString ( ) + " } " ; String newVal = entry . getValue ( ) . toString ( ) ; result = result . replace ( pattern , newVal ) ; } return result ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = Environment . escapeSystemProperties ( ( String [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String escapeSystemProperties ( String s ) { if ( s = = null ) { return null ; } String result = s ; / / Micro optimization to not escape anything if there are no refs in s if ( ! s . contains ( "$ { " ) ) { return s ; } / / This is ridiculously inefficient , but it gets the job done . . . for ( Map . Entry entry : System . getProperties ( ) . entrySet ( ) ) { String pattern = "$ { " + entry . getKey ( ) . toString ( ) + " } " ; String newVal = entry . getValue ( ) . toString ( ) ; result = result . replace ( pattern , newVal ) ; } return result ; }
void test4 ( ) throws Throwable { List < String > list0 = Environment . escapeSystemProperties ( ( Iterable < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String escapeSystemProperties ( String s ) { if ( s = = null ) { return null ; } String result = s ; / / Micro optimization to not escape anything if there are no refs in s if ( ! s . contains ( "$ { " ) ) { return s ; } / / This is ridiculously inefficient , but it gets the job done . . . for ( Map . Entry entry : System . getProperties ( ) . entrySet ( ) ) { String pattern = "$ { " + entry . getKey ( ) . toString ( ) + " } " ; String newVal = entry . getValue ( ) . toString ( ) ; result = result . replace ( pattern , newVal ) ; } return result ; }
void test0 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; ManyToManyMapper manyToManyMapper0 = new ManyToManyMapper ( ( List < String > ) linkedList0 ) ; Map < String , Set < String > > map0 = manyToManyMapper0 . getReverse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return responses . isEmpty ( ) ; }
void test1 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; ManyToManyMapper manyToManyMapper0 = new ManyToManyMapper ( ( List < String > ) linkedList0 ) ; Map < String , Set < String > > map0 = manyToManyMapper0 . getForward ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test3 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . add ( " * - * " ) ; linkedList0 . add ( " * - * " ) ; ManyToManyMapper manyToManyMapper0 = new ManyToManyMapper ( ( List < String > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManyToManyMapper ( List < String > rules ) { super ( ) ; forward = new HashMap < String , Set < String > > ( rules . size ( ) * 2 ) ; reverse = new HashMap < String , Set < String > > ( rules . size ( ) * 2 ) ; addRules ( rules ) ; }
void test0 ( ) throws Throwable { ArrayUtil arrayUtil0 = new ArrayUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { int [ ] intArray0 = new int [ 9 ] ; int [ ] intArray1 = ArrayUtil . mergeArrays ( intArray0 , intArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] mergeArrays ( String [ ] one , String [ ] two ) { if ( Arrays . equals ( one , two ) ) { return one ; } List < String > merged = Arrays . asList ( one ) ; for ( String t : two ) { if ( ! merged . contains ( t ) ) { merged . add ( t ) ; } } String [ ] result = new String [ merged . size ( ) ] ; merged . toArray ( result ) ; return result ; }
void test2 ( ) throws Throwable { int [ ] intArray0 = new int [ 9 ] ; int [ ] intArray1 = new int [ 1 ] ; intArray1 [ 0 ] = 8 ; int [ ] intArray2 = ArrayUtil . mergeArrays ( intArray0 , intArray1 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] mergeArrays ( String [ ] one , String [ ] two ) { if ( Arrays . equals ( one , two ) ) { return one ; } List < String > merged = Arrays . asList ( one ) ; for ( String t : two ) { if ( ! merged . contains ( t ) ) { merged . add ( t ) ; } } String [ ] result = new String [ merged . size ( ) ] ; merged . toArray ( result ) ; return result ; }
void test5 ( ) throws Throwable { int [ ] intArray0 = new int [ 12 ] ; int [ ] intArray1 = ArrayUtil . makeRoom ( intArray0 , 1244 , ( double ) 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] makeRoom ( int [ ] anArray , int insertPos , double growthFactor , int maxIncrement , int headRoom ) { if ( ! ( insertPos > = anArray . length - headRoom ) ) { return anArray ; } int newSize = Math . max ( insertPos + ( headRoom = = 0 ? 1 : headRoom ) , Math . min ( insertPos + 1 + maxIncrement , ( int ) ( insertPos * growthFactor ) ) ) ; int [ ] newArray = new int [ newSize ] ; System . arraycopy ( anArray , 0 , newArray , 0 , anArray . length ) ; return newArray ; }
void test6 ( ) throws Throwable { int [ ] intArray0 = new int [ 9 ] ; int [ ] intArray1 = ArrayUtil . makeRoom ( intArray0 , 0 , ( double ) 8 , 0 , 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] makeRoom ( int [ ] anArray , int insertPos , double growthFactor , int maxIncrement , int headRoom ) { if ( ! ( insertPos > = anArray . length - headRoom ) ) { return anArray ; } int newSize = Math . max ( insertPos + ( headRoom = = 0 ? 1 : headRoom ) , Math . min ( insertPos + 1 + maxIncrement , ( int ) ( insertPos * growthFactor ) ) ) ; int [ ] newArray = new int [ newSize ] ; System . arraycopy ( anArray , 0 , newArray , 0 , anArray . length ) ; return newArray ; }
void test7 ( ) throws Throwable { int [ ] intArray0 = new int [ 9 ] ; int [ ] intArray1 = new int [ 1 ] ; int [ ] intArray2 = ArrayUtil . mergeArrays ( intArray1 , intArray0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] makeRoom ( int [ ] anArray , int insertPos , double growthFactor , int maxIncrement , int headRoom ) { if ( ! ( insertPos > = anArray . length - headRoom ) ) { return anArray ; } int newSize = Math . max ( insertPos + ( headRoom = = 0 ? 1 : headRoom ) , Math . min ( insertPos + 1 + maxIncrement , ( int ) ( insertPos * growthFactor ) ) ) ; int [ ] newArray = new int [ newSize ] ; System . arraycopy ( anArray , 0 , newArray , 0 , anArray . length ) ; return newArray ; }
void test8 ( ) throws Throwable { long [ ] longArray0 = new long [ 9 ] ; long [ ] longArray1 = ArrayUtil . makeRoom ( longArray0 , 1588 , ( double ) 0L , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] makeRoom ( int [ ] anArray , int insertPos , double growthFactor , int maxIncrement , int headRoom ) { if ( ! ( insertPos > = anArray . length - headRoom ) ) { return anArray ; } int newSize = Math . max ( insertPos + ( headRoom = = 0 ? 1 : headRoom ) , Math . min ( insertPos + 1 + maxIncrement , ( int ) ( insertPos * growthFactor ) ) ) ; int [ ] newArray = new int [ newSize ] ; System . arraycopy ( anArray , 0 , newArray , 0 , anArray . length ) ; return newArray ; }
void test9 ( ) throws Throwable { long [ ] longArray0 = new long [ 6 ] ; long [ ] longArray1 = ArrayUtil . makeRoom ( longArray0 , 0 , ( double ) 0L , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] makeRoom ( int [ ] anArray , int insertPos , double growthFactor , int maxIncrement , int headRoom ) { if ( ! ( insertPos > = anArray . length - headRoom ) ) { return anArray ; } int newSize = Math . max ( insertPos + ( headRoom = = 0 ? 1 : headRoom ) , Math . min ( insertPos + 1 + maxIncrement , ( int ) ( insertPos * growthFactor ) ) ) ; int [ ] newArray = new int [ newSize ] ; System . arraycopy ( anArray , 0 , newArray , 0 , anArray . length ) ; return newArray ; }
void test10 ( ) throws Throwable { long [ ] longArray0 = new long [ 10 ] ; long [ ] longArray1 = ArrayUtil . makeRoom ( longArray0 , 28 , ( double ) 28 , 28 , 28 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] makeRoom ( int [ ] anArray , int insertPos , double growthFactor , int maxIncrement , int headRoom ) { if ( ! ( insertPos > = anArray . length - headRoom ) ) { return anArray ; } int newSize = Math . max ( insertPos + ( headRoom = = 0 ? 1 : headRoom ) , Math . min ( insertPos + 1 + maxIncrement , ( int ) ( insertPos * growthFactor ) ) ) ; int [ ] newArray = new int [ newSize ] ; System . arraycopy ( anArray , 0 , newArray , 0 , anArray . length ) ; return newArray ; }
void test0 ( ) throws Throwable { PriorityQueue < Comparable < Object > > priorityQueue0 = new PriorityQueue < Comparable < Object > > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test1 ( ) throws Throwable { PriorityQueue < String > priorityQueue0 = new PriorityQueue < String > ( 1 , 1030 ) ; priorityQueue0 . insert ( "" ) ; priorityQueue0 . insert ( "" ) ; priorityQueue0 . insert ( "T" ) ; priorityQueue0 . siftDown ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test2 ( ) throws Throwable { PriorityQueue < String > priorityQueue0 = new PriorityQueue < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test3 ( ) throws Throwable { PriorityQueue < String > priorityQueue0 = new PriorityQueue < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test4 ( ) throws Throwable { PriorityQueue < Integer > priorityQueue0 = new PriorityQueue < Integer > ( ( Comparator < Integer > ) null , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test6 ( ) throws Throwable { PriorityQueue < String > priorityQueue0 = new PriorityQueue < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; / * * * @param element the element to virtually add to the tracker . * / void add ( T element ) ; / * * * @param elements the elements to virtually add to the tracker . * / void add ( Collection < T > elements ) ; / * * * @param element the element to virtually remove from the tracker . * / void remove ( T element ) ; / * * * @param elements the elements to virtually remove from the tracker . * / void remove ( Collection < T > elements ) ; / * * * Clear all tracking data . * / void clear ( ) ; }
void test8 ( ) throws Throwable { PriorityQueue < Integer > priorityQueue0 = new PriorityQueue < Integer > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValues ( T [ ] values , int size , boolean reuseArray , int maxCapacity ) { if ( size > values . length ) { throw new IllegalArgumentException ( String . format ( "The size ( %d ) must be equal to or smaller than the length of values ( %d ) " , size , values . length ) ) ; } if ( maxCapacity < size ) { throw new IllegalArgumentException ( String . format ( "The maxCapacity ( %d ) must be equal to or greater than size ( %d ) " , maxCapacity , size ) ) ; } this . maxCapacity = maxCapacity ; this . size = size ; if ( reuseArray ) { heap = values ; } else { / / noinspection unchecked heap = ( T [ ] ) new Comparable [ Math . max ( Math . min ( DEFAULT_INITIAL_CAPACITY , maxCapacity ) , size ) ] ; System . arraycopy ( values , 0 , heap , 0 , size ) ; } / / This is O ( n ) , although it looks like O ( n * log ( n ) ) for ( int position = size / 2 - 1 ; position > = 0 ; position - - ) { siftDown ( position ) ; } }
void test9 ( ) throws Throwable { PriorityQueue < String > priorityQueue0 = new PriorityQueue < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValues ( T [ ] values , int size , boolean reuseArray , int maxCapacity ) { if ( size > values . length ) { throw new IllegalArgumentException ( String . format ( "The size ( %d ) must be equal to or smaller than the length of values ( %d ) " , size , values . length ) ) ; } if ( maxCapacity < size ) { throw new IllegalArgumentException ( String . format ( "The maxCapacity ( %d ) must be equal to or greater than size ( %d ) " , maxCapacity , size ) ) ; } this . maxCapacity = maxCapacity ; this . size = size ; if ( reuseArray ) { heap = values ; } else { / / noinspection unchecked heap = ( T [ ] ) new Comparable [ Math . max ( Math . min ( DEFAULT_INITIAL_CAPACITY , maxCapacity ) , size ) ] ; System . arraycopy ( values , 0 , heap , 0 , size ) ; } / / This is O ( n ) , although it looks like O ( n * log ( n ) ) for ( int position = size / 2 - 1 ; position > = 0 ; position - - ) { siftDown ( position ) ; } }
void test10 ( ) throws Throwable { PriorityQueue < String > priorityQueue0 = new PriorityQueue < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValues ( T [ ] values , int size , boolean reuseArray , int maxCapacity ) { if ( size > values . length ) { throw new IllegalArgumentException ( String . format ( "The size ( %d ) must be equal to or smaller than the length of values ( %d ) " , size , values . length ) ) ; } if ( maxCapacity < size ) { throw new IllegalArgumentException ( String . format ( "The maxCapacity ( %d ) must be equal to or greater than size ( %d ) " , maxCapacity , size ) ) ; } this . maxCapacity = maxCapacity ; this . size = size ; if ( reuseArray ) { heap = values ; } else { / / noinspection unchecked heap = ( T [ ] ) new Comparable [ Math . max ( Math . min ( DEFAULT_INITIAL_CAPACITY , maxCapacity ) , size ) ] ; System . arraycopy ( values , 0 , heap , 0 , size ) ; } / / This is O ( n ) , although it looks like O ( n * log ( n ) ) for ( int position = size / 2 - 1 ; position > = 0 ; position - - ) { siftDown ( position ) ; } }
void test11 ( ) throws Throwable { PriorityQueue < String > priorityQueue0 = new PriorityQueue < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; / * * * @param element the element to virtually add to the tracker . * / void add ( T element ) ; / * * * @param elements the elements to virtually add to the tracker . * / void add ( Collection < T > elements ) ; / * * * @param element the element to virtually remove from the tracker . * / void remove ( T element ) ; / * * * @param elements the elements to virtually remove from the tracker . * / void remove ( Collection < T > elements ) ; / * * * Clear all tracking data . * / void clear ( ) ; }
void test12 ( ) throws Throwable { PriorityQueue < Integer > priorityQueue0 = new PriorityQueue < Integer > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test13 ( ) throws Throwable { PriorityQueue < String > priorityQueue0 = new PriorityQueue < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T removeMin ( ) { T result = getMin ( ) ; heap [ 0 ] = heap [ size - 1 ] ; size - - ; siftDown ( ) ; return result ; }
void test14 ( ) throws Throwable { PriorityQueue < String > priorityQueue0 = new PriorityQueue < String > ( 1 , 1030 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test15 ( ) throws Throwable { PriorityQueue < Integer > priorityQueue0 = new PriorityQueue < Integer > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test1 ( ) throws Throwable { CharSequenceReader charSequenceReader0 = new CharSequenceReader ( ( CharSequence ) "7E3 ! ] T7 = j ? x & MGb5#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void reset ( ) throws IOException { source . reset ( ) ; }
void test2 ( ) throws Throwable { CharSequenceReader charSequenceReader0 = new CharSequenceReader ( ( CharSequence ) " / mnt / fastdata / ac1gf / SF110 / dist / 44_summa" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test4 ( ) throws Throwable { CharSequenceReader charSequenceReader0 = new CharSequenceReader ( ( CharSequence ) "\u97D3\u56FD\u8A9E" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test5 ( ) throws Throwable { CharSequenceReader charSequenceReader0 = new CharSequenceReader ( ( CharSequence ) "\u97D3\u56FD\u8A9E" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test6 ( ) throws Throwable { CharSequenceReader charSequenceReader0 = new CharSequenceReader ( ( CharSequence ) "W P" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test7 ( ) throws Throwable { Segment segment0 = new Segment ( ) ; CharSequenceReader charSequenceReader0 = new CharSequenceReader ( ( CharSequence ) segment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test0 ( ) throws Throwable { FileDescriptor fileDescriptor0 = FileDescriptor . err ; FileReader fileReader0 = new FileReader ( fileDescriptor0 ) ; Version version0 = Version . LUCENE_40 ; LowerCaseCharFilter lowerCaseCharFilter0 = new LowerCaseCharFilter ( version0 , ( Reader ) fileReader0 ) ; int int0 = lowerCaseCharFilter0 . correct ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int correct ( int i ) { return i ; / / TODO : Check what the correct behaviour is here }
void test1 ( ) throws Throwable { FileDescriptor fileDescriptor0 = FileDescriptor . err ; FileReader fileReader0 = new FileReader ( fileDescriptor0 ) ; Version version0 = Version . LUCENE_40 ; LowerCaseCharFilter lowerCaseCharFilter0 = new LowerCaseCharFilter ( version0 , ( Reader ) fileReader0 ) ; lowerCaseCharFilter0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ready ( ) throws IOException { return source . ready ( ) ; }
void test2 ( ) throws Throwable { Version version0 = Version . LUCENE_35 ; char [ ] charArray0 = new char [ 6 ] ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; PushbackReader pushbackReader0 = new PushbackReader ( ( Reader ) charArrayReader0 , ( int ) 'T' ) ; LowerCaseCharFilter lowerCaseCharFilter0 = new LowerCaseCharFilter ( version0 , ( Reader ) pushbackReader0 ) ; lowerCaseCharFilter0 . read ( charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test0 ( ) throws Throwable { MARCObject . DataField mARCObject_DataField0 = new MARCObject . DataField ( ( String ) null , ( String ) null , ( String ) null , ( String ) null ) ; String string0 = mARCObject_DataField0 . getTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MARCObject ( String id , String type ) { log . debug ( "Creating with id = '" + id + "' , type = '" + type + "'" ) ; this . id = id ; this . type = type ; }
void test1 ( ) throws Throwable { MARCObject . DataField mARCObject_DataField0 = new MARCObject . DataField ( "GPPigA" , "" , "" , "" ) ; String string0 = mARCObject_DataField0 . getInd2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) throws RemoteException ; / * * * Exit the JVM of the service . If the service has not been stopped * the service should try to shut itself down cleanly before * exiting * @throws RemoteException if there is an error communicating with the * service . * / void kill ( ) throws RemoteException ; }
void test2 ( ) throws Throwable { MARCObject . DataField mARCObject_DataField0 = new MARCObject . DataField ( "GPPigA" , "" , "" , "" ) ; String string0 = mARCObject_DataField0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) throws RemoteException ; / * * * Exit the JVM of the service . If the service has not been stopped * the service should try to shut itself down cleanly before * exiting * @throws RemoteException if there is an error communicating with the * service . * / void kill ( ) throws RemoteException ; }
void test3 ( ) throws Throwable { MARCObject . DataField mARCObject_DataField0 = new MARCObject . DataField ( "GPPigA" , "" , "" , "" ) ; List < MARCObject . SubField > list0 = mARCObject_DataField0 . getSubFields ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) throws RemoteException ; / * * * Exit the JVM of the service . If the service has not been stopped * the service should try to shut itself down cleanly before * exiting * @throws RemoteException if there is an error communicating with the * service . * / void kill ( ) throws RemoteException ; }
void test4 ( ) throws Throwable { MARCObject . DataField mARCObject_DataField0 = new MARCObject . DataField ( "9Yf & , { OE5j [ ( 2ap ] o9L" , "9Yf & , { OE5j [ ( 2ap ] o9L" , "9Yf & , { OE5j [ ( 2ap ] o9L" , "9Yf & , { OE5j [ ( 2ap ] o9L" ) ; String string0 = mARCObject_DataField0 . getInd1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MARCObject ( String id , String type ) { log . debug ( "Creating with id = '" + id + "' , type = '" + type + "'" ) ; this . id = id ; this . type = type ; }
void test5 ( ) throws Throwable { MARCObject . ControlField mARCObject_ControlField0 = new MARCObject . ControlField ( "GPPigA" , "GPPigA" , "GPPigA" ) ; String string0 = mARCObject_ControlField0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) throws RemoteException ; / * * * Exit the JVM of the service . If the service has not been stopped * the service should try to shut itself down cleanly before * exiting * @throws RemoteException if there is an error communicating with the * service . * / void kill ( ) throws RemoteException ; }
void test8 ( ) throws Throwable { MARCObject . ControlField mARCObject_ControlField0 = new MARCObject . ControlField ( "9Yf & , { OE5j [ ( 2ap ] o9L" , "9Yf & , { OE5j [ ( 2ap ] o9L" , "9Yf & , { OE5j [ ( 2ap ] o9L" ) ; String string0 = mARCObject_ControlField0 . getTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MARCObject ( String id , String type ) { log . debug ( "Creating with id = '" + id + "' , type = '" + type + "'" ) ; this . id = id ; this . type = type ; }
void test9 ( ) throws Throwable { MARCObject . ControlField mARCObject_ControlField0 = new MARCObject . ControlField ( "org . apache . axis . encoding . ser . ElementDeserializerFactory" , "org . apache . axis . encoding . ser . ElementDeserializerFactory" , "org . apache . axis . encoding . ser . ElementDeserializerFactory" ) ; String string0 = mARCObject_ControlField0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getContent ( ) { return getContent ( true ) ; }
void test10 ( ) throws Throwable { MARCObject . SubField mARCObject_SubField0 = new MARCObject . SubField ( "org . apache . axis . encoding . ser . ElementDeserializerFactory" , "org . apache . axis . encoding . ser . ElementDeserializerFactory" ) ; String string0 = mARCObject_SubField0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CODE getCode ( ) { return code ; }
void test11 ( ) throws Throwable { MARCObject . SubField mARCObject_SubField0 = new MARCObject . SubField ( "9Yf & , { OE5j [ ( 2ap ] o9L" , "9Yf & , { OE5j [ ( 2ap ] o9L" ) ; String string0 = mARCObject_SubField0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getContent ( ) { return getContent ( true ) ; }
void test16 ( ) throws Throwable { MARCObject . Leader mARCObject_Leader0 = new MARCObject . Leader ( ( String ) null , ( String ) null ) ; String string0 = mARCObject_Leader0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) throws RemoteException ; / * * * Exit the JVM of the service . If the service has not been stopped * the service should try to shut itself down cleanly before * exiting * @throws RemoteException if there is an error communicating with the * service . * / void kill ( ) throws RemoteException ; }
void test17 ( ) throws Throwable { MARCObject . Leader mARCObject_Leader0 = new MARCObject . Leader ( ( String ) null , ( String ) null ) ; String string0 = mARCObject_Leader0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getContent ( ) { return getContent ( true ) ; }
void test26 ( ) throws Throwable { MARCObject . ControlField mARCObject_ControlField0 = new MARCObject . ControlField ( "9Yf & , { OE5j [ ( 2ap ] o9L" , "9Yf & , { OE5j [ ( 2ap ] o9L" , "9Yf & , { OE5j [ ( 2ap ] o9L" ) ; MARCObject . SubField mARCObject_SubField0 = new MARCObject . SubField ( "9Yf & , { OE5j [ ( 2ap ] o9L" , "9Yf & , { OE5j [ ( 2ap ] o9L" ) ; MARCObject . SubField mARCObject_SubField1 = ( MARCObject . SubField ) mARCObject_SubField0 . clone ( ) ; boolean boolean0 = mARCObject_ControlField0 . equals ( ( Object ) mARCObject_SubField1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( File f1 , File f2 ) { return f1 = = null & & f2 = = null | | f1 ! = null & & f1 . equals ( f2 ) ; }
void test27 ( ) throws Throwable { MARCObject . DataField mARCObject_DataField0 = new MARCObject . DataField ( "GPPigA" , "" , "" , "" ) ; mARCObject_DataField0 . getFirstSubField ( "GPPigA" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) throws RemoteException ; / * * * Exit the JVM of the service . If the service has not been stopped * the service should try to shut itself down cleanly before * exiting * @throws RemoteException if there is an error communicating with the * service . * / void kill ( ) throws RemoteException ; }
void test30 ( ) throws Throwable { MARCObject . DataField mARCObject_DataField0 = new MARCObject . DataField ( " ? eVbTw ( he\"" , " ? eVbTw ( he\"" , " ? eVbTw ( he\"" , " ? eVbTw ( he\"" ) ; boolean boolean0 = mARCObject_DataField0 . equals ( ( Object ) "typeMapping" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( File f1 , File f2 ) { return f1 = = null & & f2 = = null | | f1 ! = null & & f1 . equals ( f2 ) ; }
void test31 ( ) throws Throwable { MARCObject . DataField mARCObject_DataField0 = new MARCObject . DataField ( "GPPigA" , "" , "" , "" ) ; MARCObject . DataField mARCObject_DataField1 = new MARCObject . DataField ( "" , "" , "" , "" ) ; MARCObject . DataField mARCObject_DataField2 = ( MARCObject . DataField ) mARCObject_DataField1 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( File f1 , File f2 ) { return f1 = = null & & f2 = = null | | f1 ! = null & & f1 . equals ( f2 ) ; }
void test32 ( ) throws Throwable { MARCObject . ControlField mARCObject_ControlField0 = new MARCObject . ControlField ( "Setting level of logger [ " , "Setting level of logger [ " , "Setting level of logger [ " ) ; MARCObject . ControlField mARCObject_ControlField1 = ( MARCObject . ControlField ) mARCObject_ControlField0 . clone ( ) ; MARCObject . SubField mARCObject_SubField0 = new MARCObject . SubField ( " < ? xml version = \"1 . 0\" encoding = \"UTF - 8\" ? > \n < record xmlns = \"http : / / www . loc . gov / MARC21 / slim\" id = \"Setting level of logger [ \" type = \"Setting level of logger [ \" > \n < / record > \n" , " < ? xml version = \"1 . 0\" encoding = \"UTF - 8\" ? > \n < record xmlns = \"http : / / www . loc . gov / MARC21 / slim\" id = \"Setting level of logger [ \" type = \"Setting level of logger [ \" > \n < / record > \n" ) ; boolean boolean0 = mARCObject_SubField0 . equals ( ( Object ) mARCObject_ControlField1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( File f1 , File f2 ) { return f1 = = null & & f2 = = null | | f1 ! = null & & f1 . equals ( f2 ) ; }
void test0 ( ) throws Throwable { IndexReducer indexReducer0 = new IndexReducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { IndexDumper indexDumper0 = new IndexDumper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { Inspect inspect0 = new Inspect ( "C | ( olectorPoolFator" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMem ( ) { return mem ; }
void test0 ( ) throws Throwable { BuildPerformance buildPerformance0 = new BuildPerformance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { PipedReader pipedReader0 = new PipedReader ( ) ; LowerCasingReader lowerCasingReader0 = new LowerCasingReader ( ( Reader ) pipedReader0 ) ; LineNumberReader lineNumberReader0 = new LineNumberReader ( ( Reader ) pipedReader0 , 287 ) ; LowerCasingReader lowerCasingReader1 = lowerCasingReader0 . setSource ( ( Reader ) lineNumberReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean markSupported ( ) { / / If the Stream is auto - closing , we cannot support marking return ! autoClose & & in . markSupported ( ) ; }
void test1 ( ) throws Throwable { char [ ] charArray0 = new char [ 2 ] ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; LowerCasingReader lowerCasingReader0 = new LowerCasingReader ( ( Reader ) charArrayReader0 ) ; String string0 = lowerCasingReader0 . transform ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String transform ( String s ) { return s . toLowerCase ( ) ; }
void test2 ( ) throws Throwable { FileDescriptor fileDescriptor0 = new FileDescriptor ( ) ; FileReader fileReader0 = new FileReader ( fileDescriptor0 ) ; LowerCasingReader lowerCasingReader0 = new LowerCasingReader ( ( Reader ) fileReader0 ) ; char [ ] charArray0 = lowerCasingReader0 . transformToChars ( ' ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char [ ] transformToChars ( char c ) { return new char [ ] { Character . toLowerCase ( c ) } ; }
void test3 ( ) throws Throwable { LowerCasingReader lowerCasingReader0 = new LowerCasingReader ( ( Reader ) null ) ; LowerCasingReader lowerCasingReader1 = lowerCasingReader0 . clone ( ) ; int int0 = lowerCasingReader1 . read ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test4 ( ) throws Throwable { char [ ] charArray0 = new char [ 2 ] ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; LowerCasingReader lowerCasingReader0 = new LowerCasingReader ( ( Reader ) charArrayReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test5 ( ) throws Throwable { LowerCasingReader lowerCasingReader0 = new LowerCasingReader ( ( Reader ) null ) ; LowerCasingReader lowerCasingReader1 = lowerCasingReader0 . clone ( ) ; char [ ] charArray0 = new char [ 4 ] ; int int0 = lowerCasingReader1 . read ( charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { int result = super . read ( ) ; if ( autoClose & & result = = - 1 ) { close ( ) ; } return result ; }
void test7 ( ) throws Throwable { LowerCasingReader lowerCasingReader0 = new LowerCasingReader ( ( Reader ) null ) ; LowerCasingReader lowerCasingReader1 = lowerCasingReader0 . clone ( ) ; CircularCharBuffer circularCharBuffer0 = new CircularCharBuffer ( 0 , 0 ) ; int int0 = lowerCasingReader1 . read ( circularCharBuffer0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return responses . isEmpty ( ) ; }
void test8 ( ) throws Throwable { StringReader stringReader0 = new StringReader ( "v * \"p3 [ LnhHIo" ) ; BufferedReader bufferedReader0 = new BufferedReader ( ( Reader ) stringReader0 ) ; LineNumberReader lineNumberReader0 = new LineNumberReader ( ( Reader ) bufferedReader0 ) ; PushbackReader pushbackReader0 = new PushbackReader ( ( Reader ) lineNumberReader0 ) ; LowerCasingReader lowerCasingReader0 = new LowerCasingReader ( ( Reader ) pushbackReader0 ) ; CircularCharBuffer circularCharBuffer0 = new CircularCharBuffer ( 19 , 19 ) ; int int0 = lowerCasingReader0 . read ( circularCharBuffer0 , 19 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test9 ( ) throws Throwable { PipedReader pipedReader0 = new PipedReader ( ) ; LowerCasingReader lowerCasingReader0 = new LowerCasingReader ( ( Reader ) pipedReader0 ) ; char [ ] charArray0 = new char [ 3 ] ; char [ ] charArray1 = lowerCasingReader0 . transformToChars ( charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char [ ] transformToChars ( char c ) { return new char [ ] { Character . toLowerCase ( c ) } ; }
void test0 ( ) throws Throwable { SummaNumberAnalyzer summaNumberAnalyzer0 = new SummaNumberAnalyzer ( ) ; Analyzer . TokenStreamComponents analyzer_TokenStreamComponents0 = summaNumberAnalyzer0 . createComponents ( "" , ( Reader ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TokenStreamComponents createComponents ( String fieldName , Reader reader ) { return new TokenStreamComponents ( new KeywordTokenizer ( reader ) ) ; }
void test0 ( ) throws Throwable { Random random0 = new Random ( ) ; MockAnalyzer mockAnalyzer0 = new MockAnalyzer ( random0 ) ; SummaFieldSeparatingAnalyzer summaFieldSeparatingAnalyzer0 = new SummaFieldSeparatingAnalyzer ( ( Analyzer ) mockAnalyzer0 ) ; String string0 = summaFieldSeparatingAnalyzer0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test0 ( ) throws Throwable { SummaAnalyzer summaAnalyzer0 = new SummaAnalyzer ( " ) @#m < E = " , false , "" , false , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SummaAnalyzer ( String transliterationRules , boolean keepDefaultTransliterations , String tokenRules , boolean keepDefaultTokenRules , boolean ignoreCase ) { this ( transliterationRules , keepDefaultTransliterations , tokenRules , keepDefaultTokenRules , ignoreCase , null ) ; }
void test1 ( ) throws Throwable { BytesRef bytesRef0 = new BytesRef ( ( CharSequence ) "5IN1zmxs5w" ) ; BytesRef bytesRef1 = SummaAnalyzer . getOriginalString ( bytesRef0 , bytesRef0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BytesRef getOriginalString ( BytesRef concat , BytesRef reuse ) { return ConcatICUCollatedTermAttributeImpl . getOriginalString ( concat , reuse ) ; }
void test2 ( ) throws Throwable { ULocale uLocale0 = ULocale . CANADA_FRENCH ; RuleBasedCollator ruleBasedCollator0 = ( RuleBasedCollator ) Collator . getInstance ( uLocale0 ) ; SummaAnalyzer summaAnalyzer0 = new SummaAnalyzer ( "" , true , " { v4cVa = ScjlLP9H" , true , false , ( Collator ) ruleBasedCollator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TokenStreamComponents createComponents ( String fieldName , Reader reader ) { return new TokenStreamComponents ( new KeywordTokenizer ( reader ) ) ; }
void test3 ( ) throws Throwable { SummaAnalyzer summaAnalyzer0 = new SummaAnalyzer ( "" , false , " ) @#m < E = " , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SummaAnalyzer ( String transliterationRules , boolean keepDefaultTransliterations , String tokenRules , boolean keepDefaultTokenRules , boolean ignoreCase ) { this ( transliterationRules , keepDefaultTransliterations , tokenRules , keepDefaultTokenRules , ignoreCase , null ) ; }
void test0 ( ) throws Throwable { MockBytesAnalyzer mockBytesAnalyzer0 = new MockBytesAnalyzer ( ) ; DynamicPerFieldAnalyzerWrapper dynamicPerFieldAnalyzerWrapper0 = new DynamicPerFieldAnalyzerWrapper ( ( Analyzer ) mockBytesAnalyzer0 ) ; String string0 = dynamicPerFieldAnalyzerWrapper0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test1 ( ) throws Throwable { MockPayloadAnalyzer mockPayloadAnalyzer0 = new MockPayloadAnalyzer ( ) ; HashMap < String , Analyzer > hashMap0 = new HashMap < String , Analyzer > ( ) ; DynamicPerFieldAnalyzerWrapper dynamicPerFieldAnalyzerWrapper0 = new DynamicPerFieldAnalyzerWrapper ( ( Analyzer ) mockPayloadAnalyzer0 , ( Map < String , Analyzer > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DynamicPerFieldAnalyzerWrapper ( Analyzer defaultAnalyzer ) { this ( defaultAnalyzer , null , null ) ; }
void test2 ( ) throws Throwable { MockBytesAnalyzer mockBytesAnalyzer0 = new MockBytesAnalyzer ( ) ; DynamicPerFieldAnalyzerWrapper dynamicPerFieldAnalyzerWrapper0 = new DynamicPerFieldAnalyzerWrapper ( ( Analyzer ) mockBytesAnalyzer0 ) ; Analyzer . TokenStreamComponents analyzer_TokenStreamComponents0 = dynamicPerFieldAnalyzerWrapper0 . wrapComponents ( "the" , ( Analyzer . TokenStreamComponents ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TokenStreamComponents wrapComponents ( String fieldName , TokenStreamComponents components ) { return components ; }
void test4 ( ) throws Throwable { MockBytesAnalyzer mockBytesAnalyzer0 = new MockBytesAnalyzer ( ) ; DynamicPerFieldAnalyzerWrapper dynamicPerFieldAnalyzerWrapper0 = new DynamicPerFieldAnalyzerWrapper ( ( Analyzer ) mockBytesAnalyzer0 ) ; int int0 = dynamicPerFieldAnalyzerWrapper0 . getPositionIncrementGap ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPositionIncrementGap ( String fieldName ) { return 100 ; }
void test5 ( ) throws Throwable { MockPayloadAnalyzer mockPayloadAnalyzer0 = new MockPayloadAnalyzer ( ) ; HashMap < String , Analyzer > hashMap0 = new HashMap < String , Analyzer > ( ) ; hashMap0 . put ( "J8^ ( R + w\t" , ( Analyzer ) mockPayloadAnalyzer0 ) ; DynamicPerFieldAnalyzerWrapper dynamicPerFieldAnalyzerWrapper0 = new DynamicPerFieldAnalyzerWrapper ( ( Analyzer ) mockPayloadAnalyzer0 , ( Map < String , Analyzer > ) hashMap0 , ( Map < String , Analyzer > ) hashMap0 ) ; MockPayloadAnalyzer mockPayloadAnalyzer1 = ( MockPayloadAnalyzer ) dynamicPerFieldAnalyzerWrapper0 . getWrappedAnalyzer ( "Undefind variable : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Analyzer getWrappedAnalyzer ( String fieldName ) { if ( fieldName = = null ) { return defaultAnalyzer ; } Analyzer analyzer = fieldAnalyzers . get ( fieldName ) ; if ( analyzer ! = null ) { return analyzer ; } for ( Map . Entry < String , Analyzer > entry : prefixAnalyzers . entrySet ( ) ) { if ( fieldName . startsWith ( entry . getKey ( ) ) ) { return entry . getValue ( ) ; } } return defaultAnalyzer ; }
void test6 ( ) throws Throwable { MockPayloadAnalyzer mockPayloadAnalyzer0 = new MockPayloadAnalyzer ( ) ; HashMap < String , Analyzer > hashMap0 = new HashMap < String , Analyzer > ( ) ; HashMap < String , Analyzer > hashMap1 = new HashMap < String , Analyzer > ( ( Map < ? extends String , ? extends Analyzer > ) hashMap0 ) ; DynamicPerFieldAnalyzerWrapper dynamicPerFieldAnalyzerWrapper0 = new DynamicPerFieldAnalyzerWrapper ( ( Analyzer ) mockPayloadAnalyzer0 , ( Map < String , Analyzer > ) hashMap1 , ( Map < String , Analyzer > ) hashMap0 ) ; hashMap0 . put ( "Undefined variable : " , ( Analyzer ) dynamicPerFieldAnalyzerWrapper0 ) ; DynamicPerFieldAnalyzerWrapper dynamicPerFieldAnalyzerWrapper1 = ( DynamicPerFieldAnalyzerWrapper ) dynamicPerFieldAnalyzerWrapper0 . getWrappedAnalyzer ( "Undefined variable : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Analyzer getWrappedAnalyzer ( String fieldName ) { if ( fieldName = = null ) { return defaultAnalyzer ; } Analyzer analyzer = fieldAnalyzers . get ( fieldName ) ; if ( analyzer ! = null ) { return analyzer ; } for ( Map . Entry < String , Analyzer > entry : prefixAnalyzers . entrySet ( ) ) { if ( fieldName . startsWith ( entry . getKey ( ) ) ) { return entry . getValue ( ) ; } } return defaultAnalyzer ; }
void test0 ( ) throws Throwable { Map < String , String > map0 = RuleParser . parse ( " < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return responses . isEmpty ( ) ; }
void test1 ( ) throws Throwable { RuleParser ruleParser0 = new RuleParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { String string0 = RuleParser . sanitize ( " < " , false , " < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SanitizedQuery sanitize ( String query ) { if ( "" . equals ( query ) ) { return new SanitizedQuery ( query ) ; } return sanitize ( new SanitizedQuery ( query ) ) ; }
void test3 ( ) throws Throwable { String string0 = RuleParser . sanitize ( " < " , true , " < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SanitizedQuery sanitize ( String query ) { if ( "" . equals ( query ) ) { return new SanitizedQuery ( query ) ; } return sanitize ( new SanitizedQuery ( query ) ) ; }
void test4 ( ) throws Throwable { String string0 = RuleParser . sanitize ( ( String ) null , true , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SanitizedQuery sanitize ( String query ) { if ( "" . equals ( query ) ) { return new SanitizedQuery ( query ) ; } return sanitize ( new SanitizedQuery ( query ) ) ; }
void test5 ( ) throws Throwable { String string0 = RuleParser . sanitize ( "" , true , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SanitizedQuery sanitize ( String query ) { if ( "" . equals ( query ) ) { return new SanitizedQuery ( query ) ; } return sanitize ( new SanitizedQuery ( query ) ) ; }
void test6 ( ) throws Throwable { String string0 = RuleParser . sanitize ( ( String ) null , false , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SanitizedQuery sanitize ( String query ) { if ( "" . equals ( query ) ) { return new SanitizedQuery ( query ) ; } return sanitize ( new SanitizedQuery ( query ) ) ; }
void test0 ( ) throws Throwable { SummaSymbolRemovingAnalyzer summaSymbolRemovingAnalyzer0 = new SummaSymbolRemovingAnalyzer ( ) ; StringReader stringReader0 = new StringReader ( "U } { , } " ) ; Analyzer . TokenStreamComponents analyzer_TokenStreamComponents0 = summaSymbolRemovingAnalyzer0 . createComponents ( "U } { , } " , ( Reader ) stringReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TokenStreamComponents createComponents ( String fieldName , Reader reader ) { return new TokenStreamComponents ( new KeywordTokenizer ( reader ) ) ; }
void test1 ( ) throws Throwable { StringReader stringReader0 = new StringReader ( "i < F + HC1u5qQbn^uT7h" ) ; SummaKeywordAnalyzer summaKeywordAnalyzer0 = new SummaKeywordAnalyzer ( ) ; KeywordTokenizer keywordTokenizer0 = ( KeywordTokenizer ) summaKeywordAnalyzer0 . tokenStream ( "i < F + HC1u5qQbn^uT7h" , ( Reader ) stringReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SummaKeywordAnalyzer ( ) { this ( null ) ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; TermEntry termEntry0 = new TermEntry ( "l^1_DSNRz ] \"` ( $O " , stringArray0 ) ; String [ ] stringArray1 = termEntry0 . getHeadings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getHeadings ( ) { return headings ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; TermEntry termEntry0 = new TermEntry ( "a = " , stringArray0 ) ; int int0 = termEntry0 . compareTo ( termEntry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object o ) { return getId ( ) . compareTo ( ( ( Record ) o ) . getId ( ) ) ; }
void test3 ( ) throws Throwable { int int0 = TermEntry . comparePersistent ( "g ) #' { 3 = AK5\t0\t0" , "g ) #' { 3 = AK5\t0\t0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int comparePersistent ( String term , String persistent ) { return term . compareTo ( unEscaper . transform ( persistent . split ( "\t" , 2 ) [ 0 ] ) ) ; / / TODO : Switch to optimized version when unit - tests are added / * for ( int i = 0 ; i < term . length ( ) & & i < persistent . length ( ) ; i + + ) { if ( term . charAt ( i ) = = persistent . charAt ( i ) ) { continue ; } if ( persistent . charAt ( i ) = = '\t' ) { } } * / }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; TermEntry termEntry0 = new TermEntry ( "g ) #' { 3 = AK5\t0\t0" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTerm ( ) { checkValid ( ) ; return term ; }
void test9 ( ) throws Throwable { long [ ] longArray0 = new long [ 2 ] ; String [ ] stringArray0 = new String [ 3 ] ; TermEntry termEntry0 = new TermEntry ( "g ) #' { 3 = AK5" , longArray0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSum ( int [ ] indexes ) { long sum = 0 ; for ( int index : indexes ) { sum + = stats [ index ] ; } return sum ; }
void test11 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "8k ] " ; TermEntry termEntry0 = new TermEntry ( "8k ] " , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < Pair < String , Integer > > getIndex ( ) { return index ; }
void test12 ( ) throws Throwable { long [ ] longArray0 = new long [ 2 ] ; String [ ] stringArray0 = new String [ 3 ] ; TermEntry termEntry0 = new TermEntry ( "g ) #' { 3 = AK5" , longArray0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toPersistent ( ) { if ( stats . length = = 0 ) { return term ; } StringWriter sw = new StringWriter ( 50 ) ; try { toPersistent ( sw ) ; } catch ( IOException e ) { throw new IllegalStateException ( "StringWriters should not throw IOExceptions on write , " + "but this one did anyway for term '" + term + "'" , e ) ; } return sw . toString ( ) ; }
void test13 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; TermEntry termEntry0 = new TermEntry ( "a = " , stringArray0 ) ; String string0 = termEntry0 . toPersistent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toPersistent ( ) { if ( stats . length = = 0 ) { return term ; } StringWriter sw = new StringWriter ( 50 ) ; try { toPersistent ( sw ) ; } catch ( IOException e ) { throw new IllegalStateException ( "StringWriters should not throw IOExceptions on write , " + "but this one did anyway for term '" + term + "'" , e ) ; } return sw . toString ( ) ; }
void test16 ( ) throws Throwable { long [ ] longArray0 = new long [ 2 ] ; String [ ] stringArray0 = new String [ 3 ] ; TermEntry termEntry0 = new TermEntry ( "g ) #' { 3 = AK5" , longArray0 , stringArray0 ) ; termEntry0 . absorb ( termEntry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toPersistent ( ) { if ( stats . length = = 0 ) { return term ; } StringWriter sw = new StringWriter ( 50 ) ; try { toPersistent ( sw ) ; } catch ( IOException e ) { throw new IllegalStateException ( "StringWriters should not throw IOExceptions on write , " + "but this one did anyway for term '" + term + "'" , e ) ; } return sw . toString ( ) ; }
void test17 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; TermEntry termEntry0 = new TermEntry ( "a = " , stringArray0 ) ; TermEntry termEntry1 = termEntry0 . add ( termEntry0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test18 ( ) throws Throwable { long [ ] longArray0 = new long [ 2 ] ; String [ ] stringArray0 = new String [ 3 ] ; TermEntry termEntry0 = new TermEntry ( "g ) #' { 3 = AK5" , longArray0 , stringArray0 ) ; TermEntry termEntry1 = new TermEntry ( "scheme rdequired" , longArray0 , stringArray0 ) ; / / Undeclared exception ! try { termEntry1 . add ( termEntry0 , stringArray0 ) ; fail ( "Expecting exception : IllegalArgumentException" ) ; } catch ( IllegalArgumentException e ) { / * * The term must match . This term was 'scheme rdequired' , other term was 'g ) #' { 3 = AK5' * / } } @Test void test19 ( ) throws Throwable { long [ ] longArray0 = new long [ 2 ] ; String [ ] stringArray0 = new String [ 3 ] ; TermEntry termEntry0 = new TermEntry ( "g ) #' { 3 = AK5" , longArray0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean add ( Response response ) { / / noinspection DuplicateStringLiteralInspection log . trace ( "Adding '" + response + "' to collection" ) ; Response oldResponse = responses . get ( response . getName ( ) ) ; if ( oldResponse = = null ) { responses . put ( response . getName ( ) , response ) ; / / log . info ( "Put responses with timing total : " + getTiming ( ) ) ; return true ; } / / noinspection ObjectEquality if ( oldResponse = = response ) { return false ; } oldResponse . merge ( response ) ; if ( "dummy" . equals ( getTiming ( ) ) ) { throw new IllegalStateException ( "JIT - guard test . Should never be thrown" ) ; } return true ; }
void test19 ( ) throws Throwable { long [ ] longArray0 = new long [ 2 ] ; String [ ] stringArray0 = new String [ 3 ] ; TermEntry termEntry0 = new TermEntry ( "g ) #' { 3 = AK5" , longArray0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test0 ( ) throws Throwable { BinaryCollector binaryCollector0 = new BinaryCollector ( 1746 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setNextReader ( AtomicReaderContext context ) throws IOException { this . docBase = context . docBase ; live = context . reader ( ) . getLiveDocs ( ) ; }
void test1 ( ) throws Throwable { BinaryCollector binaryCollector0 = new BinaryCollector ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test2 ( ) throws Throwable { BinaryCollector binaryCollector0 = new BinaryCollector ( 20 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setScorer ( Scorer scorer ) throws IOException { / / ignored }
void test3 ( ) throws Throwable { BinaryCollector binaryCollector0 = new BinaryCollector ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void collect ( TagCollector tagCollector , String query , DocIDCollector collectedIDs ) { if ( tagCollector . getQuery ( ) = = null ) { log . trace ( "No cached tag collector . Performing collection" ) ; long collectTime = - System . currentTimeMillis ( ) ; if ( collectedIDs ! = null ) { try { tagCollector . collect ( collectedIDs . getBits ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( "IOException while assigning previously collected IDs into TagCollector for query '" + query + "'" , e ) ; } collectTime + = System . currentTimeMillis ( ) ; log . debug ( "Filled tagCollector from bit set with length " + collectedIDs . getBits ( ) . size ( ) + " in " + collectTime + " ms" ) ; } else { try { / / TODO : Support filter ? searcher . search ( qp . parse ( query ) , tagCollector ) ; } catch ( IOException e ) { throw new RuntimeException ( "IOException while collecting IDs into TagCollector for query '" + query + "'" , e ) ; } catch ( ParseException e ) { throw new RuntimeException ( "Unable to parse query '" + query + "'" , e ) ; } collectTime + = System . currentTimeMillis ( ) ; log . debug ( "Filled tagCollector for query '" + query + "' in " + collectTime + " ms" ) ; } } else { log . debug ( "Previously filled tag collector was found for query '" + query + " . Skipping tag collection" ) ; } }
void test4 ( ) throws Throwable { BinaryCollector binaryCollector0 = new BinaryCollector ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test5 ( ) throws Throwable { BinaryCollector binaryCollector0 = new BinaryCollector ( 1746 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean acceptsDocsOutOfOrder ( ) { return false ; }
void test6 ( ) throws Throwable { BinaryCollector binaryCollector0 = new BinaryCollector ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void collect ( TagCollector tagCollector , String query , DocIDCollector collectedIDs ) { if ( tagCollector . getQuery ( ) = = null ) { log . trace ( "No cached tag collector . Performing collection" ) ; long collectTime = - System . currentTimeMillis ( ) ; if ( collectedIDs ! = null ) { try { tagCollector . collect ( collectedIDs . getBits ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( "IOException while assigning previously collected IDs into TagCollector for query '" + query + "'" , e ) ; } collectTime + = System . currentTimeMillis ( ) ; log . debug ( "Filled tagCollector from bit set with length " + collectedIDs . getBits ( ) . size ( ) + " in " + collectTime + " ms" ) ; } else { try { / / TODO : Support filter ? searcher . search ( qp . parse ( query ) , tagCollector ) ; } catch ( IOException e ) { throw new RuntimeException ( "IOException while collecting IDs into TagCollector for query '" + query + "'" , e ) ; } catch ( ParseException e ) { throw new RuntimeException ( "Unable to parse query '" + query + "'" , e ) ; } collectTime + = System . currentTimeMillis ( ) ; log . debug ( "Filled tagCollector for query '" + query + "' in " + collectTime + " ms" ) ; } } else { log . debug ( "Previously filled tag collector was found for query '" + query + " . Skipping tag collection" ) ; } }
void test7 ( ) throws Throwable { BinaryCollector binaryCollector0 = new BinaryCollector ( 1746 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test8 ( ) throws Throwable { BinaryCollector binaryCollector0 = new BinaryCollector ( 2037 ) ; binaryCollector0 . collect ( 1 , 2037 ) ; binaryCollector0 . collect ( 2037 , 2037 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test9 ( ) throws Throwable { BinaryCollector binaryCollector0 = new BinaryCollector ( 13 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void collect ( TagCollector tagCollector , String query , DocIDCollector collectedIDs ) { if ( tagCollector . getQuery ( ) = = null ) { log . trace ( "No cached tag collector . Performing collection" ) ; long collectTime = - System . currentTimeMillis ( ) ; if ( collectedIDs ! = null ) { try { tagCollector . collect ( collectedIDs . getBits ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( "IOException while assigning previously collected IDs into TagCollector for query '" + query + "'" , e ) ; } collectTime + = System . currentTimeMillis ( ) ; log . debug ( "Filled tagCollector from bit set with length " + collectedIDs . getBits ( ) . size ( ) + " in " + collectTime + " ms" ) ; } else { try { / / TODO : Support filter ? searcher . search ( qp . parse ( query ) , tagCollector ) ; } catch ( IOException e ) { throw new RuntimeException ( "IOException while collecting IDs into TagCollector for query '" + query + "'" , e ) ; } catch ( ParseException e ) { throw new RuntimeException ( "Unable to parse query '" + query + "'" , e ) ; } collectTime + = System . currentTimeMillis ( ) ; log . debug ( "Filled tagCollector for query '" + query + "' in " + collectTime + " ms" ) ; } } else { log . debug ( "Previously filled tag collector was found for query '" + query + " . Skipping tag collection" ) ; } }
void test10 ( ) throws Throwable { BinaryCollector binaryCollector0 = new BinaryCollector ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( int i ) { if ( i > = count ) { throw new ArrayIndexOutOfBoundsException ( "There is only " + count + " elements and element #" + i + " was requested" ) ; } return ids [ i ] ; }
void test11 ( ) throws Throwable { BinaryCollector binaryCollector0 = new BinaryCollector ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( int i ) { if ( i > = count ) { throw new ArrayIndexOutOfBoundsException ( "There is only " + count + " elements and element #" + i + " was requested" ) ; } return ids [ i ] ; }
void test12 ( ) throws Throwable { BinaryCollector binaryCollector0 = new BinaryCollector ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" E getValue ( long reference ) { try { E value = cache . get ( reference ) ; if ( value ! = null ) { cacheHits + + ; return value ; } cacheMisses + + ; value = readValue ( values , reference ) ; cache . put ( reference , value ) ; return value ; } catch ( IOException e ) { throw new IllegalStateException ( String . format ( "No value present at position %d with length %d in file '%s' for pool '%s'" , getValuePosition ( reference ) , getValueLength ( reference ) , location , poolName ) , e ) ; } }
void test13 ( ) throws Throwable { BinaryCollector binaryCollector0 = new BinaryCollector ( 128 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" E getValue ( long reference ) { try { E value = cache . get ( reference ) ; if ( value ! = null ) { cacheHits + + ; return value ; } cacheMisses + + ; value = readValue ( values , reference ) ; cache . put ( reference , value ) ; return value ; } catch ( IOException e ) { throw new IllegalStateException ( String . format ( "No value present at position %d with length %d in file '%s' for pool '%s'" , getValuePosition ( reference ) , getValueLength ( reference ) , location , poolName ) , e ) ; } }
void test14 ( ) throws Throwable { BinaryCollector binaryCollector0 = new BinaryCollector ( 13 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test15 ( ) throws Throwable { BinaryCollector binaryCollector0 = new BinaryCollector ( 1746 ) ; binaryCollector0 . collect ( 860 , 860 ) ; String string0 = binaryCollector0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test0 ( ) throws Throwable { TopCollector topCollector0 = new TopCollector ( 128 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean acceptsDocsOutOfOrder ( ) { return false ; }
void test1 ( ) throws Throwable { TopCollector topCollector0 = new TopCollector ( 128 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void reset ( ) throws IOException { source . reset ( ) ; }
void test2 ( ) throws Throwable { TopCollector topCollector0 = new TopCollector ( 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test3 ( ) throws Throwable { TopCollector topCollector0 = new TopCollector ( 524288 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setScorer ( Scorer scorer ) throws IOException { / / ignored }
void test4 ( ) throws Throwable { TopCollector topCollector0 = new TopCollector ( 1541 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test6 ( ) throws Throwable { TopCollector topCollector0 = new TopCollector ( 1541 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void collect ( TagCollector tagCollector , String query , DocIDCollector collectedIDs ) { if ( tagCollector . getQuery ( ) = = null ) { log . trace ( "No cached tag collector . Performing collection" ) ; long collectTime = - System . currentTimeMillis ( ) ; if ( collectedIDs ! = null ) { try { tagCollector . collect ( collectedIDs . getBits ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( "IOException while assigning previously collected IDs into TagCollector for query '" + query + "'" , e ) ; } collectTime + = System . currentTimeMillis ( ) ; log . debug ( "Filled tagCollector from bit set with length " + collectedIDs . getBits ( ) . size ( ) + " in " + collectTime + " ms" ) ; } else { try { / / TODO : Support filter ? searcher . search ( qp . parse ( query ) , tagCollector ) ; } catch ( IOException e ) { throw new RuntimeException ( "IOException while collecting IDs into TagCollector for query '" + query + "'" , e ) ; } catch ( ParseException e ) { throw new RuntimeException ( "Unable to parse query '" + query + "'" , e ) ; } collectTime + = System . currentTimeMillis ( ) ; log . debug ( "Filled tagCollector for query '" + query + "' in " + collectTime + " ms" ) ; } } else { log . debug ( "Previously filled tag collector was found for query '" + query + " . Skipping tag collection" ) ; } }
void test7 ( ) throws Throwable { TopCollector topCollector0 = new TopCollector ( 661 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test8 ( ) throws Throwable { TopCollector topCollector0 = new TopCollector ( 1541 ) ; topCollector0 . count = 1541 ; topCollector0 . collect ( 1866 , 1541 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test9 ( ) throws Throwable { TopCollector topCollector0 = new TopCollector ( 360 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( int i ) { if ( i > = count ) { throw new ArrayIndexOutOfBoundsException ( "There is only " + count + " elements and element #" + i + " was requested" ) ; } return ids [ i ] ; }
void test10 ( ) throws Throwable { TopCollector topCollector0 = new TopCollector ( 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( int i ) { if ( i > = count ) { throw new ArrayIndexOutOfBoundsException ( "There is only " + count + " elements and element #" + i + " was requested" ) ; } return ids [ i ] ; }
void test11 ( ) throws Throwable { TopCollector topCollector0 = new TopCollector ( 125 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" E getValue ( long reference ) { try { E value = cache . get ( reference ) ; if ( value ! = null ) { cacheHits + + ; return value ; } cacheMisses + + ; value = readValue ( values , reference ) ; cache . put ( reference , value ) ; return value ; } catch ( IOException e ) { throw new IllegalStateException ( String . format ( "No value present at position %d with length %d in file '%s' for pool '%s'" , getValuePosition ( reference ) , getValueLength ( reference ) , location , poolName ) , e ) ; } }
void test12 ( ) throws Throwable { TopCollector topCollector0 = new TopCollector ( 524288 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" E getValue ( long reference ) { try { E value = cache . get ( reference ) ; if ( value ! = null ) { cacheHits + + ; return value ; } cacheMisses + + ; value = readValue ( values , reference ) ; cache . put ( reference , value ) ; return value ; } catch ( IOException e ) { throw new IllegalStateException ( String . format ( "No value present at position %d with length %d in file '%s' for pool '%s'" , getValuePosition ( reference ) , getValueLength ( reference ) , location , poolName ) , e ) ; } }
void test13 ( ) throws Throwable { TopCollector topCollector0 = new TopCollector ( 1541 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test14 ( ) throws Throwable { TopCollector topCollector0 = new TopCollector ( 1541 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test0 ( ) throws Throwable { Vector < Document > vector0 = new Vector < Document > ( ) ; IndexChangeEvent indexChangeEvent0 = new IndexChangeEvent ( ( IndexChanger ) null , ( List < Document > ) vector0 ) ; List < Document > list0 = indexChangeEvent0 . getAddedDocuments ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return responses . isEmpty ( ) ; }
void test1 ( ) throws Throwable { int [ ] intArray0 = new int [ 3 ] ; IndexChangeEvent indexChangeEvent0 = new IndexChangeEvent ( ( IndexChanger ) null , intArray0 ) ; IndexChangeEvent . Event indexChangeEvent_Event0 = indexChangeEvent0 . getEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Event getEvent ( ) { return event ; }
void test4 ( ) throws Throwable { int [ ] intArray0 = new int [ 10 ] ; IndexChangeEvent indexChangeEvent0 = new IndexChangeEvent ( ( IndexChanger ) null , intArray0 ) ; int [ ] intArray1 = indexChangeEvent0 . getRemovedDocuments ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getRemovedDocuments ( ) { if ( event ! = Event . documentsRemoved ) { throw new IllegalStateException ( "No documents were removed . " + "The event was " + event + " , not " + Event . documentsAdded ) ; } return removedDocIDs ; }
void test0 ( ) throws Throwable { SuggestResponse suggestResponse0 = new SuggestResponse ( "Qwp = fP#fD7 . f [ X" , 579 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test1 ( ) throws Throwable { SuggestResponse suggestResponse0 = new SuggestResponse ( "^E" , 112 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test2 ( ) throws Throwable { SuggestResponse suggestResponse0 = new SuggestResponse ( "^E" , 112 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test3 ( ) throws Throwable { SuggestResponse suggestResponse0 = new SuggestResponse ( "^E" , 112 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test0 ( ) throws Throwable { DidYouMeanResponse didYouMeanResponse0 = new DidYouMeanResponse ( "search . document . filter" ) ; didYouMeanResponse0 . addResult ( "" , 731 . 6154058597851 , 0 ) ; didYouMeanResponse0 . addResult ( "%h / 1WMs - F2iCM ; ama" , ( - 851 . 444658711536 ) , 780 ) ; String string0 = didYouMeanResponse0 . toXML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test1 ( ) throws Throwable { DidYouMeanResponse didYouMeanResponse0 = new DidYouMeanResponse ( "" , 0L ) ; didYouMeanResponse0 . merge ( ( Response ) didYouMeanResponse0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test2 ( ) throws Throwable { DidYouMeanResponse didYouMeanResponse0 = new DidYouMeanResponse ( " = UcucY . TF238 * " ) ; didYouMeanResponse0 . merge ( ( Response ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test4 ( ) throws Throwable { DidYouMeanResponse didYouMeanResponse0 = new DidYouMeanResponse ( "" , 0L ) ; String string0 = didYouMeanResponse0 . toXML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test0 ( ) throws Throwable { HarmoniseTestHelper harmoniseTestHelper0 = new HarmoniseTestHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { ResponseCollection responseCollection0 = new ResponseCollection ( ) ; DummyResponse dummyResponse0 = new DummyResponse ( "9xS`" , 13 , 13 , 13 , 13 ) ; responseCollection0 . add ( ( Response ) dummyResponse0 ) ; List < String > list0 = HarmoniseTestHelper . getResultIDs ( responseCollection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < String > getResultIDs ( ResponseCollection responses ) { for ( Response response : responses ) { if ( response instanceof DocumentResponse ) { DocumentResponse dr = ( DocumentResponse ) response ; ArrayList < String > results = new ArrayList < String > ( ( int ) dr . getHitCount ( ) ) ; for ( DocumentResponse . Record record : dr . getRecords ( ) ) { results . add ( record . getId ( ) ) ; } return results ; } } return null ; }
void test6 ( ) throws Throwable { ResponseCollection responseCollection0 = new ResponseCollection ( ) ; String [ ] stringArray0 = new String [ 11 ] ; DocumentResponse documentResponse0 = new DocumentResponse ( "$o" , "$o" , 0L , 0L , "$o" , true , stringArray0 , 0L , 0L ) ; responseCollection0 . add ( ( Response ) documentResponse0 ) ; int int0 = HarmoniseTestHelper . countResults ( responseCollection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countResults ( ResponseCollection responses ) { for ( Response response : responses ) { if ( response instanceof DocumentResponse ) { return ( int ) ( ( DocumentResponse ) response ) . getHitCount ( ) ; } } throw new IllegalArgumentException ( "No documentResponse in ResponseCollection" ) ; }
void test0 ( ) throws Throwable { SolrFacetRequest . Facet solrFacetRequest_Facet0 = new SolrFacetRequest . Facet ( "q`ts^ = " , "or" , 225 , 225 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( ) { checkValid ( ) ; return field ; }
void test1 ( ) throws Throwable { SolrFacetRequest . Facet solrFacetRequest_Facet0 = new SolrFacetRequest . Facet ( "q`ts^ = " , "or" , 225 , 225 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( ) { checkValid ( ) ; return field ; }
void test2 ( ) throws Throwable { SolrFacetRequest . Facet solrFacetRequest_Facet0 = new SolrFacetRequest . Facet ( "q`ts^ = " , "or" , 225 , 225 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( ) { checkValid ( ) ; return field ; }
void test3 ( ) throws Throwable { SolrFacetRequest . Facet solrFacetRequest_Facet0 = new SolrFacetRequest . Facet ( "q`ts^ = " , "or" , 225 , 225 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPageSize ( ) { return pageSize ; }
void test4 ( ) throws Throwable { SolrFacetRequest . Facet solrFacetRequest_Facet0 = new SolrFacetRequest . Facet ( "and" , "and" , 16 , 16 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPageSize ( ) { return pageSize ; }
void test1 ( ) throws Throwable { Configuration configuration0 = Configuration . getSystemConfiguration ( true ) ; DiscardDOMSFilter discardDOMSFilter0 = new DiscardDOMSFilter ( configuration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkDiscard ( Payload payload ) { encountered + + ; if ( min ! = - 1 & & encountered < min ) { return true ; } if ( min ! = - 1 & & encountered = = min ) { log . debug ( "Mininum " + min + " reached . Future Payloads will pass" ) ; } if ( max ! = - 1 & & passed > = max ) { return true ; } if ( fraction ! = DEFAULT_FRACTION ) { / / = = is okay due to constant usage int potentials = min = = - 1 ? encountered : encountered - min ; double shouldHavePassed = potentials * fraction ; if ( passed > shouldHavePassed ) { return true ; } } passed + + ; if ( max = = passed ) { log . debug ( "Maximum " + max + " reached . Future Payloads will be discarded" ) ; } return false ; }
void test0 ( ) throws Throwable { LuceneUtil luceneUtil0 = new LuceneUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { StringTracker stringTracker0 = new StringTracker ( ( long ) 4 , ( long ) 4 , ( long ) 4 ) ; WindowQueue < String > windowQueue0 = new WindowQueue < String > ( ( Comparator < String > ) null , "" , "" , ( ResourceTracker < String > ) stringTracker0 ) ; windowQueue0 . setUpperBound ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; / * * * @param element the element to virtually add to the tracker . * / void add ( T element ) ; / * * * @param elements the elements to virtually add to the tracker . * / void add ( Collection < T > elements ) ; / * * * @param element the element to virtually remove from the tracker . * / void remove ( T element ) ; / * * * @param elements the elements to virtually remove from the tracker . * / void remove ( Collection < T > elements ) ; / * * * Clear all tracking data . * / void clear ( ) ; }
void test1 ( ) throws Throwable { PriorityQueue < String > priorityQueue0 = new PriorityQueue < String > ( 1657 , 1657 ) ; Comparator < String > comparator0 = priorityQueue0 . getComparator ( ) ; StringTracker stringTracker0 = new StringTracker ( ( long ) 1657 , ( long ) 1657 , ( long ) 1657 ) ; WindowQueue < String > windowQueue0 = new WindowQueue < String > ( comparator0 , "" , ( String ) null , ( ResourceTracker < String > ) stringTracker0 ) ; String string0 = windowQueue0 . getUpperBound ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T getUpperBound ( ) { return upperBound ; }
void test2 ( ) throws Throwable { PriorityQueue < String > priorityQueue0 = new PriorityQueue < String > ( 1673 , 1673 ) ; Comparator < String > comparator0 = priorityQueue0 . getComparator ( ) ; StringTracker stringTracker0 = new StringTracker ( ( long ) 1673 , ( long ) 1673 , ( long ) 1673 ) ; WindowQueue < String > windowQueue0 = new WindowQueue < String > ( comparator0 , "The maxCapacity ( %d ) must 'e equal to or greater than size ( %q ) " , "The maxCapacity ( %d ) must 'e equal to or greater than size ( %q ) " , ( ResourceTracker < String > ) stringTracker0 ) ; String string0 = windowQueue0 . getLowerBound ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T getLowerBound ( ) { return lowerBound ; }
void test3 ( ) throws Throwable { PriorityQueue < String > priorityQueue0 = new PriorityQueue < String > ( ) ; Comparator < String > comparator0 = priorityQueue0 . getComparator ( ) ; StringTracker stringTracker0 = new StringTracker ( 0L , 0L , 0L ) ; WindowQueue < String > windowQueue0 = new WindowQueue < String > ( comparator0 , ( String ) null , ( String ) null , ( ResourceTracker < String > ) stringTracker0 ) ; windowQueue0 . insert ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test4 ( ) throws Throwable { StringTracker stringTracker0 = new StringTracker ( ( long ) 4 , ( long ) 4 , ( long ) 4 ) ; WindowQueue < String > windowQueue0 = new WindowQueue < String > ( ( Comparator < String > ) null , "" , "" , ( ResourceTracker < String > ) stringTracker0 ) ; String string0 = windowQueue0 . insert ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int insert ( E value ) { / / noinspection DuplicateStringLiteralInspection log . trace ( "Adding '" + value + "' to pool '" + poolName + "'" ) ; int insertPos = Collections . binarySearch ( this , value , this ) ; if ( insertPos > = 0 ) { log . trace ( "Value '" + value + "' already exists in pool '" + poolName + "'" ) ; return - 1 * insertPos - 1 ; } insertPos = - 1 * ( insertPos + 1 ) ; add ( insertPos , value ) ; / / Positive position return insertPos ; }
void test5 ( ) throws Throwable { PriorityQueue < String > priorityQueue0 = new PriorityQueue < String > ( ) ; Comparator < String > comparator0 = priorityQueue0 . getComparator ( ) ; StringTracker stringTracker0 = new StringTracker ( 0L , 0L , 0L ) ; WindowQueue < String > windowQueue0 = new WindowQueue < String > ( comparator0 , "NX UYN" , "NX UYN" , ( ResourceTracker < String > ) stringTracker0 ) ; windowQueue0 . setLowerBound ( ( String ) null ) ; String string0 = windowQueue0 . insert ( " = C ; Xz" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; / * * * @param element the element to virtually add to the tracker . * / void add ( T element ) ; / * * * @param elements the elements to virtually add to the tracker . * / void add ( Collection < T > elements ) ; / * * * @param element the element to virtually remove from the tracker . * / void remove ( T element ) ; / * * * @param elements the elements to virtually remove from the tracker . * / void remove ( Collection < T > elements ) ; / * * * Clear all tracking data . * / void clear ( ) ; }
void test6 ( ) throws Throwable { PriorityQueue < String > priorityQueue0 = new PriorityQueue < String > ( 1673 , 1673 ) ; Comparator < String > comparator0 = priorityQueue0 . getComparator ( ) ; StringTracker stringTracker0 = new StringTracker ( ( long ) 1673 , ( long ) 1673 , ( long ) 1673 ) ; WindowQueue < String > windowQueue0 = new WindowQueue < String > ( comparator0 , "The maxCapacity ( %d ) must 'e equal to or greater than size ( %q ) " , "The maxCapacity ( %d ) must 'e equal to or greater than size ( %q ) " , ( ResourceTracker < String > ) stringTracker0 ) ; windowQueue0 . insert ( "gL . 7GoskGJLlwS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; / * * * @param element the element to virtually add to the tracker . * / void add ( T element ) ; / * * * @param elements the elements to virtually add to the tracker . * / void add ( Collection < T > elements ) ; / * * * @param element the element to virtually remove from the tracker . * / void remove ( T element ) ; / * * * @param elements the elements to virtually remove from the tracker . * / void remove ( Collection < T > elements ) ; / * * * Clear all tracking data . * / void clear ( ) ; }
void test7 ( ) throws Throwable { PriorityQueue < String > priorityQueue0 = new PriorityQueue < String > ( ) ; Comparator < String > comparator0 = priorityQueue0 . getComparator ( ) ; StringTracker stringTracker0 = new StringTracker ( 0L , 0L , 0L ) ; WindowQueue < String > windowQueue0 = new WindowQueue < String > ( comparator0 , ( String ) null , ( String ) null , ( ResourceTracker < String > ) stringTracker0 ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "NX UYN" ; windowQueue0 . setValues ( stringArray0 , 1 , false , 1 ) ; String string0 = windowQueue0 . insert ( " = C ; Xz" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; / * * * @param element the element to virtually add to the tracker . * / void add ( T element ) ; / * * * @param elements the elements to virtually add to the tracker . * / void add ( Collection < T > elements ) ; / * * * @param element the element to virtually remove from the tracker . * / void remove ( T element ) ; / * * * @param elements the elements to virtually remove from the tracker . * / void remove ( Collection < T > elements ) ; / * * * Clear all tracking data . * / void clear ( ) ; }
void test1 ( ) throws Throwable { SortFactory . COMPARATOR sortFactory_COMPARATOR0 = SortFactory . COMPARATOR . parse ( "exposed" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Document parse ( String xml ) throws ParseException { / / TODO : Guard against changing facets ( subsequent calls to parse ) Document dom = super . parse ( xml ) ; if ( dom = = null ) { throw new ParseException ( String . format ( "The DOM from IndexDescriptor . parse ( %s ) was null" , xml ) , - 1 ) ; } NodeList facetNodes ; try { Node facetNode = ( Node ) getXPath ( ) . evaluate ( FACET_NODE_EXPR , dom , XPathConstants . NODE ) ; if ( facetNode = = null ) { throw new ParseException ( String . format ( "The XPath expression '%s' gave null . Apparently there are no facets defined in the " + "IndexDescriptor" , FACET_NODE_EXPR ) , - 1 ) ; } facetNodes = ( NodeList ) getXPath ( ) . evaluate ( FACET_EXPR , facetNode , XPathConstants . NODESET ) ; } catch ( XPathExpressionException e ) { throw new ParseException ( String . format ( "Expressions '%s' and '%s' were invalid" , FACET_NODE_EXPR , FACET_EXPR ) , - 1 ) { long serialVersionUID = 89785489484L ; { initCause ( e ) ; } } ; } catch ( NullPointerException e ) { log . warn ( String . format ( "Unable to extracts facets with expressions '%s' and '%s' with name spaces '%s' and '%s' " + "from xml : \n%s" , FACET_NODE_EXPR , FACET_EXPR , DESCRIPTOR_NAMESPACE_PREFIX + " : " + getXPath ( ) . getNamespaceContext ( ) . getNamespaceURI ( DESCRIPTOR_NAMESPACE_PREFIX ) , FACET_NAMESPACE_PREFIX + " : " + getXPath ( ) . getNamespaceContext ( ) . getNamespaceURI ( FACET_NAMESPACE_PREFIX ) , xml ) , e ) ; throw new ParseException ( String . format ( "Got NullPointerException while evaluating node with expressions '%s' and '%s' and dom '%s'" , FACET_NODE_EXPR , FACET_EXPR , dom ) , - 1 ) { long serialVersionUID = 79877384469L ; { initCause ( e ) ; } } ; } log . trace ( String . format ( "Located %d facet nodes" , facetNodes . getLength ( ) ) ) ; Map < String , FacetStructure > facets = new LinkedHashMap < String , FacetStructure > ( facetNodes . getLength ( ) ) ; for ( int id = 0 ; id < facetNodes . getLength ( ) ; id + + ) { FacetStructure facet = parseFacet ( facetNodes . item ( id ) , id ) ; facets . put ( facet . getName ( ) , facet ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Extracted facet - structure from IndexDescriptor : " + facet ) ; } } this . facets = facets ; return dom ; }
void test0 ( ) throws Throwable { OpenUrlEscape openUrlEscape0 = new OpenUrlEscape ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = OpenUrlEscape . escape ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String escape ( String text , boolean phrase ) { return phrase ? quotedEscaper . transform ( text ) : unquotedEscaper . transform ( QueryParser . escape ( text ) ) ; }
void test1 ( ) throws Throwable { NetmusikGenre netmusikGenre0 = new NetmusikGenre ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = MD5 . md5sum ( " | y + #%zGfI ? l$ . ] + $" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String md5sum ( String text ) { try { if ( md = = null ) { md = MessageDigest . getInstance ( "MD5" ) ; } md . reset ( ) ; md . update ( text . getBytes ( "UTF - 8" ) ) ; return new BigInteger ( 1 , md . digest ( ) ) . toString ( 16 ) ; } catch ( NoSuchAlgorithmException e ) { log . error ( e . getMessage ( ) , e ) ; } catch ( UnsupportedEncodingException e ) { log . error ( e . getMessage ( ) , e ) ; } return text ; }
void test0 ( ) throws Throwable { Datetime datetime0 = new Datetime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = Datetime . dateAndTimeExpand ( "5njKa__%xd" , "5njKa__%xd" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dateAndTimeExpand ( String iso , String locale ) { return dateExpand ( iso , locale ) + " " + timeExpand ( iso , locale ) ; }
void test5 ( ) throws Throwable { String string0 = Datetime . divide ( "5njKa__%xd" , 333 , 333 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String divide ( String iso , int start , int end ) { Matcher matcher = datePattern . matcher ( iso ) ; if ( ! matcher . matches ( ) ) { return "" ; } List < String > tokens = new ArrayList < String > ( 6 ) ; for ( int i = 1 ; i < matcher . groupCount ( ) + 1 ; i + + ) { tokens . add ( matcher . group ( i ) ) ; } Matcher timeMatcher = timePattern . matcher ( iso ) ; if ( timeMatcher . matches ( ) ) { for ( int i = 1 ; i < timeMatcher . groupCount ( ) + 1 ; i + + ) { tokens . add ( timeMatcher . group ( i ) ) ; } } buffer . setLength ( 0 ) ; for ( int i = start - 1 ; i < end & & i < tokens . size ( ) ; i + + ) { if ( i ! = start - 1 ) { buffer . append ( " / " ) ; } buffer . append ( tokens . get ( i ) ) ; } return buffer . toString ( ) ; }
void test1 ( ) throws Throwable { String string0 = ISBN . isbnNorm ( "9783958157149" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String isbnNorm ( String in ) { try { String out = in . trim ( ) ; out = out . replace ( " - " , "" ) ; if ( out . trim ( ) . length ( ) = = 10 ) { out = out . substring ( 0 , 9 ) ; out = "978" + out ; int sum = 0 ; for ( int i = 0 ; i < out . length ( ) ; i + + ) { if ( i % 2 = = 0 ) { sum + = Integer . parseInt ( out . substring ( i , i + 1 ) ) ; } else { sum + = 3 * Integer . parseInt ( out . substring ( i , i + 1 ) ) ; } } int chcckSum = sum % 10 ; if ( chcckSum ! = 0 ) { chcckSum = 10 - chcckSum ; } return out + chcckSum ; } } catch ( Exception e ) { log . warn ( "Error parsing isbn '" + in + "' : " + e . getMessage ( ) ) ; return in ; } return in ; }
void test2 ( ) throws Throwable { String string0 = ISBN . isbnNorm ( "395815714 : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String isbnNorm ( String in ) { try { String out = in . trim ( ) ; out = out . replace ( " - " , "" ) ; if ( out . trim ( ) . length ( ) = = 10 ) { out = out . substring ( 0 , 9 ) ; out = "978" + out ; int sum = 0 ; for ( int i = 0 ; i < out . length ( ) ; i + + ) { if ( i % 2 = = 0 ) { sum + = Integer . parseInt ( out . substring ( i , i + 1 ) ) ; } else { sum + = 3 * Integer . parseInt ( out . substring ( i , i + 1 ) ) ; } } int chcckSum = sum % 10 ; if ( chcckSum ! = 0 ) { chcckSum = 10 - chcckSum ; } return out + chcckSum ; } } catch ( Exception e ) { log . warn ( "Error parsing isbn '" + in + "' : " + e . getMessage ( ) ) ; return in ; } return in ; }
void test0 ( ) throws Throwable { Normalize normalize0 = new Normalize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = Normalize . normalize ( "fp - ] nFI# / ( PF$ ; o ? [ I" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String normalize ( String s ) { try { TokenStream tokens = normalizer . tokenStream ( "query" , new CharSequenceReader ( s ) ) ; return join ( tokens , " " ) ; } catch ( IOException e ) { log . error ( String . format ( "Error analyzing query '%s' : %s" , s , e . getMessage ( ) ) , e ) ; return "ERROR" ; } }
void test2 ( ) throws Throwable { String string0 = Normalize . normalize ( "@ , bKu = . 8NlJ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String normalize ( String s ) { try { TokenStream tokens = normalizer . tokenStream ( "query" , new CharSequenceReader ( s ) ) ; return join ( tokens , " " ) ; } catch ( IOException e ) { log . error ( String . format ( "Error analyzing query '%s' : %s" , s , e . getMessage ( ) ) , e ) ; return "ERROR" ; } }
void test3 ( ) throws Throwable { String string0 = Normalize . normalize ( " ) \n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String normalize ( String s ) { try { TokenStream tokens = normalizer . tokenStream ( "query" , new CharSequenceReader ( s ) ) ; return join ( tokens , " " ) ; } catch ( IOException e ) { log . error ( String . format ( "Error analyzing query '%s' : %s" , s , e . getMessage ( ) ) , e ) ; return "ERROR" ; } }
void test1 ( ) throws Throwable { String string0 = YearRange . makeRange ( "8" , "6" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String makeRange ( String in ) { try { return doit ( in , in ) ; } catch ( Exception e ) { log . warn ( e . getMessage ( ) ) ; return in ; } }
void test2 ( ) throws Throwable { String string0 = YearRange . makeRange ( "6 7 8" , "8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String makeRange ( String in ) { try { return doit ( in , in ) ; } catch ( Exception e ) { log . warn ( e . getMessage ( ) ) ; return in ; } }
void test3 ( ) throws Throwable { String string0 = YearRange . makeRange ( " ? " , "0 1 2 3 4 5 6 7 8 9" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String makeRange ( String in ) { try { return doit ( in , in ) ; } catch ( Exception e ) { log . warn ( e . getMessage ( ) ) ; return in ; } }
void test4 ( ) throws Throwable { String string0 = YearRange . makeRange ( " ? ? ? " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String makeRange ( String in ) { try { return doit ( in , in ) ; } catch ( Exception e ) { log . warn ( e . getMessage ( ) ) ; return in ; } }
void test5 ( ) throws Throwable { String string0 = YearRange . makeRange ( " ? " , " ? " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String makeRange ( String in ) { try { return doit ( in , in ) ; } catch ( Exception e ) { log . warn ( e . getMessage ( ) ) ; return in ; } }
void test6 ( ) throws Throwable { String string0 = YearRange . makeRange ( "8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String makeRange ( String in ) { try { return doit ( in , in ) ; } catch ( Exception e ) { log . warn ( e . getMessage ( ) ) ; return in ; } }
void test0 ( ) throws Throwable { FastStack fastStack0 = new FastStack ( ) ; Locale locale0 = Locale . CANADA_FRENCH ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "7oV\" / ] opRm ] Osb^" , ( List < ExposedRequest . Field > ) fastStack0 , ( NamedComparator ) namedCollatorComparator0 , "7oV\" / ] opRm ] Osb^" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1615 , ( List < TermProvider > ) fastStack0 , exposedRequest_Group0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getField ( ) { checkValid ( ) ; return field ; }
void test1 ( ) throws Throwable { FastStack fastStack0 = new FastStack ( ) ; Locale locale0 = Locale . CANADA_FRENCH ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "7oV\" / ] opRm ] Osb^" , ( List < ExposedRequest . Field > ) fastStack0 , ( NamedComparator ) namedCollatorComparator0 , "7oV\" / ] opRm ] Osb^" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1615 , ( List < TermProvider > ) fastStack0 , exposedRequest_Group0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReaderHash ( ) { return source . getReaderHash ( ) ; }
void test2 ( ) throws Throwable { LinkedList < TermProvider > linkedList0 = new LinkedList < TermProvider > ( ) ; Locale locale0 = Locale . SIMPLIFIED_CHINESE ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) namedCollatorComparator0 , "" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1481 , ( List < TermProvider > ) linkedList0 , exposedRequest_Group0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReaderHash ( ) { return source . getReaderHash ( ) ; }
void test3 ( ) throws Throwable { LinkedList < TermProvider > linkedList0 = new LinkedList < TermProvider > ( ) ; Locale locale0 = Locale . SIMPLIFIED_CHINESE ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) namedCollatorComparator0 , "" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1481 , ( List < TermProvider > ) linkedList0 , exposedRequest_Group0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReaderHash ( ) { return source . getReaderHash ( ) ; }
void test4 ( ) throws Throwable { FastStack fastStack0 = new FastStack ( ) ; Locale locale0 = Locale . CANADA_FRENCH ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "ggc" , ( List < ExposedRequest . Field > ) fastStack0 , ( NamedComparator ) namedCollatorComparator0 , "ggc" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1600 , ( List < TermProvider > ) fastStack0 , exposedRequest_Group0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test5 ( ) throws Throwable { LinkedList < TermProvider > linkedList0 = new LinkedList < TermProvider > ( ) ; Locale locale0 = Locale . SIMPLIFIED_CHINESE ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) namedCollatorComparator0 , "" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1481 , ( List < TermProvider > ) linkedList0 , exposedRequest_Group0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTerm ( ) { checkValid ( ) ; return term ; }
void test6 ( ) throws Throwable { LinkedList < TermProvider > linkedList0 = new LinkedList < TermProvider > ( ) ; Locale locale0 = Locale . SIMPLIFIED_CHINESE ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) namedCollatorComparator0 , "" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1481 , ( List < TermProvider > ) linkedList0 , exposedRequest_Group0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReaderHash ( ) { return source . getReaderHash ( ) ; }
void test7 ( ) throws Throwable { LinkedList < TermProvider > linkedList0 = new LinkedList < TermProvider > ( ) ; Locale locale0 = Locale . SIMPLIFIED_CHINESE ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) namedCollatorComparator0 , "" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1481 , ( List < TermProvider > ) linkedList0 , exposedRequest_Group0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReaderHash ( ) { return source . getReaderHash ( ) ; }
void test8 ( ) throws Throwable { FastStack fastStack0 = new FastStack ( ) ; Locale locale0 = Locale . CANADA_FRENCH ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " ( " , ( List < ExposedRequest . Field > ) fastStack0 , ( NamedComparator ) namedCollatorComparator0 , " ( " ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1600 , ( List < TermProvider > ) fastStack0 , exposedRequest_Group0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BytesRef getOrderedDisplayTerm ( long indirect ) throws IOException { return source . getOrderedDisplayTerm ( indirect ) ; }
void test9 ( ) throws Throwable { FastStack fastStack0 = new FastStack ( ) ; Locale locale0 = Locale . CANADA_FRENCH ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "ggc" , ( List < ExposedRequest . Field > ) fastStack0 , ( NamedComparator ) namedCollatorComparator0 , "ggc" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1600 , ( List < TermProvider > ) fastStack0 , exposedRequest_Group0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BytesRef getOrderedDisplayTerm ( long indirect ) throws IOException { return source . getOrderedDisplayTerm ( indirect ) ; }
void test10 ( ) throws Throwable { LinkedList < TermProvider > linkedList0 = new LinkedList < TermProvider > ( ) ; Locale locale0 = Locale . SIMPLIFIED_CHINESE ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) namedCollatorComparator0 , "" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1481 , ( List < TermProvider > ) linkedList0 , exposedRequest_Group0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRecursiveHash ( ) { return source . getRecursiveHash ( ) ; }
void test11 ( ) throws Throwable { FastStack fastStack0 = new FastStack ( ) ; Locale locale0 = Locale . CANADA_FRENCH ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " ( " , ( List < ExposedRequest . Field > ) fastStack0 , ( NamedComparator ) namedCollatorComparator0 , " ( " ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1600 , ( List < TermProvider > ) fastStack0 , exposedRequest_Group0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test12 ( ) throws Throwable { FastStack fastStack0 = new FastStack ( ) ; Locale locale0 = Locale . CANADA_FRENCH ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "J9 < SF^7S$`oJ + y | O" , ( List < ExposedRequest . Field > ) fastStack0 , ( NamedComparator ) namedCollatorComparator0 , "J9 < SF^7S$`oJ + y | O" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1615 , ( List < TermProvider > ) fastStack0 , exposedRequest_Group0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test13 ( ) throws Throwable { FastStack fastStack0 = new FastStack ( ) ; Locale locale0 = Locale . CANADA_FRENCH ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " ( " , ( List < ExposedRequest . Field > ) fastStack0 , ( NamedComparator ) namedCollatorComparator0 , " ( " ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1600 , ( List < TermProvider > ) fastStack0 , exposedRequest_Group0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test14 ( ) throws Throwable { FastStack fastStack0 = new FastStack ( ) ; Locale locale0 = Locale . CANADA_FRENCH ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "7oV\" / ] opRm ] Osb^" , ( List < ExposedRequest . Field > ) fastStack0 , ( NamedComparator ) namedCollatorComparator0 , "7oV\" / ] opRm ] Osb^" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1615 , ( List < TermProvider > ) fastStack0 , exposedRequest_Group0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReaderHash ( ) { return source . getReaderHash ( ) ; }
void test15 ( ) throws Throwable { FastStack fastStack0 = new FastStack ( ) ; Locale locale0 = Locale . CANADA_FRENCH ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "7oV\" / ] opRm ] Osb^" , ( List < ExposedRequest . Field > ) fastStack0 , ( NamedComparator ) namedCollatorComparator0 , "7oV\" / ] opRm ] Osb^" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1615 , ( List < TermProvider > ) fastStack0 , exposedRequest_Group0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReaderHash ( ) { return source . getReaderHash ( ) ; }
void test16 ( ) throws Throwable { FastStack fastStack0 = new FastStack ( ) ; Locale locale0 = Locale . CANADA_FRENCH ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "J9 < SF^7S$`oJ + y | O" , ( List < ExposedRequest . Field > ) fastStack0 , ( NamedComparator ) namedCollatorComparator0 , "J9 < SF^7S$`oJ + y | O" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1615 , ( List < TermProvider > ) fastStack0 , exposedRequest_Group0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReaderHash ( ) { return source . getReaderHash ( ) ; }
void test17 ( ) throws Throwable { FastStack fastStack0 = new FastStack ( ) ; Locale locale0 = Locale . CANADA_FRENCH ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "J9 < SF^7S$`oJ + y | O" , ( List < ExposedRequest . Field > ) fastStack0 , ( NamedComparator ) namedCollatorComparator0 , "J9 < SF^7S$`oJ + y | O" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 1615 , ( List < TermProvider > ) fastStack0 , exposedRequest_Group0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void transitiveReleaseCaches ( int level , boolean keepRoot ) { clear ( ) ; source . transitiveReleaseCaches ( level , keepRoot ) ; }
void test1 ( ) throws Throwable { Vector < TermProvider > vector0 = new Vector < TermProvider > ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " : ANGm" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) null , " : ANGm" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 313 , ( List < TermProvider > ) vector0 , exposedRequest_Group0 , true ) ; String string0 = groupTermProvider0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test2 ( ) throws Throwable { Vector < TermProvider > vector0 = new Vector < TermProvider > ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " : ANGm" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) null , " : ANGm" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 313 , ( List < TermProvider > ) vector0 , exposedRequest_Group0 , true ) ; boolean boolean0 = groupTermProvider0 . isConcat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test3 ( ) throws Throwable { Vector < TermProvider > vector0 = new Vector < TermProvider > ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " : ANGm" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) null , " : ANGm" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 313 , ( List < TermProvider > ) vector0 , exposedRequest_Group0 , true ) ; groupTermProvider0 . setDocIDBase ( 313 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test4 ( ) throws Throwable { Vector < TermProvider > vector0 = new Vector < TermProvider > ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " : ANGm" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) null , ( String ) null ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 313 , ( List < TermProvider > ) vector0 , exposedRequest_Group0 , true ) ; int int0 = groupTermProvider0 . getNearestTermIndirect ( ( BytesRef ) null , 313 , 313 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test5 ( ) throws Throwable { Vector < TermProvider > vector0 = new Vector < TermProvider > ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " : ANGm" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) null , " : ANGm" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 313 , ( List < TermProvider > ) vector0 , exposedRequest_Group0 , true ) ; groupTermProvider0 . getDocToSingleIndirect ( ) ; groupTermProvider0 . getDocToSingleIndirect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDesignation ( ) { return "CachedTermProvider ( " + source . getClass ( ) . getSimpleName ( ) + " ( " + source . getDesignation ( ) + " ) ) " ; }
void test6 ( ) throws Throwable { Vector < TermProvider > vector0 = new Vector < TermProvider > ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " : ANGm" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) null , " : ANGm" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 313 , ( List < TermProvider > ) vector0 , exposedRequest_Group0 , false ) ; GrowingMutable growingMutable0 = ( GrowingMutable ) groupTermProvider0 . getDocToSingleIndirect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test8 ( ) throws Throwable { Vector < TermProvider > vector0 = new Vector < TermProvider > ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " : ANGm" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) null , " : ANGm" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 313 , ( List < TermProvider > ) vector0 , exposedRequest_Group0 , true ) ; groupTermProvider0 . getDocToSingleIndirect ( ) ; String string0 = groupTermProvider0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test9 ( ) throws Throwable { Vector < TermProvider > vector0 = new Vector < TermProvider > ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " : ANGm" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) null , " : ANGm" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 313 , ( List < TermProvider > ) vector0 , exposedRequest_Group0 , true ) ; groupTermProvider0 . transitiveReleaseCaches ( 313 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConcat ( ) { return concat ; }
void test10 ( ) throws Throwable { Vector < TermProvider > vector0 = new Vector < TermProvider > ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " : ANGm" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) null , " : ANGm" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 313 , ( List < TermProvider > ) vector0 , exposedRequest_Group0 , true ) ; groupTermProvider0 . transitiveReleaseCaches ( 313 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConcat ( ) { return concat ; }
void test11 ( ) throws Throwable { Vector < TermProvider > vector0 = new Vector < TermProvider > ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " : ANGm" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) null , " : ANGm" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 313 , ( List < TermProvider > ) vector0 , exposedRequest_Group0 , true ) ; groupTermProvider0 . transitiveReleaseCaches ( ( - 1 ) , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConcat ( ) { return concat ; }
void test0 ( ) throws Throwable { ArrayList < TermProvider > arrayList0 = new ArrayList < TermProvider > ( ) ; LinkedList < TermProvider > linkedList0 = new LinkedList < TermProvider > ( ) ; NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) namedNaturalComparator0 ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( ( - 27 ) , ( List < TermProvider > ) arrayList0 , exposedRequest_Group0 , false ) ; MergingTermDocIterator mergingTermDocIterator0 = new MergingTermDocIterator ( groupTermProvider0 , ( List < TermProvider > ) linkedList0 , ( Comparator < BytesRef > ) namedNaturalComparator0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { try { checkRecords ( ) ; } catch ( IOException e ) { log . warn ( "Failed to retrieve records : " + e . getMessage ( ) , e ) ; next = false ; } return next | | ! records . isEmpty ( ) ; }
void test2 ( ) throws Throwable { ArrayList < TermProvider > arrayList0 = new ArrayList < TermProvider > ( ) ; LinkedList < TermProvider > linkedList0 = new LinkedList < TermProvider > ( ) ; NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) namedNaturalComparator0 ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( ( - 27 ) , ( List < TermProvider > ) arrayList0 , exposedRequest_Group0 , false ) ; linkedList0 . add ( ( TermProvider ) groupTermProvider0 ) ; MergingTermDocIterator mergingTermDocIterator0 = new MergingTermDocIterator ( groupTermProvider0 , ( List < TermProvider > ) linkedList0 , ( Comparator < BytesRef > ) namedNaturalComparator0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { try { checkRecords ( ) ; } catch ( IOException e ) { log . warn ( "Failed to retrieve records : " + e . getMessage ( ) , e ) ; next = false ; } return next | | ! records . isEmpty ( ) ; }
void test3 ( ) throws Throwable { ArrayList < TermProvider > arrayList0 = new ArrayList < TermProvider > ( ) ; LinkedList < TermProvider > linkedList0 = new LinkedList < TermProvider > ( ) ; NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "" , ( List < ExposedRequest . Field > ) null , ( NamedComparator ) namedNaturalComparator0 ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( ( - 27 ) , ( List < TermProvider > ) arrayList0 , exposedRequest_Group0 , false ) ; MergingTermDocIterator mergingTermDocIterator0 = new MergingTermDocIterator ( groupTermProvider0 , ( List < TermProvider > ) linkedList0 , ( Comparator < BytesRef > ) namedNaturalComparator0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Record next ( long iteratorKey ) throws IOException { throw new NoSuchElementException ( "VoidStorage contains no elements" ) ; }
void test0 ( ) throws Throwable { String string0 = ExposedPOC . getHeap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHeap ( ) throws InterruptedException { String b = "Before GC : " + getHeapDirect ( ) ; for ( int i = 0 ; i < 1 ; i + + ) { System . gc ( ) ; Thread . sleep ( 10 ) ; } return b + " , after GC : " + getHeapDirect ( ) ; }
void test1 ( ) throws Throwable { int [ ] intArray0 = new int [ 19 ] ; PackedIntWrapper packedIntWrapper0 = new PackedIntWrapper ( intArray0 ) ; long long0 = ExposedPOC . footprint ( ( PackedInts . Reader ) packedIntWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long footprint ( PackedInts . Reader values ) { return values . getBitsPerValue ( ) * values . size ( ) / 8 ; }
void test2 ( ) throws Throwable { ExposedPOC exposedPOC0 = new ExposedPOC ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHeap ( ) throws InterruptedException { String b = "Before GC : " + getHeapDirect ( ) ; for ( int i = 0 ; i < 1 ; i + + ) { System . gc ( ) ; Thread . sleep ( 10 ) ; } return b + " , after GC : " + getHeapDirect ( ) ; }
void test3 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( 0 , 2 , ( long ) 2 , ( long ) 2 , false ) ; String string0 = ExposedPOC . measureSortTime ( ( PackedInts . Reader ) growingMutable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String measureSortTime ( PackedInts . Reader orderedDocs ) { Integer [ ] allDocIDS = new Integer [ orderedDocs . size ( ) ] ; for ( int i = 0 ; i < allDocIDS . length ; i + + ) { allDocIDS [ i ] = i ; } long startTimeSort = System . nanoTime ( ) ; Arrays . sort ( allDocIDS , new Comparator < Integer > ( ) { @Override int compare ( Integer o1 , Integer o2 ) { return ( int ) ( orderedDocs . get ( o1 ) - orderedDocs . get ( o2 ) ) ; } } ) ; return nsToString ( System . nanoTime ( ) - startTimeSort ) ; }
void test4 ( ) throws Throwable { String string0 = ExposedPOC . readableSize ( ( long ) 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String readableSize ( long size ) { return size > 2 * 1048576 ? size / 1048576 + "MB" : size > 2 * 1024 ? size / 1024 + "KB" : size + "bytes" ; }
void test5 ( ) throws Throwable { String string0 = ExposedPOC . readableSize ( 2058L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String readableSize ( long size ) { return size > 2 * 1048576 ? size / 1048576 + "MB" : size > 2 * 1024 ? size / 1024 + "KB" : size + "bytes" ; }
void test6 ( ) throws Throwable { File file0 = new File ( "" ) ; SimpleFSDirectory simpleFSDirectory0 = new SimpleFSDirectory ( file0 ) ; File file1 = simpleFSDirectory0 . getDirectory ( ) ; long long0 = ExposedPOC . calculateSize ( file1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long calculateSize ( Payload payload ) { return payload . getRecord ( ) = = null ? 200 : RecordUtil . calculateRecordSize ( payload . getRecord ( ) , true ) ; }
void test7 ( ) throws Throwable { String string0 = ExposedPOC . nsToString ( 9223372036854775807L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String nsToString ( long time ) { return time > 10L * 1000 * 1000000 ? minutes ( time ) + " min" : / / time > 2 * 1000000 ? time / 1000000 + "ms" ; / / : / / time + "ns" ; }
void test0 ( ) throws Throwable { int [ ] intArray0 = new int [ 19 ] ; PackedIntWrapper packedIntWrapper0 = new PackedIntWrapper ( intArray0 , ( - 334 ) ) ; FacetMap facetMap0 = new FacetMap ( ( List < TermProvider > ) null , intArray0 , ( PackedInts . Reader ) packedIntWrapper0 , ( PackedInts . Reader ) packedIntWrapper0 ) ; PackedIntWrapper packedIntWrapper1 = ( PackedIntWrapper ) facetMap0 . getRefs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PackedInts . Reader getRefs ( ) { return refs ; }
void test1 ( ) throws Throwable { Vector < TermProvider > vector0 = new Vector < TermProvider > ( 806 , 806 ) ; int [ ] intArray0 = new int [ 1 ] ; GrowingMutable growingMutable0 = new GrowingMutable ( ) ; FacetMap facetMap0 = new FacetMap ( ( List < TermProvider > ) vector0 , intArray0 , ( PackedInts . Reader ) growingMutable0 , ( PackedInts . Reader ) growingMutable0 ) ; int [ ] intArray1 = facetMap0 . getIndirectStarts ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getIndirectStarts ( ) { return indirectStarts ; }
void test2 ( ) throws Throwable { int [ ] intArray0 = new int [ 4 ] ; GrowingMutable growingMutable0 = new GrowingMutable ( ) ; FacetMap facetMap0 = new FacetMap ( ( List < TermProvider > ) null , intArray0 , ( PackedInts . Reader ) growingMutable0 , ( PackedInts . Reader ) growingMutable0 ) ; int int0 = facetMap0 . getTagCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTagCount ( ) { return indirectStarts [ indirectStarts . length - 1 ] ; }
void test3 ( ) throws Throwable { Vector < TermProvider > vector0 = new Vector < TermProvider > ( 806 , 806 ) ; int [ ] intArray0 = new int [ 1 ] ; GrowingMutable growingMutable0 = new GrowingMutable ( ) ; FacetMap facetMap0 = new FacetMap ( ( List < TermProvider > ) vector0 , intArray0 , ( PackedInts . Reader ) growingMutable0 , ( PackedInts . Reader ) growingMutable0 ) ; GrowingMutable growingMutable1 = ( GrowingMutable ) facetMap0 . getDoc2ref ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PackedInts . Reader getDoc2ref ( ) { return doc2ref ; }
void test4 ( ) throws Throwable { int [ ] intArray0 = new int [ 2 ] ; GrowableWriter growableWriter0 = new GrowableWriter ( 0 , ( - 15 ) , 0 ) ; FacetMap facetMap0 = new FacetMap ( ( List < TermProvider > ) null , intArray0 , ( PackedInts . Reader ) growableWriter0 , ( PackedInts . Reader ) growableWriter0 ) ; List < TermProvider > list0 = facetMap0 . getProviders ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < TermProvider > getProviders ( ) { return providers ; }
void test5 ( ) throws Throwable { ArrayList < TermProvider > arrayList0 = new ArrayList < TermProvider > ( ) ; int [ ] intArray0 = new int [ 1 ] ; int [ ] intArray1 = new int [ 5 ] ; IdentityReader identityReader0 = new IdentityReader ( 0 ) ; FacetMap facetMap0 = new FacetMap ( ( List < TermProvider > ) arrayList0 , intArray1 , ( PackedInts . Reader ) identityReader0 , ( PackedInts . Reader ) identityReader0 ) ; facetMap0 . updateCounter ( intArray0 , ( - 258 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test10 ( ) throws Throwable { ArrayList < TermProvider > arrayList0 = new ArrayList < TermProvider > ( ) ; int [ ] intArray0 = new int [ 1 ] ; GrowingMutable growingMutable0 = new GrowingMutable ( ( - 271 ) , ( - 271 ) , ( long ) ( - 271 ) , ( long ) ( - 271 ) , true ) ; FacetMap facetMap0 = new FacetMap ( ( List < TermProvider > ) arrayList0 , intArray0 , ( PackedInts . Reader ) growingMutable0 , ( PackedInts . Reader ) growingMutable0 ) ; BytesRef [ ] bytesRefArray0 = facetMap0 . getTermsForDocID ( ( - 271 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BytesRef [ ] getTermsForDocID ( int docID ) throws IOException { int start = ( int ) doc2ref . get ( docID ) ; int end = ( int ) doc2ref . get ( docID + 1 ) ; / / System . out . println ( "Doc " + docID + " , " + start + " - > " + end ) ; BytesRef [ ] result = new BytesRef [ end - start ] ; for ( int refI = start ; refI < end ; refI + + ) { result [ refI - start ] = getOrderedTerm ( ( int ) refs . get ( refI ) ) ; } return result ; }
void test12 ( ) throws Throwable { int [ ] intArray0 = new int [ 1 ] ; LinkedList < TermProvider > linkedList0 = new LinkedList < TermProvider > ( ) ; GrowableWriter growableWriter0 = new GrowableWriter ( ( - 90 ) , ( - 90 ) , ( - 90 ) ) ; FacetMap facetMap0 = new FacetMap ( ( List < TermProvider > ) linkedList0 , intArray0 , ( PackedInts . Reader ) growableWriter0 , ( PackedInts . Reader ) growableWriter0 ) ; String string0 = facetMap0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test0 ( ) throws Throwable { FacetMapDualFactory facetMapDualFactory0 = new FacetMapDualFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; FacetMap facetMap0 = FacetMapDualFactory . createMap ( 6 , ( List < TermProvider > ) stack0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test0 ( ) throws Throwable { FacetMapTripleFactory facetMapTripleFactory0 = new FacetMapTripleFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { LinkedList < TermProvider > linkedList0 = new LinkedList < TermProvider > ( ) ; FacetMap facetMap0 = FacetMapTripleFactory . createMap ( 1742 , ( List < TermProvider > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test0 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "0 | " ) ; FacetRequestGroup facetRequestGroup0 = facetRequest0 . createGroup ( "0 | " ) ; FacetResponse . TagCollection facetResponse_TagCollection0 = new FacetResponse . TagCollection ( ) ; FacetResponse . Group facetResponse_Group0 = new FacetResponse . Group ( facetRequestGroup0 , facetResponse_TagCollection0 ) ; facetResponse_Group0 . setExtractionTime ( ( long ) ( - 65473 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTotalCount ( ) { return deletedIndexables + nonDeletedIndexables + nonDeletedNonIndexables + deletedNonIndexables ; }
void test1 ( ) throws Throwable { FacetResponse . TagCollection facetResponse_TagCollection0 = new FacetResponse . TagCollection ( ) ; FacetRequest facetRequest0 = new FacetRequest ( "" ) ; FacetRequestGroup facetRequestGroup0 = facetRequest0 . createGroup ( "" ) ; FacetResponse . Group facetResponse_Group0 = new FacetResponse . Group ( facetRequestGroup0 , facetResponse_TagCollection0 ) ; FastStack fastStack0 = new FastStack ( ) ; FacetResponse facetResponse0 = new FacetResponse ( facetRequest0 , ( List < FacetResponse . Group > ) fastStack0 , ( - 1L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test2 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "0 | " ) ; FacetRequestGroup facetRequestGroup0 = facetRequest0 . createGroup ( "0 | " ) ; FastStack fastStack0 = new FastStack ( ) ; FacetResponse . Group facetResponse_Group0 = new FacetResponse . Group ( facetRequestGroup0 , ( List < FacetResponse . Tag > ) fastStack0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FacetResponse ( FacetRequest request , List < Group > groups , long hits ) { this . request = request ; this . groups = groups ; this . hits = hits ; }
void test3 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . custom ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "f0B# [ xp / > v ! " , namedComparator_ORDER0 , false , "f0B# [ xp / > v ! " , 13 , 13 , 13 , "f0B# [ xp / > v ! " , false , 13 , "f0B# [ xp / > v ! " , "f0B# [ xp / > v ! " ) ; FacetResponse . TagCollection facetResponse_TagCollection0 = new FacetResponse . TagCollection ( ) ; FacetResponse . Group facetResponse_Group0 = new FacetResponse . Group ( facetRequestGroup0 , facetResponse_TagCollection0 ) ; facetResponse_Group0 . setTotalReferences ( ( long ) 13 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return count ; }
void test4 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . custom ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( " : missin method '" , namedComparator_ORDER0 , false , " : missin method '" , 0 , 0 , 0 , " : missin method '" , false , 0 , " : missin method '" , " : missin method '" ) ; FacetResponse . TagCollection facetResponse_TagCollection0 = new FacetResponse . TagCollection ( ) ; FacetResponse . Group facetResponse_Group0 = new FacetResponse . Group ( facetRequestGroup0 , facetResponse_TagCollection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return count ; }
void test5 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "0 | " ) ; FacetRequestGroup facetRequestGroup0 = facetRequest0 . createGroup ( "0 | " ) ; FacetResponse . TagCollection facetResponse_TagCollection0 = new FacetResponse . TagCollection ( ) ; FacetResponse . Group facetResponse_Group0 = new FacetResponse . Group ( facetRequestGroup0 , facetResponse_TagCollection0 ) ; FacetRequestGroup facetRequestGroup1 = facetResponse_Group0 . getRequest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return count ; }
void test6 ( ) throws Throwable { FacetResponse . TagCollection facetResponse_TagCollection0 = new FacetResponse . TagCollection ( ) ; FacetRequest facetRequest0 = new FacetRequest ( "" ) ; FacetRequestGroup facetRequestGroup0 = facetRequest0 . createGroup ( "" ) ; FacetResponse . Group facetResponse_Group0 = new FacetResponse . Group ( facetRequestGroup0 , facetResponse_TagCollection0 ) ; FacetResponse . TagCollection facetResponse_TagCollection1 = facetResponse_Group0 . getTags ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return count ; }
void test7 ( ) throws Throwable { FacetResponse . TagCollection facetResponse_TagCollection0 = new FacetResponse . TagCollection ( ) ; FacetRequest facetRequest0 = new FacetRequest ( "" ) ; FacetRequestGroup facetRequestGroup0 = facetRequest0 . createGroup ( "" ) ; FacetResponse . Group facetResponse_Group0 = new FacetResponse . Group ( facetRequestGroup0 , facetResponse_TagCollection0 ) ; facetResponse_Group0 . setValidTags ( ( - 1L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTotalCount ( ) { return deletedIndexables + nonDeletedIndexables + nonDeletedNonIndexables + deletedNonIndexables ; }
void test8 ( ) throws Throwable { FacetResponse . TagCollection facetResponse_TagCollection0 = new FacetResponse . TagCollection ( ) ; FacetRequest facetRequest0 = new FacetRequest ( "" ) ; FacetRequestGroup facetRequestGroup0 = facetRequest0 . createGroup ( "" ) ; FacetResponse . Group facetResponse_Group0 = new FacetResponse . Group ( facetRequestGroup0 , facetResponse_TagCollection0 ) ; facetResponse_Group0 . isHierarchical ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTotalCount ( ) { return deletedIndexables + nonDeletedIndexables + nonDeletedNonIndexables + deletedNonIndexables ; }
void test9 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . custom ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( " : missin method '" , namedComparator_ORDER0 , false , " : missin method '" , 0 , 0 , 0 , " : missin method '" , false , 0 , " : missin method '" , " : missin method '" ) ; FacetResponse . TagCollection facetResponse_TagCollection0 = new FacetResponse . TagCollection ( ) ; FacetResponse . Group facetResponse_Group0 = new FacetResponse . Group ( facetRequestGroup0 , facetResponse_TagCollection0 ) ; long long0 = facetResponse_Group0 . getExtractionTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return count ; }
void test10 ( ) throws Throwable { FacetResponse . Tag facetResponse_Tag0 = new FacetResponse . Tag ( " : missin method '" , 0 , 0 ) ; String string0 = facetResponse_Tag0 . getTerm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return count ; }
void test11 ( ) throws Throwable { FacetResponse . Tag facetResponse_Tag0 = new FacetResponse . Tag ( " : missin method '" , 0 , 0 ) ; facetResponse_Tag0 . getSubTags ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTotalCount ( ) { return deletedIndexables + nonDeletedIndexables + nonDeletedNonIndexables + deletedNonIndexables ; }
void test12 ( ) throws Throwable { FacetResponse . Tag facetResponse_Tag0 = new FacetResponse . Tag ( " [ " , ( - 665 ) , ( - 665 ) ) ; int int0 = facetResponse_Tag0 . getTotalCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return count ; }
void test13 ( ) throws Throwable { FacetResponse . Tag facetResponse_Tag0 = new FacetResponse . Tag ( "" , 3 , 3 ) ; int int0 = facetResponse_Tag0 . getCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTotalCount ( ) { return deletedIndexables + nonDeletedIndexables + nonDeletedNonIndexables + deletedNonIndexables ; }
void test14 ( ) throws Throwable { FacetResponse . Tag facetResponse_Tag0 = new FacetResponse . Tag ( "" , ( - 65473 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTotalCount ( ) { return deletedIndexables + nonDeletedIndexables + nonDeletedNonIndexables + deletedNonIndexables ; }
void test16 ( ) throws Throwable { FacetResponse . TagCollection facetResponse_TagCollection0 = new FacetResponse . TagCollection ( ) ; facetResponse_TagCollection0 . getDefiner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTotalCount ( ) { return deletedIndexables + nonDeletedIndexables + nonDeletedNonIndexables + deletedNonIndexables ; }
void test17 ( ) throws Throwable { FacetResponse . TagCollection facetResponse_TagCollection0 = new FacetResponse . TagCollection ( ) ; facetResponse_TagCollection0 . setTotalCount ( 1816L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTotalCount ( ) { return deletedIndexables + nonDeletedIndexables + nonDeletedNonIndexables + deletedNonIndexables ; }
void test18 ( ) throws Throwable { FacetResponse . TagCollection facetResponse_TagCollection0 = new FacetResponse . TagCollection ( ) ; FacetRequest facetRequest0 = new FacetRequest ( "Xa" ) ; FacetRequestGroup facetRequestGroup0 = facetRequest0 . createGroup ( "Xa" ) ; facetResponse_TagCollection0 . setDefiner ( ( SubtagsConstraints ) facetRequestGroup0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return count ; }
void test19 ( ) throws Throwable { FacetResponse . TagCollection facetResponse_TagCollection0 = new FacetResponse . TagCollection ( ) ; facetResponse_TagCollection0 . getConstraints ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return count ; }
void test20 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "0 | " ) ; FastStack fastStack0 = new FastStack ( ) ; FacetResponse facetResponse0 = new FacetResponse ( facetRequest0 , ( List < FacetResponse . Group > ) fastStack0 , ( long ) ( - 65473 ) ) ; facetResponse0 . setTotalTime ( ( long ) ( - 65473 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCountingTime ( ) { return countingTime ; }
void test21 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( " : missin method '" ) ; LinkedList < FacetResponse . Group > linkedList0 = new LinkedList < FacetResponse . Group > ( ) ; FacetResponse facetResponse0 = new FacetResponse ( facetRequest0 , ( List < FacetResponse . Group > ) linkedList0 , ( long ) 0 ) ; boolean boolean0 = facetResponse0 . isCountCached ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test22 ( ) throws Throwable { FacetResponse facetResponse0 = new FacetResponse ( ( FacetRequest ) null , ( List < FacetResponse . Group > ) null , 609L ) ; long long0 = facetResponse0 . getTotalTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCountCached ( ) { return countCached ; }
void test23 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "f" ) ; FacetResponse facetResponse0 = new FacetResponse ( facetRequest0 , ( List < FacetResponse . Group > ) null , ( long ) ( - 1580 ) ) ; facetResponse0 . getGroups ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DocumentResponse getHits ( Payload payload , String searchValue ) throws PayloadException { Request request = new Request ( ) ; String qw = quote ? "\"" : "" ; String query = "" . equals ( searchField ) ? searchValue : searchField + " : " + qw + searchValue + qw ; request . put ( DocumentKeys . SEARCH_QUERY , query ) ; request . put ( DocumentKeys . SEARCH_MAX_RECORDS , maxHits ) ; request . put ( DocumentKeys . SEARCH_RESULT_FIELDS , DocumentKeys . RECORD_ID ) ; ResponseCollection responses ; try { log . trace ( "Searching with query '" + query + "'" ) ; responses = searcher . search ( request ) ; } catch ( IOException e ) { nonmatching ( payload ) ; throw new PayloadException ( "Exception while searching with query '" + query + "'" , e , payload ) ; } DocumentResponse docResponse = null ; for ( Response response : responses ) { if ( response instanceof DocumentResponse ) { docResponse = ( DocumentResponse ) response ; break ; / / Consider is there should be support for multiple } } if ( docResponse = = null ) { log . debug ( "No hits for query '" + query + "'" ) ; nonmatching ( payload ) ; throw new PayloadException ( "Did not receive a DocumentResponse when searching for query '" + query + "'" , payload ) ; } return docResponse ; }
void test24 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( " : missin method '" ) ; LinkedList < FacetResponse . Group > linkedList0 = new LinkedList < FacetResponse . Group > ( ) ; FacetResponse facetResponse0 = new FacetResponse ( facetRequest0 , ( List < FacetResponse . Group > ) linkedList0 , ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTotalTime ( ) { return totalTime ; }
void test25 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "0 | " ) ; FastStack fastStack0 = new FastStack ( ) ; FacetResponse facetResponse0 = new FacetResponse ( facetRequest0 , ( List < FacetResponse . Group > ) fastStack0 , ( long ) ( - 65473 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCountCached ( ) { return countCached ; }
void test26 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "0 | " ) ; FastStack fastStack0 = new FastStack ( ) ; FacetResponse facetResponse0 = new FacetResponse ( facetRequest0 , ( List < FacetResponse . Group > ) fastStack0 , ( long ) ( - 65473 ) ) ; String string0 = facetResponse0 . toXML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test27 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "0 | " ) ; FastStack fastStack0 = new FastStack ( ) ; FacetResponse facetResponse0 = new FacetResponse ( facetRequest0 , ( List < FacetResponse . Group > ) fastStack0 , ( long ) ( - 65473 ) ) ; long long0 = facetResponse0 . getCountingTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test28 ( ) throws Throwable { FacetResponse facetResponse0 = new FacetResponse ( ( FacetRequest ) null , ( List < FacetResponse . Group > ) null , 609L ) ; long long0 = facetResponse0 . getHits ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCountCached ( ) { return countCached ; }
void test29 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "Xa" ) ; FastStack fastStack0 = new FastStack ( ) ; FacetResponse facetResponse0 = new FacetResponse ( facetRequest0 , ( List < FacetResponse . Group > ) fastStack0 , ( - 1L ) ) ; FacetRequest facetRequest1 = facetResponse0 . getRequest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTotalTime ( ) { return totalTime ; }
void test30 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "0 | " ) ; FastStack fastStack0 = new FastStack ( ) ; FacetResponse facetResponse0 = new FacetResponse ( facetRequest0 , ( List < FacetResponse . Group > ) fastStack0 , ( long ) ( - 65473 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test32 ( ) throws Throwable { FacetResponse . Tag facetResponse_Tag0 = new FacetResponse . Tag ( "" , 3 , 3 ) ; FastStack fastStack0 = new FastStack ( ) ; FacetResponse . TagCollection facetResponse_TagCollection0 = new FacetResponse . TagCollection ( ) ; facetResponse_TagCollection0 . setTags ( ( List < FacetResponse . Tag > ) fastStack0 ) ; facetResponse_Tag0 . setSubTags ( facetResponse_TagCollection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return count ; }
void test33 ( ) throws Throwable { FacetResponse . Tag facetResponse_Tag0 = new FacetResponse . Tag ( "Xa" , 3 , 3 ) ; FacetResponse . TagCollection facetResponse_TagCollection0 = new FacetResponse . TagCollection ( ) ; FacetRequest facetRequest0 = new FacetRequest ( "Xa" ) ; FastStack fastStack0 = new FastStack ( ) ; fastStack0 . add ( ( Object ) facetRequest0 ) ; facetResponse_TagCollection0 . setTags ( ( List < FacetResponse . Tag > ) fastStack0 ) ; facetResponse_Tag0 . setSubTags ( facetResponse_TagCollection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test34 ( ) throws Throwable { FacetResponse . Tag facetResponse_Tag0 = new FacetResponse . Tag ( "nonNegativeInteger" , ( - 1 ) , ( - 1 ) ) ; BadgerFishXMLStreamWriter badgerFishXMLStreamWriter0 = new BadgerFishXMLStreamWriter ( ( Writer ) null ) ; facetResponse_Tag0 . toXML ( ( XMLStreamWriter ) badgerFishXMLStreamWriter0 , "nonNegativeInteger" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return count ; }
void test35 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "" ) ; FastStack fastStack0 = new FastStack ( ) ; FacetResponse facetResponse0 = new FacetResponse ( facetRequest0 , ( List < FacetResponse . Group > ) fastStack0 , ( - 1L ) ) ; String string0 = facetResponse0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test0 ( ) throws Throwable { Comparator < BytesRef > comparator0 = ParseHelper . createComparator ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Comparator < BytesRef > createComparator ( String locale ) { return ComparatorFactory . create ( locale ) ; }
void test1 ( ) throws Throwable { try { ParseHelper . getInteger ( "PNw { $s7vBszjw { 0R" , "PNw { $s7vBszjw { 0R" , "PNw { $s7vBszjw { 0R" ) ; fail ( "Expecting exception : XMLStreamException" ) ; } catch ( XMLStreamException e ) { / * * The integer for PNw { $s7vBszjw { 0R was 'PNw { $s7vBszjw { 0R' which is not valid . Full request : PNw { $s7vBszjw { 0R * / } } @Test void test2 ( ) throws Throwable { ParseHelper parseHelper0 = new ParseHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInteger ( String request , String attribute , String value ) throws XMLStreamException { try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException e ) { throw new XMLStreamException ( "The integer for " + attribute + " was '" + value + "' which is not valid . Full request : " + request ) ; } }
void test2 ( ) throws Throwable { ParseHelper parseHelper0 = new ParseHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . count ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "java . ui . TSyD" , namedComparator_ORDER0 , false , "java . ui . TSyD" , 10 , 10 , 10 , "java . ui . TSyD" , false , 10 , "java . ui . TSyD" , "java . ui . TSyD" ) ; int [ ] intArray0 = new int [ 24 ] ; TagSumIterator tagSumIterator0 = new TagSumIterator ( ( HierarchicalTermProvider ) null , ( SubtagsConstraints ) facetRequestGroup0 , intArray0 , 0 , 0 , 10 , 10 ) ; int int0 = tagSumIterator0 . getTotalCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTotalCount ( ) { return deletedIndexables + nonDeletedIndexables + nonDeletedNonIndexables + deletedNonIndexables ; }
void test3 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . count ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "java . ui . TSyD" , namedComparator_ORDER0 , false , "java . ui . TSyD" , 10 , 10 , 10 , "java . ui . TSyD" , false , 10 , "java . ui . TSyD" , "java . ui . TSyD" ) ; int [ ] intArray0 = new int [ 24 ] ; TagSumIterator tagSumIterator0 = new TagSumIterator ( ( HierarchicalTermProvider ) null , ( SubtagsConstraints ) facetRequestGroup0 , intArray0 , 0 , 0 , 10 , 10 ) ; int int0 = tagSumIterator0 . getCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCount ( ) { return count ; }
void test4 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . count ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "java . ui . TSyD" , namedComparator_ORDER0 , false , "java . ui . TSyD" , 10 , 10 , 10 , "java . ui . TSyD" , false , 10 , "java . ui . TSyD" , "java . ui . TSyD" ) ; int [ ] intArray0 = new int [ 24 ] ; TagSumIterator tagSumIterator0 = new TagSumIterator ( ( HierarchicalTermProvider ) null , ( SubtagsConstraints ) facetRequestGroup0 , intArray0 , 0 , 0 , 10 , 10 ) ; boolean boolean0 = tagSumIterator0 . next ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Record next ( long iteratorKey ) throws IOException { throw new NoSuchElementException ( "VoidStorage contains no elements" ) ; }
void test5 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . count ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "java . ui . TSyD" , namedComparator_ORDER0 , false , "java . ui . TSyD" , 10 , 10 , 10 , "java . ui . TSyD" , false , 10 , "java . ui . TSyD" , "java . ui . TSyD" ) ; int [ ] intArray0 = new int [ 24 ] ; TagSumIterator tagSumIterator0 = new TagSumIterator ( ( HierarchicalTermProvider ) null , ( SubtagsConstraints ) facetRequestGroup0 , intArray0 , 0 , 10 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Record next ( long iteratorKey ) throws IOException { throw new NoSuchElementException ( "VoidStorage contains no elements" ) ; }
void test0 ( ) throws Throwable { FacetMapSingleLongFactory facetMapSingleLongFactory0 = new FacetMapSingleLongFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { Vector < TermProvider > vector0 = new Vector < TermProvider > ( ) ; FacetMap facetMap0 = FacetMapSingleLongFactory . createMap ( 4 , ( List < TermProvider > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test3 ( ) throws Throwable { Vector < TermProvider > vector0 = new Vector < TermProvider > ( ) ; FacetMap facetMap0 = FacetMapSingleLongFactory . createMap ( 6470 , ( List < TermProvider > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTagCount ( ) { return indirectStarts [ indirectStarts . length - 1 ] ; }
void test0 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; Stack < ExposedRequest . Field > stack1 = new Stack < ExposedRequest . Field > ( ) ; Locale locale0 = Locale . TAIWAN ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " * r\"T6$w ; _7h : X%6" , ( List < ExposedRequest . Field > ) stack1 , ( NamedComparator ) namedCollatorComparator0 ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 16 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , false ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , 16 , false ) ; hierarchicalTermProvider0 . transitiveReleaseCaches ( 0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDesignation ( ) { return "CachedTermProvider ( " + source . getClass ( ) . getSimpleName ( ) + " ( " + source . getDesignation ( ) + " ) ) " ; }
void test1 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; Stack < ExposedRequest . Field > stack1 = new Stack < ExposedRequest . Field > ( ) ; Locale locale0 = Locale . TAIWAN ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "TN & Pl_e8f" , ( List < ExposedRequest . Field > ) stack1 , ( NamedComparator ) namedCollatorComparator0 ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 0 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , true ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , 0 , true ) ; long long0 = hierarchicalTermProvider0 . getUniqueTermCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUniqueTermCount ( ) throws IOException { return source . getUniqueTermCount ( ) ; }
void test2 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; Stack < ExposedRequest . Field > stack1 = new Stack < ExposedRequest . Field > ( ) ; Locale locale0 = Locale . TAIWAN ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "TN & Pl_e8f" , ( List < ExposedRequest . Field > ) stack1 , ( NamedComparator ) namedCollatorComparator0 ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 0 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , true ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , 0 , true ) ; hierarchicalTermProvider0 . getDocToSingleIndirect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test3 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; Stack < ExposedRequest . Field > stack1 = new Stack < ExposedRequest . Field > ( ) ; Locale locale0 = Locale . TAIWAN ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "TN & Pl_e8f" , ( List < ExposedRequest . Field > ) stack1 , ( NamedComparator ) namedCollatorComparator0 ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 0 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , true ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , 0 , true ) ; long long0 = hierarchicalTermProvider0 . getMaxDoc ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMaxDoc ( ) { return source . getMaxDoc ( ) ; }
void test4 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; Stack < ExposedRequest . Field > stack1 = new Stack < ExposedRequest . Field > ( ) ; Locale locale0 = Locale . TAIWAN ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " * r\"T6$w ; _7h : X%6" , ( List < ExposedRequest . Field > ) stack1 , ( NamedComparator ) namedCollatorComparator0 ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 16 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , false ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , 16 , false ) ; int int0 = hierarchicalTermProvider0 . getPreviousMatchingLevel ( 16 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPreviousMatchingLevel ( int indirect ) { return ( int ) pLevels . get ( indirect ) ; }
void test5 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; Stack < ExposedRequest . Field > stack1 = new Stack < ExposedRequest . Field > ( ) ; Locale locale0 = Locale . TAIWAN ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "N & Pe ? f" , ( List < ExposedRequest . Field > ) stack1 , ( NamedComparator ) namedCollatorComparator0 ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 17 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , false ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , 17 , true ) ; PackedInts . Reader packedInts_Reader0 = hierarchicalTermProvider0 . getOrderedOrdinals ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test7 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; FastStack fastStack0 = new FastStack ( ) ; NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "#l" , ( List < ExposedRequest . Field > ) fastStack0 , ( NamedComparator ) namedNaturalComparator0 , "#l" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 0 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , false ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , "#l" ) ; int int0 = hierarchicalTermProvider0 . getReaderHash ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReaderHash ( ) { return source . getReaderHash ( ) ; }
void test10 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; Stack < ExposedRequest . Field > stack1 = new Stack < ExposedRequest . Field > ( ) ; Locale locale0 = Locale . TAIWAN ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "TN & Pl_e8f" , ( List < ExposedRequest . Field > ) stack1 , ( NamedComparator ) namedCollatorComparator0 ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 0 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , true ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , 0 , true ) ; CachedTermProvider cachedTermProvider0 = new CachedTermProvider ( ( TermProvider ) hierarchicalTermProvider0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOnlyReadAheadIfSpace ( ) { return onlyReadAheadIfSpace ; }
void test12 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; FastStack fastStack0 = new FastStack ( ) ; NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " & j" , ( List < ExposedRequest . Field > ) fastStack0 , ( NamedComparator ) namedNaturalComparator0 , " & j" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 0 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , true ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , " & j" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLevel ( int indirect ) { return ( int ) levels . get ( indirect ) ; }
void test13 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; Stack < ExposedRequest . Field > stack1 = new Stack < ExposedRequest . Field > ( ) ; Locale locale0 = Locale . TAIWAN ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " * r\"T6$w ; _7h : X%6" , ( List < ExposedRequest . Field > ) stack1 , ( NamedComparator ) namedCollatorComparator0 ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 16 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , false ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , 16 , false ) ; int int0 = hierarchicalTermProvider0 . getRecursiveHash ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRecursiveHash ( ) { return source . getRecursiveHash ( ) ; }
void test16 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; Stack < ExposedRequest . Field > stack1 = new Stack < ExposedRequest . Field > ( ) ; Locale locale0 = Locale . TAIWAN ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "TN & Pl_e8f" , ( List < ExposedRequest . Field > ) stack1 , ( NamedComparator ) namedCollatorComparator0 ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 0 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , true ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , 0 , true ) ; NamedCollatorComparator namedCollatorComparator1 = ( NamedCollatorComparator ) hierarchicalTermProvider0 . getComparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Comparator < Record > getComparator ( ) { if ( sortKey = = null | | SORT_ON_SCORE . equals ( sortKey ) ) { return scoreComparator ; } Collator collator = Collator . getInstance ( new Locale ( "da" ) ) ; return new Comparator < Record > ( ) { @SuppressWarnings ( "ConstantConditions" ) @Override int compare ( Record o1 , Record o2 ) { String s1 = o1 . getSortValue ( ) = = null ? "" : o1 . getSortValue ( ) ; String s2 = o2 . getSortValue ( ) = = null ? "" : o2 . getSortValue ( ) ; if ( NON_DEFINED_FIELDS_ARE_SPECIAL_SORTED ) { / / Handle empty cases if ( "" . equals ( s1 ) ) { return "" . equals ( s2 ) ? scoreComparator . compare ( o1 , o2 ) : NON_DEFINED_FIELDS_ARE_SORTED_LAST ? - 1 : 1 ; } else if ( "" . equals ( s2 ) ) { return NON_DEFINED_FIELDS_ARE_SORTED_LAST ? 1 : - 1 ; } } / / throw new IllegalStateException ( "Collator support not " / / + "finished" ) ; return collator . compare ( s1 , s2 ) * ( reverseSort ? - 1 : 1 ) ; } } ; }
void test17 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; Stack < ExposedRequest . Field > stack1 = new Stack < ExposedRequest . Field > ( ) ; Locale locale0 = Locale . TAIWAN ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "N & Pe ? f" , ( List < ExposedRequest . Field > ) stack1 , ( NamedComparator ) namedCollatorComparator0 ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 17 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , false ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , 17 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNearestTermIndirect ( BytesRef key ) throws IOException { return source . getNearestTermIndirect ( key ) ; }
void test18 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; FastStack fastStack0 = new FastStack ( ) ; NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "#l" , ( List < ExposedRequest . Field > ) fastStack0 , ( NamedComparator ) namedNaturalComparator0 , "#l" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 0 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , false ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , "#l" ) ; hierarchicalTermProvider0 . setDocIDBase ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getOrdinalTermCount ( ) throws IOException { return source . getOrdinalTermCount ( ) ; }
void test19 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; Stack < ExposedRequest . Field > stack1 = new Stack < ExposedRequest . Field > ( ) ; Locale locale0 = Locale . TAIWAN ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "TN & Pl_e8f" , ( List < ExposedRequest . Field > ) stack1 , ( NamedComparator ) namedCollatorComparator0 ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 0 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , true ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , 0 , true ) ; PackedInts . Reader packedInts_Reader0 = hierarchicalTermProvider0 . getOrderedOrdinals ( ( TermProvider . OrderedDecorator ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test20 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; FastStack fastStack0 = new FastStack ( ) ; NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( " & j" , ( List < ExposedRequest . Field > ) fastStack0 , ( NamedComparator ) namedNaturalComparator0 , " & j" ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 0 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , true ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , " & j" ) ; String string0 = hierarchicalTermProvider0 . getDesignation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDesignation ( ) { return "CachedTermProvider ( " + source . getClass ( ) . getSimpleName ( ) + " ( " + source . getDesignation ( ) + " ) ) " ; }
void test23 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; Stack < ExposedRequest . Field > stack1 = new Stack < ExposedRequest . Field > ( ) ; Locale locale0 = Locale . TAIWAN ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "f2 & P : e ? 8f" , ( List < ExposedRequest . Field > ) stack1 , ( NamedComparator ) namedCollatorComparator0 ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 3 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , false ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , 3 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchLevel ( int indirect , int level ) { / / return levels . get ( indirect ) > = level & & pLevels . get ( indirect ) < level ; return levels . get ( indirect ) > = level & & pLevels . get ( indirect ) > = level - 1 ; }
void test24 ( ) throws Throwable { Stack < TermProvider > stack0 = new Stack < TermProvider > ( ) ; Stack < ExposedRequest . Field > stack1 = new Stack < ExposedRequest . Field > ( ) ; Locale locale0 = Locale . TAIWAN ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; ExposedRequest . Group exposedRequest_Group0 = new ExposedRequest . Group ( "" , ( List < ExposedRequest . Field > ) stack1 , ( NamedComparator ) namedCollatorComparator0 ) ; GroupTermProvider groupTermProvider0 = new GroupTermProvider ( 0 , ( List < TermProvider > ) stack0 , exposedRequest_Group0 , false ) ; HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider ( ( TermProvider ) groupTermProvider0 , 0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchLevel ( int indirect , int level ) { / / return levels . get ( indirect ) > = level & & pLevels . get ( indirect ) < level ; return levels . get ( indirect ) > = level & & pLevels . get ( indirect ) > = level - 1 ; }
void test0 ( ) throws Throwable { CollectorPool collectorPool0 = new CollectorPool ( "F9e + Pw ] " , ( FacetMap ) null , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test1 ( ) throws Throwable { CollectorPool collectorPool0 = new CollectorPool ( ( FacetMap ) null , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimplePair < CollectorPool , TagCollector > acquire ( CollectorPoolFactory factory , IndexReader reader , String key , FacetRequest request , String caller ) throws IOException { CollectorPool collectorPool ; try { boolean hasPool = factory . hasPool ( reader , request ) ; if ( ! hasPool ) { log . info ( "The CollectorPoolFactory has no structures for the given " + "request from " + caller + " . A new structure will be " + "generated , which can take several minutes . The request was " + request . getBuildKey ( ) ) ; } long buildTime = - System . currentTimeMillis ( ) ; collectorPool = factory . acquire ( reader , request ) ; buildTime + = System . currentTimeMillis ( ) ; if ( ! hasPool ) { log . info ( "The PoolFactory was successfully updated in " + buildTime / 1000 + " seconds . " + "Total allocation is " + factory . toString ( ) + " with MachineStats ( " + MachineStats . stats ( ) + " ) " ) ; } } catch ( IOException e ) { throw new RuntimeException ( "Unable to acquire a CollectorPool for " + request , e ) ; } TagCollector tagCollector ; try { CollectorPool . AVAILABILITY availability = collectorPool . getAvailability ( key ) ; switch ( availability ) { case hasFresh : log . debug ( "Acquiring fresh tagCollector for '" + key + "'" ) ; break ; case hasFilled : log . debug ( "Acquiring filled tagCollector for '" + key + "'" ) ; break ; case mustWait : log . debug ( "All allowed TagCollectors are active for key '" + key + "' for " + caller ) ; break ; case mustCreateNew : log . info ( "A new TagCollector will be created for key '" + key + "' for " + caller + " from " + collectorPool ) ; break ; case mightCreateNew : log . info ( "A new TagCollector might be created for key '" + key + "' for " + caller ) ; break ; default : log . warn ( "Unknown availability state : " + availability ) ; } tagCollector = collectorPool . acquire ( key ) ; if ( tagCollector . isNewborn ( ) ) { long a = allocateCounter . incrementAndGet ( ) ; if ( a % 100 = = 0 | | log . isDebugEnabled ( ) ) { String message = "Allocated " + tagCollector + " #" + a + " ( availability was " + availability + " ) . " + "CollectorPoolFactory memory allocation is now " + factory . getMem ( ) / 1048576 + "MB with MachineStats ( " + MachineStats . stats ( ) + " ) " ; if ( a % 100 = = 0 ) { log . info ( message ) ; } else { log . debug ( message ) ; } log . debug ( "CollectorPoolFactory structure allocation is " + factory . toString ( ) ) ; } } return new SimplePair < CollectorPool , TagCollector > ( collectorPool , tagCollector ) ; } catch ( OutOfMemoryError e ) { StringWriter writer = new StringWriter ( 1000 ) ; PrintWriter pw = new PrintWriter ( writer ) ; e . printStackTrace ( pw ) ; pw . flush ( ) ; throw new OutOfMemoryError ( "Encountered OOM when acquiring TagCollector for '" + key + "' with full request " + request + " from pool " + collectorPool + " with full factory " + factory + "\nCaused by : " + writer . toString ( ) ) ; } }
void test2 ( ) throws Throwable { CollectorPool collectorPool0 = new CollectorPool ( "F9e + Pw ] " , ( FacetMap ) null , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxFilled ( ) { return maxFilled ; }
void test1 ( ) throws Throwable { CollectorPoolFactory collectorPoolFactory0 = CollectorPoolFactory . getLastFactory ( ) ; collectorPoolFactory0 . onClose ( ( IndexReader ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test5 ( ) throws Throwable { CollectorPoolFactory collectorPoolFactory0 = CollectorPoolFactory . getLastFactory ( ) ; collectorPoolFactory0 . purgeAllCaches ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMem ( ) { return mem ; }
void test6 ( ) throws Throwable { CollectorPoolFactory collectorPoolFactory0 = CollectorPoolFactory . getLastFactory ( ) ; String string0 = collectorPoolFactory0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test7 ( ) throws Throwable { CollectorPoolFactory collectorPoolFactory0 = CollectorPoolFactory . getLastFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMem ( ) { return mem ; }
void test0 ( ) throws Throwable { ArrayList < TermProvider > arrayList0 = new ArrayList < TermProvider > ( ) ; FacetMap facetMap0 = FacetMapFactory . createMap ( 593 , ( List < TermProvider > ) arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test1 ( ) throws Throwable { FacetMapFactory facetMapFactory0 = new FacetMapFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { SubtagsConstraints . SUBTAGS_ORDER subtagsConstraints_SUBTAGS_ORDER0 = SubtagsConstraints . SUBTAGS_ORDER . base ; FacetRequestSubtags facetRequestSubtags0 = new FacetRequestSubtags ( ( - 600 ) , ( - 600 ) , ( - 600 ) , subtagsConstraints_SUBTAGS_ORDER0 ) ; FacetRequestSubtags facetRequestSubtags1 = ( FacetRequestSubtags ) facetRequestSubtags0 . getDeeperLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinTotalCount ( ) { return minCount ; }
void test1 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . custom ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "f6Qt | %A6 < . mD ZC" , namedComparator_ORDER0 , true , "f6Qt | %A6 < . mD ZC" , ( - 256 ) , ( - 256 ) , ( - 256 ) , "f6Qt | %A6 < . mD ZC" , true , ( - 256 ) , "f6Qt | %A6 < . mD ZC" , "f6Qt | %A6 < . mD ZC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOffset ( ) { return offset ; }
void test2 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . custom ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "f6Qt | %A6 < . mD ZC" , namedComparator_ORDER0 , true , "f6Qt | %A6 < . mD ZC" , ( - 256 ) , ( - 256 ) , ( - 256 ) , "f6Qt | %A6 < . mD ZC" , true , ( - 256 ) , "f6Qt | %A6 < . mD ZC" , "f6Qt | %A6 < . mD ZC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverse ( ) { return reverse ; }
void test3 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . index ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "" , namedComparator_ORDER0 , true , "" , 231 , 231 , 231 , "" , true , 231 , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxTags ( ) { return maxTags ; }
void test4 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . custom ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "f6Qt | %A6 < . mD ZC" , namedComparator_ORDER0 , false , "f6Qt | %A6 < . mD ZC" , ( - 1732 ) , ( - 1732 ) , ( - 1732 ) , "f6Qt | %A6 < . mD ZC" , false , ( - 1732 ) , "f6Qt | %A6 < . mD ZC" , "f6Qt | %A6 < . mD ZC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( ) { return prefix ; }
void test5 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . index ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "" , namedComparator_ORDER0 , true , "" , 231 , 231 , 231 , "" , true , 231 , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOffset ( ) { return offset ; }
void test6 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . index ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "" , namedComparator_ORDER0 , true , "" , 231 , 231 , 231 , "" , true , 231 , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxTags ( ) { return maxTags ; }
void test7 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . custom ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "" , namedComparator_ORDER0 , false , "" , 20000 , 20000 , 20000 , "" , false , 20000 , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinCount ( ) { return minCount ; }
void test8 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . custom ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "f6Qt | %A6 < . mD ZC" , namedComparator_ORDER0 , false , "f6Qt | %A6 < . mD ZC" , ( - 1732 ) , ( - 1732 ) , ( - 1732 ) , "f6Qt | %A6 < . mD ZC" , false , ( - 1732 ) , "f6Qt | %A6 < . mD ZC" , "f6Qt | %A6 < . mD ZC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinTotalCount ( ) { return minCount ; }
void test9 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . index ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "" , namedComparator_ORDER0 , true , "" , 231 , 231 , 231 , "" , true , 231 , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBuildKey ( ) { return buildKey ; }
void test10 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . locale ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( ( String ) null , namedComparator_ORDER0 , true , ( String ) null , 1395 , 1395 , 1395 , ( String ) null , true , 1395 , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBuildKey ( ) { return buildKey ; }
void test11 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . locale ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( " { vV4t" , namedComparator_ORDER0 , true , " { vV4t" , 0 , 0 , 0 , " { vV4t" , true , 0 , " { vV4t" , " { vV4t" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinTotalCount ( ) { return minCount ; }
void test12 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . custom ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "f6Qt | %A6 < . mD ZC" , namedComparator_ORDER0 , false , "f6Qt | %A6 < . mD ZC" , ( - 1732 ) , ( - 1732 ) , ( - 1732 ) , "f6Qt | %A6 < . mD ZC" , false , ( - 1732 ) , "f6Qt | %A6 < . mD ZC" , "f6Qt | %A6 < . mD ZC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinCount ( ) { return minCount ; }
void test13 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . locale ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( " { vV4t" , namedComparator_ORDER0 , true , " { vV4t" , 0 , 0 , 0 , " { vV4t" , true , 0 , " { vV4t" , " { vV4t" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinCount ( ) { return minCount ; }
void test14 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . locale ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( " { vV4t" , namedComparator_ORDER0 , true , " { vV4t" , 0 , 0 , 0 , " { vV4t" , true , 0 , " { vV4t" , " { vV4t" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test15 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . custom ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "" , namedComparator_ORDER0 , false , "" , 20000 , 20000 , 20000 , "" , false , 20000 , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( ) { return prefix ; }
void test16 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . index ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "" , namedComparator_ORDER0 , true , "" , 231 , 231 , 231 , "" , true , 231 , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinCount ( ) { return minCount ; }
void test17 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . index ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "" , namedComparator_ORDER0 , true , "" , 231 , 231 , 231 , "" , true , 231 , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxTags ( ) { return maxTags ; }
void test18 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . locale ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( " { vV4t" , namedComparator_ORDER0 , true , " { vV4t" , 0 , 0 , 0 , " { vV4t" , true , 0 , " { vV4t" , " { vV4t" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverse ( ) { return reverse ; }
void test19 ( ) throws Throwable { NamedComparator . ORDER namedComparator_ORDER0 = NamedComparator . ORDER . custom ; FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup ( "f6Qt | %A6 < . mD ZC" , namedComparator_ORDER0 , true , "f6Qt | %A6 < . mD ZC" , ( - 256 ) , ( - 256 ) , ( - 256 ) , "f6Qt | %A6 < . mD ZC" , true , ( - 256 ) , "f6Qt | %A6 < . mD ZC" , "f6Qt | %A6 < . mD ZC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "t . K0By%u / Q" ) ; String string0 = facetRequest0 . getBuildKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test1 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "hierarchical" ) ; int int0 = facetRequest0 . getOffset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test2 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "a & . $y $bz" ) ; String string0 = facetRequest0 . getLocale ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test3 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "t . K0By%u / Q" ) ; List < FacetRequestGroup > list0 = facetRequest0 . getGroups ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test4 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "startPath" ) ; String string0 = facetRequest0 . getStartPath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Pair < PackedInts . Reader , PackedInts . Reader > getLevels ( ) throws IOException { PackedInts . Reader ordered = source . getOrderedOrdinals ( ) ; / / FIXME : GrowingMutable should grow up to upper limit for bitsPerValue GrowingMutable levels = new GrowingMutable ( 0 , ordered . size ( ) , 0 , 1 , true ) ; GrowingMutable pLevels = new GrowingMutable ( 0 , ordered . size ( ) , 0 , 1 , true ) ; String [ ] previous = new String [ 0 ] ; / / TODO : Consider speeding up by sorting indirect chunks for seq . access / / TODO : Consider using StringTokenizer or custom split long splitTime = 0 ; for ( int index = 0 ; index < ordered . size ( ) ; index + + ) { splitTime - = System . nanoTime ( ) ; String [ ] current = splitPattern . split ( source . getOrderedTerm ( index ) . utf8ToString ( ) ) ; splitTime + = System . nanoTime ( ) ; int pLevel = 0 ; for ( int level = 0 ; level < current . length & & level < previous . length ; level + + ) { if ( current [ level ] . equals ( previous [ level ] ) ) { pLevel = level + 1 ; } } levels . set ( index , current . length ) ; pLevels . set ( index , pLevel ) ; previous = current ; } if ( ExposedSettings . debug ) { System . out . println ( "Spend " + splitTime / 1000000 + " ms on " + ordered . size ( ) + " splits : " + ( ordered . size ( ) * 1000000L / splitTime ) + " splits / ms" ) ; } return new Pair < PackedInts . Reader , PackedInts . Reader > ( reduce ( levels ) , reduce ( pLevels ) ) ; }
void test5 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "hierarchical" ) ; int int0 = facetRequest0 . getMinCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test6 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "d_ * Tf0Vp . #`Sbf~#tg" ) ; boolean boolean0 = facetRequest0 . isHierarchical ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test7 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "hierarchical" ) ; String string0 = facetRequest0 . getQuery ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test8 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "d_ * Tf0Vp . #`Sbf~#tg" ) ; facetRequest0 . getOrder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test9 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "hierarchical" ) ; String string0 = facetRequest0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test10 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "pkQSM_N ? + jEp * $ZRK" ) ; facetRequest0 . setQuery ( "pkQSM_N ? + jEp * $ZRK" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test11 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "a & . 3y$1z" ) ; String string0 = facetRequest0 . getDelimiter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test12 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "t . K0By%u / Q" ) ; int int0 = facetRequest0 . getMaxTags ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test13 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "a & . $y $bz" ) ; facetRequest0 . createGroup ( "a & . $y $bz" ) ; String string0 = facetRequest0 . toXML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGroupKey ( ) { StringWriter sw = new StringWriter ( ) ; writeGroupKey ( sw ) ; return sw . toString ( ) ; }
void test14 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "d_ * Tf0Vp . #`Sbf~#tg" ) ; String string0 = facetRequest0 . getPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test15 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "pkQSM_N ? + jEp * $ZRK" ) ; int int0 = facetRequest0 . getLevels ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test16 ( ) throws Throwable { FacetRequest facetRequest0 = FacetRequest . parseXML ( " < ? xml version = '1 . 0' encoding = 'utf - 8' ? > \n < facetrequest xmlns = \"http : / / lucene . apache . org / exposed / facet / request / 1 . 0\" order = \"count\" locale = \"startPath\" maxtags = \"20\" mincount = \"0\" offset = \"0\" prefix = \"\" hierarchical = \"false\" levels = \"5\" delimiter = \" / \" startPath = \"startPath\" > \n < query > startPath < / query > \n < groups > \n < group name = \"startPath\" order = \"count\" reverse = \"false\" maxtags = \"20\" mincount = \"0\" offset = \"0\" prefix = \"\" hierarchical = \"false\" levels = \"5\" delimiter = \" / \" startpath = \"\" > \n < fields > \n < field name = \"startPath\" / > \n < / fields > \n < / group > \n < / groups > \n < / facetrequest > \n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test18 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "startPath" ) ; facetRequest0 . setLocale ( "startPath" ) ; String string0 = facetRequest0 . toXML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test19 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "a & . 3y$1z" ) ; facetRequest0 . setStartPath ( "a & . 3y$1z" ) ; String string0 = facetRequest0 . toXML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test20 ( ) throws Throwable { FacetRequest facetRequest0 = new FacetRequest ( "hierarchical" ) ; facetRequest0 . createGroup ( "hierarchical" ) ; facetRequest0 . createGroup ( "hierarchical" ) ; String string0 = facetRequest0 . getGroupKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void toXML ( List < BaseStats > stats , Writer out ) { long [ ] times = findMaxGenerationAndModificationTimes ( stats ) ; DateFormat date = new SimpleDateFormat ( "yyyy - MM - dd'T'HH : mm : ss . SSS" ) ; PrintWriter w = new PrintWriter ( out ) ; w . append ( " < holdings date = \"" ) . append ( date . format ( new Date ( times [ 0 ] ) ) ) . append ( "\" mtime = \"" ) ; w . append ( date . format ( new Date ( times [ 1 ] ) ) ) . append ( "\" > \n" ) ; for ( BaseStats b : stats ) { w . append ( " < base name = \"" ) . append ( XMLUtil . encode ( b . getBaseName ( ) ) ) . append ( "\"" ) ; w . append ( " deleted = \"" ) . append ( Long . toString ( b . getDeletedCount ( ) ) ) . append ( "\"" ) ; w . append ( " indexable = \"" ) . append ( Long . toString ( b . getIndexableCount ( ) ) ) . append ( "\"" ) ; w . append ( " live = \"" ) . append ( Long . toString ( b . getLiveCount ( ) ) ) . append ( "\"" ) ; w . append ( " total = \"" ) . append ( Long . toString ( b . getTotalCount ( ) ) ) . append ( "\"" ) ; w . append ( " mtime = \"" ) . append ( date . format ( new Date ( b . getModificationTime ( ) ) ) ) . append ( "\"" ) ; if ( ! b . hasMeta ( ) ) { w . append ( " / > \n" ) ; } else { w . append ( " > \n" ) ; for ( Map . Entry < String , String > meta : b . meta ( ) . entrySet ( ) ) { w . append ( " < meta key = \"" ) . append ( XMLUtil . encode ( meta . getKey ( ) ) ) . append ( "\" value = \"" ) ; w . append ( XMLUtil . encode ( meta . getValue ( ) ) ) . append ( "\" / > \n" ) ; } w . append ( " < / base > \n" ) ; } } w . append ( " < / holdings > " ) ; w . flush ( ) ; }
void test0 ( ) throws Throwable { BytesRef bytesRef0 = new BytesRef ( ) ; BytesRef bytesRef1 = ConcatICUCollationAnalyzer . getOriginalString ( bytesRef0 , bytesRef0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BytesRef getOriginalString ( BytesRef concat , BytesRef reuse ) { return ConcatICUCollatedTermAttributeImpl . getOriginalString ( concat , reuse ) ; }
void test2 ( ) throws Throwable { Locale locale0 = Locale . FRENCH ; RuleBasedCollator ruleBasedCollator0 = ( RuleBasedCollator ) Collator . getInstance ( locale0 ) ; ConcatICUCollationAnalyzer concatICUCollationAnalyzer0 = new ConcatICUCollationAnalyzer ( ( Collator ) ruleBasedCollator0 ) ; RuleBasedCollator ruleBasedCollator1 = ( RuleBasedCollator ) concatICUCollationAnalyzer0 . getCollator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collator getCollator ( ) { return collator ; }
void test0 ( ) throws Throwable { RuleBasedCollator ruleBasedCollator0 = ( RuleBasedCollator ) Collator . getInstance ( ) ; ConcatICUCollatedTermAttributeImpl concatICUCollatedTermAttributeImpl0 = new ConcatICUCollatedTermAttributeImpl ( ( Collator ) ruleBasedCollator0 ) ; concatICUCollatedTermAttributeImpl0 . fillBytesRef ( ) ; BytesRef bytesRef0 = new BytesRef ( ) ; BytesRef bytesRef1 = concatICUCollatedTermAttributeImpl0 . getBytesRef ( ) ; BytesRef bytesRef2 = ConcatICUCollatedTermAttributeImpl . getOriginalString ( bytesRef1 , bytesRef0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BytesRef getOriginalString ( BytesRef concat , BytesRef reuse ) { return ConcatICUCollatedTermAttributeImpl . getOriginalString ( concat , reuse ) ; }
void test1 ( ) throws Throwable { RuleBasedCollator ruleBasedCollator0 = ( RuleBasedCollator ) Collator . getInstance ( ) ; ConcatICUCollatedTermAttributeImpl concatICUCollatedTermAttributeImpl0 = new ConcatICUCollatedTermAttributeImpl ( ( Collator ) ruleBasedCollator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int fillBytesRef ( ) { / / TODO : Use ExposedUtil instead String str = toString ( ) ; collator . getRawCollationKey ( str , key ) ; byte [ ] strBytes ; try { strBytes = str . getBytes ( "utf - 8" ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( "utf - 8 must be supported" , e ) ; } int bufferSize = strBytes . length + key . size ; if ( buffer . length < bufferSize ) { buffer = new byte [ bufferSize ] ; } System . arraycopy ( key . bytes , 0 , buffer , 0 , key . size ) ; System . arraycopy ( strBytes , 0 , buffer , key . size , strBytes . length ) ; BytesRef result = getBytesRef ( ) ; result . bytes = buffer ; result . offset = 0 ; result . length = bufferSize ; return result . hashCode ( ) ; }
void test2 ( ) throws Throwable { BytesRef bytesRef0 = new BytesRef ( ) ; BytesRef bytesRef1 = ConcatICUCollatedTermAttributeImpl . getOriginalString ( bytesRef0 , bytesRef0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BytesRef getOriginalString ( BytesRef concat , BytesRef reuse ) { return ConcatICUCollatedTermAttributeImpl . getOriginalString ( concat , reuse ) ; }
void test3 ( ) throws Throwable { RuleBasedCollator ruleBasedCollator0 = ( RuleBasedCollator ) Collator . getInstance ( ) ; ConcatICUCollatedTermAttributeImpl concatICUCollatedTermAttributeImpl0 = new ConcatICUCollatedTermAttributeImpl ( ( Collator ) ruleBasedCollator0 ) ; int int0 = concatICUCollatedTermAttributeImpl0 . fillBytesRef ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int fillBytesRef ( ) { / / TODO : Use ExposedUtil instead String str = toString ( ) ; collator . getRawCollationKey ( str , key ) ; byte [ ] strBytes ; try { strBytes = str . getBytes ( "utf - 8" ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( "utf - 8 must be supported" , e ) ; } int bufferSize = strBytes . length + key . size ; if ( buffer . length < bufferSize ) { buffer = new byte [ bufferSize ] ; } System . arraycopy ( key . bytes , 0 , buffer , 0 , key . size ) ; System . arraycopy ( strBytes , 0 , buffer , key . size , strBytes . length ) ; BytesRef result = getBytesRef ( ) ; result . bytes = buffer ; result . offset = 0 ; result . length = bufferSize ; return result . hashCode ( ) ; }
void test4 ( ) throws Throwable { ComparatorFactory comparatorFactory0 = new ComparatorFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test6 ( ) throws Throwable { NamedNaturalComparator namedNaturalComparator0 = ( NamedNaturalComparator ) ComparatorFactory . create ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamedComparator . ORDER getOrder ( ) { return order ; }
void test7 ( ) throws Throwable { NamedCollatorComparator namedCollatorComparator0 = ( NamedCollatorComparator ) ComparatorFactory . create ( "DO" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return id ; }
void test8 ( ) throws Throwable { int [ ] intArray0 = new int [ 3 ] ; intArray0 [ 1 ] = 1 ; ComparatorFactory . IndirectComparator comparatorFactory_IndirectComparator0 = new ComparatorFactory . IndirectComparator ( intArray0 ) ; int int0 = comparatorFactory_IndirectComparator0 . compare ( 0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( E o1 , E o2 ) { / / noinspection unchecked return comparator = = null ? o1 . compareTo ( o2 ) : comparator . compare ( o1 , o2 ) ; }
void test9 ( ) throws Throwable { int [ ] intArray0 = new int [ 9 ] ; ComparatorFactory . IndirectComparator comparatorFactory_IndirectComparator0 = new ComparatorFactory . IndirectComparator ( intArray0 ) ; int int0 = comparatorFactory_IndirectComparator0 . compare ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( E o1 , E o2 ) { / / noinspection unchecked return comparator = = null ? o1 . compareTo ( o2 ) : comparator . compare ( o1 , o2 ) ; }
void test11 ( ) throws Throwable { ExposedTuple [ ] exposedTupleArray0 = new ExposedTuple [ 6 ] ; ComparatorFactory . OrdinalComparator comparatorFactory_OrdinalComparator0 = ComparatorFactory . wrapBacking ( exposedTupleArray0 , ( Comparator < BytesRef > ) null ) ; int int0 = comparatorFactory_OrdinalComparator0 . compare ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( E o1 , E o2 ) { / / noinspection unchecked return comparator = = null ? o1 . compareTo ( o2 ) : comparator . compare ( o1 , o2 ) ; }
void test0 ( ) throws Throwable { Locale locale0 = Locale . FRENCH ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return id ; }
void test2 ( ) throws Throwable { Locale locale0 = Locale . JAPAN ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverse ( ) { return reverse ; }
void test5 ( ) throws Throwable { Locale locale0 = Locale . FRENCH ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return id ; }
void test6 ( ) throws Throwable { NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( ( Collator ) null , "ataicud46" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullFirst ( ) ; / * * * @param nullFirst true if null - BytesRefs should be sorted first . * / void setNullFirst ( boolean nullFirst ) ; / * * * @return true if the order is logically reversed . * / boolean isReverse ( ) ; / * * * @param reverse whether or not the logical order should be reversed . * / void setReverse ( boolean reverse ) ; }
void test7 ( ) throws Throwable { Locale locale0 = Locale . FRENCH ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullFirst ( ) ; / * * * @param nullFirst true if null - BytesRefs should be sorted first . * / void setNullFirst ( boolean nullFirst ) ; / * * * @return true if the order is logically reversed . * / boolean isReverse ( ) ; / * * * @param reverse whether or not the logical order should be reversed . * / void setReverse ( boolean reverse ) ; }
void test8 ( ) throws Throwable { Locale locale0 = Locale . JAPAN ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return id ; }
void test9 ( ) throws Throwable { BytesRef bytesRef0 = new BytesRef ( ( CharSequence ) "aa / icudt46b" ) ; Locale locale0 = Locale . CHINA ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverse ( ) { return reverse ; }
void test11 ( ) throws Throwable { NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( ( Collator ) null , " > " ) ; BytesRef bytesRef0 = new BytesRef ( ( CharSequence ) " > " ) ; int int0 = namedCollatorComparator0 . compare ( bytesRef0 , ( BytesRef ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverse ( ) { return reverse ; }
void test12 ( ) throws Throwable { NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( ( Collator ) null , "ataicud46" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullFirst ( ) ; / * * * @param nullFirst true if null - BytesRefs should be sorted first . * / void setNullFirst ( boolean nullFirst ) ; / * * * @return true if the order is logically reversed . * / boolean isReverse ( ) ; / * * * @param reverse whether or not the logical order should be reversed . * / void setReverse ( boolean reverse ) ; }
void test14 ( ) throws Throwable { Locale locale0 = Locale . FRENCH ; NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator ( locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverse ( ) { return reverse ; }
void test0 ( ) throws Throwable { NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; namedNaturalComparator0 . getOrder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverse ( ) { return reverse ; }
void test1 ( ) throws Throwable { NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullFirst ( ) ; / * * * @param nullFirst true if null - BytesRefs should be sorted first . * / void setNullFirst ( boolean nullFirst ) ; / * * * @return true if the order is logically reversed . * / boolean isReverse ( ) ; / * * * @param reverse whether or not the logical order should be reversed . * / void setReverse ( boolean reverse ) ; }
void test2 ( ) throws Throwable { NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; String string0 = namedNaturalComparator0 . getID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverse ( ) { return reverse ; }
void test3 ( ) throws Throwable { NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; boolean boolean0 = namedNaturalComparator0 . isNullFirst ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverse ( ) { return reverse ; }
void test4 ( ) throws Throwable { NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; boolean boolean0 = namedNaturalComparator0 . isReverse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullFirst ( ) ; / * * * @param nullFirst true if null - BytesRefs should be sorted first . * / void setNullFirst ( boolean nullFirst ) ; / * * * @return true if the order is logically reversed . * / boolean isReverse ( ) ; / * * * @param reverse whether or not the logical order should be reversed . * / void setReverse ( boolean reverse ) ; }
void test5 ( ) throws Throwable { NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; BytesRef bytesRef0 = new BytesRef ( ) ; int int0 = namedNaturalComparator0 . compare ( bytesRef0 , ( BytesRef ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverse ( ) { return reverse ; }
void test6 ( ) throws Throwable { NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; BytesRef bytesRef0 = new BytesRef ( ) ; int int0 = namedNaturalComparator0 . compare ( ( BytesRef ) null , bytesRef0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverse ( ) { return reverse ; }
void test7 ( ) throws Throwable { NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; int int0 = namedNaturalComparator0 . compare ( ( BytesRef ) null , ( BytesRef ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverse ( ) { return reverse ; }
void test8 ( ) throws Throwable { NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; BytesRef bytesRef0 = new BytesRef ( ) ; int int0 = namedNaturalComparator0 . compare ( bytesRef0 , bytesRef0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverse ( ) { return reverse ; }
void test9 ( ) throws Throwable { NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullFirst ( ) ; / * * * @param nullFirst true if null - BytesRefs should be sorted first . * / void setNullFirst ( boolean nullFirst ) ; / * * * @return true if the order is logically reversed . * / boolean isReverse ( ) ; / * * * @param reverse whether or not the logical order should be reversed . * / void setReverse ( boolean reverse ) ; }
void test10 ( ) throws Throwable { NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; namedNaturalComparator0 . setReverse ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullFirst ( ) ; / * * * @param nullFirst true if null - BytesRefs should be sorted first . * / void setNullFirst ( boolean nullFirst ) ; / * * * @return true if the order is logically reversed . * / boolean isReverse ( ) ; / * * * @param reverse whether or not the logical order should be reversed . * / void setReverse ( boolean reverse ) ; }
void test11 ( ) throws Throwable { NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullFirst ( ) ; / * * * @param nullFirst true if null - BytesRefs should be sorted first . * / void setNullFirst ( boolean nullFirst ) ; / * * * @return true if the order is logically reversed . * / boolean isReverse ( ) ; / * * * @param reverse whether or not the logical order should be reversed . * / void setReverse ( boolean reverse ) ; }
void test0 ( ) throws Throwable { NamedOrderDefaultComparator namedOrderDefaultComparator0 = new NamedOrderDefaultComparator ( ) ; boolean boolean0 = namedOrderDefaultComparator0 . isNullFirst ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverse ( ) { return reverse ; }
void test1 ( ) throws Throwable { NamedOrderDefaultComparator namedOrderDefaultComparator0 = new NamedOrderDefaultComparator ( ) ; boolean boolean0 = namedOrderDefaultComparator0 . isReverse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullFirst ( ) ; / * * * @param nullFirst true if null - BytesRefs should be sorted first . * / void setNullFirst ( boolean nullFirst ) ; / * * * @return true if the order is logically reversed . * / boolean isReverse ( ) ; / * * * @param reverse whether or not the logical order should be reversed . * / void setReverse ( boolean reverse ) ; }
void test2 ( ) throws Throwable { NamedOrderDefaultComparator namedOrderDefaultComparator0 = new NamedOrderDefaultComparator ( ) ; namedOrderDefaultComparator0 . setReverse ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverse ( ) { return reverse ; }
void test3 ( ) throws Throwable { NamedOrderDefaultComparator namedOrderDefaultComparator0 = new NamedOrderDefaultComparator ( ) ; BytesRef bytesRef0 = new BytesRef ( ) ; namedOrderDefaultComparator0 . compare ( bytesRef0 , bytesRef0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullFirst ( ) ; / * * * @param nullFirst true if null - BytesRefs should be sorted first . * / void setNullFirst ( boolean nullFirst ) ; / * * * @return true if the order is logically reversed . * / boolean isReverse ( ) ; / * * * @param reverse whether or not the logical order should be reversed . * / void setReverse ( boolean reverse ) ; }
void test4 ( ) throws Throwable { NamedOrderDefaultComparator namedOrderDefaultComparator0 = new NamedOrderDefaultComparator ( ) ; namedOrderDefaultComparator0 . getOrder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullFirst ( ) ; / * * * @param nullFirst true if null - BytesRefs should be sorted first . * / void setNullFirst ( boolean nullFirst ) ; / * * * @return true if the order is logically reversed . * / boolean isReverse ( ) ; / * * * @param reverse whether or not the logical order should be reversed . * / void setReverse ( boolean reverse ) ; }
void test5 ( ) throws Throwable { NamedOrderDefaultComparator namedOrderDefaultComparator0 = new NamedOrderDefaultComparator ( ) ; namedOrderDefaultComparator0 . setNullFirst ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullFirst ( ) ; / * * * @param nullFirst true if null - BytesRefs should be sorted first . * / void setNullFirst ( boolean nullFirst ) ; / * * * @return true if the order is logically reversed . * / boolean isReverse ( ) ; / * * * @param reverse whether or not the logical order should be reversed . * / void setReverse ( boolean reverse ) ; }
void test6 ( ) throws Throwable { NamedOrderDefaultComparator namedOrderDefaultComparator0 = new NamedOrderDefaultComparator ( ) ; String string0 = namedOrderDefaultComparator0 . getID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNullFirst ( ) ; / * * * @param nullFirst true if null - BytesRefs should be sorted first . * / void setNullFirst ( boolean nullFirst ) ; / * * * @return true if the order is logically reversed . * / boolean isReverse ( ) ; / * * * @param reverse whether or not the logical order should be reversed . * / void setReverse ( boolean reverse ) ; }
void test0 ( ) throws Throwable { IndexUtil indexUtil0 = new IndexUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { ExpandablePackedPair expandablePackedPair0 = new ExpandablePackedPair ( 0 , 0 , 2L , 0 ) ; int int0 = expandablePackedPair0 . capacity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test1 ( ) throws Throwable { ExpandablePackedPair expandablePackedPair0 = new ExpandablePackedPair ( ( - 1220 ) , ( - 1220 ) , 63L ) ; String string0 = expandablePackedPair0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test2 ( ) throws Throwable { ExpandablePackedPair expandablePackedPair0 = new ExpandablePackedPair ( ( - 1220 ) , ( - 1220 ) , 63L ) ; int int0 = expandablePackedPair0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test3 ( ) throws Throwable { ExpandablePackedPair expandablePackedPair0 = new ExpandablePackedPair ( 0 , 1363 , 0 ) ; expandablePackedPair0 . add ( 1363 , 1363 ) ; int [ ] intArray0 = new int [ 7 ] ; expandablePackedPair0 . countUniquePrimaries ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test4 ( ) throws Throwable { ExpandablePackedPair expandablePackedPair0 = new ExpandablePackedPair ( ( - 1220 ) , ( - 1220 ) , 63L ) ; int [ ] intArray0 = new int [ 9 ] ; expandablePackedPair0 . assignSecondaries ( intArray0 , ( PackedInts . Mutable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test6 ( ) throws Throwable { ExpandablePackedPair expandablePackedPair0 = new ExpandablePackedPair ( 39 , 62 , 39 ) ; expandablePackedPair0 . add ( 0 , 60 ) ; expandablePackedPair0 . setSecondaryOffset ( ( long ) 39 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return chunks . size ( ) * chunkLength ; }
void test0 ( ) throws Throwable { String string0 = ChunkedLongArray . memStats ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String memStats ( ) { Runtime r = Runtime . getRuntime ( ) ; return String . format ( locale , "Allocated memory : %s , Allocated unused memory : %s , Heap memory used : %s , Max memory : %s" , reduce ( r . totalMemory ( ) ) , reduce ( r . freeMemory ( ) ) , reduce ( ManagementFactory . getMemoryMXBean ( ) . getHeapMemoryUsage ( ) . getUsed ( ) ) , reduce ( r . maxMemory ( ) ) ) ; }
void test1 ( ) throws Throwable { ChunkedLongArray chunkedLongArray0 = new ChunkedLongArray ( 0 ) ; chunkedLongArray0 . add ( ( - 15L ) ) ; chunkedLongArray0 . add ( ( long ) 0 ) ; chunkedLongArray0 . sort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String memStats ( ) { Runtime r = Runtime . getRuntime ( ) ; return String . format ( locale , "Allocated memory : %s , Allocated unused memory : %s , Heap memory used : %s , Max memory : %s" , reduce ( r . totalMemory ( ) ) , reduce ( r . freeMemory ( ) ) , reduce ( ManagementFactory . getMemoryMXBean ( ) . getHeapMemoryUsage ( ) . getUsed ( ) ) , reduce ( r . maxMemory ( ) ) ) ; }
void test2 ( ) throws Throwable { ChunkedLongArray chunkedLongArray0 = new ChunkedLongArray ( ) ; int int0 = chunkedLongArray0 . capacity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String memStats ( ) { Runtime r = Runtime . getRuntime ( ) ; return String . format ( locale , "Allocated memory : %s , Allocated unused memory : %s , Heap memory used : %s , Max memory : %s" , reduce ( r . totalMemory ( ) ) , reduce ( r . freeMemory ( ) ) , reduce ( ManagementFactory . getMemoryMXBean ( ) . getHeapMemoryUsage ( ) . getUsed ( ) ) , reduce ( r . maxMemory ( ) ) ) ; }
void test3 ( ) throws Throwable { ChunkedLongArray chunkedLongArray0 = new ChunkedLongArray ( 0 ) ; int int0 = chunkedLongArray0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String memStats ( ) { Runtime r = Runtime . getRuntime ( ) ; return String . format ( locale , "Allocated memory : %s , Allocated unused memory : %s , Heap memory used : %s , Max memory : %s" , reduce ( r . totalMemory ( ) ) , reduce ( r . freeMemory ( ) ) , reduce ( ManagementFactory . getMemoryMXBean ( ) . getHeapMemoryUsage ( ) . getUsed ( ) ) , reduce ( r . maxMemory ( ) ) ) ; }
void test4 ( ) throws Throwable { ChunkedLongArray chunkedLongArray0 = new ChunkedLongArray ( 0 ) ; String string0 = chunkedLongArray0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String memStats ( ) { Runtime r = Runtime . getRuntime ( ) ; return String . format ( locale , "Allocated memory : %s , Allocated unused memory : %s , Heap memory used : %s , Max memory : %s" , reduce ( r . totalMemory ( ) ) , reduce ( r . freeMemory ( ) ) , reduce ( ManagementFactory . getMemoryMXBean ( ) . getHeapMemoryUsage ( ) . getUsed ( ) ) , reduce ( r . maxMemory ( ) ) ) ; }
void test6 ( ) throws Throwable { ChunkedLongArray chunkedLongArray0 = new ChunkedLongArray ( ) ; chunkedLongArray0 . set ( chunkedLongArray0 , 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String memStats ( ) { Runtime r = Runtime . getRuntime ( ) ; return String . format ( locale , "Allocated memory : %s , Allocated unused memory : %s , Heap memory used : %s , Max memory : %s" , reduce ( r . totalMemory ( ) ) , reduce ( r . freeMemory ( ) ) , reduce ( ManagementFactory . getMemoryMXBean ( ) . getHeapMemoryUsage ( ) . getUsed ( ) ) , reduce ( r . maxMemory ( ) ) ) ; }
void test8 ( ) throws Throwable { ChunkedLongArray chunkedLongArray0 = new ChunkedLongArray ( ( - 652 ) ) ; long [ ] longArray0 = new long [ 12 ] ; chunkedLongArray0 . set ( longArray0 , ( - 652 ) , ( - 652 ) , ( - 652 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test9 ( ) throws Throwable { ChunkedLongArray chunkedLongArray0 = new ChunkedLongArray ( 0 ) ; long [ ] longArray0 = new long [ 17 ] ; chunkedLongArray0 . set ( longArray0 , 0 , 7 , 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String memStats ( ) { Runtime r = Runtime . getRuntime ( ) ; return String . format ( locale , "Allocated memory : %s , Allocated unused memory : %s , Heap memory used : %s , Max memory : %s" , reduce ( r . totalMemory ( ) ) , reduce ( r . freeMemory ( ) ) , reduce ( ManagementFactory . getMemoryMXBean ( ) . getHeapMemoryUsage ( ) . getUsed ( ) ) , reduce ( r . maxMemory ( ) ) ) ; }
void test10 ( ) throws Throwable { ChunkedLongArray chunkedLongArray0 = new ChunkedLongArray ( 0 ) ; chunkedLongArray0 . add ( ( long ) 0 ) ; chunkedLongArray0 . add ( ( - 15L ) ) ; chunkedLongArray0 . sort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test0 ( ) throws Throwable { DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList ( ( - 1 ) ) ; int int0 = doubleIntArrayList0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test2 ( ) throws Throwable { DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList ( 0 ) ; String string0 = doubleIntArrayList0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test3 ( ) throws Throwable { DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList ( ( - 1 ) ) ; doubleIntArrayList0 . sortByPrimaries ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test4 ( ) throws Throwable { DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList ( 0 ) ; doubleIntArrayList0 . set ( 295 , 737 , 295 ) ; PackedInts . Mutable packedInts_Mutable0 = doubleIntArrayList0 . getPacked ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test5 ( ) throws Throwable { DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList ( 0 ) ; int int0 = doubleIntArrayList0 . capacity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int capacity ( ) { return chunks . size ( ) * chunkLength ; }
void test6 ( ) throws Throwable { DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList ( 0 ) ; doubleIntArrayList0 . add ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test9 ( ) throws Throwable { DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList ( ( - 1 ) ) ; PackedInts . Mutable packedInts_Mutable0 = doubleIntArrayList0 . getPacked ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test10 ( ) throws Throwable { DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList ( 16 ) ; doubleIntArrayList0 . set ( 16 , 16 , 1 ) ; PackedInts . Mutable packedInts_Mutable0 = doubleIntArrayList0 . getPrimariesPacked ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBitsPerValue ( ) { return 0 ; }
void test11 ( ) throws Throwable { DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList ( 674 ) ; PackedInts . Mutable packedInts_Mutable0 = doubleIntArrayList0 . getPrimariesPacked ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBitsPerValue ( ) { return 0 ; }
void test12 ( ) throws Throwable { DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList ( 674 ) ; doubleIntArrayList0 . set ( 674 , ( - 927 ) , 674 ) ; PackedInts . Mutable packedInts_Mutable0 = doubleIntArrayList0 . getSecondariesPacked ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long ramBytesUsed ( ) { return 0 ; }
void test13 ( ) throws Throwable { DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList ( 674 ) ; PackedInts . Mutable packedInts_Mutable0 = doubleIntArrayList0 . getSecondariesPacked ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test14 ( ) throws Throwable { DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList ( 0 ) ; doubleIntArrayList0 . add ( 0 , 0 ) ; doubleIntArrayList0 . getPrimaries ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test15 ( ) throws Throwable { DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList ( 674 ) ; doubleIntArrayList0 . set ( 674 , ( - 927 ) , 674 ) ; doubleIntArrayList0 . getSecondaries ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test0 ( ) throws Throwable { IdentityReader identityReader0 = new IdentityReader ( ( - 909 ) ) ; boolean boolean0 = identityReader0 . hasArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test1 ( ) throws Throwable { IdentityReader identityReader0 = new IdentityReader ( ( - 909 ) ) ; long long0 = identityReader0 . get ( 555 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test3 ( ) throws Throwable { IdentityReader identityReader0 = new IdentityReader ( ( - 909 ) ) ; int int0 = identityReader0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test4 ( ) throws Throwable { IdentityReader identityReader0 = new IdentityReader ( ( - 453 ) ) ; int int0 = identityReader0 . getBitsPerValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test5 ( ) throws Throwable { IdentityReader identityReader0 = new IdentityReader ( ( - 453 ) ) ; long long0 = identityReader0 . ramBytesUsed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test6 ( ) throws Throwable { IdentityReader identityReader0 = new IdentityReader ( 1 ) ; long [ ] longArray0 = new long [ 9 ] ; int int0 = identityReader0 . get ( 0 , longArray0 , 0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test1 ( ) throws Throwable { PackedPair packedPair0 = new PackedPair ( ( - 1971 ) , ( - 1971 ) , ( - 1726 ) , ( - 2006L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long ramBytesUsed ( ) { return 0 ; }
void test2 ( ) throws Throwable { PackedPair packedPair0 = new PackedPair ( ( - 1 ) , 1 , 0 , ( - 1 ) ) ; PackedInts . Mutable packedInts_Mutable0 = packedPair0 . getPrimaries ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
void test6 ( ) throws Throwable { PackedPair packedPair0 = new PackedPair ( ( - 1081 ) , ( - 1081 ) , ( - 1081 ) , ( - 1081 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void assignSecondaries ( int [ ] offsets , PackedInts . Mutable destination ) { for ( DoublePackedPair chunk : chunks ) { chunk . assignSecondaries ( offsets , destination ) ; } }
void test0 ( ) throws Throwable { int [ ] intArray0 = new int [ 5 ] ; PackedIntWrapper packedIntWrapper0 = new PackedIntWrapper ( intArray0 , 1385 ) ; long long0 = packedIntWrapper0 . ramBytesUsed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long ramBytesUsed ( ) { return 0 ; }
void test2 ( ) throws Throwable { int [ ] intArray0 = new int [ 10 ] ; PackedIntWrapper packedIntWrapper0 = new PackedIntWrapper ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long ramBytesUsed ( ) { return 0 ; }
void test0 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( ) ; int int0 = growingMutable0 . getIndexMin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBitsPerValue ( ) { return 0 ; }
void test1 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( ) ; boolean boolean0 = growingMutable0 . hasArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexMax ( ) { return indexMax ; }
void test2 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( ) ; long long0 = growingMutable0 . getGrowTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexMin ( ) { return indexMin ; }
void test3 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( ) ; growingMutable0 . fill ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getGrowTime ( ) { return growTime ; }
void test4 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( ) ; growingMutable0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long ramBytesUsed ( ) { return 0 ; }
void test5 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( ( - 1230 ) , ( - 1230 ) , ( long ) ( - 1230 ) , ( long ) ( - 1230 ) , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long ramBytesUsed ( ) { return 0 ; }
void test6 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( ) ; RAMOutputStream rAMOutputStream0 = new RAMOutputStream ( ) ; growingMutable0 . save ( ( DataOutput ) rAMOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexMax ( ) { return indexMax ; }
void test7 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( ) ; long long0 = growingMutable0 . getValueMin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBitsPerValue ( ) { return 0 ; }
void test8 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( ( - 1230 ) , ( - 1230 ) , ( long ) ( - 1230 ) , ( long ) ( - 1230 ) , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getGrowTime ( ) { return growTime ; }
void test10 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( ) ; long long0 = growingMutable0 . getValueMax ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBitsPerValue ( ) { return 0 ; }
void test11 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( ) ; int int0 = growingMutable0 . getIndexMax ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexMin ( ) { return indexMin ; }
void test12 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( ) ; long long0 = growingMutable0 . ramBytesUsed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getValueMax ( ) { return valueMax ; }
void test13 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( 0 , 0 , ( long ) 0 , ( long ) 0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBitsPerValue ( ) { return 0 ; }
void test14 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( ) ; int int0 = growingMutable0 . getBitsPerValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getValueMin ( ) { return valueMin ; }
void test17 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( 0 , 0 , ( long ) 0 , ( long ) 0 , true ) ; growingMutable0 . set ( ( - 1699 ) , 9223372036854775807L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getGrowTime ( ) { return growTime ; }
void test18 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( 0 , 1741 , ( - 171L ) , 1333L , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getGrowTime ( ) { return growTime ; }
void test19 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( ) ; growingMutable0 . set ( 0 , ( - 1446L ) ) ; String string0 = growingMutable0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getValueMax ( ) { return valueMax ; }
void test20 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( ) ; growingMutable0 . set ( 1664 , 1664 ) ; String string0 = growingMutable0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexMin ( ) { return indexMin ; }
void test21 ( ) throws Throwable { GrowingMutable growingMutable0 = new GrowingMutable ( ) ; growingMutable0 . set ( 127 , 0L ) ; growingMutable0 . set ( ( - 2013 ) , ( - 1917L ) ) ; String string0 = growingMutable0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getValueMin ( ) { return valueMin ; }
void test2 ( ) throws Throwable { DoublePackedPair doublePackedPair0 = new DoublePackedPair ( ( - 617 ) , 435 , ( - 617 ) , ( - 617 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return jobName ; }
void test0 ( ) throws Throwable { GrowableWriter growableWriter0 = new GrowableWriter ( 1744 , 0 , 1744 ) ; GrowableWriter growableWriter1 = growableWriter0 . resize ( 1744 ) ; GrowableWriter growableWriter2 = ( GrowableWriter ) MonotonicReaderFactory . reduce ( ( PackedInts . Reader ) growableWriter1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long ramBytesUsed ( ) { return 0 ; }
void test1 ( ) throws Throwable { MonotonicReaderFactory monotonicReaderFactory0 = new MonotonicReaderFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { GrowableWriter growableWriter0 = new GrowableWriter ( 1744 , 0 , 1744 ) ; GrowableWriter growableWriter1 = ( GrowableWriter ) MonotonicReaderFactory . reduce ( ( PackedInts . Reader ) growableWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return responses . size ( ) ; }
