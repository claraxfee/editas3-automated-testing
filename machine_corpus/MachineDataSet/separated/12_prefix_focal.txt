void test0 ( ) throws Throwable { Proxy proxy0 = Proxy . NO_PROXY ; Socket socket0 = new Socket ( proxy0 ) ; SecServer secServer0 = new SecServer ( socket0 ) ; InputEvent inputEvent0 = new InputEvent ( ( ConnectionEndpoint ) secServer0 , ( Object ) "Socket [ unconnected ] " ) ; String string0 = ( String ) inputEvent0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getData ( ) { return data ; }
void test1 ( ) throws Throwable { Proxy proxy0 = Proxy . NO_PROXY ; Socket socket0 = new Socket ( proxy0 ) ; SecServer secServer0 = new SecServer ( socket0 ) ; InputEvent inputEvent0 = new InputEvent ( ( ConnectionEndpoint ) secServer0 , ( Object ) "Socket [ unconnected ] " ) ; SecServer secServer1 = ( SecServer ) inputEvent0 . getSource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test0 ( ) throws Throwable { ChallReq challReq0 = new ChallReq ( ( Object ) "" , 405 , "" , "" ) ; String string0 = ( String ) challReq0 . getCh ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMod ( ) { return mod ; }
void test1 ( ) throws Throwable { ChallReq challReq0 = new ChallReq ( ( Object ) "" , 405 , "" , "" ) ; String string0 = challReq0 . getResponseTo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMod ( ) { return mod ; }
void test2 ( ) throws Throwable { ChallReq challReq0 = new ChallReq ( ( Object ) "" , 405 , "" , "" ) ; int int0 = challReq0 . getMod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMod ( ) { return mod ; }
void test3 ( ) throws Throwable { ChallReq challReq0 = new ChallReq ( ( Object ) "" , 405 , "" , "" ) ; String string0 = challReq0 . getTo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMod ( ) { return mod ; }
void test0 ( ) throws Throwable { UserEvent userEvent0 = new UserEvent ( true , "" ) ; boolean boolean0 = userEvent0 . isDisconnect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDisconnect ( ) { return disconnect ; }
void test1 ( ) throws Throwable { UserEvent userEvent0 = new UserEvent ( false , ( String ) null ) ; userEvent0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDisconnect ( ) { return disconnect ; }
void test0 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( ) ; dOMDocument0 . addElement ( "mzQWKLL & 3CF' - cJzCLW" , "mzQWKLL & 3CF' - cJzCLW" ) ; Hero hero0 = new Hero ( ( Document ) dOMDocument0 ) ; Challenge challenge0 = new Challenge ( "FF" , hero0 , 0 , true , "FF" ) ; boolean boolean0 = challenge0 . isSilent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String roll ( ) { if ( t ! = null ) return rollTalent ( ) ; if ( attrib ! = null ) return rollAttr ( ) ; if ( w ! = null ) { return rollFight ( ) ; } return " missing Talent , Spell , . . . " ; }
void test1 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( ) ; dOMDocument0 . addElement ( "mzQWKLL & 3CF' - cJzCLW" , "mzQWKLL & 3CF' - cJzCLW" ) ; Hero hero0 = new Hero ( ( Document ) dOMDocument0 ) ; Challenge challenge0 = new Challenge ( "FF" , hero0 , 0 , true , "FF" ) ; challenge0 . getTo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String roll ( ) { if ( t ! = null ) return rollTalent ( ) ; if ( attrib ! = null ) return rollAttr ( ) ; if ( w ! = null ) { return rollFight ( ) ; } return " missing Talent , Spell , . . . " ; }
void test2 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( ) ; dOMDocument0 . addElement ( "mzQWKLL & 3CF' - cJzCLW" , "mzQWKLL & 3CF' - cJzCLW" ) ; Hero hero0 = new Hero ( ( Document ) dOMDocument0 ) ; Challenge challenge0 = new Challenge ( "FF" , hero0 , 0 , true , "FF" ) ; String string0 = challenge0 . roll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String roll ( ) { if ( t ! = null ) return rollTalent ( ) ; if ( attrib ! = null ) return rollAttr ( ) ; if ( w ! = null ) { return rollFight ( ) ; } return " missing Talent , Spell , . . . " ; }
void test3 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( ) ; dOMDocument0 . addElement ( "mzQWKLL & 3CF' - cJzCLW" , "mzQWKLL & 3CF' - cJzCLW" ) ; Hero hero0 = new Hero ( ( Document ) dOMDocument0 ) ; Challenge challenge0 = new Challenge ( "mzQWKLL & 3CF' - cJzCLW" , 0 , hero0 , true , "mzQWKLL & 3CF' - cJzCLW" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSilent ( ) { return silent ; }
void test6 ( ) throws Throwable { DOMElement dOMElement0 = new DOMElement ( "" ) ; DOMDocument dOMDocument0 = new DOMDocument ( dOMElement0 ) ; Hero hero0 = new Hero ( ( Document ) dOMDocument0 ) ; Challenge challenge0 = new Challenge ( "" , hero0 , ( - 758 ) , false , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String roll ( ) { if ( t ! = null ) return rollTalent ( ) ; if ( attrib ! = null ) return rollAttr ( ) ; if ( w ! = null ) { return rollFight ( ) ; } return " missing Talent , Spell , . . . " ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; KeyExc keyExc0 = new KeyExc ( byteArray0 ) ; byte [ ] byteArray1 = keyExc0 . getKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getKey ( ) { return b ; }
void test0 ( ) throws Throwable { FightValue fightValue0 = new FightValue ( "" , 0 , 248 ) ; String string0 = fightValue0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test1 ( ) throws Throwable { FightValue fightValue0 = new FightValue ( "" , 0 , 248 ) ; String string0 = fightValue0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test2 ( ) throws Throwable { FightValue fightValue0 = new FightValue ( "" , 0 , 248 ) ; int int0 = fightValue0 . getAttack ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test3 ( ) throws Throwable { FightValue fightValue0 = new FightValue ( "" , 0 , 248 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAttack ( ) { return attack ; }
void test4 ( ) throws Throwable { FightValue fightValue0 = new FightValue ( " = c5QhYCWoj48bapUN" , 0 , 1392 ) ; int int0 = fightValue0 . getDefense ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test5 ( ) throws Throwable { FightValue fightValue0 = new FightValue ( " - . = Wk0i$" , ( - 1288 ) , ( - 1 ) ) ; Vector < Weapon > vector0 = fightValue0 . getWeapons ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test6 ( ) throws Throwable { FightValue fightValue0 = new FightValue ( "" , 0 , 248 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test0 ( ) throws Throwable { Talent talent0 = new Talent ( "1H'eITMY~u3'WH~" , 359 , "1H'eITMY~u3'WH~" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValue ( ) { return value ; }
void test1 ( ) throws Throwable { Talent talent0 = new Talent ( "1H'eITMY~u3'WH~" , 359 , "1H'eITMY~u3'WH~" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test2 ( ) throws Throwable { Talent talent0 = new Talent ( "1H'eITMY~u3'WH~" , 359 , "1H'eITMY~u3'WH~" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test3 ( ) throws Throwable { Talent talent0 = new Talent ( "1H'eITMY~u3'WH~" , 359 , "1H'eITMY~u3'WH~" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test0 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "" , "" , 0 ) ; String string0 = attribute0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValue ( ) { return value ; }
void test1 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "yP * ^ . x" , "yP * ^ . x" , 287 ) ; String string0 = attribute0 . getShortcut ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test2 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "yP * ^ . x" , "yP * ^ . x" , 287 ) ; int int0 = attribute0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValue ( ) { return value ; }
void test3 ( ) throws Throwable { Attribute attribute0 = new Attribute ( "yP * ^ . x" , "yP * ^ . x" , 287 ) ; String string0 = attribute0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test0 ( ) throws Throwable { Special special0 = Special . AUSWEICHEN_I ; String string0 = special0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { Special special0 = Special . AUSWEICHEN_I ; int int0 = special0 . getBaseMod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBaseMod ( ) { return baseMod ; }
void test2 ( ) throws Throwable { Special special0 = Special . AUSWEICHEN_I ; String string0 = special0 . getMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMode ( ) { return mode ; }
void test3 ( ) throws Throwable { Special special0 = new Special ( "" , "" , ( - 3 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBaseMod ( ) { return baseMod ; }
void test0 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; SecServer secServer0 = new SecServer ( socket0 ) ; secServer0 . getClientPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; SecServer secServer0 = new SecServer ( socket0 ) ; Handler handler0 = new Handler ( ) ; secServer0 . removeInputListener ( ( InputListener ) handler0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test2 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; SecServer secServer0 = new SecServer ( socket0 ) ; boolean boolean0 = secServer0 . isConnected ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test3 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; SecServer secServer0 = new SecServer ( socket0 ) ; Handler handler0 = new Handler ( ) ; secServer0 . addInputListener ( ( InputListener ) handler0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; }
void test5 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; SecServer secServer0 = new SecServer ( socket0 ) ; secServer0 . run ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { MultiHeroTreeModel multiHeroTreeModel0 = new MultiHeroTreeModel ( "5 [ = tO ; PP4 - xOLsV = " ) ; String string0 = ( String ) multiHeroTreeModel0 . getRoot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getRoot ( ) { return root ; }
void test5 ( ) throws Throwable { MultiHeroTreeModel multiHeroTreeModel0 = new MultiHeroTreeModel ( "Sklaventod" ) ; Namespace namespace0 = Namespace . get ( "Sklaventod" ) ; DOMElement dOMElement0 = new DOMElement ( "Sklaventod" , namespace0 ) ; DefaultDocument defaultDocument0 = new DefaultDocument ( ( Element ) dOMElement0 ) ; Hero hero0 = new Hero ( ( Document ) defaultDocument0 ) ; ValueHolder valueHolder0 = new ValueHolder ( "Sklaventod" , hero0 ) ; Object object0 = multiHeroTreeModel0 . getChild ( ( Object ) valueHolder0 . parent , 109 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getChild ( Object parent , int index ) { / / differ the parent / / only the root element is of type string if ( parent . getClass ( ) . equals ( String . class ) ) { String p = parent . toString ( ) ; if ( p . equals ( root ) ) { return heros . elementAt ( index ) ; } } / / heros have 3 childs attributes , talents and weapons if ( parent . getClass ( ) . equals ( Hero . class ) ) { Hero h = ( Hero ) parent ; switch ( index ) { case 0 : return new ValueHolder ( "Attributes" , h ) ; case 1 : return new ValueHolder ( "Talents" , h ) ; case 2 : return new ValueHolder ( "Weapons" , h ) ; default : return null ; } } / / value holder holds the value for attributes , talents and weapons if ( parent . getClass ( ) . equals ( ValueHolder . class ) ) { ValueHolder vh = ( ValueHolder ) parent ; if ( vh . name . equals ( "Attributes" ) ) { return vh . parent . getAttributes ( ) . elementAt ( index ) ; } if ( vh . name . equals ( "Talents" ) ) { return vh . parent . getTalents ( ) . elementAt ( index ) ; } if ( vh . name . equals ( "Weapons" ) ) { return vh . parent . getFightvalues ( ) . elementAt ( index ) ; } } / / fight values have a set of weapons if ( parent . getClass ( ) . equals ( FightValue . class ) ) { return ( ( FightValue ) parent ) . getWeapons ( ) . elementAt ( index ) ; } return null ; }
void test7 ( ) throws Throwable { MultiHeroTreeModel multiHeroTreeModel0 = new MultiHeroTreeModel ( "Sklaventod" ) ; Object object0 = multiHeroTreeModel0 . getChild ( ( Object ) "Dialog" , 109 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getChild ( Object parent , int index ) { / / differ the parent / / only the root element is of type string if ( parent . getClass ( ) . equals ( String . class ) ) { String p = parent . toString ( ) ; if ( p . equals ( root ) ) { return heros . elementAt ( index ) ; } } / / heros have 3 childs attributes , talents and weapons if ( parent . getClass ( ) . equals ( Hero . class ) ) { Hero h = ( Hero ) parent ; switch ( index ) { case 0 : return new ValueHolder ( "Attributes" , h ) ; case 1 : return new ValueHolder ( "Talents" , h ) ; case 2 : return new ValueHolder ( "Weapons" , h ) ; default : return null ; } } / / value holder holds the value for attributes , talents and weapons if ( parent . getClass ( ) . equals ( ValueHolder . class ) ) { ValueHolder vh = ( ValueHolder ) parent ; if ( vh . name . equals ( "Attributes" ) ) { return vh . parent . getAttributes ( ) . elementAt ( index ) ; } if ( vh . name . equals ( "Talents" ) ) { return vh . parent . getTalents ( ) . elementAt ( index ) ; } if ( vh . name . equals ( "Weapons" ) ) { return vh . parent . getFightvalues ( ) . elementAt ( index ) ; } } / / fight values have a set of weapons if ( parent . getClass ( ) . equals ( FightValue . class ) ) { return ( ( FightValue ) parent ) . getWeapons ( ) . elementAt ( index ) ; } return null ; }
void test8 ( ) throws Throwable { MultiHeroTreeModel multiHeroTreeModel0 = new MultiHeroTreeModel ( "Sklaventod" ) ; JTree jTree0 = new JTree ( multiHeroTreeModel0 . heros ) ; int int0 = multiHeroTreeModel0 . getChildCount ( ( Object ) jTree0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( Object parent ) { if ( parent . getClass ( ) . equals ( String . class ) ) { String p = parent . toString ( ) ; if ( p . equals ( root ) ) { return heros . size ( ) ; } } if ( parent . getClass ( ) . equals ( Hero . class ) ) { return 3 ; } if ( parent . getClass ( ) . equals ( ValueHolder . class ) ) { ValueHolder vh = ( ValueHolder ) parent ; String p = parent . toString ( ) ; if ( p . equals ( "Attributes" ) ) { return vh . parent . getAttributes ( ) . size ( ) ; } if ( p . equals ( "Talents" ) ) { return vh . parent . getTalents ( ) . size ( ) ; } if ( p . equals ( "Weapons" ) ) { return vh . parent . getFightvalues ( ) . size ( ) ; } } if ( parent . getClass ( ) . equals ( FightValue . class ) ) { return ( ( FightValue ) parent ) . getWeapons ( ) . size ( ) ; } return 0 ; }
void test9 ( ) throws Throwable { MultiHeroTreeModel multiHeroTreeModel0 = new MultiHeroTreeModel ( "5 [ = tO ; PP4 - xOLsV = " ) ; int int0 = multiHeroTreeModel0 . getChildCount ( ( Object ) "5 [ = tO ; PP4 - xOLsV = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( Object parent ) { if ( parent . getClass ( ) . equals ( String . class ) ) { String p = parent . toString ( ) ; if ( p . equals ( root ) ) { return heros . size ( ) ; } } if ( parent . getClass ( ) . equals ( Hero . class ) ) { return 3 ; } if ( parent . getClass ( ) . equals ( ValueHolder . class ) ) { ValueHolder vh = ( ValueHolder ) parent ; String p = parent . toString ( ) ; if ( p . equals ( "Attributes" ) ) { return vh . parent . getAttributes ( ) . size ( ) ; } if ( p . equals ( "Talents" ) ) { return vh . parent . getTalents ( ) . size ( ) ; } if ( p . equals ( "Weapons" ) ) { return vh . parent . getFightvalues ( ) . size ( ) ; } } if ( parent . getClass ( ) . equals ( FightValue . class ) ) { return ( ( FightValue ) parent ) . getWeapons ( ) . size ( ) ; } return 0 ; }
void test10 ( ) throws Throwable { MultiHeroTreeModel multiHeroTreeModel0 = new MultiHeroTreeModel ( "cB8" ) ; int int0 = multiHeroTreeModel0 . getChildCount ( ( Object ) "300" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( Object parent ) { if ( parent . getClass ( ) . equals ( String . class ) ) { String p = parent . toString ( ) ; if ( p . equals ( root ) ) { return heros . size ( ) ; } } if ( parent . getClass ( ) . equals ( Hero . class ) ) { return 3 ; } if ( parent . getClass ( ) . equals ( ValueHolder . class ) ) { ValueHolder vh = ( ValueHolder ) parent ; String p = parent . toString ( ) ; if ( p . equals ( "Attributes" ) ) { return vh . parent . getAttributes ( ) . size ( ) ; } if ( p . equals ( "Talents" ) ) { return vh . parent . getTalents ( ) . size ( ) ; } if ( p . equals ( "Weapons" ) ) { return vh . parent . getFightvalues ( ) . size ( ) ; } } if ( parent . getClass ( ) . equals ( FightValue . class ) ) { return ( ( FightValue ) parent ) . getWeapons ( ) . size ( ) ; } return 0 ; }
void test11 ( ) throws Throwable { MultiHeroTreeModel multiHeroTreeModel0 = new MultiHeroTreeModel ( "Sklaventod" ) ; int int0 = multiHeroTreeModel0 . getIndexOfChild ( ( Object ) "North" , ( Object ) "Sklaventod" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexOfChild ( Object parent , Object child ) { if ( parent . toString ( ) . equals ( root ) ) { return heros . indexOf ( child ) ; } if ( parent . getClass ( ) . equals ( Hero . class ) ) { String s = child . toString ( ) ; if ( s . equals ( "Attributes" ) ) return 0 ; if ( s . equals ( "Talents" ) ) return 1 ; if ( s . equals ( "Weapons" ) ) return 2 ; } if ( parent . getClass ( ) . equals ( ValueHolder . class ) ) { ValueHolder vh = ( ValueHolder ) parent ; String p = vh . toString ( ) ; if ( p . equals ( "Talents" ) ) { return vh . parent . getTalents ( ) . indexOf ( child ) ; } if ( p . equals ( "Attributes" ) ) { return vh . parent . getAttributes ( ) . indexOf ( child ) ; } if ( p . equals ( "Weapons" ) ) { return vh . parent . getFightvalues ( ) . indexOf ( child ) ; } } if ( parent . getClass ( ) . equals ( FightValue . class ) ) { return ( ( FightValue ) parent ) . getWeapons ( ) . indexOf ( child ) ; } return - 1 ; }
void test12 ( ) throws Throwable { MultiHeroTreeModel multiHeroTreeModel0 = new MultiHeroTreeModel ( "Sklaventod" ) ; int int0 = multiHeroTreeModel0 . getIndexOfChild ( ( Object ) "Sklaventod" , ( Object ) "Sklaventod" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexOfChild ( Object parent , Object child ) { if ( parent . toString ( ) . equals ( root ) ) { return heros . indexOf ( child ) ; } if ( parent . getClass ( ) . equals ( Hero . class ) ) { String s = child . toString ( ) ; if ( s . equals ( "Attributes" ) ) return 0 ; if ( s . equals ( "Talents" ) ) return 1 ; if ( s . equals ( "Weapons" ) ) return 2 ; } if ( parent . getClass ( ) . equals ( ValueHolder . class ) ) { ValueHolder vh = ( ValueHolder ) parent ; String p = vh . toString ( ) ; if ( p . equals ( "Talents" ) ) { return vh . parent . getTalents ( ) . indexOf ( child ) ; } if ( p . equals ( "Attributes" ) ) { return vh . parent . getAttributes ( ) . indexOf ( child ) ; } if ( p . equals ( "Weapons" ) ) { return vh . parent . getFightvalues ( ) . indexOf ( child ) ; } } if ( parent . getClass ( ) . equals ( FightValue . class ) ) { return ( ( FightValue ) parent ) . getWeapons ( ) . indexOf ( child ) ; } return - 1 ; }
void test13 ( ) throws Throwable { MultiHeroTreeModel multiHeroTreeModel0 = new MultiHeroTreeModel ( "Sklaventod" ) ; boolean boolean0 = multiHeroTreeModel0 . isLeaf ( ( Object ) "Dialog" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( Object node ) { String s = node . toString ( ) ; if ( s . equals ( root ) ) return false ; if ( node . getClass ( ) . equals ( Hero . class ) ) return false ; if ( s . equals ( "Attributes" ) ) return false ; if ( s . equals ( "Talents" ) ) return false ; if ( s . equals ( "Weapons" ) ) return false ; if ( node . getClass ( ) . equals ( FightValue . class ) ) return false ; return true ; }
void test14 ( ) throws Throwable { MultiHeroTreeModel multiHeroTreeModel0 = new MultiHeroTreeModel ( "5 [ = tO ; PP4 - xOLsV = " ) ; boolean boolean0 = multiHeroTreeModel0 . isLeaf ( ( Object ) "5 [ = tO ; PP4 - xOLsV = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( Object node ) { String s = node . toString ( ) ; if ( s . equals ( root ) ) return false ; if ( node . getClass ( ) . equals ( Hero . class ) ) return false ; if ( s . equals ( "Attributes" ) ) return false ; if ( s . equals ( "Talents" ) ) return false ; if ( s . equals ( "Weapons" ) ) return false ; if ( node . getClass ( ) . equals ( FightValue . class ) ) return false ; return true ; }
void test0 ( ) throws Throwable { ValueHolder valueHolder0 = new ValueHolder ( "" , ( Hero ) null ) ; String string0 = valueHolder0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test0 ( ) throws Throwable { SecClient secClient0 = new SecClient ( ) ; boolean boolean0 = secClient0 . isConnected ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test6 ( ) throws Throwable { SecClient secClient0 = new SecClient ( ) ; Handler handler0 = new Handler ( ) ; secClient0 . addInputListener ( ( InputListener ) handler0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test7 ( ) throws Throwable { Handler handler0 = new Handler ( ) ; SecClient secClient0 = new SecClient ( ) ; secClient0 . removeInputListener ( ( InputListener ) handler0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test8 ( ) throws Throwable { SecClient secClient0 = new SecClient ( ) ; secClient0 . initialize ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String ret = "" ; ret + = t . toString ( ) + "\n" ; ret + = "att : " + attrib1 + " " + attrib2 + " " + attrib3 + "\n" ; ret + = "mod : " + mod + "\n" ; ret + = "to : " + to ; return ret ; }
void test9 ( ) throws Throwable { SecClient secClient0 = new SecClient ( ) ; secClient0 . initialize ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test4 ( ) throws Throwable { DOMElement dOMElement0 = new DOMElement ( " & quot ; " ) ; DOMDocument dOMDocument0 = new DOMDocument ( dOMElement0 ) ; Hero hero0 = new Hero ( ( Document ) dOMDocument0 ) ; SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel ( hero0 ) ; Object object0 = singleHeroTreeModel0 . getChild ( ( Object ) dOMElement0 , 40 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getChild ( Object parent , int index ) { / / differ the parent / / only the root element is of type string if ( parent . getClass ( ) . equals ( String . class ) ) { String p = parent . toString ( ) ; if ( p . equals ( root ) ) { return heros . elementAt ( index ) ; } } / / heros have 3 childs attributes , talents and weapons if ( parent . getClass ( ) . equals ( Hero . class ) ) { Hero h = ( Hero ) parent ; switch ( index ) { case 0 : return new ValueHolder ( "Attributes" , h ) ; case 1 : return new ValueHolder ( "Talents" , h ) ; case 2 : return new ValueHolder ( "Weapons" , h ) ; default : return null ; } } / / value holder holds the value for attributes , talents and weapons if ( parent . getClass ( ) . equals ( ValueHolder . class ) ) { ValueHolder vh = ( ValueHolder ) parent ; if ( vh . name . equals ( "Attributes" ) ) { return vh . parent . getAttributes ( ) . elementAt ( index ) ; } if ( vh . name . equals ( "Talents" ) ) { return vh . parent . getTalents ( ) . elementAt ( index ) ; } if ( vh . name . equals ( "Weapons" ) ) { return vh . parent . getFightvalues ( ) . elementAt ( index ) ; } } / / fight values have a set of weapons if ( parent . getClass ( ) . equals ( FightValue . class ) ) { return ( ( FightValue ) parent ) . getWeapons ( ) . elementAt ( index ) ; } return null ; }
void test5 ( ) throws Throwable { DOMElement dOMElement0 = new DOMElement ( " & quot ; " ) ; DOMDocument dOMDocument0 = new DOMDocument ( dOMElement0 ) ; Hero hero0 = new Hero ( ( Document ) dOMDocument0 ) ; SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel ( hero0 ) ; Object object0 = singleHeroTreeModel0 . getChild ( ( Object ) "Name" , 40 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getChild ( Object parent , int index ) { / / differ the parent / / only the root element is of type string if ( parent . getClass ( ) . equals ( String . class ) ) { String p = parent . toString ( ) ; if ( p . equals ( root ) ) { return heros . elementAt ( index ) ; } } / / heros have 3 childs attributes , talents and weapons if ( parent . getClass ( ) . equals ( Hero . class ) ) { Hero h = ( Hero ) parent ; switch ( index ) { case 0 : return new ValueHolder ( "Attributes" , h ) ; case 1 : return new ValueHolder ( "Talents" , h ) ; case 2 : return new ValueHolder ( "Weapons" , h ) ; default : return null ; } } / / value holder holds the value for attributes , talents and weapons if ( parent . getClass ( ) . equals ( ValueHolder . class ) ) { ValueHolder vh = ( ValueHolder ) parent ; if ( vh . name . equals ( "Attributes" ) ) { return vh . parent . getAttributes ( ) . elementAt ( index ) ; } if ( vh . name . equals ( "Talents" ) ) { return vh . parent . getTalents ( ) . elementAt ( index ) ; } if ( vh . name . equals ( "Weapons" ) ) { return vh . parent . getFightvalues ( ) . elementAt ( index ) ; } } / / fight values have a set of weapons if ( parent . getClass ( ) . equals ( FightValue . class ) ) { return ( ( FightValue ) parent ) . getWeapons ( ) . elementAt ( index ) ; } return null ; }
void test6 ( ) throws Throwable { DOMElement dOMElement0 = new DOMElement ( ( QName ) null ) ; DOMDocumentType dOMDocumentType0 = new DOMDocumentType ( "HBWF0H7@LW + UkHaI" , "HBWF0H7@LW + UkHaI" , "HBWF0H7@LW + UkHaI" ) ; DOMDocument dOMDocument0 = new DOMDocument ( dOMElement0 , dOMDocumentType0 ) ; Hero hero0 = new Hero ( ( Document ) dOMDocument0 ) ; SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel ( hero0 ) ; int int0 = singleHeroTreeModel0 . getChildCount ( ( Object ) singleHeroTreeModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( Object parent ) { if ( parent . getClass ( ) . equals ( String . class ) ) { String p = parent . toString ( ) ; if ( p . equals ( root ) ) { return heros . size ( ) ; } } if ( parent . getClass ( ) . equals ( Hero . class ) ) { return 3 ; } if ( parent . getClass ( ) . equals ( ValueHolder . class ) ) { ValueHolder vh = ( ValueHolder ) parent ; String p = parent . toString ( ) ; if ( p . equals ( "Attributes" ) ) { return vh . parent . getAttributes ( ) . size ( ) ; } if ( p . equals ( "Talents" ) ) { return vh . parent . getTalents ( ) . size ( ) ; } if ( p . equals ( "Weapons" ) ) { return vh . parent . getFightvalues ( ) . size ( ) ; } } if ( parent . getClass ( ) . equals ( FightValue . class ) ) { return ( ( FightValue ) parent ) . getWeapons ( ) . size ( ) ; } return 0 ; }
void test7 ( ) throws Throwable { DOMElement dOMElement0 = new DOMElement ( ( QName ) null ) ; DOMDocumentType dOMDocumentType0 = new DOMDocumentType ( "HBWF0H7@LW + UkHaI" , "HBWF0H7@LW + UkHaI" , "HBWF0H7@LW + UkHaI" ) ; DOMDocument dOMDocument0 = new DOMDocument ( dOMElement0 , dOMDocumentType0 ) ; Hero hero0 = new Hero ( ( Document ) dOMDocument0 ) ; SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel ( hero0 ) ; int int0 = singleHeroTreeModel0 . getChildCount ( ( Object ) "Name" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( Object parent ) { if ( parent . getClass ( ) . equals ( String . class ) ) { String p = parent . toString ( ) ; if ( p . equals ( root ) ) { return heros . size ( ) ; } } if ( parent . getClass ( ) . equals ( Hero . class ) ) { return 3 ; } if ( parent . getClass ( ) . equals ( ValueHolder . class ) ) { ValueHolder vh = ( ValueHolder ) parent ; String p = parent . toString ( ) ; if ( p . equals ( "Attributes" ) ) { return vh . parent . getAttributes ( ) . size ( ) ; } if ( p . equals ( "Talents" ) ) { return vh . parent . getTalents ( ) . size ( ) ; } if ( p . equals ( "Weapons" ) ) { return vh . parent . getFightvalues ( ) . size ( ) ; } } if ( parent . getClass ( ) . equals ( FightValue . class ) ) { return ( ( FightValue ) parent ) . getWeapons ( ) . size ( ) ; } return 0 ; }
void test8 ( ) throws Throwable { DOMElement dOMElement0 = new DOMElement ( " | " ) ; DOMDocument dOMDocument0 = new DOMDocument ( dOMElement0 ) ; Hero hero0 = new Hero ( ( Document ) dOMDocument0 ) ; SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel ( hero0 ) ; int int0 = singleHeroTreeModel0 . getIndexOfChild ( ( Object ) "Dialog" , ( Object ) "Dialog" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexOfChild ( Object parent , Object child ) { if ( parent . toString ( ) . equals ( root ) ) { return heros . indexOf ( child ) ; } if ( parent . getClass ( ) . equals ( Hero . class ) ) { String s = child . toString ( ) ; if ( s . equals ( "Attributes" ) ) return 0 ; if ( s . equals ( "Talents" ) ) return 1 ; if ( s . equals ( "Weapons" ) ) return 2 ; } if ( parent . getClass ( ) . equals ( ValueHolder . class ) ) { ValueHolder vh = ( ValueHolder ) parent ; String p = vh . toString ( ) ; if ( p . equals ( "Talents" ) ) { return vh . parent . getTalents ( ) . indexOf ( child ) ; } if ( p . equals ( "Attributes" ) ) { return vh . parent . getAttributes ( ) . indexOf ( child ) ; } if ( p . equals ( "Weapons" ) ) { return vh . parent . getFightvalues ( ) . indexOf ( child ) ; } } if ( parent . getClass ( ) . equals ( FightValue . class ) ) { return ( ( FightValue ) parent ) . getWeapons ( ) . indexOf ( child ) ; } return - 1 ; }
void test9 ( ) throws Throwable { DOMElement dOMElement0 = new DOMElement ( " & quot ; " ) ; DOMDocument dOMDocument0 = new DOMDocument ( dOMElement0 ) ; Hero hero0 = new Hero ( ( Document ) dOMDocument0 ) ; SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel ( hero0 ) ; boolean boolean0 = singleHeroTreeModel0 . isLeaf ( ( Object ) "Attributes" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( Object node ) { String s = node . toString ( ) ; if ( s . equals ( root ) ) return false ; if ( node . getClass ( ) . equals ( Hero . class ) ) return false ; if ( s . equals ( "Attributes" ) ) return false ; if ( s . equals ( "Talents" ) ) return false ; if ( s . equals ( "Weapons" ) ) return false ; if ( node . getClass ( ) . equals ( FightValue . class ) ) return false ; return true ; }
void test10 ( ) throws Throwable { DOMElement dOMElement0 = new DOMElement ( " | " ) ; DOMDocument dOMDocument0 = new DOMDocument ( dOMElement0 ) ; Hero hero0 = new Hero ( ( Document ) dOMDocument0 ) ; SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel ( hero0 ) ; boolean boolean0 = singleHeroTreeModel0 . isLeaf ( ( Object ) "Dialog" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( Object node ) { String s = node . toString ( ) ; if ( s . equals ( root ) ) return false ; if ( node . getClass ( ) . equals ( Hero . class ) ) return false ; if ( s . equals ( "Attributes" ) ) return false ; if ( s . equals ( "Talents" ) ) return false ; if ( s . equals ( "Weapons" ) ) return false ; if ( node . getClass ( ) . equals ( FightValue . class ) ) return false ; return true ; }
void test11 ( ) throws Throwable { DOMElement dOMElement0 = new DOMElement ( ( QName ) null ) ; DOMDocumentType dOMDocumentType0 = new DOMDocumentType ( "HBWF0H7@LW + UkHaI" , "HBWF0H7@LW + UkHaI" , "HBWF0H7@LW + UkHaI" ) ; DOMDocument dOMDocument0 = new DOMDocument ( dOMElement0 , dOMDocumentType0 ) ; Hero hero0 = new Hero ( ( Document ) dOMDocument0 ) ; SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel ( hero0 ) ; FightValue fightValue0 = new FightValue ( "HBWF0H7@LW + UkHaI" , 0 , 31 ) ; boolean boolean0 = singleHeroTreeModel0 . isLeaf ( ( Object ) fightValue0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( Object node ) { String s = node . toString ( ) ; if ( s . equals ( root ) ) return false ; if ( node . getClass ( ) . equals ( Hero . class ) ) return false ; if ( s . equals ( "Attributes" ) ) return false ; if ( s . equals ( "Talents" ) ) return false ; if ( s . equals ( "Weapons" ) ) return false ; if ( node . getClass ( ) . equals ( FightValue . class ) ) return false ; return true ; }
