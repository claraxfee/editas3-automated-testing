assertEquals ( 906 , blindIcon0 . getIconWidth ( ) )
assertEquals ( 906 , int0 )
assertEquals ( 906 , int0 )
assertNotNull ( lastStateStorageManagement0 )
assertEquals ( 0 , int0 )
assertEquals ( " < ? xml version = \"1 . 0\" encoding = \"UTF - 8\" ? > < mindmap_last_state_map_storage > < / mindmap_last_state_map_storage > " , string0 )
assertEquals ( 0 , lastStateStorageManagement0 . getLastFocussedTab ( ) )
assertNotNull ( lastStateStorageManagement0 )
assertNotNull ( lastStateStorageManagement0 )
assertNull ( mindmapLastStateStorage1 )
assertSame ( mindmapLastStateStorage1 , mindmapLastStateStorage0 )
assertNotNull ( lastStateStorageManagement0 )
assertEquals ( true , list0 . isEmpty ( ) )
assertEquals ( "Browse" , browseMode0 . toString ( ) )
assertNull ( mapModule0 )
assertEquals ( false , boolean0 )
assertNull ( string0 )
assertEquals ( "File" , fileMode0 . toString ( ) )
assertNull ( cursor0 )
assertNull ( cursor0 )
assertEquals ( false , freeMindPopupMenu0 . isFocusOwner ( ) )
assertEquals ( true , freeMindPopupMenu0 . isFocusTraversable ( ) )
assertEquals ( false , freeMindPopupMenu0 . isMinimumSizeSet ( ) )
assertEquals ( 0 , freeMindPopupMenu0 . getY ( ) )
assertEquals ( "PopupMenuUI" , freeMindPopupMenu0 . getUIClassID ( ) )
assertEquals ( 11 , int0 )
assertEquals ( 11 , int0 )
assertNotNull ( color1 )
assertEquals ( "" , clipboard0 . getName ( ) )
assertNotNull ( dataFlavorArray0 )
assertEquals ( " ) pplicationFfreeoind - node - idsL class = java . util . List" , string0 )
assertSame ( linkedList1 , linkedList0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , collection0 . isEmpty ( ) )
assertNotNull ( controller_Closer0 )
assertEquals ( 1 , freeMindToolBar0 . getComponentCount ( ) )
assertEquals ( false , freeMindToolBar0 . isFloatable ( ) )
assertEquals ( false , freeMindToolBar0 . isFloatable ( ) )
assertEquals ( 195L , menuDragMouseEvent0 . getWhen ( ) )
assertEquals ( true , mouseWheelEvent0 . isConsumed ( ) )
assertEquals ( true , boolean0 )
assertEquals ( 1 , sortedMapListModel0 . getSize ( ) )
assertEquals ( 1 , sortedMapListModel0 . getSize ( ) )
assertEquals ( 0 , sortedMapListModel0 . getSize ( ) )
assertEquals ( 1 , sortedMapListModel0 . getSize ( ) )
assertEquals ( 1 , sortedMapListModel0 . getSize ( ) )
assertEquals ( 0 , sortedMapListModel0 . getSize ( ) )
assertEquals ( 1 , sortedMapListModel0 . getSize ( ) )
assertEquals ( 0 , sortedMapListModel0 . getSize ( ) )
assertEquals ( 1 , sortedMapListModel0 . getSize ( ) )
assertEquals ( true , jComboBox0 . isOptimizedDrawingEnabled ( ) )
assertEquals ( 0 , sortedComboBoxModel0 . getSize ( ) )
assertEquals ( 10 , sortedMapVector0 . capacity ( ) )
assertEquals ( 10 , sortedMapVector0 . capacity ( ) )
assertEquals ( 0 , sortedMapVector0 . capacity ( ) )
assertEquals ( 0 , int0 )
assertEquals ( 10 , sortedMapVector0 . capacity ( ) )
assertEquals ( false , boolean0 )
assertEquals ( 10 , sortedMapVector0 . capacity ( ) )
assertEquals ( 10 , sortedMapVector0 . capacity ( ) )
assertEquals ( 10 , sortedMapVector0 . capacity ( ) )
assertEquals ( 10 , sortedMapVector0 . capacity ( ) )
assertEquals ( 10 , sortedMapVector0 . capacity ( ) )
assertEquals ( 10 , sortedMapVector0 . capacity ( ) )
assertEquals ( 0 , sortedMapListModel0 . getSize ( ) )
assertEquals ( 0 , extendedComboBoxModel0 . getSize ( ) )
assertEquals ( 1 , extendedComboBoxModel0 . getSize ( ) )
assertNotNull ( extendedComboBoxModel0 )
assertEquals ( 0 , extendedComboBoxModel0 . getSize ( ) )
assertEquals ( 0 , extendedComboBoxModel0 . getSize ( ) )
assertEquals ( 1 , extendedComboBoxModel0 . getSize ( ) )
assertEquals ( 0 , extendedComboBoxModel0 . getSize ( ) )
assertNull ( object0 )
assertEquals ( 0 , extendedComboBoxModel0 . getSize ( ) )
assertEquals ( 0 , extendedComboBoxModel0 . getSize ( ) )
assertEquals ( 0 , extendedComboBoxModel0 . getSize ( ) )
assertEquals ( 0 , extendedComboBoxModel0 . getSize ( ) )
assertEquals ( ( - 1 ) , int0 )
assertEquals ( ( - 1 ) , int0 )
assertEquals ( "filter_selected_node_view" , selectedViewCondition0 . toString ( ) )
assertEquals ( "filter_selected_node_view" , string0 )
assertEquals ( true , jCondition0 . getFocusTraversalKeysEnabled ( ) )
assertEquals ( "filter_selected_node_view" , selectedViewCondition0 . toString ( ) )
assertEquals ( 0 . 5F , jCondition0 . getAlignmentX ( ) , 0 . 01F )
assertEquals ( 1 , xMLElement0 . countChildren ( ) )
assertNotNull ( jCondition1 )
assertEquals ( "N : $x [ D [ JzE4wBG , filter_exist" , string0 )
assertEquals ( "filter_no_filtering" , noFilteringCondition0 . toString ( ) )
assertEquals ( "filter_node filter_is_not_equal_to" , nodeCompareCondition0 . createDesctiption ( ) )
assertEquals ( 1 , xMLElement0 . countChildren ( ) )
assertNotNull ( jCondition0 )
assertEquals ( 1 , xMLElement0 . countChildren ( ) )
assertEquals ( "filter_node filter_contains \"\" , filter_ignore_case" , ignoreCaseNodeContainsCondition0 . toString ( ) )
assertEquals ( "filter_node filter_contains" , nodeContainsCondition0 . createDesctiption ( ) )
assertEquals ( "filter_node filter_contains" , string0 )
assertNotNull ( base64Coding0 )
assertNotNull ( byteArray0 )
assertNotNull ( byteArray0 )
assertNull ( byteArray0 )
assertNull ( byteArray0 )
assertNull ( byteArray0 )
assertNotNull ( byteArray0 )
assertNotNull ( string0 )
assertEquals ( "AJ0AAAAAAAAAAA = = " , string0 )
assertEquals ( "AAAAAAC + AAAAAA = = " , string0 )
assertEquals ( "AAAAAAAAC / oAAA = = " , string0 )
assertNotNull ( exampleFileFilter0 )
assertNotNull ( exampleFileFilter0 )
assertEquals ( true , exampleFileFilter0 . isExtensionListInDescription ( ) )
assertNotNull ( exampleFileFilter0 )
assertNotNull ( exampleFileFilter0 )
assertNotNull ( exampleFileFilter0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertNotNull ( exampleFileFilter0 )
assertNotNull ( exampleFileFilter0 )
assertEquals ( 0 , loggingOutputStream0 . size ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( 5 , hashtable0 . size ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertNotNull ( xMLElement0 )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertNotNull ( xMLElement0 )
assertNotNull ( xMLElement0 )
assertNotNull ( xMLElement0 )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( 5 , hashtable0 . size ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( 5 , hashtable0 . size ( ) )
assertNotNull ( xMLElement0 )
assertNotNull ( xMLElement0 )
assertNotNull ( xMLElement0 )
assertEquals ( 6 , hashtable0 . size ( ) )
assertNotNull ( xMLElement0 )
assertEquals ( 5 , hashtable0 . size ( ) )
assertNotNull ( xMLElement0 )
assertEquals ( 5 , hashtable0 . size ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertNotNull ( xMLElement0 )
assertEquals ( 5 , hashtable0 . size ( ) )
assertEquals ( 5 , hashtable0 . size ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( 5 , hashtable0 . size ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertNotNull ( xMLElement0 )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( 5 , hashtable0 . size ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( 5 , hashtable0 . size ( ) )
assertEquals ( 5 , hashtable0 . size ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertEquals ( false , hashtable0 . isEmpty ( ) )
assertNotNull ( xMLElement0 )
assertEquals ( 5 , hashtable0 . size ( ) )
assertNotNull ( xMLElement0 )
assertEquals ( 5 , hashtable0 . size ( ) )
assertNotNull ( xMLElement0 )
assertNotNull ( xMLElement0 )
assertNotNull ( xMLElement0 )
assertEquals ( 5 , hashtable0 . size ( ) )
assertEquals ( 5 , hashtable0 . size ( ) )
assertNotNull ( xMLElement0 )
assertNotNull ( xMLElement0 )
assertNotNull ( xMLElement0 )
assertEquals ( 5 , hashtable0 . size ( ) )
assertNotNull ( xMLElement0 )
assertNotNull ( xMLElement0 )
assertEquals ( " . " , resources0 . getFreemindDirectory ( ) )
assertNull ( resourceBundle0 )
assertEquals ( " ; k ! xMK c ! yw * " , string0 )
assertEquals ( true , logger0 . getUseParentHandlers ( ) )
assertEquals ( 0 , freeMindMain_VersionInformation0 . mType )
assertEquals ( " } e2n8" , string0 )
assertEquals ( " } e2n8" , string0 )
assertEquals ( 8905 , int0 )
assertEquals ( " " , namedObject0 . toString ( ) )
assertEquals ( " { sl = SI , zh = CN , uk = UA , it = IT , no = NO , hu = HU , de = DE , fi = FI , pt = PT , fr = FR , en = US , ru = RU , es = MX , nl = NL } " , hashMap0 . toString ( ) )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( " & " , string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertNotNull ( htmlTools0 )
assertEquals ( " < html > < body > < p > & nbsp ; < html > < body > < p > & nbsp ; 4a9WyZ~ ] t2bl4 & #x7f ; J\"br" , string0 )
assertNull ( string0 )
assertEquals ( "" , string0 )
assertEquals ( " [ [ IndexPair : originalStart : 240 originalEnd : 240 replacedStart : 240 replacedEnd : 240 is a tag : false ] ] " , arrayList0 . toString ( ) )
assertEquals ( " [ [ IndexPair : originalStart : - 1233 originalEnd : - 1233 replacedStart : - 1233 replacedEnd : - 1233 is a tag : true ] ] " , arrayList0 . toString ( ) )
assertEquals ( " [ [ IndexPair : originalStart : 240 originalEnd : 240 replacedStart : 240 replacedEnd : 240 is a tag : false ] ] " , arrayList0 . toString ( ) )
assertEquals ( "\t" , string0 )
assertEquals ( " < html > < body > < p > & nbsp ; \r < br > - ' ( ) + , . / : = ? ; ! * #@$_%0123456789" , string0 )
assertEquals ( " < html > < body > < p > & nbsp ; 4a9WyZ~ ] t2bl4 & #x7f ; J\"br" , string0 )
assertNotNull ( string0 )
assertEquals ( " & #xd ; & #xa ; - 'H ) + , . : = ? ; ! * #@$_%0123456789" , string0 )
assertEquals ( "\t" , string0 )
assertNotNull ( string0 )
assertEquals ( " < html } 4 / 't4tD ! / O > " , string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( "" , string0 )
assertEquals ( "jp > " , string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( " < html > < body > < p > & nbsp ; & nbsp ; & nbsp ; & nbsp ; & nbsp ; & nbsp ; & amp ; & nbsp ; & nbsp ; & nbsp ; " , string0 )
assertEquals ( " < html > < body > < p > & lt ; html & gt ; & lt ; body & gt ; & lt ; p & gt ; & amp ; nbsp ; \r & lt ; br & gt ; - ' ( ) + , . / : = ? ; ! * #@$_%0123456789" , string0 )
assertEquals ( " & nbsp ; & nbsp ; & nbsp ; & nbsp ; & nbsp ; & nbsp ; & amp ; & nbsp ; & nbsp ; & nbsp ; " , string0 )
assertNotNull ( string0 )
assertEquals ( "`suKMpL 9 , 2 + xh ? . Z" , string0 )
assertEquals ( "" , string0 )
assertEquals ( "ERROR : none" , string0 )
assertEquals ( " < ht$laA & KJxcQ / ! = cN4 ) X ; " , string0 )
assertEquals ( " < html > < body > < p > & nbsp ; 4a9WyZ~ ] t2bl4 & #x7f ; J\"br" , string0 )
assertEquals ( " [ 01 ] ; " , string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertEquals ( " \u00A0\u00A0\u00A0\u00A0\u00A0 & \u00A0\u00A0" , string0 )
assertNotNull ( stdFormatter0 )
assertEquals ( " { default = AttributeSet , } \n { margin - top = 0 , name = p , } \n { name = body , } \n { margin - top = 0 , resolver = AttributeSet , name = p , } \n { name = default , } \n { name = content , } \n { name = html , } \n { bidiLevel = 0 , } \n { } \n" , styleSheet0 . toString ( ) )
assertEquals ( " { name = body , } \n { default = AttributeSet , } \n { margin - top = 0 , resolver = AttributeSet , name = p , } \n { name = default , } \n { name = content , } \n { margin - top = 0 , name = p , } \n { name = html , } \n { bidiLevel = 0 , } \n { } \n" , styleSheet0 . toString ( ) )
assertEquals ( "\n" , fixedHTMLWriter0 . getLineSeparator ( ) )
assertEquals ( "\n" , fixedHTMLWriter0 . getLineSeparator ( ) )
assertEquals ( "V - 038" , passwordAuthentication0 . getUserName ( ) )
assertEquals ( " < html > \n < head > \n\n < / head > \n < body > \n < p style = \"margin - top : 0\" > \n \n < / p > \n < / body > \n < / html > \n" , stringWriter0 . toString ( ) )
assertEquals ( " < option > < / option > \n" , stringWriter0 . toString ( ) )
assertEquals ( " ; HITBaP$FMt" , stringWriter0 . toString ( ) )
assertNull ( string0 )
assertEquals ( 1 , vector0 . size ( ) )
assertNotNull ( string0 )
assertEquals ( true , boolean0 )
assertNotNull ( byteArray0 )
assertEquals ( "" , jCheckBox0 . getText ( ) )
assertEquals ( true , boolean0 )
assertNull ( xmlAction0 )
assertEquals ( "127 . 0 . 0 . 1" , string0 )
assertEquals ( "612 . 0 ; 792 . 0 ; 72 . 0 ; 72 . 0 ; 468 . 0 ; 648 . 0" , string0 )
assertEquals ( true , boolean0 )
assertNotNull ( string0 )
assertEquals ( "127 . 0 . 0 . 1" , tools0 . getHostIpAsString ( ) )
assertNotNull ( tools_SingleDesEncrypter0 )
assertNotNull ( tools_ObjectHolder0 )
assertEquals ( true , tools_BooleanHolder0 . getValue ( ) )
assertEquals ( false , tools_BooleanHolder0 . getValue ( ) )
assertNotNull ( tools_TripleDesEncrypter0 )
assertNull ( object0 )
assertEquals ( 0 , tools_IntHolder0 . getValue ( ) )
assertEquals ( 405 , int0 )
assertNull ( string0 )
assertEquals ( "true" , string0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertNotNull ( string0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( "feMorphology" , string0 )
assertEquals ( true , tools_BooleanHolder0 . getValue ( ) )
assertEquals ( true , boolean0 )
assertEquals ( false , boolean0 )
assertNull ( keyStroke0 )
assertNotNull ( string0 )
assertEquals ( "First string is longer : 6b#me8J { r ! L < Uke } n1\n" , string0 )
assertNull ( object1 )
assertNotNull ( string0 )
assertEquals ( 0 , int0 )
assertEquals ( 72 . 0 , paper0 . getImageableX ( ) , 0 . 01D )
assertNull ( logFileLogHandler0 . getEncoding ( ) )
assertNull ( logFileLogHandler0 . getEncoding ( ) )
assertNull ( logFileLogHandler_LogReceiver0 )
assertEquals ( 183L , logRecord0 . getSequenceNumber ( ) )
assertEquals ( 193L , logRecord0 . getSequenceNumber ( ) )
assertNotNull ( stylePatternFactory0 )
assertNull ( pattern0 )
assertNull ( patterns0 )
assertEquals ( 0 , patterns0 . sizeChoiceList ( ) )
assertNull ( pattern1 . getName ( ) )
assertNotNull ( stylePattern0 )
assertNull ( string0 )
assertNull ( stylePattern0 . getNodeStyle ( ) )
assertEquals ( false , stylePattern0 . getAppliesToChildren ( ) )
assertEquals ( false , stylePattern0 . getAppliesToEdge ( ) )
assertNull ( string0 )
assertNull ( string0 )
assertEquals ( false , stylePattern0 . getAppliesToNodeIcon ( ) )
assertEquals ( false , boolean0 )
assertNull ( stylePattern0 . getNodeFontFamily ( ) )
assertNull ( color0 )
assertEquals ( false , stylePattern0 . getAppliesToNodeIcon ( ) )
assertNotNull ( string0 )
assertNotNull ( stylePattern0 )
assertNull ( color0 )
assertNull ( stylePattern0 . getName ( ) )
assertNull ( stylePattern0 . getEdgeStyle ( ) )
assertNull ( mindIcon0 )
assertNull ( stylePattern0 . getName ( ) )
assertNotNull ( stylePattern0 )
assertNull ( stylePattern1 )
assertNull ( string0 )
assertNull ( stylePattern0 . getNodeStyle ( ) )
assertEquals ( false , stylePattern0 . getAppliesToNodeFont ( ) )
assertNull ( stylePattern0 . getText ( ) )
assertEquals ( false , stylePattern0 . getAppliesToNode ( ) )
assertNull ( stylePattern0 . getName ( ) )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( "extended" , attributeRegistry0 . getAttributeViewType ( ) )
assertEquals ( 1 , attributeRegistry0 . size ( ) )
assertEquals ( "extended" , attributeRegistry0 . getAttributeViewType ( ) )
assertEquals ( - 1 , attributeRegistry0 . getVisibleElementsNumber ( ) )
assertEquals ( 0 , int0 )
assertEquals ( "extended" , attributeRegistry0 . getAttributeViewType ( ) )
assertEquals ( "extended" , attributeRegistry0 . getAttributeViewType ( ) )
assertEquals ( 12 , attributeRegistry0 . getFontSize ( ) )
assertEquals ( 1 , attributeRegistry0 . getVisibleElementsNumber ( ) )
assertEquals ( 0 , attributeRegistry0 . getVisibleElementsNumber ( ) )
assertEquals ( 12 , attributeRegistry0 . getFontSize ( ) )
assertEquals ( 1472 , attributeRegistry0 . getFontSize ( ) )
assertEquals ( 1 , attributeRegistry0 . size ( ) )
assertEquals ( 12 , attributeRegistry0 . getFontSize ( ) )
assertEquals ( "extended" , attributeRegistry0 . getAttributeViewType ( ) )
assertEquals ( 12 , attributeRegistry0 . getFontSize ( ) )
assertEquals ( 12 , attributeRegistry0 . getFontSize ( ) )
assertEquals ( "" , attribute0 . getName ( ) )
assertEquals ( "M3ximFj | ktp" , string0 )
assertEquals ( " [ HF } k & Q" , attribute0 . getName ( ) )
assertEquals ( " [ [ HF } k & Q , [ HF } k & Q ] " , attribute1 . toString ( ) )
assertEquals ( "" , string0 )
assertNotNull ( string0 )
assertNull ( jToolBar0 )
assertEquals ( "File" , string0 )
assertEquals ( "File" , fileMode0 . toString ( ) )
assertNull ( controller0 )
assertEquals ( "MindMap" , string0 )
assertNotNull ( mindMapHTMLWriter0 )
assertEquals ( " < html > \n < head > \n < style type = \"text / css\" > \n li { list - style : none ; margin : 0 ; } \n p { margin : 0 ; } \n\n span . l { color : red ; font - weight : bold ; } \n\n a . mapnode : link { text - decoration : none ; color : black ; } \n a . mapnode : visited { text - decoration : none ; color : black ; } \n a . mapnode : active { text - decoration : none ; color : black ; } \n a . mapnode : hover { text - decoration : none ; color : black ; background : #eeeee0 ; } \n\n < / style > \n < ! - - ^ Position is not set to relative / absolute here because of Mozilla - - > \n < / head > \n < body > \n < / body > \n < / html > \n" , charArrayWriter0 . toString ( ) )
assertEquals ( 22 , jAutoScrollBarPane1 . getVerticalScrollBarPolicy ( ) )
assertEquals ( true , stringReader0 . ready ( ) )
assertEquals ( "@z { t" , string0 )
assertEquals ( ( - 1 ) , int0 )
assertEquals ( 0 , int0 )
assertNotNull ( string0 )
assertNotNull ( string0 )
assertNotNull ( colorProperty0 )
assertEquals ( "#000000" , string0 )
assertNotNull ( colorProperty0 )
assertNotNull ( colorProperty0 )
assertEquals ( "" , colorProperty0 . getDescription ( ) )
assertNotNull ( colorProperty0 )
assertNotNull ( iconProperty0 )
assertNotNull ( iconProperty0 )
assertNotNull ( iconProperty0 )
assertEquals ( "" , string0 )
assertEquals ( "7Fzs" , string0 )
assertNull ( stringProperty0 . getDescription ( ) )
assertNotNull ( stringProperty0 )
assertNotNull ( string0 )
assertEquals ( "" , dontShowNotificationProperty0 . getLabel ( ) )
assertEquals ( "\" > v''VjLui + j" , passwordProperty0 . getLabel ( ) )
assertEquals ( "" , dontShowNotificationProperty0 . getLabel ( ) )
assertNotNull ( fontProperty0 )
assertEquals ( "oC } o5 * cLV { ; IL" , fontProperty0 . getDescription ( ) )
assertEquals ( "oC } o5 * cLV { ; IL" , string0 )
assertNotNull ( fontProperty0 )
assertEquals ( 2 , defaultFormBuilder0 . getRow ( ) )
assertNull ( string0 )
assertNull ( nextLineProperty0 . getDescription ( ) )
assertNull ( string0 )
assertNotNull ( booleanProperty0 )
assertNotNull ( booleanProperty0 )
assertNotNull ( booleanProperty0 )
assertNotNull ( booleanProperty0 )
assertNotNull ( booleanProperty0 )
assertNotNull ( booleanProperty0 )
assertNotNull ( booleanProperty0 )
assertNotNull ( booleanProperty0 )
assertEquals ( "_ W > [ BhU" , string0 )
assertNull ( string0 )
assertEquals ( 0 , pushbackInputStream0 . available ( ) )
assertEquals ( - 1 , byteArrayInputStream0 . read ( ) )
assertNotNull ( comboProperty0 )
assertEquals ( " > 3OB5' = eNN ( T" , comboProperty0 . getDescription ( ) )
assertNotNull ( comboProperty0 )
assertEquals ( " > 3OB5' = eNN ( T" , comboProperty0 . getValue ( ) )
assertEquals ( "4" , comboProperty0 . getLabel ( ) )
assertEquals ( "eNoDAAAAAAE = " , string0 )
assertNotNull ( threeCheckBoxProperty0 )
assertNotNull ( threeCheckBoxProperty0 )
assertEquals ( 0 , threeCheckBoxProperty0 . state )
assertNotNull ( threeCheckBoxProperty0 )
assertNotNull ( threeCheckBoxProperty0 )
assertNotNull ( threeCheckBoxProperty0 )
assertNotNull ( threeCheckBoxProperty0 )
assertNotNull ( threeCheckBoxProperty0 )
assertEquals ( 0 , threeCheckBoxProperty0 . state )
assertNotNull ( numberProperty0 )
assertNotNull ( numberProperty0 )
assertNotNull ( numberProperty0 )
assertNotNull ( numberProperty0 )
assertNotNull ( numberProperty0 )
assertNotNull ( numberProperty0 )
assertNotNull ( numberProperty0 )
assertEquals ( 2 , int0 )
assertNull ( separatorProperty0 . getLabel ( ) )
assertNull ( string0 )
assertEquals ( " : Y'3\"3h" , string0 )
assertEquals ( " : Y'3\"3h" , namedObject0 . toString ( ) )
assertEquals ( " : Y'3\"3h" , string0 )
assertEquals ( true , boolean0 )
assertEquals ( true , boolean0 )
assertNull ( mapNodePositionHolder0 . getName ( ) )
assertNull ( permanentNodeHookAdapter0 . getName ( ) )
assertEquals ( "MapNodePositionHolder [ mPosition = Coordinate [ 0 . 0 , 0 . 0 ] , mMapCenter = Coordinate [ 0 . 0 , 0 . 0 ] , mTileSource = null , mZoom = 1 , getNode ( ) = null ] " , mapNodePositionHolder0 . toString ( ) )
assertNull ( permanentNodeHookAdapter0 . getName ( ) )
assertNull ( permanentNodeHookAdapter0 . getName ( ) )
assertNull ( clonePlugin0 . getName ( ) )
assertNull ( permanentNodeHookAdapter0 . getName ( ) )
assertNull ( xMLElement0 . getName ( ) )
assertNull ( permanentNodeHookAdapter0 . getName ( ) )
assertNull ( permanentNodeHookAdapter0 . getName ( ) )
assertNull ( clonePlugin0 . getName ( ) )
assertNull ( permanentNodeHookAdapter0 . getName ( ) )
assertNull ( actionPair0 )
assertNull ( permanentNodeHookAdapter0 . getName ( ) )
assertNull ( permanentNodeHookAdapter0 . getName ( ) )
assertNull ( permanentNodeHookAdapter0 . getName ( ) )
assertNull ( permanentNodeHookAdapter0 . getName ( ) )
assertEquals ( 2 , xMLElement0 . countChildren ( ) )
assertNull ( hookAdapter0 . getName ( ) )
assertNull ( exportHook0 . getName ( ) )
assertNull ( string0 )
assertNull ( databaseStarter0 . getName ( ) )
assertNull ( hookAdapter0 . getName ( ) )
assertNull ( properties0 )
assertNull ( mindMapMaster0 . getPassword ( ) )
assertEquals ( "I8HpM + " , permanentNodeHookSubstituteUnknown0 . getName ( ) )
assertNull ( mindMap0 )
assertNull ( mindMapNode0 )
assertEquals ( "filetypes" , permanentNodeHookSubstituteUnknown0 . getName ( ) )
assertEquals ( false , hookFactory_RegistrationContainer0 . isPluginBase )
assertEquals ( 5 , hashMap0 . size ( ) )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( true , collection0 . isEmpty ( ) )
assertNull ( mindMapNode0 )
assertEquals ( false , boolean0 )
assertNull ( string0 )
assertEquals ( false , boolean0 )
assertEquals ( true , boolean0 )
assertEquals ( "M" , string0 )
assertNull ( exportHook0 . getName ( ) )
assertNull ( exportHook0 . getName ( ) )
assertNull ( encryptNode0 . getName ( ) )
assertEquals ( false , revisionPlugin0 . alreadyUsed )
assertNull ( revisionPlugin0 . getName ( ) )
assertEquals ( false , revisionPlugin0 . alreadyUsed )
assertNull ( clonePlugin0 )
assertNull ( applyFormatPlugin0 . getName ( ) )
assertEquals ( false , blinkingNodeHook_TimerColorChanger0 . cancel ( ) )
assertNull ( newParentNode0 . getName ( ) )
assertNull ( string0 )
assertEquals ( "e / / Jm~c\"y ? ) " , automaticLayout_StylePatternProperty0 . getDescription ( ) )
assertEquals ( "e / / Jm~c\"y ? ) " , string0 )
assertEquals ( "" , string0 )
assertNotNull ( automaticLayout_StylePatternListProperty0 )
assertNotNull ( automaticLayout_StylePatternListProperty0 )
assertNull ( sortNodes0 . getName ( ) )
assertNull ( clonePlugin0 . getName ( ) )
assertNull ( clonePlugin0 . getName ( ) )
assertNull ( clonePlugin0 . getName ( ) )
assertNull ( clonePlugin0 . getName ( ) )
assertNull ( clonePlugin0 . getName ( ) )
assertSame ( actionPair1 , actionPair0 )
assertEquals ( false , boolean0 )
assertEquals ( false , boolean0 )
assertEquals ( " [ ] " , vector0 . toString ( ) )
assertNull ( splitNode0 . getName ( ) )
assertNull ( saveAll0 . getName ( ) )
assertNull ( iconSelectionPlugin0 . getName ( ) )
assertNull ( formularEditor0 . getName ( ) )
assertNull ( formularEditor0 . getName ( ) )
assertNull ( formularEditor0 . getName ( ) )
assertEquals ( "" , xMLElement0 . getContent ( ) )
assertNull ( fitToPage0 . getName ( ) )
assertNull ( shadowClonePlugin0 . getName ( ) )
assertNull ( shadowClonePlugin0 . getName ( ) )
assertNull ( string0 )
assertNull ( jumpLastEditLocation0 . getName ( ) )
assertNull ( changeNodeLevelAction0 . getName ( ) )
assertNull ( managePatterns0 . getName ( ) )
assertNull ( removeNote0 . getName ( ) )
assertNull ( formatPaste0 . getName ( ) )
assertNull ( nodeHistory0 . getName ( ) )
assertEquals ( false , logFileViewer_Registration0 . isPrintActionActive ( ) )
assertEquals ( false , logFileViewer_Registration0 . isPrintActionActive ( ) )
assertEquals ( false , boolean0 )
assertNull ( logFileViewer0 . getName ( ) )
assertEquals ( true , boolean0 )
assertNull ( logger0 . getResourceBundleName ( ) )
assertNull ( logFileViewer0 . getName ( ) )
assertNull ( logFileLogHandler0 )
assertNotNull ( arrayListTransferHandler0 )
assertNotNull ( arrayListTransferHandler0 )
assertNotNull ( arrayListTransferHandler0 )
assertEquals ( 0 , arrayListTransferHandler0 . addCount )
assertNotNull ( arrayListTransferHandler0 )
assertNotNull ( arrayListTransferHandler0 )
assertNotNull ( jMonthChooser0 )
assertNotNull ( jMonthChooser0 )
assertNotNull ( jMonthChooser0 )
assertNotNull ( jMonthChooser0 )
assertNotNull ( jMonthChooser0 )
assertNotNull ( jMonthChooser0 )
assertNotNull ( jMonthChooser0 )
assertNotNull ( jMonthChooser0 )
assertNotNull ( jMonthChooser0 )
assertNotNull ( jMonthChooser0 )
assertNotNull ( jMonthChooser0 )
assertNotNull ( jMonthChooser0 )
assertNotNull ( jMonthChooser0 )
assertNotNull ( jMonthChooser0 )
assertNotNull ( jMonthChooser0 )
assertNull ( timeManagement0 . getName ( ) )
assertEquals ( "Browse" , browseMode0 . toString ( ) )
assertEquals ( true , boolean0 )
assertEquals ( "Browse" , browseMode0 . toString ( ) )
assertNull ( timeManagement0 . getName ( ) )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertEquals ( "java . util . GregorianCalendar [ time = - 62260963200000 , areFieldsSet = true , areAllFieldsSet = true , lenient = true , zone = sun . util . calendar . ZoneInfo [ id = \"GB - Eire\" , offset = 0 , dstSavings = 3600000 , useDaylight = true , transitions = 242 , lastRule = java . util . SimpleTimeZone [ id = GB - Eire , offset = 0 , dstSavings = 3600000 , useDaylight = true , startYear = 0 , startMode = 2 , startMonth = 2 , startDay = - 1 , startDayOfWeek = 1 , startTime = 3600000 , startTimeMode = 2 , endMode = 2 , endMonth = 9 , endDay = - 1 , endDayOfWeek = 1 , endTime = 3600000 , endTimeMode = 2 ] ] , firstDayOfWeek = 1 , minimalDaysInFirstWeek = 1 , ERA = 0 , YEAR = 4 , MONTH = 0 , WEEK_OF_YEAR = 2 , WEEK_OF_MONTH = 2 , DAY_OF_MONTH = 13 , DAY_OF_YEAR = 13 , DAY_OF_WEEK = 7 , DAY_OF_WEEK_IN_MONTH = 2 , AM_PM = 0 , HOUR = 0 , HOUR_OF_DAY = 0 , MINUTE = 0 , SECOND = 0 , MILLISECOND = 0 , ZONE_OFFSET = 0 , DST_OFFSET = 0 ] " , gregorianCalendar0 . toString ( ) )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertEquals ( "java . util . GregorianCalendar [ time = 1372733797010 , areFieldsSet = true , areAllFieldsSet = true , lenient = true , zone = sun . util . calendar . ZoneInfo [ id = \"GB - Eire\" , offset = 0 , dstSavings = 3600000 , useDaylight = true , transitions = 242 , lastRule = java . util . SimpleTimeZone [ id = GB - Eire , offset = 0 , dstSavings = 3600000 , useDaylight = true , startYear = 0 , startMode = 2 , startMonth = 2 , startDay = - 1 , startDayOfWeek = 1 , startTime = 3600000 , startTimeMode = 2 , endMode = 2 , endMonth = 9 , endDay = - 1 , endDayOfWeek = 1 , endTime = 3600000 , endTimeMode = 2 ] ] , firstDayOfWeek = 1 , minimalDaysInFirstWeek = 1 , ERA = 1 , YEAR = 2013 , MONTH = 6 , WEEK_OF_YEAR = 27 , WEEK_OF_MONTH = 1 , DAY_OF_MONTH = 2 , DAY_OF_YEAR = 183 , DAY_OF_WEEK = 3 , DAY_OF_WEEK_IN_MONTH = 1 , AM_PM = 0 , HOUR = 3 , HOUR_OF_DAY = 3 , MINUTE = 56 , SECOND = 37 , MILLISECOND = 10 , ZONE_OFFSET = 0 , DST_OFFSET = 3600000 ] " , gregorianCalendar0 . toString ( ) )
assertNotNull ( jCalendar0 )
assertEquals ( "java . util . GregorianCalendar [ time = - 62260963200000 , areFieldsSet = true , areAllFieldsSet = true , lenient = true , zone = sun . util . calendar . ZoneInfo [ id = \"GB - Eire\" , offset = 0 , dstSavings = 3600000 , useDaylight = true , transitions = 242 , lastRule = java . util . SimpleTimeZone [ id = GB - Eire , offset = 0 , dstSavings = 3600000 , useDaylight = true , startYear = 0 , startMode = 2 , startMonth = 2 , startDay = - 1 , startDayOfWeek = 1 , startTime = 3600000 , startTimeMode = 2 , endMode = 2 , endMonth = 9 , endDay = - 1 , endDayOfWeek = 1 , endTime = 3600000 , endTimeMode = 2 ] ] , firstDayOfWeek = 1 , minimalDaysInFirstWeek = 1 , ERA = 0 , YEAR = 4 , MONTH = 0 , WEEK_OF_YEAR = 2 , WEEK_OF_MONTH = 2 , DAY_OF_MONTH = 13 , DAY_OF_YEAR = 13 , DAY_OF_WEEK = 7 , DAY_OF_WEEK_IN_MONTH = 2 , AM_PM = 0 , HOUR = 0 , HOUR_OF_DAY = 0 , MINUTE = 0 , SECOND = 0 , MILLISECOND = 0 , ZONE_OFFSET = 0 , DST_OFFSET = 0 ] " , gregorianCalendar0 . toString ( ) )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jCalendar0 )
assertNotNull ( jYearChooser0 )
assertNotNull ( jYearChooser0 )
assertNotNull ( jYearChooser0 )
assertNotNull ( jYearChooser0 )
assertNotNull ( jYearChooser0 )
assertNotNull ( jYearChooser0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jSpinField0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertEquals ( 2 , jDayChooser0 . getDay ( ) )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertNotNull ( jDayChooser0 )
assertEquals ( 10 , timeList_IconsRenderer0 . getHorizontalAlignment ( ) )
assertNotNull ( string0 )
assertEquals ( "UT`'j = h4#" , string0 )
assertNull ( timeList0 . getName ( ) )
assertEquals ( false , timeList_NodeRenderer0 . hasFocus ( ) )
assertEquals ( true , timeList_NotesRenderer0 . isFontSet ( ) )
assertNull ( removeReminderHook0 . getName ( ) )
assertEquals ( 0 , int0 )
assertNotNull ( flatNodeTableFilterModel0 )
assertEquals ( false , class0 . isEnum ( ) )
assertEquals ( 1 , defaultTableModel0 . getColumnCount ( ) )
assertNotNull ( jTripleCalendar0 )
assertNotNull ( jTripleCalendar0 )
assertNotNull ( jTripleCalendar0 )
assertNotNull ( jTripleCalendar0 )
assertNotNull ( jTripleCalendar0 )
assertNotNull ( jTripleCalendar0 )
assertNotNull ( clickableImageCreator_AreaHolder0 )
assertNotNull ( windowClosingAdapter0 )
assertNotNull ( mapSearchMarkerLocation0 )
assertNotNull ( mapSearchMarkerLocation0 )
assertEquals ( false , tileImage0 . isImageCreated ( ) )
assertEquals ( false , boolean0 )
assertEquals ( false , tileImage0 . isImageCreated ( ) )
assertNull ( string0 )
assertEquals ( true , tileImage0 . isDrawingDone ( ) )
assertEquals ( true , tileImage0 . isImageCreated ( ) )
assertEquals ( true , tileImage0 . isDrawingDone ( ) )
assertEquals ( true , tileImage0 . isDrawingDone ( ) )
assertEquals ( "MapNodePositionHolder [ mPosition = Coordinate [ 0 . 0 , 0 . 0 ] , mMapCenter = null , mTileSource = null , mZoom = 1 , getNode ( ) = null ] " , mapNodePositionHolder0 . toString ( ) )
assertNotNull ( coordinate0 )
assertNotNull ( coordinate0 )
assertEquals ( "MapNodePositionHolder [ mPosition = Coordinate [ 0 . 0 , 0 . 0 ] , mMapCenter = Coordinate [ 0 . 0 , 0 . 0 ] , mTileSource = null , mZoom = 1 , getNode ( ) = null ] " , mapNodePositionHolder0 . toString ( ) )
assertEquals ( 1 , int0 )
assertEquals ( "MapNodePositionHolder [ mPosition = Coordinate [ 0 . 0 , 0 . 0 ] , mMapCenter = Coordinate [ 0 . 0 , 0 . 0 ] , mTileSource = , mZoom = 1 , getNode ( ) = null ] " , mapNodePositionHolder0 . toString ( ) )
assertEquals ( "MapNodePositionHolder [ mPosition = Coordinate [ 50 . 064191736659104 , 8 . 96484375 ] , mMapCenter = Coordinate [ 0 . 0 , 0 . 0 ] , mTileSource = null , mZoom = 1 , getNode ( ) = null ] " , mapNodePositionHolder0 . toString ( ) )
assertEquals ( 1 , mapNodePositionHolder0 . getZoom ( ) )
assertNotNull ( springUtilities0 )
assertEquals ( true , jLabel0 . isFontSet ( ) )
assertEquals ( "Thread - 1264" , updateThread0 . getName ( ) )
assertEquals ( "Thread [ Thread - 1277 , 5 , Test Execution ] " , updateThread0 . toString ( ) )
assertEquals ( 1368L , updateThread0 . getId ( ) )
assertEquals ( 1380L , updateThread0 . getId ( ) )
assertEquals ( "Thread [ Thread - 1373 , 5 , Test Execution ] " , updateThread0 . toString ( ) )
assertEquals ( "Thread - 1391" , updateThread0 . getName ( ) )
assertEquals ( 1 . 0F , integer0 . floatValue ( ) , 0 . 01F )
assertNull ( databaseStarter0 . getName ( ) )
assertNull ( databaseStarter0 . getName ( ) )
assertNull ( databaseStarter0 . getName ( ) )
assertNull ( databaseStarter0 . getName ( ) )
assertNull ( databaseStarter0 . getName ( ) )
assertNull ( databaseStarter0 . getName ( ) )
assertNull ( databaseStarter0 . getName ( ) )
assertNull ( actionPair1 )
assertNull ( databaseStarter0 . getName ( ) )
assertNull ( databaseStarter0 . getName ( ) )
assertNull ( databaseStarter0 . getName ( ) )
assertNull ( databaseStarter0 . getName ( ) )
assertEquals ( 0 , integer0 . byteValue ( ) )
assertNull ( databaseStarter0 . getName ( ) )
assertNull ( databaseStarter0 . getName ( ) )
assertNull ( databaseStarter0 . getName ( ) )
assertNull ( databaseStarter0 . getName ( ) )
assertNull ( databaseStarter0 . getName ( ) )
assertEquals ( 0 , integer0 . byteValue ( ) )
assertEquals ( "ac1gf@localhost" , mindMapMaster0 . getUsers ( ) )
assertEquals ( 0 , mindMapMaster0 . getPort ( ) )
assertEquals ( "ac1gf@localhost" , mindMapMaster0 . getUsers ( ) )
assertNull ( mindMapMaster0 . getName ( ) )
assertNull ( mindMapMaster0 . getName ( ) )
assertEquals ( "ac1gf@localhost" , mindMapMaster0 . getUsers ( ) )
assertEquals ( 0 , mindMapMaster0 . getPort ( ) )
assertNotNull ( collaborationUserInformation0 )
assertNull ( mindMapMaster0 . getPassword ( ) )
assertEquals ( "ac1gf@localhost" , mindMapMaster0 . getUsers ( ) )
assertEquals ( "ac1gf@localhost" , mindMapMaster0 . getUsers ( ) )
assertEquals ( 0 , mindMapMaster0 . getPort ( ) )
assertEquals ( 0 , mindMapClient0 . getPort ( ) )
assertNotNull ( actionPair0 )
assertNotNull ( string0 )
assertEquals ( 0 , mindMapClient0 . getPort ( ) )
assertNull ( mindMapClient0 . getName ( ) )
assertEquals ( 0 , int0 )
assertEquals ( 1L , integer0 . longValue ( ) )
assertNull ( string0 )
assertEquals ( 0 , mindMapClient0 . getPort ( ) )
assertNull ( collaborationUserInformation0 )
assertNull ( socketConnectionHook0 . getName ( ) )
assertNull ( socketConnectionHook0 . getPassword ( ) )
assertNull ( socketConnectionHook0 . getName ( ) )
assertNull ( socketConnectionHook0 . getName ( ) )
assertNull ( socketConnectionHook0 . getPassword ( ) )
assertNull ( socketConnectionHook0 . getPassword ( ) )
assertEquals ( 1 , integer0 . intValue ( ) )
assertNull ( socketConnectionHook0 . getName ( ) )
assertNull ( socketConnectionHook0 . getName ( ) )
assertNull ( socketConnectionHook0 . getPassword ( ) )
assertNull ( socketConnectionHook0 . getName ( ) )
assertNull ( clientCommunication0 )
assertNull ( socketConnectionHook0 . getName ( ) )
assertNull ( socketConnectionHook0 . getName ( ) )
assertNull ( socketConnectionHook0 . getPassword ( ) )
assertNull ( socketConnectionHook0 . getName ( ) )
assertEquals ( "" , scriptEditorPanel_ScriptHolder1 . getScript ( ) )
assertSame ( scriptEditorPanel_ScriptHolder0 , scriptEditorPanel_ScriptHolder1 )
assertEquals ( "" , string0 )
assertEquals ( "" , string0 )
assertNull ( scriptEditor0 . getName ( ) )
assertNull ( scriptingEngine0 . getName ( ) )
assertEquals ( 1567 , int0 )
assertNull ( latexNodeHook0 . getName ( ) )
assertEquals ( "" , xMLElement0 . toString ( ) )
assertNull ( latexNodeHook0 . getName ( ) )
assertNull ( freemindHelpStarter0 . getName ( ) )
