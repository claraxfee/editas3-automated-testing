void test1 ( ) throws Throwable { Book [ ] bookArray0 = Book . GetAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Book [ ] GetAll ( ) { return books ; }
void test2 ( ) throws Throwable { Reference reference0 = new Reference ( 1832 , 1832 , ( - 1009 ) ) ; int int0 = reference0 . getBookId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test3 ( ) throws Throwable { Reference reference0 = new Reference ( 1832 , 1832 , ( - 1009 ) ) ; int int0 = reference0 . getChapterNo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test6 ( ) throws Throwable { Reference reference0 = new Reference ( 1832 , 1832 , ( - 1009 ) ) ; int int0 = reference0 . getVerseNo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test7 ( ) throws Throwable { Reference reference0 = new Reference ( 1832 , 1832 , ( - 1009 ) ) ; String string0 = reference0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test8 ( ) throws Throwable { Reference reference0 = new Reference ( 1832 , 1832 , ( - 1009 ) ) ; Reference reference1 = new Reference ( reference0 , reference0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test1 ( ) throws Throwable { Translation [ ] translationArray0 = Translation . GetAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Book [ ] GetAll ( ) { return books ; }
void test2 ( ) throws Throwable { int int0 = Translation . Normalize ( ( - 1274 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int Normalize ( int id ) { if ( ( id < 0 ) | | ( id > = translations . length ) | | ( translations [ id ] = = null ) ) { return defaultId ; } else { return id ; } }
void test0 ( ) throws Throwable { Reference reference0 = new Reference ( 0 , 0 , 0 ) ; ReferenceRange referenceRange0 = new ReferenceRange ( reference0 ) ; String string0 = referenceRange0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test2 ( ) throws Throwable { Reference reference0 = new Reference ( 66 , 66 , 0 ) ; ReferenceRange referenceRange0 = new ReferenceRange ( reference0 , reference0 ) ; referenceRange0 . setEnd ( reference0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test3 ( ) throws Throwable { Reference reference0 = new Reference ( 0 , 0 , 0 ) ; ReferenceRange referenceRange0 = new ReferenceRange ( reference0 ) ; referenceRange0 . getEnd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test4 ( ) throws Throwable { Reference reference0 = new Reference ( 0 , 0 , 0 ) ; ReferenceRange referenceRange0 = new ReferenceRange ( reference0 ) ; Reference reference1 = referenceRange0 . getBegin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test0 ( ) throws Throwable { Verse verse0 = Verse . New ( 1141 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test1 ( ) throws Throwable { Verse verse0 = Verse . New ( 17 ) ; TranslationReference translationReference0 = verse0 . getTranslationReference ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TranslationReference getTranslationReference ( ) { return transRef ; }
void test3 ( ) throws Throwable { Verse verse0 = Verse . New ( ( - 16 ) ) ; String string0 = verse0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { / / Identifible interface return getName ( ) ; }
void test5 ( ) throws Throwable { Verse verse0 = Verse . New ( ( - 16 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test7 ( ) throws Throwable { Reference reference0 = new Reference ( ( - 1404 ) , ( - 1404 ) , ( - 1404 ) ) ; ArrayList < Object > arrayList0 = Verse . Get ( ( Translation [ ] ) null , reference0 , reference0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( first = = null ) ; }
void test9 ( ) throws Throwable { int int0 = Verse . GetId ( ( - 1641 ) , 17 , ( - 1641 ) , 66 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int GetId ( Translation translation , Book book , int chapterId , int verseId ) { return GetId ( translation . getId ( ) , book . getId ( ) , chapterId , verseId ) ; }
void test1 ( ) throws Throwable { TranslationReference translationReference0 = new TranslationReference ( ( Translation ) null , ( Reference ) null ) ; String string0 = translationReference0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test2 ( ) throws Throwable { TranslationReference translationReference0 = new TranslationReference ( ( Translation ) null , ( Reference ) null ) ; Reference reference0 = translationReference0 . getReference ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Reference getReference ( ) { return ref ; }
void test3 ( ) throws Throwable { TranslationReference translationReference0 = new TranslationReference ( ( Translation ) null , ( Reference ) null ) ; Translation translation0 = translationReference0 . getTranslation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Translation getTranslation ( ) { return translation ; }
void test0 ( ) throws Throwable { Base . Options base_Options0 = Base . GetOptions ( ) ; String string0 = base_Options0 . getMailServerIP ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Options GetOptions ( ) { return options ; }
void test1 ( ) throws Throwable { Base . Options base_Options0 = new Base . Options ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { Base . Options base_Options0 = new Base . Options ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { Base . Options base_Options0 = Base . GetOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Options GetOptions ( ) { return options ; }
void test4 ( ) throws Throwable { Base . Options base_Options0 = new Base . Options ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test5 ( ) throws Throwable { Base . Options base_Options0 = new Base . Options ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test6 ( ) throws Throwable { Base . Options base_Options0 = new Base . Options ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test7 ( ) throws Throwable { Base . Options base_Options0 = new Base . Options ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test9 ( ) throws Throwable { Base . Options base_Options0 = new Base . Options ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test10 ( ) throws Throwable { Base . Options base_Options0 = new Base . Options ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test11 ( ) throws Throwable { Date date0 = Base . GetStartTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date GetStartTime ( ) { return StartTime ; }
void test12 ( ) throws Throwable { String string0 = Base . GetHostName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String GetHostName ( ) { return HostName ; }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Base . Options base_Options0 = new Base . Options ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void get ( ServletConnection conn ) throws ServletException , java . io . IOException { }
void test2 ( ) throws Throwable { ServletUtil servletUtil0 = new ServletUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { int [ ] intArray0 = ServletUtil . GetIntParameters ( ( String [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] GetIntParameters ( HttpServletRequest request , String name ) { return GetIntParameters ( request . getParameterValues ( name ) ) ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "" ; int [ ] intArray0 = ServletUtil . GetIntParameters ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] GetIntParameters ( HttpServletRequest request , String name ) { return GetIntParameters ( request . getParameterValues ( name ) ) ; }
void test8 ( ) throws Throwable { int int0 = ServletUtil . GetIntParameter ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int GetIntParameter ( HttpServletRequest request , String name ) { return GetIntParameter ( request . getParameter ( name ) ) ; }
void test9 ( ) throws Throwable { int int0 = ServletUtil . GetIntParameter ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int GetIntParameter ( HttpServletRequest request , String name ) { return GetIntParameter ( request . getParameter ( name ) ) ; }
void test0 ( ) throws Throwable { HTMLOutputStream hTMLOutputStream0 = new HTMLOutputStream ( ( HttpServletResponse ) null ) ; PrintWriter printWriter0 = hTMLOutputStream0 . getPW ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PrintWriter getPW ( ) { return sos . getPW ( ) ; }
void test1 ( ) throws Throwable { HTMLOutputStream hTMLOutputStream0 = new HTMLOutputStream ( ( HttpServletResponse ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test2 ( ) throws Throwable { HTMLOutputStream hTMLOutputStream0 = new HTMLOutputStream ( ( HttpServletResponse ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String reset ( ) { String contents = baos . toString ( ) ; baos . reset ( ) ; return contents ; }
void test4 ( ) throws Throwable { HTMLOutputStream hTMLOutputStream0 = new HTMLOutputStream ( ( HttpServletResponse ) null ) ; hTMLOutputStream0 . print ( "bible . servlet . HTMLOutputStream : [ size = 4 , response = null , baos , pw ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String reset ( ) { String contents = baos . toString ( ) ; baos . reset ( ) ; return contents ; }
void test5 ( ) throws Throwable { HTMLOutputStream hTMLOutputStream0 = new HTMLOutputStream ( ( HttpServletResponse ) null ) ; hTMLOutputStream0 . print ( 112 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test6 ( ) throws Throwable { HTMLOutputStream hTMLOutputStream0 = new HTMLOutputStream ( ( HttpServletResponse ) null ) ; String string0 = hTMLOutputStream0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String reset ( ) { String contents = baos . toString ( ) ; baos . reset ( ) ; return contents ; }
void test7 ( ) throws Throwable { HTMLOutputStream hTMLOutputStream0 = new HTMLOutputStream ( ( HttpServletResponse ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test2 ( ) throws Throwable { String string0 = Logger . FormatDate ( 17L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String FormatDate ( long time ) { return LongEntryDateFormat . format ( new Date ( time ) ) ; }
void test0 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( ( - 406 ) ) ; int int0 = dbConnectionAttributes0 . getIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLogString ( ) { return index + " " + status + " " + Logger . FormatDate ( creationTime ) + "\t" + query ; }
void test1 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( ( - 406 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStatusString ( ) { switch ( status ) { case INUSE : return "InUse ( Connected ) " ; case FREE : return "Free ( Connected - Not Used ) " ; case NOTUSED : return "NotUsed ( Not Connected ) " ; default : return "NOT KNOWN" ; } }
void test2 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( 1002 ) ; dbConnectionAttributes0 . init ( "1002 2 Thu Jan 01 , 1970 00 : 59 : 59 . 0999 GMT\tnull" ) ; dbConnectionAttributes0 . getException ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLogString ( ) { return index + " " + status + " " + Logger . FormatDate ( creationTime ) + "\t" + query ; }
void test3 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( 1002 ) ; String string0 = dbConnectionAttributes0 . toLogString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLogString ( ) { return index + " " + status + " " + Logger . FormatDate ( creationTime ) + "\t" + query ; }
void test4 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( ( - 92 ) ) ; String string0 = dbConnectionAttributes0 . getConnection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreationDate ( ) { return ( new Date ( creationTime ) ) . toString ( ) ; }
void test6 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( 0 ) ; long long0 = dbConnectionAttributes0 . getCreationTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLogString ( ) { return index + " " + status + " " + Logger . FormatDate ( creationTime ) + "\t" + query ; }
void test7 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( 799 ) ; String string0 = dbConnectionAttributes0 . getStatement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return index ; }
void test10 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( 799 ) ; dbConnectionAttributes0 . getQuery ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLogString ( ) { return index + " " + status + " " + Logger . FormatDate ( creationTime ) + "\t" + query ; }
void test11 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( 2 ) ; dbConnectionAttributes0 . free ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { return index ; }
void test13 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( 0 ) ; String string0 = dbConnectionAttributes0 . getCreationDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLogString ( ) { return index + " " + status + " " + Logger . FormatDate ( creationTime ) + "\t" + query ; }
void test15 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( 21 ) ; dbConnectionAttributes0 . drop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNotUsed ( ) { return status = = NOTUSED ; }
void test19 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( 0 ) ; dbConnectionAttributes0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCreationTime ( ) { return creationTime ; }
void test20 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( 2 ) ; dbConnectionAttributes0 . getException ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFree ( ) { return status = = FREE ; }
void test21 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( 0 ) ; dbConnectionAttributes0 . use ( 0 ) ; boolean boolean0 = dbConnectionAttributes0 . isFree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLogString ( ) { return index + " " + status + " " + Logger . FormatDate ( creationTime ) + "\t" + query ; }
void test22 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( 799 ) ; boolean boolean0 = dbConnectionAttributes0 . isFree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLogString ( ) { return index + " " + status + " " + Logger . FormatDate ( creationTime ) + "\t" + query ; }
void test23 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( 799 ) ; boolean boolean0 = dbConnectionAttributes0 . isInUse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLogString ( ) { return index + " " + status + " " + Logger . FormatDate ( creationTime ) + "\t" + query ; }
void test24 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( ( - 406 ) ) ; dbConnectionAttributes0 . use ( ( - 406 ) ) ; boolean boolean0 = dbConnectionAttributes0 . isInUse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLogString ( ) { return index + " " + status + " " + Logger . FormatDate ( creationTime ) + "\t" + query ; }
void test25 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( 1002 ) ; boolean boolean0 = dbConnectionAttributes0 . isNotUsed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLogString ( ) { return index + " " + status + " " + Logger . FormatDate ( creationTime ) + "\t" + query ; }
void test26 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( ( - 1 ) ) ; boolean boolean0 = dbConnectionAttributes0 . isClosed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLogString ( ) { return index + " " + status + " " + Logger . FormatDate ( creationTime ) + "\t" + query ; }
void test27 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( 21 ) ; String string0 = dbConnectionAttributes0 . toShortString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLogString ( ) { return index + " " + status + " " + Logger . FormatDate ( creationTime ) + "\t" + query ; }
void test28 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( 1002 ) ; dbConnectionAttributes0 . init ( "1002 2 Thu Jan 01 , 1970 00 : 59 : 59 . 0999 GMT\tnull" ) ; String string0 = dbConnectionAttributes0 . toShortString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLogString ( ) { return index + " " + status + " " + Logger . FormatDate ( creationTime ) + "\t" + query ; }
void test29 ( ) throws Throwable { DbConnectionAttributes dbConnectionAttributes0 = new DbConnectionAttributes ( ( - 406 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLogString ( ) { return index + " " + status + " " + Logger . FormatDate ( creationTime ) + "\t" + query ; }
void test4 ( ) throws Throwable { DbConnectionBroker dbConnectionBroker0 = Database . GetConnectionBroker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxReached ( ) { return maxReached ; }
void test12 ( ) throws Throwable { String string0 = Database . Escape ( " + . \" ] @4'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String Escape ( String s ) { int index = s . indexOf ( ESCAPE_CHAR ) ; if ( index ! = - 1 ) { s = s . substring ( 0 , index ) + ESCAPE_CHAR + ESCAPE_CHAR + Escape ( s . substring ( index + 1 ) ) ; } return s ; }
void test4 ( ) throws Throwable { DbConnectionBroker dbConnectionBroker0 = new DbConnectionBroker ( ) ; DbResult dbResult0 = new DbResult ( ( DbConnectionAttributes ) null , ( ResultSet ) null , dbConnectionBroker0 ) ; String string0 = dbResult0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test1 ( ) throws Throwable { String string0 = Util . ToString ( ( Vector ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ToString ( Throwable e ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; e . printStackTrace ( pw ) ; pw . close ( ) ; return sw . toString ( ) ; }
void test2 ( ) throws Throwable { Util util0 = new Util ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { int [ ] intArray0 = new int [ 3 ] ; String string0 = Util . ToString ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ToString ( Throwable e ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; e . printStackTrace ( pw ) ; pw . close ( ) ; return sw . toString ( ) ; }
void test4 ( ) throws Throwable { int [ ] intArray0 = Util . ToIntArray ( "" , "" ) ; String string0 = Util . ToString ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ToString ( Throwable e ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; e . printStackTrace ( pw ) ; pw . close ( ) ; return sw . toString ( ) ; }
void test5 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 1 ] ; String string0 = Util . ToString ( objectArray0 , true , " ( vP | \"7cs . J@Hc2jT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ToString ( Throwable e ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; e . printStackTrace ( pw ) ; pw . close ( ) ; return sw . toString ( ) ; }
void test6 ( ) throws Throwable { Vector < Vector < Serializable > > vector0 = new Vector < Vector < Serializable > > ( ) ; Vector < Serializable > vector1 = new Vector < Serializable > ( ) ; vector0 . insertElementAt ( vector1 , 0 ) ; String string0 = Util . ToString ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ToString ( Throwable e ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; e . printStackTrace ( pw ) ; pw . close ( ) ; return sw . toString ( ) ; }
void test7 ( ) throws Throwable { Identifible [ ] identifibleArray0 = new Identifible [ 1 ] ; Verse verse0 = Verse . New ( 97 ) ; identifibleArray0 [ 0 ] = ( Identifible ) verse0 ; String string0 = Util . ToString ( ( Object [ ] ) identifibleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ToString ( Throwable e ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; e . printStackTrace ( pw ) ; pw . close ( ) ; return sw . toString ( ) ; }
void test8 ( ) throws Throwable { String [ ] stringArray0 = Util . ToStringArray ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ToString ( Throwable e ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; e . printStackTrace ( pw ) ; pw . close ( ) ; return sw . toString ( ) ; }
void test9 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; String string0 = Util . ToString ( stringArray0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ToString ( Throwable e ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; e . printStackTrace ( pw ) ; pw . close ( ) ; return sw . toString ( ) ; }
void test10 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 7 ] ; objectArray0 [ 0 ] = ( Object ) "0 - uS | / " ; objectArray0 [ 1 ] = ( Object ) "0 - uS | / " ; objectArray0 [ 2 ] = ( Object ) "0 - uS | / " ; objectArray0 [ 3 ] = ( Object ) "0 - uS | / " ; objectArray0 [ 4 ] = ( Object ) "0 - uS | / " ; objectArray0 [ 5 ] = ( Object ) "0 - uS | / " ; objectArray0 [ 6 ] = ( Object ) "0 - uS | / " ; String [ ] stringArray0 = Util . ToStringArray ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] ToStringArray ( Object [ ] objects ) { String [ ] returnValues = new String [ objects . length ] ; for ( int index = 0 ; index < objects . length ; index + + ) { returnValues [ index ] = objects [ index ] . toString ( ) ; } return returnValues ; }
void test11 ( ) throws Throwable { String [ ] stringArray0 = Util . ToStringArray ( ( Vector ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] ToStringArray ( Object [ ] objects ) { String [ ] returnValues = new String [ objects . length ] ; for ( int index = 0 ; index < objects . length ; index + + ) { returnValues [ index ] = objects [ index ] . toString ( ) ; } return returnValues ; }
void test12 ( ) throws Throwable { Vector < Serializable > vector0 = new Vector < Serializable > ( ) ; String [ ] stringArray0 = Util . ToStringArray ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] ToStringArray ( Object [ ] objects ) { String [ ] returnValues = new String [ objects . length ] ; for ( int index = 0 ; index < objects . length ; index + + ) { returnValues [ index ] = objects [ index ] . toString ( ) ; } return returnValues ; }
void test13 ( ) throws Throwable { String [ ] stringArray0 = Util . ToStringArray ( "0 - null" , " ( vP | \"7cs . J@Hc2jT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] ToStringArray ( Object [ ] objects ) { String [ ] returnValues = new String [ objects . length ] ; for ( int index = 0 ; index < objects . length ; index + + ) { returnValues [ index ] = objects [ index ] . toString ( ) ; } return returnValues ; }
void test15 ( ) throws Throwable { String [ ] stringArray0 = Util . ToStringArray ( "" , "" ) ; int [ ] intArray0 = Util . ToIntArray ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] ToIntArray ( String items , String separator ) { StringTokenizer st = new StringTokenizer ( items , separator , false ) ; int count = st . countTokens ( ) ; int [ ] returnValue = new int [ count ] ; for ( int index = 0 ; index < count ; index + + ) { returnValue [ index ] = Integer . parseInt ( st . nextToken ( ) ) ; } return returnValue ; }
void test17 ( ) throws Throwable { Identifible [ ] identifibleArray0 = new Identifible [ 1 ] ; Verse verse0 = Verse . New ( 97 ) ; identifibleArray0 [ 0 ] = ( Identifible ) verse0 ; int [ ] intArray0 = Util . ToIntArray ( identifibleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Vector ToVector ( Object [ ] objects ) { Vector position = new Vector ( objects . length ) ; for ( int index = 0 ; index < objects . length ; index + + ) { position . addElement ( objects [ index ] ) ; } return position ; }
void test18 ( ) throws Throwable { Identifible [ ] identifibleArray0 = new Identifible [ 1 ] ; Vector < Object > vector0 = Util . ToVector ( ( Object [ ] ) identifibleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Vector ToVector ( Object [ ] objects ) { Vector position = new Vector ( objects . length ) ; for ( int index = 0 ; index < objects . length ; index + + ) { position . addElement ( objects [ index ] ) ; } return position ; }
void test19 ( ) throws Throwable { String string0 = Util . Replace ( "0 - uS | / " , "0 - uS | / " , "0 - uS | / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String Replace ( String original , String from , String to ) { String replaced = original ; String start ; / / look for the next from after the last replacement for ( int index = replaced . indexOf ( from ) ; index > = 0 ; index = replaced . indexOf ( from , index + to . length ( ) ) ) { start = replaced . substring ( 0 , index ) + to ; if ( index + from . length ( ) + 1 < = replaced . length ( ) ) { / / There is something after replaced piece replaced = start + replaced . substring ( index + from . length ( ) ) ; } else { replaced = start ; } } return replaced ; }
void test20 ( ) throws Throwable { long long0 = Util . GetSize ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long GetSize ( Object obj ) throws IOException { long objSize = - 1 ; if ( obj instanceof Serializable ) { try { ByteArrayOutputStream os = new ByteArrayOutputStream ( ) ; ObjectOutputStream oos = new ObjectOutputStream ( os ) ; oos . writeObject ( obj ) ; oos . flush ( ) ; objSize = os . size ( ) ; os . close ( ) ; } catch ( Exception e ) { Logger . Log ( e , "obj = " + obj ) ; } } return objSize ; }
void test21 ( ) throws Throwable { String [ ] stringArray0 = Util . ToStringArray ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long GetSize ( Object obj ) throws IOException { long objSize = - 1 ; if ( obj instanceof Serializable ) { try { ByteArrayOutputStream os = new ByteArrayOutputStream ( ) ; ObjectOutputStream oos = new ObjectOutputStream ( os ) ; oos . writeObject ( obj ) ; oos . flush ( ) ; objSize = os . size ( ) ; os . close ( ) ; } catch ( Exception e ) { Logger . Log ( e , "obj = " + obj ) ; } } return objSize ; }
void test0 ( ) throws Throwable { LookAheadStringTokenizer lookAheadStringTokenizer0 = new LookAheadStringTokenizer ( " } " , " } " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LookAheadStringTokenizer ( String str ) { super ( str ) ; finishConstruction ( ) ; }
void test0 ( ) throws Throwable { DbConnectionBroker dbConnectionBroker0 = new DbConnectionBroker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMin ( ) { return min ; }
void test1 ( ) throws Throwable { DbConnectionBroker dbConnectionBroker0 = new DbConnectionBroker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMax ( ) { return max ; }
void test2 ( ) throws Throwable { DbConnectionBroker dbConnectionBroker0 = new DbConnectionBroker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMin ( ) { return min ; }
void test3 ( ) throws Throwable { DbConnectionBroker dbConnectionBroker0 = new DbConnectionBroker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMin ( ) { return min ; }
void test4 ( ) throws Throwable { DbConnectionBroker dbConnectionBroker0 = new DbConnectionBroker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMin ( ) { return min ; }
void test5 ( ) throws Throwable { DbConnectionBroker dbConnectionBroker0 = new DbConnectionBroker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMax ( ) { return max ; }
void test6 ( ) throws Throwable { DbConnectionBroker dbConnectionBroker0 = new DbConnectionBroker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMax ( ) { return max ; }
void test7 ( ) throws Throwable { DbConnectionBroker dbConnectionBroker0 = new DbConnectionBroker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DbConnectionAttributes getConnectionAttributes ( ) throws SQLException { / / Needs revisit to make it efficient for ( int index = 0 ; index < min ; index + + ) { if ( connectionAttributesArray [ index ] . isFree ( ) ) { if ( connectionAttributesArray [ index ] . isClosed ( ) ) { connectionAttributesArray [ index ] . connect ( DriverManager . getConnection ( options . getURL ( ) , options . getUsername ( ) , options . getPassword ( ) ) ) ; } connectionAttributesArray [ index ] . use ( index ) ; maxConnections + + ; if ( maxReached < maxConnections ) { maxReached = maxConnections ; } return connectionAttributesArray [ index ] ; } } for ( int index = min ; index < max ; index + + ) { if ( connectionAttributesArray [ index ] . isNotUsed ( ) ) { connectionAttributesArray [ index ] . connect ( DriverManager . getConnection ( options . getURL ( ) , options . getUsername ( ) , options . getPassword ( ) ) ) ; connectionAttributesArray [ index ] . use ( index ) ; maxConnections + + ; if ( maxReached < maxConnections ) { maxReached = maxConnections ; } return connectionAttributesArray [ index ] ; } } / / Ran out of connections System . err . println ( "All Database Connections used" ) ; for ( int index = 0 ; index < max ; index + + ) { / / Print out current used connections . System . err . println ( connectionAttributesArray [ index ] ) ; } throw new SQLException ( "Database server is busy . The database can have ( min = " + min + " , max = " + max + " ) connections . " ) ; }
void test8 ( ) throws Throwable { DbConnectionBroker dbConnectionBroker0 = new DbConnectionBroker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test9 ( ) throws Throwable { DbConnectionBroker dbConnectionBroker0 = new DbConnectionBroker ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMax ( ) { return max ; }
void test0 ( ) throws Throwable { Queue queue0 = new Queue ( ( - 1935 ) ) ; int int0 = queue0 . getPeakNumberItems ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test1 ( ) throws Throwable { Queue queue0 = new Queue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test2 ( ) throws Throwable { Queue queue0 = new Queue ( ( - 1 ) ) ; int int0 = queue0 . getNumberItems ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test3 ( ) throws Throwable { Queue queue0 = new Queue ( ( - 1 ) ) ; queue0 . enqueue ( ( Object ) "bible . util . Queue : [ numItems = 0 , maxNumItems = 0 , maxCapacity = - 1 , getObjects ( ) = [ ] \r\n ] " ) ; Object object0 = new Object ( ) ; queue0 . enqueue ( object0 ) ; queue0 . dequeue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPeakNumberItems ( ) { return maxNumItems ; }
void test4 ( ) throws Throwable { Queue queue0 = new Queue ( 1015 ) ; queue0 . refreshElement ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPeakNumberItems ( ) { return maxNumItems ; }
void test5 ( ) throws Throwable { Queue queue0 = new Queue ( ( - 1 ) ) ; Object object0 = new Object ( ) ; queue0 . enqueue ( object0 ) ; queue0 . refreshElement ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberItems ( ) { return numItems ; }
void test6 ( ) throws Throwable { Queue queue0 = new Queue ( ( - 1 ) ) ; queue0 . enqueue ( ( Object ) "bible . util . Queue : [ numItems = 0 , maxNumItems = 0 , maxCapacity = - 1 , getObjects ( ) = [ ] \r\n ] " ) ; queue0 . dequeue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test7 ( ) throws Throwable { Queue queue0 = new Queue ( ( - 1935 ) ) ; queue0 . dequeue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPeakNumberItems ( ) { return maxNumItems ; }
void test8 ( ) throws Throwable { Queue queue0 = new Queue ( ( - 1 ) ) ; Object object0 = new Object ( ) ; queue0 . enqueue ( ( Object ) "bible . util . Queue : [ numItems = 0 , maxNumItems = 0 , maxCapacity = - 1 , getObjects ( ) = [ ] \r\n ] " ) ; Object object1 = new Object ( ) ; queue0 . enqueue ( object0 ) ; queue0 . refreshElement ( object1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberItems ( ) { return numItems ; }
void test9 ( ) throws Throwable { Queue queue0 = new Queue ( ( - 1 ) ) ; queue0 . enqueue ( ( Object ) "bible . util . Queue : [ numItems = 0 , maxNumItems = 0 , maxCapacity = - 1 , getObjects ( ) = [ ] \r\n ] " ) ; Object object0 = new Object ( ) ; queue0 . enqueue ( object0 ) ; queue0 . enqueue ( object0 ) ; queue0 . refreshElement ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberItems ( ) { return numItems ; }
void test10 ( ) throws Throwable { Queue queue0 = new Queue ( ( - 1 ) ) ; Object object0 = new Object ( ) ; queue0 . refreshElement ( object0 ) ; queue0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean maxCapacityExceeded ( ) { return ( numItems > ( maxCapacity - 1 ) ) & & ( maxCapacity ! = NO_MAXIMUM ) ; }
void test11 ( ) throws Throwable { Queue queue0 = new Queue ( 1015 ) ; boolean boolean0 = queue0 . maxCapacityExceeded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test12 ( ) throws Throwable { Queue queue0 = new Queue ( ( - 1 ) ) ; boolean boolean0 = queue0 . maxCapacityExceeded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
void test13 ( ) throws Throwable { Queue queue0 = new Queue ( ( - 552 ) ) ; boolean boolean0 = queue0 . maxCapacityExceeded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return getClass ( ) . getName ( ) + " : [ " + id + " " + name + " ] " ; }
