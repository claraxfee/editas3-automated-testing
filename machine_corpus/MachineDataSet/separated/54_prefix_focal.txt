void test0 ( ) throws Throwable { PostgresqlViewStructure postgresqlViewStructure0 = new PostgresqlViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ViewStatusBean viewStatusBean0 = postgresqlViewStructure0 . getStatus ( dBDataBean0 , " = NL " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test3 ( ) throws Throwable { PostgresqlViewStructure postgresqlViewStructure0 = new PostgresqlViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ViewStructureBean viewStructureBean0 = postgresqlViewStructure0 . getStructure ( dBDataBean0 , "Ne" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getViewName ( ) { return viewName ; }
void test5 ( ) throws Throwable { PostgresqlViewStructure postgresqlViewStructure0 = new PostgresqlViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; boolean boolean0 = postgresqlViewStructure0 . isView ( dBDataBean0 , "Ne" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isView ( DBDataBean dataBean , String viewName ) { boolean isView = false ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "select count ( * ) c from sys . systables where TABLETYPE = 'V' and TABLENAME = '" + viewName + "' " ) ; while ( rs . next ( ) ) { int count = rs . getInt ( "c" ) ; if ( count > 0 ) { isView = true ; } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } return isView ; }
void test8 ( ) throws Throwable { PostgresqlTableStructure postgresqlTableStructure0 = new PostgresqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStatusBean tableStatusBean0 = postgresqlTableStructure0 . getStatus ( dBDataBean0 , "C9 - t" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test9 ( ) throws Throwable { PostgresqlTableStructure postgresqlTableStructure0 = new PostgresqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStatusBean tableStatusBean0 = postgresqlTableStructure0 . getStatus ( dBDataBean0 , " F5re en ( ) for " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test10 ( ) throws Throwable { PostgresqlTableStructure postgresqlTableStructure0 = new PostgresqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStructureBean tableStructureBean0 = postgresqlTableStructure0 . getStructure ( dBDataBean0 , "' doesn't map to an existing object" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test13 ( ) throws Throwable { PostgresqlTableStructure postgresqlTableStructure0 = new PostgresqlTableStructure ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "to" ) ; ArrayList < Object > arrayList0 = postgresqlTableStructure0 . alterModify ( ( HttpServletRequest ) null , ( DBDataBean ) null , "to" , columnBean0 , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test16 ( ) throws Throwable { PostgresqlTableStructure postgresqlTableStructure0 = new PostgresqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "ENUM" ) ; ArrayList < Object > arrayList0 = postgresqlTableStructure0 . alterAdd ( ( HttpServletRequest ) null , dBDataBean0 , "ENUM" , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test17 ( ) throws Throwable { PostgresqlTableStructure postgresqlTableStructure0 = new PostgresqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; createTableXmlBean0 . addColumn ( ( ColumnBean ) null ) ; ArrayList < Object > arrayList0 = postgresqlTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test18 ( ) throws Throwable { PostgresqlTableStructure postgresqlTableStructure0 = new PostgresqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; ArrayList < Object > arrayList0 = postgresqlTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test19 ( ) throws Throwable { PostgresqlTableStructure postgresqlTableStructure0 = new PostgresqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setName ( "Cannot add nodes ( o an attribute node ! " ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; ArrayList < Object > arrayList0 = postgresqlTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test20 ( ) throws Throwable { PostgresqlTableStructure postgresqlTableStructure0 = new PostgresqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setKey ( true ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setName ( "Cannot add nodes ( o an attribute node ! " ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; ArrayList < Object > arrayList0 = postgresqlTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test21 ( ) throws Throwable { PostgresqlTableStructure postgresqlTableStructure0 = new PostgresqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; createTableXmlBean0 . setComment ( " F5re en ( ) for " ) ; ArrayList < Object > arrayList0 = postgresqlTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test0 ( ) throws Throwable { PostgresqlTableList postgresqlTableList0 = new PostgresqlTableList ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ArrayList < Object > arrayList0 = postgresqlTableList0 . getTableList ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test0 ( ) throws Throwable { PostgresqlDataBase postgresqlDataBase0 = new PostgresqlDataBase ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = postgresqlDataBase0 . testLogin ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String testLogin ( DBDataBean dataBean ) { String test = "" ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( LOGIN_QUERY ) ; while ( rs . next ( ) ) { String res = rs . getString ( 1 ) ; } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } } } return test ; }
void test0 ( ) throws Throwable { PostgresqlDataBaseList postgresqlDataBaseList0 = new PostgresqlDataBaseList ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ArrayList < Object > arrayList0 = postgresqlDataBaseList0 . getDataBaseList ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList getDataBaseList ( DBDataBean dataBean ) { ArrayList dbList = new ArrayList ( ) ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; / / ResultSet rs = stmt . executeQuery ( "SHOW TABLES ; " ) ; ResultSet rs = stmt . executeQuery ( "select datname from pg_database where datname ! ~ '^template + ' order by datname" ) ; while ( rs . next ( ) ) { DataBaseBean dbBean = new DataBaseBean ( ) ; String tableName = rs . getString ( 1 ) ; dbBean . setName ( tableName ) ; dbList . add ( dbBean ) ; } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } return dbList ; }
void test1 ( ) throws Throwable { OracleSequenceStructure oracleSequenceStructure0 = new OracleSequenceStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ArrayList < Object > arrayList0 = oracleSequenceStructure0 . getList ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList getList ( DBDataBean dataBean ) { ArrayList sequences = new ArrayList ( ) ; / * Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "SHOW TABLE STATUS " ) ; while ( rs . next ( ) ) { String name = rs . getString ( "NAME" ) ; String auto = rs . getString ( "Auto_Increment" ) ; if ( auto ! = null ) { SequenceStructureBean sequenceStructureBean = new SequenceStructureBean ( ) ; sequenceStructureBean . setName ( name ) ; sequenceStructureBean . setMinValue ( 1 ) ; sequenceStructureBean . setMaxValue ( "" ) ; sequenceStructureBean . setIncrementBy ( 1 ) ; sequenceStructureBean . setLastNumber ( rs . getInt ( "Auto_Increment" ) ) ; sequences . add ( sequenceStructureBean ) ; } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } * / return sequences ; }
void test2 ( ) throws Throwable { OracleSequenceStructure oracleSequenceStructure0 = new OracleSequenceStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setName ( "%4 , ia > l + - 0X { . " ) ; ArrayList < Object > arrayList0 = oracleSequenceStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , sequenceForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test3 ( ) throws Throwable { OracleSequenceStructure oracleSequenceStructure0 = new OracleSequenceStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setStart ( "%4 , ia > l + - 0X { . " ) ; ArrayList < Object > arrayList0 = oracleSequenceStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , sequenceForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test4 ( ) throws Throwable { OracleSequenceStructure oracleSequenceStructure0 = new OracleSequenceStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setMin ( "%4 , ia > l + - 0X { . " ) ; ArrayList < Object > arrayList0 = oracleSequenceStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , sequenceForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test5 ( ) throws Throwable { OracleSequenceStructure oracleSequenceStructure0 = new OracleSequenceStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setMax ( "%4 , ia > l + - 0X { . " ) ; ArrayList < Object > arrayList0 = oracleSequenceStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , sequenceForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test6 ( ) throws Throwable { OracleSequenceStructure oracleSequenceStructure0 = new OracleSequenceStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setCycle ( "%4 , ia > l + - 0X { . " ) ; ArrayList < Object > arrayList0 = oracleSequenceStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , sequenceForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test7 ( ) throws Throwable { OracleSequenceStructure oracleSequenceStructure0 = new OracleSequenceStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setCache ( "%4 , ia > l + - 0X { . " ) ; ArrayList < Object > arrayList0 = oracleSequenceStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , sequenceForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test0 ( ) throws Throwable { OracleViewStructure oracleViewStructure0 = new OracleViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ViewStatusBean viewStatusBean0 = oracleViewStructure0 . getStatus ( dBDataBean0 , "X\" " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test3 ( ) throws Throwable { OracleViewStructure oracleViewStructure0 = new OracleViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ViewStructureBean viewStructureBean0 = oracleViewStructure0 . getStructure ( dBDataBean0 , "83 ( ] hmiJ . c . 7 + #" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getViewName ( ) { return viewName ; }
void test4 ( ) throws Throwable { OracleViewStructure oracleViewStructure0 = new OracleViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; boolean boolean0 = oracleViewStructure0 . isView ( dBDataBean0 , "83 ( ] hmiJ . c . 7 + #" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isView ( DBDataBean dataBean , String viewName ) { boolean isView = false ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "select count ( * ) c from sys . systables where TABLETYPE = 'V' and TABLENAME = '" + viewName + "' " ) ; while ( rs . next ( ) ) { int count = rs . getInt ( "c" ) ; if ( count > 0 ) { isView = true ; } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } return isView ; }
void test0 ( ) throws Throwable { OracleTableList oracleTableList0 = new OracleTableList ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ArrayList < Object > arrayList0 = oracleTableList0 . getTableList ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList getTableList ( DBDataBean dataBean ) { ArrayList tableList = new ArrayList ( ) ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "select tablename from pg_tables where tablename ! ~ '^pg_ + ' and tablename ! ~ '^sql_ + ' order by tablename ; " ) ; while ( rs . next ( ) ) { String tableName = rs . getString ( "tablename" ) ; TableBean tableBean = new TableBean ( ) ; tableBean . setName ( tableName ) ; tableList . add ( tableBean ) ; } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } return tableList ; }
void test0 ( ) throws Throwable { OracleDataBase oracleDataBase0 = new OracleDataBase ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = oracleDataBase0 . testLogin ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String testLogin ( DBDataBean dataBean ) { String test = "" ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( LOGIN_QUERY ) ; while ( rs . next ( ) ) { String res = rs . getString ( 1 ) ; } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } } } return test ; }
void test7 ( ) throws Throwable { OracleTableStructure oracleTableStructure0 = new OracleTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; oracleTableStructure0 . addIndex ( ( HttpServletRequest ) null , dBDataBean0 , "5%wki < & Z7" , "5%wki < & Z7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test8 ( ) throws Throwable { OracleTableStructure oracleTableStructure0 = new OracleTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStructureBean tableStructureBean0 = oracleTableStructure0 . getStructure ( dBDataBean0 , "5%ki < 1Z7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test9 ( ) throws Throwable { OracleTableStructure oracleTableStructure0 = new OracleTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStatusBean tableStatusBean0 = oracleTableStructure0 . getStatus ( dBDataBean0 , "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEngine ( ) { return engine ; }
void test10 ( ) throws Throwable { OracleTableStructure oracleTableStructure0 = new OracleTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStatusBean tableStatusBean0 = oracleTableStructure0 . getStatus ( dBDataBean0 , "5%ki < 1Z7" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test12 ( ) throws Throwable { OracleTableStructure oracleTableStructure0 = new OracleTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "'" ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; ArrayList < Object > arrayList0 = oracleTableStructure0 . alterModify ( ( HttpServletRequest ) null , dBDataBean0 , "'" , columnBean0 , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test14 ( ) throws Throwable { OracleTableStructure oracleTableStructure0 = new OracleTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "'" ) ; ArrayList < Object > arrayList0 = oracleTableStructure0 . alterAdd ( ( HttpServletRequest ) null , dBDataBean0 , "'" , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test15 ( ) throws Throwable { OracleTableStructure oracleTableStructure0 = new OracleTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; ArrayList < Object > arrayList0 = oracleTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test16 ( ) throws Throwable { OracleTableStructure oracleTableStructure0 = new OracleTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; createTableXmlBean0 . addColumn ( ( ColumnBean ) null ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setName ( "SSolris" ) ; ArrayList < Object > arrayList0 = oracleTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test17 ( ) throws Throwable { OracleTableStructure oracleTableStructure0 = new OracleTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setLen ( 930 ) ; columnBean0 . setName ( "SSolris" ) ; ArrayList < Object > arrayList0 = oracleTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test18 ( ) throws Throwable { OracleTableStructure oracleTableStructure0 = new OracleTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setDefaultValue ( "SSolris" ) ; columnBean0 . setName ( "SSolris" ) ; ArrayList < Object > arrayList0 = oracleTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test19 ( ) throws Throwable { OracleTableStructure oracleTableStructure0 = new OracleTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setNullable ( true ) ; columnBean0 . setName ( "SSolris" ) ; ArrayList < Object > arrayList0 = oracleTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test20 ( ) throws Throwable { OracleTableStructure oracleTableStructure0 = new OracleTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setComment ( "%" ) ; columnBean0 . setName ( "%" ) ; ArrayList < Object > arrayList0 = oracleTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test21 ( ) throws Throwable { OracleTableStructure oracleTableStructure0 = new OracleTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setUnique ( true ) ; columnBean0 . setName ( "SSolris" ) ; ArrayList < Object > arrayList0 = oracleTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test22 ( ) throws Throwable { OracleTableStructure oracleTableStructure0 = new OracleTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setName ( "SSolris" ) ; columnBean0 . setKey ( true ) ; ArrayList < Object > arrayList0 = oracleTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test23 ( ) throws Throwable { OracleTableStructure oracleTableStructure0 = new OracleTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; createTableXmlBean0 . setComment ( "O" ) ; ArrayList < Object > arrayList0 = oracleTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test2 ( ) throws Throwable { MysqlViewStructure mysqlViewStructure0 = new MysqlViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ViewStatusBean viewStatusBean0 = mysqlViewStructure0 . getStatus ( dBDataBean0 , "cX ! gFu" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test3 ( ) throws Throwable { MysqlViewStructure mysqlViewStructure0 = new MysqlViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ViewStructureBean viewStructureBean0 = mysqlViewStructure0 . getStructure ( dBDataBean0 , "cX ! gFu" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getViewName ( ) { return viewName ; }
void test4 ( ) throws Throwable { MysqlViewStructure mysqlViewStructure0 = new MysqlViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; boolean boolean0 = mysqlViewStructure0 . isView ( dBDataBean0 , "cX ! gFu" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isView ( DBDataBean dataBean , String viewName ) { boolean isView = false ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "select count ( * ) c from sys . systables where TABLETYPE = 'V' and TABLENAME = '" + viewName + "' " ) ; while ( rs . next ( ) ) { int count = rs . getInt ( "c" ) ; if ( count > 0 ) { isView = true ; } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } return isView ; }
void test0 ( ) throws Throwable { MysqlTableList mysqlTableList0 = new MysqlTableList ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ArrayList < Object > arrayList0 = mysqlTableList0 . getTableList ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test0 ( ) throws Throwable { MysqlDataBase mysqlDataBase0 = new MysqlDataBase ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = mysqlDataBase0 . testLogin ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String testLogin ( DBDataBean dataBean ) { String test = "" ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( LOGIN_QUERY ) ; while ( rs . next ( ) ) { String res = rs . getString ( 1 ) ; } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } } } return test ; }
void test0 ( ) throws Throwable { MysqlDataBaseList mysqlDataBaseList0 = new MysqlDataBaseList ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ArrayList < Object > arrayList0 = mysqlDataBaseList0 . getDataBaseList ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test8 ( ) throws Throwable { MysqlTableStructure mysqlTableStructure0 = new MysqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStatusBean tableStatusBean0 = mysqlTableStructure0 . getStatus ( dBDataBean0 , "FR" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test9 ( ) throws Throwable { MysqlTableStructure mysqlTableStructure0 = new MysqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStatusBean tableStatusBean0 = mysqlTableStructure0 . getStatus ( dBDataBean0 , "" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAutoIncrement ( ) { return autoIncrement ; }
void test10 ( ) throws Throwable { MysqlTableStructure mysqlTableStructure0 = new MysqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStructureBean tableStructureBean0 = mysqlTableStructure0 . getStructure ( dBDataBean0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test11 ( ) throws Throwable { MysqlTableStructure mysqlTableStructure0 = new MysqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "" ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; ArrayList < Object > arrayList0 = mysqlTableStructure0 . alterModify ( ( HttpServletRequest ) null , dBDataBean0 , "" , columnBean0 , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test12 ( ) throws Throwable { MysqlTableStructure mysqlTableStructure0 = new MysqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "" ) ; ArrayList < Object > arrayList0 = mysqlTableStructure0 . alterAdd ( ( HttpServletRequest ) null , dBDataBean0 , "" , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test13 ( ) throws Throwable { MysqlTableStructure mysqlTableStructure0 = new MysqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; ArrayList < Object > arrayList0 = mysqlTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test14 ( ) throws Throwable { MysqlTableStructure mysqlTableStructure0 = new MysqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; createTableXmlBean0 . addColumn ( ( ColumnBean ) null ) ; ArrayList < Object > arrayList0 = mysqlTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test15 ( ) throws Throwable { MysqlTableStructure mysqlTableStructure0 = new MysqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setName ( " = QX4 [ yDpkei | u , / < Izq" ) ; columnBean0 . setNullable ( true ) ; ArrayList < Object > arrayList0 = mysqlTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test16 ( ) throws Throwable { MysqlTableStructure mysqlTableStructure0 = new MysqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setName ( " = QX4 [ yDpkei | u , / < Izq" ) ; columnBean0 . setDefaultValue ( " = QX4 [ yDpkei | u , / < Izq" ) ; ArrayList < Object > arrayList0 = mysqlTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test17 ( ) throws Throwable { MysqlTableStructure mysqlTableStructure0 = new MysqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setName ( " = QX4 [ yDpkei | u , / < Izq" ) ; columnBean0 . setIndex ( true ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; ArrayList < Object > arrayList0 = mysqlTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test18 ( ) throws Throwable { MysqlTableStructure mysqlTableStructure0 = new MysqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; createTableXmlBean0 . setComment ( " = ifugDi ; ZCN ( mK r" ) ; ArrayList < Object > arrayList0 = mysqlTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test20 ( ) throws Throwable { MysqlTableStructure mysqlTableStructure0 = new MysqlTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ArrayList < Object > arrayList0 = mysqlTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void changePrimary ( HttpServletRequest request , DBDataBean dataBean , String tableName , ArrayList columns ) { StringBuffer keys = new StringBuffer ( "" ) ; for ( int i = 0 ; i < columns . size ( ) ; i + + ) { ColumnBean columnBean = ( ColumnBean ) columns . get ( i ) ; if ( columnBean . isKey ( ) ) { if ( StringUtils . isNotEmpty ( keys . toString ( ) ) ) { keys . append ( " , " ) ; } keys . append ( "" + columnBean . getName ( ) + "" ) ; } } String query = "ALTER TABLE " + tableName + " DROP PRIMARY KEY , ADD PRIMARY KEY ( " + keys . toString ( ) + " ) " ; NonSelectResultBean nonSelectResultBean = NonSelect . executeQuery ( dataBean , query ) ; DBEHelper . setLogs ( request , nonSelectResultBean . getMessages ( ) ) ; }
void test0 ( ) throws Throwable { MysqlSequenceStructure mysqlSequenceStructure0 = new MysqlSequenceStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; SequenceForm sequenceForm0 = new SequenceForm ( ) ; ArrayList < Object > arrayList0 = mysqlSequenceStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , sequenceForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList create ( HttpServletRequest request , DBDataBean dataBean , SequenceForm sequenceForm ) { return null ; }
void test1 ( ) throws Throwable { MysqlSequenceStructure mysqlSequenceStructure0 = new MysqlSequenceStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; mysqlSequenceStructure0 . drop ( ( HttpServletRequest ) null , dBDataBean0 , "H\"yl : ) $^ebz1 / 4% [ 3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test2 ( ) throws Throwable { MysqlSequenceStructure mysqlSequenceStructure0 = new MysqlSequenceStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ArrayList < Object > arrayList0 = mysqlSequenceStructure0 . getList ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test0 ( ) throws Throwable { SapdbDataBase sapdbDataBase0 = new SapdbDataBase ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = sapdbDataBase0 . testLogin ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String testLogin ( DBDataBean dataBean ) { String test = "" ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( LOGIN_QUERY ) ; while ( rs . next ( ) ) { String res = rs . getString ( 1 ) ; } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } } } return test ; }
void test0 ( ) throws Throwable { SapdbTableList sapdbTableList0 = new SapdbTableList ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ArrayList < Object > arrayList0 = sapdbTableList0 . getTableList ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList getTableList ( DBDataBean dataBean ) { ArrayList tableList = new ArrayList ( ) ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "select tablename from pg_tables where tablename ! ~ '^pg_ + ' and tablename ! ~ '^sql_ + ' order by tablename ; " ) ; while ( rs . next ( ) ) { String tableName = rs . getString ( "tablename" ) ; TableBean tableBean = new TableBean ( ) ; tableBean . setName ( tableName ) ; tableList . add ( tableBean ) ; } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } return tableList ; }
void test1 ( ) throws Throwable { SapdbSequenceStructure sapdbSequenceStructure0 = new SapdbSequenceStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ArrayList < Object > arrayList0 = sapdbSequenceStructure0 . getList ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList getList ( DBDataBean dataBean ) { ArrayList sequences = new ArrayList ( ) ; / * Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "SHOW TABLE STATUS " ) ; while ( rs . next ( ) ) { String name = rs . getString ( "NAME" ) ; String auto = rs . getString ( "Auto_Increment" ) ; if ( auto ! = null ) { SequenceStructureBean sequenceStructureBean = new SequenceStructureBean ( ) ; sequenceStructureBean . setName ( name ) ; sequenceStructureBean . setMinValue ( 1 ) ; sequenceStructureBean . setMaxValue ( "" ) ; sequenceStructureBean . setIncrementBy ( 1 ) ; sequenceStructureBean . setLastNumber ( rs . getInt ( "Auto_Increment" ) ) ; sequences . add ( sequenceStructureBean ) ; } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } * / return sequences ; }
void test2 ( ) throws Throwable { SapdbSequenceStructure sapdbSequenceStructure0 = new SapdbSequenceStructure ( ) ; SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setName ( "k46gkU~1 / Q ) " ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ArrayList < Object > arrayList0 = sapdbSequenceStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , sequenceForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test3 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setStart ( "\"~c~nq ( " ) ; SapdbSequenceStructure sapdbSequenceStructure0 = new SapdbSequenceStructure ( ) ; ArrayList < Object > arrayList0 = sapdbSequenceStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , sequenceForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test4 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setMin ( "\"~c~nq ( " ) ; SapdbSequenceStructure sapdbSequenceStructure0 = new SapdbSequenceStructure ( ) ; ArrayList < Object > arrayList0 = sapdbSequenceStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , sequenceForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test5 ( ) throws Throwable { SapdbSequenceStructure sapdbSequenceStructure0 = new SapdbSequenceStructure ( ) ; SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setMax ( "k46gkU~1 / Q ) " ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ArrayList < Object > arrayList0 = sapdbSequenceStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , sequenceForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test6 ( ) throws Throwable { SapdbSequenceStructure sapdbSequenceStructure0 = new SapdbSequenceStructure ( ) ; SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setCycle ( "k46gkU~1 / Q ) " ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ArrayList < Object > arrayList0 = sapdbSequenceStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , sequenceForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test7 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setCache ( "\"~c~nq ( " ) ; SapdbSequenceStructure sapdbSequenceStructure0 = new SapdbSequenceStructure ( ) ; ArrayList < Object > arrayList0 = sapdbSequenceStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , sequenceForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test8 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setComment ( "\"~c~nq ( " ) ; SapdbSequenceStructure sapdbSequenceStructure0 = new SapdbSequenceStructure ( ) ; ArrayList < Object > arrayList0 = sapdbSequenceStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , sequenceForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test6 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStructureBean tableStructureBean0 = sapdbTableStructure0 . getStructure ( dBDataBean0 , "$na'dwRkw71t * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test8 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setDefaultValue ( ( String ) null ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "eHna'mdvRw71t~ * " ) ; ArrayList < Object > arrayList0 = sapdbTableStructure0 . alterModify ( ( HttpServletRequest ) null , dBDataBean0 , "eHna'mdvRw71t~ * " , columnBean0 , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test9 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setDefaultValue ( ( String ) null ) ; columnForm0 . setNotnull ( "Hna'dwRw71t * " ) ; ArrayList < Object > arrayList0 = sapdbTableStructure0 . alterModify ( ( HttpServletRequest ) null , dBDataBean0 , "Hna'dwRw71t * " , columnBean0 , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test10 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setDefaultValue ( "Hna'dwRw71t * " ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "Hna'dwRw71t * " ) ; ArrayList < Object > arrayList0 = sapdbTableStructure0 . alterModify ( ( HttpServletRequest ) null , dBDataBean0 , "Hna'dwRw71t * " , columnBean0 , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test11 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setComment ( ( String ) null ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "Hna'dwRw71t * " ) ; ArrayList < Object > arrayList0 = sapdbTableStructure0 . alterModify ( ( HttpServletRequest ) null , dBDataBean0 , "Hna'dwRw71t * " , columnBean0 , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test12 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setComment ( "eHna'mdvRw71t~ * " ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "eHna'mdvRw71t~ * " ) ; ArrayList < Object > arrayList0 = sapdbTableStructure0 . alterModify ( ( HttpServletRequest ) null , dBDataBean0 , "eHna'mdvRw71t~ * " , columnBean0 , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test13 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; TableStatusBean tableStatusBean0 = sapdbTableStructure0 . getStatus ( dBDataBean0 , "SNATyHt3pamzw , ? ? " , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test14 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; TableStatusBean tableStatusBean0 = sapdbTableStructure0 . getStatus ( dBDataBean0 , "EkUS@ , " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test15 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setDefaultValue ( "f" ) ; columnForm0 . setNotnull ( "f" ) ; ArrayList < Object > arrayList0 = sapdbTableStructure0 . alterAdd ( ( HttpServletRequest ) null , dBDataBean0 , "" , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test16 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setComment ( "f" ) ; columnForm0 . setNotnull ( "f" ) ; ArrayList < Object > arrayList0 = sapdbTableStructure0 . alterAdd ( ( HttpServletRequest ) null , dBDataBean0 , "" , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test17 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; ArrayList < Object > arrayList0 = sapdbTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test18 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; createTableXmlBean0 . addColumn ( ( ColumnBean ) null ) ; ArrayList < Object > arrayList0 = sapdbTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test19 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setLen ( 403 ) ; columnBean0 . setName ( " , uWloP - 4R` + EM = / s" ) ; ArrayList < Object > arrayList0 = sapdbTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test20 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setNullable ( true ) ; columnBean0 . setName ( " , uWloP - 4R` + EM = / s" ) ; ArrayList < Object > arrayList0 = sapdbTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test21 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setDefaultValue ( " , uWloP - 4R` + EM = / s" ) ; columnBean0 . setName ( " , uWloP - 4R` + EM = / s" ) ; ArrayList < Object > arrayList0 = sapdbTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test22 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setName ( "eHna'mdvRw71t~ * " ) ; columnBean0 . setComment ( "eHna'mdvRw71t~ * " ) ; ArrayList < Object > arrayList0 = sapdbTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test23 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setUnique ( true ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setName ( "eHna'mdvRw71t~ * " ) ; ArrayList < Object > arrayList0 = sapdbTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test24 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setKey ( true ) ; columnBean0 . setName ( " , uWloP - 4R` + EM = / s" ) ; ArrayList < Object > arrayList0 = sapdbTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test25 ( ) throws Throwable { SapdbTableStructure sapdbTableStructure0 = new SapdbTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; createTableXmlBean0 . setComment ( "a^ ; h4" ) ; ArrayList < Object > arrayList0 = sapdbTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test0 ( ) throws Throwable { SapdbViewStructure sapdbViewStructure0 = new SapdbViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ViewStatusBean viewStatusBean0 = sapdbViewStructure0 . getStatus ( dBDataBean0 , "P ? ~M~" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { SapdbViewStructure sapdbViewStructure0 = new SapdbViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ArrayList < Object > arrayList0 = sapdbViewStructure0 . getDefinition ( dBDataBean0 , "P ? ~M~" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList getDefinition ( DBDataBean dataBean , String name ) { ArrayList querys = new ArrayList ( ) ; return querys ; }
void test4 ( ) throws Throwable { SapdbViewStructure sapdbViewStructure0 = new SapdbViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ViewStructureBean viewStructureBean0 = sapdbViewStructure0 . getStructure ( dBDataBean0 , "P ? ~M~" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getViewName ( ) { return viewName ; }
void test5 ( ) throws Throwable { SapdbViewStructure sapdbViewStructure0 = new SapdbViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; boolean boolean0 = sapdbViewStructure0 . isView ( dBDataBean0 , "P ? ~M~" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isView ( DBDataBean dataBean , String viewName ) { boolean isView = false ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "select count ( * ) c from sys . systables where TABLETYPE = 'V' and TABLENAME = '" + viewName + "' " ) ; while ( rs . next ( ) ) { int count = rs . getInt ( "c" ) ; if ( count > 0 ) { isView = true ; } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } return isView ; }
void test0 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; String string0 = sequenceForm0 . getCache ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIncrement ( ) { return increment ; }
void test1 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; String string0 = sequenceForm0 . getIncrement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCycle ( ) { return cycle ; }
void test2 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setCache ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCycle ( ) { return cycle ; }
void test3 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setComment ( " > | - YAN | % * \"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIncrement ( ) { return increment ; }
void test4 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setName ( "4E" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIncrement ( ) { return increment ; }
void test5 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setMin ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCycle ( ) { return cycle ; }
void test6 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; String string0 = sequenceForm0 . getCycle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIncrement ( ) { return increment ; }
void test7 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; String string0 = sequenceForm0 . getMax ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIncrement ( ) { return increment ; }
void test8 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; String string0 = sequenceForm0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCycle ( ) { return cycle ; }
void test9 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; String string0 = sequenceForm0 . getComment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCycle ( ) { return cycle ; }
void test10 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; String string0 = sequenceForm0 . getStart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCycle ( ) { return cycle ; }
void test11 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIncrement ( ) { return increment ; }
void test12 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; String string0 = sequenceForm0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCycle ( ) { return cycle ; }
void test13 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; String string0 = sequenceForm0 . getMin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIncrement ( ) { return increment ; }
void test14 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCycle ( ) { return cycle ; }
void test15 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setMax ( "4E" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCycle ( ) { return cycle ; }
void test16 ( ) throws Throwable { SequenceForm sequenceForm0 = new SequenceForm ( ) ; sequenceForm0 . setStart ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIncrement ( ) { return increment ; }
void test0 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setClassName ( "0gcL { ! \"R4 / MYT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test1 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; String string0 = columnForm0 . getOwner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test2 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; int int0 = columnForm0 . getDec ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test3 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setKey ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isKey ( ) { return key ; }
void test4 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; String string0 = columnForm0 . getDataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test5 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "javax . servlet . include . path_info" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test6 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; String string0 = columnForm0 . getMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test7 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . getNotnull ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test8 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setComment ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test9 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; String string0 = columnForm0 . getCodeType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test10 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setTableName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test11 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; String string0 = columnForm0 . getClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test12 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; String string0 = columnForm0 . getTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test13 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setMode ( "java . lang . Byte" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test14 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setUnique ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test15 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . isUnique ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test16 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; int int0 = columnForm0 . getLen ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test17 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setDefaultValue ( "wPlP7UlNF1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test18 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setOwner ( "%u`DM8G" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test19 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . isKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test20 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; String string0 = columnForm0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test21 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setDataType ( "javax . servlet . include . path_info" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test22 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setDim ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test23 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; String string0 = columnForm0 . getDim ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test24 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; String string0 = columnForm0 . getComment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test25 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; String string0 = columnForm0 . getExtra ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test26 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setLen ( ( - 615 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test27 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; String string0 = columnForm0 . getTableName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test28 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setCodeType ( "~gaaaZ } Tx" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test29 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setExtra ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test30 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setDec ( ( - 1775 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test31 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; String string0 = columnForm0 . getDefaultValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test32 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; String string0 = columnForm0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test33 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setTable ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test34 ( ) throws Throwable { ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test1 ( ) throws Throwable { UploadFileForm uploadFileForm0 = new UploadFileForm ( ) ; FormFile formFile0 = uploadFileForm0 . getFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FormFile getFile ( ) { return file ; }
void test0 ( ) throws Throwable { DBDataForm dBDataForm0 = new DBDataForm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test1 ( ) throws Throwable { DBDataForm dBDataForm0 = new DBDataForm ( ) ; String string0 = dBDataForm0 . getDbType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test2 ( ) throws Throwable { DBDataForm dBDataForm0 = new DBDataForm ( ) ; String string0 = dBDataForm0 . getLanguage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test3 ( ) throws Throwable { DBDataForm dBDataForm0 = new DBDataForm ( ) ; String string0 = dBDataForm0 . getUrl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test4 ( ) throws Throwable { DBDataForm dBDataForm0 = new DBDataForm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test5 ( ) throws Throwable { DBDataForm dBDataForm0 = new DBDataForm ( ) ; dBDataForm0 . setDbType ( "9 > : ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test6 ( ) throws Throwable { DBDataForm dBDataForm0 = new DBDataForm ( ) ; String string0 = dBDataForm0 . getDriver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test7 ( ) throws Throwable { DBDataForm dBDataForm0 = new DBDataForm ( ) ; String string0 = dBDataForm0 . getDbName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test8 ( ) throws Throwable { DBDataForm dBDataForm0 = new DBDataForm ( ) ; dBDataForm0 . setDriver ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test9 ( ) throws Throwable { DBDataForm dBDataForm0 = new DBDataForm ( ) ; dBDataForm0 . setUrl ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test10 ( ) throws Throwable { DBDataForm dBDataForm0 = new DBDataForm ( ) ; dBDataForm0 . setDbName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test11 ( ) throws Throwable { DBDataForm dBDataForm0 = new DBDataForm ( ) ; String string0 = dBDataForm0 . getPasswd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test12 ( ) throws Throwable { DBDataForm dBDataForm0 = new DBDataForm ( ) ; String string0 = dBDataForm0 . getUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test13 ( ) throws Throwable { DBDataForm dBDataForm0 = new DBDataForm ( ) ; String string0 = dBDataForm0 . getEncoding ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test14 ( ) throws Throwable { DBDataForm dBDataForm0 = new DBDataForm ( ) ; dBDataForm0 . setPasswd ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test15 ( ) throws Throwable { DBDataForm dBDataForm0 = new DBDataForm ( ) ; dBDataForm0 . setUser ( "FWg | t [ ( Sl | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test0 ( ) throws Throwable { ViewStatusBean viewStatusBean0 = new ViewStatusBean ( ) ; String string0 = viewStatusBean0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { ViewStatusBean viewStatusBean0 = new ViewStatusBean ( ) ; viewStatusBean0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; tableStatusBean0 . setTableName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDataFree ( ) { return dataFree ; }
void test2 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; tableStatusBean0 . setRowFormat ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAutoIncrement ( ) { return autoIncrement ; }
void test3 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; Calendar calendar0 = tableStatusBean0 . getUpdateTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Calendar getUpdateTime ( ) { return updateTime ; }
void test4 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; tableStatusBean0 . setMaxDataLength ( ( BigDecimal ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRows ( ) { return rows ; }
void test5 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; String string0 = tableStatusBean0 . getAvgRowLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAvgRowLength ( ) { return avgRowLength ; }
void test6 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; tableStatusBean0 . setCollation ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRows ( ) { return rows ; }
void test7 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; Calendar calendar0 = tableStatusBean0 . getCreateTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Calendar getCreateTime ( ) { return createTime ; }
void test8 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; tableStatusBean0 . setComment ( " : < & f" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAvgRowLength ( ) { return avgRowLength ; }
void test9 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; String string0 = tableStatusBean0 . getEngine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEngine ( ) { return engine ; }
void test10 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; String string0 = tableStatusBean0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test11 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; tableStatusBean0 . setCheckTime ( ( Calendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRows ( ) { return rows ; }
void test12 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; String string0 = tableStatusBean0 . getRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRows ( ) { return rows ; }
void test13 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( ) ; tableStatusBean0 . setUpdateTime ( ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test14 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; tableStatusBean0 . setAvgRowLength ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test15 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; String string0 = tableStatusBean0 . getCollation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollation ( ) { return collation ; }
void test16 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; Calendar calendar0 = tableStatusBean0 . getCheckTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Calendar getCheckTime ( ) { return checkTime ; }
void test17 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; BigDecimal bigDecimal0 = tableStatusBean0 . getDataLength ( ) ; tableStatusBean0 . setIndexLength ( bigDecimal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setIndexLength ( BigDecimal indexLength ) { this . indexLength = indexLength ; }
void test18 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( ( - 300 ) , 0 , ( - 300 ) , 0 , 0 , 1996 ) ; tableStatusBean0 . setCreateTime ( ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCollation ( ) { return collation ; }
void test19 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; BigDecimal bigDecimal0 = tableStatusBean0 . getMaxDataLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigDecimal getMaxDataLength ( ) { return maxDataLength ; }
void test21 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; BigDecimal bigDecimal0 = tableStatusBean0 . getIndexLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigDecimal getIndexLength ( ) { return indexLength ; }
void test22 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; tableStatusBean0 . setRows ( "9k\n3EGI , va2c . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDataFree ( ) { return dataFree ; }
void test23 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; tableStatusBean0 . setAutoIncrement ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComment ( ) { return comment ; }
void test24 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; String string0 = tableStatusBean0 . getRowFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRowFormat ( ) { return rowFormat ; }
void test25 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; tableStatusBean0 . setEngine ( "5 < Ao [ } `r > c^ - ) - 71iW" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRows ( ) { return rows ; }
void test26 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; tableStatusBean0 . setDataFree ( "#ggQ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEngine ( ) { return engine ; }
void test27 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; String string0 = tableStatusBean0 . getComment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComment ( ) { return comment ; }
void test28 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; String string0 = tableStatusBean0 . getTableName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test29 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; BigDecimal bigDecimal0 = tableStatusBean0 . getTotalLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigDecimal getTotalLength ( ) { return totalLength ; }
void test30 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; String string0 = tableStatusBean0 . getAutoIncrement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAutoIncrement ( ) { return autoIncrement ; }
void test31 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; tableStatusBean0 . setVersion ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRowFormat ( ) { return rowFormat ; }
void test32 ( ) throws Throwable { TableStatusBean tableStatusBean0 = new TableStatusBean ( ) ; String string0 = tableStatusBean0 . getDataFree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDataFree ( ) { return dataFree ; }
void test0 ( ) throws Throwable { DBEBean dBEBean0 = new DBEBean ( ) ; String string0 = dBEBean0 . getErrorMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getErrorMessage ( ) { return errorMessage ; }
void test1 ( ) throws Throwable { DBEBean dBEBean0 = new DBEBean ( ) ; ArrayList < Object > arrayList0 = dBEBean0 . getMessages ( ) ; dBEBean0 . setMessages ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMessages ( ArrayList messages ) { this . messages = messages ; }
void test2 ( ) throws Throwable { DBEBean dBEBean0 = new DBEBean ( ) ; dBEBean0 . setErrorMessage ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getErrorMessage ( ) { return errorMessage ; }
void test0 ( ) throws Throwable { SelectResultBean selectResultBean0 = new SelectResultBean ( ) ; selectResultBean0 . setValueListHandler ( ( ValueListHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTable ( ) { return tableName ; }
void test1 ( ) throws Throwable { SelectResultBean selectResultBean0 = new SelectResultBean ( ) ; ColumnBean [ ] columnBeanArray0 = selectResultBean0 . getColumnBeans ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ColumnBean [ ] getColumnBeans ( ) { return columnBeans ; }
void test2 ( ) throws Throwable { SelectResultBean selectResultBean0 = new SelectResultBean ( ) ; selectResultBean0 . setTable ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTable ( ) { return tableName ; }
void test3 ( ) throws Throwable { SelectResultBean selectResultBean0 = new SelectResultBean ( ) ; ValueListHandler valueListHandler0 = selectResultBean0 . getValueListHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ValueListHandler getValueListHandler ( ) { return valueListHandler ; }
void test4 ( ) throws Throwable { SelectResultBean selectResultBean0 = new SelectResultBean ( ) ; String string0 = selectResultBean0 . getTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTable ( ) { return tableName ; }
void test5 ( ) throws Throwable { SelectResultBean selectResultBean0 = new SelectResultBean ( ) ; ColumnBean [ ] columnBeanArray0 = new ColumnBean [ 8 ] ; selectResultBean0 . setColumnBeans ( columnBeanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTable ( ) { return tableName ; }
void test0 ( ) throws Throwable { SequenceStructureBean sequenceStructureBean0 = new SequenceStructureBean ( ) ; sequenceStructureBean0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinValue ( ) { return minValue ; }
void test1 ( ) throws Throwable { SequenceStructureBean sequenceStructureBean0 = new SequenceStructureBean ( ) ; sequenceStructureBean0 . setLastNumber ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLastNumber ( ) { return lastNumber ; }
void test2 ( ) throws Throwable { SequenceStructureBean sequenceStructureBean0 = new SequenceStructureBean ( ) ; String string0 = sequenceStructureBean0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinValue ( ) { return minValue ; }
void test3 ( ) throws Throwable { SequenceStructureBean sequenceStructureBean0 = new SequenceStructureBean ( ) ; int int0 = sequenceStructureBean0 . getMinValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMaxValue ( ) { return maxValue ; }
void test4 ( ) throws Throwable { SequenceStructureBean sequenceStructureBean0 = new SequenceStructureBean ( ) ; sequenceStructureBean0 . setMinValue ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinValue ( ) { return minValue ; }
void test5 ( ) throws Throwable { SequenceStructureBean sequenceStructureBean0 = new SequenceStructureBean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinValue ( ) { return minValue ; }
void test6 ( ) throws Throwable { SequenceStructureBean sequenceStructureBean0 = new SequenceStructureBean ( ) ; String string0 = sequenceStructureBean0 . getMaxValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIncrementBy ( ) { return incrementBy ; }
void test7 ( ) throws Throwable { SequenceStructureBean sequenceStructureBean0 = new SequenceStructureBean ( ) ; sequenceStructureBean0 . setIncrementBy ( ( - 50 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIncrementBy ( ) { return incrementBy ; }
void test8 ( ) throws Throwable { SequenceStructureBean sequenceStructureBean0 = new SequenceStructureBean ( ) ; int int0 = sequenceStructureBean0 . getIncrementBy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMaxValue ( ) { return maxValue ; }
void test9 ( ) throws Throwable { SequenceStructureBean sequenceStructureBean0 = new SequenceStructureBean ( ) ; int int0 = sequenceStructureBean0 . getLastNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinValue ( ) { return minValue ; }
void test0 ( ) throws Throwable { TableBean tableBean0 = new TableBean ( ) ; String string0 = tableBean0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isView ( DBDataBean dataBean , String viewName ) { boolean isView = false ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "select count ( * ) c from sys . systables where TABLETYPE = 'V' and TABLENAME = '" + viewName + "' " ) ; while ( rs . next ( ) ) { int count = rs . getInt ( "c" ) ; if ( count > 0 ) { isView = true ; } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } return isView ; }
void test1 ( ) throws Throwable { TableBean tableBean0 = new TableBean ( ) ; boolean boolean0 = tableBean0 . isView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isView ( DBDataBean dataBean , String viewName ) { boolean isView = false ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "select count ( * ) c from sys . systables where TABLETYPE = 'V' and TABLENAME = '" + viewName + "' " ) ; while ( rs . next ( ) ) { int count = rs . getInt ( "c" ) ; if ( count > 0 ) { isView = true ; } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } return isView ; }
void test2 ( ) throws Throwable { TableBean tableBean0 = new TableBean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isView ( DBDataBean dataBean , String viewName ) { boolean isView = false ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "select count ( * ) c from sys . systables where TABLETYPE = 'V' and TABLENAME = '" + viewName + "' " ) ; while ( rs . next ( ) ) { int count = rs . getInt ( "c" ) ; if ( count > 0 ) { isView = true ; } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } return isView ; }
void test3 ( ) throws Throwable { TableBean tableBean0 = new TableBean ( ) ; tableBean0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isView ( DBDataBean dataBean , String viewName ) { boolean isView = false ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "select count ( * ) c from sys . systables where TABLETYPE = 'V' and TABLENAME = '" + viewName + "' " ) ; while ( rs . next ( ) ) { int count = rs . getInt ( "c" ) ; if ( count > 0 ) { isView = true ; } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } return isView ; }
void test4 ( ) throws Throwable { TableBean tableBean0 = new TableBean ( ) ; String string0 = tableBean0 . getComment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isView ( DBDataBean dataBean , String viewName ) { boolean isView = false ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "select count ( * ) c from sys . systables where TABLETYPE = 'V' and TABLENAME = '" + viewName + "' " ) ; while ( rs . next ( ) ) { int count = rs . getInt ( "c" ) ; if ( count > 0 ) { isView = true ; } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } return isView ; }
void test5 ( ) throws Throwable { TableBean tableBean0 = new TableBean ( ) ; tableBean0 . setComment ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isView ( DBDataBean dataBean , String viewName ) { boolean isView = false ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "select count ( * ) c from sys . systables where TABLETYPE = 'V' and TABLENAME = '" + viewName + "' " ) ; while ( rs . next ( ) ) { int count = rs . getInt ( "c" ) ; if ( count > 0 ) { isView = true ; } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } return isView ; }
void test0 ( ) throws Throwable { ViewColumnBean viewColumnBean0 = new ViewColumnBean ( ) ; String string0 = viewColumnBean0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { ViewColumnBean viewColumnBean0 = new ViewColumnBean ( ) ; viewColumnBean0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test2 ( ) throws Throwable { ViewColumnBean viewColumnBean0 = new ViewColumnBean ( ) ; viewColumnBean0 . setTableName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test3 ( ) throws Throwable { ViewColumnBean viewColumnBean0 = new ViewColumnBean ( ) ; String string0 = viewColumnBean0 . getColumnName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( ) { return columnName ; }
void test4 ( ) throws Throwable { ViewColumnBean viewColumnBean0 = new ViewColumnBean ( ) ; viewColumnBean0 . setColumnName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( ) { return columnName ; }
void test5 ( ) throws Throwable { ViewColumnBean viewColumnBean0 = new ViewColumnBean ( ) ; String string0 = viewColumnBean0 . getTableName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test0 ( ) throws Throwable { FieldBean fieldBean0 = new FieldBean ( ) ; String string0 = fieldBean0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return size ; }
void test1 ( ) throws Throwable { FieldBean fieldBean0 = new FieldBean ( ) ; int int0 = fieldBean0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return size ; }
void test2 ( ) throws Throwable { FieldBean fieldBean0 = new FieldBean ( ) ; String string0 = fieldBean0 . getClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return size ; }
void test3 ( ) throws Throwable { FieldBean fieldBean0 = new FieldBean ( ) ; fieldBean0 . setClassName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return size ; }
void test4 ( ) throws Throwable { FieldBean fieldBean0 = new FieldBean ( ) ; fieldBean0 . setValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return size ; }
void test5 ( ) throws Throwable { FieldBean fieldBean0 = new FieldBean ( ) ; fieldBean0 . setSize ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return size ; }
void test0 ( ) throws Throwable { TableStructureBean tableStructureBean0 = new TableStructureBean ( ) ; tableStructureBean0 . setTableName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test1 ( ) throws Throwable { TableStructureBean tableStructureBean0 = new TableStructureBean ( ) ; ArrayList < Object > arrayList0 = tableStructureBean0 . getColumns ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList getColumns ( ) { return columns ; }
void test2 ( ) throws Throwable { TableStructureBean tableStructureBean0 = new TableStructureBean ( ) ; String string0 = tableStructureBean0 . getTableName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test3 ( ) throws Throwable { TableStructureBean tableStructureBean0 = new TableStructureBean ( ) ; ArrayList < Object > arrayList0 = new ArrayList < Object > ( ) ; tableStructureBean0 . setColumns ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test0 ( ) throws Throwable { ConstraintBean constraintBean0 = new ConstraintBean ( ) ; String string0 = constraintBean0 . getConstraintType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConstraintType ( ) { return constraintType ; }
void test1 ( ) throws Throwable { ConstraintBean constraintBean0 = new ConstraintBean ( ) ; boolean boolean0 = constraintBean0 . isIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIndex ( ) { return index ; }
void test2 ( ) throws Throwable { ConstraintBean constraintBean0 = new ConstraintBean ( ) ; constraintBean0 . setConstraintType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConstraintType ( ) { return constraintType ; }
void test3 ( ) throws Throwable { ConstraintBean constraintBean0 = new ConstraintBean ( ) ; constraintBean0 . setKey ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isKey ( ) { return key ; }
void test4 ( ) throws Throwable { ConstraintBean constraintBean0 = new ConstraintBean ( ) ; String string0 = constraintBean0 . getConstraintName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConstraintName ( DBDataBean dataBean , String tableName , String columnName , String type ) { String cn = "" ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; / / get PrimaryKeys Statement stmt = connection . createStatement ( ) ; String query = "SELECT alc . constraint_name , CASE alc . constraint_type " + " WHEN 'P' THEN 'PRIMARY KEY' " + " WHEN 'R' THEN 'FOREIGN KEY' " + " WHEN 'U' THEN 'UNIQUE' " + " WHEN 'C' THEN 'CHECK' " + " END \"constraint_type\" , " + " alc . DELETE_RULE \"on_delete\" , " + " CASE alc . deferrable WHEN 'NOT DEFERRABLE' THEN 0 ELSE 1 END \"deferrable\" , " + " CASE alc . deferred WHEN 'IMMEDIATE' THEN 1 ELSE 0 END \"initially_deferred\" , " + " alc . search_condition , " + " alc . table_name , " + " cols . column_name , " + " cols . position , " + " r_alc . table_name \"references_table\" , " + " r_cols . column_name \"references_field\" , " + " r_cols . position \"references_field_position\" " + " FROM all_cons_columns cols " + " LEFT JOIN all_constraints alc " + " ON alc . constraint_name = cols . constraint_name " + " AND alc . owner = cols . owner " + " LEFT JOIN all_constraints r_alc " + " ON alc . r_constraint_name = r_alc . constraint_name " + " AND alc . r_owner = r_alc . owner " + " LEFT JOIN all_cons_columns r_cols " + " ON r_alc . constraint_name = r_cols . constraint_name " + " AND r_alc . owner = r_cols . owner " + " AND cols . position = r_cols . position " + " WHERE alc . constraint_name = cols . constraint_name and alc . TABLE_NAME = '" + tableName + "' and cols . column_name = '" + columnName + "' and alc . constraint_type = '" + type + "' " ; ResultSet rs = stmt . executeQuery ( query ) ; while ( rs . next ( ) ) { cn = rs . getString ( "CONSTRAINT_NAME" ) ; } stmt . close ( ) ; } catch ( ClassNotFoundException e ) { log . error ( e . getMessage ( ) , e ) ; } catch ( SQLException e ) { log . error ( e . getMessage ( ) , e ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { log . error ( e . getMessage ( ) , e ) ; } } } return cn ; }
void test5 ( ) throws Throwable { ConstraintBean constraintBean0 = new ConstraintBean ( ) ; constraintBean0 . setConstraintName ( "E'\u0005JMU ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isKey ( ) { return key ; }
void test6 ( ) throws Throwable { ConstraintBean constraintBean0 = new ConstraintBean ( ) ; boolean boolean0 = constraintBean0 . isKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isKey ( ) { return key ; }
void test7 ( ) throws Throwable { ConstraintBean constraintBean0 = new ConstraintBean ( ) ; boolean boolean0 = constraintBean0 . isUnique ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUnique ( ) { return unique ; }
void test8 ( ) throws Throwable { ConstraintBean constraintBean0 = new ConstraintBean ( ) ; String string0 = constraintBean0 . getColumnName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( ) { return columnName ; }
void test9 ( ) throws Throwable { ConstraintBean constraintBean0 = new ConstraintBean ( ) ; constraintBean0 . setColumnName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isKey ( ) { return key ; }
void test10 ( ) throws Throwable { ConstraintBean constraintBean0 = new ConstraintBean ( ) ; constraintBean0 . setUnique ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUnique ( ) { return unique ; }
void test11 ( ) throws Throwable { ConstraintBean constraintBean0 = new ConstraintBean ( ) ; constraintBean0 . setIndex ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIndex ( ) { return index ; }
void test0 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = dBDataBean0 . getUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test1 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = dBDataBean0 . getTempDir ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test2 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = dBDataBean0 . getDriver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test3 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test4 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; dBDataBean0 . setDbName ( "C . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test5 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; dBDataBean0 . setTempDir ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test6 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = dBDataBean0 . getDbName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test7 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; dBDataBean0 . setUser ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test8 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = dBDataBean0 . getNickName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test9 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = dBDataBean0 . getDbType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test10 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = dBDataBean0 . getUrl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test11 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test12 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = dBDataBean0 . getPasswd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test13 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; dBDataBean0 . setUrl ( "L < [ & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test14 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; dBDataBean0 . setDriver ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test15 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = dBDataBean0 . getEncoding ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLanguage ( ) { return language ; }
void test16 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = dBDataBean0 . getLanguage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test17 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; dBDataBean0 . setDbType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test18 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; dBDataBean0 . setNickName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test19 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; dBDataBean0 . setPasswd ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncoding ( ) { return encoding ; }
void test0 ( ) throws Throwable { MessageBean messageBean0 = new MessageBean ( "" ) ; messageBean0 . getMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreation ( ) { return SDF . format ( creation . getTime ( ) ) ; }
void test1 ( ) throws Throwable { MessageBean messageBean0 = new MessageBean ( "" ) ; messageBean0 . setType ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreation ( ) { return SDF . format ( creation . getTime ( ) ) ; }
void test2 ( ) throws Throwable { MessageBean messageBean0 = new MessageBean ( "" ) ; String string0 = messageBean0 . getCreation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreation ( ) { return SDF . format ( creation . getTime ( ) ) ; }
void test3 ( ) throws Throwable { MessageBean messageBean0 = new MessageBean ( "" , ( - 1312 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreation ( ) { return SDF . format ( creation . getTime ( ) ) ; }
void test4 ( ) throws Throwable { MessageBean messageBean0 = new MessageBean ( "" ) ; int int0 = messageBean0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreation ( ) { return SDF . format ( creation . getTime ( ) ) ; }
void test5 ( ) throws Throwable { MessageBean messageBean0 = new MessageBean ( "" ) ; messageBean0 . setMessage ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) { return type ; }
void test0 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; dataTypeBean0 . setForceLength ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxlength ( ) { return maxlength ; }
void test1 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFormSize ( ) { return formSize ; }
void test2 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; int int0 = dataTypeBean0 . getMaxlength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLen ( ) { return len ; }
void test3 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxlength ( ) { return maxlength ; }
void test4 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; boolean boolean0 = dataTypeBean0 . isLen ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDec ( ) { return dec ; }
void test5 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; String string0 = dataTypeBean0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLen ( ) { return len ; }
void test6 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; dataTypeBean0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFormInput ( ) { return formInput ; }
void test7 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; boolean boolean0 = dataTypeBean0 . isForceLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLen ( ) { return len ; }
void test8 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; dataTypeBean0 . setFormat ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isForceLength ( ) { return forceLength ; }
void test9 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; String string0 = dataTypeBean0 . getFormInput ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isForceLength ( ) { return forceLength ; }
void test10 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; dataTypeBean0 . setFormSize ( 1966 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxlength ( ) { return maxlength ; }
void test11 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; dataTypeBean0 . setValueWrapper ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxlength ( ) { return maxlength ; }
void test12 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; String string0 = dataTypeBean0 . getFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFormSize ( ) { return formSize ; }
void test13 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; int int0 = dataTypeBean0 . getFormSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLen ( ) { return len ; }
void test14 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; dataTypeBean0 . setDec ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDec ( ) { return dec ; }
void test15 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; String string0 = dataTypeBean0 . getValueWrapper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxlength ( ) { return maxlength ; }
void test16 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; boolean boolean0 = dataTypeBean0 . isDec ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFormSize ( ) { return formSize ; }
void test17 ( ) throws Throwable { DataTypeBean dataTypeBean0 = new DataTypeBean ( ) ; dataTypeBean0 . setMaxlength ( 20 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isForceLength ( ) { return forceLength ; }
void test0 ( ) throws Throwable { NonSelectResultBean nonSelectResultBean0 = new NonSelectResultBean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return rowCount ; }
void test1 ( ) throws Throwable { NonSelectResultBean nonSelectResultBean0 = new NonSelectResultBean ( ) ; int int0 = nonSelectResultBean0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return rowCount ; }
void test0 ( ) throws Throwable { DataBaseBean dataBaseBean0 = new DataBaseBean ( ) ; dataBaseBean0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { DataBaseBean dataBaseBean0 = new DataBaseBean ( ) ; String string0 = dataBaseBean0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { ViewStructureBean viewStructureBean0 = new ViewStructureBean ( ) ; String string0 = viewStructureBean0 . getViewName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getViewName ( ) { return viewName ; }
void test1 ( ) throws Throwable { ViewStructureBean viewStructureBean0 = new ViewStructureBean ( ) ; viewStructureBean0 . setViewName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getViewName ( ) { return viewName ; }
void test2 ( ) throws Throwable { ViewStructureBean viewStructureBean0 = new ViewStructureBean ( ) ; String string0 = viewStructureBean0 . getDefinition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList getDefinition ( DBDataBean dataBean , String name ) { ArrayList querys = new ArrayList ( ) ; return querys ; }
void test3 ( ) throws Throwable { ViewStructureBean viewStructureBean0 = new ViewStructureBean ( ) ; ArrayList < Object > arrayList0 = viewStructureBean0 . getColumns ( ) ; viewStructureBean0 . setColumns ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test4 ( ) throws Throwable { ViewStructureBean viewStructureBean0 = new ViewStructureBean ( ) ; viewStructureBean0 . setDefinition ( "j'zK - ! x ? / S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getViewName ( ) { return viewName ; }
void test0 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; String string0 = columnBean0 . getExtra ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test1 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; String string0 = columnBean0 . getOwner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test2 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; int int0 = columnBean0 . getDec ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test3 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . isNullable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test4 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setNullable ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test5 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setOriginalDT ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test6 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; ArrayList < Object > arrayList0 = columnBean0 . getConstraintList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test7 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test8 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setDec ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test9 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setDataType ( "5 > $sYgW" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test10 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; String string0 = columnBean0 . getClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test11 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; ArrayList < Integer > arrayList0 = new ArrayList < Integer > ( ) ; columnBean0 . setConstraintList ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test12 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . isIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test13 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setExtra ( "3 > 4Chq ( P < N" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test14 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setTableName ( "CkJ > a < om7#uf8 } } 9 / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test15 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; String string0 = columnBean0 . getDim ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test16 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; String string0 = columnBean0 . getOriginalDT ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test17 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setUnique ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUnique ( ) { return unique ; }
void test18 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setCodeType ( "^ ( a4KWj , P ] } jjR" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test19 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; String string0 = columnBean0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test20 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; int int0 = columnBean0 . getLen ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test21 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setMode ( "CkJ > a < om7#uf8 } } 9 / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test22 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setOwner ( "3 > 4Chq ( P < N" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test23 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . isUnique ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test24 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setClassName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test25 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; String string0 = columnBean0 . getDataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test26 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setIndex ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIndex ( ) { return index ; }
void test27 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setDefaultValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test28 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . isKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test29 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; String string0 = columnBean0 . getComment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test30 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; String string0 = columnBean0 . getDefaultValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test31 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setKey ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isKey ( ) { return key ; }
void test32 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; String string0 = columnBean0 . getTableName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test33 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setComment ( " ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test34 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; String string0 = columnBean0 . getCodeType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test35 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setLen ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test36 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; String string0 = columnBean0 . getMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLen ( ) { return len ; }
void test37 ( ) throws Throwable { ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setDim ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDec ( ) { return dec ; }
void test0 ( ) throws Throwable { DataBaseFactory dataBaseFactory0 = new DataBaseFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataBaseFactory ( ) { }
void test1 ( ) throws Throwable { DataBase dataBase0 = DataBaseFactory . getInstance ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableList getInstance ( String dbType ) { if ( StringUtils . isNotEmpty ( dbType ) ) { try { Class cl = Class . forName ( "com . gbshape . dbe . " + dbType + " . " + StringUtils . capitalize ( dbType ) + "TableList" ) ; TableList tableList = ( TableList ) cl . newInstance ( ) ; return tableList ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } return null ; }
void test2 ( ) throws Throwable { DataBase dataBase0 = DataBaseFactory . getInstance ( "error" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableList getInstance ( String dbType ) { if ( StringUtils . isNotEmpty ( dbType ) ) { try { Class cl = Class . forName ( "com . gbshape . dbe . " + dbType + " . " + StringUtils . capitalize ( dbType ) + "TableList" ) ; TableList tableList = ( TableList ) cl . newInstance ( ) ; return tableList ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } return null ; }
void test0 ( ) throws Throwable { ViewStructureFactory viewStructureFactory0 = new ViewStructureFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ViewStructureFactory ( ) { }
void test1 ( ) throws Throwable { ViewStructure viewStructure0 = ViewStructureFactory . getInstance ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableList getInstance ( String dbType ) { if ( StringUtils . isNotEmpty ( dbType ) ) { try { Class cl = Class . forName ( "com . gbshape . dbe . " + dbType + " . " + StringUtils . capitalize ( dbType ) + "TableList" ) ; TableList tableList = ( TableList ) cl . newInstance ( ) ; return tableList ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } return null ; }
void test2 ( ) throws Throwable { ViewStructure viewStructure0 = ViewStructureFactory . getInstance ( "VIEW" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableList getInstance ( String dbType ) { if ( StringUtils . isNotEmpty ( dbType ) ) { try { Class cl = Class . forName ( "com . gbshape . dbe . " + dbType + " . " + StringUtils . capitalize ( dbType ) + "TableList" ) ; TableList tableList = ( TableList ) cl . newInstance ( ) ; return tableList ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } return null ; }
void test0 ( ) throws Throwable { DataBaseListFactory dataBaseListFactory0 = new DataBaseListFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataBaseListFactory ( ) { }
void test1 ( ) throws Throwable { DataBaseList dataBaseList0 = DataBaseListFactory . getInstance ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableList getInstance ( String dbType ) { if ( StringUtils . isNotEmpty ( dbType ) ) { try { Class cl = Class . forName ( "com . gbshape . dbe . " + dbType + " . " + StringUtils . capitalize ( dbType ) + "TableList" ) ; TableList tableList = ( TableList ) cl . newInstance ( ) ; return tableList ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } return null ; }
void test2 ( ) throws Throwable { DataBaseList dataBaseList0 = DataBaseListFactory . getInstance ( "FR" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableList getInstance ( String dbType ) { if ( StringUtils . isNotEmpty ( dbType ) ) { try { Class cl = Class . forName ( "com . gbshape . dbe . " + dbType + " . " + StringUtils . capitalize ( dbType ) + "TableList" ) ; TableList tableList = ( TableList ) cl . newInstance ( ) ; return tableList ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } return null ; }
void test0 ( ) throws Throwable { TableStructureFactory tableStructureFactory0 = new TableStructureFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableStructureFactory ( ) { }
void test1 ( ) throws Throwable { TableStructure tableStructure0 = TableStructureFactory . getInstance ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableList getInstance ( String dbType ) { if ( StringUtils . isNotEmpty ( dbType ) ) { try { Class cl = Class . forName ( "com . gbshape . dbe . " + dbType + " . " + StringUtils . capitalize ( dbType ) + "TableList" ) ; TableList tableList = ( TableList ) cl . newInstance ( ) ; return tableList ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } return null ; }
void test2 ( ) throws Throwable { TableStructure tableStructure0 = TableStructureFactory . getInstance ( "org . apache . struts . action . ActionResources" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableList getInstance ( String dbType ) { if ( StringUtils . isNotEmpty ( dbType ) ) { try { Class cl = Class . forName ( "com . gbshape . dbe . " + dbType + " . " + StringUtils . capitalize ( dbType ) + "TableList" ) ; TableList tableList = ( TableList ) cl . newInstance ( ) ; return tableList ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } return null ; }
void test0 ( ) throws Throwable { TableListFactory tableListFactory0 = new TableListFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableListFactory ( ) { }
void test1 ( ) throws Throwable { TableList tableList0 = TableListFactory . getInstance ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableList getInstance ( String dbType ) { if ( StringUtils . isNotEmpty ( dbType ) ) { try { Class cl = Class . forName ( "com . gbshape . dbe . " + dbType + " . " + StringUtils . capitalize ( dbType ) + "TableList" ) ; TableList tableList = ( TableList ) cl . newInstance ( ) ; return tableList ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } return null ; }
void test2 ( ) throws Throwable { TableList tableList0 = TableListFactory . getInstance ( "com . gbshape . dbe . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableList getInstance ( String dbType ) { if ( StringUtils . isNotEmpty ( dbType ) ) { try { Class cl = Class . forName ( "com . gbshape . dbe . " + dbType + " . " + StringUtils . capitalize ( dbType ) + "TableList" ) ; TableList tableList = ( TableList ) cl . newInstance ( ) ; return tableList ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } return null ; }
void test0 ( ) throws Throwable { SequenceStructureFactory sequenceStructureFactory0 = new SequenceStructureFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SequenceStructureFactory ( ) { }
void test1 ( ) throws Throwable { SequenceStructure sequenceStructure0 = SequenceStructureFactory . getInstance ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableList getInstance ( String dbType ) { if ( StringUtils . isNotEmpty ( dbType ) ) { try { Class cl = Class . forName ( "com . gbshape . dbe . " + dbType + " . " + StringUtils . capitalize ( dbType ) + "TableList" ) ; TableList tableList = ( TableList ) cl . newInstance ( ) ; return tableList ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } return null ; }
void test2 ( ) throws Throwable { SequenceStructure sequenceStructure0 = SequenceStructureFactory . getInstance ( "Error at ( " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableList getInstance ( String dbType ) { if ( StringUtils . isNotEmpty ( dbType ) ) { try { Class cl = Class . forName ( "com . gbshape . dbe . " + dbType + " . " + StringUtils . capitalize ( dbType ) + "TableList" ) ; TableList tableList = ( TableList ) cl . newInstance ( ) ; return tableList ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } return null ; }
void test0 ( ) throws Throwable { DBEXmlBean dBEXmlBean0 = new DBEXmlBean ( ) ; ArrayList < Object > arrayList0 = dBEXmlBean0 . getCreateTableXmlBeans ( ) ; dBEXmlBean0 . setCreateTableXmlBeans ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCreateTableXmlBeans ( ArrayList createTableXmlBeans ) { this . createTableXmlBeans = createTableXmlBeans ; }
void test1 ( ) throws Throwable { DBEXmlBean dBEXmlBean0 = new DBEXmlBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; dBEXmlBean0 . addCreateTable ( createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComment ( ) { return comment ; }
void test2 ( ) throws Throwable { DBEXmlBean dBEXmlBean0 = new DBEXmlBean ( ) ; String string0 = dBEXmlBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test0 ( ) throws Throwable { CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; String string0 = createTableXmlBean0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; createTableXmlBean0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; String string0 = createTableXmlBean0 . getComment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComment ( ) { return comment ; }
void test3 ( ) throws Throwable { CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; createTableXmlBean0 . setComment ( "l% / - K" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test4 ( ) throws Throwable { CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; ArrayList < Object > arrayList0 = columnBean0 . getConstraintList ( ) ; createTableXmlBean0 . setColumns ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setColumns ( ArrayList columns ) { this . columns = columns ; }
void test5 ( ) throws Throwable { CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUnique ( ) { return unique ; }
void test6 ( ) throws Throwable { CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ArrayList < Object > arrayList0 = createTableXmlBean0 . getColumns ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test7 ( ) throws Throwable { CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; String string0 = createTableXmlBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test0 ( ) throws Throwable { DBEDigester dBEDigester0 = new DBEDigester ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { DBEXmlBean dBEXmlBean0 = DBEDigester . parseXML ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DBEXmlBean parseXML ( String xml ) { DBEXmlBean dXmlBean = null ; try { Digester digester = new Digester ( ) ; digester . setValidating ( false ) ; digester . addObjectCreate ( "dbe" , DBEXmlBean . class ) ; digester . addObjectCreate ( "dbe / createTable" , CreateTableXmlBean . class ) ; digester . addBeanPropertySetter ( "dbe / createTable / name" , "name" ) ; digester . addSetNext ( "dbe / createTable" , "addCreateTable" ) ; File input = new File ( "test . xml" ) ; dXmlBean = ( DBEXmlBean ) digester . parse ( input ) ; } catch ( Exception exc ) { exc . printStackTrace ( ) ; } return dXmlBean ; }
void test8 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStatusBean tableStatusBean0 = sqlserverTableStructure0 . getStatus ( dBDataBean0 , "Finish event threw exceptin" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test9 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStatusBean tableStatusBean0 = sqlserverTableStructure0 . getStatus ( dBDataBean0 , "noInpu" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test10 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStructureBean tableStructureBean0 = sqlserverTableStructure0 . getStructure ( dBDataBean0 , "r'jO + % & %cNpe^n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test12 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "pIyxg * QAlM | 5rbgV5" ) ; ArrayList < Object > arrayList0 = sqlserverTableStructure0 . alterModify ( ( HttpServletRequest ) null , dBDataBean0 , "pIyxg * QAlM | 5rbgV5" , columnBean0 , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test13 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "true" ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; ArrayList < Object > arrayList0 = sqlserverTableStructure0 . alterModify ( ( HttpServletRequest ) null , dBDataBean0 , "true" , columnBean0 , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test15 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "pIyxg * QAlM | 5rbgV5" ) ; ArrayList < Object > arrayList0 = sqlserverTableStructure0 . alterAdd ( ( HttpServletRequest ) null , dBDataBean0 , "pIyxg * QAlM | 5rbgV5" , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test16 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "true" ) ; ArrayList < Object > arrayList0 = sqlserverTableStructure0 . alterAdd ( ( HttpServletRequest ) null , dBDataBean0 , "true" , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test17 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; ArrayList < Object > arrayList0 = sqlserverTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test18 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; createTableXmlBean0 . addColumn ( ( ColumnBean ) null ) ; ArrayList < Object > arrayList0 = sqlserverTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test19 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setName ( "9 , q_ & VMv$ - TV\"r%5" ) ; columnBean0 . setLen ( 1118 ) ; ArrayList < Object > arrayList0 = sqlserverTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test20 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setName ( "9 , q_ & VMv$ - TV\"r%5" ) ; columnBean0 . setDefaultValue ( "9 , q_ & VMv$ - TV\"r%5" ) ; ArrayList < Object > arrayList0 = sqlserverTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test21 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setName ( "r'jO + % & %cNpe^n" ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setComment ( "r'jO + % & %cNpe^n" ) ; ArrayList < Object > arrayList0 = sqlserverTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test22 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setName ( "9 , q_ & VMv$ - TV\"r%5" ) ; columnBean0 . setExtra ( "9 , q_ & VMv$ - TV\"r%5" ) ; ArrayList < Object > arrayList0 = sqlserverTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test23 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setName ( "r'jO + % & %cNpe^n" ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setKey ( true ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; ArrayList < Object > arrayList0 = sqlserverTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test24 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setName ( "r'jO + % & %cNpe^n" ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setIndex ( true ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; ArrayList < Object > arrayList0 = sqlserverTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test25 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; columnBean0 . setName ( "r'jO + % & %cNpe^n" ) ; columnBean0 . setUnique ( true ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; ArrayList < Object > arrayList0 = sqlserverTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test26 ( ) throws Throwable { SqlserverTableStructure sqlserverTableStructure0 = new SqlserverTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; createTableXmlBean0 . setComment ( "r'jO + % & %cNpe^n" ) ; ArrayList < Object > arrayList0 = sqlserverTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test0 ( ) throws Throwable { SqlserverDataBase sqlserverDataBase0 = new SqlserverDataBase ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = sqlserverDataBase0 . testLogin ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String testLogin ( DBDataBean dataBean ) { String test = "" ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( LOGIN_QUERY ) ; while ( rs . next ( ) ) { String res = rs . getString ( 1 ) ; } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } } } return test ; }
void test0 ( ) throws Throwable { SqlserverTableList sqlserverTableList0 = new SqlserverTableList ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ArrayList < Object > arrayList0 = sqlserverTableList0 . getTableList ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test0 ( ) throws Throwable { SqlserverViewStructure sqlserverViewStructure0 = new SqlserverViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ViewStatusBean viewStatusBean0 = sqlserverViewStructure0 . getStatus ( dBDataBean0 , " = NL " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test3 ( ) throws Throwable { SqlserverViewStructure sqlserverViewStructure0 = new SqlserverViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ViewStructureBean viewStructureBean0 = sqlserverViewStructure0 . getStructure ( dBDataBean0 , "Ne" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getViewName ( ) { return viewName ; }
void test5 ( ) throws Throwable { SqlserverViewStructure sqlserverViewStructure0 = new SqlserverViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; boolean boolean0 = sqlserverViewStructure0 . isView ( dBDataBean0 , "Ne" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isView ( DBDataBean dataBean , String viewName ) { boolean isView = false ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "select count ( * ) c from sys . systables where TABLETYPE = 'V' and TABLENAME = '" + viewName + "' " ) ; while ( rs . next ( ) ) { int count = rs . getInt ( "c" ) ; if ( count > 0 ) { isView = true ; } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } return isView ; }
void test0 ( ) throws Throwable { CSVTableImport cSVTableImport0 = new CSVTableImport ( ) ; String string0 = cSVTableImport0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Simple csv import for one table" ; }
void test1 ( ) throws Throwable { CSVTableImport cSVTableImport0 = new CSVTableImport ( ) ; int int0 = cSVTableImport0 . getDataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDataType ( ) { return dataType ; }
void test0 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; parameterBean0 . setTranslatedLabel ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTranslatedLabel ( ) { return translatedLabel ; }
void test1 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; String string0 = parameterBean0 . getDefaultValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTranslatedLabel ( ) { return translatedLabel ; }
void test2 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; int int0 = parameterBean0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTranslatedLabel ( ) { return translatedLabel ; }
void test3 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; ArrayList < Object > arrayList0 = parameterBean0 . getValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTranslatedLabel ( ) { return translatedLabel ; }
void test4 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; boolean boolean0 = parameterBean0 . isTranslatedLabel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) { return type ; }
void test5 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; String string0 = parameterBean0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) { return type ; }
void test6 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; parameterBean0 . setLabel ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) { return type ; }
void test7 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; parameterBean0 . setName ( "tt . ? [ R3@Y~6\" } MOtDZ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) { return type ; }
void test8 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; parameterBean0 . setDefaultValue ( " ) ^ ? : qj . ] Ple@ } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTranslatedLabel ( ) { return translatedLabel ; }
void test9 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; String string0 = parameterBean0 . getLabel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTranslatedLabel ( ) { return translatedLabel ; }
void test10 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; parameterBean0 . setType ( ( - 1960 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) { return type ; }
void test0 ( ) throws Throwable { NonSelect nonSelect0 = new NonSelect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NonSelect ( ) { }
void test1 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; NonSelectResultBean nonSelectResultBean0 = NonSelect . executeQuery ( dBDataBean0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return rowCount ; }
void test0 ( ) throws Throwable { SimpleCount simpleCount0 = new SimpleCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleCount ( ) { }
void test1 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; int int0 = SimpleCount . executeQuery ( dBDataBean0 , "D" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int executeQuery ( DBDataBean dataBean , String query ) { int result = 0 ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( query ) ; while ( rs . next ( ) ) { result = rs . getInt ( 1 ) ; } } catch ( ClassNotFoundException e ) { log . error ( e . getMessage ( ) , e ) ; } catch ( SQLException e ) { log . error ( e . getMessage ( ) , e ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { log . error ( e . getMessage ( ) , e ) ; } } } return result ; }
void test0 ( ) throws Throwable { Select select0 = new Select ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Select ( ) { }
void test1 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; SelectResultBean selectResultBean0 = Select . executeQuery ( dBDataBean0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTable ( ) { return tableName ; }
void test8 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStatusBean tableStatusBean0 = derbyTableStructure0 . getStatus ( dBDataBean0 , "nv2XCOUD''" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test9 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStatusBean tableStatusBean0 = derbyTableStructure0 . getStatus ( dBDataBean0 , "' doesn't map to a String object" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test10 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStructureBean tableStructureBean0 = derbyTableStructure0 . getStructure ( dBDataBean0 , "' doesn't map to a String object" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTableName ( ) { return tableName ; }
void test11 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "t5ue" ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; ArrayList < Object > arrayList0 = derbyTableStructure0 . alterModify ( ( HttpServletRequest ) null , dBDataBean0 , "t5ue" , columnBean0 , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test12 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "true" ) ; ArrayList < Object > arrayList0 = derbyTableStructure0 . alterModify ( ( HttpServletRequest ) null , dBDataBean0 , "true" , columnBean0 , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test14 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ColumnForm columnForm0 = new ColumnForm ( ) ; columnForm0 . setNotnull ( "t5ue" ) ; ArrayList < Object > arrayList0 = derbyTableStructure0 . alterAdd ( ( HttpServletRequest ) null , dBDataBean0 , "t5ue" , columnForm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test15 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; createTableXmlBean0 . addColumn ( ( ColumnBean ) null ) ; ArrayList < Object > arrayList0 = derbyTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test16 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; ArrayList < Object > arrayList0 = derbyTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test17 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setLen ( 1 ) ; columnBean0 . setName ( "startlement ( " ) ; ArrayList < Object > arrayList0 = derbyTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test18 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setName ( "startlement ( " ) ; columnBean0 . setNullable ( true ) ; ArrayList < Object > arrayList0 = derbyTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test19 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setName ( "startlement ( " ) ; columnBean0 . setDefaultValue ( "startlement ( " ) ; ArrayList < Object > arrayList0 = derbyTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test20 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setComment ( "startlement ( " ) ; columnBean0 . setName ( "startlement ( " ) ; ArrayList < Object > arrayList0 = derbyTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test21 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setExtra ( "startlement ( " ) ; columnBean0 . setName ( "startlement ( " ) ; ArrayList < Object > arrayList0 = derbyTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test22 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setKey ( true ) ; columnBean0 . setName ( "startlement ( " ) ; ArrayList < Object > arrayList0 = derbyTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test23 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setName ( "startlement ( " ) ; columnBean0 . setIndex ( true ) ; ArrayList < Object > arrayList0 = derbyTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test24 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setUnique ( true ) ; createTableXmlBean0 . addColumn ( columnBean0 ) ; columnBean0 . setName ( "startlement ( " ) ; ArrayList < Object > arrayList0 = derbyTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test25 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; createTableXmlBean0 . setComment ( "startlement ( " ) ; ArrayList < Object > arrayList0 = derbyTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test26 ( ) throws Throwable { DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean ( ) ; ArrayList < Object > arrayList0 = derbyTableStructure0 . create ( ( HttpServletRequest ) null , dBDataBean0 , createTableXmlBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void changePrimary ( HttpServletRequest request , DBDataBean dataBean , String tableName , ArrayList columns ) { StringBuffer keys = new StringBuffer ( "" ) ; for ( int i = 0 ; i < columns . size ( ) ; i + + ) { ColumnBean columnBean = ( ColumnBean ) columns . get ( i ) ; if ( columnBean . isKey ( ) ) { if ( StringUtils . isNotEmpty ( keys . toString ( ) ) ) { keys . append ( " , " ) ; } keys . append ( "" + columnBean . getName ( ) + "" ) ; } } String query = "ALTER TABLE " + tableName + " DROP PRIMARY KEY , ADD PRIMARY KEY ( " + keys . toString ( ) + " ) " ; NonSelectResultBean nonSelectResultBean = NonSelect . executeQuery ( dataBean , query ) ; DBEHelper . setLogs ( request , nonSelectResultBean . getMessages ( ) ) ; }
void test0 ( ) throws Throwable { DerbyDataBase derbyDataBase0 = new DerbyDataBase ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = derbyDataBase0 . testLogin ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String testLogin ( DBDataBean dataBean ) { String test = "" ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( LOGIN_QUERY ) ; while ( rs . next ( ) ) { String res = rs . getString ( 1 ) ; } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; test = e . getMessage ( ) ; } } } return test ; }
void test1 ( ) throws Throwable { DerbyViewStructure derbyViewStructure0 = new DerbyViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ViewStatusBean viewStatusBean0 = derbyViewStructure0 . getStatus ( dBDataBean0 , "ClVbz^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test3 ( ) throws Throwable { DerbyViewStructure derbyViewStructure0 = new DerbyViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ViewStructureBean viewStructureBean0 = derbyViewStructure0 . getStructure ( dBDataBean0 , "@z" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getViewName ( ) { return viewName ; }
void test4 ( ) throws Throwable { DerbyViewStructure derbyViewStructure0 = new DerbyViewStructure ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; boolean boolean0 = derbyViewStructure0 . isView ( dBDataBean0 , "ClVbz^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isView ( DBDataBean dataBean , String viewName ) { boolean isView = false ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "select count ( * ) c from sys . systables where TABLETYPE = 'V' and TABLENAME = '" + viewName + "' " ) ; while ( rs . next ( ) ) { int count = rs . getInt ( "c" ) ; if ( count > 0 ) { isView = true ; } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } return isView ; }
void test0 ( ) throws Throwable { DerbyTableList derbyTableList0 = new DerbyTableList ( ) ; DBDataBean dBDataBean0 = new DBDataBean ( ) ; ArrayList < Object > arrayList0 = derbyTableList0 . getTableList ( dBDataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList getTableList ( DBDataBean dataBean ) { ArrayList tableList = new ArrayList ( ) ; Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "select tablename from pg_tables where tablename ! ~ '^pg_ + ' and tablename ! ~ '^sql_ + ' order by tablename ; " ) ; while ( rs . next ( ) ) { String tableName = rs . getString ( "tablename" ) ; TableBean tableBean = new TableBean ( ) ; tableBean . setName ( tableName ) ; tableList . add ( tableBean ) ; } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } return tableList ; }
void test0 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = DBEHelper . decodeAjax ( dBDataBean0 , "Azk#B9" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String decodeAjax ( DBDataBean dataBean , String property ) { String encodeType = dataBean . getEncoding ( ) ; try { String value = URLDecoder . decode ( URLEncoder . encode ( property , encodeType ) , "UTF - 8" ) ; / / System . out . println ( " - - - - - - - - - - - - - - - - - - - - " + property + " " + value ) ; return value ; } catch ( Exception e ) { return property ; } }
void test1 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; String string0 = DBEHelper . decodeISO ( dBDataBean0 , " ? " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String decodeISO ( DBDataBean dataBean , String property ) { String encodeType = dataBean . getEncoding ( ) ; try { String value = URLDecoder . decode ( URLEncoder . encode ( property , encodeType ) , "ISO - 8859 - 1" ) ; return value ; } catch ( Exception e ) { return property ; } }
void test2 ( ) throws Throwable { DBEHelper dBEHelper0 = new DBEHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { boolean boolean0 = DBEHelper . isDBAvailable ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDBAvailable ( String dbType ) { try { new XMLConfiguration ( dbType + " . xml" ) ; } catch ( ConfigurationException e ) { return false ; } return true ; }
void test4 ( ) throws Throwable { HashMap < Object , Object > hashMap0 = DBEHelper . parseJSON ( "\"8F : i { UNS47V# ) u" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test5 ( ) throws Throwable { HashMap < Object , Object > hashMap0 = DBEHelper . parseJSON ( "F : i { U@a47V# ) u" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HashMap parseJSON ( String data ) { if ( data . startsWith ( " { " ) ) { data = data . substring ( 1 ) ; data = data . substring ( 0 , data . length ( ) - 1 ) ; } System . out . println ( data ) ; HashMap keyValueMap = new HashMap ( ) ; ArrayList keyVals = new ArrayList ( ) ; String [ ] keyValues = StringUtils . split ( data , " , " ) ; String previousKV = "" ; for ( int i = 0 ; i < keyValues . length ; i + + ) { String keyValue = keyValues [ i ] ; if ( keyValue . startsWith ( "\"" ) ) { if ( ! previousKV . equals ( "" ) ) { keyVals . add ( previousKV ) ; } previousKV = keyValue ; } else { previousKV = previousKV + " , " + keyValue ; } } keyVals . add ( previousKV ) ; for ( int i = 0 ; i < keyVals . size ( ) ; i + + ) { String keyVal = ( String ) keyVals . get ( i ) ; String key = keyVal . substring ( 0 , keyVal . indexOf ( " : " ) ) ; key = StringUtils . replace ( key , "\"" , "" ) ; String value = keyVal . substring ( ( keyVal . indexOf ( " : " ) + 1 ) ) ; value = StringUtils . replace ( value , "\"" , "" ) ; keyValueMap . put ( key , value ) ; } return keyValueMap ; }
void test7 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; StringWriter stringWriter0 = new StringWriter ( 552 ) ; StringBuffer stringBuffer0 = stringWriter0 . getBuffer ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; DBEHelper . appendValue ( dBDataBean0 , stringBuffer0 , columnBean0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test8 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStructureBean tableStructureBean0 = new TableStructureBean ( ) ; StringBuffer stringBuffer0 = DBEHelper . createInsertQuery ( ( HttpServletRequest ) null , dBDataBean0 , "8A < %rr@ * dR10" , tableStructureBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendValueNoDecodeAjax ( DBDataBean dataBean , StringBuffer where , ColumnBean columnBean , String value ) { if ( StringUtils . isEmpty ( value ) ) { value = "null" ; } value = StringUtils . replace ( value , "'" , getApostropheWrapper ( dataBean ) ) ; if ( value . equalsIgnoreCase ( "null" ) ) { where . append ( " = NULL " ) ; } else { DataTypeBean dataTypeBean = getDataTypeBean ( dataBean , columnBean . getDataType ( ) ) ; where . append ( " = " ) ; where . append ( dataTypeBean . getValueWrapper ( ) ) ; where . append ( decodeISO ( dataBean , value ) ) ; where . append ( dataTypeBean . getValueWrapper ( ) ) ; where . append ( " " ) ; } }
void test9 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStructureBean tableStructureBean0 = new TableStructureBean ( ) ; StringBuffer stringBuffer0 = DBEHelper . createInsertQuery ( ( HttpServletRequest ) null , dBDataBean0 , "" , tableStructureBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendValueNoDecodeAjax ( DBDataBean dataBean , StringBuffer where , ColumnBean columnBean , String value ) { if ( StringUtils . isEmpty ( value ) ) { value = "null" ; } value = StringUtils . replace ( value , "'" , getApostropheWrapper ( dataBean ) ) ; if ( value . equalsIgnoreCase ( "null" ) ) { where . append ( " = NULL " ) ; } else { DataTypeBean dataTypeBean = getDataTypeBean ( dataBean , columnBean . getDataType ( ) ) ; where . append ( " = " ) ; where . append ( dataTypeBean . getValueWrapper ( ) ) ; where . append ( decodeISO ( dataBean , value ) ) ; where . append ( dataTypeBean . getValueWrapper ( ) ) ; where . append ( " " ) ; } }
void test13 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; StringWriter stringWriter0 = new StringWriter ( ) ; StringBuffer stringBuffer0 = stringWriter0 . getBuffer ( ) ; ColumnBean columnBean0 = new ColumnBean ( ) ; DBEHelper . appendValuesNoDecodeAjax ( dBDataBean0 , stringBuffer0 , columnBean0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test14 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; DataTypeBean dataTypeBean0 = DBEHelper . getDataTypeBean ( dBDataBean0 , "Connection . close ( ) has already been called . Invalid operation in this state . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataTypeBean getDataTypeBean ( DBDataBean dataBean , String columnType ) { DataTypeBean dataTypeBean = null ; if ( columnType . indexOf ( " ( " ) ! = - 1 ) { columnType = columnType . substring ( 0 , columnType . indexOf ( " ( " ) ) ; System . out . println ( columnType ) ; } try { XMLConfiguration xmlConfiguration = new XMLConfiguration ( dataBean . getDbType ( ) + " . xml" ) ; int maxIndex = xmlConfiguration . getMaxIndex ( "dataTypes . dataType" ) + 1 ; for ( int i = 0 ; i < maxIndex ; i + + ) { String name = xmlConfiguration . getString ( "dataTypes . dataType ( " + i + " ) . name" ) ; if ( name . equalsIgnoreCase ( columnType ) ) { dataTypeBean = new DataTypeBean ( ) ; dataTypeBean . setName ( name ) ; if ( xmlConfiguration . containsKey ( "dataTypes . dataType ( " + i + " ) . len" ) ) { dataTypeBean . setLen ( xmlConfiguration . getBoolean ( "dataTypes . dataType ( " + i + " ) . len" ) ) ; } if ( xmlConfiguration . containsKey ( "dataTypes . dataType ( " + i + " ) . dec" ) ) { dataTypeBean . setDec ( xmlConfiguration . getBoolean ( "dataTypes . dataType ( " + i + " ) . dec" ) ) ; } if ( xmlConfiguration . containsKey ( "dataTypes . dataType ( " + i + " ) . forceLength" ) ) { dataTypeBean . setForceLength ( xmlConfiguration . getBoolean ( "dataTypes . dataType ( " + i + " ) . forceLength" ) ) ; } if ( xmlConfiguration . containsKey ( "dataTypes . dataType ( " + i + " ) . valueWrapper" ) ) { dataTypeBean . setValueWrapper ( xmlConfiguration . getString ( "dataTypes . dataType ( " + i + " ) . valueWrapper" ) ) ; } if ( xmlConfiguration . containsKey ( "dataTypes . dataType ( " + i + " ) . maxlength" ) ) { dataTypeBean . setMaxlength ( xmlConfiguration . getInt ( "dataTypes . dataType ( " + i + " ) . maxlength" ) ) ; } if ( xmlConfiguration . containsKey ( "dataTypes . dataType ( " + i + " ) . formSize" ) ) { dataTypeBean . setFormSize ( xmlConfiguration . getInt ( "dataTypes . dataType ( " + i + " ) . formSize" ) ) ; } if ( xmlConfiguration . containsKey ( "dataTypes . dataType ( " + i + " ) . formInput" ) ) { dataTypeBean . setFormInput ( xmlConfiguration . getString ( "dataTypes . dataType ( " + i + " ) . formInput" ) ) ; } if ( xmlConfiguration . containsKey ( "dataTypes . dataType ( " + i + " ) . format" ) ) { dataTypeBean . setFormat ( xmlConfiguration . getString ( "dataTypes . dataType ( " + i + " ) . format" ) ) ; } break ; } } } catch ( ConfigurationException e ) { e . printStackTrace ( ) ; } return dataTypeBean ; }
void test15 ( ) throws Throwable { DBDataBean dBDataBean0 = new DBDataBean ( ) ; TableStructureBean tableStructureBean0 = new TableStructureBean ( ) ; String string0 = DBEHelper . createInsertQuery ( ( String [ ] ) null , dBDataBean0 , "" , tableStructureBean0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" StringBuffer createInsertQuery ( HttpServletRequest request , DBDataBean dataBean , String tableName , TableStructureBean tableStructureBean ) { StringBuffer query = new StringBuffer ( "INSERT INTO " + tableName + " ( " ) ; ArrayList columns = tableStructureBean . getColumns ( ) ; for ( int i = 0 ; i < columns . size ( ) ; i + + ) { ColumnBean columnBean = ( ColumnBean ) columns . get ( i ) ; if ( i > 0 ) { query . append ( " , " ) ; } query . append ( columnBean . getName ( ) ) ; } query . append ( " ) VALUES ( " ) ; for ( int i = 0 ; i < columns . size ( ) ; i + + ) { ColumnBean columnBean = ( ColumnBean ) columns . get ( i ) ; if ( i > 0 ) { query . append ( " , " ) ; } String value = request . getParameter ( columnBean . getName ( ) ) ; if ( columnBean . getDataType ( ) . toUpperCase ( ) . startsWith ( "SET" ) ) { query . append ( " '" ) ; String [ ] values = StringUtils . split ( columnBean . getDim ( ) , " , " ) ; for ( int j = 0 ; j < values . length ; j + + ) { value = request . getParameter ( columnBean . getName ( ) + " [ " + j + " ] " ) ; if ( value ! = null ) { if ( j > 0 ) { query . append ( " , " ) ; } query . append ( value ) ; } } query . append ( "' " ) ; } else { appendValues ( dataBean , query , columnBean , value ) ; } } query . append ( " ) " ) ; return query ; }
void test0 ( ) throws Throwable { DBEUtils dBEUtils0 = new DBEUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; Collection < Object > collection0 = valueListHandler0 . getList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList getList ( DBDataBean dataBean ) { ArrayList sequences = new ArrayList ( ) ; / * Connection connection = null ; try { connection = DBEHelper . getConnection ( dataBean ) ; Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( "SHOW TABLE STATUS " ) ; while ( rs . next ( ) ) { String name = rs . getString ( "NAME" ) ; String auto = rs . getString ( "Auto_Increment" ) ; if ( auto ! = null ) { SequenceStructureBean sequenceStructureBean = new SequenceStructureBean ( ) ; sequenceStructureBean . setName ( name ) ; sequenceStructureBean . setMinValue ( 1 ) ; sequenceStructureBean . setMaxValue ( "" ) ; sequenceStructureBean . setIncrementBy ( 1 ) ; sequenceStructureBean . setLastNumber ( rs . getInt ( "Auto_Increment" ) ) ; sequences . add ( sequenceStructureBean ) ; } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } finally { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } } } * / return sequences ; }
void test3 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; valueListHandler0 . setList ( ( List ) linkedList0 ) ; int int0 = valueListHandler0 . getCurrentIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) throws IteratorException { int currIndex = 0 ; / / Will not advance iterator if ( list ! = null ) { currIndex = listIterator . nextIndex ( ) ; } else { throw new IteratorException ( "" ) ; } return currIndex ; }
void test5 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; valueListHandler0 . setList ( ( List ) linkedList0 ) ; int int0 = valueListHandler0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return size ; }
void test10 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; valueListHandler0 . setList ( ( List ) linkedList0 ) ; linkedList0 . add ( "" ) ; valueListHandler0 . setIndex ( 1 ) ; valueListHandler0 . getPreviousElements ( ( - 724 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) throws IteratorException { int currIndex = 0 ; / / Will not advance iterator if ( list ! = null ) { currIndex = listIterator . nextIndex ( ) ; } else { throw new IteratorException ( "" ) ; } return currIndex ; }
void test11 ( ) throws Throwable { ValueListHandler valueListHandler0 = new ValueListHandler ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; valueListHandler0 . setList ( ( List ) linkedList0 ) ; linkedList0 . add ( "N + , sgR - : " ) ; valueListHandler0 . setIndex ( ( - 217 ) ) ; List < Object > list0 = valueListHandler0 . getNextElements ( 747 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List getPreviousElements ( int count ) throws IteratorException { int i = 0 ; Object object = null ; LinkedList list = new LinkedList ( ) ; if ( listIterator ! = null ) { while ( listIterator . hasPrevious ( ) & & ( i < count ) ) { object = listIterator . previous ( ) ; list . add ( object ) ; i + + ; } } else { throw new IteratorException ( "" ) ; / / No data } return list ; }
