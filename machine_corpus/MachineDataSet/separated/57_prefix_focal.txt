void test6 ( ) throws Throwable { GlobalStateMsg globalStateMsg0 = new GlobalStateMsg ( 1 ) ; String string0 = globalStateMsg0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " ( " + maxPlayers + " ) " + name ; }
void test7 ( ) throws Throwable { GlobalStateMsg globalStateMsg0 = new GlobalStateMsg ( 2 ) ; String string0 = globalStateMsg0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " ( " + maxPlayers + " ) " + name ; }
void test8 ( ) throws Throwable { GlobalStateMsg globalStateMsg0 = new GlobalStateMsg ( 7 ) ; globalStateMsg0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " ( " + maxPlayers + " ) " + name ; }
void test0 ( ) throws Throwable { MapInfo mapInfo0 = new MapInfo ( "6 - * tU7 / P } 9$D - . A2" , "6 - * tU7 / P } 9$D - . A2" , ( - 1681 ) ) ; int int0 = mapInfo0 . getMaxPlayers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxPlayers ( ) { return maxPlayers ; }
void test1 ( ) throws Throwable { MapInfo mapInfo0 = new MapInfo ( ( String ) null , ( String ) null , 0 ) ; mapInfo0 . getFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxPlayers ( ) { return maxPlayers ; }
void test2 ( ) throws Throwable { MapInfo mapInfo0 = new MapInfo ( "6 - * tU7 / P } 9$D - . A2" , "6 - * tU7 / P } 9$D - . A2" , ( - 1681 ) ) ; String string0 = mapInfo0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxPlayers ( ) { return maxPlayers ; }
void test3 ( ) throws Throwable { MapInfo mapInfo0 = new MapInfo ( "6 - * tU7 / P } 9$D - . A2" , "6 - * tU7 / P } 9$D - . A2" , ( - 1681 ) ) ; ImageIcon imageIcon0 = new ImageIcon ( "6 - * tU7 / P } 9$D - . A2" ) ; mapInfo0 . setPreview ( imageIcon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " ( " + maxPlayers + " ) " + name ; }
void test4 ( ) throws Throwable { MapInfo mapInfo0 = new MapInfo ( " | ] #@dNHUo < XTMDRSsCP" , " | ] #@dNHUo < XTMDRSsCP" , 0 ) ; mapInfo0 . getPreview ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxPlayers ( ) { return maxPlayers ; }
void test5 ( ) throws Throwable { MapInfo mapInfo0 = new MapInfo ( "6 - * tU7 / P } 9$D - . A2" , "6 - * tU7 / P } 9$D - . A2" , ( - 1681 ) ) ; String string0 = mapInfo0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " ( " + maxPlayers + " ) " + name ; }
void test1 ( ) throws Throwable { SessionListMsg sessionListMsg0 = new SessionListMsg ( ) ; byte [ ] byteArray0 = new byte [ 1 ] ; ImageIcon imageIcon0 = new ImageIcon ( byteArray0 , "" ) ; SessionDetailsMsg sessionDetailsMsg0 = new SessionDetailsMsg ( "" , ( List < String > ) null , imageIcon0 , ( int ) ( byte ) 12 , ( int ) ( byte ) 12 , 0 ) ; sessionListMsg0 . addSessionInfo ( sessionDetailsMsg0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalRounds ( ) { return totalRounds ; }
void test2 ( ) throws Throwable { SessionListMsg sessionListMsg0 = new SessionListMsg ( ) ; Vector < SessionDetailsMsg > vector0 = sessionListMsg0 . getSessionInfos ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Vector < SessionDetailsMsg > getSessionInfos ( ) { return sessionInfos ; }
void test1 ( ) throws Throwable { Vector < MapInfo > vector0 = new Vector < MapInfo > ( ) ; MapListMsg mapListMsg0 = new MapListMsg ( ( List < MapInfo > ) vector0 ) ; String string0 = mapListMsg0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " ( " + maxPlayers + " ) " + name ; }
void test0 ( ) throws Throwable { JoinAckMsg joinAckMsg0 = new JoinAckMsg ( false , 1309 ) ; Vector < ParticipantInfo > vector0 = new Vector < ParticipantInfo > ( ) ; joinAckMsg0 . setParticipants ( ( List < ParticipantInfo > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setParticipants ( List < ParticipantInfo > participants ) { this . participants = participants ; }
void test0 ( ) throws Throwable { ParticipantInfo participantInfo0 = new ParticipantInfo ( 1489 , "" ) ; String string0 = participantInfo0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test1 ( ) throws Throwable { ParticipantInfo participantInfo0 = new ParticipantInfo ( 1489 , "" ) ; int int0 = participantInfo0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test0 ( ) throws Throwable { Point point0 = new Point ( ) ; PlayerInfo playerInfo0 = new PlayerInfo ( 0 , point0 , "" ) ; Point point1 = playerInfo0 . getPosition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test1 ( ) throws Throwable { Point point0 = new Point ( ) ; PlayerInfo playerInfo0 = new PlayerInfo ( 1 , point0 , ( String ) null ) ; int int0 = playerInfo0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test2 ( ) throws Throwable { Point point0 = new Point ( ) ; PlayerInfo playerInfo0 = new PlayerInfo ( 0 , point0 , "" ) ; String string0 = playerInfo0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test0 ( ) throws Throwable { MagicKillMsg magicKillMsg0 = new MagicKillMsg ( 996 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MagicKillMsg ( int playerId ) { this . playerId = playerId ; }
void test0 ( ) throws Throwable { ExplosionBounds explosionBounds0 = new ExplosionBounds ( ( - 1 ) , ( - 1 ) , ( - 1 ) , 0 ) ; int int0 = explosionBounds0 . getDown ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRight ( ) { return right ; }
void test1 ( ) throws Throwable { ExplosionBounds explosionBounds0 = new ExplosionBounds ( ( - 1 ) , ( - 1 ) , 0 , 0 ) ; int int0 = explosionBounds0 . getLeft ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRight ( ) { return right ; }
void test2 ( ) throws Throwable { ExplosionBounds explosionBounds0 = new ExplosionBounds ( ( - 599 ) , ( - 599 ) , ( - 599 ) , ( - 1 ) ) ; int int0 = explosionBounds0 . getUp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLeft ( ) { return left ; }
void test3 ( ) throws Throwable { ExplosionBounds explosionBounds0 = new ExplosionBounds ( 0 , 2020 , 324 , 0 ) ; int int0 = explosionBounds0 . getRight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDown ( ) { return down ; }
void test4 ( ) throws Throwable { ExplosionBounds explosionBounds0 = new ExplosionBounds ( 1 , ( - 938 ) , ( - 938 ) , 1 ) ; Point point0 = new Point ( ) ; boolean boolean0 = explosionBounds0 . contain ( point0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDown ( ) { return down ; }
void test5 ( ) throws Throwable { ExplosionBounds explosionBounds0 = new ExplosionBounds ( ( - 1 ) , ( - 1 ) , 0 , 0 ) ; Point point0 = new Point ( ( - 1 ) , ( - 1 ) ) ; boolean boolean0 = explosionBounds0 . contain ( point0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRight ( ) { return right ; }
void test6 ( ) throws Throwable { Point point0 = new Point ( ) ; ExplosionBounds explosionBounds0 = new ExplosionBounds ( ( - 1 ) , ( - 504 ) , ( - 1996 ) , ( - 1 ) ) ; boolean boolean0 = explosionBounds0 . contain ( point0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLeft ( ) { return left ; }
void test7 ( ) throws Throwable { ExplosionBounds explosionBounds0 = new ExplosionBounds ( ( - 599 ) , ( - 599 ) , ( - 599 ) , ( - 1 ) ) ; Point point0 = new Point ( 0 , ( - 599 ) ) ; boolean boolean0 = explosionBounds0 . contain ( point0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDown ( ) { return down ; }
void test8 ( ) throws Throwable { ExplosionBounds explosionBounds0 = new ExplosionBounds ( ( - 203 ) , 1224 , 1140 , 0 ) ; Point point0 = new Point ( ) ; boolean boolean0 = explosionBounds0 . contain ( point0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRight ( ) { return right ; }
void test0 ( ) throws Throwable { DBGameUser dBGameUser0 = new DBGameUser ( ) ; String string0 = dBGameUser0 . getPassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return password ; }
void test1 ( ) throws Throwable { DBGameUser dBGameUser0 = new DBGameUser ( ) ; String string0 = dBGameUser0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { DBGameUser dBGameUser0 = new DBGameUser ( ) ; dBGameUser0 . setPassword ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " ( " + maxPlayers + " ) " + name ; }
void test3 ( ) throws Throwable { DBGameUser dBGameUser0 = new DBGameUser ( ) ; dBGameUser0 . setScore ( ( Integer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " ( " + maxPlayers + " ) " + name ; }
void test4 ( ) throws Throwable { DBGameUser dBGameUser0 = new DBGameUser ( ) ; String string0 = dBGameUser0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " ( " + maxPlayers + " ) " + name ; }
void test5 ( ) throws Throwable { DBGameUser dBGameUser0 = new DBGameUser ( ) ; dBGameUser0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return password ; }
void test0 ( ) throws Throwable { LocalControl localControl0 = new LocalControl ( ( Player ) null ) ; JFormattedTextField jFormattedTextField0 = new JFormattedTextField ( ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) jFormattedTextField0 , ( - 510 ) , ( long ) ( - 510 ) , ( - 1153 ) , 8 , ' < ' ) ; localControl0 . keyReleased ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyReleased ( KeyEvent e ) { keys [ e . getKeyCode ( ) ] = false ; }
void test1 ( ) throws Throwable { LocalControl localControl0 = new LocalControl ( ( Player ) null ) ; JFormattedTextField jFormattedTextField0 = new JFormattedTextField ( ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) jFormattedTextField0 , ( - 510 ) , ( long ) ( - 510 ) , ( - 1153 ) , 8 , ' < ' ) ; localControl0 . keyTyped ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyTyped ( KeyEvent e ) { }
void test2 ( ) throws Throwable { LocalControl localControl0 = new LocalControl ( ( Player ) null ) ; JFormattedTextField jFormattedTextField0 = new JFormattedTextField ( ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) jFormattedTextField0 , ( - 510 ) , ( long ) ( - 510 ) , ( - 1153 ) , 8 , ' < ' ) ; localControl0 . keyPressed ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyPressed ( KeyEvent e ) { / / TODO cleanup keys [ e . getKeyCode ( ) ] = true ; switch ( e . getKeyCode ( ) ) { case KeyEvent . VK_N : BomberClient . getInstance ( ) . getCurrentSession ( ) . getCurrentRound ( ) . toggleDisplayNames ( ) ; break ; / / case KeyEvent . VK_ESCAPE : / / / / TODO strange things happening with this / / BomberClient . getInstance ( ) . quitRunningSession ( player . getId ( ) ) ; / / break ; } }
void test0 ( ) throws Throwable { SplashThread splashThread0 = new SplashThread ( ) ; splashThread0 . setRun ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test0 ( ) throws Throwable { JScrollBar jScrollBar0 = new JScrollBar ( ) ; int [ ] intArray0 = new int [ 2 ] ; MemoryImageSource memoryImageSource0 = new MemoryImageSource ( 0 , 0 , intArray0 , 0 , 0 ) ; Image image0 = jScrollBar0 . createImage ( ( ImageProducer ) memoryImageSource0 ) ; ImageCache imageCache0 = new ImageCache ( image0 , 39 , 46 , 39 , 848 ) ; int int0 = imageCache0 . getH ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getH ( ) { return h ; }
void test1 ( ) throws Throwable { JScrollBar jScrollBar0 = new JScrollBar ( ) ; int [ ] intArray0 = new int [ 2 ] ; MemoryImageSource memoryImageSource0 = new MemoryImageSource ( 0 , 0 , intArray0 , 0 , 0 ) ; Image image0 = jScrollBar0 . createImage ( ( ImageProducer ) memoryImageSource0 ) ; ImageCache imageCache0 = new ImageCache ( image0 , 39 , 46 , 39 , 848 ) ; Image image1 = imageCache0 . getImg ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getH ( ) { return h ; }
void test2 ( ) throws Throwable { JScrollBar jScrollBar0 = new JScrollBar ( ) ; int [ ] intArray0 = new int [ 2 ] ; MemoryImageSource memoryImageSource0 = new MemoryImageSource ( 0 , 0 , intArray0 , 0 , 0 ) ; Image image0 = jScrollBar0 . createImage ( ( ImageProducer ) memoryImageSource0 ) ; ImageCache imageCache0 = new ImageCache ( image0 , 39 , 46 , 39 , 848 ) ; imageCache0 . setImg ( ( Image ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getH ( ) { return h ; }
void test3 ( ) throws Throwable { ImageCache imageCache0 = new ImageCache ( ( Image ) null , 0 , 0 , 439 , 0 ) ; int int0 = imageCache0 . getX ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getX ( ) { return x ; }
void test4 ( ) throws Throwable { JScrollBar jScrollBar0 = new JScrollBar ( ) ; int [ ] intArray0 = new int [ 2 ] ; MemoryImageSource memoryImageSource0 = new MemoryImageSource ( 0 , 0 , intArray0 , 0 , 0 ) ; Image image0 = jScrollBar0 . createImage ( ( ImageProducer ) memoryImageSource0 ) ; ImageCache imageCache0 = new ImageCache ( image0 , 39 , 46 , 39 , 848 ) ; int int0 = imageCache0 . getY ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getY ( ) { return y ; }
void test5 ( ) throws Throwable { ImageCache imageCache0 = new ImageCache ( ( Image ) null , 0 , 1 , ( - 1970 ) , 1 ) ; int int0 = imageCache0 . getW ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getW ( ) { return w ; }
void test0 ( ) throws Throwable { CreateGameDialog createGameDialog0 = new CreateGameDialog ( ) ; ItemEvent itemEvent0 = new ItemEvent ( ( ItemSelectable ) createGameDialog0 . jButtonStart , 0 , ( Object ) null , 0 ) ; createGameDialog0 . itemStateChanged ( itemEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void itemStateChanged ( ItemEvent arg0 ) { }
void test1 ( ) throws Throwable { CreateGameDialog createGameDialog0 = new CreateGameDialog ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) createGameDialog0 , 787 , ( long ) 787 , 787 , 787 , 787 , 787 , false ) ; createGameDialog0 . mouseExited ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseExited ( MouseEvent arg0 ) { / / TODO Auto - generated method stub }
void test2 ( ) throws Throwable { CreateGameDialog createGameDialog0 = new CreateGameDialog ( ) ; createGameDialog0 . mouseReleased ( ( MouseEvent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseReleased ( MouseEvent arg0 ) { / / TODO Auto - generated method stub }
void test4 ( ) throws Throwable { CreateGameDialog createGameDialog0 = new CreateGameDialog ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) createGameDialog0 , 0 , ( long ) 0 , 0 , 0 , 0 , 0 , 0 , 0 , false , 0 , 0 , 0 ) ; createGameDialog0 . mouseEntered ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseEntered ( MouseEvent arg0 ) { / / TODO Auto - generated method stub }
void test5 ( ) throws Throwable { CreateGameDialog createGameDialog0 = new CreateGameDialog ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) createGameDialog0 , 787 , ( long ) 787 , 787 , 787 , 787 , 787 , false ) ; createGameDialog0 . mousePressed ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mousePressed ( MouseEvent arg0 ) { / / TODO Auto - generated method stub }
void test6 ( ) throws Throwable { CreateGameDialog createGameDialog0 = new CreateGameDialog ( ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "Name" , 0 , "Name" , ( long ) 0 , 0 ) ; createGameDialog0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent evt ) { if ( evt . getSource ( ) . equals ( jButtonStart ) ) { } }
void test7 ( ) throws Throwable { CreateGameDialog createGameDialog0 = new CreateGameDialog ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) createGameDialog0 , 11 , ( long ) 11 , 11 , 11 , 11 , 11 , false ) ; createGameDialog0 . mouseClicked ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent evt ) { if ( evt . getSource ( ) . equals ( jListMap ) ) { if ( jListMap . getSelectedIndex ( ) ! = - 1 ) { jLabelMessage . setVisible ( false ) ; boolean isOk = true ; int number = - 1 ; try { number = Integer . parseInt ( jTextFieldPlayerNumber . getText ( ) ) ; } catch ( Exception e ) { } Object [ ] items = jListMap . getSelectedValues ( ) ; for ( int i = 0 ; i < items . length ; i + + ) { MapInfo cash = ( MapInfo ) items [ i ] ; int aktuellNumber = cash . getMaxPlayers ( ) ; if ( aktuellNumber < number ) { isOk = false ; } } if ( isOk ) { jButtonStart . setEnabled ( true ) ; jButtonStart . setVisible ( true ) ; } else { jLabelMessage . setText ( " < HTML > At least one of the chosen maps < br > doesn't support " + number + " player" ) ; jLabelMessage . setVisible ( true ) ; jButtonStart . setEnabled ( false ) ; jButtonStart . setVisible ( false ) ; } } else { jButtonStart . setEnabled ( false ) ; jButtonStart . setVisible ( false ) ; } Object o = jListMap . getSelectedValue ( ) ; ImageIcon icon = new ImageIcon ( ) ; icon = ( ( ( MapInfo ) o ) . getPreview ( ) ) ; / / draw preview direct to panel preview . setImg ( icon . getImage ( ) ) ; super . repaint ( ) ; } else if ( evt . getSource ( ) . equals ( jButtonStart ) & & jListMap . getSelectedIndex ( ) ! = - 1 ) { int number = - 1 ; int rounds = - 1 ; try { number = Integer . parseInt ( jTextFieldPlayerNumber . getText ( ) ) ; rounds = Integer . parseInt ( jTextFieldRounds . getText ( ) ) ; if ( number < 2 ) { number = 2 ; } StartFrame frame = StartFrame . getInstance ( ) ; Config . playerNumber = number ; Config . rounds = rounds ; Config . gameName = jTextFieldName . getText ( ) ; ArrayList < String > selection = new ArrayList < String > ( ) ; ImageIcon previewIcon = null ; for ( Object o : jListMap . getSelectedValues ( ) ) { selection . add ( ( ( MapInfo ) o ) . getFile ( ) ) ; / / set preview of first map if ( previewIcon = = null ) { previewIcon = ( ( MapInfo ) o ) . getPreview ( ) ; } } BomberClient . getInstance ( ) . createSession ( Config . gameName , selection , previewIcon , Config . playerNumber , Config . rounds ) ; } catch ( Exception e ) { / / TODO Hinweis wegen geht nicht } } else if ( evt . getSource ( ) . equals ( jButtonReturn ) ) { StartFrame . getInstance ( ) . showGlobalLobby ( ) ; } repaint ( ) ; }
void test0 ( ) throws Throwable { Cash cash0 = new Cash ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " ( " + maxPlayers + " ) " + name ; }
void test0 ( ) throws Throwable { Game game0 = new Game ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " ( " + maxPlayers + " ) " + name ; }
void test1 ( ) throws Throwable { Game game0 = new Game ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " ( " + maxPlayers + " ) " + name ; }
void test2 ( ) throws Throwable { Game game0 = new Game ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " ( " + maxPlayers + " ) " + name ; }
void test3 ( ) throws Throwable { Game game0 = new Game ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyPressed ( KeyEvent e ) { / / TODO cleanup keys [ e . getKeyCode ( ) ] = true ; switch ( e . getKeyCode ( ) ) { case KeyEvent . VK_N : BomberClient . getInstance ( ) . getCurrentSession ( ) . getCurrentRound ( ) . toggleDisplayNames ( ) ; break ; / / case KeyEvent . VK_ESCAPE : / / / / TODO strange things happening with this / / BomberClient . getInstance ( ) . quitRunningSession ( player . getId ( ) ) ; / / break ; } }
void test0 ( ) throws Throwable { GlobalHighscoreLobby globalHighscoreLobby0 = new GlobalHighscoreLobby ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) globalHighscoreLobby0 , 140 , 0L , 140 , 140 , 140 , 140 , 0 , 0 , false , 0 ) ; globalHighscoreLobby0 . mouseEntered ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseEntered ( MouseEvent arg0 ) { / / TODO Auto - generated method stub }
void test1 ( ) throws Throwable { GlobalHighscoreLobby globalHighscoreLobby0 = new GlobalHighscoreLobby ( ) ; globalHighscoreLobby0 . updateHighscore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateHighscore ( ) { / / Top10Highscore hs = new Top10Highscore ( ) ; / / fillScore ( hs . getPlayerList ( ) ) ; }
void test2 ( ) throws Throwable { GlobalHighscoreLobby globalHighscoreLobby0 = new GlobalHighscoreLobby ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) globalHighscoreLobby0 , 0 , ( long ) 0 , 0 , 0 , 0 , 0 , 0 , 0 , false , 0 , 0 , 0 ) ; globalHighscoreLobby0 . mousePressed ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mousePressed ( MouseEvent arg0 ) { / / TODO Auto - generated method stub }
void test3 ( ) throws Throwable { GlobalHighscoreLobby globalHighscoreLobby0 = new GlobalHighscoreLobby ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) globalHighscoreLobby0 , 0 , ( long ) 0 , 0 , 0 , 0 , 0 , 0 , 0 , false , 0 , 0 , 0 ) ; globalHighscoreLobby0 . mouseExited ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseExited ( MouseEvent arg0 ) { / / TODO Auto - generated method stub }
void test4 ( ) throws Throwable { GlobalHighscoreLobby globalHighscoreLobby0 = new GlobalHighscoreLobby ( ) ; JTableHeader jTableHeader0 = new JTableHeader ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) jTableHeader0 , 430 , ( long ) 430 , 430 , 0 , 430 , 430 , false , 0 ) ; globalHighscoreLobby0 . mouseReleased ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseReleased ( MouseEvent arg0 ) { / / TODO Auto - generated method stub }
void test5 ( ) throws Throwable { GlobalHighscoreLobby globalHighscoreLobby0 = new GlobalHighscoreLobby ( ) ; ArrayList < DBGameUser > arrayList0 = new ArrayList < DBGameUser > ( ) ; globalHighscoreLobby0 . fillScore ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void fillScore ( ArrayList < DBGameUser > user ) { int index = user . size ( ) ; index = 10 - index ; if ( index < 10 ) { DBGameUser myUser ; / / System . out . println ( "User : " + user . get ( 0 ) . getName ( ) ) ; switch ( index ) { case 0 : { myUser = user . get ( 9 ) ; user_10 . setText ( myUser . getName ( ) ) ; score_10 . setText ( "" + myUser . getScore ( ) ) ; } case 1 : { myUser = user . get ( 8 ) ; user_09 . setText ( myUser . getName ( ) ) ; score_09 . setText ( "" + myUser . getScore ( ) ) ; } case 2 : { myUser = user . get ( 7 ) ; user_08 . setText ( myUser . getName ( ) ) ; score_08 . setText ( "" + myUser . getScore ( ) ) ; } case 3 : { myUser = user . get ( 6 ) ; user_07 . setText ( myUser . getName ( ) ) ; score_07 . setText ( "" + myUser . getScore ( ) ) ; } case 4 : { myUser = user . get ( 5 ) ; user_06 . setText ( myUser . getName ( ) ) ; score_06 . setText ( "" + myUser . getScore ( ) ) ; } case 5 : { myUser = user . get ( 4 ) ; user_05 . setText ( myUser . getName ( ) ) ; score_05 . setText ( "" + myUser . getScore ( ) ) ; } case 6 : { myUser = user . get ( 3 ) ; user_04 . setText ( myUser . getName ( ) ) ; score_04 . setText ( "" + myUser . getScore ( ) ) ; } case 7 : { myUser = user . get ( 2 ) ; user_03 . setText ( myUser . getName ( ) ) ; score_03 . setText ( "" + myUser . getScore ( ) ) ; } case 8 : { myUser = user . get ( 1 ) ; user_02 . setText ( myUser . getName ( ) ) ; score_02 . setText ( "" + myUser . getScore ( ) ) ; } case 9 : { myUser = user . get ( 0 ) ; user_01 . setText ( myUser . getName ( ) ) ; score_01 . setText ( "" + myUser . getScore ( ) ) ; } } } repaint ( ) ; }
void test6 ( ) throws Throwable { GlobalHighscoreLobby globalHighscoreLobby0 = new GlobalHighscoreLobby ( ) ; ArrayList < DBGameUser > arrayList0 = new ArrayList < DBGameUser > ( ) ; DBGameUser dBGameUser0 = new DBGameUser ( ) ; arrayList0 . add ( dBGameUser0 ) ; globalHighscoreLobby0 . fillScore ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void fillScore ( ArrayList < DBGameUser > user ) { int index = user . size ( ) ; index = 10 - index ; if ( index < 10 ) { DBGameUser myUser ; / / System . out . println ( "User : " + user . get ( 0 ) . getName ( ) ) ; switch ( index ) { case 0 : { myUser = user . get ( 9 ) ; user_10 . setText ( myUser . getName ( ) ) ; score_10 . setText ( "" + myUser . getScore ( ) ) ; } case 1 : { myUser = user . get ( 8 ) ; user_09 . setText ( myUser . getName ( ) ) ; score_09 . setText ( "" + myUser . getScore ( ) ) ; } case 2 : { myUser = user . get ( 7 ) ; user_08 . setText ( myUser . getName ( ) ) ; score_08 . setText ( "" + myUser . getScore ( ) ) ; } case 3 : { myUser = user . get ( 6 ) ; user_07 . setText ( myUser . getName ( ) ) ; score_07 . setText ( "" + myUser . getScore ( ) ) ; } case 4 : { myUser = user . get ( 5 ) ; user_06 . setText ( myUser . getName ( ) ) ; score_06 . setText ( "" + myUser . getScore ( ) ) ; } case 5 : { myUser = user . get ( 4 ) ; user_05 . setText ( myUser . getName ( ) ) ; score_05 . setText ( "" + myUser . getScore ( ) ) ; } case 6 : { myUser = user . get ( 3 ) ; user_04 . setText ( myUser . getName ( ) ) ; score_04 . setText ( "" + myUser . getScore ( ) ) ; } case 7 : { myUser = user . get ( 2 ) ; user_03 . setText ( myUser . getName ( ) ) ; score_03 . setText ( "" + myUser . getScore ( ) ) ; } case 8 : { myUser = user . get ( 1 ) ; user_02 . setText ( myUser . getName ( ) ) ; score_02 . setText ( "" + myUser . getScore ( ) ) ; } case 9 : { myUser = user . get ( 0 ) ; user_01 . setText ( myUser . getName ( ) ) ; score_01 . setText ( "" + myUser . getScore ( ) ) ; } } } repaint ( ) ; }
void test7 ( ) throws Throwable { GlobalHighscoreLobby globalHighscoreLobby0 = new GlobalHighscoreLobby ( ) ; ArrayList < DBGameUser > arrayList0 = new ArrayList < DBGameUser > ( ) ; DBGameUser dBGameUser0 = new DBGameUser ( ) ; arrayList0 . add ( dBGameUser0 ) ; arrayList0 . add ( dBGameUser0 ) ; arrayList0 . add ( dBGameUser0 ) ; arrayList0 . add ( dBGameUser0 ) ; arrayList0 . add ( dBGameUser0 ) ; arrayList0 . add ( dBGameUser0 ) ; arrayList0 . add ( dBGameUser0 ) ; arrayList0 . add ( dBGameUser0 ) ; globalHighscoreLobby0 . fillScore ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void fillScore ( ArrayList < DBGameUser > user ) { int index = user . size ( ) ; index = 10 - index ; if ( index < 10 ) { DBGameUser myUser ; / / System . out . println ( "User : " + user . get ( 0 ) . getName ( ) ) ; switch ( index ) { case 0 : { myUser = user . get ( 9 ) ; user_10 . setText ( myUser . getName ( ) ) ; score_10 . setText ( "" + myUser . getScore ( ) ) ; } case 1 : { myUser = user . get ( 8 ) ; user_09 . setText ( myUser . getName ( ) ) ; score_09 . setText ( "" + myUser . getScore ( ) ) ; } case 2 : { myUser = user . get ( 7 ) ; user_08 . setText ( myUser . getName ( ) ) ; score_08 . setText ( "" + myUser . getScore ( ) ) ; } case 3 : { myUser = user . get ( 6 ) ; user_07 . setText ( myUser . getName ( ) ) ; score_07 . setText ( "" + myUser . getScore ( ) ) ; } case 4 : { myUser = user . get ( 5 ) ; user_06 . setText ( myUser . getName ( ) ) ; score_06 . setText ( "" + myUser . getScore ( ) ) ; } case 5 : { myUser = user . get ( 4 ) ; user_05 . setText ( myUser . getName ( ) ) ; score_05 . setText ( "" + myUser . getScore ( ) ) ; } case 6 : { myUser = user . get ( 3 ) ; user_04 . setText ( myUser . getName ( ) ) ; score_04 . setText ( "" + myUser . getScore ( ) ) ; } case 7 : { myUser = user . get ( 2 ) ; user_03 . setText ( myUser . getName ( ) ) ; score_03 . setText ( "" + myUser . getScore ( ) ) ; } case 8 : { myUser = user . get ( 1 ) ; user_02 . setText ( myUser . getName ( ) ) ; score_02 . setText ( "" + myUser . getScore ( ) ) ; } case 9 : { myUser = user . get ( 0 ) ; user_01 . setText ( myUser . getName ( ) ) ; score_01 . setText ( "" + myUser . getScore ( ) ) ; } } } repaint ( ) ; }
void test9 ( ) throws Throwable { GlobalHighscoreLobby globalHighscoreLobby0 = new GlobalHighscoreLobby ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) globalHighscoreLobby0 , 80 , ( long ) 80 , 80 , 80 , 80 , 80 , true , 80 , 80 , 80 ) ; globalHighscoreLobby0 . mouseClicked ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent evt ) { if ( evt . getSource ( ) . equals ( jListMap ) ) { if ( jListMap . getSelectedIndex ( ) ! = - 1 ) { jLabelMessage . setVisible ( false ) ; boolean isOk = true ; int number = - 1 ; try { number = Integer . parseInt ( jTextFieldPlayerNumber . getText ( ) ) ; } catch ( Exception e ) { } Object [ ] items = jListMap . getSelectedValues ( ) ; for ( int i = 0 ; i < items . length ; i + + ) { MapInfo cash = ( MapInfo ) items [ i ] ; int aktuellNumber = cash . getMaxPlayers ( ) ; if ( aktuellNumber < number ) { isOk = false ; } } if ( isOk ) { jButtonStart . setEnabled ( true ) ; jButtonStart . setVisible ( true ) ; } else { jLabelMessage . setText ( " < HTML > At least one of the chosen maps < br > doesn't support " + number + " player" ) ; jLabelMessage . setVisible ( true ) ; jButtonStart . setEnabled ( false ) ; jButtonStart . setVisible ( false ) ; } } else { jButtonStart . setEnabled ( false ) ; jButtonStart . setVisible ( false ) ; } Object o = jListMap . getSelectedValue ( ) ; ImageIcon icon = new ImageIcon ( ) ; icon = ( ( ( MapInfo ) o ) . getPreview ( ) ) ; / / draw preview direct to panel preview . setImg ( icon . getImage ( ) ) ; super . repaint ( ) ; } else if ( evt . getSource ( ) . equals ( jButtonStart ) & & jListMap . getSelectedIndex ( ) ! = - 1 ) { int number = - 1 ; int rounds = - 1 ; try { number = Integer . parseInt ( jTextFieldPlayerNumber . getText ( ) ) ; rounds = Integer . parseInt ( jTextFieldRounds . getText ( ) ) ; if ( number < 2 ) { number = 2 ; } StartFrame frame = StartFrame . getInstance ( ) ; Config . playerNumber = number ; Config . rounds = rounds ; Config . gameName = jTextFieldName . getText ( ) ; ArrayList < String > selection = new ArrayList < String > ( ) ; ImageIcon previewIcon = null ; for ( Object o : jListMap . getSelectedValues ( ) ) { selection . add ( ( ( MapInfo ) o ) . getFile ( ) ) ; / / set preview of first map if ( previewIcon = = null ) { previewIcon = ( ( MapInfo ) o ) . getPreview ( ) ; } } BomberClient . getInstance ( ) . createSession ( Config . gameName , selection , previewIcon , Config . playerNumber , Config . rounds ) ; } catch ( Exception e ) { / / TODO Hinweis wegen geht nicht } } else if ( evt . getSource ( ) . equals ( jButtonReturn ) ) { StartFrame . getInstance ( ) . showGlobalLobby ( ) ; } repaint ( ) ; }
void test10 ( ) throws Throwable { GlobalHighscoreLobby globalHighscoreLobby0 = new GlobalHighscoreLobby ( ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "" , 1 , "" , ( long ) 1 , 1 ) ; globalHighscoreLobby0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent evt ) { if ( evt . getSource ( ) . equals ( jButtonStart ) ) { } }
void test0 ( ) throws Throwable { MyTextField myTextField0 = new MyTextField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MyTextField ( String text ) { super ( text ) ; init ( ) ; }
void test1 ( ) throws Throwable { MyTextField myTextField0 = new MyTextField ( " | & [ w3LPmx ( g } ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MyTextField ( String text ) { super ( text ) ; init ( ) ; }
void test0 ( ) throws Throwable { MyPanel myPanel0 = new MyPanel ( ) ; myPanel0 . setTitel ( " / images / background . png" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setTitel ( String titel ) { this . titel = titel ; }
void test1 ( ) throws Throwable { MyPanel myPanel0 = new MyPanel ( ) ; myPanel0 . setColor ( myPanel0 . col ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setColor ( Color col ) { this . col = col ; }
void test2 ( ) throws Throwable { MyPanel myPanel0 = new MyPanel ( ) ; myPanel0 . setBild ( "null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setBild ( String bild ) { this . bild = bild ; }
void test3 ( ) throws Throwable { MyPanel myPanel0 = new MyPanel ( ) ; DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer ( ) ; myPanel0 . addLabel ( ( JLabel ) defaultListCellRenderer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addLabel ( JLabel label ) { vectorLabels . add ( label ) ; }
void test4 ( ) throws Throwable { MyPanel myPanel0 = new MyPanel ( ) ; myPanel0 . setPicture ( "null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPicture ( String picture ) { this . picture = picture ; }
void test5 ( ) throws Throwable { MyPanel myPanel0 = new MyPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getY ( ) { return y ; }
void test6 ( ) throws Throwable { MyPanel myPanel0 = new MyPanel ( ) ; ImageCache imageCache0 = new ImageCache ( ( Image ) null , 0 , 0 , 0 , 0 ) ; myPanel0 . addImage ( imageCache0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addImage ( ImageCache ic ) { vectorImages . add ( ic ) ; }
void test0 ( ) throws Throwable { MyButton myButton0 = new MyButton ( "'ceh6 + A" ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) myButton0 , 1 , ( long ) 1 , 1 , 1 , 1 , 1 , false , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mousePressed ( MouseEvent arg0 ) { / / TODO Auto - generated method stub }
void test1 ( ) throws Throwable { MyButton myButton0 = new MyButton ( "" ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) myButton0 , 1 , ( long ) 1 , 1 , 1 , 1 , 1 , false ) ; myButton0 . mouseReleased ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseReleased ( MouseEvent arg0 ) { / / TODO Auto - generated method stub }
void test2 ( ) throws Throwable { MyButton myButton0 = new MyButton ( ) ; myButton0 . mouseClicked ( ( MouseEvent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent evt ) { if ( evt . getSource ( ) . equals ( jListMap ) ) { if ( jListMap . getSelectedIndex ( ) ! = - 1 ) { jLabelMessage . setVisible ( false ) ; boolean isOk = true ; int number = - 1 ; try { number = Integer . parseInt ( jTextFieldPlayerNumber . getText ( ) ) ; } catch ( Exception e ) { } Object [ ] items = jListMap . getSelectedValues ( ) ; for ( int i = 0 ; i < items . length ; i + + ) { MapInfo cash = ( MapInfo ) items [ i ] ; int aktuellNumber = cash . getMaxPlayers ( ) ; if ( aktuellNumber < number ) { isOk = false ; } } if ( isOk ) { jButtonStart . setEnabled ( true ) ; jButtonStart . setVisible ( true ) ; } else { jLabelMessage . setText ( " < HTML > At least one of the chosen maps < br > doesn't support " + number + " player" ) ; jLabelMessage . setVisible ( true ) ; jButtonStart . setEnabled ( false ) ; jButtonStart . setVisible ( false ) ; } } else { jButtonStart . setEnabled ( false ) ; jButtonStart . setVisible ( false ) ; } Object o = jListMap . getSelectedValue ( ) ; ImageIcon icon = new ImageIcon ( ) ; icon = ( ( ( MapInfo ) o ) . getPreview ( ) ) ; / / draw preview direct to panel preview . setImg ( icon . getImage ( ) ) ; super . repaint ( ) ; } else if ( evt . getSource ( ) . equals ( jButtonStart ) & & jListMap . getSelectedIndex ( ) ! = - 1 ) { int number = - 1 ; int rounds = - 1 ; try { number = Integer . parseInt ( jTextFieldPlayerNumber . getText ( ) ) ; rounds = Integer . parseInt ( jTextFieldRounds . getText ( ) ) ; if ( number < 2 ) { number = 2 ; } StartFrame frame = StartFrame . getInstance ( ) ; Config . playerNumber = number ; Config . rounds = rounds ; Config . gameName = jTextFieldName . getText ( ) ; ArrayList < String > selection = new ArrayList < String > ( ) ; ImageIcon previewIcon = null ; for ( Object o : jListMap . getSelectedValues ( ) ) { selection . add ( ( ( MapInfo ) o ) . getFile ( ) ) ; / / set preview of first map if ( previewIcon = = null ) { previewIcon = ( ( MapInfo ) o ) . getPreview ( ) ; } } BomberClient . getInstance ( ) . createSession ( Config . gameName , selection , previewIcon , Config . playerNumber , Config . rounds ) ; } catch ( Exception e ) { / / TODO Hinweis wegen geht nicht } } else if ( evt . getSource ( ) . equals ( jButtonReturn ) ) { StartFrame . getInstance ( ) . showGlobalLobby ( ) ; } repaint ( ) ; }
void test4 ( ) throws Throwable { MyButton myButton0 = new MyButton ( ) ; myButton0 . mouseExited ( ( MouseEvent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseExited ( MouseEvent arg0 ) { / / TODO Auto - generated method stub }
void test0 ( ) throws Throwable { BombView bombView0 = new BombView ( ( Bomb ) null , ( GfxFactory ) null ) ; bombView0 . getGameObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test1 ( ) throws Throwable { BombView bombView0 = new BombView ( ( Bomb ) null , ( GfxFactory ) null ) ; bombView0 . setVisible ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test2 ( ) throws Throwable { BombView bombView0 = new BombView ( ( Bomb ) null , ( GfxFactory ) null ) ; boolean boolean0 = bombView0 . isActive ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return visible ; }
void test3 ( ) throws Throwable { StatusView statusView0 = new StatusView ( ( GameObject ) null , ( GfxFactory ) null ) ; boolean boolean0 = statusView0 . isVisible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test0 ( ) throws Throwable { ExplosionGfxFactory explosionGfxFactory0 = new ExplosionGfxFactory ( ) ; BufferedImage bufferedImage0 = ( BufferedImage ) explosionGfxFactory0 . getExplosionImage ( 5 , 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return this . type ; }
void test0 ( ) throws Throwable { GameCanvas gameCanvas0 = new GameCanvas ( 4 , 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " ( " + maxPlayers + " ) " + name ; }
void test1 ( ) throws Throwable { GameCanvas gameCanvas0 = new GameCanvas ( 865 , 865 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return " ( " + maxPlayers + " ) " + name ; }
void test2 ( ) throws Throwable { GameCanvas gameCanvas0 = new GameCanvas ( 865 , 865 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { ResourceService resourceService0 = new ResourceService ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { InputStream inputStream0 = ResourceService . getInputStream ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream getInputStream ( String path ) { InputStream resourceAsStream = ResourceService . class . getResourceAsStream ( path ) ; if ( resourceAsStream = = null ) { throw new IllegalArgumentException ( "No such resource : " + path ) ; } return resourceAsStream ; }
void test0 ( ) throws Throwable { JDesktopPane jDesktopPane0 = new JDesktopPane ( ) ; Point point0 = jDesktopPane0 . getLocation ( ) ; Tile tile0 = new Tile ( point0 ) ; tile0 . setType ( "_J" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return visible ; }
void test1 ( ) throws Throwable { Tile tile0 = new Tile ( ( Point ) null ) ; tile0 . setBombable ( true ) ; tile0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBombable ( ) { return this . bombable ; }
void test3 ( ) throws Throwable { Tile tile0 = new Tile ( ( Point ) null ) ; boolean boolean0 = tile0 . collide ( ( GameObject ) tile0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAccessable ( ) { return true ; }
void test4 ( ) throws Throwable { Tile tile0 = new Tile ( ( Point ) null ) ; boolean boolean0 = tile0 . isAccessible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSpeedFactor ( ) { return speedFactor ; }
void test5 ( ) throws Throwable { JDesktopPane jDesktopPane0 = new JDesktopPane ( ) ; Point point0 = jDesktopPane0 . getLocation ( ) ; Tile tile0 = new Tile ( point0 ) ; tile0 . setAccessible ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAccessible ( ) { return this . accessible ; }
void test6 ( ) throws Throwable { Tile tile0 = new Tile ( ( Point ) null ) ; double double0 = tile0 . getSpeedFactor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return visible ; }
void test7 ( ) throws Throwable { Tile tile0 = new Tile ( ( Point ) null ) ; tile0 . update ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAccessible ( ) { return this . accessible ; }
void test8 ( ) throws Throwable { Tile tile0 = new Tile ( ( Point ) null ) ; tile0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSpeedFactor ( ) { return speedFactor ; }
void test9 ( ) throws Throwable { Tile tile0 = new Tile ( ( Point ) null ) ; tile0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return visible ; }
void test10 ( ) throws Throwable { Tile tile0 = new Tile ( ( Point ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBombable ( ) { return this . bombable ; }
void test11 ( ) throws Throwable { JDesktopPane jDesktopPane0 = new JDesktopPane ( ) ; Point point0 = jDesktopPane0 . getLocation ( ) ; Tile tile0 = new Tile ( point0 ) ; boolean boolean0 = tile0 . isAccessable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getSpeedFactor ( ) { return speedFactor ; }
void test12 ( ) throws Throwable { Tile tile0 = new Tile ( ( Point ) null ) ; boolean boolean0 = tile0 . isBombable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return visible ; }
void test13 ( ) throws Throwable { JDesktopPane jDesktopPane0 = new JDesktopPane ( ) ; Point point0 = jDesktopPane0 . getLocation ( ) ; Tile tile0 = new Tile ( point0 ) ; TreeSet < GameObject > treeSet0 = new TreeSet < GameObject > ( ) ; tile0 . updateWithCollisionCheck ( ( Collection < GameObject > ) treeSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAccessable ( ) { return true ; }
void test14 ( ) throws Throwable { Tile tile0 = new Tile ( ( Point ) null ) ; boolean boolean0 = tile0 . isVisible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAccessable ( ) { return true ; }
void test15 ( ) throws Throwable { Tile tile0 = new Tile ( ( Point ) null ) ; tile0 . setVisible ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return visible ; }
void test0 ( ) throws Throwable { SoundTest soundTest0 = new SoundTest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
