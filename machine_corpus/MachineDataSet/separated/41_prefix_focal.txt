void test1 ( ) throws Throwable { Class < ? > class0 = FollowApp . class ; ImageIcon imageIcon0 = FollowApp . getIcon ( class0 , "action . ClearHighlights . accelerator" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ImageIcon getIcon ( Class < ? > clazz , String iconNameKey ) { String filename = getResourceString ( iconNameKey ) ; URL url = clazz . getResource ( filename ) ; LOG . finer ( "Class : " + clazz + " , iconNameKey : " + iconNameKey ) ; LOG . finer ( "filename : " + filename ) ; LOG . finer ( "url : " + url ) ; ImageIcon icon = null ; if ( url ! = null ) { icon = new ImageIcon ( url ) ; LOG . finer ( "errored : " + ( java . awt . MediaTracker . ERRORED = = icon . getImageLoadStatus ( ) ) ) ; } return icon ; }
void test2 ( ) throws Throwable { FollowApp followApp0 = FollowApp . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FollowApp getInstance ( ) { return instance ; }
void test3 ( ) throws Throwable { Class < ? > class0 = List . class ; ImageIcon imageIcon0 = FollowApp . getIcon ( class0 , "action . Exit . name" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ImageIcon getIcon ( Class < ? > clazz , String iconNameKey ) { String filename = getResourceString ( iconNameKey ) ; URL url = clazz . getResource ( filename ) ; LOG . finer ( "Class : " + clazz + " , iconNameKey : " + iconNameKey ) ; LOG . finer ( "filename : " + filename ) ; LOG . finer ( "url : " + url ) ; ImageIcon icon = null ; if ( url ! = null ) { icon = new ImageIcon ( url ) ; LOG . finer ( "errored : " + ( java . awt . MediaTracker . ERRORED = = icon . getImageLoadStatus ( ) ) ) ; } return icon ; }
void test4 ( ) throws Throwable { Pause pause0 = new Pause ( ( FollowApp ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ActionContext getContext ( ) { return context ; }
void test0 ( ) throws Throwable { File file0 = new File ( "LYx" , "LYx" ) ; OutputDestination [ ] outputDestinationArray0 = new OutputDestination [ 2 ] ; FileFollower fileFollower0 = new FileFollower ( file0 , 0 , 0 , outputDestinationArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void restart ( ) { needsRestart = true ; runnerThread . interrupt ( ) ; }
void test1 ( ) throws Throwable { OutputDestination [ ] outputDestinationArray0 = new OutputDestination [ 2 ] ; FileFollower fileFollower0 = new FileFollower ( ( File ) null , 1 , 1 , outputDestinationArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void stopAndWait ( ) throws InterruptedException { stop ( ) ; while ( runnerThread . isAlive ( ) ) { Thread . yield ( ) ; } }
void test2 ( ) throws Throwable { File file0 = new File ( "m : } > KZ\"Ls ) Uw" , "m : } > KZ\"Ls ) Uw" ) ; OutputDestination [ ] outputDestinationArray0 = new OutputDestination [ 9 ] ; FileFollower fileFollower0 = new FileFollower ( file0 , 0 , 0 , outputDestinationArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBufferSize ( ) { return bufferSize ; }
void test3 ( ) throws Throwable { File file0 = new File ( "m : } > KZ\"Ls ) Uw" , "m : } > KZ\"Ls ) Uw" ) ; OutputDestination [ ] outputDestinationArray0 = new OutputDestination [ 9 ] ; FileFollower fileFollower0 = new FileFollower ( file0 , 0 , 0 , outputDestinationArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBufferSize ( ) { return bufferSize ; }
void test4 ( ) throws Throwable { OutputDestination [ ] outputDestinationArray0 = new OutputDestination [ 2 ] ; FileFollower fileFollower0 = new FileFollower ( ( File ) null , ( - 694 ) , ( - 694 ) , outputDestinationArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBufferSize ( ) { return bufferSize ; }
void test5 ( ) throws Throwable { OutputDestination [ ] outputDestinationArray0 = new OutputDestination [ 1 ] ; FileFollower fileFollower0 = new FileFollower ( ( File ) null , outputDestinationArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBufferSize ( ) { return bufferSize ; }
void test6 ( ) throws Throwable { OutputDestination [ ] outputDestinationArray0 = new OutputDestination [ 5 ] ; FileFollower fileFollower0 = new FileFollower ( ( File ) null , outputDestinationArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBufferSize ( ) { return bufferSize ; }
void test7 ( ) throws Throwable { File file0 = new File ( "" ) ; OutputDestination [ ] outputDestinationArray0 = new OutputDestination [ 2 ] ; FileFollower fileFollower0 = new FileFollower ( file0 , 0 , 0 , outputDestinationArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLatency ( ) { return latency ; }
void test8 ( ) throws Throwable { File file0 = new File ( "" ) ; OutputDestination [ ] outputDestinationArray0 = new OutputDestination [ 2 ] ; FileFollower fileFollower0 = new FileFollower ( file0 , 0 , 0 , outputDestinationArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLatency ( ) { return latency ; }
void test9 ( ) throws Throwable { OutputDestination [ ] outputDestinationArray0 = new OutputDestination [ 2 ] ; FileFollower fileFollower0 = new FileFollower ( ( File ) null , ( - 694 ) , ( - 694 ) , outputDestinationArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBufferSize ( ) { return bufferSize ; }
void test10 ( ) throws Throwable { OutputDestination [ ] outputDestinationArray0 = new OutputDestination [ 2 ] ; FileFollower fileFollower0 = new FileFollower ( ( File ) null , outputDestinationArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void start ( ) { if ( continueRunning & & paused ) { unpause ( ) ; } else { continueRunning = true ; paused = false ; runnerThread = new Thread ( new Runner ( ) , getFollowedFile ( ) . getName ( ) ) ; runnerThread . start ( ) ; } }
void test11 ( ) throws Throwable { OutputDestination [ ] outputDestinationArray0 = new OutputDestination [ 1 ] ; FileFollower fileFollower0 = new FileFollower ( ( File ) null , outputDestinationArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLatency ( ) { return latency ; }
void test12 ( ) throws Throwable { OutputDestination [ ] outputDestinationArray0 = new OutputDestination [ 2 ] ; FileFollower fileFollower0 = new FileFollower ( ( File ) null , ( - 694 ) , ( - 694 ) , outputDestinationArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBufferSize ( ) { return bufferSize ; }
void test13 ( ) throws Throwable { OutputDestination [ ] outputDestinationArray0 = new OutputDestination [ 5 ] ; FileFollower fileFollower0 = new FileFollower ( ( File ) null , outputDestinationArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPaused ( ) { return paused ; }
void test14 ( ) throws Throwable { FileFollower fileFollower0 = new FileFollower ( ( File ) null , ( - 1744 ) , ( - 1744 ) , ( OutputDestination [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBufferSize ( ) { return bufferSize ; }
void test15 ( ) throws Throwable { File file0 = new File ( "" ) ; OutputDestination [ ] outputDestinationArray0 = new OutputDestination [ 2 ] ; JTextField jTextField0 = new JTextField ( ) ; SearchEngine searchEngine0 = new SearchEngine ( 0 ) ; FilteredDestination filteredDestination0 = new FilteredDestination ( ( JTextComponent ) jTextField0 , searchEngine0 , "" , false ) ; outputDestinationArray0 [ 0 ] = ( OutputDestination ) filteredDestination0 ; outputDestinationArray0 [ 1 ] = ( OutputDestination ) filteredDestination0 ; FileFollower fileFollower0 = new FileFollower ( file0 , 0 , 0 , outputDestinationArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLatency ( ) { return latency ; }
void test0 ( ) throws Throwable { NextTab nextTab0 = new NextTab ( ( FollowApp ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NextTab ( FollowApp app ) { super ( app , FollowApp . getResourceString ( "action . NextFile . name" ) , FollowApp . getResourceString ( "action . NextFile . mnemonic" ) , FollowApp . getResourceString ( "action . NextFile . accelerator" ) , FollowApp . getIcon ( NextTab . class , "action . NextFile . icon" ) , ActionContext . MULTI_FILE ) ; }
void test0 ( ) throws Throwable { PreviousTab previousTab0 = new PreviousTab ( ( FollowApp ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PreviousTab ( FollowApp app ) { super ( app , FollowApp . getResourceString ( "action . PreviousFile . name" ) , FollowApp . getResourceString ( "action . PreviousFile . mnemonic" ) , FollowApp . getResourceString ( "action . PreviousFile . accelerator" ) , FollowApp . getIcon ( PreviousTab . class , "action . PreviousFile . icon" ) , ActionContext . MULTI_FILE ) ; }
void test0 ( ) throws Throwable { JTextField jTextField0 = new JTextField ( ) ; SearchEngine searchEngine0 = new SearchEngine ( 2 ) ; FilteredDestination filteredDestination0 = new FilteredDestination ( ( JTextComponent ) jTextField0 , searchEngine0 , "MDHw + n" , false ) ; boolean boolean0 = filteredDestination0 . autoPositionCaret ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test1 ( ) throws Throwable { JEditorPane jEditorPane0 = new JEditorPane ( " . > ^'W < - Tp68G" , " . > ^'W < - Tp68G" ) ; JTextComponentDestination jTextComponentDestination0 = new JTextComponentDestination ( ( JTextComponent ) jEditorPane0 , false ) ; jTextComponentDestination0 . setJTextComponent ( ( JTextComponent ) jEditorPane0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test2 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( ) ; JTextComponentDestination jTextComponentDestination0 = new JTextComponentDestination ( ( JTextComponent ) jPasswordField0 , true ) ; jTextComponentDestination0 . removeFilteredView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test3 ( ) throws Throwable { JTextArea jTextArea0 = new JTextArea ( ) ; JTextComponentDestination jTextComponentDestination0 = new JTextComponentDestination ( ( JTextComponent ) jTextArea0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test4 ( ) throws Throwable { JEditorPane jEditorPane0 = new JEditorPane ( "" , "" ) ; SearchEngine searchEngine0 = new SearchEngine ( 0 ) ; FilteredDestination filteredDestination0 = new FilteredDestination ( ( JTextComponent ) jEditorPane0 , searchEngine0 , "X { & yP * ^ . xr#9 rh_ ( jD" , true ) ; filteredDestination0 . addFilteredView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test5 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( ) ; JTextComponentDestination jTextComponentDestination0 = new JTextComponentDestination ( ( JTextComponent ) jPasswordField0 , false ) ; JPasswordField jPasswordField1 = ( JPasswordField ) jTextComponentDestination0 . getJTextComponent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test6 ( ) throws Throwable { JTextField jTextField0 = new JTextField ( ) ; SearchEngine searchEngine0 = new SearchEngine ( 1797 ) ; FilteredDestination filteredDestination0 = new FilteredDestination ( ( JTextComponent ) jTextField0 , searchEngine0 , "" , false ) ; filteredDestination0 . handlePrint ( "rzq & AYp [ 'h" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void handlePrint ( String s ) { try { comp . getDocument ( ) . insertString ( comp . getDocument ( ) . getLength ( ) , s , null ) ; if ( autoPositionCaret ) { comp . setCaretPosition ( comp . getDocument ( ) . getLength ( ) ) ; } } catch ( BadLocationException e ) { / / just ignore , nothing we can do LOG . log ( Level . SEVERE , "BadLocationException in JTextComponentDestination" , e ) ; } }
void test7 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( ) ; JTextComponentDestination jTextComponentDestination0 = new JTextComponentDestination ( ( JTextComponent ) jPasswordField0 , true ) ; jTextComponentDestination0 . print ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test8 ( ) throws Throwable { JTextField jTextField0 = new JTextField ( "" ) ; JTextComponentDestination jTextComponentDestination0 = new JTextComponentDestination ( ( JTextComponent ) jTextField0 , false ) ; jTextComponentDestination0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test9 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( ) ; JTextComponentDestination jTextComponentDestination0 = new JTextComponentDestination ( ( JTextComponent ) jPasswordField0 , true ) ; jTextComponentDestination0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test0 ( ) throws Throwable { JTextPane jTextPane0 = new JTextPane ( ) ; JTextPaneDestination jTextPaneDestination0 = new JTextPaneDestination ( jTextPane0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test1 ( ) throws Throwable { JTextPane jTextPane0 = new JTextPane ( ) ; JTextPaneDestination jTextPaneDestination0 = new JTextPaneDestination ( jTextPane0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test2 ( ) throws Throwable { JTextPane jTextPane0 = new JTextPane ( ) ; JTextPaneDestination jTextPaneDestination0 = new JTextPaneDestination ( jTextPane0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test3 ( ) throws Throwable { JTextPane jTextPane0 = new JTextPane ( ) ; JTextPaneDestination jTextPaneDestination0 = new JTextPaneDestination ( jTextPane0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test4 ( ) throws Throwable { JTextPane jTextPane0 = new JTextPane ( ) ; JTextPaneDestination jTextPaneDestination0 = new JTextPaneDestination ( jTextPane0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test5 ( ) throws Throwable { DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument ( ) ; JTextPane jTextPane0 = new JTextPane ( ( StyledDocument ) defaultStyledDocument0 ) ; JTextPaneDestination jTextPaneDestination0 = new JTextPaneDestination ( jTextPane0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test6 ( ) throws Throwable { JTextPane jTextPane0 = new JTextPane ( ) ; JTextPaneDestination jTextPaneDestination0 = new JTextPaneDestination ( jTextPane0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test7 ( ) throws Throwable { JTextPane jTextPane0 = new JTextPane ( ) ; JTextPaneDestination jTextPaneDestination0 = new JTextPaneDestination ( jTextPane0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test8 ( ) throws Throwable { DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument ( ) ; JTextPane jTextPane0 = new JTextPane ( ( StyledDocument ) defaultStyledDocument0 ) ; JTextPaneDestination jTextPaneDestination0 = new JTextPaneDestination ( jTextPane0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test9 ( ) throws Throwable { JTextPane jTextPane0 = new JTextPane ( ) ; JTextPaneDestination jTextPaneDestination0 = new JTextPaneDestination ( jTextPane0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test2 ( ) throws Throwable { PrintStreamDestination printStreamDestination0 = new PrintStreamDestination ( ( PrintStream ) null ) ; PrintStream printStream0 = printStreamDestination0 . getPrintStream ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PrintStream getPrintStream ( ) { return printStream ; }
void test1 ( ) throws Throwable { JEditorPane jEditorPane0 = new JEditorPane ( ) ; JTextComponentDestination jTextComponentDestination0 = new JTextComponentDestination ( ( JTextComponent ) jEditorPane0 , false ) ; JTextPaneDestination jTextPaneDestination0 = new JTextPaneDestination ( ( JTextPane ) null , false ) ; jTextComponentDestination0 . removeView ( ( OutputDestination ) jTextPaneDestination0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test2 ( ) throws Throwable { JTextArea jTextArea0 = new JTextArea ( ) ; JTextComponentDestination jTextComponentDestination0 = new JTextComponentDestination ( ( JTextComponent ) jTextArea0 , false ) ; FilteredDestination filteredDestination0 = new FilteredDestination ( ( JTextComponent ) jTextArea0 , ( SearchEngine ) null , "6N4G\" / m : E" , false ) ; filteredDestination0 . addView ( ( OutputDestination ) jTextComponentDestination0 ) ; filteredDestination0 . removeView ( ( OutputDestination ) filteredDestination0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test3 ( ) throws Throwable { JTextArea jTextArea0 = new JTextArea ( ) ; JTextComponentDestination jTextComponentDestination0 = new JTextComponentDestination ( ( JTextComponent ) jTextArea0 , false ) ; FilteredDestination filteredDestination0 = new FilteredDestination ( ( JTextComponent ) jTextArea0 , ( SearchEngine ) null , "6N4G\" / m : E" , false ) ; filteredDestination0 . addView ( ( OutputDestination ) jTextComponentDestination0 ) ; filteredDestination0 . removeView ( ( OutputDestination ) jTextComponentDestination0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test4 ( ) throws Throwable { JEditorPane jEditorPane0 = new JEditorPane ( ) ; SearchEngine searchEngine0 = new SearchEngine ( 1 ) ; FilteredDestination filteredDestination0 = new FilteredDestination ( ( JTextComponent ) jEditorPane0 , searchEngine0 , "" , false ) ; filteredDestination0 . notifyViews ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean autoPositionCaret ( ) { return destination . autoPositionCaret ( ) ; }
void test0 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( 0 ) ; FontUIResource fontUIResource0 = ( FontUIResource ) jPasswordField0 . getFont ( ) ; SearchableTextPane searchableTextPane0 = new SearchableTextPane ( ( Font ) fontUIResource0 , 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTabSize ( ) { return getInt ( TAB_SIZE_KEY ) ; }
void test1 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( 0 ) ; FontUIResource fontUIResource0 = ( FontUIResource ) jPasswordField0 . getFont ( ) ; SearchableTextPane searchableTextPane0 = new SearchableTextPane ( ( Font ) fontUIResource0 , 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTabSize ( ) { return getInt ( TAB_SIZE_KEY ) ; }
void test2 ( ) throws Throwable { SearchableTextPane searchableTextPane0 = new SearchableTextPane ( ( Font ) null , ( - 758 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTabSize ( ) { return getInt ( TAB_SIZE_KEY ) ; }
void test3 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( 0 ) ; FontUIResource fontUIResource0 = ( FontUIResource ) jPasswordField0 . getFont ( ) ; SearchableTextPane searchableTextPane0 = new SearchableTextPane ( ( Font ) fontUIResource0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTabSize ( ) { return getInt ( TAB_SIZE_KEY ) ; }
void test4 ( ) throws Throwable { SearchableTextPane searchableTextPane0 = new SearchableTextPane ( ( Font ) null , ( - 758 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTabSize ( ) { return getInt ( TAB_SIZE_KEY ) ; }
void test5 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( 0 ) ; FontUIResource fontUIResource0 = ( FontUIResource ) jPasswordField0 . getFont ( ) ; SearchableTextPane searchableTextPane0 = new SearchableTextPane ( ( Font ) fontUIResource0 , 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTabSize ( ) { return getInt ( TAB_SIZE_KEY ) ; }
void test6 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( 0 ) ; FontUIResource fontUIResource0 = ( FontUIResource ) jPasswordField0 . getFont ( ) ; SearchableTextPane searchableTextPane0 = new SearchableTextPane ( ( Font ) fontUIResource0 , 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTabSize ( ) { return getInt ( TAB_SIZE_KEY ) ; }
void test0 ( ) throws Throwable { Find find0 = new Find ( ( FollowApp ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Find ( FollowApp app ) { super ( app , FollowApp . getResourceString ( "action . Find . name" ) , FollowApp . getResourceString ( "action . Find . mnemonic" ) , FollowApp . getResourceString ( "action . Find . accelerator" ) , FollowApp . getIcon ( Find . class , "action . Find . icon" ) , ActionContext . SINGLE_FILE ) ; }
void test0 ( ) throws Throwable { ClearAllHighlights clearAllHighlights0 = new ClearAllHighlights ( ( FollowApp ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClearAllHighlights ( FollowApp app ) { super ( app , FollowApp . getResourceString ( "action . ClearAllHighlights . name" ) , FollowApp . getResourceString ( "action . ClearAllHighlights . mnemonic" ) , FollowApp . getResourceString ( "action . ClearAllHighlights . accelerator" ) , ActionContext . MULTI_FILE ) ; }
void test0 ( ) throws Throwable { WordResult wordResult0 = new WordResult ( 0 , 0 , ( String ) null , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String retval = "" ; if ( termStartLine > 0 & & termEndLine > 0 ) { if ( termStartLine = = termEndLine ) { retval + = termStartLine ; } else { retval + = termStartLine + " - " + termEndLine ; } } return retval ; }
void test1 ( ) throws Throwable { WordResult wordResult0 = new WordResult ( 1144 , 362 , "" , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String retval = "" ; if ( termStartLine > 0 & & termEndLine > 0 ) { if ( termStartLine = = termEndLine ) { retval + = termStartLine ; } else { retval + = termStartLine + " - " + termEndLine ; } } return retval ; }
void test2 ( ) throws Throwable { WordResult wordResult0 = new WordResult ( 1303 , 1303 , "HD < = `R } t' [ M" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String retval = "" ; if ( termStartLine > 0 & & termEndLine > 0 ) { if ( termStartLine = = termEndLine ) { retval + = termStartLine ; } else { retval + = termStartLine + " - " + termEndLine ; } } return retval ; }
void test3 ( ) throws Throwable { WordResult wordResult0 = new WordResult ( 1303 , 1303 , "HD < = `R } t' [ M" ) ; wordResult0 . setLineOffset ( 0 ) ; wordResult0 . termStartLine = 1303 ; String string0 = wordResult0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String retval = "" ; if ( termStartLine > 0 & & termEndLine > 0 ) { if ( termStartLine = = termEndLine ) { retval + = termStartLine ; } else { retval + = termStartLine + " - " + termEndLine ; } } return retval ; }
void test0 ( ) throws Throwable { SearchEngine searchEngine0 = new SearchEngine ( ( - 1097 ) ) ; List < WordResult > list0 = searchEngine0 . search ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < WordResult > search ( String term , String text ) { List < WordResult > retval = null ; / / search using a case sensitive regular expression if ( ( ( flags & CASE_SENSITIVE ) ! = 0 ) & & ( ( flags & REGEX ) ! = 0 ) ) { Pattern p = Pattern . compile ( term , Pattern . MULTILINE ) ; retval = regexSearch ( p , text ) ; } / / search using a case insensitive regular expression else if ( ( flags & REGEX ) ! = 0 ) { Pattern p = Pattern . compile ( term , Pattern . CASE_INSENSITIVE | Pattern . MULTILINE ) ; retval = regexSearch ( p , text ) ; } / / search by case sensitive text else if ( ( flags & CASE_SENSITIVE ) ! = 0 ) { retval = textSearch ( term , text ) ; } / / search by case insensitive text else if ( flags = = 0 ) { retval = textSearch ( term . toLowerCase ( ) , text . toLowerCase ( ) ) ; } / / fail due to unknown flags else { throw new IllegalArgumentException ( "Unknown search strategy requested [ flags = " + flags ) ; } return retval ; }
void test1 ( ) throws Throwable { SearchEngine searchEngine0 = new SearchEngine ( ( - 274 ) ) ; List < WordResult > list0 = searchEngine0 . search ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < WordResult > search ( String term , String text ) { List < WordResult > retval = null ; / / search using a case sensitive regular expression if ( ( ( flags & CASE_SENSITIVE ) ! = 0 ) & & ( ( flags & REGEX ) ! = 0 ) ) { Pattern p = Pattern . compile ( term , Pattern . MULTILINE ) ; retval = regexSearch ( p , text ) ; } / / search using a case insensitive regular expression else if ( ( flags & REGEX ) ! = 0 ) { Pattern p = Pattern . compile ( term , Pattern . CASE_INSENSITIVE | Pattern . MULTILINE ) ; retval = regexSearch ( p , text ) ; } / / search by case sensitive text else if ( ( flags & CASE_SENSITIVE ) ! = 0 ) { retval = textSearch ( term , text ) ; } / / search by case insensitive text else if ( flags = = 0 ) { retval = textSearch ( term . toLowerCase ( ) , text . toLowerCase ( ) ) ; } / / fail due to unknown flags else { throw new IllegalArgumentException ( "Unknown search strategy requested [ flags = " + flags ) ; } return retval ; }
void test2 ( ) throws Throwable { SearchEngine searchEngine0 = new SearchEngine ( 1501 ) ; List < WordResult > list0 = searchEngine0 . search ( "" , " ( " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < WordResult > search ( String term , String text ) { List < WordResult > retval = null ; / / search using a case sensitive regular expression if ( ( ( flags & CASE_SENSITIVE ) ! = 0 ) & & ( ( flags & REGEX ) ! = 0 ) ) { Pattern p = Pattern . compile ( term , Pattern . MULTILINE ) ; retval = regexSearch ( p , text ) ; } / / search using a case insensitive regular expression else if ( ( flags & REGEX ) ! = 0 ) { Pattern p = Pattern . compile ( term , Pattern . CASE_INSENSITIVE | Pattern . MULTILINE ) ; retval = regexSearch ( p , text ) ; } / / search by case sensitive text else if ( ( flags & CASE_SENSITIVE ) ! = 0 ) { retval = textSearch ( term , text ) ; } / / search by case insensitive text else if ( flags = = 0 ) { retval = textSearch ( term . toLowerCase ( ) , text . toLowerCase ( ) ) ; } / / fail due to unknown flags else { throw new IllegalArgumentException ( "Unknown search strategy requested [ flags = " + flags ) ; } return retval ; }
void test3 ( ) throws Throwable { SearchEngine searchEngine0 = new SearchEngine ( 0 ) ; List < WordResult > list0 = searchEngine0 . search ( " ) " , " ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < WordResult > search ( String term , String text ) { List < WordResult > retval = null ; / / search using a case sensitive regular expression if ( ( ( flags & CASE_SENSITIVE ) ! = 0 ) & & ( ( flags & REGEX ) ! = 0 ) ) { Pattern p = Pattern . compile ( term , Pattern . MULTILINE ) ; retval = regexSearch ( p , text ) ; } / / search using a case insensitive regular expression else if ( ( flags & REGEX ) ! = 0 ) { Pattern p = Pattern . compile ( term , Pattern . CASE_INSENSITIVE | Pattern . MULTILINE ) ; retval = regexSearch ( p , text ) ; } / / search by case sensitive text else if ( ( flags & CASE_SENSITIVE ) ! = 0 ) { retval = textSearch ( term , text ) ; } / / search by case insensitive text else if ( flags = = 0 ) { retval = textSearch ( term . toLowerCase ( ) , text . toLowerCase ( ) ) ; } / / fail due to unknown flags else { throw new IllegalArgumentException ( "Unknown search strategy requested [ flags = " + flags ) ; } return retval ; }
void test5 ( ) throws Throwable { SearchEngine searchEngine0 = new SearchEngine ( 1501 ) ; List < WordResult > list0 = searchEngine0 . textSearch ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < WordResult > textSearch ( String term , String text ) { ArrayList < WordResult > results = new ArrayList < WordResult > ( ) ; if ( term ! = null & & term . length ( ) > 0 & & text ! = null & & text . length ( ) > 0 ) { int pos = 0 ; while ( ( pos = text . indexOf ( term , pos ) ) > - 1 ) { results . add ( new WordResult ( pos , pos + term . length ( ) , term ) ) ; pos + = term . length ( ) ; / / allow other things to happen in case the search takes a while Thread . yield ( ) ; } } return results ; }
void test6 ( ) throws Throwable { SearchEngine searchEngine0 = new SearchEngine ( 1501 ) ; List < WordResult > list0 = searchEngine0 . search ( " ( " , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < WordResult > search ( String term , String text ) { List < WordResult > retval = null ; / / search using a case sensitive regular expression if ( ( ( flags & CASE_SENSITIVE ) ! = 0 ) & & ( ( flags & REGEX ) ! = 0 ) ) { Pattern p = Pattern . compile ( term , Pattern . MULTILINE ) ; retval = regexSearch ( p , text ) ; } / / search using a case insensitive regular expression else if ( ( flags & REGEX ) ! = 0 ) { Pattern p = Pattern . compile ( term , Pattern . CASE_INSENSITIVE | Pattern . MULTILINE ) ; retval = regexSearch ( p , text ) ; } / / search by case sensitive text else if ( ( flags & CASE_SENSITIVE ) ! = 0 ) { retval = textSearch ( term , text ) ; } / / search by case insensitive text else if ( flags = = 0 ) { retval = textSearch ( term . toLowerCase ( ) , text . toLowerCase ( ) ) ; } / / fail due to unknown flags else { throw new IllegalArgumentException ( "Unknown search strategy requested [ flags = " + flags ) ; } return retval ; }
void test7 ( ) throws Throwable { SearchEngine searchEngine0 = new SearchEngine ( 0 ) ; List < WordResult > list0 = searchEngine0 . search ( " ) " , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < WordResult > search ( String term , String text ) { List < WordResult > retval = null ; / / search using a case sensitive regular expression if ( ( ( flags & CASE_SENSITIVE ) ! = 0 ) & & ( ( flags & REGEX ) ! = 0 ) ) { Pattern p = Pattern . compile ( term , Pattern . MULTILINE ) ; retval = regexSearch ( p , text ) ; } / / search using a case insensitive regular expression else if ( ( flags & REGEX ) ! = 0 ) { Pattern p = Pattern . compile ( term , Pattern . CASE_INSENSITIVE | Pattern . MULTILINE ) ; retval = regexSearch ( p , text ) ; } / / search by case sensitive text else if ( ( flags & CASE_SENSITIVE ) ! = 0 ) { retval = textSearch ( term , text ) ; } / / search by case insensitive text else if ( flags = = 0 ) { retval = textSearch ( term . toLowerCase ( ) , text . toLowerCase ( ) ) ; } / / fail due to unknown flags else { throw new IllegalArgumentException ( "Unknown search strategy requested [ flags = " + flags ) ; } return retval ; }
void test0 ( ) throws Throwable { LineResult lineResult0 = new LineResult ( 0 , ( - 1531 ) , 0 ) ; WordResult wordResult0 = new WordResult ( 241 , 1208 , "" , 0 ) ; lineResult0 . addWord ( wordResult0 ) ; lineResult0 . addWord ( wordResult0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFirstWordPosition ( ) { return firstPosition ; }
void test1 ( ) throws Throwable { LineResult lineResult0 = new LineResult ( 0 , 0 , 0 ) ; List < WordResult > list0 = lineResult0 . getWordResults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFirstWordPosition ( ) { return firstPosition ; }
void test2 ( ) throws Throwable { LineResult lineResult0 = new LineResult ( 0 , 0 , 0 ) ; int int0 = lineResult0 . getFirstWordPosition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFirstWordPosition ( ) { return firstPosition ; }
void test4 ( ) throws Throwable { LineResult lineResult0 = new LineResult ( 0 , 0 , 0 ) ; String string0 = lineResult0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFirstWordPosition ( ) { return firstPosition ; }
void test5 ( ) throws Throwable { LineResult lineResult0 = new LineResult ( 0 , ( - 1531 ) , 0 ) ; WordResult wordResult0 = new WordResult ( 241 , 1208 , "" , 0 ) ; lineResult0 . addWord ( wordResult0 ) ; String string0 = lineResult0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFirstWordPosition ( ) { return firstPosition ; }
void test6 ( ) throws Throwable { LineResult lineResult0 = new LineResult ( 0 , ( - 1531 ) , 0 ) ; WordResult wordResult0 = new WordResult ( 241 , 1208 , "" , 0 ) ; lineResult0 . addWord ( wordResult0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String retval = "" ; if ( termStartLine > 0 & & termEndLine > 0 ) { if ( termStartLine = = termEndLine ) { retval + = termStartLine ; } else { retval + = termStartLine + " - " + termEndLine ; } } return retval ; }
