void test0 ( ) throws Throwable { CreateQueueDialog createQueueDialog0 = CreateQueueDialog . instance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog instance ( ) { return instance_ ; }
void test1 ( ) throws Throwable { QueryDialog queryDialog0 = new QueryDialog ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConfirmed ( ) { return status_ = = CONFIRMED ; }
void test2 ( ) throws Throwable { QueryDialog queryDialog0 = QueryDialog . create ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConfirmed ( ) { return status_ = = CONFIRMED ; }
void test3 ( ) throws Throwable { QueryDialog queryDialog0 = QueryDialog . instance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConfirmed ( ) { return status_ = = CONFIRMED ; }
void test0 ( ) throws Throwable { CreateTopicDialog createTopicDialog0 = CreateTopicDialog . instance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog instance ( ) { return instance_ ; }
void test0 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 20 ] ; JTree jTree0 = new JTree ( objectArray0 ) ; OpenJMSQueue openJMSQueue0 = new OpenJMSQueue ( " ! " , jTree0 ) ; openJMSQueue0 . update ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void update ( ) { }
void test0 ( ) throws Throwable { DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode ( ( Object ) "Point2D . Float [ 0 . 0 , 0 . 0 ] " , false ) ; DefaultTreeModel defaultTreeModel0 = new DefaultTreeModel ( ( TreeNode ) defaultMutableTreeNode0 ) ; JTree jTree0 = new JTree ( ( TreeModel ) defaultTreeModel0 ) ; Object [ ] objectArray0 = new Object [ 4 ] ; JComboBox jComboBox0 = new JComboBox ( objectArray0 ) ; OpenJMSEditor openJMSEditor0 = new OpenJMSEditor ( jTree0 , jComboBox0 ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , 0 ) ; TableModelEvent tableModelEvent0 = new TableModelEvent ( ( TableModel ) defaultTableModel0 , 0 , 152 , ( - 131 ) ) ; boolean boolean0 = openJMSEditor0 . isCellEditable ( ( EventObject ) tableModelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( EventObject e ) { boolean editable = false ; System . out . println ( "Checking Editable" ) ; if ( e instanceof MouseEvent & & SwingUtilities . isRightMouseButton ( ( MouseEvent ) e ) ) { System . out . println ( "Editable" ) ; editable = true ; } return editable ; }
void test1 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 1 ] ; Vector < Object > vector0 = new Vector < Object > ( ) ; JTree jTree0 = new JTree ( vector0 ) ; JComboBox jComboBox0 = new JComboBox ( objectArray0 ) ; OpenJMSEditor openJMSEditor0 = new OpenJMSEditor ( jTree0 , jComboBox0 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jComboBox0 , 99 , ( long ) 99 , 99 , 99 , ( - 1589 ) , 99 , false , 99 , 1492 , 814 ) ; boolean boolean0 = openJMSEditor0 . isCellEditable ( ( EventObject ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( EventObject e ) { boolean editable = false ; System . out . println ( "Checking Editable" ) ; if ( e instanceof MouseEvent & & SwingUtilities . isRightMouseButton ( ( MouseEvent ) e ) ) { System . out . println ( "Editable" ) ; editable = true ; } return editable ; }
void test2 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 1 ] ; Vector < Object > vector0 = new Vector < Object > ( ) ; JTree jTree0 = new JTree ( vector0 ) ; JComboBox jComboBox0 = new JComboBox ( objectArray0 ) ; OpenJMSEditor openJMSEditor0 = new OpenJMSEditor ( jTree0 , jComboBox0 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jComboBox0 , 100 , ( long ) 100 , 100 , 100 , ( - 1589 ) , 100 , false , 100 , 1492 , 814 ) ; boolean boolean0 = openJMSEditor0 . isCellEditable ( ( EventObject ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( EventObject e ) { boolean editable = false ; System . out . println ( "Checking Editable" ) ; if ( e instanceof MouseEvent & & SwingUtilities . isRightMouseButton ( ( MouseEvent ) e ) ) { System . out . println ( "Editable" ) ; editable = true ; } return editable ; }
void test0 ( ) throws Throwable { OpenJMSServer openJMSServer0 = new OpenJMSServer ( "" , ( JTree ) null ) ; openJMSServer0 . createCommands ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void createCommands ( ) { _commands = new JPopupMenu ( ) ; JMenuItem m = new JMenuItem ( "Delete user" ) ; m . addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent evt ) { deleteUser ( ) ; } } ) ; _commands . add ( m ) ; m = new JMenuItem ( "Change password" ) ; m . addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent evt ) { changePassword ( ) ; } } ) ; _commands . add ( m ) ; }
void test2 ( ) throws Throwable { JTree jTree0 = new JTree ( ) ; OpenJMSServer openJMSServer0 = new OpenJMSServer ( " * JX@bHs" , jTree0 ) ; String string0 = openJMSServer0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test3 ( ) throws Throwable { JTree jTree0 = new JTree ( ) ; OpenJMSServer openJMSServer0 = new OpenJMSServer ( " * JX@bHs" , jTree0 ) ; boolean boolean0 = openJMSServer0 . getAllowsChildren ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAllowsChildren ( ) { return true ; }
void test4 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 2 ] ; JTree jTree0 = new JTree ( objectArray0 ) ; DefaultTreeModel defaultTreeModel0 = OpenJMSServer . createServerList ( jTree0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultTreeModel createServerList ( JTree tree ) { / / todo try and connect to all known servers . / / for the moment just add one . OpenJMSServer server = new OpenJMSServer ( "OpenJMSServer" , tree ) ; return new DefaultTreeModel ( server ) ; }
void test5 ( ) throws Throwable { JTree jTree0 = new JTree ( ) ; OpenJMSServer openJMSServer0 = new OpenJMSServer ( " * JX@bHs" , jTree0 ) ; openJMSServer0 . refresh ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void refresh ( ) { DefaultTreeModel model = ( DefaultTreeModel ) _tree . getModel ( ) ; model . nodeStructureChanged ( ( DefaultMutableTreeNode ) this ) ; }
void test1 ( ) throws Throwable { AbstractAdminConnection abstractAdminConnection0 = AbstractAdminConnection . instance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog instance ( ) { return instance_ ; }
void test0 ( ) throws Throwable { OpenJMSQueueFolder openJMSQueueFolder0 = new OpenJMSQueueFolder ( ( JTree ) null ) ; boolean boolean0 = openJMSQueueFolder0 . getAllowsChildren ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAllowsChildren ( ) { return true ; }
void test1 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 6 ] ; JTree jTree0 = new JTree ( objectArray0 ) ; OpenJMSQueueFolder openJMSQueueFolder0 = new OpenJMSQueueFolder ( jTree0 ) ; openJMSQueueFolder0 . createCommands ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void createCommands ( ) { _commands = new JPopupMenu ( ) ; JMenuItem m = new JMenuItem ( "Delete user" ) ; m . addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent evt ) { deleteUser ( ) ; } } ) ; _commands . add ( m ) ; m = new JMenuItem ( "Change password" ) ; m . addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent evt ) { changePassword ( ) ; } } ) ; _commands . add ( m ) ; }
void test2 ( ) throws Throwable { OpenJMSQueueFolder openJMSQueueFolder0 = new OpenJMSQueueFolder ( ( JTree ) null ) ; String string0 = openJMSQueueFolder0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test3 ( ) throws Throwable { OpenJMSQueueFolder openJMSQueueFolder0 = new OpenJMSQueueFolder ( ( JTree ) null ) ; CellRendererPane cellRendererPane0 = new CellRendererPane ( ) ; Rectangle rectangle0 = cellRendererPane0 . getBounds ( ) ; openJMSQueueFolder0 . displayCommands ( rectangle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAllowsChildren ( ) { return true ; }
void test4 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 6 ] ; JTree jTree0 = new JTree ( objectArray0 ) ; OpenJMSQueueFolder openJMSQueueFolder0 = new OpenJMSQueueFolder ( jTree0 ) ; boolean boolean0 = openJMSQueueFolder0 . isLeaf ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) { return _isLeaf ; }
void test5 ( ) throws Throwable { OpenJMSQueueFolder openJMSQueueFolder0 = new OpenJMSQueueFolder ( ( JTree ) null ) ; openJMSQueueFolder0 . update ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void update ( ) { }
void test0 ( ) throws Throwable { JTree jTree0 = new JTree ( ) ; OpenJMSUser openJMSUser0 = new OpenJMSUser ( " / . . " , jTree0 ) ; openJMSUser0 . update ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void update ( ) { }
void test0 ( ) throws Throwable { DatabaseFilter databaseFilter0 = new DatabaseFilter ( ) ; String string0 = databaseFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Database Files ( * . db ) " ; }
void test1 ( ) throws Throwable { DatabaseFilter databaseFilter0 = new DatabaseFilter ( ) ; File file0 = new File ( "" , "" ) ; boolean boolean0 = databaseFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { boolean accept = f . isDirectory ( ) ; if ( ! accept ) { String suffix = getSuffix ( f ) ; if ( suffix ! = null ) { accept = suffix . equals ( "db" ) ; } } return accept ; }
void test2 ( ) throws Throwable { DatabaseFilter databaseFilter0 = new DatabaseFilter ( ) ; File file0 = new File ( "Database Files ( * . db ) " , "Database Files ( * . db ) " ) ; boolean boolean0 = databaseFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { boolean accept = f . isDirectory ( ) ; if ( ! accept ) { String suffix = getSuffix ( f ) ; if ( suffix ! = null ) { accept = suffix . equals ( "db" ) ; } } return accept ; }
void test3 ( ) throws Throwable { DatabaseFilter databaseFilter0 = new DatabaseFilter ( ) ; File file0 = new File ( "OU ] 4 { vO , $h ( NN' | " ) ; boolean boolean0 = databaseFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { boolean accept = f . isDirectory ( ) ; if ( ! accept ) { String suffix = getSuffix ( f ) ; if ( suffix ! = null ) { accept = suffix . equals ( "db" ) ; } } return accept ; }
void test4 ( ) throws Throwable { DatabaseFilter databaseFilter0 = new DatabaseFilter ( ) ; File file0 = new File ( "d# ? c%st . . " ) ; String string0 = databaseFilter0 . getSuffix ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSuffix ( File f ) { String s = f . getPath ( ) ; String suffix = null ; int i = s . lastIndexOf ( ' . ' ) ; if ( i > 0 & & i < s . length ( ) - 1 ) { suffix = s . substring ( i + 1 ) . toLowerCase ( ) ; } return suffix ; }
void test0 ( ) throws Throwable { OpenJMSConsumer openJMSConsumer0 = new OpenJMSConsumer ( "Bu" , ( JTree ) null ) ; openJMSConsumer0 . getLeafCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) { return _isLeaf ; }
void test2 ( ) throws Throwable { OpenJMSConsumer openJMSConsumer0 = new OpenJMSConsumer ( "Bu" , ( JTree ) null ) ; openJMSConsumer0 . createCommands ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void createCommands ( ) { _commands = new JPopupMenu ( ) ; JMenuItem m = new JMenuItem ( "Delete user" ) ; m . addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent evt ) { deleteUser ( ) ; } } ) ; _commands . add ( m ) ; m = new JMenuItem ( "Change password" ) ; m . addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent evt ) { changePassword ( ) ; } } ) ; _commands . add ( m ) ; }
void test3 ( ) throws Throwable { OpenJMSConsumer openJMSConsumer0 = new OpenJMSConsumer ( "Bu" , ( JTree ) null ) ; String string0 = openJMSConsumer0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test4 ( ) throws Throwable { OpenJMSConsumer openJMSConsumer0 = new OpenJMSConsumer ( "Bu" , ( JTree ) null ) ; boolean boolean0 = openJMSConsumer0 . getAllowsChildren ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAllowsChildren ( ) { return true ; }
void test5 ( ) throws Throwable { OpenJMSConsumer openJMSConsumer0 = new OpenJMSConsumer ( "Bu" , ( JTree ) null ) ; openJMSConsumer0 . update ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void update ( ) { }
void test0 ( ) throws Throwable { CreateConsumerDialog createConsumerDialog0 = CreateConsumerDialog . instance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog instance ( ) { return instance_ ; }
void test0 ( ) throws Throwable { JTree jTree0 = new JTree ( ) ; OpenJMSUser openJMSUser0 = new OpenJMSUser ( "" , jTree0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) { return _isLeaf ; }
void test1 ( ) throws Throwable { OpenJMSQueue openJMSQueue0 = new OpenJMSQueue ( "pW" , ( JTree ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) { return _isLeaf ; }
void test2 ( ) throws Throwable { JTree jTree0 = new JTree ( ) ; OpenJMSQueue openJMSQueue0 = new OpenJMSQueue ( "" , jTree0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) { return _isLeaf ; }
void test3 ( ) throws Throwable { OpenJMSObject openJMSObject0 = OpenJMSObject . getInstanceSelected ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OpenJMSObject getInstanceSelected ( ) { Object loc = _tree . getLastSelectedPathComponent ( ) ; return ( OpenJMSObject ) loc ; }
void test4 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 7 ] ; JTree jTree0 = new JTree ( objectArray0 ) ; OpenJMSTopic openJMSTopic0 = new OpenJMSTopic ( "" , jTree0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) { return _isLeaf ; }
void test0 ( ) throws Throwable { ChangePasswordDialog changePasswordDialog0 = ChangePasswordDialog . instance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog instance ( ) { return instance_ ; }
void test0 ( ) throws Throwable { AdminInfo adminInfo0 = new AdminInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTreeCellRendererComponent ( JTree tree , Object value , boolean selected , boolean expanded , boolean leaf , int row , boolean hasFocus ) { super . getTreeCellRendererComponent ( tree , value , selected , expanded , leaf , row , hasFocus ) ; if ( value instanceof OpenJMSNode ) { field_ . setForeground ( java . awt . Color . black ) ; if ( value instanceof OpenJMSQueue ) { if ( AbstractAdminConnection . instance ( ) ! = null ) { OpenJMSQueue queue = ( OpenJMSQueue ) value ; int num = AbstractAdminConnection . instance ( ) . getQueueMessageCount ( queue . toString ( ) ) ; String st = Integer . toString ( num ) ; field_ . setText ( st ) ; field_ . setVisible ( true ) ; } } else if ( value instanceof OpenJMSTopic ) { / / do nothing field_ . setVisible ( false ) ; } else if ( value instanceof OpenJMSUser ) { / / do nothing field_ . setVisible ( false ) ; } else if ( value instanceof OpenJMSConsumer ) { if ( AbstractAdminConnection . instance ( ) ! = null ) { OpenJMSConsumer consumer = ( OpenJMSConsumer ) value ; OpenJMSTopic topic = ( OpenJMSTopic ) consumer . getParent ( ) ; int num = AbstractAdminConnection . instance ( ) . getDurableConsumerMessageCount ( topic . toString ( ) , consumer . toString ( ) ) ; String st = Integer . toString ( num ) ; if ( AbstractAdminConnection . instance ( ) . isConnected ( consumer . toString ( ) ) ) { field_ . setForeground ( java . awt . Color . red ) ; } field_ . setText ( st ) ; field_ . setVisible ( true ) ; } } } else { field_ . setVisible ( false ) ; } return panel_ ; }
void test0 ( ) throws Throwable { CreateLogonDialog createLogonDialog0 = CreateLogonDialog . instance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog instance ( ) { return instance_ ; }
void test0 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 6 ] ; JTree jTree0 = new JTree ( objectArray0 ) ; OpenJMSConsumerFolder openJMSConsumerFolder0 = new OpenJMSConsumerFolder ( jTree0 ) ; boolean boolean0 = openJMSConsumerFolder0 . isLeaf ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) { return _isLeaf ; }
void test1 ( ) throws Throwable { OpenJMSConsumerFolder openJMSConsumerFolder0 = new OpenJMSConsumerFolder ( ( JTree ) null ) ; String string0 = openJMSConsumerFolder0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test2 ( ) throws Throwable { OpenJMSConsumerFolder openJMSConsumerFolder0 = new OpenJMSConsumerFolder ( ( JTree ) null ) ; CellRendererPane cellRendererPane0 = new CellRendererPane ( ) ; Rectangle rectangle0 = cellRendererPane0 . getBounds ( ) ; / / Undeclared exception ! try { openJMSConsumerFolder0 . displayCommands ( rectangle0 ) ; fail ( "Expecting exception : IllegalComponentStateException" ) ; } catch ( IllegalComponentStateException e ) { / * * component must be showing on the screen to determine its location * / } "<AssertPlaceHolder>" ; } "<FocalMethod>" void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test3 ( ) throws Throwable { OpenJMSConsumerFolder openJMSConsumerFolder0 = new OpenJMSConsumerFolder ( ( JTree ) null ) ; openJMSConsumerFolder0 . update ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void update ( ) { }
void test4 ( ) throws Throwable { OpenJMSConsumerFolder openJMSConsumerFolder0 = new OpenJMSConsumerFolder ( ( JTree ) null ) ; boolean boolean0 = openJMSConsumerFolder0 . getAllowsChildren ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAllowsChildren ( ) { return true ; }
void test5 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 6 ] ; JTree jTree0 = new JTree ( objectArray0 ) ; OpenJMSConsumerFolder openJMSConsumerFolder0 = new OpenJMSConsumerFolder ( jTree0 ) ; openJMSConsumerFolder0 . createCommands ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void createCommands ( ) { _commands = new JPopupMenu ( ) ; JMenuItem m = new JMenuItem ( "Delete user" ) ; m . addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent evt ) { deleteUser ( ) ; } } ) ; _commands . add ( m ) ; m = new JMenuItem ( "Change password" ) ; m . addActionListener ( new ActionListener ( ) { void actionPerformed ( ActionEvent evt ) { changePassword ( ) ; } } ) ; _commands . add ( m ) ; }
void test0 ( ) throws Throwable { CreateUserDialog createUserDialog0 = CreateUserDialog . instance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog instance ( ) { return instance_ ; }
void test0 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 6 ] ; JTree jTree0 = new JTree ( objectArray0 ) ; OpenJMSTopicFolder openJMSTopicFolder0 = new OpenJMSTopicFolder ( jTree0 ) ; openJMSTopicFolder0 . createCommands ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) { return _isLeaf ; }
void test1 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 6 ] ; JTree jTree0 = new JTree ( objectArray0 ) ; OpenJMSTopicFolder openJMSTopicFolder0 = new OpenJMSTopicFolder ( jTree0 ) ; boolean boolean0 = openJMSTopicFolder0 . isLeaf ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( ) { return _isLeaf ; }
void test2 ( ) throws Throwable { OpenJMSTopicFolder openJMSTopicFolder0 = new OpenJMSTopicFolder ( ( JTree ) null ) ; boolean boolean0 = openJMSTopicFolder0 . getAllowsChildren ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAllowsChildren ( ) { return true ; }
void test3 ( ) throws Throwable { OpenJMSTopicFolder openJMSTopicFolder0 = new OpenJMSTopicFolder ( ( JTree ) null ) ; String string0 = openJMSTopicFolder0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test4 ( ) throws Throwable { OpenJMSTopicFolder openJMSTopicFolder0 = new OpenJMSTopicFolder ( ( JTree ) null ) ; CellRendererPane cellRendererPane0 = new CellRendererPane ( ) ; Rectangle rectangle0 = cellRendererPane0 . getBounds ( ) ; openJMSTopicFolder0 . displayCommands ( rectangle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test5 ( ) throws Throwable { OpenJMSTopicFolder openJMSTopicFolder0 = new OpenJMSTopicFolder ( ( JTree ) null ) ; openJMSTopicFolder0 . update ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void update ( ) { }
void test0 ( ) throws Throwable { Index index0 = new Index ( ) ; boolean boolean0 = index0 . getUnique ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUnique ( ) { return this . _unique ; }
void test3 ( ) throws Throwable { Index index0 = new Index ( ) ; int int0 = index0 . getColumnCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return _columnList . size ( ) ; }
void test4 ( ) throws Throwable { Index index0 = new Index ( ) ; boolean boolean0 = index0 . hasUnique ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasUnique ( ) { return this . _has_unique ; }
void test6 ( ) throws Throwable { Index index0 = new Index ( ) ; Enumeration < Object > enumeration0 = index0 . enumerateColumn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test7 ( ) throws Throwable { Index index0 = new Index ( ) ; Column column0 = new Column ( ) ; boolean boolean0 = index0 . removeColumn ( column0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeColumn ( org . exolab . jms . tools . db . Column vColumn ) { boolean removed = _columnList . remove ( vColumn ) ; return removed ; }
void test8 ( ) throws Throwable { Index index0 = new Index ( ) ; index0 . setName ( "6HSX } B9MV%\" : s" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test9 ( ) throws Throwable { Index index0 = new Index ( ) ; index0 . deleteUnique ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasUnique ( ) { return this . _has_unique ; }
void test10 ( ) throws Throwable { Index index0 = new Index ( ) ; index0 . clearColumn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasUnique ( ) { return this . _has_unique ; }
void test12 ( ) throws Throwable { Index index0 = new Index ( ) ; index0 . setUnique ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasUnique ( ) { return this . _has_unique ; }
void test13 ( ) throws Throwable { Index index0 = new Index ( ) ; Column column0 = new Column ( ) ; index0 . addColumn ( column0 ) ; boolean boolean0 = index0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return _columnList . size ( ) ; }
void test14 ( ) throws Throwable { Index index0 = new Index ( ) ; String string0 = index0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test21 ( ) throws Throwable { Index index0 = new Index ( ) ; Column [ ] columnArray0 = new Column [ 10 ] ; index0 . setColumn ( columnArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return _columnList . size ( ) ; }
void test0 ( ) throws Throwable { DatabaseDescriptor databaseDescriptor0 = new DatabaseDescriptor ( ) ; String string0 = databaseDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { DatabaseDescriptor databaseDescriptor0 = new DatabaseDescriptor ( ) ; databaseDescriptor0 . getExtends ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test2 ( ) throws Throwable { DatabaseDescriptor databaseDescriptor0 = new DatabaseDescriptor ( ) ; databaseDescriptor0 . getIdentity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test3 ( ) throws Throwable { DatabaseDescriptor databaseDescriptor0 = new DatabaseDescriptor ( ) ; databaseDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { DatabaseDescriptor databaseDescriptor0 = new DatabaseDescriptor ( ) ; String string0 = databaseDescriptor0 . getXMLName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test5 ( ) throws Throwable { DatabaseDescriptor databaseDescriptor0 = new DatabaseDescriptor ( ) ; databaseDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test6 ( ) throws Throwable { DatabaseDescriptor databaseDescriptor0 = new DatabaseDescriptor ( ) ; Database database0 = new Database ( ) ; databaseDescriptor0 . validate ( ( Object ) database0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test7 ( ) throws Throwable { DatabaseDescriptor databaseDescriptor0 = new DatabaseDescriptor ( ) ; DatabaseDescriptor databaseDescriptor1 = ( DatabaseDescriptor ) databaseDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { TableDescriptor tableDescriptor0 = new TableDescriptor ( ) ; tableDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test2 ( ) throws Throwable { TableDescriptor tableDescriptor0 = new TableDescriptor ( ) ; tableDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { TableDescriptor tableDescriptor0 = new TableDescriptor ( ) ; String string0 = tableDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { TableDescriptor tableDescriptor0 = new TableDescriptor ( ) ; tableDescriptor0 . getExtends ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test5 ( ) throws Throwable { TableDescriptor tableDescriptor0 = new TableDescriptor ( ) ; tableDescriptor0 . getIdentity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test1 ( ) throws Throwable { SchemaHelper schemaHelper0 = new SchemaHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { Database database0 = SchemaHelper . getSchema ( ) ; Table table0 = SchemaHelper . getTable ( database0 , "z ? * } 4XV^m + " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Table getTable ( String name ) throws PersistenceException { Table result = new Table ( ) ; result . setName ( name ) ; / / determine the column types . Another approach would be to use / / DatabaseMetaData . getColumns ( ) - except that not all JDBC drivers / / seem to support this ( e . g , Sybase ) PreparedStatement select = null ; try { select = _connection . prepareStatement ( "select * from " + name + " where 1 = 0" ) ; ResultSet set = select . executeQuery ( ) ; ResultSetMetaData metaData = set . getMetaData ( ) ; for ( int i = 1 ; i < = metaData . getColumnCount ( ) ; + + i ) { String columnName = metaData . getColumnName ( i ) ; int dataType = metaData . getColumnType ( i ) ; long precision = metaData . getPrecision ( i ) ; int nullable = metaData . isNullable ( i ) ; String typeName = metaData . getColumnTypeName ( i ) ; Type type = _mapper . getType ( dataType , precision ) ; if ( type = = null ) { / / this will only occur if the JDBC driver is buggy , as the / / database meta data is inconsistent with the column meta / / data / / Try and get the nearest precision equivalent type = _types . getNearestType ( dataType , precision ) ; if ( type = = null ) { / / getColumns ( ) refers to type not included in / / database meta data throw new InvalidTypeException ( "JDBC driver error . Type = " + dataType + " , precision = " + precision + " ( SQL type = " + typeName + " ) isn't supported by " + "Connection . getMetaData ( ) . getTypeInfo ( ) , " + "but is referred to by " + "Connection . getMetaData ( ) . getColumns ( ) " ) ; } } Attribute attribute = new Attribute ( ) ; attribute . setName ( columnName ) ; attribute . setType ( type . getSymbolicType ( ) ) ; if ( nullable = = DatabaseMetaData . columnNoNulls ) { attribute . setNotNull ( true ) ; } else { attribute . setNotNull ( false ) ; } result . addAttribute ( attribute ) ; } } catch ( SQLException exception ) { throw new PersistenceException ( "Failed to determine the schema of table = " + name , exception ) ; } finally { SQLHelper . close ( select ) ; } return result ; }
void test3 ( ) throws Throwable { Database database0 = SchemaHelper . getSchema ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test4 ( ) throws Throwable { Database database0 = SchemaHelper . getSchema ( ) ; Table table0 = database0 . getTable ( 0 ) ; Attribute attribute0 = SchemaHelper . getAttribute ( table0 , "i" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . tools . db . Attribute getAttribute ( int index ) throws java . lang . IndexOutOfBoundsException { / / - - check bounds for index if ( ( index < 0 ) | | ( index > _attributeList . size ( ) ) ) { throw new IndexOutOfBoundsException ( ) ; } return ( org . exolab . jms . tools . db . Attribute ) _attributeList . get ( index ) ; }
void test0 ( ) throws Throwable { Deprecated deprecated0 = new Deprecated ( ) ; boolean boolean0 = deprecated0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test1 ( ) throws Throwable { DeprecatedDescriptor deprecatedDescriptor0 = new DeprecatedDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) deprecatedDescriptor0 , "MS_KANJI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { DeprecatedDescriptor deprecatedDescriptor0 = new DeprecatedDescriptor ( ) ; String string0 = deprecatedDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { DeprecatedDescriptor deprecatedDescriptor0 = new DeprecatedDescriptor ( ) ; deprecatedDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { DeprecatedDescriptor deprecatedDescriptor0 = new DeprecatedDescriptor ( ) ; deprecatedDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test0 ( ) throws Throwable { Index index0 = new Index ( ) ; Column column0 = new Column ( ) ; index0 . setName ( "index" ) ; index0 . addColumn ( column0 ) ; CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; index0 . marshal ( ( Writer ) charArrayWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test1 ( ) throws Throwable { IndexDescriptor indexDescriptor0 = new IndexDescriptor ( ) ; indexDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { IndexDescriptor indexDescriptor0 = new IndexDescriptor ( ) ; indexDescriptor0 . getIdentity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { IndexDescriptor indexDescriptor0 = new IndexDescriptor ( ) ; indexDescriptor0 . getExtends ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test0 ( ) throws Throwable { SchemaConverterFactory schemaConverterFactory0 = new SchemaConverterFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { V061toV072SchemaConverter v061toV072SchemaConverter0 = ( V061toV072SchemaConverter ) SchemaConverterFactory . create ( "V0 . 7 . 2" , "V0 . 7 . 2" , ( Connection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test2 ( ) throws Throwable { V061toV072SchemaConverter v061toV072SchemaConverter0 = ( V061toV072SchemaConverter ) SchemaConverterFactory . create ( "V0 . 6 . 1" , "V0 . 6 . 1" , ( Connection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test3 ( ) throws Throwable { V061toV072SchemaConverter v061toV072SchemaConverter0 = ( V061toV072SchemaConverter ) SchemaConverterFactory . create ( "V0 . 6 . 1" , "V0 . 7 . 2" , ( Connection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test0 ( ) throws Throwable { PrimaryKeyDescriptor primaryKeyDescriptor0 = new PrimaryKeyDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) primaryKeyDescriptor0 , "~Y { \"W + Vq , [ U - 0nK" , ( NodeType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { PrimaryKeyDescriptor primaryKeyDescriptor0 = new PrimaryKeyDescriptor ( ) ; String string0 = primaryKeyDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { PrimaryKeyDescriptor primaryKeyDescriptor0 = new PrimaryKeyDescriptor ( ) ; primaryKeyDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { PrimaryKeyDescriptor primaryKeyDescriptor0 = new PrimaryKeyDescriptor ( ) ; primaryKeyDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { PrimaryKeyDescriptor primaryKeyDescriptor0 = new PrimaryKeyDescriptor ( ) ; PrimaryKeyDescriptor primaryKeyDescriptor1 = ( PrimaryKeyDescriptor ) primaryKeyDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { Deprecated deprecated0 = new Deprecated ( ) ; deprecated0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test2 ( ) throws Throwable { Deprecated deprecated0 = new Deprecated ( ) ; boolean boolean0 = deprecated0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test0 ( ) throws Throwable { Database database0 = new Database ( ) ; int int0 = database0 . getTableCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTableCount ( ) { return _tableList . size ( ) ; }
void test1 ( ) throws Throwable { Database database0 = new Database ( ) ; Table table0 = new Table ( ) ; database0 . addTable ( table0 ) ; Table [ ] tableArray0 = database0 . getTable ( ) ; database0 . setTable ( tableArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test2 ( ) throws Throwable { Database database0 = new Database ( ) ; Enumeration < Object > enumeration0 = database0 . enumerateTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test5 ( ) throws Throwable { Database database0 = new Database ( ) ; Table table0 = new Table ( ) ; database0 . addTable ( 0 , table0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test6 ( ) throws Throwable { Database database0 = new Database ( ) ; database0 . addDeprecated ( 0 , ( Deprecated ) null ) ; boolean boolean0 = database0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDeprecatedCount ( ) { return _deprecatedList . size ( ) ; }
void test7 ( ) throws Throwable { Database database0 = new Database ( ) ; database0 . clearTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDeprecatedCount ( ) { return _deprecatedList . size ( ) ; }
void test8 ( ) throws Throwable { Database database0 = new Database ( ) ; Deprecated deprecated0 = new Deprecated ( ) ; database0 . addDeprecated ( deprecated0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test9 ( ) throws Throwable { Database database0 = new Database ( ) ; database0 . clearDeprecated ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test11 ( ) throws Throwable { Database database0 = new Database ( ) ; Enumeration < Object > enumeration0 = database0 . enumerateDeprecated ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test12 ( ) throws Throwable { Database database0 = new Database ( ) ; int int0 = database0 . getDeprecatedCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDeprecatedCount ( ) { return _deprecatedList . size ( ) ; }
void test13 ( ) throws Throwable { Database database0 = new Database ( ) ; Table table0 = new Table ( ) ; boolean boolean0 = database0 . removeTable ( table0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeTable ( org . exolab . jms . tools . db . Table vTable ) { boolean removed = _tableList . remove ( vTable ) ; return removed ; }
void test14 ( ) throws Throwable { Database database0 = new Database ( ) ; boolean boolean0 = database0 . removeDeprecated ( ( Deprecated ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeDeprecated ( org . exolab . jms . tools . db . Deprecated vDeprecated ) { boolean removed = _deprecatedList . remove ( vDeprecated ) ; return removed ; }
void test23 ( ) throws Throwable { Database database0 = new Database ( ) ; Deprecated [ ] deprecatedArray0 = new Deprecated [ 2 ] ; database0 . setDeprecated ( deprecatedArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test25 ( ) throws Throwable { Database database0 = new Database ( ) ; Table [ ] tableArray0 = database0 . getTable ( ) ; database0 . setTable ( tableArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTableCount ( ) { return _tableList . size ( ) ; }
void test0 ( ) throws Throwable { Type type0 = new Type ( 0 , ( long ) 0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test1 ( ) throws Throwable { Type type0 = new Type ( 1 , 0L , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getParameters ( ) { return _parameters ; }
void test2 ( ) throws Throwable { Type type0 = new Type ( ( - 1 ) , 1521L , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test3 ( ) throws Throwable { Type type0 = new Type ( ( - 1 ) , 1521L , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getParameters ( ) { return _parameters ; }
void test4 ( ) throws Throwable { Type type0 = new Type ( ( - 1 ) , 1521L , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test6 ( ) throws Throwable { Type type0 = new Type ( ( - 1 ) , " ( " , ( long ) ( - 1 ) , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test8 ( ) throws Throwable { Type type0 = new Type ( 0 , ( long ) 0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test9 ( ) throws Throwable { Type type0 = new Type ( 1 , 0L , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test10 ( ) throws Throwable { Type type0 = new Type ( 1 , " , precision = " , ( long ) 1 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getParameters ( ) { return _parameters ; }
void test11 ( ) throws Throwable { Type type0 = new Type ( 0 , ( long ) 0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test12 ( ) throws Throwable { Type type0 = new Type ( ( - 1 ) , 1521L , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getParameters ( ) { return _parameters ; }
void test15 ( ) throws Throwable { Type type0 = Type . getType ( "LONGVARCHAR ( 1521 ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSQL ( ) { String result = _name ; if ( _parameters & & _precision > 0 ) { result + = " ( " + _precision + " ) " ; } return result ; }
void test0 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; boolean boolean0 = attribute0 . hasNotNull ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNotNull ( ) { return this . _has_notNull ; }
void test1 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; boolean boolean0 = attribute0 . getNotNull ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNotNull ( ) { return this . _notNull ; }
void test3 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setUnique ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUnique ( ) { return this . _unique ; }
void test5 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; boolean boolean0 = attribute0 . hasPrimaryKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasPrimaryKey ( ) { return this . _has_primaryKey ; }
void test6 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUnique ( ) { return this . _unique ; }
void test7 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; String string0 = attribute0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( Attribute attribute ) throws PersistenceException { Type result = null ; Type type = Type . getType ( attribute . getType ( ) ) ; Type map = _mapper . getType ( type . getType ( ) , type . getPrecision ( ) ) ; if ( map = = null ) { throw new PersistenceException ( "Database does not support type = " + attribute . getType ( ) ) ; } if ( type . getType ( ) ! = map . getType ( ) ) { result = map ; } else { boolean parameters = type . getParameters ( ) ; long precision = type . getPrecision ( ) ; if ( precision < = map . getPrecision ( ) ) { if ( precision = = - 1 ) { precision = map . getPrecision ( ) ; parameters = map . getParameters ( ) ; } result = new Type ( map . getType ( ) , map . getName ( ) , precision , parameters ) ; } else { throw new PersistenceException ( attribute . getName ( ) + type + " exceeds precision for " + map + " precision = " + map . getPrecision ( ) ) ; } } return result ; }
void test8 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setName ( "The marshaller cannot unmarshal non primitive types that do not implement java . io . Serialiable" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . tools . db . PrimaryKey getPrimaryKey ( ) { return this . _primaryKey ; }
void test9 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . deletePrimaryKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasPrimaryKey ( ) { return this . _has_primaryKey ; }
void test10 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . deleteNotNull ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNotNull ( ) { return this . _has_notNull ; }
void test12 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setNotNull ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNotNull ( ) { return this . _notNull ; }
void test13 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . setPrimaryKey ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . tools . db . PrimaryKey getPrimaryKey ( ) { return this . _primaryKey ; }
void test14 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; boolean boolean0 = attribute0 . getUnique ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUnique ( ) { return this . _unique ; }
void test15 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; boolean boolean0 = attribute0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test16 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; attribute0 . deleteUnique ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasUnique ( ) { return this . _has_unique ; }
void test17 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; boolean boolean0 = attribute0 . getPrimaryKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . tools . db . PrimaryKey getPrimaryKey ( ) { return this . _primaryKey ; }
void test18 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ) ; boolean boolean0 = attribute0 . hasUnique ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasUnique ( ) { return this . _has_unique ; }
void test0 ( ) throws Throwable { ColumnDescriptor columnDescriptor0 = new ColumnDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) columnDescriptor0 , "http : / / www . openjms . org / database / schema" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { Column column0 = new Column ( ) ; column0 . validate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test2 ( ) throws Throwable { ColumnDescriptor columnDescriptor0 = new ColumnDescriptor ( ) ; columnDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { ColumnDescriptor columnDescriptor0 = new ColumnDescriptor ( ) ; String string0 = columnDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { ColumnDescriptor columnDescriptor0 = new ColumnDescriptor ( ) ; columnDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { Descriptor descriptor0 = Descriptor . getDescriptor ( "REAL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( Attribute attribute ) throws PersistenceException { Type result = null ; Type type = Type . getType ( attribute . getType ( ) ) ; Type map = _mapper . getType ( type . getType ( ) , type . getPrecision ( ) ) ; if ( map = = null ) { throw new PersistenceException ( "Database does not support type = " + attribute . getType ( ) ) ; } if ( type . getType ( ) ! = map . getType ( ) ) { result = map ; } else { boolean parameters = type . getParameters ( ) ; long precision = type . getPrecision ( ) ; if ( precision < = map . getPrecision ( ) ) { if ( precision = = - 1 ) { precision = map . getPrecision ( ) ; parameters = map . getParameters ( ) ; } result = new Type ( map . getType ( ) , map . getName ( ) , precision , parameters ) ; } else { throw new PersistenceException ( attribute . getName ( ) + type + " exceeds precision for " + map + " precision = " + map . getPrecision ( ) ) ; } } return result ; }
void test1 ( ) throws Throwable { Descriptor descriptor0 = Descriptor . getDescriptor ( 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test2 ( ) throws Throwable { Descriptor descriptor0 = Descriptor . getDescriptor ( 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( Attribute attribute ) throws PersistenceException { Type result = null ; Type type = Type . getType ( attribute . getType ( ) ) ; Type map = _mapper . getType ( type . getType ( ) , type . getPrecision ( ) ) ; if ( map = = null ) { throw new PersistenceException ( "Database does not support type = " + attribute . getType ( ) ) ; } if ( type . getType ( ) ! = map . getType ( ) ) { result = map ; } else { boolean parameters = type . getParameters ( ) ; long precision = type . getPrecision ( ) ; if ( precision < = map . getPrecision ( ) ) { if ( precision = = - 1 ) { precision = map . getPrecision ( ) ; parameters = map . getParameters ( ) ; } result = new Type ( map . getType ( ) , map . getName ( ) , precision , parameters ) ; } else { throw new PersistenceException ( attribute . getName ( ) + type + " exceeds precision for " + map + " precision = " + map . getPrecision ( ) ) ; } } return result ; }
void test2 ( ) throws Throwable { PrimaryKey primaryKey0 = new PrimaryKey ( ) ; Enumeration < Object > enumeration0 = primaryKey0 . enumerateColumn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test3 ( ) throws Throwable { PrimaryKey primaryKey0 = new PrimaryKey ( ) ; Column column0 = new Column ( ) ; primaryKey0 . addColumn ( column0 ) ; boolean boolean0 = primaryKey0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return _columnList . size ( ) ; }
void test5 ( ) throws Throwable { PrimaryKey primaryKey0 = new PrimaryKey ( ) ; primaryKey0 . clearColumn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return _columnList . size ( ) ; }
void test6 ( ) throws Throwable { PrimaryKey primaryKey0 = new PrimaryKey ( ) ; Column column0 = new Column ( ) ; boolean boolean0 = primaryKey0 . removeColumn ( column0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeColumn ( org . exolab . jms . tools . db . Column vColumn ) { boolean removed = _columnList . remove ( vColumn ) ; return removed ; }
void test7 ( ) throws Throwable { PrimaryKey primaryKey0 = new PrimaryKey ( ) ; int int0 = primaryKey0 . getColumnCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return _columnList . size ( ) ; }
void test8 ( ) throws Throwable { PrimaryKey primaryKey0 = new PrimaryKey ( ) ; Column column0 = new Column ( ) ; primaryKey0 . addColumn ( 0 , column0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return _columnList . size ( ) ; }
void test14 ( ) throws Throwable { PrimaryKey primaryKey0 = new PrimaryKey ( ) ; Column [ ] columnArray0 = new Column [ 2 ] ; primaryKey0 . setColumn ( columnArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return _columnList . size ( ) ; }
void test0 ( ) throws Throwable { AttributeDescriptor attributeDescriptor0 = new AttributeDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) attributeDescriptor0 , "Z~`^_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test1 ( ) throws Throwable { AttributeDescriptor attributeDescriptor0 = new AttributeDescriptor ( ) ; attributeDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { AttributeDescriptor attributeDescriptor0 = new AttributeDescriptor ( ) ; String string0 = attributeDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { AttributeDescriptor attributeDescriptor0 = new AttributeDescriptor ( ) ; AttributeDescriptor attributeDescriptor1 = ( AttributeDescriptor ) attributeDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { AttributeDescriptor attributeDescriptor0 = new AttributeDescriptor ( ) ; attributeDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test5 ( ) throws Throwable { AttributeDescriptor attributeDescriptor0 = new AttributeDescriptor ( ) ; Attribute attribute0 = new Attribute ( ) ; attribute0 . setName ( "Z } a#" ) ; ValidationContext validationContext0 = new ValidationContext ( ) ; attribute0 . setType ( "Z } a#" ) ; attributeDescriptor0 . validate ( ( Object ) attribute0 , validationContext0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { Table table0 = new Table ( ) ; Enumeration < Object > enumeration0 = table0 . enumerateIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test1 ( ) throws Throwable { Table table0 = new Table ( ) ; PrimaryKey primaryKey0 = new PrimaryKey ( ) ; table0 . setPrimaryKey ( primaryKey0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test3 ( ) throws Throwable { Table table0 = new Table ( ) ; int int0 = table0 . getAttributeCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAttributeCount ( ) { return _attributeList . size ( ) ; }
void test4 ( ) throws Throwable { Table table0 = new Table ( ) ; boolean boolean0 = table0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test5 ( ) throws Throwable { Table table0 = new Table ( ) ; int int0 = table0 . getIndexCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexCount ( ) { return _indexList . size ( ) ; }
void test6 ( ) throws Throwable { Table table0 = new Table ( ) ; Index index0 = new Index ( ) ; table0 . addIndex ( index0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexCount ( ) { return _indexList . size ( ) ; }
void test7 ( ) throws Throwable { Table table0 = new Table ( ) ; table0 . clearAttribute ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test9 ( ) throws Throwable { Table table0 = new Table ( ) ; table0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAttributeCount ( ) { return _attributeList . size ( ) ; }
void test11 ( ) throws Throwable { Table table0 = new Table ( ) ; Attribute attribute0 = new Attribute ( ) ; table0 . addAttribute ( attribute0 ) ; table0 . getAttribute ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAttributeCount ( ) { return _attributeList . size ( ) ; }
void test12 ( ) throws Throwable { Table table0 = new Table ( ) ; table0 . clearIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test13 ( ) throws Throwable { Table table0 = new Table ( ) ; Index index0 = new Index ( ) ; boolean boolean0 = table0 . removeIndex ( index0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeIndex ( org . exolab . jms . tools . db . Index vIndex ) { boolean removed = _indexList . remove ( vIndex ) ; return removed ; }
void test16 ( ) throws Throwable { Table table0 = new Table ( ) ; Enumeration < Object > enumeration0 = table0 . enumerateAttribute ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test17 ( ) throws Throwable { Table table0 = new Table ( ) ; boolean boolean0 = table0 . removeAttribute ( ( Attribute ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeAttribute ( org . exolab . jms . tools . db . Attribute vAttribute ) { boolean removed = _attributeList . remove ( vAttribute ) ; return removed ; }
void test25 ( ) throws Throwable { Table table0 = new Table ( ) ; Attribute [ ] attributeArray0 = new Attribute [ 7 ] ; table0 . setAttribute ( attributeArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAttributeCount ( ) { return _attributeList . size ( ) ; }
void test28 ( ) throws Throwable { Table table0 = new Table ( ) ; Index [ ] indexArray0 = new Index [ 10 ] ; table0 . setIndex ( indexArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndexCount ( ) { return _indexList . size ( ) ; }
void test2 ( ) throws Throwable { Column column0 = new Column ( ) ; boolean boolean0 = column0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test4 ( ) throws Throwable { Column column0 = new Column ( ) ; column0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test0 ( ) throws Throwable { V061toV072SchemaConverter v061toV072SchemaConverter0 = new V061toV072SchemaConverter ( ( Connection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" V061toV072SchemaConverter ( Connection connection ) { _connection = connection ; }
void test0 ( ) throws Throwable { V072toV076SchemaConverter v072toV076SchemaConverter0 = new V072toV076SchemaConverter ( ( Connection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" V072toV076SchemaConverter ( Connection connection ) { _connection = connection ; }
void test0 ( ) throws Throwable { MigrationHelper migrationHelper0 = new MigrationHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { Database database0 = MigrationHelper . getSchema ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTableCount ( ) { return _tableList . size ( ) ; }
void test2 ( ) throws Throwable { EmbeddedDataSource embeddedDataSource0 = MigrationHelper . getDataSource ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EmbeddedDataSource getDataSource ( String name ) { EmbeddedDataSource result = new EmbeddedDataSource ( ) ; result . setDatabaseName ( name ) ; result . setCreateDatabase ( "create" ) ; return result ; }
void test0 ( ) throws Throwable { MessageState messageState0 = new MessageState ( "" , true ) ; boolean boolean0 = messageState0 . getDelivered ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDelivered ( ) { return _delivered ; }
void test1 ( ) throws Throwable { MessageState messageState0 = new MessageState ( "" , true ) ; String string0 = messageState0 . getMessageId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDelivered ( ) { return _delivered ; }
void test0 ( ) throws Throwable { MapMessageHandler mapMessageHandler0 = new MapMessageHandler ( ( DestinationStore ) null , ( Connection ) null ) ; MapMessageImpl mapMessageImpl0 = ( MapMessageImpl ) mapMessageHandler0 . newMessage ( ) ; HashMap < Object , Object > hashMap0 = ( HashMap < Object , Object > ) mapMessageHandler0 . getBody ( ( Message ) mapMessageImpl0 ) ; mapMessageHandler0 . setBody ( ( Object ) hashMap0 , ( Message ) mapMessageImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return _keyStore = = null & & _keyStorePassword = = null & & _keyStoreType = = null & & _trustStore = = null & & _trustStorePassword = = null & & _trustStoreType = = null ; }
void test1 ( ) throws Throwable { MapMessageHandler mapMessageHandler0 = new MapMessageHandler ( ( DestinationStore ) null , ( Connection ) null ) ; String string0 = mapMessageHandler0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( Attribute attribute ) throws PersistenceException { Type result = null ; Type type = Type . getType ( attribute . getType ( ) ) ; Type map = _mapper . getType ( type . getType ( ) , type . getPrecision ( ) ) ; if ( map = = null ) { throw new PersistenceException ( "Database does not support type = " + attribute . getType ( ) ) ; } if ( type . getType ( ) ! = map . getType ( ) ) { result = map ; } else { boolean parameters = type . getParameters ( ) ; long precision = type . getPrecision ( ) ; if ( precision < = map . getPrecision ( ) ) { if ( precision = = - 1 ) { precision = map . getPrecision ( ) ; parameters = map . getParameters ( ) ; } result = new Type ( map . getType ( ) , map . getName ( ) , precision , parameters ) ; } else { throw new PersistenceException ( attribute . getName ( ) + type + " exceeds precision for " + map + " precision = " + map . getPrecision ( ) ) ; } } return result ; }
void test2 ( ) throws Throwable { MapMessageHandler mapMessageHandler0 = new MapMessageHandler ( ( DestinationStore ) null , ( Connection ) null ) ; mapMessageHandler0 . setBody ( ( Object ) null , ( Message ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( Attribute attribute ) throws PersistenceException { Type result = null ; Type type = Type . getType ( attribute . getType ( ) ) ; Type map = _mapper . getType ( type . getType ( ) , type . getPrecision ( ) ) ; if ( map = = null ) { throw new PersistenceException ( "Database does not support type = " + attribute . getType ( ) ) ; } if ( type . getType ( ) ! = map . getType ( ) ) { result = map ; } else { boolean parameters = type . getParameters ( ) ; long precision = type . getPrecision ( ) ; if ( precision < = map . getPrecision ( ) ) { if ( precision = = - 1 ) { precision = map . getPrecision ( ) ; parameters = map . getParameters ( ) ; } result = new Type ( map . getType ( ) , map . getName ( ) , precision , parameters ) ; } else { throw new PersistenceException ( attribute . getName ( ) + type + " exceeds precision for " + map + " precision = " + map . getPrecision ( ) ) ; } } return result ; }
void test0 ( ) throws Throwable { AbandonedConfig abandonedConfig0 = new AbandonedConfig ( ) ; DelegatingConnection delegatingConnection0 = new DelegatingConnection ( ( Connection ) null , abandonedConfig0 ) ; ObjectMessageHandler objectMessageHandler0 = new ObjectMessageHandler ( ( DestinationStore ) null , ( Connection ) delegatingConnection0 ) ; ObjectMessageImpl objectMessageImpl0 = ( ObjectMessageImpl ) objectMessageHandler0 . newMessage ( ) ; Object object0 = objectMessageHandler0 . getBody ( ( Message ) objectMessageImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getBody ( Message message ) throws JMSException ; / * * * Populate a message . * * @param messageId the message identifier * @param message the message to populate * @throws JMSException for any JMS error * @throws PersistenceException for any persistence error * / void get ( String messageId , Message message ) throws JMSException , PersistenceException { PreparedStatement select = null ; ResultSet set = null ; try { select = _connection . prepareStatement ( "select * from " + MESSAGE_TABLE + " where message_id = ? " ) ; select . setString ( 1 , messageId ) ; set = select . executeQuery ( ) ; if ( ! set . next ( ) ) { throw new PersistenceException ( "Message not found , JMSMessageID = " + messageId ) ; } String correlationId = set . getString ( "correlation_id" ) ; int deliveryMode = set . getInt ( "delivery_mode" ) ; long destinationId = set . getLong ( "destination_id" ) ; long expiration = set . getLong ( "expiration" ) ; int priority = set . getInt ( "priority" ) ; boolean redelivered = set . getBoolean ( "redelivered" ) ; long replyToId = set . getLong ( "reply_to_id" ) ; long timestamp = set . getLong ( "timestamp" ) ; String type = set . getString ( "type" ) ; Destination destination = _destinations . get ( destinationId ) ; message . setJMSMessageID ( messageId ) ; message . setJMSCorrelationID ( correlationId ) ; message . setJMSDeliveryMode ( deliveryMode ) ; message . setJMSDestination ( destination ) ; message . setJMSExpiration ( expiration ) ; message . setJMSPriority ( priority ) ; message . setJMSRedelivered ( redelivered ) ; if ( replyToId ! = 0 ) { Destination replyTo = _destinations . get ( replyToId ) ; message . setJMSReplyTo ( replyTo ) ; } message . setJMSTimestamp ( timestamp ) ; message . setJMSType ( type ) ; Blob blob = set . getBlob ( "body" ) ; Object body ; try { body = deserialize ( blob ) ; } catch ( Exception exception ) { throw new PersistenceException ( "Failed to deserialize message body , JMSMessageID = " + messageId , exception ) ; } setBody ( body , message ) ; } catch ( SQLException exception ) { throw new PersistenceException ( "Failed to populate message , JMSMessageID = " + messageId , exception ) ; } finally { SQLHelper . close ( set ) ; SQLHelper . close ( select ) ; } getProperties ( messageId , message ) ; }
void test1 ( ) throws Throwable { AbandonedConfig abandonedConfig0 = new AbandonedConfig ( ) ; DelegatingConnection delegatingConnection0 = new DelegatingConnection ( ( Connection ) null , abandonedConfig0 ) ; ObjectMessageHandler objectMessageHandler0 = new ObjectMessageHandler ( ( DestinationStore ) null , ( Connection ) delegatingConnection0 ) ; String string0 = objectMessageHandler0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( Attribute attribute ) throws PersistenceException { Type result = null ; Type type = Type . getType ( attribute . getType ( ) ) ; Type map = _mapper . getType ( type . getType ( ) , type . getPrecision ( ) ) ; if ( map = = null ) { throw new PersistenceException ( "Database does not support type = " + attribute . getType ( ) ) ; } if ( type . getType ( ) ! = map . getType ( ) ) { result = map ; } else { boolean parameters = type . getParameters ( ) ; long precision = type . getPrecision ( ) ; if ( precision < = map . getPrecision ( ) ) { if ( precision = = - 1 ) { precision = map . getPrecision ( ) ; parameters = map . getParameters ( ) ; } result = new Type ( map . getType ( ) , map . getName ( ) , precision , parameters ) ; } else { throw new PersistenceException ( attribute . getName ( ) + type + " exceeds precision for " + map + " precision = " + map . getPrecision ( ) ) ; } } return result ; }
void test2 ( ) throws Throwable { ObjectMessageHandler objectMessageHandler0 = new ObjectMessageHandler ( ( DestinationStore ) null , ( Connection ) null ) ; objectMessageHandler0 . setBody ( ( Object ) null , ( Message ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( Attribute attribute ) throws PersistenceException { Type result = null ; Type type = Type . getType ( attribute . getType ( ) ) ; Type map = _mapper . getType ( type . getType ( ) , type . getPrecision ( ) ) ; if ( map = = null ) { throw new PersistenceException ( "Database does not support type = " + attribute . getType ( ) ) ; } if ( type . getType ( ) ! = map . getType ( ) ) { result = map ; } else { boolean parameters = type . getParameters ( ) ; long precision = type . getPrecision ( ) ; if ( precision < = map . getPrecision ( ) ) { if ( precision = = - 1 ) { precision = map . getPrecision ( ) ; parameters = map . getParameters ( ) ; } result = new Type ( map . getType ( ) , map . getName ( ) , precision , parameters ) ; } else { throw new PersistenceException ( attribute . getName ( ) + type + " exceeds precision for " + map + " precision = " + map . getPrecision ( ) ) ; } } return result ; }
void test1 ( ) throws Throwable { TextMessageHandler textMessageHandler0 = new TextMessageHandler ( ( DestinationStore ) null , ( Connection ) null ) ; String string0 = textMessageHandler0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( Attribute attribute ) throws PersistenceException { Type result = null ; Type type = Type . getType ( attribute . getType ( ) ) ; Type map = _mapper . getType ( type . getType ( ) , type . getPrecision ( ) ) ; if ( map = = null ) { throw new PersistenceException ( "Database does not support type = " + attribute . getType ( ) ) ; } if ( type . getType ( ) ! = map . getType ( ) ) { result = map ; } else { boolean parameters = type . getParameters ( ) ; long precision = type . getPrecision ( ) ; if ( precision < = map . getPrecision ( ) ) { if ( precision = = - 1 ) { precision = map . getPrecision ( ) ; parameters = map . getParameters ( ) ; } result = new Type ( map . getType ( ) , map . getName ( ) , precision , parameters ) ; } else { throw new PersistenceException ( attribute . getName ( ) + type + " exceeds precision for " + map + " precision = " + map . getPrecision ( ) ) ; } } return result ; }
void test2 ( ) throws Throwable { TextMessageHandler textMessageHandler0 = new TextMessageHandler ( ( DestinationStore ) null , ( Connection ) null ) ; TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; textMessageHandler0 . setBody ( ( Object ) null , ( Message ) textMessageImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test1 ( ) throws Throwable { BytesMessageHandler bytesMessageHandler0 = new BytesMessageHandler ( ( DestinationStore ) null , ( Connection ) null ) ; String string0 = bytesMessageHandler0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( Attribute attribute ) throws PersistenceException { Type result = null ; Type type = Type . getType ( attribute . getType ( ) ) ; Type map = _mapper . getType ( type . getType ( ) , type . getPrecision ( ) ) ; if ( map = = null ) { throw new PersistenceException ( "Database does not support type = " + attribute . getType ( ) ) ; } if ( type . getType ( ) ! = map . getType ( ) ) { result = map ; } else { boolean parameters = type . getParameters ( ) ; long precision = type . getPrecision ( ) ; if ( precision < = map . getPrecision ( ) ) { if ( precision = = - 1 ) { precision = map . getPrecision ( ) ; parameters = map . getParameters ( ) ; } result = new Type ( map . getType ( ) , map . getName ( ) , precision , parameters ) ; } else { throw new PersistenceException ( attribute . getName ( ) + type + " exceeds precision for " + map + " precision = " + map . getPrecision ( ) ) ; } } return result ; }
void test0 ( ) throws Throwable { DefaultMessageHandler defaultMessageHandler0 = new DefaultMessageHandler ( ( DestinationStore ) null , ( Connection ) null ) ; MessageImpl messageImpl0 = new MessageImpl ( ) ; Object object0 = defaultMessageHandler0 . getBody ( ( Message ) messageImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getBody ( Message message ) throws JMSException ; / * * * Populate a message . * * @param messageId the message identifier * @param message the message to populate * @throws JMSException for any JMS error * @throws PersistenceException for any persistence error * / void get ( String messageId , Message message ) throws JMSException , PersistenceException { PreparedStatement select = null ; ResultSet set = null ; try { select = _connection . prepareStatement ( "select * from " + MESSAGE_TABLE + " where message_id = ? " ) ; select . setString ( 1 , messageId ) ; set = select . executeQuery ( ) ; if ( ! set . next ( ) ) { throw new PersistenceException ( "Message not found , JMSMessageID = " + messageId ) ; } String correlationId = set . getString ( "correlation_id" ) ; int deliveryMode = set . getInt ( "delivery_mode" ) ; long destinationId = set . getLong ( "destination_id" ) ; long expiration = set . getLong ( "expiration" ) ; int priority = set . getInt ( "priority" ) ; boolean redelivered = set . getBoolean ( "redelivered" ) ; long replyToId = set . getLong ( "reply_to_id" ) ; long timestamp = set . getLong ( "timestamp" ) ; String type = set . getString ( "type" ) ; Destination destination = _destinations . get ( destinationId ) ; message . setJMSMessageID ( messageId ) ; message . setJMSCorrelationID ( correlationId ) ; message . setJMSDeliveryMode ( deliveryMode ) ; message . setJMSDestination ( destination ) ; message . setJMSExpiration ( expiration ) ; message . setJMSPriority ( priority ) ; message . setJMSRedelivered ( redelivered ) ; if ( replyToId ! = 0 ) { Destination replyTo = _destinations . get ( replyToId ) ; message . setJMSReplyTo ( replyTo ) ; } message . setJMSTimestamp ( timestamp ) ; message . setJMSType ( type ) ; Blob blob = set . getBlob ( "body" ) ; Object body ; try { body = deserialize ( blob ) ; } catch ( Exception exception ) { throw new PersistenceException ( "Failed to deserialize message body , JMSMessageID = " + messageId , exception ) ; } setBody ( body , message ) ; } catch ( SQLException exception ) { throw new PersistenceException ( "Failed to populate message , JMSMessageID = " + messageId , exception ) ; } finally { SQLHelper . close ( set ) ; SQLHelper . close ( select ) ; } getProperties ( messageId , message ) ; }
void test1 ( ) throws Throwable { DefaultMessageHandler defaultMessageHandler0 = new DefaultMessageHandler ( ( DestinationStore ) null , ( Connection ) null ) ; MessageImpl messageImpl0 = ( MessageImpl ) defaultMessageHandler0 . newMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAckMessageID ( ) { return _messageHeader . getAckMessageID ( ) ; }
void test2 ( ) throws Throwable { DefaultMessageHandler defaultMessageHandler0 = new DefaultMessageHandler ( ( DestinationStore ) null , ( Connection ) null ) ; MessageImpl messageImpl0 = new MessageImpl ( ) ; defaultMessageHandler0 . setBody ( ( Object ) null , ( Message ) messageImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test3 ( ) throws Throwable { DefaultMessageHandler defaultMessageHandler0 = new DefaultMessageHandler ( ( DestinationStore ) null , ( Connection ) null ) ; String string0 = defaultMessageHandler0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( Attribute attribute ) throws PersistenceException { Type result = null ; Type type = Type . getType ( attribute . getType ( ) ) ; Type map = _mapper . getType ( type . getType ( ) , type . getPrecision ( ) ) ; if ( map = = null ) { throw new PersistenceException ( "Database does not support type = " + attribute . getType ( ) ) ; } if ( type . getType ( ) ! = map . getType ( ) ) { result = map ; } else { boolean parameters = type . getParameters ( ) ; long precision = type . getPrecision ( ) ; if ( precision < = map . getPrecision ( ) ) { if ( precision = = - 1 ) { precision = map . getPrecision ( ) ; parameters = map . getParameters ( ) ; } result = new Type ( map . getType ( ) , map . getName ( ) , precision , parameters ) ; } else { throw new PersistenceException ( attribute . getName ( ) + type + " exceeds precision for " + map + " precision = " + map . getPrecision ( ) ) ; } } return result ; }
void test3 ( ) throws Throwable { ConsumerStore consumerStore0 = new ConsumerStore ( ( DestinationStore ) null , ( Connection ) null ) ; ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList ( ) ; Iterator < Object > iterator0 = constraintDescriptorList0 . iterator ( ) ; IteratorAdapter iteratorAdapter0 = new IteratorAdapter ( iterator0 ) ; consumerStore0 . importCollection ( ( StoreIterator ) iteratorAdapter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) ; / * * * Returns the next element in the interation . * * @return the next element in the iteration . * @throws JMSException for any JMS error * @throws PersistenceException for any persistence error * @throws NoSuchElementException iteration has no more elements . * / Object next ( ) throws JMSException , PersistenceException ; }
void test4 ( ) throws Throwable { ConsumerStore consumerStore0 = new ConsumerStore ( ( DestinationStore ) null , ( Connection ) null ) ; JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue ( ) ; Consumer consumer0 = new Consumer ( ( JmsQueue ) jmsTemporaryQueue0 ) ; consumerStore0 . addSubscriptions ( 0L , consumer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test0 ( ) throws Throwable { Consumer consumer0 = new Consumer ( "" , "" ) ; String string0 = consumer0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isQueueConsumer ( ) { return _queueConsumer ; }
void test1 ( ) throws Throwable { Consumer consumer0 = new Consumer ( " + KfrI ? 7qij - n" , "JmsTemporaryTopic with version " ) ; boolean boolean0 = consumer0 . isQueueConsumer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClientID ( ) { return _clientId ; }
void test2 ( ) throws Throwable { Consumer consumer0 = new Consumer ( " + KfrI ? 7qij - n" , "JmsTemporaryTopic with version " ) ; List < Object > list0 = consumer0 . getSubscriptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isQueueConsumer ( ) { return _queueConsumer ; }
void test4 ( ) throws Throwable { Consumer consumer0 = new Consumer ( "" , "" ) ; String string0 = consumer0 . getClientID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isQueueConsumer ( ) { return _queueConsumer ; }
void test5 ( ) throws Throwable { Consumer consumer0 = new Consumer ( "" , "" ) ; JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue ( ) ; Subscription subscription0 = new Subscription ( ( JmsDestination ) jmsTemporaryQueue0 ) ; consumer0 . addSubscription ( subscription0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isQueueConsumer ( ) { return _queueConsumer ; }
void test2 ( ) throws Throwable { UserStore userStore0 = new UserStore ( ( Connection ) null ) ; LinkedList < User > linkedList0 = new LinkedList < User > ( ) ; Iterator < User > iterator0 = linkedList0 . iterator ( ) ; IteratorAdapter iteratorAdapter0 = new IteratorAdapter ( iterator0 ) ; userStore0 . importCollection ( ( StoreIterator ) iteratorAdapter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) ; / * * * Returns the next element in the interation . * * @return the next element in the iteration . * @throws JMSException for any JMS error * @throws PersistenceException for any persistence error * @throws NoSuchElementException iteration has no more elements . * / Object next ( ) throws JMSException , PersistenceException ; }
void test0 ( ) throws Throwable { MessageHandlerFactory messageHandlerFactory0 = new MessageHandlerFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { StreamMessageHandler streamMessageHandler0 = new StreamMessageHandler ( ( DestinationStore ) null , ( Connection ) null ) ; StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; ArrayList < Object > arrayList0 = ( ArrayList < Object > ) streamMessageHandler0 . getBody ( ( Message ) streamMessageImpl0 ) ; streamMessageHandler0 . setBody ( ( Object ) arrayList0 , ( Message ) streamMessageImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getJMSRedelivered ( ) throws JMSException { return _messageHeader . getJMSRedelivered ( ) ; }
void test1 ( ) throws Throwable { StreamMessageHandler streamMessageHandler0 = new StreamMessageHandler ( ( DestinationStore ) null , ( Connection ) null ) ; StreamMessageImpl streamMessageImpl0 = ( StreamMessageImpl ) streamMessageHandler0 . newMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWildcard ( ) { return _messageHeader . getWildcard ( ) ; }
void test2 ( ) throws Throwable { StreamMessageHandler streamMessageHandler0 = new StreamMessageHandler ( ( DestinationStore ) null , ( Connection ) null ) ; String string0 = streamMessageHandler0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( Attribute attribute ) throws PersistenceException { Type result = null ; Type type = Type . getType ( attribute . getType ( ) ) ; Type map = _mapper . getType ( type . getType ( ) , type . getPrecision ( ) ) ; if ( map = = null ) { throw new PersistenceException ( "Database does not support type = " + attribute . getType ( ) ) ; } if ( type . getType ( ) ! = map . getType ( ) ) { result = map ; } else { boolean parameters = type . getParameters ( ) ; long precision = type . getPrecision ( ) ; if ( precision < = map . getPrecision ( ) ) { if ( precision = = - 1 ) { precision = map . getPrecision ( ) ; parameters = map . getParameters ( ) ; } result = new Type ( map . getType ( ) , map . getName ( ) , precision , parameters ) ; } else { throw new PersistenceException ( attribute . getName ( ) + type + " exceeds precision for " + map + " precision = " + map . getPrecision ( ) ) ; } } return result ; }
void test3 ( ) throws Throwable { MessageStore messageStore0 = new MessageStore ( ( DestinationStore ) null , ( Connection ) null ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; Iterator < String > iterator0 = linkedList0 . iterator ( ) ; IteratorAdapter iteratorAdapter0 = new IteratorAdapter ( iterator0 ) ; messageStore0 . importCollection ( ( StoreIterator ) iteratorAdapter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) ; / * * * Returns the next element in the interation . * * @return the next element in the iteration . * @throws JMSException for any JMS error * @throws PersistenceException for any persistence error * @throws NoSuchElementException iteration has no more elements . * / Object next ( ) throws JMSException , PersistenceException ; }
void test0 ( ) throws Throwable { JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue ( ) ; Subscription subscription0 = new Subscription ( ( JmsDestination ) jmsTemporaryQueue0 ) ; JmsTemporaryQueue jmsTemporaryQueue1 = ( JmsTemporaryQueue ) subscription0 . getDestination ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getConnectionId ( ) { return _connectionId ; }
void test1 ( ) throws Throwable { JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue ( ) ; Subscription subscription0 = new Subscription ( ( JmsDestination ) jmsTemporaryQueue0 ) ; List < Object > list0 = subscription0 . getMessages ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test0 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; ServiceThreadListener serviceThreadListener0 = new ServiceThreadListener ( ) ; DefaultThreadPoolFactory defaultThreadPoolFactory0 = new DefaultThreadPoolFactory ( ( ThreadListener ) serviceThreadListener0 ) ; GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration ( ) ; configuration0 . setGarbageCollectionConfiguration ( garbageCollectionConfiguration0 ) ; BasicEventManager basicEventManager0 = new BasicEventManager ( ( ThreadPoolFactory ) defaultThreadPoolFactory0 ) ; GarbageCollectionService garbageCollectionService0 = new GarbageCollectionService ( configuration0 , ( EventManager ) basicEventManager0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStarted ( ) { return _started ; }
void test0 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; UserManager userManager0 = new UserManager ( configuration0 , databaseService0 ) ; User user0 = new User ( "\" was loaded by " , "\" was loaded by " ) ; User user1 = userManager0 . getUser ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" User getUser ( User user ) { return ( User ) _userCache . get ( user . getUsername ( ) ) ; }
void test2 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; UserManager userManager0 = new UserManager ( configuration0 , databaseService0 ) ; Iterator < Object > iterator0 = userManager0 . userNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) ; / * * * Returns the next element in the interation . * * @return the next element in the iteration . * @throws JMSException for any JMS error * @throws PersistenceException for any persistence error * @throws NoSuchElementException iteration has no more elements . * / Object next ( ) throws JMSException , PersistenceException ; }
void test4 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; UserManager userManager0 = new UserManager ( configuration0 , databaseService0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean createUser ( User user ) { boolean success = false ; PersistenceAdapter adapter = _database . getAdapter ( ) ; if ( _userCache . get ( user . getUsername ( ) ) = = null ) { try { _database . begin ( ) ; Connection connection = _database . getConnection ( ) ; adapter . addUser ( connection , user ) ; addToUserCache ( user ) ; _database . commit ( ) ; success = true ; } catch ( Exception exception ) { _log . error ( "Failed to create user" , exception ) ; try { _database . rollback ( ) ; } catch ( PersistenceException error ) { _log . error ( error , error ) ; } } } return success ; }
void test5 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; UserManager userManager0 = new UserManager ( configuration0 , databaseService0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean updateUser ( User user ) { boolean success = false ; PersistenceAdapter adapter = _database . getAdapter ( ) ; if ( _userCache . get ( user . getUsername ( ) ) ! = null ) { try { _database . begin ( ) ; Connection connection = _database . getConnection ( ) ; adapter . updateUser ( connection , user ) ; _database . commit ( ) ; addToUserCache ( user ) ; success = true ; } catch ( Exception exception ) { _log . error ( "Failed to update user" , exception ) ; rollback ( ) ; } } return success ; }
void test6 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; UserManager userManager0 = new UserManager ( configuration0 , databaseService0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void deleteUser ( ) { OpenJMSUser This = ( OpenJMSUser ) getInstanceSelected ( ) ; QueryDialog . instance ( ) . display ( "Are you sure you want to delete \nselected User : " + This . _name ) ; if ( org . exolab . jms . tools . admin . QueryDialog . instance ( ) . isConfirmed ( ) ) { if ( AbstractAdminConnection . instance ( ) . removeUser ( This . _name ) ) { This . removeFromParent ( ) ; This . refresh ( ) ; } else { JOptionPane . showMessageDialog ( _tree , "Failed to destroy User" , "Destroy User Error" , JOptionPane . ERROR_MESSAGE ) ; } } }
void test7 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; SecurityConfiguration securityConfiguration0 = new SecurityConfiguration ( ) ; configuration0 . setSecurityConfiguration ( securityConfiguration0 ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; UserManager userManager0 = new UserManager ( configuration0 , databaseService0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean validateUser ( String username , String password ) { boolean result = false ; SecurityConfiguration config = _config . getSecurityConfiguration ( ) ; if ( ! config . getSecurityEnabled ( ) ) { / / security disabled result = true ; } else { User user = ( User ) _userCache . get ( username ) ; if ( user ! = null & & user . getPassword ( ) . equals ( password ) ) { result = true ; } } return result ; }
void test1 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; UserManager userManager0 = new UserManager ( configuration0 , databaseService0 ) ; AuthenticationMgr authenticationMgr0 = new AuthenticationMgr ( userManager0 ) ; User user0 = new User ( ) ; boolean boolean0 = authenticationMgr0 . addUser ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean addUser ( String username , String password ) ; / * * * Change the password for this user * * @param username the users name * @param password the users password * @return < code > true < / code > if the password is changed * otherwise < code > false < / code > * / boolean changePassword ( String username , String password ) ; / * * * Remove a user from the DB . * * @param username the users name * @return < code > true < / code > if the user is removed * otherwise < code > false < / code > * / boolean removeUser ( String username ) ; / * * * List all users in the DB * * @return Enumeration of users * / Enumeration getAllUsers ( ) ; }
void test2 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; UserManager userManager0 = new UserManager ( configuration0 , databaseService0 ) ; AuthenticationMgr authenticationMgr0 = new AuthenticationMgr ( userManager0 ) ; User user0 = new User ( ) ; boolean boolean0 = authenticationMgr0 . removeUser ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeUser ( String username ) ; / * * * List all users in the DB * * @return Enumeration of users * / Enumeration getAllUsers ( ) ; }
void test3 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; UserManager userManager0 = new UserManager ( configuration0 , databaseService0 ) ; AuthenticationMgr authenticationMgr0 = new AuthenticationMgr ( userManager0 ) ; User user0 = new User ( " ] I" , " ] I" ) ; boolean boolean0 = authenticationMgr0 . updateUser ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean updateUser ( User user ) { boolean success = false ; PersistenceAdapter adapter = _database . getAdapter ( ) ; if ( _userCache . get ( user . getUsername ( ) ) ! = null ) { try { _database . begin ( ) ; Connection connection = _database . getConnection ( ) ; adapter . updateUser ( connection , user ) ; _database . commit ( ) ; addToUserCache ( user ) ; success = true ; } catch ( Exception exception ) { _log . error ( "Failed to update user" , exception ) ; rollback ( ) ; } } return success ; }
void test0 ( ) throws Throwable { User user0 = new User ( "" , "" ) ; String string0 = user0 . getPassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return password ; }
void test1 ( ) throws Throwable { User user0 = new User ( "" , "" ) ; String string0 = user0 . getUsername ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsername ( ) { return username ; }
void test2 ( ) throws Throwable { User user0 = new User ( " & rj5o > " , " & rj5o > " ) ; user0 . setPassword ( "J t + ; cs ( ZN9V + N7Dt" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsername ( ) { return username ; }
void test3 ( ) throws Throwable { User user0 = new User ( "" , "" ) ; user0 . setUsername ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return password ; }
void test4 ( ) throws Throwable { User user0 = new User ( "" , "" ) ; String string0 = user0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test5 ( ) throws Throwable { User user0 = new User ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsername ( ) { return username ; }
void test0 ( ) throws Throwable { Subtract subtract0 = new Subtract ( ( Expression ) null , ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Subtract ( Expression lhs , Expression rhs ) { super ( " - " , lhs , rhs ) ; }
void test0 ( ) throws Throwable { Literal literal0 = Literal . stringLiteral ( "F , z^c" ) ; String string0 = literal0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test2 ( ) throws Throwable { Literal literal0 = Literal . booleanLiteral ( true ) ; String string0 = literal0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test4 ( ) throws Throwable { Literal literal0 = Literal . booleanLiteral ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test0 ( ) throws Throwable { Equal equal0 = new Equal ( ( Expression ) null , ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Equal ( Expression lhs , Expression rhs ) { super ( " = " , lhs , rhs ) ; }
void test0 ( ) throws Throwable { GreaterEqual greaterEqual0 = new GreaterEqual ( ( Expression ) null , ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GreaterEqual ( Expression lhs , Expression rhs ) { super ( " > = " , lhs , rhs ) ; }
void test0 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . unaryOperator ( 4 , ( Expression ) null ) ; Expression expression1 = defaultExpressionFactory0 . between ( expression0 , expression0 , ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Expression between ( Expression num1 , Expression num2 , Expression num3 ) throws SelectorException ; / * * * Create an 'in' expression * * @param identifier string identifer to apply the 'in' test to * @param set the set of string values to compare against * @return a new 'in' expression * @throws SelectorException for any error * / Expression in ( Expression identifier , HashSet set ) throws SelectorException ; / * * * Create a literal expression * * @param type the operator token type from SelectorTokenTypes * @param text the literal text * @return a new literal expression * @throws SelectorException if type is not a valid literal type * / Expression literal ( int type , String text ) throws SelectorException ; } / / - - ExpressionFactory
void test3 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . identifier ( "" ) ; Expression expression1 = defaultExpressionFactory0 . isNull ( expression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Expression isNull ( Expression identifier ) throws SelectorException ; / * * * Create a 'like' expression * * @param identifier the identifer to apply the 'like' test to * @param pattern the search pattern * @param escape the escape character . This may be null * @return a new 'like' expression * @throws SelectorException if the pattern or escape is invalid * / Expression like ( Expression identifier , String pattern , String escape ) throws SelectorException ; / * * * Create a 'between' expression that returns the result of : < br / > * < code > num1 > = num2 and num1 < = num3 < / code > * when evaluated * * @param num1 an arithmethic expression * @param num2 an arithmethic expression * @param num3 an arithmethic expression * @return a new 'between' expression * @throws SelectorException for any error * / Expression between ( Expression num1 , Expression num2 , Expression num3 ) throws SelectorException ; / * * * Create an 'in' expression * * @param identifier string identifer to apply the 'in' test to * @param set the set of string values to compare against * @return a new 'in' expression * @throws SelectorException for any error * / Expression in ( Expression identifier , HashSet set ) throws SelectorException ; / * * * Create a literal expression * * @param type the operator token type from SelectorTokenTypes * @param text the literal text * @return a new literal expression * @throws SelectorException if type is not a valid literal type * / Expression literal ( int type , String text ) throws SelectorException ; } / / - - ExpressionFactory
void test4 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . identifier ( "" ) ; Expression expression1 = defaultExpressionFactory0 . binaryOperator ( 5 , expression0 , expression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test5 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . identifier ( "e + k + 8 [ G^nl ; 9ev4" ) ; Expression expression1 = defaultExpressionFactory0 . binaryOperator ( 6 , expression0 , expression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test6 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . identifier ( "gG" ) ; Expression expression1 = defaultExpressionFactory0 . binaryOperator ( 8 , expression0 , expression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test7 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . identifier ( " , $ : UXMa & } QG + 8JW" ) ; Expression expression1 = defaultExpressionFactory0 . binaryOperator ( 9 , expression0 , expression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test8 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . identifier ( "G" ) ; Expression expression1 = defaultExpressionFactory0 . binaryOperator ( 10 , expression0 , expression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test9 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . identifier ( "Ys$rcN ( H4 > `XgonkF" ) ; Expression expression1 = defaultExpressionFactory0 . binaryOperator ( 11 , expression0 , expression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test10 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . identifier ( "" ) ; Expression expression1 = defaultExpressionFactory0 . binaryOperator ( 12 , expression0 , expression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test11 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . binaryOperator ( 13 , ( Expression ) null , ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Expression binaryOperator ( int operator , Expression left , Expression right ) throws SelectorException ; / * * * Create an unary operator expression * * @param operator the operator token type from SelectorTokenTypes * @param operand the expression to apply the operator to * @return a new unary expression * @throws SelectorException if the operator is not a valid unary operator * / Expression unaryOperator ( int operator , Expression operand ) throws SelectorException ; / * * * Create an identifier expression * * @param name the name of the identifier * @return a new identifier expression * @throws SelectorException is name is not a valid identifier * / Expression identifier ( String name ) throws SelectorException ; / * * * Create an 'is null' expression * * @param identifier the identifer expression to apply the 'is null' test * @return an 'is null' expression * @throws SelectorException for any error * / Expression isNull ( Expression identifier ) throws SelectorException ; / * * * Create a 'like' expression * * @param identifier the identifer to apply the 'like' test to * @param pattern the search pattern * @param escape the escape character . This may be null * @return a new 'like' expression * @throws SelectorException if the pattern or escape is invalid * / Expression like ( Expression identifier , String pattern , String escape ) throws SelectorException ; / * * * Create a 'between' expression that returns the result of : < br / > * < code > num1 > = num2 and num1 < = num3 < / code > * when evaluated * * @param num1 an arithmethic expression * @param num2 an arithmethic expression * @param num3 an arithmethic expression * @return a new 'between' expression * @throws SelectorException for any error * / Expression between ( Expression num1 , Expression num2 , Expression num3 ) throws SelectorException ; / * * * Create an 'in' expression * * @param identifier string identifer to apply the 'in' test to * @param set the set of string values to compare against * @return a new 'in' expression * @throws SelectorException for any error * / Expression in ( Expression identifier , HashSet set ) throws SelectorException ; / * * * Create a literal expression * * @param type the operator token type from SelectorTokenTypes * @param text the literal text * @return a new literal expression * @throws SelectorException if type is not a valid literal type * / Expression literal ( int type , String text ) throws SelectorException ; } / / - - ExpressionFactory
void test12 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . identifier ( " [ < e - = fxPpA5T | 3" ) ; Expression expression1 = defaultExpressionFactory0 . binaryOperator ( 14 , expression0 , expression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test13 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . identifier ( "8f'" ) ; Expression expression1 = defaultExpressionFactory0 . binaryOperator ( 15 , expression0 , expression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test14 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . binaryOperator ( 16 , ( Expression ) null , ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Expression binaryOperator ( int operator , Expression left , Expression right ) throws SelectorException ; / * * * Create an unary operator expression * * @param operator the operator token type from SelectorTokenTypes * @param operand the expression to apply the operator to * @return a new unary expression * @throws SelectorException if the operator is not a valid unary operator * / Expression unaryOperator ( int operator , Expression operand ) throws SelectorException ; / * * * Create an identifier expression * * @param name the name of the identifier * @return a new identifier expression * @throws SelectorException is name is not a valid identifier * / Expression identifier ( String name ) throws SelectorException ; / * * * Create an 'is null' expression * * @param identifier the identifer expression to apply the 'is null' test * @return an 'is null' expression * @throws SelectorException for any error * / Expression isNull ( Expression identifier ) throws SelectorException ; / * * * Create a 'like' expression * * @param identifier the identifer to apply the 'like' test to * @param pattern the search pattern * @param escape the escape character . This may be null * @return a new 'like' expression * @throws SelectorException if the pattern or escape is invalid * / Expression like ( Expression identifier , String pattern , String escape ) throws SelectorException ; / * * * Create a 'between' expression that returns the result of : < br / > * < code > num1 > = num2 and num1 < = num3 < / code > * when evaluated * * @param num1 an arithmethic expression * @param num2 an arithmethic expression * @param num3 an arithmethic expression * @return a new 'between' expression * @throws SelectorException for any error * / Expression between ( Expression num1 , Expression num2 , Expression num3 ) throws SelectorException ; / * * * Create an 'in' expression * * @param identifier string identifer to apply the 'in' test to * @param set the set of string values to compare against * @return a new 'in' expression * @throws SelectorException for any error * / Expression in ( Expression identifier , HashSet set ) throws SelectorException ; / * * * Create a literal expression * * @param type the operator token type from SelectorTokenTypes * @param text the literal text * @return a new literal expression * @throws SelectorException if type is not a valid literal type * / Expression literal ( int type , String text ) throws SelectorException ; } / / - - ExpressionFactory
void test16 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . identifier ( "" ) ; Expression expression1 = defaultExpressionFactory0 . unaryOperator ( 7 , expression0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test17 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . literal ( 32 , " - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Expression unaryOperator ( int operator , Expression operand ) throws SelectorException ; / * * * Create an identifier expression * * @param name the name of the identifier * @return a new identifier expression * @throws SelectorException is name is not a valid identifier * / Expression identifier ( String name ) throws SelectorException ; / * * * Create an 'is null' expression * * @param identifier the identifer expression to apply the 'is null' test * @return an 'is null' expression * @throws SelectorException for any error * / Expression isNull ( Expression identifier ) throws SelectorException ; / * * * Create a 'like' expression * * @param identifier the identifer to apply the 'like' test to * @param pattern the search pattern * @param escape the escape character . This may be null * @return a new 'like' expression * @throws SelectorException if the pattern or escape is invalid * / Expression like ( Expression identifier , String pattern , String escape ) throws SelectorException ; / * * * Create a 'between' expression that returns the result of : < br / > * < code > num1 > = num2 and num1 < = num3 < / code > * when evaluated * * @param num1 an arithmethic expression * @param num2 an arithmethic expression * @param num3 an arithmethic expression * @return a new 'between' expression * @throws SelectorException for any error * / Expression between ( Expression num1 , Expression num2 , Expression num3 ) throws SelectorException ; / * * * Create an 'in' expression * * @param identifier string identifer to apply the 'in' test to * @param set the set of string values to compare against * @return a new 'in' expression * @throws SelectorException for any error * / Expression in ( Expression identifier , HashSet set ) throws SelectorException ; / * * * Create a literal expression * * @param type the operator token type from SelectorTokenTypes * @param text the literal text * @return a new literal expression * @throws SelectorException if type is not a valid literal type * / Expression literal ( int type , String text ) throws SelectorException ; } / / - - ExpressionFactory
void test18 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . literal ( 26 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Expression literal ( int type , String text ) throws SelectorException ; } / / - - ExpressionFactory
void test23 ( ) throws Throwable { DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory ( ) ; Expression expression0 = defaultExpressionFactory0 . literal ( 31 , " < Q$ > 0 ) mA1~ . @9vMy ; C1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test0 ( ) throws Throwable { SDouble sDouble0 = new SDouble ( ( double ) 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDouble ( ) ; / * * * Returns the type of this * * @return { @link Type#NUMERIC }
void test1 ( ) throws Throwable { SDouble sDouble0 = new SDouble ( ) ; double double0 = sDouble0 . getDouble ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDouble ( ) ; / * * * Returns the type of this * * @return { @link Type#NUMERIC }
void test2 ( ) throws Throwable { SDouble sDouble0 = new SDouble ( ) ; long long0 = sDouble0 . getLong ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLong ( ) ; / * * * Returns the value of this as a < code > double < / code > * * @return the value of this as a < code > double < / code > * / double getDouble ( ) ; / * * * Returns the type of this * * @return { @link Type#NUMERIC }
void test3 ( ) throws Throwable { SDouble sDouble0 = new SDouble ( ) ; Double double0 = ( Double ) sDouble0 . getObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObject ( ) ; / * * * Determines if this is equal to another object . * * @param obj the object to compare * @return < code > null < / code > if the comparison is undefined , * < code > SBool . TRUE < / code > if < code > this = obj < / code > , otherwise * < code > SBool . FALSE < / code > if < code > this & lt ; & gt ; obj < / code > * / SBool equal ( SObject obj ) { SBool result = SBool . FALSE ; if ( getObject ( ) . equals ( obj . getObject ( ) ) ) { result = SBool . TRUE ; } return result ; }
void test0 ( ) throws Throwable { Less less0 = new Less ( ( Expression ) null , ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Less ( Expression lhs , Expression rhs ) { super ( " < " , lhs , rhs ) ; }
void test0 ( ) throws Throwable { boolean boolean0 = Identifiers . isJMSIdentifier ( "G" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isJMSIdentifier ( String name ) { boolean result = false ; if ( name . startsWith ( JMS_PREFIX ) & & ! ( name . startsWith ( JMSX_PREFIX ) | | name . startsWith ( JMS_PROVIDER_PREFIX ) ) ) { result = true ; } return result ; }
void test1 ( ) throws Throwable { boolean boolean0 = Identifiers . isJMSIdentifier ( "JMSX" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isJMSIdentifier ( String name ) { boolean result = false ; if ( name . startsWith ( JMS_PREFIX ) & & ! ( name . startsWith ( JMSX_PREFIX ) | | name . startsWith ( JMS_PROVIDER_PREFIX ) ) ) { result = true ; } return result ; }
void test2 ( ) throws Throwable { boolean boolean0 = Identifiers . isJMSIdentifier ( "JMSCorrelationID" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isJMSIdentifier ( String name ) { boolean result = false ; if ( name . startsWith ( JMS_PREFIX ) & & ! ( name . startsWith ( JMSX_PREFIX ) | | name . startsWith ( JMS_PROVIDER_PREFIX ) ) ) { result = true ; } return result ; }
void test3 ( ) throws Throwable { boolean boolean0 = Identifiers . isJMSIdentifier ( "JMS_JMSCorrelationID" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isJMSIdentifier ( String name ) { boolean result = false ; if ( name . startsWith ( JMS_PREFIX ) & & ! ( name . startsWith ( JMSX_PREFIX ) | | name . startsWith ( JMS_PROVIDER_PREFIX ) ) ) { result = true ; } return result ; }
void test4 ( ) throws Throwable { boolean boolean0 = Identifiers . isQueryableJMSIdentifier ( "JMSDeliveryMode" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isQueryableJMSIdentifier ( String name ) { return ( name . equals ( JMS_DELIVERY_MODE ) | | name . equals ( JMS_PRIORITY ) | | name . equals ( JMS_TIMESTAMP ) | | name . equals ( JMS_MESSAGE_ID ) | | name . equals ( JMS_CORRELATION_ID ) | | name . equals ( JMS_TYPE ) ) ; }
void test5 ( ) throws Throwable { boolean boolean0 = Identifiers . isQueryableJMSIdentifier ( "JMSPriority" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isQueryableJMSIdentifier ( String name ) { return ( name . equals ( JMS_DELIVERY_MODE ) | | name . equals ( JMS_PRIORITY ) | | name . equals ( JMS_TIMESTAMP ) | | name . equals ( JMS_MESSAGE_ID ) | | name . equals ( JMS_CORRELATION_ID ) | | name . equals ( JMS_TYPE ) ) ; }
void test6 ( ) throws Throwable { boolean boolean0 = Identifiers . isQueryableJMSIdentifier ( "JMSCorrelationID" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isQueryableJMSIdentifier ( String name ) { return ( name . equals ( JMS_DELIVERY_MODE ) | | name . equals ( JMS_PRIORITY ) | | name . equals ( JMS_TIMESTAMP ) | | name . equals ( JMS_MESSAGE_ID ) | | name . equals ( JMS_CORRELATION_ID ) | | name . equals ( JMS_TYPE ) ) ; }
void test7 ( ) throws Throwable { boolean boolean0 = Identifiers . isQueryableJMSIdentifier ( "JMSTimestamp" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isQueryableJMSIdentifier ( String name ) { return ( name . equals ( JMS_DELIVERY_MODE ) | | name . equals ( JMS_PRIORITY ) | | name . equals ( JMS_TIMESTAMP ) | | name . equals ( JMS_MESSAGE_ID ) | | name . equals ( JMS_CORRELATION_ID ) | | name . equals ( JMS_TYPE ) ) ; }
void test8 ( ) throws Throwable { boolean boolean0 = Identifiers . isQueryableJMSIdentifier ( "JMSMessageID" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isQueryableJMSIdentifier ( String name ) { return ( name . equals ( JMS_DELIVERY_MODE ) | | name . equals ( JMS_PRIORITY ) | | name . equals ( JMS_TIMESTAMP ) | | name . equals ( JMS_MESSAGE_ID ) | | name . equals ( JMS_CORRELATION_ID ) | | name . equals ( JMS_TYPE ) ) ; }
void test9 ( ) throws Throwable { boolean boolean0 = Identifiers . isQueryableJMSIdentifier ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isQueryableJMSIdentifier ( String name ) { return ( name . equals ( JMS_DELIVERY_MODE ) | | name . equals ( JMS_PRIORITY ) | | name . equals ( JMS_TIMESTAMP ) | | name . equals ( JMS_MESSAGE_ID ) | | name . equals ( JMS_CORRELATION_ID ) | | name . equals ( JMS_TYPE ) ) ; }
void test10 ( ) throws Throwable { boolean boolean0 = Identifiers . isQueryableJMSIdentifier ( "JMSType" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isQueryableJMSIdentifier ( String name ) { return ( name . equals ( JMS_DELIVERY_MODE ) | | name . equals ( JMS_PRIORITY ) | | name . equals ( JMS_TIMESTAMP ) | | name . equals ( JMS_MESSAGE_ID ) | | name . equals ( JMS_CORRELATION_ID ) | | name . equals ( JMS_TYPE ) ) ; }
void test11 ( ) throws Throwable { boolean boolean0 = Identifiers . isString ( "JMSMessageID" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isString ( String name ) { return ( name . equals ( JMS_MESSAGE_ID ) | | name . equals ( JMS_CORRELATION_ID ) | | name . equals ( JMS_TYPE ) | | name . equals ( JMS_DELIVERY_MODE ) ) ; / / delivery mode is an integer which must be mapped to a string / / ( see '3 . 8 . 1 . 3 Special Notes' of the spec ) . }
void test12 ( ) throws Throwable { boolean boolean0 = Identifiers . isString ( "JMSDeliveryMode" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isString ( String name ) { return ( name . equals ( JMS_MESSAGE_ID ) | | name . equals ( JMS_CORRELATION_ID ) | | name . equals ( JMS_TYPE ) | | name . equals ( JMS_DELIVERY_MODE ) ) ; / / delivery mode is an integer which must be mapped to a string / / ( see '3 . 8 . 1 . 3 Special Notes' of the spec ) . }
void test13 ( ) throws Throwable { boolean boolean0 = Identifiers . isString ( "JMSCorrelationID" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isString ( String name ) { return ( name . equals ( JMS_MESSAGE_ID ) | | name . equals ( JMS_CORRELATION_ID ) | | name . equals ( JMS_TYPE ) | | name . equals ( JMS_DELIVERY_MODE ) ) ; / / delivery mode is an integer which must be mapped to a string / / ( see '3 . 8 . 1 . 3 Special Notes' of the spec ) . }
void test14 ( ) throws Throwable { boolean boolean0 = Identifiers . isString ( "JMSType" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isString ( String name ) { return ( name . equals ( JMS_MESSAGE_ID ) | | name . equals ( JMS_CORRELATION_ID ) | | name . equals ( JMS_TYPE ) | | name . equals ( JMS_DELIVERY_MODE ) ) ; / / delivery mode is an integer which must be mapped to a string / / ( see '3 . 8 . 1 . 3 Special Notes' of the spec ) . }
void test15 ( ) throws Throwable { boolean boolean0 = Identifiers . isString ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isString ( String name ) { return ( name . equals ( JMS_MESSAGE_ID ) | | name . equals ( JMS_CORRELATION_ID ) | | name . equals ( JMS_TYPE ) | | name . equals ( JMS_DELIVERY_MODE ) ) ; / / delivery mode is an integer which must be mapped to a string / / ( see '3 . 8 . 1 . 3 Special Notes' of the spec ) . }
void test16 ( ) throws Throwable { boolean boolean0 = Identifiers . isNumeric ( "JMSPriority" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumeric ( String name ) { return ( name . equals ( JMS_PRIORITY ) | | name . equals ( JMS_TIMESTAMP ) ) ; }
void test17 ( ) throws Throwable { boolean boolean0 = Identifiers . isNumeric ( "G" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumeric ( String name ) { return ( name . equals ( JMS_PRIORITY ) | | name . equals ( JMS_TIMESTAMP ) ) ; }
void test18 ( ) throws Throwable { boolean boolean0 = Identifiers . isNumeric ( "JMSTimestamp" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumeric ( String name ) { return ( name . equals ( JMS_PRIORITY ) | | name . equals ( JMS_TIMESTAMP ) ) ; }
void test0 ( ) throws Throwable { NotEqual notEqual0 = new NotEqual ( ( Expression ) null , ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NotEqual ( Expression lhs , Expression rhs ) { super ( " < > " , lhs , rhs ) ; }
void test0 ( ) throws Throwable { SLong sLong0 = new SLong ( ( - 15L ) ) ; long long0 = sLong0 . getLong ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLong ( ) ; / * * * Returns the value of this as a < code > double < / code > * * @return the value of this as a < code > double < / code > * / double getDouble ( ) ; / * * * Returns the type of this * * @return { @link Type#NUMERIC }
void test1 ( ) throws Throwable { SLong sLong0 = new SLong ( ( - 15L ) ) ; Long long0 = ( Long ) sLong0 . getObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObject ( ) ; / * * * Determines if this is equal to another object . * * @param obj the object to compare * @return < code > null < / code > if the comparison is undefined , * < code > SBool . TRUE < / code > if < code > this = obj < / code > , otherwise * < code > SBool . FALSE < / code > if < code > this & lt ; & gt ; obj < / code > * / SBool equal ( SObject obj ) { SBool result = SBool . FALSE ; if ( getObject ( ) . equals ( obj . getObject ( ) ) ) { result = SBool . TRUE ; } return result ; }
void test2 ( ) throws Throwable { SLong sLong0 = new SLong ( ( - 15L ) ) ; double double0 = sLong0 . getDouble ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDouble ( ) ; / * * * Returns the type of this * * @return { @link Type#NUMERIC }
void test0 ( ) throws Throwable { SBool sBool0 = SBool . TRUE ; Type type0 = sBool0 . type ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test1 ( ) throws Throwable { SBool sBool0 = SBool . FALSE ; Boolean boolean0 = ( Boolean ) sBool0 . getObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObject ( ) ; / * * * Determines if this is equal to another object . * * @param obj the object to compare * @return < code > null < / code > if the comparison is undefined , * < code > SBool . TRUE < / code > if < code > this = obj < / code > , otherwise * < code > SBool . FALSE < / code > if < code > this & lt ; & gt ; obj < / code > * / SBool equal ( SObject obj ) { SBool result = SBool . FALSE ; if ( getObject ( ) . equals ( obj . getObject ( ) ) ) { result = SBool . TRUE ; } return result ; }
void test2 ( ) throws Throwable { Boolean boolean0 = Boolean . valueOf ( "undefined" ) ; SBool sBool0 = new SBool ( boolean0 ) ; SBool sBool1 = sBool0 . or ( sBool0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean value ( ) { return _value . booleanValue ( ) ; }
void test3 ( ) throws Throwable { Boolean boolean0 = Boolean . valueOf ( true ) ; SBool sBool0 = new SBool ( boolean0 ) ; SBool sBool1 = sBool0 . and ( ( SBool ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean value ( ) { return _value . booleanValue ( ) ; }
void test4 ( ) throws Throwable { Boolean boolean0 = new Boolean ( "P\nj [ C = c1NmNC" ) ; SBool sBool0 = new SBool ( boolean0 ) ; SBool sBool1 = sBool0 . and ( sBool0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SBool and ( SBool rhs ) { SBool result = null ; if ( rhs ! = null ) { if ( value ( ) & & rhs . value ( ) ) { result = SBool . TRUE ; } else { result = SBool . FALSE ; } } else if ( ! value ( ) ) { result = SBool . FALSE ; } return result ; }
void test5 ( ) throws Throwable { SBool sBool0 = SBool . TRUE ; SBool sBool1 = sBool0 . and ( sBool0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean value ( ) { return _value . booleanValue ( ) ; }
void test6 ( ) throws Throwable { SBool sBool0 = SBool . TRUE ; Boolean boolean0 = Boolean . FALSE ; SBool sBool1 = new SBool ( boolean0 ) ; SBool sBool2 = sBool0 . and ( sBool1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean value ( ) { return _value . booleanValue ( ) ; }
void test7 ( ) throws Throwable { SBool sBool0 = SBool . FALSE ; SBool sBool1 = sBool0 . and ( ( SBool ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean value ( ) { return _value . booleanValue ( ) ; }
void test8 ( ) throws Throwable { SBool sBool0 = SBool . TRUE ; SBool sBool1 = sBool0 . or ( sBool0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean value ( ) { return _value . booleanValue ( ) ; }
void test9 ( ) throws Throwable { SBool sBool0 = SBool . FALSE ; SBool sBool1 = sBool0 . not ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean value ( ) { return _value . booleanValue ( ) ; }
void test10 ( ) throws Throwable { SBool sBool0 = SBool . TRUE ; SBool sBool1 = sBool0 . not ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SBool not ( ) { SBool result = SBool . TRUE ; if ( value ( ) ) { result = SBool . FALSE ; } return result ; }
void test0 ( ) throws Throwable { Divide divide0 = new Divide ( ( Expression ) null , ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Divide ( Expression lhs , Expression rhs ) { super ( " / " , lhs , rhs ) ; }
void test0 ( ) throws Throwable { Selector selector0 = new Selector ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Selector ( String expression ) throws InvalidSelectorException { try { if ( expression = = null | | expression . length ( ) = = 0 ) { / / always return true for null or empty expressions _evaluator = Literal . booleanLiteral ( true ) ; } else { SelectorLexer lexer = new SelectorLexer ( new StringReader ( expression ) ) ; lexer . initialise ( ) ; SelectorParser parser = new SelectorParser ( lexer ) ; parser . initialise ( ) ; parser . selector ( ) ; / / start parsing at the selector rule SelectorTreeParser builder = new SelectorTreeParser ( ) ; builder . initialise ( new DefaultExpressionFactory ( ) ) ; _evaluator = builder . selector ( parser . getAST ( ) ) ; } } catch ( Exception exception ) { throw new InvalidSelectorException ( exception . toString ( ) ) ; } }
void test1 ( ) throws Throwable { Selector selector0 = new Selector ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean selects ( Message message ) { boolean result = false ; try { SObject value = _evaluator . evaluate ( message ) ; if ( value instanceof SBool ) { result = ( ( SBool ) value ) . value ( ) ; } } catch ( TypeMismatchException ignore ) { } return result ; }
void test2 ( ) throws Throwable { Selector selector0 = new Selector ( "u2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean selects ( Message message ) { boolean result = false ; try { SObject value = _evaluator . evaluate ( message ) ; if ( value instanceof SBool ) { result = ( ( SBool ) value ) . value ( ) ; } } catch ( TypeMismatchException ignore ) { } return result ; }
void test0 ( ) throws Throwable { SString sString0 = new SString ( "A8 : LLVo + > gJ > n + , ! ds" ) ; String string0 = ( String ) sString0 . getObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObject ( ) ; / * * * Determines if this is equal to another object . * * @param obj the object to compare * @return < code > null < / code > if the comparison is undefined , * < code > SBool . TRUE < / code > if < code > this = obj < / code > , otherwise * < code > SBool . FALSE < / code > if < code > this & lt ; & gt ; obj < / code > * / SBool equal ( SObject obj ) { SBool result = SBool . FALSE ; if ( getObject ( ) . equals ( obj . getObject ( ) ) ) { result = SBool . TRUE ; } return result ; }
void test1 ( ) throws Throwable { SString sString0 = new SString ( "M > E | 4#^zP - c [ * " ) ; Type type0 = sString0 . type ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test0 ( ) throws Throwable { Identifier identifier0 = new Identifier ( "Zc#x = 3CR" ) ; String string0 = identifier0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test2 ( ) throws Throwable { Identifier identifier0 = new Identifier ( "JMSMessageID" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test0 ( ) throws Throwable { Context context0 = new Context ( 227 , 1725 ) ; int int0 = context0 . getColumn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLine ( ) { return _line ; }
void test1 ( ) throws Throwable { Context context0 = new Context ( 227 , 1725 ) ; String string0 = context0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test2 ( ) throws Throwable { Context context0 = new Context ( 227 , 1725 ) ; int int0 = context0 . getLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . tools . db . Column getColumn ( int index ) throws java . lang . IndexOutOfBoundsException { / / - - check bounds for index if ( ( index < 0 ) | | ( index > _columnList . size ( ) ) ) { throw new IndexOutOfBoundsException ( ) ; } return ( org . exolab . jms . tools . db . Column ) _columnList . get ( index ) ; }
void test0 ( ) throws Throwable { HashSet < Object > hashSet0 = new HashSet < Object > ( ) ; InExpression inExpression0 = new InExpression ( ( Identifier ) null , ( HashSet ) hashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InExpression ( Identifier ident , HashSet values ) { super ( ident ) ; _values = values ; }
void test0 ( ) throws Throwable { LessEqual lessEqual0 = new LessEqual ( ( Expression ) null , ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LessEqual ( Expression lhs , Expression rhs ) { super ( " < = " , lhs , rhs ) ; }
void test0 ( ) throws Throwable { And and0 = new And ( ( Expression ) null , ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" And ( Expression lhs , Expression rhs ) { super ( "and" , lhs , rhs ) ; }
void test0 ( ) throws Throwable { LikeExpression likeExpression0 = new LikeExpression ( ( Identifier ) null , "h } ) " , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LikeExpression ( Identifier identifier , String pattern , String escape ) throws SelectorException { super ( identifier ) ; _pattern = pattern ; _escape = escape ; _regexp = getRegexp ( _pattern , _escape ) ; _matcher = new Perl5Matcher ( ) ; }
void test1 ( ) throws Throwable { LikeExpression likeExpression0 = new LikeExpression ( ( Identifier ) null , "s { G = tG" , "F" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LikeExpression ( Identifier identifier , String pattern , String escape ) throws SelectorException { super ( identifier ) ; _pattern = pattern ; _escape = escape ; _regexp = getRegexp ( _pattern , _escape ) ; _matcher = new Perl5Matcher ( ) ; }
void test0 ( ) throws Throwable { Character character0 = Character . valueOf ( '$' ) ; Perl5Pattern perl5Pattern0 = ( Perl5Pattern ) RegexpFactory . create ( " [ = 9V0s ( ! n | M'J" , character0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test1 ( ) throws Throwable { Perl5Pattern perl5Pattern0 = ( Perl5Pattern ) RegexpFactory . create ( "pktZYt@" , ( Character ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test2 ( ) throws Throwable { Character character0 = new Character ( 'Y' ) ; Perl5Pattern perl5Pattern0 = ( Perl5Pattern ) RegexpFactory . create ( "DiCjR . d5W@tY3l%" , character0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test4 ( ) throws Throwable { Character character0 = new Character ( 'k' ) ; Perl5Pattern perl5Pattern0 = ( Perl5Pattern ) RegexpFactory . create ( "4 = @K ? Hur / L : _A9$ | " , character0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test5 ( ) throws Throwable { Perl5Pattern perl5Pattern0 = ( Perl5Pattern ) RegexpFactory . create ( "U ! %y < - lA^' ) B ] " , ( Character ) '2' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test6 ( ) throws Throwable { Perl5Pattern perl5Pattern0 = ( Perl5Pattern ) RegexpFactory . create ( " + " , ( Character ) ' . ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test7 ( ) throws Throwable { Perl5Pattern perl5Pattern0 = ( Perl5Pattern ) RegexpFactory . create ( "9sR8kIMYx_fZO { Z'AE\"" , ( Character ) 'x' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test8 ( ) throws Throwable { Perl5Pattern perl5Pattern0 = ( Perl5Pattern ) RegexpFactory . create ( "' ? jWGn > %v } u" , ( Character ) ' > ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test0 ( ) throws Throwable { Type type0 = Type . STRING ; String string0 = type0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test0 ( ) throws Throwable { Multiply multiply0 = new Multiply ( ( Expression ) null , ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Multiply ( Expression lhs , Expression rhs ) { super ( " * " , lhs , rhs ) ; }
void test0 ( ) throws Throwable { Or or0 = new Or ( ( Expression ) null , ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Or ( Expression lhs , Expression rhs ) { super ( "or" , lhs , rhs ) ; }
void test0 ( ) throws Throwable { Greater greater0 = new Greater ( ( Expression ) null , ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Greater ( Expression lhs , Expression rhs ) { super ( " > " , lhs , rhs ) ; }
void test0 ( ) throws Throwable { Add add0 = new Add ( ( Expression ) null , ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Add ( Expression lhs , Expression rhs ) { super ( " + " , lhs , rhs ) ; }
void test0 ( ) throws Throwable { UnaryMinus unaryMinus0 = new UnaryMinus ( ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UnaryMinus ( Expression operand ) { super ( " - " , operand ) ; }
void test0 ( ) throws Throwable { Not not0 = new Not ( ( Expression ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Not ( Expression operand ) { super ( "not" , operand ) ; }
void test0 ( ) throws Throwable { SelectorAST selectorAST0 = new SelectorAST ( ) ; Type type0 = selectorAST0 . getReturnType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test1 ( ) throws Throwable { SelectorAST selectorAST0 = new SelectorAST ( ) ; Type type0 = Type . STRING ; selectorAST0 . setReturnType ( type0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test1 ( ) throws Throwable { ParserSharedInputState parserSharedInputState0 = new ParserSharedInputState ( ) ; SelectorParser selectorParser0 = new SelectorParser ( parserSharedInputState0 ) ; selectorParser0 . initialise ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void initialise ( ) { setColumn ( 1 ) ; / / CharScanner sets the column to 0 - bug ? TODO }
void test0 ( ) throws Throwable { SelectorAST selectorAST0 = new SelectorAST ( ) ; Type type0 = Type . NUMERIC ; TypeChecker . check ( "a ? j8@E ( gBJCCn ] " , selectorAST0 , selectorAST0 , type0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void check ( SelectorAST node , Type expected ) throws TypeMismatchException { Type type = node . getReturnType ( ) ; if ( type ! = expected & & type ! = Type . UNDEFINED ) { String msg = "expecting a " + expected + " expression , found a " + type ; throw new TypeMismatchException ( node . getContext ( ) , msg ) ; } }
void test1 ( ) throws Throwable { Type type0 = Type . STRING ; SelectorAST selectorAST0 = new SelectorAST ( ) ; selectorAST0 . setReturnType ( type0 ) ; TypeChecker . check ( selectorAST0 , type0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( Attribute attribute ) throws PersistenceException { Type result = null ; Type type = Type . getType ( attribute . getType ( ) ) ; Type map = _mapper . getType ( type . getType ( ) , type . getPrecision ( ) ) ; if ( map = = null ) { throw new PersistenceException ( "Database does not support type = " + attribute . getType ( ) ) ; } if ( type . getType ( ) ! = map . getType ( ) ) { result = map ; } else { boolean parameters = type . getParameters ( ) ; long precision = type . getPrecision ( ) ; if ( precision < = map . getPrecision ( ) ) { if ( precision = = - 1 ) { precision = map . getPrecision ( ) ; parameters = map . getParameters ( ) ; } result = new Type ( map . getType ( ) , map . getName ( ) , precision , parameters ) ; } else { throw new PersistenceException ( attribute . getName ( ) + type + " exceeds precision for " + map + " precision = " + map . getPrecision ( ) ) ; } } return result ; }
void test2 ( ) throws Throwable { SelectorAST selectorAST0 = new SelectorAST ( ) ; TypeChecker . check ( selectorAST0 , ( Type ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void check ( SelectorAST node , Type expected ) throws TypeMismatchException { Type type = node . getReturnType ( ) ; if ( type ! = expected & & type ! = Type . UNDEFINED ) { String msg = "expecting a " + expected + " expression , found a " + type ; throw new TypeMismatchException ( node . getContext ( ) , msg ) ; } }
void test4 ( ) throws Throwable { SelectorAST selectorAST0 = new SelectorAST ( ) ; Type type0 = Type . NUMERIC ; selectorAST0 . setReturnType ( type0 ) ; TypeChecker . check ( "a ? j8@E ( gBJCCn ] " , selectorAST0 , selectorAST0 , type0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void check ( SelectorAST node , Type expected ) throws TypeMismatchException { Type type = node . getReturnType ( ) ; if ( type ! = expected & & type ! = Type . UNDEFINED ) { String msg = "expecting a " + expected + " expression , found a " + type ; throw new TypeMismatchException ( node . getContext ( ) , msg ) ; } }
void test6 ( ) throws Throwable { SelectorAST selectorAST0 = new SelectorAST ( ) ; TypeChecker . checkComparison ( "a ? j8@E ( gBJCCn ] " , selectorAST0 , selectorAST0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void checkComparison ( String operator , SelectorAST left , SelectorAST right ) throws TypeMismatchException { Type lhs = left . getReturnType ( ) ; Type rhs = right . getReturnType ( ) ; if ( lhs = = Type . UNDEFINED | | rhs = = Type . UNDEFINED ) { / / can't evaluate this at parse time . } else if ( lhs = = Type . STRING & & rhs = = Type . STRING ) { checkStringComparison ( operator , left , right ) ; } else if ( ( lhs = = Type . STRING & & rhs ! = Type . STRING ) | | ( lhs = = Type . BOOLEAN & & rhs ! = Type . BOOLEAN ) | | ( lhs = = Type . NUMERIC & & rhs ! = Type . NUMERIC ) ) { String msg = "expecting a " + lhs + " expression for operator " + operator + " , found a " + rhs ; throw new TypeMismatchException ( right . getContext ( ) , msg ) ; } }
void test7 ( ) throws Throwable { SelectorAST selectorAST0 = new SelectorAST ( ) ; Type type0 = Type . NUMERIC ; selectorAST0 . setReturnType ( type0 ) ; TypeChecker . checkComparison ( "a ? j8@E ( gBJCCn ] " , selectorAST0 , selectorAST0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test8 ( ) throws Throwable { SelectorAST selectorAST0 = new SelectorAST ( ) ; SelectorAST selectorAST1 = new SelectorAST ( ) ; Type type0 = Type . NUMERIC ; selectorAST1 . setReturnType ( type0 ) ; TypeChecker . checkComparison ( "a ? j8@E ( gBJCCn ] " , selectorAST1 , selectorAST0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void checkComparison ( String operator , SelectorAST left , SelectorAST right ) throws TypeMismatchException { Type lhs = left . getReturnType ( ) ; Type rhs = right . getReturnType ( ) ; if ( lhs = = Type . UNDEFINED | | rhs = = Type . UNDEFINED ) { / / can't evaluate this at parse time . } else if ( lhs = = Type . STRING & & rhs = = Type . STRING ) { checkStringComparison ( operator , left , right ) ; } else if ( ( lhs = = Type . STRING & & rhs ! = Type . STRING ) | | ( lhs = = Type . BOOLEAN & & rhs ! = Type . BOOLEAN ) | | ( lhs = = Type . NUMERIC & & rhs ! = Type . NUMERIC ) ) { String msg = "expecting a " + lhs + " expression for operator " + operator + " , found a " + rhs ; throw new TypeMismatchException ( right . getContext ( ) , msg ) ; } }
void test9 ( ) throws Throwable { SelectorAST selectorAST0 = new SelectorAST ( ) ; Type type0 = Type . STRING ; selectorAST0 . setReturnType ( type0 ) ; TypeChecker . checkComparison ( " ; ; " , selectorAST0 , selectorAST0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test10 ( ) throws Throwable { SelectorAST selectorAST0 = new SelectorAST ( ) ; Type type0 = Type . BOOLEAN ; selectorAST0 . setReturnType ( type0 ) ; TypeChecker . checkComparison ( "'k , v = Qa . 6^wHM ? sh" , selectorAST0 , selectorAST0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void checkComparison ( String operator , SelectorAST left , SelectorAST right ) throws TypeMismatchException { Type lhs = left . getReturnType ( ) ; Type rhs = right . getReturnType ( ) ; if ( lhs = = Type . UNDEFINED | | rhs = = Type . UNDEFINED ) { / / can't evaluate this at parse time . } else if ( lhs = = Type . STRING & & rhs = = Type . STRING ) { checkStringComparison ( operator , left , right ) ; } else if ( ( lhs = = Type . STRING & & rhs ! = Type . STRING ) | | ( lhs = = Type . BOOLEAN & & rhs ! = Type . BOOLEAN ) | | ( lhs = = Type . NUMERIC & & rhs ! = Type . NUMERIC ) ) { String msg = "expecting a " + lhs + " expression for operator " + operator + " , found a " + rhs ; throw new TypeMismatchException ( right . getContext ( ) , msg ) ; } }
void test11 ( ) throws Throwable { SelectorAST selectorAST0 = new SelectorAST ( ) ; selectorAST0 . setType ( 20 ) ; TypeChecker . checkStringComparison ( "'" , selectorAST0 , selectorAST0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void checkStringComparison ( String operator , SelectorAST left , SelectorAST right ) throws TypeMismatchException { if ( left . getType ( ) = = SelectorTokenTypes . IDENT & & right . getType ( ) = = SelectorTokenTypes . STRING_LITERAL ) { checkIdentifierComparison ( left , right ) ; } else if ( left . getType ( ) = = SelectorTokenTypes . STRING_LITERAL & & right . getType ( ) = = SelectorTokenTypes . IDENT ) { checkIdentifierComparison ( right , left ) ; } }
void test12 ( ) throws Throwable { SelectorAST selectorAST0 = new SelectorAST ( ) ; selectorAST0 . setType ( 26 ) ; TypeChecker . checkStringComparison ( "h6I8f * ? `p#" , selectorAST0 , selectorAST0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( Attribute attribute ) throws PersistenceException { Type result = null ; Type type = Type . getType ( attribute . getType ( ) ) ; Type map = _mapper . getType ( type . getType ( ) , type . getPrecision ( ) ) ; if ( map = = null ) { throw new PersistenceException ( "Database does not support type = " + attribute . getType ( ) ) ; } if ( type . getType ( ) ! = map . getType ( ) ) { result = map ; } else { boolean parameters = type . getParameters ( ) ; long precision = type . getPrecision ( ) ; if ( precision < = map . getPrecision ( ) ) { if ( precision = = - 1 ) { precision = map . getPrecision ( ) ; parameters = map . getParameters ( ) ; } result = new Type ( map . getType ( ) , map . getName ( ) , precision , parameters ) ; } else { throw new PersistenceException ( attribute . getName ( ) + type + " exceeds precision for " + map + " precision = " + map . getPrecision ( ) ) ; } } return result ; }
void test13 ( ) throws Throwable { SelectorAST selectorAST0 = new SelectorAST ( ) ; ASTNULLType aSTNULLType0 = new ASTNULLType ( ) ; selectorAST0 . initialize ( ( AST ) aSTNULLType0 ) ; TypeChecker . checkIdentifierComparison ( selectorAST0 , selectorAST0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void checkIdentifierComparison ( SelectorAST identifier , SelectorAST literal ) throws TypeMismatchException { if ( identifier . getText ( ) . equals ( Identifiers . JMS_DELIVERY_MODE ) ) { String value = literal . getText ( ) ; if ( ! value . equals ( Identifiers . PERSISTENT ) & & ! value . equals ( Identifiers . NON_PERSISTENT ) ) { String msg = "Cannot compare JMSDeliveryMode with '" + value + "'" ; throw new TypeMismatchException ( identifier . getContext ( ) , msg ) ; } } }
void test0 ( ) throws Throwable { SelectorAST selectorAST0 = new SelectorAST ( ) ; PatternValidator . validate ( selectorAST0 , ( SelectorAST ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validate ( ) throws org . exolab . castor . xml . ValidationException { org . exolab . castor . xml . Validator validator = new org . exolab . castor . xml . Validator ( ) ; validator . validate ( this ) ; }
void test0 ( ) throws Throwable { DataTransactionLogEntry dataTransactionLogEntry0 = new DataTransactionLogEntry ( ) ; dataTransactionLogEntry0 . getExternalXid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getExpiryTime ( ) { return _expiryTime ; }
void test1 ( ) throws Throwable { ExternalXid externalXid0 = new ExternalXid ( ) ; StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry ( externalXid0 , "" , 2L ) ; long long0 = stateTransactionLogEntry0 . getExpiryTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCreated ( ) { return _created ; }
void test2 ( ) throws Throwable { StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry ( ) ; long long0 = stateTransactionLogEntry0 . getCreated ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getExpiryTime ( ) { return _expiryTime ; }
void test3 ( ) throws Throwable { ExternalXid externalXid0 = new ExternalXid ( ) ; StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry ( externalXid0 , "N support for StateTransactionLogEnr with versio " ) ; stateTransactionLogEntry0 . setCreated ( ( - 1L ) ) ; boolean boolean0 = stateTransactionLogEntry0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCreated ( ) { return _created ; }
void test4 ( ) throws Throwable { ExternalXid externalXid0 = new ExternalXid ( ) ; StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry ( externalXid0 , "" , 2L ) ; String string0 = stateTransactionLogEntry0 . getResourceId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getExpiryTime ( ) { return _expiryTime ; }
void test5 ( ) throws Throwable { DataTransactionLogEntry dataTransactionLogEntry0 = new DataTransactionLogEntry ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean transactionExpired ( ) { return System . currentTimeMillis ( ) > _expiryTime ; }
void test6 ( ) throws Throwable { DataTransactionLogEntry dataTransactionLogEntry0 = new DataTransactionLogEntry ( ) ; dataTransactionLogEntry0 . setExpiryTime ( 10L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCreated ( ) { return _created ; }
void test7 ( ) throws Throwable { StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry ( ) ; stateTransactionLogEntry0 . setResourceId ( "n~7 zO & 6" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getExpiryTime ( ) { return _expiryTime ; }
void test8 ( ) throws Throwable { DataTransactionLogEntry dataTransactionLogEntry0 = new DataTransactionLogEntry ( ) ; boolean boolean0 = dataTransactionLogEntry0 . transactionExpired ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCreated ( ) { return _created ; }
void test9 ( ) throws Throwable { ExternalXid externalXid0 = new ExternalXid ( ) ; StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry ( externalXid0 , "" , 2L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean transactionExpired ( ) { return System . currentTimeMillis ( ) > _expiryTime ; }
void test11 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 22 ] ; ExternalXid externalXid0 = new ExternalXid ( 1203 , byteArray0 , byteArray0 ) ; StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry ( externalXid0 , "" ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ( int ) ( byte ) 0 ) ; ObjectOutputStream objectOutputStream0 = new ObjectOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; stateTransactionLogEntry0 . writeExternal ( ( ObjectOutput ) objectOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; ExternalXid externalXid0 = new ExternalXid ( 477 , byteArray0 , ( byte [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeExternal ( ObjectOutput stream ) throws IOException { if ( isValid ( ) ) { stream . writeLong ( serialVersionUID ) ; stream . writeObject ( _externalXid ) ; stream . writeUTF ( _resourceId ) ; stream . writeLong ( _created ) ; } else { throw new IOException ( "writeExternal : entry has invalid state" ) ; } }
void test1 ( ) throws Throwable { ExternalXid externalXid0 = new ExternalXid ( ) ; externalXid0 . hashCode ( ) ; int int0 = externalXid0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return toString ( ) . hashCode ( ) ; }
void test2 ( ) throws Throwable { ExternalXid externalXid0 = new ExternalXid ( ) ; ExternalXid externalXid1 = new ExternalXid ( ( Xid ) externalXid0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test3 ( ) throws Throwable { ExternalXid externalXid0 = new ExternalXid ( ) ; ExternalXid externalXid1 = new ExternalXid ( ( Xid ) externalXid0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; ExternalXid externalXid0 = new ExternalXid ( 492 , byteArray0 , ( byte [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return toString ( ) . hashCode ( ) ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; ExternalXid externalXid0 = new ExternalXid ( 59 , byteArray0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test6 ( ) throws Throwable { ExternalXid externalXid0 = new ExternalXid ( ) ; ExternalXid externalXid1 = new ExternalXid ( ( Xid ) externalXid0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; ExternalXid externalXid0 = new ExternalXid ( 59 , byteArray0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; ExternalXid externalXid0 = new ExternalXid ( 492 , byteArray0 , ( byte [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; ExternalXid externalXid0 = new ExternalXid ( 0 , byteArray0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFormatId ( ) { return _formatId ; }
void test10 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; ExternalXid externalXid0 = new ExternalXid ( 492 , byteArray0 , ( byte [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test11 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; ExternalXid externalXid0 = new ExternalXid ( 45 , byteArray0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test12 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; ExternalXid externalXid0 = new ExternalXid ( 59 , byteArray0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test2 ( ) throws Throwable { TransactionLog transactionLog0 = new TransactionLog ( " . " , false ) ; String string0 = transactionLog0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test3 ( ) throws Throwable { TransactionLog transactionLog0 = new TransactionLog ( " . " , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test10 ( ) throws Throwable { TransactionLog transactionLog0 = new TransactionLog ( " . " , false ) ; transactionLog0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test11 ( ) throws Throwable { TransactionLog transactionLog0 = new TransactionLog ( " . " , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test12 ( ) throws Throwable { TransactionLog transactionLog0 = new TransactionLog ( " . " , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test0 ( ) throws Throwable { TransactionState transactionState0 = new TransactionState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpened ( ) { return _ord = = OPENED . getOrd ( ) ; }
void test2 ( ) throws Throwable { TransactionState transactionState0 = TransactionState . PREPARED ; String string0 = transactionState0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test3 ( ) throws Throwable { TransactionState transactionState0 = TransactionState . CLOSED ; boolean boolean0 = transactionState0 . isClosed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpened ( ) { return _ord = = OPENED . getOrd ( ) ; }
void test4 ( ) throws Throwable { TransactionState transactionState0 = TransactionState . PREPARED ; boolean boolean0 = transactionState0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test5 ( ) throws Throwable { TransactionState transactionState0 = TransactionState . CLOSED ; boolean boolean0 = transactionState0 . equals ( ( Object ) transactionState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOrd ( ) { return _ord ; }
void test6 ( ) throws Throwable { TransactionState transactionState0 = TransactionState . CLOSED ; TransactionState transactionState1 = TransactionState . OPENED ; boolean boolean0 = transactionState0 . equals ( ( Object ) transactionState1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpened ( ) { return _ord = = OPENED . getOrd ( ) ; }
void test7 ( ) throws Throwable { TransactionState transactionState0 = TransactionState . CLOSED ; boolean boolean0 = transactionState0 . isOpened ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return _ord = = CLOSED . getOrd ( ) ; }
void test8 ( ) throws Throwable { TransactionState transactionState0 = TransactionState . OPENED ; boolean boolean0 = transactionState0 . isOpened ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return _ord = = CLOSED . getOrd ( ) ; }
void test9 ( ) throws Throwable { TransactionState transactionState0 = TransactionState . CLOSED ; boolean boolean0 = transactionState0 . isPrepared ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOrd ( ) { return _ord ; }
void test10 ( ) throws Throwable { TransactionState transactionState0 = TransactionState . PREPARED ; boolean boolean0 = transactionState0 . isPrepared ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpened ( ) { return _ord = = OPENED . getOrd ( ) ; }
void test11 ( ) throws Throwable { TransactionState transactionState0 = TransactionState . OPENED ; boolean boolean0 = transactionState0 . isClosed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOrd ( ) { return _ord ; }
void test1 ( ) throws Throwable { DataTransactionLogEntry dataTransactionLogEntry0 = new DataTransactionLogEntry ( ) ; Object object0 = dataTransactionLogEntry0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getData ( ) { return _data ; }
void test3 ( ) throws Throwable { ExternalXid externalXid0 = new ExternalXid ( ) ; DataTransactionLogEntry dataTransactionLogEntry0 = new DataTransactionLogEntry ( externalXid0 , "" ) ; dataTransactionLogEntry0 . setData ( ( Object ) "\u4E2D\u6587" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getExpiryTime ( ) { return _expiryTime ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = SerializationHelper . serialize ( ( Object ) "xq & eh" ) ; String string0 = ( String ) SerializationHelper . deserialize ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object deserialize ( Blob blob ) throws ClassNotFoundException , IOException , SQLException { Object result = null ; if ( blob ! = null ) { ObjectInputStream istream = new ObjectInputStream ( blob . getBinaryStream ( ) ) ; result = istream . readObject ( ) ; istream . close ( ) ; } return result ; }
void test1 ( ) throws Throwable { SerializationHelper serializationHelper0 = new SerializationHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SerializationHelper ( ) { }
void test0 ( ) throws Throwable { StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry ( ) ; stateTransactionLogEntry0 . setState ( ( TransactionState ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getExpiryTime ( ) { return _expiryTime ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; ExternalXid externalXid0 = new ExternalXid ( 9 , byteArray0 , byteArray0 ) ; StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry ( externalXid0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean transactionExpired ( ) { return System . currentTimeMillis ( ) > _expiryTime ; }
void test3 ( ) throws Throwable { StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry ( ) ; TransactionState transactionState0 = stateTransactionLogEntry0 . getState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TransactionState getState ( ) { return _state ; }
void test1 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; byte [ ] byteArray0 = new byte [ 5 ] ; bytesMessageImpl0 . writeBytes ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test2 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; byte [ ] byteArray0 = new byte [ 4 ] ; bytesMessageImpl0 . writeBytes ( byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test3 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; Integer integer0 = new Integer ( 1728 ) ; bytesMessageImpl0 . writeObject ( ( Object ) integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test6 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; bytesMessageImpl0 . writeChar ( ' / ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test7 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; Byte byte0 = new Byte ( ( byte ) 95 ) ; bytesMessageImpl0 . writeObject ( ( Object ) byte0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test8 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; Float float0 = new Float ( 2000 . 782F ) ; bytesMessageImpl0 . writeObject ( ( Object ) float0 ) ; bytesMessageImpl0 . clearBody ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test12 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; bytesMessageImpl0 . writeObject ( ( Object ) "zho" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test13 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; bytesMessageImpl0 . writeDouble ( 775 . 0821940692426 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test17 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; Long long0 = new Long ( ( long ) ( byte ) 9 ) ; bytesMessageImpl0 . writeObject ( ( Object ) long0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test18 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; Boolean boolean0 = Boolean . valueOf ( ( String ) null ) ; bytesMessageImpl0 . writeObject ( ( Object ) boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test20 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; BytesMessageImpl bytesMessageImpl1 = ( BytesMessageImpl ) bytesMessageImpl0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeObject ( Object value ) throws JMSException { if ( value = = null ) { try { checkWrite ( ) ; getOutputStream ( ) ; _out . writeByte ( NULL ) ; } catch ( IOException exception ) { raise ( exception ) ; } } else if ( value instanceof Boolean ) { writeBoolean ( ( ( Boolean ) value ) . booleanValue ( ) ) ; } else if ( value instanceof Byte ) { writeByte ( ( ( Byte ) value ) . byteValue ( ) ) ; } else if ( value instanceof byte [ ] ) { writeBytes ( ( byte [ ] ) value ) ; } else if ( value instanceof Short ) { writeShort ( ( ( Short ) value ) . shortValue ( ) ) ; } else if ( value instanceof Character ) { writeChar ( ( ( Character ) value ) . charValue ( ) ) ; } else if ( value instanceof Integer ) { writeInt ( ( ( Integer ) value ) . intValue ( ) ) ; } else if ( value instanceof Long ) { writeLong ( ( ( Long ) value ) . longValue ( ) ) ; } else if ( value instanceof Float ) { writeFloat ( ( ( Float ) value ) . floatValue ( ) ) ; } else if ( value instanceof Double ) { writeDouble ( ( ( Double ) value ) . doubleValue ( ) ) ; } else if ( value instanceof String ) { writeString ( ( String ) value ) ; } else { throw new MessageFormatException ( "Objects of type " + value . getClass ( ) . getName ( ) + " are not supported by StreamMessage" ) ; } }
void test21 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; bytesMessageImpl0 . reset ( ) ; BytesMessageImpl bytesMessageImpl1 = ( BytesMessageImpl ) bytesMessageImpl0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test22 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; byte [ ] byteArray0 = new byte [ 4 ] ; bytesMessageImpl0 . reset ( ) ; int int0 = bytesMessageImpl0 . readBytes ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test23 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; bytesMessageImpl0 . writeFloat ( 0 . 0F ) ; BytesMessageImpl bytesMessageImpl1 = ( BytesMessageImpl ) bytesMessageImpl0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test24 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; bytesMessageImpl0 . reset ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 0 ) ; ObjectOutputStream objectOutputStream0 = new ObjectOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; bytesMessageImpl0 . writeExternal ( ( ObjectOutput ) objectOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test25 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 1354 ) ; ObjectOutputStream objectOutputStream0 = new ObjectOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; bytesMessageImpl0 . writeExternal ( ( ObjectOutput ) objectOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test26 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; bytesMessageImpl0 . writeBoolean ( true ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 1354 ) ; ObjectOutputStream objectOutputStream0 = new ObjectOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; bytesMessageImpl0 . writeExternal ( ( ObjectOutput ) objectOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test29 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; byte [ ] byteArray0 = new byte [ 3 ] ; bytesMessageImpl0 . writeFloat ( ( float ) ( byte ) ( - 69 ) ) ; bytesMessageImpl0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBodyLength ( ) throws JMSException { checkRead ( ) ; return _bytes . length ; }
void test32 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; bytesMessageImpl0 . reset ( ) ; bytesMessageImpl0 . setReadOnly ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getReadOnly ( ) { return _propertiesReadOnly & & _bodyReadOnly ; }
void test33 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; byte [ ] byteArray0 = new byte [ 4 ] ; bytesMessageImpl0 . reset ( ) ; int int0 = bytesMessageImpl0 . readBytes ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test34 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; bytesMessageImpl0 . clearBody ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test35 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; bytesMessageImpl0 . reset ( ) ; bytesMessageImpl0 . clearBody ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test37 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; bytesMessageImpl0 . setReadOnly ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getReadOnly ( ) { return _propertiesReadOnly & & _bodyReadOnly ; }
void test1 ( ) throws Throwable { Priority priority0 = new Priority ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) { return priority_ ; }
void test4 ( ) throws Throwable { Priority priority0 = new Priority ( ) ; boolean boolean0 = priority0 . isExpedited ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) { return priority_ ; }
void test5 ( ) throws Throwable { Priority priority0 = new Priority ( 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) { return priority_ ; }
void test6 ( ) throws Throwable { Priority priority0 = new Priority ( ) ; boolean boolean0 = priority0 . isGreater ( priority0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) { return priority_ ; }
void test7 ( ) throws Throwable { Priority priority0 = new Priority ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) { return priority_ ; }
void test8 ( ) throws Throwable { Priority priority0 = new Priority ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) { return priority_ ; }
void test9 ( ) throws Throwable { Priority priority0 = new Priority ( ) ; boolean boolean0 = priority0 . isEqual ( priority0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) { return priority_ ; }
void test0 ( ) throws Throwable { MessageConverterFactory messageConverterFactory0 = new MessageConverterFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; MessageConverter messageConverter0 = MessageConverterFactory . create ( ( Message ) mapMessageImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test2 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; MessageConverter messageConverter0 = MessageConverterFactory . create ( ( Message ) bytesMessageImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test3 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; MessageConverter messageConverter0 = MessageConverterFactory . create ( ( Message ) textMessageImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test4 ( ) throws Throwable { ObjectMessageImpl objectMessageImpl0 = new ObjectMessageImpl ( ) ; MessageConverter messageConverter0 = MessageConverterFactory . create ( ( Message ) objectMessageImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test5 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; MessageConverter messageConverter0 = MessageConverterFactory . create ( ( Message ) streamMessageImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test6 ( ) throws Throwable { MessageConverter messageConverter0 = MessageConverterFactory . create ( ( Message ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test1 ( ) throws Throwable { DeliveryModeImpl deliveryModeImpl0 = new DeliveryModeImpl ( ) ; int int0 = deliveryModeImpl0 . getDeliveryMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDeliveryMode ( ) { return mode_ ; }
void test3 ( ) throws Throwable { DeliveryModeImpl deliveryModeImpl0 = new DeliveryModeImpl ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDeliveryMode ( ) { return mode_ ; }
void test5 ( ) throws Throwable { DeliveryModeImpl deliveryModeImpl0 = new DeliveryModeImpl ( ) ; boolean boolean0 = deliveryModeImpl0 . isPersistent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDeliveryMode ( ) { return mode_ ; }
void test0 ( ) throws Throwable { ObjectMessageConverter objectMessageConverter0 = new ObjectMessageConverter ( ) ; ObjectMessageImpl objectMessageImpl0 = ( ObjectMessageImpl ) objectMessageConverter0 . create ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSequenceNumber ( ) { return _sequenceNumber ; }
void test0 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test1 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; messageImpl0 . setJMSCorrelationID ( "#@M < PeT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test2 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; messageImpl0 . getConsumerId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test3 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test4 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFloatProperty ( String name ) throws JMSException { return FormatConverter . getFloat ( _properties . get ( name ) ) ; }
void test6 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test7 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setStringProperty ( String name , String value ) throws JMSException { setProperty ( name , value ) ; }
void test8 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; messageImpl0 . setJMSExpiration ( ( - 1158L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test9 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test11 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setLongProperty ( String name , long value ) throws JMSException { setProperty ( name , new Long ( value ) ) ; }
void test12 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getByteProperty ( String name ) throws JMSException { return FormatConverter . getByte ( _properties . get ( name ) ) ; }
void test13 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; messageImpl0 . setJMSPriority ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test14 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test15 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test16 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSTimestamp ( ) throws JMSException { return _messageHeader . getJMSTimestamp ( ) ; }
void test17 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSequenceNumber ( ) { return _sequenceNumber ; }
void test18 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getConsumerId ( ) { return _messageHeader . getConsumerId ( ) ; }
void test19 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test20 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; messageImpl0 . getJMSReplyTo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test21 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test22 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test23 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntProperty ( String name ) throws JMSException { return FormatConverter . getInt ( _properties . get ( name ) ) ; }
void test24 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test25 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; boolean boolean0 = messageImpl0 . getProcessed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test26 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test27 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test28 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLongProperty ( String name ) throws JMSException { return FormatConverter . getLong ( _properties . get ( name ) ) ; }
void test29 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test30 ( ) throws Throwable { ObjectMessageImpl objectMessageImpl0 = new ObjectMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDoubleProperty ( String name ) throws JMSException { return FormatConverter . getDouble ( _properties . get ( name ) ) ; }
void test31 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getShortProperty ( String name ) throws JMSException { return FormatConverter . getShort ( _properties . get ( name ) ) ; }
void test32 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test33 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; messageImpl0 . getWildcard ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test34 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test36 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test37 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getJMSDeliveryMode ( ) throws JMSException { return _messageHeader . getJMSDeliveryMode ( ) ; }
void test38 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; messageImpl0 . setJMSMessageID ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test39 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; messageImpl0 . setWildcard ( "ObjecHWLtMessage" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test40 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test41 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getId ( JmsDestination destination ) { Pair pair = ( Pair ) _destinations . get ( destination . getName ( ) ) ; return ( pair ! = null ) ? pair . destinationId : - 1 ; }
void test42 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test43 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getAcceptedTime ( ) { return _acceptedTime ; }
void test44 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setBooleanProperty ( String name , boolean value ) throws JMSException { setProperty ( name , new Boolean ( value ) ) ; }
void test45 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test46 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void acknowledge ( ) throws JMSException { if ( getAckMessageID ( ) = = null ) { throw new JMSException ( "Cannot acknowledge message : no identifier" ) ; } if ( _session = = null ) { throw new JMSException ( "Cannot acknowledge message : unknown session" ) ; } _session . acknowledgeMessage ( this ) ; }
void test47 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; messageImpl0 . getJMSRedelivered ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test48 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setJMSDeliveryMode ( int deliveryMode ) throws JMSException { _messageHeader . setJMSDeliveryMode ( deliveryMode ) ; }
void test49 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test50 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test51 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; MessageImpl messageImpl1 = ( MessageImpl ) messageImpl0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test52 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; messageImpl0 . clearBody ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test53 ( ) throws Throwable { ObjectMessageImpl objectMessageImpl0 = new ObjectMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test54 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test55 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; messageImpl0 . setConnectionId ( ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test56 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setByteProperty ( String name , byte value ) throws JMSException { setProperty ( name , new Byte ( value ) ) ; }
void test57 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test58 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; messageImpl0 . setReadOnly ( true ) ; messageImpl0 . checkRead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test59 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; messageImpl0 . getJMSDestination ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test60 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test61 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; ObjectOutputStream objectOutputStream0 = new ObjectOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; messageImpl0 . writeExternal ( ( ObjectOutput ) objectOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test62 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test63 ( ) throws Throwable { ObjectMessageImpl objectMessageImpl0 = new ObjectMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDoubleProperty ( String name , double value ) throws JMSException { setProperty ( name , new Double ( value ) ) ; }
void test64 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test66 ( ) throws Throwable { BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void checkRead ( ) throws MessageNotReadableException { if ( _bodyReadOnly = = false ) { throw new MessageNotReadableException ( "Message in write - only mode" ) ; } }
void test67 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getProcessed ( ) { return _processed ; }
void test68 ( ) throws Throwable { MessageImpl messageImpl0 = new MessageImpl ( ) ; messageImpl0 . setReadOnly ( true ) ; boolean boolean0 = messageImpl0 . getReadOnly ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getReadOnly ( ) { return _propertiesReadOnly & & _bodyReadOnly ; }
void test3 ( ) throws Throwable { CorrelationId correlationId0 = new CorrelationId ( "ID : 0" ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 0 ) ; ObjectOutputStream objectOutputStream0 = new ObjectOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; correlationId0 . writeExternal ( ( ObjectOutput ) objectOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getString ( _map . get ( name ) ) ; }
void test4 ( ) throws Throwable { CorrelationId correlationId0 = new CorrelationId ( "f - ~ ! U3Q , qL" ) ; PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) pipedOutputStream0 ) ; ObjectOutputStream objectOutputStream0 = new ObjectOutputStream ( ( OutputStream ) printStream0 ) ; correlationId0 . writeExternal ( ( ObjectOutput ) objectOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getString ( _map . get ( name ) ) ; }
void test5 ( ) throws Throwable { CorrelationId correlationId0 = new CorrelationId ( "ID : 0" ) ; String string0 = correlationId0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getString ( _map . get ( name ) ) ; }
void test6 ( ) throws Throwable { CorrelationId correlationId0 = new CorrelationId ( "f - ~ ! U3Q , qL" ) ; String string0 = correlationId0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getString ( _map . get ( name ) ) ; }
void test7 ( ) throws Throwable { MessageProperties messageProperties0 = new MessageProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test12 ( ) throws Throwable { MessageProperties messageProperties0 = new MessageProperties ( ) ; Enumeration < Object > enumeration0 = messageProperties0 . getPropertyNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test15 ( ) throws Throwable { MessageProperties messageProperties0 = new MessageProperties ( ) ; Object object0 = messageProperties0 . getObjectProperty ( "JMSXGroupSeq" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObjectProperty ( String name ) throws JMSException { return _properties . get ( name ) ; }
void test18 ( ) throws Throwable { MessageProperties messageProperties0 = new MessageProperties ( ) ; boolean boolean0 = messageProperties0 . propertyExists ( "q`8kV ] X" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean propertyExists ( String name ) { return _properties . containsKey ( name ) ; }
void test20 ( ) throws Throwable { MessageProperties messageProperties0 = new MessageProperties ( ) ; boolean boolean0 = messageProperties0 . getBooleanProperty ( "oVY9bCrp" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBooleanProperty ( String name ) throws JMSException { return FormatConverter . getBoolean ( _properties . get ( name ) ) ; }
void test21 ( ) throws Throwable { MessageProperties messageProperties0 = new MessageProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object clone ( ) throws CloneNotSupportedException { ObjectMessageImpl result = ( ObjectMessageImpl ) super . clone ( ) ; if ( _bytes ! = null ) { result . _bytes = new byte [ _bytes . length ] ; System . arraycopy ( _bytes , 0 , result . _bytes , 0 , _bytes . length ) ; } return result ; }
void test22 ( ) throws Throwable { MessageProperties messageProperties0 = new MessageProperties ( ) ; String string0 = messageProperties0 . getStringProperty ( "JMSXGroupSeq" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStringProperty ( String name ) throws JMSException { return FormatConverter . getString ( _properties . get ( name ) ) ; }
void test27 ( ) throws Throwable { MessageProperties messageProperties0 = new MessageProperties ( ) ; Double double0 = new Double ( 589 . 7485852972208 ) ; messageProperties0 . setObjectProperty ( "vvFzy" , ( Object ) double0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setObjectProperty ( String name , Object value ) throws JMSException { if ( value instanceof Boolean | | value instanceof Byte | | value instanceof Short | | value instanceof Integer | | value instanceof Long | | value instanceof Float | | value instanceof Double | | value instanceof String | | ( value = = null ) ) { setProperty ( name , value ) ; } else { throw new MessageFormatException ( "Message . setObjectProperty ( ) does not support objects of " + "type = " + value . getClass ( ) . getName ( ) ) ; } }
void test0 ( ) throws Throwable { Timestamp timestamp0 = new Timestamp ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; ObjectOutputStream objectOutputStream0 = new ObjectOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; timestamp0 . writeExternal ( ( ObjectOutput ) objectOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long toLong ( ) { return getTime ( ) ; }
void test1 ( ) throws Throwable { Timestamp timestamp0 = new Timestamp ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Timestamp ( ) { super ( ) ; }
void test2 ( ) throws Throwable { Timestamp timestamp0 = new Timestamp ( ) ; long long0 = timestamp0 . toLong ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long toLong ( ) { return getTime ( ) ; }
void test3 ( ) throws Throwable { Timestamp timestamp0 = new Timestamp ( ) ; timestamp0 . setNow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setNow ( ) { setTime ( System . currentTimeMillis ( ) ) ; }
void test0 ( ) throws Throwable { BytesMessageConverter bytesMessageConverter0 = new BytesMessageConverter ( ) ; BytesMessageImpl bytesMessageImpl0 = ( BytesMessageImpl ) bytesMessageConverter0 . create ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getJMSRedelivered ( ) throws JMSException { return _messageHeader . getJMSRedelivered ( ) ; }
void test0 ( ) throws Throwable { ObjectMessageImpl objectMessageImpl0 = new ObjectMessageImpl ( ) ; objectMessageImpl0 . clearBody ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test1 ( ) throws Throwable { ObjectMessageImpl objectMessageImpl0 = new ObjectMessageImpl ( ) ; objectMessageImpl0 . setObject ( ( Serializable ) true ) ; ObjectMessageImpl objectMessageImpl1 = ( ObjectMessageImpl ) objectMessageImpl0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test2 ( ) throws Throwable { ObjectMessageImpl objectMessageImpl0 = new ObjectMessageImpl ( ) ; objectMessageImpl0 . setObject ( ( Serializable ) ( - 118L ) ) ; objectMessageImpl0 . getObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test3 ( ) throws Throwable { ObjectMessageImpl objectMessageImpl0 = new ObjectMessageImpl ( ) ; ObjectMessageImpl objectMessageImpl1 = ( ObjectMessageImpl ) objectMessageImpl0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test6 ( ) throws Throwable { ObjectMessageImpl objectMessageImpl0 = new ObjectMessageImpl ( ) ; objectMessageImpl0 . getObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test1 ( ) throws Throwable { FormatConverter formatConverter0 = new FormatConverter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { Boolean boolean0 = Boolean . valueOf ( false ) ; boolean boolean1 = FormatConverter . getBoolean ( ( Object ) boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBoolean ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getBoolean ( _map . get ( name ) ) ; }
void test4 ( ) throws Throwable { boolean boolean0 = FormatConverter . getBoolean ( ( Object ) "48 . 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBoolean ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getBoolean ( _map . get ( name ) ) ; }
void test5 ( ) throws Throwable { boolean boolean0 = FormatConverter . getBoolean ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBoolean ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getBoolean ( _map . get ( name ) ) ; }
void test7 ( ) throws Throwable { Byte byte0 = new Byte ( ( byte ) ( - 24 ) ) ; byte byte1 = FormatConverter . getByte ( ( Object ) byte0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getByte ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getByte ( _map . get ( name ) ) ; }
void test11 ( ) throws Throwable { short short0 = FormatConverter . getShort ( ( Object ) ( short ) 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getShort ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getShort ( _map . get ( name ) ) ; }
void test12 ( ) throws Throwable { short short0 = FormatConverter . getShort ( ( Object ) ( byte ) 114 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getShort ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getShort ( _map . get ( name ) ) ; }
void test13 ( ) throws Throwable { short short0 = FormatConverter . getShort ( ( Object ) "640" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getShort ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getShort ( _map . get ( name ) ) ; }
void test16 ( ) throws Throwable { Character character0 = Character . valueOf ( '\u008A' ) ; char char0 = FormatConverter . getChar ( ( Object ) character0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getChar ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getChar ( _map . get ( name ) ) ; }
void test18 ( ) throws Throwable { Byte byte0 = new Byte ( ( byte ) 89 ) ; int int0 = FormatConverter . getInt ( ( Object ) byte0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInt ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getInt ( _map . get ( name ) ) ; }
void test19 ( ) throws Throwable { Integer integer0 = new Integer ( 32 ) ; int int0 = FormatConverter . getInt ( ( Object ) integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInt ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getInt ( _map . get ( name ) ) ; }
void test20 ( ) throws Throwable { Short short0 = new Short ( ( short ) ( byte ) ( - 1 ) ) ; int int0 = FormatConverter . getInt ( ( Object ) short0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInt ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getInt ( _map . get ( name ) ) ; }
void test22 ( ) throws Throwable { int int0 = FormatConverter . getInt ( ( Object ) " - 1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInt ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getInt ( _map . get ( name ) ) ; }
void test24 ( ) throws Throwable { Long long0 = new Long ( 0L ) ; long long1 = FormatConverter . getLong ( ( Object ) long0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test25 ( ) throws Throwable { Integer integer0 = Integer . getInteger ( ( String ) null , ( - 1 ) ) ; long long0 = FormatConverter . getLong ( ( Object ) integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLong ( ) ; / * * * Returns the value of this as a < code > double < / code > * * @return the value of this as a < code > double < / code > * / double getDouble ( ) ; / * * * Returns the type of this * * @return { @link Type#NUMERIC }
void test26 ( ) throws Throwable { Short short0 = new Short ( ( short ) 15 ) ; long long0 = FormatConverter . getLong ( ( Object ) short0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLong ( ) ; / * * * Returns the value of this as a < code > double < / code > * * @return the value of this as a < code > double < / code > * / double getDouble ( ) ; / * * * Returns the type of this * * @return { @link Type#NUMERIC }
void test27 ( ) throws Throwable { Byte byte0 = new Byte ( ( byte ) 0 ) ; long long0 = FormatConverter . getLong ( ( Object ) byte0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLong ( ) ; / * * * Returns the value of this as a < code > double < / code > * * @return the value of this as a < code > double < / code > * / double getDouble ( ) ; / * * * Returns the type of this * * @return { @link Type#NUMERIC }
void test28 ( ) throws Throwable { long long0 = FormatConverter . getLong ( ( Object ) " - 1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLong ( ) ; / * * * Returns the value of this as a < code > double < / code > * * @return the value of this as a < code > double < / code > * / double getDouble ( ) ; / * * * Returns the type of this * * @return { @link Type#NUMERIC }
void test30 ( ) throws Throwable { float float0 = FormatConverter . getFloat ( ( Object ) "89" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFloat ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getFloat ( _map . get ( name ) ) ; }
void test31 ( ) throws Throwable { Float float0 = new Float ( 10 . 820125193164387 ) ; float float1 = FormatConverter . getFloat ( ( Object ) float0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFloat ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getFloat ( _map . get ( name ) ) ; }
void test34 ( ) throws Throwable { double double0 = FormatConverter . getDouble ( ( Object ) " - 19 . 696544795545098" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDouble ( ) ; / * * * Returns the type of this * * @return { @link Type#NUMERIC }
void test35 ( ) throws Throwable { Double double0 = new Double ( ( double ) ( short ) 1104 ) ; double double1 = FormatConverter . getDouble ( ( Object ) double0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDouble ( ) ; / * * * Returns the type of this * * @return { @link Type#NUMERIC }
void test36 ( ) throws Throwable { Float float0 = new Float ( ( double ) ( byte ) 114 ) ; double double0 = FormatConverter . getDouble ( ( Object ) float0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDouble ( ) ; / * * * Returns the type of this * * @return { @link Type#NUMERIC }
void test39 ( ) throws Throwable { String string0 = FormatConverter . getString ( ( Object ) "450" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getString ( _map . get ( name ) ) ; }
void test40 ( ) throws Throwable { String string0 = FormatConverter . getString ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getString ( _map . get ( name ) ) ; }
void test42 ( ) throws Throwable { byte [ ] byteArray0 = FormatConverter . getBytes ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getBytes ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getBytes ( _map . get ( name ) ) ; }
void test0 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test1 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getByte ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getByte ( _map . get ( name ) ) ; }
void test2 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFloat ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getFloat ( _map . get ( name ) ) ; }
void test3 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test4 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test5 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDouble ( ) ; / * * * Returns the type of this * * @return { @link Type#NUMERIC }
void test6 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test7 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test8 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test9 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test10 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test11 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test12 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInt ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getInt ( _map . get ( name ) ) ; }
void test13 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getShort ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getShort ( _map . get ( name ) ) ; }
void test14 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test15 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getChar ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getChar ( _map . get ( name ) ) ; }
void test16 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test17 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test18 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test19 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test20 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test21 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test22 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test23 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLong ( ) ; / * * * Returns the value of this as a < code > double < / code > * * @return the value of this as a < code > double < / code > * / double getDouble ( ) ; / * * * Returns the type of this * * @return { @link Type#NUMERIC }
void test24 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test25 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test26 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test27 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test28 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test29 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test30 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test31 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test32 ( ) throws Throwable { MapMessageImpl mapMessageImpl0 = new MapMessageImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setObject ( Serializable object ) throws MessageFormatException , MessageNotWriteableException { checkWrite ( ) ; try { ByteArrayOutputStream byteOut = new ByteArrayOutputStream ( ) ; ObjectOutputStream out = new ObjectOutputStream ( byteOut ) ; out . writeObject ( object ) ; out . flush ( ) ; _bytes = byteOut . toByteArray ( ) ; out . close ( ) ; } catch ( IOException exception ) { MessageFormatException error = new MessageFormatException ( exception . getMessage ( ) ) ; error . setLinkedException ( exception ) ; throw error ; } }
void test0 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; textMessageImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test1 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; textMessageImpl0 . clearBody ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test2 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; textMessageImpl0 . setText ( " . wSc / 5eR" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test3 ( ) throws Throwable { TextMessageImpl textMessageImpl0 = new TextMessageImpl ( ) ; TextMessageImpl textMessageImpl1 = ( TextMessageImpl ) textMessageImpl0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test0 ( ) throws Throwable { Type type0 = new Type ( "" ) ; boolean boolean0 = type0 . isEqual ( type0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEqual ( Type toCompare ) { return ( type_ . equals ( toCompare . type_ ) ) ; }
void test2 ( ) throws Throwable { Type type0 = new Type ( "" ) ; String string0 = type0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( Attribute attribute ) throws PersistenceException { Type result = null ; Type type = Type . getType ( attribute . getType ( ) ) ; Type map = _mapper . getType ( type . getType ( ) , type . getPrecision ( ) ) ; if ( map = = null ) { throw new PersistenceException ( "Database does not support type = " + attribute . getType ( ) ) ; } if ( type . getType ( ) ! = map . getType ( ) ) { result = map ; } else { boolean parameters = type . getParameters ( ) ; long precision = type . getPrecision ( ) ; if ( precision < = map . getPrecision ( ) ) { if ( precision = = - 1 ) { precision = map . getPrecision ( ) ; parameters = map . getParameters ( ) ; } result = new Type ( map . getType ( ) , map . getName ( ) , precision , parameters ) ; } else { throw new PersistenceException ( attribute . getName ( ) + type + " exceeds precision for " + map + " precision = " + map . getPrecision ( ) ) ; } } return result ; }
void test0 ( ) throws Throwable { MapMessageConverter mapMessageConverter0 = new MapMessageConverter ( ) ; MapMessageImpl mapMessageImpl0 = ( MapMessageImpl ) mapMessageConverter0 . create ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getConnectionId ( ) { return _connectionId ; }
void test0 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . setJMSRedelivered ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test1 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . setJMSExpiration ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getJMSRedelivered ( ) throws JMSException { return _messageHeader . getJMSRedelivered ( ) ; }
void test2 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; long long0 = messageHeader0 . getJMSExpiration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getJMSRedelivered ( ) throws JMSException { return _messageHeader . getJMSRedelivered ( ) ; }
void test4 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; long long0 = messageHeader0 . getConsumerId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test6 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . getAckMessageID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test7 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . setAckMessageID ( "ID : 1 ] / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getJMSRedelivered ( ) throws JMSException { return _messageHeader . getJMSRedelivered ( ) ; }
void test8 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . getWildcard ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test9 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . getJMSReplyTo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getJMSRedelivered ( ) throws JMSException { return _messageHeader . getJMSRedelivered ( ) ; }
void test10 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . setWildcard ( "a6$Ti~CrYgRM ? m" ) ; MessageHeader messageHeader1 = ( MessageHeader ) messageHeader0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getConsumerId ( ) { return _messageHeader . getConsumerId ( ) ; }
void test11 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . setJMSTimestamp ( 692L ) ; long long0 = messageHeader0 . getJMSTimestamp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test13 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . getJMSDestination ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test14 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; boolean boolean0 = messageHeader0 . getJMSRedelivered ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test15 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . setConsumerId ( ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getJMSRedelivered ( ) throws JMSException { return _messageHeader . getJMSRedelivered ( ) ; }
void test16 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . setJMSPriority ( 0 ) ; int int0 = messageHeader0 . getJMSPriority ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getJMSRedelivered ( ) throws JMSException { return _messageHeader . getJMSRedelivered ( ) ; }
void test17 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . getMessageId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test18 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; MessageHeader messageHeader1 = ( MessageHeader ) messageHeader0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getJMSRedelivered ( ) throws JMSException { return _messageHeader . getJMSRedelivered ( ) ; }
void test20 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue ( ) ; messageHeader0 . setJMSReplyTo ( ( Destination ) jmsTemporaryQueue0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test22 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; DestinationImpl destinationImpl0 = new DestinationImpl ( ) ; messageHeader0 . setJMSDestination ( ( Destination ) destinationImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test23 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . setJMSMessageID ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getJMSRedelivered ( ) throws JMSException { return _messageHeader . getJMSRedelivered ( ) ; }
void test25 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . setJMSMessageID ( "ID : 1 ] / " ) ; String string0 = messageHeader0 . getJMSMessageID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getJMSRedelivered ( ) throws JMSException { return _messageHeader . getJMSRedelivered ( ) ; }
void test26 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . getJMSMessageID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test28 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . getJMSCorrelationIDAsBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test30 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . setJMSCorrelationID ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test31 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . getJMSCorrelationID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test32 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . setJMSCorrelationID ( "a6$Ti~CrYgRM ? m" ) ; String string0 = messageHeader0 . getJMSCorrelationID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test34 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . setJMSType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getJMSRedelivered ( ) throws JMSException { return _messageHeader . getJMSRedelivered ( ) ; }
void test35 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . setJMSType ( "Connection closed" ) ; String string0 = messageHeader0 . getJMSType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getJMSRedelivered ( ) throws JMSException { return _messageHeader . getJMSRedelivered ( ) ; }
void test36 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; messageHeader0 . getJMSType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test37 ( ) throws Throwable { MessageHeader messageHeader0 = new MessageHeader ( ) ; int int0 = messageHeader0 . getJMSPriority ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getJMSExpiration ( ) throws JMSException { return _messageHeader . getJMSExpiration ( ) ; }
void test1 ( ) throws Throwable { DestinationImpl destinationImpl0 = new DestinationImpl ( "orsX~w#xc [ @W ? > " ) ; DestinationImpl destinationImpl1 = ( DestinationImpl ) destinationImpl0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object clone ( ) throws CloneNotSupportedException { ObjectMessageImpl result = ( ObjectMessageImpl ) super . clone ( ) ; if ( _bytes ! = null ) { result . _bytes = new byte [ _bytes . length ] ; System . arraycopy ( _bytes , 0 , result . _bytes , 0 , _bytes . length ) ; } return result ; }
void test2 ( ) throws Throwable { DestinationImpl destinationImpl0 = new DestinationImpl ( ) ; String string0 = destinationImpl0 . getDestination ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JmsDestination getDestination ( ) { return _destination ; }
void test4 ( ) throws Throwable { DestinationImpl destinationImpl0 = new DestinationImpl ( "orsX~w#xc [ @W ? > " ) ; String string0 = destinationImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test5 ( ) throws Throwable { DestinationImpl destinationImpl0 = new DestinationImpl ( ) ; String string0 = destinationImpl0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test5 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; streamMessageImpl0 . writeLong ( 0L ) ; streamMessageImpl0 . clearBody ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test7 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; streamMessageImpl0 . writeChar ( 'p' ) ; streamMessageImpl0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short readShort ( ) throws JMSException { short result = 0 ; prepare ( ) ; try { result = FormatConverter . getShort ( readNext ( ) ) ; } catch ( MessageFormatException exception ) { revert ( exception ) ; } catch ( NumberFormatException exception ) { revert ( exception ) ; } return result ; }
void test10 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; streamMessageImpl0 . writeByte ( ( byte ) 110 ) ; StreamMessageImpl streamMessageImpl1 = ( StreamMessageImpl ) streamMessageImpl0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test11 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; StreamMessageImpl streamMessageImpl1 = ( StreamMessageImpl ) streamMessageImpl0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeObject ( Object value ) throws JMSException { if ( value = = null ) { try { checkWrite ( ) ; getOutputStream ( ) ; _out . writeByte ( NULL ) ; } catch ( IOException exception ) { raise ( exception ) ; } } else if ( value instanceof Boolean ) { writeBoolean ( ( ( Boolean ) value ) . booleanValue ( ) ) ; } else if ( value instanceof Byte ) { writeByte ( ( ( Byte ) value ) . byteValue ( ) ) ; } else if ( value instanceof byte [ ] ) { writeBytes ( ( byte [ ] ) value ) ; } else if ( value instanceof Short ) { writeShort ( ( ( Short ) value ) . shortValue ( ) ) ; } else if ( value instanceof Character ) { writeChar ( ( ( Character ) value ) . charValue ( ) ) ; } else if ( value instanceof Integer ) { writeInt ( ( ( Integer ) value ) . intValue ( ) ) ; } else if ( value instanceof Long ) { writeLong ( ( ( Long ) value ) . longValue ( ) ) ; } else if ( value instanceof Float ) { writeFloat ( ( ( Float ) value ) . floatValue ( ) ) ; } else if ( value instanceof Double ) { writeDouble ( ( ( Double ) value ) . doubleValue ( ) ) ; } else if ( value instanceof String ) { writeString ( ( String ) value ) ; } else { throw new MessageFormatException ( "Objects of type " + value . getClass ( ) . getName ( ) + " are not supported by StreamMessage" ) ; } }
void test12 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; streamMessageImpl0 . setReadOnly ( true ) ; streamMessageImpl0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getReadOnly ( ) { return _propertiesReadOnly & & _bodyReadOnly ; }
void test15 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 0 ) ; ObjectOutputStream objectOutputStream0 = new ObjectOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; streamMessageImpl0 . writeExternal ( ( ObjectOutput ) objectOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test17 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; streamMessageImpl0 . writeShort ( ( short ) 2 ) ; streamMessageImpl0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int readBytes ( byte [ ] value ) throws JMSException { checkRead ( ) ; getInputStream ( ) ; int read = 0 ; / / the number of bytes read if ( _readBytes = = 0 ) { / / read the next byte array field try { _in . mark ( _bytes . length - _in . available ( ) ) ; byte type = ( byte ) ( _in . readByte ( ) & 0x0F ) ; if ( type = = NULL ) { return - 1 ; } else if ( type ! = BYTE_ARRAY ) { _in . reset ( ) ; if ( type < TYPE_NAMES . length ) { throw new MessageFormatException ( "Expected type = " + TYPE_NAMES [ BYTE_ARRAY ] + " , but got type = " + TYPE_NAMES [ type ] ) ; } else { throw new MessageFormatException ( "StreamMessage corrupted" ) ; } } } catch ( IOException exception ) { raise ( exception ) ; } try { _byteArrayLength = _in . readInt ( ) ; } catch ( IOException exception ) { raise ( exception ) ; } } if ( _byteArrayLength = = 0 ) { / / No bytes to read . Return - 1 if this is an incremental read / / or 0 if the byte array was empty if ( _readBytes ! = 0 ) { / / completing an incremental read read = - 1 ; } _readBytes = 0 ; / / indicates finished reading the byte array } else if ( value . length < = _byteArrayLength ) { / / bytes to read > = size of target read = value . length ; try { _in . readFully ( value ) ; } catch ( IOException exception ) { raise ( exception ) ; } _byteArrayLength - = value . length ; + + _readBytes ; } else { / / bytes to read < size of target read = _byteArrayLength ; try { _in . readFully ( value , 0 , _byteArrayLength ) ; } catch ( IOException exception ) { raise ( exception ) ; } _readBytes = 0 ; } return read ; }
void test19 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; Boolean boolean0 = new Boolean ( "oz : iM / ] h" ) ; streamMessageImpl0 . writeObject ( ( Object ) boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test20 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; streamMessageImpl0 . writeBoolean ( true ) ; streamMessageImpl0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float readFloat ( ) throws JMSException { float result = 0 ; prepare ( ) ; try { result = FormatConverter . getFloat ( readNext ( ) ) ; } catch ( MessageFormatException exception ) { revert ( exception ) ; } catch ( NullPointerException exception ) { revert ( exception ) ; } catch ( NumberFormatException exception ) { revert ( exception ) ; } return result ; }
void test22 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; byte [ ] byteArray0 = new byte [ 10 ] ; streamMessageImpl0 . writeBytes ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test23 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; byte [ ] byteArray0 = new byte [ 5 ] ; streamMessageImpl0 . writeBytes ( byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test24 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; streamMessageImpl0 . reset ( ) ; streamMessageImpl0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test25 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; streamMessageImpl0 . clearBody ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test26 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; streamMessageImpl0 . reset ( ) ; streamMessageImpl0 . clearBody ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test27 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; streamMessageImpl0 . setReadOnly ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getReadOnly ( ) { return _propertiesReadOnly & & _bodyReadOnly ; }
void test28 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; streamMessageImpl0 . writeByte ( ( byte ) 110 ) ; streamMessageImpl0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long readLong ( ) throws JMSException { long result = 0 ; prepare ( ) ; try { result = FormatConverter . getLong ( readNext ( ) ) ; } catch ( MessageFormatException exception ) { revert ( exception ) ; } catch ( NumberFormatException exception ) { revert ( exception ) ; } return result ; }
void test29 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; streamMessageImpl0 . writeShort ( ( short ) ( byte ) 110 ) ; streamMessageImpl0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long readLong ( ) throws JMSException { long result = 0 ; prepare ( ) ; try { result = FormatConverter . getLong ( readNext ( ) ) ; } catch ( MessageFormatException exception ) { revert ( exception ) ; } catch ( NumberFormatException exception ) { revert ( exception ) ; } return result ; }
void test30 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; streamMessageImpl0 . writeInt ( ( - 1205 ) ) ; streamMessageImpl0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long readLong ( ) throws JMSException { long result = 0 ; prepare ( ) ; try { result = FormatConverter . getLong ( readNext ( ) ) ; } catch ( MessageFormatException exception ) { revert ( exception ) ; } catch ( NumberFormatException exception ) { revert ( exception ) ; } return result ; }
void test32 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; streamMessageImpl0 . writeBoolean ( false ) ; streamMessageImpl0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double readDouble ( ) throws JMSException { double result = 0 ; prepare ( ) ; try { result = FormatConverter . getDouble ( readNext ( ) ) ; } catch ( MessageFormatException exception ) { revert ( exception ) ; } catch ( NullPointerException exception ) { revert ( exception ) ; } catch ( NumberFormatException exception ) { revert ( exception ) ; } return result ; }
void test34 ( ) throws Throwable { StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl ( ) ; streamMessageImpl0 . writeObject ( ( Object ) "null - false" ) ; streamMessageImpl0 . writeInt ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSType ( ) throws JMSException { return _messageHeader . getJMSType ( ) ; }
void test0 ( ) throws Throwable { LeaseComparator leaseComparator0 = new LeaseComparator ( ) ; boolean boolean0 = leaseComparator0 . equals ( ( Object ) " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test0 ( ) throws Throwable { LeaseManager leaseManager0 = new LeaseManager ( ) ; leaseManager0 . doStop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test1 ( ) throws Throwable { LeaseManager leaseManager0 = new LeaseManager ( ) ; leaseManager0 . removeAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStarted ( ) { return _started ; }
void test2 ( ) throws Throwable { LeaseManager leaseManager0 = new LeaseManager ( ) ; leaseManager0 . addLease ( ( BaseLease ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test3 ( ) throws Throwable { LeaseManager leaseManager0 = new LeaseManager ( ) ; BaseLease baseLease0 = leaseManager0 . renewLease ( ( BaseLease ) null , 1365L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BaseLease renewLease ( BaseLease lease , long duration ) { BaseLease newlease = null ; if ( ( lease ! = null ) & & ( duration > 0 ) ) { ( _queue ) { / / check that the lease hasn't expired yet . if ( _queue . remove ( lease ) ) { lease . setDuration ( duration ) ; _queue . add ( lease ) ; newlease = lease ; ( _waiter ) { _waiter . notify ( ) ; } } } } return newlease ; }
void test4 ( ) throws Throwable { LeaseManager leaseManager0 = new LeaseManager ( ) ; leaseManager0 . expire ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStarted ( ) { return _started ; }
void test2 ( ) throws Throwable { SentMessageCache sentMessageCache0 = new SentMessageCache ( 2 ) ; JmsTopic jmsTopic0 = new JmsTopic ( " * [ * ( > \"HuS~ ( " ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( " * [ * ( > \"HuS~ ( " , 2 , ( long ) 2 , ( long ) 3 , ( long ) 3 , ( JmsDestination ) jmsTopic0 ) ; sentMessageCache0 . postSend ( ( MessageHandle ) persistentMessageHandle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSequenceNumber ( ) { return _sequenceNumber ; }
void test2 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; MessageMgr messageMgr0 = new MessageMgr ( databaseService0 ) ; ServerSessionImpl serverSessionImpl0 = new ServerSessionImpl ( ( ServerConnectionImpl ) null , 151 , false , ( MessageManager ) messageMgr0 , ( ConsumerManager ) null , ( ResourceManager ) null , databaseService0 , ( Scheduler ) null ) ; MessageImpl messageImpl0 = serverSessionImpl0 . receiveNoWait ( ( long ) 151 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MessageImpl receiveNoWait ( long consumerId ) throws JMSException { MessageImpl result = null ; if ( ! _stop . get ( ) ) { result = doReceive ( consumerId , null ) ; } return result ; }
void test3 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; MessageMgr messageMgr0 = new MessageMgr ( databaseService0 ) ; ServerSessionImpl serverSessionImpl0 = new ServerSessionImpl ( ( ServerConnectionImpl ) null , 151 , false , ( MessageManager ) messageMgr0 , ( ConsumerManager ) null , ( ResourceManager ) null , databaseService0 , ( Scheduler ) null ) ; Xid xid0 = serverSessionImpl0 . getXid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Xid getXid ( ) { return _xid ; }
void test4 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; MessageMgr messageMgr0 = new MessageMgr ( databaseService0 ) ; ServerSessionImpl serverSessionImpl0 = new ServerSessionImpl ( ( ServerConnectionImpl ) null , 151 , true , ( MessageManager ) messageMgr0 , ( ConsumerManager ) null , ( ResourceManager ) null , databaseService0 , ( Scheduler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ServerSessionImpl ( ServerConnectionImpl connection , int ackMode , boolean transacted , MessageManager messageMgr , ConsumerManager consumerMgr , ResourceManager resourceMgr , DatabaseService database , Scheduler scheduler ) { _connection = connection ; if ( transacted ) { ackMode = Session . SESSION_TRANSACTED ; } _consumer = new SessionConsumer ( ackMode , database , scheduler ) ; _messages = messageMgr ; _consumerMgr = consumerMgr ; _resources = resourceMgr ; }
void test5 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; MessageMgr messageMgr0 = new MessageMgr ( databaseService0 ) ; ServerSessionImpl serverSessionImpl0 = new ServerSessionImpl ( ( ServerConnectionImpl ) null , 151 , false , ( MessageManager ) messageMgr0 , ( ConsumerManager ) null , ( ResourceManager ) null , databaseService0 , ( Scheduler ) null ) ; LinkedList < MessageImpl > linkedList0 = new LinkedList < MessageImpl > ( ) ; serverSessionImpl0 . send ( ( List ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test8 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; MessageMgr messageMgr0 = new MessageMgr ( databaseService0 ) ; ServerSessionImpl serverSessionImpl0 = new ServerSessionImpl ( ( ServerConnectionImpl ) null , 151 , false , ( MessageManager ) messageMgr0 , ( ConsumerManager ) null , ( ResourceManager ) null , databaseService0 , ( Scheduler ) null ) ; boolean boolean0 = serverSessionImpl0 . isSameRM ( ( XAResource ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSameRM ( XAResource xares ) throws XAException { boolean result = ( xares instanceof ServerSessionImpl ) ; if ( result ) { ServerSessionImpl other = ( ServerSessionImpl ) xares ; result = ( other . getResourceManagerId ( ) = = getResourceManagerId ( ) ) ; } return result ; }
void test0 ( ) throws Throwable { EmbeddedNameService embeddedNameService0 = new EmbeddedNameService ( ) ; RemoteContext remoteContext0 = ( RemoteContext ) embeddedNameService0 . getInitialContext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameInNamespace ( ) throws NamingException { return _context . getNameInNamespace ( ) ; }
void test1 ( ) throws Throwable { EmbeddedNameService embeddedNameService0 = new EmbeddedNameService ( ) ; RMINamingProviderImpl rMINamingProviderImpl0 = ( RMINamingProviderImpl ) embeddedNameService0 . getNamingProvider ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingProvider getNamingProvider ( ) { return _provider ; }
void test0 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; SessionConsumer sessionConsumer0 = new SessionConsumer ( ( - 171 ) , databaseService0 , ( Scheduler ) null ) ; MessageImpl messageImpl0 = sessionConsumer0 . receiveNoWait ( ( long ) ( - 171 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MessageImpl receiveNoWait ( long consumerId ) throws JMSException { MessageImpl result = null ; if ( ! _stop . get ( ) ) { result = doReceive ( consumerId , null ) ; } return result ; }
void test1 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; SessionConsumer sessionConsumer0 = new SessionConsumer ( 1415 , databaseService0 , ( Scheduler ) null ) ; ConsumerEndpoint [ ] consumerEndpointArray0 = sessionConsumer0 . getConsumers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection getConsumers ( ) throws PersistenceException { Enumeration destinations ; / / Need to jump through some hoops to get a list of all consumers Connection connection = _database . getConnection ( ) ; destinations = _database . getAdapter ( ) . getAllDestinations ( connection ) ; HashMap consumers = new HashMap ( ) ; while ( destinations . hasMoreElements ( ) ) { JmsDestination destination = ( JmsDestination ) destinations . nextElement ( ) ; if ( destination instanceof JmsTopic ) { Enumeration names = _database . getAdapter ( ) . getDurableConsumers ( connection , destination . getName ( ) ) ; while ( names . hasMoreElements ( ) ) { String name = ( String ) names . nextElement ( ) ; Consumer consumer = ( Consumer ) consumers . get ( name ) ; if ( consumer = = null ) { consumer = new Consumer ( name , null ) ; consumers . put ( name , consumer ) ; } Subscription subscription = getSubscription ( name , destination ) ; consumer . addSubscription ( subscription ) ; } } else { String name = destination . getName ( ) ; Consumer consumer = ( Consumer ) consumers . get ( name ) ; if ( consumer = = null ) { consumer = new Consumer ( ( JmsQueue ) destination ) ; consumers . put ( name , consumer ) ; } Subscription subscription = getSubscription ( name , destination ) ; consumer . addSubscription ( subscription ) ; } } _database . commit ( ) ; return consumers . values ( ) ; }
void test1 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; ServerConfiguration serverConfiguration0 = new ServerConfiguration ( ) ; configuration0 . setServerConfiguration ( serverConfiguration0 ) ; NameService nameService0 = new NameService ( configuration0 ) ; RemoteContext remoteContext0 = ( RemoteContext ) nameService0 . getInitialContext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameInNamespace ( ) throws NamingException { return _context . getNameInNamespace ( ) ; }
void test2 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; ServerConfiguration serverConfiguration0 = new ServerConfiguration ( ) ; configuration0 . setServerConfiguration ( serverConfiguration0 ) ; JndiConfiguration jndiConfiguration0 = new JndiConfiguration ( ) ; configuration0 . setJndiConfiguration ( jndiConfiguration0 ) ; serverConfiguration0 . setEmbeddedJNDI ( false ) ; NameService nameService0 = new NameService ( configuration0 ) ; InitialContext initialContext0 = ( InitialContext ) nameService0 . getInitialContext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Context getInitialContext ( ) throws NamingException { Hashtable environment = new Hashtable ( ) ; Namespace namespace ; try { namespace = createNamespace ( _provider . getNameParser ( ) ) ; } catch ( NamingException exception ) { throw exception ; } catch ( Exception exception ) { throw new CommunicationException ( exception . toString ( ) ) ; } environment . put ( RemoteContext . NAMING_PROVIDER , _provider ) ; environment . put ( RemoteContext . NAMESPACE , namespace ) ; Name baseName = namespace . getNameParser ( ) . parse ( "" ) ; return new RemoteContext ( environment , baseName ) ; }
void test4 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; ServerConfiguration serverConfiguration0 = new ServerConfiguration ( ) ; configuration0 . setServerConfiguration ( serverConfiguration0 ) ; JndiConfiguration jndiConfiguration0 = new JndiConfiguration ( ) ; configuration0 . setJndiConfiguration ( jndiConfiguration0 ) ; serverConfiguration0 . setEmbeddedJNDI ( false ) ; NameService nameService0 = new NameService ( configuration0 ) ; RMINamingProviderImpl rMINamingProviderImpl0 = ( RMINamingProviderImpl ) nameService0 . getNamingProvider ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingProvider getNamingProvider ( ) { return _provider ; }
void test5 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; ServerConfiguration serverConfiguration0 = new ServerConfiguration ( ) ; configuration0 . setServerConfiguration ( serverConfiguration0 ) ; NameService nameService0 = new NameService ( configuration0 ) ; RMINamingProviderImpl rMINamingProviderImpl0 = ( RMINamingProviderImpl ) nameService0 . getNamingProvider ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NamingProvider getNamingProvider ( ) { return _provider ; }
void test0 ( ) throws Throwable { ConnectorCfgFactory connectorCfgFactory0 = new ConnectorCfgFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { SchemeType schemeType0 = SchemeType . EMBEDDED ; Configuration configuration0 = new Configuration ( ) ; ConnectorCfg connectorCfg0 = ConnectorCfgFactory . create ( schemeType0 , configuration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAdminExportURI ( ) ; / * * * Returns properties to configure the ORB to enable it to establish * a connection to the remote ORB . * * @return a map of String properties * / Map getConnectProperties ( ) ; / * * * Returns properties to configure the ORB to enable it to accept * connections from remote ORBs . * * @return a map of String properties * / Map getAcceptProperties ( ) ; / * * * Returns connection factories associated with this configuration . * * @return associated connection factories . * / ConnectionFactories getConnectionFactories ( ) ; }
void test4 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; SchemeType schemeType0 = SchemeType . RMI ; ConnectorCfg connectorCfg0 = ConnectorCfgFactory . create ( schemeType0 , configuration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test0 ( ) throws Throwable { ConnectionFactoryHelper connectionFactoryHelper0 = new ConnectionFactoryHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { RemoteContext remoteContext0 = new RemoteContext ( ) ; ORBRemoteContext oRBRemoteContext0 = new ORBRemoteContext ( remoteContext0 ) ; CompositeName compositeName0 = new CompositeName ( ) ; ORBRemoteContext oRBRemoteContext1 = ( ORBRemoteContext ) oRBRemoteContext0 . lookupLink ( ( Name ) compositeName0 ) ; oRBRemoteContext0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test3 ( ) throws Throwable { RemoteContext remoteContext0 = new RemoteContext ( ) ; ORBRemoteContext oRBRemoteContext0 = new ORBRemoteContext ( remoteContext0 ) ; Object object0 = oRBRemoteContext0 . addToEnvironment ( "G$M_q / : maR ? LRagJ" , "java . naming . security . credentials" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object addToEnvironment ( String propName , Object propVal ) throws NamingException { return _context . addToEnvironment ( propName , propVal ) ; }
void test4 ( ) throws Throwable { RemoteContext remoteContext0 = new RemoteContext ( ) ; CompositeName compositeName0 = new CompositeName ( "" ) ; ORBRemoteContext oRBRemoteContext0 = new ORBRemoteContext ( remoteContext0 ) ; ORBRemoteContext oRBRemoteContext1 = ( ORBRemoteContext ) oRBRemoteContext0 . lookup ( ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test11 ( ) throws Throwable { RemoteContext remoteContext0 = new RemoteContext ( ) ; ORBRemoteContext oRBRemoteContext0 = new ORBRemoteContext ( remoteContext0 ) ; Object object0 = oRBRemoteContext0 . removeFromEnvironment ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object removeFromEnvironment ( String propName ) throws NamingException { return _context . removeFromEnvironment ( propName ) ; }
void test14 ( ) throws Throwable { RemoteContext remoteContext0 = new RemoteContext ( ) ; ORBRemoteContext oRBRemoteContext0 = new ORBRemoteContext ( remoteContext0 ) ; CompositeName compositeName0 = new CompositeName ( ) ; CompositeName compositeName1 = ( CompositeName ) oRBRemoteContext0 . composeName ( ( Name ) compositeName0 , ( Name ) compositeName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test2 ( ) throws Throwable { CallbackServiceImpl callbackServiceImpl0 = new CallbackServiceImpl ( ) ; List < Object > list0 = callbackServiceImpl0 . getCallbacks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test0 ( ) throws Throwable { EchoServiceImpl echoServiceImpl0 = new EchoServiceImpl ( ) ; short short0 = echoServiceImpl0 . echoShort ( ( short ) 423 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short echoShort ( short value ) { return value ; }
void test1 ( ) throws Throwable { EchoServiceImpl echoServiceImpl0 = new EchoServiceImpl ( ) ; int int0 = echoServiceImpl0 . echoInt ( 690 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int echoInt ( int value ) { return value ; }
void test2 ( ) throws Throwable { EchoServiceImpl echoServiceImpl0 = new EchoServiceImpl ( ) ; float float0 = echoServiceImpl0 . echoFloat ( ( float ) 690 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float echoFloat ( float value ) { return value ; }
void test3 ( ) throws Throwable { EchoServiceImpl echoServiceImpl0 = new EchoServiceImpl ( ) ; byte byte0 = echoServiceImpl0 . echoByte ( ( byte ) ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte echoByte ( byte value ) { return value ; }
void test4 ( ) throws Throwable { EchoServiceImpl echoServiceImpl0 = new EchoServiceImpl ( ) ; String string0 = ( String ) echoServiceImpl0 . echoObject ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object echoObject ( Object value ) { return value ; }
void test5 ( ) throws Throwable { EchoServiceImpl echoServiceImpl0 = new EchoServiceImpl ( ) ; double double0 = echoServiceImpl0 . echoDouble ( 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double echoDouble ( double value ) { return value ; }
void test6 ( ) throws Throwable { EchoServiceImpl echoServiceImpl0 = new EchoServiceImpl ( ) ; long long0 = echoServiceImpl0 . echoLong ( ( long ) '3' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long echoLong ( long value ) { return value ; }
void test7 ( ) throws Throwable { EchoServiceImpl echoServiceImpl0 = new EchoServiceImpl ( ) ; char char0 = echoServiceImpl0 . echoChar ( 'n' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char echoChar ( char value ) { return value ; }
void test8 ( ) throws Throwable { EchoServiceImpl echoServiceImpl0 = new EchoServiceImpl ( ) ; boolean boolean0 = echoServiceImpl0 . echoBoolean ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean echoBoolean ( boolean value ) { return value ; }
void test0 ( ) throws Throwable { ORB oRB0 = ORBFactory . createORB ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ORB createORB ( ) throws RemoteException { return new DefaultORB ( ) ; }
void test1 ( ) throws Throwable { ORB oRB0 = ORBFactory . createORB ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ORB createORB ( ) throws RemoteException { return new DefaultORB ( ) ; }
void test0 ( ) throws Throwable { ObjID objID0 = new ObjID ( 65535 ) ; Object object0 = new Object ( ) ; Class < ? > class0 = ObjectRef . class ; ObjectRef objectRef0 = new ObjectRef ( objID0 , object0 , ( Class ) class0 ) ; int int0 = objectRef0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return toString ( ) . hashCode ( ) ; }
void test1 ( ) throws Throwable { ObjID objID0 = new ObjID ( 1620 ) ; Class < ? > class0 = ObjectRef . class ; ObjectRef objectRef0 = new ObjectRef ( objID0 , ( Object ) "" , ( Class ) class0 ) ; ObjID objID1 = objectRef0 . getObjID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ObjID getObjID ( ) { return _objID ; }
void test2 ( ) throws Throwable { Class < ? > class0 = Class . class ; ObjectRef objectRef0 = new ObjectRef ( ( ObjID ) null , ( Object ) null , ( Class ) class0 ) ; Class < Object > class1 = objectRef0 . getProxyClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getProxyClass ( ) { return _proxyClass ; }
void test3 ( ) throws Throwable { ObjID objID0 = new ObjID ( 1620 ) ; Class < ? > class0 = ObjectRef . class ; ObjectRef objectRef0 = new ObjectRef ( objID0 , ( Object ) "" , ( Class ) class0 ) ; URI [ ] uRIArray0 = objectRef0 . getURIs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" URI [ ] getURIs ( ) { return ( URI [ ] ) _proxies . keySet ( ) . toArray ( new URI [ 0 ] ) ; }
void test4 ( ) throws Throwable { ObjID objID0 = new ObjID ( 65535 ) ; Object object0 = new Object ( ) ; Class < ? > class0 = ObjectRef . class ; ObjectRef objectRef0 = new ObjectRef ( objID0 , object0 , ( Class ) class0 ) ; Object object1 = objectRef0 . getObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObject ( ) ; / * * * Determines if this is equal to another object . * * @param obj the object to compare * @return < code > null < / code > if the comparison is undefined , * < code > SBool . TRUE < / code > if < code > this = obj < / code > , otherwise * < code > SBool . FALSE < / code > if < code > this & lt ; & gt ; obj < / code > * / SBool equal ( SObject obj ) { SBool result = SBool . FALSE ; if ( getObject ( ) . equals ( obj . getObject ( ) ) ) { result = SBool . TRUE ; } return result ; }
void test6 ( ) throws Throwable { ObjID objID0 = new ObjID ( 65535 ) ; Object object0 = new Object ( ) ; Class < ? > class0 = ObjectRef . class ; ObjectRef objectRef0 = new ObjectRef ( objID0 , object0 , ( Class ) class0 ) ; boolean boolean0 = objectRef0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test7 ( ) throws Throwable { ObjID objID0 = new ObjID ( 1620 ) ; Class < ? > class0 = ObjectRef . class ; ObjectRef objectRef0 = new ObjectRef ( objID0 , ( Object ) "" , ( Class ) class0 ) ; boolean boolean0 = objectRef0 . equals ( ( Object ) objectRef0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test8 ( ) throws Throwable { ObjID objID0 = new ObjID ( 1620 ) ; Class < ? > class0 = ObjectRef . class ; ObjectRef objectRef0 = new ObjectRef ( objID0 , ( Object ) "" , ( Class ) class0 ) ; ObjectRef objectRef1 = new ObjectRef ( objID0 , ( Object ) objectRef0 , ( Class ) class0 ) ; boolean boolean0 = objectRef0 . equals ( ( Object ) objectRef1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test1 ( ) throws Throwable { RegistryImpl registryImpl0 = new RegistryImpl ( ) ; boolean boolean0 = registryImpl0 . getReadOnly ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getReadOnly ( ) { return _propertiesReadOnly & & _bodyReadOnly ; }
void test2 ( ) throws Throwable { RegistryImpl registryImpl0 = new RegistryImpl ( ) ; ObjID objID0 = new ObjID ( 171 ) ; UnicastDelegate unicastDelegate0 = new UnicastDelegate ( objID0 , "" ) ; LoggingCallback__Proxy loggingCallback__Proxy0 = new LoggingCallback__Proxy ( ( Delegate ) unicastDelegate0 ) ; registryImpl0 . bind ( "" , ( Proxy ) loggingCallback__Proxy0 ) ; LoggingCallback__Proxy loggingCallback__Proxy1 = ( LoggingCallback__Proxy ) registryImpl0 . lookup ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . Object lookup ( javax . naming . Name arg0 ) throws javax . naming . NamingException , java . lang . Exception { Object [ ] args = new Object [ ] { arg0 } ; Object result ; try { result = invoke ( LOOKUP_c2133cf950670173 , args , 0xc2133cf950670173L ) ; } catch ( javax . naming . NamingException exception ) { throw exception ; } catch ( java . lang . Exception exception ) { throw exception ; } catch ( java . lang . Throwable exception ) { throw new org . exolab . jms . net . proxy . RemoteInvocationException ( exception ) ; } return ( java . lang . Object ) result ; }
void test3 ( ) throws Throwable { RegistryImpl registryImpl0 = new RegistryImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void unbind ( javax . naming . Name arg0 ) throws javax . naming . NamingException , java . lang . Exception { Object [ ] args = new Object [ ] { arg0 } ; try { invoke ( UNBIND_c2133cf91c41be58 , args , 0xc2133cf91c41be58L ) ; } catch ( javax . naming . NamingException exception ) { throw exception ; } catch ( java . lang . Exception exception ) { throw exception ; } catch ( java . lang . Throwable exception ) { throw new org . exolab . jms . net . proxy . RemoteInvocationException ( exception ) ; } }
void test1 ( ) throws Throwable { ObjID objID0 = new ObjID ( 1 ) ; UnicastDelegate unicastDelegate0 = new UnicastDelegate ( objID0 , ( Connection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UnicastDelegate ( ) { }
void test0 ( ) throws Throwable { SocketInfo socketInfo0 = new SocketInfo ( "ydzi" , ( Socket ) null ) ; String string0 = socketInfo0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getId ( JmsDestination destination ) { Pair pair = ( Pair ) _destinations . get ( destination . getName ( ) ) ; return ( pair ! = null ) ? pair . destinationId : - 1 ; }
void test1 ( ) throws Throwable { SocketInfo socketInfo0 = new SocketInfo ( "" , ( Socket ) null ) ; long long0 = socketInfo0 . getUsed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUsed ( ) { return _used ; }
void test2 ( ) throws Throwable { SocketInfo socketInfo0 = new SocketInfo ( "ydzi" , ( Socket ) null ) ; Socket socket0 = socketInfo0 . getSocket ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Socket getSocket ( ) { return _socket ; }
void test0 ( ) throws Throwable { URI uRI0 = new URI ( ) ; TCPSRequestInfo tCPSRequestInfo0 = new TCPSRequestInfo ( uRI0 ) ; Properties properties0 = new Properties ( "Kl7 * Kv' * p } 5g3f" ) ; tCPSRequestInfo0 . export ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNeedClientAuth ( ) { return _needCientAuth ; }
void test1 ( ) throws Throwable { URI uRI0 = new URI ( ) ; TCPSRequestInfo tCPSRequestInfo0 = new TCPSRequestInfo ( uRI0 ) ; Properties properties0 = new Properties ( ( String ) null ) ; SSLProperties sSLProperties0 = new SSLProperties ( properties0 ) ; tCPSRequestInfo0 . setSSLProperties ( sSLProperties0 ) ; tCPSRequestInfo0 . export ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNeedClientAuth ( ) { return _needCientAuth ; }
void test2 ( ) throws Throwable { URI uRI0 = new URI ( ) ; Properties properties0 = new Properties ( "Argument 'password' is null" ) ; properties0 . set ( "keyStore" , "Argument 'password' is null" ) ; TCPSRequestInfo tCPSRequestInfo0 = new TCPSRequestInfo ( uRI0 , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNeedClientAuth ( ) { return _needCientAuth ; }
void test3 ( ) throws Throwable { URI uRI0 = new URI ( ) ; TCPSRequestInfo tCPSRequestInfo0 = new TCPSRequestInfo ( uRI0 ) ; boolean boolean0 = tCPSRequestInfo0 . equals ( ( Object ) "Kl7 * Kv' * p } 5g3f" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNeedClientAuth ( ) { return _needCientAuth ; }
void test4 ( ) throws Throwable { URI uRI0 = new URI ( ) ; TCPSRequestInfo tCPSRequestInfo0 = new TCPSRequestInfo ( uRI0 ) ; boolean boolean0 = tCPSRequestInfo0 . equals ( ( Object ) tCPSRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNeedClientAuth ( ) { return _needCientAuth ; }
void test5 ( ) throws Throwable { URI uRI0 = new URI ( ) ; TCPSRequestInfo tCPSRequestInfo0 = new TCPSRequestInfo ( uRI0 ) ; tCPSRequestInfo0 . setAlternativeHost ( "Argument 'password' is null" ) ; Properties properties0 = new Properties ( "Argument 'password' is null" ) ; TCPSRequestInfo tCPSRequestInfo1 = new TCPSRequestInfo ( uRI0 , properties0 ) ; boolean boolean0 = tCPSRequestInfo0 . equals ( ( Object ) tCPSRequestInfo1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNeedClientAuth ( ) { return _needCientAuth ; }
void test6 ( ) throws Throwable { URI uRI0 = new URI ( ) ; TCPSRequestInfo tCPSRequestInfo0 = new TCPSRequestInfo ( uRI0 ) ; Properties properties0 = new Properties ( ( String ) null ) ; SSLProperties sSLProperties0 = new SSLProperties ( properties0 ) ; tCPSRequestInfo0 . setSSLProperties ( sSLProperties0 ) ; TCPSRequestInfo tCPSRequestInfo1 = new TCPSRequestInfo ( uRI0 ) ; boolean boolean0 = tCPSRequestInfo0 . equals ( ( Object ) tCPSRequestInfo1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNeedClientAuth ( ) { return _needCientAuth ; }
void test0 ( ) throws Throwable { TCPSManagedConnectionFactory tCPSManagedConnectionFactory0 = new TCPSManagedConnectionFactory ( ) ; ConnectionFactory connectionFactory0 = tCPSManagedConnectionFactory0 . createConnectionFactory ( ( ConnectionManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ConnectionFactory createConnectionFactory ( ConnectionManager manager ) throws ResourceException { return new TCPConnectionFactory ( this , manager ) ; }
void test0 ( ) throws Throwable { TCPManagedConnectionFactory tCPManagedConnectionFactory0 = new TCPManagedConnectionFactory ( ) ; ConnectionFactory connectionFactory0 = tCPManagedConnectionFactory0 . createConnectionFactory ( ( ConnectionManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ConnectionFactory createConnectionFactory ( ConnectionManager manager ) throws ResourceException { return new TCPConnectionFactory ( this , manager ) ; }
void test0 ( ) throws Throwable { HTTPManagedConnectionFactory hTTPManagedConnectionFactory0 = new HTTPManagedConnectionFactory ( ) ; LinkedList < SocketManagedConnectionAcceptor > linkedList0 = new LinkedList < SocketManagedConnectionAcceptor > ( ) ; URI uRI0 = new URI ( ) ; Properties properties0 = new Properties ( " / 7kd$s" ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 , properties0 ) ; ManagedConnection managedConnection0 = hTTPManagedConnectionFactory0 . matchManagedConnections ( ( List ) linkedList0 , ( Principal ) null , ( ConnectionRequestInfo ) socketRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnection matchManagedConnections ( List connections , Principal principal , ConnectionRequestInfo info ) throws ResourceException { ManagedConnection result = null ; if ( info instanceof HTTPRequestInfo ) { HTTPRequestInfo requestInfo = ( HTTPRequestInfo ) info ; URI uri = URIHelper . convertHostToAddress ( requestInfo . getURI ( ) ) ; Iterator iterator = connections . iterator ( ) ; while ( iterator . hasNext ( ) ) { AbstractHTTPManagedConnection connection = ( AbstractHTTPManagedConnection ) iterator . next ( ) ; if ( connection . hasPrincipal ( principal ) & & ( uri . equals ( connection . getRemoteURI ( ) ) | | uri . equals ( connection . getLocalURI ( ) ) ) ) { result = connection ; break ; } } } return result ; }
void test1 ( ) throws Throwable { HTTPManagedConnectionFactory hTTPManagedConnectionFactory0 = new HTTPManagedConnectionFactory ( ) ; LinkedList < SocketManagedConnectionAcceptor > linkedList0 = new LinkedList < SocketManagedConnectionAcceptor > ( ) ; URI uRI0 = new URI ( ) ; HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo ( uRI0 ) ; ManagedConnection managedConnection0 = hTTPManagedConnectionFactory0 . matchManagedConnections ( ( List ) linkedList0 , ( Principal ) null , ( ConnectionRequestInfo ) hTTPRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnection matchManagedConnections ( List connections , Principal principal , ConnectionRequestInfo info ) throws ResourceException { ManagedConnection result = null ; if ( info instanceof HTTPRequestInfo ) { HTTPRequestInfo requestInfo = ( HTTPRequestInfo ) info ; URI uri = URIHelper . convertHostToAddress ( requestInfo . getURI ( ) ) ; Iterator iterator = connections . iterator ( ) ; while ( iterator . hasNext ( ) ) { AbstractHTTPManagedConnection connection = ( AbstractHTTPManagedConnection ) iterator . next ( ) ; if ( connection . hasPrincipal ( principal ) & & ( uri . equals ( connection . getRemoteURI ( ) ) | | uri . equals ( connection . getLocalURI ( ) ) ) ) { result = connection ; break ; } } } return result ; }
void test3 ( ) throws Throwable { HTTPSManagedConnectionFactory hTTPSManagedConnectionFactory0 = new HTTPSManagedConnectionFactory ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; URI uRI0 = new URI ( ) ; Properties properties0 = new Properties ( ( String ) null ) ; HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo ( uRI0 , properties0 ) ; ManagedConnectionAcceptor managedConnectionAcceptor0 = hTTPSManagedConnectionFactory0 . matchManagedConnectionAcceptors ( ( List ) linkedList0 , ( ConnectionRequestInfo ) hTTPRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnectionAcceptor matchManagedConnectionAcceptors ( List acceptors , ConnectionRequestInfo info ) throws ResourceException { ManagedConnectionAcceptor result = null ; if ( info instanceof SocketRequestInfo ) { Iterator iterator = acceptors . iterator ( ) ; while ( iterator . hasNext ( ) ) { SocketManagedConnectionAcceptor acceptor = ( SocketManagedConnectionAcceptor ) iterator . next ( ) ; if ( info . equals ( acceptor . getRequestInfo ( ) ) ) { result = acceptor ; break ; } } } return result ; }
void test4 ( ) throws Throwable { LinkedList < SocketManagedConnectionAcceptor > linkedList0 = new LinkedList < SocketManagedConnectionAcceptor > ( ) ; URI uRI0 = new URI ( ) ; HTTPSManagedConnectionFactory hTTPSManagedConnectionFactory0 = new HTTPSManagedConnectionFactory ( ) ; Properties properties0 = new Properties ( " / 7kd$s" ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 , properties0 ) ; ManagedConnectionAcceptor managedConnectionAcceptor0 = hTTPSManagedConnectionFactory0 . matchManagedConnectionAcceptors ( ( List ) linkedList0 , ( ConnectionRequestInfo ) socketRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnectionAcceptor matchManagedConnectionAcceptors ( List acceptors , ConnectionRequestInfo info ) throws ResourceException { ManagedConnectionAcceptor result = null ; if ( info instanceof SocketRequestInfo ) { Iterator iterator = acceptors . iterator ( ) ; while ( iterator . hasNext ( ) ) { SocketManagedConnectionAcceptor acceptor = ( SocketManagedConnectionAcceptor ) iterator . next ( ) ; if ( info . equals ( acceptor . getRequestInfo ( ) ) ) { result = acceptor ; break ; } } } return result ; }
void test3 ( ) throws Throwable { AbstractHTTPConnectionFactory abstractHTTPConnectionFactory0 = new AbstractHTTPConnectionFactory ( ( String ) null , ( String ) null , ( ManagedConnectionFactory ) null , ( ConnectionManager ) null ) ; URI uRI0 = new URI ( ) ; HashMap < Integer , String > hashMap0 = new HashMap < Integer , String > ( ) ; SocketRequestInfo socketRequestInfo0 = ( SocketRequestInfo ) abstractHTTPConnectionFactory0 . getAcceptorRequestInfo ( uRI0 , ( Map ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHost ( String host ) { if ( host . equals ( "localhost" ) ) { try { host = InetAddress . getLocalHost ( ) . getHostAddress ( ) ; } catch ( UnknownHostException ignore ) { } } return host ; }
void test3 ( ) throws Throwable { URI uRI0 = new URI ( "o4" , "o4" , "o4" , "o4" , "o4" ) ; HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo ( uRI0 ) ; HTTPInputStream hTTPInputStream0 = new HTTPInputStream ( "o4" , ( URL ) null , hTTPRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void read ( String id , HttpServletResponse response ) throws IOException { Socket socket = _manager . getSocket ( id ) ; if ( socket = = null ) { log ( "Connection not found , id = " + id ) ; response . sendError ( HttpServletResponse . SC_BAD_REQUEST , "Connection not found" ) ; } else { byte [ ] data = new byte [ 1024 ] ; try { socket . setSoTimeout ( _timeout ) ; InputStream in = socket . getInputStream ( ) ; int count = 0 ; try { count = in . read ( data ) ; } catch ( InterruptedIOException ignore ) { } / / log ( "read ( id = " + id + " ) , [ length = " + count + " ] " ) ; if ( count ! = - 1 ) { response . setContentLength ( count ) ; response . setStatus ( HttpServletResponse . SC_OK ) ; OutputStream out = response . getOutputStream ( ) ; out . write ( data , 0 , count ) ; out . flush ( ) ; } else { remove ( id ) ; response . setStatus ( HttpServletResponse . SC_INTERNAL_SERVER_ERROR ) ; } } catch ( IOException exception ) { log ( "read failed" , exception ) ; remove ( id ) ; response . sendError ( HttpServletResponse . SC_INTERNAL_SERVER_ERROR , exception . getMessage ( ) ) ; } } }
void test0 ( ) throws Throwable { HTTPSManagedConnectionFactory hTTPSManagedConnectionFactory0 = new HTTPSManagedConnectionFactory ( ) ; ConnectionFactory connectionFactory0 = hTTPSManagedConnectionFactory0 . createConnectionFactory ( ( ConnectionManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ConnectionFactory createConnectionFactory ( ConnectionManager manager ) throws ResourceException { return new TCPConnectionFactory ( this , manager ) ; }
void test0 ( ) throws Throwable { TunnelHelper tunnelHelper0 = new TunnelHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { Handler handler0 = new Handler ( ) ; URL uRL0 = new URL ( "Argument fragment is illegal if path includes fragment identifier" , "Argument fragment is illegal if path includes fragment identifier" , 18 , "Argument fragment is illegal if path includes fragment identifier" , ( URLStreamHandler ) handler0 ) ; URI uRI0 = new URI ( ) ; HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo ( uRI0 ) ; HttpsURLConnectionOldImpl httpsURLConnectionOldImpl0 = ( HttpsURLConnectionOldImpl ) TunnelHelper . create ( uRL0 , "Argument fragment is illegal if path includes fragment identifier" , ( String ) null , hTTPRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test2 ( ) throws Throwable { Handler handler0 = new Handler ( ) ; URL uRL0 = new URL ( "Argument fragment is illegal if path includes fragment identifier" , "Argument fragment is illegal if path includes fragment identifier" , 18 , "Argument fragment is illegal if path includes fragment identifier" , ( URLStreamHandler ) handler0 ) ; URI uRI0 = new URI ( ) ; HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo ( uRI0 ) ; hTTPRequestInfo0 . setProxyUser ( "Argument fragment is illegal if path includes fragment identifier" ) ; HttpsURLConnectionOldImpl httpsURLConnectionOldImpl0 = ( HttpsURLConnectionOldImpl ) TunnelHelper . create ( uRL0 , ( String ) null , "Argument fragment is illegal if path includes fragment identifier" , hTTPRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test0 ( ) throws Throwable { URI uRI0 = new URI ( ) ; HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo ( uRI0 ) ; Properties properties0 = new Properties ( "9Xi < tvai" ) ; hTTPRequestInfo0 . export ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProxyPort ( ) { return _proxyPort ; }
void test1 ( ) throws Throwable { URI uRI0 = new URI ( ) ; HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo ( uRI0 ) ; hTTPRequestInfo0 . setProxyPassword ( "7 [ z4M ! 'Cpa } FT" ) ; boolean boolean0 = hTTPRequestInfo0 . equals ( ( Object ) hTTPRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test2 ( ) throws Throwable { URI uRI0 = new URI ( ) ; HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo ( uRI0 ) ; Properties properties0 = new Properties ( "9Xi < tvai" ) ; SSLProperties sSLProperties0 = new SSLProperties ( properties0 ) ; hTTPRequestInfo0 . setSSLProperties ( sSLProperties0 ) ; hTTPRequestInfo0 . export ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProxyPort ( ) { return _proxyPort ; }
void test3 ( ) throws Throwable { URI uRI0 = new URI ( ) ; HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo ( uRI0 ) ; boolean boolean0 = hTTPRequestInfo0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test4 ( ) throws Throwable { URI uRI0 = new URI ( ) ; HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo ( uRI0 ) ; boolean boolean0 = hTTPRequestInfo0 . equals ( ( Object ) hTTPRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test5 ( ) throws Throwable { URI uRI0 = new URI ( ) ; Properties properties0 = new Properties ( "" ) ; HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo ( uRI0 ) ; HTTPRequestInfo hTTPRequestInfo1 = new HTTPRequestInfo ( uRI0 , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test6 ( ) throws Throwable { URI uRI0 = new URI ( ) ; Properties properties0 = new Properties ( " * cN + U1" ) ; HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo ( uRI0 , properties0 ) ; HTTPRequestInfo hTTPRequestInfo1 = new HTTPRequestInfo ( uRI0 , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test7 ( ) throws Throwable { URI uRI0 = new URI ( ) ; HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo ( uRI0 ) ; Properties properties0 = new Properties ( "9Xi < tvai" ) ; SSLProperties sSLProperties0 = new SSLProperties ( properties0 ) ; hTTPRequestInfo0 . setSSLProperties ( sSLProperties0 ) ; HTTPRequestInfo hTTPRequestInfo1 = new HTTPRequestInfo ( uRI0 ) ; boolean boolean0 = hTTPRequestInfo0 . equals ( ( Object ) hTTPRequestInfo1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test0 ( ) throws Throwable { HTTPManagedConnectionFactory hTTPManagedConnectionFactory0 = new HTTPManagedConnectionFactory ( ) ; ConnectionFactory connectionFactory0 = hTTPManagedConnectionFactory0 . createConnectionFactory ( ( ConnectionManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ConnectionFactory createConnectionFactory ( ConnectionManager manager ) throws ResourceException { return new TCPConnectionFactory ( this , manager ) ; }
void test0 ( ) throws Throwable { LoggingCallback loggingCallback0 = new LoggingCallback ( ) ; List < Object > list0 = loggingCallback0 . getObjects ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return _keyStore = = null & & _keyStorePassword = = null & & _keyStoreType = = null & & _trustStore = = null & & _trustStorePassword = = null & & _trustStoreType = = null ; }
void test2 ( ) throws Throwable { URI uRI0 = new URI ( "Xn" , "Xn" , "Xn" , "Xn" , "Xn" ) ; String string0 = RegistryHelper . getName ( uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test3 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URI uRI1 = new URI ( uRI0 , " / ataase_Service" ) ; String string0 = RegistryHelper . getName ( uRI1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test0 ( ) throws Throwable { URI uRI0 = new URI ( ) ; Properties properties0 = new Properties ( ( String ) null ) ; RMIRequestInfo rMIRequestInfo0 = new RMIRequestInfo ( uRI0 , properties0 ) ; rMIRequestInfo0 . export ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getEmbedRegistry ( ) { return _embedRegistry ; }
void test1 ( ) throws Throwable { URI uRI0 = new URI ( ) ; Properties properties0 = new Properties ( ( String ) null ) ; RMIRequestInfo rMIRequestInfo0 = new RMIRequestInfo ( uRI0 , properties0 ) ; boolean boolean0 = rMIRequestInfo0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getEmbedRegistry ( ) { return _embedRegistry ; }
void test2 ( ) throws Throwable { URI uRI0 = new URI ( ) ; RMIRequestInfo rMIRequestInfo0 = new RMIRequestInfo ( uRI0 ) ; boolean boolean0 = rMIRequestInfo0 . equals ( ( Object ) rMIRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getEmbedRegistry ( ) { return _embedRegistry ; }
void test3 ( ) throws Throwable { URI uRI0 = new URI ( ) ; RMIRequestInfo rMIRequestInfo0 = new RMIRequestInfo ( uRI0 ) ; RMIRequestInfo rMIRequestInfo1 = new RMIRequestInfo ( uRI0 ) ; rMIRequestInfo1 . setEmbedRegistry ( false ) ; boolean boolean0 = rMIRequestInfo0 . equals ( ( Object ) rMIRequestInfo1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getEmbedRegistry ( ) { return _embedRegistry ; }
void test0 ( ) throws Throwable { RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory ( ) ; ConnectionFactory connectionFactory0 = rMIManagedConnectionFactory0 . createConnectionFactory ( ( ConnectionManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ConnectionFactory createConnectionFactory ( ConnectionManager manager ) throws ResourceException { return new TCPConnectionFactory ( this , manager ) ; }
void test2 ( ) throws Throwable { RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory ( ) ; URI uRI0 = new URI ( ) ; RMIRequestInfo rMIRequestInfo0 = new RMIRequestInfo ( uRI0 ) ; ManagedConnectionAcceptor managedConnectionAcceptor0 = rMIManagedConnectionFactory0 . createManagedConnectionAcceptor ( ( Authenticator ) null , ( ConnectionRequestInfo ) rMIRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnectionAcceptor createManagedConnectionAcceptor ( Authenticator authenticator , ConnectionRequestInfo info ) throws ResourceException { if ( ! ( info instanceof SocketRequestInfo ) ) { throw new ResourceException ( "Argument 'info' must be of type " + SocketRequestInfo . class . getName ( ) ) ; } return new TCPManagedConnectionAcceptor ( authenticator , ( SocketRequestInfo ) info ) ; }
void test4 ( ) throws Throwable { RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory ( ) ; LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; URI uRI0 = new URI ( ) ; JMXPrincipal jMXPrincipal0 = new JMXPrincipal ( "" ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; ManagedConnection managedConnection0 = rMIManagedConnectionFactory0 . matchManagedConnections ( ( List ) linkedList0 , ( Principal ) jMXPrincipal0 , ( ConnectionRequestInfo ) uRIRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnection matchManagedConnections ( List connections , Principal principal , ConnectionRequestInfo info ) throws ResourceException { ManagedConnection result = null ; if ( info instanceof HTTPRequestInfo ) { HTTPRequestInfo requestInfo = ( HTTPRequestInfo ) info ; URI uri = URIHelper . convertHostToAddress ( requestInfo . getURI ( ) ) ; Iterator iterator = connections . iterator ( ) ; while ( iterator . hasNext ( ) ) { AbstractHTTPManagedConnection connection = ( AbstractHTTPManagedConnection ) iterator . next ( ) ; if ( connection . hasPrincipal ( principal ) & & ( uri . equals ( connection . getRemoteURI ( ) ) | | uri . equals ( connection . getLocalURI ( ) ) ) ) { result = connection ; break ; } } } return result ; }
void test5 ( ) throws Throwable { RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory ( ) ; LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; URI uRI0 = new URI ( ) ; RMIRequestInfo rMIRequestInfo0 = new RMIRequestInfo ( uRI0 ) ; ManagedConnection managedConnection0 = rMIManagedConnectionFactory0 . matchManagedConnections ( ( List ) linkedList0 , ( Principal ) null , ( ConnectionRequestInfo ) rMIRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnection matchManagedConnections ( List connections , Principal principal , ConnectionRequestInfo info ) throws ResourceException { ManagedConnection result = null ; if ( info instanceof HTTPRequestInfo ) { HTTPRequestInfo requestInfo = ( HTTPRequestInfo ) info ; URI uri = URIHelper . convertHostToAddress ( requestInfo . getURI ( ) ) ; Iterator iterator = connections . iterator ( ) ; while ( iterator . hasNext ( ) ) { AbstractHTTPManagedConnection connection = ( AbstractHTTPManagedConnection ) iterator . next ( ) ; if ( connection . hasPrincipal ( principal ) & & ( uri . equals ( connection . getRemoteURI ( ) ) | | uri . equals ( connection . getLocalURI ( ) ) ) ) { result = connection ; break ; } } } return result ; }
void test6 ( ) throws Throwable { RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory ( ) ; LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; ManagedConnectionAcceptor managedConnectionAcceptor0 = rMIManagedConnectionFactory0 . matchManagedConnectionAcceptors ( ( List ) linkedList0 , ( ConnectionRequestInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnectionAcceptor matchManagedConnectionAcceptors ( List acceptors , ConnectionRequestInfo info ) throws ResourceException { ManagedConnectionAcceptor result = null ; if ( info instanceof SocketRequestInfo ) { Iterator iterator = acceptors . iterator ( ) ; while ( iterator . hasNext ( ) ) { SocketManagedConnectionAcceptor acceptor = ( SocketManagedConnectionAcceptor ) iterator . next ( ) ; if ( info . equals ( acceptor . getRequestInfo ( ) ) ) { result = acceptor ; break ; } } } return result ; }
void test7 ( ) throws Throwable { RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory ( ) ; LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; URI uRI0 = new URI ( ) ; RMIRequestInfo rMIRequestInfo0 = new RMIRequestInfo ( uRI0 ) ; ManagedConnectionAcceptor managedConnectionAcceptor0 = rMIManagedConnectionFactory0 . matchManagedConnectionAcceptors ( ( List ) linkedList0 , ( ConnectionRequestInfo ) rMIRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnectionAcceptor matchManagedConnectionAcceptors ( List acceptors , ConnectionRequestInfo info ) throws ResourceException { ManagedConnectionAcceptor result = null ; if ( info instanceof SocketRequestInfo ) { Iterator iterator = acceptors . iterator ( ) ; while ( iterator . hasNext ( ) ) { SocketManagedConnectionAcceptor acceptor = ( SocketManagedConnectionAcceptor ) iterator . next ( ) ; if ( info . equals ( acceptor . getRequestInfo ( ) ) ) { result = acceptor ; break ; } } } return result ; }
void test0 ( ) throws Throwable { URI uRI0 = new URI ( ) ; Properties properties0 = new Properties ( " . D" ) ; RMIRequestInfo rMIRequestInfo0 = new RMIRequestInfo ( uRI0 , properties0 ) ; RMIManagedConnectionAcceptor rMIManagedConnectionAcceptor0 = new RMIManagedConnectionAcceptor ( ( Authenticator ) null , rMIRequestInfo0 ) ; URI uRI1 = rMIManagedConnectionAcceptor0 . getURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test2 ( ) throws Throwable { RMIInvokerImpl rMIInvokerImpl0 = new RMIInvokerImpl ( ) ; rMIInvokerImpl0 . ping ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test4 ( ) throws Throwable { RMIInvokerImpl rMIInvokerImpl0 = new RMIInvokerImpl ( ) ; rMIInvokerImpl0 . setConnection ( ( RMIManagedConnection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test0 ( ) throws Throwable { RMIInvokerFactoryImpl rMIInvokerFactoryImpl0 = new RMIInvokerFactoryImpl ( ( Authenticator ) null , ( RMIManagedConnectionAcceptor ) null , ( ManagedConnectionAcceptorListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test0 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; UserManager userManager0 = new UserManager ( configuration0 , databaseService0 ) ; AuthenticationMgr authenticationMgr0 = new AuthenticationMgr ( userManager0 ) ; URI uRI0 = new URI ( ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; VMManagedConnectionAcceptor vMManagedConnectionAcceptor0 = new VMManagedConnectionAcceptor ( ( Authenticator ) authenticationMgr0 , uRIRequestInfo0 ) ; URI uRI1 = vMManagedConnectionAcceptor0 . getURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SchemeType getScheme ( ) ; / * * * Returns the URI used to establsh connections to remote services . * * @return the URI used to establish connections to remote services * / String getConnectURI ( ) ; / * * * Returns the URI that services are exported on . * * @return the URI for exporting services * / String getExportURI ( ) ; / * * * Returns the URI that JNDI service is exported on . * < p / > * Typically , this will be the same as that returned by * { @link #getExportURI }
void test0 ( ) throws Throwable { JMXPrincipal jMXPrincipal0 = new JMXPrincipal ( "" ) ; URI uRI0 = new URI ( ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; VMManagedConnection vMManagedConnection0 = new VMManagedConnection ( ( Principal ) jMXPrincipal0 , uRIRequestInfo0 , ( VMInvoker ) null , uRI0 ) ; boolean boolean0 = vMManagedConnection0 . hasPrincipal ( ( Principal ) jMXPrincipal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasPrincipal ( Principal principal ) { boolean result = false ; if ( ( _principal ! = null & & _principal . equals ( principal ) ) | | ( _principal = = null & & principal = = null ) ) { result = true ; } return result ; }
void test2 ( ) throws Throwable { JMXPrincipal jMXPrincipal0 = new JMXPrincipal ( "" ) ; URI uRI0 = new URI ( ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; VMManagedConnection vMManagedConnection0 = new VMManagedConnection ( ( Principal ) jMXPrincipal0 , uRIRequestInfo0 , ( VMInvoker ) null , uRI0 ) ; boolean boolean0 = vMManagedConnection0 . isAliveLocal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAliveLocal ( ) { boolean alive ; ( this ) { alive = ( _remoteInvoker ! = null ) ; } return alive ; }
void test0 ( ) throws Throwable { VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory ( ) ; ConnectionFactory connectionFactory0 = vMManagedConnectionFactory0 . createConnectionFactory ( ( ConnectionManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ConnectionFactory createConnectionFactory ( ConnectionManager manager ) throws ResourceException { return new TCPConnectionFactory ( this , manager ) ; }
void test3 ( ) throws Throwable { VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory ( ) ; URI uRI0 = new URI ( "org . exolab . jms . config . HttpConfiguration" , "org . exolab . jms . config . HttpConfiguration" , "org . exolab . jms . config . HttpConfiguration" , "org . exolab . jms . config . HttpConfiguration" , "org . exolab . jms . config . HttpConfiguration" ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; UserManager userManager0 = new UserManager ( configuration0 , databaseService0 ) ; AuthenticationMgr authenticationMgr0 = new AuthenticationMgr ( userManager0 ) ; ManagedConnectionAcceptor managedConnectionAcceptor0 = vMManagedConnectionFactory0 . createManagedConnectionAcceptor ( ( Authenticator ) authenticationMgr0 , ( ConnectionRequestInfo ) uRIRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnectionAcceptor createManagedConnectionAcceptor ( Authenticator authenticator , ConnectionRequestInfo info ) throws ResourceException { if ( ! ( info instanceof SocketRequestInfo ) ) { throw new ResourceException ( "Argument 'info' must be of type " + SocketRequestInfo . class . getName ( ) ) ; } return new TCPManagedConnectionAcceptor ( authenticator , ( SocketRequestInfo ) info ) ; }
void test5 ( ) throws Throwable { VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory ( ) ; LinkedList < URIRequestInfo > linkedList0 = new LinkedList < URIRequestInfo > ( ) ; JMXPrincipal jMXPrincipal0 = new JMXPrincipal ( "Path contains invalid character ! " ) ; ManagedConnection managedConnection0 = vMManagedConnectionFactory0 . matchManagedConnections ( ( List ) linkedList0 , ( Principal ) jMXPrincipal0 , ( ConnectionRequestInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnection matchManagedConnections ( List connections , Principal principal , ConnectionRequestInfo info ) throws ResourceException { ManagedConnection result = null ; if ( info instanceof HTTPRequestInfo ) { HTTPRequestInfo requestInfo = ( HTTPRequestInfo ) info ; URI uri = URIHelper . convertHostToAddress ( requestInfo . getURI ( ) ) ; Iterator iterator = connections . iterator ( ) ; while ( iterator . hasNext ( ) ) { AbstractHTTPManagedConnection connection = ( AbstractHTTPManagedConnection ) iterator . next ( ) ; if ( connection . hasPrincipal ( principal ) & & ( uri . equals ( connection . getRemoteURI ( ) ) | | uri . equals ( connection . getLocalURI ( ) ) ) ) { result = connection ; break ; } } } return result ; }
void test6 ( ) throws Throwable { VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory ( ) ; LinkedList < URIRequestInfo > linkedList0 = new LinkedList < URIRequestInfo > ( ) ; URI uRI0 = new URI ( ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; ManagedConnection managedConnection0 = vMManagedConnectionFactory0 . matchManagedConnections ( ( List ) linkedList0 , ( Principal ) null , ( ConnectionRequestInfo ) uRIRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnection matchManagedConnections ( List connections , Principal principal , ConnectionRequestInfo info ) throws ResourceException { ManagedConnection result = null ; if ( info instanceof HTTPRequestInfo ) { HTTPRequestInfo requestInfo = ( HTTPRequestInfo ) info ; URI uri = URIHelper . convertHostToAddress ( requestInfo . getURI ( ) ) ; Iterator iterator = connections . iterator ( ) ; while ( iterator . hasNext ( ) ) { AbstractHTTPManagedConnection connection = ( AbstractHTTPManagedConnection ) iterator . next ( ) ; if ( connection . hasPrincipal ( principal ) & & ( uri . equals ( connection . getRemoteURI ( ) ) | | uri . equals ( connection . getLocalURI ( ) ) ) ) { result = connection ; break ; } } } return result ; }
void test8 ( ) throws Throwable { VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory ( ) ; LinkedList < URIRequestInfo > linkedList0 = new LinkedList < URIRequestInfo > ( ) ; ManagedConnectionAcceptor managedConnectionAcceptor0 = vMManagedConnectionFactory0 . matchManagedConnectionAcceptors ( ( List ) linkedList0 , ( ConnectionRequestInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnectionAcceptor matchManagedConnectionAcceptors ( List acceptors , ConnectionRequestInfo info ) throws ResourceException { ManagedConnectionAcceptor result = null ; if ( info instanceof SocketRequestInfo ) { Iterator iterator = acceptors . iterator ( ) ; while ( iterator . hasNext ( ) ) { SocketManagedConnectionAcceptor acceptor = ( SocketManagedConnectionAcceptor ) iterator . next ( ) ; if ( info . equals ( acceptor . getRequestInfo ( ) ) ) { result = acceptor ; break ; } } } return result ; }
void test9 ( ) throws Throwable { VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory ( ) ; LinkedList < URIRequestInfo > linkedList0 = new LinkedList < URIRequestInfo > ( ) ; URI uRI0 = new URI ( "org . exolab . jms . config . HttpConfiguration" , "org . exolab . jms . config . HttpConfiguration" , "org . exolab . jms . config . HttpConfiguration" , "org . exolab . jms . config . HttpConfiguration" , "org . exolab . jms . config . HttpConfiguration" ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; ManagedConnectionAcceptor managedConnectionAcceptor0 = vMManagedConnectionFactory0 . matchManagedConnectionAcceptors ( ( List ) linkedList0 , ( ConnectionRequestInfo ) uRIRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnectionAcceptor matchManagedConnectionAcceptors ( List acceptors , ConnectionRequestInfo info ) throws ResourceException { ManagedConnectionAcceptor result = null ; if ( info instanceof SocketRequestInfo ) { Iterator iterator = acceptors . iterator ( ) ; while ( iterator . hasNext ( ) ) { SocketManagedConnectionAcceptor acceptor = ( SocketManagedConnectionAcceptor ) iterator . next ( ) ; if ( info . equals ( acceptor . getRequestInfo ( ) ) ) { result = acceptor ; break ; } } } return result ; }
void test0 ( ) throws Throwable { Class < ? > class0 = Method . class ; Method [ ] methodArray0 = MethodHelper . getAllInterfaceMethods ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Method [ ] getAllInterfaceMethods ( Class clazz ) { int size = 10 ; ArrayList result = new ArrayList ( size ) ; getInterfaceMethods ( getAllInterfaces ( clazz ) , result ) ; return ( Method [ ] ) result . toArray ( new Method [ 0 ] ) ; }
void test1 ( ) throws Throwable { Class < ? > class0 = Method . class ; Method [ ] methodArray0 = MethodHelper . getInterfaceMethods ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Method [ ] getInterfaceMethods ( Class clazz ) { int size = 10 ; ArrayList result = new ArrayList ( size ) ; getInterfaceMethods ( clazz . getInterfaces ( ) , result ) ; return ( Method [ ] ) result . toArray ( new Method [ 0 ] ) ; }
void test2 ( ) throws Throwable { Properties properties0 = new Properties ( "Mm9 + cE ! Jf" ) ; Map < Object , Object > map0 = properties0 . getProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test4 ( ) throws Throwable { Properties properties0 = new Properties ( " [ cTX$ { i < rHjzX ! " ) ; properties0 . set ( " [ cTX$ { i < rHjzX ! " , false ) ; boolean boolean0 = properties0 . getBoolean ( " [ cTX$ { i < rHjzX ! " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBoolean ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getBoolean ( _map . get ( name ) ) ; }
void test5 ( ) throws Throwable { Properties properties0 = new Properties ( ( String ) null ) ; properties0 . set ( ( String ) null , true ) ; boolean boolean0 = properties0 . getBoolean ( ( String ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBoolean ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getBoolean ( _map . get ( name ) ) ; }
void test9 ( ) throws Throwable { Properties properties0 = new Properties ( "%YQ = kPi - " ) ; boolean boolean0 = properties0 . getBoolean ( "%YQ = kPi - " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBoolean ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getBoolean ( _map . get ( name ) ) ; }
void test11 ( ) throws Throwable { Properties properties0 = new Properties ( "Tz'gj@q0gcL { ! \"" ) ; int int0 = properties0 . getInt ( "Tz'gj@q0gcL { ! \"" , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInt ( String name ) throws JMSException , MessageFormatException { return FormatConverter . getInt ( _map . get ( name ) ) ; }
void test13 ( ) throws Throwable { Properties properties0 = new Properties ( " [ cTX$ { i < rHjzX ! " ) ; URI uRI0 = properties0 . getURI ( " [ cTX$ { i < rHjzX ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" URI getURI ( String scheme , String host , int port ) { URI result ; try { result = URIHelper . create ( scheme , getHost ( host ) , port ) ; } catch ( InvalidURIException exception ) { throw new IllegalStateException ( "Failed to create URI : " + exception ) ; } return result ; }
void test0 ( ) throws Throwable { SSLHelper sSLHelper0 = new SSLHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { SSLProperties sSLProperties0 = new SSLProperties ( ) ; sSLProperties0 . setKeyStorePassword ( "Argument schemeSpecificPart is null or an empty string" ) ; SSLHelper . configure ( sSLProperties0 ) ; Properties properties0 = new Properties ( " ; > / Cy2eg6 : B1y" ) ; SSLProperties sSLProperties1 = new SSLProperties ( properties0 ) ; SSLHelper . configure ( sSLProperties1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeyStorePassword ( ) { return _keyStorePassword ; }
void test0 ( ) throws Throwable { SSLProperties sSLProperties0 = new SSLProperties ( ) ; sSLProperties0 . setKeyStore ( "" ) ; boolean boolean0 = sSLProperties0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return _keyStore = = null & & _keyStorePassword = = null & & _keyStoreType = = null & & _trustStore = = null & & _trustStorePassword = = null & & _trustStoreType = = null ; }
void test1 ( ) throws Throwable { Properties properties0 = new Properties ( "" ) ; SSLProperties sSLProperties0 = new SSLProperties ( properties0 ) ; boolean boolean0 = sSLProperties0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return _keyStore = = null & & _keyStorePassword = = null & & _keyStoreType = = null & & _trustStore = = null & & _trustStorePassword = = null & & _trustStoreType = = null ; }
void test2 ( ) throws Throwable { Properties properties0 = new Properties ( "KoI" ) ; SSLProperties sSLProperties0 = new SSLProperties ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return _keyStore = = null & & _keyStorePassword = = null & & _keyStoreType = = null & & _trustStore = = null & & _trustStorePassword = = null & & _trustStoreType = = null ; }
void test3 ( ) throws Throwable { SSLProperties sSLProperties0 = new SSLProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return _keyStore = = null & & _keyStorePassword = = null & & _keyStoreType = = null & & _trustStore = = null & & _trustStorePassword = = null & & _trustStoreType = = null ; }
void test4 ( ) throws Throwable { SSLProperties sSLProperties0 = new SSLProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return _keyStore = = null & & _keyStorePassword = = null & & _keyStoreType = = null & & _trustStore = = null & & _trustStorePassword = = null & & _trustStoreType = = null ; }
void test5 ( ) throws Throwable { Properties properties0 = new Properties ( "" ) ; SSLProperties sSLProperties0 = new SSLProperties ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return _keyStore = = null & & _keyStorePassword = = null & & _keyStoreType = = null & & _trustStore = = null & & _trustStorePassword = = null & & _trustStoreType = = null ; }
void test6 ( ) throws Throwable { Properties properties0 = new Properties ( "" ) ; SSLProperties sSLProperties0 = new SSLProperties ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return _keyStore = = null & & _keyStorePassword = = null & & _keyStoreType = = null & & _trustStore = = null & & _trustStorePassword = = null & & _trustStoreType = = null ; }
void test7 ( ) throws Throwable { Properties properties0 = new Properties ( "" ) ; SSLProperties sSLProperties0 = new SSLProperties ( properties0 ) ; sSLProperties0 . setTrustStoreType ( "ax" ) ; SSLProperties sSLProperties1 = new SSLProperties ( properties0 ) ; boolean boolean0 = sSLProperties0 . equals ( ( Object ) sSLProperties1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test8 ( ) throws Throwable { SSLProperties sSLProperties0 = new SSLProperties ( ) ; boolean boolean0 = sSLProperties0 . equals ( ( Object ) sSLProperties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test9 ( ) throws Throwable { Properties properties0 = new Properties ( "KoI" ) ; SSLProperties sSLProperties0 = new SSLProperties ( properties0 ) ; boolean boolean0 = sSLProperties0 . equals ( ( Object ) "KoI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test10 ( ) throws Throwable { Properties properties0 = new Properties ( "ax" ) ; SSLProperties sSLProperties0 = new SSLProperties ( properties0 ) ; SSLProperties sSLProperties1 = new SSLProperties ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test11 ( ) throws Throwable { SSLProperties sSLProperties0 = new SSLProperties ( ) ; SSLProperties sSLProperties1 = new SSLProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test12 ( ) throws Throwable { SSLProperties sSLProperties0 = new SSLProperties ( ) ; sSLProperties0 . setKeyStoreType ( "3%2S ! 'WJN$L = QZ5R" ) ; Properties properties0 = new Properties ( " . " ) ; SSLProperties sSLProperties1 = new SSLProperties ( properties0 ) ; boolean boolean0 = sSLProperties0 . equals ( ( Object ) sSLProperties1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test13 ( ) throws Throwable { Properties properties0 = new Properties ( "ax" ) ; SSLProperties sSLProperties0 = new SSLProperties ( properties0 ) ; sSLProperties0 . setTrustStore ( "ax" ) ; SSLProperties sSLProperties1 = new SSLProperties ( properties0 ) ; boolean boolean0 = sSLProperties0 . equals ( ( Object ) sSLProperties1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test14 ( ) throws Throwable { Properties properties0 = new Properties ( "" ) ; SSLProperties sSLProperties0 = new SSLProperties ( properties0 ) ; sSLProperties0 . setTrustStorePassword ( "" ) ; SSLProperties sSLProperties1 = new SSLProperties ( properties0 ) ; boolean boolean0 = sSLProperties0 . equals ( ( Object ) sSLProperties1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test15 ( ) throws Throwable { Properties properties0 = new Properties ( " : [ _L ! o , y * | " ) ; SSLProperties sSLProperties0 = new SSLProperties ( properties0 ) ; SSLProperties sSLProperties1 = new SSLProperties ( ) ; boolean boolean0 = sSLProperties0 . equals ( ( Object ) sSLProperties1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test16 ( ) throws Throwable { Properties properties0 = new Properties ( "ax" ) ; SSLProperties sSLProperties0 = new SSLProperties ( properties0 ) ; sSLProperties0 . setKeyStorePassword ( "ax" ) ; sSLProperties0 . export ( properties0 ) ; SSLProperties sSLProperties1 = new SSLProperties ( properties0 ) ; boolean boolean0 = sSLProperties0 . equals ( ( Object ) sSLProperties1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test0 ( ) throws Throwable { SSLProperties sSLProperties0 = SSLUtil . getSSLProperties ( " / " , " / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTrustStore ( ) { return _trustStore ; }
void test3 ( ) throws Throwable { SSLUtil sSLUtil0 = new SSLUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { URI uRI0 = new URI ( ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionRequestQueueSize ( ) { return _connectionRequestQueueSize ; }
void test1 ( ) throws Throwable { URI uRI0 = new URI ( ) ; Properties properties0 = new Properties ( "6M9Y / " ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBindAll ( ) { return _bindAll ; }
void test2 ( ) throws Throwable { URI uRI0 = new URI ( ) ; Properties properties0 = new Properties ( "6M9Y / " ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" URI getAlternativeURI ( ) throws ResourceException { URI result = null ; if ( _alternativeHost ! = null ) { result = new URI ( getURI ( ) ) ; try { result . setHost ( _alternativeHost ) ; } catch ( URI . MalformedURIException exception ) { throw new ResourceException ( exception ) ; } } return result ; }
void test3 ( ) throws Throwable { URI uRI0 = new URI ( ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBindAll ( ) { return _bindAll ; }
void test4 ( ) throws Throwable { URI uRI0 = new URI ( ) ; Properties properties0 = new Properties ( "l" ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBindAll ( ) { return _bindAll ; }
void test5 ( ) throws Throwable { URI uRI0 = new URI ( ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionRequestQueueSize ( ) { return _connectionRequestQueueSize ; }
void test6 ( ) throws Throwable { URI uRI0 = new URI ( ) ; Properties properties0 = new Properties ( "6M9Y / " ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionRequestQueueSize ( ) { return _connectionRequestQueueSize ; }
void test7 ( ) throws Throwable { URI uRI0 = new URI ( ) ; Properties properties0 = new Properties ( "l" ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBindAll ( ) { return _bindAll ; }
void test8 ( ) throws Throwable { URI uRI0 = new URI ( ) ; Properties properties0 = new Properties ( "l" ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionRequestQueueSize ( ) { return _connectionRequestQueueSize ; }
void test9 ( ) throws Throwable { URI uRI0 = new URI ( ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBindAll ( ) { return _bindAll ; }
void test10 ( ) throws Throwable { URI uRI0 = new URI ( ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionRequestQueueSize ( ) { return _connectionRequestQueueSize ; }
void test11 ( ) throws Throwable { URI uRI0 = new URI ( ) ; Properties properties0 = new Properties ( "l" ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test12 ( ) throws Throwable { URI uRI0 = new URI ( ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBindAll ( ) { return _bindAll ; }
void test13 ( ) throws Throwable { URI uRI0 = new URI ( ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBindAll ( ) { return _bindAll ; }
void test0 ( ) throws Throwable { TCPSManagedConnectionFactory tCPSManagedConnectionFactory0 = new TCPSManagedConnectionFactory ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; ManagedConnection managedConnection0 = tCPSManagedConnectionFactory0 . matchManagedConnections ( ( List ) linkedList0 , ( Principal ) null , ( ConnectionRequestInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnection matchManagedConnections ( List connections , Principal principal , ConnectionRequestInfo info ) throws ResourceException { ManagedConnection result = null ; if ( info instanceof HTTPRequestInfo ) { HTTPRequestInfo requestInfo = ( HTTPRequestInfo ) info ; URI uri = URIHelper . convertHostToAddress ( requestInfo . getURI ( ) ) ; Iterator iterator = connections . iterator ( ) ; while ( iterator . hasNext ( ) ) { AbstractHTTPManagedConnection connection = ( AbstractHTTPManagedConnection ) iterator . next ( ) ; if ( connection . hasPrincipal ( principal ) & & ( uri . equals ( connection . getRemoteURI ( ) ) | | uri . equals ( connection . getLocalURI ( ) ) ) ) { result = connection ; break ; } } } return result ; }
void test1 ( ) throws Throwable { TCPSManagedConnectionFactory tCPSManagedConnectionFactory0 = new TCPSManagedConnectionFactory ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; URI uRI0 = new URI ( ) ; Properties properties0 = new Properties ( "" ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 , properties0 ) ; socketRequestInfo0 . setAlternativeHost ( "" ) ; ManagedConnection managedConnection0 = tCPSManagedConnectionFactory0 . matchManagedConnections ( ( List ) linkedList0 , ( Principal ) null , ( ConnectionRequestInfo ) socketRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnection matchManagedConnections ( List connections , Principal principal , ConnectionRequestInfo info ) throws ResourceException { ManagedConnection result = null ; if ( info instanceof HTTPRequestInfo ) { HTTPRequestInfo requestInfo = ( HTTPRequestInfo ) info ; URI uri = URIHelper . convertHostToAddress ( requestInfo . getURI ( ) ) ; Iterator iterator = connections . iterator ( ) ; while ( iterator . hasNext ( ) ) { AbstractHTTPManagedConnection connection = ( AbstractHTTPManagedConnection ) iterator . next ( ) ; if ( connection . hasPrincipal ( principal ) & & ( uri . equals ( connection . getRemoteURI ( ) ) | | uri . equals ( connection . getLocalURI ( ) ) ) ) { result = connection ; break ; } } } return result ; }
void test3 ( ) throws Throwable { TCPSManagedConnectionFactory tCPSManagedConnectionFactory0 = new TCPSManagedConnectionFactory ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; ManagedConnectionAcceptor managedConnectionAcceptor0 = tCPSManagedConnectionFactory0 . matchManagedConnectionAcceptors ( ( List ) linkedList0 , ( ConnectionRequestInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnectionAcceptor matchManagedConnectionAcceptors ( List acceptors , ConnectionRequestInfo info ) throws ResourceException { ManagedConnectionAcceptor result = null ; if ( info instanceof SocketRequestInfo ) { Iterator iterator = acceptors . iterator ( ) ; while ( iterator . hasNext ( ) ) { SocketManagedConnectionAcceptor acceptor = ( SocketManagedConnectionAcceptor ) iterator . next ( ) ; if ( info . equals ( acceptor . getRequestInfo ( ) ) ) { result = acceptor ; break ; } } } return result ; }
void test4 ( ) throws Throwable { TCPSManagedConnectionFactory tCPSManagedConnectionFactory0 = new TCPSManagedConnectionFactory ( ) ; LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; URI uRI0 = new URI ( ) ; SocketRequestInfo socketRequestInfo0 = new SocketRequestInfo ( uRI0 ) ; ManagedConnectionAcceptor managedConnectionAcceptor0 = tCPSManagedConnectionFactory0 . matchManagedConnectionAcceptors ( ( List ) linkedList0 , ( ConnectionRequestInfo ) socketRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnectionAcceptor matchManagedConnectionAcceptors ( List acceptors , ConnectionRequestInfo info ) throws ResourceException { ManagedConnectionAcceptor result = null ; if ( info instanceof SocketRequestInfo ) { Iterator iterator = acceptors . iterator ( ) ; while ( iterator . hasNext ( ) ) { SocketManagedConnectionAcceptor acceptor = ( SocketManagedConnectionAcceptor ) iterator . next ( ) ; if ( info . equals ( acceptor . getRequestInfo ( ) ) ) { result = acceptor ; break ; } } } return result ; }
void test1 ( ) throws Throwable { URI uRI0 = new URI ( "dbkMWcO . " , "dbkMWcO . " , "dbkMWcO . " , "dbkMWcO . " , "dbkMWcO . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemeSpecificPart ( ) { StringBuffer schemespec = new StringBuffer ( ) ; if ( _userinfo ! = null | | _host ! = null | | _port ! = - 1 ) { schemespec . append ( " / / " ) ; if ( _userinfo ! = null ) { schemespec . append ( _userinfo ) ; schemespec . append ( '@' ) ; } if ( _host ! = null ) schemespec . append ( _host ) ; if ( _port ! = - 1 ) { schemespec . append ( ' : ' ) ; schemespec . append ( _port ) ; } } if ( _path ! = null ) schemespec . append ( _path ) ; if ( _queryString ! = null ) { schemespec . append ( ' ? ' ) ; schemespec . append ( _queryString ) ; } if ( _fragment ! = null ) { schemespec . append ( '#' ) ; schemespec . append ( _fragment ) ; } return schemespec . toString ( ) ; }
void test2 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URI uRI1 = new URI ( uRI0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemeSpecificPart ( ) { StringBuffer schemespec = new StringBuffer ( ) ; if ( _userinfo ! = null | | _host ! = null | | _port ! = - 1 ) { schemespec . append ( " / / " ) ; if ( _userinfo ! = null ) { schemespec . append ( _userinfo ) ; schemespec . append ( '@' ) ; } if ( _host ! = null ) schemespec . append ( _host ) ; if ( _port ! = - 1 ) { schemespec . append ( ' : ' ) ; schemespec . append ( _port ) ; } } if ( _path ! = null ) schemespec . append ( _path ) ; if ( _queryString ! = null ) { schemespec . append ( ' ? ' ) ; schemespec . append ( _queryString ) ; } if ( _fragment ! = null ) { schemespec . append ( '#' ) ; schemespec . append ( _fragment ) ; } return schemespec . toString ( ) ; }
void test3 ( ) throws Throwable { URI uRI0 = new URI ( "db . " , "db . " , "db . " , 1597 , "db . " , "db . " , "db . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return toString ( ) . hashCode ( ) ; }
void test8 ( ) throws Throwable { URI uRI0 = new URI ( "e" , "e" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPath ( boolean includeQueryString , boolean includeFragment ) { StringBuffer pathString = new StringBuffer ( _path ) ; if ( includeQueryString & & _queryString ! = null ) { pathString . append ( ' ? ' ) ; pathString . append ( _queryString ) ; } if ( includeFragment & & _fragment ! = null ) { pathString . append ( '#' ) ; pathString . append ( _fragment ) ; } return pathString . toString ( ) ; }
void test19 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URI uRI1 = new URI ( uRI0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemeSpecificPart ( ) { StringBuffer schemespec = new StringBuffer ( ) ; if ( _userinfo ! = null | | _host ! = null | | _port ! = - 1 ) { schemespec . append ( " / / " ) ; if ( _userinfo ! = null ) { schemespec . append ( _userinfo ) ; schemespec . append ( '@' ) ; } if ( _host ! = null ) schemespec . append ( _host ) ; if ( _port ! = - 1 ) { schemespec . append ( ' : ' ) ; schemespec . append ( _port ) ; } } if ( _path ! = null ) schemespec . append ( _path ) ; if ( _queryString ! = null ) { schemespec . append ( ' ? ' ) ; schemespec . append ( _queryString ) ; } if ( _fragment ! = null ) { schemespec . append ( '#' ) ; schemespec . append ( _fragment ) ; } return schemespec . toString ( ) ; }
void test21 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URI uRI1 = new URI ( uRI0 , " / / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemeSpecificPart ( ) { StringBuffer schemespec = new StringBuffer ( ) ; if ( _userinfo ! = null | | _host ! = null | | _port ! = - 1 ) { schemespec . append ( " / / " ) ; if ( _userinfo ! = null ) { schemespec . append ( _userinfo ) ; schemespec . append ( '@' ) ; } if ( _host ! = null ) schemespec . append ( _host ) ; if ( _port ! = - 1 ) { schemespec . append ( ' : ' ) ; schemespec . append ( _port ) ; } } if ( _path ! = null ) schemespec . append ( _path ) ; if ( _queryString ! = null ) { schemespec . append ( ' ? ' ) ; schemespec . append ( _queryString ) ; } if ( _fragment ! = null ) { schemespec . append ( '#' ) ; schemespec . append ( _fragment ) ; } return schemespec . toString ( ) ; }
void test23 ( ) throws Throwable { URI uRI0 = new URI ( "dfbkMWcO . " , "dfbkMWcO . " , "dfbkMWcO . " , "dfbkMWcO . " , "dfbkMWcO . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPath ( boolean includeQueryString , boolean includeFragment ) { StringBuffer pathString = new StringBuffer ( _path ) ; if ( includeQueryString & & _queryString ! = null ) { pathString . append ( ' ? ' ) ; pathString . append ( _queryString ) ; } if ( includeFragment & & _fragment ! = null ) { pathString . append ( '#' ) ; pathString . append ( _fragment ) ; } return pathString . toString ( ) ; }
void test24 ( ) throws Throwable { URI uRI0 = new URI ( "e" , "e" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemeSpecificPart ( ) { StringBuffer schemespec = new StringBuffer ( ) ; if ( _userinfo ! = null | | _host ! = null | | _port ! = - 1 ) { schemespec . append ( " / / " ) ; if ( _userinfo ! = null ) { schemespec . append ( _userinfo ) ; schemespec . append ( '@' ) ; } if ( _host ! = null ) schemespec . append ( _host ) ; if ( _port ! = - 1 ) { schemespec . append ( ' : ' ) ; schemespec . append ( _port ) ; } } if ( _path ! = null ) schemespec . append ( _path ) ; if ( _queryString ! = null ) { schemespec . append ( ' ? ' ) ; schemespec . append ( _queryString ) ; } if ( _fragment ! = null ) { schemespec . append ( '#' ) ; schemespec . append ( _fragment ) ; } return schemespec . toString ( ) ; }
void test25 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URI uRI1 = new URI ( uRI0 , "#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test26 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URI uRI1 = new URI ( uRI0 , "hfI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemeSpecificPart ( ) { StringBuffer schemespec = new StringBuffer ( ) ; if ( _userinfo ! = null | | _host ! = null | | _port ! = - 1 ) { schemespec . append ( " / / " ) ; if ( _userinfo ! = null ) { schemespec . append ( _userinfo ) ; schemespec . append ( '@' ) ; } if ( _host ! = null ) schemespec . append ( _host ) ; if ( _port ! = - 1 ) { schemespec . append ( ' : ' ) ; schemespec . append ( _port ) ; } } if ( _path ! = null ) schemespec . append ( _path ) ; if ( _queryString ! = null ) { schemespec . append ( ' ? ' ) ; schemespec . append ( _queryString ) ; } if ( _fragment ! = null ) { schemespec . append ( '#' ) ; schemespec . append ( _fragment ) ; } return schemespec . toString ( ) ; }
void test27 ( ) throws Throwable { URI uRI0 = new URI ( ) ; uRI0 . appendPath ( "eML2dmmX~L@C%d8h ; m" ) ; URI uRI1 = new URI ( uRI0 , "eML2dmmX~L@C%d8h ; m" ) ; uRI1 . appendPath ( "eML2dmmX~L@C%d8h ; m" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemeSpecificPart ( ) { StringBuffer schemespec = new StringBuffer ( ) ; if ( _userinfo ! = null | | _host ! = null | | _port ! = - 1 ) { schemespec . append ( " / / " ) ; if ( _userinfo ! = null ) { schemespec . append ( _userinfo ) ; schemespec . append ( '@' ) ; } if ( _host ! = null ) schemespec . append ( _host ) ; if ( _port ! = - 1 ) { schemespec . append ( ' : ' ) ; schemespec . append ( _port ) ; } } if ( _path ! = null ) schemespec . append ( _path ) ; if ( _queryString ! = null ) { schemespec . append ( ' ? ' ) ; schemespec . append ( _queryString ) ; } if ( _fragment ! = null ) { schemespec . append ( '#' ) ; schemespec . append ( _fragment ) ; } return schemespec . toString ( ) ; }
void test36 ( ) throws Throwable { URI uRI0 = new URI ( ) ; uRI0 . setPath ( "hoQ ! # = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test38 ( ) throws Throwable { URI uRI0 = new URI ( "dbkMWcO . " , "dbkMWcO . " , "dbkMWcO . " , "dbkMWcO . " , "dbkMWcO . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return toString ( ) . hashCode ( ) ; }
void test39 ( ) throws Throwable { URI uRI0 = new URI ( ) ; String string0 = uRI0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test40 ( ) throws Throwable { URI uRI0 = new URI ( "db" , "db" , "db" , 90 , "db" , "db" , "db" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return _port ; }
void test41 ( ) throws Throwable { URI uRI0 = new URI ( "db" , "db" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test42 ( ) throws Throwable { URI uRI0 = new URI ( "db" , "db" , "db" , "db" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setScheme ( String scheme ) throws MalformedURIException { if ( scheme = = null ) throw new MalformedURIException ( "Argument scheme is null" ) ; if ( ! isConformantSchemeName ( scheme ) ) throw new MalformedURIException ( "The scheme is not conformant . " ) ; _scheme = scheme . toLowerCase ( ) ; }
void test45 ( ) throws Throwable { URI uRI0 = new URI ( ) ; uRI0 . setHost ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return _port ; }
void test46 ( ) throws Throwable { URI uRI0 = new URI ( ) ; uRI0 . setHost ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemeSpecificPart ( ) { StringBuffer schemespec = new StringBuffer ( ) ; if ( _userinfo ! = null | | _host ! = null | | _port ! = - 1 ) { schemespec . append ( " / / " ) ; if ( _userinfo ! = null ) { schemespec . append ( _userinfo ) ; schemespec . append ( '@' ) ; } if ( _host ! = null ) schemespec . append ( _host ) ; if ( _port ! = - 1 ) { schemespec . append ( ' : ' ) ; schemespec . append ( _port ) ; } } if ( _path ! = null ) schemespec . append ( _path ) ; if ( _queryString ! = null ) { schemespec . append ( ' ? ' ) ; schemespec . append ( _queryString ) ; } if ( _fragment ! = null ) { schemespec . append ( '#' ) ; schemespec . append ( _fragment ) ; } return schemespec . toString ( ) ; }
void test48 ( ) throws Throwable { URI uRI0 = new URI ( "db . " , "db . " , "db . " , 1597 , "db . " , "db . " , "db . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPort ( int port ) throws MalformedURIException { if ( port > = 0 & & port < = 65535 ) { if ( _host = = null ) throw new MalformedURIException ( "Port cannot be set when host is null ! " ) ; } else if ( port ! = - 1 ) throw new MalformedURIException ( "Invalid port number ! " ) ; _port = port ; }
void test50 ( ) throws Throwable { URI uRI0 = new URI ( ) ; uRI0 . appendPath ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test51 ( ) throws Throwable { URI uRI0 = new URI ( ) ; uRI0 . appendPath ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test53 ( ) throws Throwable { URI uRI0 = new URI ( "e" , "e" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPath ( boolean includeQueryString , boolean includeFragment ) { StringBuffer pathString = new StringBuffer ( _path ) ; if ( includeQueryString & & _queryString ! = null ) { pathString . append ( ' ? ' ) ; pathString . append ( _queryString ) ; } if ( includeFragment & & _fragment ! = null ) { pathString . append ( '#' ) ; pathString . append ( _fragment ) ; } return pathString . toString ( ) ; }
void test54 ( ) throws Throwable { URI uRI0 = new URI ( ) ; uRI0 . appendPath ( " / 0Q9" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPath ( boolean includeQueryString , boolean includeFragment ) { StringBuffer pathString = new StringBuffer ( _path ) ; if ( includeQueryString & & _queryString ! = null ) { pathString . append ( ' ? ' ) ; pathString . append ( _queryString ) ; } if ( includeFragment & & _fragment ! = null ) { pathString . append ( '#' ) ; pathString . append ( _fragment ) ; } return pathString . toString ( ) ; }
void test55 ( ) throws Throwable { URI uRI0 = new URI ( "hfI" , " / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test56 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URI uRI1 = new URI ( uRI0 , " / dfbkMWcO . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test57 ( ) throws Throwable { URI uRI0 = new URI ( ) ; uRI0 . setQueryString ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return _port ; }
void test58 ( ) throws Throwable { URI uRI0 = new URI ( "e" , "e" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setQueryString ( String queryString ) throws MalformedURIException { if ( queryString = = null ) _queryString = null ; else if ( ! isGenericURI ( ) ) throw new MalformedURIException ( "Query string can only be set for a generic URI ! " ) ; else if ( getPath ( ) = = null ) throw new MalformedURIException ( "Query string cannot be set when path is null ! " ) ; else if ( ! isURIString ( queryString ) ) throw new MalformedURIException ( "Query string contains invalid character ! " ) ; else _queryString = queryString ; }
void test59 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URI uRI1 = new URI ( uRI0 , " / / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setQueryString ( String queryString ) throws MalformedURIException { if ( queryString = = null ) _queryString = null ; else if ( ! isGenericURI ( ) ) throw new MalformedURIException ( "Query string can only be set for a generic URI ! " ) ; else if ( getPath ( ) = = null ) throw new MalformedURIException ( "Query string cannot be set when path is null ! " ) ; else if ( ! isURIString ( queryString ) ) throw new MalformedURIException ( "Query string contains invalid character ! " ) ; else _queryString = queryString ; }
void test60 ( ) throws Throwable { URI uRI0 = new URI ( "hfI" , "X" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setFragment ( String fragment ) throws MalformedURIException { if ( fragment = = null ) _fragment = null ; else if ( ! isGenericURI ( ) ) throw new MalformedURIException ( "Fragment can only be set for a generic URI ! " ) ; else if ( getPath ( ) = = null ) throw new MalformedURIException ( "Fragment cannot be set when path is null ! " ) ; else if ( ! isURIString ( fragment ) ) throw new MalformedURIException ( "Fragment contains invalid character ! " ) ; else _fragment = fragment ; }
void test61 ( ) throws Throwable { URI uRI0 = new URI ( "dbkmwco . : / / dbkMWcO . dbkMWcO . / dbkMWcO . ? dbkMWcO . #dbkMWcO . . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setFragment ( String fragment ) throws MalformedURIException { if ( fragment = = null ) _fragment = null ; else if ( ! isGenericURI ( ) ) throw new MalformedURIException ( "Fragment can only be set for a generic URI ! " ) ; else if ( getPath ( ) = = null ) throw new MalformedURIException ( "Fragment cannot be set when path is null ! " ) ; else if ( ! isURIString ( fragment ) ) throw new MalformedURIException ( "Fragment contains invalid character ! " ) ; else _fragment = fragment ; }
void test62 ( ) throws Throwable { URI uRI0 = new URI ( "dfbkMWcO . " , "dfbkMWcO . " , "dfbkMWcO . " , "dfbkMWcO . " , "dfbkMWcO . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemeSpecificPart ( ) { StringBuffer schemespec = new StringBuffer ( ) ; if ( _userinfo ! = null | | _host ! = null | | _port ! = - 1 ) { schemespec . append ( " / / " ) ; if ( _userinfo ! = null ) { schemespec . append ( _userinfo ) ; schemespec . append ( '@' ) ; } if ( _host ! = null ) schemespec . append ( _host ) ; if ( _port ! = - 1 ) { schemespec . append ( ' : ' ) ; schemespec . append ( _port ) ; } } if ( _path ! = null ) schemespec . append ( _path ) ; if ( _queryString ! = null ) { schemespec . append ( ' ? ' ) ; schemespec . append ( _queryString ) ; } if ( _fragment ! = null ) { schemespec . append ( '#' ) ; schemespec . append ( _fragment ) ; } return schemespec . toString ( ) ; }
void test63 ( ) throws Throwable { URI uRI0 = new URI ( ) ; boolean boolean0 = uRI0 . equals ( ( Object ) uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemeSpecificPart ( ) { StringBuffer schemespec = new StringBuffer ( ) ; if ( _userinfo ! = null | | _host ! = null | | _port ! = - 1 ) { schemespec . append ( " / / " ) ; if ( _userinfo ! = null ) { schemespec . append ( _userinfo ) ; schemespec . append ( '@' ) ; } if ( _host ! = null ) schemespec . append ( _host ) ; if ( _port ! = - 1 ) { schemespec . append ( ' : ' ) ; schemespec . append ( _port ) ; } } if ( _path ! = null ) schemespec . append ( _path ) ; if ( _queryString ! = null ) { schemespec . append ( ' ? ' ) ; schemespec . append ( _queryString ) ; } if ( _fragment ! = null ) { schemespec . append ( '#' ) ; schemespec . append ( _fragment ) ; } return schemespec . toString ( ) ; }
void test64 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URI uRI1 = new URI ( "x" , "x" , "Av" , 0 , "x" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return _port ; }
void test65 ( ) throws Throwable { URI uRI0 = new URI ( "f - 3O2QTn" , "f - 3O2QTn" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemeSpecificPart ( ) { StringBuffer schemespec = new StringBuffer ( ) ; if ( _userinfo ! = null | | _host ! = null | | _port ! = - 1 ) { schemespec . append ( " / / " ) ; if ( _userinfo ! = null ) { schemespec . append ( _userinfo ) ; schemespec . append ( '@' ) ; } if ( _host ! = null ) schemespec . append ( _host ) ; if ( _port ! = - 1 ) { schemespec . append ( ' : ' ) ; schemespec . append ( _port ) ; } } if ( _path ! = null ) schemespec . append ( _path ) ; if ( _queryString ! = null ) { schemespec . append ( ' ? ' ) ; schemespec . append ( _queryString ) ; } if ( _fragment ! = null ) { schemespec . append ( '#' ) ; schemespec . append ( _fragment ) ; } return schemespec . toString ( ) ; }
void test66 ( ) throws Throwable { URI uRI0 = new URI ( "A" , "A" , "A" , 0 , "A" , "A" , "A" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemeSpecificPart ( ) { StringBuffer schemespec = new StringBuffer ( ) ; if ( _userinfo ! = null | | _host ! = null | | _port ! = - 1 ) { schemespec . append ( " / / " ) ; if ( _userinfo ! = null ) { schemespec . append ( _userinfo ) ; schemespec . append ( '@' ) ; } if ( _host ! = null ) schemespec . append ( _host ) ; if ( _port ! = - 1 ) { schemespec . append ( ' : ' ) ; schemespec . append ( _port ) ; } } if ( _path ! = null ) schemespec . append ( _path ) ; if ( _queryString ! = null ) { schemespec . append ( ' ? ' ) ; schemespec . append ( _queryString ) ; } if ( _fragment ! = null ) { schemespec . append ( '#' ) ; schemespec . append ( _fragment ) ; } return schemespec . toString ( ) ; }
void test67 ( ) throws Throwable { URI uRI0 = new URI ( "db" , "db" , "db" , 90 , "db" , "db" , "db" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return _port ; }
void test68 ( ) throws Throwable { URI uRI0 = new URI ( "db" , "db" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test69 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URI uRI1 = new URI ( uRI0 , "X$Q & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemeSpecificPart ( ) { StringBuffer schemespec = new StringBuffer ( ) ; if ( _userinfo ! = null | | _host ! = null | | _port ! = - 1 ) { schemespec . append ( " / / " ) ; if ( _userinfo ! = null ) { schemespec . append ( _userinfo ) ; schemespec . append ( '@' ) ; } if ( _host ! = null ) schemespec . append ( _host ) ; if ( _port ! = - 1 ) { schemespec . append ( ' : ' ) ; schemespec . append ( _port ) ; } } if ( _path ! = null ) schemespec . append ( _path ) ; if ( _queryString ! = null ) { schemespec . append ( ' ? ' ) ; schemespec . append ( _queryString ) ; } if ( _fragment ! = null ) { schemespec . append ( '#' ) ; schemespec . append ( _fragment ) ; } return schemespec . toString ( ) ; }
void test70 ( ) throws Throwable { URI uRI0 = new URI ( "e" , "e" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemeSpecificPart ( ) { StringBuffer schemespec = new StringBuffer ( ) ; if ( _userinfo ! = null | | _host ! = null | | _port ! = - 1 ) { schemespec . append ( " / / " ) ; if ( _userinfo ! = null ) { schemespec . append ( _userinfo ) ; schemespec . append ( '@' ) ; } if ( _host ! = null ) schemespec . append ( _host ) ; if ( _port ! = - 1 ) { schemespec . append ( ' : ' ) ; schemespec . append ( _port ) ; } } if ( _path ! = null ) schemespec . append ( _path ) ; if ( _queryString ! = null ) { schemespec . append ( ' ? ' ) ; schemespec . append ( _queryString ) ; } if ( _fragment ! = null ) { schemespec . append ( '#' ) ; schemespec . append ( _fragment ) ; } return schemespec . toString ( ) ; }
void test71 ( ) throws Throwable { boolean boolean0 = URI . isConformantSchemeName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConformantSchemeName ( String scheme ) { if ( scheme = = null | | scheme . trim ( ) . length ( ) = = 0 ) return false ; if ( ! isAlpha ( scheme . charAt ( 0 ) ) ) return false ; char testChar ; for ( int i = 1 ; i < scheme . length ( ) ; i + + ) { testChar = scheme . charAt ( i ) ; if ( ! isAlphanum ( testChar ) & & SCHEME_CHARACTERS . indexOf ( testChar ) = = - 1 ) return false ; } return true ; }
void test72 ( ) throws Throwable { boolean boolean0 = URI . isConformantSchemeName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConformantSchemeName ( String scheme ) { if ( scheme = = null | | scheme . trim ( ) . length ( ) = = 0 ) return false ; if ( ! isAlpha ( scheme . charAt ( 0 ) ) ) return false ; char testChar ; for ( int i = 1 ; i < scheme . length ( ) ; i + + ) { testChar = scheme . charAt ( i ) ; if ( ! isAlphanum ( testChar ) & & SCHEME_CHARACTERS . indexOf ( testChar ) = = - 1 ) return false ; } return true ; }
void test73 ( ) throws Throwable { boolean boolean0 = URI . isConformantSchemeName ( " / / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConformantSchemeName ( String scheme ) { if ( scheme = = null | | scheme . trim ( ) . length ( ) = = 0 ) return false ; if ( ! isAlpha ( scheme . charAt ( 0 ) ) ) return false ; char testChar ; for ( int i = 1 ; i < scheme . length ( ) ; i + + ) { testChar = scheme . charAt ( i ) ; if ( ! isAlphanum ( testChar ) & & SCHEME_CHARACTERS . indexOf ( testChar ) = = - 1 ) return false ; } return true ; }
void test74 ( ) throws Throwable { boolean boolean0 = URI . isWellFormedAddress ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWellFormedAddress ( String address ) { char testChar ; if ( address = = null ) return false ; address = address . trim ( ) ; int addrLength = address . length ( ) ; if ( addrLength = = 0 | | addrLength > 255 ) return false ; if ( address . startsWith ( " . " ) | | address . startsWith ( " - " ) ) return false ; / / rightmost domain label starting with digit indicates IP address / / since top level domain label can only start with an alpha / / see RFC 2396 Section 3 . 2 . 2 int index = address . lastIndexOf ( ' . ' ) ; if ( address . endsWith ( " . " ) ) index = address . substring ( 0 , index ) . lastIndexOf ( ' . ' ) ; if ( index + 1 < addrLength & & isDigit ( address . charAt ( index + 1 ) ) ) { int numDots = 0 ; / / make sure that 1 ) we see only digits and dot separators , 2 ) that / / any dot separator is preceded and followed by a digit and / / 3 ) that we find 3 dots for ( int i = 0 ; i < addrLength ; i + + ) { testChar = address . charAt ( i ) ; if ( testChar = = ' . ' ) { if ( ! isDigit ( address . charAt ( i - 1 ) ) | | ( i + 1 < addrLength & & ! isDigit ( address . charAt ( i + 1 ) ) ) ) return false ; numDots + + ; } else if ( ! isDigit ( testChar ) ) return false ; } if ( numDots ! = 3 ) return false ; } else { / / domain labels can contain alphanumerics and ' - " / / but must start and end with an alphanumeric for ( int i = 0 ; i < addrLength ; i + + ) { testChar = address . charAt ( i ) ; if ( testChar = = ' . ' ) { if ( ! isAlphanum ( address . charAt ( i - 1 ) ) ) return false ; if ( i + 1 < addrLength & & ! isAlphanum ( address . charAt ( i + 1 ) ) ) return false ; } else if ( ! isAlphanum ( testChar ) & & testChar ! = ' - ' ) return false ; } } return true ; }
void test75 ( ) throws Throwable { boolean boolean0 = URI . isWellFormedAddress ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWellFormedAddress ( String address ) { char testChar ; if ( address = = null ) return false ; address = address . trim ( ) ; int addrLength = address . length ( ) ; if ( addrLength = = 0 | | addrLength > 255 ) return false ; if ( address . startsWith ( " . " ) | | address . startsWith ( " - " ) ) return false ; / / rightmost domain label starting with digit indicates IP address / / since top level domain label can only start with an alpha / / see RFC 2396 Section 3 . 2 . 2 int index = address . lastIndexOf ( ' . ' ) ; if ( address . endsWith ( " . " ) ) index = address . substring ( 0 , index ) . lastIndexOf ( ' . ' ) ; if ( index + 1 < addrLength & & isDigit ( address . charAt ( index + 1 ) ) ) { int numDots = 0 ; / / make sure that 1 ) we see only digits and dot separators , 2 ) that / / any dot separator is preceded and followed by a digit and / / 3 ) that we find 3 dots for ( int i = 0 ; i < addrLength ; i + + ) { testChar = address . charAt ( i ) ; if ( testChar = = ' . ' ) { if ( ! isDigit ( address . charAt ( i - 1 ) ) | | ( i + 1 < addrLength & & ! isDigit ( address . charAt ( i + 1 ) ) ) ) return false ; numDots + + ; } else if ( ! isDigit ( testChar ) ) return false ; } if ( numDots ! = 3 ) return false ; } else { / / domain labels can contain alphanumerics and ' - " / / but must start and end with an alphanumeric for ( int i = 0 ; i < addrLength ; i + + ) { testChar = address . charAt ( i ) ; if ( testChar = = ' . ' ) { if ( ! isAlphanum ( address . charAt ( i - 1 ) ) ) return false ; if ( i + 1 < addrLength & & ! isAlphanum ( address . charAt ( i + 1 ) ) ) return false ; } else if ( ! isAlphanum ( testChar ) & & testChar ! = ' - ' ) return false ; } } return true ; }
void test76 ( ) throws Throwable { boolean boolean0 = URI . isWellFormedAddress ( " . 3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWellFormedAddress ( String address ) { char testChar ; if ( address = = null ) return false ; address = address . trim ( ) ; int addrLength = address . length ( ) ; if ( addrLength = = 0 | | addrLength > 255 ) return false ; if ( address . startsWith ( " . " ) | | address . startsWith ( " - " ) ) return false ; / / rightmost domain label starting with digit indicates IP address / / since top level domain label can only start with an alpha / / see RFC 2396 Section 3 . 2 . 2 int index = address . lastIndexOf ( ' . ' ) ; if ( address . endsWith ( " . " ) ) index = address . substring ( 0 , index ) . lastIndexOf ( ' . ' ) ; if ( index + 1 < addrLength & & isDigit ( address . charAt ( index + 1 ) ) ) { int numDots = 0 ; / / make sure that 1 ) we see only digits and dot separators , 2 ) that / / any dot separator is preceded and followed by a digit and / / 3 ) that we find 3 dots for ( int i = 0 ; i < addrLength ; i + + ) { testChar = address . charAt ( i ) ; if ( testChar = = ' . ' ) { if ( ! isDigit ( address . charAt ( i - 1 ) ) | | ( i + 1 < addrLength & & ! isDigit ( address . charAt ( i + 1 ) ) ) ) return false ; numDots + + ; } else if ( ! isDigit ( testChar ) ) return false ; } if ( numDots ! = 3 ) return false ; } else { / / domain labels can contain alphanumerics and ' - " / / but must start and end with an alphanumeric for ( int i = 0 ; i < addrLength ; i + + ) { testChar = address . charAt ( i ) ; if ( testChar = = ' . ' ) { if ( ! isAlphanum ( address . charAt ( i - 1 ) ) ) return false ; if ( i + 1 < addrLength & & ! isAlphanum ( address . charAt ( i + 1 ) ) ) return false ; } else if ( ! isAlphanum ( testChar ) & & testChar ! = ' - ' ) return false ; } } return true ; }
void test77 ( ) throws Throwable { boolean boolean0 = URI . isWellFormedAddress ( " - 3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWellFormedAddress ( String address ) { char testChar ; if ( address = = null ) return false ; address = address . trim ( ) ; int addrLength = address . length ( ) ; if ( addrLength = = 0 | | addrLength > 255 ) return false ; if ( address . startsWith ( " . " ) | | address . startsWith ( " - " ) ) return false ; / / rightmost domain label starting with digit indicates IP address / / since top level domain label can only start with an alpha / / see RFC 2396 Section 3 . 2 . 2 int index = address . lastIndexOf ( ' . ' ) ; if ( address . endsWith ( " . " ) ) index = address . substring ( 0 , index ) . lastIndexOf ( ' . ' ) ; if ( index + 1 < addrLength & & isDigit ( address . charAt ( index + 1 ) ) ) { int numDots = 0 ; / / make sure that 1 ) we see only digits and dot separators , 2 ) that / / any dot separator is preceded and followed by a digit and / / 3 ) that we find 3 dots for ( int i = 0 ; i < addrLength ; i + + ) { testChar = address . charAt ( i ) ; if ( testChar = = ' . ' ) { if ( ! isDigit ( address . charAt ( i - 1 ) ) | | ( i + 1 < addrLength & & ! isDigit ( address . charAt ( i + 1 ) ) ) ) return false ; numDots + + ; } else if ( ! isDigit ( testChar ) ) return false ; } if ( numDots ! = 3 ) return false ; } else { / / domain labels can contain alphanumerics and ' - " / / but must start and end with an alphanumeric for ( int i = 0 ; i < addrLength ; i + + ) { testChar = address . charAt ( i ) ; if ( testChar = = ' . ' ) { if ( ! isAlphanum ( address . charAt ( i - 1 ) ) ) return false ; if ( i + 1 < addrLength & & ! isAlphanum ( address . charAt ( i + 1 ) ) ) return false ; } else if ( ! isAlphanum ( testChar ) & & testChar ! = ' - ' ) return false ; } } return true ; }
void test79 ( ) throws Throwable { boolean boolean0 = URI . isWellFormedAddress ( "0QI97" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWellFormedAddress ( String address ) { char testChar ; if ( address = = null ) return false ; address = address . trim ( ) ; int addrLength = address . length ( ) ; if ( addrLength = = 0 | | addrLength > 255 ) return false ; if ( address . startsWith ( " . " ) | | address . startsWith ( " - " ) ) return false ; / / rightmost domain label starting with digit indicates IP address / / since top level domain label can only start with an alpha / / see RFC 2396 Section 3 . 2 . 2 int index = address . lastIndexOf ( ' . ' ) ; if ( address . endsWith ( " . " ) ) index = address . substring ( 0 , index ) . lastIndexOf ( ' . ' ) ; if ( index + 1 < addrLength & & isDigit ( address . charAt ( index + 1 ) ) ) { int numDots = 0 ; / / make sure that 1 ) we see only digits and dot separators , 2 ) that / / any dot separator is preceded and followed by a digit and / / 3 ) that we find 3 dots for ( int i = 0 ; i < addrLength ; i + + ) { testChar = address . charAt ( i ) ; if ( testChar = = ' . ' ) { if ( ! isDigit ( address . charAt ( i - 1 ) ) | | ( i + 1 < addrLength & & ! isDigit ( address . charAt ( i + 1 ) ) ) ) return false ; numDots + + ; } else if ( ! isDigit ( testChar ) ) return false ; } if ( numDots ! = 3 ) return false ; } else { / / domain labels can contain alphanumerics and ' - " / / but must start and end with an alphanumeric for ( int i = 0 ; i < addrLength ; i + + ) { testChar = address . charAt ( i ) ; if ( testChar = = ' . ' ) { if ( ! isAlphanum ( address . charAt ( i - 1 ) ) ) return false ; if ( i + 1 < addrLength & & ! isAlphanum ( address . charAt ( i + 1 ) ) ) return false ; } else if ( ! isAlphanum ( testChar ) & & testChar ! = ' - ' ) return false ; } } return true ; }
void test81 ( ) throws Throwable { URI uRI0 = new URI ( "f - 3O2QTn" , "f - 3O2QTn" , "f - 3O2QTn" , 929 , " / / 0QI97" , " / / 0QI97" , " / / 0QI97" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPath ( boolean includeQueryString , boolean includeFragment ) { StringBuffer pathString = new StringBuffer ( _path ) ; if ( includeQueryString & & _queryString ! = null ) { pathString . append ( ' ? ' ) ; pathString . append ( _queryString ) ; } if ( includeFragment & & _fragment ! = null ) { pathString . append ( '#' ) ; pathString . append ( _fragment ) ; } return pathString . toString ( ) ; }
void test1 ( ) throws Throwable { Map < Object , Object > map0 = URIHelper . parseQuery ( "t = tv" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { URI uRI0 = URIHelper . create ( "ZXeNjS" , "ZXeNjS" , 1781 , "ZXeNjS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String name ) { return ( String ) _properties . get ( name ) ; }
void test5 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URI uRI1 = URIHelper . convertHostToAddress ( uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHost ( String host ) { if ( host . equals ( "localhost" ) ) { try { host = InetAddress . getLocalHost ( ) . getHostAddress ( ) ; } catch ( UnknownHostException ignore ) { } } return host ; }
void test6 ( ) throws Throwable { URI uRI0 = new URI ( ) ; uRI0 . setHost ( "" ) ; URI uRI1 = URIHelper . convertHostToAddress ( uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHost ( String host ) { if ( host . equals ( "localhost" ) ) { try { host = InetAddress . getLocalHost ( ) . getHostAddress ( ) ; } catch ( UnknownHostException ignore ) { } } return host ; }
void test7 ( ) throws Throwable { URI uRI0 = URIHelper . create ( "ZXeNjS" , "ZXeNjS" , 1781 , "ZXeNjS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemeSpecificPart ( ) { StringBuffer schemespec = new StringBuffer ( ) ; if ( _userinfo ! = null | | _host ! = null | | _port ! = - 1 ) { schemespec . append ( " / / " ) ; if ( _userinfo ! = null ) { schemespec . append ( _userinfo ) ; schemespec . append ( '@' ) ; } if ( _host ! = null ) schemespec . append ( _host ) ; if ( _port ! = - 1 ) { schemespec . append ( ' : ' ) ; schemespec . append ( _port ) ; } } if ( _path ! = null ) schemespec . append ( _path ) ; if ( _queryString ! = null ) { schemespec . append ( ' ? ' ) ; schemespec . append ( _queryString ) ; } if ( _fragment ! = null ) { schemespec . append ( '#' ) ; schemespec . append ( _fragment ) ; } return schemespec . toString ( ) ; }
void test8 ( ) throws Throwable { URI uRI0 = new URI ( "f" , "f" , "f" , 24 , "f" , "f" , "f" ) ; BasicPrincipal basicPrincipal0 = URIHelper . getPrincipal ( uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test9 ( ) throws Throwable { URI uRI0 = new URI ( ) ; uRI0 . setHost ( "" ) ; uRI0 . setUserinfo ( "" ) ; BasicPrincipal basicPrincipal0 = URIHelper . getPrincipal ( uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Principal getPrincipal ( ) { return _principal ; }
void test10 ( ) throws Throwable { URI uRI0 = new URI ( "f" , "f" , "f" , 24 , "f" , "f" , "f" ) ; URI uRI1 = URIHelper . getURISansQuery ( uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return _port ; }
void test11 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URI uRI1 = URIHelper . getURISansQuery ( uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return _port ; }
void test0 ( ) throws Throwable { PoolEntry poolEntry0 = new PoolEntry ( ( ManagedConnection ) null , false ) ; poolEntry0 . getManagedConnection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAccepted ( ) { return _accepted ; }
void test1 ( ) throws Throwable { PoolEntry poolEntry0 = new PoolEntry ( ( ManagedConnection ) null , false ) ; boolean boolean0 = poolEntry0 . getAccepted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInitialised ( ) { return _initialised ; }
void test2 ( ) throws Throwable { PoolEntry poolEntry0 = new PoolEntry ( ( ManagedConnection ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInitialised ( ) { return _initialised ; }
void test3 ( ) throws Throwable { PoolEntry poolEntry0 = new PoolEntry ( ( ManagedConnection ) null , false ) ; boolean boolean0 = poolEntry0 . isInitialised ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAccepted ( ) { return _accepted ; }
void test0 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 1 ] ; ObjID objID0 = new ObjID ( ) ; Request request0 = new Request ( objID0 , ( Method ) null , objectArray0 , ( - 1L ) ) ; request0 . getArgs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test1 ( ) throws Throwable { ObjID objID0 = new ObjID ( 0 ) ; Object [ ] objectArray0 = new Object [ 10 ] ; Request request0 = new Request ( objID0 , ( Method ) null , objectArray0 , ( long ) 0 ) ; Method method0 = request0 . getMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Method getMethod ( Object object , long methodID ) throws NoSuchMethodException { Method result = null ; Method [ ] methods = MethodHelper . getAllInterfaceMethods ( object . getClass ( ) ) ; for ( int i = 0 ; i < methods . length ; + + i ) { Method method = methods [ i ] ; if ( MethodHelper . getMethodID ( method ) = = methodID ) { result = method ; break ; } } if ( result = = null ) { throw new NoSuchMethodException ( "Failed to resolve method for methodID = " + methodID ) ; } return result ; }
void test2 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 1 ] ; ObjID objID0 = new ObjID ( ) ; Request request0 = new Request ( objID0 , ( Method ) null , objectArray0 , ( - 1L ) ) ; long long0 = request0 . getMethodID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMethodID ( Method method ) { int shift = 32 ; long hash = method . getDeclaringClass ( ) . getName ( ) . hashCode ( ) ; hash ^ = method . getName ( ) . hashCode ( ) ; hash ^ = method . getReturnType ( ) . getName ( ) . hashCode ( ) ; Class [ ] args = method . getParameterTypes ( ) ; for ( int i = 0 ; i < args . length ; + + i ) { hash ^ = ( ( long ) args [ i ] . getName ( ) . hashCode ( ) ) < < shift ; } return hash ; }
void test3 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 1 ] ; ObjID objID0 = new ObjID ( ) ; Request request0 = new Request ( objID0 , ( Method ) null , objectArray0 , ( - 1L ) ) ; request0 . getObjID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test5 ( ) throws Throwable { ObjID objID0 = new ObjID ( 0 ) ; Object [ ] objectArray0 = new Object [ 10 ] ; Request request0 = new Request ( objID0 , ( Method ) null , objectArray0 , ( long ) 0 ) ; String string0 = request0 . getURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" URI getURI ( String scheme , String host , int port ) { URI result ; try { result = URIHelper . create ( scheme , getHost ( host ) , port ) ; } catch ( InvalidURIException exception ) { throw new IllegalStateException ( "Failed to create URI : " + exception ) ; } return result ; }
void test3 ( ) throws Throwable { RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory ( ) ; ConnectionFactory connectionFactory0 = rMIManagedConnectionFactory0 . createConnectionFactory ( ( ConnectionManager ) null ) ; Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; UserManager userManager0 = new UserManager ( configuration0 , databaseService0 ) ; AuthenticationMgr authenticationMgr0 = new AuthenticationMgr ( userManager0 ) ; ContextInvocationHandler contextInvocationHandler0 = new ContextInvocationHandler ( ( InvocationHandler ) null , connectionFactory0 , ( ManagedConnection ) null ) ; HashMap < Integer , Integer > hashMap0 = new HashMap < Integer , Integer > ( ) ; DefaultConnectionManager defaultConnectionManager0 = new DefaultConnectionManager ( ( InvocationHandler ) contextInvocationHandler0 , ( Authenticator ) authenticationMgr0 , ( Map ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return _keyStore = = null & & _keyStorePassword = = null & & _keyStoreType = = null & & _trustStore = = null & & _trustStorePassword = = null & & _trustStoreType = = null ; }
void test6 ( ) throws Throwable { RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory ( ) ; ConnectionFactory connectionFactory0 = rMIManagedConnectionFactory0 . createConnectionFactory ( ( ConnectionManager ) null ) ; Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; UserManager userManager0 = new UserManager ( configuration0 , databaseService0 ) ; AuthenticationMgr authenticationMgr0 = new AuthenticationMgr ( userManager0 ) ; ContextInvocationHandler contextInvocationHandler0 = new ContextInvocationHandler ( ( InvocationHandler ) null , connectionFactory0 , ( ManagedConnection ) null ) ; HashMap < Integer , Integer > hashMap0 = new HashMap < Integer , Integer > ( ) ; DefaultConnectionManager defaultConnectionManager0 = new DefaultConnectionManager ( ( InvocationHandler ) contextInvocationHandler0 , ( Authenticator ) authenticationMgr0 , ( Map ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canConnect ( URI uri ) { return _connectScheme . equals ( uri . getScheme ( ) ) ; }
void test7 ( ) throws Throwable { RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory ( ) ; ConnectionFactory connectionFactory0 = rMIManagedConnectionFactory0 . createConnectionFactory ( ( ConnectionManager ) null ) ; Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; UserManager userManager0 = new UserManager ( configuration0 , databaseService0 ) ; AuthenticationMgr authenticationMgr0 = new AuthenticationMgr ( userManager0 ) ; ContextInvocationHandler contextInvocationHandler0 = new ContextInvocationHandler ( ( InvocationHandler ) null , connectionFactory0 , ( ManagedConnection ) null ) ; HashMap < Integer , Integer > hashMap0 = new HashMap < Integer , Integer > ( ) ; DefaultConnectionManager defaultConnectionManager0 = new DefaultConnectionManager ( ( InvocationHandler ) contextInvocationHandler0 , ( Authenticator ) authenticationMgr0 , ( Map ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canAccept ( URI uri ) { return _acceptScheme . equals ( uri . getScheme ( ) ) ; }
void test0 ( ) throws Throwable { MarshalledObject < Object > marshalledObject0 = new MarshalledObject < Object > ( ( Object ) "" ) ; URI uRI0 = new URI ( ) ; CallerImpl callerImpl0 = new CallerImpl ( uRI0 , uRI0 ) ; MarshalledInvocation marshalledInvocation0 = new MarshalledInvocation ( ( MarshalledObject ) marshalledObject0 , ( Caller ) callerImpl0 ) ; CallerImpl callerImpl1 = ( CallerImpl ) marshalledInvocation0 . getCaller ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Caller getCaller ( ) throws RemoteException ; / * * * Registers a caller event listener . * * @param listener the listener to notify * @throws RemoteException for any error * / void addCallerListener ( CallerListener listener ) throws RemoteException ; / * * * Register a caller event listener . * * @param uri the remote URI to listen on * @param listener the listener to notify * @throws RemoteException for any error * / void addCallerListener ( String uri , CallerListener listener ) throws RemoteException ; / * * * Deregisters a caller event listener . * * @param listener the listener to remove * @throws RemoteException for any error * / void removeCallerListener ( CallerListener listener ) throws RemoteException ; / * * * Deregister a caller event listener . * * @param uri the remote URI the listener is listening for events on * @param listener the listener to remove * @throws RemoteException for any error * / void removeCallerListener ( String uri , CallerListener listener ) throws RemoteException ; / * * * Shuts down the ORB . * * @throws RemoteException for any error * / void shutdown ( ) throws RemoteException ; }
void test0 ( ) throws Throwable { Response response0 = new Response ( ( Object ) "" , ( Method ) null ) ; boolean boolean0 = response0 . isException ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isException ( ) { return ! isReturn ( ) ; }
void test1 ( ) throws Throwable { Response response0 = new Response ( ( Throwable ) null ) ; Object object0 = response0 . getObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObject ( ) ; / * * * Determines if this is equal to another object . * * @param obj the object to compare * @return < code > null < / code > if the comparison is undefined , * < code > SBool . TRUE < / code > if < code > this = obj < / code > , otherwise * < code > SBool . FALSE < / code > if < code > this & lt ; & gt ; obj < / code > * / SBool equal ( SObject obj ) { SBool result = SBool . FALSE ; if ( getObject ( ) . equals ( obj . getObject ( ) ) ) { result = SBool . TRUE ; } return result ; }
void test0 ( ) throws Throwable { URI uRI0 = new URI ( ) ; CallerImpl callerImpl0 = new CallerImpl ( uRI0 , uRI0 ) ; URI uRI1 = callerImpl0 . getLocalURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" URI getLocalURI ( ) { return _localURI ; }
void test1 ( ) throws Throwable { URI uRI0 = new URI ( ) ; CallerImpl callerImpl0 = new CallerImpl ( uRI0 , uRI0 ) ; URI uRI1 = callerImpl0 . getRemoteURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" URI getRemoteURI ( ) { return _remoteURI ; }
void test0 ( ) throws Throwable { ManagedConnectionHandle managedConnectionHandle0 = new ManagedConnectionHandle ( ( DefaultConnectionPool ) null , ( ManagedConnection ) null , ( ConnectionFactory ) null ) ; boolean boolean0 = managedConnectionHandle0 . usedSinceLastPing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canDestroy ( ) { return ( _connectionCount = = 0 ) & & ( ! _used ) ; }
void test2 ( ) throws Throwable { RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory ( ) ; ConnectionFactory connectionFactory0 = rMIManagedConnectionFactory0 . createConnectionFactory ( ( ConnectionManager ) null ) ; ManagedConnectionHandle managedConnectionHandle0 = new ManagedConnectionHandle ( ( DefaultConnectionPool ) null , ( ManagedConnection ) null , connectionFactory0 ) ; boolean boolean0 = managedConnectionHandle0 . used ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean pinging ( ) { return _pinging ; }
void test3 ( ) throws Throwable { ManagedConnectionHandle managedConnectionHandle0 = new ManagedConnectionHandle ( ( DefaultConnectionPool ) null , ( ManagedConnection ) null , ( ConnectionFactory ) null ) ; managedConnectionHandle0 . pinged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canDestroy ( ) { return ( _connectionCount = = 0 ) & & ( ! _used ) ; }
void test4 ( ) throws Throwable { ManagedConnectionHandle managedConnectionHandle0 = new ManagedConnectionHandle ( ( DefaultConnectionPool ) null , ( ManagedConnection ) null , ( ConnectionFactory ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean used ( ) { return _used ; }
void test7 ( ) throws Throwable { ManagedConnectionHandle managedConnectionHandle0 = new ManagedConnectionHandle ( ( DefaultConnectionPool ) null , ( ManagedConnection ) null , ( ConnectionFactory ) null ) ; int int0 = managedConnectionHandle0 . incPingWaits ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int incPingWaits ( ) { return + + _pingWaits ; }
void test10 ( ) throws Throwable { ManagedConnectionHandle managedConnectionHandle0 = new ManagedConnectionHandle ( ( DefaultConnectionPool ) null , ( ManagedConnection ) null , ( ConnectionFactory ) null ) ; managedConnectionHandle0 . clearUsed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canDestroy ( ) { return ( _connectionCount = = 0 ) & & ( ! _used ) ; }
void test11 ( ) throws Throwable { ManagedConnectionHandle managedConnectionHandle0 = new ManagedConnectionHandle ( ( DefaultConnectionPool ) null , ( ManagedConnection ) null , ( ConnectionFactory ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void ping ( ) throws RemoteException ; / * * * Notifies that the remote peer is disconnecting . * * @throws RemoteException for any error * / void disconnect ( ) throws RemoteException ; }
void test13 ( ) throws Throwable { ManagedConnectionHandle managedConnectionHandle0 = new ManagedConnectionHandle ( ( DefaultConnectionPool ) null , ( ManagedConnection ) null , ( ConnectionFactory ) null ) ; boolean boolean0 = managedConnectionHandle0 . pinging ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canDestroy ( ) { return ( _connectionCount = = 0 ) & & ( ! _used ) ; }
void test15 ( ) throws Throwable { HTTPManagedConnectionFactory hTTPManagedConnectionFactory0 = new HTTPManagedConnectionFactory ( ) ; AbstractHTTPConnectionFactory abstractHTTPConnectionFactory0 = new AbstractHTTPConnectionFactory ( "#I < OQ ] . h : f$u + " , "#I < OQ ] . h : f$u + " , ( ManagedConnectionFactory ) hTTPManagedConnectionFactory0 , ( ConnectionManager ) null ) ; ManagedConnectionHandle managedConnectionHandle0 = new ManagedConnectionHandle ( ( DefaultConnectionPool ) null , ( ManagedConnection ) null , ( ConnectionFactory ) abstractHTTPConnectionFactory0 ) ; boolean boolean0 = managedConnectionHandle0 . canDestroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean pinging ( ) { return _pinging ; }
void test1 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; URI uRI1 = uRIRequestInfo0 . getURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQueryString ( ) { return _queryString ; }
void test2 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; Principal principal0 = uRIRequestInfo0 . getPrincipal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Principal getPrincipal ( ) { return _principal ; }
void test3 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; Properties properties0 = new Properties ( "'K . * ) " ) ; uRIRequestInfo0 . export ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHost ( String host ) { if ( host . equals ( "localhost" ) ) { try { host = InetAddress . getLocalHost ( ) . getHostAddress ( ) ; } catch ( UnknownHostException ignore ) { } } return host ; }
void test4 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; int int0 = uRIRequestInfo0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return toString ( ) . hashCode ( ) ; }
void test5 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; int int0 = uRIRequestInfo0 . getPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return _port ; }
void test6 ( ) throws Throwable { URI uRI0 = new URI ( ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; Inet4Address inet4Address0 = ( Inet4Address ) uRIRequestInfo0 . getHostAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InetAddress getHostAddress ( ) throws UnknownHostException { String host = getHost ( ) ; return ( host ! = null ) ? InetAddress . getByName ( host ) : null ; }
void test7 ( ) throws Throwable { URI uRI0 = new URI ( "true" , "true" , "JgcU" , 0 , "true" , "true" , "true" ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; boolean boolean0 = uRIRequestInfo0 . equals ( ( Object ) "true ? true#true" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test8 ( ) throws Throwable { URI uRI0 = new URI ( "true" , "true" , "JgcU" , 0 , "true" , "true" , "true" ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; boolean boolean0 = uRIRequestInfo0 . equals ( ( Object ) uRIRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test9 ( ) throws Throwable { URI uRI0 = new URI ( "true" , "true" , "JgcU" , 0 , "true" , "true" , "true" ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; URIRequestInfo uRIRequestInfo1 = new URIRequestInfo ( uRI0 ) ; boolean boolean0 = uRIRequestInfo0 . equals ( ( Object ) uRIRequestInfo1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test1 ( ) throws Throwable { AbstractHTTPConnectionFactory abstractHTTPConnectionFactory0 = new AbstractHTTPConnectionFactory ( "org . exlab . jms . config . AdministeredQueue" , "org . exlab . jms . config . AdministeredQueue" , ( ManagedConnectionFactory ) null , ( ConnectionManager ) null ) ; URI uRI0 = new URI ( "org . exlab . jms . config . AdministeredQueue" , "org . exlab . jms . config . AdministeredQueue" ) ; boolean boolean0 = abstractHTTPConnectionFactory0 . canConnect ( uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canConnect ( URI uri ) { return _connectScheme . equals ( uri . getScheme ( ) ) ; }
void test2 ( ) throws Throwable { RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory ( ) ; ConnectionFactory connectionFactory0 = rMIManagedConnectionFactory0 . createConnectionFactory ( ( ConnectionManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ConnectionFactory createConnectionFactory ( ConnectionManager manager ) throws ResourceException { return new TCPConnectionFactory ( this , manager ) ; }
void test3 ( ) throws Throwable { RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory ( ) ; AbstractHTTPConnectionFactory abstractHTTPConnectionFactory0 = new AbstractHTTPConnectionFactory ( "org . exlab . jms . config . AdministeredQoeue" , "org . exlab . jms . config . AdministeredQoeue" , ( ManagedConnectionFactory ) rMIManagedConnectionFactory0 , ( ConnectionManager ) null ) ; URI uRI0 = new URI ( ) ; boolean boolean0 = abstractHTTPConnectionFactory0 . canAccept ( uRI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canAccept ( URI uri ) { return _acceptScheme . equals ( uri . getScheme ( ) ) ; }
void test4 ( ) throws Throwable { AbstractHTTPConnectionFactory abstractHTTPConnectionFactory0 = new AbstractHTTPConnectionFactory ( "org . exlab . jms . config . AdministeredQueue" , "org . exlab . jms . config . AdministeredQueue" , ( ManagedConnectionFactory ) null , ( ConnectionManager ) null ) ; ConnectionManager connectionManager0 = abstractHTTPConnectionFactory0 . getConnectionManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ConnectionManager getConnectionManager ( ) { return _manager ; }
void test6 ( ) throws Throwable { RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory ( ) ; AbstractHTTPConnectionFactory abstractHTTPConnectionFactory0 = new AbstractHTTPConnectionFactory ( "org . exlab . jms . config . AdministeredQoeue" , "org . exlab . jms . config . AdministeredQoeue" , ( ManagedConnectionFactory ) rMIManagedConnectionFactory0 , ( ConnectionManager ) null ) ; RMIManagedConnectionFactory rMIManagedConnectionFactory1 = ( RMIManagedConnectionFactory ) abstractHTTPConnectionFactory0 . getManagedConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnectionFactory getManagedConnectionFactory ( ) { return _factory ; }
void test1 ( ) throws Throwable { TCPSManagedConnectionFactory tCPSManagedConnectionFactory0 = new TCPSManagedConnectionFactory ( ) ; VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory ( ) ; ConnectionFactory connectionFactory0 = vMManagedConnectionFactory0 . createConnectionFactory ( ( ConnectionManager ) null ) ; ContextInvocationHandler contextInvocationHandler0 = new ContextInvocationHandler ( ( InvocationHandler ) null , connectionFactory0 , ( ManagedConnection ) null ) ; Properties properties0 = new Properties ( "org . exolab . jms . config . Subscriber" ) ; Map < Object , Object > map0 = properties0 . getProperties ( ) ; DefaultConnectionPool defaultConnectionPool0 = new DefaultConnectionPool ( ( ManagedConnectionFactory ) tCPSManagedConnectionFactory0 , ( InvocationHandler ) contextInvocationHandler0 , connectionFactory0 , ( Map ) map0 ) ; ManagedConnectionAcceptor managedConnectionAcceptor0 = defaultConnectionPool0 . matchManagedConnectionAcceptors ( ( ConnectionRequestInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnectionAcceptor matchManagedConnectionAcceptors ( List acceptors , ConnectionRequestInfo info ) throws ResourceException { ManagedConnectionAcceptor result = null ; if ( info instanceof SocketRequestInfo ) { Iterator iterator = acceptors . iterator ( ) ; while ( iterator . hasNext ( ) ) { SocketManagedConnectionAcceptor acceptor = ( SocketManagedConnectionAcceptor ) iterator . next ( ) ; if ( info . equals ( acceptor . getRequestInfo ( ) ) ) { result = acceptor ; break ; } } } return result ; }
void test4 ( ) throws Throwable { TCPSManagedConnectionFactory tCPSManagedConnectionFactory0 = new TCPSManagedConnectionFactory ( ) ; VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory ( ) ; ConnectionFactory connectionFactory0 = vMManagedConnectionFactory0 . createConnectionFactory ( ( ConnectionManager ) null ) ; ContextInvocationHandler contextInvocationHandler0 = new ContextInvocationHandler ( ( InvocationHandler ) null , connectionFactory0 , ( ManagedConnection ) null ) ; Properties properties0 = new Properties ( "org . exolab . jms . config . Subscriber" ) ; Map < Object , Object > map0 = properties0 . getProperties ( ) ; DefaultConnectionPool defaultConnectionPool0 = new DefaultConnectionPool ( ( ManagedConnectionFactory ) tCPSManagedConnectionFactory0 , ( InvocationHandler ) contextInvocationHandler0 , connectionFactory0 , ( Map ) map0 ) ; DefaultConnectionPool defaultConnectionPool1 = ( DefaultConnectionPool ) defaultConnectionPool0 . getManagedConnectionAcceptorListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnectionAcceptorListener getManagedConnectionAcceptorListener ( ) { return this ; }
void test9 ( ) throws Throwable { TCPSManagedConnectionFactory tCPSManagedConnectionFactory0 = new TCPSManagedConnectionFactory ( ) ; VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory ( ) ; ConnectionFactory connectionFactory0 = vMManagedConnectionFactory0 . createConnectionFactory ( ( ConnectionManager ) null ) ; ContextInvocationHandler contextInvocationHandler0 = new ContextInvocationHandler ( ( InvocationHandler ) null , connectionFactory0 , ( ManagedConnection ) null ) ; Properties properties0 = new Properties ( "org . exolab . jms . config . Subscriber" ) ; Map < Object , Object > map0 = properties0 . getProperties ( ) ; DefaultConnectionPool defaultConnectionPool0 = new DefaultConnectionPool ( ( ManagedConnectionFactory ) tCPSManagedConnectionFactory0 , ( InvocationHandler ) contextInvocationHandler0 , connectionFactory0 , ( Map ) map0 ) ; URI uRI0 = new URI ( "org . exolab . jms . config . Subscriber" , "org . exolab . jms . config . Subscriber" ) ; URIRequestInfo uRIRequestInfo0 = new URIRequestInfo ( uRI0 ) ; ManagedConnection managedConnection0 = defaultConnectionPool0 . matchManagedConnections ( ( Principal ) null , ( ConnectionRequestInfo ) uRIRequestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ManagedConnection matchManagedConnections ( List connections , Principal principal , ConnectionRequestInfo info ) throws ResourceException { ManagedConnection result = null ; if ( info instanceof HTTPRequestInfo ) { HTTPRequestInfo requestInfo = ( HTTPRequestInfo ) info ; URI uri = URIHelper . convertHostToAddress ( requestInfo . getURI ( ) ) ; Iterator iterator = connections . iterator ( ) ; while ( iterator . hasNext ( ) ) { AbstractHTTPManagedConnection connection = ( AbstractHTTPManagedConnection ) iterator . next ( ) ; if ( connection . hasPrincipal ( principal ) & & ( uri . equals ( connection . getRemoteURI ( ) ) | | uri . equals ( connection . getLocalURI ( ) ) ) ) { result = connection ; break ; } } } return result ; }
void test0 ( ) throws Throwable { ChannelInvocation channelInvocation0 = new ChannelInvocation ( ( Channel ) null , ( Caller ) null ) ; Caller caller0 = channelInvocation0 . getCaller ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Caller getCaller ( ) throws RemoteException ; / * * * Registers a caller event listener . * * @param listener the listener to notify * @throws RemoteException for any error * / void addCallerListener ( CallerListener listener ) throws RemoteException ; / * * * Register a caller event listener . * * @param uri the remote URI to listen on * @param listener the listener to notify * @throws RemoteException for any error * / void addCallerListener ( String uri , CallerListener listener ) throws RemoteException ; / * * * Deregisters a caller event listener . * * @param listener the listener to remove * @throws RemoteException for any error * / void removeCallerListener ( CallerListener listener ) throws RemoteException ; / * * * Deregister a caller event listener . * * @param uri the remote URI the listener is listening for events on * @param listener the listener to remove * @throws RemoteException for any error * / void removeCallerListener ( String uri , CallerListener listener ) throws RemoteException ; / * * * Shuts down the ORB . * * @throws RemoteException for any error * / void shutdown ( ) throws RemoteException ; }
void test1 ( ) throws Throwable { Channel channel0 = new Channel ( ( - 1979 ) , ( Multiplexer ) null , ( MultiplexInputStream ) null , ( MultiplexOutputStream ) null ) ; int int0 = channel0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getId ( JmsDestination destination ) { Pair pair = ( Pair ) _destinations . get ( destination . getName ( ) ) ; return ( pair ! = null ) ? pair . destinationId : - 1 ; }
void test2 ( ) throws Throwable { Channel channel0 = new Channel ( 190 , ( Multiplexer ) null , ( MultiplexInputStream ) null , ( MultiplexOutputStream ) null ) ; String string0 = channel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test5 ( ) throws Throwable { Channel channel0 = new Channel ( 2641 , ( Multiplexer ) null , ( MultiplexInputStream ) null , ( MultiplexOutputStream ) null ) ; channel0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getId ( JmsDestination destination ) { Pair pair = ( Pair ) _destinations . get ( destination . getName ( ) ) ; return ( pair ! = null ) ? pair . destinationId : - 1 ; }
void test0 ( ) throws Throwable { Multiplexer multiplexer0 = new Multiplexer ( ) ; multiplexer0 . isClosed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClient ( ) { return _client ; }
void test1 ( ) throws Throwable { Multiplexer multiplexer0 = new Multiplexer ( ) ; multiplexer0 . getPrincipal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClient ( ) { return _client ; }
void test5 ( ) throws Throwable { Multiplexer multiplexer0 = new Multiplexer ( ) ; boolean boolean0 = multiplexer0 . isClient ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClient ( ) { return _client ; }
void test7 ( ) throws Throwable { Multiplexer multiplexer0 = new Multiplexer ( ) ; multiplexer0 . release ( ( Channel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClient ( ) { return _client ; }
void test0 ( ) throws Throwable { MultiplexOutputStream multiplexOutputStream0 = new MultiplexOutputStream ( ( - 1 ) , ( Multiplexer ) null , 136 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) ; / * * * Adds a new User to the DB . * * @param username the users name * @param password the users password * @return < code > true < / code > if the user is added * otherwise < code > false < / code > * / boolean addUser ( String username , String password ) ; / * * * Change the password for this user * * @param username the users name * @param password the users password * @return < code > true < / code > if the password is changed * otherwise < code > false < / code > * / boolean changePassword ( String username , String password ) ; / * * * Remove a user from the DB . * * @param username the users name * @return < code > true < / code > if the user is removed * otherwise < code > false < / code > * / boolean removeUser ( String username ) ; / * * * List all users in the DB * * @return Enumeration of users * / Enumeration getAllUsers ( ) ; }
void test1 ( ) throws Throwable { MultiplexOutputStream multiplexOutputStream0 = new MultiplexOutputStream ( ( - 1 ) , ( Multiplexer ) null , 136 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test2 ( ) throws Throwable { MultiplexOutputStream multiplexOutputStream0 = new MultiplexOutputStream ( ( - 1 ) , ( Multiplexer ) null , 136 , ( - 1 ) ) ; multiplexOutputStream0 . setType ( ( byte ) 103 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test3 ( ) throws Throwable { MultiplexOutputStream multiplexOutputStream0 = new MultiplexOutputStream ( ( - 1 ) , ( Multiplexer ) null , 126 , 126 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) ; / * * * Adds a new User to the DB . * * @param username the users name * @param password the users password * @return < code > true < / code > if the user is added * otherwise < code > false < / code > * / boolean addUser ( String username , String password ) ; / * * * Change the password for this user * * @param username the users name * @param password the users password * @return < code > true < / code > if the password is changed * otherwise < code > false < / code > * / boolean changePassword ( String username , String password ) ; / * * * Remove a user from the DB . * * @param username the users name * @return < code > true < / code > if the user is removed * otherwise < code > false < / code > * / boolean removeUser ( String username ) ; / * * * List all users in the DB * * @return Enumeration of users * / Enumeration getAllUsers ( ) ; }
void test5 ( ) throws Throwable { MultiplexOutputStream multiplexOutputStream0 = new MultiplexOutputStream ( 2011 , ( Multiplexer ) null , 2011 , 2011 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test6 ( ) throws Throwable { MultiplexOutputStream multiplexOutputStream0 = new MultiplexOutputStream ( 7 , ( Multiplexer ) null , 0 , 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void write ( String id , HttpServletRequest request , HttpServletResponse response ) throws IOException { Socket endpoint = _manager . getSocket ( id ) ; if ( endpoint = = null ) { response . sendError ( HttpServletResponse . SC_BAD_REQUEST , "Connection not found" ) ; } else { try { / / log ( "write ( id = " + id + " ) , [ length = " / / + request . getContentLength ( ) / / + " ] " ) ; InputStream in = request . getInputStream ( ) ; OutputStream out = endpoint . getOutputStream ( ) ; byte [ ] data = new byte [ 1024 ] ; int count = 0 ; while ( count ! = - 1 ) { count = in . read ( data ) ; if ( count > 0 ) { out . write ( data , 0 , count ) ; } } in . close ( ) ; out . flush ( ) ; response . setStatus ( HttpServletResponse . SC_OK ) ; } catch ( IOException exception ) { log ( "write failed" , exception ) ; remove ( id ) ; response . sendError ( HttpServletResponse . SC_INTERNAL_SERVER_ERROR , exception . getMessage ( ) ) ; } } }
void test7 ( ) throws Throwable { MultiplexOutputStream multiplexOutputStream0 = new MultiplexOutputStream ( 63 , ( Multiplexer ) null , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void write ( String id , HttpServletRequest request , HttpServletResponse response ) throws IOException { Socket endpoint = _manager . getSocket ( id ) ; if ( endpoint = = null ) { response . sendError ( HttpServletResponse . SC_BAD_REQUEST , "Connection not found" ) ; } else { try { / / log ( "write ( id = " + id + " ) , [ length = " / / + request . getContentLength ( ) / / + " ] " ) ; InputStream in = request . getInputStream ( ) ; OutputStream out = endpoint . getOutputStream ( ) ; byte [ ] data = new byte [ 1024 ] ; int count = 0 ; while ( count ! = - 1 ) { count = in . read ( data ) ; if ( count > 0 ) { out . write ( data , 0 , count ) ; } } in . close ( ) ; out . flush ( ) ; response . setStatus ( HttpServletResponse . SC_OK ) ; } catch ( IOException exception ) { log ( "write failed" , exception ) ; remove ( id ) ; response . sendError ( HttpServletResponse . SC_INTERNAL_SERVER_ERROR , exception . getMessage ( ) ) ; } } }
void test8 ( ) throws Throwable { MultiplexOutputStream multiplexOutputStream0 = new MultiplexOutputStream ( 0 , ( Multiplexer ) null , 0 , 0 ) ; multiplexOutputStream0 . notifyRead ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test4 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; try { databaseService0 . begin ( ) ; fail ( "Expecting exception : PersistenceException" ) ; } catch ( PersistenceException e ) { / * * State not associated with current service * / } "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test5 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; boolean boolean0 = databaseService0 . isTransacted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void start ( ) throws JMSException { ( _restartLock ) { _log . debug ( "start" ) ; _stop . set ( false ) ; for ( Iterator i = _consumers . values ( ) . iterator ( ) ; i . hasNext ( ) ; ) { ConsumerEndpoint consumer = ( ConsumerEndpoint ) i . next ( ) ; if ( needsScheduling ( consumer ) ) { queue ( consumer ) ; } } try { _runner . schedule ( ) ; } catch ( InterruptedException exception ) { _log . error ( "Failed to start worker" , exception ) ; throw new JMSException ( "Failed to start worker : " + exception ) ; } } }
void test0 ( ) throws Throwable { DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager ( ) ; dBCPConnectionManager0 . setPassword ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTestBeforeUse ( ) { return _testBeforeUse ; }
void test1 ( ) throws Throwable { DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager ( ) ; dBCPConnectionManager0 . init ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxIdle ( ) { return _maxIdle ; }
void test2 ( ) throws Throwable { DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager ( ) ; dBCPConnectionManager0 . setMaxIdle ( ( - 602 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxIdle ( ) { return _maxIdle ; }
void test3 ( ) throws Throwable { DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager ( ) ; dBCPConnectionManager0 . setEvictionInterval ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTestBeforeUse ( ) { return _testBeforeUse ; }
void test4 ( ) throws Throwable { DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager ( ) ; dBCPConnectionManager0 . setDriver ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTestBeforeUse ( ) { return _testBeforeUse ; }
void test5 ( ) throws Throwable { DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager ( ) ; dBCPConnectionManager0 . setMinIdleTime ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTestBeforeUse ( ) { return _testBeforeUse ; }
void test6 ( ) throws Throwable { DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager ( ) ; dBCPConnectionManager0 . setMaxActive ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxActive ( ) { return _maxActive ; }
void test7 ( ) throws Throwable { DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager ( ) ; dBCPConnectionManager0 . setUser ( "q < xSTi4 ; Jw . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTestBeforeUse ( ) { return _testBeforeUse ; }
void test8 ( ) throws Throwable { DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager ( ) ; dBCPConnectionManager0 . setURL ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTestBeforeUse ( ) { return _testBeforeUse ; }
void test9 ( ) throws Throwable { DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager ( ) ; dBCPConnectionManager0 . setTestQuery ( "U6EU > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTestBeforeUse ( ) { return _testBeforeUse ; }
void test10 ( ) throws Throwable { DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTestBeforeUse ( ) { return _testBeforeUse ; }
void test2 ( ) throws Throwable { Users users0 = new Users ( ) ; boolean boolean0 = users0 . remove ( ( Connection ) null , ( User ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( String id ) { try { _manager . close ( id ) ; } catch ( IOException ignore ) { } }
void test4 ( ) throws Throwable { Users users0 = new Users ( ) ; User user0 = users0 . get ( ( Connection ) null , ( User ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String name ) { return ( String ) _properties . get ( name ) ; }
void test0 ( ) throws Throwable { SQLHelper sQLHelper0 = new SQLHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { boolean boolean0 = SQLHelper . rollback ( ( Connection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void rollback ( ) { try { _database . rollback ( ) ; } catch ( PersistenceException exception ) { _log . warn ( exception , exception ) ; } }
void test3 ( ) throws Throwable { boolean boolean0 = SQLHelper . close ( ( Connection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) ; / * * * Adds a new User to the DB . * * @param username the users name * @param password the users password * @return < code > true < / code > if the user is added * otherwise < code > false < / code > * / boolean addUser ( String username , String password ) ; / * * * Change the password for this user * * @param username the users name * @param password the users password * @return < code > true < / code > if the password is changed * otherwise < code > false < / code > * / boolean changePassword ( String username , String password ) ; / * * * Remove a user from the DB . * * @param username the users name * @return < code > true < / code > if the user is removed * otherwise < code > false < / code > * / boolean removeUser ( String username ) ; / * * * List all users in the DB * * @return Enumeration of users * / Enumeration getAllUsers ( ) ; }
void test5 ( ) throws Throwable { boolean boolean0 = SQLHelper . close ( ( Statement ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) ; / * * * Adds a new User to the DB . * * @param username the users name * @param password the users password * @return < code > true < / code > if the user is added * otherwise < code > false < / code > * / boolean addUser ( String username , String password ) ; / * * * Change the password for this user * * @param username the users name * @param password the users password * @return < code > true < / code > if the password is changed * otherwise < code > false < / code > * / boolean changePassword ( String username , String password ) ; / * * * Remove a user from the DB . * * @param username the users name * @return < code > true < / code > if the user is removed * otherwise < code > false < / code > * / boolean removeUser ( String username ) ; / * * * List all users in the DB * * @return Enumeration of users * / Enumeration getAllUsers ( ) ; }
void test6 ( ) throws Throwable { boolean boolean0 = SQLHelper . close ( ( ResultSet ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) ; / * * * Adds a new User to the DB . * * @param username the users name * @param password the users password * @return < code > true < / code > if the user is added * otherwise < code > false < / code > * / boolean addUser ( String username , String password ) ; / * * * Change the password for this user * * @param username the users name * @param password the users password * @return < code > true < / code > if the password is changed * otherwise < code > false < / code > * / boolean changePassword ( String username , String password ) ; / * * * Remove a user from the DB . * * @param username the users name * @return < code > true < / code > if the user is removed * otherwise < code > false < / code > * / boolean removeUser ( String username ) ; / * * * List all users in the DB * * @return Enumeration of users * / Enumeration getAllUsers ( ) ; }
void test7 ( ) throws Throwable { ErrorMessages errorMessages0 = new ErrorMessages ( ) ; boolean boolean0 = SQLHelper . close ( ( ResultSet ) errorMessages0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) ; / * * * Adds a new User to the DB . * * @param username the users name * @param password the users password * @return < code > true < / code > if the user is added * otherwise < code > false < / code > * / boolean addUser ( String username , String password ) ; / * * * Change the password for this user * * @param username the users name * @param password the users password * @return < code > true < / code > if the password is changed * otherwise < code > false < / code > * / boolean changePassword ( String username , String password ) ; / * * * Remove a user from the DB . * * @param username the users name * @return < code > true < / code > if the user is removed * otherwise < code > false < / code > * / boolean removeUser ( String username ) ; / * * * List all users in the DB * * @return Enumeration of users * / Enumeration getAllUsers ( ) ; }
void test8 ( ) throws Throwable { boolean boolean0 = SQLHelper . close ( ( InputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) ; / * * * Adds a new User to the DB . * * @param username the users name * @param password the users password * @return < code > true < / code > if the user is added * otherwise < code > false < / code > * / boolean addUser ( String username , String password ) ; / * * * Change the password for this user * * @param username the users name * @param password the users password * @return < code > true < / code > if the password is changed * otherwise < code > false < / code > * / boolean changePassword ( String username , String password ) ; / * * * Remove a user from the DB . * * @param username the users name * @return < code > true < / code > if the user is removed * otherwise < code > false < / code > * / boolean removeUser ( String username ) ; / * * * List all users in the DB * * @return Enumeration of users * / Enumeration getAllUsers ( ) ; }
void test9 ( ) throws Throwable { FileDescriptor fileDescriptor0 = FileDescriptor . in ; FileInputStream fileInputStream0 = new FileInputStream ( fileDescriptor0 ) ; boolean boolean0 = SQLHelper . close ( ( InputStream ) fileInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) ; / * * * Adds a new User to the DB . * * @param username the users name * @param password the users password * @return < code > true < / code > if the user is added * otherwise < code > false < / code > * / boolean addUser ( String username , String password ) ; / * * * Change the password for this user * * @param username the users name * @param password the users password * @return < code > true < / code > if the password is changed * otherwise < code > false < / code > * / boolean changePassword ( String username , String password ) ; / * * * Remove a user from the DB . * * @param username the users name * @return < code > true < / code > if the user is removed * otherwise < code > false < / code > * / boolean removeUser ( String username ) ; / * * * List all users in the DB * * @return Enumeration of users * / Enumeration getAllUsers ( ) ; }
void test10 ( ) throws Throwable { boolean boolean0 = SQLHelper . close ( ( OutputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) ; / * * * Adds a new User to the DB . * * @param username the users name * @param password the users password * @return < code > true < / code > if the user is added * otherwise < code > false < / code > * / boolean addUser ( String username , String password ) ; / * * * Change the password for this user * * @param username the users name * @param password the users password * @return < code > true < / code > if the password is changed * otherwise < code > false < / code > * / boolean changePassword ( String username , String password ) ; / * * * Remove a user from the DB . * * @param username the users name * @return < code > true < / code > if the user is removed * otherwise < code > false < / code > * / boolean removeUser ( String username ) ; / * * * List all users in the DB * * @return Enumeration of users * / Enumeration getAllUsers ( ) ; }
void test11 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream ( byteArray0 ) ; boolean boolean0 = SQLHelper . close ( ( OutputStream ) dynamicByteArrayOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) ; / * * * Adds a new User to the DB . * * @param username the users name * @param password the users password * @return < code > true < / code > if the user is added * otherwise < code > false < / code > * / boolean addUser ( String username , String password ) ; / * * * Change the password for this user * * @param username the users name * @param password the users password * @return < code > true < / code > if the password is changed * otherwise < code > false < / code > * / boolean changePassword ( String username , String password ) ; / * * * Remove a user from the DB . * * @param username the users name * @return < code > true < / code > if the user is removed * otherwise < code > false < / code > * / boolean removeUser ( String username ) ; / * * * List all users in the DB * * @return Enumeration of users * / Enumeration getAllUsers ( ) ; }
void test1 ( ) throws Throwable { Messages messages0 = new Messages ( ( Destinations ) null ) ; ObjectMessageImpl objectMessageImpl0 = new ObjectMessageImpl ( ) ; byte [ ] byteArray0 = messages0 . serialize ( ( MessageImpl ) objectMessageImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] serialize ( Object object ) throws IOException { byte [ ] result ; ByteArrayOutputStream bstream = new ByteArrayOutputStream ( ) ; ObjectOutputStream ostream = new ObjectOutputStream ( bstream ) ; ostream . writeObject ( object ) ; ostream . close ( ) ; result = bstream . toByteArray ( ) ; return result ; }
void test1 ( ) throws Throwable { DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager ( ) ; dBCPConnectionManager0 . init ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" User getUser ( User user ) { return ( User ) _userCache . get ( user . getUsername ( ) ) ; }
void test2 ( ) throws Throwable { DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager ( ) ; dBCPConnectionManager0 . setTestQuery ( "" ) ; dBCPConnectionManager0 . init ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTestQuery ( ) { return _testQuery ; }
void test2 ( ) throws Throwable { JmsQueue jmsQueue0 = new JmsQueue ( "org . exolab . jms . client . JmtDestinatioFactory" ) ; String string0 = jmsQueue0 . getQueueName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQueueName ( ) throws JMSException { return getName ( ) ; }
void test3 ( ) throws Throwable { JmsQueue jmsQueue0 = new JmsQueue ( ) ; boolean boolean0 = jmsQueue0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test4 ( ) throws Throwable { JmsQueue jmsQueue0 = new JmsQueue ( ) ; JmsQueue jmsQueue1 = new JmsQueue ( "\"G ] L6 > . X { F + " ) ; JmsQueue jmsQueue2 = ( JmsQueue ) jmsQueue1 . clone ( ) ; boolean boolean0 = jmsQueue0 . equals ( ( Object ) jmsQueue2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test5 ( ) throws Throwable { JmsQueue jmsQueue0 = new JmsQueue ( "\"G ] L6 > . X { F + " ) ; JmsQueue jmsQueue1 = ( JmsQueue ) jmsQueue0 . clone ( ) ; boolean boolean0 = jmsQueue0 . equals ( ( Object ) jmsQueue1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test6 ( ) throws Throwable { JmsQueue jmsQueue0 = new JmsQueue ( "Q / h" ) ; Reference reference0 = jmsQueue0 . getReference ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test7 ( ) throws Throwable { JmsQueue jmsQueue0 = new JmsQueue ( ) ; jmsQueue0 . setPersistent ( true ) ; Reference reference0 = jmsQueue0 . getReference ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test0 ( ) throws Throwable { JmsConnectionMetaData jmsConnectionMetaData0 = new JmsConnectionMetaData ( ) ; int int0 = jmsConnectionMetaData0 . getProviderMajorVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProviderMajorVersion ( ) { return Version . MAJOR_VERSION ; }
void test1 ( ) throws Throwable { JmsConnectionMetaData jmsConnectionMetaData0 = new JmsConnectionMetaData ( ) ; String string0 = jmsConnectionMetaData0 . getJMSVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getJMSMajorVersion ( ) { return 1 ; }
void test2 ( ) throws Throwable { JmsConnectionMetaData jmsConnectionMetaData0 = new JmsConnectionMetaData ( ) ; Enumeration < Object > enumeration0 = jmsConnectionMetaData0 . getJMSXPropertyNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test3 ( ) throws Throwable { JmsConnectionMetaData jmsConnectionMetaData0 = new JmsConnectionMetaData ( ) ; String string0 = jmsConnectionMetaData0 . getJMSProviderName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJMSProviderName ( ) { return Version . TITLE ; }
void test4 ( ) throws Throwable { JmsConnectionMetaData jmsConnectionMetaData0 = new JmsConnectionMetaData ( ) ; int int0 = jmsConnectionMetaData0 . getProviderMinorVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProviderMinorVersion ( ) { return Version . MINOR_VERSION ; }
void test5 ( ) throws Throwable { JmsConnectionMetaData jmsConnectionMetaData0 = new JmsConnectionMetaData ( ) ; String string0 = jmsConnectionMetaData0 . getProviderVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProviderVersion ( ) { return Version . VERSION ; }
void test1 ( ) throws Throwable { JmsTemporaryTopic jmsTemporaryTopic0 = new JmsTemporaryTopic ( ) ; long long0 = jmsTemporaryTopic0 . getConnectionId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getConnectionId ( ) { return _connectionId ; }
void test3 ( ) throws Throwable { JmsTemporaryTopic jmsTemporaryTopic0 = new JmsTemporaryTopic ( ) ; Reference reference0 = jmsTemporaryTopic0 . getReference ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Reference getReference ( ) { / / should never be called for temp destination return null ; }
void test4 ( ) throws Throwable { JmsTemporaryTopic jmsTemporaryTopic0 = new JmsTemporaryTopic ( ) ; boolean boolean0 = jmsTemporaryTopic0 . validForConnection ( ( JmsConnection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean validForConnection ( JmsConnection connection ) { boolean result = false ; if ( connection ! = null & & connection . getConnectionId ( ) = = _connectionId ) { result = true ; } return result ; }
void test0 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test1 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "ALs# ! H ( PBq%'l" ) ; int int0 = jmsTopic0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return toString ( ) . hashCode ( ) ; }
void test3 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( " * * " ) ; boolean boolean0 = jmsTopic0 . isWildCard ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWildCard ( ) { return isWildCard ( this . getName ( ) ) ; }
void test4 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "5" ) ; String string0 = jmsTopic0 . getTopicName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTopicName ( ) throws JMSException { return getName ( ) ; }
void test5 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "tempqueue : " ) ; boolean boolean0 = jmsTopic0 . equals ( ( Object ) "ja" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test6 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "Q } } 4" ) ; boolean boolean0 = jmsTopic0 . equals ( ( Object ) jmsTopic0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test7 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "Q } } 4" ) ; JmsTopic jmsTopic1 = new JmsTopic ( "d5W@tY3l%" ) ; boolean boolean0 = jmsTopic0 . equals ( ( Object ) jmsTopic1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test8 ( ) throws Throwable { boolean boolean0 = JmsTopic . isWildCard ( "ALs# ! H ( PBq%'l" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWildCard ( ) { return isWildCard ( this . getName ( ) ) ; }
void test9 ( ) throws Throwable { boolean boolean0 = JmsTopic . isWildCard ( "7tog * u , ? " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWildCard ( ) { return isWildCard ( this . getName ( ) ) ; }
void test10 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( " * * " ) ; boolean boolean0 = jmsTopic0 . match ( jmsTopic0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( JmsTopic destination ) { boolean matches = false ; String topic = destination . getName ( ) ; String wildcard = this . getName ( ) ; if ( wildcard . equals ( ALL_WILDCARD ) ) { / / Every topic match . matches = true ; } else { StringTokenizer wildTokens = new StringTokenizer ( wildcard , SEPARATOR ) ; StringTokenizer topicTokens = new StringTokenizer ( topic , SEPARATOR ) ; String wildToken = null ; String topicToken = null ; int tokenCountDiff = topicTokens . countTokens ( ) - wildTokens . countTokens ( ) ; if ( ( tokenCountDiff = = 0 ) | | ( tokenCountDiff = = - 1 ) | | ( tokenCountDiff > 0 & & wildcard . indexOf ( ALL_WILDCARD ) > = 0 ) ) { while ( wildTokens . hasMoreTokens ( ) & & topicTokens . hasMoreTokens ( ) ) { wildToken = wildTokens . nextToken ( ) ; topicToken = topicTokens . nextToken ( ) ; if ( wildToken . equals ( ALL_WILDCARD ) ) { / / we have a match . matches = true ; break ; } else if ( wildToken . equals ( WILDCARD ) ) { / / this token matches . matches = true ; continue ; } else if ( wildToken . equals ( topicToken ) ) { / / this token matches . matches = true ; continue ; } else { / / no match . No point continuing further . matches = false ; break ; } } } } return matches ; }
void test11 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "" ) ; JmsTopic jmsTopic1 = new JmsTopic ( "ALs#hH ( #q%l" ) ; boolean boolean0 = jmsTopic0 . match ( jmsTopic1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( JmsTopic destination ) { boolean matches = false ; String topic = destination . getName ( ) ; String wildcard = this . getName ( ) ; if ( wildcard . equals ( ALL_WILDCARD ) ) { / / Every topic match . matches = true ; } else { StringTokenizer wildTokens = new StringTokenizer ( wildcard , SEPARATOR ) ; StringTokenizer topicTokens = new StringTokenizer ( topic , SEPARATOR ) ; String wildToken = null ; String topicToken = null ; int tokenCountDiff = topicTokens . countTokens ( ) - wildTokens . countTokens ( ) ; if ( ( tokenCountDiff = = 0 ) | | ( tokenCountDiff = = - 1 ) | | ( tokenCountDiff > 0 & & wildcard . indexOf ( ALL_WILDCARD ) > = 0 ) ) { while ( wildTokens . hasMoreTokens ( ) & & topicTokens . hasMoreTokens ( ) ) { wildToken = wildTokens . nextToken ( ) ; topicToken = topicTokens . nextToken ( ) ; if ( wildToken . equals ( ALL_WILDCARD ) ) { / / we have a match . matches = true ; break ; } else if ( wildToken . equals ( WILDCARD ) ) { / / this token matches . matches = true ; continue ; } else if ( wildToken . equals ( topicToken ) ) { / / this token matches . matches = true ; continue ; } else { / / no match . No point continuing further . matches = false ; break ; } } } } return matches ; }
void test12 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "true" ) ; JmsTopic jmsTopic1 = new JmsTopic ( "" ) ; boolean boolean0 = jmsTopic0 . match ( jmsTopic1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( JmsTopic destination ) { boolean matches = false ; String topic = destination . getName ( ) ; String wildcard = this . getName ( ) ; if ( wildcard . equals ( ALL_WILDCARD ) ) { / / Every topic match . matches = true ; } else { StringTokenizer wildTokens = new StringTokenizer ( wildcard , SEPARATOR ) ; StringTokenizer topicTokens = new StringTokenizer ( topic , SEPARATOR ) ; String wildToken = null ; String topicToken = null ; int tokenCountDiff = topicTokens . countTokens ( ) - wildTokens . countTokens ( ) ; if ( ( tokenCountDiff = = 0 ) | | ( tokenCountDiff = = - 1 ) | | ( tokenCountDiff > 0 & & wildcard . indexOf ( ALL_WILDCARD ) > = 0 ) ) { while ( wildTokens . hasMoreTokens ( ) & & topicTokens . hasMoreTokens ( ) ) { wildToken = wildTokens . nextToken ( ) ; topicToken = topicTokens . nextToken ( ) ; if ( wildToken . equals ( ALL_WILDCARD ) ) { / / we have a match . matches = true ; break ; } else if ( wildToken . equals ( WILDCARD ) ) { / / this token matches . matches = true ; continue ; } else if ( wildToken . equals ( topicToken ) ) { / / this token matches . matches = true ; continue ; } else { / / no match . No point continuing further . matches = false ; break ; } } } } return matches ; }
void test13 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "5" ) ; boolean boolean0 = jmsTopic0 . match ( jmsTopic0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( JmsTopic destination ) { boolean matches = false ; String topic = destination . getName ( ) ; String wildcard = this . getName ( ) ; if ( wildcard . equals ( ALL_WILDCARD ) ) { / / Every topic match . matches = true ; } else { StringTokenizer wildTokens = new StringTokenizer ( wildcard , SEPARATOR ) ; StringTokenizer topicTokens = new StringTokenizer ( topic , SEPARATOR ) ; String wildToken = null ; String topicToken = null ; int tokenCountDiff = topicTokens . countTokens ( ) - wildTokens . countTokens ( ) ; if ( ( tokenCountDiff = = 0 ) | | ( tokenCountDiff = = - 1 ) | | ( tokenCountDiff > 0 & & wildcard . indexOf ( ALL_WILDCARD ) > = 0 ) ) { while ( wildTokens . hasMoreTokens ( ) & & topicTokens . hasMoreTokens ( ) ) { wildToken = wildTokens . nextToken ( ) ; topicToken = topicTokens . nextToken ( ) ; if ( wildToken . equals ( ALL_WILDCARD ) ) { / / we have a match . matches = true ; break ; } else if ( wildToken . equals ( WILDCARD ) ) { / / this token matches . matches = true ; continue ; } else if ( wildToken . equals ( topicToken ) ) { / / this token matches . matches = true ; continue ; } else { / / no match . No point continuing further . matches = false ; break ; } } } } return matches ; }
void test14 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "~W ] 4`E" ) ; JmsTopic jmsTopic1 = new JmsTopic ( " ( Qa * v < { 4bz" ) ; boolean boolean0 = jmsTopic1 . match ( jmsTopic0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( JmsTopic destination ) { boolean matches = false ; String topic = destination . getName ( ) ; String wildcard = this . getName ( ) ; if ( wildcard . equals ( ALL_WILDCARD ) ) { / / Every topic match . matches = true ; } else { StringTokenizer wildTokens = new StringTokenizer ( wildcard , SEPARATOR ) ; StringTokenizer topicTokens = new StringTokenizer ( topic , SEPARATOR ) ; String wildToken = null ; String topicToken = null ; int tokenCountDiff = topicTokens . countTokens ( ) - wildTokens . countTokens ( ) ; if ( ( tokenCountDiff = = 0 ) | | ( tokenCountDiff = = - 1 ) | | ( tokenCountDiff > 0 & & wildcard . indexOf ( ALL_WILDCARD ) > = 0 ) ) { while ( wildTokens . hasMoreTokens ( ) & & topicTokens . hasMoreTokens ( ) ) { wildToken = wildTokens . nextToken ( ) ; topicToken = topicTokens . nextToken ( ) ; if ( wildToken . equals ( ALL_WILDCARD ) ) { / / we have a match . matches = true ; break ; } else if ( wildToken . equals ( WILDCARD ) ) { / / this token matches . matches = true ; continue ; } else if ( wildToken . equals ( topicToken ) ) { / / this token matches . matches = true ; continue ; } else { / / no match . No point continuing further . matches = false ; break ; } } } } return matches ; }
void test15 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "ALs# ! H ( PBq%'l" ) ; Reference reference0 = jmsTopic0 . getReference ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test16 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "ALs# ! H ( PBq%'l" ) ; jmsTopic0 . setPersistent ( true ) ; Reference reference0 = jmsTopic0 . getReference ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test9 ( ) throws Throwable { HashMap < String , String > hashMap0 = new HashMap < String , String > ( 217 , 217 ) ; hashMap0 . put ( "\"Ky3 } pbmf~jv" , "\"Ky3 } pbmf~jv" ) ; JmsConnectionFactory jmsConnectionFactory0 = new JmsConnectionFactory ( "\"Ky3 } pbmf~jv" , ( Map ) hashMap0 , ( Map ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test10 ( ) throws Throwable { ObjID objID0 = new ObjID ( ) ; UnicastDelegate unicastDelegate0 = new UnicastDelegate ( objID0 , "` ? D\"pR@kXf@#7n$" ) ; RemoteServerSession__Proxy remoteServerSession__Proxy0 = new RemoteServerSession__Proxy ( ( Delegate ) unicastDelegate0 ) ; JmsXAResource jmsXAResource0 = new JmsXAResource ( ( ServerSession ) remoteServerSession__Proxy0 ) ; boolean boolean0 = jmsXAResource0 . isSameRM ( ( XAResource ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test0 ( ) throws Throwable { JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue ( ) ; long long0 = jmsTemporaryQueue0 . getConnectionId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getConnectionId ( ) { return _connectionId ; }
void test3 ( ) throws Throwable { JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue ( ) ; Reference reference0 = jmsTemporaryQueue0 . getReference ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Reference getReference ( ) { / / should never be called for temp destination return null ; }
void test4 ( ) throws Throwable { JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue ( ) ; boolean boolean0 = jmsTemporaryQueue0 . validForConnection ( ( JmsConnection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean validForConnection ( JmsConnection connection ) { boolean result = false ; if ( connection ! = null & & connection . getConnectionId ( ) = = _connectionId ) { result = true ; } return result ; }
void test0 ( ) throws Throwable { JmsTemporaryTopic jmsTemporaryTopic0 = new JmsTemporaryTopic ( ) ; jmsTemporaryTopic0 . getTopicName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPersistent ( ) { return persistent_ ; }
void test1 ( ) throws Throwable { JmsTemporaryTopic jmsTemporaryTopic0 = new JmsTemporaryTopic ( ) ; String string0 = jmsTemporaryTopic0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test3 ( ) throws Throwable { JmsQueue jmsQueue0 = new JmsQueue ( " ) . 5 : : 8 ( 3F' { " ) ; boolean boolean0 = jmsQueue0 . isTemporaryDestination ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPersistent ( ) { return persistent_ ; }
void test4 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "Q [ nM^_4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test5 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "tempqueue : temptobic : [ ^_4" ) ; boolean boolean0 = jmsTopic0 . getPersistent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPersistent ( ) { return persistent_ ; }
void test6 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "tempqueue : temptobic : [ ^_4" ) ; boolean boolean0 = jmsTopic0 . isTemporaryDestination ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test7 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "temptopic : [ ^_4" ) ; boolean boolean0 = jmsTopic0 . isTemporaryDestination ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPersistent ( ) { return persistent_ ; }
void test8 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "tempqueue : temptobic : [ ^_4" ) ; boolean boolean0 = JmsDestination . isTemporaryDestination ( ( DestinationImpl ) jmsTopic0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPersistent ( ) { return persistent_ ; }
void test9 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "Q [ nM^_4" ) ; boolean boolean0 = JmsDestination . isTemporaryDestination ( ( DestinationImpl ) jmsTopic0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPersistent ( ) { return persistent_ ; }
void test10 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "temptopic : [ ^_4" ) ; boolean boolean0 = JmsDestination . isTemporaryDestination ( ( DestinationImpl ) jmsTopic0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test0 ( ) throws Throwable { JmsDestinationFactory jmsDestinationFactory0 = new JmsDestinationFactory ( ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( "" , properties0 ) ; InitialContext initialContext0 = new InitialContext ( ) ; Object object0 = jmsDestinationFactory0 . getObjectInstance ( ( Object ) "" , ( Name ) compoundName0 , ( Context ) initialContext0 , ( Hashtable ) properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObjectInstance ( Object object , Name name , Context context , Hashtable env ) throws Exception { Object result = null ; if ( object instanceof Reference ) { Reference ref = ( Reference ) object ; String className = ref . getClassName ( ) ; StringRefAddr nameref = ( StringRefAddr ) ref . get ( "name" ) ; StringRefAddr persistref = ( StringRefAddr ) ref . get ( "persistent" ) ; if ( nameref ! = null & & persistref ! = null ) { String destination = ( String ) nameref . getContent ( ) ; String persist = ( String ) persistref . getContent ( ) ; if ( className . equals ( JmsQueue . class . getName ( ) ) ) { JmsQueue queue = new JmsQueue ( destination ) ; queue . setPersistent ( new Boolean ( persist ) . booleanValue ( ) ) ; result = queue ; } else if ( className . equals ( JmsTopic . class . getName ( ) ) ) { JmsTopic topic = new JmsTopic ( destination ) ; topic . setPersistent ( new Boolean ( persist ) . booleanValue ( ) ) ; result = topic ; } else { throw new Exception ( "This factory cannot create objects of type " + className ) ; } } } return result ; }
void test1 ( ) throws Throwable { JmsDestinationFactory jmsDestinationFactory0 = new JmsDestinationFactory ( ) ; byte [ ] byteArray0 = new byte [ 1 ] ; BinaryRefAddr binaryRefAddr0 = new BinaryRefAddr ( "" , byteArray0 ) ; Reference reference0 = new Reference ( "" , ( RefAddr ) binaryRefAddr0 ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( "" , properties0 ) ; InitialContext initialContext0 = new InitialContext ( ) ; Object object0 = jmsDestinationFactory0 . getObjectInstance ( ( Object ) reference0 , ( Name ) compoundName0 , ( Context ) initialContext0 , ( Hashtable ) properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObjectInstance ( Object object , Name name , Context context , Hashtable env ) throws Exception { Object result = null ; if ( object instanceof Reference ) { Reference ref = ( Reference ) object ; String className = ref . getClassName ( ) ; StringRefAddr nameref = ( StringRefAddr ) ref . get ( "name" ) ; StringRefAddr persistref = ( StringRefAddr ) ref . get ( "persistent" ) ; if ( nameref ! = null & & persistref ! = null ) { String destination = ( String ) nameref . getContent ( ) ; String persist = ( String ) persistref . getContent ( ) ; if ( className . equals ( JmsQueue . class . getName ( ) ) ) { JmsQueue queue = new JmsQueue ( destination ) ; queue . setPersistent ( new Boolean ( persist ) . booleanValue ( ) ) ; result = queue ; } else if ( className . equals ( JmsTopic . class . getName ( ) ) ) { JmsTopic topic = new JmsTopic ( destination ) ; topic . setPersistent ( new Boolean ( persist ) . booleanValue ( ) ) ; result = topic ; } else { throw new Exception ( "This factory cannot create objects of type " + className ) ; } } } return result ; }
void test0 ( ) throws Throwable { JmsConnectionFactoryBuilder jmsConnectionFactoryBuilder0 = new JmsConnectionFactoryBuilder ( ) ; CompositeName compositeName0 = new CompositeName ( ) ; InitialContext initialContext0 = new InitialContext ( ( Hashtable < ? , ? > ) null ) ; Object object0 = jmsConnectionFactoryBuilder0 . getObjectInstance ( ( Object ) "java . naming . language" , ( Name ) compositeName0 , ( Context ) initialContext0 , ( Hashtable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObjectInstance ( Object object , Name name , Context context , Hashtable env ) throws Exception { Object result = null ; if ( object instanceof Reference ) { Reference ref = ( Reference ) object ; String className = ref . getClassName ( ) ; StringRefAddr nameref = ( StringRefAddr ) ref . get ( "name" ) ; StringRefAddr persistref = ( StringRefAddr ) ref . get ( "persistent" ) ; if ( nameref ! = null & & persistref ! = null ) { String destination = ( String ) nameref . getContent ( ) ; String persist = ( String ) persistref . getContent ( ) ; if ( className . equals ( JmsQueue . class . getName ( ) ) ) { JmsQueue queue = new JmsQueue ( destination ) ; queue . setPersistent ( new Boolean ( persist ) . booleanValue ( ) ) ; result = queue ; } else if ( className . equals ( JmsTopic . class . getName ( ) ) ) { JmsTopic topic = new JmsTopic ( destination ) ; topic . setPersistent ( new Boolean ( persist ) . booleanValue ( ) ) ; result = topic ; } else { throw new Exception ( "This factory cannot create objects of type " + className ) ; } } } return result ; }
void test1 ( ) throws Throwable { JmsConnectionFactoryBuilder jmsConnectionFactoryBuilder0 = new JmsConnectionFactoryBuilder ( ) ; byte [ ] byteArray0 = new byte [ 1 ] ; BinaryRefAddr binaryRefAddr0 = new BinaryRefAddr ( "" , byteArray0 ) ; Reference reference0 = new Reference ( "" , ( RefAddr ) binaryRefAddr0 ) ; Properties properties0 = new Properties ( ) ; CompoundName compoundName0 = new CompoundName ( "" , properties0 ) ; InitialContext initialContext0 = new InitialContext ( ) ; Object object0 = jmsConnectionFactoryBuilder0 . getObjectInstance ( ( Object ) reference0 , ( Name ) compoundName0 , ( Context ) initialContext0 , ( Hashtable ) properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObjectInstance ( Object object , Name name , Context context , Hashtable env ) throws Exception { Object result = null ; if ( object instanceof Reference ) { Reference ref = ( Reference ) object ; String className = ref . getClassName ( ) ; StringRefAddr nameref = ( StringRefAddr ) ref . get ( "name" ) ; StringRefAddr persistref = ( StringRefAddr ) ref . get ( "persistent" ) ; if ( nameref ! = null & & persistref ! = null ) { String destination = ( String ) nameref . getContent ( ) ; String persist = ( String ) persistref . getContent ( ) ; if ( className . equals ( JmsQueue . class . getName ( ) ) ) { JmsQueue queue = new JmsQueue ( destination ) ; queue . setPersistent ( new Boolean ( persist ) . booleanValue ( ) ) ; result = queue ; } else if ( className . equals ( JmsTopic . class . getName ( ) ) ) { JmsTopic topic = new JmsTopic ( destination ) ; topic . setPersistent ( new Boolean ( persist ) . booleanValue ( ) ) ; result = topic ; } else { throw new Exception ( "This factory cannot create objects of type " + className ) ; } } } return result ; }
void test0 ( ) throws Throwable { SharedORB sharedORB0 = ( SharedORB ) SharedORB . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DatabaseService getInstance ( ) throws PersistenceException { State state = ( State ) _state . get ( ) ; if ( state = = null ) { throw new PersistenceException ( "No DatabaseService registered" ) ; } return state . getInstance ( ) ; }
void test0 ( ) throws Throwable { JMSExceptionAdapter jMSExceptionAdapter0 = new JMSExceptionAdapter ( ) ; Class < Object > class0 = jMSExceptionAdapter0 . getTarget ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getTarget ( ) ; / * * * Adapts an { @link Throwable }
void test0 ( ) throws Throwable { XAExceptionAdapter xAExceptionAdapter0 = new XAExceptionAdapter ( ) ; Class < Object > class0 = xAExceptionAdapter0 . getTarget ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getTarget ( ) ; / * * * Adapts an { @link Throwable }
void test0 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DefaultThreadPoolFactory defaultThreadPoolFactory0 = new DefaultThreadPoolFactory ( ( ThreadListener ) null ) ; SchedulerConfiguration schedulerConfiguration0 = new SchedulerConfiguration ( ) ; configuration0 . setSchedulerConfiguration ( schedulerConfiguration0 ) ; Scheduler scheduler0 = new Scheduler ( configuration0 , ( ThreadPoolFactory ) defaultThreadPoolFactory0 ) ; scheduler0 . execute ( ( Runnable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test1 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DefaultThreadPoolFactory defaultThreadPoolFactory0 = new DefaultThreadPoolFactory ( ( ThreadListener ) null ) ; SchedulerConfiguration schedulerConfiguration0 = new SchedulerConfiguration ( ) ; configuration0 . setSchedulerConfiguration ( schedulerConfiguration0 ) ; Scheduler scheduler0 = new Scheduler ( configuration0 , ( ThreadPoolFactory ) defaultThreadPoolFactory0 ) ; scheduler0 . doStop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test2 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DefaultThreadPoolFactory defaultThreadPoolFactory0 = new DefaultThreadPoolFactory ( ( ThreadListener ) null ) ; SchedulerConfiguration schedulerConfiguration0 = new SchedulerConfiguration ( ) ; configuration0 . setSchedulerConfiguration ( schedulerConfiguration0 ) ; schedulerConfiguration0 . setMaxThreads ( 1585 ) ; Scheduler scheduler0 = new Scheduler ( configuration0 , ( ThreadPoolFactory ) defaultThreadPoolFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStarted ( ) { return _started ; }
void test0 ( ) throws Throwable { SerialTask serialTask0 = new SerialTask ( ( Runnable ) null , ( Scheduler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test1 ( ) throws Throwable { SerialTask serialTask0 = new SerialTask ( ( Runnable ) null , ( Scheduler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test3 ( ) throws Throwable { SerialTask serialTask0 = new SerialTask ( ( Runnable ) null , ( Scheduler ) null ) ; serialTask0 . stop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test0 ( ) throws Throwable { ServiceManager serviceManager0 = new ServiceManager ( ) ; serviceManager0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStarted ( ) { return _started ; }
void test1 ( ) throws Throwable { ServiceManager serviceManager0 = new ServiceManager ( ) ; String string0 = serviceManager0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test2 ( ) throws Throwable { ServiceManager serviceManager0 = new ServiceManager ( ) ; boolean boolean0 = serviceManager0 . isStarted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStarted ( ) { return _started ; }
void test3 ( ) throws Throwable { ServiceManager serviceManager0 = new ServiceManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void start ( ) throws JMSException { ( _restartLock ) { _log . debug ( "start" ) ; _stop . set ( false ) ; for ( Iterator i = _consumers . values ( ) . iterator ( ) ; i . hasNext ( ) ; ) { ConsumerEndpoint consumer = ( ConsumerEndpoint ) i . next ( ) ; if ( needsScheduling ( consumer ) ) { queue ( consumer ) ; } } try { _runner . schedule ( ) ; } catch ( InterruptedException exception ) { _log . error ( "Failed to start worker" , exception ) ; throw new JMSException ( "Failed to start worker : " + exception ) ; } } }
void test4 ( ) throws Throwable { ServiceManager serviceManager0 = new ServiceManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStarted ( ) { return _started ; }
void test0 ( ) throws Throwable { ServiceManager serviceManager0 = new ServiceManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void restart ( ) throws ServiceException { if ( _started ) { stop ( ) ; } start ( ) ; }
void test1 ( ) throws Throwable { ServiceManager serviceManager0 = new ServiceManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addService ( Class type ) throws ServiceException ; / * * * Add a service instance . * * @param service the service instance * @throws ServiceAlreadyExistsException if the service already exists * @throws ServiceException for any service error * / void addService ( Object service ) throws ServiceException ; / * * * Returns a service given its type . * < p / > * If the service has been registered but not constructed , it will be * created and any setters populated . * * @param type the type of the service * @return an instance of < code > type < / code > * @throws ServiceDoesNotExistException if the service doesn't exist , or * is dependent on a service which doesn't exist * @throws ServiceException for any service error * / Object getService ( Class type ) throws ServiceException ; }
void test3 ( ) throws Throwable { ServiceManager serviceManager0 = new ServiceManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStarted ( ) { return _started ; }
void test5 ( ) throws Throwable { ServiceManager serviceManager0 = new ServiceManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void restart ( ) throws ServiceException { if ( _started ) { stop ( ) ; } start ( ) ; }
void test0 ( ) throws Throwable { ServiceThreadListener serviceThreadListener0 = new ServiceThreadListener ( ) ; DefaultThreadPoolFactory defaultThreadPoolFactory0 = new DefaultThreadPoolFactory ( ( ThreadListener ) serviceThreadListener0 ) ; BasicEventManager basicEventManager0 = new BasicEventManager ( ( ThreadPoolFactory ) defaultThreadPoolFactory0 ) ; String string0 = basicEventManager0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test1 ( ) throws Throwable { LeaseManager leaseManager0 = new LeaseManager ( ) ; leaseManager0 . doStart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test1 ( ) throws Throwable { AdminConnectionFactory adminConnectionFactory0 = new AdminConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AdminConnectionFactory ( Configuration config , AuthenticationMgr authMgr , DestinationManager destMgr , ConsumerManager consumers , DatabaseService database , Services services ) { _config = config ; _authenticator = authMgr ; _destinations = destMgr ; _consumers = consumers ; _database = database ; _services = services ; }
void test1 ( ) throws Throwable { ServiceThreadListener serviceThreadListener0 = new ServiceThreadListener ( ) ; DefaultThreadPoolFactory defaultThreadPoolFactory0 = new DefaultThreadPoolFactory ( ( ThreadListener ) serviceThreadListener0 ) ; BasicEventManager basicEventManager0 = new BasicEventManager ( ( ThreadPoolFactory ) defaultThreadPoolFactory0 ) ; String string0 = basicEventManager0 . registerEventRelative ( ( Event ) null , 1539L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String registerEventRelative ( Event event , long relative ) throws IllegalEventDefinedException ; / * * * Unregister the event specified by the event identifier . If the event does * not exist then fail silently . * * @param id unique event identifier . * / void unregisterEvent ( String id ) ; }
void test2 ( ) throws Throwable { ServiceThreadListener serviceThreadListener0 = new ServiceThreadListener ( ) ; DefaultThreadPoolFactory defaultThreadPoolFactory0 = new DefaultThreadPoolFactory ( ( ThreadListener ) serviceThreadListener0 ) ; BasicEventManager basicEventManager0 = new BasicEventManager ( ( ThreadPoolFactory ) defaultThreadPoolFactory0 ) ; basicEventManager0 . unregisterEvent ( "NoCP3` | : * V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test0 ( ) throws Throwable { String string0 = MessageIdHelper . generate ( ( - 1923L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generate ( long Id ) { return ID_PREFIX + Id ; }
void test1 ( ) throws Throwable { String string0 = MessageIdHelper . getNull ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNull ( ) { return NULL_ID ; }
void test2 ( ) throws Throwable { long long0 = MessageIdHelper . convert ( "ID : 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void convert ( ) throws PersistenceException ; } / / - - SchemaConverter
void test3 ( ) throws Throwable { MessageIdHelper messageIdHelper0 = new MessageIdHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNull ( ) { return NULL_ID ; }
void test0 ( ) throws Throwable { CommandLine commandLine0 = new CommandLine ( ) ; boolean boolean0 = commandLine0 . add ( " > P'Y" , " > P'Y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exists ( int type ) { return _types . containsKey ( new Integer ( type ) ) ; }
void test1 ( ) throws Throwable { CommandLine commandLine0 = new CommandLine ( ) ; boolean boolean0 = commandLine0 . isParameter ( " - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isParameter ( String name ) { return _options . containsKey ( name ) ; }
void test2 ( ) throws Throwable { CommandLine commandLine0 = new CommandLine ( ) ; boolean boolean0 = commandLine0 . isSwitch ( " ! o * u" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSwitch ( String name ) { return _switches . contains ( name ) ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 0 ] = " - " ; stringArray0 [ 1 ] = " - " ; stringArray0 [ 2 ] = "" ; stringArray0 [ 3 ] = " - " ; stringArray0 [ 4 ] = " - " ; stringArray0 [ 5 ] = " - " ; stringArray0 [ 6 ] = "" ; stringArray0 [ 7 ] = "" ; CommandLine commandLine0 = new CommandLine ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exists ( int type ) { return _types . containsKey ( new Integer ( type ) ) ; }
void test4 ( ) throws Throwable { CommandLine commandLine0 = new CommandLine ( ) ; boolean boolean0 = commandLine0 . exists ( " > P'Y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exists ( int type ) { return _types . containsKey ( new Integer ( type ) ) ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 0 ] = " - " ; stringArray0 [ 1 ] = " - " ; stringArray0 [ 2 ] = "" ; stringArray0 [ 3 ] = " - " ; stringArray0 [ 4 ] = " - " ; stringArray0 [ 5 ] = " - " ; stringArray0 [ 6 ] = "" ; stringArray0 [ 7 ] = "" ; CommandLine commandLine0 = new CommandLine ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean value ( ) { return _value . booleanValue ( ) ; }
void test6 ( ) throws Throwable { CommandLine commandLine0 = new CommandLine ( ) ; String string0 = commandLine0 . value ( " > P'Y" , " > P'Y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean value ( ) { return _value . booleanValue ( ) ; }
void test7 ( ) throws Throwable { CommandLine commandLine0 = new CommandLine ( ) ; boolean boolean0 = commandLine0 . add ( ( String ) null , ( String ) null , true ) ; boolean boolean1 = commandLine0 . add ( ( String ) null , ( String ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void add ( int type , Type [ ] mappings ) { for ( int i = 0 ; i < mappings . length ; + + i ) { Type requested = mappings [ i ] ; Type supported = _set . getType ( requested . getType ( ) , requested . getPrecision ( ) ) ; if ( supported = = null ) { _log . debug ( "TypeMapper : alternative mapping for type = " + Descriptor . getDescriptor ( type ) . getName ( ) + " is not supported by the database" ) ; } else { long precision = requested . getPrecision ( ) ; long maxPrecision = supported . getPrecision ( ) ; _log . debug ( "TypeMapper : alternative mapping for type = " + Descriptor . getDescriptor ( type ) . getName ( ) + " , precision = " + precision + " , is supported by the database as " + supported ) ; if ( type = = supported . getType ( ) & & ( ( precision > 0 ) & & ( precision < maxPrecision ) ) ) { / / if the requested type is supported by the database , and / / has a smaller precision , override the maximum precision / / defined by the supported type supported = new Type ( supported . getType ( ) , supported . getName ( ) , precision , supported . getParameters ( ) ) ; } _mappings . put ( new Integer ( type ) , supported ) ; break ; } } }
void test8 ( ) throws Throwable { CommandLine commandLine0 = new CommandLine ( ) ; boolean boolean0 = commandLine0 . add ( " ! o * u" , " ! o * u" , false ) ; boolean boolean1 = commandLine0 . add ( " ! o * u" , " ! o * u" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void add ( int type , Type [ ] mappings ) { for ( int i = 0 ; i < mappings . length ; + + i ) { Type requested = mappings [ i ] ; Type supported = _set . getType ( requested . getType ( ) , requested . getPrecision ( ) ) ; if ( supported = = null ) { _log . debug ( "TypeMapper : alternative mapping for type = " + Descriptor . getDescriptor ( type ) . getName ( ) + " is not supported by the database" ) ; } else { long precision = requested . getPrecision ( ) ; long maxPrecision = supported . getPrecision ( ) ; _log . debug ( "TypeMapper : alternative mapping for type = " + Descriptor . getDescriptor ( type ) . getName ( ) + " , precision = " + precision + " , is supported by the database as " + supported ) ; if ( type = = supported . getType ( ) & & ( ( precision > 0 ) & & ( precision < maxPrecision ) ) ) { / / if the requested type is supported by the database , and / / has a smaller precision , override the maximum precision / / defined by the supported type supported = new Type ( supported . getType ( ) , supported . getName ( ) , precision , supported . getParameters ( ) ) ; } _mappings . put ( new Integer ( type ) , supported ) ; break ; } } }
void test9 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = " - cq@ * + 7zw$@ { B5 , / W4" ; CommandLine commandLine0 = new CommandLine ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CommandLine ( String [ ] args ) { processCommandLine ( args ) ; }
void test0 ( ) throws Throwable { BasicPrincipal basicPrincipal0 = new BasicPrincipal ( "" , "" ) ; String string0 = basicPrincipal0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test3 ( ) throws Throwable { BasicPrincipal basicPrincipal0 = new BasicPrincipal ( "5 : MV'~ + e & N / WI" , "5 : MV'~ + e & N / WI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test4 ( ) throws Throwable { BasicPrincipal basicPrincipal0 = new BasicPrincipal ( "5 : MV'~ + e & N / WI" , "5 : MV'~ + e & N / WI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test5 ( ) throws Throwable { BasicPrincipal basicPrincipal0 = new BasicPrincipal ( "5 : MV'~ + e & N / WI" , "5 : MV'~ + e & N / WI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test6 ( ) throws Throwable { BasicPrincipal basicPrincipal0 = new BasicPrincipal ( "p# : H% ) 2RH~'Wss > " , "p# : H% ) 2RH~'Wss > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test7 ( ) throws Throwable { BasicPrincipal basicPrincipal0 = new BasicPrincipal ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test0 ( ) throws Throwable { OrderedQueue orderedQueue0 = new OrderedQueue ( ( Comparator ) null ) ; int int0 = orderedQueue0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test2 ( ) throws Throwable { OrderedQueue orderedQueue0 = new OrderedQueue ( ( Comparator ) null ) ; boolean boolean0 = orderedQueue0 . remove ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( String id ) { try { _manager . close ( id ) ; } catch ( IOException ignore ) { } }
void test4 ( ) throws Throwable { OrderedQueue orderedQueue0 = new OrderedQueue ( ( Comparator ) null ) ; orderedQueue0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test0 ( ) throws Throwable { ServiceThreadListener serviceThreadListener0 = new ServiceThreadListener ( ) ; DefaultThreadPoolFactory defaultThreadPoolFactory0 = new DefaultThreadPoolFactory ( ( ThreadListener ) serviceThreadListener0 ) ; ThreadPool threadPool0 = ( ThreadPool ) defaultThreadPoolFactory0 . create ( "" , 1767 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test1 ( ) throws Throwable { ServiceThreadListener serviceThreadListener0 = new ServiceThreadListener ( ) ; DefaultThreadPoolFactory defaultThreadPoolFactory0 = new DefaultThreadPoolFactory ( ( ThreadListener ) serviceThreadListener0 ) ; BoundedLinkedQueue boundedLinkedQueue0 = new BoundedLinkedQueue ( 1767 ) ; ThreadPool threadPool0 = ( ThreadPool ) defaultThreadPoolFactory0 . create ( "" , ( Channel ) boundedLinkedQueue0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CreateQueueDialog create ( JFrame parent ) { if ( instance_ = = null ) { instance_ = new CreateQueueDialog ( parent ) ; } return instance_ ; }
void test1 ( ) throws Throwable { ThreadGroup threadGroup0 = new ThreadGroup ( "r\"p461 ] r\"t9 , e" ) ; ThreadPool threadPool0 = new ThreadPool ( threadGroup0 , "r\"p461 ] r\"t9 , e" , ( - 1470 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThreadPool ( String name , int maxPoolSize ) { this ( name , maxPoolSize , false ) ; }
void test2 ( ) throws Throwable { ThreadPool threadPool0 = new ThreadPool ( "r\"p461 ] r\"t9 , e" , ( - 1470 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThreadPool ( String name , int maxPoolSize ) { this ( name , maxPoolSize , false ) ; }
void test3 ( ) throws Throwable { Slot slot0 = new Slot ( ) ; ThreadPool threadPool0 = new ThreadPool ( "" , ( Channel ) slot0 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThreadPool ( String name , int maxPoolSize ) { this ( name , maxPoolSize , false ) ; }
void test4 ( ) throws Throwable { ThreadPool threadPool0 = new ThreadPool ( "" , 110 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void execute ( Runnable task ) throws InterruptedException { _threads . execute ( task ) ; }
void test1 ( ) throws Throwable { ThreadFactory threadFactory0 = new ThreadFactory ( ( ThreadGroup ) null , "" , true ) ; Thread thread0 = threadFactory0 . newThread ( ( Runnable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getId ( JmsDestination destination ) { Pair pair = ( Pair ) _destinations . get ( destination . getName ( ) ) ; return ( pair ! = null ) ? pair . destinationId : - 1 ; }
void test0 ( ) throws Throwable { long long0 = Clock . clock ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long clock ( ) { / / Synchronization is required since clock is a long . return _clock ; }
void test1 ( ) throws Throwable { int int0 = Clock . getUnsynchTicks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUnsynchTicks ( ) { return _unsynchTicks ; }
void test2 ( ) throws Throwable { long long0 = Clock . getAdvance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getAdvance ( ) { return _advance ; }
void test9 ( ) throws Throwable { long long0 = Clock . synchronize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long synchronize ( ) { long current ; long retarded ; long clock ; int adjust ; current = System . currentTimeMillis ( ) ; clock = _clock ; retarded = clock - _advance ; / / Adjust clock to new difference if ( current ! = retarded ) { adjust = ( int ) ( current - retarded ) / _synchEvery ; if ( adjust ! = 0 ) { _adjust + = adjust ; / * if ( Configuration . verbose ) Logger . tyrex . debug ( "Clock late by " + ( current - retarded ) + "ms - > , adjusting by " + _clock . _adjust ) ; * / } } / / Make sure clock is progressive if ( current > retarded ) { clock = current + _advance ; _clock = clock ; } return clock ; }
void test7 ( ) throws Throwable { String string0 = UUIDGenerator . trim ( "Did not find '" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String trim ( String identifier ) { if ( identifier = = null ) throw new IllegalArgumentException ( "Argument identifier is null" ) ; if ( identifier . length ( ) > MAXIMUM_LENGTH ) return identifier . substring ( 0 , MAXIMUM_LENGTH ) ; return identifier ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; boolean boolean0 = UUIDGenerator . isLocal ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocal ( byte [ ] uuid ) { if ( uuid = = null ) throw new IllegalArgumentException ( "Argument uuid is null" ) ; if ( uuid . length ! = 16 ) return false ; return ( uuid [ 10 ] = = _nodeIdentifierByte [ 0 ] & & uuid [ 11 ] = = _nodeIdentifierByte [ 1 ] & & uuid [ 12 ] = = _nodeIdentifierByte [ 2 ] & & uuid [ 13 ] = = _nodeIdentifierByte [ 3 ] & & uuid [ 14 ] = = _nodeIdentifierByte [ 4 ] & & uuid [ 15 ] = = _nodeIdentifierByte [ 5 ] ) ; }
void test0 ( ) throws Throwable { GarbageCollectionConfigurationDescriptor garbageCollectionConfigurationDescriptor0 = new GarbageCollectionConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test1 ( ) throws Throwable { GarbageCollectionConfigurationDescriptor garbageCollectionConfigurationDescriptor0 = new GarbageCollectionConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { GarbageCollectionConfigurationDescriptor garbageCollectionConfigurationDescriptor0 = new GarbageCollectionConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { GarbageCollectionConfigurationDescriptor garbageCollectionConfigurationDescriptor0 = new GarbageCollectionConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { GarbageCollectionConfigurationDescriptor garbageCollectionConfigurationDescriptor0 = new GarbageCollectionConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { ConnectionFactoryTypeDescriptor connectionFactoryTypeDescriptor0 = new ConnectionFactoryTypeDescriptor ( ) ; String string0 = connectionFactoryTypeDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { ConnectionFactoryTypeDescriptor connectionFactoryTypeDescriptor0 = new ConnectionFactoryTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { ConnectionFactoryTypeDescriptor connectionFactoryTypeDescriptor0 = new ConnectionFactoryTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test3 ( ) throws Throwable { ConnectionFactoryTypeDescriptor connectionFactoryTypeDescriptor0 = new ConnectionFactoryTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { ConnectionFactoryTypeDescriptor connectionFactoryTypeDescriptor0 = new ConnectionFactoryTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test1 ( ) throws Throwable { Server server0 = new Server ( ) ; boolean boolean0 = server0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test2 ( ) throws Throwable { Server server0 = new Server ( ) ; String string0 = server0 . getImplementationClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getImplementationClass ( ) { return this . _implementationClass ; }
void test4 ( ) throws Throwable { Server server0 = new Server ( ) ; server0 . setScheme ( ( SchemeType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test5 ( ) throws Throwable { Server server0 = new Server ( ) ; server0 . setProxyClass ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test6 ( ) throws Throwable { Server server0 = new Server ( ) ; server0 . setImplementationClass ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test7 ( ) throws Throwable { Server server0 = new Server ( ) ; SchemeType schemeType0 = server0 . getScheme ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SchemeType getScheme ( ) ; / * * * Returns the URI used to establsh connections to remote services . * * @return the URI used to establish connections to remote services * / String getConnectURI ( ) ; / * * * Returns the URI that services are exported on . * * @return the URI for exporting services * / String getExportURI ( ) ; / * * * Returns the URI that JNDI service is exported on . * < p / > * Typically , this will be the same as that returned by * { @link #getExportURI }
void test0 ( ) throws Throwable { Connectors connectors0 = new Connectors ( ) ; boolean boolean0 = connectors0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test1 ( ) throws Throwable { Connectors connectors0 = new Connectors ( ) ; Connector connector0 = new Connector ( ) ; connectors0 . addConnector ( connector0 ) ; connectors0 . getConnector ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectorCount ( ) { return _connectorList . size ( ) ; }
void test2 ( ) throws Throwable { Connectors connectors0 = new Connectors ( ) ; Enumeration < Object > enumeration0 = connectors0 . enumerateConnector ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test3 ( ) throws Throwable { Connectors connectors0 = new Connectors ( ) ; boolean boolean0 = connectors0 . removeConnector ( ( Connector ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeConnector ( org . exolab . jms . config . Connector vConnector ) { boolean removed = _connectorList . remove ( vConnector ) ; return removed ; }
void test5 ( ) throws Throwable { Connectors connectors0 = new Connectors ( ) ; connectors0 . clearConnector ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test6 ( ) throws Throwable { Connectors connectors0 = new Connectors ( ) ; Connector connector0 = new Connector ( ) ; connectors0 . addConnector ( 0 , connector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectorCount ( ) { return _connectorList . size ( ) ; }
void test8 ( ) throws Throwable { Connectors connectors0 = new Connectors ( ) ; int int0 = connectors0 . getConnectorCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectorCount ( ) { return _connectorList . size ( ) ; }
void test15 ( ) throws Throwable { Connectors connectors0 = new Connectors ( ) ; Connector [ ] connectorArray0 = new Connector [ 4 ] ; connectors0 . setConnector ( connectorArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectorCount ( ) { return _connectorList . size ( ) ; }
void test0 ( ) throws Throwable { TcpConfiguration tcpConfiguration0 = new TcpConfiguration ( ) ; String string0 = tcpConfiguration0 . getInternalHost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getInternalHost ( ) { return this . _internalHost ; }
void test1 ( ) throws Throwable { TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration ( ) ; tcpsConfiguration0 . setInternalHost ( "$ { openjms . home } / config / openjms . keystore" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNeedClientAuth ( ) { return this . _has_needClientAuth ; }
void test0 ( ) throws Throwable { SocketConfigurationTypeDescriptor socketConfigurationTypeDescriptor0 = new SocketConfigurationTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { SocketConfigurationTypeDescriptor socketConfigurationTypeDescriptor0 = new SocketConfigurationTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { SocketConfigurationTypeDescriptor socketConfigurationTypeDescriptor0 = new SocketConfigurationTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test3 ( ) throws Throwable { SocketConfigurationTypeDescriptor socketConfigurationTypeDescriptor0 = new SocketConfigurationTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { SocketConfigurationTypeDescriptor socketConfigurationTypeDescriptor0 = new SocketConfigurationTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { RdbmsDatabaseConfigurationDescriptor rdbmsDatabaseConfigurationDescriptor0 = new RdbmsDatabaseConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test2 ( ) throws Throwable { RdbmsDatabaseConfigurationDescriptor rdbmsDatabaseConfigurationDescriptor0 = new RdbmsDatabaseConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { RdbmsDatabaseConfigurationDescriptor rdbmsDatabaseConfigurationDescriptor0 = new RdbmsDatabaseConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { RdbmsDatabaseConfigurationDescriptor rdbmsDatabaseConfigurationDescriptor0 = new RdbmsDatabaseConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test5 ( ) throws Throwable { RdbmsDatabaseConfigurationDescriptor rdbmsDatabaseConfigurationDescriptor0 = new RdbmsDatabaseConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { AdministeredDestinationsDescriptor administeredDestinationsDescriptor0 = new AdministeredDestinationsDescriptor ( ) ; administeredDestinationsDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { AdministeredDestinationsDescriptor administeredDestinationsDescriptor0 = new AdministeredDestinationsDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { AdministeredDestinationsDescriptor administeredDestinationsDescriptor0 = new AdministeredDestinationsDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { AdministeredDestinationsDescriptor administeredDestinationsDescriptor0 = new AdministeredDestinationsDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { AdministeredDestinationsDescriptor administeredDestinationsDescriptor0 = new AdministeredDestinationsDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { AdministeredTopicDescriptor administeredTopicDescriptor0 = new AdministeredTopicDescriptor ( ) ; AdministeredTopicDescriptor administeredTopicDescriptor1 = ( AdministeredTopicDescriptor ) administeredTopicDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { AdministeredTopicDescriptor administeredTopicDescriptor0 = new AdministeredTopicDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { AdministeredTopicDescriptor administeredTopicDescriptor0 = new AdministeredTopicDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { AdministeredTopicDescriptor administeredTopicDescriptor0 = new AdministeredTopicDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { AdministeredTopicDescriptor administeredTopicDescriptor0 = new AdministeredTopicDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { GarbageCollectionConfigurationLowWaterThresholdTypeDescriptor garbageCollectionConfigurationLowWaterThresholdTypeDescriptor0 = new GarbageCollectionConfigurationLowWaterThresholdTypeDescriptor ( ) ; String string0 = garbageCollectionConfigurationLowWaterThresholdTypeDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { GarbageCollectionConfigurationLowWaterThresholdTypeDescriptor garbageCollectionConfigurationLowWaterThresholdTypeDescriptor0 = new GarbageCollectionConfigurationLowWaterThresholdTypeDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) garbageCollectionConfigurationLowWaterThresholdTypeDescriptor0 , "http : / / openjms . exolab . org / configuration" , ( NodeType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { GarbageCollectionConfigurationLowWaterThresholdTypeDescriptor garbageCollectionConfigurationLowWaterThresholdTypeDescriptor0 = new GarbageCollectionConfigurationLowWaterThresholdTypeDescriptor ( ) ; garbageCollectionConfigurationLowWaterThresholdTypeDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { GarbageCollectionConfigurationLowWaterThresholdTypeDescriptor garbageCollectionConfigurationLowWaterThresholdTypeDescriptor0 = new GarbageCollectionConfigurationLowWaterThresholdTypeDescriptor ( ) ; garbageCollectionConfigurationLowWaterThresholdTypeDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { GarbageCollectionConfigurationLowWaterThresholdTypeDescriptor garbageCollectionConfigurationLowWaterThresholdTypeDescriptor0 = new GarbageCollectionConfigurationLowWaterThresholdTypeDescriptor ( ) ; GarbageCollectionConfigurationLowWaterThresholdTypeDescriptor garbageCollectionConfigurationLowWaterThresholdTypeDescriptor1 = ( GarbageCollectionConfigurationLowWaterThresholdTypeDescriptor ) garbageCollectionConfigurationLowWaterThresholdTypeDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test0 ( ) throws Throwable { SubscriberDescriptor subscriberDescriptor0 = new SubscriberDescriptor ( ) ; subscriberDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { SubscriberDescriptor subscriberDescriptor0 = new SubscriberDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { SubscriberDescriptor subscriberDescriptor0 = new SubscriberDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { SubscriberDescriptor subscriberDescriptor0 = new SubscriberDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { SubscriberDescriptor subscriberDescriptor0 = new SubscriberDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { XATopicConnectionFactoryDescriptor xATopicConnectionFactoryDescriptor0 = new XATopicConnectionFactoryDescriptor ( ) ; xATopicConnectionFactoryDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { XATopicConnectionFactoryDescriptor xATopicConnectionFactoryDescriptor0 = new XATopicConnectionFactoryDescriptor ( ) ; xATopicConnectionFactoryDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { XATopicConnectionFactoryDescriptor xATopicConnectionFactoryDescriptor0 = new XATopicConnectionFactoryDescriptor ( ) ; XATopicConnectionFactoryDescriptor xATopicConnectionFactoryDescriptor1 = ( XATopicConnectionFactoryDescriptor ) xATopicConnectionFactoryDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { XATopicConnectionFactoryDescriptor xATopicConnectionFactoryDescriptor0 = new XATopicConnectionFactoryDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) xATopicConnectionFactoryDescriptor0 , "org . exolab . jms . config . XATopicConnectionFactoryDescriptor@22936e45 ; descriptor for class : [ null ] ; xml name : null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { XATopicConnectionFactoryDescriptor xATopicConnectionFactoryDescriptor0 = new XATopicConnectionFactoryDescriptor ( ) ; xATopicConnectionFactoryDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { HttpConfigurationDescriptor httpConfigurationDescriptor0 = new HttpConfigurationDescriptor ( ) ; String string0 = httpConfigurationDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { HttpConfigurationDescriptor httpConfigurationDescriptor0 = new HttpConfigurationDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) httpConfigurationDescriptor0 , "org . exolab . jms . config . HttpConfigurationDescriptor@7d4df25e ; descriptor for class : [ null ] ; xml name : null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { HttpConfigurationDescriptor httpConfigurationDescriptor0 = new HttpConfigurationDescriptor ( ) ; httpConfigurationDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { HttpConfigurationDescriptor httpConfigurationDescriptor0 = new HttpConfigurationDescriptor ( ) ; HttpConfigurationDescriptor httpConfigurationDescriptor1 = ( HttpConfigurationDescriptor ) httpConfigurationDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { HttpConfigurationDescriptor httpConfigurationDescriptor0 = new HttpConfigurationDescriptor ( ) ; httpConfigurationDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration ( ) ; boolean boolean0 = databaseConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test3 ( ) throws Throwable { DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration ( ) ; RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; databaseConfiguration0 . setRdbmsDatabaseConfiguration ( rdbmsDatabaseConfiguration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasEvictionInterval ( ) { return this . _has_evictionInterval ; }
void test2 ( ) throws Throwable { XAConnectionFactory xAConnectionFactory0 = new XAConnectionFactory ( ) ; boolean boolean0 = xAConnectionFactory0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test0 ( ) throws Throwable { Property property0 = new Property ( ) ; property0 . setValue ( "E" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test2 ( ) throws Throwable { Property property0 = new Property ( ) ; boolean boolean0 = property0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test1 ( ) throws Throwable { AdminConfigurationDescriptor adminConfigurationDescriptor0 = new AdminConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { AdminConfigurationDescriptor adminConfigurationDescriptor0 = new AdminConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { AdminConfigurationDescriptor adminConfigurationDescriptor0 = new AdminConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { AdminConfigurationDescriptor adminConfigurationDescriptor0 = new AdminConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test5 ( ) throws Throwable { AdminConfigurationDescriptor adminConfigurationDescriptor0 = new AdminConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { SecurityConfigurationDescriptor securityConfigurationDescriptor0 = new SecurityConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test1 ( ) throws Throwable { SecurityConfigurationDescriptor securityConfigurationDescriptor0 = new SecurityConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test2 ( ) throws Throwable { SecurityConfigurationDescriptor securityConfigurationDescriptor0 = new SecurityConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { SecurityConfigurationDescriptor securityConfigurationDescriptor0 = new SecurityConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { SecurityConfigurationDescriptor securityConfigurationDescriptor0 = new SecurityConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test0 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; defaultConfiguration0 . setTcpConfiguration ( ( TcpConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test1 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; boolean boolean0 = defaultConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test3 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; SecurityConfiguration securityConfiguration0 = new SecurityConfiguration ( ) ; defaultConfiguration0 . setSecurityConfiguration ( securityConfiguration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test4 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; MessageManagerConfiguration messageManagerConfiguration0 = defaultConfiguration0 . getMessageManagerConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . MessageManagerConfiguration getMessageManagerConfiguration ( ) { return this . _messageManagerConfiguration ; }
void test5 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; defaultConfiguration0 . setHttpConfiguration ( ( HttpConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test6 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; GarbageCollectionConfiguration garbageCollectionConfiguration0 = defaultConfiguration0 . getGarbageCollectionConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . GarbageCollectionConfiguration getGarbageCollectionConfiguration ( ) { return this . _garbageCollectionConfiguration ; }
void test7 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; Connectors connectors0 = defaultConfiguration0 . getConnectors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . Connectors getConnectors ( ) { return this . _connectors ; }
void test8 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; HttpConfiguration httpConfiguration0 = defaultConfiguration0 . getHttpConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . HttpConfiguration getHttpConfiguration ( ) { return this . _httpConfiguration ; }
void test10 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; TcpsConfiguration tcpsConfiguration0 = defaultConfiguration0 . getTcpsConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . TcpsConfiguration getTcpsConfiguration ( ) { return this . _tcpsConfiguration ; }
void test11 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; defaultConfiguration0 . setSchedulerConfiguration ( ( SchedulerConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test12 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; LoggerConfiguration loggerConfiguration0 = new LoggerConfiguration ( ) ; defaultConfiguration0 . setLoggerConfiguration ( loggerConfiguration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getFile ( ) { return this . _file ; }
void test13 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; defaultConfiguration0 . setTcpsConfiguration ( ( TcpsConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test14 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; SchedulerConfiguration schedulerConfiguration0 = defaultConfiguration0 . getSchedulerConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . SchedulerConfiguration getSchedulerConfiguration ( ) { return this . _schedulerConfiguration ; }
void test15 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; defaultConfiguration0 . setMessageManagerConfiguration ( ( MessageManagerConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test16 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; defaultConfiguration0 . setRmiConfiguration ( ( RmiConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test17 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; defaultConfiguration0 . setConnectors ( ( Connectors ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test18 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; RmiConfiguration rmiConfiguration0 = defaultConfiguration0 . getRmiConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . RmiConfiguration getRmiConfiguration ( ) { return this . _rmiConfiguration ; }
void test19 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; TcpConfiguration tcpConfiguration0 = defaultConfiguration0 . getTcpConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . TcpConfiguration getTcpConfiguration ( ) { return this . _tcpConfiguration ; }
void test20 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration ( ) ; defaultConfiguration0 . setGarbageCollectionConfiguration ( garbageCollectionConfiguration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMemoryCheckInterval ( ) { return this . _memoryCheckInterval ; }
void test21 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; HttpsConfiguration httpsConfiguration0 = new HttpsConfiguration ( ) ; defaultConfiguration0 . setHttpsConfiguration ( httpsConfiguration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasJndiPort ( ) { return this . _has_jndiPort ; }
void test22 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; defaultConfiguration0 . setServerConfiguration ( ( ServerConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test23 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; HttpsConfiguration httpsConfiguration0 = defaultConfiguration0 . getHttpsConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . HttpsConfiguration getHttpsConfiguration ( ) { return this . _httpsConfiguration ; }
void test24 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; LoggerConfiguration loggerConfiguration0 = defaultConfiguration0 . getLoggerConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . LoggerConfiguration getLoggerConfiguration ( ) { return this . _loggerConfiguration ; }
void test25 ( ) throws Throwable { DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration ( ) ; SecurityConfiguration securityConfiguration0 = defaultConfiguration0 . getSecurityConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . SecurityConfiguration getSecurityConfiguration ( ) { return this . _securityConfiguration ; }
void test2 ( ) throws Throwable { ConnectorResources connectorResources0 = new ConnectorResources ( ) ; ConnectorResource connectorResource0 = new ConnectorResource ( ) ; connectorResources0 . addConnectorResource ( connectorResource0 ) ; ConnectorResource [ ] connectorResourceArray0 = connectorResources0 . getConnectorResource ( ) ; connectorResources0 . setConnectorResource ( connectorResourceArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectorResourceCount ( ) { return _connectorResourceList . size ( ) ; }
void test3 ( ) throws Throwable { ConnectorResources connectorResources0 = new ConnectorResources ( ) ; boolean boolean0 = connectorResources0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test4 ( ) throws Throwable { ConnectorResources connectorResources0 = new ConnectorResources ( ) ; Enumeration < Object > enumeration0 = connectorResources0 . enumerateConnectorResource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test5 ( ) throws Throwable { ConnectorResources connectorResources0 = new ConnectorResources ( ) ; ConnectorResource connectorResource0 = new ConnectorResource ( ) ; boolean boolean0 = connectorResources0 . removeConnectorResource ( connectorResource0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeConnectorResource ( org . exolab . jms . config . ConnectorResource vConnectorResource ) { boolean removed = _connectorResourceList . remove ( vConnectorResource ) ; return removed ; }
void test6 ( ) throws Throwable { ConnectorResources connectorResources0 = new ConnectorResources ( ) ; connectorResources0 . clearConnectorResource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectorResourceCount ( ) { return _connectorResourceList . size ( ) ; }
void test8 ( ) throws Throwable { ConnectorResources connectorResources0 = new ConnectorResources ( ) ; int int0 = connectorResources0 . getConnectorResourceCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectorResourceCount ( ) { return _connectorResourceList . size ( ) ; }
void test15 ( ) throws Throwable { ConnectorResources connectorResources0 = new ConnectorResources ( ) ; ConnectorResource [ ] connectorResourceArray0 = connectorResources0 . getConnectorResource ( ) ; connectorResources0 . setConnectorResource ( connectorResourceArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectorResourceCount ( ) { return _connectorResourceList . size ( ) ; }
void test0 ( ) throws Throwable { SchedulerConfigurationDescriptor schedulerConfigurationDescriptor0 = new SchedulerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { SchedulerConfigurationDescriptor schedulerConfigurationDescriptor0 = new SchedulerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { SchedulerConfigurationDescriptor schedulerConfigurationDescriptor0 = new SchedulerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test3 ( ) throws Throwable { SchedulerConfigurationDescriptor schedulerConfigurationDescriptor0 = new SchedulerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { SchedulerConfigurationDescriptor schedulerConfigurationDescriptor0 = new SchedulerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { RmiConfigurationDescriptor rmiConfigurationDescriptor0 = new RmiConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { RmiConfigurationDescriptor rmiConfigurationDescriptor0 = new RmiConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { RmiConfigurationDescriptor rmiConfigurationDescriptor0 = new RmiConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { RmiConfigurationDescriptor rmiConfigurationDescriptor0 = new RmiConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { RmiConfigurationDescriptor rmiConfigurationDescriptor0 = new RmiConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Configuration configuration0 = new Configuration ( ) ; Configuration configuration1 = ConfigurationReader . setDefaults ( configuration0 ) ; Configuration configuration2 = ConfigurationReader . setDefaults ( configuration1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String name ) { return ( String ) _properties . get ( name ) ; }
void test0 ( ) throws Throwable { JndiConfigurationDescriptor jndiConfigurationDescriptor0 = new JndiConfigurationDescriptor ( ) ; JndiConfigurationDescriptor jndiConfigurationDescriptor1 = ( JndiConfigurationDescriptor ) jndiConfigurationDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { JndiConfigurationDescriptor jndiConfigurationDescriptor0 = new JndiConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { JndiConfigurationDescriptor jndiConfigurationDescriptor0 = new JndiConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test3 ( ) throws Throwable { JndiConfigurationDescriptor jndiConfigurationDescriptor0 = new JndiConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { JndiConfigurationDescriptor jndiConfigurationDescriptor0 = new JndiConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory ( ) ; xATopicConnectionFactory0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test1 ( ) throws Throwable { XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory ( ) ; String string0 = xATopicConnectionFactory0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test1 ( ) throws Throwable { QueueConnectionFactory queueConnectionFactory0 = new QueueConnectionFactory ( ) ; boolean boolean0 = queueConnectionFactory0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test0 ( ) throws Throwable { HttpsConfigurationDescriptor httpsConfigurationDescriptor0 = new HttpsConfigurationDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) httpsConfigurationDescriptor0 , "org . exolab . jms . config . HttpsConfigurationDescriptor@16485339 ; descriptor for class : [ null ] ; xml name : null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { HttpsConfigurationDescriptor httpsConfigurationDescriptor0 = new HttpsConfigurationDescriptor ( ) ; httpsConfigurationDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { HttpsConfigurationDescriptor httpsConfigurationDescriptor0 = new HttpsConfigurationDescriptor ( ) ; HttpsConfigurationDescriptor httpsConfigurationDescriptor1 = ( HttpsConfigurationDescriptor ) httpsConfigurationDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { HttpsConfigurationDescriptor httpsConfigurationDescriptor0 = new HttpsConfigurationDescriptor ( ) ; String string0 = httpsConfigurationDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { HttpsConfigurationDescriptor httpsConfigurationDescriptor0 = new HttpsConfigurationDescriptor ( ) ; httpsConfigurationDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { TcpConfiguration tcpConfiguration0 = new TcpConfiguration ( ) ; tcpConfiguration0 . deleteJndiPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasJndiPort ( ) { return this . _has_jndiPort ; }
void test1 ( ) throws Throwable { HttpsConfiguration httpsConfiguration0 = new HttpsConfiguration ( ) ; int int0 = httpsConfiguration0 . getPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBindAll ( ) { return _bindAll ; }
void test2 ( ) throws Throwable { HttpsConfiguration httpsConfiguration0 = new HttpsConfiguration ( ) ; httpsConfiguration0 . setJndiPort ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAdminPort ( ) { return this . _adminPort ; }
void test3 ( ) throws Throwable { TcpConfiguration tcpConfiguration0 = new TcpConfiguration ( ) ; tcpConfiguration0 . deleteAdminPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAdminPort ( ) { return this . _adminPort ; }
void test4 ( ) throws Throwable { HttpConfiguration httpConfiguration0 = new HttpConfiguration ( ) ; int int0 = httpConfiguration0 . getJndiPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAdminPort ( ) { return this . _adminPort ; }
void test5 ( ) throws Throwable { HttpConfiguration httpConfiguration0 = new HttpConfiguration ( ) ; httpConfiguration0 . hasAdminPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getJndiPort ( ) { return this . _jndiPort ; }
void test6 ( ) throws Throwable { TcpConfiguration tcpConfiguration0 = new TcpConfiguration ( ) ; tcpConfiguration0 . hasBindAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBindAll ( ) { return _bindAll ; }
void test7 ( ) throws Throwable { TcpConfiguration tcpConfiguration0 = new TcpConfiguration ( ) ; tcpConfiguration0 . hasJndiPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAdminPort ( ) { return this . _adminPort ; }
void test8 ( ) throws Throwable { HttpsConfiguration httpsConfiguration0 = new HttpsConfiguration ( ) ; int int0 = httpsConfiguration0 . getAdminPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBindAll ( ) { return _bindAll ; }
void test9 ( ) throws Throwable { TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration ( ) ; tcpsConfiguration0 . setAdminPort ( ( - 1175 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAdminPort ( ) { return this . _adminPort ; }
void test10 ( ) throws Throwable { TcpConfiguration tcpConfiguration0 = new TcpConfiguration ( ) ; tcpConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getJndiPort ( ) { return this . _jndiPort ; }
void test11 ( ) throws Throwable { HttpsConfiguration httpsConfiguration0 = new HttpsConfiguration ( ) ; httpsConfiguration0 . setPort ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAdminPort ( ) { return this . _adminPort ; }
void test12 ( ) throws Throwable { HttpsConfiguration httpsConfiguration0 = new HttpsConfiguration ( ) ; boolean boolean0 = httpsConfiguration0 . getBindAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAdminPort ( ) { return this . _adminPort ; }
void test13 ( ) throws Throwable { TcpConfiguration tcpConfiguration0 = new TcpConfiguration ( ) ; tcpConfiguration0 . setBindAll ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBindAll ( ) { return this . _has_bindAll ; }
void test14 ( ) throws Throwable { TcpConfiguration tcpConfiguration0 = new TcpConfiguration ( ) ; tcpConfiguration0 . deleteBindAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAdminPort ( ) { return this . _adminPort ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ConfigurationLoader configurationLoader0 = new ConfigurationLoader ( ) ; Configuration configuration0 = new Configuration ( ) ; Configuration configuration1 = configurationLoader0 . load ( configuration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String name ) { return ( String ) _properties . get ( name ) ; }
void test1 ( ) throws Throwable { AdministeredQueue administeredQueue0 = new AdministeredQueue ( ) ; administeredQueue0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test2 ( ) throws Throwable { AdministeredQueue administeredQueue0 = new AdministeredQueue ( ) ; boolean boolean0 = administeredQueue0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test0 ( ) throws Throwable { ConnectionFactoriesDescriptor connectionFactoriesDescriptor0 = new ConnectionFactoriesDescriptor ( ) ; connectionFactoriesDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test1 ( ) throws Throwable { ConnectionFactoriesDescriptor connectionFactoriesDescriptor0 = new ConnectionFactoriesDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { ConnectionFactoriesDescriptor connectionFactoriesDescriptor0 = new ConnectionFactoriesDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { ConnectionFactoriesDescriptor connectionFactoriesDescriptor0 = new ConnectionFactoriesDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { ConnectionFactoriesDescriptor connectionFactoriesDescriptor0 = new ConnectionFactoriesDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test0 ( ) throws Throwable { LoggerConfigurationDescriptor loggerConfigurationDescriptor0 = new LoggerConfigurationDescriptor ( ) ; String string0 = loggerConfigurationDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { LoggerConfigurationDescriptor loggerConfigurationDescriptor0 = new LoggerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { LoggerConfigurationDescriptor loggerConfigurationDescriptor0 = new LoggerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test3 ( ) throws Throwable { LoggerConfigurationDescriptor loggerConfigurationDescriptor0 = new LoggerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { LoggerConfigurationDescriptor loggerConfigurationDescriptor0 = new LoggerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { ServerConfiguration serverConfiguration0 = new ServerConfiguration ( ) ; serverConfiguration0 . setEmbeddedJNDI ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasEmbeddedJNDI ( ) { return this . _has_embeddedJNDI ; }
void test1 ( ) throws Throwable { ServerConfiguration serverConfiguration0 = new ServerConfiguration ( ) ; serverConfiguration0 . deleteEmbeddedJNDI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getEmbeddedJNDI ( ) { return this . _embeddedJNDI ; }
void test2 ( ) throws Throwable { ServerConfiguration serverConfiguration0 = new ServerConfiguration ( ) ; boolean boolean0 = serverConfiguration0 . getEmbeddedJNDI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreads ( ) { return this . _maxThreads ; }
void test3 ( ) throws Throwable { ServerConfiguration serverConfiguration0 = new ServerConfiguration ( ) ; CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; BufferedWriter bufferedWriter0 = new BufferedWriter ( ( Writer ) charArrayWriter0 ) ; serverConfiguration0 . marshal ( ( Writer ) bufferedWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreads ( ) { return this . _maxThreads ; }
void test4 ( ) throws Throwable { ServerConfiguration serverConfiguration0 = new ServerConfiguration ( ) ; serverConfiguration0 . deleteMaxThreads ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHost ( String host ) { if ( host . equals ( "localhost" ) ) { try { host = InetAddress . getLocalHost ( ) . getHostAddress ( ) ; } catch ( UnknownHostException ignore ) { } } return host ; }
void test5 ( ) throws Throwable { ServerConfiguration serverConfiguration0 = new ServerConfiguration ( ) ; serverConfiguration0 . setMaxThreads ( 825 ) ; boolean boolean0 = serverConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreads ( ) { return this . _maxThreads ; }
void test0 ( ) throws Throwable { TcpConfiguration tcpConfiguration0 = new TcpConfiguration ( ) ; boolean boolean0 = tcpConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test0 ( ) throws Throwable { Connector connector0 = new Connector ( ) ; SchemeType schemeType0 = connector0 . getScheme ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SchemeType getScheme ( ) ; / * * * Returns the URI used to establsh connections to remote services . * * @return the URI used to establish connections to remote services * / String getConnectURI ( ) ; / * * * Returns the URI that services are exported on . * * @return the URI for exporting services * / String getExportURI ( ) ; / * * * Returns the URI that JNDI service is exported on . * < p / > * Typically , this will be the same as that returned by * { @link #getExportURI }
void test1 ( ) throws Throwable { Connector connector0 = new Connector ( ) ; boolean boolean0 = connector0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test3 ( ) throws Throwable { Connector connector0 = new Connector ( ) ; ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; connector0 . setConnectionFactories ( connectionFactories0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getXAConnectionFactoryCount ( ) { return _XAConnectionFactoryList . size ( ) ; }
void test5 ( ) throws Throwable { Connector connector0 = new Connector ( ) ; connector0 . setScheme ( ( SchemeType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test1 ( ) throws Throwable { ConnectorResource connectorResource0 = new ConnectorResource ( ) ; boolean boolean0 = connectorResource0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test2 ( ) throws Throwable { ConnectorResource connectorResource0 = new ConnectorResource ( ) ; SchemeType schemeType0 = connectorResource0 . getScheme ( ) ; connectorResource0 . setScheme ( schemeType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test3 ( ) throws Throwable { ConnectorResource connectorResource0 = new ConnectorResource ( ) ; connectorResource0 . setJndi ( ( Jndi ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Database Files ( * . db ) " ; }
void test4 ( ) throws Throwable { ConnectorResource connectorResource0 = new ConnectorResource ( ) ; Jndi jndi0 = connectorResource0 . getJndi ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . Jndi getJndi ( ) { return this . _jndi ; }
void test5 ( ) throws Throwable { ConnectorResource connectorResource0 = new ConnectorResource ( ) ; Server server0 = connectorResource0 . getServer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . Server getServer ( ) { return this . _server ; }
void test7 ( ) throws Throwable { ConnectorResource connectorResource0 = new ConnectorResource ( ) ; connectorResource0 . setDescription ( "jy48AAR ) bx" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Database Files ( * . db ) " ; }
void test8 ( ) throws Throwable { ConnectorResource connectorResource0 = new ConnectorResource ( ) ; Server server0 = new Server ( ) ; connectorResource0 . setServer ( server0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Database Files ( * . db ) " ; }
void test0 ( ) throws Throwable { ConnectionFactoryDescriptor connectionFactoryDescriptor0 = new ConnectionFactoryDescriptor ( ) ; connectionFactoryDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { ConnectionFactoryDescriptor connectionFactoryDescriptor0 = new ConnectionFactoryDescriptor ( ) ; ConnectionFactoryDescriptor connectionFactoryDescriptor1 = ( ConnectionFactoryDescriptor ) connectionFactoryDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { ConnectionFactoryDescriptor connectionFactoryDescriptor0 = new ConnectionFactoryDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) connectionFactoryDescriptor0 , "org . exolab . jms . config . ConnectionFactoryDescriptor@3086bb79 ; descriptor for class : [ null ] ; xml name : null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { ConnectionFactoryDescriptor connectionFactoryDescriptor0 = new ConnectionFactoryDescriptor ( ) ; connectionFactoryDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { ConnectionFactoryDescriptor connectionFactoryDescriptor0 = new ConnectionFactoryDescriptor ( ) ; connectionFactoryDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { HttpConfiguration httpConfiguration0 = new HttpConfiguration ( ) ; boolean boolean0 = httpConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test0 ( ) throws Throwable { Jndi jndi0 = new Jndi ( ) ; boolean boolean0 = jndi0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test3 ( ) throws Throwable { Jndi jndi0 = new Jndi ( ) ; jndi0 . setInitialContextClass ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test0 ( ) throws Throwable { ThreadPriorityDescriptor threadPriorityDescriptor0 = new ThreadPriorityDescriptor ( ) ; threadPriorityDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { ThreadPriorityDescriptor threadPriorityDescriptor0 = new ThreadPriorityDescriptor ( ) ; threadPriorityDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test2 ( ) throws Throwable { ThreadPriorityDescriptor threadPriorityDescriptor0 = new ThreadPriorityDescriptor ( ) ; ThreadPriorityDescriptor threadPriorityDescriptor1 = ( ThreadPriorityDescriptor ) threadPriorityDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { ThreadPriorityDescriptor threadPriorityDescriptor0 = new ThreadPriorityDescriptor ( ) ; String string0 = threadPriorityDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { ThreadPriorityDescriptor threadPriorityDescriptor0 = new ThreadPriorityDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) threadPriorityDescriptor0 , "http : / / openjms . exolab . org / configuration" , ( NodeType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { ConnectorHelper connectorHelper0 = new ConnectorHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { SchemeType schemeType0 = SchemeType . EMBEDDED ; Configuration configuration0 = new Configuration ( ) ; ConnectorResource connectorResource0 = ConnectorHelper . getConnectorResource ( schemeType0 , configuration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Database Files ( * . db ) " ; }
void test4 ( ) throws Throwable { SchemeType schemeType0 = SchemeType . EMBEDDED ; Configuration configuration0 = new Configuration ( ) ; ConnectorResources connectorResources0 = new ConnectorResources ( ) ; configuration0 . setConnectorResources ( connectorResources0 ) ; ConnectorResource connectorResource0 = ConnectorHelper . getConnectorResource ( schemeType0 , configuration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ConnectorResource getConnectorResource ( SchemeType scheme , Configuration config ) { if ( scheme = = null ) { throw new IllegalArgumentException ( "Argument 'scheme' is null" ) ; } if ( config = = null ) { throw new IllegalArgumentException ( "Argument 'config' is null" ) ; } ConnectorResource result = null ; ConnectorResource [ ] connectors = _connectors ; if ( config . getConnectorResources ( ) ! = null ) { / / use the specified resources , if any connectors = config . getConnectorResources ( ) . getConnectorResource ( ) ; } String name = scheme . toString ( ) ; for ( int i = 0 ; i < connectors . length ; + + i ) { if ( connectors [ i ] . getScheme ( ) . toString ( ) . equals ( name ) ) { result = connectors [ i ] ; break ; } } return result ; }
void test0 ( ) throws Throwable { TcpConfigurationDescriptor tcpConfigurationDescriptor0 = new TcpConfigurationDescriptor ( ) ; String string0 = tcpConfigurationDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { TcpConfigurationDescriptor tcpConfigurationDescriptor0 = new TcpConfigurationDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) tcpConfigurationDescriptor0 , "or . exolabcasto . parZervaudLtQon" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { TcpConfigurationDescriptor tcpConfigurationDescriptor0 = new TcpConfigurationDescriptor ( ) ; TcpConfigurationDescriptor tcpConfigurationDescriptor1 = ( TcpConfigurationDescriptor ) tcpConfigurationDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test3 ( ) throws Throwable { TcpConfigurationDescriptor tcpConfigurationDescriptor0 = new TcpConfigurationDescriptor ( ) ; tcpConfigurationDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { TcpConfigurationDescriptor tcpConfigurationDescriptor0 = new TcpConfigurationDescriptor ( ) ; tcpConfigurationDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { XAQueueConnectionFactory xAQueueConnectionFactory0 = new XAQueueConnectionFactory ( ) ; boolean boolean0 = xAQueueConnectionFactory0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test0 ( ) throws Throwable { TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration ( ) ; tcpsConfiguration0 . setNeedClientAuth ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNeedClientAuth ( ) { return this . _has_needClientAuth ; }
void test2 ( ) throws Throwable { TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration ( ) ; boolean boolean0 = tcpsConfiguration0 . getNeedClientAuth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTrustStoreType ( ) { return _trustStoreType ; }
void test4 ( ) throws Throwable { TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration ( ) ; tcpsConfiguration0 . setTrustStore ( "JKS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTrustStoreType ( ) { return _trustStoreType ; }
void test5 ( ) throws Throwable { TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration ( ) ; tcpsConfiguration0 . deleteNeedClientAuth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNeedClientAuth ( ) { return this . _has_needClientAuth ; }
void test6 ( ) throws Throwable { TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration ( ) ; String string0 = tcpsConfiguration0 . getKeyStoreType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeyStorePassword ( ) { return _keyStorePassword ; }
void test7 ( ) throws Throwable { TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration ( ) ; String string0 = tcpsConfiguration0 . getKeyStore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTrustStoreType ( ) { return _trustStoreType ; }
void test8 ( ) throws Throwable { TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration ( ) ; tcpsConfiguration0 . setTrustStorePassword ( "openjms" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTrustStoreType ( ) { return _trustStoreType ; }
void test9 ( ) throws Throwable { TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration ( ) ; String string0 = tcpsConfiguration0 . getKeyStorePassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeyStore ( ) { return _keyStore ; }
void test10 ( ) throws Throwable { TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration ( ) ; String string0 = tcpsConfiguration0 . getTrustStoreType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeyStorePassword ( ) { return _keyStorePassword ; }
void test11 ( ) throws Throwable { TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration ( ) ; boolean boolean0 = tcpsConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeyStorePassword ( ) { return _keyStorePassword ; }
void test12 ( ) throws Throwable { TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration ( ) ; tcpsConfiguration0 . getTrustStore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeyStoreType ( ) { return _keyStoreType ; }
void test13 ( ) throws Throwable { TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration ( ) ; tcpsConfiguration0 . hasNeedClientAuth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTrustStoreType ( ) { return _trustStoreType ; }
void test14 ( ) throws Throwable { TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration ( ) ; tcpsConfiguration0 . getTrustStorePassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getNeedClientAuth ( ) { return _needCientAuth ; }
void test0 ( ) throws Throwable { HttpConfiguration httpConfiguration0 = new HttpConfiguration ( ) ; String string0 = httpConfiguration0 . getServlet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getWebServerHost ( ) { return this . _webServerHost ; }
void test1 ( ) throws Throwable { HttpConfiguration httpConfiguration0 = new HttpConfiguration ( ) ; httpConfiguration0 . setWebServerPort ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasWebServerPort ( ) { return this . _has_webServerPort ; }
void test2 ( ) throws Throwable { HttpConfiguration httpConfiguration0 = new HttpConfiguration ( ) ; String string0 = httpConfiguration0 . getWebServerHost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getServlet ( ) { return this . _servlet ; }
void test3 ( ) throws Throwable { HttpsConfiguration httpsConfiguration0 = new HttpsConfiguration ( ) ; httpsConfiguration0 . hasWebServerPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getWebServerHost ( ) { return this . _webServerHost ; }
void test4 ( ) throws Throwable { HttpConfiguration httpConfiguration0 = new HttpConfiguration ( ) ; int int0 = httpConfiguration0 . getWebServerPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getServlet ( ) { return this . _servlet ; }
void test1 ( ) throws Throwable { TcpsConfigurationDescriptor tcpsConfigurationDescriptor0 = new TcpsConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test2 ( ) throws Throwable { TcpsConfigurationDescriptor tcpsConfigurationDescriptor0 = new TcpsConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { TcpsConfigurationDescriptor tcpsConfigurationDescriptor0 = new TcpsConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { TcpsConfigurationDescriptor tcpsConfigurationDescriptor0 = new TcpsConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test5 ( ) throws Throwable { TcpsConfigurationDescriptor tcpsConfigurationDescriptor0 = new TcpsConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { TcpConfigurationTypeDescriptor tcpConfigurationTypeDescriptor0 = new TcpConfigurationTypeDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) tcpConfigurationTypeDescriptor0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test1 ( ) throws Throwable { TcpConfigurationTypeDescriptor tcpConfigurationTypeDescriptor0 = new TcpConfigurationTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { TcpConfigurationTypeDescriptor tcpConfigurationTypeDescriptor0 = new TcpConfigurationTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { TcpConfigurationTypeDescriptor tcpConfigurationTypeDescriptor0 = new TcpConfigurationTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { TcpConfigurationTypeDescriptor tcpConfigurationTypeDescriptor0 = new TcpConfigurationTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test0 ( ) throws Throwable { Users users0 = new Users ( ) ; boolean boolean0 = users0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test1 ( ) throws Throwable { Users users0 = new Users ( ) ; int int0 = users0 . getUserCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUserCount ( ) { return _userList . size ( ) ; }
void test2 ( ) throws Throwable { Users users0 = new Users ( ) ; Enumeration < Object > enumeration0 = users0 . enumerateUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test5 ( ) throws Throwable { Users users0 = new Users ( ) ; User user0 = new User ( ) ; boolean boolean0 = users0 . removeUser ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeUser ( String username ) ; / * * * List all users in the DB * * @return Enumeration of users * / Enumeration getAllUsers ( ) ; }
void test6 ( ) throws Throwable { Users users0 = new Users ( ) ; users0 . clearUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test14 ( ) throws Throwable { Users users0 = new Users ( ) ; User [ ] userArray0 = new User [ 5 ] ; users0 . setUser ( userArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test0 ( ) throws Throwable { XAConnectionFactoryDescriptor xAConnectionFactoryDescriptor0 = new XAConnectionFactoryDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) xAConnectionFactoryDescriptor0 , "org . exolab . jms . config . XAConnectionFactoryDescriptor@c147506 ; descriptor for class : [ null ] ; xml name : null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { XAConnectionFactoryDescriptor xAConnectionFactoryDescriptor0 = new XAConnectionFactoryDescriptor ( ) ; xAConnectionFactoryDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { XAConnectionFactoryDescriptor xAConnectionFactoryDescriptor0 = new XAConnectionFactoryDescriptor ( ) ; xAConnectionFactoryDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { XAConnectionFactoryDescriptor xAConnectionFactoryDescriptor0 = new XAConnectionFactoryDescriptor ( ) ; xAConnectionFactoryDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { XAConnectionFactoryDescriptor xAConnectionFactoryDescriptor0 = new XAConnectionFactoryDescriptor ( ) ; XAConnectionFactoryDescriptor xAConnectionFactoryDescriptor1 = ( XAConnectionFactoryDescriptor ) xAConnectionFactoryDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { TopicConnectionFactoryDescriptor topicConnectionFactoryDescriptor0 = new TopicConnectionFactoryDescriptor ( ) ; topicConnectionFactoryDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { TopicConnectionFactoryDescriptor topicConnectionFactoryDescriptor0 = new TopicConnectionFactoryDescriptor ( ) ; topicConnectionFactoryDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { TopicConnectionFactoryDescriptor topicConnectionFactoryDescriptor0 = new TopicConnectionFactoryDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) topicConnectionFactoryDescriptor0 , "org . exolab . jms . config . TopicConnectionFactoryDescriptor@571f908e ; descriptor for class : [ null ] ; xml name : null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { TopicConnectionFactoryDescriptor topicConnectionFactoryDescriptor0 = new TopicConnectionFactoryDescriptor ( ) ; TopicConnectionFactoryDescriptor topicConnectionFactoryDescriptor1 = ( TopicConnectionFactoryDescriptor ) topicConnectionFactoryDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { TopicConnectionFactoryDescriptor topicConnectionFactoryDescriptor0 = new TopicConnectionFactoryDescriptor ( ) ; topicConnectionFactoryDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { LoggerConfiguration loggerConfiguration0 = new LoggerConfiguration ( ) ; boolean boolean0 = loggerConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test2 ( ) throws Throwable { LoggerConfiguration loggerConfiguration0 = new LoggerConfiguration ( ) ; loggerConfiguration0 . setFile ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getFile ( ) { return this . _file ; }
void test0 ( ) throws Throwable { JndiDescriptor jndiDescriptor0 = new JndiDescriptor ( ) ; jndiDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test1 ( ) throws Throwable { JndiDescriptor jndiDescriptor0 = new JndiDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { JndiDescriptor jndiDescriptor0 = new JndiDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { JndiDescriptor jndiDescriptor0 = new JndiDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { JndiDescriptor jndiDescriptor0 = new JndiDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { DatabaseConfigurationDescriptor databaseConfigurationDescriptor0 = new DatabaseConfigurationDescriptor ( ) ; databaseConfigurationDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { DatabaseConfigurationDescriptor databaseConfigurationDescriptor0 = new DatabaseConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { DatabaseConfigurationDescriptor databaseConfigurationDescriptor0 = new DatabaseConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { DatabaseConfigurationDescriptor databaseConfigurationDescriptor0 = new DatabaseConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { DatabaseConfigurationDescriptor databaseConfigurationDescriptor0 = new DatabaseConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test0 ( ) throws Throwable { ConnectionFactory connectionFactory0 = new ConnectionFactory ( ) ; boolean boolean0 = connectionFactory0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test0 ( ) throws Throwable { HttpConfigurationTypeDescriptor httpConfigurationTypeDescriptor0 = new HttpConfigurationTypeDescriptor ( ) ; HttpConfigurationTypeDescriptor httpConfigurationTypeDescriptor1 = ( HttpConfigurationTypeDescriptor ) httpConfigurationTypeDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { HttpConfigurationTypeDescriptor httpConfigurationTypeDescriptor0 = new HttpConfigurationTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { HttpConfigurationTypeDescriptor httpConfigurationTypeDescriptor0 = new HttpConfigurationTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test3 ( ) throws Throwable { HttpConfigurationTypeDescriptor httpConfigurationTypeDescriptor0 = new HttpConfigurationTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { HttpConfigurationTypeDescriptor httpConfigurationTypeDescriptor0 = new HttpConfigurationTypeDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { RmiConfiguration rmiConfiguration0 = new RmiConfiguration ( ) ; rmiConfiguration0 . setClientPingInterval ( ( - 1045 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClientPingInterval ( ) { return this . _clientPingInterval ; }
void test1 ( ) throws Throwable { RmiConfiguration rmiConfiguration0 = new RmiConfiguration ( ) ; rmiConfiguration0 . setEmbeddedRegistry ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getEmbeddedRegistry ( ) { return this . _embeddedRegistry ; }
void test3 ( ) throws Throwable { RmiConfiguration rmiConfiguration0 = new RmiConfiguration ( ) ; boolean boolean0 = rmiConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRegistryPort ( ) { return this . _registryPort ; }
void test4 ( ) throws Throwable { RmiConfiguration rmiConfiguration0 = new RmiConfiguration ( ) ; rmiConfiguration0 . deleteClientPingInterval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClientPingInterval ( ) { return this . _clientPingInterval ; }
void test5 ( ) throws Throwable { RmiConfiguration rmiConfiguration0 = new RmiConfiguration ( ) ; rmiConfiguration0 . deleteRegistryPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRegistryPort ( ) { return this . _registryPort ; }
void test6 ( ) throws Throwable { RmiConfiguration rmiConfiguration0 = new RmiConfiguration ( ) ; int int0 = rmiConfiguration0 . getRegistryPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClientPingInterval ( ) { return this . _clientPingInterval ; }
void test7 ( ) throws Throwable { RmiConfiguration rmiConfiguration0 = new RmiConfiguration ( ) ; rmiConfiguration0 . setRegistryPort ( 1709 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClientPingInterval ( ) { return this . _clientPingInterval ; }
void test8 ( ) throws Throwable { RmiConfiguration rmiConfiguration0 = new RmiConfiguration ( ) ; rmiConfiguration0 . deleteEmbeddedRegistry ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClientPingInterval ( ) { return this . _clientPingInterval ; }
void test9 ( ) throws Throwable { RmiConfiguration rmiConfiguration0 = new RmiConfiguration ( ) ; int int0 = rmiConfiguration0 . getClientPingInterval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getEmbeddedRegistry ( ) { return this . _embeddedRegistry ; }
void test10 ( ) throws Throwable { RmiConfiguration rmiConfiguration0 = new RmiConfiguration ( ) ; boolean boolean0 = rmiConfiguration0 . getEmbeddedRegistry ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getRegistryHost ( ) { return this . _registryHost ; }
void test11 ( ) throws Throwable { RmiConfiguration rmiConfiguration0 = new RmiConfiguration ( ) ; CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; rmiConfiguration0 . marshal ( ( Writer ) charArrayWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRegistryPort ( ) { return this . _registryPort ; }
void test0 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . hasTestBeforeUse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBatchSize ( ) { return this . _batchSize ; }
void test1 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; int int0 = rdbmsDatabaseConfiguration0 . getEvictionInterval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBatchSize ( ) { return this . _batchSize ; }
void test2 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; int int0 = rdbmsDatabaseConfiguration0 . getMinIdleTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getClazz ( ) { return this . _clazz ; }
void test3 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; int int0 = rdbmsDatabaseConfiguration0 . getMaxActive ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxIdle ( ) { return _maxIdle ; }
void test4 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; int int0 = rdbmsDatabaseConfiguration0 . getMaxIdle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBatch ( ) { return this . _batch ; }
void test5 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . hasBatch ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTestBeforeUse ( ) { return _testBeforeUse ; }
void test6 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . deleteTestBeforeUse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxIdle ( ) { return _maxIdle ; }
void test7 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . setEvictionInterval ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBatch ( ) { return this . _batch ; }
void test8 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . setBatchSize ( 1889 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBatch ( ) { return this . _batch ; }
void test9 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . getUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxActive ( ) { return _maxActive ; }
void test10 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; boolean boolean0 = rdbmsDatabaseConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMinIdleTime ( ) { return _minIdleTime ; }
void test11 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . deleteEvictionInterval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBatch ( ) { return this . _batch ; }
void test12 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . getPassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBatchSize ( ) { return this . _batchSize ; }
void test13 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . setDriver ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxIdle ( ) { return _maxIdle ; }
void test14 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . setMinIdleTime ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxActive ( ) { return _maxActive ; }
void test15 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; boolean boolean0 = rdbmsDatabaseConfiguration0 . getBatch ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxActive ( ) { return _maxActive ; }
void test16 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . hasEvictionInterval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTestBeforeUse ( ) { return _testBeforeUse ; }
void test17 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . hasMaxActive ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMinIdleTime ( ) { return _minIdleTime ; }
void test18 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . setTestBeforeUse ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxIdle ( ) { return _maxIdle ; }
void test20 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . getUrl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxActive ( ) { return _maxActive ; }
void test21 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . setUser ( "ISO - 8859 - 5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMinIdleTime ( ) { return _minIdleTime ; }
void test22 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . hasMinIdleTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTestBeforeUse ( ) { return _testBeforeUse ; }
void test23 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . setMaxActive ( ( - 114 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBatchSize ( ) { return this . _batchSize ; }
void test24 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . hasBatchSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMinIdleTime ( ) { return _minIdleTime ; }
void test25 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . setMaxIdle ( ( - 114 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxActive ( ) { return _maxActive ; }
void test26 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . setTestQuery ( "Tq .  = < kQfyCk" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getClazz ( ) { return this . _clazz ; }
void test27 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . deleteMaxActive ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMinIdleTime ( ) { return _minIdleTime ; }
void test28 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . deleteBatch ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxIdle ( ) { return _maxIdle ; }
void test29 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . setUrl ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxActive ( ) { return _maxActive ; }
void test30 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; boolean boolean0 = rdbmsDatabaseConfiguration0 . getTestBeforeUse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBatchSize ( ) { return this . _batchSize ; }
void test31 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . getTestQuery ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMinIdleTime ( ) { return _minIdleTime ; }
void test32 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . deleteBatchSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxActive ( ) { return _maxActive ; }
void test33 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . setPassword ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getClazz ( ) { return this . _clazz ; }
void test34 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . hasMaxIdle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxIdle ( ) { return _maxIdle ; }
void test35 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . deleteMinIdleTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getClazz ( ) { return this . _clazz ; }
void test36 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . setBatch ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxIdle ( ) { return _maxIdle ; }
void test38 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; rdbmsDatabaseConfiguration0 . deleteMaxIdle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxIdle ( ) { return _maxIdle ; }
void test39 ( ) throws Throwable { RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration ( ) ; int int0 = rdbmsDatabaseConfiguration0 . getBatchSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxActive ( ) { return _maxActive ; }
void test0 ( ) throws Throwable { SecondsDescriptor secondsDescriptor0 = new SecondsDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) secondsDescriptor0 , "http : / / openjms . exolab . org / configuration" , ( NodeType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test1 ( ) throws Throwable { SecondsDescriptor secondsDescriptor0 = new SecondsDescriptor ( ) ; SecondsDescriptor secondsDescriptor1 = ( SecondsDescriptor ) secondsDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { SecondsDescriptor secondsDescriptor0 = new SecondsDescriptor ( ) ; secondsDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test3 ( ) throws Throwable { SecondsDescriptor secondsDescriptor0 = new SecondsDescriptor ( ) ; secondsDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { SecondsDescriptor secondsDescriptor0 = new SecondsDescriptor ( ) ; String string0 = secondsDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration ( ) ; int int0 = garbageCollectionConfiguration0 . getLowWaterThreshold ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMemoryCheckInterval ( ) { return this . _memoryCheckInterval ; }
void test1 ( ) throws Throwable { GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration ( ) ; garbageCollectionConfiguration0 . setLowWaterThreshold ( ( - 360 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGarbageCollectionInterval ( ) { return this . _garbageCollectionInterval ; }
void test2 ( ) throws Throwable { GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration ( ) ; garbageCollectionConfiguration0 . setGarbageCollectionThreadPriority ( 0 ) ; boolean boolean0 = garbageCollectionConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test4 ( ) throws Throwable { GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration ( ) ; CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ( int ) '\u0000' ) ; garbageCollectionConfiguration0 . marshal ( ( Writer ) charArrayWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLowWaterThreshold ( ) { return this . _lowWaterThreshold ; }
void test5 ( ) throws Throwable { GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration ( ) ; garbageCollectionConfiguration0 . deleteMemoryCheckInterval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMemoryCheckInterval ( ) { return this . _memoryCheckInterval ; }
void test6 ( ) throws Throwable { GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration ( ) ; garbageCollectionConfiguration0 . deleteGarbageCollectionInterval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMemoryCheckInterval ( ) { return this . _memoryCheckInterval ; }
void test7 ( ) throws Throwable { GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration ( ) ; garbageCollectionConfiguration0 . deleteLowWaterThreshold ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGarbageCollectionInterval ( ) { return this . _garbageCollectionInterval ; }
void test8 ( ) throws Throwable { GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration ( ) ; garbageCollectionConfiguration0 . setMemoryCheckInterval ( 600 ) ; boolean boolean0 = garbageCollectionConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMemoryCheckInterval ( ) { return this . _memoryCheckInterval ; }
void test9 ( ) throws Throwable { GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration ( ) ; garbageCollectionConfiguration0 . deleteGarbageCollectionThreadPriority ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMemoryCheckInterval ( ) { return this . _memoryCheckInterval ; }
void test10 ( ) throws Throwable { GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration ( ) ; garbageCollectionConfiguration0 . setGarbageCollectionInterval ( 1546 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGarbageCollectionThreadPriority ( ) { return this . _garbageCollectionThreadPriority ; }
void test11 ( ) throws Throwable { GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration ( ) ; int int0 = garbageCollectionConfiguration0 . getGarbageCollectionInterval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMemoryCheckInterval ( ) { return this . _memoryCheckInterval ; }
void test0 ( ) throws Throwable { MessageManagerConfigurationDescriptor messageManagerConfigurationDescriptor0 = new MessageManagerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test1 ( ) throws Throwable { MessageManagerConfigurationDescriptor messageManagerConfigurationDescriptor0 = new MessageManagerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test2 ( ) throws Throwable { MessageManagerConfigurationDescriptor messageManagerConfigurationDescriptor0 = new MessageManagerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { MessageManagerConfigurationDescriptor messageManagerConfigurationDescriptor0 = new MessageManagerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { MessageManagerConfigurationDescriptor messageManagerConfigurationDescriptor0 = new MessageManagerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { ConnectorResourceDescriptor connectorResourceDescriptor0 = new ConnectorResourceDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { ConnectorResourceDescriptor connectorResourceDescriptor0 = new ConnectorResourceDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { ConnectorResourceDescriptor connectorResourceDescriptor0 = new ConnectorResourceDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { ConnectorResourceDescriptor connectorResourceDescriptor0 = new ConnectorResourceDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { ConnectorResourceDescriptor connectorResourceDescriptor0 = new ConnectorResourceDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test0 ( ) throws Throwable { ConfigurationManager configurationManager0 = new ConfigurationManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { AdminConfiguration adminConfiguration0 = new AdminConfiguration ( ) ; boolean boolean0 = adminConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test3 ( ) throws Throwable { AdminConfiguration adminConfiguration0 = new AdminConfiguration ( ) ; adminConfiguration0 . setConfig ( "t > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Configuration getConfig ( ) { if ( _config = = null ) { throw new IllegalStateException ( "Configuration manager has not been initialised" ) ; } return _config ; }
void test4 ( ) throws Throwable { AdminConfiguration adminConfiguration0 = new AdminConfiguration ( ) ; adminConfiguration0 . setScript ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Configuration getConfig ( ) { if ( _config = = null ) { throw new IllegalStateException ( "Configuration manager has not been initialised" ) ; } return _config ; }
void test5 ( ) throws Throwable { AdminConfiguration adminConfiguration0 = new AdminConfiguration ( ) ; String string0 = adminConfiguration0 . getConfig ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Configuration getConfig ( ) { if ( _config = = null ) { throw new IllegalStateException ( "Configuration manager has not been initialised" ) ; } return _config ; }
void test0 ( ) throws Throwable { QueueConnectionFactoryDescriptor queueConnectionFactoryDescriptor0 = new QueueConnectionFactoryDescriptor ( ) ; queueConnectionFactoryDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { QueueConnectionFactoryDescriptor queueConnectionFactoryDescriptor0 = new QueueConnectionFactoryDescriptor ( ) ; QueueConnectionFactoryDescriptor queueConnectionFactoryDescriptor1 = ( QueueConnectionFactoryDescriptor ) queueConnectionFactoryDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { QueueConnectionFactoryDescriptor queueConnectionFactoryDescriptor0 = new QueueConnectionFactoryDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) queueConnectionFactoryDescriptor0 , "org . exolab . jms . config . QueueConnectionFactoryDescriptor@46fe2bf8 ; descriptor for class : [ null ] ; xml name : null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { QueueConnectionFactoryDescriptor queueConnectionFactoryDescriptor0 = new QueueConnectionFactoryDescriptor ( ) ; queueConnectionFactoryDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { QueueConnectionFactoryDescriptor queueConnectionFactoryDescriptor0 = new QueueConnectionFactoryDescriptor ( ) ; queueConnectionFactoryDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; int int0 = connectionFactories0 . getQueueConnectionFactoryCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getQueueConnectionFactoryCount ( ) { return _queueConnectionFactoryList . size ( ) ; }
void test1 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; connectionFactories0 . clearXAQueueConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTopicConnectionFactoryCount ( ) { return _topicConnectionFactoryList . size ( ) ; }
void test2 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; connectionFactories0 . addXATopicConnectionFactory ( ( XATopicConnectionFactory ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getXATopicConnectionFactoryCount ( ) { return _XATopicConnectionFactoryList . size ( ) ; }
void test3 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; boolean boolean0 = connectionFactories0 . removeConnectionFactory ( ( ConnectionFactory ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeConnectionFactory ( ConnectionFactory vConnectionFactory ) { boolean removed = _connectionFactoryList . remove ( vConnectionFactory ) ; return removed ; }
void test4 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; Enumeration < Object > enumeration0 = connectionFactories0 . enumerateTopicConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test5 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; int int0 = connectionFactories0 . getTopicConnectionFactoryCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTopicConnectionFactoryCount ( ) { return _topicConnectionFactoryList . size ( ) ; }
void test6 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; connectionFactories0 . addXAConnectionFactory ( ( XAConnectionFactory ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getXAConnectionFactoryCount ( ) { return _XAConnectionFactoryList . size ( ) ; }
void test7 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; QueueConnectionFactory queueConnectionFactory0 = new QueueConnectionFactory ( ) ; connectionFactories0 . addQueueConnectionFactory ( queueConnectionFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test8 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; connectionFactories0 . clearQueueConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test9 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory ( ) ; connectionFactories0 . addXATopicConnectionFactory ( 0 , xATopicConnectionFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test10 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; ConnectionFactory connectionFactory0 = new ConnectionFactory ( ) ; connectionFactories0 . addConnectionFactory ( connectionFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionFactoryCount ( ) { return _connectionFactoryList . size ( ) ; }
void test11 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; boolean boolean0 = connectionFactories0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test12 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; int int0 = connectionFactories0 . getConnectionFactoryCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionFactoryCount ( ) { return _connectionFactoryList . size ( ) ; }
void test13 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; Enumeration < Object > enumeration0 = connectionFactories0 . enumerateConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test14 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; Enumeration < Object > enumeration0 = connectionFactories0 . enumerateXAQueueConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test15 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; connectionFactories0 . clearConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getXAQueueConnectionFactoryCount ( ) { return _XAQueueConnectionFactoryList . size ( ) ; }
void test16 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; int int0 = connectionFactories0 . getXAQueueConnectionFactoryCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getXAQueueConnectionFactoryCount ( ) { return _XAQueueConnectionFactoryList . size ( ) ; }
void test17 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; Enumeration < Object > enumeration0 = connectionFactories0 . enumerateXATopicConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test19 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; connectionFactories0 . clearXATopicConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionFactoryCount ( ) { return _connectionFactoryList . size ( ) ; }
void test20 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; Enumeration < Object > enumeration0 = connectionFactories0 . enumerateQueueConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test21 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; connectionFactories0 . clearXAConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getXAConnectionFactoryCount ( ) { return _XAConnectionFactoryList . size ( ) ; }
void test22 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; QueueConnectionFactory queueConnectionFactory0 = new QueueConnectionFactory ( ) ; boolean boolean0 = connectionFactories0 . removeQueueConnectionFactory ( queueConnectionFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeQueueConnectionFactory ( QueueConnectionFactory vQueueConnectionFactory ) { boolean removed = _queueConnectionFactoryList . remove ( vQueueConnectionFactory ) ; return removed ; }
void test23 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; TopicConnectionFactory topicConnectionFactory0 = new TopicConnectionFactory ( ) ; connectionFactories0 . addTopicConnectionFactory ( 0 , topicConnectionFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTopicConnectionFactoryCount ( ) { return _topicConnectionFactoryList . size ( ) ; }
void test24 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; ConnectionFactory connectionFactory0 = new ConnectionFactory ( ) ; connectionFactories0 . addConnectionFactory ( 0 , connectionFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test37 ( ) throws Throwable { ConnectionFactories connectionFactories0 = new ConnectionFactories ( ) ; ConnectionFactory [ ] connectionFactoryArray0 = new ConnectionFactory [ 2 ] ; connectionFactories0 . setConnectionFactory ( connectionFactoryArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionFactoryCount ( ) { return _connectionFactoryList . size ( ) ; }
void test3 ( ) throws Throwable { ConfigHelper configHelper0 = new ConfigHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test7 ( ) throws Throwable { SchemeType schemeType0 = SchemeType . EMBEDDED ; Configuration configuration0 = new Configuration ( ) ; String string0 = ConfigHelper . getServerURL ( schemeType0 , configuration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerURL ( SchemeType scheme , Configuration config ) { String url = null ; ServerConfiguration server = config . getServerConfiguration ( ) ; if ( scheme . equals ( SchemeType . TCP ) ) { url = getServerURL ( scheme , server . getHost ( ) , config . getTcpConfiguration ( ) ) ; } else if ( scheme . equals ( SchemeType . TCPS ) ) { url = getServerURL ( scheme , server . getHost ( ) , config . getTcpsConfiguration ( ) ) ; } else if ( scheme . equals ( SchemeType . RMI ) ) { RmiConfiguration rmi = config . getRmiConfiguration ( ) ; if ( rmi . getEmbeddedRegistry ( ) ) { / / if the registry is embedded within the OpenJMS server , / / use the server host url = getServerURL ( scheme , server . getHost ( ) , rmi ) ; } else { url = getServerURL ( scheme , rmi . getRegistryHost ( ) , rmi ) ; } } else if ( scheme . equals ( SchemeType . HTTP ) ) { url = getServerURL ( scheme , config . getHttpConfiguration ( ) ) ; } else if ( scheme . equals ( SchemeType . HTTPS ) ) { url = getServerURL ( scheme , config . getHttpsConfiguration ( ) ) ; } else if ( scheme . equals ( SchemeType . EMBEDDED ) ) { url = "vm : openjms" ; } return url ; }
void test11 ( ) throws Throwable { SchemeType schemeType0 = SchemeType . EMBEDDED ; Configuration configuration0 = new Configuration ( ) ; String string0 = ConfigHelper . getJndiURL ( schemeType0 , configuration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getJndiURL ( SchemeType scheme , Configuration config ) { String url = null ; ServerConfiguration server = config . getServerConfiguration ( ) ; if ( scheme . equals ( SchemeType . TCP ) ) { url = getJndiURL ( scheme , server . getHost ( ) , config . getTcpConfiguration ( ) ) ; } else if ( scheme . equals ( SchemeType . TCPS ) ) { url = getJndiURL ( scheme , server . getHost ( ) , config . getTcpsConfiguration ( ) ) ; } else if ( scheme . equals ( SchemeType . HTTP ) ) { url = getJndiURL ( scheme , config . getHttpConfiguration ( ) ) ; } else if ( scheme . equals ( SchemeType . HTTPS ) ) { url = getJndiURL ( scheme , config . getHttpsConfiguration ( ) ) ; } else if ( scheme . equals ( SchemeType . RMI ) ) { RmiConfiguration rmi = config . getRmiConfiguration ( ) ; if ( rmi . getEmbeddedRegistry ( ) ) { / / if the registry is embedded within the OpenJMS server , / / use the server host url = getJndiURL ( scheme , server . getHost ( ) , rmi ) ; } else { url = getJndiURL ( scheme , rmi . getRegistryHost ( ) , rmi ) ; } } else if ( scheme . equals ( SchemeType . EMBEDDED ) ) { url = "vm : openjms" ; } return url ; }
void test18 ( ) throws Throwable { SchemeType schemeType0 = SchemeType . EMBEDDED ; Configuration configuration0 = new Configuration ( ) ; String string0 = ConfigHelper . getAdminURL ( schemeType0 , configuration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAdminURL ( SchemeType scheme , Configuration config ) { String url = null ; ServerConfiguration server = config . getServerConfiguration ( ) ; if ( scheme . equals ( SchemeType . TCP ) ) { url = getAdminURL ( scheme , server . getHost ( ) , config . getTcpConfiguration ( ) ) ; } else if ( scheme . equals ( SchemeType . TCPS ) ) { url = getAdminURL ( scheme , server . getHost ( ) , config . getTcpsConfiguration ( ) ) ; } else if ( scheme . equals ( SchemeType . RMI ) ) { RmiConfiguration rmi = config . getRmiConfiguration ( ) ; if ( rmi . getEmbeddedRegistry ( ) ) { / / if the registry is embedded within the OpenJMS server , / / use the server host url = getAdminURL ( scheme , server . getHost ( ) , rmi ) ; } else { url = getAdminURL ( scheme , rmi . getRegistryHost ( ) , rmi ) ; } } else if ( scheme . equals ( SchemeType . HTTP ) ) { url = getAdminURL ( scheme , config . getHttpConfiguration ( ) ) ; } else if ( scheme . equals ( SchemeType . HTTPS ) ) { url = getAdminURL ( scheme , config . getHttpsConfiguration ( ) ) ; } else if ( scheme . equals ( SchemeType . EMBEDDED ) ) { url = "vm : openjms" ; } return url ; }
void test0 ( ) throws Throwable { Subscriber subscriber0 = new Subscriber ( ) ; boolean boolean0 = subscriber0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test2 ( ) throws Throwable { Subscriber subscriber0 = new Subscriber ( ) ; subscriber0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test0 ( ) throws Throwable { ServerDescriptor serverDescriptor0 = new ServerDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { ServerDescriptor serverDescriptor0 = new ServerDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { ServerDescriptor serverDescriptor0 = new ServerDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { ServerDescriptor serverDescriptor0 = new ServerDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { ServerDescriptor serverDescriptor0 = new ServerDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory ( ) ; boolean boolean0 = xATopicConnectionFactory0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test1 ( ) throws Throwable { HttpsConfiguration httpsConfiguration0 = new HttpsConfiguration ( ) ; boolean boolean0 = httpsConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test0 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; configuration0 . setJndiConfiguration ( ( JndiConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test1 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; boolean boolean0 = configuration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test2 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; GarbageCollectionConfiguration garbageCollectionConfiguration0 = configuration0 . getGarbageCollectionConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . GarbageCollectionConfiguration getGarbageCollectionConfiguration ( ) { return this . _garbageCollectionConfiguration ; }
void test3 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; ConnectorResources connectorResources0 = new ConnectorResources ( ) ; configuration0 . setConnectorResources ( connectorResources0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test4 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; MessageManagerConfiguration messageManagerConfiguration0 = configuration0 . getMessageManagerConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . MessageManagerConfiguration getMessageManagerConfiguration ( ) { return this . _messageManagerConfiguration ; }
void test5 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; configuration0 . setAdministeredDestinations ( ( AdministeredDestinations ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test6 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; configuration0 . setHttpConfiguration ( ( HttpConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test7 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; SchedulerConfiguration schedulerConfiguration0 = configuration0 . getSchedulerConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . SchedulerConfiguration getSchedulerConfiguration ( ) { return this . _schedulerConfiguration ; }
void test8 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; configuration0 . setMessageManagerConfiguration ( ( MessageManagerConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test9 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; configuration0 . setGarbageCollectionConfiguration ( ( GarbageCollectionConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test10 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; RmiConfiguration rmiConfiguration0 = configuration0 . getRmiConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . RmiConfiguration getRmiConfiguration ( ) { return this . _rmiConfiguration ; }
void test11 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; HttpsConfiguration httpsConfiguration0 = configuration0 . getHttpsConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . HttpsConfiguration getHttpsConfiguration ( ) { return this . _httpsConfiguration ; }
void test12 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; configuration0 . setUsers ( ( Users ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test13 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; ConnectorResources connectorResources0 = configuration0 . getConnectorResources ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . ConnectorResources getConnectorResources ( ) { return this . _connectorResources ; }
void test14 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; configuration0 . setDatabaseConfiguration ( ( DatabaseConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test15 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; LoggerConfiguration loggerConfiguration0 = configuration0 . getLoggerConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . LoggerConfiguration getLoggerConfiguration ( ) { return this . _loggerConfiguration ; }
void test16 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; configuration0 . setAdminConfiguration ( ( AdminConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test17 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; configuration0 . setRmiConfiguration ( ( RmiConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test18 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; configuration0 . setSchedulerConfiguration ( ( SchedulerConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test19 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; TcpsConfiguration tcpsConfiguration0 = configuration0 . getTcpsConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . TcpsConfiguration getTcpsConfiguration ( ) { return this . _tcpsConfiguration ; }
void test20 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; LoggerConfiguration loggerConfiguration0 = new LoggerConfiguration ( ) ; configuration0 . setLoggerConfiguration ( loggerConfiguration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test21 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; TcpConfiguration tcpConfiguration0 = configuration0 . getTcpConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . TcpConfiguration getTcpConfiguration ( ) { return this . _tcpConfiguration ; }
void test22 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; JndiConfiguration jndiConfiguration0 = configuration0 . getJndiConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . JndiConfiguration getJndiConfiguration ( ) { return this . _jndiConfiguration ; }
void test23 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; AdministeredDestinations administeredDestinations0 = configuration0 . getAdministeredDestinations ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . AdministeredDestinations getAdministeredDestinations ( ) { return this . _administeredDestinations ; }
void test24 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; ServerConfiguration serverConfiguration0 = configuration0 . getServerConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . ServerConfiguration getServerConfiguration ( ) { return this . _serverConfiguration ; }
void test25 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; ServerConfiguration serverConfiguration0 = new ServerConfiguration ( ) ; configuration0 . setServerConfiguration ( serverConfiguration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test26 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; configuration0 . setConnectors ( ( Connectors ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test27 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; Connectors connectors0 = configuration0 . getConnectors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . Connectors getConnectors ( ) { return this . _connectors ; }
void test29 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; SecurityConfiguration securityConfiguration0 = configuration0 . getSecurityConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . SecurityConfiguration getSecurityConfiguration ( ) { return this . _securityConfiguration ; }
void test30 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; configuration0 . setTcpConfiguration ( ( TcpConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test31 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; HttpConfiguration httpConfiguration0 = configuration0 . getHttpConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . HttpConfiguration getHttpConfiguration ( ) { return this . _httpConfiguration ; }
void test32 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; SecurityConfiguration securityConfiguration0 = new SecurityConfiguration ( ) ; configuration0 . setSecurityConfiguration ( securityConfiguration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test33 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; Users users0 = configuration0 . getUsers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List getUsers ( ) throws PersistenceException { ArrayList result = new ArrayList ( ) ; PreparedStatement select = null ; ResultSet set = null ; try { select = _connection . prepareStatement ( "select * from " + USER_TABLE ) ; set = select . executeQuery ( ) ; while ( set . next ( ) ) { String user = set . getString ( "username" ) ; String password = set . getString ( "password" ) ; result . add ( new User ( user , password ) ) ; } } catch ( SQLException exception ) { throw new PersistenceException ( "Failed to retrieve users" , exception ) ; } finally { SQLHelper . close ( set ) ; SQLHelper . close ( select ) ; } return result ; }
void test34 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; HttpsConfiguration httpsConfiguration0 = new HttpsConfiguration ( ) ; configuration0 . setHttpsConfiguration ( httpsConfiguration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getServlet ( ) { return this . _servlet ; }
void test35 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; configuration0 . setTcpsConfiguration ( ( TcpsConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test36 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; AdminConfiguration adminConfiguration0 = configuration0 . getAdminConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" org . exolab . jms . config . AdminConfiguration getAdminConfiguration ( ) { return this . _adminConfiguration ; }
void test0 ( ) throws Throwable { UserDescriptor userDescriptor0 = new UserDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) userDescriptor0 , ( String ) null , ( NodeType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { UserDescriptor userDescriptor0 = new UserDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { UserDescriptor userDescriptor0 = new UserDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { UserDescriptor userDescriptor0 = new UserDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { UserDescriptor userDescriptor0 = new UserDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { ConnectorsDescriptor connectorsDescriptor0 = new ConnectorsDescriptor ( ) ; String string0 = connectorsDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { ConnectorsDescriptor connectorsDescriptor0 = new ConnectorsDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test2 ( ) throws Throwable { ConnectorsDescriptor connectorsDescriptor0 = new ConnectorsDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test3 ( ) throws Throwable { ConnectorsDescriptor connectorsDescriptor0 = new ConnectorsDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { ConnectorsDescriptor connectorsDescriptor0 = new ConnectorsDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { MessageManagerConfiguration messageManagerConfiguration0 = new MessageManagerConfiguration ( ) ; messageManagerConfiguration0 . setDestinationCacheSize ( ( - 17 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDestinationCacheSize ( ) { return this . _destinationCacheSize ; }
void test1 ( ) throws Throwable { MessageManagerConfiguration messageManagerConfiguration0 = new MessageManagerConfiguration ( ) ; int int0 = messageManagerConfiguration0 . getDestinationCacheSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDestinationCacheSize ( ) { return this . _destinationCacheSize ; }
void test2 ( ) throws Throwable { MessageManagerConfiguration messageManagerConfiguration0 = new MessageManagerConfiguration ( ) ; boolean boolean0 = messageManagerConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test1 ( ) throws Throwable { TopicConnectionFactory topicConnectionFactory0 = new TopicConnectionFactory ( ) ; boolean boolean0 = topicConnectionFactory0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test2 ( ) throws Throwable { AdministeredDestinations administeredDestinations0 = new AdministeredDestinations ( ) ; administeredDestinations0 . clearAdministeredQueue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test3 ( ) throws Throwable { AdministeredDestinations administeredDestinations0 = new AdministeredDestinations ( ) ; Enumeration < Object > enumeration0 = administeredDestinations0 . enumerateAdministeredTopic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test4 ( ) throws Throwable { AdministeredDestinations administeredDestinations0 = new AdministeredDestinations ( ) ; AdministeredTopic administeredTopic0 = new AdministeredTopic ( ) ; boolean boolean0 = administeredDestinations0 . removeAdministeredTopic ( administeredTopic0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeAdministeredTopic ( AdministeredTopic vAdministeredTopic ) { boolean removed = _administeredTopicList . remove ( vAdministeredTopic ) ; return removed ; }
void test5 ( ) throws Throwable { AdministeredDestinations administeredDestinations0 = new AdministeredDestinations ( ) ; Enumeration < Object > enumeration0 = administeredDestinations0 . enumerateAdministeredQueue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test6 ( ) throws Throwable { AdministeredDestinations administeredDestinations0 = new AdministeredDestinations ( ) ; administeredDestinations0 . addAdministeredTopic ( ( AdministeredTopic ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAdministeredTopicCount ( ) { return _administeredTopicList . size ( ) ; }
void test7 ( ) throws Throwable { AdministeredDestinations administeredDestinations0 = new AdministeredDestinations ( ) ; int int0 = administeredDestinations0 . getAdministeredTopicCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAdministeredTopicCount ( ) { return _administeredTopicList . size ( ) ; }
void test8 ( ) throws Throwable { AdministeredDestinations administeredDestinations0 = new AdministeredDestinations ( ) ; int int0 = administeredDestinations0 . getAdministeredQueueCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAdministeredQueueCount ( ) { return _administeredQueueList . size ( ) ; }
void test10 ( ) throws Throwable { AdministeredDestinations administeredDestinations0 = new AdministeredDestinations ( ) ; CharArrayWriter charArrayWriter0 = new CharArrayWriter ( 775 ) ; administeredDestinations0 . marshal ( ( Writer ) charArrayWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test11 ( ) throws Throwable { AdministeredDestinations administeredDestinations0 = new AdministeredDestinations ( ) ; administeredDestinations0 . clearAdministeredTopic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAdministeredQueueCount ( ) { return _administeredQueueList . size ( ) ; }
void test12 ( ) throws Throwable { AdministeredDestinations administeredDestinations0 = new AdministeredDestinations ( ) ; AdministeredQueue administeredQueue0 = new AdministeredQueue ( ) ; boolean boolean0 = administeredDestinations0 . removeAdministeredQueue ( administeredQueue0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeAdministeredQueue ( AdministeredQueue vAdministeredQueue ) { boolean removed = _administeredQueueList . remove ( vAdministeredQueue ) ; return removed ; }
void test16 ( ) throws Throwable { AdministeredDestinations administeredDestinations0 = new AdministeredDestinations ( ) ; administeredDestinations0 . addAdministeredQueue ( ( AdministeredQueue ) null ) ; boolean boolean0 = administeredDestinations0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAdministeredQueueCount ( ) { return _administeredQueueList . size ( ) ; }
void test20 ( ) throws Throwable { AdministeredDestinations administeredDestinations0 = new AdministeredDestinations ( ) ; AdministeredTopic [ ] administeredTopicArray0 = new AdministeredTopic [ 4 ] ; administeredDestinations0 . setAdministeredTopic ( administeredTopicArray0 ) ; boolean boolean0 = administeredDestinations0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAdministeredTopicCount ( ) { return _administeredTopicList . size ( ) ; }
void test23 ( ) throws Throwable { AdministeredDestinations administeredDestinations0 = new AdministeredDestinations ( ) ; AdministeredQueue [ ] administeredQueueArray0 = new AdministeredQueue [ 21 ] ; administeredDestinations0 . setAdministeredQueue ( administeredQueueArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAdministeredQueueCount ( ) { return _administeredQueueList . size ( ) ; }
void test0 ( ) throws Throwable { ServerConfigurationDescriptor serverConfigurationDescriptor0 = new ServerConfigurationDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) serverConfigurationDescriptor0 , "http : / / openjms . exolab . org / configuration" , ( NodeType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test1 ( ) throws Throwable { ServerConfigurationDescriptor serverConfigurationDescriptor0 = new ServerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test2 ( ) throws Throwable { ServerConfigurationDescriptor serverConfigurationDescriptor0 = new ServerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { ServerConfigurationDescriptor serverConfigurationDescriptor0 = new ServerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { ServerConfigurationDescriptor serverConfigurationDescriptor0 = new ServerConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test1 ( ) throws Throwable { User user0 = new User ( ) ; user0 . setPassword ( "E" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test2 ( ) throws Throwable { User user0 = new User ( ) ; boolean boolean0 = user0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test0 ( ) throws Throwable { UsersDescriptor usersDescriptor0 = new UsersDescriptor ( ) ; UsersDescriptor usersDescriptor1 = ( UsersDescriptor ) usersDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { UsersDescriptor usersDescriptor0 = new UsersDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test2 ( ) throws Throwable { UsersDescriptor usersDescriptor0 = new UsersDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { UsersDescriptor usersDescriptor0 = new UsersDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { UsersDescriptor usersDescriptor0 = new UsersDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { ConnectorResourcesDescriptor connectorResourcesDescriptor0 = new ConnectorResourcesDescriptor ( ) ; connectorResourcesDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test1 ( ) throws Throwable { ConnectorResourcesDescriptor connectorResourcesDescriptor0 = new ConnectorResourcesDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test2 ( ) throws Throwable { ConnectorResourcesDescriptor connectorResourcesDescriptor0 = new ConnectorResourcesDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { ConnectorResourcesDescriptor connectorResourcesDescriptor0 = new ConnectorResourcesDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { ConnectorResourcesDescriptor connectorResourcesDescriptor0 = new ConnectorResourcesDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; PropertyDescriptor propertyDescriptor1 = ( PropertyDescriptor ) propertyDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { AdministeredQueueDescriptor administeredQueueDescriptor0 = new AdministeredQueueDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) administeredQueueDescriptor0 , ( String ) null , ( NodeType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { AdministeredQueueDescriptor administeredQueueDescriptor0 = new AdministeredQueueDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { AdministeredQueueDescriptor administeredQueueDescriptor0 = new AdministeredQueueDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { AdministeredQueueDescriptor administeredQueueDescriptor0 = new AdministeredQueueDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { AdministeredQueueDescriptor administeredQueueDescriptor0 = new AdministeredQueueDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { SchedulerConfiguration schedulerConfiguration0 = new SchedulerConfiguration ( ) ; int int0 = schedulerConfiguration0 . getMaxThreads ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreads ( ) { return this . _maxThreads ; }
void test3 ( ) throws Throwable { SchedulerConfiguration schedulerConfiguration0 = new SchedulerConfiguration ( ) ; schedulerConfiguration0 . setMaxThreads ( ( - 17 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreads ( ) { return this . _maxThreads ; }
void test4 ( ) throws Throwable { SchedulerConfiguration schedulerConfiguration0 = new SchedulerConfiguration ( ) ; boolean boolean0 = schedulerConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test0 ( ) throws Throwable { DefaultConfigurationDescriptor defaultConfigurationDescriptor0 = new DefaultConfigurationDescriptor ( ) ; String string0 = defaultConfigurationDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { DefaultConfigurationDescriptor defaultConfigurationDescriptor0 = new DefaultConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test2 ( ) throws Throwable { DefaultConfigurationDescriptor defaultConfigurationDescriptor0 = new DefaultConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test3 ( ) throws Throwable { DefaultConfigurationDescriptor defaultConfigurationDescriptor0 = new DefaultConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { DefaultConfigurationDescriptor defaultConfigurationDescriptor0 = new DefaultConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { AdministeredTopic administeredTopic0 = new AdministeredTopic ( ) ; Subscriber subscriber0 = new Subscriber ( ) ; boolean boolean0 = administeredTopic0 . removeSubscriber ( subscriber0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeSubscriber ( Subscriber vSubscriber ) { boolean removed = _subscriberList . remove ( vSubscriber ) ; return removed ; }
void test2 ( ) throws Throwable { AdministeredTopic administeredTopic0 = new AdministeredTopic ( ) ; Enumeration < Object > enumeration0 = administeredTopic0 . enumerateSubscriber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test3 ( ) throws Throwable { AdministeredTopic administeredTopic0 = new AdministeredTopic ( ) ; Subscriber subscriber0 = new Subscriber ( ) ; administeredTopic0 . addSubscriber ( subscriber0 ) ; administeredTopic0 . getSubscriber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSubscriberCount ( ) { return _subscriberList . size ( ) ; }
void test4 ( ) throws Throwable { AdministeredTopic administeredTopic0 = new AdministeredTopic ( ) ; administeredTopic0 . clearSubscriber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test6 ( ) throws Throwable { AdministeredTopic administeredTopic0 = new AdministeredTopic ( ) ; Subscriber subscriber0 = new Subscriber ( ) ; administeredTopic0 . addSubscriber ( 0 , subscriber0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSubscriberCount ( ) { return _subscriberList . size ( ) ; }
void test7 ( ) throws Throwable { AdministeredTopic administeredTopic0 = new AdministeredTopic ( ) ; boolean boolean0 = administeredTopic0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test8 ( ) throws Throwable { AdministeredTopic administeredTopic0 = new AdministeredTopic ( ) ; administeredTopic0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name_ ; }
void test9 ( ) throws Throwable { AdministeredTopic administeredTopic0 = new AdministeredTopic ( ) ; int int0 = administeredTopic0 . getSubscriberCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSubscriberCount ( ) { return _subscriberList . size ( ) ; }
void test16 ( ) throws Throwable { AdministeredTopic administeredTopic0 = new AdministeredTopic ( ) ; Subscriber [ ] subscriberArray0 = new Subscriber [ 8 ] ; administeredTopic0 . setSubscriber ( subscriberArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSubscriberCount ( ) { return _subscriberList . size ( ) ; }
void test0 ( ) throws Throwable { ConnectorDescriptor connectorDescriptor0 = new ConnectorDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { ConnectorDescriptor connectorDescriptor0 = new ConnectorDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { ConnectorDescriptor connectorDescriptor0 = new ConnectorDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test3 ( ) throws Throwable { ConnectorDescriptor connectorDescriptor0 = new ConnectorDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { ConnectorDescriptor connectorDescriptor0 = new ConnectorDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test0 ( ) throws Throwable { ConfigurationDescriptor configurationDescriptor0 = new ConfigurationDescriptor ( ) ; String string0 = configurationDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { ConfigurationDescriptor configurationDescriptor0 = new ConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { ConfigurationDescriptor configurationDescriptor0 = new ConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test3 ( ) throws Throwable { ConfigurationDescriptor configurationDescriptor0 = new ConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test4 ( ) throws Throwable { ConfigurationDescriptor configurationDescriptor0 = new ConfigurationDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getNameSpaceURI ( ) { return nsURI ; }
void test0 ( ) throws Throwable { SecurityConfiguration securityConfiguration0 = new SecurityConfiguration ( ) ; boolean boolean0 = securityConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSecurityEnabled ( ) { return this . _securityEnabled ; }
void test1 ( ) throws Throwable { SecurityConfiguration securityConfiguration0 = new SecurityConfiguration ( ) ; securityConfiguration0 . setSecurityEnabled ( true ) ; securityConfiguration0 . validate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasSecurityEnabled ( ) { return this . _has_securityEnabled ; }
void test4 ( ) throws Throwable { SecurityConfiguration securityConfiguration0 = new SecurityConfiguration ( ) ; securityConfiguration0 . deleteSecurityEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSecurityEnabled ( ) { return this . _securityEnabled ; }
void test0 ( ) throws Throwable { JndiConfigurationFactory jndiConfigurationFactory0 = new JndiConfigurationFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { XAQueueConnectionFactoryDescriptor xAQueueConnectionFactoryDescriptor0 = new XAQueueConnectionFactoryDescriptor ( ) ; XAQueueConnectionFactoryDescriptor xAQueueConnectionFactoryDescriptor1 = ( XAQueueConnectionFactoryDescriptor ) xAQueueConnectionFactoryDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { XAQueueConnectionFactoryDescriptor xAQueueConnectionFactoryDescriptor0 = new XAQueueConnectionFactoryDescriptor ( ) ; xAQueueConnectionFactoryDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { XAQueueConnectionFactoryDescriptor xAQueueConnectionFactoryDescriptor0 = new XAQueueConnectionFactoryDescriptor ( ) ; xAQueueConnectionFactoryDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { XAQueueConnectionFactoryDescriptor xAQueueConnectionFactoryDescriptor0 = new XAQueueConnectionFactoryDescriptor ( ) ; xAQueueConnectionFactoryDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { XAQueueConnectionFactoryDescriptor xAQueueConnectionFactoryDescriptor0 = new XAQueueConnectionFactoryDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) xAQueueConnectionFactoryDescriptor0 , "org . exolab . jms . config . XAQueueConnectionFactoryDescriptor@71b22c0 ; descriptor for class : [ null ] ; xml name : null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { JndiConfiguration jndiConfiguration0 = new JndiConfiguration ( ) ; Enumeration < Object > enumeration0 = jndiConfiguration0 . enumerateProperty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test4 ( ) throws Throwable { JndiConfiguration jndiConfiguration0 = new JndiConfiguration ( ) ; int int0 = jndiConfiguration0 . getPropertyCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPropertyCount ( ) { return _propertyList . size ( ) ; }
void test6 ( ) throws Throwable { JndiConfiguration jndiConfiguration0 = new JndiConfiguration ( ) ; jndiConfiguration0 . clearProperty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPropertyCount ( ) { return _propertyList . size ( ) ; }
void test7 ( ) throws Throwable { JndiConfiguration jndiConfiguration0 = new JndiConfiguration ( ) ; boolean boolean0 = jndiConfiguration0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( ) { try { validate ( ) ; } catch ( org . exolab . castor . xml . ValidationException vex ) { return false ; } return true ; }
void test8 ( ) throws Throwable { JndiConfiguration jndiConfiguration0 = new JndiConfiguration ( ) ; Property property0 = new Property ( ) ; boolean boolean0 = jndiConfiguration0 . removeProperty ( property0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeProperty ( Property vProperty ) { boolean removed = _propertyList . remove ( vProperty ) ; return removed ; }
void test14 ( ) throws Throwable { JndiConfiguration jndiConfiguration0 = new JndiConfiguration ( ) ; Property [ ] propertyArray0 = new Property [ 5 ] ; jndiConfiguration0 . setProperty ( propertyArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPropertyCount ( ) { return _propertyList . size ( ) ; }
void test0 ( ) throws Throwable { SchemeType schemeType0 = SchemeType . HTTP ; String string0 = schemeType0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test1 ( ) throws Throwable { Enumeration < Object > enumeration0 = SchemeType . enumerate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreElements ( ) { return ! isEmpty ( ) ; }
void test2 ( ) throws Throwable { SchemeType schemeType0 = SchemeType . HTTP ; int int0 = schemeType0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Type getType ( Attribute attribute ) throws PersistenceException { Type result = null ; Type type = Type . getType ( attribute . getType ( ) ) ; Type map = _mapper . getType ( type . getType ( ) , type . getPrecision ( ) ) ; if ( map = = null ) { throw new PersistenceException ( "Database does not support type = " + attribute . getType ( ) ) ; } if ( type . getType ( ) ! = map . getType ( ) ) { result = map ; } else { boolean parameters = type . getParameters ( ) ; long precision = type . getPrecision ( ) ; if ( precision < = map . getPrecision ( ) ) { if ( precision = = - 1 ) { precision = map . getPrecision ( ) ; parameters = map . getParameters ( ) ; } result = new Type ( map . getType ( ) , map . getName ( ) , precision , parameters ) ; } else { throw new PersistenceException ( attribute . getName ( ) + type + " exceeds precision for " + map + " precision = " + map . getPrecision ( ) ) ; } } return result ; }
void test4 ( ) throws Throwable { SchemeType schemeType0 = SchemeType . valueOf ( "http" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test0 ( ) throws Throwable { SchemeTypeDescriptor schemeTypeDescriptor0 = new SchemeTypeDescriptor ( ) ; XMLClassDescriptorAdapter xMLClassDescriptorAdapter0 = new XMLClassDescriptorAdapter ( ( ClassDescriptor ) schemeTypeDescriptor0 , "http : / / openjms . exolab . org / connector" , ( NodeType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test1 ( ) throws Throwable { SchemeTypeDescriptor schemeTypeDescriptor0 = new SchemeTypeDescriptor ( ) ; SchemeTypeDescriptor schemeTypeDescriptor1 = ( SchemeTypeDescriptor ) schemeTypeDescriptor0 . getValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test2 ( ) throws Throwable { SchemeTypeDescriptor schemeTypeDescriptor0 = new SchemeTypeDescriptor ( ) ; schemeTypeDescriptor0 . getNameSpacePrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test3 ( ) throws Throwable { SchemeTypeDescriptor schemeTypeDescriptor0 = new SchemeTypeDescriptor ( ) ; String string0 = schemeTypeDescriptor0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test4 ( ) throws Throwable { SchemeTypeDescriptor schemeTypeDescriptor0 = new SchemeTypeDescriptor ( ) ; schemeTypeDescriptor0 . getAccessMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" java . lang . String getXMLName ( ) { return xmlName ; }
void test0 ( ) throws Throwable { JmsQueue jmsQueue0 = new JmsQueue ( " * ] & Yw#Y < %" ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( " * ] & Yw#Y < %" , 3 , ( - 755L ) , ( - 755L ) , ( - 755L ) , ( JmsDestination ) jmsQueue0 , " * ] & Yw#Y < %" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getConnectionId ( ) { return _connectionId ; }
void test1 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "s" , 6 , ( long ) 6 , ( long ) 6 , ( long ) 6 , ( JmsDestination ) jmsTopic0 , "s" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDelivered ( ) { return _delivered ; }
void test2 ( ) throws Throwable { JmsQueue jmsQueue0 = new JmsQueue ( " * ] & Yw#Y < %" ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( " * ] & Yw#Y < %" , 4 , ( long ) 4 , ( long ) 4 , ( long ) 4 , ( JmsDestination ) jmsQueue0 , " * ] & Yw#Y < %" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getConsumerId ( ) { return _messageHeader . getConsumerId ( ) ; }
void test3 ( ) throws Throwable { JmsQueue jmsQueue0 = new JmsQueue ( "MTKAO" ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "MTKAO" , 572 , ( long ) 572 , ( long ) 572 , ( long ) 572 , ( JmsDestination ) jmsQueue0 , "MTKAO" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasExpired ( ) { return _handle . hasExpired ( ) ; }
void test4 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "s" , 6 , ( long ) 6 , ( long ) 6 , ( long ) 6 , ( JmsDestination ) jmsTopic0 , "s" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test5 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "s" , 6 , ( long ) 6 , ( long ) 6 , ( long ) 6 , ( JmsDestination ) jmsTopic0 , "s" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getConnectionId ( ) { return _connectionId ; }
void test6 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "" , 0 , ( long ) 0 , ( long ) 0 , ( long ) 0 , ( JmsDestination ) jmsTopic0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) { return priority_ ; }
void test7 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "" , 0 , ( long ) 0 , ( long ) 0 , ( long ) 0 , ( JmsDestination ) jmsTopic0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getConsumerId ( ) { return _messageHeader . getConsumerId ( ) ; }
void test8 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "s" , 6 , ( long ) 6 , ( long ) 6 , ( long ) 6 , ( JmsDestination ) jmsTopic0 , "s" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasExpired ( ) { return _handle . hasExpired ( ) ; }
void test9 ( ) throws Throwable { JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( " { " , ( - 1649 ) , ( long ) ( - 1649 ) , ( long ) ( - 1649 ) , ( long ) ( - 1649 ) , ( JmsDestination ) jmsTemporaryQueue0 , " { " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getExpiryTime ( ) { return _expiryTime ; }
void test10 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "" , 0 , ( long ) 0 , ( long ) 0 , ( long ) 0 , ( JmsDestination ) jmsTopic0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getConsumerId ( ) { return _messageHeader . getConsumerId ( ) ; }
void test11 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "lBx" ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "lBx" , 14 , ( long ) 14 , ( long ) 14 , 663L , ( JmsDestination ) jmsTopic0 , "lBx" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test12 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "lBx" ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "lBx" , 14 , ( long ) 14 , ( long ) 14 , 663L , ( JmsDestination ) jmsTopic0 , "lBx" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getExpiryTime ( ) { return _expiryTime ; }
void test15 ( ) throws Throwable { JmsQueue jmsQueue0 = new JmsQueue ( "\tDclandleQr" ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "\tDclandleQr" , 789 , ( long ) 789 , ( long ) 789 , ( long ) 789 , ( JmsDestination ) jmsQueue0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MessageImpl getMessage ( Connection connection , String id ) throws PersistenceException ; / * * * Get at least the next message given the specified persistent * handle . The handle encodes all the information , including destination * and timestamp , required to fetch that and successive messages . This * will fault in more than one message for performance * * @param connection - the connection to use * @param handle - the persistent handle to resolve * @return Vector - a vector of MessageImpl * @throws PersistenceException * / Vector getMessages ( Connection connection , MessageHandle handle ) throws PersistenceException ; / * * * Return a list of unprocessed messages . These are messages that have * been stored in the database but not processed . * * @param connection - the connection to use * @return Vector - a collection of un processed messages * @throws PersistenceException * / Vector getUnprocessedMessages ( Connection connection ) throws PersistenceException ; / * * * Add the specified persistent message handle . * * @param connection - the connection to use * @param handle - the persistent handle to add * @throws PersistenceException * / void addMessageHandle ( Connection connection , MessageHandle handle ) throws PersistenceException ; / * * * Update the specified persistent message handle . * * @param connection - the connection to use * @param handle - the persistent handle to update * @throws PersistenceException * / void updateMessageHandle ( Connection connection , MessageHandle handle ) throws PersistenceException ; / * * * Remove the specified persistent message handle . * * @param connection - the connection to use * @param handle - the persistent handle to remove * @throws PersistenceException * @throws PersistenceException * / void removeMessageHandle ( Connection connection , MessageHandle handle ) throws PersistenceException ; / * * * Get all the persistent message handles for the specified destination * and consumer name . * < p > * The returned messages reference unacked or unsent messages * < p > * NEED A STRATEGY WHEN WE HAVE LOTS OF MESSAGE HANDLES * * @param connection - the connection to use * @param destination - the destination to reference * @param name - the consumer name * @throws PersistenceException * / Vector getMessageHandles ( Connection connection , JmsDestination destination , String name ) throws PersistenceException ; / * * * Add the specified durable consumer * * @param connection - the connection to use * @param topic - the name of the topic * @param consumer the name of the consumer * @throws PersistenceException * / void addDurableConsumer ( Connection connection , String topic , String consumer ) throws PersistenceException ; / * * * Remove the durable consumer for the specified topic . * * @param connection - the connection to use * @param consumer - the consumer name * @throws PersistenceException * / void removeDurableConsumer ( Connection connection , String consumer ) throws PersistenceException ; / * * * Check if the durable consumer exists * * @param connection - the connection to use * @param name - durable consumer name * @return boolean - true if it exists and false otherwise * @throws PersistenceException * / boolean durableConsumerExists ( Connection connection , String name ) throws PersistenceException ; / * * * Get an enumerated list of all durable consumers for the * specified JmsTopic destination * * @param connection - the connection to use * @param topic - the topic to query * @return Vector - list of durable subscriber names * @throws PersistenceException * / Enumeration getDurableConsumers ( Connection connection , String topic ) throws PersistenceException ; / * * * Return a dictionary of all registered durable consumers . The * dictionary is keyed on consumer name and maps to the underlying * destination name . The destination name maybe a wildcard * * @param connection - the connection to use * @return HashMap key = consumer name and value is destination * @throws PersistenceException * / HashMap getAllDurableConsumers ( Connection connection ) throws PersistenceException ; / * * * Add a new destination to the database . * * @param connection - the connection to use * @param name - the destination name * @param queue - true if it pertains to a queue * @throws PersistenceException * / void addDestination ( Connection connection , String name , boolean queue ) throws PersistenceException ; / * * * Remove the destination with the specified name and all registered * consumers from the database . * Consumer registrations . * * @param connection - the connection to use * @param destination - the name of the destination * @throws PersistenceException * / void removeDestination ( Connection connection , String destination ) throws PersistenceException ; / * * * Determine if a particular destination name exists * * @param connection - the connection to use * @param name - the name to query * @return boolean - true if it exists ; false otherwise * @throws PersistenceException * / boolean checkDestination ( Connection connection , String name ) throws PersistenceException ; / * * * Get a list of all destinations stored in the database * * @param connection - the connection to use * @return Enumeration - the list of destinations * @throws PersistenceException * / Enumeration getAllDestinations ( Connection connection ) throws PersistenceException ; / * * * Get the number of unsent messages for a the specified queue * * @param connection - the connection to use * @param name - the name of the queue * @return int - the number of unsent or unacked messages * @throws PersistenceException * / int getQueueMessageCount ( Connection connection , String name ) throws PersistenceException ; / * * * Return the number of unsent message for the specified durable * consumer . * * @param connection - the connection to use * @param destination - the destination name * @param name - the name of the durable subscriber * @return int - the nmber of unsent or unacked messages * @throws PersistenceException * / int getDurableConsumerMessageCount ( Connection connection , String destination , String name ) throws PersistenceException ; / * * * Purge all processed messages from the database . * * @return int - the number of messages purged * / int purgeMessages ( ) ; / * * * Return a connection to this persistent data store . * * @return Connection - a connection to the persistent store or null * @throws PersistenceException - if it cannot retrieve a connection * / Connection getConnection ( ) throws PersistenceException ; Enumeration getAllUsers ( Connection connection ) throws PersistenceException ; void addUser ( Connection connection , User user ) throws PersistenceException ; void removeUser ( Connection connection , User user ) throws PersistenceException ; void updateUser ( Connection connection , User user ) throws PersistenceException ; User getUser ( Connection connection , User user ) throws PersistenceException ; }
void test16 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "" , 0 , ( long ) 0 , ( long ) 0 , ( long ) 0 , ( JmsDestination ) jmsTopic0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) { return priority_ ; }
void test17 ( ) throws Throwable { JmsTemporaryTopic jmsTemporaryTopic0 = new JmsTemporaryTopic ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "'u4 & #QnlN * M } w0@t" , 64286 , ( long ) 64286 , ( long ) 64286 , ( - 331L ) , ( JmsDestination ) jmsTemporaryTopic0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getConnectionId ( ) { return _connectionId ; }
void test18 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "s" , 6 , ( long ) 6 , ( long ) 6 , ( long ) 6 , ( JmsDestination ) jmsTopic0 , "s" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getConsumerId ( ) { return _messageHeader . getConsumerId ( ) ; }
void test19 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "M" ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "M" , ( - 3 ) , 136L , 136L , 136L , ( JmsDestination ) jmsTopic0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test20 ( ) throws Throwable { JmsTemporaryTopic jmsTemporaryTopic0 = new JmsTemporaryTopic ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( " ( java . lang . String" , ( - 13 ) , 17L , 17L , 17L , ( JmsDestination ) jmsTemporaryTopic0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void release ( Channel channel ) { ( _free ) { _free . add ( channel ) ; } }
void test21 ( ) throws Throwable { JmsQueue jmsQueue0 = new JmsQueue ( " * ] & Yw#Y < %" ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( " * ] & Yw#Y < %" , 3 , ( - 755L ) , ( - 755L ) , ( - 755L ) , ( JmsDestination ) jmsQueue0 , " * ] & Yw#Y < %" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void release ( Channel channel ) { ( _free ) { _free . add ( channel ) ; } }
void test1 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "$" , ( - 1988 ) , ( long ) ( - 1988 ) , ( long ) ( - 1988 ) , ( long ) ( - 1988 ) , ( JmsDestination ) jmsTopic0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDelivered ( ) { return _delivered ; }
void test3 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "$" , ( - 1988 ) , ( long ) ( - 1988 ) , ( long ) ( - 1988 ) , ( long ) ( - 1988 ) , ( JmsDestination ) jmsTopic0 , "$" ) ; boolean boolean0 = persistentMessageHandle0 . isPersistent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPersistent ( ) { return ( mode_ = = DeliveryMode . PERSISTENT ? true : false ) ; }
void test4 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "$" , ( - 1988 ) , ( long ) ( - 1988 ) , ( long ) ( - 1988 ) , ( long ) ( - 1988 ) , ( JmsDestination ) jmsTopic0 , "$" ) ; String string0 = persistentMessageHandle0 . getConsumerPersistentId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConsumerPersistentId ( ) { return _persistentId ; }
void test0 ( ) throws Throwable { TimedCondition timedCondition0 = ( TimedCondition ) TimedCondition . after ( 440L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String name ) { return ( String ) _properties . get ( name ) ; }
void test1 ( ) throws Throwable { TimedCondition timedCondition0 = ( TimedCondition ) TimedCondition . before ( ( - 1066L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String name ) { return ( String ) _properties . get ( name ) ; }
void test0 ( ) throws Throwable { MessageHandleComparator messageHandleComparator0 = new MessageHandleComparator ( ) ; int int0 = messageHandleComparator0 . compare ( ( Object ) messageHandleComparator0 , ( Object ) messageHandleComparator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object obj1 , Object obj2 ) { int result = 0 ; if ( ( obj1 instanceof BaseLease ) & & ( obj2 instanceof BaseLease ) ) { BaseLease lease1 = ( BaseLease ) obj1 ; BaseLease lease2 = ( BaseLease ) obj2 ; if ( lease1 . getExpiryTime ( ) ! = lease2 . getExpiryTime ( ) ) { if ( lease1 . getExpiryTime ( ) < lease2 . getExpiryTime ( ) ) { result = - 1 ; } else { result = 1 ; } } } else { throw new ClassCastException ( "obj1 is of type " + obj1 . getClass ( ) . getName ( ) + " obj2 is of type " + obj2 . getClass ( ) . getName ( ) ) ; } return result ; }
void test1 ( ) throws Throwable { MessageHandleComparator messageHandleComparator0 = new MessageHandleComparator ( ) ; JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "A" , 0 , ( long ) 0 , ( long ) 0 , ( long ) 0 , ( JmsDestination ) jmsTemporaryQueue0 ) ; int int0 = messageHandleComparator0 . compare ( ( Object ) persistentMessageHandle0 , ( Object ) persistentMessageHandle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object obj1 , Object obj2 ) { int result = 0 ; if ( ( obj1 instanceof BaseLease ) & & ( obj2 instanceof BaseLease ) ) { BaseLease lease1 = ( BaseLease ) obj1 ; BaseLease lease2 = ( BaseLease ) obj2 ; if ( lease1 . getExpiryTime ( ) ! = lease2 . getExpiryTime ( ) ) { if ( lease1 . getExpiryTime ( ) < lease2 . getExpiryTime ( ) ) { result = - 1 ; } else { result = 1 ; } } } else { throw new ClassCastException ( "obj1 is of type " + obj1 . getClass ( ) . getName ( ) + " obj2 is of type " + obj2 . getClass ( ) . getName ( ) ) ; } return result ; }
void test2 ( ) throws Throwable { MessageHandleComparator messageHandleComparator0 = new MessageHandleComparator ( ) ; JmsTemporaryTopic jmsTemporaryTopic0 = new JmsTemporaryTopic ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( " < Qv ) $`" , 386 , ( long ) 386 , ( long ) 386 , 0L , ( JmsDestination ) jmsTemporaryTopic0 , " < Qv ) $`" ) ; int int0 = messageHandleComparator0 . compare ( ( Object ) persistentMessageHandle0 , ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object obj1 , Object obj2 ) { int result = 0 ; if ( ( obj1 instanceof BaseLease ) & & ( obj2 instanceof BaseLease ) ) { BaseLease lease1 = ( BaseLease ) obj1 ; BaseLease lease2 = ( BaseLease ) obj2 ; if ( lease1 . getExpiryTime ( ) ! = lease2 . getExpiryTime ( ) ) { if ( lease1 . getExpiryTime ( ) < lease2 . getExpiryTime ( ) ) { result = - 1 ; } else { result = 1 ; } } } else { throw new ClassCastException ( "obj1 is of type " + obj1 . getClass ( ) . getName ( ) + " obj2 is of type " + obj2 . getClass ( ) . getName ( ) ) ; } return result ; }
void test3 ( ) throws Throwable { MessageHandleComparator messageHandleComparator0 = new MessageHandleComparator ( ) ; JmsTemporaryTopic jmsTemporaryTopic0 = new JmsTemporaryTopic ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( " < Qv ) $`" , 386 , ( long ) 386 , ( long ) 386 , 0L , ( JmsDestination ) jmsTemporaryTopic0 , " < Qv ) $`" ) ; PersistentMessageHandle persistentMessageHandle1 = new PersistentMessageHandle ( " < Qv ) $`" , 386 , ( long ) 386 , 0L , ( long ) 386 , ( JmsDestination ) jmsTemporaryTopic0 , " < Qv ) $`" ) ; int int0 = messageHandleComparator0 . compare ( ( Object ) persistentMessageHandle0 , ( Object ) persistentMessageHandle1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object obj1 , Object obj2 ) { int result = 0 ; if ( ( obj1 instanceof BaseLease ) & & ( obj2 instanceof BaseLease ) ) { BaseLease lease1 = ( BaseLease ) obj1 ; BaseLease lease2 = ( BaseLease ) obj2 ; if ( lease1 . getExpiryTime ( ) ! = lease2 . getExpiryTime ( ) ) { if ( lease1 . getExpiryTime ( ) < lease2 . getExpiryTime ( ) ) { result = - 1 ; } else { result = 1 ; } } } else { throw new ClassCastException ( "obj1 is of type " + obj1 . getClass ( ) . getName ( ) + " obj2 is of type " + obj2 . getClass ( ) . getName ( ) ) ; } return result ; }
void test4 ( ) throws Throwable { MessageHandleComparator messageHandleComparator0 = new MessageHandleComparator ( ) ; boolean boolean0 = messageHandleComparator0 . equals ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test5 ( ) throws Throwable { MessageHandleComparator messageHandleComparator0 = new MessageHandleComparator ( ) ; boolean boolean0 = messageHandleComparator0 . equals ( ( Object ) messageHandleComparator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { boolean result = false ; if ( ( obj instanceof TransactionLog ) & & ( ( ( TransactionLog ) obj ) . _name . equals ( _name ) ) ) { result = true ; } return result ; }
void test0 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; MessageMgr messageMgr0 = new MessageMgr ( databaseService0 ) ; JmsTopic jmsTopic0 = new JmsTopic ( "" ) ; messageMgr0 . removeEventListener ( ( JmsDestination ) jmsTopic0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWildCard ( ) { return isWildCard ( this . getName ( ) ) ; }
void test2 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; MessageMgr messageMgr0 = new MessageMgr ( databaseService0 ) ; messageMgr0 . doStop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test3 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; MessageMgr messageMgr0 = new MessageMgr ( databaseService0 ) ; messageMgr0 . setDestinationManager ( ( DestinationManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test7 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; MessageMgr messageMgr0 = new MessageMgr ( databaseService0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void restart ( ) throws ServiceException { if ( _started ) { stop ( ) ; } start ( ) ; }
void test0 ( ) throws Throwable { JmsTopic jmsTopic0 = new JmsTopic ( "log4j . rootLogger" ) ; Configuration configuration0 = new Configuration ( ) ; DatabaseService databaseService0 = new DatabaseService ( configuration0 ) ; LeaseManager leaseManager0 = new LeaseManager ( ) ; TopicDestinationCache topicDestinationCache0 = new TopicDestinationCache ( jmsTopic0 , databaseService0 , leaseManager0 ) ; JmsQueue jmsQueue0 = new JmsQueue ( "log4j . rootLogger" ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "log4j . rootLogger" , 1603 , ( long ) 1603 , ( long ) 1603 , ( long ) 1603 , ( JmsDestination ) jmsQueue0 , "log4j . rootLogger" ) ; topicDestinationCache0 . returnMessageHandle ( ( MessageHandle ) persistentMessageHandle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getConsumerId ( ) { return _messageHeader . getConsumerId ( ) ; }
void test0 ( ) throws Throwable { DefaultMessageCache defaultMessageCache0 = new DefaultMessageCache ( ) ; int int0 = defaultMessageCache0 . getTransientCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransientCount ( ) { return _transient . size ( ) ; }
void test1 ( ) throws Throwable { DefaultMessageCache defaultMessageCache0 = new DefaultMessageCache ( ) ; defaultMessageCache0 . clearPersistentMessages ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPersistentCount ( ) { return _persistent . size ( ) ; }
void test2 ( ) throws Throwable { DefaultMessageCache defaultMessageCache0 = new DefaultMessageCache ( ) ; MessageRef messageRef0 = defaultMessageCache0 . getMessageRef ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MessageRef getMessageRef ( String messageId ) ; / * * * Returns the message corresponding to the specified reference * * @param reference the message reference * @return the associated message , or < code > null < / code > if none exists * @throws JMSException for any error * / MessageImpl getMessage ( MessageRef reference ) throws JMSException ; / * * * Destroys the message corresponding to the reference * * @throws JMSException for any error * / void destroy ( MessageRef reference ) throws JMSException ; }
void test3 ( ) throws Throwable { DefaultMessageCache defaultMessageCache0 = new DefaultMessageCache ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addMessageRef ( MessageRef reference ) ; / * * * Returns a message reference , given its identifier * * @param messageId the message identifier * @return the message reference associated with < code > messageId < / code > , or * < code > null < / code > if none exists * / MessageRef getMessageRef ( String messageId ) ; / * * * Returns the message corresponding to the specified reference * * @param reference the message reference * @return the associated message , or < code > null < / code > if none exists * @throws JMSException for any error * / MessageImpl getMessage ( MessageRef reference ) throws JMSException ; / * * * Destroys the message corresponding to the reference * * @throws JMSException for any error * / void destroy ( MessageRef reference ) throws JMSException ; }
void test4 ( ) throws Throwable { DefaultMessageCache defaultMessageCache0 = new DefaultMessageCache ( ) ; defaultMessageCache0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageCount ( Connection connection , String destination , String name ) throws PersistenceException { int result = - 1 ; boolean destinationIsWildCard = false ; / / map the destination name to an actual identity long destinationId = _destinations . getId ( destination ) ; if ( destinationId = = 0 ) { if ( JmsTopic . isWildCard ( destination ) ) { destinationIsWildCard = true ; } else { throw new PersistenceException ( "Cannot get message handle count for destination = " + destination + " and consumer = " + name + " since the destination cannot be mapped to an id" ) ; } } / / map the consumer name to an identity long consumerId = _consumers . getConsumerId ( name ) ; if ( consumerId = = 0 ) { throw new PersistenceException ( "Cannot get message handle count for destination = " + destination + " and consumer = " + name + " since the consumer cannot be mapped to an id" ) ; } PreparedStatement select = null ; ResultSet set = null ; try { if ( destinationIsWildCard ) { select = connection . prepareStatement ( GET_MSG_HANDLE_COUNT_FOR_DEST_AND_CONSUMER ) ; select . setLong ( 1 , destinationId ) ; select . setLong ( 2 , consumerId ) ; } else { select = connection . prepareStatement ( GET_MSG_HANDLE_COUNT_FOR_CONSUMER ) ; select . setLong ( 1 , consumerId ) ; } set = select . executeQuery ( ) ; if ( set . next ( ) ) { result = set . getInt ( 1 ) ; } } catch ( SQLException exception ) { throw new PersistenceException ( "Failed to count messages for destination = " + destination + " , consumer = " + name , exception ) ; } finally { SQLHelper . close ( set ) ; SQLHelper . close ( select ) ; } return result ; }
void test5 ( ) throws Throwable { DefaultMessageCache defaultMessageCache0 = new DefaultMessageCache ( ) ; int int0 = defaultMessageCache0 . getMessageCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageCount ( Connection connection , String destination , String name ) throws PersistenceException { int result = - 1 ; boolean destinationIsWildCard = false ; / / map the destination name to an actual identity long destinationId = _destinations . getId ( destination ) ; if ( destinationId = = 0 ) { if ( JmsTopic . isWildCard ( destination ) ) { destinationIsWildCard = true ; } else { throw new PersistenceException ( "Cannot get message handle count for destination = " + destination + " and consumer = " + name + " since the destination cannot be mapped to an id" ) ; } } / / map the consumer name to an identity long consumerId = _consumers . getConsumerId ( name ) ; if ( consumerId = = 0 ) { throw new PersistenceException ( "Cannot get message handle count for destination = " + destination + " and consumer = " + name + " since the consumer cannot be mapped to an id" ) ; } PreparedStatement select = null ; ResultSet set = null ; try { if ( destinationIsWildCard ) { select = connection . prepareStatement ( GET_MSG_HANDLE_COUNT_FOR_DEST_AND_CONSUMER ) ; select . setLong ( 1 , destinationId ) ; select . setLong ( 2 , consumerId ) ; } else { select = connection . prepareStatement ( GET_MSG_HANDLE_COUNT_FOR_CONSUMER ) ; select . setLong ( 1 , consumerId ) ; } set = select . executeQuery ( ) ; if ( set . next ( ) ) { result = set . getInt ( 1 ) ; } } catch ( SQLException exception ) { throw new PersistenceException ( "Failed to count messages for destination = " + destination + " , consumer = " + name , exception ) ; } finally { SQLHelper . close ( set ) ; SQLHelper . close ( select ) ; } return result ; }
void test6 ( ) throws Throwable { DefaultMessageCache defaultMessageCache0 = new DefaultMessageCache ( ) ; int int0 = defaultMessageCache0 . getPersistentCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPersistentCount ( ) { return _persistent . size ( ) ; }
void test0 ( ) throws Throwable { Flag flag0 = new Flag ( false ) ; boolean boolean0 = flag0 . get ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String name ) { return ( String ) _properties . get ( name ) ; }
void test1 ( ) throws Throwable { Flag flag0 = new Flag ( false ) ; flag0 . set ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String name ) { return ( String ) _properties . get ( name ) ; }
void test0 ( ) throws Throwable { MessageQueue messageQueue0 = new MessageQueue ( ) ; boolean boolean0 = messageQueue0 . contains ( ( MessageHandle ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( MessageHandle handle ) { return _queue . containsKey ( handle ) ; }
void test1 ( ) throws Throwable { MessageQueue messageQueue0 = new MessageQueue ( ) ; messageQueue0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test2 ( ) throws Throwable { MessageQueue messageQueue0 = new MessageQueue ( ) ; MessageHandle [ ] messageHandleArray0 = messageQueue0 . toArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MessageHandle [ ] toArray ( ) { return ( MessageHandle [ ] ) _queue . keySet ( ) . toArray ( new MessageHandle [ 0 ] ) ; }
void test3 ( ) throws Throwable { MessageQueue messageQueue0 = new MessageQueue ( ) ; int int0 = messageQueue0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test4 ( ) throws Throwable { MessageQueue messageQueue0 = new MessageQueue ( ) ; JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "PlP" , 745 , ( - 1529L ) , ( long ) 745 , ( long ) 745 , ( JmsDestination ) jmsTemporaryQueue0 , "PlP" ) ; messageQueue0 . add ( ( MessageHandle ) persistentMessageHandle0 ) ; boolean boolean0 = messageQueue0 . add ( ( MessageHandle ) persistentMessageHandle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test5 ( ) throws Throwable { MessageQueue messageQueue0 = new MessageQueue ( ) ; MessageHandle messageHandle0 = messageQueue0 . remove ( ( MessageHandle ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( String id ) { try { _manager . close ( id ) ; } catch ( IOException ignore ) { } }
void test6 ( ) throws Throwable { MessageQueue messageQueue0 = new MessageQueue ( ) ; JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "PlP" , 745 , ( - 1529L ) , ( long ) 745 , ( long ) 745 , ( JmsDestination ) jmsTemporaryQueue0 , "PlP" ) ; messageQueue0 . add ( ( MessageHandle ) persistentMessageHandle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test7 ( ) throws Throwable { MessageQueue messageQueue0 = new MessageQueue ( ) ; MessageHandle messageHandle0 = messageQueue0 . remove ( "S * W$ < fnr / ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( String id ) { try { _manager . close ( id ) ; } catch ( IOException ignore ) { } }
void test8 ( ) throws Throwable { MessageQueue messageQueue0 = new MessageQueue ( ) ; JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "PlP" , 745 , ( - 1529L ) , ( long ) 745 , ( long ) 745 , ( JmsDestination ) jmsTemporaryQueue0 , "PlP" ) ; messageQueue0 . add ( ( MessageHandle ) persistentMessageHandle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test9 ( ) throws Throwable { MessageQueue messageQueue0 = new MessageQueue ( ) ; MessageHandle messageHandle0 = messageQueue0 . removeFirst ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MessageHandle removeFirst ( ) { MessageHandle first = null ; if ( _queue . size ( ) > 0 ) { first = ( MessageHandle ) _queue . firstKey ( ) ; _queue . remove ( first ) ; _handles . remove ( first . getMessageId ( ) ) ; } return first ; }
void test10 ( ) throws Throwable { MessageQueue messageQueue0 = new MessageQueue ( ) ; JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue ( ) ; PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle ( "PlP" , 745 , ( - 1529L ) , ( long ) 745 , ( long ) 745 , ( JmsDestination ) jmsTemporaryQueue0 , "PlP" ) ; messageQueue0 . add ( ( MessageHandle ) persistentMessageHandle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) throws PersistenceException ; }
void test0 ( ) throws Throwable { ContextHelper contextHelper0 = new ContextHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Class < ? > class0 = Class . class ; Method [ ] methodArray0 = MethodHelper . getAllInterfaceMethods ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Method [ ] getAllInterfaceMethods ( Class clazz ) { int size = 10 ; ArrayList result = new ArrayList ( size ) ; getInterfaceMethods ( getAllInterfaces ( clazz ) , result ) ; return ( Method [ ] ) result . toArray ( new Method [ 0 ] ) ; }
void test1 ( ) throws Throwable { Class < ? > class0 = Class . class ; Method [ ] methodArray0 = MethodHelper . getInterfaceMethods ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Method [ ] getInterfaceMethods ( Class clazz ) { int size = 10 ; ArrayList result = new ArrayList ( size ) ; getInterfaceMethods ( clazz . getInterfaces ( ) , result ) ; return ( Method [ ] ) result . toArray ( new Method [ 0 ] ) ; }
void test0 ( ) throws Throwable { PipedWriter pipedWriter0 = new PipedWriter ( ) ; SourceWriter sourceWriter0 = new SourceWriter ( ( Writer ) pipedWriter0 ) ; sourceWriter0 . writelnInc ( " ; z~ , Z , Yc91hopb > f" ) ; SourceWriter sourceWriter1 = ( SourceWriter ) sourceWriter0 . append ( ( CharSequence ) " ; z~ , Z , Yc91hopb > f" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writelnInc ( ) throws IOException { newLine ( ) ; incIndent ( ) ; }
void test5 ( ) throws Throwable { PipedWriter pipedWriter0 = new PipedWriter ( ) ; SourceWriter sourceWriter0 = new SourceWriter ( ( Writer ) pipedWriter0 ) ; SourceWriter sourceWriter1 = ( SourceWriter ) sourceWriter0 . append ( ' | ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SourceWriter ( Writer writer ) { super ( writer ) ; }
void test0 ( ) throws Throwable { Class < ? > class0 = Class . class ; String string0 = ClassHelper . getPackage ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPackage ( Class clazz ) { String result = null ; if ( clazz . getPackage ( ) ! = null ) { result = clazz . getPackage ( ) . getName ( ) ; } else { int lastDot = clazz . getName ( ) . lastIndexOf ( " . " ) ; if ( lastDot ! = - 1 ) { result = clazz . getName ( ) . substring ( 0 , lastDot ) ; } } return result ; }
void test1 ( ) throws Throwable { Class < ? > class0 = Class . class ; String string0 = ClassHelper . getQualifiedName ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQualifiedName ( Class clazz ) { String result = null ; if ( clazz . isArray ( ) ) { result = "" ; while ( clazz . isArray ( ) ) { result + = " [ ] " ; clazz = clazz . getComponentType ( ) ; } result = clazz . getName ( ) + result ; } else { result = clazz . getName ( ) ; } return result ; }
void test0 ( ) throws Throwable { Class < ? > class0 = Writer . class ; ProxyGenerator proxyGenerator0 = new ProxyGenerator ( ( Class ) class0 , ( Class [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAdapterInstanceName ( Class adapter ) { / / determine the class name , minus its package String name ; String qualifiedName = adapter . getName ( ) ; int lastDot = qualifiedName . lastIndexOf ( " . " ) ; if ( lastDot ! = - 1 ) { name = qualifiedName . substring ( lastDot + 1 ) ; } else { name = qualifiedName ; } StringBuffer result = new StringBuffer ( name . toUpperCase ( ) ) ; result . append ( "_" ) ; result . append ( Long . toHexString ( qualifiedName . hashCode ( ) ) ) ; return result . toString ( ) ; }
void test4 ( ) throws Throwable { Class < ? > class0 = SourceWriter . class ; ProxyGenerator proxyGenerator0 = new ProxyGenerator ( ( Class ) class0 , ( Class [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
void test6 ( ) throws Throwable { Class < ? > class0 = Writer . class ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; ProxyGenerator proxyGenerator0 = new ProxyGenerator ( ( Class ) class0 , ( Class [ ] ) null ) ; proxyGenerator0 . generate ( ( OutputStream ) byteArrayOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Display all commands available for this object . * * / void displayCommands ( Rectangle loc ) ; } / / End OpenJMSNode
