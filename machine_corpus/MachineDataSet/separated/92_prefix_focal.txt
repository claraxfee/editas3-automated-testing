void test0 ( ) throws Throwable { short [ ] shortArray0 = new short [ 1 ] ; GrowableShortArray growableShortArray0 = new GrowableShortArray ( shortArray0 ) ; growableShortArray0 . prepend ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test1 ( ) throws Throwable { short [ ] shortArray0 = new short [ 8 ] ; GrowableShortArray growableShortArray0 = new GrowableShortArray ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test2 ( ) throws Throwable { short [ ] shortArray0 = new short [ 1 ] ; GrowableShortArray growableShortArray0 = new GrowableShortArray ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test4 ( ) throws Throwable { short [ ] shortArray0 = new short [ 23 ] ; GrowableShortArray growableShortArray0 = new GrowableShortArray ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test5 ( ) throws Throwable { GrowableShortArray growableShortArray0 = new GrowableShortArray ( ( int ) ( short ) 32 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test6 ( ) throws Throwable { short [ ] shortArray0 = new short [ 23 ] ; GrowableShortArray growableShortArray0 = new GrowableShortArray ( shortArray0 ) ; short [ ] shortArray1 = growableShortArray0 . toArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test7 ( ) throws Throwable { short [ ] shortArray0 = new short [ 8 ] ; GrowableShortArray growableShortArray0 = new GrowableShortArray ( shortArray0 ) ; growableShortArray0 . replace ( ( int ) ( short ) 0 , ( short ) 19 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test8 ( ) throws Throwable { short [ ] shortArray0 = new short [ 1 ] ; GrowableShortArray growableShortArray0 = new GrowableShortArray ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test9 ( ) throws Throwable { short [ ] shortArray0 = new short [ 32 ] ; GrowableShortArray growableShortArray0 = new GrowableShortArray ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test10 ( ) throws Throwable { short [ ] shortArray0 = new short [ 1 ] ; GrowableShortArray growableShortArray0 = new GrowableShortArray ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test13 ( ) throws Throwable { short [ ] shortArray0 = new short [ 4 ] ; GrowableShortArray growableShortArray0 = new GrowableShortArray ( shortArray0 ) ; growableShortArray0 . reverse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test14 ( ) throws Throwable { short [ ] shortArray0 = new short [ 1 ] ; GrowableShortArray growableShortArray0 = new GrowableShortArray ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test15 ( ) throws Throwable { short [ ] shortArray0 = new short [ 4 ] ; GrowableShortArray growableShortArray0 = new GrowableShortArray ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test0 ( ) throws Throwable { RunLength < Object > runLength0 = new RunLength < Object > ( ( Object ) null , 1295 ) ; RunLength < RunLength < Object > > runLength1 = new RunLength < RunLength < Object > > ( runLength0 , ( - 871 ) ) ; String string0 = runLength1 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { RunLength < Object > runLength0 = new RunLength < Object > ( ( Object ) null , 1295 ) ; RunLength < Object > runLength1 = new RunLength < Object > ( ( Object ) runLength0 , 1295 ) ; int int0 = runLength1 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test2 ( ) throws Throwable { RunLength < String > runLength0 = new RunLength < String > ( "x " , 0 ) ; boolean boolean0 = runLength0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test3 ( ) throws Throwable { RunLength < String > runLength0 = new RunLength < String > ( "VOzg2 ; `2" , ( - 1100 ) ) ; boolean boolean0 = runLength0 . equals ( ( Object ) "VOzg2 ; `2x - 1100" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test4 ( ) throws Throwable { RunLength < Object > runLength0 = new RunLength < Object > ( ( Object ) null , 1295 ) ; RunLength < RunLength < Object > > runLength1 = new RunLength < RunLength < Object > > ( runLength0 , 0 ) ; RunLength < Integer > runLength2 = new RunLength < Integer > ( ( Integer ) 0 , 0 ) ; RunLength < RunLength < Integer > > runLength3 = new RunLength < RunLength < Integer > > ( runLength2 , 0 ) ; boolean boolean0 = runLength1 . equals ( ( Object ) runLength3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test5 ( ) throws Throwable { RunLength < Integer > runLength0 = new RunLength < Integer > ( ( Integer ) null , 0 ) ; RunLength < Integer > runLength1 = new RunLength < Integer > ( ( Integer ) null , 0 ) ; boolean boolean0 = runLength0 . equals ( ( Object ) runLength1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { long [ ] longArray0 = new long [ 2 ] ; GrowableLongArray growableLongArray0 = new GrowableLongArray ( longArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test1 ( ) throws Throwable { GrowableLongArray growableLongArray0 = new GrowableLongArray ( 990 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test2 ( ) throws Throwable { long [ ] longArray0 = new long [ 8 ] ; GrowableLongArray growableLongArray0 = new GrowableLongArray ( longArray0 ) ; long [ ] longArray1 = growableLongArray0 . toArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] toArray ( ) { return wrappedDeque . toArray ( ) ; }
void test3 ( ) throws Throwable { long [ ] longArray0 = new long [ 34 ] ; GrowableLongArray growableLongArray0 = new GrowableLongArray ( longArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test4 ( ) throws Throwable { GrowableLongArray growableLongArray0 = new GrowableLongArray ( 1652 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test5 ( ) throws Throwable { long [ ] longArray0 = new long [ 2 ] ; GrowableLongArray growableLongArray0 = new GrowableLongArray ( longArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test7 ( ) throws Throwable { GrowableLongArray growableLongArray0 = new GrowableLongArray ( 990 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test8 ( ) throws Throwable { long [ ] longArray0 = new long [ 2 ] ; GrowableLongArray growableLongArray0 = new GrowableLongArray ( longArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test9 ( ) throws Throwable { long [ ] longArray0 = new long [ 2 ] ; GrowableLongArray growableLongArray0 = new GrowableLongArray ( longArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test10 ( ) throws Throwable { long [ ] longArray0 = new long [ 8 ] ; GrowableLongArray growableLongArray0 = new GrowableLongArray ( longArray0 ) ; growableLongArray0 . replace ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test12 ( ) throws Throwable { GrowableLongArray growableLongArray0 = new GrowableLongArray ( 1652 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void insert ( int offset , boolean [ ] values ) { assertValidInsertOffset ( offset ) ; ensureCapacity ( currentLength + values . length ) ; System . arraycopy ( data , offset , data , offset + values . length , currentLength - offset ) ; System . arraycopy ( values , 0 , data , offset , values . length ) ; currentLength + = values . length ; }
void test13 ( ) throws Throwable { GrowableLongArray growableLongArray0 = new GrowableLongArray ( 1652 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test14 ( ) throws Throwable { long [ ] longArray0 = new long [ 2 ] ; GrowableLongArray growableLongArray0 = new GrowableLongArray ( longArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test15 ( ) throws Throwable { long [ ] longArray0 = new long [ 8 ] ; GrowableLongArray growableLongArray0 = new GrowableLongArray ( longArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test16 ( ) throws Throwable { long [ ] longArray0 = new long [ 8 ] ; GrowableLongArray growableLongArray0 = new GrowableLongArray ( longArray0 ) ; growableLongArray0 . ensureCapacity ( 826 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test0 ( ) throws Throwable { GrowableIntArray growableIntArray0 = new GrowableIntArray ( 751 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test1 ( ) throws Throwable { GrowableIntArray growableIntArray0 = new GrowableIntArray ( 751 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test2 ( ) throws Throwable { int [ ] intArray0 = new int [ 12 ] ; GrowableIntArray growableIntArray0 = new GrowableIntArray ( intArray0 ) ; growableIntArray0 . prepend ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test3 ( ) throws Throwable { int [ ] intArray0 = new int [ 2 ] ; GrowableIntArray growableIntArray0 = new GrowableIntArray ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test4 ( ) throws Throwable { int [ ] intArray0 = new int [ 10 ] ; GrowableIntArray growableIntArray0 = new GrowableIntArray ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test5 ( ) throws Throwable { int [ ] intArray0 = new int [ 1 ] ; GrowableIntArray growableIntArray0 = new GrowableIntArray ( intArray0 ) ; int [ ] intArray1 = growableIntArray0 . toArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test6 ( ) throws Throwable { GrowableIntArray growableIntArray0 = new GrowableIntArray ( 751 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test9 ( ) throws Throwable { int [ ] intArray0 = new int [ 10 ] ; GrowableIntArray growableIntArray0 = new GrowableIntArray ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test10 ( ) throws Throwable { int [ ] intArray0 = new int [ 12 ] ; GrowableIntArray growableIntArray0 = new GrowableIntArray ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test12 ( ) throws Throwable { int [ ] intArray0 = new int [ 10 ] ; GrowableIntArray growableIntArray0 = new GrowableIntArray ( intArray0 ) ; growableIntArray0 . reverse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test13 ( ) throws Throwable { int [ ] intArray0 = new int [ 2 ] ; GrowableIntArray growableIntArray0 = new GrowableIntArray ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test14 ( ) throws Throwable { int [ ] intArray0 = new int [ 10 ] ; GrowableIntArray growableIntArray0 = new GrowableIntArray ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentLength ( ) { return currentLength ; }
void test0 ( ) throws Throwable { int int0 = JillionUtil . compare ( 575L , ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( long value1 , long value2 ) { if ( value1 = = value2 ) { return 0 ; } if ( value1 < value2 ) { return - 1 ; } return 1 ; }
void test1 ( ) throws Throwable { int int0 = JillionUtil . compare ( ( - 1L ) , ( - 1L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( long value1 , long value2 ) { if ( value1 = = value2 ) { return 0 ; } if ( value1 < value2 ) { return - 1 ; } return 1 ; }
void test2 ( ) throws Throwable { int int0 = JillionUtil . compare ( ( - 176L ) , 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( long value1 , long value2 ) { if ( value1 = = value2 ) { return 0 ; } if ( value1 < value2 ) { return - 1 ; } return 1 ; }
void test3 ( ) throws Throwable { int int0 = JillionUtil . compare ( ( - 1 ) , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( long value1 , long value2 ) { if ( value1 = = value2 ) { return 0 ; } if ( value1 < value2 ) { return - 1 ; } return 1 ; }
void test4 ( ) throws Throwable { int int0 = JillionUtil . compare ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( long value1 , long value2 ) { if ( value1 = = value2 ) { return 0 ; } if ( value1 < value2 ) { return - 1 ; } return 1 ; }
void test5 ( ) throws Throwable { int int0 = JillionUtil . compare ( 492 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( long value1 , long value2 ) { if ( value1 = = value2 ) { return 0 ; } if ( value1 < value2 ) { return - 1 ; } return 1 ; }
void test6 ( ) throws Throwable { int int0 = JillionUtil . compare ( ( short ) ( - 1675 ) , ( short ) 1108 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( long value1 , long value2 ) { if ( value1 = = value2 ) { return 0 ; } if ( value1 < value2 ) { return - 1 ; } return 1 ; }
void test7 ( ) throws Throwable { int int0 = JillionUtil . compare ( ( short ) 0 , ( short ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( long value1 , long value2 ) { if ( value1 = = value2 ) { return 0 ; } if ( value1 < value2 ) { return - 1 ; } return 1 ; }
void test8 ( ) throws Throwable { int int0 = JillionUtil . compare ( ( short ) 1220 , ( short ) ( - 59 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( long value1 , long value2 ) { if ( value1 = = value2 ) { return 0 ; } if ( value1 < value2 ) { return - 1 ; } return 1 ; }
void test9 ( ) throws Throwable { int int0 = JillionUtil . compare ( ( byte ) 88 , ( byte ) ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( long value1 , long value2 ) { if ( value1 = = value2 ) { return 0 ; } if ( value1 < value2 ) { return - 1 ; } return 1 ; }
void test10 ( ) throws Throwable { int int0 = JillionUtil . compare ( ( byte ) 0 , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( long value1 , long value2 ) { if ( value1 = = value2 ) { return 0 ; } if ( value1 < value2 ) { return - 1 ; } return 1 ; }
void test11 ( ) throws Throwable { int int0 = JillionUtil . compare ( ( byte ) ( - 128 ) , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( long value1 , long value2 ) { if ( value1 = = value2 ) { return 0 ; } if ( value1 < value2 ) { return - 1 ; } return 1 ; }
void test1 ( ) throws Throwable { IndexedQualityFastaFileDataStore indexedQualityFastaFileDataStore0 = new IndexedQualityFastaFileDataStore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { HashMap < String , FastaVisitorCallback . FastaVisitorMemento > hashMap0 = new HashMap < String , FastaVisitorCallback . FastaVisitorMemento > ( ) ; IndexedQualityFastaFileDataStore . IndexedQualitySequenceFastaFileDataStore2 indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 = new IndexedQualityFastaFileDataStore . IndexedQualitySequenceFastaFileDataStore2 ( ( File ) null , ( FastaFileParser ) null , ( DataStoreFilter ) null , ( Map < String , FastaVisitorCallback . FastaVisitorMemento > ) hashMap0 ) ; boolean boolean0 = indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 . isClosed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test4 ( ) throws Throwable { HashMap < String , FastaVisitorCallback . FastaVisitorMemento > hashMap0 = new HashMap < String , FastaVisitorCallback . FastaVisitorMemento > ( ) ; IndexedQualityFastaFileDataStore . IndexedQualitySequenceFastaFileDataStore2 indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 = new IndexedQualityFastaFileDataStore . IndexedQualitySequenceFastaFileDataStore2 ( ( File ) null , ( FastaFileParser ) null , ( DataStoreFilter ) null , ( Map < String , FastaVisitorCallback . FastaVisitorMemento > ) hashMap0 ) ; StreamingIterator < String > streamingIterator0 = indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 . idIterator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test5 ( ) throws Throwable { File file0 = new File ( "d6 & R * E4 ) qkay8 < Sk ) uo = " ) ; HashMap < String , FastaVisitorCallback . FastaVisitorMemento > hashMap0 = new HashMap < String , FastaVisitorCallback . FastaVisitorMemento > ( ) ; IndexedQualityFastaFileDataStore . IndexedQualitySequenceFastaFileDataStore2 indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 = new IndexedQualityFastaFileDataStore . IndexedQualitySequenceFastaFileDataStore2 ( file0 , ( FastaFileParser ) null , ( DataStoreFilter ) null , ( Map < String , FastaVisitorCallback . FastaVisitorMemento > ) hashMap0 ) ; indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 . getNumberOfRecords ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test6 ( ) throws Throwable { HashMap < String , FastaVisitorCallback . FastaVisitorMemento > hashMap0 = new HashMap < String , FastaVisitorCallback . FastaVisitorMemento > ( ) ; IndexedQualityFastaFileDataStore . IndexedQualitySequenceFastaFileDataStore2 indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 = new IndexedQualityFastaFileDataStore . IndexedQualitySequenceFastaFileDataStore2 ( ( File ) null , ( FastaFileParser ) null , ( DataStoreFilter ) null , ( Map < String , FastaVisitorCallback . FastaVisitorMemento > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( String id ) throws DataStoreException { if ( id = = null ) { throw new NullPointerException ( "id can not be null" ) ; } throwExceptionIfClosed ( ) ; return containsImpl ( id ) ; }
void test7 ( ) throws Throwable { HashMap < String , FastaVisitorCallback . FastaVisitorMemento > hashMap0 = new HashMap < String , FastaVisitorCallback . FastaVisitorMemento > ( ) ; IndexedQualityFastaFileDataStore . IndexedQualitySequenceFastaFileDataStore2 indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 = new IndexedQualityFastaFileDataStore . IndexedQualitySequenceFastaFileDataStore2 ( ( File ) null , ( FastaFileParser ) null , ( DataStoreFilter ) null , ( Map < String , FastaVisitorCallback . FastaVisitorMemento > ) hashMap0 ) ; boolean boolean0 = indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 . contains ( " fl * G1wF" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test12 ( ) throws Throwable { HashMap < String , FastaVisitorCallback . FastaVisitorMemento > hashMap0 = new HashMap < String , FastaVisitorCallback . FastaVisitorMemento > ( ) ; IndexedQualityFastaFileDataStore . IndexedQualitySequenceFastaFileDataStore2 indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 = new IndexedQualityFastaFileDataStore . IndexedQualitySequenceFastaFileDataStore2 ( ( File ) null , ( FastaFileParser ) null , ( DataStoreFilter ) null , ( Map < String , FastaVisitorCallback . FastaVisitorMemento > ) hashMap0 ) ; indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 . get ( "1Yb907 + , aae2cPi" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test0 ( ) throws Throwable { DefaultQualityFastaFileDataStoreBuilder defaultQualityFastaFileDataStoreBuilder0 = new DefaultQualityFastaFileDataStoreBuilder ( ( DataStoreFilter ) null ) ; Proxy proxy0 = ( Proxy ) defaultQualityFastaFileDataStoreBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" D build ( ) throws IOException { return createNewInstance ( fastaFile , hint , filter ) ; }
void test0 ( ) throws Throwable { File file0 = new File ( "wU [ ' - y : $BH | sbj" , "wU [ ' - y : $BH | sbj" ) ; LargeQualityFastaFileDataStore largeQualityFastaFileDataStore0 = ( LargeQualityFastaFileDataStore ) LargeQualityFastaFileDataStore . create ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test1 ( ) throws Throwable { IndexedAminoAcidSequenceFastaFileDataStore indexedAminoAcidSequenceFastaFileDataStore0 = new IndexedAminoAcidSequenceFastaFileDataStore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { HashMap < String , FastaVisitorCallback . FastaVisitorMemento > hashMap0 = new HashMap < String , FastaVisitorCallback . FastaVisitorMemento > ( ) ; IndexedAminoAcidSequenceFastaFileDataStore . IndexedAminoAcidSequenceFastaFileDataStore2 indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0 = new IndexedAminoAcidSequenceFastaFileDataStore . IndexedAminoAcidSequenceFastaFileDataStore2 ( ( File ) null , ( FastaFileParser ) null , ( DataStoreFilter ) null , ( Map < String , FastaVisitorCallback . FastaVisitorMemento > ) hashMap0 ) ; StreamingIterator < String > streamingIterator0 = indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0 . idIterator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test4 ( ) throws Throwable { HashMap < String , FastaVisitorCallback . FastaVisitorMemento > hashMap0 = new HashMap < String , FastaVisitorCallback . FastaVisitorMemento > ( ) ; IndexedAminoAcidSequenceFastaFileDataStore . IndexedAminoAcidSequenceFastaFileDataStore2 indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0 = new IndexedAminoAcidSequenceFastaFileDataStore . IndexedAminoAcidSequenceFastaFileDataStore2 ( ( File ) null , ( FastaFileParser ) null , ( DataStoreFilter ) null , ( Map < String , FastaVisitorCallback . FastaVisitorMemento > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( String id ) throws DataStoreException { if ( id = = null ) { throw new NullPointerException ( "id can not be null" ) ; } throwExceptionIfClosed ( ) ; return containsImpl ( id ) ; }
void test5 ( ) throws Throwable { HashMap < String , FastaVisitorCallback . FastaVisitorMemento > hashMap0 = new HashMap < String , FastaVisitorCallback . FastaVisitorMemento > ( ) ; IndexedAminoAcidSequenceFastaFileDataStore . IndexedAminoAcidSequenceFastaFileDataStore2 indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0 = new IndexedAminoAcidSequenceFastaFileDataStore . IndexedAminoAcidSequenceFastaFileDataStore2 ( ( File ) null , ( FastaFileParser ) null , ( DataStoreFilter ) null , ( Map < String , FastaVisitorCallback . FastaVisitorMemento > ) hashMap0 ) ; boolean boolean0 = indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0 . isClosed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test7 ( ) throws Throwable { HashMap < String , FastaVisitorCallback . FastaVisitorMemento > hashMap0 = new HashMap < String , FastaVisitorCallback . FastaVisitorMemento > ( ) ; IndexedAminoAcidSequenceFastaFileDataStore . IndexedAminoAcidSequenceFastaFileDataStore2 indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0 = new IndexedAminoAcidSequenceFastaFileDataStore . IndexedAminoAcidSequenceFastaFileDataStore2 ( ( File ) null , ( FastaFileParser ) null , ( DataStoreFilter ) null , ( Map < String , FastaVisitorCallback . FastaVisitorMemento > ) hashMap0 ) ; indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0 . getNumberOfRecords ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test11 ( ) throws Throwable { HashMap < String , FastaVisitorCallback . FastaVisitorMemento > hashMap0 = new HashMap < String , FastaVisitorCallback . FastaVisitorMemento > ( ) ; IndexedAminoAcidSequenceFastaFileDataStore . IndexedAminoAcidSequenceFastaFileDataStore2 indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0 = new IndexedAminoAcidSequenceFastaFileDataStore . IndexedAminoAcidSequenceFastaFileDataStore2 ( ( File ) null , ( FastaFileParser ) null , ( DataStoreFilter ) null , ( Map < String , FastaVisitorCallback . FastaVisitorMemento > ) hashMap0 ) ; indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0 . get ( " } t`\"q2Pzg6r" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test0 ( ) throws Throwable { File file0 = new File ( "nVR~ > W / $ ( " , "nVR~ > W / $ ( " ) ; LargeAminoAcidSequenceFastaFileDataStore largeAminoAcidSequenceFastaFileDataStore0 = ( LargeAminoAcidSequenceFastaFileDataStore ) LargeAminoAcidSequenceFastaFileDataStore . create ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test1 ( ) throws Throwable { BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder ( "" ) ; String string0 = basicChromatogramBuilder0 . id ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String id ( ) { return id ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; short [ ] shortArray0 = new short [ 9 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder ( ( Chromatogram ) basicChromatogram0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String id ( ) { return id ; }
void test3 ( ) throws Throwable { BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder ( "" ) ; short [ ] shortArray0 = new short [ 4 ] ; BasicChromatogramBuilder basicChromatogramBuilder1 = basicChromatogramBuilder0 . cPositions ( shortArray0 ) ; short [ ] shortArray1 = basicChromatogramBuilder1 . cPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test4 ( ) throws Throwable { BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder ( "" ) ; short [ ] shortArray0 = new short [ 13 ] ; BasicChromatogramBuilder basicChromatogramBuilder1 = basicChromatogramBuilder0 . tPositions ( shortArray0 ) ; short [ ] shortArray1 = basicChromatogramBuilder1 . tPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder ( "" ) ; PositionSequence positionSequence0 = basicChromatogramBuilder0 . peaks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PositionSequence peaks ( ) { return peaks ; }
void test6 ( ) throws Throwable { BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder ( " [ ange ca } nZt be null" ) ; byte [ ] byteArray0 = new byte [ 1 ] ; BasicChromatogramBuilder basicChromatogramBuilder1 = basicChromatogramBuilder0 . gConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] gConfidence ( ) { return Arrays . copyOf ( gConfidence , gConfidence . length ) ; }
void test7 ( ) throws Throwable { BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder ( " [ ange ca } nZt be null" ) ; short [ ] shortArray0 = new short [ 10 ] ; BasicChromatogramBuilder basicChromatogramBuilder1 = basicChromatogramBuilder0 . gPositions ( shortArray0 ) ; short [ ] shortArray1 = basicChromatogramBuilder1 . gPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test8 ( ) throws Throwable { BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder ( " ) X ] PcZ [ J . ] 6" ) ; byte [ ] byteArray0 = new byte [ 1 ] ; BasicChromatogramBuilder basicChromatogramBuilder1 = basicChromatogramBuilder0 . aConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] aConfidence ( ) { return Arrays . copyOf ( aConfidence , aConfidence . length ) ; }
void test9 ( ) throws Throwable { BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder ( "" ) ; short [ ] shortArray0 = new short [ 13 ] ; basicChromatogramBuilder0 . aPositions ( shortArray0 ) ; short [ ] shortArray1 = basicChromatogramBuilder0 . aPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test10 ( ) throws Throwable { BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder ( "" ) ; byte [ ] byteArray0 = new byte [ 16 ] ; BasicChromatogramBuilder basicChromatogramBuilder1 = basicChromatogramBuilder0 . cConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String id ( ) { return id ; }
void test11 ( ) throws Throwable { BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder ( "" ) ; byte [ ] byteArray0 = new byte [ 16 ] ; BasicChromatogramBuilder basicChromatogramBuilder1 = basicChromatogramBuilder0 . tConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] tConfidence ( ) { return Arrays . copyOf ( tConfidence , tConfidence . length ) ; }
void test14 ( ) throws Throwable { BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder ( "" ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; basicChromatogramBuilder0 . properties ( ( Map < String , String > ) hashMap0 ) ; Map < String , String > map0 = basicChromatogramBuilder0 . properties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test15 ( ) throws Throwable { BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder ( " [ ange ca } nZt be null" ) ; Map < String , String > map0 = basicChromatogramBuilder0 . properties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , String > properties ( ) { return properties = = null ? null : new HashMap < String , String > ( properties ) ; }
void test16 ( ) throws Throwable { BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder ( "" ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; hashMap0 . put ( "" , "" ) ; BasicChromatogramBuilder basicChromatogramBuilder1 = basicChromatogramBuilder0 . properties ( ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String id ( ) { return id ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; short [ ] shortArray0 = new short [ 5 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; short [ ] shortArray0 = new short [ 5 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; short [ ] shortArray0 = new short [ 3 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 55 ] ; short [ ] shortArray0 = new short [ 4 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 55 ] ; short [ ] shortArray0 = new short [ 4 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; short [ ] shortArray0 = new short [ 1 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; short [ ] shortArray0 = new short [ 14 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; LinkedList < ChannelGroup > linkedList0 = new LinkedList < ChannelGroup > ( ) ; linkedList0 . add ( ( ChannelGroup ) defaultChannelGroup0 ) ; String string0 = linkedList0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; short [ ] shortArray0 = new short [ 1 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; short [ ] shortArray0 = new short [ 14 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; short [ ] shortArray0 = new short [ 1 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test10 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; short [ ] shortArray0 = new short [ 1 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test11 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; short [ ] shortArray0 = new short [ 1 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test12 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; short [ ] shortArray0 = new short [ 1 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; Nucleotide nucleotide0 = Nucleotide . Cytosine ; DefaultChannel defaultChannel1 = ( DefaultChannel ) defaultChannelGroup0 . getChannel ( nucleotide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Channel getChannel ( Nucleotide channelToGet ) { if ( channelToGet = = null ) { throw new NullPointerException ( "channel to get can not be null" ) ; } if ( channelToGet = = Nucleotide . Adenine ) { return getAChannel ( ) ; } if ( channelToGet = = Nucleotide . Cytosine ) { return getCChannel ( ) ; } if ( channelToGet = = Nucleotide . Guanine ) { return getGChannel ( ) ; } / / anything else is considered a T return getTChannel ( ) ; }
void test13 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; short [ ] shortArray0 = new short [ 14 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; Nucleotide nucleotide0 = Nucleotide . Adenine ; DefaultChannel defaultChannel1 = ( DefaultChannel ) defaultChannelGroup0 . getChannel ( nucleotide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Channel getChannel ( Nucleotide channelToGet ) { if ( channelToGet = = null ) { throw new NullPointerException ( "channel to get can not be null" ) ; } if ( channelToGet = = Nucleotide . Adenine ) { return getAChannel ( ) ; } if ( channelToGet = = Nucleotide . Cytosine ) { return getCChannel ( ) ; } if ( channelToGet = = Nucleotide . Guanine ) { return getGChannel ( ) ; } / / anything else is considered a T return getTChannel ( ) ; }
void test14 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; short [ ] shortArray0 = new short [ 14 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; Nucleotide nucleotide0 = Nucleotide . NotAdenine ; DefaultChannel defaultChannel1 = ( DefaultChannel ) defaultChannelGroup0 . getChannel ( nucleotide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Channel getChannel ( Nucleotide channelToGet ) { if ( channelToGet = = null ) { throw new NullPointerException ( "channel to get can not be null" ) ; } if ( channelToGet = = Nucleotide . Adenine ) { return getAChannel ( ) ; } if ( channelToGet = = Nucleotide . Cytosine ) { return getCChannel ( ) ; } if ( channelToGet = = Nucleotide . Guanine ) { return getGChannel ( ) ; } / / anything else is considered a T return getTChannel ( ) ; }
void test15 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; short [ ] shortArray0 = new short [ 20 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; Nucleotide nucleotide0 = Nucleotide . Guanine ; DefaultChannel defaultChannel1 = ( DefaultChannel ) defaultChannelGroup0 . getChannel ( nucleotide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Channel getChannel ( Nucleotide channelToGet ) { if ( channelToGet = = null ) { throw new NullPointerException ( "channel to get can not be null" ) ; } if ( channelToGet = = Nucleotide . Adenine ) { return getAChannel ( ) ; } if ( channelToGet = = Nucleotide . Cytosine ) { return getCChannel ( ) ; } if ( channelToGet = = Nucleotide . Guanine ) { return getGChannel ( ) ; } / / anything else is considered a T return getTChannel ( ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 21 ] ; short [ ] shortArray0 = new short [ 17 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ( int ) ( short ) 0 ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 21 ] ; short [ ] shortArray0 = new short [ 17 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ( int ) ( short ) 0 ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfTracePositions ( ) { return ( int ) getChannelGroup ( ) . getAChannel ( ) . getPositions ( ) . getLength ( ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 21 ] ; short [ ] shortArray0 = new short [ 17 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ( int ) ( short ) 0 ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 21 ] ; short [ ] shortArray0 = new short [ 17 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ( int ) ( short ) 0 ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; basicChromatogram0 . setProperties ( ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 21 ] ; short [ ] shortArray0 = new short [ 17 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ( int ) ( short ) 0 ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; BasicChromatogram basicChromatogram1 = new BasicChromatogram ( ( Chromatogram ) basicChromatogram0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return this . id ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 21 ] ; short [ ] shortArray0 = new short [ 17 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ( int ) ( short ) 0 ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 21 ] ; short [ ] shortArray0 = new short [ 17 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ( int ) ( short ) 0 ) ; hashMap0 . put ( "" , "" ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; String string0 = AbiUtil . parsePascalStringFrom ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String parsePascalStringFrom ( byte [ ] data ) { return new String ( data , 1 , data . length - 1 , IOUtil . UTF_8 ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; String string0 = AbiUtil . parseASCIIStringFrom ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String parseASCIIStringFrom ( byte [ ] data ) { return new String ( data , IOUtil . UTF_8 ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; boolean boolean0 = AbiUtil . isABIMagicNumber ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isABIMagicNumber ( byte [ ] magicNumber ) { return Arrays . equals ( AbiUtil . MAGIC_NUMBER , magicNumber ) ; }
void test0 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . ASPF ; TaggedDataType taggedDataType0 = TaggedDataType . TYPE_5 ; DefaultShortArrayTaggedDataRecord defaultShortArrayTaggedDataRecord0 = new DefaultShortArrayTaggedDataRecord ( taggedDataName0 , 47L , taggedDataType0 , ( - 1 ) , ( - 1688L ) , 0L , 0L , ( - 1L ) ) ; Class < ShortArrayTaggedDataRecord > class0 = defaultShortArrayTaggedDataRecord0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < TimeTaggedDataRecord > getType ( ) { return TimeTaggedDataRecord . class ; }
void test1 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . CpEP ; TaggedDataType taggedDataType0 = TaggedDataType . TYPE_1 ; DefaultShortArrayTaggedDataRecord defaultShortArrayTaggedDataRecord0 = new DefaultShortArrayTaggedDataRecord ( taggedDataName0 , 0L , taggedDataType0 , 88 , ( long ) 88 , 0L , 0L , 0L ) ; Class < short [ ] > class0 = defaultShortArrayTaggedDataRecord0 . getParsedDataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < Ab1LocalTime > getParsedDataType ( ) { return Ab1LocalTime . class ; }
void test2 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . CpEP ; TaggedDataType taggedDataType0 = TaggedDataType . TYPE_1 ; DefaultShortArrayTaggedDataRecord defaultShortArrayTaggedDataRecord0 = new DefaultShortArrayTaggedDataRecord ( taggedDataName0 , 0L , taggedDataType0 , 88 , ( long ) 88 , 0L , 0L , 0L ) ; byte [ ] byteArray0 = new byte [ 7 ] ; short [ ] shortArray0 = defaultShortArrayTaggedDataRecord0 . parseDataRecordFrom ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" D parseDataRecordFrom ( byte [ ] ab1DataBlock ) { if ( recordLength < 5 ) { return parseDataFrom ( IOUtil . convertUnsignedIntToByteArray ( dataRecord ) ) ; } byte [ ] data = new byte [ ( int ) recordLength ] ; System . arraycopy ( ab1DataBlock , ( int ) ( dataRecord - AbiUtil . HEADER_SIZE ) , data , 0 , data . length ) ; return parseDataFrom ( data ) ; }
void test0 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . GEL_FILE_PATH ; String string0 = taggedDataName0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . GEL_FILE_PATH ; boolean boolean0 = taggedDataName0 . usesNullTerminatedStringValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean usesNullTerminatedStringValues ( ) { return isNullTerminated ; }
void test3 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . parseTaggedDataName ( "GELP" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { TaggedDataType taggedDataType0 = TaggedDataType . TYPE_1 ; int int0 = taggedDataType0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T getValue ( ) { return value ; }
void test1 ( ) throws Throwable { TaggedDataType taggedDataType0 = TaggedDataType . parseTaggedDataName ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TaggedDataType parseTaggedDataName ( int dataTypeValue ) { Integer key = Integer . valueOf ( dataTypeValue ) ; if ( ! MAP . containsKey ( key ) ) { throw new IllegalArgumentException ( "Unknown TaggedDataType " + dataTypeValue ) ; } return MAP . get ( key ) ; }
void test0 ( ) throws Throwable { Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime ( 0 , ( - 410 ) , 1052 ) ; int int0 = ab1LocalTime0 . getSec ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime ( ( - 1271 ) , ( - 1271 ) , ( - 1271 ) ) ; int int0 = ab1LocalTime0 . getMin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test2 ( ) throws Throwable { Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime ( ( - 1305 ) , ( - 1305 ) , 436 ) ; int int0 = ab1LocalTime0 . getHour ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test3 ( ) throws Throwable { Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime ( ( - 1271 ) , ( - 1271 ) , ( - 1271 ) ) ; int int0 = ab1LocalTime0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test4 ( ) throws Throwable { Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime ( ( - 1305 ) , ( - 1305 ) , 436 ) ; String string0 = ab1LocalTime0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test5 ( ) throws Throwable { Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime ( ( - 1271 ) , ( - 1271 ) , ( - 1271 ) ) ; Ab1LocalTime ab1LocalTime1 = new Ab1LocalTime ( ( - 1271 ) , ( - 684 ) , ( - 1271 ) ) ; boolean boolean0 = ab1LocalTime0 . equals ( ( Object ) ab1LocalTime1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test6 ( ) throws Throwable { Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime ( ( - 1384 ) , ( - 1384 ) , ( - 744 ) ) ; boolean boolean0 = ab1LocalTime0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test7 ( ) throws Throwable { Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime ( 1 , 1 , 1 ) ; boolean boolean0 = ab1LocalTime0 . equals ( ( Object ) "Ab1LocalTime [ hour = 1 , min = 1 , sec = 1 ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test8 ( ) throws Throwable { Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime ( ( - 1271 ) , ( - 1271 ) , ( - 1271 ) ) ; Ab1LocalTime ab1LocalTime1 = new Ab1LocalTime ( 0 , ( - 941 ) , ( - 1232312 ) ) ; boolean boolean0 = ab1LocalTime0 . equals ( ( Object ) ab1LocalTime1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test9 ( ) throws Throwable { Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime ( 0 , 0 , 0 ) ; Ab1LocalTime ab1LocalTime1 = new Ab1LocalTime ( 0 , 0 , 19 ) ; boolean boolean0 = ab1LocalTime0 . equals ( ( Object ) ab1LocalTime1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test10 ( ) throws Throwable { Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime ( 1 , 1 , 1 ) ; Ab1LocalTime ab1LocalTime1 = new Ab1LocalTime ( 1 , 1 , 1 ) ; boolean boolean0 = ab1LocalTime0 . equals ( ( Object ) ab1LocalTime1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . DATA ; TaggedDataType taggedDataType0 = TaggedDataType . CHAR ; DefaultAsciiTaggedDataRecord defaultAsciiTaggedDataRecord0 = new DefaultAsciiTaggedDataRecord ( taggedDataName0 , 0L , taggedDataType0 , 0 , 1184L , 0L , 0L , 0L ) ; DefaultTimeTaggedDataRecord defaultTimeTaggedDataRecord0 = new DefaultTimeTaggedDataRecord ( taggedDataName0 , 0L , taggedDataType0 , 0 , ( - 963L ) , 0L , ( long ) 0 , 1223L ) ; boolean boolean0 = defaultAsciiTaggedDataRecord0 . equals ( ( Object ) defaultTimeTaggedDataRecord0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCrypticValue ( ) { return crypticValue ; }
void test1 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . DATA ; TaggedDataType taggedDataType0 = TaggedDataType . CHAR ; DefaultAsciiTaggedDataRecord defaultAsciiTaggedDataRecord0 = new DefaultAsciiTaggedDataRecord ( taggedDataName0 , ( - 66L ) , taggedDataType0 , 0 , ( - 66L ) , ( long ) 0 , 0L , ( long ) 0 ) ; DefaultUserDefinedTaggedDataRecord defaultUserDefinedTaggedDataRecord0 = new DefaultUserDefinedTaggedDataRecord ( taggedDataName0 , ( - 66L ) , taggedDataType0 , 0 , ( - 66L ) , ( long ) 0 , 0L , ( long ) 0 ) ; boolean boolean0 = defaultAsciiTaggedDataRecord0 . equals ( ( Object ) defaultUserDefinedTaggedDataRecord0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCrypticValue ( ) { return crypticValue ; }
void test2 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . DATA ; TaggedDataType taggedDataType0 = TaggedDataType . CHAR ; DefaultDateTaggedDataRecord defaultDateTaggedDataRecord0 = new DefaultDateTaggedDataRecord ( taggedDataName0 , ( - 1L ) , taggedDataType0 , 0 , ( long ) 0 , ( long ) 0 , 0L , 0L ) ; String string0 = defaultDateTaggedDataRecord0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getElementLength ( ) { return elementLength ; }
void test3 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . OfSc ; TaggedDataType taggedDataType0 = TaggedDataType . DATE ; DefaultUserDefinedTaggedDataRecord defaultUserDefinedTaggedDataRecord0 = new DefaultUserDefinedTaggedDataRecord ( taggedDataName0 , ( - 456L ) , taggedDataType0 , 0 , 5L , 5L , ( - 456L ) , 1054L ) ; int int0 = defaultUserDefinedTaggedDataRecord0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test5 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . OFFS ; TaggedDataType taggedDataType0 = TaggedDataType . PASCAL_STRING ; DefaultDateTaggedDataRecord defaultDateTaggedDataRecord0 = new DefaultDateTaggedDataRecord ( taggedDataName0 , 1104L , taggedDataType0 , ( - 685 ) , ( - 752L ) , ( - 2027L ) , ( - 1410L ) , ( long ) ( - 685 ) ) ; byte [ ] byteArray0 = new byte [ 1 ] ; Ab1LocalDate ab1LocalDate0 = defaultDateTaggedDataRecord0 . parseDataRecordFrom ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNumberOfElements ( ) { return numberOfElements ; }
void test6 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . RESULTS_GROUP_NAME ; TaggedDataType taggedDataType0 = TaggedDataType . PASCAL_STRING ; DefaultPascalStringTaggedDataRecord defaultPascalStringTaggedDataRecord0 = new DefaultPascalStringTaggedDataRecord ( taggedDataName0 , 30L , taggedDataType0 , ( - 423 ) , 30L , 30L , 30L , 30L ) ; boolean boolean0 = defaultPascalStringTaggedDataRecord0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test7 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . JTC_TEMPERATURE ; TaggedDataType taggedDataType0 = TaggedDataType . TIME ; DefaultPascalStringTaggedDataRecord defaultPascalStringTaggedDataRecord0 = new DefaultPascalStringTaggedDataRecord ( taggedDataName0 , 981L , taggedDataType0 , 389 , 981L , 1144L , ( long ) 389 , 0L ) ; boolean boolean0 = defaultPascalStringTaggedDataRecord0 . equals ( ( Object ) "PEAK_POSITIONS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getElementLength ( ) { return elementLength ; }
void test8 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . EVENT ; TaggedDataType taggedDataType0 = TaggedDataType . TIME ; DefaultIntegerArrayTaggedDataRecord defaultIntegerArrayTaggedDataRecord0 = new DefaultIntegerArrayTaggedDataRecord ( taggedDataName0 , 1L , taggedDataType0 , 52 , 1L , 0L , ( long ) 52 , ( long ) 52 ) ; TaggedDataName taggedDataName1 = TaggedDataName . RevC ; DefaultDateTaggedDataRecord defaultDateTaggedDataRecord0 = new DefaultDateTaggedDataRecord ( taggedDataName1 , 1L , taggedDataType0 , 960 , ( long ) 960 , 5L , 1L , 1L ) ; boolean boolean0 = defaultIntegerArrayTaggedDataRecord0 . equals ( ( Object ) defaultDateTaggedDataRecord0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCrypticValue ( ) { return crypticValue ; }
void test9 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . DYE_PRIMER_CORRECTION_FILE ; TaggedDataType taggedDataType0 = TaggedDataType . TYPE_5 ; DefaultShortArrayTaggedDataRecord defaultShortArrayTaggedDataRecord0 = new DefaultShortArrayTaggedDataRecord ( taggedDataName0 , ( - 1190L ) , taggedDataType0 , 1587 , ( - 1190L ) , ( - 1190L ) , 30L , ( long ) 1587 ) ; DefaultDateTaggedDataRecord defaultDateTaggedDataRecord0 = new DefaultDateTaggedDataRecord ( taggedDataName0 , ( - 810L ) , taggedDataType0 , ( - 961 ) , 936L , 936L , 0L , ( - 810L ) ) ; boolean boolean0 = defaultShortArrayTaggedDataRecord0 . equals ( ( Object ) defaultDateTaggedDataRecord0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRecordLength ( ) { return recordLength ; }
void test10 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . OFFS ; TaggedDataType taggedDataType0 = TaggedDataType . PASCAL_STRING ; DefaultUserDefinedTaggedDataRecord defaultUserDefinedTaggedDataRecord0 = new DefaultUserDefinedTaggedDataRecord ( taggedDataName0 , 0L , taggedDataType0 , ( - 685 ) , 1104L , 1455L , ( - 1410L ) , ( - 1857L ) ) ; TaggedDataType taggedDataType1 = TaggedDataType . FLOAT ; DefaultTaggedDataRecord defaultTaggedDataRecord0 = new DefaultTaggedDataRecord ( taggedDataName0 , 0L , taggedDataType1 , ( - 685 ) , ( - 2027L ) , ( long ) ( - 685 ) , ( - 2027L ) , 1104L ) ; boolean boolean0 = defaultUserDefinedTaggedDataRecord0 . equals ( ( Object ) defaultTaggedDataRecord0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCrypticValue ( ) { return crypticValue ; }
void test0 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . CpEP ; TaggedDataType taggedDataType0 = TaggedDataType . TYPE_1 ; DefaultTimeTaggedDataRecord defaultTimeTaggedDataRecord0 = new DefaultTimeTaggedDataRecord ( taggedDataName0 , 0L , taggedDataType0 , 88 , ( long ) 88 , 0L , 0L , 0L ) ; byte [ ] byteArray0 = new byte [ 7 ] ; Ab1LocalTime ab1LocalTime0 = defaultTimeTaggedDataRecord0 . parseDataRecordFrom ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHour ( ) { return hour ; }
void test1 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . ASPF ; TaggedDataType taggedDataType0 = TaggedDataType . TYPE_5 ; DefaultTimeTaggedDataRecord defaultTimeTaggedDataRecord0 = new DefaultTimeTaggedDataRecord ( taggedDataName0 , 47L , taggedDataType0 , ( - 1 ) , ( - 1688L ) , 0L , 0L , ( - 1L ) ) ; Class < TimeTaggedDataRecord > class0 = defaultTimeTaggedDataRecord0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < TimeTaggedDataRecord > getType ( ) { return TimeTaggedDataRecord . class ; }
void test2 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . CpEP ; TaggedDataType taggedDataType0 = TaggedDataType . TYPE_1 ; DefaultTimeTaggedDataRecord defaultTimeTaggedDataRecord0 = new DefaultTimeTaggedDataRecord ( taggedDataName0 , 0L , taggedDataType0 , 88 , ( long ) 88 , 0L , 0L , 0L ) ; Class < Ab1LocalTime > class0 = defaultTimeTaggedDataRecord0 . getParsedDataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < Ab1LocalTime > getParsedDataType ( ) { return Ab1LocalTime . class ; }
void test0 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . FILTER_WHEEL_ORDER ; TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder ( taggedDataName0 , 0L ) ; TaggedDataRecordBuilder taggedDataRecordBuilder1 = taggedDataRecordBuilder0 . setDataRecord ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TaggedDataRecordBuilder setDataRecord ( long dataRecord ) { this . dataRecord = dataRecord ; return this ; }
void test1 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . EVENT ; TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder ( taggedDataName0 , 776L ) ; TaggedDataRecordBuilder taggedDataRecordBuilder1 = taggedDataRecordBuilder0 . setCrypticValue ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TaggedDataRecordBuilder setCrypticValue ( long crypticValue ) { this . crypticValue = crypticValue ; return this ; }
void test4 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . EVENT ; TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder ( taggedDataName0 , 776L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTagNumber ( ) { return tagNumber ; }
void test8 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . EVENT ; TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder ( taggedDataName0 , 776L ) ; TaggedDataRecordBuilder taggedDataRecordBuilder1 = taggedDataRecordBuilder0 . setNumberOfElements ( 776L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TaggedDataRecordBuilder setNumberOfElements ( long numberOfElements ) { if ( numberOfElements < 1 ) { throw new IllegalArgumentException ( "numberOfElements must be > 0" ) ; } this . numberOfElements = numberOfElements ; return this ; }
void test10 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . EVENT ; TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder ( taggedDataName0 , 776L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTagNumber ( ) { return tagNumber ; }
void test11 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . GEL_TYPE ; TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder ( taggedDataName0 , 791L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTagNumber ( ) { return tagNumber ; }
void test12 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . EVENT ; TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder ( taggedDataName0 , 781L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getElementLength ( ) { return elementLength ; }
void test13 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . EVENT ; TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder ( taggedDataName0 , 791L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getElementLength ( ) { return elementLength ; }
void test14 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . FILTER_WHEEL_ORDER ; TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder ( taggedDataName0 , 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getElementLength ( ) { return elementLength ; }
void test15 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . EVENT ; TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder ( taggedDataName0 , 776L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getElementLength ( ) { return elementLength ; }
void test16 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . GEL_TYPE ; TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder ( taggedDataName0 , 791L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTagNumber ( ) { return tagNumber ; }
void test0 ( ) throws Throwable { Ab1LocalDate ab1LocalDate0 = new Ab1LocalDate ( ( - 1 ) , 32 , 32 ) ; int int0 = ab1LocalDate0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test1 ( ) throws Throwable { Ab1LocalDate ab1LocalDate0 = new Ab1LocalDate ( 0 , 1 , ( - 1 ) ) ; int int0 = ab1LocalDate0 . getDay ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test2 ( ) throws Throwable { Ab1LocalDate ab1LocalDate0 = new Ab1LocalDate ( ( - 1996 ) , ( - 1996 ) , ( - 1996 ) ) ; Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime ( ( - 1996 ) , 0 , 31 ) ; Date date0 = ab1LocalDate0 . toDate ( ab1LocalTime0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test3 ( ) throws Throwable { Ab1LocalDate ab1LocalDate0 = new Ab1LocalDate ( ( - 1 ) , 32 , 32 ) ; int int0 = ab1LocalDate0 . getYear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test4 ( ) throws Throwable { Ab1LocalDate ab1LocalDate0 = new Ab1LocalDate ( ( - 1 ) , 0 , ( - 1 ) ) ; int int0 = ab1LocalDate0 . getMonth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test5 ( ) throws Throwable { Ab1LocalDate ab1LocalDate0 = new Ab1LocalDate ( ( - 1996 ) , ( - 1996 ) , ( - 1996 ) ) ; Ab1LocalDate ab1LocalDate1 = new Ab1LocalDate ( ( - 1996 ) , 31 , ( - 1996 ) ) ; boolean boolean0 = ab1LocalDate0 . equals ( ( Object ) ab1LocalDate1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test6 ( ) throws Throwable { Ab1LocalDate ab1LocalDate0 = new Ab1LocalDate ( 31 , 0 , 31 ) ; boolean boolean0 = ab1LocalDate0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test7 ( ) throws Throwable { Ab1LocalDate ab1LocalDate0 = new Ab1LocalDate ( 0 , ( - 1901 ) , 0 ) ; boolean boolean0 = ab1LocalDate0 . equals ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test8 ( ) throws Throwable { Ab1LocalDate ab1LocalDate0 = new Ab1LocalDate ( 0 , ( - 1901 ) , 0 ) ; Ab1LocalDate ab1LocalDate1 = new Ab1LocalDate ( 0 , 706 , ( - 735 ) ) ; boolean boolean0 = ab1LocalDate0 . equals ( ( Object ) ab1LocalDate1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test9 ( ) throws Throwable { Ab1LocalDate ab1LocalDate0 = new Ab1LocalDate ( ( - 1786 ) , 1 , 1 ) ; Ab1LocalDate ab1LocalDate1 = new Ab1LocalDate ( ( - 1786 ) , 1 , 1 ) ; boolean boolean0 = ab1LocalDate0 . equals ( ( Object ) ab1LocalDate1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getYear ( ) { return year ; }
void test10 ( ) throws Throwable { Ab1LocalDate ab1LocalDate0 = new Ab1LocalDate ( 3 , 778 , 0 ) ; Ab1LocalDate ab1LocalDate1 = new Ab1LocalDate ( 778 , 778 , 0 ) ; boolean boolean0 = ab1LocalDate0 . equals ( ( Object ) ab1LocalDate1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test0 ( ) throws Throwable { DefaultScanRate . Builder defaultScanRate_Builder0 = new DefaultScanRate . Builder ( ) ; DefaultScanRate defaultScanRate0 = ( DefaultScanRate ) defaultScanRate_Builder0 . build ( ) ; String string0 = defaultScanRate0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { DefaultScanRate . Builder defaultScanRate_Builder0 = new DefaultScanRate . Builder ( ) ; DefaultScanRate defaultScanRate0 = ( DefaultScanRate ) defaultScanRate_Builder0 . build ( ) ; int int0 = defaultScanRate0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test2 ( ) throws Throwable { DefaultScanRate . Builder defaultScanRate_Builder0 = new DefaultScanRate . Builder ( ) ; DefaultScanRate defaultScanRate0 = ( DefaultScanRate ) defaultScanRate_Builder0 . build ( ) ; DefaultScanRate defaultScanRate1 = ( DefaultScanRate ) defaultScanRate_Builder0 . build ( ) ; boolean boolean0 = defaultScanRate0 . equals ( ( Object ) defaultScanRate1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test3 ( ) throws Throwable { DefaultScanRate . Builder defaultScanRate_Builder0 = new DefaultScanRate . Builder ( ) ; DefaultScanRate defaultScanRate0 = ( DefaultScanRate ) defaultScanRate_Builder0 . build ( ) ; DefaultScanRate . Builder defaultScanRate_Builder1 = defaultScanRate_Builder0 . time ( ( - 1566 ) ) ; DefaultScanRate defaultScanRate1 = ( DefaultScanRate ) defaultScanRate_Builder1 . build ( ) ; boolean boolean0 = defaultScanRate0 . equals ( ( Object ) defaultScanRate1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test4 ( ) throws Throwable { DefaultScanRate . Builder defaultScanRate_Builder0 = new DefaultScanRate . Builder ( ) ; DefaultScanRate defaultScanRate0 = ( DefaultScanRate ) defaultScanRate_Builder0 . build ( ) ; boolean boolean0 = defaultScanRate0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test5 ( ) throws Throwable { DefaultScanRate . Builder defaultScanRate_Builder0 = new DefaultScanRate . Builder ( ) ; DefaultScanRate defaultScanRate0 = ( DefaultScanRate ) defaultScanRate_Builder0 . build ( ) ; Object object0 = new Object ( ) ; boolean boolean0 = defaultScanRate0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test6 ( ) throws Throwable { DefaultScanRate . Builder defaultScanRate_Builder0 = new DefaultScanRate . Builder ( ) ; DefaultScanRate defaultScanRate0 = ( DefaultScanRate ) defaultScanRate_Builder0 . build ( ) ; defaultScanRate_Builder0 . firstScanLine ( 1 ) ; DefaultScanRate defaultScanRate1 = ( DefaultScanRate ) defaultScanRate_Builder0 . build ( ) ; boolean boolean0 = defaultScanRate0 . equals ( ( Object ) defaultScanRate1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test7 ( ) throws Throwable { DefaultScanRate . Builder defaultScanRate_Builder0 = new DefaultScanRate . Builder ( ) ; DefaultScanRate defaultScanRate0 = ( DefaultScanRate ) defaultScanRate_Builder0 . build ( ) ; defaultScanRate_Builder0 . period ( 681 ) ; DefaultScanRate defaultScanRate1 = ( DefaultScanRate ) defaultScanRate_Builder0 . build ( ) ; boolean boolean0 = defaultScanRate0 . equals ( ( Object ) defaultScanRate1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test0 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . TRACKING_INITIAL_ADJUSTMENT ; TaggedDataType taggedDataType0 = TaggedDataType . TYPE_19 ; DefaultScanRateTaggedDataType defaultScanRateTaggedDataType0 = new DefaultScanRateTaggedDataType ( taggedDataName0 , ( - 1L ) , taggedDataType0 , 0 , ( - 1L ) , ( - 1L ) , ( long ) 0 , 5L ) ; Class < ScanRateTaggedDataType > class0 = defaultScanRateTaggedDataType0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < TimeTaggedDataRecord > getType ( ) { return TimeTaggedDataRecord . class ; }
void test1 ( ) throws Throwable { TaggedDataName taggedDataName0 = TaggedDataName . SPACING ; TaggedDataType taggedDataType0 = TaggedDataType . INTEGER ; DefaultScanRateTaggedDataType defaultScanRateTaggedDataType0 = new DefaultScanRateTaggedDataType ( taggedDataName0 , 642L , taggedDataType0 , 1 , 642L , 642L , ( - 883L ) , ( - 883L ) ) ; Class < ScanRate > class0 = defaultScanRateTaggedDataType0 . getParsedDataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < Ab1LocalTime > getParsedDataType ( ) { return Ab1LocalTime . class ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = ZTRUtil . getMagicNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long readInt ( byte [ ] byteArray ) { long longValue = 0 ; longValue | = byteArray [ 0 ] & 0xFF ; longValue < < = 8 ; longValue | = byteArray [ 1 ] & 0xFF ; longValue < < = 8 ; longValue | = byteArray [ 2 ] & 0xFF ; longValue < < = 8 ; longValue | = byteArray [ 3 ] & 0xFF ; return longValue ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = ZTRUtil . getMagicNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMagicNumber ( byte [ ] magicNumber ) { if ( magicNumber . length < ZTR_MAGIC_NUMBER . length ) { byte [ ] subSet = new byte [ magicNumber . length ] ; System . arraycopy ( ZTR_MAGIC_NUMBER , 0 , subSet , 0 , subSet . length ) ; return Arrays . equals ( subSet , magicNumber ) ; } return Arrays . equals ( ZTR_MAGIC_NUMBER , magicNumber ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; boolean boolean0 = ZTRUtil . isMagicNumber ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMagicNumber ( byte [ ] magicNumber ) { if ( magicNumber . length < ZTR_MAGIC_NUMBER . length ) { byte [ ] subSet = new byte [ magicNumber . length ] ; System . arraycopy ( ZTR_MAGIC_NUMBER , 0 , subSet , 0 , subSet . length ) ; return Arrays . equals ( subSet , magicNumber ) ; } return Arrays . equals ( ZTR_MAGIC_NUMBER , magicNumber ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; short [ ] shortArray0 = new short [ 5 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; ZTRChromatogramImpl zTRChromatogramImpl0 = new ZTRChromatogramImpl ( ( Chromatogram ) basicChromatogram0 ) ; int int0 = zTRChromatogramImpl0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; short [ ] shortArray0 = new short [ 5 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; ZTRChromatogramImpl zTRChromatogramImpl0 = new ZTRChromatogramImpl ( ( Chromatogram ) basicChromatogram0 ) ; Range range0 = zTRChromatogramImpl0 . getClip ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Range getClip ( ) { return clip ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; short [ ] shortArray0 = new short [ 5 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; ZTRChromatogramImpl zTRChromatogramImpl0 = new ZTRChromatogramImpl ( ( Chromatogram ) basicChromatogram0 ) ; boolean boolean0 = zTRChromatogramImpl0 . equals ( ( Object ) "Amino" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { DefaultZTRChromatogramWriterBuilder defaultZTRChromatogramWriterBuilder0 = new DefaultZTRChromatogramWriterBuilder ( ) ; ZtrChromatogramWriter ztrChromatogramWriter0 = ( ZtrChromatogramWriter ) defaultZTRChromatogramWriterBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" D build ( ) throws IOException { return createNewInstance ( fastaFile , hint , filter ) ; }
void test1 ( ) throws Throwable { DefaultZTRChromatogramWriterBuilder defaultZTRChromatogramWriterBuilder0 = new DefaultZTRChromatogramWriterBuilder ( ) ; DefaultZTRChromatogramWriterBuilder . ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = defaultZTRChromatogramWriterBuilder0 . forConfidenceChunkEncoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ChunkEncoderBuilder forConfidenceChunkEncoder ( ) { return confidenceEncoder ; }
void test2 ( ) throws Throwable { DefaultZTRChromatogramWriterBuilder defaultZTRChromatogramWriterBuilder0 = new DefaultZTRChromatogramWriterBuilder ( ) ; DefaultZTRChromatogramWriterBuilder . ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = defaultZTRChromatogramWriterBuilder0 . forClipPointsChunkEncoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ChunkEncoderBuilder forClipPointsChunkEncoder ( ) { return clipEncoder ; }
void test3 ( ) throws Throwable { DefaultZTRChromatogramWriterBuilder defaultZTRChromatogramWriterBuilder0 = new DefaultZTRChromatogramWriterBuilder ( ) ; DefaultZTRChromatogramWriterBuilder . ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = defaultZTRChromatogramWriterBuilder0 . forPositionsChunkEncoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ChunkEncoderBuilder forPositionsChunkEncoder ( ) { return positionsEncoder ; }
void test4 ( ) throws Throwable { DefaultZTRChromatogramWriterBuilder defaultZTRChromatogramWriterBuilder0 = new DefaultZTRChromatogramWriterBuilder ( ) ; DefaultZTRChromatogramWriterBuilder . ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = defaultZTRChromatogramWriterBuilder0 . forBasecallChunkEncoder ( ) ; DefaultZTRChromatogramWriterBuilder . ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder1 = defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 . addRunLengthEncoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ChunkEncoderBuilder forBasecallChunkEncoder ( ) { return basecallEncoder ; }
void test5 ( ) throws Throwable { DefaultZTRChromatogramWriterBuilder defaultZTRChromatogramWriterBuilder0 = new DefaultZTRChromatogramWriterBuilder ( ) ; DefaultZTRChromatogramWriterBuilder . ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = defaultZTRChromatogramWriterBuilder0 . forPeaksChunkEncoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ChunkEncoderBuilder forPeaksChunkEncoder ( ) { return peaksEncoder ; }
void test6 ( ) throws Throwable { DefaultZTRChromatogramWriterBuilder defaultZTRChromatogramWriterBuilder0 = new DefaultZTRChromatogramWriterBuilder ( ) ; DefaultZTRChromatogramWriterBuilder . ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = defaultZTRChromatogramWriterBuilder0 . forCommentsChunkEncoder ( ) ; DefaultZTRChromatogramWriterBuilder . ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder1 = defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 . addFollowEncoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ChunkEncoderBuilder forCommentsChunkEncoder ( ) { return commentsEncoder ; }
void test7 ( ) throws Throwable { Chunk chunk0 = Chunk . COMMENTS ; ChunkType chunkType0 = ChunkType . COMMENTS ; DefaultZTRChromatogramWriterBuilder . ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = new DefaultZTRChromatogramWriterBuilder . ChunkEncoderBuilder ( chunk0 , chunkType0 ) ; DeltaEncodedData deltaEncodedData0 = DeltaEncodedData . INTEGER ; DeltaEncodedData . Level deltaEncodedData_Level0 = DeltaEncodedData . Level . DELTA_LEVEL_2 ; DefaultZTRChromatogramWriterBuilder . ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder1 = defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 . addDeltaEncoder ( deltaEncodedData0 , deltaEncodedData_Level0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test8 ( ) throws Throwable { Chunk chunk0 = Chunk . COMMENTS ; ChunkType chunkType0 = ChunkType . COMMENTS ; DefaultZTRChromatogramWriterBuilder . ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = new DefaultZTRChromatogramWriterBuilder . ChunkEncoderBuilder ( chunk0 , chunkType0 ) ; DefaultZTRChromatogramWriterBuilder . ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder1 = defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 . addZLibEncoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { ChunkType chunkType0 = ChunkType . CLIP ; String string0 = chunkType0 . getTypeName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeName ( ) { return typeName ; }
void test2 ( ) throws Throwable { ChunkType chunkType0 = ChunkType . getChunkFor ( "CLIP" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ChunkType getChunkFor ( String header ) throws ChunkException { if ( MAP . containsKey ( header ) ) { return MAP . get ( header ) ; } throw new ChunkException ( String . format ( "header '%s' is unknown" , header ) ) ; }
void test1 ( ) throws Throwable { Chunk chunk0 = Chunk . COMMENTS ; byte [ ] byteArray0 = new byte [ 1 ] ; AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( "eaf_gT } N * W_p , k * KF" ) ; NucleotideSequence nucleotideSequence0 = chunk0 . parseData ( byteArray0 , ( ChromatogramFileVisitor ) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 , ( NucleotideSequence ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] parseData ( byte [ ] data ) throws TraceDecoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data ) throws TraceEncoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @param optionalParameter an optional parameter which some * encodings might need if their encoding * scheme can take parameters to vary how the data * is encoded . If no optional parameters can be * passed in then any value would be ignored . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data , byte optionalParameter ) throws TraceEncoderException ; }
void test3 ( ) throws Throwable { Chunk chunk0 = Chunk . BASE ; byte [ ] byteArray0 = new byte [ 1 ] ; ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " * 9 * : leKw` 6hrK [ C : e" ) ; chunk0 . parseData ( byteArray0 , ztrChromatogramBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] parseData ( byte [ ] data ) throws TraceDecoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data ) throws TraceEncoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @param optionalParameter an optional parameter which some * encodings might need if their encoding * scheme can take parameters to vary how the data * is encoded . If no optional parameters can be * passed in then any value would be ignored . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data , byte optionalParameter ) throws TraceEncoderException ; }
void test4 ( ) throws Throwable { Chunk chunk0 = Chunk . BASE ; byte [ ] byteArray0 = new byte [ 1 ] ; AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( "sEZzZ5H" ) ; NucleotideSequence nucleotideSequence0 = chunk0 . parseData ( byteArray0 , ( ChromatogramFileVisitor ) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 , ( NucleotideSequence ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return codec . decodedLengthOf ( data ) ; }
void test7 ( ) throws Throwable { Chunk chunk0 = Chunk . POSITIONS ; byte [ ] byteArray0 = new byte [ 8 ] ; ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( "$ * u : Y5n > ) " ) ; chunk0 . parseData ( byteArray0 , ztrChromatogramBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] parseData ( byte [ ] data ) throws TraceDecoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data ) throws TraceEncoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @param optionalParameter an optional parameter which some * encodings might need if their encoding * scheme can take parameters to vary how the data * is encoded . If no optional parameters can be * passed in then any value would be ignored . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data , byte optionalParameter ) throws TraceEncoderException ; }
void test8 ( ) throws Throwable { Chunk chunk0 = Chunk . POSITIONS ; byte [ ] byteArray0 = new byte [ 8 ] ; AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( "$ * u : Y5n > ) " ) ; NucleotideSequence nucleotideSequence0 = chunk0 . parseData ( byteArray0 , ( ChromatogramFileVisitor ) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 , ( NucleotideSequence ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] parseData ( byte [ ] data ) throws TraceDecoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data ) throws TraceEncoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @param optionalParameter an optional parameter which some * encodings might need if their encoding * scheme can take parameters to vary how the data * is encoded . If no optional parameters can be * passed in then any value would be ignored . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data , byte optionalParameter ) throws TraceEncoderException ; }
void test10 ( ) throws Throwable { Chunk chunk0 = Chunk . CLIP ; byte [ ] byteArray0 = new byte [ 9 ] ; AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( "" ) ; NucleotideSequence nucleotideSequence0 = chunk0 . parseData ( byteArray0 , ( ChromatogramFileVisitor ) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 , ( NucleotideSequence ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] parseData ( byte [ ] data ) throws TraceDecoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data ) throws TraceEncoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @param optionalParameter an optional parameter which some * encodings might need if their encoding * scheme can take parameters to vary how the data * is encoded . If no optional parameters can be * passed in then any value would be ignored . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data , byte optionalParameter ) throws TraceEncoderException ; }
void test12 ( ) throws Throwable { Chunk chunk0 = Chunk . CLIP ; byte [ ] byteArray0 = chunk0 . encodeChunk ( ( Chromatogram ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeChunk ( Chromatogram ztrChromatogram ) throws TraceEncoderException ; byte [ ] decodeChunk ( InputStream inputStream , int datalength ) throws TraceDecoderException { try { / / first we have to read the data encoding / / data can be encoded , get data type . / / the data can be encoded multiple times / / ex : runlength encoded , then zipped / / we will know when we are done , when the first byte is 0 . boolean stillEncoded = true ; byte [ ] data = readData ( inputStream , datalength ) ; while ( stillEncoded ) { Data dataImplementation = DataFactory . getDataImplementation ( data ) ; if ( dataImplementation instanceof RawData ) { stillEncoded = false ; } else { / / not done yet data = dataImplementation . parseData ( data ) ; } } return data ; } catch ( IOException e ) { throw new TraceDecoderException ( "error decoding chunk" , e ) ; } }
void test15 ( ) throws Throwable { Chunk chunk0 = Chunk . CLIP ; byte [ ] byteArray0 = new byte [ 9 ] ; byteArray0 [ 0 ] = ( byte ) ( - 1 ) ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; chunk0 . readLength ( ( InputStream ) byteArrayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int available ( ) throws IOException { return in . available ( ) ; }
void test0 ( ) throws Throwable { DeltaEncodedData deltaEncodedData0 = DeltaEncodedData . SHORT ; byte [ ] byteArray0 = new byte [ 12 ] ; byte [ ] byteArray1 = deltaEncodedData0 . encodeData ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPaddingSize ( ) { return 0 ; }
void test2 ( ) throws Throwable { DeltaEncodedData . Level deltaEncodedData_Level0 = DeltaEncodedData . Level . DELTA_LEVEL_3 ; byte byte0 = deltaEncodedData_Level0 . getLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { ShrinkToEightBitData shrinkToEightBitData0 = ShrinkToEightBitData . INTEGER_TO_BYTE ; byte [ ] byteArray0 = new byte [ 7 ] ; byte [ ] byteArray1 = shrinkToEightBitData0 . parseData ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] parseData ( byte [ ] data ) throws TraceDecoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data ) throws TraceEncoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @param optionalParameter an optional parameter which some * encodings might need if their encoding * scheme can take parameters to vary how the data * is encoded . If no optional parameters can be * passed in then any value would be ignored . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data , byte optionalParameter ) throws TraceEncoderException ; }
void test2 ( ) throws Throwable { ShrinkToEightBitData shrinkToEightBitData0 = ShrinkToEightBitData . SHORT_TO_BYTE ; byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 0 ] = ( byte ) 1 ; byte [ ] byteArray1 = shrinkToEightBitData0 . encodeData ( byteArray0 , ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeData ( byte [ ] data ) throws TraceEncoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @param optionalParameter an optional parameter which some * encodings might need if their encoding * scheme can take parameters to vary how the data * is encoded . If no optional parameters can be * passed in then any value would be ignored . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data , byte optionalParameter ) throws TraceEncoderException ; }
void test0 ( ) throws Throwable { FollowData followData0 = FollowData . INSTANCE ; byte [ ] byteArray0 = new byte [ 8 ] ; byte [ ] byteArray1 = followData0 . encodeData ( byteArray0 ) ; byte [ ] byteArray2 = followData0 . parseData ( byteArray1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { FollowData followData0 = FollowData . INSTANCE ; byte [ ] byteArray0 = new byte [ 9 ] ; byte [ ] byteArray1 = followData0 . encodeData ( byteArray0 , ( byte ) ( - 75 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { FollowData followData0 = FollowData . INSTANCE ; byte [ ] byteArray0 = new byte [ 8 ] ; byteArray0 [ 1 ] = ( byte ) ( - 15 ) ; byte [ ] byteArray1 = followData0 . encodeData ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { RunLengthEncodedData runLengthEncodedData0 = RunLengthEncodedData . INSTANCE ; byte [ ] byteArray0 = new byte [ 60 ] ; byte [ ] byteArray1 = runLengthEncodedData0 . encodeData ( byteArray0 ) ; byte [ ] byteArray2 = runLengthEncodedData0 . parseData ( byteArray1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { RunLengthEncodedData runLengthEncodedData0 = RunLengthEncodedData . INSTANCE ; byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 3 ] = ( byte ) 13 ; byte [ ] byteArray1 = runLengthEncodedData0 . encodeData ( byteArray0 , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; RawData rawData0 = ( RawData ) DataFactory . getDataImplementation ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Data getDataImplementation ( byte [ ] data ) throws TraceDecoderException { / / first byte is the data format ( raw , run - length encoded , zipped etc ) if ( data = = null | | data . length < 1 ) { throw new TraceDecoderException ( "can not parse data format" ) ; } Byte format = Byte . valueOf ( data [ 0 ] ) ; Data dataImpl = DATA_MAP . get ( format ) ; if ( dataImpl = = null ) { throw new TraceDecoderException ( "format not supported : " + format ) ; } return dataImpl ; }
void test0 ( ) throws Throwable { DeltaStrategy deltaStrategy0 = DeltaStrategy . getStrategyFor ( 1 ) ; int int0 = deltaStrategy0 . computeDelta ( 1 , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { DeltaStrategy deltaStrategy0 = DeltaStrategy . LEVEL_2 ; int int0 = deltaStrategy0 . computeDelta ( 10 , 10 , 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int computeDelta ( int u1 , int u2 , int u3 ) ; }
void test2 ( ) throws Throwable { DeltaStrategy deltaStrategy0 = DeltaStrategy . LEVEL_3 ; int int0 = deltaStrategy0 . computeDelta ( 1562 , 1562 , 1562 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int computeDelta ( int u1 , int u2 , int u3 ) ; }
void test0 ( ) throws Throwable { ZLibData zLibData0 = ZLibData . INSTANCE ; byte [ ] byteArray0 = new byte [ 5 ] ; byte [ ] byteArray1 = zLibData0 . encodeData ( byteArray0 , ( byte ) ( - 7 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeData ( byte [ ] data ) throws TraceEncoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @param optionalParameter an optional parameter which some * encodings might need if their encoding * scheme can take parameters to vary how the data * is encoded . If no optional parameters can be * passed in then any value would be ignored . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data , byte optionalParameter ) throws TraceEncoderException ; }
void test0 ( ) throws Throwable { RawData rawData0 = RawData . INSTANCE ; byte [ ] byteArray0 = new byte [ 3 ] ; byte [ ] byteArray1 = rawData0 . encodeData ( byteArray0 , ( byte ) ( - 39 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeData ( byte [ ] data ) throws TraceEncoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @param optionalParameter an optional parameter which some * encodings might need if their encoding * scheme can take parameters to vary how the data * is encoded . If no optional parameters can be * passed in then any value would be ignored . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data , byte optionalParameter ) throws TraceEncoderException ; }
void test1 ( ) throws Throwable { RawData rawData0 = RawData . INSTANCE ; byte [ ] byteArray0 = new byte [ 4 ] ; byte [ ] byteArray1 = rawData0 . parseData ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] parseData ( byte [ ] data ) throws TraceDecoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data ) throws TraceEncoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @param optionalParameter an optional parameter which some * encodings might need if their encoding * scheme can take parameters to vary how the data * is encoded . If no optional parameters can be * passed in then any value would be ignored . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data , byte optionalParameter ) throws TraceEncoderException ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; PrivateDataImpl privateDataImpl0 = new PrivateDataImpl ( byteArray0 ) ; PrivateDataImpl privateDataImpl1 = new PrivateDataImpl ( byteArray0 ) ; boolean boolean0 = privateDataImpl1 . equals ( ( Object ) privateDataImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; PrivateDataImpl privateDataImpl0 = new PrivateDataImpl ( byteArray0 ) ; int int0 = privateDataImpl0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; PrivateDataImpl privateDataImpl0 = new PrivateDataImpl ( byteArray0 ) ; Object object0 = new Object ( ) ; boolean boolean0 = privateDataImpl0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { short [ ] shortArray0 = new short [ 10 ] ; short [ ] shortArray1 = SCFUtils . deltaDeltaEncode ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ShortBuffer deltaDeltaEncode ( ShortBuffer original ) { ShortBuffer buffer = copy ( original ) ; for ( int i = buffer . limit ( ) - 1 ; i > 1 ; i - - ) { short deltaDelta = ( short ) ( buffer . get ( i ) - 2 * buffer . get ( i - 1 ) + buffer . get ( i - 2 ) ) ; buffer . put ( i , deltaDelta ) ; } / / special case i = 1 buffer . put ( 1 , ( short ) ( buffer . get ( 1 ) - 2 * buffer . get ( 0 ) ) ) ; / / leave i = 0 as is / / reset position to beginning . return ( ShortBuffer ) buffer . rewind ( ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = SCFUtils . getMagicNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMagicNumber ( byte [ ] magicNumber ) { if ( magicNumber . length < ZTR_MAGIC_NUMBER . length ) { byte [ ] subSet = new byte [ magicNumber . length ] ; System . arraycopy ( ZTR_MAGIC_NUMBER , 0 , subSet , 0 , subSet . length ) ; return Arrays . equals ( subSet , magicNumber ) ; } return Arrays . equals ( ZTR_MAGIC_NUMBER , magicNumber ) ; }
void test4 ( ) throws Throwable { SCFCodecs sCFCodecs0 = SCFCodecs . VERSION_3 ; DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( " * zI { r + Ym ( E" ) ; sCFCodecs0 . parse ( ( DataInputStream ) null , ( SCFHeader ) defaultSCFHeader0 , ( ChromatogramFileVisitor ) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSampleOffset ( ) { return sampleOffset ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 18 ] ; short [ ] shortArray0 = new short [ 2 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; SCFChromatogramImpl sCFChromatogramImpl0 = new SCFChromatogramImpl ( ( Chromatogram ) basicChromatogram0 ) ; PrivateDataImpl privateDataImpl0 = new PrivateDataImpl ( byteArray0 ) ; SCFChromatogramImpl sCFChromatogramImpl1 = new SCFChromatogramImpl ( ( Chromatogram ) sCFChromatogramImpl0 , ( QualitySequence ) null , ( QualitySequence ) null , ( QualitySequence ) null , ( PrivateData ) privateDataImpl0 ) ; boolean boolean0 = sCFChromatogramImpl0 . equals ( ( Object ) sCFChromatogramImpl1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 18 ] ; short [ ] shortArray0 = new short [ 2 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; SCFChromatogramImpl sCFChromatogramImpl0 = new SCFChromatogramImpl ( ( Chromatogram ) basicChromatogram0 ) ; int int0 = sCFChromatogramImpl0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 18 ] ; short [ ] shortArray0 = new short [ 2 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; SCFChromatogramImpl sCFChromatogramImpl0 = new SCFChromatogramImpl ( ( Chromatogram ) basicChromatogram0 ) ; boolean boolean0 = sCFChromatogramImpl0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 18 ] ; short [ ] shortArray0 = new short [ 2 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; SCFChromatogramImpl sCFChromatogramImpl0 = new SCFChromatogramImpl ( ( Chromatogram ) basicChromatogram0 ) ; PrivateDataImpl privateDataImpl0 = new PrivateDataImpl ( byteArray0 ) ; QualitySequence qualitySequence0 = sCFChromatogramImpl0 . getQualitySequence ( ) ; SCFChromatogramImpl sCFChromatogramImpl1 = new SCFChromatogramImpl ( ( Chromatogram ) sCFChromatogramImpl0 , ( QualitySequence ) null , ( QualitySequence ) null , qualitySequence0 , ( PrivateData ) privateDataImpl0 ) ; boolean boolean0 = sCFChromatogramImpl0 . equals ( ( Object ) sCFChromatogramImpl1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 18 ] ; short [ ] shortArray0 = new short [ 2 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; SCFChromatogramImpl sCFChromatogramImpl0 = new SCFChromatogramImpl ( ( Chromatogram ) basicChromatogram0 ) ; PrivateDataImpl privateDataImpl0 = new PrivateDataImpl ( byteArray0 ) ; QualitySequence qualitySequence0 = sCFChromatogramImpl0 . getQualitySequence ( ) ; SCFChromatogramImpl sCFChromatogramImpl1 = new SCFChromatogramImpl ( ( Chromatogram ) sCFChromatogramImpl0 , ( QualitySequence ) null , qualitySequence0 , ( QualitySequence ) null , ( PrivateData ) privateDataImpl0 ) ; boolean boolean0 = sCFChromatogramImpl0 . equals ( ( Object ) sCFChromatogramImpl1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 18 ] ; short [ ] shortArray0 = new short [ 2 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; SCFChromatogramImpl sCFChromatogramImpl0 = new SCFChromatogramImpl ( ( Chromatogram ) basicChromatogram0 ) ; PrivateDataImpl privateDataImpl0 = new PrivateDataImpl ( byteArray0 ) ; QualitySequence qualitySequence0 = sCFChromatogramImpl0 . getQualitySequence ( ) ; SCFChromatogramImpl sCFChromatogramImpl1 = new SCFChromatogramImpl ( ( Chromatogram ) sCFChromatogramImpl0 , qualitySequence0 , ( QualitySequence ) null , ( QualitySequence ) null , ( PrivateData ) privateDataImpl0 ) ; boolean boolean0 = sCFChromatogramImpl0 . equals ( ( Object ) sCFChromatogramImpl1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 18 ] ; short [ ] shortArray0 = new short [ 2 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; SCFChromatogramImpl sCFChromatogramImpl0 = new SCFChromatogramImpl ( ( Chromatogram ) basicChromatogram0 ) ; PrivateDataImpl privateDataImpl0 = new PrivateDataImpl ( byteArray0 ) ; SCFChromatogramImpl sCFChromatogramImpl1 = new SCFChromatogramImpl ( ( Chromatogram ) sCFChromatogramImpl0 , ( QualitySequence ) null , ( QualitySequence ) null , ( QualitySequence ) null , ( PrivateData ) privateDataImpl0 ) ; SCFChromatogramImpl sCFChromatogramImpl2 = new SCFChromatogramImpl ( ( Chromatogram ) basicChromatogram0 , ( QualitySequence ) null , ( QualitySequence ) null , ( QualitySequence ) null , ( PrivateData ) privateDataImpl0 ) ; boolean boolean0 = sCFChromatogramImpl1 . equals ( ( Object ) sCFChromatogramImpl2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { NullSectionCodec nullSectionCodec0 = new NullSectionCodec ( ) ; byte [ ] byteArray0 = new byte [ 6 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; DataInputStream dataInputStream0 = new DataInputStream ( ( InputStream ) byteArrayInputStream0 ) ; DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "" ) ; long long0 = nullSectionCodec0 . decode ( dataInputStream0 , ( - 935L ) , ( SCFHeader ) defaultSCFHeader0 , scfChromatogramBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test1 ( ) throws Throwable { NullSectionCodec nullSectionCodec0 = new NullSectionCodec ( ) ; DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; EncodedSection encodedSection0 = nullSectionCodec0 . encode ( ( ScfChromatogram ) null , ( SCFHeader ) defaultSCFHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encode ( Collection < T > glyphs ) ; / * * * Get a single Gyph from the encoded * byte array at the given index . * @param encodedGlyphs the byte array of * encoded glyphs . * @param index the index of the glyph * to get . * @return the decoded glyph * at the given index . * @throws IndexOutOfBoundsException if index is out of bounds * of the index . * / T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test2 ( ) throws Throwable { NullSectionCodec nullSectionCodec0 = new NullSectionCodec ( ) ; byte [ ] byteArray0 = new byte [ 6 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , 0 , 0 ) ; DataInputStream dataInputStream0 = new DataInputStream ( ( InputStream ) byteArrayInputStream0 ) ; DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( "CgJIaZY + ] % ; 2L\"" ) ; long long0 = nullSectionCodec0 . decode ( dataInputStream0 , ( long ) ( byte ) 126 , ( SCFHeader ) defaultSCFHeader0 , ( ChromatogramFileVisitor ) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test0 ( ) throws Throwable { Version3BasesSectionCodec version3BasesSectionCodec0 = new Version3BasesSectionCodec ( ) ; byte [ ] byteArray0 = new byte [ 8 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 ) ; BufferedInputStream bufferedInputStream0 = new BufferedInputStream ( ( InputStream ) byteArrayInputStream0 , ( int ) ( byte ) 40 ) ; DataInputStream dataInputStream0 = new DataInputStream ( ( InputStream ) bufferedInputStream0 ) ; DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "" ) ; long long0 = version3BasesSectionCodec0 . decode ( dataInputStream0 , ( long ) ( byte ) 0 , ( SCFHeader ) defaultSCFHeader0 , scfChromatogramBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test2 ( ) throws Throwable { Version3BasesSectionCodec version3BasesSectionCodec0 = new Version3BasesSectionCodec ( ) ; BufferedInputStream bufferedInputStream0 = new BufferedInputStream ( ( InputStream ) null ) ; DataInputStream dataInputStream0 = new DataInputStream ( ( InputStream ) bufferedInputStream0 ) ; DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( "g" ) ; long long0 = version3BasesSectionCodec0 . decode ( dataInputStream0 , 0L , ( SCFHeader ) defaultSCFHeader0 , ( ChromatogramFileVisitor ) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test0 ( ) throws Throwable { Version3BasesSectionCodec version3BasesSectionCodec0 = new Version3BasesSectionCodec ( ) ; PipedInputStream pipedInputStream0 = new PipedInputStream ( 52 ) ; DataInputStream dataInputStream0 = new DataInputStream ( ( InputStream ) pipedInputStream0 ) ; DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "" ) ; long long0 = version3BasesSectionCodec0 . decode ( dataInputStream0 , ( long ) 52 , ( SCFHeader ) defaultSCFHeader0 , scfChromatogramBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test2 ( ) throws Throwable { Version2BasesSectionCodec version2BasesSectionCodec0 = new Version2BasesSectionCodec ( ) ; byte [ ] byteArray0 = new byte [ 8 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( int ) ( byte ) ( - 73 ) , ( int ) ( byte ) ( - 73 ) ) ; DataInputStream dataInputStream0 = new DataInputStream ( ( InputStream ) byteArrayInputStream0 ) ; DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( "" ) ; long long0 = version2BasesSectionCodec0 . decode ( dataInputStream0 , ( long ) ( byte ) 76 , ( SCFHeader ) defaultSCFHeader0 , ( ChromatogramFileVisitor ) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test0 ( ) throws Throwable { DefaultSectionCodecFactory defaultSectionCodecFactory0 = DefaultSectionCodecFactory . INSTANCE ; Section section0 = Section . COMMENTS ; DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; CommentSectionCodec commentSectionCodec0 = ( CommentSectionCodec ) defaultSectionCodecFactory0 . getSectionParserFor ( section0 , ( SCFHeader ) defaultSCFHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SectionDecoder getSectionParserFor ( Section s , SCFHeader header ) ; SectionEncoder getSectionEncoderFor ( Section s , float version ) ; }
void test2 ( ) throws Throwable { DefaultSectionCodecFactory defaultSectionCodecFactory0 = DefaultSectionCodecFactory . INSTANCE ; Section section0 = Section . COMMENTS ; DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; defaultSCFHeader0 . setVersion ( 35 . 75293F ) ; CommentSectionCodec commentSectionCodec0 = ( CommentSectionCodec ) defaultSectionCodecFactory0 . getSectionParserFor ( section0 , ( SCFHeader ) defaultSCFHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SectionDecoder getSectionParserFor ( Section s , SCFHeader header ) ; SectionEncoder getSectionEncoderFor ( Section s , float version ) ; }
void test3 ( ) throws Throwable { DefaultSectionCodecFactory defaultSectionCodecFactory0 = DefaultSectionCodecFactory . INSTANCE ; Section section0 = Section . BASES ; Version3BasesSectionCodec version3BasesSectionCodec0 = ( Version3BasesSectionCodec ) defaultSectionCodecFactory0 . getSectionEncoderFor ( section0 , 3 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SectionEncoder getSectionEncoderFor ( Section s , float version ) ; }
void test4 ( ) throws Throwable { DefaultSectionCodecFactory defaultSectionCodecFactory0 = DefaultSectionCodecFactory . INSTANCE ; Section section0 = Section . BASES ; Version2BasesSectionCodec version2BasesSectionCodec0 = ( Version2BasesSectionCodec ) defaultSectionCodecFactory0 . getSectionEncoderFor ( section0 , 2 . 8971682F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SectionEncoder getSectionEncoderFor ( Section s , float version ) ; }
void test0 ( ) throws Throwable { CommentSectionCodec commentSectionCodec0 = new CommentSectionCodec ( ) ; PipedInputStream pipedInputStream0 = new PipedInputStream ( 1803 ) ; DataInputStream dataInputStream0 = new DataInputStream ( ( InputStream ) pipedInputStream0 ) ; DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "PRIVATE_DATA" ) ; long long0 = commentSectionCodec0 . decode ( dataInputStream0 , 1L , ( SCFHeader ) defaultSCFHeader0 , scfChromatogramBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test0 ( ) throws Throwable { Version2SampleSectionCodec version2SampleSectionCodec0 = new Version2SampleSectionCodec ( ) ; BytePositionStrategy bytePositionStrategy0 = new BytePositionStrategy ( ) ; short [ ] [ ] shortArray0 = new short [ 6 ] [ 8 ] ; version2SampleSectionCodec0 . extractActualPositions ( ( PositionStrategy ) bytePositionStrategy0 , shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getSampleSize ( ) { return sampleSize ; }
void test0 ( ) throws Throwable { Version2BasesSectionCodec version2BasesSectionCodec0 = new Version2BasesSectionCodec ( ) ; DataInputStream dataInputStream0 = new DataInputStream ( ( InputStream ) null ) ; DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "" ) ; long long0 = version2BasesSectionCodec0 . decode ( dataInputStream0 , 1518L , ( SCFHeader ) defaultSCFHeader0 , scfChromatogramBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test1 ( ) throws Throwable { Version3SampleSectionCodec version3SampleSectionCodec0 = new Version3SampleSectionCodec ( ) ; byte [ ] byteArray0 = new byte [ 20 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 ) ; DataInputStream dataInputStream0 = new DataInputStream ( ( InputStream ) byteArrayInputStream0 ) ; ShortPositionStrategy shortPositionStrategy0 = new ShortPositionStrategy ( ) ; short [ ] [ ] shortArray0 = version3SampleSectionCodec0 . parseRawPositions ( dataInputStream0 , 105 , ( PositionStrategy ) shortPositionStrategy0 ) ; version3SampleSectionCodec0 . extractActualPositions ( ( PositionStrategy ) shortPositionStrategy0 , shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getSampleSize ( ) { return sampleSize ; }
void test2 ( ) throws Throwable { Version3SampleSectionCodec version3SampleSectionCodec0 = new Version3SampleSectionCodec ( ) ; byte [ ] byteArray0 = new byte [ 20 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 ) ; DataInputStream dataInputStream0 = new DataInputStream ( ( InputStream ) byteArrayInputStream0 ) ; ShortPositionStrategy shortPositionStrategy0 = new ShortPositionStrategy ( ) ; short [ ] [ ] shortArray0 = version3SampleSectionCodec0 . parseRawPositions ( dataInputStream0 , ( int ) ( byte ) 0 , ( PositionStrategy ) shortPositionStrategy0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] [ ] parseRawPositions ( DataInputStream in , int numberOfSamples , PositionStrategy positionStrategy ) throws IOException ; PositionStrategy getPositionStrategyFor ( ScfChromatogram c ) { return PositionStrategyFactory . getPositionStrategy ( getMaxPositionsValue ( c ) ) ; }
void test0 ( ) throws Throwable { Section section0 = Section . PRIVATE_DATA ; EncodedSection encodedSection0 = new EncodedSection ( ( ByteBuffer ) null , section0 ) ; ByteBuffer byteBuffer0 = encodedSection0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ByteBuffer getData ( ) { return data ; }
void test1 ( ) throws Throwable { Section section0 = Section . PRIVATE_DATA ; EncodedSection encodedSection0 = new EncodedSection ( ( ByteBuffer ) null , section0 ) ; Section section1 = encodedSection0 . getSection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Section getSection ( ) { return section ; }
void test1 ( ) throws Throwable { PrivateDataCodec privateDataCodec0 = new PrivateDataCodec ( ) ; PipedInputStream pipedInputStream0 = new PipedInputStream ( 103 ) ; DataInputStream dataInputStream0 = new DataInputStream ( ( InputStream ) pipedInputStream0 ) ; DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( "Yi | M#E5b ) l aI_xK_d4" ) ; long long0 = privateDataCodec0 . decode ( dataInputStream0 , ( long ) 103 , ( SCFHeader ) defaultSCFHeader0 , ( ChromatogramFileVisitor ) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test0 ( ) throws Throwable { DefaultSCFHeaderCodec defaultSCFHeaderCodec0 = DefaultSCFHeaderCodec . INSTANCE ; DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; ByteBuffer byteBuffer0 = defaultSCFHeaderCodec0 . encode ( ( SCFHeader ) defaultSCFHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encode ( Collection < T > glyphs ) ; / * * * Get a single Gyph from the encoded * byte array at the given index . * @param encodedGlyphs the byte array of * encoded glyphs . * @param index the index of the glyph * to get . * @return the decoded glyph * at the given index . * @throws IndexOutOfBoundsException if index is out of bounds * of the index . * / T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test0 ( ) throws Throwable { DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; int int0 = defaultSCFHeader0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test1 ( ) throws Throwable { DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; defaultSCFHeader0 . setNumberOfSamples ( 1 ) ; DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader ( ) ; boolean boolean0 = defaultSCFHeader0 . equals ( ( Object ) defaultSCFHeader1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfSamples ( ) { return numberOfSamples ; }
void test2 ( ) throws Throwable { DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; defaultSCFHeader0 . setPrivateDataOffset ( 180 ) ; DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader ( ) ; boolean boolean0 = defaultSCFHeader0 . equals ( ( Object ) defaultSCFHeader1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrivateDataOffset ( ) { return privateDataOffset ; }
void test3 ( ) throws Throwable { DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; defaultSCFHeader0 . setSampleOffset ( ( - 1479 ) ) ; DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader ( ) ; boolean boolean0 = defaultSCFHeader0 . equals ( ( Object ) defaultSCFHeader1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSampleOffset ( ) { return sampleOffset ; }
void test4 ( ) throws Throwable { DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; boolean boolean0 = defaultSCFHeader0 . equals ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader ( ) ; boolean boolean0 = defaultSCFHeader0 . equals ( ( Object ) defaultSCFHeader1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSampleOffset ( ) { return sampleOffset ; }
void test6 ( ) throws Throwable { DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader ( ) ; defaultSCFHeader1 . setBasesOffset ( 495 ) ; boolean boolean0 = defaultSCFHeader0 . equals ( ( Object ) defaultSCFHeader1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBasesOffset ( ) { return basesOffset ; }
void test7 ( ) throws Throwable { DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; defaultSCFHeader0 . setCommentOffset ( 37 ) ; DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader ( ) ; boolean boolean0 = defaultSCFHeader0 . equals ( ( Object ) defaultSCFHeader1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCommentOffset ( ) { return commentOffset ; }
void test8 ( ) throws Throwable { DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader ( ) ; defaultSCFHeader0 . setCommentSize ( ( - 1796951359 ) ) ; boolean boolean0 = defaultSCFHeader1 . equals ( ( Object ) defaultSCFHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCommentSize ( ) { return commentSize ; }
void test9 ( ) throws Throwable { DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader ( ) ; defaultSCFHeader1 . setNumberOfBases ( 1 ) ; boolean boolean0 = defaultSCFHeader1 . equals ( ( Object ) defaultSCFHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfBases ( ) { return numberOfBases ; }
void test10 ( ) throws Throwable { DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; defaultSCFHeader0 . setPrivateDataSize ( ( - 15 ) ) ; DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader ( ) ; boolean boolean0 = defaultSCFHeader0 . equals ( ( Object ) defaultSCFHeader1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrivateDataSize ( ) { return privateDataSize ; }
void test11 ( ) throws Throwable { DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader ( ) ; defaultSCFHeader1 . setSampleSize ( ( byte ) ( - 1 ) ) ; boolean boolean0 = defaultSCFHeader0 . equals ( ( Object ) defaultSCFHeader1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getSampleSize ( ) { return sampleSize ; }
void test12 ( ) throws Throwable { DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader ( ) ; defaultSCFHeader1 . setVersion ( ( - 1 . 0F ) ) ; boolean boolean0 = defaultSCFHeader0 . equals ( ( Object ) defaultSCFHeader1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getVersion ( ) { return version ; }
void test0 ( ) throws Throwable { BytePositionStrategy bytePositionStrategy0 = new BytePositionStrategy ( ) ; byte byte0 = bytePositionStrategy0 . getSampleSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getSampleSize ( ) { return sampleSize ; }
void test1 ( ) throws Throwable { BytePositionStrategy bytePositionStrategy0 = new BytePositionStrategy ( ) ; int int0 = bytePositionStrategy0 . getMaxAllowedValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxAllowedValue ( ) { return Byte . MAX_VALUE ; }
void test0 ( ) throws Throwable { DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader ( ) ; defaultSCFHeader0 . setSampleSize ( ( byte ) 2 ) ; ShortPositionStrategy shortPositionStrategy0 = ( ShortPositionStrategy ) PositionStrategyFactory . getPositionStrategy ( ( SCFHeader ) defaultSCFHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxAllowedValue ( ) { return Byte . MAX_VALUE ; }
void test2 ( ) throws Throwable { ShortPositionStrategy shortPositionStrategy0 = ( ShortPositionStrategy ) PositionStrategyFactory . getPositionStrategy ( 834 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getSampleSize ( ) { return sampleSize ; }
void test0 ( ) throws Throwable { ShortPositionStrategy shortPositionStrategy0 = new ShortPositionStrategy ( ) ; int int0 = shortPositionStrategy0 . getMaxAllowedValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxAllowedValue ( ) { return Byte . MAX_VALUE ; }
void test2 ( ) throws Throwable { ShortPositionStrategy shortPositionStrategy0 = new ShortPositionStrategy ( ) ; byte byte0 = shortPositionStrategy0 . getSampleSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getSampleSize ( ) { return sampleSize ; }
void test0 ( ) throws Throwable { LinkedList < Range > linkedList0 = new LinkedList < Range > ( ) ; Range range0 = Ranges . createInclusiveRange ( ( Collection < Range > ) linkedList0 ) ; linkedList0 . add ( range0 ) ; linkedList0 . add ( range0 ) ; List < Range > list0 = Ranges . mergeIntoClusters ( ( Collection < Range > ) linkedList0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test0 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . RESIDUE_BASED ; Range range0 = Range . of ( range_CoordinateSystem0 , ( - 92L ) , 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . RESIDUE_BASED ; String string0 = range_CoordinateSystem0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test2 ( ) throws Throwable { Range . Comparators range_Comparators0 = Range . Comparators . SHORTEST_TO_LONGEST ; Range . Builder range_Builder0 = new Range . Builder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return codec . decodedLengthOf ( data ) ; }
void test3 ( ) throws Throwable { Range range0 = Range . ofLength ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return codec . decodedLengthOf ( data ) ; }
void test4 ( ) throws Throwable { Range range0 = Range . parseRange ( " [ 1 . . 0 ] / RB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return codec . decodedLengthOf ( data ) ; }
void test5 ( ) throws Throwable { Range range0 = Range . of ( ( - 1806L ) , ( - 1806L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getEnd ( ) ; / * * * Fetch the right ( end ) coordinate using the given * { @link CoordinateSystem }
void test6 ( ) throws Throwable { Range range0 = Range . of ( 1935L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { boolean delegateHasNext = delegate . hasNext ( ) ; if ( parentDataStore . isClosed ( ) & & delegateHasNext ) { IOUtil . closeAndIgnoreErrors ( this ) ; throw new DataStoreClosedException ( "datastore is closed" ) ; } return delegateHasNext ; }
void test7 ( ) throws Throwable { Range range0 = Range . of ( 1935L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getEnd ( ) ; / * * * Fetch the right ( end ) coordinate using the given * { @link CoordinateSystem }
void test8 ( ) throws Throwable { Range range0 = Range . of ( 1903L , 9223372036854775807L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test9 ( ) throws Throwable { Range range0 = Range . ofLength ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test10 ( ) throws Throwable { Range . Builder range_Builder0 = new Range . Builder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getEnd ( ) ; / * * * Fetch the right ( end ) coordinate using the given * { @link CoordinateSystem }
void test11 ( ) throws Throwable { Range range0 = Range . of ( 9223372036854775804L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return codec . decodedLengthOf ( data ) ; }
void test12 ( ) throws Throwable { Range range0 = Range . of ( ( - 1806L ) , ( - 1806L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test13 ( ) throws Throwable { Range range0 = Range . of ( 65535L , 2147483647L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test14 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . ZERO_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( 1735L , 384L , range_CoordinateSystem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test15 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . SPACE_BASED ; Range range0 = Range . of ( range_CoordinateSystem0 , 1806L , 1806L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test16 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . SPACE_BASED ; Range range0 = Range . of ( range_CoordinateSystem0 , 2147483647L , 2147483647L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test17 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . SPACE_BASED ; Range range0 = Range . of ( range_CoordinateSystem0 , 2147483647L , 2147483647L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test18 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . SPACE_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( long ) 0 , 2147483647L , range_CoordinateSystem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test19 ( ) throws Throwable { Range . Builder range_Builder0 = new Range . Builder ( ( - 1644L ) , ( - 1644L ) ) ; Range . Builder range_Builder1 = range_Builder0 . contractEnd ( ( - 1644L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Range ( ) { / / can not instantiate }
void test20 ( ) throws Throwable { Range range0 = Range . of ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBegin ( ) ; / * * * Fetch the first coordinate using the given * { @link CoordinateSystem }
void test21 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . RESIDUE_BASED ; Range . Builder range_Builder0 = new Range . Builder ( range_CoordinateSystem0 , 0L , 0L ) ; Range . Builder range_Builder1 = range_Builder0 . expandBegin ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Range ( ) { / / can not instantiate }
void test22 ( ) throws Throwable { Range . Builder range_Builder0 = new Range . Builder ( ( - 1806L ) , ( - 1806L ) ) ; Range . Builder range_Builder1 = range_Builder0 . contractBegin ( ( - 1806L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Range ( ) { / / can not instantiate }
void test23 ( ) throws Throwable { Range . Builder range_Builder0 = new Range . Builder ( ) ; Range . Builder range_Builder1 = range_Builder0 . copy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test24 ( ) throws Throwable { Range range0 = Range . ofLength ( 9223372036854775807L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test25 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . RESIDUE_BASED ; Range range0 = Range . of ( range_CoordinateSystem0 , 2147483641L , 2147483641L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test26 ( ) throws Throwable { Range range0 = Range . of ( ( - 9223372036854775808L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test27 ( ) throws Throwable { Range range0 = Range . of ( 193L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test28 ( ) throws Throwable { Range . Comparators range_Comparators0 = Range . Comparators . ARRIVAL ; Range range0 = Range . of ( ( - 292L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test29 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . RESIDUE_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( 795L , ( - 1502L ) , range_CoordinateSystem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test30 ( ) throws Throwable { Range range0 = Range . of ( ( - 9223372036854775808L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBegin ( ) ; / * * * Fetch the first coordinate using the given * { @link CoordinateSystem }
void test31 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . RESIDUE_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( long ) 0 , 2147483641L , range_CoordinateSystem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test33 ( ) throws Throwable { Range range0 = Range . ofLength ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test34 ( ) throws Throwable { Range range0 = Range . ofLength ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test35 ( ) throws Throwable { Range range0 = Range . of ( 1330L , 1330L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test36 ( ) throws Throwable { Range range0 = Range . ofLength ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test37 ( ) throws Throwable { Range range0 = Range . of ( 1330L , 1330L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return codec . decodedLengthOf ( data ) ; }
void test38 ( ) throws Throwable { Range range0 = Range . of ( ( - 9223372036854775808L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Range intersection ( Range other ) { if ( other = = null ) { throw new IllegalArgumentException ( "Null Range used in intersection operation . " ) ; } if ( isEmpty ( ) ) { return this ; } if ( other . isEmpty ( ) ) { return other ; } long intersectionStart = Math . max ( other . getBegin ( ) , this . getBegin ( ) ) ; long intersectionEnd = Math . min ( other . getEnd ( ) , this . getEnd ( ) ) ; / / this mess is so we don't deal with underflow / / if start is Long . MIN_VALUE long length = intersectionEnd - intersectionStart + 1 ; if ( length < = - 1 ) { return new Range . Builder ( ) . build ( ) ; } / / length > = 0 can be handled by builder / / we include length of 0 since / / that might have a different start coordinate return new Range . Builder ( length ) . shift ( intersectionStart ) . build ( ) ; }
void test39 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . ZERO_BASED ; Range range0 = Range . of ( range_CoordinateSystem0 , ( - 764L ) , ( - 764L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test40 ( ) throws Throwable { Range . Builder range_Builder0 = new Range . Builder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test41 ( ) throws Throwable { Range . Builder range_Builder0 = new Range . Builder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return wrappedDeque . isEmpty ( ) ; }
void test42 ( ) throws Throwable { Range range0 = Range . of ( ( - 9223372036854775808L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test43 ( ) throws Throwable { Range range0 = Range . of ( 1935L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test44 ( ) throws Throwable { Range range0 = Range . ofLength ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test45 ( ) throws Throwable { Range . Builder range_Builder0 = new Range . Builder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Range > split ( long maxSplitLength ) { if ( maxSplitLength < 1 ) { throw new IllegalArgumentException ( "max splitLength must be > = 1" ) ; } List < Range > list = new ArrayList < Range > ( ) ; if ( getLength ( ) < maxSplitLength ) { list . add ( this ) ; } else { long currentStart = getBegin ( ) ; long end = getEnd ( ) ; while ( currentStart < = end ) { long endCoordinate = Math . min ( end , currentStart + maxSplitLength - 1 ) ; list . add ( Range . of ( currentStart , endCoordinate ) ) ; currentStart = currentStart + maxSplitLength ; } } return list ; }
void test46 ( ) throws Throwable { Range range0 = Range . of ( 1330L , 1330L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test47 ( ) throws Throwable { Range range0 = Range . of ( ( - 2147483648L ) , 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return codec . decodedLengthOf ( data ) ; }
void test48 ( ) throws Throwable { Range range0 = Range . of ( ( - 1419L ) , ( - 128L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test49 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . RESIDUE_BASED ; Range range0 = Range . of ( range_CoordinateSystem0 , ( long ) 0 , ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test50 ( ) throws Throwable { Range range0 = Range . of ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test51 ( ) throws Throwable { Range range0 = Range . of ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test52 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . RESIDUE_BASED ; Range range0 = Range . of ( range_CoordinateSystem0 , 2147483641L , 2147483641L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return codec . decodedLengthOf ( data ) ; }
void test53 ( ) throws Throwable { Range . Builder range_Builder0 = new Range . Builder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test54 ( ) throws Throwable { Range range0 = Range . ofLength ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return codec . decodedLengthOf ( data ) ; }
void test55 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . SPACE_BASED ; Range range0 = Range . of ( range_CoordinateSystem0 , 1806L , 1806L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBegin ( ) ; / * * * Fetch the first coordinate using the given * { @link CoordinateSystem }
void test56 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . SPACE_BASED ; Range range0 = Range . of ( range_CoordinateSystem0 , 2147483647L , 2147483647L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test57 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . SPACE_BASED ; Range range0 = Range . of ( range_CoordinateSystem0 , 2147483650L , 2147483650L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return wrappedDeque . isEmpty ( ) ; }
void test0 ( ) throws Throwable { Direction direction0 = Direction . parseSequenceDirection ( "f" ) ; String string0 = direction0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return Character . toString ( getCodeCharacter ( ) ) ; }
void test2 ( ) throws Throwable { Direction direction0 = Direction . parseSequenceDirection ( "FORWARD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Direction parseSequenceDirection ( String dirString ) { if ( dirString = = null ) { throw new NullPointerException ( "dirString can not be null" ) ; } if ( PARSED_DIRECTIONS . containsKey ( dirString ) ) { return PARSED_DIRECTIONS . get ( dirString ) ; } String firstLetter = dirString . trim ( ) . substring ( 0 , 1 ) ; if ( PARSED_DIRECTIONS . containsKey ( firstLetter ) ) { return PARSED_DIRECTIONS . get ( firstLetter ) ; } throw new IllegalArgumentException ( "unknown dirString : " + dirString ) ; }
void test4 ( ) throws Throwable { Direction direction0 = Direction . FORWARD ; Direction direction1 = direction0 . oppositeOrientation ( ) ; Direction direction2 = direction1 . oppositeOrientation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Direction oppositeOrientation ( ) { if ( this = = FORWARD ) { return REVERSE ; } if ( this = = REVERSE ) { return FORWARD ; } return this ; }
void test0 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . RESIDUE_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( - 5L ) , 1427L , range_CoordinateSystem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { DirectedRange directedRange0 = DirectedRange . parse ( 0L , 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { DirectedRange directedRange0 = DirectedRange . parse ( "DirectedRange [ range = [ - 12 . . - 12 ] / 0B , direction = REVERSE ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test3 ( ) throws Throwable { DirectedRange directedRange0 = DirectedRange . parse ( ( - 12L ) , ( - 12L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test5 ( ) throws Throwable { DirectedRange directedRange0 = DirectedRange . parse ( ( - 12L ) , ( - 12L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test7 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . RESIDUE_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( "c = qmuv * iI , p8 { ^2 - 9W * v" , range_CoordinateSystem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test9 ( ) throws Throwable { DirectedRange directedRange0 = DirectedRange . parse ( 1361L , 1361L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test10 ( ) throws Throwable { Object object0 = new Object ( ) ; DirectedRange directedRange0 = DirectedRange . parse ( "% * ( `3 , 3Nq`8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test11 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . RESIDUE_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( - 5L ) , 1427L , range_CoordinateSystem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test12 ( ) throws Throwable { Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . SPACE_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( - 1L ) , ( - 1L ) , range_CoordinateSystem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { int int0 = TwoBitEncodedNucleotideCodec . getNumberOfEncodedBytesFor ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfEncodedBytesFor ( int totalLength , int numberOfSentinelValues ) { int encodedBasesSize = computeHeaderlessEncodedSize ( totalLength ) ; ValueSizeStrategy numBasesSizeStrategy = ValueSizeStrategy . getStrategyFor ( totalLength ) ; ValueSizeStrategy sentinelSizeStrategy = numberOfSentinelValues = = 0 ? ValueSizeStrategy . NONE : ValueSizeStrategy . getStrategyFor ( numberOfSentinelValues ) ; return computeEncodedBufferSize ( encodedBasesSize , numBasesSizeStrategy , numberOfSentinelValues , sentinelSizeStrategy ) ; }
void test1 ( ) throws Throwable { int int0 = TwoBitEncodedNucleotideCodec . getNumberOfEncodedBytesFor ( 0 , 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfEncodedBytesFor ( int totalLength , int numberOfSentinelValues ) { int encodedBasesSize = computeHeaderlessEncodedSize ( totalLength ) ; ValueSizeStrategy numBasesSizeStrategy = ValueSizeStrategy . getStrategyFor ( totalLength ) ; ValueSizeStrategy sentinelSizeStrategy = numberOfSentinelValues = = 0 ? ValueSizeStrategy . NONE : ValueSizeStrategy . getStrategyFor ( numberOfSentinelValues ) ; return computeEncodedBufferSize ( encodedBasesSize , numBasesSizeStrategy , numberOfSentinelValues , sentinelSizeStrategy ) ; }
void test0 ( ) throws Throwable { NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder0 . build ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , nucleotideSequenceBuilder0 , 0 ) ; NucleotideSequence nucleotideSequence1 = defaultReferenceEncodedNucleotideSequence0 . getReferenceSequence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NucleotideSequence getReferenceSequence ( ) { return reference ; }
void test1 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Keto ; NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( nucleotide0 ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder0 . build ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , nucleotideSequenceBuilder0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test2 ( ) throws Throwable { NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( "Y" ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder0 . build ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , "Y" , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUngappedLength ( ) { return getLength ( ) - getNumberOfGaps ( ) ; }
void test3 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Keto ; NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( nucleotide0 ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder0 . build ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , nucleotideSequenceBuilder0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return wrappedDeque . isEmpty ( ) ; }
void test4 ( ) throws Throwable { NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( ) ; Nucleotide nucleotide0 = Nucleotide . Cytosine ; nucleotideSequenceBuilder0 . append ( nucleotide0 ) ; NucleotideSequenceBuilder nucleotideSequenceBuilder1 = ( NucleotideSequenceBuilder ) nucleotideSequenceBuilder0 . prepend ( ( Iterable ) nucleotideSequenceBuilder0 ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder1 . build ( ) ; nucleotideSequenceBuilder0 . complement ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , nucleotideSequenceBuilder0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test5 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Gap ; NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( nucleotide0 ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder0 . build ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , nucleotideSequenceBuilder0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return wrappedDeque . isEmpty ( ) ; }
void test9 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Cytosine ; NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( nucleotide0 ) ; nucleotideSequenceBuilder0 . append ( nucleotide0 ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder0 . build ( ) ; nucleotideSequenceBuilder0 . complement ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , nucleotideSequenceBuilder0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test11 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Cytosine ; NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( nucleotide0 ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder0 . build ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , nucleotideSequenceBuilder0 , 0 ) ; Nucleotide nucleotide1 = ( Nucleotide ) defaultReferenceEncodedNucleotideSequence0 . get ( ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGap ( int gappedOffset ) ; / * * * Get the number of { @link Nucleotide }
void test13 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Cytosine ; NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( nucleotide0 ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder0 . build ( ) ; nucleotideSequenceBuilder0 . complement ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , nucleotideSequenceBuilder0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T get ( long index ) { return codec . decode ( data , index ) ; }
void test14 ( ) throws Throwable { NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( ) ; Nucleotide nucleotide0 = Nucleotide . Strong ; nucleotideSequenceBuilder0 . append ( nucleotide0 ) ; Nucleotide nucleotide1 = Nucleotide . Thymine ; nucleotideSequenceBuilder0 . append ( nucleotide1 ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder0 . build ( ) ; nucleotideSequenceBuilder0 . complement ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , nucleotideSequenceBuilder0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test15 ( ) throws Throwable { NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( "Y" ) ; nucleotideSequenceBuilder0 . complement ( ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder0 . build ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , "Y" , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test16 ( ) throws Throwable { NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( ) ; Nucleotide nucleotide0 = Nucleotide . Cytosine ; nucleotideSequenceBuilder0 . append ( nucleotide0 ) ; NucleotideSequenceBuilder nucleotideSequenceBuilder1 = ( NucleotideSequenceBuilder ) nucleotideSequenceBuilder0 . prepend ( ( Iterable ) nucleotideSequenceBuilder0 ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder1 . build ( ) ; nucleotideSequenceBuilder0 . complement ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , nucleotideSequenceBuilder0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUngappedLength ( ) { return getLength ( ) - getNumberOfGaps ( ) ; }
void test17 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Gap ; NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( nucleotide0 ) ; nucleotideSequenceBuilder0 . append ( nucleotide0 ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder0 . build ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , "" , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGap ( int gappedOffset ) ; / * * * Get the number of { @link Nucleotide }
void test18 ( ) throws Throwable { NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder0 . build ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , nucleotideSequenceBuilder0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUngappedLength ( ) { return getLength ( ) - getNumberOfGaps ( ) ; }
void test19 ( ) throws Throwable { NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( "" ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder0 . build ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , nucleotideSequenceBuilder0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test20 ( ) throws Throwable { NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( "Y" ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder0 . build ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , "Y" , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test21 ( ) throws Throwable { NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( ) ; Nucleotide nucleotide0 = Nucleotide . Strong ; nucleotideSequenceBuilder0 . append ( nucleotide0 ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder0 . build ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , nucleotideSequenceBuilder0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUngappedLength ( ) { return getLength ( ) - getNumberOfGaps ( ) ; }
void test22 ( ) throws Throwable { NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder ( "Y" ) ; nucleotideSequenceBuilder0 . complement ( ) ; NucleotideSequence nucleotideSequence0 = ( NucleotideSequence ) nucleotideSequenceBuilder0 . build ( ) ; DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence ( nucleotideSequence0 , "Y" , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 7 ] ; int int0 = aCGTNNucloetideCodec0 . getGappedOffsetFor ( byteArray0 , 826 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGappedOffsetFor ( int ungappedOffset ) { checkPositiveOffset ( ungappedOffset ) ; long length = getLength ( ) ; int gappedOffset = ungappedOffset + computeNumberOfInclusiveGapsInUngappedValidRangeUntil ( ungappedOffset ) ; if ( gappedOffset > length - 1 ) { throw new IndexOutOfBoundsException ( "ungapped offset " + ungappedOffset + " extends beyond sequence length " + length ) ; } return gappedOffset ; }
void test1 ( ) throws Throwable { ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 7 ] ; boolean boolean0 = aCGTNNucloetideCodec0 . isGap ( byteArray0 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGap ( int gappedOffset ) ; / * * * Get the number of { @link Nucleotide }
void test2 ( ) throws Throwable { ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 2 ] ; int int0 = aCGTNNucloetideCodec0 . getUngappedOffsetFor ( byteArray0 , ( int ) ( byte ) 122 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUngappedOffsetFor ( int gappedOffset ) { checkPositiveOffset ( gappedOffset ) ; long length = getLength ( ) ; if ( gappedOffset > length - 1 ) { throw new IndexOutOfBoundsException ( "gapped offset " + gappedOffset + " extends beyond sequence length " + length ) ; } return gappedOffset - getNumberOfGapsUntil ( gappedOffset ) ; }
void test3 ( ) throws Throwable { ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 9 ] ; int int0 = aCGTNNucloetideCodec0 . getNumberOfGapsUntil ( byteArray0 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfGapsUntil ( int gappedValidRangeIndex ) { int numberOfGaps = 0 ; for ( Integer gapIndex : getGapOffsets ( ) ) { if ( gapIndex . intValue ( ) < = gappedValidRangeIndex ) { numberOfGaps + + ; } } return numberOfGaps ; }
void test4 ( ) throws Throwable { ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 2 ] ; long long0 = aCGTNNucloetideCodec0 . getUngappedLength ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUngappedLength ( ) { return getLength ( ) - getNumberOfGaps ( ) ; }
void test5 ( ) throws Throwable { ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 2 ] ; int int0 = aCGTNNucloetideCodec0 . getNumberOfGaps ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfGaps ( ) ; / * * * Is the { @link Nucleotide }
void test6 ( ) throws Throwable { ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 2 ] ; List < Integer > list0 = aCGTNNucloetideCodec0 . getGapOffsets ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return wrappedDeque . isEmpty ( ) ; }
void test0 ( ) throws Throwable { DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec . INSTANCE ; Nucleotide nucleotide0 = Nucleotide . Pyrimidine ; Set < Nucleotide > set0 = nucleotide0 . getBasesFor ( ) ; byte [ ] byteArray0 = defaultNucleotideCodec0 . encode ( ( Collection < Nucleotide > ) set0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec . INSTANCE ; Nucleotide nucleotide0 = Nucleotide . Pyrimidine ; Set < Nucleotide > set0 = nucleotide0 . getBasesFor ( ) ; byte [ ] byteArray0 = defaultNucleotideCodec0 . encode ( ( Collection < Nucleotide > ) set0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUngappedOffsetFor ( int gappedOffset ) { checkPositiveOffset ( gappedOffset ) ; long length = getLength ( ) ; if ( gappedOffset > length - 1 ) { throw new IndexOutOfBoundsException ( "gapped offset " + gappedOffset + " extends beyond sequence length " + length ) ; } return gappedOffset - getNumberOfGapsUntil ( gappedOffset ) ; }
void test3 ( ) throws Throwable { DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec . INSTANCE ; Nucleotide nucleotide0 = Nucleotide . Strong ; byte [ ] byteArray0 = defaultNucleotideCodec0 . encode ( nucleotide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUngappedLength ( ) { return getLength ( ) - getNumberOfGaps ( ) ; }
void test4 ( ) throws Throwable { DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 10 ] ; boolean boolean0 = defaultNucleotideCodec0 . isGap ( byteArray0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGap ( int gappedOffset ) ; / * * * Get the number of { @link Nucleotide }
void test5 ( ) throws Throwable { DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec . INSTANCE ; LinkedList < Nucleotide > linkedList0 = new LinkedList < Nucleotide > ( ) ; Iterator < Nucleotide > iterator0 = linkedList0 . descendingIterator ( ) ; byte [ ] byteArray0 = defaultNucleotideCodec0 . encode ( 0 , iterator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encode ( Collection < T > glyphs ) ; / * * * Get a single Gyph from the encoded * byte array at the given index . * @param encodedGlyphs the byte array of * encoded glyphs . * @param index the index of the glyph * to get . * @return the decoded glyph * at the given index . * @throws IndexOutOfBoundsException if index is out of bounds * of the index . * / T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test7 ( ) throws Throwable { DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 4 ] ; Nucleotide nucleotide0 = ( Nucleotide ) defaultNucleotideCodec0 . decode ( byteArray0 , 9223372036854775807L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test8 ( ) throws Throwable { DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 17 ] ; Nucleotide nucleotide0 = ( Nucleotide ) defaultNucleotideCodec0 . decode ( byteArray0 , ( long ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test11 ( ) throws Throwable { DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 9 ] ; byteArray0 [ 0 ] = ( byte ) 36 ; Iterator < Nucleotide > iterator0 = defaultNucleotideCodec0 . iterator ( byteArray0 ) ; byte [ ] byteArray1 = defaultNucleotideCodec0 . encode ( 9 , iterator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test12 ( ) throws Throwable { DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 5 ] ; byteArray0 [ 3 ] = ( byte ) 1 ; int int0 = defaultNucleotideCodec0 . getNumberOfGapsUntil ( byteArray0 , ( - 1175 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfGapsUntil ( int gappedValidRangeIndex ) { int numberOfGaps = 0 ; for ( Integer gapIndex : getGapOffsets ( ) ) { if ( gapIndex . intValue ( ) < = gappedValidRangeIndex ) { numberOfGaps + + ; } } return numberOfGaps ; }
void test14 ( ) throws Throwable { DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 10 ] ; int int0 = defaultNucleotideCodec0 . getGappedOffsetFor ( byteArray0 , ( int ) ( byte ) ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGappedOffsetFor ( int ungappedOffset ) { checkPositiveOffset ( ungappedOffset ) ; long length = getLength ( ) ; int gappedOffset = ungappedOffset + computeNumberOfInclusiveGapsInUngappedValidRangeUntil ( ungappedOffset ) ; if ( gappedOffset > length - 1 ) { throw new IndexOutOfBoundsException ( "ungapped offset " + ungappedOffset + " extends beyond sequence length " + length ) ; } return gappedOffset ; }
void test15 ( ) throws Throwable { DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec . INSTANCE ; Nucleotide nucleotide0 = Nucleotide . Strong ; byte [ ] byteArray0 = defaultNucleotideCodec0 . encode ( nucleotide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGappedOffsetFor ( int ungappedOffset ) { checkPositiveOffset ( ungappedOffset ) ; long length = getLength ( ) ; int gappedOffset = ungappedOffset + computeNumberOfInclusiveGapsInUngappedValidRangeUntil ( ungappedOffset ) ; if ( gappedOffset > length - 1 ) { throw new IndexOutOfBoundsException ( "ungapped offset " + ungappedOffset + " extends beyond sequence length " + length ) ; } return gappedOffset ; }
void test17 ( ) throws Throwable { DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 5 ] ; byteArray0 [ 3 ] = ( byte ) 1 ; int int0 = defaultNucleotideCodec0 . getUngappedOffsetFor ( byteArray0 , ( int ) ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUngappedOffsetFor ( int gappedOffset ) { checkPositiveOffset ( gappedOffset ) ; long length = getLength ( ) ; if ( gappedOffset > length - 1 ) { throw new IndexOutOfBoundsException ( "gapped offset " + gappedOffset + " extends beyond sequence length " + length ) ; } return gappedOffset - getNumberOfGapsUntil ( gappedOffset ) ; }
void test18 ( ) throws Throwable { DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 6 ] ; String string0 = defaultNucleotideCodec0 . toString ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test20 ( ) throws Throwable { DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec . INSTANCE ; Nucleotide nucleotide0 = Nucleotide . Strong ; byte [ ] byteArray0 = defaultNucleotideCodec0 . encode ( nucleotide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Adenine ; byte byte0 = nucleotide0 . getOrdinalAsByte ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getOrdinalAsByte ( ) ; / * * * Return the single Character equivalent of this * { @link Residue }
void test1 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Cytosine ; String string0 = nucleotide0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test2 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( "Weak" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test3 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( "xr" ) ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Range > complement ( Range other ) { / / this - other / / anything in this that doesn't intersect with other Range intersection = intersection ( other ) ; if ( intersection . isEmpty ( ) ) { return Arrays . asList ( this ) ; } List < Range > complementedRanges = new ArrayList < Range > ( ) ; if ( intersection . getBegin ( ) ! = Long . MIN_VALUE ) { Range beforeOther = Range . of ( getBegin ( ) , intersection . getBegin ( ) - 1 ) ; if ( ! beforeOther . isEmpty ( ) ) { complementedRanges . add ( beforeOther ) ; } } if ( intersection . getEnd ( ) ! = Long . MAX_VALUE ) { Range afterOther = Range . of ( intersection . getEnd ( ) + 1 , getEnd ( ) ) ; if ( ! afterOther . isEmpty ( ) ) { complementedRanges . add ( afterOther ) ; } } return Ranges . merge ( complementedRanges ) ; }
void test4 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Adenine ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; Character character0 = nucleotide1 . getCharacter ( ) ; Nucleotide nucleotide2 = Nucleotide . parse ( ( char ) character0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test5 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . NotThymine ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Range > complement ( Range other ) { / / this - other / / anything in this that doesn't intersect with other Range intersection = intersection ( other ) ; if ( intersection . isEmpty ( ) ) { return Arrays . asList ( this ) ; } List < Range > complementedRanges = new ArrayList < Range > ( ) ; if ( intersection . getBegin ( ) ! = Long . MIN_VALUE ) { Range beforeOther = Range . of ( getBegin ( ) , intersection . getBegin ( ) - 1 ) ; if ( ! beforeOther . isEmpty ( ) ) { complementedRanges . add ( beforeOther ) ; } } if ( intersection . getEnd ( ) ! = Long . MAX_VALUE ) { Range afterOther = Range . of ( intersection . getEnd ( ) + 1 , getEnd ( ) ) ; if ( ! afterOther . isEmpty ( ) ) { complementedRanges . add ( afterOther ) ; } } return Ranges . merge ( complementedRanges ) ; }
void test6 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 'H' ) ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Range > complement ( Range other ) { / / this - other / / anything in this that doesn't intersect with other Range intersection = intersection ( other ) ; if ( intersection . isEmpty ( ) ) { return Arrays . asList ( this ) ; } List < Range > complementedRanges = new ArrayList < Range > ( ) ; if ( intersection . getBegin ( ) ! = Long . MIN_VALUE ) { Range beforeOther = Range . of ( getBegin ( ) , intersection . getBegin ( ) - 1 ) ; if ( ! beforeOther . isEmpty ( ) ) { complementedRanges . add ( beforeOther ) ; } } if ( intersection . getEnd ( ) ! = Long . MAX_VALUE ) { Range afterOther = Range . of ( intersection . getEnd ( ) + 1 , getEnd ( ) ) ; if ( ! afterOther . isEmpty ( ) ) { complementedRanges . add ( afterOther ) ; } } return Ranges . merge ( complementedRanges ) ; }
void test7 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . NotCytosine ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Range > complement ( Range other ) { / / this - other / / anything in this that doesn't intersect with other Range intersection = intersection ( other ) ; if ( intersection . isEmpty ( ) ) { return Arrays . asList ( this ) ; } List < Range > complementedRanges = new ArrayList < Range > ( ) ; if ( intersection . getBegin ( ) ! = Long . MIN_VALUE ) { Range beforeOther = Range . of ( getBegin ( ) , intersection . getBegin ( ) - 1 ) ; if ( ! beforeOther . isEmpty ( ) ) { complementedRanges . add ( beforeOther ) ; } } if ( intersection . getEnd ( ) ! = Long . MAX_VALUE ) { Range afterOther = Range . of ( intersection . getEnd ( ) + 1 , getEnd ( ) ) ; if ( ! afterOther . isEmpty ( ) ) { complementedRanges . add ( afterOther ) ; } } return Ranges . merge ( complementedRanges ) ; }
void test8 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 'B' ) ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Range > complement ( Range other ) { / / this - other / / anything in this that doesn't intersect with other Range intersection = intersection ( other ) ; if ( intersection . isEmpty ( ) ) { return Arrays . asList ( this ) ; } List < Range > complementedRanges = new ArrayList < Range > ( ) ; if ( intersection . getBegin ( ) ! = Long . MIN_VALUE ) { Range beforeOther = Range . of ( getBegin ( ) , intersection . getBegin ( ) - 1 ) ; if ( ! beforeOther . isEmpty ( ) ) { complementedRanges . add ( beforeOther ) ; } } if ( intersection . getEnd ( ) ! = Long . MAX_VALUE ) { Range afterOther = Range . of ( intersection . getEnd ( ) + 1 , getEnd ( ) ) ; if ( ! afterOther . isEmpty ( ) ) { complementedRanges . add ( afterOther ) ; } } return Ranges . merge ( complementedRanges ) ; }
void test9 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Weak ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Range > complement ( Range other ) { / / this - other / / anything in this that doesn't intersect with other Range intersection = intersection ( other ) ; if ( intersection . isEmpty ( ) ) { return Arrays . asList ( this ) ; } List < Range > complementedRanges = new ArrayList < Range > ( ) ; if ( intersection . getBegin ( ) ! = Long . MIN_VALUE ) { Range beforeOther = Range . of ( getBegin ( ) , intersection . getBegin ( ) - 1 ) ; if ( ! beforeOther . isEmpty ( ) ) { complementedRanges . add ( beforeOther ) ; } } if ( intersection . getEnd ( ) ! = Long . MAX_VALUE ) { Range afterOther = Range . of ( intersection . getEnd ( ) + 1 , getEnd ( ) ) ; if ( ! afterOther . isEmpty ( ) ) { complementedRanges . add ( afterOther ) ; } } return Ranges . merge ( complementedRanges ) ; }
void test10 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Amino ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Range > complement ( Range other ) { / / this - other / / anything in this that doesn't intersect with other Range intersection = intersection ( other ) ; if ( intersection . isEmpty ( ) ) { return Arrays . asList ( this ) ; } List < Range > complementedRanges = new ArrayList < Range > ( ) ; if ( intersection . getBegin ( ) ! = Long . MIN_VALUE ) { Range beforeOther = Range . of ( getBegin ( ) , intersection . getBegin ( ) - 1 ) ; if ( ! beforeOther . isEmpty ( ) ) { complementedRanges . add ( beforeOther ) ; } } if ( intersection . getEnd ( ) ! = Long . MAX_VALUE ) { Range afterOther = Range . of ( intersection . getEnd ( ) + 1 , getEnd ( ) ) ; if ( ! afterOther . isEmpty ( ) ) { complementedRanges . add ( afterOther ) ; } } return Ranges . merge ( complementedRanges ) ; }
void test11 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Purine ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Range > complement ( Range other ) { / / this - other / / anything in this that doesn't intersect with other Range intersection = intersection ( other ) ; if ( intersection . isEmpty ( ) ) { return Arrays . asList ( this ) ; } List < Range > complementedRanges = new ArrayList < Range > ( ) ; if ( intersection . getBegin ( ) ! = Long . MIN_VALUE ) { Range beforeOther = Range . of ( getBegin ( ) , intersection . getBegin ( ) - 1 ) ; if ( ! beforeOther . isEmpty ( ) ) { complementedRanges . add ( beforeOther ) ; } } if ( intersection . getEnd ( ) ! = Long . MAX_VALUE ) { Range afterOther = Range . of ( intersection . getEnd ( ) + 1 , getEnd ( ) ) ; if ( ! afterOther . isEmpty ( ) ) { complementedRanges . add ( afterOther ) ; } } return Ranges . merge ( complementedRanges ) ; }
void test12 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Strong ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Range > complement ( Range other ) { / / this - other / / anything in this that doesn't intersect with other Range intersection = intersection ( other ) ; if ( intersection . isEmpty ( ) ) { return Arrays . asList ( this ) ; } List < Range > complementedRanges = new ArrayList < Range > ( ) ; if ( intersection . getBegin ( ) ! = Long . MIN_VALUE ) { Range beforeOther = Range . of ( getBegin ( ) , intersection . getBegin ( ) - 1 ) ; if ( ! beforeOther . isEmpty ( ) ) { complementedRanges . add ( beforeOther ) ; } } if ( intersection . getEnd ( ) ! = Long . MAX_VALUE ) { Range afterOther = Range . of ( intersection . getEnd ( ) + 1 , getEnd ( ) ) ; if ( ! afterOther . isEmpty ( ) ) { complementedRanges . add ( afterOther ) ; } } return Ranges . merge ( complementedRanges ) ; }
void test13 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Pyrimidine ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Range > complement ( Range other ) { / / this - other / / anything in this that doesn't intersect with other Range intersection = intersection ( other ) ; if ( intersection . isEmpty ( ) ) { return Arrays . asList ( this ) ; } List < Range > complementedRanges = new ArrayList < Range > ( ) ; if ( intersection . getBegin ( ) ! = Long . MIN_VALUE ) { Range beforeOther = Range . of ( getBegin ( ) , intersection . getBegin ( ) - 1 ) ; if ( ! beforeOther . isEmpty ( ) ) { complementedRanges . add ( beforeOther ) ; } } if ( intersection . getEnd ( ) ! = Long . MAX_VALUE ) { Range afterOther = Range . of ( intersection . getEnd ( ) + 1 , getEnd ( ) ) ; if ( ! afterOther . isEmpty ( ) ) { complementedRanges . add ( afterOther ) ; } } return Ranges . merge ( complementedRanges ) ; }
void test14 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Keto ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Range > complement ( Range other ) { / / this - other / / anything in this that doesn't intersect with other Range intersection = intersection ( other ) ; if ( intersection . isEmpty ( ) ) { return Arrays . asList ( this ) ; } List < Range > complementedRanges = new ArrayList < Range > ( ) ; if ( intersection . getBegin ( ) ! = Long . MIN_VALUE ) { Range beforeOther = Range . of ( getBegin ( ) , intersection . getBegin ( ) - 1 ) ; if ( ! beforeOther . isEmpty ( ) ) { complementedRanges . add ( beforeOther ) ; } } if ( intersection . getEnd ( ) ! = Long . MAX_VALUE ) { Range afterOther = Range . of ( intersection . getEnd ( ) + 1 , getEnd ( ) ) ; if ( ! afterOther . isEmpty ( ) ) { complementedRanges . add ( afterOther ) ; } } return Ranges . merge ( complementedRanges ) ; }
void test15 ( ) throws Throwable { LinkedList < Nucleotide > linkedList0 = new LinkedList < Nucleotide > ( ) ; Nucleotide nucleotide0 = Nucleotide . getAmbiguityFor ( ( Collection < Nucleotide > ) linkedList0 ) ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Range > complement ( Range other ) { / / this - other / / anything in this that doesn't intersect with other Range intersection = intersection ( other ) ; if ( intersection . isEmpty ( ) ) { return Arrays . asList ( this ) ; } List < Range > complementedRanges = new ArrayList < Range > ( ) ; if ( intersection . getBegin ( ) ! = Long . MIN_VALUE ) { Range beforeOther = Range . of ( getBegin ( ) , intersection . getBegin ( ) - 1 ) ; if ( ! beforeOther . isEmpty ( ) ) { complementedRanges . add ( beforeOther ) ; } } if ( intersection . getEnd ( ) ! = Long . MAX_VALUE ) { Range afterOther = Range . of ( intersection . getEnd ( ) + 1 , getEnd ( ) ) ; if ( ! afterOther . isEmpty ( ) ) { complementedRanges . add ( afterOther ) ; } } return Ranges . merge ( complementedRanges ) ; }
void test16 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Cytosine ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; boolean boolean0 = nucleotide1 . isAmbiguity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGap ( int gappedOffset ) ; / * * * Get the number of { @link Nucleotide }
void test17 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Guanine ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Range > complement ( Range other ) { / / this - other / / anything in this that doesn't intersect with other Range intersection = intersection ( other ) ; if ( intersection . isEmpty ( ) ) { return Arrays . asList ( this ) ; } List < Range > complementedRanges = new ArrayList < Range > ( ) ; if ( intersection . getBegin ( ) ! = Long . MIN_VALUE ) { Range beforeOther = Range . of ( getBegin ( ) , intersection . getBegin ( ) - 1 ) ; if ( ! beforeOther . isEmpty ( ) ) { complementedRanges . add ( beforeOther ) ; } } if ( intersection . getEnd ( ) ! = Long . MAX_VALUE ) { Range afterOther = Range . of ( intersection . getEnd ( ) + 1 , getEnd ( ) ) ; if ( ! afterOther . isEmpty ( ) ) { complementedRanges . add ( afterOther ) ; } } return Ranges . merge ( complementedRanges ) ; }
void test18 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Thymine ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; boolean boolean0 = nucleotide1 . isAmbiguity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGap ( int gappedOffset ) ; / * * * Get the number of { @link Nucleotide }
void test21 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( ' - ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test38 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( "Arg" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test39 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( "Cytosine" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test40 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 'D' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test43 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( "Glycine" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test46 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 'K' ) ; boolean boolean0 = nucleotide0 . isAmbiguity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAmbiguity ( ) { return ! isGap ( ) & & this ! = Adenine & & this ! = Cytosine & & this ! = Guanine & & this ! = Thymine ; }
void test48 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 'M' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test49 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( "NotAdenine" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test53 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 'R' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test54 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( "Strong" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test56 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 'V' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test57 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( "XmaT`bp" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test58 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( "Y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test63 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 'a' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test64 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 'b' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test65 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( "cAOC + s19d + xZIs \"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test67 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 'g' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test68 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 'h' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test70 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 'k' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test72 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 'm' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test73 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( "n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test77 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 'r' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test78 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 's' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test79 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 't' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test81 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( "v } WlrZN * 0kqO ( ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test82 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . parse ( 'w' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test84 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Gap ; boolean boolean0 = nucleotide0 . isAmbiguity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAmbiguity ( ) { return ! isGap ( ) & & this ! = Adenine & & this ! = Cytosine & & this ! = Guanine & & this ! = Thymine ; }
void test85 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Cytosine ; boolean boolean0 = nucleotide0 . isAmbiguity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGap ( int gappedOffset ) ; / * * * Get the number of { @link Nucleotide }
void test86 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Thymine ; boolean boolean0 = nucleotide0 . isAmbiguity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGap ( int gappedOffset ) ; / * * * Get the number of { @link Nucleotide }
void test87 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . NotThymine ; Set < Nucleotide > set0 = nucleotide0 . getAllPossibleAmbiguities ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test88 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Adenine ; Set < Nucleotide > set0 = nucleotide0 . getAllPossibleAmbiguities ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return wrappedDeque . isEmpty ( ) ; }
void test90 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Keto ; Set < Nucleotide > set0 = nucleotide0 . getBasesFor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Nucleotide getAmbiguityFor ( Collection < Nucleotide > unambiguiousBases ) { if ( unambiguiousBases = = null ) { throw new NullPointerException ( "unambiguousBases can not be null" ) ; } for ( Entry < Nucleotide , Set < Nucleotide > > entry : AMBIGUITY_TO_CONSTIUENT . entrySet ( ) ) { if ( unambiguiousBases . containsAll ( entry . getValue ( ) ) ) { return entry . getKey ( ) ; } } return Gap ; }
void test91 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Gap ; Set < Nucleotide > set0 = nucleotide0 . getBasesFor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test92 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Adenine ; boolean boolean0 = nucleotide0 . matches ( nucleotide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( Nucleotide other ) { if ( other = = null ) { throw new NullPointerException ( "other can not be null" ) ; } if ( this = = other ) { return true ; } Set < Nucleotide > basesForOther = other . getBasesFor ( ) ; Set < Nucleotide > basesForThis = getBasesFor ( ) ; return basesForThis . containsAll ( basesForOther ) | | basesForOther . containsAll ( basesForThis ) ; }
void test93 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Adenine ; Nucleotide nucleotide1 = nucleotide0 . complement ( ) ; boolean boolean0 = nucleotide0 . matches ( nucleotide1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( Nucleotide other ) { if ( other = = null ) { throw new NullPointerException ( "other can not be null" ) ; } if ( this = = other ) { return true ; } Set < Nucleotide > basesForOther = other . getBasesFor ( ) ; Set < Nucleotide > basesForThis = getBasesFor ( ) ; return basesForThis . containsAll ( basesForOther ) | | basesForOther . containsAll ( basesForThis ) ; }
void test94 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Weak ; Nucleotide nucleotide1 = Nucleotide . Thymine ; boolean boolean0 = nucleotide0 . matches ( nucleotide1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( Nucleotide other ) { if ( other = = null ) { throw new NullPointerException ( "other can not be null" ) ; } if ( this = = other ) { return true ; } Set < Nucleotide > basesForOther = other . getBasesFor ( ) ; Set < Nucleotide > basesForThis = getBasesFor ( ) ; return basesForThis . containsAll ( basesForOther ) | | basesForOther . containsAll ( basesForThis ) ; }
void test95 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Weak ; Nucleotide nucleotide1 = Nucleotide . Unknown ; boolean boolean0 = nucleotide0 . matches ( nucleotide1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( Nucleotide other ) { if ( other = = null ) { throw new NullPointerException ( "other can not be null" ) ; } if ( this = = other ) { return true ; } Set < Nucleotide > basesForOther = other . getBasesFor ( ) ; Set < Nucleotide > basesForThis = getBasesFor ( ) ; return basesForThis . containsAll ( basesForOther ) | | basesForOther . containsAll ( basesForThis ) ; }
void test1 ( ) throws Throwable { TreeSet < Nucleotide > treeSet0 = new TreeSet < Nucleotide > ( ) ; Nucleotide nucleotide0 = Nucleotide . Cytosine ; treeSet0 . add ( nucleotide0 ) ; boolean boolean0 = NoAmbiguitiesEncodedNucleotideCodec . canEncode ( ( Iterable < Nucleotide > ) treeSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canEncode ( Iterable < Nucleotide > nucleotides ) { for ( Nucleotide n : nucleotides ) { if ( n . isAmbiguity ( ) ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { TreeSet < Nucleotide > treeSet0 = new TreeSet < Nucleotide > ( ) ; Nucleotide nucleotide0 = Nucleotide . NotAdenine ; treeSet0 . add ( nucleotide0 ) ; PriorityQueue < Nucleotide > priorityQueue0 = new PriorityQueue < Nucleotide > ( ( SortedSet < ? extends Nucleotide > ) treeSet0 ) ; boolean boolean0 = NoAmbiguitiesEncodedNucleotideCodec . canEncode ( ( Iterable < Nucleotide > ) priorityQueue0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canEncode ( Iterable < Nucleotide > nucleotides ) { for ( Nucleotide n : nucleotides ) { if ( n . isAmbiguity ( ) ) { return false ; } } return true ; }
void test3 ( ) throws Throwable { NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 0 ] = ( byte ) 1 ; byteArray0 [ 2 ] = ( byte ) 1 ; int int0 = noAmbiguitiesEncodedNucleotideCodec0 . getNumberOfGaps ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfGaps ( ) ; / * * * Is the { @link Nucleotide }
void test4 ( ) throws Throwable { NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 0 ] = ( byte ) 1 ; int int0 = noAmbiguitiesEncodedNucleotideCodec0 . getNumberOfGaps ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfGaps ( ) ; / * * * Is the { @link Nucleotide }
void test5 ( ) throws Throwable { NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 0 ] = ( byte ) 1 ; byteArray0 [ 2 ] = ( byte ) 1 ; long long0 = noAmbiguitiesEncodedNucleotideCodec0 . getUngappedLength ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUngappedLength ( ) { return getLength ( ) - getNumberOfGaps ( ) ; }
void test6 ( ) throws Throwable { NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 0 ] = ( byte ) 1 ; long long0 = noAmbiguitiesEncodedNucleotideCodec0 . getUngappedLength ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUngappedLength ( ) { return getLength ( ) - getNumberOfGaps ( ) ; }
void test7 ( ) throws Throwable { NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 0 ] = ( byte ) 1 ; byteArray0 [ 2 ] = ( byte ) 1 ; byteArray0 [ 3 ] = ( byte ) 1 ; int int0 = noAmbiguitiesEncodedNucleotideCodec0 . getUngappedOffsetFor ( byteArray0 , ( - 64 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUngappedOffsetFor ( int gappedOffset ) { checkPositiveOffset ( gappedOffset ) ; long length = getLength ( ) ; if ( gappedOffset > length - 1 ) { throw new IndexOutOfBoundsException ( "gapped offset " + gappedOffset + " extends beyond sequence length " + length ) ; } return gappedOffset - getNumberOfGapsUntil ( gappedOffset ) ; }
void test8 ( ) throws Throwable { NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 0 ] = ( byte ) 1 ; byteArray0 [ 2 ] = ( byte ) 1 ; byteArray0 [ 3 ] = ( byte ) 1 ; int int0 = noAmbiguitiesEncodedNucleotideCodec0 . getNumberOfGapsUntil ( byteArray0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfGapsUntil ( int gappedValidRangeIndex ) { int numberOfGaps = 0 ; for ( Integer gapIndex : getGapOffsets ( ) ) { if ( gapIndex . intValue ( ) < = gappedValidRangeIndex ) { numberOfGaps + + ; } } return numberOfGaps ; }
void test9 ( ) throws Throwable { NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 0 ] = ( byte ) 1 ; byteArray0 [ 2 ] = ( byte ) 1 ; byteArray0 [ 3 ] = ( byte ) 1 ; int int0 = noAmbiguitiesEncodedNucleotideCodec0 . getGappedOffsetFor ( byteArray0 , ( - 1224 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGappedOffsetFor ( int ungappedOffset ) { checkPositiveOffset ( ungappedOffset ) ; long length = getLength ( ) ; int gappedOffset = ungappedOffset + computeNumberOfInclusiveGapsInUngappedValidRangeUntil ( ungappedOffset ) ; if ( gappedOffset > length - 1 ) { throw new IndexOutOfBoundsException ( "ungapped offset " + ungappedOffset + " extends beyond sequence length " + length ) ; } return gappedOffset ; }
void test10 ( ) throws Throwable { NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 0 ] = ( byte ) 1 ; byteArray0 [ 2 ] = ( byte ) 1 ; byteArray0 [ 3 ] = ( byte ) 1 ; int int0 = noAmbiguitiesEncodedNucleotideCodec0 . getGappedOffsetFor ( byteArray0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGappedOffsetFor ( int ungappedOffset ) { checkPositiveOffset ( ungappedOffset ) ; long length = getLength ( ) ; int gappedOffset = ungappedOffset + computeNumberOfInclusiveGapsInUngappedValidRangeUntil ( ungappedOffset ) ; if ( gappedOffset > length - 1 ) { throw new IndexOutOfBoundsException ( "ungapped offset " + ungappedOffset + " extends beyond sequence length " + length ) ; } return gappedOffset ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence ( ( NucleotideCodec ) null , byteArray0 ) ; Nucleotide nucleotide0 = Nucleotide . Adenine ; boolean boolean0 = defaultNucleotideSequence0 . equals ( ( Object ) nucleotide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { AminoAcid aminoAcid0 = AminoAcid . Lysine ; String string0 = aminoAcid0 . get3LetterAbbreviation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get3LetterAbbreviation ( ) { return threeLetterAbbreviation ; }
void test1 ( ) throws Throwable { AminoAcid aminoAcid0 = AminoAcid . Lysine ; String string0 = aminoAcid0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test3 ( ) throws Throwable { AminoAcid aminoAcid0 = AminoAcid . Lysine ; char char0 = aminoAcid0 . asChar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char asChar ( ) { return abbreviation . charValue ( ) ; }
void test4 ( ) throws Throwable { AminoAcid aminoAcid0 = AminoAcid . Lysine ; String string0 = aminoAcid0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test5 ( ) throws Throwable { AminoAcid aminoAcid0 = AminoAcid . Lysine ; byte byte0 = aminoAcid0 . getOrdinalAsByte ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getOrdinalAsByte ( ) ; / * * * Return the single Character equivalent of this * { @link Residue }
void test6 ( ) throws Throwable { AminoAcid aminoAcid0 = AminoAcid . parse ( "Lysine" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( ByteBuffer in , byte guard , ByteBuffer out ) { List < RunLength < Byte > > runLengthList = parseIntoRunLength ( in , guard ) ; write ( runLengthList , out ) ; }
void test7 ( ) throws Throwable { LinkedList < AminoAcid > linkedList0 = new LinkedList < AminoAcid > ( ) ; AminoAcid aminoAcid0 = AminoAcid . Arginine ; linkedList0 . add ( aminoAcid0 ) ; String string0 = AminoAcid . convertToString ( ( List < AminoAcid > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertToString ( List < AminoAcid > glyphs ) { StringBuilder result = new StringBuilder ( ) ; for ( AminoAcid g : glyphs ) { result . append ( g . getCharacter ( ) ) ; } return result . toString ( ) ; }
void test0 ( ) throws Throwable { List < AminoAcid > list0 = AminoAcids . parse ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return wrappedDeque . isEmpty ( ) ; }
void test2 ( ) throws Throwable { HashSet < AminoAcid > hashSet0 = new HashSet < AminoAcid > ( 0 ) ; AminoAcid aminoAcid0 = AminoAcid . Unknown_Amino_Acid ; hashSet0 . add ( aminoAcid0 ) ; String string0 = AminoAcids . asString ( ( Iterable < AminoAcid > ) hashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String asString ( Iterable < AminoAcid > aminoAcidSequence ) { StringBuilder builder = new StringBuilder ( ) ; for ( AminoAcid aa : aminoAcidSequence ) { builder . append ( aa . asChar ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { CompactAminoAcidSequenceCodec compactAminoAcidSequenceCodec0 = CompactAminoAcidSequenceCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 7 ] ; AminoAcid aminoAcid0 = ( AminoAcid ) compactAminoAcidSequenceCodec0 . decode ( byteArray0 , ( long ) ( byte ) 18 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test1 ( ) throws Throwable { CompactAminoAcidSequenceCodec compactAminoAcidSequenceCodec0 = CompactAminoAcidSequenceCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = compactAminoAcidSequenceCodec0 . decodedLengthOf ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test2 ( ) throws Throwable { CompactAminoAcidSequenceCodec compactAminoAcidSequenceCodec0 = CompactAminoAcidSequenceCodec . INSTANCE ; LinkedList < AminoAcid > linkedList0 = new LinkedList < AminoAcid > ( ) ; AminoAcid aminoAcid0 = AminoAcid . Asparagine ; linkedList0 . offer ( aminoAcid0 ) ; byte [ ] byteArray0 = compactAminoAcidSequenceCodec0 . encode ( ( Collection < AminoAcid > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encode ( Collection < T > glyphs ) ; / * * * Get a single Gyph from the encoded * byte array at the given index . * @param encodedGlyphs the byte array of * encoded glyphs . * @param index the index of the glyph * to get . * @return the decoded glyph * at the given index . * @throws IndexOutOfBoundsException if index is out of bounds * of the index . * / T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test0 ( ) throws Throwable { List < Codon > list0 = Codon . getCodonsFor ( "GGC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test1 ( ) throws Throwable { Codon codon0 = Codon . getStartCodon ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test2 ( ) throws Throwable { Map < List < Nucleotide > , Codon > map0 = Codon . getCodonMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return wrappedDeque . isEmpty ( ) ; }
void test5 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Amino ; Codon codon0 = Codon . getCodonFor ( nucleotide0 , nucleotide0 , nucleotide0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Codon getCodonFor ( Nucleotide base1 , Nucleotide base2 , Nucleotide base3 ) { return getCodonFor ( Arrays . asList ( base1 , base2 , base3 ) ) ; }
void test7 ( ) throws Throwable { Codon codon0 = Codon . getStartCodon ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStopCodon ( ) { for ( Codon stopCodon : STOP_CODONS ) { if ( equals ( stopCodon ) ) { return true ; } } return false ; }
void test8 ( ) throws Throwable { Codon codon0 = Codon . getStartCodon ( ) ; AminoAcid aminoAcid0 = codon0 . getAminoAcid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AminoAcid getAminoAcid ( ) { return aminoAcid ; }
void test9 ( ) throws Throwable { List < Codon > list0 = Codon . getStopCodons ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test12 ( ) throws Throwable { Codon codon0 = Codon . getStartCodon ( ) ; List < Nucleotide > list0 = codon0 . getNucleotides ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Codon getCodonByOffset ( String basecalls , int offset ) { String triplet = basecalls . substring ( offset , offset + 3 ) ; return getCodonByOffset ( asList ( new NucleotideSequenceBuilder ( triplet ) ) , 0 ) ; }
void test13 ( ) throws Throwable { Codon codon0 = Codon . getStartCodon ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStopCodon ( ) { for ( Codon stopCodon : STOP_CODONS ) { if ( equals ( stopCodon ) ) { return true ; } } return false ; }
void test14 ( ) throws Throwable { Codon codon0 = Codon . getStartCodon ( ) ; String string0 = codon0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test16 ( ) throws Throwable { Codon . Frame codon_Frame0 = Codon . Frame . parseFrame ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { UngappedAminoAcidSequence ungappedAminoAcidSequence0 = new UngappedAminoAcidSequence ( "" ) ; int int0 = ungappedAminoAcidSequence0 . getGappedOffsetFor ( 431 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGappedOffsetFor ( int ungappedOffset ) { checkPositiveOffset ( ungappedOffset ) ; long length = getLength ( ) ; int gappedOffset = ungappedOffset + computeNumberOfInclusiveGapsInUngappedValidRangeUntil ( ungappedOffset ) ; if ( gappedOffset > length - 1 ) { throw new IndexOutOfBoundsException ( "ungapped offset " + ungappedOffset + " extends beyond sequence length " + length ) ; } return gappedOffset ; }
void test1 ( ) throws Throwable { UngappedAminoAcidSequence ungappedAminoAcidSequence0 = new UngappedAminoAcidSequence ( "" ) ; int int0 = ungappedAminoAcidSequence0 . getNumberOfGapsUntil ( ( - 857 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfGapsUntil ( int gappedValidRangeIndex ) { int numberOfGaps = 0 ; for ( Integer gapIndex : getGapOffsets ( ) ) { if ( gapIndex . intValue ( ) < = gappedValidRangeIndex ) { numberOfGaps + + ; } } return numberOfGaps ; }
void test2 ( ) throws Throwable { LinkedList < AminoAcid > linkedList0 = new LinkedList < AminoAcid > ( ) ; UngappedAminoAcidSequence ungappedAminoAcidSequence0 = new UngappedAminoAcidSequence ( ( Collection < AminoAcid > ) linkedList0 ) ; long long0 = ungappedAminoAcidSequence0 . getUngappedLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUngappedLength ( ) { return getLength ( ) - getNumberOfGaps ( ) ; }
void test3 ( ) throws Throwable { LinkedList < AminoAcid > linkedList0 = new LinkedList < AminoAcid > ( ) ; UngappedAminoAcidSequence ungappedAminoAcidSequence0 = new UngappedAminoAcidSequence ( ( Collection < AminoAcid > ) linkedList0 ) ; boolean boolean0 = ungappedAminoAcidSequence0 . isGap ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGap ( int gappedOffset ) ; / * * * Get the number of { @link Nucleotide }
void test4 ( ) throws Throwable { UngappedAminoAcidSequence ungappedAminoAcidSequence0 = new UngappedAminoAcidSequence ( "" ) ; List < Integer > list0 = ungappedAminoAcidSequence0 . getGapOffsets ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return wrappedDeque . isEmpty ( ) ; }
void test5 ( ) throws Throwable { LinkedList < AminoAcid > linkedList0 = new LinkedList < AminoAcid > ( ) ; UngappedAminoAcidSequence ungappedAminoAcidSequence0 = new UngappedAminoAcidSequence ( ( Collection < AminoAcid > ) linkedList0 ) ; int int0 = ungappedAminoAcidSequence0 . getNumberOfGaps ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfGaps ( ) ; / * * * Is the { @link Nucleotide }
void test6 ( ) throws Throwable { LinkedList < AminoAcid > linkedList0 = new LinkedList < AminoAcid > ( ) ; UngappedAminoAcidSequence ungappedAminoAcidSequence0 = new UngappedAminoAcidSequence ( ( Collection < AminoAcid > ) linkedList0 ) ; int int0 = ungappedAminoAcidSequence0 . getUngappedOffsetFor ( 890 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUngappedOffsetFor ( int gappedOffset ) { checkPositiveOffset ( gappedOffset ) ; long length = getLength ( ) ; if ( gappedOffset > length - 1 ) { throw new IndexOutOfBoundsException ( "gapped offset " + gappedOffset + " extends beyond sequence length " + length ) ; } return gappedOffset - getNumberOfGapsUntil ( gappedOffset ) ; }
void test0 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; DataStoreFilter dataStoreFilter0 = DataStoreFilters . newIncludeFilter ( ( Collection < String > ) linkedList0 ) ; DataStoreFilter dataStoreFilter1 = DataStoreFilters . invertFilter ( dataStoreFilter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataStoreFilter invertFilter ( DataStoreFilter filter ) { if ( filter = = null ) { throw new NullPointerException ( "filter can not be null" ) ; } return new InverseDataStoreFilter ( filter ) ; }
void test1 ( ) throws Throwable { DataStoreFilter dataStoreFilter0 = DataStoreFilters . neverAccept ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataStoreFilter neverAccept ( ) { return DataStoreFilterSingletons . NEVER_ACCEPT ; }
void test2 ( ) throws Throwable { DataStoreFilter dataStoreFilter0 = DataStoreFilters . alwaysAccept ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataStoreFilter alwaysAccept ( ) { return DataStoreFilterSingletons . ALWAYS_ACCEPT ; }
void test3 ( ) throws Throwable { Pattern pattern0 = Pattern . compile ( "" ) ; DataStoreFilter dataStoreFilter0 = DataStoreFilters . newMatchFilter ( pattern0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataStoreFilter newMatchFilter ( Pattern pattern ) { if ( pattern = = null ) { throw new NullPointerException ( "pattern can not be null" ) ; } return new PatternDataStoreFilter ( pattern ) ; }
void test4 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; DataStoreFilter dataStoreFilter0 = DataStoreFilters . newExcludeFilter ( ( Collection < String > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataStoreFilter newExcludeFilter ( Collection < String > ids ) { if ( ids = = null ) { throw new NullPointerException ( "ids can not be null" ) ; } return new ExcludeDataStoreFilter ( ids ) ; }
void test0 ( ) throws Throwable { PhredQuality phredQuality0 = PhredQuality . valueOf ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { PhredQuality phredQuality0 = PhredQuality . valueOf ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getErrorProbability ( ) { return Math . pow ( TEN , value / - TEN ) ; }
void test2 ( ) throws Throwable { PhredQuality phredQuality0 = PhredQuality . valueOf ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getQualityScore ( ) { return value ; }
void test3 ( ) throws Throwable { PhredQuality phredQuality0 = PhredQuality . valueOf ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test4 ( ) throws Throwable { PhredQuality phredQuality0 = PhredQuality . withErrorProbability ( 0 . 7943282347242815 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getErrorProbability ( ) { return Math . pow ( TEN , value / - TEN ) ; }
void test5 ( ) throws Throwable { PhredQuality phredQuality0 = PhredQuality . valueOf ( 39 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getQualityScore ( ) { return value ; }
void test10 ( ) throws Throwable { PhredQuality phredQuality0 = PhredQuality . valueOf ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getErrorProbability ( ) { return Math . pow ( TEN , value / - TEN ) ; }
void test11 ( ) throws Throwable { PhredQuality phredQuality0 = PhredQuality . valueOf ( 39 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getErrorProbability ( ) { return Math . pow ( TEN , value / - TEN ) ; }
void test12 ( ) throws Throwable { PhredQuality phredQuality0 = PhredQuality . valueOf ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getErrorProbability ( ) { return Math . pow ( TEN , value / - TEN ) ; }
void test13 ( ) throws Throwable { PhredQuality phredQuality0 = PhredQuality . valueOf ( 39 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getQualityScore ( ) { return value ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 12 ] ; RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence ( byteArray0 ) ; int int0 = runLengthEncodedQualitySequence0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence ( byteArray0 ) ; boolean boolean0 = runLengthEncodedQualitySequence0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence ( byteArray0 ) ; Object object0 = new Object ( ) ; boolean boolean0 = runLengthEncodedQualitySequence0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; byteArray0 [ 2 ] = ( byte ) 8 ; RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence ( byteArray0 ) ; byte [ ] byteArray1 = new byte [ 10 ] ; RunLengthEncodedQualitySequence runLengthEncodedQualitySequence1 = new RunLengthEncodedQualitySequence ( byteArray1 ) ; boolean boolean0 = runLengthEncodedQualitySequence0 . equals ( ( Object ) runLengthEncodedQualitySequence1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return codec . decodedLengthOf ( data ) ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 12 ] ; byteArray0 [ 5 ] = ( byte ) 2 ; RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence ( byteArray0 ) ; RunLengthEncodedQualitySequence runLengthEncodedQualitySequence1 = new RunLengthEncodedQualitySequence ( byteArray0 ) ; boolean boolean0 = runLengthEncodedQualitySequence0 . equals ( ( Object ) runLengthEncodedQualitySequence1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; byteArray0 [ 4 ] = ( byte ) 31 ; RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence ( byteArray0 ) ; String string0 = runLengthEncodedQualitySequence0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test11 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; byteArray0 [ 4 ] = ( byte ) 31 ; RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence ( byteArray0 ) ; byte [ ] byteArray1 = runLengthEncodedQualitySequence0 . toArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { DefaultQualitySymbolCodec defaultQualitySymbolCodec0 = DefaultQualitySymbolCodec . INSTANCE ; LinkedList < PhredQuality > linkedList0 = new LinkedList < PhredQuality > ( ) ; byte [ ] byteArray0 = defaultQualitySymbolCodec0 . encode ( ( Collection < PhredQuality > ) linkedList0 ) ; int int0 = defaultQualitySymbolCodec0 . decodedLengthOf ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test2 ( ) throws Throwable { DefaultQualitySymbolCodec defaultQualitySymbolCodec0 = DefaultQualitySymbolCodec . INSTANCE ; LinkedList < PhredQuality > linkedList0 = new LinkedList < PhredQuality > ( ) ; PhredQuality phredQuality0 = PhredQuality . valueOf ( 0 ) ; linkedList0 . addFirst ( phredQuality0 ) ; byte [ ] byteArray0 = defaultQualitySymbolCodec0 . encode ( ( Collection < PhredQuality > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encode ( Collection < T > glyphs ) ; / * * * Get a single Gyph from the encoded * byte array at the given index . * @param encodedGlyphs the byte array of * encoded glyphs . * @param index the index of the glyph * to get . * @return the decoded glyph * at the given index . * @throws IndexOutOfBoundsException if index is out of bounds * of the index . * / T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; EncodedQualitySequence encodedQualitySequence0 = new EncodedQualitySequence ( ( GlyphCodec < PhredQuality > ) null , byteArray0 ) ; boolean boolean0 = encodedQualitySequence0 . equals ( ( Object ) "G" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 11 ] ; byteArray0 [ 6 ] = ( byte ) 26 ; Iterator < PhredQuality > iterator0 = runLengthEncodedQualityCodec0 . iterator ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { boolean delegateHasNext = delegate . hasNext ( ) ; if ( parentDataStore . isClosed ( ) & & delegateHasNext ) { IOUtil . closeAndIgnoreErrors ( this ) ; throw new DataStoreClosedException ( "datastore is closed" ) ; } return delegateHasNext ; }
void test1 ( ) throws Throwable { RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = new RunLengthEncodedQualityCodec ( ( byte ) ( - 70 ) ) ; Vector < PhredQuality > vector0 = new Vector < PhredQuality > ( ) ; byte [ ] byteArray0 = runLengthEncodedQualityCodec0 . encode ( ( Iterable < PhredQuality > ) vector0 , ( int ) ( byte ) ( - 70 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encode ( Collection < T > glyphs ) ; / * * * Get a single Gyph from the encoded * byte array at the given index . * @param encodedGlyphs the byte array of * encoded glyphs . * @param index the index of the glyph * to get . * @return the decoded glyph * at the given index . * @throws IndexOutOfBoundsException if index is out of bounds * of the index . * / T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test2 ( ) throws Throwable { RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 8 ] ; int int0 = runLengthEncodedQualityCodec0 . decodedLengthOf ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test3 ( ) throws Throwable { RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = new RunLengthEncodedQualityCodec ( ( byte ) ( - 70 ) ) ; int int0 = runLengthEncodedQualityCodec0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test4 ( ) throws Throwable { RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec . INSTANCE ; Vector < PhredQuality > vector0 = new Vector < PhredQuality > ( ) ; byte [ ] byteArray0 = runLengthEncodedQualityCodec0 . encode ( ( Collection < PhredQuality > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encode ( Collection < T > glyphs ) ; / * * * Get a single Gyph from the encoded * byte array at the given index . * @param encodedGlyphs the byte array of * encoded glyphs . * @param index the index of the glyph * to get . * @return the decoded glyph * at the given index . * @throws IndexOutOfBoundsException if index is out of bounds * of the index . * / T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test6 ( ) throws Throwable { RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 2 ] ; byte [ ] byteArray1 = runLengthEncodedQualityCodec0 . encode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getQualityScore ( ) { return value ; }
void test7 ( ) throws Throwable { RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 2 ] ; RunLengthEncodedQualityCodec runLengthEncodedQualityCodec1 = new RunLengthEncodedQualityCodec ( ( byte ) 0 ) ; byte [ ] byteArray1 = runLengthEncodedQualityCodec1 . encode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test10 ( ) throws Throwable { RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec . INSTANCE ; Object object0 = new Object ( ) ; boolean boolean0 = runLengthEncodedQualityCodec0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test11 ( ) throws Throwable { RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = new RunLengthEncodedQualityCodec ( ( byte ) 0 ) ; RunLengthEncodedQualityCodec runLengthEncodedQualityCodec1 = new RunLengthEncodedQualityCodec ( ( byte ) 0 ) ; boolean boolean0 = runLengthEncodedQualityCodec0 . equals ( ( Object ) runLengthEncodedQualityCodec1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test12 ( ) throws Throwable { RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = new RunLengthEncodedQualityCodec ( ( byte ) 20 ) ; RunLengthEncodedQualityCodec runLengthEncodedQualityCodec1 = RunLengthEncodedQualityCodec . INSTANCE ; boolean boolean0 = runLengthEncodedQualityCodec0 . equals ( ( Object ) runLengthEncodedQualityCodec1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test14 ( ) throws Throwable { RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec . INSTANCE ; Vector < PhredQuality > vector0 = new Vector < PhredQuality > ( ) ; PhredQuality phredQuality0 = PhredQuality . valueOf ( 0 ) ; vector0 . add ( phredQuality0 ) ; byte [ ] byteArray0 = runLengthEncodedQualityCodec0 . encode ( ( Collection < PhredQuality > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encode ( Collection < T > glyphs ) ; / * * * Get a single Gyph from the encoded * byte array at the given index . * @param encodedGlyphs the byte array of * encoded glyphs . * @param index the index of the glyph * to get . * @return the decoded glyph * at the given index . * @throws IndexOutOfBoundsException if index is out of bounds * of the index . * / T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test15 ( ) throws Throwable { RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec . INSTANCE ; Vector < PhredQuality > vector0 = new Vector < PhredQuality > ( ) ; PhredQuality phredQuality0 = PhredQuality . valueOf ( 0 ) ; vector0 . add ( phredQuality0 ) ; vector0 . add ( phredQuality0 ) ; byte [ ] byteArray0 = runLengthEncodedQualityCodec0 . encode ( ( Collection < PhredQuality > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encode ( Collection < T > glyphs ) ; / * * * Get a single Gyph from the encoded * byte array at the given index . * @param encodedGlyphs the byte array of * encoded glyphs . * @param index the index of the glyph * to get . * @return the decoded glyph * at the given index . * @throws IndexOutOfBoundsException if index is out of bounds * of the index . * / T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test17 ( ) throws Throwable { RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 2 ] ; byte [ ] byteArray1 = runLengthEncodedQualityCodec0 . encode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { boolean delegateHasNext = delegate . hasNext ( ) ; if ( parentDataStore . isClosed ( ) & & delegateHasNext ) { IOUtil . closeAndIgnoreErrors ( this ) ; throw new DataStoreClosedException ( "datastore is closed" ) ; } return delegateHasNext ; }
void test18 ( ) throws Throwable { RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 2 ] ; RunLengthEncodedQualityCodec runLengthEncodedQualityCodec1 = new RunLengthEncodedQualityCodec ( ( byte ) 0 ) ; byte [ ] byteArray1 = runLengthEncodedQualityCodec1 . encode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { boolean delegateHasNext = delegate . hasNext ( ) ; if ( parentDataStore . isClosed ( ) & & delegateHasNext ) { IOUtil . closeAndIgnoreErrors ( this ) ; throw new DataStoreClosedException ( "datastore is closed" ) ; } return delegateHasNext ; }
void test0 ( ) throws Throwable { PhredQuality phredQuality0 = PhredQuality . valueOf ( 61 ) ; BwaQualityTrimmer bwaQualityTrimmer0 = new BwaQualityTrimmer ( phredQuality0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BwaQualityTrimmer ( PhredQuality threshold ) { this . threshold = threshold . getQualityScore ( ) ; }
void test2 ( ) throws Throwable { LucyQualityTrimmerBuilder lucyQualityTrimmerBuilder0 = new LucyQualityTrimmerBuilder ( 0 ) ; QualityTrimmer qualityTrimmer0 = ( QualityTrimmer ) lucyQualityTrimmerBuilder0 . build ( ) ; QualityTrimmer qualityTrimmer1 = ( QualityTrimmer ) lucyQualityTrimmerBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" D build ( ) throws IOException { return createNewInstance ( fastaFile , hint , filter ) ; }
void test3 ( ) throws Throwable { LucyQualityTrimmerBuilder lucyQualityTrimmerBuilder0 = new LucyQualityTrimmerBuilder ( 1 ) ; lucyQualityTrimmerBuilder0 . addTrimWindow ( 1 , 1 ) ; LucyQualityTrimmerBuilder lucyQualityTrimmerBuilder1 = lucyQualityTrimmerBuilder0 . addTrimWindow ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LucyQualityTrimmerBuilder addTrimWindow ( int windowSize , double maxErrorRate ) { isValidErrorRate ( maxErrorRate ) ; if ( windowSize < 1 ) { throw new IllegalArgumentException ( "window size must be > = 1" ) ; } trimWindows . add ( new Window ( windowSize , maxErrorRate ) ) ; return this ; }
void test0 ( ) throws Throwable { File file0 = new File ( "" ) ; String string0 = FileUtil . createRelavitePathFrom ( file0 , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createRelavitePathFrom ( File root , File otherFile ) throws IOException { return createRelavitePathFrom ( root , otherFile , File . separatorChar ) ; }
void test1 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; File file1 = new File ( "U2esP ? , ; zmZgU89" , "U2esP ? , ; zmZgU89" ) ; String string0 = FileUtil . createRelavitePathFrom ( file1 , file0 , 'j' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createRelavitePathFrom ( File root , File otherFile ) throws IOException { return createRelavitePathFrom ( root , otherFile , File . separatorChar ) ; }
void test2 ( ) throws Throwable { File file0 = new File ( "" ) ; File file1 = new File ( file0 , "CQS ! " ) ; String string0 = FileUtil . createRelavitePathFrom ( file0 , file1 , '2' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createRelavitePathFrom ( File root , File otherFile ) throws IOException { return createRelavitePathFrom ( root , otherFile , File . separatorChar ) ; }
void test3 ( ) throws Throwable { String string0 = FileUtil . getBaseName ( "u / NiIZX~g ] %" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBaseName ( File file ) { if ( file = = null ) { return null ; } return getBaseName ( file . getName ( ) ) ; }
void test4 ( ) throws Throwable { File file0 = new File ( "^ > pWavrq ! %M . A_nB0 | " ) ; String string0 = FileUtil . getExtension ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExtension ( File file ) { if ( file = = null ) { return null ; } String filename = file . getName ( ) ; return getExtension ( filename ) ; }
void test5 ( ) throws Throwable { String string0 = FileUtil . getExtension ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExtension ( File file ) { if ( file = = null ) { return null ; } String filename = file . getName ( ) ; return getExtension ( filename ) ; }
void test6 ( ) throws Throwable { String string0 = FileUtil . getExtension ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExtension ( File file ) { if ( file = = null ) { return null ; } String filename = file . getName ( ) ; return getExtension ( filename ) ; }
void test7 ( ) throws Throwable { File file0 = new File ( "^ > pWavrq ! %M . A_nB0 | " ) ; File file1 = file0 . getAbsoluteFile ( ) ; File file2 = file1 . getParentFile ( ) ; String string0 = FileUtil . getExtension ( file2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExtension ( File file ) { if ( file = = null ) { return null ; } String filename = file . getName ( ) ; return getExtension ( filename ) ; }
void test8 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; String string0 = FileUtil . getBaseName ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBaseName ( File file ) { if ( file = = null ) { return null ; } return getBaseName ( file . getName ( ) ) ; }
void test9 ( ) throws Throwable { String string0 = FileUtil . getBaseName ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBaseName ( File file ) { if ( file = = null ) { return null ; } return getBaseName ( file . getName ( ) ) ; }
void test10 ( ) throws Throwable { String string0 = FileUtil . getBaseName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBaseName ( File file ) { if ( file = = null ) { return null ; } return getBaseName ( file . getName ( ) ) ; }
void test11 ( ) throws Throwable { File file0 = new File ( "^ > pWavrq ! %M . A_nB0 | " ) ; String string0 = FileUtil . getBaseName ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBaseName ( File file ) { if ( file = = null ) { return null ; } return getBaseName ( file . getName ( ) ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = IOUtil . convertUnsignedByteToByteArray ( ( short ) ( - 56 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] convertUnsignedByteToByteArray ( short unsignedByte ) { byte [ ] result = new byte [ 1 ] ; result [ 0 ] = ( byte ) ( unsignedByte & 0xff ) ; return result ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; IOUtil . readUnsignedShort ( ( InputStream ) byteArrayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int available ( ) throws IOException { return in . available ( ) ; }
void test5 ( ) throws Throwable { BitSet bitSet0 = IOUtil . toBitSet ( 1252L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return wrappedDeque . isEmpty ( ) ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 17 ] ; short short0 = IOUtil . readUnsignedByte ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short readUnsignedByte ( byte [ ] array ) { return new BigInteger ( 1 , array ) . shortValue ( ) ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; IOUtil . toByteArray ( ( InputStream ) byteArrayInputStream0 , ( int ) ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int available ( ) throws IOException { return in . available ( ) ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; IOUtil . readUnsignedByte ( ( InputStream ) byteArrayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int available ( ) throws IOException { return in . available ( ) ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; int int0 = IOUtil . readUnsignedShort ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int readUnsignedShort ( byte [ ] array ) { return new BigInteger ( 1 , array ) . intValue ( ) ; }
void test10 ( ) throws Throwable { long long0 = IOUtil . toUnsignedInt ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long toUnsignedInt ( int value ) { return value & 0xFFFFFFFFL ; }
void test13 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 17 ] ; long long0 = IOUtil . readUnsignedInt ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long readUnsignedInt ( InputStream in , Endian endian ) throws IOException { return new BigInteger ( 1 , IOUtil . toByteArray ( in , 4 , endian ) ) . longValue ( ) ; }
void test16 ( ) throws Throwable { int int0 = IOUtil . toUnsignedByte ( ( byte ) ( - 77 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int toUnsignedByte ( byte value ) { return value & 0xFF ; }
void test17 ( ) throws Throwable { int int0 = IOUtil . toUnsignedShort ( ( short ) ( - 1927 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int toUnsignedShort ( short value ) { return value & 0xFFFF ; }
void test18 ( ) throws Throwable { File file0 = new File ( "" ) ; IOUtil . recursiveDelete ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test20 ( ) throws Throwable { File file0 = new File ( " ) 9 > 5IN1zm" , " ) 9 > 5IN1zm" ) ; IOUtil . delete ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test22 ( ) throws Throwable { File file0 = new File ( " : G - ? ~0%3`" ) ; IOUtil . deleteIgnoreError ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void deleteIgnoreError ( File file ) { / / This method exists solely so we don't / / have file . delete ( ) s without checking return / / values littered throughout the codebase . / / programs like FindBugs will flag these / / statements as bad code since we don't check return value / / so I would rather have only 1 such warning instead of dozens . if ( file ! = null & & file . exists ( ) ) { file . delete ( ) ; } }
void test25 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; IOUtil . mkdir ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mkdir ( File dir ) throws IOException { if ( dir = = null ) { return ; } if ( dir . exists ( ) ) { return ; } if ( ! dir . mkdir ( ) ) { throw new IOException ( "unable to mkdir for " + dir ) ; } }
void test29 ( ) throws Throwable { Scanner scanner0 = new Scanner ( "" ) ; IOUtil . closeAndIgnoreErrors ( scanner0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test30 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; BufferedInputStream bufferedInputStream0 = new BufferedInputStream ( ( InputStream ) pipedInputStream0 ) ; IOUtil . blockingSkip ( ( InputStream ) bufferedInputStream0 , 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean markSupported ( ) { return in . markSupported ( ) ; }
void test32 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , 1716 , ( int ) ( byte ) 80 ) ; short [ ] shortArray0 = IOUtil . readUnsignedByteArray ( ( InputStream ) byteArrayInputStream0 , ( int ) ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] readUnsignedByteArray ( InputStream in , int expectedLength ) throws IOException { short [ ] array = new short [ expectedLength ] ; for ( int i = 0 ; i < expectedLength ; i + + ) { array [ i ] = ( short ) in . read ( ) ; } return array ; }
void test34 ( ) throws Throwable { byte byte0 = IOUtil . toSignedByte ( ( - 1839 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte toSignedByte ( int unsignedByte ) { if ( unsignedByte > 127 ) { return ( byte ) ( unsignedByte - 256 ) ; } return ( byte ) unsignedByte ; }
void test35 ( ) throws Throwable { byte byte0 = IOUtil . toSignedByte ( 65535 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte toSignedByte ( int unsignedByte ) { if ( unsignedByte > 127 ) { return ( byte ) ( unsignedByte - 256 ) ; } return ( byte ) unsignedByte ; }
void test36 ( ) throws Throwable { short short0 = IOUtil . toSignedShort ( 255 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short toSignedShort ( int unsignedShort ) { if ( unsignedShort > Short . MAX_VALUE ) { return ( short ) ( unsignedShort - ( 2 * ( Short . MAX_VALUE + 1 ) ) ) ; } return ( short ) unsignedShort ; }
void test37 ( ) throws Throwable { int int0 = IOUtil . toSignedInt ( 1884L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int toSignedInt ( long unsignedInt ) { if ( unsignedInt > Integer . MAX_VALUE ) { return ( int ) ( unsignedInt - ( 2 * ( Integer . MAX_VALUE + 1 ) ) ) ; } return ( int ) unsignedInt ; }
void test38 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; IOUtil . Endian iOUtil_Endian0 = IOUtil . Endian . LITTLE ; IOUtil . readUnsignedInt ( ( InputStream ) byteArrayInputStream0 , iOUtil_Endian0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int available ( ) throws IOException { return in . available ( ) ; }
void test39 ( ) throws Throwable { byte [ ] byteArray0 = IOUtil . convertUnsignedIntToByteArray ( ( - 1204L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] convertUnsignedIntToByteArray ( long unsignedInt ) { byte [ ] result = new byte [ 4 ] ; long currentValue = unsignedInt ; for ( int i = result . length - 1 ; i > = 0 ; i - - ) { result [ i ] = ( byte ) ( currentValue & 0xff ) ; currentValue > > > = 8 ; } return result ; }
void test40 ( ) throws Throwable { byte [ ] byteArray0 = IOUtil . convertUnsignedShortToByteArray ( 567 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] convertUnsignedShortToByteArray ( int unsignedShort ) { byte [ ] result = new byte [ 2 ] ; int currentValue = unsignedShort ; for ( int i = result . length - 1 ; i > = 0 ; i - - ) { result [ i ] = ( byte ) ( currentValue & 0xff ) ; currentValue > > > = 8 ; } return result ; }
void test41 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . TEN ; byte [ ] byteArray0 = IOUtil . convertUnsignedLongToByteArray ( bigInteger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] convertUnsignedLongToByteArray ( BigInteger unsignedLong ) { / / BigInteger . toByteArray ( ) only returns the minimum number of bytes / / ( signed ) required to represent the number , / / it's easier to convert to hex , padd with 0's then convert / / each hex byte than to do the bit math to take an odd number of bits / / and compute the padded value . String hexString = convertToPaddedHex ( unsignedLong , 16 ) ; byte [ ] result = new byte [ 8 ] ; for ( int i = 0 ; i < 16 ; i + = 2 ) { String byteInHex = hexString . substring ( i , i + 2 ) ; result [ i / 2 ] = ( byte ) Short . parseShort ( byteInHex , 16 ) ; } return result ; }
void test42 ( ) throws Throwable { int int0 = IOUtil . getUnsignedByteCount ( 2147483647L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUnsignedByteCount ( long value ) { int numBits = getUnsignedBitCount ( value ) ; return ( numBits + 7 ) / 8 ; }
void test43 ( ) throws Throwable { BitSet bitSet0 = new BitSet ( ) ; byte [ ] byteArray0 = IOUtil . toByteArray ( bitSet0 , 1722 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( QualitySequence sequence ) { byte [ ] array = new byte [ ( int ) sequence . getLength ( ) ] ; int i = 0 ; for ( PhredQuality q : sequence ) { array [ i ] = q . getQualityScore ( ) ; i + + ; } return array ; }
void test44 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; IOUtil . Endian iOUtil_Endian0 = IOUtil . Endian . LITTLE ; IOUtil . toByteArray ( ( InputStream ) byteArrayInputStream0 , iOUtil_Endian0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int available ( ) throws IOException { return in . available ( ) ; }
void test46 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; SequenceInputStream sequenceInputStream0 = new SequenceInputStream ( ( InputStream ) byteArrayInputStream0 , ( InputStream ) byteArrayInputStream0 ) ; PushbackInputStream pushbackInputStream0 = new PushbackInputStream ( ( InputStream ) sequenceInputStream0 ) ; String string0 = IOUtil . toString ( ( InputStream ) pushbackInputStream0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { if ( ! buffer . hasRemaining ( ) ) { return - 1 ; } / / need to return byte as unsigned return IOUtil . toUnsignedByte ( buffer . get ( ) ) ; }
void test47 ( ) throws Throwable { int int0 = IOUtil . computeNumberOfBitsIn ( 1722 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int computeNumberOfBitsIn ( int value ) { if ( value = = 0 ) { / / special case return 1 ; } return Integer . SIZE - Integer . numberOfLeadingZeros ( value ) ; }
void test0 ( ) throws Throwable { DefaultPositionCodec defaultPositionCodec0 = DefaultPositionCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 6 ] ; Position position0 = ( Position ) defaultPositionCodec0 . decode ( byteArray0 , ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { DefaultPositionCodec defaultPositionCodec0 = DefaultPositionCodec . INSTANCE ; byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = defaultPositionCodec0 . decodedLengthOf ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test2 ( ) throws Throwable { DefaultPositionCodec defaultPositionCodec0 = DefaultPositionCodec . INSTANCE ; LinkedList < Position > linkedList0 = new LinkedList < Position > ( ) ; Position position0 = Position . valueOf ( 1865 ) ; linkedList0 . addLast ( position0 ) ; byte [ ] byteArray0 = defaultPositionCodec0 . encode ( ( Collection < Position > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encode ( Collection < T > glyphs ) ; / * * * Get a single Gyph from the encoded * byte array at the given index . * @param encodedGlyphs the byte array of * encoded glyphs . * @param index the index of the glyph * to get . * @return the decoded glyph * at the given index . * @throws IndexOutOfBoundsException if index is out of bounds * of the index . * / T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test0 ( ) throws Throwable { short [ ] shortArray0 = new short [ 42 ] ; DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence ( shortArray0 ) ; Iterator < Position > iterator0 = defaultPositionSequence0 . iterator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { boolean delegateHasNext = delegate . hasNext ( ) ; if ( parentDataStore . isClosed ( ) & & delegateHasNext ) { IOUtil . closeAndIgnoreErrors ( this ) ; throw new DataStoreClosedException ( "datastore is closed" ) ; } return delegateHasNext ; }
void test1 ( ) throws Throwable { short [ ] shortArray0 = new short [ 14 ] ; DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence ( shortArray0 ) ; long long0 = defaultPositionSequence0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return codec . decodedLengthOf ( data ) ; }
void test2 ( ) throws Throwable { short [ ] shortArray0 = new short [ 42 ] ; DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence ( shortArray0 ) ; int int0 = defaultPositionSequence0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test3 ( ) throws Throwable { short [ ] shortArray0 = new short [ 14 ] ; DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence ( shortArray0 ) ; String string0 = defaultPositionSequence0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test4 ( ) throws Throwable { short [ ] shortArray0 = new short [ 9 ] ; DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence ( shortArray0 ) ; short [ ] shortArray1 = defaultPositionSequence0 . toArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test6 ( ) throws Throwable { short [ ] shortArray0 = new short [ 14 ] ; DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence ( shortArray0 ) ; Position position0 = ( Position ) defaultPositionSequence0 . get ( 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test7 ( ) throws Throwable { short [ ] shortArray0 = new short [ 14 ] ; DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence ( shortArray0 ) ; boolean boolean0 = defaultPositionSequence0 . equals ( ( Object ) "_ + 8 , ? m" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test8 ( ) throws Throwable { short [ ] shortArray0 = new short [ 42 ] ; DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence ( shortArray0 ) ; boolean boolean0 = defaultPositionSequence0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test9 ( ) throws Throwable { short [ ] shortArray0 = new short [ 9 ] ; DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence ( shortArray0 ) ; DefaultPositionSequence defaultPositionSequence1 = new DefaultPositionSequence ( shortArray0 ) ; boolean boolean0 = defaultPositionSequence0 . equals ( ( Object ) defaultPositionSequence1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test10 ( ) throws Throwable { short [ ] shortArray0 = new short [ 9 ] ; DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence ( shortArray0 ) ; DefaultPositionSequence defaultPositionSequence1 = new DefaultPositionSequence ( ( short [ ] ) null ) ; boolean boolean0 = defaultPositionSequence1 . equals ( ( Object ) defaultPositionSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { int int0 = MapUtil . computeMinHashMapSizeWithoutRehashing ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int computeMinHashMapSizeWithoutRehashing ( long expectedNumberOfEntries ) { if ( expectedNumberOfEntries < 0 ) { throw new IllegalArgumentException ( "number of entries must be > = 0" ) ; } if ( expectedNumberOfEntries > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "number of entries must be < = Integer . MAX_VALUE" ) ; } return ( int ) ( expectedNumberOfEntries / DEFAULT_LOAD_FACTOR + 1 ) ; }
void test0 ( ) throws Throwable { HashMap < Integer , Object > hashMap0 = new HashMap < Integer , Object > ( ) ; SortedMap < Integer , Object > sortedMap0 = MapValueComparator . sortDescending ( ( Map < Integer , Object > ) hashMap0 , ( Comparator < Object > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return wrappedDeque . isEmpty ( ) ; }
void test4 ( ) throws Throwable { HashMap < Integer , Integer > hashMap0 = new HashMap < Integer , Integer > ( ) ; hashMap0 . put ( ( Integer ) 1203 , ( Integer ) 975 ) ; Integer integer0 = new Integer ( 975 ) ; hashMap0 . put ( ( Integer ) 975 , integer0 ) ; SortedMap < Integer , Integer > sortedMap0 = MapValueComparator . sortAscending ( ( Map < Integer , Integer > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test0 ( ) throws Throwable { Object object0 = new Object ( ) ; boolean boolean0 = ObjectsUtil . nullSafeEquals ( object0 , object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean nullSafeEquals ( Object a , Object b ) { if ( a = = null ) { return b = = null ; } return a . equals ( b ) ; }
void test1 ( ) throws Throwable { boolean boolean0 = ObjectsUtil . nullSafeEquals ( ( Object ) null , ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean nullSafeEquals ( Object a , Object b ) { if ( a = = null ) { return b = = null ; } return a . equals ( b ) ; }
void test2 ( ) throws Throwable { boolean boolean0 = ObjectsUtil . nullSafeEquals ( ( Object ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean nullSafeEquals ( Object a , Object b ) { if ( a = = null ) { return b = = null ; } return a . equals ( b ) ; }
void test3 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 1 ] ; boolean boolean0 = ObjectsUtil . allNull ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean allNull ( Object . . . objects ) { for ( Object o : objects ) { if ( o ! = null ) { return false ; } } return true ; }
void test4 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 10 ] ; Object object0 = new Object ( ) ; objectArray0 [ 0 ] = object0 ; boolean boolean0 = ObjectsUtil . allNull ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean allNull ( Object . . . objects ) { for ( Object o : objects ) { if ( o ! = null ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { Object object0 = new Object ( ) ; Object [ ] objectArray0 = new Object [ 9 ] ; objectArray0 [ 0 ] = object0 ; objectArray0 [ 1 ] = object0 ; objectArray0 [ 2 ] = object0 ; objectArray0 [ 3 ] = object0 ; objectArray0 [ 4 ] = ( Object ) true ; objectArray0 [ 5 ] = ( Object ) true ; objectArray0 [ 6 ] = ( Object ) "q" ; objectArray0 [ 7 ] = ( Object ) false ; objectArray0 [ 8 ] = ( Object ) 281474709 ; boolean boolean0 = ObjectsUtil . noneNull ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean noneNull ( Object . . . objects ) { for ( Object o : objects ) { if ( o = = null ) { return false ; } } return true ; }
void test6 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 1 ] ; boolean boolean0 = ObjectsUtil . noneNull ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean noneNull ( Object . . . objects ) { for ( Object o : objects ) { if ( o = = null ) { return false ; } } return true ; }
void test7 ( ) throws Throwable { Object object0 = new Object ( ) ; int int0 = ObjectsUtil . nullSafeHashCode ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nullSafeHashCode ( Object obj ) { if ( obj = = null ) { return 0 ; } return obj . hashCode ( ) ; }
void test8 ( ) throws Throwable { int int0 = ObjectsUtil . nullSafeHashCode ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nullSafeHashCode ( Object obj ) { if ( obj = = null ) { return 0 ; } return obj . hashCode ( ) ; }
void test0 ( ) throws Throwable { FIFOQueue < Object > fIFOQueue0 = new FIFOQueue < Object > ( ) ; Object object0 = new Object ( ) ; boolean boolean0 = fIFOQueue0 . add ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean add ( E e , Deque < E > deque ) ; / * * * Try to offer the given element to the given Deque . * @param e the element to add . * @param deque the Deque to offer the element to . * @return { @code true }
void test1 ( ) throws Throwable { FIFOQueue < Object > fIFOQueue0 = new FIFOQueue < Object > ( ) ; ArrayDeque < Object > arrayDeque0 = new ArrayDeque < Object > ( ) ; boolean boolean0 = fIFOQueue0 . offer ( ( Object ) " , ^#bbZDB08e + | " , ( Deque < Object > ) arrayDeque0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean offer ( E e , Deque < E > deque ) ; @Override E element ( ) { return wrappedDeque . element ( ) ; }
void test0 ( ) throws Throwable { Integer [ ] integerArray0 = new Integer [ 6 ] ; Integer integer0 = new Integer ( ( - 1 ) ) ; integerArray0 [ 0 ] = integer0 ; integerArray0 [ 1 ] = integerArray0 [ 0 ] ; integerArray0 [ 2 ] = integer0 ; integerArray0 [ 3 ] = integer0 ; integerArray0 [ 4 ] = integerArray0 [ 1 ] ; integerArray0 [ 5 ] = integer0 ; Integer integer1 = MathUtil . minOf ( integerArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < N extends Number > N minOf ( Collection < N > numbers ) { verifyNotEmpty ( numbers ) ; Iterator < N > iter = numbers . iterator ( ) ; N currentMin = iter . next ( ) ; while ( iter . hasNext ( ) ) { N next = iter . next ( ) ; if ( next . longValue ( ) < currentMin . longValue ( ) ) { currentMin = next ; } } return currentMin ; }
void test3 ( ) throws Throwable { Integer [ ] integerArray0 = new Integer [ 7 ] ; Integer integer0 = new Integer ( 1 ) ; integerArray0 [ 1 ] = integer0 ; Number [ ] numberArray0 = new Number [ 4 ] ; Long long0 = new Long ( ( - 1L ) ) ; numberArray0 [ 0 ] = ( Number ) long0 ; numberArray0 [ 1 ] = ( Number ) integerArray0 [ 1 ] ; Float float0 = new Float ( ( float ) long0 ) ; numberArray0 [ 2 ] = ( Number ) float0 ; numberArray0 [ 3 ] = ( Number ) integer0 ; Integer integer1 = ( Integer ) MathUtil . maxOf ( numberArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < N extends Number > N maxOf ( Collection < N > numbers ) { verifyNotEmpty ( numbers ) ; Iterator < N > iter = numbers . iterator ( ) ; N currentMax = iter . next ( ) ; while ( iter . hasNext ( ) ) { N next = iter . next ( ) ; if ( next . longValue ( ) > currentMax . longValue ( ) ) { currentMax = next ; } } return currentMax ; }
void test4 ( ) throws Throwable { Integer [ ] integerArray0 = new Integer [ 7 ] ; Integer integer0 = new Integer ( 1 ) ; integerArray0 [ 0 ] = integer0 ; integerArray0 [ 1 ] = integerArray0 [ 0 ] ; integerArray0 [ 2 ] = integer0 ; integerArray0 [ 3 ] = integerArray0 [ 1 ] ; integerArray0 [ 4 ] = integerArray0 [ 3 ] ; integerArray0 [ 5 ] = integerArray0 [ 1 ] ; integerArray0 [ 6 ] = integerArray0 [ 2 ] ; Double double0 = MathUtil . averageOf ( integerArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < N extends Number > Double averageOf ( N . . . values ) { return averageOf ( Arrays . asList ( values ) ) ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; BigInteger bigInteger0 = MathUtil . sumOf ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test6 ( ) throws Throwable { int [ ] intArray0 = new int [ 9 ] ; BigInteger bigInteger0 = MathUtil . sumOf ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigInteger sumOf ( byte [ ] values ) { List < Byte > list = new ArrayList < Byte > ( values . length ) ; for ( int i = 0 ; i < values . length ; i + + ) { list . add ( Byte . valueOf ( values [ i ] ) ) ; } return sumOf ( list ) ; }
void test7 ( ) throws Throwable { long [ ] longArray0 = new long [ 10 ] ; BigInteger bigInteger0 = MathUtil . sumOf ( longArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigInteger sumOf ( byte [ ] values ) { List < Byte > list = new ArrayList < Byte > ( values . length ) ; for ( int i = 0 ; i < values . length ; i + + ) { list . add ( Byte . valueOf ( values [ i ] ) ) ; } return sumOf ( list ) ; }
void test8 ( ) throws Throwable { short [ ] shortArray0 = new short [ 6 ] ; BigInteger bigInteger0 = MathUtil . sumOf ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test9 ( ) throws Throwable { Integer [ ] integerArray0 = new Integer [ 3 ] ; Integer integer0 = new Integer ( 10 ) ; integerArray0 [ 0 ] = integer0 ; integerArray0 [ 1 ] = integer0 ; integerArray0 [ 2 ] = integerArray0 [ 0 ] ; Long long0 = MathUtil . medianOf ( integerArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < N extends Number & Comparable < N > > Long medianOf ( N . . . values ) { return medianOf ( Arrays . asList ( values ) ) ; }
void test10 ( ) throws Throwable { Integer [ ] integerArray0 = new Integer [ 6 ] ; Integer integer0 = new Integer ( ( - 1 ) ) ; integerArray0 [ 0 ] = integer0 ; integerArray0 [ 1 ] = integer0 ; integerArray0 [ 2 ] = integer0 ; integerArray0 [ 3 ] = integer0 ; integerArray0 [ 4 ] = integerArray0 [ 0 ] ; integerArray0 [ 5 ] = integerArray0 [ 4 ] ; Long long0 = MathUtil . medianOf ( integerArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < N extends Number & Comparable < N > > Long medianOf ( N . . . values ) { return medianOf ( Arrays . asList ( values ) ) ; }
void test1 ( ) throws Throwable { Date date0 = DateUtil . getCurrentDate ( ) ; Date date1 = DateUtil . getCurrentDate ( ) ; DateUtil . getCurrentDate ( ) ; DateUtil . setCurrentDate ( date1 ) ; date1 . compareTo ( date0 ) ; DateUtil . setCurrentDate ( date1 ) ; String string0 = DateUtil . getElapsedTimeAsString ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMonth ( ) { return month ; }
void test3 ( ) throws Throwable { String string0 = DateUtil . getElapsedTimeAsString ( 1372728682777L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getElapsedTimeAsString ( long numberOfMillis ) { if ( numberOfMillis < SECONDS ) { return "P0S" ; } StringBuilder builder = new StringBuilder ( "P" ) ; long millisLeft = numberOfMillis ; long numDays = millisLeft / DAYS ; if ( numDays > 0 ) { builder . append ( numDays ) . append ( 'D' ) ; millisLeft = millisLeft - numDays * DAYS ; } long numHours = millisLeft / HOURS ; if ( numHours > 0 ) { builder . append ( numHours ) . append ( 'H' ) ; millisLeft = millisLeft - numHours * HOURS ; } long numMins = millisLeft / MINS ; if ( numMins > 0 ) { builder . append ( numMins ) . append ( 'M' ) ; millisLeft = millisLeft - numMins * MINS ; } long numSeconds = millisLeft / SECONDS ; if ( numSeconds > 0 ) { builder . append ( numSeconds ) . append ( 'S' ) ; millisLeft = millisLeft - numSeconds * SECONDS ; } return builder . toString ( ) ; }
void test4 ( ) throws Throwable { String string0 = DateUtil . getElapsedTimeAsString ( 3600000L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getElapsedTimeAsString ( long numberOfMillis ) { if ( numberOfMillis < SECONDS ) { return "P0S" ; } StringBuilder builder = new StringBuilder ( "P" ) ; long millisLeft = numberOfMillis ; long numDays = millisLeft / DAYS ; if ( numDays > 0 ) { builder . append ( numDays ) . append ( 'D' ) ; millisLeft = millisLeft - numDays * DAYS ; } long numHours = millisLeft / HOURS ; if ( numHours > 0 ) { builder . append ( numHours ) . append ( 'H' ) ; millisLeft = millisLeft - numHours * HOURS ; } long numMins = millisLeft / MINS ; if ( numMins > 0 ) { builder . append ( numMins ) . append ( 'M' ) ; millisLeft = millisLeft - numMins * MINS ; } long numSeconds = millisLeft / SECONDS ; if ( numSeconds > 0 ) { builder . append ( numSeconds ) . append ( 'S' ) ; millisLeft = millisLeft - numSeconds * SECONDS ; } return builder . toString ( ) ; }
void test5 ( ) throws Throwable { String string0 = DateUtil . getElapsedTimeAsString ( 1000L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getElapsedTimeAsString ( long numberOfMillis ) { if ( numberOfMillis < SECONDS ) { return "P0S" ; } StringBuilder builder = new StringBuilder ( "P" ) ; long millisLeft = numberOfMillis ; long numDays = millisLeft / DAYS ; if ( numDays > 0 ) { builder . append ( numDays ) . append ( 'D' ) ; millisLeft = millisLeft - numDays * DAYS ; } long numHours = millisLeft / HOURS ; if ( numHours > 0 ) { builder . append ( numHours ) . append ( 'H' ) ; millisLeft = millisLeft - numHours * HOURS ; } long numMins = millisLeft / MINS ; if ( numMins > 0 ) { builder . append ( numMins ) . append ( 'M' ) ; millisLeft = millisLeft - numMins * MINS ; } long numSeconds = millisLeft / SECONDS ; if ( numSeconds > 0 ) { builder . append ( numSeconds ) . append ( 'S' ) ; millisLeft = millisLeft - numSeconds * SECONDS ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { ArrayDeque < String > arrayDeque0 = new ArrayDeque < String > ( ) ; JoinedStringBuilder joinedStringBuilder0 = new JoinedStringBuilder ( ( Iterable < ? > ) arrayDeque0 ) ; String string0 = joinedStringBuilder0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { Object object0 = new Object ( ) ; Object [ ] objectArray0 = new Object [ 3 ] ; JoinedStringBuilder joinedStringBuilder0 = new JoinedStringBuilder ( objectArray0 ) ; joinedStringBuilder0 . prefix ( object0 ) ; String string0 = joinedStringBuilder0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test2 ( ) throws Throwable { ArrayDeque < String > arrayDeque0 = new ArrayDeque < String > ( ) ; arrayDeque0 . add ( "a : Kwc ) < WDI * " ) ; arrayDeque0 . add ( "" ) ; JoinedStringBuilder joinedStringBuilder0 = new JoinedStringBuilder ( ( Iterable < ? > ) arrayDeque0 ) ; joinedStringBuilder0 . glue ( ( Object ) " [ ] " ) ; String string0 = joinedStringBuilder0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test3 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 8 ] ; Object object0 = new Object ( ) ; objectArray0 [ 1 ] = object0 ; JoinedStringBuilder joinedStringBuilder0 = new JoinedStringBuilder ( objectArray0 ) ; objectArray0 [ 3 ] = objectArray0 [ 1 ] ; JoinedStringBuilder joinedStringBuilder1 = joinedStringBuilder0 . glue ( objectArray0 [ 3 ] ) ; String string0 = ( String ) joinedStringBuilder1 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" D build ( ) throws IOException { return createNewInstance ( fastaFile , hint , filter ) ; }
void test4 ( ) throws Throwable { Object object0 = new Object ( ) ; Object [ ] objectArray0 = new Object [ 3 ] ; objectArray0 [ 2 ] = object0 ; JoinedStringBuilder joinedStringBuilder0 = new JoinedStringBuilder ( objectArray0 ) ; JoinedStringBuilder joinedStringBuilder1 = joinedStringBuilder0 . suffix ( objectArray0 [ 2 ] ) ; String string0 = joinedStringBuilder1 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { File file0 = new File ( "" ) ; File file1 = file0 . getCanonicalFile ( ) ; FileIterator . FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator . createBreadthFirstFileIteratorBuilder ( file1 ) ; FileIterator fileIterator0 = ( FileIterator ) fileIterator_FileIteratorBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( ) { delegate . remove ( ) ; }
void test1 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; FileIterator . FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator . createDepthFirstFileIteratorBuilder ( file0 ) ; FileIterator fileIterator0 = ( FileIterator ) fileIterator_FileIteratorBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { boolean delegateHasNext = delegate . hasNext ( ) ; if ( parentDataStore . isClosed ( ) & & delegateHasNext ) { IOUtil . closeAndIgnoreErrors ( this ) ; throw new DataStoreClosedException ( "datastore is closed" ) ; } return delegateHasNext ; }
void test2 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; FileIterator . FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator . createBreadthFirstFileIteratorBuilder ( file0 ) ; FileIterator fileIterator0 = ( FileIterator ) fileIterator_FileIteratorBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { boolean delegateHasNext = delegate . hasNext ( ) ; if ( parentDataStore . isClosed ( ) & & delegateHasNext ) { IOUtil . closeAndIgnoreErrors ( this ) ; throw new DataStoreClosedException ( "datastore is closed" ) ; } return delegateHasNext ; }
void test3 ( ) throws Throwable { File file0 = new File ( "" ) ; File file1 = file0 . getCanonicalFile ( ) ; FileIterator . FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator . createBreadthFirstFileIteratorBuilder ( file1 ) ; FileIterator . FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0 . includeHiddenFiles ( true ) ; fileIterator_FileIteratorBuilder1 . includeDirectories ( true ) ; FileIterator fileIterator0 = ( FileIterator ) fileIterator_FileIteratorBuilder1 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { boolean delegateHasNext = delegate . hasNext ( ) ; if ( parentDataStore . isClosed ( ) & & delegateHasNext ) { IOUtil . closeAndIgnoreErrors ( this ) ; throw new DataStoreClosedException ( "datastore is closed" ) ; } return delegateHasNext ; }
void test4 ( ) throws Throwable { FileIterator . FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator . createBreadthFirstFileIteratorBuilder ( ( File ) null ) ; FileIterator . FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0 . fileFilter ( ( FileFilter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FileIteratorBuilder createBreadthFirstFileIteratorBuilder ( File rootDir ) { return new BreadthFirstFileIteratorBuilder ( rootDir ) ; }
void test5 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; FileIterator . FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator . createNonRecursiveFileIteratorBuilder ( file0 ) ; FileIterator fileIterator0 = ( FileIterator ) fileIterator_FileIteratorBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { boolean delegateHasNext = delegate . hasNext ( ) ; if ( parentDataStore . isClosed ( ) & & delegateHasNext ) { IOUtil . closeAndIgnoreErrors ( this ) ; throw new DataStoreClosedException ( "datastore is closed" ) ; } return delegateHasNext ; }
void test8 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; FileIterator . FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator . createBreadthFirstFileIteratorBuilder ( file0 ) ; FileIterator fileIterator0 = ( FileIterator ) fileIterator_FileIteratorBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T next ( ) { / / delegate to hasNext ( ) / / to do datastore closed checking hasNext ( ) ; / / if we get here then we're ok return delegate . next ( ) ; }
void test9 ( ) throws Throwable { File file0 = new File ( "" ) ; File file1 = file0 . getCanonicalFile ( ) ; FileIterator . FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator . createBreadthFirstFileIteratorBuilder ( file1 ) ; FileIterator fileIterator0 = ( FileIterator ) fileIterator_FileIteratorBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { boolean delegateHasNext = delegate . hasNext ( ) ; if ( parentDataStore . isClosed ( ) & & delegateHasNext ) { IOUtil . closeAndIgnoreErrors ( this ) ; throw new DataStoreClosedException ( "datastore is closed" ) ; } return delegateHasNext ; }
void test10 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; FileIterator . FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator . createDepthFirstFileIteratorBuilder ( file0 ) ; FileIterator . FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0 . includeHiddenFiles ( true ) ; FileIterator fileIterator0 = ( FileIterator ) fileIterator_FileIteratorBuilder1 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { boolean delegateHasNext = delegate . hasNext ( ) ; if ( parentDataStore . isClosed ( ) & & delegateHasNext ) { IOUtil . closeAndIgnoreErrors ( this ) ; throw new DataStoreClosedException ( "datastore is closed" ) ; } return delegateHasNext ; }
void test0 ( ) throws Throwable { LIFOQueue < Object > lIFOQueue0 = new LIFOQueue < Object > ( ) ; ArrayDeque < Object > arrayDeque0 = new ArrayDeque < Object > ( ) ; boolean boolean0 = lIFOQueue0 . offer ( ( Object ) " , ^#bbZDB08e + | " , ( Deque < Object > ) arrayDeque0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean offer ( E e , Deque < E > deque ) ; @Override E element ( ) { return wrappedDeque . element ( ) ; }
void test1 ( ) throws Throwable { LIFOQueue < Object > lIFOQueue0 = new LIFOQueue < Object > ( ) ; Object object0 = new Object ( ) ; boolean boolean0 = lIFOQueue0 . add ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test0 ( ) throws Throwable { Iterator < Iterator < Integer > > iterator0 = IteratorUtil . createEmptyIterator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { boolean delegateHasNext = delegate . hasNext ( ) ; if ( parentDataStore . isClosed ( ) & & delegateHasNext ) { IOUtil . closeAndIgnoreErrors ( this ) ; throw new DataStoreClosedException ( "datastore is closed" ) ; } return delegateHasNext ; }
void test1 ( ) throws Throwable { LinkedList < StreamingIterator < Object > > linkedList0 = new LinkedList < StreamingIterator < Object > > ( ) ; ListIterator < StreamingIterator < Object > > listIterator0 = linkedList0 . listIterator ( ) ; PeekableIterator < StreamingIterator < Object > > peekableIterator0 = IteratorUtil . createPeekableIterator ( ( Iterator < StreamingIterator < Object > > ) listIterator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { boolean delegateHasNext = delegate . hasNext ( ) ; if ( parentDataStore . isClosed ( ) & & delegateHasNext ) { IOUtil . closeAndIgnoreErrors ( this ) ; throw new DataStoreClosedException ( "datastore is closed" ) ; } return delegateHasNext ; }
void test5 ( ) throws Throwable { StreamingIterator < Iterator < StreamingIterator < Integer > > > streamingIterator0 = IteratorUtil . createEmptyStreamingIterator ( ) ; PeekableStreamingIterator < Iterator < StreamingIterator < Integer > > > peekableStreamingIterator0 = IteratorUtil . createPeekableStreamingIterator ( streamingIterator0 ) ; PeekableStreamingIterator < Iterator < StreamingIterator < Integer > > > peekableStreamingIterator1 = IteratorUtil . createPeekableStreamingIterator ( ( Iterator < Iterator < StreamingIterator < Integer > > > ) peekableStreamingIterator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { boolean delegateHasNext = delegate . hasNext ( ) ; if ( parentDataStore . isClosed ( ) & & delegateHasNext ) { IOUtil . closeAndIgnoreErrors ( this ) ; throw new DataStoreClosedException ( "datastore is closed" ) ; } return delegateHasNext ; }
void test0 ( ) throws Throwable { LinkedList < Iterator < Iterator < Object > > > linkedList0 = new LinkedList < Iterator < Iterator < Object > > > ( ) ; LinkedList < Iterator < Object > > linkedList1 = new LinkedList < Iterator < Object > > ( ) ; Iterator < Iterator < Object > > iterator0 = linkedList1 . descendingIterator ( ) ; linkedList0 . add ( iterator0 ) ; ChainedIterator < Object > chainedIterator0 = ChainedIterator . create ( ( Collection < ? extends Iterator < ? > > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( ) { delegate . remove ( ) ; }
void test1 ( ) throws Throwable { LinkedList < Iterator < Iterator < Object > > > linkedList0 = new LinkedList < Iterator < Iterator < Object > > > ( ) ; LinkedList < Iterator < Object > > linkedList1 = new LinkedList < Iterator < Object > > ( ) ; LinkedList < Object > linkedList2 = new LinkedList < Object > ( ) ; Iterator < Object > iterator0 = linkedList2 . descendingIterator ( ) ; linkedList1 . add ( iterator0 ) ; Iterator < Iterator < Object > > iterator1 = linkedList1 . descendingIterator ( ) ; linkedList0 . add ( iterator1 ) ; ChainedIterator < Object > chainedIterator0 = ChainedIterator . create ( ( Collection < ? extends Iterator < ? > > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { boolean delegateHasNext = delegate . hasNext ( ) ; if ( parentDataStore . isClosed ( ) & & delegateHasNext ) { IOUtil . closeAndIgnoreErrors ( this ) ; throw new DataStoreClosedException ( "datastore is closed" ) ; } return delegateHasNext ; }
void test2 ( ) throws Throwable { LinkedList < Iterator < Iterator < Object > > > linkedList0 = new LinkedList < Iterator < Iterator < Object > > > ( ) ; LinkedList < Iterator < Object > > linkedList1 = new LinkedList < Iterator < Object > > ( ) ; Iterator < Iterator < Object > > iterator0 = linkedList1 . descendingIterator ( ) ; linkedList0 . add ( iterator0 ) ; linkedList0 . add ( iterator0 ) ; ChainedIterator < Object > chainedIterator0 = ChainedIterator . create ( ( Collection < ? extends Iterator < ? > > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T next ( ) { / / delegate to hasNext ( ) / / to do datastore closed checking hasNext ( ) ; / / if we get here then we're ok return delegate . next ( ) ; }
void test0 ( ) throws Throwable { Proxy proxy0 = ( Proxy ) TraceNucleotideDataStoreAdapter . adapt ( ( DataStore < Trace > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < T > DataStore < T > adapt ( Map < String , T > map ) { return new MapDataStoreAdapter < T > ( map ) ; }
void test0 ( ) throws Throwable { Proxy proxy0 = ( Proxy ) TraceQualityDataStoreAdapter . adapt ( ( DataStore < Trace > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < T > DataStore < T > adapt ( Map < String , T > map ) { return new MapDataStoreAdapter < T > ( map ) ; }
void test0 ( ) throws Throwable { SffUtil . Linkers sffUtil_Linkers0 = SffUtil . Linkers . TITANIUM ; NucleotideSequence nucleotideSequence0 = sffUtil_Linkers0 . getReverseSequence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfGaps ( ) ; / * * * Is the { @link Nucleotide }
void test1 ( ) throws Throwable { SffUtil . Linkers sffUtil_Linkers0 = SffUtil . Linkers . TITANIUM ; NucleotideSequence nucleotideSequence0 = sffUtil_Linkers0 . getForwardSequence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfIntensities ( Iterable < Nucleotide > sequence ) { int count = 0 ; Nucleotide currentBase = null ; for ( Nucleotide n : sequence ) { if ( currentBase ! = n ) { currentBase = n ; count + + ; } } return count ; }
void test2 ( ) throws Throwable { int int0 = SffUtil . getReadDataLength ( 1031 , 1031 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReadDataLength ( int numberOfFlows , int numberOfBases ) { return numberOfFlows * 2 + 3 * numberOfBases ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = SffUtil . toSffIndexOffsetValue ( ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toSffIndexOffsetValue ( long offset ) { long currentOffset = offset ; byte [ ] values = new byte [ 4 ] ; short place4 = ( short ) ( currentOffset / POW_3 ) ; values [ 0 ] = IOUtil . toSignedByte ( place4 ) ; currentOffset - = place4 * POW_3 ; short place3 = ( short ) ( currentOffset / POW_2 ) ; values [ 1 ] = IOUtil . toSignedByte ( place3 ) ; currentOffset - = place3 * POW_2 ; short place2 = ( short ) ( currentOffset / POW_1 ) ; values [ 2 ] = IOUtil . toSignedByte ( place2 ) ; currentOffset - = place2 * POW_1 ; values [ 3 ] = IOUtil . toSignedByte ( ( short ) ( currentOffset ) ) ; return values ; }
void test5 ( ) throws Throwable { float float0 = SffUtil . convertFlowgramValue ( ( short ) 1994 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float convertFlowgramValue ( short encodedValue ) { return encodedValue / ONE_HUNDRED ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; long long0 = SffUtil . parseSffIndexOffsetValue ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long parseSffIndexOffsetValue ( byte [ ] values ) { return IOUtil . toUnsignedByte ( values [ 3 ] ) + POW_1 * IOUtil . toUnsignedByte ( values [ 2 ] ) + POW_2 * IOUtil . toUnsignedByte ( values [ 1 ] ) + POW_3 * IOUtil . toUnsignedByte ( values [ 0 ] ) ; }
void test8 ( ) throws Throwable { int int0 = SffUtil . caclulatePaddedBytes ( 1031 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int caclulatePaddedBytes ( int bytesReadInSection ) { int remainder = bytesReadInSection % 8 ; if ( remainder = = 0 ) { return 0 ; } return 8 - remainder ; }
void test9 ( ) throws Throwable { int int0 = SffUtil . caclulatePaddedBytes ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int caclulatePaddedBytes ( int bytesReadInSection ) { int remainder = bytesReadInSection % 8 ; if ( remainder = = 0 ) { return 0 ; } return 8 - remainder ; }
void test11 ( ) throws Throwable { short short0 = SffUtil . parseSffInfoEncodedFlowgram ( "ZAQo3pm2 . 9w\"s $" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short parseSffInfoEncodedFlowgram ( String sffinfoEncodedFlowgram ) { Matcher matcher = SFFINFO_ENCODED_FLOWGRAM_PATTERN . matcher ( sffinfoEncodedFlowgram ) ; if ( matcher . find ( ) ) { return Short . parseShort ( matcher . group ( 1 ) + matcher . group ( 2 ) ) ; } throw new IllegalArgumentException ( "could not parse sffinfo encoded flowgram value " + sffinfoEncodedFlowgram ) ; }
void test0 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . TEN ; DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader ( bigInteger0 , ( - 17L ) , ( - 17L ) , 0 , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; DefaultSffCommonHeader . Builder defaultSffCommonHeader_Builder0 = new DefaultSffCommonHeader . Builder ( ( SffCommonHeader ) defaultSffCommonHeader0 ) ; defaultSffCommonHeader_Builder0 . keySequence ( ( NucleotideSequence ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { DefaultSffCommonHeader . Builder defaultSffCommonHeader_Builder0 = new DefaultSffCommonHeader . Builder ( ) ; DefaultSffCommonHeader . Builder defaultSffCommonHeader_Builder1 = defaultSffCommonHeader_Builder0 . flow ( ( NucleotideSequence ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultSffCommonHeader ( BigInteger indexOffset , long indexLength , long numberOfReads , int numberOfFlowsPerRead , NucleotideSequence flow , NucleotideSequence keySequence ) { this . indexOffset = indexOffset ; this . indexLength = indexLength ; this . numberOfReads = numberOfReads ; this . numberOfFlowsPerRead = numberOfFlowsPerRead ; this . flow = flow ; this . keySequence = keySequence ; }
void test2 ( ) throws Throwable { DefaultSffCommonHeader . Builder defaultSffCommonHeader_Builder0 = new DefaultSffCommonHeader . Builder ( ) ; DefaultSffCommonHeader . Builder defaultSffCommonHeader_Builder1 = defaultSffCommonHeader_Builder0 . numberOfReads ( ( - 9L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfReads ( ) { return reads . size ( ) ; }
void test3 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . TEN ; DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader ( bigInteger0 , ( - 17L ) , ( - 17L ) , 0 , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; DefaultSffCommonHeader . Builder defaultSffCommonHeader_Builder0 = new DefaultSffCommonHeader . Builder ( ( SffCommonHeader ) defaultSffCommonHeader0 ) ; defaultSffCommonHeader_Builder0 . numberOfFlowsPerRead ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test4 ( ) throws Throwable { DefaultSffCommonHeader . Builder defaultSffCommonHeader_Builder0 = new DefaultSffCommonHeader . Builder ( ) ; DefaultSffCommonHeader . Builder defaultSffCommonHeader_Builder1 = defaultSffCommonHeader_Builder0 . indexLength ( ( - 9L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultSffCommonHeader ( BigInteger indexOffset , long indexLength , long numberOfReads , int numberOfFlowsPerRead , NucleotideSequence flow , NucleotideSequence keySequence ) { this . indexOffset = indexOffset ; this . indexLength = indexLength ; this . numberOfReads = numberOfReads ; this . numberOfFlowsPerRead = numberOfFlowsPerRead ; this . flow = flow ; this . keySequence = keySequence ; }
void test5 ( ) throws Throwable { DefaultSffCommonHeader . Builder defaultSffCommonHeader_Builder0 = new DefaultSffCommonHeader . Builder ( ) ; BigInteger bigInteger0 = BigInteger . ONE ; DefaultSffCommonHeader . Builder defaultSffCommonHeader_Builder1 = defaultSffCommonHeader_Builder0 . indexOffset ( bigInteger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultSffCommonHeader ( BigInteger indexOffset , long indexLength , long numberOfReads , int numberOfFlowsPerRead , NucleotideSequence flow , NucleotideSequence keySequence ) { this . indexOffset = indexOffset ; this . indexLength = indexLength ; this . numberOfReads = numberOfReads ; this . numberOfFlowsPerRead = numberOfFlowsPerRead ; this . flow = flow ; this . keySequence = keySequence ; }
void test6 ( ) throws Throwable { DefaultSffCommonHeader . Builder defaultSffCommonHeader_Builder0 = new DefaultSffCommonHeader . Builder ( ) ; DefaultSffCommonHeader . Builder defaultSffCommonHeader_Builder1 = defaultSffCommonHeader_Builder0 . withNoIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultSffCommonHeader ( BigInteger indexOffset , long indexLength , long numberOfReads , int numberOfFlowsPerRead , NucleotideSequence flow , NucleotideSequence keySequence ) { this . indexOffset = indexOffset ; this . indexLength = indexLength ; this . numberOfReads = numberOfReads ; this . numberOfFlowsPerRead = numberOfFlowsPerRead ; this . flow = flow ; this . keySequence = keySequence ; }
void test7 ( ) throws Throwable { DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader ( ( BigInteger ) null , 0L , ( long ) ( - 2 ) , ( - 2 ) , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; String string0 = defaultSffCommonHeader0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test8 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . TEN ; DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader ( bigInteger0 , ( - 17L ) , ( - 17L ) , 0 , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; int int0 = defaultSffCommonHeader0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test9 ( ) throws Throwable { DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader ( ( BigInteger ) null , 147L , 147L , ( - 642 ) , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; int int0 = defaultSffCommonHeader0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test10 ( ) throws Throwable { DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader ( ( BigInteger ) null , 0L , ( long ) ( - 2 ) , ( - 2 ) , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; boolean boolean0 = defaultSffCommonHeader0 . equals ( ( Object ) "DefaultSFFCommonHeader [ flow = null , indexLength = 0 , indexOffset = null , keySequence = null , numberOfFlowsPerRead = - 2 , numberOfReads = - 2 ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test11 ( ) throws Throwable { DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader ( ( BigInteger ) null , 147L , 147L , ( - 642 ) , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; boolean boolean0 = defaultSffCommonHeader0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test12 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ONE ; DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader ( bigInteger0 , 0L , 0L , 0 , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; DefaultSffCommonHeader defaultSffCommonHeader1 = new DefaultSffCommonHeader ( bigInteger0 , ( long ) 0 , 0L , 0 , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; boolean boolean0 = defaultSffCommonHeader0 . equals ( ( Object ) defaultSffCommonHeader1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfFlowsPerRead ( ) { return numberOfFlowsPerRead ; }
void test13 ( ) throws Throwable { DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader ( ( BigInteger ) null , 147L , 147L , ( - 642 ) , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; DefaultSffCommonHeader defaultSffCommonHeader1 = new DefaultSffCommonHeader ( ( BigInteger ) null , ( long ) 1023241513 , ( long ) ( - 642 ) , 1924 , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; boolean boolean0 = defaultSffCommonHeader0 . equals ( ( Object ) defaultSffCommonHeader1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test14 ( ) throws Throwable { DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader ( ( BigInteger ) null , 147L , 147L , ( - 642 ) , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; BigInteger bigInteger0 = BigInteger . ZERO ; DefaultSffCommonHeader defaultSffCommonHeader1 = new DefaultSffCommonHeader ( bigInteger0 , 147L , 147L , 1023241513 , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; boolean boolean0 = defaultSffCommonHeader0 . equals ( ( Object ) defaultSffCommonHeader1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getIndexLength ( ) { return indexLength ; }
void test15 ( ) throws Throwable { DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader ( ( BigInteger ) null , 147L , 147L , ( - 642 ) , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; DefaultSffCommonHeader defaultSffCommonHeader1 = new DefaultSffCommonHeader ( ( BigInteger ) null , 147L , 147L , 1924 , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; boolean boolean0 = defaultSffCommonHeader0 . equals ( ( Object ) defaultSffCommonHeader1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfFlowsPerRead ( ) { return numberOfFlowsPerRead ; }
void test16 ( ) throws Throwable { DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader ( ( BigInteger ) null , 0L , ( long ) ( - 2 ) , ( - 2 ) , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; DefaultSffCommonHeader defaultSffCommonHeader1 = new DefaultSffCommonHeader ( ( BigInteger ) null , 0L , 0L , ( - 2 ) , ( NucleotideSequence ) null , ( NucleotideSequence ) null ) ; boolean boolean0 = defaultSffCommonHeader0 . equals ( ( Object ) defaultSffCommonHeader1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfFlowsPerRead ( ) { return numberOfFlowsPerRead ; }
void test0 ( ) throws Throwable { DefaultSffReadHeader defaultSffReadHeader0 = new DefaultSffReadHeader ( 702 , ( Range ) null , ( Range ) null , ( String ) null ) ; DefaultSffReadHeader . Builder defaultSffReadHeader_Builder0 = new DefaultSffReadHeader . Builder ( ( SffReadHeader ) defaultSffReadHeader0 ) ; defaultSffReadHeader_Builder0 . qualityClip ( ( Range ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfBases ( ) { return numberOfBases ; }
void test1 ( ) throws Throwable { DefaultSffReadHeader defaultSffReadHeader0 = new DefaultSffReadHeader ( 702 , ( Range ) null , ( Range ) null , ( String ) null ) ; DefaultSffReadHeader . Builder defaultSffReadHeader_Builder0 = new DefaultSffReadHeader . Builder ( ( SffReadHeader ) defaultSffReadHeader0 ) ; DefaultSffReadHeader defaultSffReadHeader1 = ( DefaultSffReadHeader ) defaultSffReadHeader_Builder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { DefaultSffReadHeader defaultSffReadHeader0 = new DefaultSffReadHeader ( 220 , ( Range ) null , ( Range ) null , "Z0" ) ; int int0 = defaultSffReadHeader0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test3 ( ) throws Throwable { DefaultSffReadHeader defaultSffReadHeader0 = new DefaultSffReadHeader ( 702 , ( Range ) null , ( Range ) null , ( String ) null ) ; int int0 = defaultSffReadHeader0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test4 ( ) throws Throwable { DefaultSffReadHeader defaultSffReadHeader0 = new DefaultSffReadHeader ( 220 , ( Range ) null , ( Range ) null , "Z0" ) ; DefaultSffReadHeader defaultSffReadHeader1 = new DefaultSffReadHeader ( 220 , ( Range ) null , ( Range ) null , "" ) ; boolean boolean0 = defaultSffReadHeader1 . equals ( ( Object ) defaultSffReadHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfBases ( ) { return numberOfBases ; }
void test5 ( ) throws Throwable { DefaultSffReadHeader defaultSffReadHeader0 = new DefaultSffReadHeader ( 702 , ( Range ) null , ( Range ) null , ( String ) null ) ; boolean boolean0 = defaultSffReadHeader0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfBases ( ) { return numberOfBases ; }
void test6 ( ) throws Throwable { DefaultSffReadHeader defaultSffReadHeader0 = new DefaultSffReadHeader ( 702 , ( Range ) null , ( Range ) null , ( String ) null ) ; DefaultSffReadHeader defaultSffReadHeader1 = new DefaultSffReadHeader ( 255 , ( Range ) null , ( Range ) null , ( String ) null ) ; boolean boolean0 = defaultSffReadHeader0 . equals ( ( Object ) defaultSffReadHeader1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfBases ( ) { return numberOfBases ; }
void test7 ( ) throws Throwable { DefaultSffReadHeader defaultSffReadHeader0 = new DefaultSffReadHeader ( 702 , ( Range ) null , ( Range ) null , ( String ) null ) ; DefaultSffReadHeader defaultSffReadHeader1 = new DefaultSffReadHeader ( 702 , ( Range ) null , ( Range ) null , ( String ) null ) ; boolean boolean0 = defaultSffReadHeader0 . equals ( ( Object ) defaultSffReadHeader1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfBases ( ) { return numberOfBases ; }
void test0 ( ) throws Throwable { Date date0 = Sff454NameUtil . getDateOfRun ( "00000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getDateOfRun ( String readId ) { if ( ! is454Read ( readId ) ) { throw new IllegalArgumentException ( readId + " is not a 454 read" ) ; } String substring = readId . substring ( 0 , 6 ) ; BigInteger timeStamp = _454Base36Encoder . INSTANCE . decode ( substring ) ; return _454DateEncoder . INSTANCE . decode ( timeStamp ) ; }
void test1 ( ) throws Throwable { Sff454NameUtil . Location sff454NameUtil_Location0 = new Sff454NameUtil . Location ( 10 , 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test2 ( ) throws Throwable { Sff454NameUtil . Location sff454NameUtil_Location0 = Sff454NameUtil . parseLocationOf ( "00000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test3 ( ) throws Throwable { Sff454NameUtil . Location sff454NameUtil_Location0 = new Sff454NameUtil . Location ( 869 , 869 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test4 ( ) throws Throwable { Sff454NameUtil . Location sff454NameUtil_Location0 = new Sff454NameUtil . Location ( 9 , 9 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test7 ( ) throws Throwable { Sff454NameUtil . Location sff454NameUtil_Location0 = new Sff454NameUtil . Location ( 10 , 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateAccessionNumberFor ( String rigRunName , int regionNumber , Location wellLocation ) { if ( rigRunName = = null ) { throw new NullPointerException ( "rigRunName can not be null" ) ; } if ( wellLocation = = null ) { throw new NullPointerException ( "wellLocation can not be null" ) ; } if ( regionNumber < 0 | | regionNumber > 99 ) { throw new IllegalArgumentException ( "region number must be > = 0 and < = 99 : " + regionNumber ) ; } RigRun rigRun = new RigRun ( rigRunName ) ; Date dateOfRigRun = rigRun . getDate ( ) ; BigInteger encodedDate = _454DateEncoder . INSTANCE . encode ( dateOfRigRun ) ; return new StringBuilder ( ) . append ( _454Base36Encoder . INSTANCE . encode ( encodedDate ) ) . append ( rigRun . getRandomizingHashcode ( ) ) . append ( String . format ( "%02d" , regionNumber ) ) . append ( wellLocation . encode ( ) ) . toString ( ) ; }
void test10 ( ) throws Throwable { Sff454NameUtil . Location sff454NameUtil_Location0 = new Sff454NameUtil . Location ( 30 , 30 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateAccessionNumberFor ( String rigRunName , int regionNumber , Location wellLocation ) { if ( rigRunName = = null ) { throw new NullPointerException ( "rigRunName can not be null" ) ; } if ( wellLocation = = null ) { throw new NullPointerException ( "wellLocation can not be null" ) ; } if ( regionNumber < 0 | | regionNumber > 99 ) { throw new IllegalArgumentException ( "region number must be > = 0 and < = 99 : " + regionNumber ) ; } RigRun rigRun = new RigRun ( rigRunName ) ; Date dateOfRigRun = rigRun . getDate ( ) ; BigInteger encodedDate = _454DateEncoder . INSTANCE . encode ( dateOfRigRun ) ; return new StringBuilder ( ) . append ( _454Base36Encoder . INSTANCE . encode ( encodedDate ) ) . append ( rigRun . getRandomizingHashcode ( ) ) . append ( String . format ( "%02d" , regionNumber ) ) . append ( wellLocation . encode ( ) ) . toString ( ) ; }
void test11 ( ) throws Throwable { Sff454NameUtil . Location sff454NameUtil_Location0 = Sff454NameUtil . parseLocationOf ( "00000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateAccessionNumberFor ( String rigRunName , int regionNumber , Location wellLocation ) { if ( rigRunName = = null ) { throw new NullPointerException ( "rigRunName can not be null" ) ; } if ( wellLocation = = null ) { throw new NullPointerException ( "wellLocation can not be null" ) ; } if ( regionNumber < 0 | | regionNumber > 99 ) { throw new IllegalArgumentException ( "region number must be > = 0 and < = 99 : " + regionNumber ) ; } RigRun rigRun = new RigRun ( rigRunName ) ; Date dateOfRigRun = rigRun . getDate ( ) ; BigInteger encodedDate = _454DateEncoder . INSTANCE . encode ( dateOfRigRun ) ; return new StringBuilder ( ) . append ( _454Base36Encoder . INSTANCE . encode ( encodedDate ) ) . append ( rigRun . getRandomizingHashcode ( ) ) . append ( String . format ( "%02d" , regionNumber ) ) . append ( wellLocation . encode ( ) ) . toString ( ) ; }
void test13 ( ) throws Throwable { int int0 = Sff454NameUtil . getRegionNumber ( "00000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRegionNumber ( String readId ) { if ( ! is454Read ( readId ) ) { throw new IllegalArgumentException ( readId + " is not a 454 read" ) ; } String substring = readId . substring ( 7 , 9 ) ; return Integer . parseInt ( substring ) ; }
void test17 ( ) throws Throwable { Sff454NameUtil . Location sff454NameUtil_Location0 = new Sff454NameUtil . Location ( 869 , 869 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test18 ( ) throws Throwable { Sff454NameUtil . Location sff454NameUtil_Location0 = new Sff454NameUtil . Location ( 30 , 30 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test19 ( ) throws Throwable { Sff454NameUtil . Location sff454NameUtil_Location0 = Sff454NameUtil . parseLocationOf ( "00000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test20 ( ) throws Throwable { Sff454NameUtil . Location sff454NameUtil_Location0 = Sff454NameUtil . parseLocationOf ( "00000000000000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test22 ( ) throws Throwable { Sff454NameUtil . Location sff454NameUtil_Location0 = Sff454NameUtil . parseLocationOf ( "000000000RJ000J0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test23 ( ) throws Throwable { Sff454NameUtil . Location sff454NameUtil_Location0 = new Sff454NameUtil . Location ( 9 , 9 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateAccessionNumberFor ( String rigRunName , int regionNumber , Location wellLocation ) { if ( rigRunName = = null ) { throw new NullPointerException ( "rigRunName can not be null" ) ; } if ( wellLocation = = null ) { throw new NullPointerException ( "wellLocation can not be null" ) ; } if ( regionNumber < 0 | | regionNumber > 99 ) { throw new IllegalArgumentException ( "region number must be > = 0 and < = 99 : " + regionNumber ) ; } RigRun rigRun = new RigRun ( rigRunName ) ; Date dateOfRigRun = rigRun . getDate ( ) ; BigInteger encodedDate = _454DateEncoder . INSTANCE . encode ( dateOfRigRun ) ; return new StringBuilder ( ) . append ( _454Base36Encoder . INSTANCE . encode ( encodedDate ) ) . append ( rigRun . getRandomizingHashcode ( ) ) . append ( String . format ( "%02d" , regionNumber ) ) . append ( wellLocation . encode ( ) ) . toString ( ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; short [ ] shortArray0 = new short [ 10 ] ; short [ ] shortArray1 = SffFlowgramImpl . computeValues ( byteArray0 , shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] computeValues ( byte [ ] indexes , short [ ] encodedValues ) { if ( indexes . length = = 0 ) { return new short [ 0 ] ; } GrowableShortArray values = new GrowableShortArray ( indexes . length ) ; / / positions are 1 - based so start with - 1 to compensate . int position = - 1 ; int i = 0 ; while ( i < indexes . length ) { if ( indexes [ i ] ! = 0 ) { position + = IOUtil . toUnsignedByte ( indexes [ i ] ) ; values . append ( encodedValues [ position ] ) ; } i + + ; } return Arrays . copyOf ( values . toArray ( ) , values . getCurrentLength ( ) ) ; }
void test0 ( ) throws Throwable { short [ ] shortArray0 = new short [ 3 ] ; EncodedShortData encodedShortData0 = new EncodedShortData ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeData ( byte [ ] data ) throws TraceEncoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @param optionalParameter an optional parameter which some * encodings might need if their encoding * scheme can take parameters to vary how the data * is encoded . If no optional parameters can be * passed in then any value would be ignored . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data , byte optionalParameter ) throws TraceEncoderException ; }
void test1 ( ) throws Throwable { short [ ] shortArray0 = new short [ 6 ] ; EncodedShortData encodedShortData0 = new EncodedShortData ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test2 ( ) throws Throwable { short [ ] shortArray0 = new short [ 10 ] ; EncodedShortData encodedShortData0 = new EncodedShortData ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeData ( byte [ ] data ) throws TraceEncoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @param optionalParameter an optional parameter which some * encodings might need if their encoding * scheme can take parameters to vary how the data * is encoded . If no optional parameters can be * passed in then any value would be ignored . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data , byte optionalParameter ) throws TraceEncoderException ; }
void test4 ( ) throws Throwable { short [ ] shortArray0 = new short [ 3 ] ; EncodedShortData encodedShortData0 = new EncodedShortData ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { short [ ] shortArray0 = new short [ 5 ] ; EncodedShortData encodedShortData0 = new EncodedShortData ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeData ( byte [ ] data ) throws TraceEncoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @param optionalParameter an optional parameter which some * encodings might need if their encoding * scheme can take parameters to vary how the data * is encoded . If no optional parameters can be * passed in then any value would be ignored . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data , byte optionalParameter ) throws TraceEncoderException ; }
void test6 ( ) throws Throwable { short [ ] shortArray0 = new short [ 6 ] ; shortArray0 [ 0 ] = ( short ) 1 ; shortArray0 [ 5 ] = ( short ) ( - 1869 ) ; EncodedShortData encodedShortData0 = new EncodedShortData ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeData ( byte [ ] data ) throws TraceEncoderException ; / * * * Encode the given data and return the encoded values * as a byte array . * @param data the data to encode . * @param optionalParameter an optional parameter which some * encodings might need if their encoding * scheme can take parameters to vary how the data * is encoded . If no optional parameters can be * passed in then any value would be ignored . * @return the encoded data as a byte array . * @throws TraceEncoderException if there are any problems * encoding the data . * / byte [ ] encodeData ( byte [ ] data , byte optionalParameter ) throws TraceEncoderException ; }
void test0 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "EJ$k4iJ - " ) ; short [ ] shortArray0 = abiChromatogramBuilder0 . originalCPositions ( ) ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . tPositions ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String id ( ) { return id ; }
void test1 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "@NgXc8_Sc0C | iQRR" ) ; short [ ] shortArray0 = abiChromatogramBuilder0 . originalGPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] originalGPositions ( ) { return originalBuilder . gPositions ( ) ; }
void test3 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "EJ$k4iJ - " ) ; short [ ] shortArray0 = new short [ 1 ] ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . originalAPositions ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] originalAPositions ( ) { return originalBuilder . aPositions ( ) ; }
void test4 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "NotThymine" ) ; short [ ] shortArray0 = abiChromatogramBuilder0 . cPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] cPositions ( ) { if ( cPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( cPositions , cPositions . length ) ; }
void test5 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "j + V7 > 'J [ QV" ) ; short [ ] shortArray0 = new short [ 4 ] ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . peaks ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String id ( ) { return id ; }
void test6 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "EJ$k4iJ - " ) ; short [ ] shortArray0 = new short [ 1 ] ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . originalPeaks ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbiChromatogramBuilder originalPeaks ( short [ ] peaks ) { originalBuilder . peaks ( new PositionSequenceBuilder ( peaks ) . build ( ) ) ; return this ; }
void test7 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "j + V7 > 'J [ QV" ) ; NucleotideSequence nucleotideSequence0 = abiChromatogramBuilder0 . basecalls ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NucleotideSequence basecalls ( ) { return basecalls ; }
void test8 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "EJ$k4iJ - " ) ; short [ ] shortArray0 = abiChromatogramBuilder0 . originalAPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] originalAPositions ( ) { return originalBuilder . aPositions ( ) ; }
void test9 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "GTyp" ) ; byte [ ] byteArray0 = new byte [ 7 ] ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . originalGConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] originalGConfidence ( ) { return originalBuilder . gConfidence ( ) ; }
void test10 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "" ) ; short [ ] shortArray0 = new short [ 10 ] ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . cPositions ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String id ( ) { return id ; }
void test11 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "GTyp" ) ; short [ ] shortArray0 = new short [ 10 ] ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . aPositions ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] aPositions ( ) { if ( aPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( aPositions , aPositions . length ) ; }
void test12 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "EJ$k4iJ - " ) ; byte [ ] byteArray0 = new byte [ 3 ] ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . tConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] tConfidence ( ) { return Arrays . copyOf ( tConfidence , tConfidence . length ) ; }
void test13 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "j + V7 > 'J [ QV" ) ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . originalBasecalls ( ( NucleotideSequence ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NucleotideSequence originalBasecalls ( ) { return originalBuilder . basecalls ( ) ; }
void test14 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "EJ$k4iJ - " ) ; byte [ ] byteArray0 = abiChromatogramBuilder0 . originalGConfidence ( ) ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . aConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] aConfidence ( ) { return Arrays . copyOf ( aConfidence , aConfidence . length ) ; }
void test16 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "h ) foc" ) ; Map < String , String > map0 = abiChromatogramBuilder0 . properties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , String > properties ( ) { return properties = = null ? null : new HashMap < String , String > ( properties ) ; }
void test17 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "uc & $M ) 7y / e [ " ) ; short [ ] shortArray0 = abiChromatogramBuilder0 . gPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] gPositions ( ) { if ( gPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( gPositions , gPositions . length ) ; }
void test18 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "EJ$k4iJ - " ) ; byte [ ] byteArray0 = abiChromatogramBuilder0 . gConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] gConfidence ( ) { return Arrays . copyOf ( gConfidence , gConfidence . length ) ; }
void test19 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "v@ - } j7Y" ) ; byte [ ] byteArray0 = abiChromatogramBuilder0 . tConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] tConfidence ( ) { return Arrays . copyOf ( tConfidence , tConfidence . length ) ; }
void test20 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "EJ$k4iJ - " ) ; byte [ ] byteArray0 = new byte [ 3 ] ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . originalCConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String id ( ) { return id ; }
void test21 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "@NgXc8_Sc0C | iQRR" ) ; short [ ] shortArray0 = new short [ 8 ] ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . originalGPositions ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] originalGPositions ( ) { return originalBuilder . gPositions ( ) ; }
void test22 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "" ) ; byte [ ] byteArray0 = abiChromatogramBuilder0 . cConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] cConfidence ( ) { return Arrays . copyOf ( cConfidence , cConfidence . length ) ; }
void test23 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "@NgXc8_Sc0C | iQRR" ) ; byte [ ] byteArray0 = abiChromatogramBuilder0 . originalTConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] originalTConfidence ( ) { return originalBuilder . tConfidence ( ) ; }
void test24 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "" ) ; byte [ ] byteArray0 = abiChromatogramBuilder0 . originalCConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] originalCConfidence ( ) { return originalBuilder . cConfidence ( ) ; }
void test25 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "@NgXc8_Sc0C | iQRR" ) ; short [ ] shortArray0 = new short [ 8 ] ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . gPositions ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] gPositions ( ) { if ( gPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( gPositions , gPositions . length ) ; }
void test26 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "j + V7 > 'J [ QV" ) ; byte [ ] byteArray0 = new byte [ 5 ] ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . cConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] cConfidence ( ) { return Arrays . copyOf ( cConfidence , cConfidence . length ) ; }
void test27 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "NotThymine" ) ; NucleotideSequence nucleotideSequence0 = abiChromatogramBuilder0 . originalBasecalls ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NucleotideSequence originalBasecalls ( ) { return originalBuilder . basecalls ( ) ; }
void test28 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "EJ$k4iJ - " ) ; String string0 = abiChromatogramBuilder0 . id ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String id ( ) { return id ; }
void test29 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "EJ$k4iJ - " ) ; byte [ ] byteArray0 = abiChromatogramBuilder0 . originalAConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] originalAConfidence ( ) { return originalBuilder . aConfidence ( ) ; }
void test30 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "" ) ; short [ ] shortArray0 = abiChromatogramBuilder0 . aPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] aPositions ( ) { if ( aPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( aPositions , aPositions . length ) ; }
void test31 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "j + V7 > 'J [ QV" ) ; byte [ ] byteArray0 = new byte [ 5 ] ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . gConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] gConfidence ( ) { return Arrays . copyOf ( gConfidence , gConfidence . length ) ; }
void test32 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "GTyp" ) ; short [ ] shortArray0 = abiChromatogramBuilder0 . originalTPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] originalTPositions ( ) { return originalBuilder . tPositions ( ) ; }
void test33 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "EJ$k4iJ - " ) ; short [ ] shortArray0 = new short [ 1 ] ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . originalTPositions ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] originalTPositions ( ) { return originalBuilder . tPositions ( ) ; }
void test34 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "@NgXc8_Sc0C | iQRR" ) ; short [ ] shortArray0 = new short [ 8 ] ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . originalCPositions ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] originalCPositions ( ) { return originalBuilder . cPositions ( ) ; }
void test35 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "GTyp" ) ; PositionSequence positionSequence0 = abiChromatogramBuilder0 . peaks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PositionSequence peaks ( ) { return peaks ; }
void test37 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "NotThymine" ) ; short [ ] shortArray0 = abiChromatogramBuilder0 . tPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] tPositions ( ) { if ( tPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( tPositions , tPositions . length ) ; }
void test38 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "NotThymine" ) ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . id ( " > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String id ( ) { return id ; }
void test39 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "NotThymine" ) ; byte [ ] byteArray0 = abiChromatogramBuilder0 . aConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] aConfidence ( ) { return Arrays . copyOf ( aConfidence , aConfidence . length ) ; }
void test40 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "NotThymine" ) ; Map < String , String > map0 = abiChromatogramBuilder0 . originalProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , String > originalProperties ( ) { return originalBuilder . properties ( ) ; }
void test42 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "EJ$k4iJ - " ) ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . basecalls ( ( NucleotideSequence ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NucleotideSequence basecalls ( ) { return basecalls ; }
void test43 ( ) throws Throwable { AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "h ) foc" ) ; byte [ ] byteArray0 = new byte [ 7 ] ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . originalAConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] originalAConfidence ( ) { return originalBuilder . aConfidence ( ) ; }
void test45 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder ( "" ) ; AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0 . originalTConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String id ( ) { return id ; }
void test48 ( ) throws Throwable { AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( " / + g { b#Yv - _" ) ; Ab1LocalDate ab1LocalDate0 = new Ab1LocalDate ( ( - 931 ) , 22 , 0 ) ; abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 . visitTaggedDataRecord ( ( DateTaggedDataRecord ) null , ab1LocalDate0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDay ( ) { return day ; }
void test57 ( ) throws Throwable { AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( "@NgXc8_Sc0C | iQRR" ) ; TaggedDataName taggedDataName0 = TaggedDataName . DyeN ; TaggedDataType taggedDataType0 = TaggedDataType . TYPE_5 ; DefaultScanRateTaggedDataType defaultScanRateTaggedDataType0 = new DefaultScanRateTaggedDataType ( taggedDataName0 , ( - 1L ) , taggedDataType0 , 926 , ( - 1L ) , ( - 711L ) , ( - 711L ) , ( - 364L ) ) ; byte [ ] byteArray0 = new byte [ 13 ] ; abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 . visitTaggedDataRecord ( ( UserDefinedTaggedDataRecord ) defaultScanRateTaggedDataType0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TaggedDataType getDataType ( ) { return dataType ; }
void test59 ( ) throws Throwable { AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( "" ) ; TaggedDataName taggedDataName0 = TaggedDataName . LAT_PIXEL_AVG ; TaggedDataType taggedDataType0 = TaggedDataType . TYPE_5 ; DefaultFloatTaggedDataRecord defaultFloatTaggedDataRecord0 = new DefaultFloatTaggedDataRecord ( taggedDataName0 , ( long ) ( short ) 0 , taggedDataType0 , ( int ) ( short ) 0 , ( - 877L ) , ( long ) ( short ) 0 , ( long ) ( short ) ( - 1879 ) , 1L ) ; float [ ] floatArray0 = new float [ 1 ] ; abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 . visitTaggedDataRecord ( ( FloatArrayTaggedDataRecord ) defaultFloatTaggedDataRecord0 , floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRecordLength ( ) { return recordLength ; }
void test60 ( ) throws Throwable { AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( "%gC & %r ] iJ% [ M ? j ; $x8" ) ; TaggedDataName taggedDataName0 = TaggedDataName . BASECALLS ; TaggedDataType taggedDataType0 = TaggedDataType . TYPE_1 ; DefaultScanRateTaggedDataType defaultScanRateTaggedDataType0 = new DefaultScanRateTaggedDataType ( taggedDataName0 , 0L , taggedDataType0 , 1596 , ( - 819L ) , 0L , 0L , ( - 819L ) ) ; abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 . visitTaggedDataRecord ( ( ScanRateTaggedDataType ) defaultScanRateTaggedDataType0 , ( ScanRate ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCrypticValue ( ) { return crypticValue ; }
void test61 ( ) throws Throwable { AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( "P'`WiaMaIpEzf" ) ; TaggedDataName taggedDataName0 = TaggedDataName . BASECALLS ; TaggedDataType taggedDataType0 = TaggedDataType . TYPE_19 ; DefaultTimeTaggedDataRecord defaultTimeTaggedDataRecord0 = new DefaultTimeTaggedDataRecord ( taggedDataName0 , 0L , taggedDataType0 , ( - 1 ) , ( long ) ( - 1 ) , ( - 1237L ) , 0L , 2147483654L ) ; Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime ( ( - 1 ) , 0 , 1507 ) ; abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 . visitTaggedDataRecord ( ( TimeTaggedDataRecord ) defaultTimeTaggedDataRecord0 , ab1LocalTime0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TaggedDataType getDataType ( ) { return dataType ; }
void test62 ( ) throws Throwable { AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( "P'`WiaMaIpEzf" ) ; TaggedDataType taggedDataType0 = TaggedDataType . INTEGER ; TaggedDataName taggedDataName0 = TaggedDataName . phDY ; DefaultPascalStringTaggedDataRecord defaultPascalStringTaggedDataRecord0 = new DefaultPascalStringTaggedDataRecord ( taggedDataName0 , 0L , taggedDataType0 , 1774 , ( long ) 1774 , ( long ) 1774 , ( long ) 1774 , 113L ) ; abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 . visitTaggedDataRecord ( ( StringTaggedDataRecord ) defaultPascalStringTaggedDataRecord0 , "P'`WiaMaIpEzf" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNumberOfElements ( ) { return numberOfElements ; }
void test63 ( ) throws Throwable { AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( "GTyp" ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 . visitComments ( ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test69 ( ) throws Throwable { AbiChromatogramBuilder . AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder . AbiChromatogramBuilderVisitor ( "P'`WiaMaIpEzf" ) ; byte [ ] byteArray0 = new byte [ 9 ] ; TaggedDataName taggedDataName0 = TaggedDataName . BASECALLS ; TaggedDataType taggedDataType0 = TaggedDataType . TYPE_19 ; DefaultUserDefinedTaggedDataRecord defaultUserDefinedTaggedDataRecord0 = new DefaultUserDefinedTaggedDataRecord ( taggedDataName0 , ( long ) ( byte ) 93 , taggedDataType0 , 1268 , 1148L , 0L , ( long ) ( byte ) 47 , ( long ) ( byte ) 1 ) ; abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 . visitTaggedDataRecord ( ( ByteArrayTaggedDataRecord ) defaultUserDefinedTaggedDataRecord0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRecordLength ( ) { return recordLength ; }
void test0 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; ZtrChromatogramWriterBuilder ztrChromatogramWriterBuilder0 = new ZtrChromatogramWriterBuilder ( ( OutputStream ) pipedOutputStream0 ) ; ChromatogramWriter chromatogramWriter0 = ( ChromatogramWriter ) ztrChromatogramWriterBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" D build ( ) throws IOException { return createNewInstance ( fastaFile , hint , filter ) ; }
void test0 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " : Pk | k { UwM C" ) ; ZtrChromatogramBuilder ztrChromatogramBuilder1 = ztrChromatogramBuilder0 . basecalls ( ( NucleotideSequence ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NucleotideSequence basecalls ( ) { return basecalls ; }
void test1 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( "Hnag ) N7Q = l1p ? " ) ; PositionSequence positionSequence0 = ztrChromatogramBuilder0 . peaks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PositionSequence peaks ( ) { return peaks ; }
void test3 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " : Y'3\"3h" ) ; byte [ ] byteArray0 = new byte [ 24 ] ; ZtrChromatogramBuilder ztrChromatogramBuilder1 = ztrChromatogramBuilder0 . tConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] tConfidence ( ) { return Arrays . copyOf ( tConfidence , tConfidence . length ) ; }
void test4 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " - " ) ; byte [ ] byteArray0 = ztrChromatogramBuilder0 . gConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] gConfidence ( ) { return Arrays . copyOf ( gConfidence , gConfidence . length ) ; }
void test5 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " ; %MN\"WyZ2O0h | T" ) ; byte [ ] byteArray0 = ztrChromatogramBuilder0 . cConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] cConfidence ( ) { return Arrays . copyOf ( cConfidence , cConfidence . length ) ; }
void test7 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " ; %MN\"WyZ2O0h | T" ) ; byte [ ] byteArray0 = ztrChromatogramBuilder0 . tConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] tConfidence ( ) { return Arrays . copyOf ( tConfidence , tConfidence . length ) ; }
void test9 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " : Pk | k { UwM C" ) ; NucleotideSequence nucleotideSequence0 = ztrChromatogramBuilder0 . basecalls ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NucleotideSequence basecalls ( ) { return basecalls ; }
void test10 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " - " ) ; byte [ ] byteArray0 = new byte [ 5 ] ; ZtrChromatogramBuilder ztrChromatogramBuilder1 = ztrChromatogramBuilder0 . cConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] cConfidence ( ) { return Arrays . copyOf ( cConfidence , cConfidence . length ) ; }
void test11 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " - " ) ; ZtrChromatogramBuilder ztrChromatogramBuilder1 = ztrChromatogramBuilder0 . clip ( ( Range ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Range clip ( ) { return clip ; }
void test13 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( "@MJXq & Di" ) ; short [ ] shortArray0 = ztrChromatogramBuilder0 . cPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] cPositions ( ) { if ( cPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( cPositions , cPositions . length ) ; }
void test14 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " - " ) ; short [ ] shortArray0 = new short [ 8 ] ; ZtrChromatogramBuilder ztrChromatogramBuilder1 = ztrChromatogramBuilder0 . cPositions ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] cPositions ( ) { if ( cPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( cPositions , cPositions . length ) ; }
void test15 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " ; %MN\"WyZ2O0h | T" ) ; short [ ] shortArray0 = new short [ 6 ] ; ZtrChromatogramBuilder ztrChromatogramBuilder1 = ztrChromatogramBuilder0 . gPositions ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] gPositions ( ) { if ( gPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( gPositions , gPositions . length ) ; }
void test16 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " ; %MN\"WyZ2O0h | T" ) ; short [ ] shortArray0 = ztrChromatogramBuilder0 . tPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] tPositions ( ) { if ( tPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( tPositions , tPositions . length ) ; }
void test17 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " ; %MN\"WyZ2O0h | T" ) ; short [ ] shortArray0 = ztrChromatogramBuilder0 . aPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] aPositions ( ) { if ( aPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( aPositions , aPositions . length ) ; }
void test18 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " : Y'3\"3h" ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; ZtrChromatogramBuilder ztrChromatogramBuilder1 = ztrChromatogramBuilder0 . properties ( ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , String > properties ( ) { return properties = = null ? null : new HashMap < String , String > ( properties ) ; }
void test19 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " : Pk | k { UwM C" ) ; Map < String , String > map0 = ztrChromatogramBuilder0 . properties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , String > properties ( ) { return properties = = null ? null : new HashMap < String , String > ( properties ) ; }
void test20 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " - " ) ; Range range0 = ztrChromatogramBuilder0 . clip ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Range clip ( ) { return clip ; }
void test21 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " ; %MN\"WyZ2O0h | T" ) ; short [ ] shortArray0 = new short [ 6 ] ; ZtrChromatogramBuilder ztrChromatogramBuilder1 = ztrChromatogramBuilder0 . aPositions ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] aPositions ( ) { if ( aPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( aPositions , aPositions . length ) ; }
void test22 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " - " ) ; short [ ] shortArray0 = new short [ 8 ] ; ZtrChromatogramBuilder ztrChromatogramBuilder1 = ztrChromatogramBuilder0 . tPositions ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] tPositions ( ) { if ( tPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( tPositions , tPositions . length ) ; }
void test23 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " - " ) ; byte [ ] byteArray0 = new byte [ 5 ] ; ZtrChromatogramBuilder ztrChromatogramBuilder1 = ztrChromatogramBuilder0 . aConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] aConfidence ( ) { return Arrays . copyOf ( aConfidence , aConfidence . length ) ; }
void test24 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " ; %MN\"WyZ2O0h | T" ) ; short [ ] shortArray0 = new short [ 6 ] ; ZtrChromatogramBuilder ztrChromatogramBuilder1 = ztrChromatogramBuilder0 . peaks ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PositionSequence peaks ( ) { return peaks ; }
void test25 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " : Pk | k { UwM C" ) ; byte [ ] byteArray0 = new byte [ 10 ] ; ZtrChromatogramBuilder ztrChromatogramBuilder1 = ztrChromatogramBuilder0 . gConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] gConfidence ( ) { return Arrays . copyOf ( gConfidence , gConfidence . length ) ; }
void test26 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " : Y'3\"3h" ) ; short [ ] shortArray0 = ztrChromatogramBuilder0 . gPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] gPositions ( ) { if ( gPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( gPositions , gPositions . length ) ; }
void test27 ( ) throws Throwable { ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder ( " ; %MN\"WyZ2O0h | T" ) ; byte [ ] byteArray0 = ztrChromatogramBuilder0 . aConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] aConfidence ( ) { return Arrays . copyOf ( aConfidence , aConfidence . length ) ; }
void test1 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "" ) ; PositionSequence positionSequence0 = scfChromatogramBuilder0 . peaks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PositionSequence peaks ( ) { return peaks ; }
void test2 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "tr - _6zH" ) ; byte [ ] byteArray0 = new byte [ 3 ] ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . gConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] gConfidence ( ) { return Arrays . copyOf ( gConfidence , gConfidence . length ) ; }
void test3 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "" ) ; QualitySequence qualitySequence0 = scfChromatogramBuilder0 . insertionConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" QualitySequence insertionConfidence ( ) { return insertionConfidence ; }
void test4 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "positions can not be null" ) ; short [ ] shortArray0 = scfChromatogramBuilder0 . aPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] aPositions ( ) { if ( aPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( aPositions , aPositions . length ) ; }
void test5 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "Pp [ `zj ) gH = zY , " ) ; short [ ] shortArray0 = new short [ 2 ] ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . peaks ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PositionSequence peaks ( ) { return peaks ; }
void test6 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "tr - _6zH" ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . properties ( ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , String > properties ( ) { return properties = = null ? null : new HashMap < String , String > ( properties ) ; }
void test7 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "" ) ; byte [ ] byteArray0 = new byte [ 4 ] ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . cConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] cConfidence ( ) { return Arrays . copyOf ( cConfidence , cConfidence . length ) ; }
void test8 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "Pp [ `zj ) gH = zY , " ) ; short [ ] shortArray0 = scfChromatogramBuilder0 . cPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] cPositions ( ) { if ( cPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( cPositions , cPositions . length ) ; }
void test9 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "Pp [ `zj ) gH = zY , " ) ; short [ ] shortArray0 = new short [ 7 ] ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . cPositions ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] cPositions ( ) { if ( cPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( cPositions , cPositions . length ) ; }
void test10 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "positions can not be null" ) ; byte [ ] byteArray0 = new byte [ 10 ] ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . tConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] tConfidence ( ) { return Arrays . copyOf ( tConfidence , tConfidence . length ) ; }
void test11 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "positions can not be null" ) ; QualitySequence qualitySequence0 = scfChromatogramBuilder0 . substitutionConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" QualitySequence substitutionConfidence ( ) { return substitutionConfidence ; }
void test13 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "" ) ; byte [ ] byteArray0 = scfChromatogramBuilder0 . aConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] aConfidence ( ) { return Arrays . copyOf ( aConfidence , aConfidence . length ) ; }
void test14 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "" ) ; byte [ ] byteArray0 = scfChromatogramBuilder0 . gConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] gConfidence ( ) { return Arrays . copyOf ( gConfidence , gConfidence . length ) ; }
void test15 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "Pp [ `zj ) gH = zY , " ) ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . basecalls ( ( NucleotideSequence ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NucleotideSequence basecalls ( ) { return basecalls ; }
void test16 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "V777 | : s$5Rh$LT } = @" ) ; short [ ] shortArray0 = scfChromatogramBuilder0 . gPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] gPositions ( ) { if ( gPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( gPositions , gPositions . length ) ; }
void test17 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "positions can not be null" ) ; short [ ] shortArray0 = scfChromatogramBuilder0 . tPositions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] tPositions ( ) { if ( tPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( tPositions , tPositions . length ) ; }
void test19 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "Pp [ `zj ) gH = zY , " ) ; byte [ ] byteArray0 = new byte [ 2 ] ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . aConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] aConfidence ( ) { return Arrays . copyOf ( aConfidence , aConfidence . length ) ; }
void test20 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "" ) ; NucleotideSequence nucleotideSequence0 = scfChromatogramBuilder0 . basecalls ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NucleotideSequence basecalls ( ) { return basecalls ; }
void test21 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "positions can not be null" ) ; short [ ] shortArray0 = new short [ 7 ] ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . aPositions ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] aPositions ( ) { if ( aPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( aPositions , aPositions . length ) ; }
void test22 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "tr - _6zH" ) ; Map < String , String > map0 = scfChromatogramBuilder0 . properties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , String > properties ( ) { return properties = = null ? null : new HashMap < String , String > ( properties ) ; }
void test24 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "tr - _6zH" ) ; QualitySequence qualitySequence0 = scfChromatogramBuilder0 . deletionConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" QualitySequence deletionConfidence ( ) { return deletionConfidence ; }
void test25 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "positions can not be null" ) ; byte [ ] byteArray0 = scfChromatogramBuilder0 . cConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] cConfidence ( ) { return Arrays . copyOf ( cConfidence , cConfidence . length ) ; }
void test26 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "positions can not be null" ) ; byte [ ] byteArray0 = scfChromatogramBuilder0 . tConfidence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] tConfidence ( ) { return Arrays . copyOf ( tConfidence , tConfidence . length ) ; }
void test27 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "positions can not be null" ) ; short [ ] shortArray0 = new short [ 7 ] ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . gPositions ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] gPositions ( ) { if ( gPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( gPositions , gPositions . length ) ; }
void test28 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "positions can not be null" ) ; short [ ] shortArray0 = new short [ 7 ] ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . tPositions ( shortArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short [ ] tPositions ( ) { if ( tPositions = = null ) { return new short [ ] { } ; } return Arrays . copyOf ( tPositions , tPositions . length ) ; }
void test29 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "Pp [ `zj ) gH = zY , " ) ; byte [ ] byteArray0 = new byte [ 2 ] ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . substitutionConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" QualitySequence substitutionConfidence ( ) { return substitutionConfidence ; }
void test30 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "V777 | : s$5Rh$LT } = @" ) ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . substitutionConfidence ( ( byte [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" QualitySequence substitutionConfidence ( ) { return substitutionConfidence ; }
void test31 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "Pp [ `zj ) gH = zY , " ) ; byte [ ] byteArray0 = new byte [ 2 ] ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . insertionConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" QualitySequence insertionConfidence ( ) { return insertionConfidence ; }
void test32 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "" ) ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . insertionConfidence ( ( byte [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" QualitySequence insertionConfidence ( ) { return insertionConfidence ; }
void test33 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "Pp [ `zj ) gH = zY , " ) ; byte [ ] byteArray0 = new byte [ 1 ] ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . deletionConfidence ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" QualitySequence deletionConfidence ( ) { return deletionConfidence ; }
void test34 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "" ) ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . deletionConfidence ( ( byte [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" QualitySequence deletionConfidence ( ) { return deletionConfidence ; }
void test35 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "" ) ; byte [ ] byteArray0 = new byte [ 4 ] ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . privateData ( byteArray0 ) ; byte [ ] byteArray1 = scfChromatogramBuilder1 . privateData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] privateData ( ) { return privateData = = null ? null : Arrays . copyOf ( privateData , privateData . length ) ; }
void test36 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "" ) ; byte [ ] byteArray0 = scfChromatogramBuilder0 . privateData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] privateData ( ) { return privateData = = null ? null : Arrays . copyOf ( privateData , privateData . length ) ; }
void test37 ( ) throws Throwable { ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder ( "V777 | : s$5Rh$LT } = @" ) ; ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0 . privateData ( ( byte [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] privateData ( ) { return privateData = = null ? null : Arrays . copyOf ( privateData , privateData . length ) ; }
void test0 ( ) throws Throwable { File file0 = new File ( "9 , z & x6Y > S^rn#O4 ! z * " ) ; ScfChromatogramWriterBuilder scfChromatogramWriterBuilder0 = new ScfChromatogramWriterBuilder ( file0 ) ; ScfChromatogramWriterBuilder scfChromatogramWriterBuilder1 = scfChromatogramWriterBuilder0 . useVersion2Encoding ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ScfChromatogramWriterBuilder useVersion2Encoding ( ) { this . codec = SCFCodecs . VERSION_2 ; return this ; }
void test1 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; ScfChromatogramWriterBuilder scfChromatogramWriterBuilder0 = new ScfChromatogramWriterBuilder ( ( OutputStream ) pipedOutputStream0 ) ; ChromatogramWriter chromatogramWriter0 = ( ChromatogramWriter ) scfChromatogramWriterBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" D build ( ) throws IOException { return createNewInstance ( fastaFile , hint , filter ) ; }
void test0 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; FastqRecordWriterBuilder fastqRecordWriterBuilder0 = new FastqRecordWriterBuilder ( ( OutputStream ) byteArrayOutputStream0 ) ; FastqRecordWriterBuilder fastqRecordWriterBuilder1 = fastqRecordWriterBuilder0 . duplicateIdOnQualityDefLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FastqRecordWriterBuilder duplicateIdOnQualityDefLine ( ) { this . writeIdOnQualityLine = true ; return this ; }
void test1 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; FastqRecordWriterBuilder fastqRecordWriterBuilder0 = new FastqRecordWriterBuilder ( ( OutputStream ) byteArrayOutputStream0 ) ; FastqRecordWriter fastqRecordWriter0 = ( FastqRecordWriter ) fastqRecordWriterBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" D build ( ) throws IOException { return createNewInstance ( fastaFile , hint , filter ) ; }
void test5 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; FastqRecordWriterBuilder fastqRecordWriterBuilder0 = new FastqRecordWriterBuilder ( ( OutputStream ) byteArrayOutputStream0 ) ; FastqQualityCodec fastqQualityCodec0 = FastqQualityCodec . ILLUMINA ; FastqRecordWriterBuilder fastqRecordWriterBuilder1 = fastqRecordWriterBuilder0 . qualityCodec ( fastqQualityCodec0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FastqRecordWriterBuilder qualityCodec ( FastqQualityCodec codec ) { if ( codec = = null ) { throw new NullPointerException ( "codec can not be null" ) ; } this . codec = codec ; return this ; }
void test6 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; FastqRecordWriterBuilder fastqRecordWriterBuilder0 = new FastqRecordWriterBuilder ( ( OutputStream ) byteArrayOutputStream0 ) ; FastqRecordWriterBuilder fastqRecordWriterBuilder1 = fastqRecordWriterBuilder0 . basesPerLine ( 65580 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FastqRecordWriterBuilder basesPerLine ( int basesPerLine ) { if ( basesPerLine < 1 ) { throw new IllegalArgumentException ( "number per line must be > = 1" ) ; } numberOfBasesPerLine = basesPerLine ; return this ; }
void test3 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; FastqQualityCodec fastqQualityCodec0 = FastqQualityCodec . SANGER ; LargeFastqFileDataStore largeFastqFileDataStore0 = ( LargeFastqFileDataStore ) LargeFastqFileDataStore . create ( file0 , fastqQualityCodec0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test0 ( ) throws Throwable { FastqFileParser . OffsetMemento fastqFileParser_OffsetMemento0 = FastqFileParser . OffsetMemento . valueOf ( 1325L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test1 ( ) throws Throwable { FastqFileParser . OffsetMemento fastqFileParser_OffsetMemento0 = FastqFileParser . OffsetMemento . valueOf ( 4294967302L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test4 ( ) throws Throwable { FastqFileParser . OffsetMemento fastqFileParser_OffsetMemento0 = FastqFileParser . OffsetMemento . valueOf ( 19L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test5 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; FastqFileParser fastqFileParser0 = FastqFileParser . create ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parseFastqFile ( FastqVisitor visitor , TextLineParser parser , long initialOffset ) throws IOException { ParserState parserState = new ParserState ( initialOffset ) ; while ( parserState . keepParsing ( ) & & parser . hasNextLine ( ) ) { parserState = parseNextRecord ( visitor , parser , parserState ) ; } if ( parserState . keepParsing ( ) ) { visitor . visitEnd ( ) ; } else { visitor . halted ( ) ; } }
void test6 ( ) throws Throwable { FastqFileParser . OffsetMemento fastqFileParser_OffsetMemento0 = FastqFileParser . OffsetMemento . valueOf ( 4294967295L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T getValue ( ) { return value ; }
void test9 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; FastqFileParser fastqFileParser0 = FastqFileParser . create ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( String id ) ; }
void test13 ( ) throws Throwable { FastqFileParser . OffsetMemento fastqFileParser_OffsetMemento0 = FastqFileParser . OffsetMemento . valueOf ( 1325L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T getValue ( ) { return value ; }
void test14 ( ) throws Throwable { FastqFileParser . OffsetMemento fastqFileParser_OffsetMemento0 = FastqFileParser . OffsetMemento . valueOf ( 391L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T getValue ( ) { return value ; }
void test2 ( ) throws Throwable { FastqQualityCodec fastqQualityCodec0 = FastqUtil . guessQualityCodecUsed ( "J# [ uc , 'Op = ^ / = \" = s > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FastqQualityCodec guessQualityCodecUsed ( File fastqFile ) throws IOException { return guessQualityCodecUsed ( fastqFile , Integer . MAX_VALUE ) ; }
void test4 ( ) throws Throwable { FastqQualityCodec fastqQualityCodec0 = FastqUtil . guessQualityCodecUsed ( " < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test6 ( ) throws Throwable { FastqQualityCodec fastqQualityCodec0 = FastqUtil . guessQualityCodecUsed ( "adZTxxJQtmm" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FastqQualityCodec guessQualityCodecUsed ( File fastqFile ) throws IOException { return guessQualityCodecUsed ( fastqFile , Integer . MAX_VALUE ) ; }
void test4 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; FastqFileDataStoreBuilder fastqFileDataStoreBuilder0 = new FastqFileDataStoreBuilder ( file0 ) ; DataStoreProviderHint dataStoreProviderHint0 = DataStoreProviderHint . ITERATION_ONLY ; FastqFileDataStoreBuilder fastqFileDataStoreBuilder1 = fastqFileDataStoreBuilder0 . hint ( dataStoreProviderHint0 ) ; FastqQualityCodec fastqQualityCodec0 = FastqQualityCodec . SANGER ; fastqFileDataStoreBuilder1 . qualityCodec ( fastqQualityCodec0 ) ; FastqDataStore fastqDataStore0 = fastqFileDataStoreBuilder1 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test1 ( ) throws Throwable { PhredQuality phredQuality0 = SolexaUtil . convertSolexaQualityToPhredQuality ( ( - 16 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PhredQuality convertSolexaQualityToPhredQuality ( int solexaQuality ) { return SOLEXA_2_PHRED_MAP . get ( solexaQuality ) ; }
void test0 ( ) throws Throwable { FastqQualityCodec fastqQualityCodec0 = FastqQualityCodec . SOLEXA ; PhredQuality phredQuality0 = fastqQualityCodec0 . decode ( 'G' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encode ( Collection < T > glyphs ) ; / * * * Get a single Gyph from the encoded * byte array at the given index . * @param encodedGlyphs the byte array of * encoded glyphs . * @param index the index of the glyph * to get . * @return the decoded glyph * at the given index . * @throws IndexOutOfBoundsException if index is out of bounds * of the index . * / T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test1 ( ) throws Throwable { FastqQualityCodec fastqQualityCodec0 = FastqQualityCodec . SANGER ; QualitySequence qualitySequence0 = fastqQualityCodec0 . decode ( "SANGER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encode ( Collection < T > glyphs ) ; / * * * Get a single Gyph from the encoded * byte array at the given index . * @param encodedGlyphs the byte array of * encoded glyphs . * @param index the index of the glyph * to get . * @return the decoded glyph * at the given index . * @throws IndexOutOfBoundsException if index is out of bounds * of the index . * / T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test2 ( ) throws Throwable { FastqQualityCodec fastqQualityCodec0 = FastqQualityCodec . ILLUMINA ; QualitySequence qualitySequence0 = fastqQualityCodec0 . decode ( "^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encode ( Collection < T > glyphs ) ; / * * * Get a single Gyph from the encoded * byte array at the given index . * @param encodedGlyphs the byte array of * encoded glyphs . * @param index the index of the glyph * to get . * @return the decoded glyph * at the given index . * @throws IndexOutOfBoundsException if index is out of bounds * of the index . * / T decode ( byte [ ] encodedGlyphs , long index ) ; / * * * Get the number of glyphs * represented by the encoded byte * array . * @param encodedGlyphs the byte array of * glyphs . * @return an int > = 0 . * / int decodedLengthOf ( byte [ ] encodedGlyphs ) ; }
void test1 ( ) throws Throwable { IndexedFastqFileDataStore indexedFastqFileDataStore0 = new IndexedFastqFileDataStore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { boolean boolean0 = IlluminaUtil . isIlluminaRead ( "b , > & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIlluminaRead ( String readId ) { if ( readId = = null ) { throw new NullPointerException ( ) ; } Matcher matcher = NAME_PATTERN . matcher ( readId ) ; if ( matcher . matches ( ) ) { return true ; } return CASAVA_1_8_PATTERN . matcher ( readId ) . matches ( ) ; }
void test5 ( ) throws Throwable { boolean boolean0 = IlluminaUtil . isIlluminaRead ( "SOLEXA0 : 0 : 0 : 0 : 0# / 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIlluminaRead ( String readId ) { if ( readId = = null ) { throw new NullPointerException ( ) ; } Matcher matcher = NAME_PATTERN . matcher ( readId ) ; if ( matcher . matches ( ) ) { return true ; } return CASAVA_1_8_PATTERN . matcher ( readId ) . matches ( ) ; }
void test0 ( ) throws Throwable { ScaffoldBuilder scaffoldBuilder0 = DefaultScaffold . createBuilder ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IndexedQualitySequenceFastaDataStoreBuilderVisitor2 createBuilder ( File fastaFile , DataStoreFilter filter ) throws IOException { if ( fastaFile = = null ) { throw new NullPointerException ( "fasta file can not be null" ) ; } if ( ! fastaFile . exists ( ) ) { throw new FileNotFoundException ( fastaFile . getAbsolutePath ( ) ) ; } if ( filter = = null ) { throw new NullPointerException ( "filter can not be null" ) ; } return new IndexedQualitySequenceFastaDataStoreBuilderVisitor2 ( fastaFile , filter ) ; }
void test4 ( ) throws Throwable { int int0 = AssemblyUtil . getLeftFlankingNonGapIndex ( ( NucleotideSequence ) null , ( - 780 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLeftFlankingNonGapIndex ( NucleotideSequence gappedNucleotides , int gappedReadIndex ) { if ( gappedReadIndex < 0 ) { return gappedReadIndex ; } if ( gappedNucleotides . isGap ( gappedReadIndex ) ) { return getLeftFlankingNonGapIndex ( gappedNucleotides , gappedReadIndex - 1 ) ; } return gappedReadIndex ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( int ) ( byte ) ( - 103 ) , ( int ) ( byte ) ( - 63 ) ) ; TigrContigFileParser tigrContigFileParser0 = TigrContigFileParser . create ( ( InputStream ) byteArrayInputStream0 ) ; OpenAwareInputStream openAwareInputStream0 = ( OpenAwareInputStream ) tigrContigFileParser0 . getInputStream ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { if ( ! buffer . hasRemaining ( ) ) { return - 1 ; } / / need to return byte as unsigned return IOUtil . toUnsignedByte ( buffer . get ( ) ) ; }
void test1 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; TasmFileWriter . writeContigSeparator ( ( OutputStream ) byteArrayOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { TasmReadAttribute tasmReadAttribute0 = TasmReadAttribute . NAME ; String string0 = tasmReadAttribute0 . getAssemblyTableColumn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAssemblyTableColumn ( ) { return assemblyTableColumn ; }
void test2 ( ) throws Throwable { TasmReadAttribute tasmReadAttribute0 = TasmReadAttribute . getAttributeFor ( "seq_name" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test6 ( ) throws Throwable { AceAssembledReadAdapter aceAssembledReadAdapter0 = new AceAssembledReadAdapter ( ( AssembledRead ) null , ( PhdInfo ) null ) ; TasmAssembledReadAdapter tasmAssembledReadAdapter0 = new TasmAssembledReadAdapter ( ( AssembledRead ) aceAssembledReadAdapter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test13 ( ) throws Throwable { AceAssembledReadAdapter aceAssembledReadAdapter0 = new AceAssembledReadAdapter ( ( AssembledRead ) null , ( PhdInfo ) null ) ; TasmAssembledReadAdapter tasmAssembledReadAdapter0 = new TasmAssembledReadAdapter ( ( AssembledRead ) aceAssembledReadAdapter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test14 ( ) throws Throwable { AceAssembledReadAdapter aceAssembledReadAdapter0 = new AceAssembledReadAdapter ( ( AssembledRead ) null , ( PhdInfo ) null ) ; TasmAssembledReadAdapter tasmAssembledReadAdapter0 = new TasmAssembledReadAdapter ( ( AssembledRead ) aceAssembledReadAdapter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test15 ( ) throws Throwable { Date date0 = new Date ( ) ; PhdInfo phdInfo0 = new PhdInfo ( "X } 9_EU" , "X } 9_EU" , date0 ) ; AceAssembledReadAdapter aceAssembledReadAdapter0 = new AceAssembledReadAdapter ( ( AssembledRead ) null , phdInfo0 ) ; TasmAssembledReadAdapter tasmAssembledReadAdapter0 = new TasmAssembledReadAdapter ( ( AssembledRead ) aceAssembledReadAdapter0 ) ; boolean boolean0 = tasmAssembledReadAdapter0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test16 ( ) throws Throwable { AceAssembledReadAdapter aceAssembledReadAdapter0 = new AceAssembledReadAdapter ( ( AssembledRead ) null , ( PhdInfo ) null ) ; TasmAssembledReadAdapter tasmAssembledReadAdapter0 = new TasmAssembledReadAdapter ( ( AssembledRead ) aceAssembledReadAdapter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { Date date0 = new Date ( 1612L ) ; String string0 = TasmUtil . formatEditDate ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatEditDate ( Date editDate ) { if ( editDate = = null ) { throw new NullPointerException ( "edit date can not be null" ) ; } return TasmUtil . EDIT_DATE_FORMAT . format ( editDate ) ; }
void test9 ( ) throws Throwable { File file0 = new File ( "" ) ; File file1 = file0 . getCanonicalFile ( ) ; HashMap < String , FastaVisitorCallback . FastaVisitorMemento > hashMap0 = new HashMap < String , FastaVisitorCallback . FastaVisitorMemento > ( ) ; IndexedNucleotideSequenceFastaFileDataStore . IndexedNucleotideSequenceFastaFileDataStore2 indexedNucleotideSequenceFastaFileDataStore_IndexedNucleotideSequenceFastaFileDataStore2_0 = new IndexedNucleotideSequenceFastaFileDataStore . IndexedNucleotideSequenceFastaFileDataStore2 ( file0 , ( FastaFileParser ) null , ( DataStoreFilter ) null , ( Map < String , FastaVisitorCallback . FastaVisitorMemento > ) hashMap0 ) ; TasmContigFileDataStoreBuilder tasmContigFileDataStoreBuilder0 = new TasmContigFileDataStoreBuilder ( file1 , ( NucleotideFastaDataStore ) indexedNucleotideSequenceFastaFileDataStore_IndexedNucleotideSequenceFastaFileDataStore2_0 ) ; DataStoreProviderHint dataStoreProviderHint0 = DataStoreProviderHint . ITERATION_ONLY ; TasmContigFileDataStoreBuilder tasmContigFileDataStoreBuilder1 = tasmContigFileDataStoreBuilder0 . hint ( dataStoreProviderHint0 ) ; TasmContigDataStore tasmContigDataStore0 = tasmContigFileDataStoreBuilder1 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test0 ( ) throws Throwable { TasmContigAttribute tasmContigAttribute0 = TasmContigAttribute . NUMBER_OF_READS ; String string0 = tasmContigAttribute0 . getAssemblyTableColumn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAssemblyTableColumn ( ) { return assemblyTableColumn ; }
void test2 ( ) throws Throwable { TasmContigAttribute tasmContigAttribute0 = TasmContigAttribute . getAttributeFor ( "seq#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAssemblyTableColumn ( ) { return assemblyTableColumn ; }
void test6 ( ) throws Throwable { DefaultCasColorSpaceAlignmentScore defaultCasColorSpaceAlignmentScore0 = new DefaultCasColorSpaceAlignmentScore ( ( CasAlignmentScore ) null , ( - 1305 ) ) ; String string0 = defaultCasColorSpaceAlignmentScore0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test9 ( ) throws Throwable { DefaultCasColorSpaceAlignmentScore defaultCasColorSpaceAlignmentScore0 = new DefaultCasColorSpaceAlignmentScore ( ( CasAlignmentScore ) null , ( - 1346 ) ) ; int int0 = defaultCasColorSpaceAlignmentScore0 . getColorSpaceErrorCost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColorSpaceErrorCost ( ) { return colorSpaceError ; }
void test0 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( false , ( - 1098L ) , ( - 1098L ) , false , ( CasAlignment ) null , 0 ) ; long long0 = defaultCasMatch0 . getNumberOfReportedAlignments ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( true , 0L , 0L , true , ( CasAlignment ) null , ( - 640 ) ) ; int int0 = defaultCasMatch0 . getScore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean readIsPartOfAPair ( ) { return isPartOfPair ; }
void test2 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( false , ( - 1098L ) , ( - 1098L ) , false , ( CasAlignment ) null , 0 ) ; defaultCasMatch0 . getTrimRange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test3 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( true , ( - 6L ) , ( - 6L ) , true , ( CasAlignment ) null , 38 ) ; boolean boolean0 = defaultCasMatch0 . readIsPartOfAPair ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test4 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( true , 2L , 2L , true , ( CasAlignment ) null , ( - 345 ) , ( Range ) null ) ; long long0 = defaultCasMatch0 . getNumberOfMatches ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getScore ( ) { return score ; }
void test5 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( false , ( - 1098L ) , ( - 1098L ) , false , ( CasAlignment ) null , 0 ) ; boolean boolean0 = defaultCasMatch0 . matchReported ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getScore ( ) { return score ; }
void test6 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( true , ( - 6L ) , ( - 6L ) , true , ( CasAlignment ) null , 38 ) ; defaultCasMatch0 . getChosenAlignment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchReported ( ) { return hasMatch ; }
void test7 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( true , ( - 6L ) , ( - 6L ) , true , ( CasAlignment ) null , 38 ) ; boolean boolean0 = defaultCasMatch0 . hasMultipleAlignments ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchReported ( ) { return hasMatch ; }
void test8 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( false , 1825L , 1825L , false , ( CasAlignment ) null , ( - 1938 ) ) ; boolean boolean0 = defaultCasMatch0 . hasMultipleAlignments ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getScore ( ) { return score ; }
void test9 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( false , ( - 1098L ) , ( - 1098L ) , false , ( CasAlignment ) null , 0 ) ; boolean boolean0 = defaultCasMatch0 . readHasMutlipleMatches ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getScore ( ) { return score ; }
void test10 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( true , 2L , 2L , true , ( CasAlignment ) null , ( - 345 ) , ( Range ) null ) ; boolean boolean0 = defaultCasMatch0 . readHasMutlipleMatches ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchReported ( ) { return hasMatch ; }
void test11 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( true , 2L , 2L , true , ( CasAlignment ) null , ( - 345 ) , ( Range ) null ) ; String string0 = defaultCasMatch0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getScore ( ) { return score ; }
void test12 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( false , ( - 1098L ) , ( - 1098L ) , false , ( CasAlignment ) null , 0 ) ; int int0 = defaultCasMatch0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMultipleAlignments ( ) { return numberOfReportedAlignments > 1 ; }
void test13 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( true , 2L , 2L , true , ( CasAlignment ) null , ( - 345 ) , ( Range ) null ) ; int int0 = defaultCasMatch0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchReported ( ) { return hasMatch ; }
void test14 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( false , ( - 1098L ) , ( - 1098L ) , false , ( CasAlignment ) null , 0 ) ; DefaultCasMatch defaultCasMatch1 = new DefaultCasMatch ( false , ( - 1098L ) , ( - 1098L ) , true , ( CasAlignment ) null , 0 , ( Range ) null ) ; boolean boolean0 = defaultCasMatch0 . equals ( ( Object ) defaultCasMatch1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean readIsPartOfAPair ( ) { return isPartOfPair ; }
void test15 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( true , 0L , 0L , true , ( CasAlignment ) null , ( - 640 ) ) ; boolean boolean0 = defaultCasMatch0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean readIsPartOfAPair ( ) { return isPartOfPair ; }
void test16 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( true , 2L , 2L , true , ( CasAlignment ) null , ( - 345 ) , ( Range ) null ) ; Object object0 = new Object ( ) ; boolean boolean0 = defaultCasMatch0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test17 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( true , ( - 6L ) , ( - 6L ) , true , ( CasAlignment ) null , 38 ) ; DefaultCasMatch defaultCasMatch1 = new DefaultCasMatch ( false , ( long ) 38 , ( - 6L ) , false , ( CasAlignment ) null , 38 , ( Range ) null ) ; boolean boolean0 = defaultCasMatch0 . equals ( ( Object ) defaultCasMatch1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean readIsPartOfAPair ( ) { return isPartOfPair ; }
void test18 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( false , ( - 1098L ) , ( - 1098L ) , false , ( CasAlignment ) null , 0 ) ; DefaultCasMatch defaultCasMatch1 = new DefaultCasMatch ( false , ( long ) 0 , ( long ) 0 , false , ( CasAlignment ) null , 0 ) ; boolean boolean0 = defaultCasMatch0 . equals ( ( Object ) defaultCasMatch1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test19 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( true , ( - 6L ) , ( - 6L ) , true , ( CasAlignment ) null , 38 ) ; DefaultCasMatch defaultCasMatch1 = new DefaultCasMatch ( true , ( - 6L ) , ( - 6L ) , true , ( CasAlignment ) null , 38 ) ; boolean boolean0 = defaultCasMatch0 . equals ( ( Object ) defaultCasMatch1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getScore ( ) { return score ; }
void test20 ( ) throws Throwable { DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch ( true , 0L , 0L , true , ( CasAlignment ) null , ( - 640 ) ) ; DefaultCasMatch defaultCasMatch1 = new DefaultCasMatch ( true , 0L , 0L , true , ( CasAlignment ) null , 793 ) ; boolean boolean0 = defaultCasMatch0 . equals ( ( Object ) defaultCasMatch1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean readIsPartOfAPair ( ) { return isPartOfPair ; }
void test0 ( ) throws Throwable { File file0 = new File ( " * % ; 4lt [ Y ) JuY . { n" , " * % ; 4lt [ Y ) JuY . { n" ) ; ReadFileType readFileType0 = ReadFileType . getTypeFromFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ReadFileType getTypeFromFile ( File readFile ) { return getTypeFromFile ( readFile . getName ( ) ) ; }
void test1 ( ) throws Throwable { ReadFileType readFileType0 = ReadFileType . getTypeFromFile ( "s_0_sequence . txt" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ReadFileType getTypeFromFile ( File readFile ) { return getTypeFromFile ( readFile . getName ( ) ) ; }
void test2 ( ) throws Throwable { ReadFileType readFileType0 = ReadFileType . getTypeFromFile ( "V0sU ! WGM = Jp { . fastq . untrimmed" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ReadFileType getTypeFromFile ( File readFile ) { return getTypeFromFile ( readFile . getName ( ) ) ; }
void test3 ( ) throws Throwable { ReadFileType readFileType0 = ReadFileType . getTypeFromFile ( "11 . fasta . untrimmed" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ReadFileType getTypeFromFile ( File readFile ) { return getTypeFromFile ( readFile . getName ( ) ) ; }
void test0 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; BigInteger bigInteger0 = BigInteger . ONE ; DefaultCasFileInfo defaultCasFileInfo0 = new DefaultCasFileInfo ( ( List < String > ) linkedList0 , ( - 1734L ) , bigInteger0 ) ; String string0 = defaultCasFileInfo0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; BigInteger bigInteger0 = BigInteger . TEN ; DefaultCasFileInfo defaultCasFileInfo0 = new DefaultCasFileInfo ( ( List < String > ) linkedList0 , 399L , bigInteger0 ) ; long long0 = defaultCasFileInfo0 . getNumberOfSequences ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNumberOfSequences ( ) { return numberOfSequences ; }
void test2 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; BigInteger bigInteger0 = BigInteger . ONE ; DefaultCasFileInfo defaultCasFileInfo0 = new DefaultCasFileInfo ( ( List < String > ) linkedList0 , ( - 1734L ) , bigInteger0 ) ; List < String > list0 = defaultCasFileInfo0 . getFileNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNumberOfSequences ( ) { return numberOfSequences ; }
void test3 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; BigInteger bigInteger0 = BigInteger . ONE ; DefaultCasFileInfo defaultCasFileInfo0 = new DefaultCasFileInfo ( ( List < String > ) linkedList0 , ( - 1734L ) , bigInteger0 ) ; BigInteger bigInteger1 = defaultCasFileInfo0 . getNumberOfResidues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { CasScoreType casScoreType0 = CasScoreType . COLOR_SPACE_SCORE ; CasAlignmentType casAlignmentType0 = CasAlignmentType . REVERSE_SEMI_LOCAL ; DefaultCasScoringScheme defaultCasScoringScheme0 = new DefaultCasScoringScheme ( casScoreType0 , ( CasAlignmentScore ) null , casAlignmentType0 ) ; CasAlignmentType casAlignmentType1 = defaultCasScoringScheme0 . getAlignmentType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CasAlignmentType getAlignmentType ( ) ; CasAlignmentScore getAlignmentScore ( ) ; }
void test1 ( ) throws Throwable { CasScoreType casScoreType0 = CasScoreType . COLOR_SPACE_SCORE ; CasAlignmentType casAlignmentType0 = CasAlignmentType . REVERSE_SEMI_LOCAL ; DefaultCasScoringScheme defaultCasScoringScheme0 = new DefaultCasScoringScheme ( casScoreType0 , ( CasAlignmentScore ) null , casAlignmentType0 ) ; CasAlignmentScore casAlignmentScore0 = defaultCasScoringScheme0 . getAlignmentScore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CasAlignmentScore getAlignmentScore ( ) ; }
void test2 ( ) throws Throwable { CasScoreType casScoreType0 = CasScoreType . COLOR_SPACE_SCORE ; CasAlignmentType casAlignmentType0 = CasAlignmentType . REVERSE_SEMI_LOCAL ; DefaultCasScoringScheme defaultCasScoringScheme0 = new DefaultCasScoringScheme ( casScoreType0 , ( CasAlignmentScore ) null , casAlignmentType0 ) ; String string0 = defaultCasScoringScheme0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test3 ( ) throws Throwable { CasScoreType casScoreType0 = CasScoreType . COLOR_SPACE_SCORE ; CasAlignmentType casAlignmentType0 = CasAlignmentType . REVERSE_SEMI_LOCAL ; DefaultCasScoringScheme defaultCasScoringScheme0 = new DefaultCasScoringScheme ( casScoreType0 , ( CasAlignmentScore ) null , casAlignmentType0 ) ; CasScoreType casScoreType1 = defaultCasScoringScheme0 . getScoreType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CasScoreType getScoreType ( ) ; CasAlignmentType getAlignmentType ( ) ; CasAlignmentScore getAlignmentScore ( ) ; }
void test0 ( ) throws Throwable { CasScoreType casScoreType0 = CasScoreType . ALIGNMENT_SCORE ; byte byte0 = casScoreType0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < TimeTaggedDataRecord > getType ( ) { return TimeTaggedDataRecord . class ; }
void test0 ( ) throws Throwable { DefaultCasReferenceDescription defaultCasReferenceDescription0 = new DefaultCasReferenceDescription ( 450L , false ) ; long long0 = defaultCasReferenceDescription0 . getContigLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TasmContigBuilder isCircular ( boolean isCircular ) { this . isCircular = isCircular ; return this ; }
void test1 ( ) throws Throwable { DefaultCasReferenceDescription defaultCasReferenceDescription0 = new DefaultCasReferenceDescription ( 450L , false ) ; String string0 = defaultCasReferenceDescription0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test2 ( ) throws Throwable { DefaultCasReferenceDescription defaultCasReferenceDescription0 = new DefaultCasReferenceDescription ( 450L , false ) ; boolean boolean0 = defaultCasReferenceDescription0 . isCircular ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { CasAlignmentRegionType casAlignmentRegionType0 = CasAlignmentRegionType . DELETION ; DefaultCasAlignmentRegion defaultCasAlignmentRegion0 = new DefaultCasAlignmentRegion ( casAlignmentRegionType0 , 0L ) ; long long0 = defaultCasAlignmentRegion0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return codec . decodedLengthOf ( data ) ; }
void test1 ( ) throws Throwable { CasAlignmentRegionType casAlignmentRegionType0 = CasAlignmentRegionType . DELETION ; DefaultCasAlignmentRegion defaultCasAlignmentRegion0 = new DefaultCasAlignmentRegion ( casAlignmentRegionType0 , 448L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test2 ( ) throws Throwable { CasAlignmentRegionType casAlignmentRegionType0 = CasAlignmentRegionType . INSERT ; DefaultCasAlignmentRegion defaultCasAlignmentRegion0 = new DefaultCasAlignmentRegion ( casAlignmentRegionType0 , 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test3 ( ) throws Throwable { CasAlignmentRegionType casAlignmentRegionType0 = CasAlignmentRegionType . MATCH_MISMATCH ; DefaultCasAlignmentRegion defaultCasAlignmentRegion0 = new DefaultCasAlignmentRegion ( casAlignmentRegionType0 , 627L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test6 ( ) throws Throwable { CasAlignmentRegionType casAlignmentRegionType0 = CasAlignmentRegionType . DELETION ; DefaultCasAlignmentRegion defaultCasAlignmentRegion0 = new DefaultCasAlignmentRegion ( casAlignmentRegionType0 , 448L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test7 ( ) throws Throwable { CasAlignmentRegionType casAlignmentRegionType0 = CasAlignmentRegionType . DELETION ; DefaultCasAlignmentRegion defaultCasAlignmentRegion0 = new DefaultCasAlignmentRegion ( casAlignmentRegionType0 , 448L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return codec . decodedLengthOf ( data ) ; }
void test8 ( ) throws Throwable { CasAlignmentRegionType casAlignmentRegionType0 = CasAlignmentRegionType . MATCH_MISMATCH ; DefaultCasAlignmentRegion defaultCasAlignmentRegion0 = new DefaultCasAlignmentRegion ( casAlignmentRegionType0 , 627L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return codec . decodedLengthOf ( data ) ; }
void test9 ( ) throws Throwable { CasAlignmentRegionType casAlignmentRegionType0 = CasAlignmentRegionType . MATCH_MISMATCH ; DefaultCasAlignmentRegion defaultCasAlignmentRegion0 = new DefaultCasAlignmentRegion ( casAlignmentRegionType0 , 965L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return codec . decodedLengthOf ( data ) ; }
void test0 ( ) throws Throwable { PhaseChangeCasAlignmentRegion phaseChangeCasAlignmentRegion0 = new PhaseChangeCasAlignmentRegion ( ( byte ) ( - 1 ) ) ; int int0 = phaseChangeCasAlignmentRegion0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test1 ( ) throws Throwable { PhaseChangeCasAlignmentRegion phaseChangeCasAlignmentRegion0 = new PhaseChangeCasAlignmentRegion ( ( byte ) ( - 1 ) ) ; phaseChangeCasAlignmentRegion0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getPhaseChange ( ) { return phaseChange ; }
void test2 ( ) throws Throwable { PhaseChangeCasAlignmentRegion phaseChangeCasAlignmentRegion0 = new PhaseChangeCasAlignmentRegion ( ( byte ) ( - 1 ) ) ; long long0 = phaseChangeCasAlignmentRegion0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getPhaseChange ( ) { return phaseChange ; }
void test3 ( ) throws Throwable { PhaseChangeCasAlignmentRegion phaseChangeCasAlignmentRegion0 = new PhaseChangeCasAlignmentRegion ( ( byte ) ( - 1 ) ) ; byte byte0 = phaseChangeCasAlignmentRegion0 . getPhaseChange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getPhaseChange ( ) { return phaseChange ; }
void test4 ( ) throws Throwable { PhaseChangeCasAlignmentRegion phaseChangeCasAlignmentRegion0 = new PhaseChangeCasAlignmentRegion ( ( byte ) ( - 1 ) ) ; boolean boolean0 = phaseChangeCasAlignmentRegion0 . equals ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getPhaseChange ( ) { return phaseChange ; }
void test5 ( ) throws Throwable { PhaseChangeCasAlignmentRegion phaseChangeCasAlignmentRegion0 = new PhaseChangeCasAlignmentRegion ( ( byte ) 98 ) ; boolean boolean0 = phaseChangeCasAlignmentRegion0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getPhaseChange ( ) { return phaseChange ; }
void test6 ( ) throws Throwable { PhaseChangeCasAlignmentRegion phaseChangeCasAlignmentRegion0 = new PhaseChangeCasAlignmentRegion ( ( byte ) ( - 1 ) ) ; PhaseChangeCasAlignmentRegion phaseChangeCasAlignmentRegion1 = new PhaseChangeCasAlignmentRegion ( ( byte ) ( - 1 ) ) ; boolean boolean0 = phaseChangeCasAlignmentRegion1 . equals ( ( Object ) phaseChangeCasAlignmentRegion0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getPhaseChange ( ) { return phaseChange ; }
void test7 ( ) throws Throwable { PhaseChangeCasAlignmentRegion phaseChangeCasAlignmentRegion0 = new PhaseChangeCasAlignmentRegion ( ( byte ) ( - 1 ) ) ; PhaseChangeCasAlignmentRegion phaseChangeCasAlignmentRegion1 = new PhaseChangeCasAlignmentRegion ( ( byte ) 118 ) ; boolean boolean0 = phaseChangeCasAlignmentRegion0 . equals ( ( Object ) phaseChangeCasAlignmentRegion1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { DefaultCasAlignmentScore defaultCasAlignmentScore0 = new DefaultCasAlignmentScore ( ( - 617 ) , ( - 617 ) , ( - 1930 ) , ( - 617 ) , ( - 1930 ) , 0 , 0 , ( - 1 ) ) ; String string0 = defaultCasAlignmentScore0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { DefaultCasAlignmentScore defaultCasAlignmentScore0 = new DefaultCasAlignmentScore ( 0 , 446 , 446 , 446 , 1910 , 446 , 446 , 446 ) ; int int0 = defaultCasAlignmentScore0 . getTransitionScore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test2 ( ) throws Throwable { DefaultCasAlignmentScore defaultCasAlignmentScore0 = new DefaultCasAlignmentScore ( ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , 0 , ( - 1 ) , ( - 1 ) ) ; int int0 = defaultCasAlignmentScore0 . getTransversionScore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test3 ( ) throws Throwable { DefaultCasAlignmentScore defaultCasAlignmentScore0 = new DefaultCasAlignmentScore ( ( - 617 ) , ( - 617 ) , ( - 1930 ) , ( - 617 ) , ( - 1930 ) , 0 , 0 , ( - 1 ) ) ; int int0 = defaultCasAlignmentScore0 . getDeletionExtensionCost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test4 ( ) throws Throwable { DefaultCasAlignmentScore defaultCasAlignmentScore0 = new DefaultCasAlignmentScore ( ( - 617 ) , ( - 617 ) , ( - 1930 ) , ( - 617 ) , ( - 1930 ) , 0 , 0 , ( - 1 ) ) ; int int0 = defaultCasAlignmentScore0 . getInsertionExtensionCost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test5 ( ) throws Throwable { DefaultCasAlignmentScore defaultCasAlignmentScore0 = new DefaultCasAlignmentScore ( 0 , ( - 8 ) , ( - 8 ) , 1 , ( - 1 ) , ( - 1556 ) , 921 , 0 ) ; int int0 = defaultCasAlignmentScore0 . getUnknownScore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test6 ( ) throws Throwable { DefaultCasAlignmentScore defaultCasAlignmentScore0 = new DefaultCasAlignmentScore ( 0 , ( - 8 ) , ( - 8 ) , 1 , ( - 1 ) , ( - 1556 ) , 921 , 0 ) ; int int0 = defaultCasAlignmentScore0 . getFirstInsertionCost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test7 ( ) throws Throwable { DefaultCasAlignmentScore defaultCasAlignmentScore0 = new DefaultCasAlignmentScore ( ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , 0 , ( - 1 ) , ( - 1 ) ) ; int int0 = defaultCasAlignmentScore0 . getMatchScore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test8 ( ) throws Throwable { DefaultCasAlignmentScore defaultCasAlignmentScore0 = new DefaultCasAlignmentScore ( 0 , ( - 8 ) , ( - 8 ) , 1 , ( - 1 ) , ( - 1556 ) , 921 , 0 ) ; int int0 = defaultCasAlignmentScore0 . getFirstDeletionCost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { CasGappedReferenceDataStoreBuilderVisitor . Insertion casGappedReferenceDataStoreBuilderVisitor_Insertion0 = new CasGappedReferenceDataStoreBuilderVisitor . Insertion ( ( - 1531L ) ) ; long long0 = casGappedReferenceDataStoreBuilderVisitor_Insertion0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) { return slices . length ; }
void test1 ( ) throws Throwable { CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor ( ( File ) null ) ; String string0 = casGappedReferenceDataStoreBuilderVisitor0 . createGapStringOf ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createGapStringOf ( int maxGapSize ) { char [ ] gaps = new char [ maxGapSize ] ; Arrays . fill ( gaps , ' - ' ) ; return new String ( gaps ) ; }
void test9 ( ) throws Throwable { CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor ( ( File ) null ) ; CasMatchVisitor casMatchVisitor0 = casGappedReferenceDataStoreBuilderVisitor0 . visitMatches ( ( CasFileVisitor . CasVisitorCallback ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void visitMatches ( CasVisitorCallbackImpl callback , CasMatchVisitor visitor ) throws IOException { DataInputStream dataIn = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( casFile ) ) ) ; try { IOUtil . blockingSkip ( dataIn , 16 ) ; for ( int i = 0 ; callback . keepParsing ( ) & & i < numberOfReads ; i + + ) { byte info = dataIn . readByte ( ) ; boolean hasMatch = ( info & 0x01 ) ! = 0 ; boolean hasMultipleMatches = ( info & 0x02 ) ! = 0 ; boolean hasMultipleAlignments = ( info & 0x04 ) ! = 0 ; boolean isPartOfPair = ( info & 0x08 ) ! = 0 ; long totalNumberOfMatches = hasMatch ? 1 : 0 , numberOfReportedAlignments = hasMatch ? 1 : 0 ; if ( hasMultipleMatches ) { totalNumberOfMatches = CasUtil . parseByteCountFrom ( dataIn ) + 2 ; } if ( hasMultipleAlignments ) { numberOfReportedAlignments = CasUtil . parseByteCountFrom ( dataIn ) + 2 ; } int score = 0 ; CasAlignment chosenAlignment = null ; if ( hasMatch ) { long numberOfBytesInForThisMatch = CasUtil . parseByteCountFrom ( dataIn ) ; long contigSequenceId = CasUtil . readCasUnsignedInt ( dataIn , this . numberOfBytesForContigNumber ) ; long startPosition = CasUtil . readCasUnsignedInt ( dataIn , this . numberOfBytesForContigPosition ) ; boolean isreverse = dataIn . readBoolean ( ) ; DefaultCasAlignment . Builder builder = new DefaultCasAlignment . Builder ( contigSequenceId , startPosition , isreverse ) ; long count = 0 ; while ( count < numberOfBytesInForThisMatch ) { short matchValue = CasUtil . readCasUnsignedByte ( dataIn ) ; if ( matchValue = = 255 ) { builder . addPhaseChange ( dataIn . readByte ( ) ) ; count + + ; } else if ( matchValue < 128 ) { builder . addRegion ( CasAlignmentRegionType . MATCH_MISMATCH , matchValue + 1 ) ; } else if ( matchValue < 192 ) { builder . addRegion ( CasAlignmentRegionType . INSERT , matchValue - 127 ) ; } else { builder . addRegion ( CasAlignmentRegionType . DELETION , matchValue - 191 ) ; } count + + ; } chosenAlignment = builder . build ( ) ; } visitor . visitMatch ( new DefaultCasMatch ( hasMatch , totalNumberOfMatches , numberOfReportedAlignments , isPartOfPair , chosenAlignment , score ) ) ; } if ( callback . keepParsing ( ) ) { visitor . visitEnd ( ) ; } else { visitor . halted ( ) ; } } finally { IOUtil . closeAndIgnoreErrors ( dataIn ) ; } }
void test12 ( ) throws Throwable { CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor ( ( File ) null ) ; casGappedReferenceDataStoreBuilderVisitor0 . visitEnd ( ) ; CasGappedReferenceDataStore casGappedReferenceDataStore0 = casGappedReferenceDataStoreBuilderVisitor0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test15 ( ) throws Throwable { CasGappedReferenceDataStoreBuilderVisitor . Insertion casGappedReferenceDataStoreBuilderVisitor_Insertion0 = new CasGappedReferenceDataStoreBuilderVisitor . Insertion ( ( - 1531L ) ) ; casGappedReferenceDataStoreBuilderVisitor_Insertion0 . updateSize ( ( - 1531L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) { return slices . length ; }
void test16 ( ) throws Throwable { CasGappedReferenceDataStoreBuilderVisitor . Insertion casGappedReferenceDataStoreBuilderVisitor_Insertion0 = new CasGappedReferenceDataStoreBuilderVisitor . Insertion ( ( - 1531L ) ) ; casGappedReferenceDataStoreBuilderVisitor_Insertion0 . updateSize ( ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) { return slices . length ; }
void test0 ( ) throws Throwable { DefaultCasAlignment . Builder defaultCasAlignment_Builder0 = new DefaultCasAlignment . Builder ( 738L , 738L , true ) ; DefaultCasAlignment defaultCasAlignment0 = ( DefaultCasAlignment ) defaultCasAlignment_Builder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean readIsReversed ( ) ; List < CasAlignmentRegion > getAlignmentRegions ( ) ; }
void test1 ( ) throws Throwable { DefaultCasAlignment . Builder defaultCasAlignment_Builder0 = new DefaultCasAlignment . Builder ( ( - 7L ) , ( - 7L ) , false ) ; DefaultCasAlignment . Builder defaultCasAlignment_Builder1 = defaultCasAlignment_Builder0 . addPhaseChange ( ( byte ) 88 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getReferenceIndex ( ) ; long getStartOfMatch ( ) ; boolean readIsReversed ( ) ; List < CasAlignmentRegion > getAlignmentRegions ( ) ; }
void test2 ( ) throws Throwable { DefaultCasAlignment . Builder defaultCasAlignment_Builder0 = new DefaultCasAlignment . Builder ( 1L , 1L , false ) ; CasAlignmentRegionType casAlignmentRegionType0 = CasAlignmentRegionType . DELETION ; DefaultCasAlignment . Builder defaultCasAlignment_Builder1 = defaultCasAlignment_Builder0 . addRegion ( casAlignmentRegionType0 , 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getReferenceIndex ( ) ; long getStartOfMatch ( ) ; boolean readIsReversed ( ) ; List < CasAlignmentRegion > getAlignmentRegions ( ) ; }
void test3 ( ) throws Throwable { LinkedList < CasAlignmentRegion > linkedList0 = new LinkedList < CasAlignmentRegion > ( ) ; DefaultCasAlignment defaultCasAlignment0 = new DefaultCasAlignment ( 0L , ( long ) ( byte ) 44 , false , ( List < CasAlignmentRegion > ) linkedList0 ) ; int int0 = defaultCasAlignment0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test4 ( ) throws Throwable { DefaultCasAlignment . Builder defaultCasAlignment_Builder0 = new DefaultCasAlignment . Builder ( 738L , 738L , true ) ; DefaultCasAlignment defaultCasAlignment0 = ( DefaultCasAlignment ) defaultCasAlignment_Builder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean readIsReversed ( ) ; List < CasAlignmentRegion > getAlignmentRegions ( ) ; }
void test5 ( ) throws Throwable { LinkedList < CasAlignmentRegion > linkedList0 = new LinkedList < CasAlignmentRegion > ( ) ; DefaultCasAlignment defaultCasAlignment0 = new DefaultCasAlignment ( 0L , ( long ) ( byte ) 44 , false , ( List < CasAlignmentRegion > ) linkedList0 ) ; boolean boolean0 = defaultCasAlignment0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test6 ( ) throws Throwable { DefaultCasAlignment . Builder defaultCasAlignment_Builder0 = new DefaultCasAlignment . Builder ( 738L , 738L , true ) ; DefaultCasAlignment defaultCasAlignment0 = ( DefaultCasAlignment ) defaultCasAlignment_Builder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean readIsReversed ( ) ; List < CasAlignmentRegion > getAlignmentRegions ( ) ; }
void test7 ( ) throws Throwable { DefaultCasAlignment . Builder defaultCasAlignment_Builder0 = new DefaultCasAlignment . Builder ( ( - 6L ) , ( - 6L ) , false ) ; DefaultCasAlignment defaultCasAlignment0 = ( DefaultCasAlignment ) defaultCasAlignment_Builder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test8 ( ) throws Throwable { LinkedList < CasAlignmentRegion > linkedList0 = new LinkedList < CasAlignmentRegion > ( ) ; DefaultCasAlignment defaultCasAlignment0 = new DefaultCasAlignment ( ( - 189L ) , ( - 189L ) , true , ( List < CasAlignmentRegion > ) linkedList0 ) ; DefaultCasAlignment defaultCasAlignment1 = new DefaultCasAlignment ( 8L , ( - 189L ) , true , ( List < CasAlignmentRegion > ) linkedList0 ) ; boolean boolean0 = defaultCasAlignment0 . equals ( ( Object ) defaultCasAlignment1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test9 ( ) throws Throwable { LinkedList < CasAlignmentRegion > linkedList0 = new LinkedList < CasAlignmentRegion > ( ) ; DefaultCasAlignment defaultCasAlignment0 = new DefaultCasAlignment ( ( - 7L ) , ( - 7L ) , false , ( List < CasAlignmentRegion > ) linkedList0 ) ; DefaultCasAlignment defaultCasAlignment1 = new DefaultCasAlignment ( ( - 7L ) , ( - 7L ) , true , ( List < CasAlignmentRegion > ) linkedList0 ) ; boolean boolean0 = defaultCasAlignment0 . equals ( ( Object ) defaultCasAlignment1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test10 ( ) throws Throwable { LinkedList < CasAlignmentRegion > linkedList0 = new LinkedList < CasAlignmentRegion > ( ) ; DefaultCasAlignment defaultCasAlignment0 = new DefaultCasAlignment ( 0L , ( long ) ( byte ) 44 , false , ( List < CasAlignmentRegion > ) linkedList0 ) ; DefaultCasAlignment defaultCasAlignment1 = new DefaultCasAlignment ( 0L , 0L , false , ( List < CasAlignmentRegion > ) linkedList0 ) ; boolean boolean0 = defaultCasAlignment1 . equals ( ( Object ) defaultCasAlignment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test11 ( ) throws Throwable { DefaultCasAlignment . Builder defaultCasAlignment_Builder0 = new DefaultCasAlignment . Builder ( ( - 7L ) , ( - 7L ) , false ) ; DefaultCasAlignment . Builder defaultCasAlignment_Builder1 = defaultCasAlignment_Builder0 . addPhaseChange ( ( byte ) 88 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean readIsReversed ( ) ; List < CasAlignmentRegion > getAlignmentRegions ( ) ; }
void test13 ( ) throws Throwable { DefaultCasAlignment . Builder defaultCasAlignment_Builder0 = new DefaultCasAlignment . Builder ( 738L , 738L , true ) ; CasAlignmentRegionType casAlignmentRegionType0 = CasAlignmentRegionType . MATCH_MISMATCH ; defaultCasAlignment_Builder0 . addRegion ( casAlignmentRegionType0 , 738L ) ; DefaultCasAlignment . Builder defaultCasAlignment_Builder1 = defaultCasAlignment_Builder0 . addRegion ( casAlignmentRegionType0 , 738L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultCasAlignment ( long contigSequenceId , long startOfMatch , boolean readIsReversed , List < CasAlignmentRegion > alignmentRegions ) { this . contigSequenceId = contigSequenceId ; this . startOfMatch = startOfMatch ; this . readIsReversed = readIsReversed ; this . alignmentRegions = new ArrayList < CasAlignmentRegion > ( alignmentRegions ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; byteArray0 [ 0 ] = ( byte ) ( - 1 ) ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; long long0 = CasUtil . parseByteCountFrom ( ( InputStream ) byteArrayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int available ( ) throws IOException { return in . available ( ) ; }
void test5 ( ) throws Throwable { int int0 = CasUtil . numberOfBytesRequiredFor ( 761L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int numberOfBytesRequiredFor ( long i ) { if ( i < 1 ) { throw new IllegalArgumentException ( "input number must be > 0 : " + i ) ; } return ( int ) Math . ceil ( Math . log ( i ) / Math . log ( 256 ) ) ; }
void test0 ( ) throws Throwable { CasAlignmentType casAlignmentType0 = CasAlignmentType . GLOBAL ; byte byte0 = casAlignmentType0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T getValue ( ) { return value ; }
void test0 ( ) throws Throwable { CasAlignmentScoreBuilder casAlignmentScoreBuilder0 = new CasAlignmentScoreBuilder ( ) ; CasAlignmentScoreBuilder casAlignmentScoreBuilder1 = casAlignmentScoreBuilder0 . unknown ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CasAlignmentScoreBuilder unknown ( int unknown ) { this . unknown = unknown ; return this ; }
void test1 ( ) throws Throwable { CasAlignmentScoreBuilder casAlignmentScoreBuilder0 = new CasAlignmentScoreBuilder ( ) ; CasAlignmentScoreBuilder casAlignmentScoreBuilder1 = casAlignmentScoreBuilder0 . transversion ( ( - 647 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CasAlignmentScoreBuilder transversion ( int transversion ) { this . transversion = transversion ; return this ; }
void test2 ( ) throws Throwable { CasAlignmentScoreBuilder casAlignmentScoreBuilder0 = new CasAlignmentScoreBuilder ( ) ; CasAlignmentScoreBuilder casAlignmentScoreBuilder1 = casAlignmentScoreBuilder0 . deletionExtension ( ( - 1087 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CasAlignmentScoreBuilder deletionExtension ( int deletionExtension ) { this . deletionExtension = deletionExtension ; return this ; }
void test3 ( ) throws Throwable { CasAlignmentScoreBuilder casAlignmentScoreBuilder0 = new CasAlignmentScoreBuilder ( ) ; CasAlignmentScoreBuilder casAlignmentScoreBuilder1 = casAlignmentScoreBuilder0 . firstDeletion ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CasAlignmentScoreBuilder firstDeletion ( int firstDeletion ) { this . firstDeletion = firstDeletion ; return this ; }
void test4 ( ) throws Throwable { CasAlignmentScoreBuilder casAlignmentScoreBuilder0 = new CasAlignmentScoreBuilder ( ) ; CasAlignmentScoreBuilder casAlignmentScoreBuilder1 = casAlignmentScoreBuilder0 . colorSpaceError ( 1 ) ; CasAlignmentScore casAlignmentScore0 = ( CasAlignmentScore ) casAlignmentScoreBuilder1 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInsertionExtensionCost ( ) { return delegate . getInsertionExtensionCost ( ) ; }
void test5 ( ) throws Throwable { CasAlignmentScoreBuilder casAlignmentScoreBuilder0 = new CasAlignmentScoreBuilder ( ) ; CasAlignmentScoreBuilder casAlignmentScoreBuilder1 = casAlignmentScoreBuilder0 . insertionExtension ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CasAlignmentScoreBuilder insertionExtension ( int insertionExtension ) { this . insertionExtension = insertionExtension ; return this ; }
void test6 ( ) throws Throwable { CasAlignmentScoreBuilder casAlignmentScoreBuilder0 = new CasAlignmentScoreBuilder ( ) ; CasAlignmentScoreBuilder casAlignmentScoreBuilder1 = casAlignmentScoreBuilder0 . match ( ( - 947 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CasAlignmentScoreBuilder match ( int match ) { this . match = match ; return this ; }
void test7 ( ) throws Throwable { CasAlignmentScoreBuilder casAlignmentScoreBuilder0 = new CasAlignmentScoreBuilder ( ) ; CasAlignmentScoreBuilder casAlignmentScoreBuilder1 = casAlignmentScoreBuilder0 . transition ( ( - 1259 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CasAlignmentScoreBuilder transition ( int transition ) { this . transition = transition ; return this ; }
void test8 ( ) throws Throwable { CasAlignmentScoreBuilder casAlignmentScoreBuilder0 = new CasAlignmentScoreBuilder ( ) ; CasAlignmentScoreBuilder casAlignmentScoreBuilder1 = casAlignmentScoreBuilder0 . firstInsertion ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CasAlignmentScoreBuilder firstInsertion ( int firstInsertion ) { this . firstInsertion = firstInsertion ; return this ; }
void test9 ( ) throws Throwable { CasAlignmentScoreBuilder casAlignmentScoreBuilder0 = new CasAlignmentScoreBuilder ( ) ; CasAlignmentScore casAlignmentScore0 = ( CasAlignmentScore ) casAlignmentScoreBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransversionScore ( ) { return delegate . getTransversionScore ( ) ; }
void test0 ( ) throws Throwable { File file0 = new File ( "nulF kems nXt allowed" ) ; CasFileParser casFileParser0 = new CasFileParser ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CasFileParser ( File file ) throws IOException { / * parseMetaData ( file , visitor ) ; if ( parseMatches ) { parseMatches ( file , visitor ) ; } visitor . visitEndOfFile ( ) ; * / if ( file = = null ) { throw new NullPointerException ( "cas file can not be null" ) ; } this . casFile = file ; }
void test2 ( ) throws Throwable { CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor ( ( File ) null ) ; CasFileVisitorAdapter casFileVisitorAdapter0 = new CasFileVisitorAdapter ( ( CasFileVisitor ) casGappedReferenceDataStoreBuilderVisitor0 ) ; CasMatchVisitor casMatchVisitor0 = casFileVisitorAdapter0 . visitMatches ( ( CasFileVisitor . CasVisitorCallback ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void visitMatches ( CasVisitorCallbackImpl callback , CasMatchVisitor visitor ) throws IOException { DataInputStream dataIn = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( casFile ) ) ) ; try { IOUtil . blockingSkip ( dataIn , 16 ) ; for ( int i = 0 ; callback . keepParsing ( ) & & i < numberOfReads ; i + + ) { byte info = dataIn . readByte ( ) ; boolean hasMatch = ( info & 0x01 ) ! = 0 ; boolean hasMultipleMatches = ( info & 0x02 ) ! = 0 ; boolean hasMultipleAlignments = ( info & 0x04 ) ! = 0 ; boolean isPartOfPair = ( info & 0x08 ) ! = 0 ; long totalNumberOfMatches = hasMatch ? 1 : 0 , numberOfReportedAlignments = hasMatch ? 1 : 0 ; if ( hasMultipleMatches ) { totalNumberOfMatches = CasUtil . parseByteCountFrom ( dataIn ) + 2 ; } if ( hasMultipleAlignments ) { numberOfReportedAlignments = CasUtil . parseByteCountFrom ( dataIn ) + 2 ; } int score = 0 ; CasAlignment chosenAlignment = null ; if ( hasMatch ) { long numberOfBytesInForThisMatch = CasUtil . parseByteCountFrom ( dataIn ) ; long contigSequenceId = CasUtil . readCasUnsignedInt ( dataIn , this . numberOfBytesForContigNumber ) ; long startPosition = CasUtil . readCasUnsignedInt ( dataIn , this . numberOfBytesForContigPosition ) ; boolean isreverse = dataIn . readBoolean ( ) ; DefaultCasAlignment . Builder builder = new DefaultCasAlignment . Builder ( contigSequenceId , startPosition , isreverse ) ; long count = 0 ; while ( count < numberOfBytesInForThisMatch ) { short matchValue = CasUtil . readCasUnsignedByte ( dataIn ) ; if ( matchValue = = 255 ) { builder . addPhaseChange ( dataIn . readByte ( ) ) ; count + + ; } else if ( matchValue < 128 ) { builder . addRegion ( CasAlignmentRegionType . MATCH_MISMATCH , matchValue + 1 ) ; } else if ( matchValue < 192 ) { builder . addRegion ( CasAlignmentRegionType . INSERT , matchValue - 127 ) ; } else { builder . addRegion ( CasAlignmentRegionType . DELETION , matchValue - 191 ) ; } count + + ; } chosenAlignment = builder . build ( ) ; } visitor . visitMatch ( new DefaultCasMatch ( hasMatch , totalNumberOfMatches , numberOfReportedAlignments , isPartOfPair , chosenAlignment , score ) ) ; } if ( callback . keepParsing ( ) ) { visitor . visitEnd ( ) ; } else { visitor . halted ( ) ; } } finally { IOUtil . closeAndIgnoreErrors ( dataIn ) ; } }
void test11 ( ) throws Throwable { CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor ( ( File ) null ) ; CasFileVisitorAdapter casFileVisitorAdapter0 = new CasFileVisitorAdapter ( ( CasFileVisitor ) casGappedReferenceDataStoreBuilderVisitor0 ) ; CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor1 = ( CasGappedReferenceDataStoreBuilderVisitor ) casFileVisitorAdapter0 . getDelegate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CasMatchVisitor getDelegate ( ) { return delegate ; }
void test2 ( ) throws Throwable { Date date0 = new Date ( ) ; PhredQuality phredQuality0 = PhredQuality . valueOf ( 0 ) ; FastaConsedPhdAdaptedIterator fastaConsedPhdAdaptedIterator0 = new FastaConsedPhdAdaptedIterator ( ( StreamingIterator < NucleotideFastaRecord > ) null , ( File ) null , date0 , phredQuality0 ) ; fastaConsedPhdAdaptedIterator0 . createAdditionalCommentsFor ( "C" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test0 ( ) throws Throwable { GapQualityValueStrategy gapQualityValueStrategy0 = GapQualityValueStrategy . ALWAYS_ZERO ; PhredQuality phredQuality0 = PhredQuality . valueOf ( 41 ) ; PhredQuality phredQuality1 = gapQualityValueStrategy0 . computeQualityValueForGap ( ( - 2007 ) , 41 , phredQuality0 , phredQuality0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getErrorProbability ( ) { return Math . pow ( TEN , value / - TEN ) ; }
void test2 ( ) throws Throwable { GapQualityValueStrategy gapQualityValueStrategy0 = GapQualityValueStrategy . LOWEST_FLANKING ; PhredQuality phredQuality0 = PhredQuality . valueOf ( 5 ) ; PhredQuality phredQuality1 = gapQualityValueStrategy0 . computeQualityValueForGap ( 5 , 1058 , phredQuality0 , phredQuality0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { PriorityQueue < CoverageRegion < Rangeable > > priorityQueue0 = new PriorityQueue < CoverageRegion < Rangeable > > ( ) ; Iterator < CoverageRegion < Rangeable > > iterator0 = priorityQueue0 . iterator ( ) ; Integer integer0 = new Integer ( 248 ) ; DefaultCoverageRegion . Builder < CoverageRegion < Rangeable > > defaultCoverageRegion_Builder0 = new DefaultCoverageRegion . Builder < CoverageRegion < Rangeable > > ( ( - 1281L ) , iterator0 , integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void start ( ) { IteratorThread iteratorThread = new IteratorThread ( ) ; iteratorThread . start ( ) ; / / if the vm exits while we are still blocking / / we will run forever . . . / / add shutdown hook to try to kill ourselves Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ) { @Override void run ( ) { iteratorThread . kill ( ) ; } } ) ; blockingGetNextRecord ( ) ; }
void test1 ( ) throws Throwable { ArrayList < Rangeable > arrayList0 = new ArrayList < Rangeable > ( ) ; Iterator < Rangeable > iterator0 = arrayList0 . iterator ( ) ; DefaultCoverageRegion . Builder < Rangeable > defaultCoverageRegion_Builder0 = new DefaultCoverageRegion . Builder < Rangeable > ( ( - 1686L ) , iterator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void start ( ) { IteratorThread iteratorThread = new IteratorThread ( ) ; iteratorThread . start ( ) ; / / if the vm exits while we are still blocking / / we will run forever . . . / / add shutdown hook to try to kill ourselves Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ) { @Override void run ( ) { iteratorThread . kill ( ) ; } } ) ; blockingGetNextRecord ( ) ; }
void test2 ( ) throws Throwable { PriorityQueue < Rangeable > priorityQueue0 = new PriorityQueue < Rangeable > ( ) ; Integer integer0 = new Integer ( 621 ) ; DefaultCoverageRegion . Builder < Rangeable > defaultCoverageRegion_Builder0 = new DefaultCoverageRegion . Builder < Rangeable > ( ( - 1L ) , ( Iterable < Rangeable > ) priorityQueue0 , integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void start ( ) { IteratorThread iteratorThread = new IteratorThread ( ) ; iteratorThread . start ( ) ; / / if the vm exits while we are still blocking / / we will run forever . . . / / add shutdown hook to try to kill ourselves Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ) { @Override void run ( ) { iteratorThread . kill ( ) ; } } ) ; blockingGetNextRecord ( ) ; }
void test3 ( ) throws Throwable { PriorityQueue < Rangeable > priorityQueue0 = new PriorityQueue < Rangeable > ( ) ; Integer integer0 = new Integer ( 621 ) ; DefaultCoverageRegion . Builder < Rangeable > defaultCoverageRegion_Builder0 = new DefaultCoverageRegion . Builder < Rangeable > ( ( - 1L ) , ( Iterable < Rangeable > ) priorityQueue0 , integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test4 ( ) throws Throwable { HashSet < CoverageRegion < Rangeable > > hashSet0 = new HashSet < CoverageRegion < Rangeable > > ( ) ; Iterator < CoverageRegion < Rangeable > > iterator0 = hashSet0 . iterator ( ) ; DefaultCoverageRegion . Builder < CoverageRegion < Rangeable > > defaultCoverageRegion_Builder0 = new DefaultCoverageRegion . Builder < CoverageRegion < Rangeable > > ( 1239L , iterator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void end ( ) ; }
void test5 ( ) throws Throwable { PriorityQueue < Rangeable > priorityQueue0 = new PriorityQueue < Rangeable > ( ) ; Integer integer0 = new Integer ( 621 ) ; DefaultCoverageRegion . Builder < Rangeable > defaultCoverageRegion_Builder0 = new DefaultCoverageRegion . Builder < Rangeable > ( ( - 1L ) , ( Iterable < Rangeable > ) priorityQueue0 , integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test6 ( ) throws Throwable { PriorityQueue < Rangeable > priorityQueue0 = new PriorityQueue < Rangeable > ( ) ; Integer integer0 = new Integer ( 622 ) ; DefaultCoverageRegion . Builder < Rangeable > defaultCoverageRegion_Builder0 = new DefaultCoverageRegion . Builder < Rangeable > ( ( - 1L ) , ( Iterable < Rangeable > ) priorityQueue0 , integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test7 ( ) throws Throwable { PriorityQueue < Rangeable > priorityQueue0 = new PriorityQueue < Rangeable > ( ) ; Integer integer0 = new Integer ( 621 ) ; DefaultCoverageRegion . Builder < Rangeable > defaultCoverageRegion_Builder0 = new DefaultCoverageRegion . Builder < Rangeable > ( ( - 1L ) , ( Iterable < Rangeable > ) priorityQueue0 , integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test8 ( ) throws Throwable { PriorityQueue < Rangeable > priorityQueue0 = new PriorityQueue < Rangeable > ( ) ; Integer integer0 = new Integer ( 622 ) ; DefaultCoverageRegion . Builder < Rangeable > defaultCoverageRegion_Builder0 = new DefaultCoverageRegion . Builder < Rangeable > ( ( - 1L ) , ( Iterable < Rangeable > ) priorityQueue0 , integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test10 ( ) throws Throwable { PriorityQueue < Rangeable > priorityQueue0 = new PriorityQueue < Rangeable > ( ) ; Integer integer0 = new Integer ( 622 ) ; DefaultCoverageRegion . Builder < Rangeable > defaultCoverageRegion_Builder0 = new DefaultCoverageRegion . Builder < Rangeable > ( ( - 7L ) , ( Iterable < Rangeable > ) priorityQueue0 , integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { boolean delegateHasNext = delegate . hasNext ( ) ; if ( parentDataStore . isClosed ( ) & & delegateHasNext ) { IOUtil . closeAndIgnoreErrors ( this ) ; throw new DataStoreClosedException ( "datastore is closed" ) ; } return delegateHasNext ; }
void test11 ( ) throws Throwable { Stack < Rangeable > stack0 = new Stack < Rangeable > ( ) ; ListIterator < Rangeable > listIterator0 = stack0 . listIterator ( ) ; DefaultCoverageRegion . Builder < Rangeable > defaultCoverageRegion_Builder0 = new DefaultCoverageRegion . Builder < Rangeable > ( 4294967304L , ( Iterator < Rangeable > ) listIterator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void end ( ) ; }
void test12 ( ) throws Throwable { Stack < Rangeable > stack0 = new Stack < Rangeable > ( ) ; ListIterator < Rangeable > listIterator0 = stack0 . listIterator ( ) ; DefaultCoverageRegion . Builder < Rangeable > defaultCoverageRegion_Builder0 = new DefaultCoverageRegion . Builder < Rangeable > ( 4294967304L , ( Iterator < Rangeable > ) listIterator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void end ( ) ; }
void test13 ( ) throws Throwable { TreeSet < CoverageRegion < Rangeable > > treeSet0 = new TreeSet < CoverageRegion < Rangeable > > ( ) ; Iterator < CoverageRegion < Rangeable > > iterator0 = treeSet0 . iterator ( ) ; DefaultCoverageRegion . Builder < CoverageRegion < Rangeable > > defaultCoverageRegion_Builder0 = new DefaultCoverageRegion . Builder < CoverageRegion < Rangeable > > ( ( long ) 622 , iterator0 , ( Integer ) 622 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" D build ( ) throws IOException { return createNewInstance ( fastaFile , hint , filter ) ; }
void test0 ( ) throws Throwable { LinkedList < AssembledRead > linkedList0 = new LinkedList < AssembledRead > ( ) ; CoverageMap < AssembledRead > coverageMap0 = CoverageMapFactory . create ( ( Collection < AssembledRead > ) linkedList0 ) ; CoverageMap < AssembledRead > coverageMap1 = CoverageMapFactory . createUngappedCoverageMap ( ( NucleotideSequence ) null , coverageMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxCoverage ( ) ; / * * * Get a List of all the { @link CoverageRegion }
void test1 ( ) throws Throwable { LinkedList < Rangeable > linkedList0 = new LinkedList < Rangeable > ( ) ; Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . ZERO_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( long ) 1855 , 711L , range_CoordinateSystem0 ) ; linkedList0 . add ( ( Rangeable ) directedRange0 ) ; DirectedRange directedRange1 = DirectedRange . parse ( 711L , ( - 1395L ) , range_CoordinateSystem0 ) ; linkedList0 . add ( 0 , ( Rangeable ) directedRange1 ) ; CoverageMap < Rangeable > coverageMap0 = CoverageMapFactory . create ( ( Collection < Rangeable > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxCoverage ( ) ; / * * * Get a List of all the { @link CoverageRegion }
void test2 ( ) throws Throwable { LinkedList < Rangeable > linkedList0 = new LinkedList < Rangeable > ( ) ; Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . ZERO_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( long ) 1855 , 711L , range_CoordinateSystem0 ) ; linkedList0 . add ( ( Rangeable ) directedRange0 ) ; linkedList0 . add ( 0 , ( Rangeable ) directedRange0 ) ; CoverageMap < Rangeable > coverageMap0 = CoverageMapFactory . create ( ( Collection < Rangeable > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverageCoverage ( ) ; / * * * Get the lowest coverage depth of * any { @link CoverageRegion }
void test3 ( ) throws Throwable { LinkedList < Rangeable > linkedList0 = new LinkedList < Rangeable > ( ) ; Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . ZERO_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( long ) 1855 , 711L , range_CoordinateSystem0 ) ; linkedList0 . add ( ( Rangeable ) directedRange0 ) ; DirectedRange directedRange1 = DirectedRange . parse ( 711L , ( - 1395L ) , range_CoordinateSystem0 ) ; linkedList0 . add ( ( Rangeable ) directedRange1 ) ; CoverageMap < Rangeable > coverageMap0 = CoverageMapFactory . create ( ( Collection < Rangeable > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return wrappedDeque . isEmpty ( ) ; }
void test4 ( ) throws Throwable { LinkedList < Rangeable > linkedList0 = new LinkedList < Rangeable > ( ) ; Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . SPACE_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( - 1380L ) , ( - 1380L ) , range_CoordinateSystem0 ) ; linkedList0 . offer ( ( Rangeable ) directedRange0 ) ; CoverageMap < Rangeable > coverageMap0 = CoverageMapFactory . create ( ( Collection < Rangeable > ) linkedList0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfRegions ( ) ; / * * * Get the ith { @link CoverageRegion }
void test2 ( ) throws Throwable { LinkedList < Rangeable > linkedList0 = new LinkedList < Rangeable > ( ) ; CoverageMapBuilder < Rangeable > coverageMapBuilder0 = new CoverageMapBuilder < Rangeable > ( ( Collection < Rangeable > ) linkedList0 ) ; coverageMapBuilder0 . maxAllowedCoverage ( 1 ) ; CoverageMap < Rangeable > coverageMap0 = coverageMapBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfRegions ( ) ; / * * * Get the ith { @link CoverageRegion }
void test3 ( ) throws Throwable { LinkedList < Rangeable > linkedList0 = new LinkedList < Rangeable > ( ) ; CoverageMapBuilder < Rangeable > coverageMapBuilder0 = new CoverageMapBuilder < Rangeable > ( ( Collection < Rangeable > ) linkedList0 ) ; CoverageMap < Rangeable > coverageMap0 = coverageMapBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinCoverage ( ) ; / * * * Get the highest coverage depth of * any { @link CoverageRegion }
void test0 ( ) throws Throwable { ConicConsensusCaller conicConsensusCaller0 = new ConicConsensusCaller ( ( PhredQuality ) null ) ; PhredQuality phredQuality0 = conicConsensusCaller0 . getHighQualityThreshold ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PhredQuality getHighQualityThreshold ( ) { return highQualityThreshold ; }
void test1 ( ) throws Throwable { ConicConsensusCaller conicConsensusCaller0 = new ConicConsensusCaller ( ( PhredQuality ) null ) ; CompactedSlice compactedSlice0 = CompactedSlice . EMPTY ; ConsensusResult consensusResult0 = conicConsensusCaller0 . callConsensus ( ( Slice ) compactedSlice0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConsensusQuality ( ) ; }
void test2 ( ) throws Throwable { CompactedSlice compactedSlice0 = CompactedSlice . EMPTY ; NoAmbiguityConsensusCaller noAmbiguityConsensusCaller0 = new NoAmbiguityConsensusCaller ( ( PhredQuality ) null ) ; Map < Nucleotide , Integer > map0 = noAmbiguityConsensusCaller0 . generateBasecallHistogramMap ( ( Slice ) compactedSlice0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test3 ( ) throws Throwable { ConicConsensusCaller conicConsensusCaller0 = new ConicConsensusCaller ( ( PhredQuality ) null ) ; CompactedSlice compactedSlice0 = CompactedSlice . EMPTY ; ConsensusResult consensusResult0 = conicConsensusCaller0 . callConsensusWithCoverage ( ( Slice ) compactedSlice0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConsensusQuality ( ) ; }
void test0 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . NotGuanine ; ConsensusProbabilities consensusProbabilities0 = new ConsensusProbabilities ( nucleotide0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Cytosine ; ConsensusProbabilities consensusProbabilities0 = new ConsensusProbabilities ( nucleotide0 , 24 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test2 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Cytosine ; ConsensusProbabilities consensusProbabilities0 = new ConsensusProbabilities ( nucleotide0 , 24 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test3 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . NotGuanine ; ConsensusProbabilities consensusProbabilities0 = new ConsensusProbabilities ( nucleotide0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test4 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . NotGuanine ; ConsensusProbabilities consensusProbabilities0 = new ConsensusProbabilities ( nucleotide0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Double getProbabilityFor ( Nucleotide base ) { if ( base = = null ) { throw new NullPointerException ( "base can not be null" ) ; } return probabilityMap . get ( base ) ; }
void test0 ( ) throws Throwable { MostFrequentBasecallConsensusCaller mostFrequentBasecallConsensusCaller0 = MostFrequentBasecallConsensusCaller . INSTANCE ; DefaultSlice defaultSlice0 = DefaultSlice . EMPTY ; ConsensusResult consensusResult0 = mostFrequentBasecallConsensusCaller0 . callConsensus ( ( Slice ) defaultSlice0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConsensusQuality ( ) ; }
void test1 ( ) throws Throwable { MostFrequentBasecallConsensusCaller mostFrequentBasecallConsensusCaller0 = MostFrequentBasecallConsensusCaller . INSTANCE ; ConsensusResult consensusResult0 = mostFrequentBasecallConsensusCaller0 . callConsensus ( ( Slice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConsensusQuality ( ) ; }
void test0 ( ) throws Throwable { NoAmbiguityConsensusCaller noAmbiguityConsensusCaller0 = new NoAmbiguityConsensusCaller ( ( PhredQuality ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NoAmbiguityConsensusCaller ( PhredQuality highQualityThreshold ) { super ( highQualityThreshold ) ; }
void test0 ( ) throws Throwable { ConicConsensusCaller conicConsensusCaller0 = new ConicConsensusCaller ( ( PhredQuality ) null ) ; DefaultSlice defaultSlice0 = DefaultSlice . EMPTY ; Nucleotide nucleotide0 = conicConsensusCaller0 . getConsensus ( ( ConsensusProbabilities ) null , ( Slice ) defaultSlice0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Nucleotide getConsensus ( ) ; / * * * Return the quality of the consensus . This number may be * in the hundreds or thousands depending on the depth of * coverage . * @return an int ; will always be { @code > = 0 }
void test0 ( ) throws Throwable { DefaultConsensusResult defaultConsensusResult0 = new DefaultConsensusResult ( ( Nucleotide ) null , ( - 1763 ) ) ; defaultConsensusResult0 . getConsensus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConsensusQuality ( ) ; }
void test1 ( ) throws Throwable { DefaultConsensusResult defaultConsensusResult0 = new DefaultConsensusResult ( ( Nucleotide ) null , ( - 1763 ) ) ; int int0 = defaultConsensusResult0 . getConsensusQuality ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConsensusQuality ( ) ; }
void test2 ( ) throws Throwable { DefaultConsensusResult defaultConsensusResult0 = new DefaultConsensusResult ( ( Nucleotide ) null , ( - 1763 ) ) ; String string0 = defaultConsensusResult0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test3 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Pyrimidine ; DefaultConsensusResult defaultConsensusResult0 = new DefaultConsensusResult ( nucleotide0 , 0 ) ; int int0 = defaultConsensusResult0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test4 ( ) throws Throwable { DefaultConsensusResult defaultConsensusResult0 = new DefaultConsensusResult ( ( Nucleotide ) null , ( - 1763 ) ) ; int int0 = defaultConsensusResult0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test5 ( ) throws Throwable { DefaultConsensusResult defaultConsensusResult0 = new DefaultConsensusResult ( ( Nucleotide ) null , ( - 1763 ) ) ; boolean boolean0 = defaultConsensusResult0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConsensusQuality ( ) ; }
void test6 ( ) throws Throwable { DefaultConsensusResult defaultConsensusResult0 = new DefaultConsensusResult ( ( Nucleotide ) null , ( - 1763 ) ) ; Nucleotide nucleotide0 = Nucleotide . NotAdenine ; DefaultConsensusResult defaultConsensusResult1 = new DefaultConsensusResult ( nucleotide0 , 72 ) ; boolean boolean0 = defaultConsensusResult0 . equals ( ( Object ) defaultConsensusResult1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConsensusQuality ( ) ; }
void test7 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Unknown ; DefaultConsensusResult defaultConsensusResult0 = new DefaultConsensusResult ( nucleotide0 , ( - 1 ) ) ; boolean boolean0 = defaultConsensusResult0 . equals ( ( Object ) "N [ 0 ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test8 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Keto ; DefaultConsensusResult defaultConsensusResult0 = new DefaultConsensusResult ( nucleotide0 , 67 ) ; DefaultConsensusResult defaultConsensusResult1 = new DefaultConsensusResult ( nucleotide0 , 67 ) ; boolean boolean0 = defaultConsensusResult0 . equals ( ( Object ) defaultConsensusResult1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConsensusQuality ( ) ; }
void test9 ( ) throws Throwable { DefaultConsensusResult defaultConsensusResult0 = new DefaultConsensusResult ( ( Nucleotide ) null , ( - 1763 ) ) ; DefaultConsensusResult defaultConsensusResult1 = new DefaultConsensusResult ( ( Nucleotide ) null , 72 ) ; boolean boolean0 = defaultConsensusResult0 . equals ( ( Object ) defaultConsensusResult1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test10 ( ) throws Throwable { Nucleotide nucleotide0 = Nucleotide . Unknown ; Nucleotide nucleotide1 = Nucleotide . Gap ; DefaultConsensusResult defaultConsensusResult0 = new DefaultConsensusResult ( nucleotide0 , ( - 1 ) ) ; DefaultConsensusResult defaultConsensusResult1 = new DefaultConsensusResult ( nucleotide1 , 1252 ) ; boolean boolean0 = defaultConsensusResult0 . equals ( ( Object ) defaultConsensusResult1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { PhredQuality phredQuality0 = PhredQuality . valueOf ( 0 ) ; ChurchillWatermanConsensusCaller churchillWatermanConsensusCaller0 = new ChurchillWatermanConsensusCaller ( phredQuality0 ) ; CompactedSlice compactedSlice0 = CompactedSlice . EMPTY ; ConsensusResult consensusResult0 = churchillWatermanConsensusCaller0 . callConsensusWithCoverage ( ( Slice ) compactedSlice0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Nucleotide getConsensus ( ) ; / * * * Return the quality of the consensus . This number may be * in the hundreds or thousands depending on the depth of * coverage . * @return an int ; will always be { @code > = 0 }
void test3 ( ) throws Throwable { String string0 = ConsedUtil . convertContigGapstoAceGaps ( "INSTANCE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertContigGapstoAceGaps ( String basecallsWithAceGaps ) { return basecallsWithAceGaps . replace ( ' - ' , ' * ' ) ; }
void test4 ( ) throws Throwable { File file0 = new File ( ( File ) null , " : VYt" ) ; File file1 = ConsedUtil . getPhdDirFor ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getPhdDirFor ( File consedDir ) { verifyNotNull ( consedDir ) ; return new File ( consedDir , "phd_dir" ) ; }
void test6 ( ) throws Throwable { String string0 = ConsedUtil . convertAceGapsToContigGaps ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertAceGapsToContigGaps ( String basecallsWithAceGaps ) { return basecallsWithAceGaps . replace ( ' * ' , ' - ' ) ; }
void test7 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; File file1 = ConsedUtil . getLatestAceFile ( file0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getLatestAceFile ( File editDir , String filenamePrefix ) { / / need to also check that it does not exist if ( editDir = = null | | ! editDir . exists ( ) ) { return null ; } int highestAceFileVersion = Integer . MIN_VALUE ; File highestAceFile = null ; try { for ( File file : editDir . listFiles ( new FileFilter ( ) { @Override boolean accept ( File file ) { String name = file . getName ( ) ; return name . startsWith ( filenamePrefix ) & & CONSED_ACE_PATTERN . matcher ( name ) . find ( ) ; } } ) ) { int version = getAceVersionFor ( file ) ; if ( version > highestAceFileVersion ) { highestAceFileVersion = version ; highestAceFile = file ; } } return highestAceFile ; } catch ( NullPointerException e ) { throw e ; } }
void test8 ( ) throws Throwable { File file0 = new File ( ( File ) null , " : VYt" ) ; Date date0 = new Date ( ( - 279L ) ) ; PhdInfo phdInfo0 = ConsedUtil . generateDefaultPhdInfoFor ( file0 , " : VYt" , date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test9 ( ) throws Throwable { Date date0 = new Date ( ) ; ConsedUtil . generateDefaultPhdInfoFor ( ( File ) null , "'ta , iPkzyLv# ; 4A + " , date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test10 ( ) throws Throwable { AceContigBuilder aceContigBuilder0 = new AceContigBuilder ( "nar" , "nar" ) ; SortedMap < Range , AceContig > sortedMap0 = ConsedUtil . split0xContig ( aceContigBuilder0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test11 ( ) throws Throwable { AceContigBuilder aceContigBuilder0 = new AceContigBuilder ( "svar" , "svar" ) ; SortedMap < Range , AceContig > sortedMap0 = ConsedUtil . split0xContig ( aceContigBuilder0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test12 ( ) throws Throwable { File file0 = ConsedUtil . getLatestAceFile ( ( File ) null , "'ta , iPkzyLv# ; 4A + " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getLatestAceFile ( File editDir , String filenamePrefix ) { / / need to also check that it does not exist if ( editDir = = null | | ! editDir . exists ( ) ) { return null ; } int highestAceFileVersion = Integer . MIN_VALUE ; File highestAceFile = null ; try { for ( File file : editDir . listFiles ( new FileFilter ( ) { @Override boolean accept ( File file ) { String name = file . getName ( ) ; return name . startsWith ( filenamePrefix ) & & CONSED_ACE_PATTERN . matcher ( name ) . find ( ) ; } } ) ) { int version = getAceVersionFor ( file ) ; if ( version > highestAceFileVersion ) { highestAceFileVersion = version ; highestAceFile = file ; } } return highestAceFile ; } catch ( NullPointerException e ) { throw e ; } }
void test13 ( ) throws Throwable { File file0 = new File ( "nar" , "nar" ) ; File file1 = ConsedUtil . getLatestAceFile ( file0 , "nar" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getLatestAceFile ( File editDir , String filenamePrefix ) { / / need to also check that it does not exist if ( editDir = = null | | ! editDir . exists ( ) ) { return null ; } int highestAceFileVersion = Integer . MIN_VALUE ; File highestAceFile = null ; try { for ( File file : editDir . listFiles ( new FileFilter ( ) { @Override boolean accept ( File file ) { String name = file . getName ( ) ; return name . startsWith ( filenamePrefix ) & & CONSED_ACE_PATTERN . matcher ( name ) . find ( ) ; } } ) ) { int version = getAceVersionFor ( file ) ; if ( version > highestAceFileVersion ) { highestAceFileVersion = version ; highestAceFile = file ; } } return highestAceFile ; } catch ( NullPointerException e ) { throw e ; } }
void test14 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; File file1 = ConsedUtil . getLatestAceFile ( file0 , "INSTANCE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getLatestAceFile ( File editDir , String filenamePrefix ) { / / need to also check that it does not exist if ( editDir = = null | | ! editDir . exists ( ) ) { return null ; } int highestAceFileVersion = Integer . MIN_VALUE ; File highestAceFile = null ; try { for ( File file : editDir . listFiles ( new FileFilter ( ) { @Override boolean accept ( File file ) { String name = file . getName ( ) ; return name . startsWith ( filenamePrefix ) & & CONSED_ACE_PATTERN . matcher ( name ) . find ( ) ; } } ) ) { int version = getAceVersionFor ( file ) ; if ( version > highestAceFileVersion ) { highestAceFileVersion = version ; highestAceFile = file ; } } return highestAceFile ; } catch ( NullPointerException e ) { throw e ; } }
void test18 ( ) throws Throwable { ConsedUtil . ClipPointsType consedUtil_ClipPointsType0 = ConsedUtil . ClipPointsType . getType ( 396 , 0 , 396 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < TimeTaggedDataRecord > getType ( ) { return TimeTaggedDataRecord . class ; }
void test19 ( ) throws Throwable { ConsedUtil . ClipPointsType consedUtil_ClipPointsType0 = ConsedUtil . ClipPointsType . getType ( ( - 1 ) , 0 , 0 , 396 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < TimeTaggedDataRecord > getType ( ) { return TimeTaggedDataRecord . class ; }
void test20 ( ) throws Throwable { ConsedUtil . ClipPointsType consedUtil_ClipPointsType0 = ConsedUtil . ClipPointsType . getType ( ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < TimeTaggedDataRecord > getType ( ) { return TimeTaggedDataRecord . class ; }
void test21 ( ) throws Throwable { ConsedUtil . ClipPointsType consedUtil_ClipPointsType0 = ConsedUtil . ClipPointsType . getType ( ( - 133 ) , ( - 133 ) , 621 , 621 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < TimeTaggedDataRecord > getType ( ) { return TimeTaggedDataRecord . class ; }
void test0 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem ( ( List < String > ) linkedList0 ) ; List < String > list0 = defaultPhdWholeReadItem0 . getLines ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return wrappedDeque . isEmpty ( ) ; }
void test2 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem ( ( List < String > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test3 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem ( ( List < String > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test4 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem ( ( List < String > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem ( ( List < String > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test6 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; LinkedList < String > linkedList1 = new LinkedList < String > ( ( Collection < ? extends String > ) linkedList0 ) ; DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem ( ( List < String > ) linkedList1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { DefaultPhd defaultPhd0 = new DefaultPhd ( "'^~9iaGxC3pz" , ( NucleotideSequence ) null , ( QualitySequence ) null , ( PositionSequence ) null ) ; Map < String , String > map0 = defaultPhd0 . getComments ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { DefaultPhd defaultPhd0 = new DefaultPhd ( "aFnY : d^nHXD ! DYHv" , ( NucleotideSequence ) null , ( QualitySequence ) null , ( PositionSequence ) null ) ; List < PhdWholeReadItem > list0 = defaultPhd0 . getWholeReadItems ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return wrappedDeque . isEmpty ( ) ; }
void test2 ( ) throws Throwable { DefaultPhd defaultPhd0 = new DefaultPhd ( "aFnY : d^nHXD ! DYHv" , ( NucleotideSequence ) null , ( QualitySequence ) null , ( PositionSequence ) null ) ; String string0 = defaultPhd0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test4 ( ) throws Throwable { DefaultPhd defaultPhd0 = new DefaultPhd ( "aFnY : d^nHXD ! DYHv" , ( NucleotideSequence ) null , ( QualitySequence ) null , ( PositionSequence ) null ) ; QualitySequence qualitySequence0 = defaultPhd0 . getQualitySequence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" QualitySequence getQualitySequence ( ) { return qualities ; }
void test5 ( ) throws Throwable { DefaultPhd defaultPhd0 = new DefaultPhd ( "~zEn" , ( NucleotideSequence ) null , ( QualitySequence ) null , ( PositionSequence ) null ) ; List < PhdReadTag > list0 = defaultPhd0 . getReadTags ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test6 ( ) throws Throwable { DefaultPhd defaultPhd0 = new DefaultPhd ( "~zEn" , ( NucleotideSequence ) null , ( QualitySequence ) null , ( PositionSequence ) null ) ; PositionSequence positionSequence0 = defaultPhd0 . getPositionSequence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PositionSequence getPositionSequence ( ) { return positions ; }
void test7 ( ) throws Throwable { DefaultPhd defaultPhd0 = new DefaultPhd ( " * A" , ( NucleotideSequence ) null , ( QualitySequence ) null , ( PositionSequence ) null ) ; boolean boolean0 = defaultPhd0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test8 ( ) throws Throwable { DefaultPhd defaultPhd0 = new DefaultPhd ( "'^~9iaGxC3pz" , ( NucleotideSequence ) null , ( QualitySequence ) null , ( PositionSequence ) null ) ; boolean boolean0 = defaultPhd0 . equals ( ( Object ) " [ ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; short [ ] shortArray0 = new short [ 9 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; PhdBuilder phdBuilder0 = new PhdBuilder ( ( Chromatogram ) basicChromatogram0 ) ; ArrayList < PhdReadTag > arrayList0 = new ArrayList < PhdReadTag > ( ) ; PhdBuilder phdBuilder1 = phdBuilder0 . readTags ( ( List < PhdReadTag > ) arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PhdBuilder readTags ( List < PhdReadTag > readTags ) { this . readTags = new ArrayList < PhdReadTag > ( readTags ) ; return this ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; short [ ] shortArray0 = new short [ 5 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; PhdBuilder phdBuilder0 = new PhdBuilder ( ( Chromatogram ) basicChromatogram0 ) ; PhdBuilder phdBuilder1 = phdBuilder0 . comments ( ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PhdBuilder comments ( Map < String , String > comments ) { this . comments = new LinkedHashMap < String , String > ( comments ) ; return this ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; short [ ] shortArray0 = new short [ 5 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; PhdBuilder phdBuilder0 = new PhdBuilder ( ( Chromatogram ) basicChromatogram0 ) ; PhdBuilder phdBuilder1 = phdBuilder0 . copy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; short [ ] shortArray0 = new short [ 5 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; PhdBuilder phdBuilder0 = new PhdBuilder ( ( Chromatogram ) basicChromatogram0 ) ; ArrayList < PhdWholeReadItem > arrayList0 = new ArrayList < PhdWholeReadItem > ( ) ; PhdBuilder phdBuilder1 = phdBuilder0 . wholeReadItems ( ( List < PhdWholeReadItem > ) arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PhdBuilder wholeReadItems ( List < PhdWholeReadItem > wholeReadItems ) { this . wrs = new ArrayList < PhdWholeReadItem > ( wholeReadItems ) ; return this ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; short [ ] shortArray0 = new short [ 5 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; PhdBuilder phdBuilder0 = new PhdBuilder ( ( Chromatogram ) basicChromatogram0 ) ; PhdBuilder phdBuilder1 = phdBuilder0 . fakePeaks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PhdBuilder fakePeaks ( ) { return fakePeaks ( DEFAULT_START_POSITION , DEFAULT_PEAK_SPACING ) ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; short [ ] shortArray0 = new short [ 9 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "m" , "m" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; NucleotideSequence nucleotideSequence0 = basicChromatogram0 . getNucleotideSequence ( ) ; QualitySequence qualitySequence0 = defaultChannel0 . getConfidence ( ) ; PhdBuilder phdBuilder0 = new PhdBuilder ( "" , nucleotideSequence0 , qualitySequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PhdBuilder ( String id , NucleotideSequence sequence , QualitySequence qualities ) { if ( id = = null ) { throw new NullPointerException ( "id can not be null" ) ; } if ( sequence = = null ) { throw new NullPointerException ( "sequence can not be null" ) ; } if ( qualities = = null ) { throw new NullPointerException ( "qualities can not be null" ) ; } if ( sequence . getLength ( ) ! = qualities . getLength ( ) ) { throw new IllegalArgumentException ( "sequence and qualities have unequal lengths" ) ; } this . id = id ; this . sequence = sequence ; this . qualities = qualities ; }
void test11 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; short [ ] shortArray0 = new short [ 5 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; PhdBuilder phdBuilder0 = new PhdBuilder ( ( Chromatogram ) basicChromatogram0 ) ; Phd phd0 = ( Phd ) phdBuilder0 . build ( ) ; PhdBuilder phdBuilder1 = new PhdBuilder ( phd0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test13 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; short [ ] shortArray0 = new short [ 4 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; PhdBuilder phdBuilder0 = new PhdBuilder ( ( Chromatogram ) basicChromatogram0 ) ; PhdBuilder phdBuilder1 = phdBuilder0 . peaks ( ( PositionSequence ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PositionSequence peaks ( ) { return peaks ; }
void test14 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; short [ ] shortArray0 = new short [ 1 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; PhdBuilder phdBuilder0 = new PhdBuilder ( ( Chromatogram ) basicChromatogram0 ) ; PhdBuilder phdBuilder1 = phdBuilder0 . peaks ( positionSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PositionSequence peaks ( ) { return peaks ; }
void test18 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; short [ ] shortArray0 = new short [ 5 ] ; DefaultChannel defaultChannel0 = new DefaultChannel ( byteArray0 , shortArray0 ) ; PositionSequence positionSequence0 = defaultChannel0 . getPositions ( ) ; DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup ( ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 , ( Channel ) defaultChannel0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; BasicChromatogram basicChromatogram0 = new BasicChromatogram ( "" , "" , byteArray0 , positionSequence0 , ( ChannelGroup ) defaultChannelGroup0 , ( Map < String , String > ) hashMap0 ) ; PhdBuilder phdBuilder0 = new PhdBuilder ( ( Chromatogram ) basicChromatogram0 ) ; phdBuilder0 . fakePeaks ( 1 , ( int ) ( byte ) 106 ) ; Phd phd0 = ( Phd ) phdBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return this . id ; }
void test0 ( ) throws Throwable { DefaultPhdDataStore defaultPhdDataStore0 = new DefaultPhdDataStore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { DefaultPhdDataStore . DefaultPhdDataStoreBuilderVisitor defaultPhdDataStore_DefaultPhdDataStoreBuilderVisitor0 = new DefaultPhdDataStore . DefaultPhdDataStoreBuilderVisitor ( ( DataStoreFilter ) null ) ; Proxy proxy0 = ( Proxy ) defaultPhdDataStore_DefaultPhdDataStoreBuilderVisitor0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" D build ( ) throws IOException { return createNewInstance ( fastaFile , hint , filter ) ; }
void test0 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; SinglePhdWriter singlePhdWriter0 = new SinglePhdWriter ( ( OutputStream ) byteArrayOutputStream0 ) ; singlePhdWriter0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { Date date0 = new Date ( ) ; Map < String , String > map0 = PhdUtil . createPhdTimeStampAndChromatFileCommentsFor ( date0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test2 ( ) throws Throwable { Date date0 = new Date ( ) ; String string0 = PhdUtil . formatReadTagDate ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test3 ( ) throws Throwable { Date date0 = new Date ( ) ; PhdUtil . createPhdTimeStampCommentFor ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test4 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; PhdFileDataStoreBuilder phdFileDataStoreBuilder0 = new PhdFileDataStoreBuilder ( file0 ) ; DataStoreProviderHint dataStoreProviderHint0 = DataStoreProviderHint . ITERATION_ONLY ; phdFileDataStoreBuilder0 . hint ( dataStoreProviderHint0 ) ; PhdDataStore phdDataStore0 = ( PhdDataStore ) phdFileDataStoreBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test0 ( ) throws Throwable { Date date0 = new Date ( ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( ( String ) null , ( String ) null , ( Range ) null , date0 , ( String ) null , ( String ) null ) ; defaultPhdReadTag0 . getFreeFormData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test1 ( ) throws Throwable { Date date0 = new Date ( ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( ( String ) null , ( String ) null , ( Range ) null , date0 , ( String ) null , ( String ) null ) ; defaultPhdReadTag0 . getComment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test2 ( ) throws Throwable { Date date0 = new Date ( ( - 12L ) ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( "li * afU / SPKat~v'k + " , "li * afU / SPKat~v'k + " , ( Range ) null , date0 , "li * afU / SPKat~v'k + " , "li * afU / SPKat~v'k + " ) ; String string0 = defaultPhdReadTag0 . getSource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSource ( ) { return source ; }
void test3 ( ) throws Throwable { DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( " * " , " * " , ( Range ) null , ( Date ) null , " * " , " * " ) ; String string0 = defaultPhdReadTag0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < TimeTaggedDataRecord > getType ( ) { return TimeTaggedDataRecord . class ; }
void test4 ( ) throws Throwable { Date date0 = new Date ( 6L ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( ( String ) null , "9^Wi } EU . 9^eL | } U ] " , ( Range ) null , date0 , ( String ) null , "9^Wi } EU . 9^eL | } U ] " ) ; Range range0 = defaultPhdReadTag0 . getUngappedRange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Range getUngappedRange ( ) { return ungappedRange ; }
void test5 ( ) throws Throwable { DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( "D [ %d . . %d ] %" , "D [ %d . . %d ] %" , ( Range ) null , ( Date ) null , "D [ %d . . %d ] %" , "D [ %d . . %d ] %" ) ; Date date0 = defaultPhdReadTag0 . getDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getDate ( ) { return date ; }
void test6 ( ) throws Throwable { DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( "D [ %d . . %d ] %" , "D [ %d . . %d ] %" , ( Range ) null , ( Date ) null , "D [ %d . . %d ] %" , "D [ %d . . %d ] %" ) ; int int0 = defaultPhdReadTag0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test7 ( ) throws Throwable { Date date0 = new Date ( ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( ( String ) null , ( String ) null , ( Range ) null , date0 , ( String ) null , ( String ) null ) ; int int0 = defaultPhdReadTag0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test8 ( ) throws Throwable { Date date0 = new Date ( ( - 12L ) ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( "li * afU / SPKat~v'k + " , "li * afU / SPKat~v'k + " , ( Range ) null , date0 , "li * afU / SPKat~v'k + " , "li * afU / SPKat~v'k + " ) ; DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag ( " [ $B" , " [ $B" , ( Range ) null , date0 , "li * afU / SPKat~v'k + " , "li * afU / SPKat~v'k + " ) ; boolean boolean0 = defaultPhdReadTag1 . equals ( ( Object ) defaultPhdReadTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComment ( ) { return comments ; }
void test9 ( ) throws Throwable { Date date0 = new Date ( ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( ( String ) null , ( String ) null , ( Range ) null , date0 , ( String ) null , ( String ) null ) ; boolean boolean0 = defaultPhdReadTag0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test10 ( ) throws Throwable { Date date0 = new Date ( ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( ( String ) null , ( String ) null , ( Range ) null , date0 , ( String ) null , ( String ) null ) ; boolean boolean0 = defaultPhdReadTag0 . equals ( ( Object ) "Thu Jan 01 01 : 00 : 00 GMT 1970" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test11 ( ) throws Throwable { Date date0 = new Date ( ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( ( String ) null , ( String ) null , ( Range ) null , date0 , ( String ) null , ( String ) null ) ; DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag ( ( String ) null , ( String ) null , ( Range ) null , date0 , ( String ) null , ( String ) null ) ; boolean boolean0 = defaultPhdReadTag1 . equals ( ( Object ) defaultPhdReadTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test12 ( ) throws Throwable { Date date0 = new Date ( 132L ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( ( String ) null , ( String ) null , ( Range ) null , date0 , ( String ) null , " < remy" ) ; DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag ( " < remy" , " < remy" , ( Range ) null , date0 , " < remy" , " < remy" ) ; boolean boolean0 = defaultPhdReadTag0 . equals ( ( Object ) defaultPhdReadTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test13 ( ) throws Throwable { Date date0 = new Date ( ( - 12L ) ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( "li * afU / SPKat~v'k + " , "li * afU / SPKat~v'k + " , ( Range ) null , date0 , "li * afU / SPKat~v'k + " , "li * afU / SPKat~v'k + " ) ; DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag ( " [ $B" , " [ $B" , ( Range ) null , date0 , " [ $B" , " [ $B" ) ; boolean boolean0 = defaultPhdReadTag0 . equals ( ( Object ) defaultPhdReadTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test14 ( ) throws Throwable { DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( " * " , " * " , ( Range ) null , ( Date ) null , " * " , " * " ) ; Date date0 = new Date ( ( - 6L ) ) ; DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag ( " * " , " * " , ( Range ) null , date0 , " * " , " * " ) ; boolean boolean0 = defaultPhdReadTag0 . equals ( ( Object ) defaultPhdReadTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test15 ( ) throws Throwable { DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( "D [ %d . . %d ] %" , "D [ %d . . %d ] %" , ( Range ) null , ( Date ) null , "D [ %d . . %d ] %" , "D [ %d . . %d ] %" ) ; DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag ( "D [ %d . . %d ] %" , "D [ %d . . %d ] %" , ( Range ) null , ( Date ) null , "D [ %d . . %d ] %" , "D [ %d . . %d ] %" ) ; boolean boolean0 = defaultPhdReadTag0 . equals ( ( Object ) defaultPhdReadTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test16 ( ) throws Throwable { Date date0 = new Date ( ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( ( String ) null , ( String ) null , ( Range ) null , date0 , ( String ) null , ( String ) null ) ; Date date1 = new Date ( 809L ) ; DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag ( ( String ) null , ( String ) null , ( Range ) null , date1 , ( String ) null , ( String ) null ) ; boolean boolean0 = defaultPhdReadTag1 . equals ( ( Object ) defaultPhdReadTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test17 ( ) throws Throwable { Date date0 = new Date ( ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( "ptR6naii1 ( xiz < | " , ( String ) null , ( Range ) null , date0 , "ptR6naii1 ( xiz < | " , "ptR6naii1 ( xiz < | " ) ; DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag ( "ptR6naii1 ( xiz < | " , "ptR6naii1 ( xiz < | " , ( Range ) null , date0 , "ptR6naii1 ( xiz < | " , ( String ) null ) ; boolean boolean0 = defaultPhdReadTag1 . equals ( ( Object ) defaultPhdReadTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test18 ( ) throws Throwable { Date date0 = new Date ( ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( "X , NC / i" , "X , NC / i" , ( Range ) null , date0 , "X , NC / i" , "X , NC / i" ) ; DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag ( "" , "X , NC / i" , ( Range ) null , date0 , "X , NC / i" , "" ) ; boolean boolean0 = defaultPhdReadTag0 . equals ( ( Object ) defaultPhdReadTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test19 ( ) throws Throwable { Date date0 = new Date ( ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( "ptR6naii1 ( xiz < | " , ( String ) null , ( Range ) null , date0 , "ptR6naii1 ( xiz < | " , "ptR6naii1 ( xiz < | " ) ; DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag ( "ptR6naii1 ( xiz < | " , "ptR6naii1 ( xiz < | " , ( Range ) null , date0 , "ptR6naii1 ( xiz < | " , "ptR6naii1 ( xiz < | " ) ; boolean boolean0 = defaultPhdReadTag0 . equals ( ( Object ) defaultPhdReadTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test20 ( ) throws Throwable { Date date0 = new Date ( 6L ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( ( String ) null , "9^Wi } EU . 9^eL | } U ] " , ( Range ) null , date0 , ( String ) null , "9^Wi } EU . 9^eL | } U ] " ) ; DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag ( "9^Wi } EU . 9^eL | } U ] " , "9^Wi } EU . 9^eL | } U ] " , ( Range ) null , date0 , ( String ) null , "9^Wi } EU . 9^eL | } U ] " ) ; boolean boolean0 = defaultPhdReadTag0 . equals ( ( Object ) defaultPhdReadTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test21 ( ) throws Throwable { Date date0 = new Date ( ) ; DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag ( "ptR6naii1 ( xiz < | " , ( String ) null , ( Range ) null , date0 , "ptR6naii1 ( xiz < | " , "ptR6naii1 ( xiz < | " ) ; DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag ( ( String ) null , ( String ) null , ( Range ) null , date0 , "ptR6naii1 ( xiz < | " , "ptR6naii1 ( xiz < | " ) ; boolean boolean0 = defaultPhdReadTag0 . equals ( ( Object ) defaultPhdReadTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test0 ( ) throws Throwable { FileDescriptor fileDescriptor0 = FileDescriptor . err ; FileInputStream fileInputStream0 = new FileInputStream ( fileDescriptor0 ) ; PhdBallParser phdBallParser0 = PhdBallParser . create ( ( InputStream ) fileInputStream0 ) ; PhdBallVisitorCallback phdBallVisitorCallback0 = phdBallParser0 . createCallback ( ( PhdBallParser . ParserState ) null , ( - 1311L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canCreateMemento ( ) ; / * * * Create a { @link FastaVisitorMemento }
void test1 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; PhdBallParser phdBallParser0 = PhdBallParser . create ( file0 ) ; PhdBallVisitorCallback phdBallVisitorCallback0 = phdBallParser0 . createCallback ( ( PhdBallParser . ParserState ) null , ( - 1496L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canCreateMemento ( ) ; / * * * Create a { @link FastaVisitorMemento }
void test11 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; PhdBallParser phdBallParser0 = PhdBallParser . create ( ( InputStream ) byteArrayInputStream0 ) ; IndexedPhdDataStore . SinglePhdVisitor indexedPhdDataStore_SinglePhdVisitor0 = new IndexedPhdDataStore . SinglePhdVisitor ( "I / g" ) ; phdBallParser0 . accept ( ( PhdBallVisitor ) indexedPhdDataStore_SinglePhdVisitor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int read ( ) throws IOException { if ( ! buffer . hasRemaining ( ) ) { return - 1 ; } / / need to return byte as unsigned return IOUtil . toUnsignedByte ( buffer . get ( ) ) ; }
void test1 ( ) throws Throwable { IndexedPhdDataStore . SinglePhdVisitor indexedPhdDataStore_SinglePhdVisitor0 = new IndexedPhdDataStore . SinglePhdVisitor ( " ] qRe < , " ) ; PhdVisitor phdVisitor0 = indexedPhdDataStore_SinglePhdVisitor0 . visitPhd ( ( PhdBallVisitorCallback ) null , " ] qRe < , " , ( Integer ) 240 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PhdVisitor visitPhd ( PhdBallVisitorCallback callback , String id , Integer version ) { / / always skip return null ; }
void test1 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PhdBallWriter phdBallWriter0 = new PhdBallWriter ( ( OutputStream ) byteArrayOutputStream0 , "uHyYC ] aI GWuv ( : U53" ) ; phdBallWriter0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; PhdDirQualityDataStore phdDirQualityDataStore0 = new PhdDirQualityDataStore ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test2 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; PhdDirQualityDataStore phdDirQualityDataStore0 = new PhdDirQualityDataStore ( file0 ) ; phdDirQualityDataStore0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test3 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; PhdDirQualityDataStore phdDirQualityDataStore0 = new PhdDirQualityDataStore ( file0 ) ; StreamingIterator < String > streamingIterator0 = phdDirQualityDataStore0 . idIterator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" StreamingIterator < String > idIterator ( ) throws DataStoreException { throwExceptionIfClosed ( ) ; return idIteratorImpl ( ) ; }
void test4 ( ) throws Throwable { File file0 = new File ( "xS } . lW0r ; " ) ; File file1 = file0 . getCanonicalFile ( ) ; File file2 = file1 . getParentFile ( ) ; PhdDirQualityDataStore phdDirQualityDataStore0 = new PhdDirQualityDataStore ( file2 ) ; StreamingIterator < Phd > streamingIterator0 = phdDirQualityDataStore0 . iterator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Iterator < T > iterator ( ) { return new RangedIterator ( ) ; }
void test5 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; PhdDirQualityDataStore phdDirQualityDataStore0 = new PhdDirQualityDataStore ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNumberOfRecords ( ) throws DataStoreException { throwExceptionIfClosed ( ) ; return getNumberOfRecordsImpl ( ) ; }
void test7 ( ) throws Throwable { File file0 = new File ( "xS } . lW0r ; " ) ; File file1 = file0 . getCanonicalFile ( ) ; File file2 = file1 . getParentFile ( ) ; PhdDirQualityDataStore phdDirQualityDataStore0 = new PhdDirQualityDataStore ( file2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( String id ) throws DataStoreException { if ( id = = null ) { throw new NullPointerException ( "id can not be null" ) ; } throwExceptionIfClosed ( ) ; return containsImpl ( id ) ; }
void test0 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; ConsedNavigationWriter consedNavigationWriter0 = ConsedNavigationWriter . createPartial ( ( OutputStream ) byteArrayOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test1 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; ConsedNavigationWriter . create ( "UNPADDED_CONS_POS : %d %d\n" , ( OutputStream ) byteArrayOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test3 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; ConsedNavigationWriter consedNavigationWriter0 = new ConsedNavigationWriter ( ( OutputStream ) byteArrayOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ConsedNavigationWriter ( OutputStream out ) throws IOException { if ( out = = null ) { throw new NullPointerException ( "output stream can not be null" ) ; } this . out = out ; }
void test5 ( ) throws Throwable { Date date0 = new Date ( ( - 1L ) ) ; String string0 = AceFileUtil . formatPhdDate ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatPhdDate ( Date date ) { return CHROMAT_DATE_TIME_FORMATTER . format ( date ) ; }
void test8 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; AceFileUtil . writeAceContigHeader ( "XECMe . 8 } 2~'e ] Z = ! " , ( long ) 8 , ( long ) 8 , 8 , false , ( OutputStream ) byteArrayOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test9 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 0 ) ; AceFileUtil . writeAceContigHeader ( "" , ( - 1L ) , ( - 1L ) , 0 , true , ( OutputStream ) byteArrayOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { Date date0 = new Date ( ) ; Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . RESIDUE_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( 0L , 0L , range_CoordinateSystem0 ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "RESIDUE_BASED" , "RESIDUE_BASED" , "RESIDUE_BASED" , date0 , ( Rangeable ) directedRange0 , false ) ; String string0 = readAceTag0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test1 ( ) throws Throwable { Date date0 = new Date ( 1136L ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "" , "" , "" , date0 , ( Rangeable ) null , true ) ; int int0 = readAceTag0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test2 ( ) throws Throwable { Date date0 = new Date ( 1L ) ; Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . RESIDUE_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( 1L , ( - 137L ) , range_CoordinateSystem0 ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "N > Y ( E" , "N > Y ( E" , "N > Y ( E" , date0 , ( Rangeable ) directedRange0 , false ) ; boolean boolean0 = readAceTag0 . equals ( ( Object ) readAceTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test3 ( ) throws Throwable { Date date0 = new Date ( ) ; Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . RESIDUE_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( 0L , 0L , range_CoordinateSystem0 ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "RESIDUE_BASED" , "RESIDUE_BASED" , "RESIDUE_BASED" , date0 , ( Rangeable ) directedRange0 , false ) ; boolean boolean0 = readAceTag0 . equals ( ( Object ) "ReadAceTag [ getId ( ) = RESIDUE_BASED , getType ( ) = RESIDUE_BASED , getCreator ( ) = RESIDUE_BASED , getCreationDate ( ) = Tue Jul 02 02 : 40 : 16 BST 2013 , asRange ( ) = [ - 1 . . - 1 ] / 0B , getData ( ) = null , isTransient ( ) = false ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test0 ( ) throws Throwable { ConsedConsensusQualityComputer consedConsensusQualityComputer0 = new ConsedConsensusQualityComputer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { int [ ] intArray0 = new int [ 1 ] ; boolean boolean0 = ConsedConsensusQualityComputer . readMatchesWindow ( intArray0 , 0 , ( AssembledRead ) null , ( long ) 0 , intArray0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean readMatchesWindow ( int [ ] consensusGapsArray , int consensusLength , AssembledRead read , long start , int [ ] differenceArray , int i ) { boolean windowMatches = notDifferentThan ( differenceArray , i ) ; int windowLeftSize = computeWindowLeft ( consensusGapsArray , i + start ) ; for ( int j = i - windowLeftSize ; windowMatches & & j > = 0 & & j < i ; j + + ) { windowMatches = notDifferentThan ( differenceArray , j ) ; } if ( windowMatches ) { / / short circuit so we don't do any extra computations int windowRightSize = computeWindowRight ( consensusGapsArray , i + start , consensusLength ) ; for ( int j = i + 1 ; windowMatches & & j < = i + windowRightSize & & j < read . getGappedLength ( ) ; j + + ) { windowMatches = notDifferentThan ( differenceArray , j ) ; } } return windowMatches ; }
void test4 ( ) throws Throwable { int [ ] intArray0 = new int [ 9 ] ; AceAssembledReadAdapter aceAssembledReadAdapter0 = new AceAssembledReadAdapter ( ( AssembledRead ) null , ( PhdInfo ) null ) ; boolean boolean0 = ConsedConsensusQualityComputer . readMatchesWindow ( intArray0 , 983 , ( AssembledRead ) aceAssembledReadAdapter0 , ( long ) 0 , intArray0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean readMatchesWindow ( int [ ] consensusGapsArray , int consensusLength , AssembledRead read , long start , int [ ] differenceArray , int i ) { boolean windowMatches = notDifferentThan ( differenceArray , i ) ; int windowLeftSize = computeWindowLeft ( consensusGapsArray , i + start ) ; for ( int j = i - windowLeftSize ; windowMatches & & j > = 0 & & j < i ; j + + ) { windowMatches = notDifferentThan ( differenceArray , j ) ; } if ( windowMatches ) { / / short circuit so we don't do any extra computations int windowRightSize = computeWindowRight ( consensusGapsArray , i + start , consensusLength ) ; for ( int j = i + 1 ; windowMatches & & j < = i + windowRightSize & & j < read . getGappedLength ( ) ; j + + ) { windowMatches = notDifferentThan ( differenceArray , j ) ; } } return windowMatches ; }
void test6 ( ) throws Throwable { int [ ] intArray0 = new int [ 7 ] ; boolean boolean0 = ConsedConsensusQualityComputer . readMatchesWindow ( intArray0 , ( - 1 ) , ( AssembledRead ) null , ( long ) ( - 1 ) , intArray0 , 572 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean readMatchesWindow ( int [ ] consensusGapsArray , int consensusLength , AssembledRead read , long start , int [ ] differenceArray , int i ) { boolean windowMatches = notDifferentThan ( differenceArray , i ) ; int windowLeftSize = computeWindowLeft ( consensusGapsArray , i + start ) ; for ( int j = i - windowLeftSize ; windowMatches & & j > = 0 & & j < i ; j + + ) { windowMatches = notDifferentThan ( differenceArray , j ) ; } if ( windowMatches ) { / / short circuit so we don't do any extra computations int windowRightSize = computeWindowRight ( consensusGapsArray , i + start , consensusLength ) ; for ( int j = i + 1 ; windowMatches & & j < = i + windowRightSize & & j < read . getGappedLength ( ) ; j + + ) { windowMatches = notDifferentThan ( differenceArray , j ) ; } } return windowMatches ; }
void test0 ( ) throws Throwable { Date date0 = new Date ( ) ; Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . ZERO_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( - 168L ) , ( - 168L ) , range_CoordinateSystem0 ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "N" , "N" , "N" , date0 , ( Rangeable ) directedRange0 , false ) ; String string0 = readAceTag0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test1 ( ) throws Throwable { Date date0 = new Date ( ( - 9223372036854775808L ) ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "V ? Me$8l ? JV" , "V ? Me$8l ? JV" , "V ? Me$8l ? JV" , date0 , ( Rangeable ) null , true ) ; int int0 = readAceTag0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test2 ( ) throws Throwable { Date date0 = new Date ( ) ; Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . SPACE_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( - 160L ) , ( - 160L ) , range_CoordinateSystem0 ) ; ReadAceTag readAceTag0 = new ReadAceTag ( ( String ) null , "" , "" , date0 , ( Rangeable ) directedRange0 , false ) ; int int0 = readAceTag0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test3 ( ) throws Throwable { Date date0 = new Date ( ( - 9223372036854775808L ) ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "V ? Me$8l ? JV" , "V ? Me$8l ? JV" , "V ? Me$8l ? JV" , date0 , ( Rangeable ) null , true ) ; boolean boolean0 = readAceTag0 . equals ( ( Object ) "V ? Me$8l ? JV" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test4 ( ) throws Throwable { Date date0 = new Date ( ( - 9223372036854775808L ) ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "V ? Me$8l ? JV" , "V ? Me$8l ? JV" , "V ? Me$8l ? JV" , date0 , ( Rangeable ) null , true ) ; ReadAceTag readAceTag1 = new ReadAceTag ( "V ? Me$8l ? JV" , "V ? Me$8l ? JV" , "V ? Me$8l ? JV" , date0 , ( Rangeable ) readAceTag0 , false ) ; boolean boolean0 = readAceTag0 . equals ( ( Object ) readAceTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { Date date0 = new Date ( ) ; Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . SPACE_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( - 160L ) , ( - 160L ) , range_CoordinateSystem0 ) ; ReadAceTag readAceTag0 = new ReadAceTag ( ( String ) null , "" , "" , date0 , ( Rangeable ) directedRange0 , false ) ; ReadAceTag readAceTag1 = new ReadAceTag ( ( String ) null , "" , "" , date0 , ( Rangeable ) directedRange0 , false ) ; boolean boolean0 = readAceTag0 . equals ( ( Object ) readAceTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test6 ( ) throws Throwable { Date date0 = new Date ( ) ; Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . SPACE_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( - 171L ) , ( - 171L ) , range_CoordinateSystem0 ) ; ReadAceTag readAceTag0 = new ReadAceTag ( ( String ) null , "NQ" , "NQ" , date0 , ( Rangeable ) directedRange0 , true ) ; ReadAceTag readAceTag1 = new ReadAceTag ( "NQ" , "NQ" , "NQ" , date0 , ( Rangeable ) directedRange0 , true ) ; boolean boolean0 = readAceTag0 . equals ( ( Object ) readAceTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test7 ( ) throws Throwable { Date date0 = new Date ( ) ; Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . ZERO_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( - 168L ) , ( - 168L ) , range_CoordinateSystem0 ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "N" , "N" , "N" , date0 , ( Rangeable ) directedRange0 , false ) ; ReadAceTag readAceTag1 = new ReadAceTag ( ( String ) null , "N" , "N" , date0 , ( Rangeable ) directedRange0 , false ) ; boolean boolean0 = readAceTag0 . equals ( ( Object ) readAceTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test8 ( ) throws Throwable { Date date0 = new Date ( ) ; Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . ZERO_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( - 147L ) , ( - 147L ) , range_CoordinateSystem0 ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "vm" , "vm" , "vm" , date0 , ( Rangeable ) null , true ) ; ReadAceTag readAceTag1 = new ReadAceTag ( "vm" , "vm" , "vm" , date0 , ( Rangeable ) directedRange0 , true ) ; boolean boolean0 = readAceTag0 . equals ( ( Object ) readAceTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test9 ( ) throws Throwable { Date date0 = new Date ( ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "" , "" , "" , date0 , ( Rangeable ) null , false ) ; ReadAceTag readAceTag1 = new ReadAceTag ( "" , "" , "" , date0 , ( Rangeable ) null , false ) ; boolean boolean0 = readAceTag0 . equals ( ( Object ) readAceTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test10 ( ) throws Throwable { Date date0 = new Date ( ) ; Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . ZERO_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( - 160L ) , ( - 160L ) , range_CoordinateSystem0 ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "E8 ? 0H_hx * uf6wh9v" , "E8 ? 0H_hx * uf6wh9v" , "E8 ? 0H_hx * uf6wh9v" , date0 , ( Rangeable ) directedRange0 , true ) ; ReadAceTag readAceTag1 = new ReadAceTag ( "E8 ? 0H_hx * uf6wh9v" , "E8 ? 0H_hx * uf6wh9v" , "E8 ? 0H_hx * uf6wh9v" , date0 , ( Rangeable ) null , true ) ; boolean boolean0 = readAceTag0 . equals ( ( Object ) readAceTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test0 ( ) throws Throwable { Date date0 = new Date ( ) ; WholeAssemblyAceTag wholeAssemblyAceTag0 = new WholeAssemblyAceTag ( "" , "" , date0 , "" ) ; int int0 = wholeAssemblyAceTag0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test1 ( ) throws Throwable { Date date0 = new Date ( 0L ) ; WholeAssemblyAceTag wholeAssemblyAceTag0 = new WholeAssemblyAceTag ( "W~\" ( IIhP%8$" , "W~\" ( IIhP%8$" , date0 , "W~\" ( IIhP%8$" ) ; String string0 = wholeAssemblyAceTag0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test2 ( ) throws Throwable { Date date0 = new Date ( ) ; WholeAssemblyAceTag wholeAssemblyAceTag0 = new WholeAssemblyAceTag ( "Lv , \"@_S ] #C" , "Lv , \"@_S ] #C" , date0 , "Lv , \"@_S ] #C" ) ; boolean boolean0 = wholeAssemblyAceTag0 . equals ( ( Object ) "Tue Jul 02 02 : 40 : 23 BST 2013" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test3 ( ) throws Throwable { Date date0 = new Date ( 23L ) ; WholeAssemblyAceTag wholeAssemblyAceTag0 = new WholeAssemblyAceTag ( "" , "" , date0 , "" ) ; boolean boolean0 = wholeAssemblyAceTag0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test4 ( ) throws Throwable { Date date0 = new Date ( ) ; WholeAssemblyAceTag wholeAssemblyAceTag0 = new WholeAssemblyAceTag ( "gNWC = MNkBA" , "gNWC = MNkBA" , date0 , "gNWC = MNkBA" ) ; WholeAssemblyAceTag wholeAssemblyAceTag1 = new WholeAssemblyAceTag ( "gNWC = MNkBA" , "gNWC = MNkBA" , date0 , "gNWC = MNkBA" ) ; boolean boolean0 = wholeAssemblyAceTag0 . equals ( ( Object ) wholeAssemblyAceTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test3 ( ) throws Throwable { IndexedAceFileDataStore . SingleAceFileVisitor indexedAceFileDataStore_SingleAceFileVisitor0 = new IndexedAceFileDataStore . SingleAceFileVisitor ( ) ; Date date0 = new Date ( ) ; indexedAceFileDataStore_SingleAceFileVisitor0 . visitReadTag ( "xJQNg" , "xJQNg" , "xJQNg" , ( long ) 35 , ( long ) 35 , date0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PhdReadTagVisitor visitReadTag ( ) ; PhdWholeReadItemVisitor visitWholeReadItem ( ) ; / * * * The phd file has been completely visited . * / void visitEnd ( ) ; / * * * The phd visitation has been halted , * usually by calling { @link PhdBallVisitorCallback#haltParsing ( ) }
void test4 ( ) throws Throwable { IndexedAceFileDataStore . SingleAceFileVisitor indexedAceFileDataStore_SingleAceFileVisitor0 = new IndexedAceFileDataStore . SingleAceFileVisitor ( ) ; AceContig aceContig0 = indexedAceFileDataStore_SingleAceFileVisitor0 . getContig ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IndexedAceFileDataStore ( VisitorBuilder builder , AceHandler parser ) { this . parser = parser ; this . mementos = builder . mementos ; this . wholeAssemblyTags = builder . wholeAssemblyTags ; this . consensusTags = builder . consensusTags ; this . readTags = builder . readTags ; this . totalNumberOfReads = builder . totalNumberOfReads ; }
void test6 ( ) throws Throwable { IndexedAceFileDataStore . SingleAceFileVisitor indexedAceFileDataStore_SingleAceFileVisitor0 = new IndexedAceFileDataStore . SingleAceFileVisitor ( ) ; Date date0 = new Date ( ) ; AceConsensusTagVisitor aceConsensusTagVisitor0 = indexedAceFileDataStore_SingleAceFileVisitor0 . visitConsensusTag ( "xJQNg" , "xJQNg" , "xJQNg" , ( - 9223372036854775808L ) , ( - 9223372036854775808L ) , date0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AceConsensusTagVisitor visitConsensusTag ( String id , String type , String creator , long gappedStart , long gappedEnd , Date creationDate , boolean isTransient ) { currentConsensusTagVisitors = new ArrayList < AceConsensusTagVisitor > ( visitors . size ( ) ) ; boolean skipTag = true ; for ( AceFileVisitor visitor : visitors ) { AceConsensusTagVisitor tagVisitor = visitor . visitConsensusTag ( id , type , creator , gappedStart , gappedEnd , creationDate , isTransient ) ; currentConsensusTagVisitors . add ( tagVisitor ) ; if ( tagVisitor ! = null ) { skipTag = true ; } } if ( handleHaltedVisitors ( ) | | skipTag ) { currentConsensusTagVisitors = null ; return null ; } return new MultiAceConsensusTagVisitor ( ) ; }
void test7 ( ) throws Throwable { IndexedAceFileDataStore . SingleAceFileVisitor indexedAceFileDataStore_SingleAceFileVisitor0 = new IndexedAceFileDataStore . SingleAceFileVisitor ( ) ; Date date0 = new Date ( ) ; indexedAceFileDataStore_SingleAceFileVisitor0 . visitWholeAssemblyTag ( "xJQNg" , "xJQNg" , date0 , "xJQNg" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test0 ( ) throws Throwable { Date date0 = new Date ( ) ; PhdInfo phdInfo0 = new PhdInfo ( "2" , "2" , date0 ) ; PhdInfo phdInfo1 = new PhdInfo ( "2" , "2" , date0 ) ; boolean boolean0 = phdInfo1 . equals ( ( Object ) phdInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test1 ( ) throws Throwable { Date date0 = new Date ( 157L ) ; PhdInfo phdInfo0 = new PhdInfo ( "" , "" , date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test2 ( ) throws Throwable { Date date0 = new Date ( ) ; PhdInfo phdInfo0 = new PhdInfo ( "2" , "2" , date0 ) ; phdInfo0 . getPhdName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test3 ( ) throws Throwable { Date date0 = new Date ( 157L ) ; PhdInfo phdInfo0 = new PhdInfo ( "" , "" , date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test7 ( ) throws Throwable { Date date0 = new Date ( ) ; PhdInfo phdInfo0 = new PhdInfo ( "2" , "2" , date0 ) ; int int0 = phdInfo0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test8 ( ) throws Throwable { Date date0 = new Date ( ) ; PhdInfo phdInfo0 = new PhdInfo ( "2" , "2" , date0 ) ; Date date1 = new Date ( ( long ) ( - 2146822649 ) ) ; PhdInfo phdInfo1 = new PhdInfo ( "2" , "2" , date1 ) ; boolean boolean0 = phdInfo1 . equals ( ( Object ) phdInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test9 ( ) throws Throwable { Date date0 = new Date ( 157L ) ; PhdInfo phdInfo0 = new PhdInfo ( "" , "" , date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test10 ( ) throws Throwable { Date date0 = new Date ( 157L ) ; PhdInfo phdInfo0 = new PhdInfo ( "" , "" , date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test11 ( ) throws Throwable { Date date0 = new Date ( ) ; PhdInfo phdInfo0 = new PhdInfo ( "Nqw ] " , "Nqw ] " , date0 ) ; PhdInfo phdInfo1 = new PhdInfo ( "Nqw ] " , "QVUn > W8e ] 1 ; %" , date0 ) ; boolean boolean0 = phdInfo0 . equals ( ( Object ) phdInfo1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test12 ( ) throws Throwable { Date date0 = new Date ( ) ; PhdInfo phdInfo0 = new PhdInfo ( "Nqw ] " , "QVUn > W8e ] 1 ; %" , date0 ) ; PhdInfo phdInfo1 = new PhdInfo ( "QVUn > W8e ] 1 ; %" , "QVUn > W8e ] 1 ; %" , date0 ) ; boolean boolean0 = phdInfo0 . equals ( ( Object ) phdInfo1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test0 ( ) throws Throwable { AceContigReadVisitor [ ] aceContigReadVisitorArray0 = new AceContigReadVisitor [ 1 ] ; LinkedList < AceContigReadVisitor > linkedList0 = new LinkedList < AceContigReadVisitor > ( ) ; MultipleAceContigReadVisitor multipleAceContigReadVisitor0 = new MultipleAceContigReadVisitor ( ( List < ? extends AceContigReadVisitor > ) linkedList0 ) ; aceContigReadVisitorArray0 [ 0 ] = ( AceContigReadVisitor ) multipleAceContigReadVisitor0 ; MultipleAceContigReadVisitor multipleAceContigReadVisitor1 = new MultipleAceContigReadVisitor ( aceContigReadVisitorArray0 ) ; multipleAceContigReadVisitor1 . visitBasesLine ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test1 ( ) throws Throwable { AceContigReadVisitor [ ] aceContigReadVisitorArray0 = new AceContigReadVisitor [ 2 ] ; LinkedList < AceContigReadVisitor > linkedList0 = new LinkedList < AceContigReadVisitor > ( ) ; MultipleAceContigReadVisitor multipleAceContigReadVisitor0 = new MultipleAceContigReadVisitor ( ( List < ? extends AceContigReadVisitor > ) linkedList0 ) ; aceContigReadVisitorArray0 [ 0 ] = ( AceContigReadVisitor ) multipleAceContigReadVisitor0 ; MultipleAceContigReadVisitor multipleAceContigReadVisitor1 = new MultipleAceContigReadVisitor ( aceContigReadVisitorArray0 ) ; multipleAceContigReadVisitor1 . visitQualityLine ( 254 , 254 , 254 , 254 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test2 ( ) throws Throwable { AceContigReadVisitor [ ] aceContigReadVisitorArray0 = new AceContigReadVisitor [ 3 ] ; LinkedList < AceContigReadVisitor > linkedList0 = new LinkedList < AceContigReadVisitor > ( ) ; MultipleAceContigReadVisitor multipleAceContigReadVisitor0 = new MultipleAceContigReadVisitor ( ( List < ? extends AceContigReadVisitor > ) linkedList0 ) ; aceContigReadVisitorArray0 [ 0 ] = ( AceContigReadVisitor ) multipleAceContigReadVisitor0 ; MultipleAceContigReadVisitor multipleAceContigReadVisitor1 = new MultipleAceContigReadVisitor ( aceContigReadVisitorArray0 ) ; Date date0 = new Date ( 0L ) ; multipleAceContigReadVisitor1 . visitTraceDescriptionLine ( "~f@^0 - u" , "~f@^0 - u" , date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void visitTraceDescriptionLine ( String traceName , String phdName , Date date ) { / / no - op }
void test4 ( ) throws Throwable { AceContigReadVisitor [ ] aceContigReadVisitorArray0 = new AceContigReadVisitor [ 3 ] ; LinkedList < AceContigReadVisitor > linkedList0 = new LinkedList < AceContigReadVisitor > ( ) ; MultipleAceContigReadVisitor multipleAceContigReadVisitor0 = new MultipleAceContigReadVisitor ( ( List < ? extends AceContigReadVisitor > ) linkedList0 ) ; aceContigReadVisitorArray0 [ 0 ] = ( AceContigReadVisitor ) multipleAceContigReadVisitor0 ; MultipleAceContigReadVisitor multipleAceContigReadVisitor1 = new MultipleAceContigReadVisitor ( aceContigReadVisitorArray0 ) ; multipleAceContigReadVisitor1 . visitEnd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { LinkedList < AceContigReadVisitor > linkedList0 = new LinkedList < AceContigReadVisitor > ( ) ; MultipleAceContigReadVisitor multipleAceContigReadVisitor0 = new MultipleAceContigReadVisitor ( ( List < ? extends AceContigReadVisitor > ) linkedList0 ) ; linkedList0 . add ( ( AceContigReadVisitor ) multipleAceContigReadVisitor0 ) ; MultipleAceContigReadVisitor multipleAceContigReadVisitor1 = new MultipleAceContigReadVisitor ( ( List < ? extends AceContigReadVisitor > ) linkedList0 ) ; multipleAceContigReadVisitor1 . halted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { Date date0 = new Date ( 409L ) ; DirectedRange directedRange0 = DirectedRange . parse ( 409L , 409L ) ; ConsensusAceTagBuilder consensusAceTagBuilder0 = new ConsensusAceTagBuilder ( "U" , "U" , "U" , date0 , ( Rangeable ) directedRange0 , false ) ; ConsensusAceTagBuilder consensusAceTagBuilder1 = consensusAceTagBuilder0 . addComment ( "U" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ConsensusAceTagBuilder addComment ( String comment ) { comments . add ( comment ) ; return this ; }
void test1 ( ) throws Throwable { Date date0 = new Date ( 409L ) ; DirectedRange directedRange0 = DirectedRange . parse ( 409L , 409L ) ; ConsensusAceTagBuilder consensusAceTagBuilder0 = new ConsensusAceTagBuilder ( "U" , "U" , "U" , date0 , ( Rangeable ) directedRange0 , false ) ; ConsensusAceTagBuilder consensusAceTagBuilder1 = consensusAceTagBuilder0 . appendData ( "DefaultConsensusAceTag [ comments = [ ] , range ( ) = [ 409 . . 409 ] / 0B , getId ( ) = U , isTransient ( ) = false , getCreationDate ( ) = Thu Jan 01 01 : 00 : 00 GMT 1970 , getCreator ( ) = U , getData ( ) = , getType ( ) = U ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ConsensusAceTagBuilder appendData ( String data ) { dataBuilder . append ( data ) ; return this ; }
void test2 ( ) throws Throwable { Date date0 = new Date ( 409L ) ; DirectedRange directedRange0 = DirectedRange . parse ( 409L , 409L ) ; ConsensusAceTagBuilder consensusAceTagBuilder0 = new ConsensusAceTagBuilder ( "U" , "U" , "U" , date0 , ( Rangeable ) directedRange0 , false ) ; ConsensusAceTag consensusAceTag0 = ( ConsensusAceTag ) consensusAceTagBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { HighLowPhdAceContigVisitor highLowPhdAceContigVisitor0 = new HighLowPhdAceContigVisitor ( 18 , 18 , 2 ) ; AceContigReadVisitor aceContigReadVisitor0 = highLowPhdAceContigVisitor0 . visitBeginRead ( "" , 18 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AceContigReadVisitor visitBeginRead ( String readId , int gappedLength ) { return delegate . visitBeginRead ( readId , gappedLength ) ; }
void test1 ( ) throws Throwable { HighLowPhdAceContigVisitor highLowPhdAceContigVisitor0 = new HighLowPhdAceContigVisitor ( 18 , 18 , 2 ) ; Map < String , Phd > map0 = highLowPhdAceContigVisitor0 . getPhds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test0 ( ) throws Throwable { Date date0 = new Date ( ) ; WholeAssemblyAceTag wholeAssemblyAceTag0 = new WholeAssemblyAceTag ( "^6 , 3cD } #nBrN3IWK" , "^6 , 3cD } #nBrN3IWK" , date0 , "^6 , 3cD } #nBrN3IWK" ) ; String string0 = wholeAssemblyAceTag0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test4 ( ) throws Throwable { Date date0 = new Date ( ) ; WholeAssemblyAceTag wholeAssemblyAceTag0 = new WholeAssemblyAceTag ( "" , "" , date0 , "" ) ; int int0 = wholeAssemblyAceTag0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test5 ( ) throws Throwable { Date date0 = new Date ( ) ; DirectedRange directedRange0 = DirectedRange . parse ( 0L , 1372733351665L ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "" , "" , "" , date0 , ( Rangeable ) directedRange0 , true ) ; int int0 = readAceTag0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test6 ( ) throws Throwable { Date date0 = new Date ( ( - 187L ) ) ; WholeAssemblyAceTag wholeAssemblyAceTag0 = new WholeAssemblyAceTag ( "`" , "`" , date0 , "`" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test7 ( ) throws Throwable { Date date0 = new Date ( ( - 187L ) ) ; Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . ZERO_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( ( - 1108L ) , ( - 1108L ) , range_CoordinateSystem0 ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "`" , "`" , "`" , date0 , ( Rangeable ) directedRange0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test8 ( ) throws Throwable { Date date0 = new Date ( ) ; DirectedRange directedRange0 = DirectedRange . parse ( 0L , 1372733351665L ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "" , "" , "" , date0 , ( Rangeable ) directedRange0 , true ) ; readAceTag0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test9 ( ) throws Throwable { Date date0 = new Date ( ) ; DirectedRange directedRange0 = DirectedRange . parse ( 0L , 1372733351665L ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "" , "" , "" , date0 , ( Rangeable ) directedRange0 , true ) ; readAceTag0 . equals ( ( Object ) "DirectedRange [ range = [ 0 . . 1372733351665 ] / 0B , direction = FORWARD ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test10 ( ) throws Throwable { Date date0 = new Date ( ) ; WholeAssemblyAceTag wholeAssemblyAceTag0 = new WholeAssemblyAceTag ( "" , "" , date0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test11 ( ) throws Throwable { Date date0 = new Date ( ) ; WholeAssemblyAceTag wholeAssemblyAceTag0 = new WholeAssemblyAceTag ( "tF" , "tF" , date0 , "tF" ) ; Range . CoordinateSystem range_CoordinateSystem0 = Range . CoordinateSystem . SPACE_BASED ; DirectedRange directedRange0 = DirectedRange . parse ( 255L , 1372733351669L , range_CoordinateSystem0 ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "5 + G^KYQb ! a%z } 4Of" , "5 + G^KYQb ! a%z } 4Of" , "5 + G^KYQb ! a%z } 4Of" , date0 , ( Rangeable ) directedRange0 , true ) ; readAceTag0 . equals ( ( Object ) wholeAssemblyAceTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test12 ( ) throws Throwable { Date date0 = new Date ( ) ; WholeAssemblyAceTag wholeAssemblyAceTag0 = new WholeAssemblyAceTag ( "^6 , 3cD } #nBrN3IWK" , "^6 , 3cD } #nBrN3IWK" , date0 , "^6 , 3cD } #nBrN3IWK" ) ; ReadAceTag readAceTag0 = new ReadAceTag ( "^6 , 3cD } #nBrN3IWK" , "^6 , 3cD } #nBrN3IWK" , "^6 , 3cD } #nBrN3IWK" , date0 , ( Rangeable ) null , true ) ; readAceTag0 . equals ( ( Object ) wholeAssemblyAceTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime ( ) ; / * * * The Scan period in milliseconds . * @return the scan period in milliseconds . * / int getScanPeriod ( ) ; / * * * The scan line of the first line * of a new rate . * @return the scan line as an int . * / int getFirstScanLine ( ) ; }
void test13 ( ) throws Throwable { Date date0 = new Date ( ( - 187L ) ) ; WholeAssemblyAceTag wholeAssemblyAceTag0 = new WholeAssemblyAceTag ( "5 + G^KYQb ! a%z } 4Of" , "`" , date0 , "5 + G^KYQb ! a%z } 4Of" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { AceContigVisitor [ ] aceContigVisitorArray0 = new AceContigVisitor [ 11 ] ; LinkedList < AceContigVisitor > linkedList0 = new LinkedList < AceContigVisitor > ( ) ; MultipleAceContigVisitor multipleAceContigVisitor0 = new MultipleAceContigVisitor ( ( List < ? extends AceContigVisitor > ) linkedList0 ) ; aceContigVisitorArray0 [ 0 ] = ( AceContigVisitor ) multipleAceContigVisitor0 ; MultipleAceContigVisitor multipleAceContigVisitor1 = new MultipleAceContigVisitor ( aceContigVisitorArray0 ) ; multipleAceContigVisitor1 . visitBasesLine ( "S`nG } BPz" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void visitBasesLine ( String mixedCaseBasecalls ) { delegate . visitBasesLine ( mixedCaseBasecalls ) ; }
void test4 ( ) throws Throwable { AceContigVisitor [ ] aceContigVisitorArray0 = new AceContigVisitor [ 11 ] ; LinkedList < AceContigVisitor > linkedList0 = new LinkedList < AceContigVisitor > ( ) ; MultipleAceContigVisitor multipleAceContigVisitor0 = new MultipleAceContigVisitor ( ( List < ? extends AceContigVisitor > ) linkedList0 ) ; aceContigVisitorArray0 [ 0 ] = ( AceContigVisitor ) multipleAceContigVisitor0 ; MultipleAceContigVisitor multipleAceContigVisitor1 = new MultipleAceContigVisitor ( aceContigVisitorArray0 ) ; multipleAceContigVisitor1 . visitBaseSegment ( ( Range ) null , "S`nG } BPz" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void visitBaseSegment ( Range gappedConsensusRange , String readId ) { delegate . visitBaseSegment ( gappedConsensusRange , readId ) ; }
void test5 ( ) throws Throwable { LinkedList < AceContigVisitor > linkedList0 = new LinkedList < AceContigVisitor > ( ) ; HighLowPhdAceContigVisitor highLowPhdAceContigVisitor0 = new HighLowPhdAceContigVisitor ( 13 , 87 , 13 ) ; linkedList0 . add ( ( AceContigVisitor ) highLowPhdAceContigVisitor0 ) ; MultipleAceContigVisitor multipleAceContigVisitor0 = new MultipleAceContigVisitor ( ( List < ? extends AceContigVisitor > ) linkedList0 ) ; MultipleAceContigReadVisitor multipleAceContigReadVisitor0 = ( MultipleAceContigReadVisitor ) multipleAceContigVisitor0 . visitBeginRead ( "gge" , 96 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AceContigReadVisitor visitBeginRead ( String readId , int gappedLength ) { return delegate . visitBeginRead ( readId , gappedLength ) ; }
void test6 ( ) throws Throwable { LinkedList < AceContigVisitor > linkedList0 = new LinkedList < AceContigVisitor > ( ) ; AceContigVisitor [ ] aceContigVisitorArray0 = new AceContigVisitor [ 24 ] ; MultipleAceContigVisitor multipleAceContigVisitor0 = new MultipleAceContigVisitor ( aceContigVisitorArray0 ) ; linkedList0 . add ( ( AceContigVisitor ) multipleAceContigVisitor0 ) ; MultipleAceContigVisitor multipleAceContigVisitor1 = new MultipleAceContigVisitor ( ( List < ? extends AceContigVisitor > ) linkedList0 ) ; MultipleAceContigReadVisitor multipleAceContigReadVisitor0 = ( MultipleAceContigReadVisitor ) multipleAceContigVisitor1 . visitBeginRead ( "gge" , 96 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AceContigReadVisitor visitBeginRead ( String readId , int gappedLength ) { return delegate . visitBeginRead ( readId , gappedLength ) ; }
void test8 ( ) throws Throwable { AceContigVisitor [ ] aceContigVisitorArray0 = new AceContigVisitor [ 11 ] ; LinkedList < AceContigVisitor > linkedList0 = new LinkedList < AceContigVisitor > ( ) ; MultipleAceContigVisitor multipleAceContigVisitor0 = new MultipleAceContigVisitor ( ( List < ? extends AceContigVisitor > ) linkedList0 ) ; aceContigVisitorArray0 [ 0 ] = ( AceContigVisitor ) multipleAceContigVisitor0 ; MultipleAceContigVisitor multipleAceContigVisitor1 = new MultipleAceContigVisitor ( aceContigVisitorArray0 ) ; multipleAceContigVisitor1 . halted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void halted ( ) { / / no - op }
void test1 ( ) throws Throwable { AceAssembledReadAdapter aceAssembledReadAdapter0 = new AceAssembledReadAdapter ( ( AssembledRead ) null , ( PhdInfo ) null ) ; String string0 = aceAssembledReadAdapter0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test10 ( ) throws Throwable { AceAssembledReadAdapter aceAssembledReadAdapter0 = new AceAssembledReadAdapter ( ( AssembledRead ) null , ( PhdInfo ) null ) ; PhdInfo phdInfo0 = aceAssembledReadAdapter0 . getPhdInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PhdInfo getPhdInfo ( ) { return phdInfo ; }
void test13 ( ) throws Throwable { Date date0 = new Date ( ( - 1L ) ) ; PhdInfo phdInfo0 = new PhdInfo ( "" , "" , date0 ) ; AceAssembledReadAdapter aceAssembledReadAdapter0 = new AceAssembledReadAdapter ( ( AssembledRead ) null , phdInfo0 ) ; int int0 = aceAssembledReadAdapter0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test14 ( ) throws Throwable { AceAssembledReadAdapter aceAssembledReadAdapter0 = new AceAssembledReadAdapter ( ( AssembledRead ) null , ( PhdInfo ) null ) ; AceAssembledReadAdapter aceAssembledReadAdapter1 = new AceAssembledReadAdapter ( ( AssembledRead ) aceAssembledReadAdapter0 , ( PhdInfo ) null ) ; int int0 = aceAssembledReadAdapter1 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test15 ( ) throws Throwable { AceAssembledReadAdapter aceAssembledReadAdapter0 = new AceAssembledReadAdapter ( ( AssembledRead ) null , ( PhdInfo ) null ) ; boolean boolean0 = aceAssembledReadAdapter0 . equals ( ( Object ) "AcePlacedReadAdapter [ placedRead = null , phdInfo = null ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test16 ( ) throws Throwable { AceAssembledReadAdapter aceAssembledReadAdapter0 = new AceAssembledReadAdapter ( ( AssembledRead ) null , ( PhdInfo ) null ) ; boolean boolean0 = aceAssembledReadAdapter0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test17 ( ) throws Throwable { AceAssembledReadAdapter aceAssembledReadAdapter0 = new AceAssembledReadAdapter ( ( AssembledRead ) null , ( PhdInfo ) null ) ; AceAssembledReadAdapter aceAssembledReadAdapter1 = new AceAssembledReadAdapter ( ( AssembledRead ) null , ( PhdInfo ) null ) ; boolean boolean0 = aceAssembledReadAdapter0 . equals ( ( Object ) aceAssembledReadAdapter1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test18 ( ) throws Throwable { Date date0 = new Date ( ) ; PhdInfo phdInfo0 = new PhdInfo ( " : & @ / " , " : & @ / " , date0 ) ; AceAssembledReadAdapter aceAssembledReadAdapter0 = new AceAssembledReadAdapter ( ( AssembledRead ) null , phdInfo0 ) ; AceAssembledReadAdapter aceAssembledReadAdapter1 = new AceAssembledReadAdapter ( ( AssembledRead ) aceAssembledReadAdapter0 , phdInfo0 ) ; boolean boolean0 = aceAssembledReadAdapter0 . equals ( ( Object ) aceAssembledReadAdapter1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test19 ( ) throws Throwable { Date date0 = new Date ( ) ; PhdInfo phdInfo0 = new PhdInfo ( "B / " , "B / " , date0 ) ; AceAssembledReadAdapter aceAssembledReadAdapter0 = new AceAssembledReadAdapter ( ( AssembledRead ) null , phdInfo0 ) ; AceAssembledReadAdapter aceAssembledReadAdapter1 = new AceAssembledReadAdapter ( ( AssembledRead ) aceAssembledReadAdapter0 , ( PhdInfo ) null ) ; boolean boolean0 = aceAssembledReadAdapter0 . equals ( ( Object ) aceAssembledReadAdapter1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { Direction direction0 = Direction . REVERSE ; AlignedReadInfo alignedReadInfo0 = new AlignedReadInfo ( ( - 1773 ) , direction0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test1 ( ) throws Throwable { Direction direction0 = Direction . REVERSE ; AlignedReadInfo alignedReadInfo0 = new AlignedReadInfo ( 33 , direction0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test2 ( ) throws Throwable { Direction direction0 = Direction . REVERSE ; AlignedReadInfo alignedReadInfo0 = new AlignedReadInfo ( ( - 1773 ) , direction0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test3 ( ) throws Throwable { Direction direction0 = Direction . FORWARD ; Direction direction1 = Direction . REVERSE ; AlignedReadInfo alignedReadInfo0 = new AlignedReadInfo ( ( - 856 ) , direction1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test4 ( ) throws Throwable { Direction direction0 = Direction . REVERSE ; AlignedReadInfo alignedReadInfo0 = new AlignedReadInfo ( 33 , direction0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test5 ( ) throws Throwable { Direction direction0 = Direction . FORWARD ; AlignedReadInfo alignedReadInfo0 = new AlignedReadInfo ( ( - 856 ) , direction0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test6 ( ) throws Throwable { Direction direction0 = Direction . REVERSE ; AlignedReadInfo alignedReadInfo0 = new AlignedReadInfo ( ( - 1773 ) , direction0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test7 ( ) throws Throwable { Direction direction0 = Direction . REVERSE ; AlignedReadInfo alignedReadInfo0 = new AlignedReadInfo ( 33 , direction0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test6 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; AceFileDataStoreBuilder aceFileDataStoreBuilder0 = new AceFileDataStoreBuilder ( file0 ) ; DataStoreProviderHint dataStoreProviderHint0 = DataStoreProviderHint . ITERATION_ONLY ; aceFileDataStoreBuilder0 . hint ( dataStoreProviderHint0 ) ; AceFileContigDataStore aceFileContigDataStore0 = aceFileDataStoreBuilder0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test0 ( ) throws Throwable { File file0 = new File ( " . " , " . " ) ; LargeAceFileDataStore largeAceFileDataStore0 = ( LargeAceFileDataStore ) LargeAceFileDataStore . create ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test1 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; AceHandler aceHandler0 = AceFileParser . create ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < T > DataStoreStreamingIterator < T > create ( DataStore < ? > parentDataStore , StreamingIterator < T > delegate ) { return new DataStoreStreamingIterator < T > ( parentDataStore , delegate ) ; }
void test3 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; AceHandler aceHandler0 = AceFileParser . create ( ( InputStream ) pipedInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < T > DataStoreStreamingIterator < T > create ( DataStore < ? > parentDataStore , StreamingIterator < T > delegate ) { return new DataStoreStreamingIterator < T > ( parentDataStore , delegate ) ; }
void test0 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; NucleotideSequenceBuilder nucleotideSequenceBuilder0 = AsmUtil . computeGappedSequence ( ( NucleotideSequenceBuilder ) null , ( List < Integer > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NucleotideSequenceBuilder computeGappedSequence ( NucleotideSequenceBuilder ungappedSequenceBuilder , List < Integer > asmEncodedGaps ) { for ( Integer offset : asmEncodedGaps ) { ungappedSequenceBuilder . insert ( offset . intValue ( ) , Nucleotide . Gap ) ; } return ungappedSequenceBuilder ; }
void test11 ( ) throws Throwable { AsmFileParser . AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser . AsmMessageHandler . UNITIG ; String string0 = asmFileParser_AsmMessageHandler0 . getMessageCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test12 ( ) throws Throwable { AsmFileParser . AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser . AsmMessageHandler . UNITIG ; boolean boolean0 = asmFileParser_AsmMessageHandler0 . canHandle ( " np ) [ ] w%" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test13 ( ) throws Throwable { AsmFileParser . AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser . AsmMessageHandler . SCAFFOLD_LINK ; String string0 = asmFileParser_AsmMessageHandler0 . parseMessageCode ( "std : ( S + ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test15 ( ) throws Throwable { AsmFileParser . AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser . AsmMessageHandler . CONTIG_LINK ; Set < AsmVisitor . MatePairEvidence > set0 = asmFileParser_AsmMessageHandler0 . parseMatePairEvidence ( 0 , ( AsmFileParser . ParserState ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return wrappedDeque . size ( ) ; }
void test0 ( ) throws Throwable { DefaultAsmContigDataStore2 defaultAsmContigDataStore2_0 = new DefaultAsmContigDataStore2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { HashMap < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > hashMap0 = new HashMap < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > ( ) ; IndexedAsmFileContigDataStore indexedAsmFileContigDataStore0 = new IndexedAsmFileContigDataStore ( ( AsmFileParser ) null , ( DataStore < NucleotideSequence > ) null , ( Map < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > ) hashMap0 ) ; StreamingIterator < AsmContig > streamingIterator0 = indexedAsmFileContigDataStore0 . iterator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test1 ( ) throws Throwable { HashMap < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > hashMap0 = new HashMap < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > ( ) ; IndexedAsmFileContigDataStore indexedAsmFileContigDataStore0 = new IndexedAsmFileContigDataStore ( ( AsmFileParser ) null , ( DataStore < NucleotideSequence > ) null , ( Map < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > ) hashMap0 ) ; indexedAsmFileContigDataStore0 . getNumberOfRecords ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test2 ( ) throws Throwable { HashMap < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > hashMap0 = new HashMap < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > ( ) ; IndexedAsmFileContigDataStore indexedAsmFileContigDataStore0 = new IndexedAsmFileContigDataStore ( ( AsmFileParser ) null , ( DataStore < NucleotideSequence > ) null , ( Map < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > ) hashMap0 ) ; boolean boolean0 = indexedAsmFileContigDataStore0 . isClosed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test3 ( ) throws Throwable { HashMap < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > hashMap0 = new HashMap < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > ( 1037 ) ; IndexedAsmFileContigDataStore indexedAsmFileContigDataStore0 = new IndexedAsmFileContigDataStore ( ( AsmFileParser ) null , ( DataStore < NucleotideSequence > ) null , ( Map < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T get ( long index ) { return codec . decode ( data , index ) ; }
void test4 ( ) throws Throwable { HashMap < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > hashMap0 = new HashMap < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > ( ) ; IndexedAsmFileContigDataStore indexedAsmFileContigDataStore0 = new IndexedAsmFileContigDataStore ( ( AsmFileParser ) null , ( DataStore < NucleotideSequence > ) null , ( Map < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > ) hashMap0 ) ; boolean boolean0 = indexedAsmFileContigDataStore0 . contains ( "1R [ y { > qGJ ( sa & R" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test5 ( ) throws Throwable { HashMap < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > hashMap0 = new HashMap < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > ( ) ; IndexedAsmFileContigDataStore indexedAsmFileContigDataStore0 = new IndexedAsmFileContigDataStore ( ( AsmFileParser ) null , ( DataStore < NucleotideSequence > ) null , ( Map < String , AsmVisitor . AsmVisitorCallback . AsmVisitorMemento > ) hashMap0 ) ; indexedAsmFileContigDataStore0 . get ( "1R [ y { > qGJ ( sa & R" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) { return isClosed ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; PushbackInputStream pushbackInputStream0 = new PushbackInputStream ( ( InputStream ) byteArrayInputStream0 , ( int ) ( byte ) 103 ) ; byteArrayInputStream0 . read ( byteArray0 ) ; Frg2Parser . parse2 ( ( InputStream ) pushbackInputStream0 , ( Frg2Visitor ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean markSupported ( ) { return in . markSupported ( ) ; }
void test5 ( ) throws Throwable { Frg2Parser frg2Parser0 = new Frg2Parser ( ) ; String string0 = frg2Parser0 . parseIdFrom ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String parseIdFrom ( String frg ) { Matcher matcher = ACC_ID_PATTERN . matcher ( frg ) ; if ( matcher . find ( ) ) { return matcher . group ( 1 ) ; } return null ; }
void test0 ( ) throws Throwable { MateOrientation mateOrientation0 = MateOrientation . INNIE ; char char0 = mateOrientation0 . getCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Character getCharacter ( ) ; }
void test1 ( ) throws Throwable { MateOrientation mateOrientation0 = MateOrientation . parseMateOrientation ( " ( wm ; wDi#c2U_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MateOrientation parseMateOrientation ( char c ) { switch ( c ) { case 'I' : return INNIE ; case 'O' : return OUTTIE ; case 'N' : return NORMAL ; default : return UNORIENTED ; } }
void test2 ( ) throws Throwable { MateOrientation mateOrientation0 = MateOrientation . parseMateOrientation ( "INNIE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MateOrientation parseMateOrientation ( char c ) { switch ( c ) { case 'I' : return INNIE ; case 'O' : return OUTTIE ; case 'N' : return NORMAL ; default : return UNORIENTED ; } }
void test3 ( ) throws Throwable { MateOrientation mateOrientation0 = MateOrientation . parseMateOrientation ( "NORMAL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MateOrientation parseMateOrientation ( char c ) { switch ( c ) { case 'I' : return INNIE ; case 'O' : return OUTTIE ; case 'N' : return NORMAL ; default : return UNORIENTED ; } }
void test4 ( ) throws Throwable { MateOrientation mateOrientation0 = MateOrientation . parseMateOrientation ( "OUTTIE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MateOrientation parseMateOrientation ( char c ) { switch ( c ) { case 'I' : return INNIE ; case 'O' : return OUTTIE ; case 'N' : return NORMAL ; default : return UNORIENTED ; } }
void test0 ( ) throws Throwable { NucleotideSequence nucleotideSequence0 = FragmentUtil . parseBasesFrom ( "_ . 1 [ an / #a8X " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUngappedLength ( ) { return getLength ( ) - getNumberOfGaps ( ) ; }
void test1 ( ) throws Throwable { Range range0 = FragmentUtil . parseValidRangeFrom ( "aO5V [ p71802tdi~7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Range parseValidRangeFrom ( String frg ) { Matcher matcher = FRG_VALID_RANGE_PATTERN . matcher ( frg ) ; return parseRangeFrom ( matcher ) ; }
void test2 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; Scanner scanner0 = new Scanner ( ( InputStream ) pipedInputStream0 ) ; String string0 = FragmentUtil . readRestOfBlock ( scanner0 , ( TextFileVisitor ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String readRestOfBlock ( Scanner scanner , TextFileVisitor visitor ) { StringBuilder sb = new StringBuilder ( ) ; boolean done = false ; while ( scanner . hasNextLine ( ) & & ! done ) { String line = scanner . nextLine ( ) ; visitor . visitLine ( line + CR ) ; sb . append ( line ) . append ( CR ) ; if ( " } " . equals ( line ) ) { done = true ; } } return sb . toString ( ) ; }
void test4 ( ) throws Throwable { QualitySequence qualitySequence0 = FragmentUtil . parseEncodedQualitySequence ( "aO5V [ p71802tdi~7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return codec . decodedLengthOf ( data ) ; }
void test0 ( ) throws Throwable { Distance distance0 = Distance . buildDistance ( ( - 1198 ) , ( - 1198 ) , ( - 1198 ) , ( - 1198 ) ) ; MateOrientation mateOrientation0 = MateOrientation . OUTTIE ; DefaultLibrary defaultLibrary0 = new DefaultLibrary ( "l0Nf'" , distance0 , mateOrientation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test1 ( ) throws Throwable { Distance distance0 = Distance . buildDistance ( ( - 1198 ) , ( - 1198 ) , ( - 1198 ) , ( - 1198 ) ) ; MateOrientation mateOrientation0 = MateOrientation . OUTTIE ; DefaultLibrary defaultLibrary0 = new DefaultLibrary ( "l0Nf'" , distance0 , mateOrientation0 ) ; String string0 = defaultLibrary0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return this . id ; }
void test2 ( ) throws Throwable { Distance distance0 = Distance . buildDistance ( 1613 , 1613 ) ; MateOrientation mateOrientation0 = MateOrientation . OUTTIE ; DefaultLibrary defaultLibrary0 = new DefaultLibrary ( "DCS * < iQjH@`V%~X > 9" , distance0 , mateOrientation0 ) ; MateOrientation mateOrientation1 = defaultLibrary0 . getMateOrientation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MateOrientation getMateOrientation ( ) { return mateOrientation ; }
void test3 ( ) throws Throwable { Distance distance0 = Distance . buildDistance ( ( - 1198 ) , ( - 1198 ) , ( - 1198 ) , ( - 1198 ) ) ; MateOrientation mateOrientation0 = MateOrientation . OUTTIE ; DefaultLibrary defaultLibrary0 = new DefaultLibrary ( "l0Nf'" , distance0 , mateOrientation0 ) ; Distance distance1 = defaultLibrary0 . getDistance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Distance getDistance ( ) { return distance ; }
void test6 ( ) throws Throwable { Distance distance0 = Distance . buildDistance ( ( - 1198 ) , ( - 1198 ) , ( - 1198 ) , ( - 1198 ) ) ; MateOrientation mateOrientation0 = MateOrientation . OUTTIE ; DefaultLibrary defaultLibrary0 = new DefaultLibrary ( "l0Nf'" , distance0 , mateOrientation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test7 ( ) throws Throwable { Distance distance0 = Distance . buildDistance ( 1613 , 1613 ) ; MateOrientation mateOrientation0 = MateOrientation . OUTTIE ; DefaultLibrary defaultLibrary0 = new DefaultLibrary ( "DCS * < iQjH@`V%~X > 9" , distance0 , mateOrientation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { Distance distance0 = Distance . buildDistance ( ( - 1 . 0F ) , 6 . 0F ) ; Distance distance1 = Distance . transformIntoCeleraAssemblerDistance ( distance0 ) ; Distance distance2 = Distance . transformIntoCeleraAssemblerDistance ( distance1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMax ( ) { return max ; }
void test1 ( ) throws Throwable { Distance distance0 = Distance . buildDistance ( 0 , 1 , ( float ) 0 , 0 . 0F ) ; int int0 = distance0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test2 ( ) throws Throwable { Distance distance0 = Distance . buildDistance ( ( - 1858 ) , ( - 1858 ) , 1 . 0F , ( float ) ( - 1858 ) ) ; String string0 = distance0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMax ( ) { return max ; }
void test3 ( ) throws Throwable { Distance distance0 = Distance . buildDistance ( ( - 1 . 0F ) , 6 . 0F ) ; Distance distance1 = Distance . transformIntoCeleraAssemblerDistance ( distance0 ) ; boolean boolean0 = distance0 . equals ( ( Object ) distance1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test4 ( ) throws Throwable { Distance distance0 = Distance . buildDistance ( 941 , 941 ) ; boolean boolean0 = distance0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMin ( ) { return min ; }
void test5 ( ) throws Throwable { Distance distance0 = Distance . buildDistance ( ( - 96 . 57249F ) , 0 . 0F ) ; boolean boolean0 = distance0 . equals ( ( Object ) " - 96 . 572 , std : - 32 . 529" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMin ( ) { return min ; }
void test6 ( ) throws Throwable { Distance distance0 = Distance . buildDistance ( ( - 1858 ) , ( - 1858 ) , 1 . 0F , ( float ) ( - 1858 ) ) ; Distance distance1 = Distance . buildDistance ( 1 , ( - 2025 ) , 1 . 0F , ( - 807 . 76373F ) ) ; boolean boolean0 = distance0 . equals ( ( Object ) distance1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMin ( ) { return min ; }
void test7 ( ) throws Throwable { Distance distance0 = Distance . buildDistance ( ( - 1858 ) , ( - 1858 ) , 1 . 0F , ( float ) ( - 1858 ) ) ; Distance distance1 = Distance . buildDistance ( ( - 1858 ) , ( - 1858 ) ) ; boolean boolean0 = distance0 . equals ( ( Object ) distance1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test8 ( ) throws Throwable { Distance distance0 = Distance . buildDistance ( ( float ) 0 , 0 . 0F ) ; Distance distance1 = Distance . buildDistance ( ( - 1957 ) , 0 , ( float ) 0 , ( - 214 . 77959F ) ) ; boolean boolean0 = distance0 . equals ( ( Object ) distance1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMean ( ) { return mean ; }
void test9 ( ) throws Throwable { Distance distance0 = Distance . buildDistance ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { Iterator < T > iter = iterator ( ) ; StringBuilder builder = new StringBuilder ( ( int ) getLength ( ) * 5 ) ; while ( iter . hasNext ( ) ) { if ( builder . length ( ) > 0 ) { builder . append ( " , " ) ; } builder . append ( iter . next ( ) ) ; } return builder . toString ( ) ; }
void test0 ( ) throws Throwable { DefaultFragment defaultFragment0 = new DefaultFragment ( "Wmr`IqvxdkF } \"'JB' > " , ( NucleotideSequence ) null , ( QualitySequence ) null , ( Range ) null , ( Range ) null , ( Library ) null , "Wmr`IqvxdkF } \"'JB' > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { long length = getLength ( ) ; if ( hash = = 0 & & length > 0 ) { int prime = 31 ; int result = 1 ; Iterator < T > iter = iterator ( ) ; while ( iter . hasNext ( ) ) { result = prime * result + iter . next ( ) . hashCode ( ) ; } hash = result ; } return hash ; }
void test1 ( ) throws Throwable { DefaultFragment defaultFragment0 = new DefaultFragment ( "Wmr`IqvxdkF } \"'JB' > " , ( NucleotideSequence ) null , ( QualitySequence ) null , ( Range ) null , ( Range ) null , ( Library ) null , "Wmr`IqvxdkF } \"'JB' > " ) ; Range range0 = defaultFragment0 . getValidRange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Range getValidRange ( ) ; }
void test2 ( ) throws Throwable { DefaultFragment defaultFragment0 = new DefaultFragment ( "Wmr`IqvxdkF } \"'JB' > " , ( NucleotideSequence ) null , ( QualitySequence ) null , ( Range ) null , ( Range ) null , ( Library ) null , "Wmr`IqvxdkF } \"'JB' > " ) ; Library library0 = defaultFragment0 . getLibrary ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Library getLibrary ( String libraryId ) throws DataStoreException { throwErrorIfClosed ( ) ; return libraries . get ( libraryId ) ; }
void test3 ( ) throws Throwable { DefaultFragment defaultFragment0 = new DefaultFragment ( "Wmr`IqvxdkF } \"'JB' > " , ( NucleotideSequence ) null , ( QualitySequence ) null , ( Range ) null , ( Range ) null , ( Library ) null , "Wmr`IqvxdkF } \"'JB' > " ) ; String string0 = defaultFragment0 . getComment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComment ( ) { return comments ; }
void test4 ( ) throws Throwable { DefaultFragment defaultFragment0 = new DefaultFragment ( "Wmr`IqvxdkF } \"'JB' > " , ( NucleotideSequence ) null , ( QualitySequence ) null , ( Range ) null , ( Range ) null , ( Library ) null , "Wmr`IqvxdkF } \"'JB' > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
void test5 ( ) throws Throwable { DefaultFragment defaultFragment0 = new DefaultFragment ( "Wmr`IqvxdkF } \"'JB' > " , ( NucleotideSequence ) null , ( QualitySequence ) null , ( Range ) null , ( Range ) null , ( Library ) null , "Wmr`IqvxdkF } \"'JB' > " ) ; Range range0 = defaultFragment0 . getVectorClearRange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Range getVectorClearRange ( ) ; String getComment ( ) ; Library getLibrary ( ) ; }
void test7 ( ) throws Throwable { DefaultFragment defaultFragment0 = new DefaultFragment ( "Wmr`IqvxdkF } \"'JB' > " , ( NucleotideSequence ) null , ( QualitySequence ) null , ( Range ) null , ( Range ) null , ( Library ) null , "Wmr`IqvxdkF } \"'JB' > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null ) { return false ; } if ( ! ( obj instanceof Sequence ) ) { return false ; } Sequence < ? > other = ( Sequence < ? > ) obj ; if ( getLength ( ) ! = other . getLength ( ) ) { return false ; } Iterator < T > iter = iterator ( ) ; Iterator < ? > otherIter = other . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( ! iter . next ( ) . equals ( otherIter . next ( ) ) ) { return false ; } } return true ; }
