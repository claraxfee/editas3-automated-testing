void test0 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; int int0 = webRememberMeManager0 . getCookieMaxAge ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCookieName ( ) { assertCookieAttribute ( ) ; return ( ( CookieAttribute ) this . identityAttribute ) . getName ( ) ; }
void test3 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; webRememberMeManager0 . setCookieMaxAge ( 94608000 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCookieMaxAge ( ) { assertCookieAttribute ( ) ; return ( ( CookieAttribute ) this . identityAttribute ) . getMaxAge ( ) ; }
void test4 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; WebAttribute < String > webAttribute0 = webRememberMeManager0 . getIdentityAttribute ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCookieMaxAge ( ) { assertCookieAttribute ( ) ; return ( ( CookieAttribute ) this . identityAttribute ) . getMaxAge ( ) ; }
void test5 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; webRememberMeManager0 . setCookieSecure ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCookieMaxAge ( ) { assertCookieAttribute ( ) ; return ( ( CookieAttribute ) this . identityAttribute ) . getMaxAge ( ) ; }
void test7 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; webRememberMeManager0 . getCookiePath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCookieMaxAge ( ) { assertCookieAttribute ( ) ; return ( ( CookieAttribute ) this . identityAttribute ) . getMaxAge ( ) ; }
void test8 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; String string0 = webRememberMeManager0 . getCookieName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCookieMaxAge ( ) { assertCookieAttribute ( ) ; return ( ( CookieAttribute ) this . identityAttribute ) . getMaxAge ( ) ; }
void test9 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; webRememberMeManager0 . setCookiePath ( " : UR" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCookieName ( ) { assertCookieAttribute ( ) ; return ( ( CookieAttribute ) this . identityAttribute ) . getName ( ) ; }
void test10 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; webRememberMeManager0 . setCookieName ( " : UR" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCookieMaxAge ( ) { assertCookieAttribute ( ) ; return ( ( CookieAttribute ) this . identityAttribute ) . getMaxAge ( ) ; }
void test0 ( ) throws Throwable { WebUtils webUtils0 = new WebUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { ServletResponse servletResponse0 = WebUtils . unbindServletResponse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ServletResponse unbindServletResponse ( ) { return ( ServletResponse ) ThreadContext . remove ( SERVLET_RESPONSE_KEY ) ; }
void test6 ( ) throws Throwable { ServletRequest servletRequest0 = WebUtils . unbindServletRequest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ServletRequest unbindServletRequest ( ) { return ( ServletRequest ) ThreadContext . remove ( SERVLET_REQUEST_KEY ) ; }
void test2 ( ) throws Throwable { RequestParamAttribute < AbstractWebAttribute < Integer > > requestParamAttribute0 = new RequestParamAttribute < AbstractWebAttribute < Integer > > ( ) ; requestParamAttribute0 . removeValue ( ( ServletRequest ) null , ( ServletResponse ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMutable ( ) { return mutable ; }
void test1 ( ) throws Throwable { CookieAttribute < CookieAttribute < PropertyEditor > > cookieAttribute0 = new CookieAttribute < CookieAttribute < PropertyEditor > > ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxAge ( ) { return maxAge ; }
void test2 ( ) throws Throwable { CookieAttribute < String > cookieAttribute0 = new CookieAttribute < String > ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxAge ( ) { return maxAge ; }
void test3 ( ) throws Throwable { CookieAttribute < CookieAttribute < Object > > cookieAttribute0 = new CookieAttribute < CookieAttribute < Object > > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSecure ( ) { return secure ; }
void test5 ( ) throws Throwable { Class < ? extends PropertyEditor > class0 = PropertyEditorSupport . class ; CookieAttribute < Object > cookieAttribute0 = new CookieAttribute < Object > ( "K" , "K" , 0 , class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPath ( ) { return path ; }
void test1 ( ) throws Throwable { Class < ? extends PropertyEditor > class0 = PropertyEditorSupport . class ; CookieAttribute < WebAttribute < Object > > cookieAttribute0 = new CookieAttribute < WebAttribute < Object > > ( "" , "" , ( - 16 ) , class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMutable ( ) { return mutable ; }
void test4 ( ) throws Throwable { CookieAttribute < WebAttribute < Object > > cookieAttribute0 = new CookieAttribute < WebAttribute < Object > > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T retrieveValue ( ServletRequest request , ServletResponse response ) ; void storeValue ( T value , ServletRequest request , ServletResponse response ) ; void removeValue ( ServletRequest request , ServletResponse response ) ; }
void test0 ( ) throws Throwable { HasAnyRolesTag hasAnyRolesTag0 = new HasAnyRolesTag ( ) ; int int0 = hasAnyRolesTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) throws JspException { verifyAttributes ( ) ; return onDoStartTag ( ) ; }
void test0 ( ) throws Throwable { GuestTag guestTag0 = new GuestTag ( ) ; int int0 = guestTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) throws JspException { verifyAttributes ( ) ; return onDoStartTag ( ) ; }
void test0 ( ) throws Throwable { AuthenticatedTag authenticatedTag0 = new AuthenticatedTag ( ) ; int int0 = authenticatedTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) throws JspException { verifyAttributes ( ) ; return onDoStartTag ( ) ; }
void test0 ( ) throws Throwable { NotAuthenticatedTag notAuthenticatedTag0 = new NotAuthenticatedTag ( ) ; int int0 = notAuthenticatedTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) throws JspException { verifyAttributes ( ) ; return onDoStartTag ( ) ; }
void test0 ( ) throws Throwable { HasAnyRolesTag hasAnyRolesTag0 = new HasAnyRolesTag ( ) ; int int0 = hasAnyRolesTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) throws JspException { verifyAttributes ( ) ; return onDoStartTag ( ) ; }
void test1 ( ) throws Throwable { HasRoleTag hasRoleTag0 = new HasRoleTag ( ) ; hasRoleTag0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int onDoStartTag ( ) throws JspException { boolean show = showTagBody ( getName ( ) ) ; if ( show ) { return TagSupport . EVAL_BODY_INCLUDE ; } else { return TagSupport . SKIP_BODY ; } }
void test2 ( ) throws Throwable { LacksRoleTag lacksRoleTag0 = new LacksRoleTag ( ) ; int int0 = lacksRoleTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) throws JspException { verifyAttributes ( ) ; return onDoStartTag ( ) ; }
void test0 ( ) throws Throwable { HasPermissionTag hasPermissionTag0 = new HasPermissionTag ( ) ; String string0 = "h\"wm`P45S\\uyro" ; boolean boolean0 = hasPermissionTag0 . showTagBody ( string0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean showTagBody ( String roleName ) ; }
void test0 ( ) throws Throwable { PrincipalTag principalTag0 = new PrincipalTag ( ) ; principalTag0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setType ( String type ) { this . type = type ; }
void test1 ( ) throws Throwable { PrincipalTag principalTag0 = new PrincipalTag ( ) ; principalTag0 . setProperty ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setProperty ( String property ) { this . property = property ; }
void test2 ( ) throws Throwable { PrincipalTag principalTag0 = new PrincipalTag ( ) ; String string0 = principalTag0 . getProperty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProperty ( ) { return property ; }
void test3 ( ) throws Throwable { PrincipalTag principalTag0 = new PrincipalTag ( ) ; String string0 = principalTag0 . getDefaultValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultValue ( ) { return defaultValue ; }
void test4 ( ) throws Throwable { PrincipalTag principalTag0 = new PrincipalTag ( ) ; principalTag0 . setDefaultValue ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test5 ( ) throws Throwable { PrincipalTag principalTag0 = new PrincipalTag ( ) ; String string0 = principalTag0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test6 ( ) throws Throwable { PrincipalTag principalTag0 = new PrincipalTag ( ) ; int int0 = principalTag0 . onDoStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int onDoStartTag ( ) throws JspException { boolean show = showTagBody ( getName ( ) ) ; if ( show ) { return TagSupport . EVAL_BODY_INCLUDE ; } else { return TagSupport . SKIP_BODY ; } }
void test0 ( ) throws Throwable { LacksPermissionTag lacksPermissionTag0 = new LacksPermissionTag ( ) ; int int0 = lacksPermissionTag0 . onDoStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int onDoStartTag ( ) throws JspException { boolean show = showTagBody ( getName ( ) ) ; if ( show ) { return TagSupport . EVAL_BODY_INCLUDE ; } else { return TagSupport . SKIP_BODY ; } }
void test0 ( ) throws Throwable { HasAnyRolesTag hasAnyRolesTag0 = new HasAnyRolesTag ( ) ; int int0 = hasAnyRolesTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) throws JspException { verifyAttributes ( ) ; return onDoStartTag ( ) ; }
void test0 ( ) throws Throwable { HasRoleTag hasRoleTag0 = new HasRoleTag ( ) ; int int0 = hasRoleTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) throws JspException { verifyAttributes ( ) ; return onDoStartTag ( ) ; }
void test0 ( ) throws Throwable { LacksRoleTag lacksRoleTag0 = new LacksRoleTag ( ) ; int int0 = lacksRoleTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) throws JspException { verifyAttributes ( ) ; return onDoStartTag ( ) ; }
void test2 ( ) throws Throwable { HasPermissionTag hasPermissionTag0 = new HasPermissionTag ( ) ; hasPermissionTag0 . setName ( "giag%py : abt_c2" ) ; int int0 = hasPermissionTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) throws JspException { verifyAttributes ( ) ; return onDoStartTag ( ) ; }
void test3 ( ) throws Throwable { LacksPermissionTag lacksPermissionTag0 = new LacksPermissionTag ( ) ; int int0 = lacksPermissionTag0 . onDoStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int onDoStartTag ( ) throws JspException { boolean show = showTagBody ( getName ( ) ) ; if ( show ) { return TagSupport . EVAL_BODY_INCLUDE ; } else { return TagSupport . SKIP_BODY ; } }
void test0 ( ) throws Throwable { UserTag userTag0 = new UserTag ( ) ; int int0 = userTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) throws JspException { verifyAttributes ( ) ; return onDoStartTag ( ) ; }
void test1 ( ) throws Throwable { FormAuthenticationFilter formAuthenticationFilter0 = new FormAuthenticationFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRememberMeParam ( ) { return rememberMeParam ; }
void test2 ( ) throws Throwable { PermissionsAuthorizationFilter permissionsAuthorizationFilter0 = new PermissionsAuthorizationFilter ( ) ; boolean boolean0 = permissionsAuthorizationFilter0 . onPreHandle ( ( ServletRequest ) null , ( ServletResponse ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean onPreHandle ( ServletRequest request , ServletResponse response , Object mappedValue ) throws Exception { / / mapped value is ignored - not needed for most ( if not all ) authc Filters . return isAccessAllowed ( request , response , mappedValue ) | | onAccessDenied ( request , response ) ; }
void test1 ( ) throws Throwable { RolesAuthorizationFilter rolesAuthorizationFilter0 = new RolesAuthorizationFilter ( ) ; boolean boolean0 = rolesAuthorizationFilter0 . pathsMatch ( "yl99aE - } QvJ" , "yl99aE - } QvJ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean pathsMatch ( String path , ServletRequest request ) { String requestURI = getPathWithinApplication ( request ) ; if ( log . isTraceEnabled ( ) ) { log . trace ( "Attempting to match pattern [ " + path + " ] with current requestURI [ " + requestURI + " ] . . . " ) ; } return pathsMatch ( path , requestURI ) ; }
void test3 ( ) throws Throwable { BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter ( ) ; boolean boolean0 = basicHttpAuthenticationFilter0 . preHandle ( ( ServletRequest ) null , ( ServletResponse ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean preHandle ( ServletRequest request , ServletResponse response ) throws Exception { if ( this . appliedPaths = = null | | this . appliedPaths . isEmpty ( ) ) { if ( log . isTraceEnabled ( ) ) { log . trace ( "appliedPaths property is null or empty . This Filter will passthrough immediately . " ) ; } return true ; } for ( String path : this . appliedPaths . keySet ( ) ) { / / If the path does match , then pass on to the subclass implementation for specific checks / / ( first match 'wins' ) : if ( pathsMatch ( path , request ) ) { if ( log . isTraceEnabled ( ) ) { log . trace ( "Current requestURI matches pattern [ " + path + " ] . Performing onPreHandle check . . . " ) ; } Object config = this . appliedPaths . get ( path ) ; return onPreHandle ( request , response , config ) ; } } / / no path matched , allow the request to go through : return true ; }
void test0 ( ) throws Throwable { PassThruAuthenticationFilter passThruAuthenticationFilter0 = new PassThruAuthenticationFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter ( ) ; boolean boolean0 = basicHttpAuthenticationFilter0 . isLoginAttempt ( " . AdG | @U * V@YV" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthcScheme ( ) { return authcScheme ; }
void test2 ( ) throws Throwable { BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter ( ) ; basicHttpAuthenticationFilter0 . setAuthzScheme ( "Attemptin to execute login wth headers [ " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthzScheme ( ) { return authzScheme ; }
void test3 ( ) throws Throwable { BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter ( ) ; String string0 = basicHttpAuthenticationFilter0 . getAuthcScheme ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getApplicationName ( ) { return applicationName ; }
void test4 ( ) throws Throwable { BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter ( ) ; String string0 = basicHttpAuthenticationFilter0 . getApplicationName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthzScheme ( ) { return authzScheme ; }
void test5 ( ) throws Throwable { BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter ( ) ; basicHttpAuthenticationFilter0 . setAuthcScheme ( " . AdG | @U * V@YV" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthcScheme ( ) { return authcScheme ; }
void test6 ( ) throws Throwable { BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter ( ) ; String [ ] stringArray0 = basicHttpAuthenticationFilter0 . getPrincipalsAndCredentials ( "SspM ) _hC" , ( ServletRequest ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthzScheme ( ) { return authzScheme ; }
void test7 ( ) throws Throwable { BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter ( ) ; basicHttpAuthenticationFilter0 . setApplicationName ( "BASIC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthcScheme ( ) { return authcScheme ; }
void test9 ( ) throws Throwable { BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter ( ) ; basicHttpAuthenticationFilter0 . getPrincipalsAndCredentials ( ( String ) null , ( ServletRequest ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getApplicationName ( ) { return applicationName ; }
void test10 ( ) throws Throwable { BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter ( ) ; String [ ] stringArray0 = basicHttpAuthenticationFilter0 . getPrincipalsAndCredentials ( " . AdG | @U * V@YV" , ( ServletRequest ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthcScheme ( ) { return authcScheme ; }
void test0 ( ) throws Throwable { PassThruAuthenticationFilter passThruAuthenticationFilter0 = new PassThruAuthenticationFilter ( ) ; passThruAuthenticationFilter0 . setSuccessUrl ( "9 . - qsY ? ja6 & #DE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSuccessUrl ( ) { return successUrl ; }
void test2 ( ) throws Throwable { PassThruAuthenticationFilter passThruAuthenticationFilter0 = new PassThruAuthenticationFilter ( ) ; String string0 = passThruAuthenticationFilter0 . getSuccessUrl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSuccessUrl ( ) { return successUrl ; }
void test0 ( ) throws Throwable { AnonymousFilter anonymousFilter0 = new AnonymousFilter ( ) ; boolean boolean0 = anonymousFilter0 . onPreHandle ( ( ServletRequest ) null , ( ServletResponse ) null , ( Object ) "Chine" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean onPreHandle ( ServletRequest request , ServletResponse response , Object mappedValue ) throws Exception { / / mapped value is ignored - not needed for most ( if not all ) authc Filters . return isAccessAllowed ( request , response , mappedValue ) | | onAccessDenied ( request , response ) ; }
void test0 ( ) throws Throwable { RolesAuthorizationFilter rolesAuthorizationFilter0 = new RolesAuthorizationFilter ( ) ; rolesAuthorizationFilter0 . setUnauthorizedUrl ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUnauthorizedUrl ( ) { return unauthorizedUrl ; }
void test1 ( ) throws Throwable { RolesAuthorizationFilter rolesAuthorizationFilter0 = new RolesAuthorizationFilter ( ) ; String string0 = rolesAuthorizationFilter0 . getUnauthorizedUrl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUnauthorizedUrl ( ) { return unauthorizedUrl ; }
void test0 ( ) throws Throwable { RolesAuthorizationFilter rolesAuthorizationFilter0 = new RolesAuthorizationFilter ( ) ; boolean boolean0 = rolesAuthorizationFilter0 . onPreHandle ( ( ServletRequest ) null , ( ServletResponse ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean onPreHandle ( ServletRequest request , ServletResponse response , Object mappedValue ) throws Exception { / / mapped value is ignored - not needed for most ( if not all ) authc Filters . return isAccessAllowed ( request , response , mappedValue ) | | onAccessDenied ( request , response ) ; }
void test0 ( ) throws Throwable { PermissionsAuthorizationFilter permissionsAuthorizationFilter0 = new PermissionsAuthorizationFilter ( ) ; boolean boolean0 = permissionsAuthorizationFilter0 . onPreHandle ( ( ServletRequest ) null , ( ServletResponse ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean onPreHandle ( ServletRequest request , ServletResponse response , Object mappedValue ) throws Exception { / / mapped value is ignored - not needed for most ( if not all ) authc Filters . return isAccessAllowed ( request , response , mappedValue ) | | onAccessDenied ( request , response ) ; }
void test1 ( ) throws Throwable { FormAuthenticationFilter formAuthenticationFilter0 = new FormAuthenticationFilter ( ) ; formAuthenticationFilter0 . postHandle ( ( ServletRequest ) null , ( ServletResponse ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPasswordParam ( ) { return passwordParam ; }
void test2 ( ) throws Throwable { BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter ( ) ; basicHttpAuthenticationFilter0 . cleanup ( ( ServletRequest ) null , ( ServletResponse ) null , ( Exception ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthcScheme ( ) { return authcScheme ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { JSecurityFilter jSecurityFilter0 = new JSecurityFilter ( ) ; IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; DefaultWebSecurityManager defaultWebSecurityManager0 = ( DefaultWebSecurityManager ) jSecurityFilter0 . ensureSecurityManager ( ( Configuration ) iniWebConfiguration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test1 ( ) throws Throwable { JSecurityFilter jSecurityFilter0 = new JSecurityFilter ( ) ; IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; jSecurityFilter0 . setConfiguration ( ( WebConfiguration ) iniWebConfiguration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHttpSessions ( ) { SecurityManager secMgr = getSecurityManager ( ) ; if ( secMgr instanceof DefaultWebSecurityManager ) { return ( ( DefaultWebSecurityManager ) secMgr ) . isHttpSessionMode ( ) ; } else { return true ; } }
void test2 ( ) throws Throwable { JSecurityFilter jSecurityFilter0 = new JSecurityFilter ( ) ; jSecurityFilter0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHttpSessions ( ) { SecurityManager secMgr = getSecurityManager ( ) ; if ( secMgr instanceof DefaultWebSecurityManager ) { return ( ( DefaultWebSecurityManager ) secMgr ) . isHttpSessionMode ( ) ; } else { return true ; } }
void test3 ( ) throws Throwable { JSecurityFilter jSecurityFilter0 = new JSecurityFilter ( ) ; boolean boolean0 = jSecurityFilter0 . isHttpSessions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHttpSessions ( ) { SecurityManager secMgr = getSecurityManager ( ) ; if ( secMgr instanceof DefaultWebSecurityManager ) { return ( ( DefaultWebSecurityManager ) secMgr ) . isHttpSessionMode ( ) ; } else { return true ; } }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { JSecurityFilter jSecurityFilter0 = new JSecurityFilter ( ) ; IniWebConfiguration iniWebConfiguration0 = ( IniWebConfiguration ) jSecurityFilter0 . configure ( ) ; DefaultWebSecurityManager defaultWebSecurityManager0 = ( DefaultWebSecurityManager ) jSecurityFilter0 . ensureSecurityManager ( ( Configuration ) iniWebConfiguration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test7 ( ) throws Throwable { JSecurityFilter jSecurityFilter0 = new JSecurityFilter ( ) ; jSecurityFilter0 . applyFilterConfig ( ( WebConfiguration ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHttpSessions ( ) { SecurityManager secMgr = getSecurityManager ( ) ; if ( secMgr instanceof DefaultWebSecurityManager ) { return ( ( DefaultWebSecurityManager ) secMgr ) . isHttpSessionMode ( ) ; } else { return true ; } }
void test0 ( ) throws Throwable { JSecurityFilter jSecurityFilter0 = new JSecurityFilter ( ) ; jSecurityFilter0 . setName ( "2Kft" ) ; String string0 = jSecurityFilter0 . getAlreadyFilteredAttributeName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlreadyFilteredAttributeName ( ) { String name = getName ( ) ; if ( name = = null ) { name = getClass ( ) . getName ( ) ; } return name + ALREADY_FILTERED_SUFFIX ; }
void test2 ( ) throws Throwable { JSecurityFilter jSecurityFilter0 = new JSecurityFilter ( ) ; boolean boolean0 = jSecurityFilter0 . shouldNotFilter ( ( ServletRequest ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean shouldNotFilter ( ServletRequest request ) throws ServletException { return false ; }
void test0 ( ) throws Throwable { boolean boolean0 = JSecurityHttpServletResponse . isSchemeChar ( 'r' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSchemeChar ( char c ) { return Character . isLetterOrDigit ( c ) | | c = = ' + ' | | c = = ' - ' | | c = = ' . ' ; }
void test1 ( ) throws Throwable { boolean boolean0 = JSecurityHttpServletResponse . isSchemeChar ( ' - ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSchemeChar ( char c ) { return Character . isLetterOrDigit ( c ) | | c = = ' + ' | | c = = ' - ' | | c = = ' . ' ; }
void test2 ( ) throws Throwable { boolean boolean0 = JSecurityHttpServletResponse . isSchemeChar ( ' + ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSchemeChar ( char c ) { return Character . isLetterOrDigit ( c ) | | c = = ' + ' | | c = = ' - ' | | c = = ' . ' ; }
void test3 ( ) throws Throwable { boolean boolean0 = JSecurityHttpServletResponse . isSchemeChar ( ' . ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSchemeChar ( char c ) { return Character . isLetterOrDigit ( c ) | | c = = ' + ' | | c = = ' - ' | | c = = ' . ' ; }
void test4 ( ) throws Throwable { boolean boolean0 = JSecurityHttpServletResponse . isSchemeChar ( '\\' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSchemeChar ( char c ) { return Character . isLetterOrDigit ( c ) | | c = = ' + ' | | c = = ' - ' | | c = = ' . ' ; }
void test8 ( ) throws Throwable { JSecurityHttpSession jSecurityHttpSession0 = new JSecurityHttpSession ( ( Session ) null , ( HttpServletRequest ) null , ( ServletContext ) null ) ; ServletContext servletContext0 = jSecurityHttpSession0 . getServletContext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ServletContext getServletContext ( ) { return this . servletContext ; }
void test10 ( ) throws Throwable { JSecurityHttpSession jSecurityHttpSession0 = new JSecurityHttpSession ( ( Session ) null , ( HttpServletRequest ) null , ( ServletContext ) null ) ; HttpSessionContext httpSessionContext0 = jSecurityHttpSession0 . getSessionContext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HttpSessionContext getSessionContext ( ) { return HTTP_SESSION_CONTEXT ; }
void test12 ( ) throws Throwable { JSecurityHttpSession jSecurityHttpSession0 = new JSecurityHttpSession ( ( Session ) null , ( HttpServletRequest ) null , ( ServletContext ) null ) ; Boolean boolean0 = new Boolean ( "_INET_ADDRESS_SESSION_KEY" ) ; jSecurityHttpSession0 . afterBound ( "_INET_ADDRESS_SESSION_KEY" , ( Object ) boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test0 ( ) throws Throwable { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; boolean boolean0 = iniWebConfiguration0 . pathMatches ( " ] zzL1 + Paq } 4 ) X" , " ] zzL1 + Paq } 4 ) X" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean pathMatches ( String pattern , String path ) { PatternMatcher pathMatcher = getPathMatcher ( ) ; return pathMatcher . matches ( pattern , path ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; iniWebConfiguration0 . init ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test2 ( ) throws Throwable { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; iniWebConfiguration0 . setFilterConfig ( ( FilterConfig ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConfig ( ) { return config ; }
void test4 ( ) throws Throwable { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; iniWebConfiguration0 . setPathMatcher ( ( PatternMatcher ) antPathMatcher0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConfig ( ) { return config ; }
void test6 ( ) throws Throwable { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; Map < String , Filter > map0 = iniWebConfiguration0 . getFilters ( ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test7 ( ) throws Throwable { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; LinkedList < Filter > linkedList0 = new LinkedList < Filter > ( ) ; ProxiedFilterChain proxiedFilterChain0 = ( ProxiedFilterChain ) iniWebConfiguration0 . createChain ( ( List < Filter > ) linkedList0 , ( FilterChain ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FilterChain createChain ( List < Filter > filters , FilterChain originalChain ) { return new ProxiedFilterChain ( originalChain , filters ) ; }
void test8 ( ) throws Throwable { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; HashMap < String , Map < String , String > > hashMap0 = new HashMap < String , Map < String , String > > ( ) ; iniWebConfiguration0 . afterSecurityManagerSet ( ( Map < String , Map < String , String > > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConfig ( ) { return config ; }
void test9 ( ) throws Throwable { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; FilterChain filterChain0 = iniWebConfiguration0 . getChain ( ( ServletRequest ) null , ( ServletResponse ) null , ( FilterChain ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FilterChain getChain ( ServletRequest request , ServletResponse response , FilterChain originalChain ) { if ( this . chains = = null | | this . chains . isEmpty ( ) ) { return null ; } String requestURI = getPathWithinApplication ( request ) ; for ( String path : this . chains . keySet ( ) ) { / / If the path does match , then pass on to the subclass implementation for specific checks : if ( pathMatches ( path , requestURI ) ) { if ( log . isTraceEnabled ( ) ) { log . trace ( "Matched path [ " + path + " ] for requestURI [ " + requestURI + " ] . " + "Utilizing corresponding filter chain . . . " ) ; } return getChain ( path , originalChain ) ; } } return null ; }
void test10 ( ) throws Throwable { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; FilterChain filterChain0 = iniWebConfiguration0 . getChain ( " ) _x^k" , ( FilterChain ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FilterChain getChain ( ServletRequest request , ServletResponse response , FilterChain originalChain ) { if ( this . chains = = null | | this . chains . isEmpty ( ) ) { return null ; } String requestURI = getPathWithinApplication ( request ) ; for ( String path : this . chains . keySet ( ) ) { / / If the path does match , then pass on to the subclass implementation for specific checks : if ( pathMatches ( path , requestURI ) ) { if ( log . isTraceEnabled ( ) ) { log . trace ( "Matched path [ " + path + " ] for requestURI [ " + requestURI + " ] . " + "Utilizing corresponding filter chain . . . " ) ; } return getChain ( path , originalChain ) ; } } return null ; }
void test11 ( ) throws Throwable { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; HashMap < String , List < Filter > > hashMap0 = new HashMap < String , List < Filter > > ( ) ; iniWebConfiguration0 . initFilters ( ( Map < String , List < Filter > > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConfig ( ) { return config ; }
void test12 ( ) throws Throwable { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; HashMap < String , List < Filter > > hashMap0 = new HashMap < String , List < Filter > > ( ) ; LinkedList < Filter > linkedList0 = new LinkedList < Filter > ( ) ; hashMap0 . put ( ( String ) null , ( List < Filter > ) linkedList0 ) ; iniWebConfiguration0 . initFilters ( ( Map < String , List < Filter > > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConfig ( ) { return config ; }
void test13 ( ) throws Throwable { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConfig ( ) { return config ; }
void test14 ( ) throws Throwable { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; HashMap < String , IniWebConfiguration > hashMap0 = new HashMap < String , IniWebConfiguration > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test15 ( ) throws Throwable { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; Map < String , Filter > map0 = iniWebConfiguration0 . createDefaultFilters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test16 ( ) throws Throwable { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; try { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test17 ( ) throws Throwable { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; Map < String , Filter > map0 = iniWebConfiguration0 . getFilters ( ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , List < Filter > > createChains ( Map < String , String > urls , Map < String , Filter > filters ) { if ( urls = = null | | urls . isEmpty ( ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "No urls to process . " ) ; } return null ; } if ( filters = = null | | filters . isEmpty ( ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "No filters to process . " ) ; } return null ; } if ( log . isTraceEnabled ( ) ) { log . trace ( "Before url processing . " ) ; } Map < String , List < Filter > > pathChains = new LinkedHashMap < String , List < Filter > > ( urls . size ( ) ) ; for ( Map . Entry < String , String > entry : urls . entrySet ( ) ) { String path = entry . getKey ( ) ; String value = entry . getValue ( ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Processing path [ " + path + " ] with value [ " + value + " ] " ) ; } List < Filter > pathFilters = new ArrayList < Filter > ( ) ; / / parse the value by tokenizing it to get the resulting filter - specific config entries / / / / e . g . for a value of / / / / "authc , roles [ admin , user ] , perms [ file : edit ] " / / / / the resulting token array would equal / / / / { "authc" , "roles [ admin , user ] " , "perms [ file : edit ] " } / / String [ ] filterTokens = split ( value , ' , ' , ' [ ' , ' ] ' , true , true ) ; / / each token is specific to each filter . / / strip the name and extract any filter - specific config between brackets [ ] for ( String token : filterTokens ) { String [ ] nameAndConfig = token . split ( "\\ [ " , 2 ) ; String name = nameAndConfig [ 0 ] ; String config = null ; if ( nameAndConfig . length = = 2 ) { config = nameAndConfig [ 1 ] ; / / if there was an open bracket , there was a close bracket , so strip it too : config = config . substring ( 0 , config . length ( ) - 1 ) ; } / / now we have the filter name , path and ( possibly null ) path - specific config . Let's apply them : Filter filter = filters . get ( name ) ; if ( filter = = null ) { String msg = "Path [ " + path + " ] specified a filter named '" + name + "' , but that " + "filter has not been specified in the [ " + FILTERS + " ] section . " ; throw new ConfigurationException ( msg ) ; } if ( filter instanceof PathConfigProcessor ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Applying path [ " + path + " ] to filter [ " + name + " ] " + "with config [ " + config + " ] " ) ; } ( ( PathConfigProcessor ) filter ) . processPathConfig ( path , config ) ; } pathFilters . add ( filter ) ; } if ( ! pathFilters . isEmpty ( ) ) { pathChains . put ( path , pathFilters ) ; } } if ( pathChains . isEmpty ( ) ) { return null ; } return pathChains ; }
void test18 ( ) throws Throwable { IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; Map < String , Filter > map0 = iniWebConfiguration0 . getFilters ( ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , List < Filter > > createChains ( Map < String , String > urls , Map < String , Filter > filters ) { if ( urls = = null | | urls . isEmpty ( ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "No urls to process . " ) ; } return null ; } if ( filters = = null | | filters . isEmpty ( ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "No filters to process . " ) ; } return null ; } if ( log . isTraceEnabled ( ) ) { log . trace ( "Before url processing . " ) ; } Map < String , List < Filter > > pathChains = new LinkedHashMap < String , List < Filter > > ( urls . size ( ) ) ; for ( Map . Entry < String , String > entry : urls . entrySet ( ) ) { String path = entry . getKey ( ) ; String value = entry . getValue ( ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Processing path [ " + path + " ] with value [ " + value + " ] " ) ; } List < Filter > pathFilters = new ArrayList < Filter > ( ) ; / / parse the value by tokenizing it to get the resulting filter - specific config entries / / / / e . g . for a value of / / / / "authc , roles [ admin , user ] , perms [ file : edit ] " / / / / the resulting token array would equal / / / / { "authc" , "roles [ admin , user ] " , "perms [ file : edit ] " } / / String [ ] filterTokens = split ( value , ' , ' , ' [ ' , ' ] ' , true , true ) ; / / each token is specific to each filter . / / strip the name and extract any filter - specific config between brackets [ ] for ( String token : filterTokens ) { String [ ] nameAndConfig = token . split ( "\\ [ " , 2 ) ; String name = nameAndConfig [ 0 ] ; String config = null ; if ( nameAndConfig . length = = 2 ) { config = nameAndConfig [ 1 ] ; / / if there was an open bracket , there was a close bracket , so strip it too : config = config . substring ( 0 , config . length ( ) - 1 ) ; } / / now we have the filter name , path and ( possibly null ) path - specific config . Let's apply them : Filter filter = filters . get ( name ) ; if ( filter = = null ) { String msg = "Path [ " + path + " ] specified a filter named '" + name + "' , but that " + "filter has not been specified in the [ " + FILTERS + " ] section . " ; throw new ConfigurationException ( msg ) ; } if ( filter instanceof PathConfigProcessor ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Applying path [ " + path + " ] to filter [ " + name + " ] " + "with config [ " + config + " ] " ) ; } ( ( PathConfigProcessor ) filter ) . processPathConfig ( path , config ) ; } pathFilters . add ( filter ) ; } if ( ! pathFilters . isEmpty ( ) ) { pathChains . put ( path , pathFilters ) ; } } if ( pathChains . isEmpty ( ) ) { return null ; } return pathChains ; }
void test0 ( ) throws Throwable { Hex hex0 = new Hex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; String string0 = Hex . encodeToString ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String encodeToString ( byte [ ] bytes ) { byte [ ] encoded = encode ( bytes ) ; return CodecSupport . toString ( encoded ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = Hex . decode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] decode ( String base64Encoded ) { byte [ ] bytes = CodecSupport . toBytes ( base64Encoded ) ; return decode ( bytes ) ; }
void test5 ( ) throws Throwable { int int0 = Hex . toDigit ( '5' , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int toDigit ( char ch , int index ) throws IllegalArgumentException { int digit = Character . digit ( ch , 16 ) ; if ( digit = = - 1 ) { throw new IllegalArgumentException ( "Illegal hexadecimal charcter " + ch + " at index " + index ) ; } return digit ; }
void test0 ( ) throws Throwable { Sha256Hash sha256Hash0 = new Sha256Hash ( ( Object ) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" , ( Object ) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" , ( int ) ( byte ) ( - 3 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toBase64 ( ) ; }
void test3 ( ) throws Throwable { Sha384Hash sha384Hash0 = Sha384Hash . fromBase64String ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Sha1Hash ( ) { }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; char [ ] charArray0 = CodecSupport . toChars ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char [ ] toChars ( byte [ ] bytes ) { return toChars ( bytes , PREFERRED_ENCODING ) ; }
void test5 ( ) throws Throwable { Sha384Hash sha384Hash0 = Sha384Hash . fromHexString ( "" ) ; String string0 = sha384Hash0 . toString ( ( Object ) sha384Hash0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; Sha384Hash sha384Hash0 = Sha384Hash . fromBase64String ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toHex ( ) ; / * * * Returns a Base64 encoding of this Hash's { @link #getBytes byte array }
void test9 ( ) throws Throwable { Sha1CredentialsMatcher sha1CredentialsMatcher0 = new Sha1CredentialsMatcher ( ) ; String string0 = sha1CredentialsMatcher0 . toString ( ( Object ) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test0 ( ) throws Throwable { Base64 base64_0 = new Base64 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; byte [ ] byteArray1 = Base64 . encodeChunked ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBase64 ( byte octect ) { if ( octect = = PAD ) { return true ; } else if ( octect < 0 | | base64Alphabet [ octect ] = = - 1 ) { return false ; } else { return true ; } }
void test2 ( ) throws Throwable { String string0 = Base64 . decodeToString ( " ] / rEgawO = = # - . p . jjU ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String decodeToString ( String base64Encoded ) { byte [ ] encodedBytes = CodecSupport . toBytes ( base64Encoded ) ; return decodeToString ( encodedBytes ) ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = Base64 . decode ( "" ) ; byte [ ] byteArray1 = Base64 . encode ( byteArray0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; byteArray0 [ 0 ] = ( byte ) ( - 114 ) ; boolean boolean0 = Base64 . isBase64 ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBase64 ( byte octect ) { if ( octect = = PAD ) { return true ; } else if ( octect < 0 | | base64Alphabet [ octect ] = = - 1 ) { return false ; } else { return true ; } }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; byte [ ] byteArray1 = Base64 . decode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBase64 ( byte octect ) { if ( octect = = PAD ) { return true ; } else if ( octect < 0 | | base64Alphabet [ octect ] = = - 1 ) { return false ; } else { return true ; } }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 43 ] ; byteArray0 [ 19 ] = ( byte ) 9 ; byte [ ] byteArray1 = Base64 . discardWhitespace ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] discardWhitespace ( byte [ ] data ) { byte groomedData [ ] = new byte [ data . length ] ; int bytesCopied = 0 ; for ( byte aByte : data ) { switch ( aByte ) { case ( byte ) ' ' : case ( byte ) '\n' : case ( byte ) '\r' : case ( byte ) '\t' : break ; default : groomedData [ bytesCopied + + ] = aByte ; } } byte packedData [ ] = new byte [ bytesCopied ] ; System . arraycopy ( groomedData , 0 , packedData , 0 , bytesCopied ) ; return packedData ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 40 ] ; byteArray0 [ 3 ] = ( byte ) 32 ; byte [ ] byteArray1 = Base64 . discardWhitespace ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] discardWhitespace ( byte [ ] data ) { byte groomedData [ ] = new byte [ data . length ] ; int bytesCopied = 0 ; for ( byte aByte : data ) { switch ( aByte ) { case ( byte ) ' ' : case ( byte ) '\n' : case ( byte ) '\r' : case ( byte ) '\t' : break ; default : groomedData [ bytesCopied + + ] = aByte ; } } byte packedData [ ] = new byte [ bytesCopied ] ; System . arraycopy ( groomedData , 0 , packedData , 0 , bytesCopied ) ; return packedData ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; byte [ ] byteArray1 = Base64 . encodeChunked ( byteArray0 ) ; byte [ ] byteArray2 = Base64 . encode ( byteArray1 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 43 ] ; byteArray0 [ 0 ] = ( byte ) ( - 93 ) ; byte [ ] byteArray1 = Base64 . encodeChunked ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test10 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 43 ] ; byteArray0 [ 1 ] = ( byte ) ( - 93 ) ; byte [ ] byteArray1 = Base64 . encodeChunked ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test11 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 43 ] ; byteArray0 [ 17 ] = ( byte ) ( - 93 ) ; byte [ ] byteArray1 = Base64 . encodeChunked ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test12 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 40 ] ; byte [ ] byteArray1 = Base64 . encode ( byteArray0 , true ) ; byte [ ] byteArray2 = Base64 . encodeChunked ( byteArray1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test13 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; byteArray0 [ 3 ] = ( byte ) ( - 30 ) ; String string0 = Base64 . encodeToString ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String encodeToString ( byte [ ] bytes ) { byte [ ] encoded = encode ( bytes ) ; return CodecSupport . toString ( encoded ) ; }
void test14 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; byteArray0 [ 0 ] = ( byte ) ( - 114 ) ; byte [ ] byteArray1 = Base64 . encode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test15 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; byteArray0 [ 1 ] = ( byte ) ( - 114 ) ; byte [ ] byteArray1 = Base64 . encode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test16 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 13 ] ; byteArray0 [ 10 ] = ( byte ) 61 ; byte [ ] byteArray1 = Base64 . decode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test17 ( ) throws Throwable { String string0 = Base64 . decodeToString ( "AAAA4g = = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String decodeToString ( String base64Encoded ) { byte [ ] encodedBytes = CodecSupport . toBytes ( base64Encoded ) ; return decodeToString ( encodedBytes ) ; }
void test0 ( ) throws Throwable { HashtableCache hashtableCache0 = new HashtableCache ( "i1v" ) ; hashtableCache0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test1 ( ) throws Throwable { HashtableCache hashtableCache0 = new HashtableCache ( "i1v" ) ; int int0 = hashtableCache0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test2 ( ) throws Throwable { HashtableCache hashtableCache0 = new HashtableCache ( "#^oz [ - uRZV ( & " ) ; Object object0 = hashtableCache0 . get ( ( Object ) "#^oz [ - uRZV ( & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test4 ( ) throws Throwable { HashtableCache hashtableCache0 = new HashtableCache ( "#^oz [ - uRZV ( & " ) ; String string0 = hashtableCache0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test5 ( ) throws Throwable { HashtableCache hashtableCache0 = new HashtableCache ( "#^oz [ - uRZV ( & " ) ; hashtableCache0 . put ( ( Object ) "HashtableCache [ #^oz [ - uRZV ( & ] " , ( Object ) "HashtableCache [ #^oz [ - uRZV ( & ] " ) ; Set < Object > set0 = hashtableCache0 . keys ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test6 ( ) throws Throwable { HashtableCache hashtableCache0 = new HashtableCache ( "i1v" ) ; Set < Object > set0 = hashtableCache0 . keys ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test7 ( ) throws Throwable { HashtableCache hashtableCache0 = new HashtableCache ( "i1v" ) ; Set < Object > set0 = hashtableCache0 . values ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test8 ( ) throws Throwable { HashtableCache hashtableCache0 = new HashtableCache ( "#^oz [ - uRZV ( & " ) ; hashtableCache0 . put ( ( Object ) "HashtableCache [ #^oz [ - uRZV ( & ] " , ( Object ) "HashtableCache [ #^oz [ - uRZV ( & ] " ) ; hashtableCache0 . values ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { EhCacheManager ehCacheManager0 = new EhCacheManager ( ) ; ehCacheManager0 . init ( ) ; EhCache ehCache0 = ( EhCache ) ehCacheManager0 . getCache ( "jsecurity - activeSessionCache" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test1 ( ) throws Throwable { EhCacheManager ehCacheManager0 = new EhCacheManager ( ) ; ehCacheManager0 . setCacheManagerConfigFile ( "#Y ; MTa + NpdL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCacheManagerConfigFile ( ) { return this . cacheManagerConfigFile ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { EhCacheManager ehCacheManager0 = new EhCacheManager ( ) ; ehCacheManager0 . init ( ) ; ehCacheManager0 . getCache ( "#Y ; MTa + NpdL" ) ; EhCache ehCache0 = ( EhCache ) ehCacheManager0 . getCache ( "#Y ; MTa + NpdL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { EhCacheManager ehCacheManager0 = new EhCacheManager ( ) ; ehCacheManager0 . init ( ) ; ehCacheManager0 . init ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test4 ( ) throws Throwable { EhCacheManager ehCacheManager0 = new EhCacheManager ( ) ; ehCacheManager0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCacheManagerConfigFile ( ) { return this . cacheManagerConfigFile ; }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { EhCacheManager ehCacheManager0 = new EhCacheManager ( ) ; ehCacheManager0 . init ( ) ; ehCacheManager0 . setCacheManager ( ( CacheManager ) null ) ; ehCacheManager0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test1 ( ) throws Throwable { Cache cache0 = new Cache ( "u5 ) YQ . LTf ; > S28h" , ( - 1578 ) , true , true , ( long ) ( - 1578 ) , ( long ) ( - 1578 ) ) ; EhCache ehCache0 = new EhCache ( cache0 ) ; long long0 = ehCache0 . getMemoryUsage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMemoryUsage ( ) { try { return cache . calculateInMemorySize ( ) ; } catch ( Throwable t ) { return - 1 ; } }
void test2 ( ) throws Throwable { Cache cache0 = new Cache ( "\" ; r ! ] 4GX [ : " , 3 , true , true , ( long ) 3 , ( long ) 3 ) ; EhCache ehCache0 = new EhCache ( cache0 ) ; String string0 = ehCache0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test6 ( ) throws Throwable { Cache cache0 = new Cache ( "Z6" , ( - 8 ) , true , true , ( long ) ( - 8 ) , ( long ) ( - 8 ) ) ; EhCache ehCache0 = new EhCache ( cache0 ) ; ehCache0 . get ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test7 ( ) throws Throwable { Cache cache0 = new Cache ( "G . fqY ? " , 0 , false , false , ( long ) 0 , ( long ) 0 ) ; cache0 . initialise ( ) ; EhCache ehCache0 = new EhCache ( cache0 ) ; ehCache0 . get ( ( Object ) "net . sf . ehcache . enableShutdownHook" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test11 ( ) throws Throwable { Cache cache0 = new Cache ( "G . fqY ? " , 0 , false , false , ( long ) 0 , ( long ) 0 ) ; cache0 . initialise ( ) ; EhCache ehCache0 = new EhCache ( cache0 ) ; ehCache0 . keys ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Cache cache0 = new Cache ( "G . fqYQ" , 9 , true , true , ( long ) 9 , ( long ) 9 ) ; cache0 . initialise ( ) ; Element element0 = new Element ( ( Object ) 9 , ( Object ) 9 ) ; cache0 . put ( element0 ) ; EhCache ehCache0 = new EhCache ( cache0 ) ; ehCache0 . keys ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test13 ( ) throws Throwable { Cache cache0 = new Cache ( "G . fqY ? " , 0 , false , false , ( long ) 0 , ( long ) 0 ) ; cache0 . initialise ( ) ; EhCache ehCache0 = new EhCache ( cache0 ) ; ehCache0 . values ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set values ( ) ; }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Cache cache0 = new Cache ( "\" ; r ! ] 4GX [ : " , 3 , true , true , ( long ) 3 , ( long ) 3 ) ; cache0 . initialise ( ) ; EhCache ehCache0 = new EhCache ( cache0 ) ; Element element0 = new Element ( ( Object ) "default" , ( Object ) "EhCache [ \" ; r ! ] 4GX [ : ] " ) ; cache0 . put ( element0 ) ; Set < Object > set0 = ehCache0 . values ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test0 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Object ) " [ ] " , " [ ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test2 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . offerLast ( "$B#o" ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Collection ) linkedList0 , "$B#o" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test3 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . offerLast ( "$B#o" ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Collection ) linkedList0 , "$B#o" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test7 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection ( ( PrincipalCollection ) simplePrincipalCollection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test8 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; Class < ? > class0 = SimplePrincipalCollection . class ; Set < Set < String > > set0 = simplePrincipalCollection0 . oneByType ( ( Class < Set < Set < String > > > ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < T > T oneByType ( Class < T > type ) ; / * * * Returns all principals assignable from the specified type , or an empty Collection if no principals of that * type are contained . * * < p > Note that this would return an empty Collection always if the corresponding subject has not logged in . < / p > * * @param type the type of the principals that should be returned . * @return a Collection of principals that are assignable from the specified type , or * an empty Collection if no principals of this type are associated . * / < T > Collection < T > byType ( Class < T > type ) ; / * * * Returns a single Subject's principals retrieved from all configured Realms as a List , or an empty List if * there are not any principals . * * < p > Note that this would return an empty List always if the corresponding subject has not logged in . < / p > * * @return a single Subject's principals retrieved from all configured Realms as a List . * / List asList ( ) ; / * * * Returns a single Subject's principals retrieved from all configured Realms as a Set , or an empty Set if there * are not any principals . * * < p > Note that this would return an empty Set always if the corresponding subject has not logged in . < / p > * * @return a single Subject's principals retrieved from all configured Realms as a Set . * / Set asSet ( ) ; / * * * Returns a single Subject's principals retrieved from the specified Realm < em > only < / em > as a Collection , or an empty * Collection if there are not any principals from that realm . * * < p > Note that this would return an empty Collection always if the corresponding subject has not logged in . < / p > * * @param realmName the name of the Realm from which the principals were retrieved . * @return the Subject's principals from the specified Realm only as a Collection or an empty Collection if there * are not any principals from that realm . * / Collection fromRealm ( String realmName ) ; / * * * Returns the realm names that this collection has principals for . * * @return the names of realms that this collection has one or more principals for . * / Set < String > getRealmNames ( ) ; / * * * Returns < code > true < / code > if this collection is empty , < code > false < / code > otherwise . * * @return < code > true < / code > if this collection is empty , < code > false < / code > otherwise . * / boolean isEmpty ( ) ; }
void test9 ( ) throws Throwable { Class < ? > class0 = SimplePrincipalCollection . class ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Object ) " [ ] " , " [ ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test10 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; Class < ? > class0 = SimplePrincipalCollection . class ; Collection < Object > collection0 = simplePrincipalCollection0 . byType ( ( Class < Object > ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test11 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . offerLast ( "$B#o" ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Collection ) linkedList0 , "$B#o" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test12 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . offerLast ( "$B#o" ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Collection ) linkedList0 , "$B#o" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test13 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Object ) "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test14 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; List < Object > list0 = simplePrincipalCollection0 . asList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test15 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; simplePrincipalCollection0 . getPrincipalsLazy ( ( String ) null ) ; simplePrincipalCollection0 . iterator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test16 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . offerLast ( "$B#o" ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Collection ) linkedList0 , "$B#o" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test17 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; boolean boolean0 = simplePrincipalCollection0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test18 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Object ) " [ ] " , " [ ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test19 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; simplePrincipalCollection0 . getPrincipalsLazy ( "7xpc~ > \"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test20 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; boolean boolean0 = simplePrincipalCollection0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test21 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Object ) "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test22 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection ( ( PrincipalCollection ) simplePrincipalCollection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test23 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; int int0 = simplePrincipalCollection0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { if ( this . realmPrincipals ! = null & & ! realmPrincipals . isEmpty ( ) ) { return realmPrincipals . hashCode ( ) ; } return super . hashCode ( ) ; }
void test0 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; webRememberMeManager0 . setEncryptionCipherKeyBase64 ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCookiePath ( ) { assertCookieAttribute ( ) ; return ( ( CookieAttribute ) this . identityAttribute ) . getPath ( ) ; }
void test1 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; webRememberMeManager0 . setDecryptionCipherKeyBase64 ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCookiePath ( ) { assertCookieAttribute ( ) ; return ( ( CookieAttribute ) this . identityAttribute ) . getPath ( ) ; }
void test4 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; webRememberMeManager0 . setDecryptionCipherKeyHex ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCookieName ( ) { assertCookieAttribute ( ) ; return ( ( CookieAttribute ) this . identityAttribute ) . getName ( ) ; }
void test5 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; webRememberMeManager0 . setCipherKeyBase64 ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCookieSecure ( ) { assertCookieAttribute ( ) ; return ( ( CookieAttribute ) this . identityAttribute ) . isSecure ( ) ; }
void test7 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; byte [ ] byteArray0 = webRememberMeManager0 . getCipherKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getCipherKey ( ) { / / Since this method should only be used with symmetric ciphers / / ( where the enc and dec keys are the same ) , either is fine , just return one of them : return getEncryptionCipherKey ( ) ; }
void test10 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; webRememberMeManager0 . setSerializer ( ( Serializer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCookieSecure ( ) { assertCookieAttribute ( ) ; return ( ( CookieAttribute ) this . identityAttribute ) . isSecure ( ) ; }
void test11 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; webRememberMeManager0 . setCipherKeyHex ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCookieName ( ) { assertCookieAttribute ( ) ; return ( ( CookieAttribute ) this . identityAttribute ) . getName ( ) ; }
void test12 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; boolean boolean0 = webRememberMeManager0 . isRememberMe ( ( AuthenticationToken ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRememberMe ( ServletRequest request ) { return false ; }
void test13 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; char [ ] charArray0 = new char [ 8 ] ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "K83piFwv" , charArray0 , false ) ; boolean boolean0 = webRememberMeManager0 . isRememberMe ( ( AuthenticationToken ) usernamePasswordToken0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRememberMe ( ServletRequest request ) { return false ; }
void test14 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "8" , "8" , true ) ; boolean boolean0 = webRememberMeManager0 . isRememberMe ( ( AuthenticationToken ) usernamePasswordToken0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRememberMe ( ServletRequest request ) { return false ; }
void test17 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; webRememberMeManager0 . setCipher ( ( Cipher ) null ) ; byte [ ] byteArray0 = new byte [ 11 ] ; byte [ ] byteArray1 = webRememberMeManager0 . encrypt ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encrypt ( byte [ ] serialized ) { byte [ ] value = serialized ; Cipher cipher = getCipher ( ) ; if ( cipher ! = null ) { value = cipher . encrypt ( serialized , getEncryptionCipherKey ( ) ) ; } return value ; }
void test18 ( ) throws Throwable { WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager ( ) ; webRememberMeManager0 . setCipher ( ( Cipher ) null ) ; byte [ ] byteArray0 = new byte [ 12 ] ; byte [ ] byteArray1 = webRememberMeManager0 . decrypt ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] decrypt ( byte [ ] encrypted ) { byte [ ] serialized = encrypted ; Cipher cipher = getCipher ( ) ; if ( cipher ! = null ) { serialized = cipher . decrypt ( encrypted , getDecryptionCipherKey ( ) ) ; } return serialized ; }
void test0 ( ) throws Throwable { AuthenticatedAnnotationHandler authenticatedAnnotationHandler0 = new AuthenticatedAnnotationHandler ( ) ; Subject subject0 = authenticatedAnnotationHandler0 . getSubject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Subject getSubject ( ) { Subject subject ; SecurityManager securityManager = ThreadContext . getSecurityManager ( ) ; if ( securityManager ! = null ) { subject = securityManager . getSubject ( ) ; } else { subject = ThreadContext . getSubject ( ) ; if ( subject = = null & & SecurityUtils . securityManager ! = null ) { / / fall back to the VM singleton if one exists : subject = SecurityUtils . securityManager . getSubject ( ) ; } } return subject ; }
void test1 ( ) throws Throwable { PermissionAnnotationHandler permissionAnnotationHandler0 = new PermissionAnnotationHandler ( ) ; Class < ? > class0 = permissionAnnotationHandler0 . getAnnotationClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < ? extends Annotation > getAnnotationClass ( ) { return this . annotationClass ; }
void test0 ( ) throws Throwable { RoleAnnotationMethodInterceptor roleAnnotationMethodInterceptor0 = new RoleAnnotationMethodInterceptor ( ) ; Subject subject0 = roleAnnotationMethodInterceptor0 . getSubject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Subject getSubject ( ) { Subject subject ; SecurityManager securityManager = ThreadContext . getSecurityManager ( ) ; if ( securityManager ! = null ) { subject = securityManager . getSubject ( ) ; } else { subject = ThreadContext . getSubject ( ) ; if ( subject = = null & & SecurityUtils . securityManager ! = null ) { / / fall back to the VM singleton if one exists : subject = SecurityUtils . securityManager . getSubject ( ) ; } } return subject ; }
void test0 ( ) throws Throwable { JndiLocator jndiLocator0 = new JndiLocator ( ) ; jndiLocator0 . getJndiEnvironment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isResourceRef ( ) { return this . resourceRef ; }
void test2 ( ) throws Throwable { JndiLocator jndiLocator0 = new JndiLocator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object lookup ( String jndiName ) throws NamingException { return lookup ( jndiName , null ) ; }
void test3 ( ) throws Throwable { JndiLocator jndiLocator0 = new JndiLocator ( ) ; jndiLocator0 . setJndiEnvironment ( ( Properties ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isResourceRef ( ) { return this . resourceRef ; }
void test4 ( ) throws Throwable { JndiLocator jndiLocator0 = new JndiLocator ( ) ; jndiLocator0 . setJndiTemplate ( ( JndiTemplate ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isResourceRef ( ) { return this . resourceRef ; }
void test5 ( ) throws Throwable { JndiLocator jndiLocator0 = new JndiLocator ( ) ; JndiTemplate jndiTemplate0 = jndiLocator0 . getJndiTemplate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isResourceRef ( ) { return this . resourceRef ; }
void test7 ( ) throws Throwable { JndiLocator jndiLocator0 = new JndiLocator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object lookup ( String jndiName ) throws NamingException { return lookup ( jndiName , null ) ; }
void test8 ( ) throws Throwable { JndiLocator jndiLocator0 = new JndiLocator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isResourceRef ( ) { return this . resourceRef ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; simpleSession0 . setAttribute ( ( Object ) "localhost" , ( Object ) "localhost" ) ; simpleSession0 . removeAttribute ( ( Object ) simpleSession0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; Date date0 = new Date ( ) ; simpleSession0 . setStartTimestamp ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; simpleSession0 . touch ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; Date date0 = simpleSession0 . getStartTimestamp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; Date date0 = new Date ( ) ; simpleSession0 . setStopTimestamp ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; Inet4Address inet4Address0 = ( Inet4Address ) simpleSession0 . getHostAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SimpleSession simpleSession0 = new SimpleSession ( ) ; simpleSession0 . setTimeout ( ( - 1839L ) ) ; simpleSession0 . validate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; Date date0 = new Date ( ) ; simpleSession0 . setLastAccessTime ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; simpleSession0 . setId ( ( Serializable ) ( - 1839L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; simpleSession0 . expire ( ) ; simpleSession0 . expire ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; simpleSession0 . stop ( ) ; boolean boolean0 = simpleSession0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; boolean boolean0 = simpleSession0 . isValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; boolean boolean0 = simpleSession0 . isTimedOut ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test16 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; HashMap < Object , Object > hashMap0 = new HashMap < Object , Object > ( ) ; simpleSession0 . setAttributes ( ( Map < Object , Object > ) hashMap0 ) ; simpleSession0 . setAttribute ( ( Object ) "localhost" , ( Object ) "localhost" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test17 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SimpleSession simpleSession0 = new SimpleSession ( ) ; HashMap < Object , Object > hashMap0 = new HashMap < Object , Object > ( ) ; simpleSession0 . setAttributes ( ( Map < Object , Object > ) hashMap0 ) ; Collection < Object > collection0 = simpleSession0 . getAttributeKeys ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test18 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SimpleSession simpleSession0 = new SimpleSession ( ) ; Collection < Object > collection0 = simpleSession0 . getAttributeKeys ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test19 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; HashMap < Object , Object > hashMap0 = new HashMap < Object , Object > ( ) ; simpleSession0 . setAttributes ( ( Map < Object , Object > ) hashMap0 ) ; simpleSession0 . getAttribute ( ( Object ) "localhost" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test20 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; simpleSession0 . getAttribute ( ( Object ) "localhost" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test21 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SimpleSession simpleSession0 = new SimpleSession ( ) ; simpleSession0 . setAttribute ( ( Object ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test0 ( ) throws Throwable { char [ ] charArray0 = new char [ 8 ] ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( ( String ) null , charArray0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRememberMe ( ServletRequest request ) { return false ; }
void test1 ( ) throws Throwable { UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( ) ; usernamePasswordToken0 . getCredentials ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRememberMe ( ServletRequest request ) { return false ; }
void test2 ( ) throws Throwable { UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "jA > N$J\u0000\nQ`zWY%Aw" , "jA > N$J\u0000\nQ`zWY%Aw" ) ; usernamePasswordToken0 . setUsername ( "jA > N$J\u0000\nQ`zWY%Aw" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRememberMe ( ServletRequest request ) { return false ; }
void test3 ( ) throws Throwable { UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "jA > N$J\u0000\nQ`zWY%Aw" , "jA > N$J\u0000\nQ`zWY%Aw" ) ; char [ ] charArray0 = new char [ 2 ] ; usernamePasswordToken0 . setPassword ( charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test4 ( ) throws Throwable { UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( ) ; usernamePasswordToken0 . getPrincipal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test5 ( ) throws Throwable { char [ ] charArray0 = new char [ 1 ] ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getByName ( "" ) ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "" , charArray0 , ( InetAddress ) inet4Address0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRememberMe ( ServletRequest request ) { return false ; }
void test6 ( ) throws Throwable { UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( ) ; boolean boolean0 = usernamePasswordToken0 . isRememberMe ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRememberMe ( ServletRequest request ) { return false ; }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "" , "" , ( InetAddress ) inet4Address0 ) ; usernamePasswordToken0 . setRememberMe ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test8 ( ) throws Throwable { UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( ) ; usernamePasswordToken0 . getInetAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test9 ( ) throws Throwable { UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( ) ; usernamePasswordToken0 . setInetAddress ( ( InetAddress ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRememberMe ( ServletRequest request ) { return false ; }
void test10 ( ) throws Throwable { char [ ] charArray0 = new char [ 3 ] ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "jA > N$J\u0000\nQ`zWY%Aw" , charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRememberMe ( ServletRequest request ) { return false ; }
void test11 ( ) throws Throwable { UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( ) ; usernamePasswordToken0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test12 ( ) throws Throwable { UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "jA > N$J\u0000\nQ`zWY%Aw" , "jA > N$J\u0000\nQ`zWY%Aw" ) ; usernamePasswordToken0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRememberMe ( ServletRequest request ) { return false ; }
void test13 ( ) throws Throwable { UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( ) ; String string0 = usernamePasswordToken0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { char [ ] charArray0 = new char [ 3 ] ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "lT - ^ ! ) fY" , charArray0 , false , ( InetAddress ) inet4Address0 ) ; String string0 = usernamePasswordToken0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test0 ( ) throws Throwable { SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( ) ; SimpleAuthenticationInfo simpleAuthenticationInfo1 = new SimpleAuthenticationInfo ( ( Object ) " [ ] " , ( Object ) " [ ] " , " [ ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test1 ( ) throws Throwable { SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; simpleAuthenticationInfo0 . setPrincipals ( ( PrincipalCollection ) simplePrincipalCollection0 ) ; SimpleAuthenticationInfo simpleAuthenticationInfo1 = new SimpleAuthenticationInfo ( ) ; boolean boolean0 = simpleAuthenticationInfo0 . equals ( ( Object ) simpleAuthenticationInfo1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test6 ( ) throws Throwable { SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; HashSet < String > hashSet1 = new HashSet < String > ( ) ; TreeSet < Permission > treeSet0 = new TreeSet < Permission > ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) hashSet0 , ( Set < String > ) hashSet1 , ( Set < Permission > ) treeSet0 ) ; simpleAuthenticationInfo0 . merge ( ( AuthenticationInfo ) simpleAccount0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocked ( ) { return locked ; }
void test7 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Object ) "" , "" ) ; SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( ) ; SimpleAuthenticationInfo simpleAuthenticationInfo1 = new SimpleAuthenticationInfo ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) null ) ; simpleAuthenticationInfo0 . merge ( ( AuthenticationInfo ) simpleAuthenticationInfo1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test8 ( ) throws Throwable { SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( ) ; LinkedHashSet < MutablePrincipalCollection > linkedHashSet0 = new LinkedHashSet < MutablePrincipalCollection > ( ) ; boolean boolean0 = simpleAuthenticationInfo0 . equals ( ( Object ) linkedHashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test9 ( ) throws Throwable { HashSet < SimpleAuthenticationInfo > hashSet0 = new HashSet < SimpleAuthenticationInfo > ( ) ; SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( ) ; hashSet0 . add ( simpleAuthenticationInfo0 ) ; SimpleAuthenticationInfo simpleAuthenticationInfo1 = new SimpleAuthenticationInfo ( ) ; boolean boolean0 = hashSet0 . add ( simpleAuthenticationInfo1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test10 ( ) throws Throwable { HashSet < SimpleAuthenticationInfo > hashSet0 = new HashSet < SimpleAuthenticationInfo > ( ) ; SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( ) ; hashSet0 . add ( simpleAuthenticationInfo0 ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; simpleAuthenticationInfo0 . setPrincipals ( ( PrincipalCollection ) simplePrincipalCollection0 ) ; SimpleAuthenticationInfo simpleAuthenticationInfo1 = new SimpleAuthenticationInfo ( ) ; boolean boolean0 = hashSet0 . add ( simpleAuthenticationInfo1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test11 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Object ) "" , "" ) ; SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) null ) ; int int0 = simpleAuthenticationInfo0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { if ( this . realmPrincipals ! = null & & ! realmPrincipals . isEmpty ( ) ) { return realmPrincipals . hashCode ( ) ; } return super . hashCode ( ) ; }
void test0 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( Object ) simplePrincipalCollection0 , ( Object ) simplePrincipalCollection0 , " = D_ ) l } FcP ? { 2Qj" ) ; simpleAccount0 . addRole ( " = D_ ) l } FcP ? { 2Qj" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocked ( ) { return locked ; }
void test2 ( ) throws Throwable { Object object0 = new Object ( ) ; LinkedHashSet < String > linkedHashSet0 = new LinkedHashSet < String > ( ) ; LinkedHashSet < Permission > linkedHashSet1 = new LinkedHashSet < Permission > ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( object0 , object0 , "" , ( Set < String > ) linkedHashSet0 , ( Set < Permission > ) linkedHashSet1 ) ; Object object1 = simpleAccount0 . getCredentials ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getCredentials ( ) ; }
void test4 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( Object ) simplePrincipalCollection0 , ( Object ) simplePrincipalCollection0 , " = D_ ) l } FcP ? { 2Qj" ) ; simpleAccount0 . addStringPermission ( " = D_ ) l } FcP ? { 2Qj" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCredentialsExpired ( ) { return credentialsExpired ; }
void test5 ( ) throws Throwable { WildcardPermission wildcardPermission0 = new WildcardPermission ( "naBMez#" , true ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ) ; SimpleAccount simpleAccount1 = new SimpleAccount ( ( Object ) wildcardPermission0 , ( Object ) simpleAccount0 , "naBMez#" ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Object ) simpleAccount1 , "naBMez#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test6 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) null , ( Set < String > ) treeSet0 ) ; simpleAccount0 . setLocked ( true ) ; simpleAccount0 . merge ( ( AuthenticationInfo ) simpleAccount0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocked ( ) { return locked ; }
void test7 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ( Comparator < ? super String > ) null ) ; TreeSet < Permission > treeSet1 = new TreeSet < Permission > ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) treeSet0 , ( Set < String > ) treeSet0 , ( Set < Permission > ) treeSet1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCredentialsExpired ( ) { return credentialsExpired ; }
void test9 ( ) throws Throwable { WildcardPermission wildcardPermission0 = new WildcardPermission ( "naBMez#" , true ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ) ; SimpleAccount simpleAccount1 = new SimpleAccount ( ( Object ) wildcardPermission0 , ( Object ) simpleAccount0 , "naBMez#" ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Object ) simpleAccount1 , "naBMez#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test10 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) simplePrincipalCollection0 ) ; simpleAccount0 . setPrincipals ( ( PrincipalCollection ) null ) ; int int0 = simpleAccount0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { if ( this . realmPrincipals ! = null & & ! realmPrincipals . isEmpty ( ) ) { return realmPrincipals . hashCode ( ) ; } return super . hashCode ( ) ; }
void test11 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ( Comparator < ? super String > ) null ) ; TreeSet < Permission > treeSet1 = new TreeSet < Permission > ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) treeSet0 , ( Set < String > ) treeSet0 , ( Set < Permission > ) treeSet1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCredentialsExpired ( ) { return credentialsExpired ; }
void test13 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ( Comparator < ? super String > ) null ) ; TreeSet < Permission > treeSet1 = new TreeSet < Permission > ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) treeSet0 , ( Set < String > ) treeSet0 , ( Set < Permission > ) treeSet1 ) ; Collection < String > collection0 = simpleAccount0 . getStringPermissions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < String > getStringPermissions ( ) { return authzInfo . getStringPermissions ( ) ; }
void test14 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ( Comparator < ? super String > ) null ) ; TreeSet < Permission > treeSet1 = new TreeSet < Permission > ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) treeSet0 , ( Set < String > ) treeSet0 , ( Set < Permission > ) treeSet1 ) ; simpleAccount0 . setObjectPermissions ( ( Set < Permission > ) treeSet1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test15 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( Object ) simplePrincipalCollection0 , ( Object ) simplePrincipalCollection0 , " = D_ ) l } FcP ? { 2Qj" ) ; Collection < String > collection0 = simpleAccount0 . getRoles ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < String > getRoles ( ) { return authzInfo . getRoles ( ) ; }
void test17 ( ) throws Throwable { Object object0 = new Object ( ) ; LinkedHashSet < String > linkedHashSet0 = new LinkedHashSet < String > ( ) ; LinkedHashSet < Permission > linkedHashSet1 = new LinkedHashSet < Permission > ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( object0 , object0 , "" , ( Set < String > ) linkedHashSet0 , ( Set < Permission > ) linkedHashSet1 ) ; simpleAccount0 . addRole ( ( Collection < String > ) linkedHashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test18 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ( Comparator < ? super String > ) null ) ; TreeSet < Permission > treeSet1 = new TreeSet < Permission > ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) treeSet0 , ( Set < String > ) treeSet0 , ( Set < Permission > ) treeSet1 ) ; simpleAccount0 . setStringPermissions ( ( Set < String > ) treeSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test19 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) null , ( Set < String > ) treeSet0 ) ; Collection < Permission > collection0 = simpleAccount0 . getObjectPermissions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < Permission > getObjectPermissions ( ) { return authzInfo . getObjectPermissions ( ) ; }
void test20 ( ) throws Throwable { Object object0 = new Object ( ) ; LinkedHashSet < String > linkedHashSet0 = new LinkedHashSet < String > ( ) ; LinkedHashSet < Permission > linkedHashSet1 = new LinkedHashSet < Permission > ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( object0 , object0 , "" , ( Set < String > ) linkedHashSet0 , ( Set < Permission > ) linkedHashSet1 ) ; simpleAccount0 . addObjectPermissions ( ( Collection < Permission > ) linkedHashSet1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test21 ( ) throws Throwable { WildcardPermission wildcardPermission0 = new WildcardPermission ( "naBMez#" , true ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ) ; SimpleAccount simpleAccount1 = new SimpleAccount ( ( Object ) wildcardPermission0 , ( Object ) simpleAccount0 , "naBMez#" ) ; SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( ) ; simpleAccount1 . merge ( ( AuthenticationInfo ) simpleAuthenticationInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCredentialsExpired ( ) { return credentialsExpired ; }
void test22 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( Object ) simplePrincipalCollection0 , ( Object ) simplePrincipalCollection0 , " = D_ ) l } FcP ? { 2Qj" ) ; boolean boolean0 = simpleAccount0 . equals ( ( Object ) simplePrincipalCollection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test24 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) simplePrincipalCollection0 ) ; simpleAccount0 . setPrincipals ( ( PrincipalCollection ) null ) ; String string0 = simpleAccount0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test25 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ( Comparator < ? super String > ) null ) ; TreeSet < Permission > treeSet1 = new TreeSet < Permission > ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) treeSet0 , ( Set < String > ) treeSet0 , ( Set < Permission > ) treeSet1 ) ; String string0 = simpleAccount0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test0 ( ) throws Throwable { ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; modularRealmAuthenticator0 . onLogout ( ( PrincipalCollection ) simplePrincipalCollection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test2 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator ( ( Realm ) simpleAccountRealm0 ) ; modularRealmAuthenticator0 . remove ( ( AuthenticationListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test3 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator ( ( Realm ) simpleAccountRealm0 ) ; LinkedList < AuthenticationListener > linkedList0 = new LinkedList < AuthenticationListener > ( ) ; modularRealmAuthenticator0 . setAuthenticationListeners ( ( Collection < AuthenticationListener > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test4 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator ( ( Realm ) simpleAccountRealm0 ) ; modularRealmAuthenticator0 . setAuthenticationListeners ( ( Collection < AuthenticationListener > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { Sha256CredentialsMatcher sha256CredentialsMatcher0 = new Sha256CredentialsMatcher ( ) ; Sha256Hash sha256Hash0 = ( Sha256Hash ) sha256CredentialsMatcher0 . newHashInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbstractHash newHashInstance ( ) { return new Sha384Hash ( ) ; }
void test0 ( ) throws Throwable { Sha512CredentialsMatcher sha512CredentialsMatcher0 = new Sha512CredentialsMatcher ( ) ; Sha512Hash sha512Hash0 = ( Sha512Hash ) sha512CredentialsMatcher0 . newHashInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbstractHash newHashInstance ( ) { return new Sha384Hash ( ) ; }
void test0 ( ) throws Throwable { AllowAllCredentialsMatcher allowAllCredentialsMatcher0 = new AllowAllCredentialsMatcher ( ) ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( ( String ) null , ( String ) null ) ; SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( ) ; boolean boolean0 = allowAllCredentialsMatcher0 . doCredentialsMatch ( ( AuthenticationToken ) usernamePasswordToken0 , ( AuthenticationInfo ) simpleAuthenticationInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean doCredentialsMatch ( AuthenticationToken token , AuthenticationInfo info ) { return true ; }
void test1 ( ) throws Throwable { Sha1CredentialsMatcher sha1CredentialsMatcher0 = new Sha1CredentialsMatcher ( ) ; Sha1Hash sha1Hash0 = ( Sha1Hash ) sha1CredentialsMatcher0 . newHashInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbstractHash newHashInstance ( ) { return new Sha384Hash ( ) ; }
void test0 ( ) throws Throwable { SimpleCredentialsMatcher simpleCredentialsMatcher0 = new SimpleCredentialsMatcher ( ) ; char [ ] charArray0 = new char [ 12 ] ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( ( String ) null , charArray0 ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Object ) "\u0000\u0000\u0000\u0000\u0000\u0000" , "\u0000\u0000\u0000\u0000\u0000\u0000" ) ; SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) simpleCredentialsMatcher0 ) ; boolean boolean0 = simpleCredentialsMatcher0 . doCredentialsMatch ( ( AuthenticationToken ) usernamePasswordToken0 , ( AuthenticationInfo ) simpleAuthenticationInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean doCredentialsMatch ( AuthenticationToken token , AuthenticationInfo info ) { return true ; }
void test1 ( ) throws Throwable { SimpleCredentialsMatcher simpleCredentialsMatcher0 = new SimpleCredentialsMatcher ( ) ; Object object0 = new Object ( ) ; boolean boolean0 = simpleCredentialsMatcher0 . equals ( ( Object ) simpleCredentialsMatcher0 , object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test2 ( ) throws Throwable { SimpleCredentialsMatcher simpleCredentialsMatcher0 = new SimpleCredentialsMatcher ( ) ; boolean boolean0 = simpleCredentialsMatcher0 . equals ( ( Object ) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000" , ( Object ) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test3 ( ) throws Throwable { SimpleCredentialsMatcher simpleCredentialsMatcher0 = new SimpleCredentialsMatcher ( ) ; char [ ] charArray0 = new char [ 12 ] ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( ( String ) null , charArray0 ) ; Object object0 = simpleCredentialsMatcher0 . getCredentials ( ( AuthenticationToken ) usernamePasswordToken0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test0 ( ) throws Throwable { Sha384CredentialsMatcher sha384CredentialsMatcher0 = new Sha384CredentialsMatcher ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toHex ( ) ; / * * * Returns a Base64 encoding of this Hash's { @link #getBytes byte array }
void test1 ( ) throws Throwable { Sha512CredentialsMatcher sha512CredentialsMatcher0 = new Sha512CredentialsMatcher ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStoredCredentialsHexEncoded ( ) { return storedCredentialsHexEncoded ; }
void test3 ( ) throws Throwable { Sha512CredentialsMatcher sha512CredentialsMatcher0 = new Sha512CredentialsMatcher ( ) ; sha512CredentialsMatcher0 . setHashIterations ( 97 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStoredCredentialsHexEncoded ( ) { return storedCredentialsHexEncoded ; }
void test4 ( ) throws Throwable { Sha384CredentialsMatcher sha384CredentialsMatcher0 = new Sha384CredentialsMatcher ( ) ; sha384CredentialsMatcher0 . setHashIterations ( ( - 4 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHashIterations ( ) { return hashIterations ; }
void test5 ( ) throws Throwable { Md2CredentialsMatcher md2CredentialsMatcher0 = new Md2CredentialsMatcher ( ) ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "czXnH , vG , " , "czXnH , vG , " ) ; Md2Hash md2Hash0 = ( Md2Hash ) md2CredentialsMatcher0 . getCredentials ( ( AuthenticationToken ) usernamePasswordToken0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test0 ( ) throws Throwable { Sha384CredentialsMatcher sha384CredentialsMatcher0 = new Sha384CredentialsMatcher ( ) ; Sha384Hash sha384Hash0 = ( Sha384Hash ) sha384CredentialsMatcher0 . newHashInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbstractHash newHashInstance ( ) { return new Sha384Hash ( ) ; }
void test0 ( ) throws Throwable { Md5CredentialsMatcher md5CredentialsMatcher0 = new Md5CredentialsMatcher ( ) ; Md5Hash md5Hash0 = ( Md5Hash ) md5CredentialsMatcher0 . newHashInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbstractHash newHashInstance ( ) { return new Sha384Hash ( ) ; }
void test1 ( ) throws Throwable { Md2CredentialsMatcher md2CredentialsMatcher0 = new Md2CredentialsMatcher ( ) ; Md2Hash md2Hash0 = ( Md2Hash ) md2CredentialsMatcher0 . newHashInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbstractHash newHashInstance ( ) { return new Sha384Hash ( ) ; }
void test0 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator ( ( Realm ) simpleAccountRealm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test5 ( ) throws Throwable { ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Object ) " ] | x | nQ`PQwK1" , "" ) ; modularRealmAuthenticator0 . onLogout ( ( PrincipalCollection ) simplePrincipalCollection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test7 ( ) throws Throwable { LinkedList < Realm > linkedList0 = new LinkedList < Realm > ( ) ; linkedList0 . add ( ( Realm ) null ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Object ) " ] | | n`Q8K1" , " ] | | n`Q8K1" ) ; ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator ( ( List < Realm > ) linkedList0 ) ; modularRealmAuthenticator0 . onLogout ( ( PrincipalCollection ) simplePrincipalCollection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy ( ) ; char [ ] charArray0 = new char [ 5 ] ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "ifAH" , charArray0 , true , ( InetAddress ) inet4Address0 ) ; SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( ) ; SimpleAuthenticationInfo simpleAuthenticationInfo1 = ( SimpleAuthenticationInfo ) atLeastOneSuccessfulModularAuthenticationStrategy0 . beforeAttempt ( ( Realm ) null , ( AuthenticationToken ) usernamePasswordToken0 , ( AuthenticationInfo ) simpleAuthenticationInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test1 ( ) throws Throwable { AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy ( ) ; char [ ] charArray0 = new char [ 9 ] ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getByName ( "" ) ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "" , charArray0 , ( InetAddress ) inet4Address0 ) ; AuthenticationInfo authenticationInfo0 = allSuccessfulModularAuthenticationStrategy0 . afterAllAttempts ( ( AuthenticationToken ) usernamePasswordToken0 , ( AuthenticationInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AuthenticationInfo afterAllAttempts ( AuthenticationToken token , AuthenticationInfo aggregate ) throws AuthenticationException ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy ( ) ; char [ ] charArray0 = new char [ 5 ] ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "ifAH" , charArray0 , true , ( InetAddress ) inet4Address0 ) ; HashSet < Realm > hashSet0 = new HashSet < Realm > ( ) ; SimpleAuthenticationInfo simpleAuthenticationInfo0 = ( SimpleAuthenticationInfo ) atLeastOneSuccessfulModularAuthenticationStrategy0 . beforeAllAttempts ( ( Collection < ? extends Realm > ) hashSet0 , ( AuthenticationToken ) usernamePasswordToken0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test3 ( ) throws Throwable { AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy ( ) ; SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "" , "" ) ; SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( ) ; atLeastOneSuccessfulModularAuthenticationStrategy0 . afterAttempt ( ( Realm ) simpleAccountRealm0 , ( AuthenticationToken ) usernamePasswordToken0 , ( AuthenticationInfo ) simpleAuthenticationInfo0 , ( AuthenticationInfo ) simpleAuthenticationInfo0 , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test4 ( ) throws Throwable { AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy ( ) ; SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "" , "" ) ; atLeastOneSuccessfulModularAuthenticationStrategy0 . afterAttempt ( ( Realm ) simpleAccountRealm0 , ( AuthenticationToken ) usernamePasswordToken0 , ( AuthenticationInfo ) null , ( AuthenticationInfo ) null , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test5 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "" , "" ) ; FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy ( ) ; SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( ) ; firstSuccessfulAuthenticationStrategy0 . afterAttempt ( ( Realm ) simpleAccountRealm0 , ( AuthenticationToken ) usernamePasswordToken0 , ( AuthenticationInfo ) simpleAuthenticationInfo0 , ( AuthenticationInfo ) null , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy ( ) ; AuthenticationInfo authenticationInfo0 = firstSuccessfulAuthenticationStrategy0 . beforeAllAttempts ( ( Collection < ? extends Realm > ) null , ( AuthenticationToken ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AuthenticationInfo beforeAllAttempts ( Collection < ? extends Realm > realms , AuthenticationToken token ) throws AuthenticationException ; / * * * Method invoked by the ModularAuthenticator just prior to the realm being consulted for account data , * allowing pre - authentication - attempt logic for that realm only . * * < p > This method returns an < code > AuthenticationInfo < / code > object that will be used for further interaction with realms . Most * implementations will merely return the < code > aggregate < / code > method argument if they don't have a need to * manipulate it . * * @param realm the realm that will be consulted for < tt > AuthenticationInfo < / tt > for the specified < tt > token < / tt > . * @param token the < tt > AuthenticationToken < / tt > submitted for the subject attempting system log - in . * @param aggregate the aggregated AuthenticationInfo object being used across the multi - realm authentication attempt * @return the AuthenticationInfo object that will be presented to further realms in the authentication process - returning * the < code > aggregate < / code > method argument is the normal case if no special action needs to be taken . * @throws AuthenticationException an exception thrown by the Strategy implementation if it wishes the login * process for the associated subject ( user ) to stop immediately . * / AuthenticationInfo beforeAttempt ( Realm realm , AuthenticationToken token , AuthenticationInfo aggregate ) throws AuthenticationException ; / * * * Method invoked by the ModularAuthenticator just after the given realm has been consulted for authentication , * allowing post - authentication - attempt logic for that realm only . * * < p > This method returns an < code > AuthenticationInfo < / code > object that will be used for further interaction with realms . Most * implementations will merge the < code > singleRealmInfo < / code > into the < code > aggregateInfo < / code > and * just return the < code > aggregateInfo < / code > for continued use throughout the authentication process . < / p > * * @param realm the realm that was just consulted for < tt > AuthenticationInfo < / tt > for the given < tt > token < / tt > . * @param token the < tt > AuthenticationToken < / tt > submitted for the subject attempting system log - in . * @param singleRealmInfo the info returned from a single realm . * @param aggregateInfo the aggregate info representing all realms in a multi - realm environment . * @param t the Throwable thrown by the Realm during the attempt , or < tt > null < / tt > if the method returned normally . * @return the AuthenticationInfo object that will be presented to further realms in the authentication process - returning * the < code > aggregateAccount < / code > method argument is the normal case if no special action needs to be taken . * @throws AuthenticationException an exception thrown by the Strategy implementation if it wishes the login process * for the associated subject ( user ) to stop immediately . * / AuthenticationInfo afterAttempt ( Realm realm , AuthenticationToken token , AuthenticationInfo singleRealmInfo , AuthenticationInfo aggregateInfo , Throwable t ) throws AuthenticationException ; / * * * Method invoked by the ModularAuthenticator signifying that all of its configured Realms have been consulted * for account data , allowing post - proccessing after all realms have completed . * * < p > Returns the AuthenticationInfo object that will be returned from the Authenticator to the authenticate ( ) caller . * This is most likely the aggregate AuthenticationInfo object that has been populated by many realms , but the actual return value is * always up to the implementation . * * @param token the < tt > AuthenticationToken < / tt > submitted for the subject attempting system log - in . * @param aggregate the aggregate < tt > AuthenticationInfo < / tt > instance populated by all realms during the log - in attempt . * @return the < code > AuthenticationInfo < / code > object to return to the Authenticator . authenticate ( ) caller . * @throws AuthenticationException if the Strategy implementation wishes to fail the authentication attempt . * / AuthenticationInfo afterAllAttempts ( AuthenticationToken token , AuthenticationInfo aggregate ) throws AuthenticationException ; }
void test1 ( ) throws Throwable { FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy ( ) ; AuthenticationInfo authenticationInfo0 = firstSuccessfulAuthenticationStrategy0 . merge ( ( AuthenticationInfo ) null , ( AuthenticationInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void merge ( AuthenticationInfo info ) { authcInfo . merge ( info ) ; / / Merge SimpleAccount specific info if ( info instanceof SimpleAccount ) { SimpleAccount otherAccount = ( SimpleAccount ) info ; if ( otherAccount . isLocked ( ) ) { setLocked ( true ) ; } if ( otherAccount . isCredentialsExpired ( ) ) { setCredentialsExpired ( true ) ; } } }
void test2 ( ) throws Throwable { FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Object ) " [ ] " , " [ ] " ) ; SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) "U\u0000\uFFFD" ) ; Set < String > set0 = simplePrincipalCollection0 . getRealmNames ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) null , set0 ) ; SimpleAuthenticationInfo simpleAuthenticationInfo1 = ( SimpleAuthenticationInfo ) firstSuccessfulAuthenticationStrategy0 . merge ( ( AuthenticationInfo ) simpleAccount0 , ( AuthenticationInfo ) simpleAuthenticationInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void merge ( AuthenticationInfo info ) { authcInfo . merge ( info ) ; / / Merge SimpleAccount specific info if ( info instanceof SimpleAccount ) { SimpleAccount otherAccount = ( SimpleAccount ) info ; if ( otherAccount . isLocked ( ) ) { setLocked ( true ) ; } if ( otherAccount . isCredentialsExpired ( ) ) { setCredentialsExpired ( true ) ; } } }
void test3 ( ) throws Throwable { FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy ( ) ; SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( ) ; SimpleAuthenticationInfo simpleAuthenticationInfo1 = ( SimpleAuthenticationInfo ) firstSuccessfulAuthenticationStrategy0 . merge ( ( AuthenticationInfo ) simpleAuthenticationInfo0 , ( AuthenticationInfo ) simpleAuthenticationInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void merge ( AuthenticationInfo info ) { authcInfo . merge ( info ) ; / / Merge SimpleAccount specific info if ( info instanceof SimpleAccount ) { SimpleAccount otherAccount = ( SimpleAccount ) info ; if ( otherAccount . isLocked ( ) ) { setLocked ( true ) ; } if ( otherAccount . isCredentialsExpired ( ) ) { setCredentialsExpired ( true ) ; } } }
void test4 ( ) throws Throwable { FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) "\u0000\r\uFFFD" , ( Set < String > ) null ) ; SimpleAccount simpleAccount1 = ( SimpleAccount ) firstSuccessfulAuthenticationStrategy0 . merge ( ( AuthenticationInfo ) simpleAccount0 , ( AuthenticationInfo ) simpleAccount0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCredentialsExpired ( ) { return credentialsExpired ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy ( ) ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "" , "" , ( InetAddress ) inet4Address0 ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( ( Object ) "\u0000\u0000" , ( Object ) null , "\u0000\u0000" ) ; SimpleAccount simpleAccount1 = ( SimpleAccount ) atLeastOneSuccessfulModularAuthenticationStrategy0 . afterAllAttempts ( ( AuthenticationToken ) usernamePasswordToken0 , ( AuthenticationInfo ) simpleAccount0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test0 ( ) throws Throwable { AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy ( ) ; SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( "" ) ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "" , "" , false ) ; Object object0 = new Object ( ) ; SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( object0 , ( Object ) usernamePasswordToken0 , "" ) ; SimpleAuthenticationInfo simpleAuthenticationInfo1 = ( SimpleAuthenticationInfo ) allSuccessfulModularAuthenticationStrategy0 . beforeAttempt ( ( Realm ) simpleAccountRealm0 , ( AuthenticationToken ) usernamePasswordToken0 , ( AuthenticationInfo ) simpleAuthenticationInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AuthenticationInfo beforeAttempt ( Realm realm , AuthenticationToken token , AuthenticationInfo aggregate ) throws AuthenticationException ; / * * * Method invoked by the ModularAuthenticator just after the given realm has been consulted for authentication , * allowing post - authentication - attempt logic for that realm only . * * < p > This method returns an < code > AuthenticationInfo < / code > object that will be used for further interaction with realms . Most * implementations will merge the < code > singleRealmInfo < / code > into the < code > aggregateInfo < / code > and * just return the < code > aggregateInfo < / code > for continued use throughout the authentication process . < / p > * * @param realm the realm that was just consulted for < tt > AuthenticationInfo < / tt > for the given < tt > token < / tt > . * @param token the < tt > AuthenticationToken < / tt > submitted for the subject attempting system log - in . * @param singleRealmInfo the info returned from a single realm . * @param aggregateInfo the aggregate info representing all realms in a multi - realm environment . * @param t the Throwable thrown by the Realm during the attempt , or < tt > null < / tt > if the method returned normally . * @return the AuthenticationInfo object that will be presented to further realms in the authentication process - returning * the < code > aggregateAccount < / code > method argument is the normal case if no special action needs to be taken . * @throws AuthenticationException an exception thrown by the Strategy implementation if it wishes the login process * for the associated subject ( user ) to stop immediately . * / AuthenticationInfo afterAttempt ( Realm realm , AuthenticationToken token , AuthenticationInfo singleRealmInfo , AuthenticationInfo aggregateInfo , Throwable t ) throws AuthenticationException ; / * * * Method invoked by the ModularAuthenticator signifying that all of its configured Realms have been consulted * for account data , allowing post - proccessing after all realms have completed . * * < p > Returns the AuthenticationInfo object that will be returned from the Authenticator to the authenticate ( ) caller . * This is most likely the aggregate AuthenticationInfo object that has been populated by many realms , but the actual return value is * always up to the implementation . * * @param token the < tt > AuthenticationToken < / tt > submitted for the subject attempting system log - in . * @param aggregate the aggregate < tt > AuthenticationInfo < / tt > instance populated by all realms during the log - in attempt . * @return the < code > AuthenticationInfo < / code > object to return to the Authenticator . authenticate ( ) caller . * @throws AuthenticationException if the Strategy implementation wishes to fail the authentication attempt . * / AuthenticationInfo afterAllAttempts ( AuthenticationToken token , AuthenticationInfo aggregate ) throws AuthenticationException ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 ) ; IniResource iniResource0 = new IniResource ( ( InputStream ) byteArrayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharsetName ( ) { return charsetName ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 12 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; InputStreamReader inputStreamReader0 = new InputStreamReader ( ( InputStream ) byteArrayInputStream0 ) ; BufferedReader bufferedReader0 = new BufferedReader ( ( Reader ) inputStreamReader0 ) ; IniResource iniResource0 = new IniResource ( ( Reader ) bufferedReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharsetName ( ) { return charsetName ; }
void test1 ( ) throws Throwable { boolean boolean0 = ResourceUtils . hasResourcePrefix ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasResourcePrefix ( String resourcePath ) { return resourcePath ! = null & & ( resourcePath . startsWith ( CLASSPATH_PREFIX ) | | resourcePath . startsWith ( URL_PREFIX ) | | resourcePath . startsWith ( FILE_PREFIX ) ) ; }
void test2 ( ) throws Throwable { boolean boolean0 = ResourceUtils . hasResourcePrefix ( "a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasResourcePrefix ( String resourcePath ) { return resourcePath ! = null & & ( resourcePath . startsWith ( CLASSPATH_PREFIX ) | | resourcePath . startsWith ( URL_PREFIX ) | | resourcePath . startsWith ( FILE_PREFIX ) ) ; }
void test3 ( ) throws Throwable { boolean boolean0 = ResourceUtils . hasResourcePrefix ( "classpath : ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasResourcePrefix ( String resourcePath ) { return resourcePath ! = null & & ( resourcePath . startsWith ( CLASSPATH_PREFIX ) | | resourcePath . startsWith ( URL_PREFIX ) | | resourcePath . startsWith ( FILE_PREFIX ) ) ; }
void test4 ( ) throws Throwable { boolean boolean0 = ResourceUtils . hasResourcePrefix ( "url : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasResourcePrefix ( String resourcePath ) { return resourcePath ! = null & & ( resourcePath . startsWith ( CLASSPATH_PREFIX ) | | resourcePath . startsWith ( URL_PREFIX ) | | resourcePath . startsWith ( FILE_PREFIX ) ) ; }
void test5 ( ) throws Throwable { boolean boolean0 = ResourceUtils . hasResourcePrefix ( "file : cnn > _ ( " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasResourcePrefix ( String resourcePath ) { return resourcePath ! = null & & ( resourcePath . startsWith ( CLASSPATH_PREFIX ) | | resourcePath . startsWith ( URL_PREFIX ) | | resourcePath . startsWith ( FILE_PREFIX ) ) ; }
void test6 ( ) throws Throwable { boolean boolean0 = ResourceUtils . resourceExists ( "a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean resourceExists ( String resourcePath ) { InputStream stream = null ; boolean exists = false ; try { stream = getInputStreamForPath ( resourcePath ) ; exists = true ; } catch ( IOException e ) { stream = null ; } finally { if ( stream ! = null ) { try { stream . close ( ) ; } catch ( IOException ignored ) { } } } return exists ; }
void test8 ( ) throws Throwable { boolean boolean0 = ResourceUtils . resourceExists ( "classpath : ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean resourceExists ( String resourcePath ) { InputStream stream = null ; boolean exists = false ; try { stream = getInputStreamForPath ( resourcePath ) ; exists = true ; } catch ( IOException e ) { stream = null ; } finally { if ( stream ! = null ) { try { stream . close ( ) ; } catch ( IOException ignored ) { } } } return exists ; }
void test11 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; ResourceUtils . close ( ( InputStream ) pipedInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( InputStream is ) { if ( is ! = null ) { try { is . close ( ) ; } catch ( IOException e ) { log . warn ( "Error closing input stream . " , e ) ; } } }
void test0 ( ) throws Throwable { FileDescriptor fileDescriptor0 = FileDescriptor . err ; FileInputStream fileInputStream0 = new FileInputStream ( fileDescriptor0 ) ; BufferedInputStream bufferedInputStream0 = new BufferedInputStream ( ( InputStream ) fileInputStream0 ) ; IniResource iniResource0 = new IniResource ( ( InputStream ) bufferedInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharsetName ( ) { return charsetName ; }
void test0 ( ) throws Throwable { IniResource iniResource0 = new IniResource ( ) ; Scanner scanner0 = new Scanner ( "# . \u0000H\u00000Jlb . " ) ; iniResource0 . load ( scanner0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test2 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; IniResource iniResource0 = new IniResource ( ( InputStream ) pipedInputStream0 ) ; Map < String , Map < String , String > > map0 = iniResource0 . getSections ( ) ; iniResource0 . setSections ( map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharsetName ( ) { return charsetName ; }
void test4 ( ) throws Throwable { char [ ] charArray0 = new char [ 24 ] ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; Scanner scanner0 = new Scanner ( ( Readable ) charArrayReader0 ) ; IniResource iniResource0 = new IniResource ( scanner0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharsetName ( ) { return charsetName ; }
void test5 ( ) throws Throwable { IniResource iniResource0 = new IniResource ( ) ; Scanner scanner0 = new Scanner ( " [ $^\uFFFD ] " ) ; iniResource0 . load ( scanner0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void load ( Scanner scanner ) { String currSectionName = null ; Map < String , String > section = new LinkedHashMap < String , String > ( ) ; while ( scanner . hasNextLine ( ) ) { String line = clean ( scanner . nextLine ( ) ) ; if ( line = = null | | line . startsWith ( COMMENT_POUND ) | | line . startsWith ( COMMENT_SEMICOLON ) ) { / / skip empty lines and comments : continue ; } String sectionName = getSectionName ( line . toLowerCase ( ) ) ; if ( sectionName ! = null ) { if ( ! section . isEmpty ( ) ) { sections . put ( currSectionName , section ) ; } currSectionName = sectionName ; section = new LinkedHashMap < String , String > ( ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Parsing " + HEADER_PREFIX + currSectionName + HEADER_SUFFIX ) ; } } else { / / normal line - split it into Key Value pairs and add it to the section : try { String [ ] keyValue = splitKeyValue ( line ) ; section . put ( keyValue [ 0 ] , keyValue [ 1 ] ) ; } catch ( ParseException e ) { String msg = "Unable to read key value pair for line [ " + line + " ] . " ; throw new ResourceException ( msg , e ) ; } } } if ( ! section . isEmpty ( ) ) { sections . put ( currSectionName , section ) ; } }
void test6 ( ) throws Throwable { char [ ] charArray0 = new char [ 9 ] ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; charArray0 [ 8 ] = ' ; ' ; IniResource iniResource0 = new IniResource ( ( Reader ) charArrayReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharsetName ( ) { return charsetName ; }
void test7 ( ) throws Throwable { char [ ] charArray0 = new char [ 24 ] ; charArray0 [ 3 ] = ' = ' ; charArray0 [ 0 ] = ' * ' ; charArray0 [ 8 ] = ' * ' ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; Scanner scanner0 = new Scanner ( ( Readable ) charArrayReader0 ) ; IniResource iniResource0 = new IniResource ( scanner0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharsetName ( ) { return charsetName ; }
void test8 ( ) throws Throwable { boolean boolean0 = IniResource . isSectionHeader ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSectionHeader ( String line ) { String s = clean ( line ) ; return s ! = null & & s . startsWith ( HEADER_PREFIX ) & & s . endsWith ( HEADER_SUFFIX ) ; }
void test9 ( ) throws Throwable { boolean boolean0 = IniResource . isSectionHeader ( " [ . \u0000h\u00000 < tv . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSectionHeader ( String line ) { String s = clean ( line ) ; return s ! = null & & s . startsWith ( HEADER_PREFIX ) & & s . endsWith ( HEADER_SUFFIX ) ; }
void test0 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; byte [ ] byteArray0 = xmlSerializer0 . serialize ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] serialize ( PrincipalCollection principals ) { return getSerializer ( ) . serialize ( principals ) ; }
void test0 ( ) throws Throwable { SpringJSecurityFilter springJSecurityFilter0 = new SpringJSecurityFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SpringJSecurityFilter ( ) { this . configClassName = SpringIniWebConfiguration . class . getName ( ) ; }
void test2 ( ) throws Throwable { SpringIniWebConfiguration springIniWebConfiguration0 = new SpringIniWebConfiguration ( ) ; springIniWebConfiguration0 . setSecurityManagerBeanName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecurityManagerBeanName ( ) { return securityManagerBeanName ; }
void test0 ( ) throws Throwable { AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor0 = new AuthorizationAttributeSourceAdvisor ( ) ; SecurityManager securityManager0 = authorizationAttributeSourceAdvisor0 . getSecurityManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SecurityManager getSecurityManager ( ) { return SecurityUtils . securityManager ; }
void test1 ( ) throws Throwable { AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor0 = new AuthorizationAttributeSourceAdvisor ( ) ; authorizationAttributeSourceAdvisor0 . setSecurityManager ( ( SecurityManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setSecurityManager ( SecurityManager securityManager ) { SecurityUtils . securityManager = securityManager ; }
void test2 ( ) throws Throwable { AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor0 = new AuthorizationAttributeSourceAdvisor ( ) ; authorizationAttributeSourceAdvisor0 . afterPropertiesSet ( ) ; authorizationAttributeSourceAdvisor0 . afterPropertiesSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void afterPropertiesSet ( ) throws Exception { if ( getAdvice ( ) = = null ) { if ( log . isTraceEnabled ( ) ) { log . trace ( "No authorization advice explicitly configured via the 'advice' " + "property . Attempting to set " + "default instance of type [ " + AopAllianceAnnotationsAuthorizingMethodInterceptor . class . getName ( ) + " ] " ) ; } AopAllianceAnnotationsAuthorizingMethodInterceptor interceptor = new AopAllianceAnnotationsAuthorizingMethodInterceptor ( ) ; setAdvice ( interceptor ) ; } }
void test2 ( ) throws Throwable { BlowfishCipher blowfishCipher0 = new BlowfishCipher ( ) ; SecretKeySpec secretKeySpec0 = ( SecretKeySpec ) BlowfishCipher . generateNewKey ( ) ; blowfishCipher0 . setKey ( ( Key ) secretKeySpec0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setKey ( Key key ) { this . key = key ; }
void test0 ( ) throws Throwable { Sha384Hash sha384Hash0 = Sha384Hash . fromBase64String ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test1 ( ) throws Throwable { Sha384Hash sha384Hash0 = Sha384Hash . fromHexString ( "B7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toHex ( ) ; / * * * Returns a Base64 encoding of this Hash's { @link #getBytes byte array }
void test2 ( ) throws Throwable { Sha384Hash sha384Hash0 = new Sha384Hash ( ( Object ) "\u0005@\u0001\uFFFD" , ( Object ) "\u0005@\u0001\uFFFD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toBase64 ( ) ; }
void test0 ( ) throws Throwable { Sha1Hash sha1Hash0 = new Sha1Hash ( ( Object ) "\u0005@\u0001\uFFFD" , ( Object ) "\u0005@\u0001\uFFFD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toHex ( ) ; / * * * Returns a Base64 encoding of this Hash's { @link #getBytes byte array }
void test1 ( ) throws Throwable { Sha1Hash sha1Hash0 = Sha1Hash . fromHexString ( "B7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toBase64 ( ) ; }
void test2 ( ) throws Throwable { Sha1Hash sha1Hash0 = Sha1Hash . fromBase64String ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toBase64 ( ) ; }
void test0 ( ) throws Throwable { Sha512Hash sha512Hash0 = new Sha512Hash ( ( Object ) "\u0005@\u0001\uFFFD" , ( Object ) "\u0005@\u0001\uFFFD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test1 ( ) throws Throwable { Sha512Hash sha512Hash0 = Sha512Hash . fromHexString ( "B7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) { return ALGORITHM_NAME ; }
void test2 ( ) throws Throwable { Sha512Hash sha512Hash0 = Sha512Hash . fromBase64String ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test0 ( ) throws Throwable { Md2Hash md2Hash0 = new Md2Hash ( ( Object ) "\u0005@\u0001\uFFFD" , ( Object ) "\u0005@\u0001\uFFFD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toBase64 ( ) ; }
void test1 ( ) throws Throwable { Md2Hash md2Hash0 = Md2Hash . fromBase64String ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toHex ( ) ; / * * * Returns a Base64 encoding of this Hash's { @link #getBytes byte array }
void test2 ( ) throws Throwable { Md2Hash md2Hash0 = Md2Hash . fromHexString ( "B7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toHex ( ) ; / * * * Returns a Base64 encoding of this Hash's { @link #getBytes byte array }
void test0 ( ) throws Throwable { Sha1Hash sha1Hash0 = new Sha1Hash ( ( Object ) "UTF - 8" , ( Object ) "UTF - 8" , 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { if ( this . realmPrincipals ! = null & & ! realmPrincipals . isEmpty ( ) ) { return realmPrincipals . hashCode ( ) ; } return super . hashCode ( ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; Md5Hash md5Hash0 = new Md5Hash ( ( Object ) "6e7125b78644568854bc55d4e8b8a497" , ( Object ) "\u0000\uFFFD\u0000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toBase64 ( ) ; }
void test2 ( ) throws Throwable { Md5Hash md5Hash0 = Md5Hash . fromBase64String ( "" ) ; byte [ ] byteArray0 = new byte [ 7 ] ; byte [ ] byteArray1 = md5Hash0 . hash ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] hash ( byte [ ] bytes ) { return hash ( bytes , null , 1 ) ; }
void test3 ( ) throws Throwable { Sha384Hash sha384Hash0 = Sha384Hash . fromBase64String ( "^ ! ) fYV%$ ? . ZWo" ) ; String string0 = sha384Hash0 . toString ( ) ; String string1 = sha384Hash0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test4 ( ) throws Throwable { Md2Hash md2Hash0 = new Md2Hash ( ( Object ) "UTF - 8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toBase64 ( ) ; }
void test5 ( ) throws Throwable { Sha1Hash sha1Hash0 = Sha1Hash . fromHexString ( "" ) ; String string0 = sha1Hash0 . toBase64 ( ) ; String string1 = sha1Hash0 . toBase64 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toBase64 ( ) ; }
void test6 ( ) throws Throwable { Sha512Hash sha512Hash0 = new Sha512Hash ( ) ; boolean boolean0 = sha512Hash0 . equals ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test7 ( ) throws Throwable { Sha512Hash sha512Hash0 = new Sha512Hash ( ) ; Md2Hash md2Hash0 = new Md2Hash ( ) ; boolean boolean0 = sha512Hash0 . equals ( ( Object ) md2Hash0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test0 ( ) throws Throwable { Sha256Hash sha256Hash0 = Sha256Hash . fromHexString ( "B7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test1 ( ) throws Throwable { Sha256Hash sha256Hash0 = new Sha256Hash ( ( Object ) "\u0005@\u0001\uFFFD" , ( Object ) "\u0005@\u0001\uFFFD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toBase64 ( ) ; }
void test2 ( ) throws Throwable { Sha256Hash sha256Hash0 = Sha256Hash . fromBase64String ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test0 ( ) throws Throwable { Md5Hash md5Hash0 = new Md5Hash ( ( Object ) "\u0005@\u0001\uFFFD" , ( Object ) "\u0005@\u0001\uFFFD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test1 ( ) throws Throwable { Md5Hash md5Hash0 = Md5Hash . fromHexString ( "B7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toHex ( ) ; / * * * Returns a Base64 encoding of this Hash's { @link #getBytes byte array }
void test2 ( ) throws Throwable { Md5Hash md5Hash0 = Md5Hash . fromBase64String ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toHex ( ) ; / * * * Returns a Base64 encoding of this Hash's { @link #getBytes byte array }
void test1 ( ) throws Throwable { LinkedList < Realm > linkedList0 = new LinkedList < Realm > ( ) ; ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer ( ( Collection < Realm > ) linkedList0 ) ; SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; linkedList0 . add ( ( Realm ) simpleAccountRealm0 ) ; LinkedList < String > linkedList1 = new LinkedList < String > ( ) ; linkedList1 . addFirst ( " [ ] " ) ; boolean [ ] booleanArray0 = modularRealmAuthorizer0 . hasRoles ( ( PrincipalCollection ) null , ( List < String > ) linkedList1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] hasRoles ( PrincipalCollection principals , List < String > roleIdentifiers ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasRoles ( principals , roleIdentifiers ) ; }
void test8 ( ) throws Throwable { TreeSet < Realm > treeSet0 = new TreeSet < Realm > ( ) ; ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer ( ( Collection < Realm > ) treeSet0 ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; boolean [ ] booleanArray0 = modularRealmAuthorizer0 . isPermitted ( ( PrincipalCollection ) simplePrincipalCollection0 , ( String [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermitted ( String p ) { return getSubject ( ) ! = null & & getSubject ( ) . isPermitted ( p ) ; }
void test9 ( ) throws Throwable { LinkedList < Realm > linkedList0 = new LinkedList < Realm > ( ) ; ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer ( ( Collection < Realm > ) linkedList0 ) ; SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; linkedList0 . add ( ( Realm ) simpleAccountRealm0 ) ; String [ ] stringArray0 = new String [ 9 ] ; stringArray0 [ 0 ] = "3@H . 6G > Y0rz" ; stringArray0 [ 1 ] = "3@H . 6G > Y0rz" ; stringArray0 [ 2 ] = "3@H . 6G > Y0rz" ; stringArray0 [ 3 ] = "3@H . 6G > Y0rz" ; stringArray0 [ 4 ] = "3@H . 6G > Y0rz" ; stringArray0 [ 5 ] = "3@H . 6G > Y0rz" ; stringArray0 [ 6 ] = "3@H . 6G > Y0rz" ; stringArray0 [ 7 ] = "3@H . 6G > Y0rz" ; stringArray0 [ 8 ] = "3@H . 6G > Y0rz" ; boolean [ ] booleanArray0 = modularRealmAuthorizer0 . isPermitted ( ( PrincipalCollection ) null , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermitted ( String p ) { return getSubject ( ) ! = null & & getSubject ( ) . isPermitted ( p ) ; }
void test10 ( ) throws Throwable { TreeSet < Realm > treeSet0 = new TreeSet < Realm > ( ) ; ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer ( ( Collection < Realm > ) treeSet0 ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; boolean [ ] booleanArray0 = modularRealmAuthorizer0 . isPermitted ( ( PrincipalCollection ) simplePrincipalCollection0 , ( List < Permission > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermitted ( String p ) { return getSubject ( ) ! = null & & getSubject ( ) . isPermitted ( p ) ; }
void test11 ( ) throws Throwable { ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; LinkedList < Permission > linkedList0 = new LinkedList < Permission > ( ) ; boolean [ ] booleanArray0 = modularRealmAuthorizer0 . isPermitted ( ( PrincipalCollection ) simplePrincipalCollection0 , ( List < Permission > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermitted ( String p ) { return getSubject ( ) ! = null & & getSubject ( ) . isPermitted ( p ) ; }
void test13 ( ) throws Throwable { ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; boolean boolean0 = modularRealmAuthorizer0 . isPermittedAll ( ( PrincipalCollection ) simplePrincipalCollection0 , ( String [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermittedAll ( PrincipalCollection principals , String . . . permissions ) { ensureRealms ( ) ; return getAuthorizer ( ) . isPermittedAll ( principals , permissions ) ; }
void test15 ( ) throws Throwable { LinkedList < Realm > linkedList0 = new LinkedList < Realm > ( ) ; ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer ( ( Collection < Realm > ) linkedList0 ) ; SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; linkedList0 . add ( ( Realm ) simpleAccountRealm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermittedAll ( PrincipalCollection principals , String . . . permissions ) { ensureRealms ( ) ; return getAuthorizer ( ) . isPermittedAll ( principals , permissions ) ; }
void test16 ( ) throws Throwable { TreeSet < Realm > treeSet0 = new TreeSet < Realm > ( ) ; ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer ( ( Collection < Realm > ) treeSet0 ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; boolean boolean0 = modularRealmAuthorizer0 . isPermittedAll ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Collection < Permission > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermittedAll ( PrincipalCollection principals , String . . . permissions ) { ensureRealms ( ) ; return getAuthorizer ( ) . isPermittedAll ( principals , permissions ) ; }
void test17 ( ) throws Throwable { ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; HashSet < Permission > hashSet0 = new HashSet < Permission > ( ) ; boolean boolean0 = modularRealmAuthorizer0 . isPermittedAll ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Collection < Permission > ) hashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermittedAll ( PrincipalCollection principals , String . . . permissions ) { ensureRealms ( ) ; return getAuthorizer ( ) . isPermittedAll ( principals , permissions ) ; }
void test19 ( ) throws Throwable { TreeSet < Realm > treeSet0 = new TreeSet < Realm > ( ) ; ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer ( ( Collection < Realm > ) treeSet0 ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; modularRealmAuthorizer0 . checkPermissions ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Collection < Permission > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test20 ( ) throws Throwable { ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; LinkedList < Permission > linkedList0 = new LinkedList < Permission > ( ) ; modularRealmAuthorizer0 . checkPermissions ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Collection < Permission > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test22 ( ) throws Throwable { TreeSet < Realm > treeSet0 = new TreeSet < Realm > ( ) ; ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer ( ( Collection < Realm > ) treeSet0 ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; boolean [ ] booleanArray0 = modularRealmAuthorizer0 . hasRoles ( ( PrincipalCollection ) simplePrincipalCollection0 , ( List < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] hasRoles ( PrincipalCollection principals , List < String > roleIdentifiers ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasRoles ( principals , roleIdentifiers ) ; }
void test23 ( ) throws Throwable { LinkedList < Realm > linkedList0 = new LinkedList < Realm > ( ) ; ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer ( ( Collection < Realm > ) linkedList0 ) ; LinkedList < String > linkedList1 = new LinkedList < String > ( ) ; boolean [ ] booleanArray0 = modularRealmAuthorizer0 . hasRoles ( ( PrincipalCollection ) null , ( List < String > ) linkedList1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] hasRoles ( PrincipalCollection principals , List < String > roleIdentifiers ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasRoles ( principals , roleIdentifiers ) ; }
void test24 ( ) throws Throwable { HashSet < Realm > hashSet0 = new HashSet < Realm > ( ) ; ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer ( ( Collection < Realm > ) hashSet0 ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Object ) "UTF - 8" , "UTF - 8" ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ) ; boolean boolean0 = modularRealmAuthorizer0 . hasAllRoles ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Collection < String > ) treeSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasAllRoles ( PrincipalCollection principals , Collection < String > roleIdentifiers ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasAllRoles ( principals , roleIdentifiers ) ; }
void test26 ( ) throws Throwable { TreeSet < Realm > treeSet0 = new TreeSet < Realm > ( ) ; ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer ( ( Collection < Realm > ) treeSet0 ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; modularRealmAuthorizer0 . checkRoles ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Collection < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test27 ( ) throws Throwable { ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer ( ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ) ; modularRealmAuthorizer0 . checkRoles ( ( PrincipalCollection ) null , ( Collection < String > ) treeSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test0 ( ) throws Throwable { LinkedHashSet < Permission > linkedHashSet0 = new LinkedHashSet < Permission > ( ) ; AllPermission allPermission0 = new AllPermission ( ) ; linkedHashSet0 . add ( ( Permission ) allPermission0 ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( Collection ) linkedHashSet0 , ( Object ) " [ ] " , " [ ] " , ( Set < String > ) null , ( Set < Permission > ) linkedHashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test1 ( ) throws Throwable { AllPermission allPermission0 = new AllPermission ( ) ; HashSet < Permission > hashSet0 = new HashSet < Permission > ( ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( Object ) allPermission0 , ( Object ) "" , "" , ( Set < String > ) null , ( Set < Permission > ) hashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocked ( ) { return locked ; }
void test2 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) simplePrincipalCollection0 ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; boolean [ ] booleanArray0 = simpleAuthorizingAccount0 . hasRoles ( ( List < String > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] hasRoles ( PrincipalCollection principals , List < String > roleIdentifiers ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasRoles ( principals , roleIdentifiers ) ; }
void test3 ( ) throws Throwable { Object object0 = new Object ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( object0 , " ) @8 - Nr2GW" ) ; Set < Object > set0 = simplePrincipalCollection0 . asSet ( ) ; Set < String > set1 = simplePrincipalCollection0 . getRealmNames ( ) ; HashSet < Permission > hashSet0 = new HashSet < Permission > ( 12 , 12 ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( Collection ) set0 , object0 , " ) @8 - Nr2GW" , set1 , ( Set < Permission > ) hashSet0 ) ; SimpleAuthorizingAccount simpleAuthorizingAccount1 = new SimpleAuthorizingAccount ( ( Object ) simpleAuthorizingAccount0 , object0 , " ) @8 - Nr2GW" , set1 , ( Set < Permission > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleAuthorizingAccount ( ) { }
void test4 ( ) throws Throwable { Object object0 = new Object ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( object0 , "cEt - DMl_^8Z7" ) ; Set < Object > set0 = simplePrincipalCollection0 . asSet ( ) ; Set < String > set1 = simplePrincipalCollection0 . getRealmNames ( ) ; HashSet < Permission > hashSet0 = new HashSet < Permission > ( 1 , 1 ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( Collection ) set0 , object0 , "cEt - DMl_^8Z7" , set1 , ( Set < Permission > ) hashSet0 ) ; HashSet < String > hashSet1 = new HashSet < String > ( ) ; hashSet0 . add ( ( Permission ) null ) ; SimpleAuthorizingAccount simpleAuthorizingAccount1 = new SimpleAuthorizingAccount ( ( Object ) simpleAuthorizingAccount0 , object0 , "cEt - DMl_^8Z7" , ( Set < String > ) hashSet1 , ( Set < Permission > ) hashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocked ( ) { return locked ; }
void test5 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Object ) " [ ] " , " [ ] " ) ; Set < String > set0 = simplePrincipalCollection0 . getRealmNames ( ) ; SimpleRole simpleRole0 = new SimpleRole ( ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( Collection ) set0 , ( Object ) simpleRole0 , " [ ] " , set0 , ( Set < Permission > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test7 ( ) throws Throwable { Object object0 = new Object ( ) ; SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( object0 , object0 , " ) @8 - Nr2GW" ) ; SimplePrincipalCollection simplePrincipalCollection0 = ( SimplePrincipalCollection ) simpleAuthenticationInfo0 . getPrincipals ( ) ; HashSet < String > hashSet0 = new HashSet < String > ( ) ; LinkedHashSet < Permission > linkedHashSet0 = new LinkedHashSet < Permission > ( ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , object0 , " ) @8 - Nr2GW" , ( Set < String > ) hashSet0 , ( Set < Permission > ) linkedHashSet0 ) ; simpleAuthorizingAccount0 . merge ( ( Account ) simpleAuthorizingAccount0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCredentialsExpired ( ) { return credentialsExpired ; }
void test8 ( ) throws Throwable { Object object0 = new Object ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( object0 , " ) @8 - Nr2GW" ) ; Set < String > set0 = simplePrincipalCollection0 . getRealmNames ( ) ; HashSet < Permission > hashSet0 = new HashSet < Permission > ( 12 , 12 ) ; WildcardPermission wildcardPermission0 = new WildcardPermission ( " [ ] " ) ; hashSet0 . add ( ( Permission ) wildcardPermission0 ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , object0 , " [ ] " , set0 , ( Set < Permission > ) hashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocked ( ) { return locked ; }
void test9 ( ) throws Throwable { Object object0 = new Object ( ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( object0 , object0 , "Js ] * I" ) ; SimpleAccount simpleAccount0 = new SimpleAccount ( object0 , object0 , "Js ] * I" ) ; simpleAuthorizingAccount0 . merge ( ( Account ) simpleAccount0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocked ( ) { return locked ; }
void test10 ( ) throws Throwable { Object object0 = new Object ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( object0 , " ) @8 - Nr2GW" ) ; Set < Object > set0 = simplePrincipalCollection0 . asSet ( ) ; Set < String > set1 = simplePrincipalCollection0 . getRealmNames ( ) ; HashSet < Permission > hashSet0 = new HashSet < Permission > ( 12 , 12 ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( Collection ) set0 , object0 , " ) @8 - Nr2GW" , set1 , ( Set < Permission > ) hashSet0 ) ; simpleAuthorizingAccount0 . merge ( ( Account ) simpleAuthorizingAccount0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCredentialsExpired ( ) { return credentialsExpired ; }
void test11 ( ) throws Throwable { Object object0 = new Object ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( object0 , " ) @8 - Nr2GW" ) ; Set < Object > set0 = simplePrincipalCollection0 . asSet ( ) ; Set < String > set1 = simplePrincipalCollection0 . getRealmNames ( ) ; HashSet < Permission > hashSet0 = new HashSet < Permission > ( 12 , 12 ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( Collection ) set0 , object0 , " ) @8 - Nr2GW" , set1 , ( Set < Permission > ) hashSet0 ) ; SimpleRole simpleRole0 = new SimpleRole ( " ) @8 - Nr2GW" , ( Set < Permission > ) hashSet0 ) ; simpleAuthorizingAccount0 . merge ( simpleRole0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test12 ( ) throws Throwable { Object object0 = new Object ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( object0 , " ) @8 - Nr2GW" ) ; Set < Object > set0 = simplePrincipalCollection0 . asSet ( ) ; Set < String > set1 = simplePrincipalCollection0 . getRealmNames ( ) ; HashSet < Permission > hashSet0 = new HashSet < Permission > ( 12 , 12 ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( Collection ) set0 , object0 , " ) @8 - Nr2GW" , set1 , ( Set < Permission > ) hashSet0 ) ; WildcardPermission wildcardPermission0 = new WildcardPermission ( " [ ] " ) ; hashSet0 . add ( ( Permission ) wildcardPermission0 ) ; SimpleRole simpleRole0 = new SimpleRole ( " ) @8 - Nr2GW" , ( Set < Permission > ) hashSet0 ) ; simpleAuthorizingAccount0 . merge ( simpleRole0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test13 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; simpleAuthorizingAccount0 . addPrivateRole ( ( PrincipalCollection ) null , ( Collection < Permission > ) null ) ; SimpleRole simpleRole0 = new SimpleRole ( ( String ) null , ( Set < Permission > ) null ) ; simpleAuthorizingAccount0 . merge ( simpleRole0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCredentialsExpired ( ) { return credentialsExpired ; }
void test14 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; LinkedHashSet < Permission > linkedHashSet0 = new LinkedHashSet < Permission > ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; simpleAuthorizingAccount0 . addPrivateRole ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Collection < Permission > ) linkedHashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test15 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; HashSet < SimpleRole > hashSet0 = new HashSet < SimpleRole > ( ) ; simpleAuthorizingAccount0 . setSimpleRoles ( ( Set < SimpleRole > ) hashSet0 ) ; simpleAuthorizingAccount0 . addRole ( "YJ ; ( vd ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocked ( ) { return locked ; }
void test16 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; simpleAuthorizingAccount0 . addRole ( "" ) ; simpleAuthorizingAccount0 . addRole ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocked ( ) { return locked ; }
void test17 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; simpleAuthorizingAccount0 . addAll ( ( Collection < SimpleRole > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocked ( ) { return locked ; }
void test18 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; HashSet < SimpleRole > hashSet0 = new HashSet < SimpleRole > ( ) ; simpleAuthorizingAccount0 . addAll ( ( Collection < SimpleRole > ) hashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCredentialsExpired ( ) { return credentialsExpired ; }
void test19 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; HashSet < SimpleRole > hashSet0 = new HashSet < SimpleRole > ( ) ; SimpleRole simpleRole0 = new SimpleRole ( ) ; hashSet0 . add ( simpleRole0 ) ; simpleAuthorizingAccount0 . addAll ( ( Collection < SimpleRole > ) hashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test20 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; simpleAuthorizingAccount0 . addPrivateRole ( ( PrincipalCollection ) null , ( Collection < Permission > ) null ) ; HashSet < SimpleRole > hashSet0 = new HashSet < SimpleRole > ( ) ; SimpleRole simpleRole0 = new SimpleRole ( ) ; hashSet0 . add ( simpleRole0 ) ; simpleAuthorizingAccount0 . addAll ( ( Collection < SimpleRole > ) hashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test21 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ) ; treeSet0 . add ( " [ 8@ [ ] UPZQ1 : CG { TwkQ" ) ; boolean boolean0 = simpleAuthorizingAccount0 . hasAllRoles ( ( Collection < String > ) treeSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasAllRoles ( PrincipalCollection principals , Collection < String > roleIdentifiers ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasAllRoles ( principals , roleIdentifiers ) ; }
void test22 ( ) throws Throwable { Object object0 = new Object ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( object0 , " ) @8 - Nr2GW" ) ; Set < Object > set0 = simplePrincipalCollection0 . asSet ( ) ; Set < String > set1 = simplePrincipalCollection0 . getRealmNames ( ) ; HashSet < Permission > hashSet0 = new HashSet < Permission > ( 12 , 12 ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( Collection ) set0 , object0 , " ) @8 - Nr2GW" , set1 , ( Set < Permission > ) hashSet0 ) ; simpleAuthorizingAccount0 . checkRoles ( ( Collection < String > ) set1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test23 ( ) throws Throwable { Object object0 = new Object ( ) ; SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo ( object0 , object0 , " ) @8 - Nr2GW" ) ; SimplePrincipalCollection simplePrincipalCollection0 = ( SimplePrincipalCollection ) simpleAuthenticationInfo0 . getPrincipals ( ) ; LinkedList < Permission > linkedList0 = new LinkedList < Permission > ( ) ; WildcardPermission wildcardPermission0 = new WildcardPermission ( " [ ] " ) ; HashSet < String > hashSet0 = new HashSet < String > ( ) ; LinkedHashSet < Permission > linkedHashSet0 = new LinkedHashSet < Permission > ( ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , object0 , " ) @8 - Nr2GW" , ( Set < String > ) hashSet0 , ( Set < Permission > ) linkedHashSet0 ) ; linkedList0 . add ( ( Permission ) wildcardPermission0 ) ; boolean [ ] booleanArray0 = simpleAuthorizingAccount0 . isPermitted ( ( List < Permission > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermitted ( String p ) { return getSubject ( ) ! = null & & getSubject ( ) . isPermitted ( p ) ; }
void test24 ( ) throws Throwable { LinkedHashSet < Permission > linkedHashSet0 = new LinkedHashSet < Permission > ( ) ; AllPermission allPermission0 = new AllPermission ( ) ; linkedHashSet0 . add ( ( Permission ) allPermission0 ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( Collection ) linkedHashSet0 , ( Object ) " [ ] " , " [ ] " , ( Set < String > ) null , ( Set < Permission > ) linkedHashSet0 ) ; simpleAuthorizingAccount0 . checkPermissions ( ( Collection < Permission > ) linkedHashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test25 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; HashSet < SimpleRole > hashSet0 = new HashSet < SimpleRole > ( ) ; simpleAuthorizingAccount0 . setSimpleRoles ( ( Set < SimpleRole > ) hashSet0 ) ; AllPermission allPermission0 = new AllPermission ( ) ; boolean boolean0 = simpleAuthorizingAccount0 . isPermitted ( ( Permission ) allPermission0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermitted ( String p ) { return getSubject ( ) ! = null & & getSubject ( ) . isPermitted ( p ) ; }
void test27 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; boolean [ ] booleanArray0 = simpleAuthorizingAccount0 . hasRoles ( ( List < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] hasRoles ( PrincipalCollection principals , List < String > roleIdentifiers ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasRoles ( principals , roleIdentifiers ) ; }
void test28 ( ) throws Throwable { SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) simplePrincipalCollection0 ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . add ( "t6E" ) ; boolean [ ] booleanArray0 = simpleAuthorizingAccount0 . hasRoles ( ( List < String > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] hasRoles ( PrincipalCollection principals , List < String > roleIdentifiers ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasRoles ( principals , roleIdentifiers ) ; }
void test29 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; boolean boolean0 = simpleAuthorizingAccount0 . hasAllRoles ( ( Collection < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasAllRoles ( PrincipalCollection principals , Collection < String > roleIdentifiers ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasAllRoles ( principals , roleIdentifiers ) ; }
void test30 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ) ; boolean boolean0 = simpleAuthorizingAccount0 . hasAllRoles ( ( Collection < String > ) treeSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasAllRoles ( PrincipalCollection principals , Collection < String > roleIdentifiers ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasAllRoles ( principals , roleIdentifiers ) ; }
void test31 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ) ; treeSet0 . add ( "YJ ; ( vd ! " ) ; simpleAuthorizingAccount0 . addRole ( "YJ ; ( vd ! " ) ; boolean boolean0 = simpleAuthorizingAccount0 . hasAllRoles ( ( Collection < String > ) treeSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasAllRoles ( PrincipalCollection principals , Collection < String > roleIdentifiers ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasAllRoles ( principals , roleIdentifiers ) ; }
void test32 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; boolean [ ] booleanArray0 = simpleAuthorizingAccount0 . isPermitted ( ( List < Permission > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermitted ( String p ) { return getSubject ( ) ! = null & & getSubject ( ) . isPermitted ( p ) ; }
void test33 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; LinkedList < Permission > linkedList0 = new LinkedList < Permission > ( ) ; boolean [ ] booleanArray0 = simpleAuthorizingAccount0 . isPermitted ( ( List < Permission > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermitted ( String p ) { return getSubject ( ) ! = null & & getSubject ( ) . isPermitted ( p ) ; }
void test34 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; boolean boolean0 = simpleAuthorizingAccount0 . isPermittedAll ( ( Collection < Permission > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermittedAll ( PrincipalCollection principals , String . . . permissions ) { ensureRealms ( ) ; return getAuthorizer ( ) . isPermittedAll ( principals , permissions ) ; }
void test35 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; LinkedList < Permission > linkedList0 = new LinkedList < Permission > ( ) ; boolean boolean0 = simpleAuthorizingAccount0 . isPermittedAll ( ( Collection < Permission > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermittedAll ( PrincipalCollection principals , String . . . permissions ) { ensureRealms ( ) ; return getAuthorizer ( ) . isPermittedAll ( principals , permissions ) ; }
void test36 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; LinkedList < Permission > linkedList0 = new LinkedList < Permission > ( ) ; WildcardPermission wildcardPermission0 = new WildcardPermission ( " [ 8@ [ ] UPZQ1 : CG { TwkQ" ) ; linkedList0 . add ( ( Permission ) wildcardPermission0 ) ; boolean boolean0 = simpleAuthorizingAccount0 . isPermittedAll ( ( Collection < Permission > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermittedAll ( PrincipalCollection principals , String . . . permissions ) { ensureRealms ( ) ; return getAuthorizer ( ) . isPermittedAll ( principals , permissions ) ; }
void test37 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; TreeSet < Permission > treeSet0 = new TreeSet < Permission > ( ) ; AllPermission allPermission0 = new AllPermission ( ) ; treeSet0 . add ( ( Permission ) allPermission0 ) ; SimpleRole simpleRole0 = new SimpleRole ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ( Object ) simpleRole0 , " . c { m% / . kpp" ) ; simpleAuthorizingAccount0 . addPrivateRole ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Collection < Permission > ) treeSet0 ) ; boolean boolean0 = simpleAuthorizingAccount0 . isPermittedAll ( ( Collection < Permission > ) treeSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermittedAll ( PrincipalCollection principals , String . . . permissions ) { ensureRealms ( ) ; return getAuthorizer ( ) . isPermittedAll ( principals , permissions ) ; }
void test38 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; simpleAuthorizingAccount0 . checkPermissions ( ( Collection < Permission > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocked ( ) { return locked ; }
void test39 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; LinkedHashSet < Permission > linkedHashSet0 = new LinkedHashSet < Permission > ( ) ; simpleAuthorizingAccount0 . checkPermissions ( ( Collection < Permission > ) linkedHashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCredentialsExpired ( ) { return credentialsExpired ; }
void test40 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; simpleAuthorizingAccount0 . checkRoles ( ( Collection < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocked ( ) { return locked ; }
void test41 ( ) throws Throwable { SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; simpleAuthorizingAccount0 . checkRoles ( ( Collection < String > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test0 ( ) throws Throwable { LinkedHashSet < Permission > linkedHashSet0 = new LinkedHashSet < Permission > ( ) ; SimpleRole simpleRole0 = new SimpleRole ( "c ( 'L#dQ - ^pohv\"" , ( Set < Permission > ) linkedHashSet0 ) ; int int0 = simpleRole0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { if ( this . realmPrincipals ! = null & & ! realmPrincipals . isEmpty ( ) ) { return realmPrincipals . hashCode ( ) ; } return super . hashCode ( ) ; }
void test1 ( ) throws Throwable { LinkedHashSet < Permission > linkedHashSet0 = new LinkedHashSet < Permission > ( ) ; AllPermission allPermission0 = new AllPermission ( ) ; linkedHashSet0 . add ( ( Permission ) allPermission0 ) ; SimpleRole simpleRole0 = new SimpleRole ( "c ( 'L#dQ - ^pohv\"" , ( Set < Permission > ) linkedHashSet0 ) ; simpleRole0 . addAll ( ( Collection < Permission > ) linkedHashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test2 ( ) throws Throwable { SimpleRole simpleRole0 = new SimpleRole ( " | ua$ ) W`Z * pQ5\"" ) ; String string0 = simpleRole0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test3 ( ) throws Throwable { SimpleRole simpleRole0 = new SimpleRole ( ) ; TreeSet < Permission > treeSet0 = new TreeSet < Permission > ( ) ; SimpleRole simpleRole1 = new SimpleRole ( "Wildcard string cannot contain only dividers . Make sure permission strings are properly formatted . " , ( Set < Permission > ) treeSet0 ) ; boolean boolean0 = simpleRole0 . equals ( ( Object ) simpleRole1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test4 ( ) throws Throwable { SimpleRole simpleRole0 = new SimpleRole ( "kQd6M = " ) ; AllPermission allPermission0 = new AllPermission ( ) ; simpleRole0 . add ( ( Permission ) allPermission0 ) ; simpleRole0 . add ( ( Permission ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test5 ( ) throws Throwable { SimpleRole simpleRole0 = new SimpleRole ( "kQd6M = " ) ; simpleRole0 . addAll ( ( Collection < Permission > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test6 ( ) throws Throwable { SimpleRole simpleRole0 = new SimpleRole ( "kQd6M = " ) ; TreeSet < Permission > treeSet0 = new TreeSet < Permission > ( ) ; simpleRole0 . addAll ( ( Collection < Permission > ) treeSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test7 ( ) throws Throwable { LinkedHashSet < Permission > linkedHashSet0 = new LinkedHashSet < Permission > ( ) ; AllPermission allPermission0 = new AllPermission ( ) ; linkedHashSet0 . add ( ( Permission ) allPermission0 ) ; SimpleRole simpleRole0 = new SimpleRole ( "" ) ; simpleRole0 . addAll ( ( Collection < Permission > ) linkedHashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test8 ( ) throws Throwable { SimpleRole simpleRole0 = new SimpleRole ( ( String ) null ) ; AllPermission allPermission0 = new AllPermission ( ) ; boolean boolean0 = simpleRole0 . isPermitted ( ( Permission ) allPermission0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermitted ( String p ) { return getSubject ( ) ! = null & & getSubject ( ) . isPermitted ( p ) ; }
void test9 ( ) throws Throwable { SimpleRole simpleRole0 = new SimpleRole ( " | ua$ ) W`Z * pQ5\"" ) ; WildcardPermission wildcardPermission0 = new WildcardPermission ( " | ua$ ) W`Z * pQ5\"" , true ) ; simpleRole0 . add ( ( Permission ) wildcardPermission0 ) ; boolean boolean0 = simpleRole0 . isPermitted ( ( Permission ) wildcardPermission0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermitted ( String p ) { return getSubject ( ) ! = null & & getSubject ( ) . isPermitted ( p ) ; }
void test10 ( ) throws Throwable { AllPermission allPermission0 = new AllPermission ( ) ; TreeSet < Permission > treeSet0 = new TreeSet < Permission > ( ) ; SimpleRole simpleRole0 = new SimpleRole ( "" , ( Set < Permission > ) treeSet0 ) ; boolean boolean0 = simpleRole0 . isPermitted ( ( Permission ) allPermission0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermitted ( String p ) { return getSubject ( ) ! = null & & getSubject ( ) . isPermitted ( p ) ; }
void test11 ( ) throws Throwable { SimpleRole simpleRole0 = new SimpleRole ( " | ua$ ) W`Z * pQ5\"" ) ; WildcardPermission wildcardPermission0 = new WildcardPermission ( " | ua$ ) W`Z * pQ5\"" , true ) ; simpleRole0 . add ( ( Permission ) wildcardPermission0 ) ; WildcardPermission wildcardPermission1 = new WildcardPermission ( " | ua$ ) W`Z * pQ5\"" , false ) ; boolean boolean0 = simpleRole0 . isPermitted ( ( Permission ) wildcardPermission1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermitted ( String p ) { return getSubject ( ) ! = null & & getSubject ( ) . isPermitted ( p ) ; }
void test12 ( ) throws Throwable { SimpleRole simpleRole0 = new SimpleRole ( ( String ) null ) ; int int0 = simpleRole0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { if ( this . realmPrincipals ! = null & & ! realmPrincipals . isEmpty ( ) ) { return realmPrincipals . hashCode ( ) ; } return super . hashCode ( ) ; }
void test13 ( ) throws Throwable { SimpleRole simpleRole0 = new SimpleRole ( ( String ) null ) ; boolean boolean0 = simpleRole0 . equals ( ( Object ) " [ ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test14 ( ) throws Throwable { SimpleRole simpleRole0 = new SimpleRole ( "kQd6M = " ) ; SimpleRole simpleRole1 = new SimpleRole ( "" , ( Set < Permission > ) null ) ; boolean boolean0 = simpleRole0 . equals ( ( Object ) simpleRole1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test15 ( ) throws Throwable { SimpleRole simpleRole0 = new SimpleRole ( ( String ) null ) ; SimpleRole simpleRole1 = new SimpleRole ( ) ; boolean boolean0 = simpleRole0 . equals ( ( Object ) simpleRole1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o instanceof SimplePrincipalCollection ) { SimplePrincipalCollection other = ( SimplePrincipalCollection ) o ; return this . realmPrincipals ! = null ? this . realmPrincipals . equals ( other . realmPrincipals ) : other . realmPrincipals = = null ; } return false ; }
void test0 ( ) throws Throwable { SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo ( ) ; LinkedHashSet < Permission > linkedHashSet0 = new LinkedHashSet < Permission > ( ) ; simpleAuthorizationInfo0 . setObjectPermissions ( ( Set < Permission > ) linkedHashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test1 ( ) throws Throwable { SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo ( ) ; Set < Permission > set0 = ( Set < Permission > ) simpleAuthorizationInfo0 . getObjectPermissions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < Permission > getObjectPermissions ( ) { return authzInfo . getObjectPermissions ( ) ; }
void test3 ( ) throws Throwable { SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo ( ) ; HashSet < String > hashSet0 = new HashSet < String > ( ) ; simpleAuthorizationInfo0 . setRoles ( ( Set < String > ) hashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test5 ( ) throws Throwable { SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo ( ( Set < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleAuthorizationInfo ( ) { }
void test6 ( ) throws Throwable { SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo ( ) ; Set < String > set0 = ( Set < String > ) simpleAuthorizationInfo0 . getStringPermissions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < String > getStringPermissions ( ) { return authzInfo . getStringPermissions ( ) ; }
void test8 ( ) throws Throwable { SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo ( ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ) ; simpleAuthorizationInfo0 . addRoles ( ( Collection < String > ) treeSet0 ) ; simpleAuthorizationInfo0 . addRoles ( ( Collection < String > ) treeSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test13 ( ) throws Throwable { SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo ( ) ; LinkedList < Permission > linkedList0 = new LinkedList < Permission > ( ) ; simpleAuthorizationInfo0 . addObjectPermissions ( ( Collection < Permission > ) linkedList0 ) ; simpleAuthorizationInfo0 . addObjectPermissions ( ( Collection < Permission > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test0 ( ) throws Throwable { AuthenticatedAnnotationHandler authenticatedAnnotationHandler0 = new AuthenticatedAnnotationHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AuthenticatedAnnotationHandler ( ) { super ( RequiresAuthentication . class ) ; }
void test1 ( ) throws Throwable { PermissionAnnotationHandler permissionAnnotationHandler0 = new PermissionAnnotationHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PermissionAnnotationHandler ( ) { super ( RequiresPermissions . class ) ; }
void test0 ( ) throws Throwable { RoleAnnotationHandler roleAnnotationHandler0 = new RoleAnnotationHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RoleAnnotationHandler ( ) { super ( RequiresRoles . class ) ; }
void test0 ( ) throws Throwable { UserAnnotationHandler userAnnotationHandler0 = new UserAnnotationHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UserAnnotationHandler ( ) { super ( RequiresUser . class ) ; }
void test0 ( ) throws Throwable { GuestAnnotationHandler guestAnnotationHandler0 = new GuestAnnotationHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GuestAnnotationHandler ( ) { super ( RequiresGuest . class ) ; }
void test2 ( ) throws Throwable { AopAllianceAnnotationsAuthorizingMethodInterceptor aopAllianceAnnotationsAuthorizingMethodInterceptor0 = new AopAllianceAnnotationsAuthorizingMethodInterceptor ( ) ; aopAllianceAnnotationsAuthorizingMethodInterceptor0 . setMethodInterceptors ( ( Collection < AuthorizingAnnotationMethodInterceptor > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMethodInterceptors ( Collection < AuthorizingAnnotationMethodInterceptor > methodInterceptors ) { this . methodInterceptors = methodInterceptors ; }
void test0 ( ) throws Throwable { AllPermission allPermission0 = new AllPermission ( ) ; boolean boolean0 = allPermission0 . implies ( ( Permission ) allPermission0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean implies ( Permission p ) ; }
void test4 ( ) throws Throwable { WildcardPermission wildcardPermission0 = new WildcardPermission ( " * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean implies ( Permission p ) ; }
void test5 ( ) throws Throwable { WildcardPermission wildcardPermission0 = new WildcardPermission ( " * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean implies ( Permission p ) ; }
void test6 ( ) throws Throwable { WildcardPermission wildcardPermission0 = new WildcardPermission ( " * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean implies ( Permission p ) ; }
void test7 ( ) throws Throwable { WildcardPermission wildcardPermission0 = new WildcardPermission ( " < d + S ) nB^2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean implies ( Permission p ) ; }
void test8 ( ) throws Throwable { WildcardPermission wildcardPermission0 = new WildcardPermission ( " * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean implies ( Permission p ) ; }
void test4 ( ) throws Throwable { boolean boolean0 = ClassUtils . isAvailable ( "Please initialize the log4j syst . m properly . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAvailable ( String fullyQualifiedClassName ) { try { forName ( fullyQualifiedClassName ) ; return true ; } catch ( UnknownClassException e ) { return false ; } }
void test5 ( ) throws Throwable { ClassUtils classUtils0 = new ClassUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test6 ( ) throws Throwable { InputStream inputStream0 = ClassUtils . getResourceAsStream ( "Please initialize the log4j syst . m properly . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream getResourceAsStream ( String name ) { InputStream is = null ; ClassLoader cl = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( cl ! = null ) { is = cl . getResourceAsStream ( name ) ; } if ( is = = null ) { if ( log . isTraceEnabled ( ) ) { log . trace ( "Resource [ " + name + " ] was not found via the thread context ClassLoader . Trying the " + "current ClassLoader . . . " ) ; } cl = ClassUtils . class . getClassLoader ( ) ; is = cl . getResourceAsStream ( name ) ; if ( is = = null ) { if ( log . isTraceEnabled ( ) ) { log . trace ( "Resource [ " + name + " ] was not found via the current class loader . Trying the " + "system / application ClassLoader . . . " ) ; } cl = ClassLoader . getSystemClassLoader ( ) ; is = cl . getResourceAsStream ( name ) ; if ( is = = null & & log . isTraceEnabled ( ) ) { log . trace ( "Resource [ " + name + " ] was not found via the thread context , current , or " + "system / application ClassLoaders . All heuristics have been exhausted . Returning null . " ) ; } } } return is ; }
void test0 ( ) throws Throwable { boolean boolean0 = JavaEnvironment . isAtLeastVersion15 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAtLeastVersion15 ( ) { return getMajorVersion ( ) > = JAVA_15 ; }
void test1 ( ) throws Throwable { String string0 = JavaEnvironment . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test2 ( ) throws Throwable { boolean boolean0 = JavaEnvironment . isAtLeastVersion14 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAtLeastVersion14 ( ) { return getMajorVersion ( ) > = JAVA_14 ; }
void test1 ( ) throws Throwable { jdbcConnection jdbcConnection0 = new jdbcConnection ( ( Session ) null ) ; JdbcUtils . closeConnection ( ( Connection ) jdbcConnection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void closeConnection ( Connection connection ) { if ( connection ! = null ) { try { connection . close ( ) ; } catch ( SQLException ex ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Could not close JDBC Connection" , ex ) ; } } catch ( Throwable ex ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Unexpected exception on closing JDBC Connection" , ex ) ; } } } }
void test3 ( ) throws Throwable { jdbcConnection jdbcConnection0 = new jdbcConnection ( ( Session ) null ) ; jdbcStatement jdbcStatement0 = ( jdbcStatement ) jdbcConnection0 . createStatement ( ) ; JdbcUtils . closeStatement ( ( Statement ) jdbcStatement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void closeStatement ( Statement statement ) { if ( statement ! = null ) { try { statement . close ( ) ; } catch ( SQLException ex ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Could not close JDBC Statement" , ex ) ; } } catch ( Throwable ex ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Unexpected exception on closing JDBC Statement" , ex ) ; } } } }
void test0 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . matches ( " / '~p21^ > s * zqriyr o^" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( Method method , Class targetClass ) { return ( ( method . getAnnotation ( RequiresPermissions . class ) ! = null ) | | ( method . getAnnotation ( RequiresRoles . class ) ! = null ) | | ( method . getAnnotation ( RequiresUser . class ) ! = null ) | | ( method . getAnnotation ( RequiresGuest . class ) ! = null ) | | ( method . getAnnotation ( RequiresAuthentication . class ) ! = null ) ) ; }
void test1 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . matchStart ( "" , " * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchStart ( String pattern , String path ) { return doMatch ( pattern , path , false ) ; }
void test3 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; antPathMatcher0 . setPathSeparator ( " / * * " ) ; boolean boolean0 = antPathMatcher0 . doMatch ( " * * " , " * * / * * " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean doMatch ( String pattern , String path , boolean fullMatch ) { if ( path . startsWith ( this . pathSeparator ) ! = pattern . startsWith ( this . pathSeparator ) ) { return false ; } String [ ] pattDirs = StringUtils . tokenizeToStringArray ( pattern , this . pathSeparator ) ; String [ ] pathDirs = StringUtils . tokenizeToStringArray ( path , this . pathSeparator ) ; int pattIdxStart = 0 ; int pattIdxEnd = pattDirs . length - 1 ; int pathIdxStart = 0 ; int pathIdxEnd = pathDirs . length - 1 ; / / Match all elements up to the first * * while ( pattIdxStart < = pattIdxEnd & & pathIdxStart < = pathIdxEnd ) { String patDir = pattDirs [ pattIdxStart ] ; if ( " * * " . equals ( patDir ) ) { break ; } if ( ! matchStrings ( patDir , pathDirs [ pathIdxStart ] ) ) { return false ; } pattIdxStart + + ; pathIdxStart + + ; } if ( pathIdxStart > pathIdxEnd ) { / / Path is exhausted , only match if rest of pattern is * or * * 's if ( pattIdxStart > pattIdxEnd ) { return ( pattern . endsWith ( this . pathSeparator ) ? path . endsWith ( this . pathSeparator ) : ! path . endsWith ( this . pathSeparator ) ) ; } if ( ! fullMatch ) { return true ; } if ( pattIdxStart = = pattIdxEnd & & pattDirs [ pattIdxStart ] . equals ( " * " ) & & path . endsWith ( this . pathSeparator ) ) { return true ; } for ( int i = pattIdxStart ; i < = pattIdxEnd ; i + + ) { if ( ! pattDirs [ i ] . equals ( " * * " ) ) { return false ; } } return true ; } else if ( pattIdxStart > pattIdxEnd ) { / / String not exhausted , but pattern is . Failure . return false ; } else if ( ! fullMatch & & " * * " . equals ( pattDirs [ pattIdxStart ] ) ) { / / Path start definitely matches due to " * * " part in pattern . return true ; } / / up to last ' * * ' while ( pattIdxStart < = pattIdxEnd & & pathIdxStart < = pathIdxEnd ) { String patDir = pattDirs [ pattIdxEnd ] ; if ( patDir . equals ( " * * " ) ) { break ; } if ( ! matchStrings ( patDir , pathDirs [ pathIdxEnd ] ) ) { return false ; } pattIdxEnd - - ; pathIdxEnd - - ; } if ( pathIdxStart > pathIdxEnd ) { / / String is exhausted for ( int i = pattIdxStart ; i < = pattIdxEnd ; i + + ) { if ( ! pattDirs [ i ] . equals ( " * * " ) ) { return false ; } } return true ; } while ( pattIdxStart ! = pattIdxEnd & & pathIdxStart < = pathIdxEnd ) { int patIdxTmp = - 1 ; for ( int i = pattIdxStart + 1 ; i < = pattIdxEnd ; i + + ) { if ( pattDirs [ i ] . equals ( " * * " ) ) { patIdxTmp = i ; break ; } } if ( patIdxTmp = = pattIdxStart + 1 ) { / / ' * * / * * ' situation , so skip one pattIdxStart + + ; continue ; } / / Find the pattern between padIdxStart & padIdxTmp in str between / / strIdxStart & strIdxEnd int patLength = ( patIdxTmp - pattIdxStart - 1 ) ; int strLength = ( pathIdxEnd - pathIdxStart + 1 ) ; int foundIdx = - 1 ; strLoop : for ( int i = 0 ; i < = strLength - patLength ; i + + ) { for ( int j = 0 ; j < patLength ; j + + ) { String subPat = ( String ) pattDirs [ pattIdxStart + j + 1 ] ; String subStr = ( String ) pathDirs [ pathIdxStart + i + j ] ; if ( ! matchStrings ( subPat , subStr ) ) { continue strLoop ; } } foundIdx = pathIdxStart + i ; break ; } if ( foundIdx = = - 1 ) { return false ; } pattIdxStart = patIdxTmp ; pathIdxStart = foundIdx + patLength ; } for ( int i = pattIdxStart ; i < = pattIdxEnd ; i + + ) { if ( ! pattDirs [ i ] . equals ( " * * " ) ) { return false ; } } return true ; }
void test4 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . isPattern ( " * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPattern ( String path ) { return ( path . indexOf ( ' * ' ) ! = - 1 | | path . indexOf ( ' ? ' ) ! = - 1 ) ; }
void test5 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . isPattern ( " ! STq ? pMwJ : wgeJg" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPattern ( String path ) { return ( path . indexOf ( ' * ' ) ! = - 1 | | path . indexOf ( ' ? ' ) ! = - 1 ) ; }
void test6 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . isPattern ( "$k%" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPattern ( String path ) { return ( path . indexOf ( ' * ' ) ! = - 1 | | path . indexOf ( ' ? ' ) ! = - 1 ) ; }
void test7 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . doMatch ( " * * " , "" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean doMatch ( String pattern , String path , boolean fullMatch ) { if ( path . startsWith ( this . pathSeparator ) ! = pattern . startsWith ( this . pathSeparator ) ) { return false ; } String [ ] pattDirs = StringUtils . tokenizeToStringArray ( pattern , this . pathSeparator ) ; String [ ] pathDirs = StringUtils . tokenizeToStringArray ( path , this . pathSeparator ) ; int pattIdxStart = 0 ; int pattIdxEnd = pattDirs . length - 1 ; int pathIdxStart = 0 ; int pathIdxEnd = pathDirs . length - 1 ; / / Match all elements up to the first * * while ( pattIdxStart < = pattIdxEnd & & pathIdxStart < = pathIdxEnd ) { String patDir = pattDirs [ pattIdxStart ] ; if ( " * * " . equals ( patDir ) ) { break ; } if ( ! matchStrings ( patDir , pathDirs [ pathIdxStart ] ) ) { return false ; } pattIdxStart + + ; pathIdxStart + + ; } if ( pathIdxStart > pathIdxEnd ) { / / Path is exhausted , only match if rest of pattern is * or * * 's if ( pattIdxStart > pattIdxEnd ) { return ( pattern . endsWith ( this . pathSeparator ) ? path . endsWith ( this . pathSeparator ) : ! path . endsWith ( this . pathSeparator ) ) ; } if ( ! fullMatch ) { return true ; } if ( pattIdxStart = = pattIdxEnd & & pattDirs [ pattIdxStart ] . equals ( " * " ) & & path . endsWith ( this . pathSeparator ) ) { return true ; } for ( int i = pattIdxStart ; i < = pattIdxEnd ; i + + ) { if ( ! pattDirs [ i ] . equals ( " * * " ) ) { return false ; } } return true ; } else if ( pattIdxStart > pattIdxEnd ) { / / String not exhausted , but pattern is . Failure . return false ; } else if ( ! fullMatch & & " * * " . equals ( pattDirs [ pattIdxStart ] ) ) { / / Path start definitely matches due to " * * " part in pattern . return true ; } / / up to last ' * * ' while ( pattIdxStart < = pattIdxEnd & & pathIdxStart < = pathIdxEnd ) { String patDir = pattDirs [ pattIdxEnd ] ; if ( patDir . equals ( " * * " ) ) { break ; } if ( ! matchStrings ( patDir , pathDirs [ pathIdxEnd ] ) ) { return false ; } pattIdxEnd - - ; pathIdxEnd - - ; } if ( pathIdxStart > pathIdxEnd ) { / / String is exhausted for ( int i = pattIdxStart ; i < = pattIdxEnd ; i + + ) { if ( ! pattDirs [ i ] . equals ( " * * " ) ) { return false ; } } return true ; } while ( pattIdxStart ! = pattIdxEnd & & pathIdxStart < = pathIdxEnd ) { int patIdxTmp = - 1 ; for ( int i = pattIdxStart + 1 ; i < = pattIdxEnd ; i + + ) { if ( pattDirs [ i ] . equals ( " * * " ) ) { patIdxTmp = i ; break ; } } if ( patIdxTmp = = pattIdxStart + 1 ) { / / ' * * / * * ' situation , so skip one pattIdxStart + + ; continue ; } / / Find the pattern between padIdxStart & padIdxTmp in str between / / strIdxStart & strIdxEnd int patLength = ( patIdxTmp - pattIdxStart - 1 ) ; int strLength = ( pathIdxEnd - pathIdxStart + 1 ) ; int foundIdx = - 1 ; strLoop : for ( int i = 0 ; i < = strLength - patLength ; i + + ) { for ( int j = 0 ; j < patLength ; j + + ) { String subPat = ( String ) pattDirs [ pattIdxStart + j + 1 ] ; String subStr = ( String ) pathDirs [ pathIdxStart + i + j ] ; if ( ! matchStrings ( subPat , subStr ) ) { continue strLoop ; } } foundIdx = pathIdxStart + i ; break ; } if ( foundIdx = = - 1 ) { return false ; } pattIdxStart = patIdxTmp ; pathIdxStart = foundIdx + patLength ; } for ( int i = pattIdxStart ; i < = pattIdxEnd ; i + + ) { if ( ! pattDirs [ i ] . equals ( " * * " ) ) { return false ; } } return true ; }
void test8 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . match ( " * * / * * " , " * * / * * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( String pattern , String path ) { return doMatch ( pattern , path , true ) ; }
void test9 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . match ( " * : > Y * < ot : F ( T$K" , "RK#G ! HKI } : Oj" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( String pattern , String path ) { return doMatch ( pattern , path , true ) ; }
void test10 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . matches ( " / '~p21^ > s * zqriyr o^ / " , " / '~p21^ > s * zqriyr o^ / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( Method method , Class targetClass ) { return ( ( method . getAnnotation ( RequiresPermissions . class ) ! = null ) | | ( method . getAnnotation ( RequiresRoles . class ) ! = null ) | | ( method . getAnnotation ( RequiresUser . class ) ! = null ) | | ( method . getAnnotation ( RequiresGuest . class ) ! = null ) | | ( method . getAnnotation ( RequiresAuthentication . class ) ! = null ) ) ; }
void test11 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . matches ( " / * * ? eVbTw ( he\"" , " / * * ? eVbTw ( he\"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( Method method , Class targetClass ) { return ( ( method . getAnnotation ( RequiresPermissions . class ) ! = null ) | | ( method . getAnnotation ( RequiresRoles . class ) ! = null ) | | ( method . getAnnotation ( RequiresUser . class ) ! = null ) | | ( method . getAnnotation ( RequiresGuest . class ) ! = null ) | | ( method . getAnnotation ( RequiresAuthentication . class ) ! = null ) ) ; }
void test12 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . doMatch ( "'~p21^ > s * zqriyr o^" , "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean doMatch ( String pattern , String path , boolean fullMatch ) { if ( path . startsWith ( this . pathSeparator ) ! = pattern . startsWith ( this . pathSeparator ) ) { return false ; } String [ ] pattDirs = StringUtils . tokenizeToStringArray ( pattern , this . pathSeparator ) ; String [ ] pathDirs = StringUtils . tokenizeToStringArray ( path , this . pathSeparator ) ; int pattIdxStart = 0 ; int pattIdxEnd = pattDirs . length - 1 ; int pathIdxStart = 0 ; int pathIdxEnd = pathDirs . length - 1 ; / / Match all elements up to the first * * while ( pattIdxStart < = pattIdxEnd & & pathIdxStart < = pathIdxEnd ) { String patDir = pattDirs [ pattIdxStart ] ; if ( " * * " . equals ( patDir ) ) { break ; } if ( ! matchStrings ( patDir , pathDirs [ pathIdxStart ] ) ) { return false ; } pattIdxStart + + ; pathIdxStart + + ; } if ( pathIdxStart > pathIdxEnd ) { / / Path is exhausted , only match if rest of pattern is * or * * 's if ( pattIdxStart > pattIdxEnd ) { return ( pattern . endsWith ( this . pathSeparator ) ? path . endsWith ( this . pathSeparator ) : ! path . endsWith ( this . pathSeparator ) ) ; } if ( ! fullMatch ) { return true ; } if ( pattIdxStart = = pattIdxEnd & & pattDirs [ pattIdxStart ] . equals ( " * " ) & & path . endsWith ( this . pathSeparator ) ) { return true ; } for ( int i = pattIdxStart ; i < = pattIdxEnd ; i + + ) { if ( ! pattDirs [ i ] . equals ( " * * " ) ) { return false ; } } return true ; } else if ( pattIdxStart > pattIdxEnd ) { / / String not exhausted , but pattern is . Failure . return false ; } else if ( ! fullMatch & & " * * " . equals ( pattDirs [ pattIdxStart ] ) ) { / / Path start definitely matches due to " * * " part in pattern . return true ; } / / up to last ' * * ' while ( pattIdxStart < = pattIdxEnd & & pathIdxStart < = pathIdxEnd ) { String patDir = pattDirs [ pattIdxEnd ] ; if ( patDir . equals ( " * * " ) ) { break ; } if ( ! matchStrings ( patDir , pathDirs [ pathIdxEnd ] ) ) { return false ; } pattIdxEnd - - ; pathIdxEnd - - ; } if ( pathIdxStart > pathIdxEnd ) { / / String is exhausted for ( int i = pattIdxStart ; i < = pattIdxEnd ; i + + ) { if ( ! pattDirs [ i ] . equals ( " * * " ) ) { return false ; } } return true ; } while ( pattIdxStart ! = pattIdxEnd & & pathIdxStart < = pathIdxEnd ) { int patIdxTmp = - 1 ; for ( int i = pattIdxStart + 1 ; i < = pattIdxEnd ; i + + ) { if ( pattDirs [ i ] . equals ( " * * " ) ) { patIdxTmp = i ; break ; } } if ( patIdxTmp = = pattIdxStart + 1 ) { / / ' * * / * * ' situation , so skip one pattIdxStart + + ; continue ; } / / Find the pattern between padIdxStart & padIdxTmp in str between / / strIdxStart & strIdxEnd int patLength = ( patIdxTmp - pattIdxStart - 1 ) ; int strLength = ( pathIdxEnd - pathIdxStart + 1 ) ; int foundIdx = - 1 ; strLoop : for ( int i = 0 ; i < = strLength - patLength ; i + + ) { for ( int j = 0 ; j < patLength ; j + + ) { String subPat = ( String ) pattDirs [ pattIdxStart + j + 1 ] ; String subStr = ( String ) pathDirs [ pathIdxStart + i + j ] ; if ( ! matchStrings ( subPat , subStr ) ) { continue strLoop ; } } foundIdx = pathIdxStart + i ; break ; } if ( foundIdx = = - 1 ) { return false ; } pattIdxStart = patIdxTmp ; pathIdxStart = foundIdx + patLength ; } for ( int i = pattIdxStart ; i < = pattIdxEnd ; i + + ) { if ( ! pattDirs [ i ] . equals ( " * * " ) ) { return false ; } } return true ; }
void test13 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . matches ( "@ t ] W . * / jI ( . kA < " , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( Method method , Class targetClass ) { return ( ( method . getAnnotation ( RequiresPermissions . class ) ! = null ) | | ( method . getAnnotation ( RequiresRoles . class ) ! = null ) | | ( method . getAnnotation ( RequiresUser . class ) ! = null ) | | ( method . getAnnotation ( RequiresGuest . class ) ! = null ) | | ( method . getAnnotation ( RequiresAuthentication . class ) ! = null ) ) ; }
void test14 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . match ( " * " , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( String pattern , String path ) { return doMatch ( pattern , path , true ) ; }
void test15 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; antPathMatcher0 . setPathSeparator ( "" ) ; boolean boolean0 = antPathMatcher0 . match ( " * " , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( String pattern , String path ) { return doMatch ( pattern , path , true ) ; }
void test16 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . matchStart ( " * * / * " , " * * / * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchStart ( String pattern , String path ) { return doMatch ( pattern , path , false ) ; }
void test17 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . match ( " * * / * " , "$k%" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( String pattern , String path ) { return doMatch ( pattern , path , true ) ; }
void test18 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . doMatch ( " / / * * / ; * * " , " / R = u3v & 'hhdC@" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean doMatch ( String pattern , String path , boolean fullMatch ) { if ( path . startsWith ( this . pathSeparator ) ! = pattern . startsWith ( this . pathSeparator ) ) { return false ; } String [ ] pattDirs = StringUtils . tokenizeToStringArray ( pattern , this . pathSeparator ) ; String [ ] pathDirs = StringUtils . tokenizeToStringArray ( path , this . pathSeparator ) ; int pattIdxStart = 0 ; int pattIdxEnd = pattDirs . length - 1 ; int pathIdxStart = 0 ; int pathIdxEnd = pathDirs . length - 1 ; / / Match all elements up to the first * * while ( pattIdxStart < = pattIdxEnd & & pathIdxStart < = pathIdxEnd ) { String patDir = pattDirs [ pattIdxStart ] ; if ( " * * " . equals ( patDir ) ) { break ; } if ( ! matchStrings ( patDir , pathDirs [ pathIdxStart ] ) ) { return false ; } pattIdxStart + + ; pathIdxStart + + ; } if ( pathIdxStart > pathIdxEnd ) { / / Path is exhausted , only match if rest of pattern is * or * * 's if ( pattIdxStart > pattIdxEnd ) { return ( pattern . endsWith ( this . pathSeparator ) ? path . endsWith ( this . pathSeparator ) : ! path . endsWith ( this . pathSeparator ) ) ; } if ( ! fullMatch ) { return true ; } if ( pattIdxStart = = pattIdxEnd & & pattDirs [ pattIdxStart ] . equals ( " * " ) & & path . endsWith ( this . pathSeparator ) ) { return true ; } for ( int i = pattIdxStart ; i < = pattIdxEnd ; i + + ) { if ( ! pattDirs [ i ] . equals ( " * * " ) ) { return false ; } } return true ; } else if ( pattIdxStart > pattIdxEnd ) { / / String not exhausted , but pattern is . Failure . return false ; } else if ( ! fullMatch & & " * * " . equals ( pattDirs [ pattIdxStart ] ) ) { / / Path start definitely matches due to " * * " part in pattern . return true ; } / / up to last ' * * ' while ( pattIdxStart < = pattIdxEnd & & pathIdxStart < = pathIdxEnd ) { String patDir = pattDirs [ pattIdxEnd ] ; if ( patDir . equals ( " * * " ) ) { break ; } if ( ! matchStrings ( patDir , pathDirs [ pathIdxEnd ] ) ) { return false ; } pattIdxEnd - - ; pathIdxEnd - - ; } if ( pathIdxStart > pathIdxEnd ) { / / String is exhausted for ( int i = pattIdxStart ; i < = pattIdxEnd ; i + + ) { if ( ! pattDirs [ i ] . equals ( " * * " ) ) { return false ; } } return true ; } while ( pattIdxStart ! = pattIdxEnd & & pathIdxStart < = pathIdxEnd ) { int patIdxTmp = - 1 ; for ( int i = pattIdxStart + 1 ; i < = pattIdxEnd ; i + + ) { if ( pattDirs [ i ] . equals ( " * * " ) ) { patIdxTmp = i ; break ; } } if ( patIdxTmp = = pattIdxStart + 1 ) { / / ' * * / * * ' situation , so skip one pattIdxStart + + ; continue ; } / / Find the pattern between padIdxStart & padIdxTmp in str between / / strIdxStart & strIdxEnd int patLength = ( patIdxTmp - pattIdxStart - 1 ) ; int strLength = ( pathIdxEnd - pathIdxStart + 1 ) ; int foundIdx = - 1 ; strLoop : for ( int i = 0 ; i < = strLength - patLength ; i + + ) { for ( int j = 0 ; j < patLength ; j + + ) { String subPat = ( String ) pattDirs [ pattIdxStart + j + 1 ] ; String subStr = ( String ) pathDirs [ pathIdxStart + i + j ] ; if ( ! matchStrings ( subPat , subStr ) ) { continue strLoop ; } } foundIdx = pathIdxStart + i ; break ; } if ( foundIdx = = - 1 ) { return false ; } pattIdxStart = patIdxTmp ; pathIdxStart = foundIdx + patLength ; } for ( int i = pattIdxStart ; i < = pattIdxEnd ; i + + ) { if ( ! pattDirs [ i ] . equals ( " * * " ) ) { return false ; } } return true ; }
void test19 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . matches ( " / * * / * f * / * * " , " / * * / * f * / * * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( Method method , Class targetClass ) { return ( ( method . getAnnotation ( RequiresPermissions . class ) ! = null ) | | ( method . getAnnotation ( RequiresRoles . class ) ! = null ) | | ( method . getAnnotation ( RequiresUser . class ) ! = null ) | | ( method . getAnnotation ( RequiresGuest . class ) ! = null ) | | ( method . getAnnotation ( RequiresAuthentication . class ) ! = null ) ) ; }
void test20 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . matches ( " / * * / * f * / * * " , " / '~p21^ > s * zqriyr o^ / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( Method method , Class targetClass ) { return ( ( method . getAnnotation ( RequiresPermissions . class ) ! = null ) | | ( method . getAnnotation ( RequiresRoles . class ) ! = null ) | | ( method . getAnnotation ( RequiresUser . class ) ! = null ) | | ( method . getAnnotation ( RequiresGuest . class ) ! = null ) | | ( method . getAnnotation ( RequiresAuthentication . class ) ! = null ) ) ; }
void test21 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . matchStart ( "h" , " = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchStart ( String pattern , String path ) { return doMatch ( pattern , path , false ) ; }
void test22 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . matchStart ( "F" , " | * AF" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchStart ( String pattern , String path ) { return doMatch ( pattern , path , false ) ; }
void test23 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . matches ( " | $d > HqMIb2 / < a / J ? I" , " | $d > HqMIb2 / < a / J ? I" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( Method method , Class targetClass ) { return ( ( method . getAnnotation ( RequiresPermissions . class ) ! = null ) | | ( method . getAnnotation ( RequiresRoles . class ) ! = null ) | | ( method . getAnnotation ( RequiresUser . class ) ! = null ) | | ( method . getAnnotation ( RequiresGuest . class ) ! = null ) | | ( method . getAnnotation ( RequiresAuthentication . class ) ! = null ) ) ; }
void test24 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . matchStart ( "8 [ fOy * ue ( 0Np^d ! r" , "8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchStart ( String pattern , String path ) { return doMatch ( pattern , path , false ) ; }
void test25 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . match ( "Z ] ^d . ? * } 9tS@T { Z ] ^d . ? * 9tS@T { " , "Z ] ^d . ? * } 9tS@T { Z ] ^d . ? * 9tS@T { " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( String pattern , String path ) { return doMatch ( pattern , path , true ) ; }
void test26 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . match ( " | * AF" , " | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( String pattern , String path ) { return doMatch ( pattern , path , true ) ; }
void test27 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; boolean boolean0 = antPathMatcher0 . matchStart ( " * 9 < " , " < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchStart ( String pattern , String path ) { return doMatch ( pattern , path , false ) ; }
void test28 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; String string0 = antPathMatcher0 . extractPathWithinPattern ( "'~p21^ > s * zqriyr o^" , "'~p21^ > s * zqriyr o^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String extractPathWithinPattern ( String pattern , String path ) { String [ ] patternParts = StringUtils . tokenizeToStringArray ( pattern , this . pathSeparator ) ; String [ ] pathParts = StringUtils . tokenizeToStringArray ( path , this . pathSeparator ) ; StringBuffer buffer = new StringBuffer ( ) ; / / Add any path parts that have a wildcarded pattern part . int puts = 0 ; for ( int i = 0 ; i < patternParts . length ; i + + ) { String patternPart = patternParts [ i ] ; if ( ( patternPart . indexOf ( ' * ' ) > - 1 | | patternPart . indexOf ( ' ? ' ) > - 1 ) & & pathParts . length > = i + 1 ) { if ( puts > 0 | | ( i = = 0 & & ! pattern . startsWith ( this . pathSeparator ) ) ) { buffer . append ( this . pathSeparator ) ; } buffer . append ( pathParts [ i ] ) ; puts + + ; } } / / Append any trailing path parts . for ( int i = patternParts . length ; i < pathParts . length ; i + + ) { if ( puts > 0 | | i > 0 ) { buffer . append ( this . pathSeparator ) ; } buffer . append ( pathParts [ i ] ) ; } return buffer . toString ( ) ; }
void test29 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; String string0 = antPathMatcher0 . extractPathWithinPattern ( "@ t ] W . * / jI ( . kA < " , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String extractPathWithinPattern ( String pattern , String path ) { String [ ] patternParts = StringUtils . tokenizeToStringArray ( pattern , this . pathSeparator ) ; String [ ] pathParts = StringUtils . tokenizeToStringArray ( path , this . pathSeparator ) ; StringBuffer buffer = new StringBuffer ( ) ; / / Add any path parts that have a wildcarded pattern part . int puts = 0 ; for ( int i = 0 ; i < patternParts . length ; i + + ) { String patternPart = patternParts [ i ] ; if ( ( patternPart . indexOf ( ' * ' ) > - 1 | | patternPart . indexOf ( ' ? ' ) > - 1 ) & & pathParts . length > = i + 1 ) { if ( puts > 0 | | ( i = = 0 & & ! pattern . startsWith ( this . pathSeparator ) ) ) { buffer . append ( this . pathSeparator ) ; } buffer . append ( pathParts [ i ] ) ; puts + + ; } } / / Append any trailing path parts . for ( int i = patternParts . length ; i < pathParts . length ; i + + ) { if ( puts > 0 | | i > 0 ) { buffer . append ( this . pathSeparator ) ; } buffer . append ( pathParts [ i ] ) ; } return buffer . toString ( ) ; }
void test30 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; String string0 = antPathMatcher0 . extractPathWithinPattern ( " | $d > HqMIb2 / < a / J ? I" , " | $d > HqMIb2 / < a / J ? I" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String extractPathWithinPattern ( String pattern , String path ) { String [ ] patternParts = StringUtils . tokenizeToStringArray ( pattern , this . pathSeparator ) ; String [ ] pathParts = StringUtils . tokenizeToStringArray ( path , this . pathSeparator ) ; StringBuffer buffer = new StringBuffer ( ) ; / / Add any path parts that have a wildcarded pattern part . int puts = 0 ; for ( int i = 0 ; i < patternParts . length ; i + + ) { String patternPart = patternParts [ i ] ; if ( ( patternPart . indexOf ( ' * ' ) > - 1 | | patternPart . indexOf ( ' ? ' ) > - 1 ) & & pathParts . length > = i + 1 ) { if ( puts > 0 | | ( i = = 0 & & ! pattern . startsWith ( this . pathSeparator ) ) ) { buffer . append ( this . pathSeparator ) ; } buffer . append ( pathParts [ i ] ) ; puts + + ; } } / / Append any trailing path parts . for ( int i = patternParts . length ; i < pathParts . length ; i + + ) { if ( puts > 0 | | i > 0 ) { buffer . append ( this . pathSeparator ) ; } buffer . append ( pathParts [ i ] ) ; } return buffer . toString ( ) ; }
void test31 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; String string0 = antPathMatcher0 . extractPathWithinPattern ( " / * * / * * " , " / * * / * * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String extractPathWithinPattern ( String pattern , String path ) { String [ ] patternParts = StringUtils . tokenizeToStringArray ( pattern , this . pathSeparator ) ; String [ ] pathParts = StringUtils . tokenizeToStringArray ( path , this . pathSeparator ) ; StringBuffer buffer = new StringBuffer ( ) ; / / Add any path parts that have a wildcarded pattern part . int puts = 0 ; for ( int i = 0 ; i < patternParts . length ; i + + ) { String patternPart = patternParts [ i ] ; if ( ( patternPart . indexOf ( ' * ' ) > - 1 | | patternPart . indexOf ( ' ? ' ) > - 1 ) & & pathParts . length > = i + 1 ) { if ( puts > 0 | | ( i = = 0 & & ! pattern . startsWith ( this . pathSeparator ) ) ) { buffer . append ( this . pathSeparator ) ; } buffer . append ( pathParts [ i ] ) ; puts + + ; } } / / Append any trailing path parts . for ( int i = patternParts . length ; i < pathParts . length ; i + + ) { if ( puts > 0 | | i > 0 ) { buffer . append ( this . pathSeparator ) ; } buffer . append ( pathParts [ i ] ) ; } return buffer . toString ( ) ; }
void test32 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; String string0 = antPathMatcher0 . extractPathWithinPattern ( " / * * ? eVbTw ( he\"" , "vGrO4 ? / hp@RHB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String extractPathWithinPattern ( String pattern , String path ) { String [ ] patternParts = StringUtils . tokenizeToStringArray ( pattern , this . pathSeparator ) ; String [ ] pathParts = StringUtils . tokenizeToStringArray ( path , this . pathSeparator ) ; StringBuffer buffer = new StringBuffer ( ) ; / / Add any path parts that have a wildcarded pattern part . int puts = 0 ; for ( int i = 0 ; i < patternParts . length ; i + + ) { String patternPart = patternParts [ i ] ; if ( ( patternPart . indexOf ( ' * ' ) > - 1 | | patternPart . indexOf ( ' ? ' ) > - 1 ) & & pathParts . length > = i + 1 ) { if ( puts > 0 | | ( i = = 0 & & ! pattern . startsWith ( this . pathSeparator ) ) ) { buffer . append ( this . pathSeparator ) ; } buffer . append ( pathParts [ i ] ) ; puts + + ; } } / / Append any trailing path parts . for ( int i = patternParts . length ; i < pathParts . length ; i + + ) { if ( puts > 0 | | i > 0 ) { buffer . append ( this . pathSeparator ) ; } buffer . append ( pathParts [ i ] ) ; } return buffer . toString ( ) ; }
void test33 ( ) throws Throwable { AntPathMatcher antPathMatcher0 = new AntPathMatcher ( ) ; antPathMatcher0 . setPathSeparator ( "U } < I - 13OhGL + IG > + " ) ; String string0 = antPathMatcher0 . extractPathWithinPattern ( "" , "r5^ > vN = m3 - n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String extractPathWithinPattern ( String pattern , String path ) { String [ ] patternParts = StringUtils . tokenizeToStringArray ( pattern , this . pathSeparator ) ; String [ ] pathParts = StringUtils . tokenizeToStringArray ( path , this . pathSeparator ) ; StringBuffer buffer = new StringBuffer ( ) ; / / Add any path parts that have a wildcarded pattern part . int puts = 0 ; for ( int i = 0 ; i < patternParts . length ; i + + ) { String patternPart = patternParts [ i ] ; if ( ( patternPart . indexOf ( ' * ' ) > - 1 | | patternPart . indexOf ( ' ? ' ) > - 1 ) & & pathParts . length > = i + 1 ) { if ( puts > 0 | | ( i = = 0 & & ! pattern . startsWith ( this . pathSeparator ) ) ) { buffer . append ( this . pathSeparator ) ; } buffer . append ( pathParts [ i ] ) ; puts + + ; } } / / Append any trailing path parts . for ( int i = patternParts . length ; i < pathParts . length ; i + + ) { if ( puts > 0 | | i > 0 ) { buffer . append ( this . pathSeparator ) ; } buffer . append ( pathParts [ i ] ) ; } return buffer . toString ( ) ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . split ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] split ( String line ) { return split ( line , DEFAULT_DELIMITER_CHAR ) ; }
void test1 ( ) throws Throwable { StringUtils stringUtils0 = new StringUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . tokenizeToStringArray ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] tokenizeToStringArray ( String str , String delimiters ) { return tokenizeToStringArray ( str , delimiters , true , true ) ; }
void test3 ( ) throws Throwable { boolean boolean0 = StringUtils . hasText ( " " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasText ( String str ) { if ( ! hasLength ( str ) ) { return false ; } int strLen = str . length ( ) ; for ( int i = 0 ; i < strLen ; i + + ) { if ( ! Character . isWhitespace ( str . charAt ( i ) ) ) { return true ; } } return false ; }
void test4 ( ) throws Throwable { boolean boolean0 = StringUtils . hasText ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasText ( String str ) { if ( ! hasLength ( str ) ) { return false ; } int strLen = str . length ( ) ; for ( int i = 0 ; i < strLen ; i + + ) { if ( ! Character . isWhitespace ( str . charAt ( i ) ) ) { return true ; } } return false ; }
void test5 ( ) throws Throwable { boolean boolean0 = StringUtils . hasText ( " = 1iL4BmN > N < m + & [ " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasText ( String str ) { if ( ! hasLength ( str ) ) { return false ; } int strLen = str . length ( ) ; for ( int i = 0 ; i < strLen ; i + + ) { if ( ! Character . isWhitespace ( str . charAt ( i ) ) ) { return true ; } } return false ; }
void test6 ( ) throws Throwable { boolean boolean0 = StringUtils . hasLength ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasLength ( String str ) { return ( str ! = null & & str . length ( ) > 0 ) ; }
void test7 ( ) throws Throwable { boolean boolean0 = StringUtils . startsWithIgnoreCase ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean startsWithIgnoreCase ( String str , String prefix ) { if ( str = = null | | prefix = = null ) { return false ; } if ( str . startsWith ( prefix ) ) { return true ; } if ( str . length ( ) < prefix . length ( ) ) { return false ; } String lcStr = str . substring ( 0 , prefix . length ( ) ) . toLowerCase ( ) ; String lcPrefix = prefix . toLowerCase ( ) ; return lcStr . equals ( lcPrefix ) ; }
void test8 ( ) throws Throwable { boolean boolean0 = StringUtils . startsWithIgnoreCase ( "WYJk@ + \"6 ? c , < @aoZ" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean startsWithIgnoreCase ( String str , String prefix ) { if ( str = = null | | prefix = = null ) { return false ; } if ( str . startsWith ( prefix ) ) { return true ; } if ( str . length ( ) < prefix . length ( ) ) { return false ; } String lcStr = str . substring ( 0 , prefix . length ( ) ) . toLowerCase ( ) ; String lcPrefix = prefix . toLowerCase ( ) ; return lcStr . equals ( lcPrefix ) ; }
void test9 ( ) throws Throwable { boolean boolean0 = StringUtils . startsWithIgnoreCase ( "WC1T@#8ul_PJY \"\"" , "WC1T@#8ul_PJY \"\"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean startsWithIgnoreCase ( String str , String prefix ) { if ( str = = null | | prefix = = null ) { return false ; } if ( str . startsWith ( prefix ) ) { return true ; } if ( str . length ( ) < prefix . length ( ) ) { return false ; } String lcStr = str . substring ( 0 , prefix . length ( ) ) . toLowerCase ( ) ; String lcPrefix = prefix . toLowerCase ( ) ; return lcStr . equals ( lcPrefix ) ; }
void test10 ( ) throws Throwable { boolean boolean0 = StringUtils . startsWithIgnoreCase ( "n1YrjW = E + " , "n7 / # / < GYI . @" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean startsWithIgnoreCase ( String str , String prefix ) { if ( str = = null | | prefix = = null ) { return false ; } if ( str . startsWith ( prefix ) ) { return true ; } if ( str . length ( ) < prefix . length ( ) ) { return false ; } String lcStr = str . substring ( 0 , prefix . length ( ) ) . toLowerCase ( ) ; String lcPrefix = prefix . toLowerCase ( ) ; return lcStr . equals ( lcPrefix ) ; }
void test11 ( ) throws Throwable { boolean boolean0 = StringUtils . startsWithIgnoreCase ( "n7 / # / < GYI . @" , "n1YrjW = E + " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean startsWithIgnoreCase ( String str , String prefix ) { if ( str = = null | | prefix = = null ) { return false ; } if ( str . startsWith ( prefix ) ) { return true ; } if ( str . length ( ) < prefix . length ( ) ) { return false ; } String lcStr = str . substring ( 0 , prefix . length ( ) ) . toLowerCase ( ) ; String lcPrefix = prefix . toLowerCase ( ) ; return lcStr . equals ( lcPrefix ) ; }
void test12 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . splitKeyValue ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] splitKeyValue ( String aLine ) throws ParseException { String line = clean ( aLine ) ; if ( line = = null ) { return null ; } String [ ] split = line . split ( " " , 2 ) ; if ( split . length ! = 2 ) { / / fallback to checking for an equals sign split = line . split ( " = " , 2 ) ; if ( split . length ! = 2 ) { String msg = "Unable to determine Key / Value pair from line [ " + line + " ] . There is no space from " + "which the split location could be determined . " ; throw new ParseException ( msg , 0 ) ; } } split [ 0 ] = clean ( split [ 0 ] ) ; split [ 1 ] = clean ( split [ 1 ] ) ; if ( split [ 1 ] . startsWith ( " = " ) ) { / / they used spaces followed by an equals followed by zero or more spaces to split the key / value pair , so / / remove the equals sign to result in only the key and values in the split [ 1 ] = clean ( split [ 1 ] . substring ( 1 ) ) ; } if ( split [ 0 ] = = null ) { String msg = "No valid key could be found in line [ " + line + " ] to form a key / value pair . " ; throw new ParseException ( msg , 0 ) ; } if ( split [ 1 ] = = null ) { String msg = "No corresponding value could be found in line [ " + line + " ] for key [ " + split [ 0 ] + " ] " ; throw new ParseException ( msg , 0 ) ; } return split ; }
void test13 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . split ( "Unable to determine Key / Value pair from line [ " , ' * ' , 'U' , ' * ' , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] split ( String line ) { return split ( line , DEFAULT_DELIMITER_CHAR ) ; }
void test14 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . tokenizeToStringArray ( "@Gz ( u^2 + xts282" , " . 7f'C , TwM3Z" , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] tokenizeToStringArray ( String str , String delimiters ) { return tokenizeToStringArray ( str , delimiters , true , true ) ; }
void test15 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . tokenizeToStringArray ( "No corresponding value could be found in line [ " , "91aTVmI ) eSd\"piYLn" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] tokenizeToStringArray ( String str , String delimiters ) { return tokenizeToStringArray ( str , delimiters , true , true ) ; }
void test16 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . toStringArray ( ( Collection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] toStringArray ( Collection collection ) { if ( collection = = null ) { return null ; } return ( String [ ] ) collection . toArray ( new String [ collection . size ( ) ] ) ; }
void test18 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . splitKeyValue ( "No corresponding value could be found in line [ " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] splitKeyValue ( String aLine ) throws ParseException { String line = clean ( aLine ) ; if ( line = = null ) { return null ; } String [ ] split = line . split ( " " , 2 ) ; if ( split . length ! = 2 ) { / / fallback to checking for an equals sign split = line . split ( " = " , 2 ) ; if ( split . length ! = 2 ) { String msg = "Unable to determine Key / Value pair from line [ " + line + " ] . There is no space from " + "which the split location could be determined . " ; throw new ParseException ( msg , 0 ) ; } } split [ 0 ] = clean ( split [ 0 ] ) ; split [ 1 ] = clean ( split [ 1 ] ) ; if ( split [ 1 ] . startsWith ( " = " ) ) { / / they used spaces followed by an equals followed by zero or more spaces to split the key / value pair , so / / remove the equals sign to result in only the key and values in the split [ 1 ] = clean ( split [ 1 ] . substring ( 1 ) ) ; } if ( split [ 0 ] = = null ) { String msg = "No valid key could be found in line [ " + line + " ] to form a key / value pair . " ; throw new ParseException ( msg , 0 ) ; } if ( split [ 1 ] = = null ) { String msg = "No corresponding value could be found in line [ " + line + " ] for key [ " + split [ 0 ] + " ] " ; throw new ParseException ( msg , 0 ) ; } return split ; }
void test20 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . splitKeyValue ( "IX = = %r - / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] splitKeyValue ( String aLine ) throws ParseException { String line = clean ( aLine ) ; if ( line = = null ) { return null ; } String [ ] split = line . split ( " " , 2 ) ; if ( split . length ! = 2 ) { / / fallback to checking for an equals sign split = line . split ( " = " , 2 ) ; if ( split . length ! = 2 ) { String msg = "Unable to determine Key / Value pair from line [ " + line + " ] . There is no space from " + "which the split location could be determined . " ; throw new ParseException ( msg , 0 ) ; } } split [ 0 ] = clean ( split [ 0 ] ) ; split [ 1 ] = clean ( split [ 1 ] ) ; if ( split [ 1 ] . startsWith ( " = " ) ) { / / they used spaces followed by an equals followed by zero or more spaces to split the key / value pair , so / / remove the equals sign to result in only the key and values in the split [ 1 ] = clean ( split [ 1 ] . substring ( 1 ) ) ; } if ( split [ 0 ] = = null ) { String msg = "No valid key could be found in line [ " + line + " ] to form a key / value pair . " ; throw new ParseException ( msg , 0 ) ; } if ( split [ 1 ] = = null ) { String msg = "No corresponding value could be found in line [ " + line + " ] for key [ " + split [ 0 ] + " ] " ; throw new ParseException ( msg , 0 ) ; } return split ; }
void test21 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . split ( "@Gz ( u^2 + xts282" , ' + ' , '8' , ' + ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] split ( String line ) { return split ( line , DEFAULT_DELIMITER_CHAR ) ; }
void test22 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . split ( "WC1T@#8ul_PJY \"\"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] split ( String line ) { return split ( line , DEFAULT_DELIMITER_CHAR ) ; }
void test23 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . split ( "No corresponding value could be found in line [ " , 'r' , 'r' , 'N' , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] split ( String line ) { return split ( line , DEFAULT_DELIMITER_CHAR ) ; }
void test24 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . split ( "No corresponding value could be found in line [ " , '9' , '9' , 'r' , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] split ( String line ) { return split ( line , DEFAULT_DELIMITER_CHAR ) ; }
void test25 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . split ( "WYJk@ + \"6 ? c , < @aoZ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] split ( String line ) { return split ( line , DEFAULT_DELIMITER_CHAR ) ; }
void test26 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . split ( "@Gz ( u^2 + xts282" , ' + ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] split ( String line ) { return split ( line , DEFAULT_DELIMITER_CHAR ) ; }
void test27 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . split ( "@Gz ( u^2 + xts282" , ' + ' , '8' , '8' , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] split ( String line ) { return split ( line , DEFAULT_DELIMITER_CHAR ) ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; List < String > list0 = CollectionUtils . asList ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test1 ( ) throws Throwable { CollectionUtils collectionUtils0 = new CollectionUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { Class < ? > class0 = Object . class ; Collection < String > collection0 = CollectionUtils . emptyCollection ( ( Class < String > ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test3 ( ) throws Throwable { Set < String > set0 = CollectionUtils . asSet ( ( String [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; Set < String > set0 = CollectionUtils . asSet ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test5 ( ) throws Throwable { List < Object > list0 = CollectionUtils . asList ( ( Object [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test0 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( "To * T8 | " ) ; HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager ( ) ; HashtableCache hashtableCache0 = ( HashtableCache ) hashtableCacheManager0 . getCache ( "To * T8 | " ) ; simpleAccountRealm0 . setAuthorizationCache ( ( Cache ) hashtableCache0 ) ; boolean boolean0 = simpleAccountRealm0 . accountExists ( "To * T8 | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test3 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; simpleAccountRealm0 . afterAuthorizationCacheSet ( ) ; boolean boolean0 = simpleAccountRealm0 . roleExists ( "Sb" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test4 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( "To * T8 | " ) ; HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager ( ) ; HashtableCache hashtableCache0 = ( HashtableCache ) hashtableCacheManager0 . getCache ( "To * T8 | " ) ; simpleAccountRealm0 . setAuthorizationCache ( ( Cache ) hashtableCache0 ) ; String [ ] stringArray0 = new String [ 23 ] ; simpleAccountRealm0 . addAccount ( "To * T8 | " , "To * T8 | " , stringArray0 ) ; boolean boolean0 = simpleAccountRealm0 . accountExists ( "To * T8 | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test5 ( ) throws Throwable { Set < String > set0 = SimpleAccountRealm . toSet ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set < String > toSet ( String delimited , String delimiter ) { if ( delimited = = null | | delimited . trim ( ) . equals ( "" ) ) { return null ; } Set < String > values = new HashSet < String > ( ) ; String [ ] rolenamesArray = delimited . split ( delimiter ) ; for ( String s : rolenamesArray ) { String trimmed = s . trim ( ) ; if ( trimmed . length ( ) > 0 ) { values . add ( trimmed ) ; } } return values ; }
void test6 ( ) throws Throwable { Set < String > set0 = SimpleAccountRealm . toSet ( " , z * ^r8 | " , " , z * ^r8 | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test7 ( ) throws Throwable { Set < String > set0 = SimpleAccountRealm . toSet ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set < String > toSet ( String delimited , String delimiter ) { if ( delimited = = null | | delimited . trim ( ) . equals ( "" ) ) { return null ; } Set < String > values = new HashSet < String > ( ) ; String [ ] rolenamesArray = delimited . split ( delimiter ) ; for ( String s : rolenamesArray ) { String trimmed = s . trim ( ) ; if ( trimmed . length ( ) > 0 ) { values . add ( trimmed ) ; } } return values ; }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( "To * T8 | " ) ; HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager ( ) ; HashtableCache hashtableCache0 = ( HashtableCache ) hashtableCacheManager0 . getCache ( "To * T8 | " ) ; simpleAccountRealm0 . setAuthorizationCache ( ( Cache ) hashtableCache0 ) ; String [ ] stringArray0 = new String [ 23 ] ; simpleAccountRealm0 . addAccount ( "To * T8 | " , "To * T8 | " , stringArray0 ) ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( "To * T8 | " , "To * T8 | " , ( InetAddress ) inet4Address0 ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = ( SimpleAuthorizingAccount ) simpleAccountRealm0 . getAuthenticationInfo ( ( AuthenticationToken ) usernamePasswordToken0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test0 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( " ] 4 { vO , $h ( NN' | #L%" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermitted ( String p ) { return getSubject ( ) ! = null & & getSubject ( ) . isPermitted ( p ) ; }
void test1 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test3 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( " ] 4 { vO , $h ( NN' | #L%" ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; simpleAccountRealm0 . onLogout ( ( PrincipalCollection ) simplePrincipalCollection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test4 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermitted ( String p ) { return getSubject ( ) ! = null & & getSubject ( ) . isPermitted ( p ) ; }
void test5 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasRole ( PrincipalCollection principals , String roleIdentifier ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasRole ( principals , roleIdentifier ) ; }
void test7 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( " ; t^" ) ; simpleAccountRealm0 . checkPermissions ( ( PrincipalCollection ) null , ( Collection < Permission > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthorizationCacheName ( ) { return authorizationCacheName ; }
void test8 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( "V" ) ; simpleAccountRealm0 . checkRoles ( ( PrincipalCollection ) null , ( Collection < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthorizationCacheName ( ) { return authorizationCacheName ; }
void test9 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void checkPermissions ( PrincipalCollection principals , String . . . permissions ) throws AuthorizationException { ensureRealms ( ) ; getAuthorizer ( ) . checkPermissions ( principals , permissions ) ; }
void test10 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( " ] to Level . " ) ; simpleAccountRealm0 . setAuthorizationCache ( ( Cache ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test11 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test12 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void checkPermissions ( PrincipalCollection principals , String . . . permissions ) throws AuthorizationException { ensureRealms ( ) ; getAuthorizer ( ) . checkPermissions ( principals , permissions ) ; }
void test13 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test14 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void onLogout ( PrincipalCollection subjectPrincipals ) { forgetIdentity ( ) ; }
void test15 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( " ] 4 { vO , $h ( NN' | #L%" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermittedAll ( PrincipalCollection principals , String . . . permissions ) { ensureRealms ( ) ; return getAuthorizer ( ) . isPermittedAll ( principals , permissions ) ; }
void test16 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( " ] 4 { vO , $h ( NN' | #L%" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermittedAll ( PrincipalCollection principals , String . . . permissions ) { ensureRealms ( ) ; return getAuthorizer ( ) . isPermittedAll ( principals , permissions ) ; }
void test17 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void checkPermission ( PrincipalCollection principals , String permission ) throws AuthorizationException { ensureRealms ( ) ; getAuthorizer ( ) . checkPermission ( principals , permission ) ; }
void test18 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( " ] 4 { vO , $h ( NN' | #L%" ) ; LinkedList < Permission > linkedList0 = new LinkedList < Permission > ( ) ; SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo ( ) ; boolean [ ] booleanArray0 = simpleAccountRealm0 . isPermitted ( ( List < Permission > ) linkedList0 , ( AuthorizationInfo ) simpleAuthorizationInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermitted ( String p ) { return getSubject ( ) ! = null & & getSubject ( ) . isPermitted ( p ) ; }
void test19 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test20 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test21 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test22 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( "#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermittedAll ( PrincipalCollection principals , String . . . permissions ) { ensureRealms ( ) ; return getAuthorizer ( ) . isPermittedAll ( principals , permissions ) ; }
void test23 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( " ; t^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermittedAll ( PrincipalCollection principals , String . . . permissions ) { ensureRealms ( ) ; return getAuthorizer ( ) . isPermittedAll ( principals , permissions ) ; }
void test24 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( " ; t^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermittedAll ( PrincipalCollection principals , String . . . permissions ) { ensureRealms ( ) ; return getAuthorizer ( ) . isPermittedAll ( principals , permissions ) ; }
void test25 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( " ; t^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermittedAll ( PrincipalCollection principals , String . . . permissions ) { ensureRealms ( ) ; return getAuthorizer ( ) . isPermittedAll ( principals , permissions ) ; }
void test26 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( " ] 4 { vO , $h ( NN' | #L%" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPermittedAll ( PrincipalCollection principals , String . . . permissions ) { ensureRealms ( ) ; return getAuthorizer ( ) . isPermittedAll ( principals , permissions ) ; }
void test27 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test28 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( "#" ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; simpleAccountRealm0 . checkPermissions ( ( PrincipalCollection ) simplePrincipalCollection0 , ( String [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test29 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( " ; t^" ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) simplePrincipalCollection0 ) ; simpleAccountRealm0 . checkPermissions ( ( Collection < Permission > ) null , ( AuthorizationInfo ) simpleAuthorizingAccount0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthorizationCacheName ( ) { return authorizationCacheName ; }
void test30 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test31 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void checkPermissions ( PrincipalCollection principals , String . . . permissions ) throws AuthorizationException { ensureRealms ( ) ; getAuthorizer ( ) . checkPermissions ( principals , permissions ) ; }
void test32 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( " ; t^" ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) simplePrincipalCollection0 ) ; boolean boolean0 = simpleAccountRealm0 . hasRole ( " ; t^" , ( AuthorizationInfo ) simpleAuthorizingAccount0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasRole ( PrincipalCollection principals , String roleIdentifier ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasRole ( principals , roleIdentifier ) ; }
void test33 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test34 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test35 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test36 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( "V" ) ; boolean [ ] booleanArray0 = simpleAccountRealm0 . hasRoles ( ( PrincipalCollection ) null , ( List < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] hasRoles ( PrincipalCollection principals , List < String > roleIdentifiers ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasRoles ( principals , roleIdentifiers ) ; }
void test37 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test38 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( "" ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; boolean [ ] booleanArray0 = simpleAccountRealm0 . hasRoles ( ( List < String > ) linkedList0 , ( AuthorizationInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] hasRoles ( PrincipalCollection principals , List < String > roleIdentifiers ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasRoles ( principals , roleIdentifiers ) ; }
void test39 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( " ; t^" ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount ( ( PrincipalCollection ) simplePrincipalCollection0 , ( Object ) simplePrincipalCollection0 ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; boolean [ ] booleanArray0 = simpleAccountRealm0 . hasRoles ( ( List < String > ) linkedList0 , ( AuthorizationInfo ) simpleAuthorizingAccount0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] hasRoles ( PrincipalCollection principals , List < String > roleIdentifiers ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasRoles ( principals , roleIdentifiers ) ; }
void test40 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test41 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( "" ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . add ( "" ) ; boolean [ ] booleanArray0 = simpleAccountRealm0 . hasRoles ( ( List < String > ) linkedList0 , ( AuthorizationInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] hasRoles ( PrincipalCollection principals , List < String > roleIdentifiers ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasRoles ( principals , roleIdentifiers ) ; }
void test42 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( "QQ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasAllRoles ( PrincipalCollection principals , Collection < String > roleIdentifiers ) { ensureRealms ( ) ; return getAuthorizer ( ) . hasAllRoles ( principals , roleIdentifiers ) ; }
void test43 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test44 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; SimpleCredentialsMatcher simpleCredentialsMatcher0 = ( SimpleCredentialsMatcher ) simpleAccountRealm0 . getCredentialsMatcher ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; Md5CredentialsMatcher md5CredentialsMatcher0 = new Md5CredentialsMatcher ( ) ; simpleAccountRealm0 . setCredentialsMatcher ( ( CredentialsMatcher ) md5CredentialsMatcher0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; Class < ? extends AuthenticationToken > class0 = UsernamePasswordToken . class ; simpleAccountRealm0 . setAuthenticationTokenClass ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthorizationCacheName ( ) { return authorizationCacheName ; }
void test3 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; char [ ] charArray0 = new char [ 1 ] ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getByName ( ( String ) null ) ; UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken ( ( String ) null , charArray0 , true , ( InetAddress ) inet4Address0 ) ; boolean boolean0 = simpleAccountRealm0 . supports ( ( AuthenticationToken ) usernamePasswordToken0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test4 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( ) ; boolean boolean0 = simpleAccountRealm0 . supports ( ( AuthenticationToken ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( " ( x'tq ) [ pq\" < " ) ; String string0 = simpleAccountRealm0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm ( " ( x'tq ) [ pq\" < " ) ; simpleAccountRealm0 . setCacheManager ( ( CacheManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthorizationCacheName ( ) { return authorizationCacheName ; }
void test0 ( ) throws Throwable { PropertiesRealm propertiesRealm0 = new PropertiesRealm ( ) ; propertiesRealm0 . startReloadThread ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager ( ) ; PropertiesRealm propertiesRealm0 = new PropertiesRealm ( ( CacheManager ) hashtableCacheManager0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager ( ) ; PropertiesRealm propertiesRealm0 = new PropertiesRealm ( ( CacheManager ) hashtableCacheManager0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test4 ( ) throws Throwable { HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager ( ) ; PropertiesRealm propertiesRealm0 = new PropertiesRealm ( ( CacheManager ) hashtableCacheManager0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test5 ( ) throws Throwable { PropertiesRealm propertiesRealm0 = new PropertiesRealm ( ) ; propertiesRealm0 . run ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test6 ( ) throws Throwable { HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager ( ) ; PropertiesRealm propertiesRealm0 = new PropertiesRealm ( ( CacheManager ) hashtableCacheManager0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { TextConfigurationRealm textConfigurationRealm0 = new TextConfigurationRealm ( ) ; HashtableCache hashtableCache0 = new HashtableCache ( "x * F | iQ8e3gRVt , " ) ; textConfigurationRealm0 . setAuthorizationCache ( ( Cache ) hashtableCache0 ) ; textConfigurationRealm0 . setUserDefinitions ( "Could not find value for key " ) ; textConfigurationRealm0 . processDefinitions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { TextConfigurationRealm textConfigurationRealm0 = new TextConfigurationRealm ( ) ; textConfigurationRealm0 . setRoleDefinitions ( "" ) ; textConfigurationRealm0 . processDefinitions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { TextConfigurationRealm textConfigurationRealm0 = new TextConfigurationRealm ( ) ; SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection ( ) ; textConfigurationRealm0 . onLogout ( ( PrincipalCollection ) simplePrincipalCollection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserDefinitions ( ) { return userDefinitions ; }
void test3 ( ) throws Throwable { TextConfigurationRealm textConfigurationRealm0 = new TextConfigurationRealm ( ) ; textConfigurationRealm0 . setRoleDefinitions ( " & 5Br | 7c% , 0Nv - ; gB#t < " ) ; HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager ( ) ; HashtableCache hashtableCache0 = ( HashtableCache ) hashtableCacheManager0 . getCache ( " & 5Br | 7c% , 0Nv - ; gB#t < " ) ; textConfigurationRealm0 . setAuthorizationCache ( ( Cache ) hashtableCache0 ) ; textConfigurationRealm0 . processRoleDefinitions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test4 ( ) throws Throwable { TextConfigurationRealm textConfigurationRealm0 = new TextConfigurationRealm ( ) ; HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager ( ) ; textConfigurationRealm0 . setUserDefinitions ( " & 5Br | 7c% , 0Nv - ; gB#t < " ) ; HashtableCache hashtableCache0 = ( HashtableCache ) hashtableCacheManager0 . getCache ( " & 5Br | 7c% , 0Nv - ; gB#t < " ) ; textConfigurationRealm0 . setAuthorizationCache ( ( Cache ) hashtableCache0 ) ; textConfigurationRealm0 . setAuthorizationCache ( ( Cache ) hashtableCache0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test5 ( ) throws Throwable { Map < String , String > map0 = TextConfigurationRealm . toMap ( ( Collection < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , String > toMap ( Collection < String > keyValuePairs ) throws ParseException { if ( keyValuePairs = = null | | keyValuePairs . isEmpty ( ) ) { return null ; } Map < String , String > pairs = new HashMap < String , String > ( ) ; for ( String pairString : keyValuePairs ) { String [ ] pair = StringUtils . splitKeyValue ( pairString ) ; pairs . put ( pair [ 0 ] . trim ( ) , pair [ 1 ] . trim ( ) ) ; } return pairs ; }
void test2 ( ) throws Throwable { ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm ( ) ; SimpleAuthorizationInfo simpleAuthorizationInfo0 = ( SimpleAuthorizationInfo ) activeDirectoryRealm0 . buildAuthorizationInfo ( ( Set < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AuthorizationInfo buildAuthorizationInfo ( Set < String > roleNames ) { return new SimpleAuthorizationInfo ( roleNames ) ; }
void test4 ( ) throws Throwable { ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; activeDirectoryRealm0 . getRoleNamesForGroups ( ( Collection < String > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test5 ( ) throws Throwable { ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . add ( "$_n" ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; activeDirectoryRealm0 . setGroupRolesMap ( ( Map < String , String > ) hashMap0 ) ; activeDirectoryRealm0 . getRoleNamesForGroups ( ( Collection < String > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test6 ( ) throws Throwable { ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; String string0 = "Zu\\8BK , & Q\\xtqw" ; linkedList0 . add ( string0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; activeDirectoryRealm0 . setGroupRolesMap ( ( Map < String , String > ) hashMap0 ) ; hashMap0 . put ( string0 , string0 ) ; Collection < String > collection0 = activeDirectoryRealm0 . getRoleNamesForGroups ( ( Collection < String > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test2 ( ) throws Throwable { BasicAttribute basicAttribute0 = new BasicAttribute ( "6aqm ] X2q_W9" , "6aqm ] X2q_W9" ) ; Collection < String > collection0 = LdapUtils . getAllAttributeValues ( ( Attribute ) basicAttribute0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test0 ( ) throws Throwable { ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm ( ) ; activeDirectoryRealm0 . setUrl ( "27iu7 / iNdG ; * ^^ ; W ( : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm ( ) ; activeDirectoryRealm0 . setSearchBase ( " > 6 | dAl & + oZ , eoYEz + " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthorizationCacheName ( ) { return authorizationCacheName ; }
void test2 ( ) throws Throwable { ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm ( ) ; activeDirectoryRealm0 . setSystemPassword ( " [ LOO < UP ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthorizationCacheName ( ) { return authorizationCacheName ; }
void test3 ( ) throws Throwable { ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm ( ) ; activeDirectoryRealm0 . setPrincipalSuffix ( "27iu7 / iNdG ; * ^^ ; W ( : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthorizationCacheName ( ) { return authorizationCacheName ; }
void test4 ( ) throws Throwable { ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm ( ) ; activeDirectoryRealm0 . setSystemUsername ( " > 6 | dAl & + oZ , eoYEz + " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthorizationCacheName ( ) { return authorizationCacheName ; }
void test5 ( ) throws Throwable { ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm ( ) ; DefaultLdapContextFactory defaultLdapContextFactory0 = new DefaultLdapContextFactory ( ) ; activeDirectoryRealm0 . setLdapContextFactory ( ( LdapContextFactory ) defaultLdapContextFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthorizationCacheName ( ) { return authorizationCacheName ; }
void test6 ( ) throws Throwable { ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm ( ) ; activeDirectoryRealm0 . afterAuthorizationCacheSet ( ) ; activeDirectoryRealm0 . afterAuthorizationCacheSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { JdbcRealm jdbcRealm0 = new JdbcRealm ( ) ; jdbcRealm0 . setUserRolesQuery ( "\\a5F0hvbh$zklrp : { Z" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { JdbcRealm jdbcRealm0 = new JdbcRealm ( ) ; jdbcRealm0 . setPermissionsLookupEnabled ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { JdbcRealm jdbcRealm0 = new JdbcRealm ( ) ; jdbcRealm0 . setPermissionsQuery ( "\\a5F0hvbh$zklrp : { Z" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test3 ( ) throws Throwable { JdbcRealm jdbcRealm0 = new JdbcRealm ( ) ; char [ ] charArray0 = new char [ 11 ] ; jdbcRealm0 . buildAuthenticationInfo ( "org . apache . common . logging . Log . allowFlawedContext" , charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test4 ( ) throws Throwable { JdbcRealm jdbcRealm0 = new JdbcRealm ( ) ; jdbcDataSource jdbcDataSource0 = new jdbcDataSource ( ) ; jdbcRealm0 . setDataSource ( ( DataSource ) jdbcDataSource0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test5 ( ) throws Throwable { JdbcRealm jdbcRealm0 = new JdbcRealm ( ) ; jdbcRealm0 . setAuthenticationQuery ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test10 ( ) throws Throwable { JdbcRealm jdbcRealm0 = new JdbcRealm ( ) ; LinkedHashSet < String > linkedHashSet0 = new LinkedHashSet < String > ( ) ; jdbcRealm0 . getPermissions ( ( Connection ) null , "" , ( Collection < String > ) linkedHashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { IniConfiguration iniConfiguration0 = new IniConfiguration ( ) ; iniConfiguration0 . init ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { IniConfiguration iniConfiguration0 = new IniConfiguration ( ) ; iniConfiguration0 . init ( ) ; iniConfiguration0 . init ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { IniConfiguration iniConfiguration0 = new IniConfiguration ( ) ; iniConfiguration0 . setConfig ( "" ) ; iniConfiguration0 . init ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test0 ( ) throws Throwable { ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder ( ) ; Map < Object , Object > map0 = reflectionBuilder0 . getObjects ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test3 ( ) throws Throwable { ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder ( ) ; Map < Object , Object > map0 = reflectionBuilder0 . buildObjects ( ( Map < String , String > ) null ) ; reflectionBuilder0 . createNewInstance ( ( Map ) map0 , "net . sf . ehcache . CacheManager" , "net . sf . ehcache . CacheManager" ) ; CacheManager cacheManager0 = ( CacheManager ) reflectionBuilder0 . getReferencedObject ( "net . sf . ehcache . CacheManager" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getReferencedObject ( String id ) { Object o = objects ! = null & & ! objects . isEmpty ( ) ? objects . get ( id ) : null ; if ( o = = null ) { String msg = "The object with id [ " + id + " ] has not yet been defined and therefore cannot be " + "referenced . Please ensure objects are defined in the order in which they should be " + "created and made avaialable for future reference . " ; throw new UnresolveableReferenceException ( msg ) ; } return o ; }
void test4 ( ) throws Throwable { ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; Map < Object , Object > map0 = reflectionBuilder0 . buildObjects ( ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test9 ( ) throws Throwable { ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; hashMap0 . put ( "v#O2N ! eiQxEIp" , "v#O2N ! eiQxEIp" ) ; reflectionBuilder0 . applyGlobalProperty ( ( Map ) hashMap0 , "v#O2N ! eiQxEIp" , "v#O2N ! eiQxEIp" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( byte [ ] bytes ) { return toString ( bytes , PREFERRED_ENCODING ) ; }
void test11 ( ) throws Throwable { HashMap < String , ReflectionBuilder > hashMap0 = new HashMap < String , ReflectionBuilder > ( ) ; ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder ( ( Map ) hashMap0 ) ; hashMap0 . put ( "I" , reflectionBuilder0 ) ; reflectionBuilder0 . applySingleProperty ( ( Map ) hashMap0 , "I" , "I" , "I" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; }
void test13 ( ) throws Throwable { ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder ( ) ; String string0 = "$ ! rWu7Ff - = y\\9 | " ; boolean boolean0 = reflectionBuilder0 . isReference ( string0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReference ( String value ) { return value ! = null & & value . startsWith ( OBJECT_REFERENCE_BEGIN_TOKEN ) ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { IniConfiguration iniConfiguration0 = new IniConfiguration ( ) ; Scanner scanner0 = new Scanner ( "#M\"PL390oh3 ! sqVpS7B" ) ; iniConfiguration0 . load ( scanner0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { IniConfiguration iniConfiguration0 = new IniConfiguration ( ) ; iniConfiguration0 . init ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test5 ( ) throws Throwable { IniConfiguration iniConfiguration0 = new IniConfiguration ( ) ; String string0 = iniConfiguration0 . getConfigUrl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConfigUrl ( ) { return configUrl ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { IniConfiguration iniConfiguration0 = new IniConfiguration ( ) ; byte [ ] byteArray0 = new byte [ 27 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( int ) ( byte ) ( - 118 ) , ( int ) ( byte ) 0 ) ; BufferedInputStream bufferedInputStream0 = new BufferedInputStream ( ( InputStream ) byteArrayInputStream0 ) ; PushbackInputStream pushbackInputStream0 = new PushbackInputStream ( ( InputStream ) bufferedInputStream0 ) ; iniConfiguration0 . load ( ( InputStream ) pushbackInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { IniConfiguration iniConfiguration0 = new IniConfiguration ( ) ; iniConfiguration0 . setConfig ( "" ) ; iniConfiguration0 . init ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object get ( Object key ) throws CacheException ; / * * * Adds a Cache entry . * * @param key the key used to identify the object being stored . * @param value the value to be stored in the cache . * @throws CacheException if there is a problem accessing the underlying cache system * / void put ( Object key , Object value ) throws CacheException ; / * * * Remove the cache entry corresponding to the specified key . * * @param key the key of the entry to be removed . * @throws CacheException if there is a problem accessing the underlying cache system * / void remove ( Object key ) throws CacheException ; / * * * Clear all entries from the cache . * * @throws CacheException if there is a problem accessing the underlying cache system * / void clear ( ) throws CacheException ; / * * * Returns the number of entries in the cache . * * @return the number of entries in the cache . * / int size ( ) ; / * * * Returns a view of all the keys for entries contained in this cache . * * @return a view of all the keys for entries contained in this cache . * / Set keys ( ) ; / * * * Returns a view of all of the values contained in this cache . * * @return a view of all of the values contained in this cache . * / Set values ( ) ; }
