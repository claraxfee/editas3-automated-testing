void test0 ( ) throws Throwable { DateTimeParam dateTimeParam0 = new DateTimeParam ( " . mW - FG } Gktj7" , " . mW - FG } Gktj7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultMilliSeconds ( ) { return defaultMilliSeconds ; }
void test1 ( ) throws Throwable { DateTimeParam dateTimeParam0 = new DateTimeParam ( "AbstractParameter . descTooShort" , "AbstractParameter . descTooShort" , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setAcceptableValues ( Collection vals ) { throw new UnsupportedOperationException ( ) ; }
void test2 ( ) throws Throwable { Date [ ] dateArray0 = new Date [ 1 ] ; Date date0 = new Date ( ) ; dateArray0 [ 0 ] = date0 ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultMilliSeconds ( ) { return defaultMilliSeconds ; }
void test3 ( ) throws Throwable { DateTimeParam dateTimeParam0 = new DateTimeParam ( " . mW - FG } Gktj7" , " . mW - FG } Gktj7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test4 ( ) throws Throwable { String string0 = DateTimeParam . getParseFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getParseFormat ( ) { return dateFmt . toLocalizedPattern ( ) ; }
void test5 ( ) throws Throwable { DateTimeParam dateTimeParam0 = new DateTimeParam ( "Bv < hD5q1iH ! ! | rI - " , "Bv < hD5q1iH ! ! | rI - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addValue ( String value ) throws CmdLineException { if ( values . size ( ) > = 1 & & ! multiValued ) { throw new CmdLineException ( Strings . get ( "AbstractParameter . specifiedMoreThanOnce" , new Object [ ] { tag } ) ) ; } validateValue ( value ) ; values . add ( value ) ; set = true ; }
void test6 ( ) throws Throwable { DateTimeParam dateTimeParam0 = new DateTimeParam ( " ( %d ] B$Vp0Ga" , " ( %d ] B$Vp0Ga" , true , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test7 ( ) throws Throwable { DateTimeParam dateTimeParam0 = new DateTimeParam ( "O05 ] 8`od > GZ6Z_z > 8 ) JC" , "O05 ] 8`od > GZ6Z_z > 8 ) JC" , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setAcceptableValues ( Collection vals ) { throw new UnsupportedOperationException ( ) ; }
void test8 ( ) throws Throwable { DateTimeParam dateTimeParam0 = new DateTimeParam ( "HH : mm [ : ss [ : SSS ] ] " , "HH : mm [ : ss [ : SSS ] ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOptionLabel ( ) { return ( ( optionLabel = = null ) ? "" : optionLabel ) ; }
void test9 ( ) throws Throwable { DateTimeParam dateTimeParam0 = new DateTimeParam ( "HH : mm [ : ss [ : SSS ] ] " , "HH : mm [ : ss [ : SSS ] ] " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test10 ( ) throws Throwable { DateTimeParam dateTimeParam0 = new DateTimeParam ( " ( %d ] B$Vp0Ga" , " ( %d ] B$Vp0Ga" , true , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOptionLabel ( ) { return ( ( optionLabel = = null ) ? "" : optionLabel ) ; }
void test11 ( ) throws Throwable { Date [ ] dateArray0 = new Date [ 1 ] ; Date date0 = new Date ( ) ; dateArray0 [ 0 ] = date0 ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test12 ( ) throws Throwable { DateTimeParam dateTimeParam0 = new DateTimeParam ( "HH : mm [ : ss [ : SSS ] ] " , "HH : mm [ : ss [ : SSS ] ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiValued ( ) { return multiValued ; }
void test13 ( ) throws Throwable { DateTimeParam dateTimeParam0 = new DateTimeParam ( "HH : mm [ : ss [ : SSS ] ] " , "HH : mm [ : ss [ : SSS ] ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test0 ( ) throws Throwable { StringFormatHelper stringFormatHelper0 = StringFormatHelper . getHelper ( ) ; String string0 = stringFormatHelper0 . formatHangingIndent ( ( String ) null , ( - 1346 ) , ( - 1346 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatHangingIndent ( String s , int indent , int lineLen ) { if ( s = = null | | s . length ( ) = = 0 ) { return "" ; } if ( lineLen < = indent ) { throw new IllegalArgumentException ( Strings . get ( "StringFormatHelper . lineLenLessThanIndent" ) ) ; } if ( lineLen < = 0 ) { throw new IllegalArgumentException ( Strings . get ( "StringFormatHelper . lineLenZero" ) ) ; } / / guesstimate required buffer length , leaving enough room for line / / terminators StringBuffer sb = new StringBuffer ( s . length ( ) + ( s . length ( ) / lineLen - indent ) + 20 ) ; String [ ] a = breakString ( s , lineLen ) ; sb . append ( a [ 0 ] ) ; if ( a [ 1 ] ! = null ) { sb . append ( formatBlockedText ( a [ 1 ] , indent , lineLen ) ) ; } return sb . toString ( ) ; }
void test1 ( ) throws Throwable { StringFormatHelper stringFormatHelper0 = StringFormatHelper . getHelper ( ) ; String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "ni" ; stringArray0 [ 2 ] = "tYTaY# . y ( x { 4" ; String string0 = stringFormatHelper0 . formatLabeledList ( stringArray0 , stringArray0 , "ni" , 0 , 1600 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatLabeledList ( String [ ] labels , String [ ] texts , String divider , int maxIndent , int lineLen ) { if ( labels . length ! = texts . length ) { throw new IllegalArgumentException ( Strings . get ( "StringFormatHelper . labelDescriptionError" , new Object [ ] { new Integer ( labels . length ) , new Integer ( texts . length ) } ) ) ; } / / Figure out description indents int indent = 0 ; int dividerlen = divider . length ( ) ; int currlen ; for ( int i = 0 ; i < labels . length ; i + + ) { currlen = labels [ i ] . length ( ) + dividerlen ; if ( currlen > maxIndent ) { continue ; } else if ( currlen > indent ) { indent = currlen ; } } / / All labels + divider > maxIndent ? - use indent of 10 indent = ( indent = = 0 ) ? 10 : indent ; / / will fit 20 80 - char lines without expansion StringBuffer list = new StringBuffer ( 1600 ) ; / / will fit 5 lines per list item without expansion StringBuffer item = new StringBuffer ( 400 ) ; for ( int i = 0 ; i < labels . length ; i + + ) { item . delete ( 0 , item . length ( ) ) ; item . append ( labels [ i ] ) ; int spacefill = indent - divider . length ( ) ; while ( item . length ( ) < spacefill ) { item . append ( ' ' ) ; } item . append ( divider ) ; if ( item . length ( ) > indent ) { item . append ( "\n" ) ; } item . append ( texts [ i ] ) ; list . append ( formatHangingIndent ( item . toString ( ) + "\n" , indent , lineLen ) ) ; } return list . toString ( ) ; }
void test2 ( ) throws Throwable { StringFormatHelper stringFormatHelper0 = StringFormatHelper . getHelper ( ) ; String string0 = stringFormatHelper0 . formatHangingIndent ( "" , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatHangingIndent ( String s , int indent , int lineLen ) { if ( s = = null | | s . length ( ) = = 0 ) { return "" ; } if ( lineLen < = indent ) { throw new IllegalArgumentException ( Strings . get ( "StringFormatHelper . lineLenLessThanIndent" ) ) ; } if ( lineLen < = 0 ) { throw new IllegalArgumentException ( Strings . get ( "StringFormatHelper . lineLenZero" ) ) ; } / / guesstimate required buffer length , leaving enough room for line / / terminators StringBuffer sb = new StringBuffer ( s . length ( ) + ( s . length ( ) / lineLen - indent ) + 20 ) ; String [ ] a = breakString ( s , lineLen ) ; sb . append ( a [ 0 ] ) ; if ( a [ 1 ] ! = null ) { sb . append ( formatBlockedText ( a [ 1 ] , indent , lineLen ) ) ; } return sb . toString ( ) ; }
void test5 ( ) throws Throwable { StringFormatHelper stringFormatHelper0 = StringFormatHelper . getHelper ( ) ; String string0 = stringFormatHelper0 . formatBlockedText ( ( String ) null , ( - 1346 ) , ( - 1346 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatBlockedText ( String s , int indent , int lineLen ) { if ( s = = null | | s . length ( ) = = 0 ) { return "" ; } if ( lineLen < = indent ) { throw new IllegalArgumentException ( Strings . get ( "StringFormatHelper . lineLenLessThanIndent" ) ) ; } if ( lineLen < = 0 ) { throw new IllegalArgumentException ( Strings . get ( "StringFormatHelper . lineLenZero" ) ) ; } / / guesstimate required buffer length , leaving enough room for line / / terminators StringBuffer sb = new StringBuffer ( s . length ( ) + ( s . length ( ) / lineLen - indent ) + 20 ) ; StringBuffer indentBuf = new StringBuffer ( indent ) ; for ( int i = 0 ; i < indent ; i + + ) { indentBuf . append ( " " ) ; } int splitLen = lineLen - indent ; String [ ] a = breakString ( s , splitLen ) ; while ( a [ 1 ] ! = null ) { sb . append ( indentBuf ) . append ( a [ 0 ] ) ; a = breakString ( a [ 1 ] , splitLen ) ; } sb . append ( indentBuf ) . append ( a [ 0 ] ) ; return sb . toString ( ) ; }
void test6 ( ) throws Throwable { StringFormatHelper stringFormatHelper0 = StringFormatHelper . getHelper ( ) ; String string0 = stringFormatHelper0 . formatBlockedText ( "" , 22 , 22 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatBlockedText ( String s , int indent , int lineLen ) { if ( s = = null | | s . length ( ) = = 0 ) { return "" ; } if ( lineLen < = indent ) { throw new IllegalArgumentException ( Strings . get ( "StringFormatHelper . lineLenLessThanIndent" ) ) ; } if ( lineLen < = 0 ) { throw new IllegalArgumentException ( Strings . get ( "StringFormatHelper . lineLenZero" ) ) ; } / / guesstimate required buffer length , leaving enough room for line / / terminators StringBuffer sb = new StringBuffer ( s . length ( ) + ( s . length ( ) / lineLen - indent ) + 20 ) ; StringBuffer indentBuf = new StringBuffer ( indent ) ; for ( int i = 0 ; i < indent ; i + + ) { indentBuf . append ( " " ) ; } int splitLen = lineLen - indent ; String [ ] a = breakString ( s , splitLen ) ; while ( a [ 1 ] ! = null ) { sb . append ( indentBuf ) . append ( a [ 0 ] ) ; a = breakString ( a [ 1 ] , splitLen ) ; } sb . append ( indentBuf ) . append ( a [ 0 ] ) ; return sb . toString ( ) ; }
void test9 ( ) throws Throwable { StringFormatHelper stringFormatHelper0 = StringFormatHelper . getHelper ( ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "\n" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "\n" ; stringArray0 [ 3 ] = "\n" ; stringArray0 [ 4 ] = "\n" ; stringArray0 [ 5 ] = "t > pNBMP" ; String string0 = stringFormatHelper0 . formatLabeledList ( stringArray0 , stringArray0 , "\n" , 10 , 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatLabeledList ( String [ ] labels , String [ ] texts , String divider , int maxIndent , int lineLen ) { if ( labels . length ! = texts . length ) { throw new IllegalArgumentException ( Strings . get ( "StringFormatHelper . labelDescriptionError" , new Object [ ] { new Integer ( labels . length ) , new Integer ( texts . length ) } ) ) ; } / / Figure out description indents int indent = 0 ; int dividerlen = divider . length ( ) ; int currlen ; for ( int i = 0 ; i < labels . length ; i + + ) { currlen = labels [ i ] . length ( ) + dividerlen ; if ( currlen > maxIndent ) { continue ; } else if ( currlen > indent ) { indent = currlen ; } } / / All labels + divider > maxIndent ? - use indent of 10 indent = ( indent = = 0 ) ? 10 : indent ; / / will fit 20 80 - char lines without expansion StringBuffer list = new StringBuffer ( 1600 ) ; / / will fit 5 lines per list item without expansion StringBuffer item = new StringBuffer ( 400 ) ; for ( int i = 0 ; i < labels . length ; i + + ) { item . delete ( 0 , item . length ( ) ) ; item . append ( labels [ i ] ) ; int spacefill = indent - divider . length ( ) ; while ( item . length ( ) < spacefill ) { item . append ( ' ' ) ; } item . append ( divider ) ; if ( item . length ( ) > indent ) { item . append ( "\n" ) ; } item . append ( texts [ i ] ) ; list . append ( formatHangingIndent ( item . toString ( ) + "\n" , indent , lineLen ) ) ; } return list . toString ( ) ; }
void test10 ( ) throws Throwable { StringFormatHelper stringFormatHelper0 = StringFormatHelper . getHelper ( ) ; String [ ] stringArray0 = stringFormatHelper0 . breakString ( ( String ) null , 1398 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] breakString ( String s , int maxLen ) { s = ( s = = null ) ? "" : s ; String line = null ; String remainder = null ; int idx ; if ( ( idx = s . indexOf ( '\n' ) ) ! = - 1 & & idx < = maxLen ) { idx + + ; / / point to next char line = s . substring ( 0 , idx ) ; if ( idx < s . length ( ) ) { remainder = s . substring ( idx ) ; } } else if ( s . length ( ) < = maxLen ) { line = s ; } else if ( ( idx = s . lastIndexOf ( ' ' , maxLen ) ) ! = - 1 ) { line = s . substring ( 0 , idx ) ; while ( idx < s . length ( ) & & s . charAt ( idx ) = = ' ' ) { idx + + ; } if ( idx < s . length ( ) ) { line + = "\n" ; remainder = s . substring ( idx ) ; } } else { line = s . substring ( 0 , maxLen ) + "\n" ; remainder = s . substring ( maxLen ) ; } return new String [ ] { line , remainder } ; }
void test11 ( ) throws Throwable { StringFormatHelper stringFormatHelper0 = StringFormatHelper . getHelper ( ) ; String [ ] stringArray0 = stringFormatHelper0 . breakString ( " " , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] breakString ( String s , int maxLen ) { s = ( s = = null ) ? "" : s ; String line = null ; String remainder = null ; int idx ; if ( ( idx = s . indexOf ( '\n' ) ) ! = - 1 & & idx < = maxLen ) { idx + + ; / / point to next char line = s . substring ( 0 , idx ) ; if ( idx < s . length ( ) ) { remainder = s . substring ( idx ) ; } } else if ( s . length ( ) < = maxLen ) { line = s ; } else if ( ( idx = s . lastIndexOf ( ' ' , maxLen ) ) ! = - 1 ) { line = s . substring ( 0 , idx ) ; while ( idx < s . length ( ) & & s . charAt ( idx ) = = ' ' ) { idx + + ; } if ( idx < s . length ( ) ) { line + = "\n" ; remainder = s . substring ( idx ) ; } } else { line = s . substring ( 0 , maxLen ) + "\n" ; remainder = s . substring ( maxLen ) ; } return new String [ ] { line , remainder } ; }
void test0 ( ) throws Throwable { StringParam stringParam0 = new StringParam ( "`RoGigy" , "`RoGigy" , 0 , 49 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiValued ( ) { return multiValued ; }
void test1 ( ) throws Throwable { StringParam stringParam0 = new StringParam ( "W * p ; Ev / iA ) OY ) " , "W * p ; Ev / iA ) OY ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test2 ( ) throws Throwable { StringParam stringParam0 = new StringParam ( "`RoGigy" , "`RoGigy" , 0 , 49 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiValued ( ) { return multiValued ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; StringParam stringParam0 = new StringParam ( "`RoGigy" , "`RoGigy" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTag ( ) { return tag ; }
void test4 ( ) throws Throwable { StringParam stringParam0 = new StringParam ( "xFeqU3$" , "xFeqU3$" , 0 , 0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMinValLen ( int minValLen ) { if ( minValLen < 0 ) { throw new IllegalArgumentException ( Strings . get ( "StringParam . minTooSmall" , new Object [ ] { tag } ) ) ; } if ( maxValLen ! = UNSPECIFIED_LENGTH & & minValLen > maxValLen ) { throw new IllegalArgumentException ( Strings . get ( "StringParam . maxLessThanMin" , new Object [ ] { tag } ) ) ; } this . minValLen = minValLen ; }
void test5 ( ) throws Throwable { StringParam stringParam0 = new StringParam ( "W * p ; Ev / iK ) OY - " , "W * p ; Ev / iK ) OY - " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxValLen ( ) { return maxValLen ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; StringParam stringParam0 = new StringParam ( "StringParam . defaultOptionLPbel" , "StringParam . defaultOptionLPbel" , stringArray0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxValLen ( ) { return maxValLen ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "W * p ; Ev / iA ) OY ) " ; StringParam stringParam0 = new StringParam ( "W * p ; Ev / iA ) OY ) " , "W * p ; Ev / iA ) OY ) " , stringArray0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOptionLabel ( ) { return ( ( optionLabel = = null ) ? "" : optionLabel ) ; }
void test8 ( ) throws Throwable { StringParam stringParam0 = new StringParam ( "`RoGigy" , "`RoGigy" , 0 , 49 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValues ( Collection values ) throws CmdLineException { this . values . clear ( ) ; for ( Iterator itr = values . iterator ( ) ; itr . hasNext ( ) ; ) { addValue ( ( String ) itr . next ( ) ) ; / / let addValue ( ) validate } }
void test10 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "W * p ; Ev / iA ) OY ) " ; StringParam stringParam0 = new StringParam ( "W * p ; Ev / iA ) OY ) " , "W * p ; Ev / iA ) OY ) " , 0 , 0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValues ( Collection values ) throws CmdLineException { this . values . clear ( ) ; for ( Iterator itr = values . iterator ( ) ; itr . hasNext ( ) ; ) { addValue ( ( String ) itr . next ( ) ) ; / / let addValue ( ) validate } }
void test12 ( ) throws Throwable { StringParam stringParam0 = new StringParam ( "`RoGigy" , "`RoGigy" , 0 , 49 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinValLen ( ) { return minValLen ; }
void test13 ( ) throws Throwable { StringParam stringParam0 = new StringParam ( "W * p ; Ev / iK ) OY - " , "W * p ; Ev / iK ) OY - " , 1993 , ( - 1105 ) , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMaxValLen ( int maxValLen ) { if ( maxValLen < 0 ) { throw new IllegalArgumentException ( Strings . get ( "StringParam . maxTooSmall" , new Object [ ] { tag } ) ) ; } if ( minValLen ! = UNSPECIFIED_LENGTH & & maxValLen < minValLen ) { throw new IllegalArgumentException ( Strings . get ( "StringParam . maxLessThanMin" , new Object [ ] { tag } ) ) ; } this . maxValLen = maxValLen ; }
void test0 ( ) throws Throwable { TimeParam timeParam0 = new TimeParam ( "FileParlm . defaultDirOptionLabel" , "FileParlm . defaultDirOptionLabel" , true ) ; Parameter [ ] parameterArray0 = new Parameter [ 1 ] ; parameterArray0 [ 0 ] = ( Parameter ) timeParam0 ; Parameter [ ] parameterArray1 = new Parameter [ 1 ] ; parameterArray1 [ 0 ] = ( Parameter ) timeParam0 ; BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler ( "FileParlm . defaultDirOptionLabel" , "FileParlm . defaultDirOptionLabel" , parameterArray1 , parameterArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( ( bookmarkName = = null | | bookmarkName . length ( ) = = 0 ) & & ( fileNumber = = null ) & & ( pageNumber = = null ) ) ; }
void test1 ( ) throws Throwable { TimeParam timeParam0 = new TimeParam ( "FileParam . defaultDirOptionLabel" , "FileParam . defaultDirOptionLabel" , true ) ; Parameter [ ] parameterArray0 = new Parameter [ 1 ] ; parameterArray0 [ 0 ] = ( Parameter ) timeParam0 ; Parameter [ ] parameterArray1 = new Parameter [ 1 ] ; parameterArray1 [ 0 ] = ( Parameter ) timeParam0 ; BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler ( "FileParam . defaultDirOptionLabel" , "FileParam . defaultDirOptionLabel" , parameterArray1 , parameterArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDieOnParseError ( ) { return handler . getDieOnParseError ( ) ; }
void test2 ( ) throws Throwable { int [ ] intArray0 = new int [ 7 ] ; IntParam intParam0 = new IntParam ( "A } bzX^n { ~`r" , "A } bzX^n { ~`r" , intArray0 , false ) ; Collection < Object > collection0 = intParam0 . getValues ( ) ; BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler ( "A } bzX^n { ~`r" , "A } bzX^n { ~`r" , ( Collection ) collection0 , ( Collection ) collection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDieOnParseError ( ) { return handler . getDieOnParseError ( ) ; }
void test3 ( ) throws Throwable { TimeParam timeParam0 = new TimeParam ( "FileParam . defaultDirOptionLabel" , "FileParam . defaultDirOptionLabel" , true ) ; Parameter [ ] parameterArray0 = new Parameter [ 1 ] ; parameterArray0 [ 0 ] = ( Parameter ) timeParam0 ; Parameter [ ] parameterArray1 = new Parameter [ 1 ] ; parameterArray1 [ 0 ] = ( Parameter ) timeParam0 ; BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler ( "FileParam . defaultDirOptionLabel" , "FileParam . defaultDirOptionLabel" , parameterArray1 , parameterArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDieOnParseError ( ) { return handler . getDieOnParseError ( ) ; }
void test4 ( ) throws Throwable { Parameter [ ] parameterArray0 = new Parameter [ 2 ] ; FileParam fileParam0 = new FileParam ( "StringParam . valTooShort" , "StringParam . valTooShort" ) ; parameterArray0 [ 0 ] = ( Parameter ) fileParam0 ; BooleanParam booleanParam0 = new BooleanParam ( "StringParam . valTooShort" , "StringParam . valTooShort" ) ; parameterArray0 [ 1 ] = ( Parameter ) booleanParam0 ; BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler ( "StringParam . valTooShort" , "StringParam . valTooShort" , parameterArray0 , ( Parameter [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDieOnParseError ( ) { return handler . getDieOnParseError ( ) ; }
void test5 ( ) throws Throwable { TimeParam timeParam0 = new TimeParam ( "FileParlm . defaultDirOptionLabel" , "FileParlm . defaultDirOptionLabel" , true ) ; Parameter [ ] parameterArray0 = new Parameter [ 1 ] ; parameterArray0 [ 0 ] = ( Parameter ) timeParam0 ; Parameter [ ] parameterArray1 = new Parameter [ 1 ] ; parameterArray1 [ 0 ] = ( Parameter ) timeParam0 ; BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler ( "FileParlm . defaultDirOptionLabel" , "FileParlm . defaultDirOptionLabel" , parameterArray1 , parameterArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( ( bookmarkName = = null | | bookmarkName . length ( ) = = 0 ) & & ( fileNumber = = null ) & & ( pageNumber = = null ) ) ; }
void test6 ( ) throws Throwable { TimeParam timeParam0 = new TimeParam ( "FileParam . defaultDirOptionLabel" , "FileParam . defaultDirOptionLabel" , true ) ; Parameter [ ] parameterArray0 = new Parameter [ 1 ] ; parameterArray0 [ 0 ] = ( Parameter ) timeParam0 ; Parameter [ ] parameterArray1 = new Parameter [ 1 ] ; parameterArray1 [ 0 ] = ( Parameter ) timeParam0 ; BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler ( "FileParam . defaultDirOptionLabel" , "FileParam . defaultDirOptionLabel" , parameterArray1 , parameterArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDieOnParseError ( ) { return handler . getDieOnParseError ( ) ; }
void test7 ( ) throws Throwable { TimeParam timeParam0 = new TimeParam ( "FileParlm . defaultDirOptionLabel" , "FileParlm . defaultDirOptionLabel" , true ) ; Parameter [ ] parameterArray0 = new Parameter [ 1 ] ; parameterArray0 [ 0 ] = ( Parameter ) timeParam0 ; Parameter [ ] parameterArray1 = new Parameter [ 1 ] ; parameterArray1 [ 0 ] = ( Parameter ) timeParam0 ; BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler ( "FileParlm . defaultDirOptionLabel" , "FileParlm . defaultDirOptionLabel" , parameterArray1 , parameterArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDieOnParseError ( ) { return handler . getDieOnParseError ( ) ; }
void test8 ( ) throws Throwable { StringParam stringParam0 = new StringParam ( "1PSaUg4\"B7F , } " , "1PSaUg4\"B7F , } " , false ) ; stringParam0 . addValue ( "1PSaUg4\"B7F , } " ) ; stringParam0 . setIgnoreRequired ( true ) ; Parameter [ ] parameterArray0 = new Parameter [ 6 ] ; parameterArray0 [ 0 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 1 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 2 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 3 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 4 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 5 ] = ( Parameter ) stringParam0 ; BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler ( "1PSaUg4\"B7F , } " , "6b^1^UPB4R [ { kgsgd" , parameterArray0 , parameterArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCmdName ( ) { return handler . getCmdName ( ) ; }
void test9 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler ( "B } " , "B } " , ( Collection ) linkedList0 , ( Collection ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDieOnParseError ( ) { return handler . getDieOnParseError ( ) ; }
void test11 ( ) throws Throwable { Parameter [ ] parameterArray0 = new Parameter [ 6 ] ; LongParam longParam0 = new LongParam ( "#6aiQbq < NBG@V : Jdm" , "#6aiQbq < NBG@V : Jdm" , true , true ) ; parameterArray0 [ 0 ] = ( Parameter ) longParam0 ; DateTimeParam dateTimeParam0 = new DateTimeParam ( "#6aiQbq < NBG@V : Jdm" , "#6aiQbq < NBG@V : Jdm" , true ) ; parameterArray0 [ 1 ] = ( Parameter ) dateTimeParam0 ; String [ ] stringArray0 = new String [ 7 ] ; TimeParam timeParam0 = new TimeParam ( "#6aiQbq < NBG@V : Jdm" , "#6aiQbq < NBG@V : Jdm" , stringArray0 , true ) ; parameterArray0 [ 2 ] = ( Parameter ) timeParam0 ; StringParam stringParam0 = new StringParam ( " } ? ] ^$5 ) O / b6yNtq# * vp" , "#6aiQbq < NBG@V : Jdm" , stringArray0 , true , true ) ; parameterArray0 [ 3 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 4 ] = ( Parameter ) dateTimeParam0 ; parameterArray0 [ 5 ] = ( Parameter ) stringParam0 ; Collection < Object > collection0 = timeParam0 . getValues ( ) ; BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler ( " ! usvAVAkjd ( # = wQn ; H" , "#6aiQbq < NBG@V : Jdm" , ( Collection ) collection0 , ( Collection ) collection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BasicCmdLineHandler ( String cmdName , String cmdDesc , Parameter [ ] options , Parameter [ ] args , CmdLineParser parser ) { setCmdName ( cmdName ) ; setCmdDesc ( cmdDesc ) ; setOptions ( options ) ; setArgs ( args ) ; setParser ( parser ) ; }
void test12 ( ) throws Throwable { StringParam stringParam0 = new StringParam ( "1PSaUg4\"B7F , } " , "1PSaUg4\"B7F , } " , true ) ; Parameter [ ] parameterArray0 = new Parameter [ 6 ] ; parameterArray0 [ 0 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 1 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 2 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 3 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 4 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 5 ] = ( Parameter ) stringParam0 ; BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler ( "1PSaUg4\"B7F , } " , "#6aiQbq < NBG@V : Jdm" , parameterArray0 , parameterArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCmdName ( ) { return handler . getCmdName ( ) ; }
void test14 ( ) throws Throwable { StringParam stringParam0 = new StringParam ( "1PSaUg4\"B7F , } " , "1PSaUg4\"B7F , } " , false ) ; Parameter [ ] parameterArray0 = new Parameter [ 6 ] ; parameterArray0 [ 0 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 1 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 2 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 3 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 4 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 5 ] = ( Parameter ) stringParam0 ; BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler ( "1PSaUg4\"B7F , } " , "6b^1^UPB4R [ { kgsgd" , parameterArray0 , parameterArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCmdName ( ) { return handler . getCmdName ( ) ; }
void test15 ( ) throws Throwable { TimeParam timeParam0 = new TimeParam ( "FileParam . defaultDirOptionLabel" , "FileParam . defaultDirOptionLabel" , true ) ; Parameter [ ] parameterArray0 = new Parameter [ 1 ] ; parameterArray0 [ 0 ] = ( Parameter ) timeParam0 ; Parameter [ ] parameterArray1 = new Parameter [ 1 ] ; parameterArray1 [ 0 ] = ( Parameter ) timeParam0 ; BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler ( "FileParam . defaultDirOptionLabel" , "FileParam . defaultDirOptionLabel" , parameterArray1 , parameterArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDieOnParseError ( ) { return handler . getDieOnParseError ( ) ; }
void test22 ( ) throws Throwable { StringParam stringParam0 = new StringParam ( "1PSaUg4\"B7F , } " , "1PSaUg4\"B7F , } " , false ) ; stringParam0 . setIgnoreRequired ( true ) ; Parameter [ ] parameterArray0 = new Parameter [ 6 ] ; parameterArray0 [ 0 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 1 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 2 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 3 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 4 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 5 ] = ( Parameter ) stringParam0 ; BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler ( "1PSaUg4\"B7F , } " , "6b^1^UPB4R [ { kgsgd" , parameterArray0 , parameterArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( String [ ] clargs , Map opts , List args ) throws CmdLineException { if ( clargs = = null ) { clargs = new String [ ] { } ; } int i = processOptions ( clargs , opts ) ; processArguments ( i , clargs , args ) ; }
void test23 ( ) throws Throwable { StringParam stringParam0 = new StringParam ( "1PSaUg4\"B7F , } " , "1PSaUg4\"B7F , } " , false ) ; Parameter [ ] parameterArray0 = new Parameter [ 6 ] ; parameterArray0 [ 0 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 1 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 2 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 3 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 4 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 5 ] = ( Parameter ) stringParam0 ; BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler ( "1PSaUg4\"B7F , } " , "6b^1^UPB4R [ { kgsgd" , parameterArray0 , parameterArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCmdName ( ) { return handler . getCmdName ( ) ; }
void test0 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; LoggerCmdLineHandler loggerCmdLineHandler0 = new LoggerCmdLineHandler ( ( OutputStream ) pipedOutputStream0 , "PdfFileParam . an_existing" , "PdfFileParam . an_existing" , ( Collection ) linkedList0 , ( Collection ) linkedList0 ) ; SimpleFormatter simpleFormatter0 = ( SimpleFormatter ) loggerCmdLineHandler0 . getLogFormatter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Formatter getLogFormatter ( ) { return logFormatter ; }
void test1 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; Parameter [ ] parameterArray0 = new Parameter [ 1 ] ; BooleanParam booleanParam0 = new BooleanParam ( "PdfFileParam . an_existing" , "PdfFileParam . an_existing" ) ; parameterArray0 [ 0 ] = ( Parameter ) booleanParam0 ; Parameter [ ] parameterArray1 = new Parameter [ 3 ] ; parameterArray1 [ 0 ] = ( Parameter ) booleanParam0 ; parameterArray1 [ 1 ] = ( Parameter ) booleanParam0 ; parameterArray1 [ 2 ] = ( Parameter ) booleanParam0 ; LoggerCmdLineHandler loggerCmdLineHandler0 = new LoggerCmdLineHandler ( ( OutputStream ) pipedOutputStream0 , "PdfFileParam . an_existing" , "PdfFileParam . an_existing" , parameterArray0 , parameterArray1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processParsedOptions ( boolean parseStatus ) ; / * * * Sets a flag indicating that the program should exit in the case of * a parse error ( after displaying the usage and an error message ) . * This flag defaults to < code > true < / code > . * * @param val < code > true < / code > ( the default ) if the < code > * parse < / code > method should call System . exit ( ) in * case of a parse error , < code > false < / code > if * < code > parse ( ) < / code > should return to the user * for error processing . * @see #parse ( String [ ] ) parse ( ) * / void setDieOnParseError ( boolean val ) { handler . setDieOnParseError ( val ) ; }
void test3 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; String [ ] stringArray0 = new String [ 10 ] ; TimeParam timeParam0 = new TimeParam ( "PdfFileParam . an_existing" , "PdfFileParam . an_existing" , stringArray0 ) ; Collection < Object > collection0 = timeParam0 . getValues ( ) ; LoggerCmdLineHandler loggerCmdLineHandler0 = new LoggerCmdLineHandler ( ( OutputStream ) pipedOutputStream0 , "PdfFileParam . an_existing" , "PdfFileParam . an_existing" , ( Collection ) collection0 , ( Collection ) collection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processParsedOptions ( boolean parseStatus ) ; / * * * Sets a flag indicating that the program should exit in the case of * a parse error ( after displaying the usage and an error message ) . * This flag defaults to < code > true < / code > . * * @param val < code > true < / code > ( the default ) if the < code > * parse < / code > method should call System . exit ( ) in * case of a parse error , < code > false < / code > if * < code > parse ( ) < / code > should return to the user * for error processing . * @see #parse ( String [ ] ) parse ( ) * / void setDieOnParseError ( boolean val ) { handler . setDieOnParseError ( val ) ; }
void test4 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; LoggerCmdLineHandler loggerCmdLineHandler0 = new LoggerCmdLineHandler ( ( OutputStream ) pipedOutputStream0 , "PdfFileParam . an_existing" , "PdfFileParam . an_existing" , ( Collection ) linkedList0 , ( Collection ) linkedList0 ) ; XMLFormatter xMLFormatter0 = new XMLFormatter ( ) ; loggerCmdLineHandler0 . setLogFormatter ( ( Formatter ) xMLFormatter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCmdDesc ( ) { return handler . getCmdDesc ( ) ; }
void test0 ( ) throws Throwable { String string0 = Strings . get ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String key , Object [ ] params ) { String ret = missingKeyMsg + key ; try { ret = rb . getString ( key ) ; ret = MessageFormat . format ( ret , params ) ; } catch ( Exception e ) { ret + = " ; params : " ; for ( int i = 0 ; i < params . length ; i + + ) { ret + = " [ " + params [ i ] + " ] " ; } } return ret ; }
void test1 ( ) throws Throwable { Strings strings0 = new Strings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 7 ] ; String string0 = Strings . get ( "" , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String key , Object [ ] params ) { String ret = missingKeyMsg + key ; try { ret = rb . getString ( key ) ; ret = MessageFormat . format ( ret , params ) ; } catch ( Exception e ) { ret + = " ; params : " ; for ( int i = 0 ; i < params . length ; i + + ) { ret + = " [ " + params [ i ] + " ] " ; } } return ret ; }
void test0 ( ) throws Throwable { Parameter [ ] parameterArray0 = new Parameter [ 1 ] ; String [ ] stringArray0 = new String [ 8 ] ; TimeParam timeParam0 = new TimeParam ( "SZB6 & 9s / ~DP_x" , "SZB6 & 9s / ~DP_x" , stringArray0 , true , true , true ) ; parameterArray0 [ 0 ] = ( Parameter ) timeParam0 ; VersionCmdLineHandler versionCmdLineHandler0 = new VersionCmdLineHandler ( "SZB6 & 9s / ~DP_x" , "SZB6 & 9s / ~DP_x" , "SZB6 & 9s / ~DP_x" , parameterArray0 , parameterArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processParsedOptions ( boolean parseStatus ) ; / * * * Sets a flag indicating that the program should exit in the case of * a parse error ( after displaying the usage and an error message ) . * This flag defaults to < code > true < / code > . * * @param val < code > true < / code > ( the default ) if the < code > * parse < / code > method should call System . exit ( ) in * case of a parse error , < code > false < / code > if * < code > parse ( ) < / code > should return to the user * for error processing . * @see #parse ( String [ ] ) parse ( ) * / void setDieOnParseError ( boolean val ) { handler . setDieOnParseError ( val ) ; }
void test3 ( ) throws Throwable { Parameter [ ] parameterArray0 = new Parameter [ 1 ] ; long [ ] longArray0 = new long [ 7 ] ; LongParam longParam0 = new LongParam ( " * d" , "njlCfV9w } 9 : + 7 + 2" , longArray0 , false , false , false ) ; parameterArray0 [ 0 ] = ( Parameter ) longParam0 ; VersionCmdLineHandler versionCmdLineHandler0 = new VersionCmdLineHandler ( " * d" , " * d" , " * d" , parameterArray0 , parameterArray0 ) ; boolean boolean0 = versionCmdLineHandler0 . processParsedOptions ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processParsedOptions ( boolean parseStatus ) ; / * * * Sets a flag indicating that the program should exit in the case of * a parse error ( after displaying the usage and an error message ) . * This flag defaults to < code > true < / code > . * * @param val < code > true < / code > ( the default ) if the < code > * parse < / code > method should call System . exit ( ) in * case of a parse error , < code > false < / code > if * < code > parse ( ) < / code > should return to the user * for error processing . * @see #parse ( String [ ] ) parse ( ) * / void setDieOnParseError ( boolean val ) { handler . setDieOnParseError ( val ) ; }
void test1 ( ) throws Throwable { Date [ ] dateArray0 = new Date [ 1 ] ; Date date0 = new Date ( 1L ) ; dateArray0 [ 0 ] = date0 ; DateParam dateParam0 = new DateParam ( "uWPfg" , "uWPfg" , dateArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDefaultTime ( int h , int m , int s , int ms ) { if ( h < 0 | | h > 23 ) { throw new IllegalArgumentException ( Strings . get ( "DateParam . invalidHours" , new Object [ ] { new Integer ( h ) } ) ) ; } if ( m < 0 | | m > 59 ) { throw new IllegalArgumentException ( Strings . get ( "DateParam . invalidMinutes" , new Object [ ] { new Integer ( m ) } ) ) ; } if ( s < 0 | | s > 59 ) { throw new IllegalArgumentException ( Strings . get ( "DateParam . invalidSeconds" , new Object [ ] { new Integer ( s ) } ) ) ; } if ( ms < 0 | | ms > 999 ) { throw new IllegalArgumentException ( Strings . get ( "DateParam . invalidMilliSeconds" , new Object [ ] { new Integer ( ms ) } ) ) ; } defaultHours = h ; defaultMinutes = m ; defaultSeconds = s ; defaultMilliSeconds = ms ; }
void test5 ( ) throws Throwable { String string0 = DateParam . getParseFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getParseFormat ( ) { return dateFmt . toLocalizedPattern ( ) ; }
void test7 ( ) throws Throwable { Date [ ] dateArray0 = new Date [ 2 ] ; Date date0 = new Date ( ) ; dateArray0 [ 0 ] = date0 ; dateArray0 [ 1 ] = dateArray0 [ 0 ] ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test8 ( ) throws Throwable { DateParam dateParam0 = new DateParam ( "I } } 95 > OuZ : @3\"OyB` ] { b" , "I } } 95 > OuZ : @3\"OyB` ] { b" , true ) ; int [ ] intArray0 = dateParam0 . getDefaultTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test9 ( ) throws Throwable { DateParam dateParam0 = new DateParam ( "AzK^o1tb@5~1 : d ; V" , "AzK^o1tb@5~1 : d ; V" , false ) ; dateParam0 . getDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test10 ( ) throws Throwable { DateParam dateParam0 = new DateParam ( "D_teP { bmVivli3Datp" , "D_teP { bmVivli3Datp" , false ) ; Date [ ] dateArray0 = dateParam0 . getDates ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOptionLabel ( ) { return ( ( optionLabel = = null ) ? "" : optionLabel ) ; }
void test11 ( ) throws Throwable { DateParam dateParam0 = new DateParam ( "I } } 95 > OuZ : @3\"OyB` ] { b" , "I } } 95 > OuZ : @3\"OyB` ] { b" , true ) ; dateParam0 . getAcceptableDates ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test12 ( ) throws Throwable { DateParam dateParam0 = new DateParam ( "4\bU ? & z_ + JqCj" , "4\bU ? & z_ + JqCj" ) ; Collection < Object > collection0 = dateParam0 . getValues ( ) ; dateParam0 . setAcceptableDates ( collection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test18 ( ) throws Throwable { DateParam dateParam0 = new DateParam ( "ak ? lJ * ~%" , "ak ? lJ * ~%" , false ) ; dateParam0 . setDefaultTime ( 0 , 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test0 ( ) throws Throwable { BooleanParam booleanParam0 = new BooleanParam ( "I5RgL29 b" , "I5RgL29 b" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test1 ( ) throws Throwable { BooleanParam booleanParam0 = new BooleanParam ( "I5RgL29 b" , "I5RgL29 b" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test2 ( ) throws Throwable { BooleanParam booleanParam0 = new BooleanParam ( "I5RgL29 b" , "I5RgL29 b" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSet ( ) { return set ; }
void test0 ( ) throws Throwable { TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter ( ) ; int int0 = textUsageFormatter0 . getLineLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineLength ( ) ; }
void test1 ( ) throws Throwable { TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter ( ) ; String string0 = textUsageFormatter0 . formatText ( "Yik ) $Mk3J" , 0 , 467 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineLength ( ) ; }
void test2 ( ) throws Throwable { TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter ( ) ; String string0 = textUsageFormatter0 . formatErrorMsg ( "PdfFlePaa . wrieabl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineLength ( ) ; }
void test3 ( ) throws Throwable { TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter ( ) ; textUsageFormatter0 . setLineLength ( 467 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineLength ( ) ; }
void test4 ( ) throws Throwable { TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter ( ) ; HashMap < Parameter , Parameter > hashMap0 = new HashMap < Parameter , Parameter > ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; TimeParam timeParam0 = new TimeParam ( "Yik ) $Mk3J" , "Yik ) $Mk3J - Yik ) $Mk3J\n\nUsage : Yik ) $Mk3J options [ Yik ) $Mk3J ] \n\nwhere : \n\nYik ) $Mk3J = Yik ) $Mk3J ( optional ) \n\nand options are : \n\n - Yik ) $Mk3J < n > Yik ) $Mk3J ( required ) \n\nOption tags are not case sensitive , and may be truncated as long as they remain unambiguous . Option tags must be separated from their corresponding values by whitespace , or by an equal sign . Boolean options ( options that require no associated value ) may be specified alone ( = true ) , or as 'tag = value' where value is 'true' or 'false' . " , true , true , true ) ; hashMap0 . put ( ( Parameter ) null , ( Parameter ) timeParam0 ) ; String string0 = textUsageFormatter0 . formatUsage ( "Yik ) $Mk3J" , "Yik ) $Mk3J" , ( Map ) hashMap0 , ( List ) linkedList0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineLength ( ) ; }
void test5 ( ) throws Throwable { TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter ( ) ; HashMap < Parameter , Parameter > hashMap0 = new HashMap < Parameter , Parameter > ( ) ; LinkedList < Parameter > linkedList0 = new LinkedList < Parameter > ( ) ; String [ ] stringArray0 = new String [ 12 ] ; StringParam stringParam0 = new StringParam ( "Yik ) $Mk3J" , "Yik ) $Mk3J" , stringArray0 ) ; linkedList0 . add ( ( Parameter ) stringParam0 ) ; LongParam longParam0 = new LongParam ( "Yik ) $Mk3J" , "Yik ) $Mk3J" , false ) ; hashMap0 . put ( ( Parameter ) null , ( Parameter ) longParam0 ) ; String string0 = textUsageFormatter0 . formatUsage ( "Yik ) $Mk3J" , "Yik ) $Mk3J" , ( Map ) hashMap0 , ( List ) linkedList0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineLength ( ) ; }
void test6 ( ) throws Throwable { TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter ( ) ; LinkedList < Parameter > linkedList0 = new LinkedList < Parameter > ( ) ; PdfFileParam pdfFileParam0 = new PdfFileParam ( "PdfFlePaa . wrieabl" , "PdfFlePaa . wrieabl" ) ; linkedList0 . add ( ( Parameter ) pdfFileParam0 ) ; pdfFileParam0 . setHidden ( true ) ; HashMap < Integer , String > hashMap0 = new HashMap < Integer , String > ( ) ; String string0 = textUsageFormatter0 . formatUsage ( "PdfFlePaa . wrieabl - PdfFlePaa . wrieabl\n\nUsage : PdfFlePaa . wrieabl \n\nwhere : \n" , "PdfFlePaa . wrieabl - PdfFlePaa . wrieabl\n\nUsage : PdfFlePaa . wrieabl \n\nwhere : \n" , ( Map ) hashMap0 , ( List ) linkedList0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatUsage ( String cmdName , String cmdDesc , Map opts , List args , boolean showHidden ) ; / * * * Gets an error message , reformatted in a manner to "go well with" * the usage statement . For instance , * < pre > * formatErrorMsg ( "invalid filename" ) * < / pre > * Might return : * < pre > * < b > ERROR : < / b > invalid filename * < / pre > * * @param msg the text of the error message * @return the reformatted error message * / String formatErrorMsg ( String msg ) ; / * * * Sets the maximum line length to use for usage display . The maximum * line length defaults to 80 if this method is not called to set it * otherwise . * * @param lineLength the maximum line length to use for usage display * @see #getLineLength ( ) * / void setLineLength ( int lineLength ) ; / * * * Gets the maximum line length to use for usage display . * * @return the maximum line length to use for usage display * @see #setLineLength ( int ) setLineLength ( ) * / int getLineLength ( ) ; }
void test7 ( ) throws Throwable { TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter ( ) ; LinkedList < Parameter > linkedList0 = new LinkedList < Parameter > ( ) ; PdfFileParam pdfFileParam0 = new PdfFileParam ( "PdfFlePaa . wrieabl" , "PdfFlePaa . wrieabl" ) ; linkedList0 . add ( ( Parameter ) pdfFileParam0 ) ; pdfFileParam0 . setHidden ( true ) ; HashMap < Integer , String > hashMap0 = new HashMap < Integer , String > ( ) ; DateParam dateParam0 = new DateParam ( "ERROR : PdfFlePaa . wrieabl" , "PdfFlePaa . wrieabl" , false ) ; linkedList0 . add ( ( Parameter ) dateParam0 ) ; linkedList0 . offerFirst ( ( Parameter ) dateParam0 ) ; String string0 = textUsageFormatter0 . formatUsage ( "ERROR : PdfFlePaa . wrieabl" , "PdfFlePaa . wrieabl" , ( Map ) hashMap0 , ( List ) linkedList0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatUsage ( String cmdName , String cmdDesc , Map opts , List args , boolean showHidden ) ; / * * * Gets an error message , reformatted in a manner to "go well with" * the usage statement . For instance , * < pre > * formatErrorMsg ( "invalid filename" ) * < / pre > * Might return : * < pre > * < b > ERROR : < / b > invalid filename * < / pre > * * @param msg the text of the error message * @return the reformatted error message * / String formatErrorMsg ( String msg ) ; / * * * Sets the maximum line length to use for usage display . The maximum * line length defaults to 80 if this method is not called to set it * otherwise . * * @param lineLength the maximum line length to use for usage display * @see #getLineLength ( ) * / void setLineLength ( int lineLength ) ; / * * * Gets the maximum line length to use for usage display . * * @return the maximum line length to use for usage display * @see #setLineLength ( int ) setLineLength ( ) * / int getLineLength ( ) ; }
void test8 ( ) throws Throwable { TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter ( ) ; LinkedList < Parameter > linkedList0 = new LinkedList < Parameter > ( ) ; PdfFileParam pdfFileParam0 = new PdfFileParam ( "PdfFlePaa . wrieabl" , "PdfFlePaa . wrieabl" ) ; linkedList0 . add ( ( Parameter ) pdfFileParam0 ) ; pdfFileParam0 . setHidden ( true ) ; HashMap < Integer , String > hashMap0 = new HashMap < Integer , String > ( ) ; String string0 = textUsageFormatter0 . formatUsage ( "PdfFlePaa . wrieabl" , "PdfFlePaa . wrieabl" , ( Map ) hashMap0 , ( List ) linkedList0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineLength ( ) ; }
void test9 ( ) throws Throwable { TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter ( ) ; LinkedList < Parameter > linkedList0 = new LinkedList < Parameter > ( ) ; PdfFileParam pdfFileParam0 = new PdfFileParam ( "PdfFlePaa . wrieabl" , "PdfFlePaa . wrieabl" ) ; linkedList0 . add ( ( Parameter ) pdfFileParam0 ) ; HashMap < Integer , String > hashMap0 = new HashMap < Integer , String > ( ) ; pdfFileParam0 . setMultiValued ( true ) ; String string0 = textUsageFormatter0 . formatUsage ( "PdfFlePaa . wrieabl - PdfFlePaa . wrieabl\n\nUsage : PdfFlePaa . wrieabl \n\nwhere : \n" , "PdfFlePaa . wrieabl - PdfFlePaa . wrieabl\n\nUsage : PdfFlePaa . wrieabl \n\nwhere : \n" , ( Map ) hashMap0 , ( List ) linkedList0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatUsage ( String cmdName , String cmdDesc , Map opts , List args , boolean showHidden ) ; / * * * Gets an error message , reformatted in a manner to "go well with" * the usage statement . For instance , * < pre > * formatErrorMsg ( "invalid filename" ) * < / pre > * Might return : * < pre > * < b > ERROR : < / b > invalid filename * < / pre > * * @param msg the text of the error message * @return the reformatted error message * / String formatErrorMsg ( String msg ) ; / * * * Sets the maximum line length to use for usage display . The maximum * line length defaults to 80 if this method is not called to set it * otherwise . * * @param lineLength the maximum line length to use for usage display * @see #getLineLength ( ) * / void setLineLength ( int lineLength ) ; / * * * Gets the maximum line length to use for usage display . * * @return the maximum line length to use for usage display * @see #setLineLength ( int ) setLineLength ( ) * / int getLineLength ( ) ; }
void test0 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( " ; > / Cy2eg6 : B1y" , " ; > / Cy2eg6 : B1y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDesc ( ) { return desc ; }
void test1 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( "LS ? DuM / \b5Azsi ? z" , "LS ? DuM / \b5Azsi ? z" , ( - 908 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getFile ( ) { if ( ! set ) { throw new RuntimeException ( Strings . get ( "FileParam . valueNotSet" , new Object [ ] { tag } ) ) ; } return new File ( ( String ) values . get ( 0 ) ) ; }
void test2 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( "X~o . Z" , "X~o . Z" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOptionLabel ( ) { return ( ( optionLabel = = null ) ? "" : optionLabel ) ; }
void test3 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( "`` * Fm" , "`` * Fm" , ( - 1755 ) , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addValue ( String value ) throws CmdLineException { if ( values . size ( ) > = 1 & & ! multiValued ) { throw new CmdLineException ( Strings . get ( "AbstractParameter . specifiedMoreThanOnce" , new Object [ ] { tag } ) ) ; } validateValue ( value ) ; values . add ( value ) ; set = true ; }
void test4 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( "AbstractParameter . illegalCharInTag" , "AbstractParameter . illegalCharInTag" , 65531 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValue ( String value ) throws CmdLineException { values . clear ( ) ; addValue ( value ) ; / / Let addValue ( ) validate }
void test5 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( " ; > / Cy2eg6 : B1y" , " ; > / Cy2eg6 : B1y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiValued ( ) { return multiValued ; }
void test6 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( " ; > / Cy2eg6 : B1y" , " ; > / Cy2eg6 : B1y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAttributes ( ) { return attributes ; }
void test7 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( "$ Ai ; [ O0_IxR4e2 + J & Fv" , "$ Ai ; [ O0_IxR4e2 + J & Fv" , 65527 , false , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addValue ( String value ) throws CmdLineException { if ( values . size ( ) > = 1 & & ! multiValued ) { throw new CmdLineException ( Strings . get ( "AbstractParameter . specifiedMoreThanOnce" , new Object [ ] { tag } ) ) ; } validateValue ( value ) ; values . add ( value ) ; set = true ; }
void test8 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( " , * z`mym" , " , * z`mym" , 65517 , true , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addValue ( String value ) throws CmdLineException { if ( values . size ( ) > = 1 & & ! multiValued ) { throw new CmdLineException ( Strings . get ( "AbstractParameter . specifiedMoreThanOnce" , new Object [ ] { tag } ) ) ; } validateValue ( value ) ; values . add ( value ) ; set = true ; }
void test10 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( " ; > / Cy2eg6 : B1y" , " ; > / Cy2eg6 : B1y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiValued ( ) { return multiValued ; }
void test11 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( " ; > / Cy2eg6 : B1y" , " ; > / Cy2eg6 : B1y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test13 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( " ; > / Cy2eg6 : B1y" , " ; > / Cy2eg6 : B1y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValues ( Collection values ) throws CmdLineException { this . values . clear ( ) ; for ( Iterator itr = values . iterator ( ) ; itr . hasNext ( ) ; ) { addValue ( ( String ) itr . next ( ) ) ; / / let addValue ( ) validate } }
void test14 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( "`` * Fm" , "`` * Fm" , 65502 , true , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addValue ( String value ) throws CmdLineException { if ( values . size ( ) > = 1 & & ! multiValued ) { throw new CmdLineException ( Strings . get ( "AbstractParameter . specifiedMoreThanOnce" , new Object [ ] { tag } ) ) ; } validateValue ( value ) ; values . add ( value ) ; set = true ; }
void test0 ( ) throws Throwable { IntParam intParam0 = new IntParam ( "e0iV% ) Lz ] 9YE\" } ? " , "e0iV% ) Lz ] 9YE\" } ? " , true , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValues ( Collection values ) throws CmdLineException { this . values . clear ( ) ; for ( Iterator itr = values . iterator ( ) ; itr . hasNext ( ) ; ) { addValue ( ( String ) itr . next ( ) ) ; / / let addValue ( ) validate } }
void test1 ( ) throws Throwable { int [ ] intArray0 = new int [ 3 ] ; IntParam intParam0 = new IntParam ( "tis ? F ; ( psy1 & %Jy < " , "tis ? F ; ( psy1 & %Jy < " , intArray0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMin ( ) { return min ; }
void test2 ( ) throws Throwable { IntParam intParam0 = new IntParam ( " | Jp { B > 9p9`" , " | Jp { B > 9p9`" , ( - 191 ) , ( - 191 ) , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOptionLabel ( ) { return ( ( optionLabel = = null ) ? "" : optionLabel ) ; }
void test3 ( ) throws Throwable { IntParam intParam0 = new IntParam ( "N ! D%jyZP / X | aJC RO%d^" , "N ! D%jyZP / X | aJC RO%d^" , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMax ( ) { return max ; }
void test4 ( ) throws Throwable { IntParam intParam0 = new IntParam ( "000I0PFra * . vidValues" , "000I0PFra * . vidValues" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int intValue ( ) { if ( ! set ) { throw new RuntimeException ( Strings . get ( "IntParam . valueNotSet" , new Object [ ] { tag } ) ) ; } return Integer . parseInt ( ( String ) values . get ( 0 ) ) ; }
void test5 ( ) throws Throwable { int [ ] intArray0 = new int [ 1 ] ; IntParam intParam0 = new IntParam ( "N ! D%jyZP / X | aJC RO%d^" , "N ! D%jyZP / X | aJC RO%d^" , intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMin ( ) { return min ; }
void test6 ( ) throws Throwable { IntParam intParam0 = new IntParam ( "xq - t : 2X" , "xq - t : 2X" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiValued ( ) { return multiValued ; }
void test7 ( ) throws Throwable { IntParam intParam0 = new IntParam ( "AbstractParameter . descTooShort" , "AbstractParameter . descTooShort" , 19 , 19 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMin ( int min ) { if ( min > max ) { throw new IllegalArgumentException ( Strings . get ( "IntParam . maxLessThanMin" , new Object [ ] { tag } ) ) ; } this . min = min ; }
void test8 ( ) throws Throwable { IntParam intParam0 = new IntParam ( "AbstractParameter . descTooShort" , "AbstractParameter . descTooShort" , 19 , 19 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiValued ( ) { return multiValued ; }
void test10 ( ) throws Throwable { int [ ] intArray0 = new int [ 5 ] ; IntParam intParam0 = new IntParam ( " | Jp { B > 9p9`" , " | Jp { B > 9p9`" , intArray0 , true , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMin ( ) { return min ; }
void test11 ( ) throws Throwable { IntParam intParam0 = new IntParam ( "0IntParam . val ; dValues" , "0IntParam . val ; dValues" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValue ( String value ) throws CmdLineException { values . clear ( ) ; addValue ( value ) ; / / Let addValue ( ) validate }
void test3 ( ) throws Throwable { TimeParam timeParam0 = new TimeParam ( "pPC } y : " , "pPC } y : " ) ; int int0 = timeParam0 . getDefaultMilliSeconds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; TimeParam timeParam0 = new TimeParam ( " < lTItG { es7" , " < lTItG { es7" , stringArray0 , false , false ) ; int int0 = timeParam0 . getDefaultSeconds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOptionLabel ( ) { return ( ( optionLabel = = null ) ? "" : optionLabel ) ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = " ( #U`x" ; TimeParam timeParam0 = new TimeParam ( " ( #U`x" , " ( #U`x" , stringArray0 , false , false ) ; timeParam0 . setValue ( " ( #U`x" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long [ ] getMilliValues ( ) { Collection vals = getValues ( ) ; long [ ] ret = new long [ vals . size ( ) ] ; int i = 0 ; for ( Iterator itr = vals . iterator ( ) ; itr . hasNext ( ) ; ) { String val = fullTime ( ( String ) itr . next ( ) ) ; try { ret [ i ] = calculateMillis ( val ) ; i + + ; } catch ( NumberFormatException e ) { / / should never happen throw new RuntimeException ( e ) ; } } return ret ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; TimeParam timeParam0 = new TimeParam ( " < lTItG { es7" , " < lTItG { es7" , stringArray0 , false , false ) ; String [ ] stringArray1 = timeParam0 . getAcceptableValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test13 ( ) throws Throwable { TimeParam timeParam0 = new TimeParam ( "O ? LZ ; . ? bt : 000" , "O ? LZ ; . ? bt : 000" , false , false , false ) ; Date date0 = new Date ( ) ; timeParam0 . getDates ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date [ ] getDates ( ) { Collection sVals = getValues ( ) ; Date [ ] dates = new Date [ sVals . size ( ) ] ; int i = 0 ; for ( Iterator itr = sVals . iterator ( ) ; itr . hasNext ( ) ; ) { try { dates [ i ] = stringToDate ( ( String ) itr . next ( ) ) ; i + + ; } catch ( ParseException e ) { / / Should never get here because all values would have been / / parsed as part of validateValue ( ) . throw new RuntimeException ( e ) ; } } return dates ; }
void test14 ( ) throws Throwable { TimeParam timeParam0 = new TimeParam ( "HH : m } m : ss : SSS" , "HH : m } m : ss : SSS" ) ; long [ ] longArray0 = timeParam0 . getMilliValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOptionLabel ( ) { return ( ( optionLabel = = null ) ? "" : optionLabel ) ; }
void test15 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = " ( #U`x" ; TimeParam timeParam0 = new TimeParam ( " ( #U`x" , " ( #U`x" , stringArray0 , false , false ) ; timeParam0 . setValue ( " ( #U`x" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test16 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; TimeParam timeParam0 = new TimeParam ( "38UQ` [ L" , "38UQ` [ L" , stringArray0 , true ) ; timeParam0 . setDefaultSeconds ( 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test19 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; TimeParam timeParam0 = new TimeParam ( "38UQ` [ L" , "38UQ` [ L" , stringArray0 , true ) ; timeParam0 . setDefaultMilliSeconds ( 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultSeconds ( ) { return defaultSeconds ; }
void test20 ( ) throws Throwable { TimeParam timeParam0 = new TimeParam ( " ( #U`Ux" , " ( #U`Ux" , false , false , false ) ; timeParam0 . setAcceptableValues ( ( Collection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test21 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; TimeParam timeParam0 = new TimeParam ( " ( #U`x" , " ( #U`x" , stringArray0 , false , false ) ; Collection < Object > collection0 = timeParam0 . getValues ( ) ; timeParam0 . setAcceptableValues ( collection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test22 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = " ( #U`x" ; TimeParam timeParam0 = new TimeParam ( " ( #U`x" , " ( #U`x" , stringArray0 , false , false ) ; timeParam0 . setValue ( " ( #U`x" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test23 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; TimeParam timeParam0 = new TimeParam ( " ! ~6zX" , " ! ~6zX" , stringArray0 ) ; timeParam0 . setAcceptableValues ( ( String [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultMilliSeconds ( ) { return defaultMilliSeconds ; }
void test24 ( ) throws Throwable { TimeParam timeParam0 = new TimeParam ( "pPC } y : " , "pPC } y : " ) ; String [ ] stringArray0 = timeParam0 . getFullValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultSeconds ( ) { return defaultSeconds ; }
void test0 ( ) throws Throwable { PosixCmdLineParser posixCmdLineParser0 = new PosixCmdLineParser ( ) ; TextUsageFormatter textUsageFormatter0 = ( TextUsageFormatter ) posixCmdLineParser0 . getUsageFormatter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineLength ( ) ; }
void test1 ( ) throws Throwable { PosixCmdLineParser posixCmdLineParser0 = new PosixCmdLineParser ( ) ; HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; LinkedList < OptionTakesNoValue > linkedList0 = new LinkedList < OptionTakesNoValue > ( ) ; posixCmdLineParser0 . parse ( ( String [ ] ) null , ( Map ) hashMap0 , ( List ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test0 ( ) throws Throwable { PdfFileParam pdfFileParam0 = new PdfFileParam ( "Y ! th ? 504#" , "Y ! th ? 504#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test1 ( ) throws Throwable { PdfFileParam pdfFileParam0 = new PdfFileParam ( "^WY5%jx" , "^WY5%jx" , 65509 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTag ( ) { return tag ; }
void test2 ( ) throws Throwable { PdfFileParam pdfFileParam0 = new PdfFileParam ( "ETw ( - e\"kaS" , "ETw ( - e\"kaS" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test3 ( ) throws Throwable { PdfFileParam pdfFileParam0 = new PdfFileParam ( "960gD5" , "960gD5" , 65535 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test4 ( ) throws Throwable { PdfFileParam pdfFileParam0 = new PdfFileParam ( " , #NMftn ? gi" , " , #NMftn ? gi" , ( - 902 ) , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PdfFile getPdfFile ( ) { PdfFile retVal = null ; if ( ! set ) { throw new RuntimeException ( Strings . get ( "PdfFileParam . valueNotSet" , new Object [ ] { tag } ) ) ; } retVal = getPdfFile ( ( String ) values . get ( 0 ) ) ; return retVal ; }
void test5 ( ) throws Throwable { PdfFileParam pdfFileParam0 = new PdfFileParam ( "ETw ( - e\"kaS" , "ETw ( - e\"kaS" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiValued ( ) { return multiValued ; }
void test6 ( ) throws Throwable { PdfFileParam pdfFileParam0 = new PdfFileParam ( "PdfFilParam . w3iteable" , "PdfFilParam . w3iteable" , ( - 172 ) , false , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addValue ( String value ) throws CmdLineException { if ( values . size ( ) > = 1 & & ! multiValued ) { throw new CmdLineException ( Strings . get ( "AbstractParameter . specifiedMoreThanOnce" , new Object [ ] { tag } ) ) ; } validateValue ( value ) ; values . add ( value ) ; set = true ; }
void test7 ( ) throws Throwable { PdfFileParam pdfFileParam0 = new PdfFileParam ( " . pdf : " , " . pdf : " , 65509 , false , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValues ( Collection values ) throws CmdLineException { this . values . clear ( ) ; for ( Iterator itr = values . iterator ( ) ; itr . hasNext ( ) ; ) { addValue ( ( String ) itr . next ( ) ) ; / / let addValue ( ) validate } }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { PdfFileParam pdfFileParam0 = new PdfFileParam ( "$foCYU6" , "$foCYU6" , 65489 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String key , Object [ ] params ) { String ret = missingKeyMsg + key ; try { ret = rb . getString ( key ) ; ret = MessageFormat . format ( ret , params ) ; } catch ( Exception e ) { ret + = " ; params : " ; for ( int i = 0 ; i < params . length ; i + + ) { ret + = " [ " + params [ i ] + " ] " ; } } return ret ; }
void test9 ( ) throws Throwable { PdfFileParam pdfFileParam0 = new PdfFileParam ( "960gD5" , "960gD5" , 65535 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test11 ( ) throws Throwable { PdfFileParam pdfFileParam0 = new PdfFileParam ( "E ] Sx^" , "E ] Sx^" , 65503 , false , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValues ( Collection values ) throws CmdLineException { this . values . clear ( ) ; for ( Iterator itr = values . iterator ( ) ; itr . hasNext ( ) ; ) { addValue ( ( String ) itr . next ( ) ) ; / / let addValue ( ) validate } }
void test12 ( ) throws Throwable { PdfFileParam pdfFileParam0 = new PdfFileParam ( "Y ! th ? 504#" , "Y ! th ? 504#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValue ( String value ) throws CmdLineException { values . clear ( ) ; addValue ( value ) ; / / Let addValue ( ) validate }
void test0 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( "^KM : $rg . ) " , "^KM : $rg . ) " ) ; Collection < Object > collection0 = fileParam0 . getValues ( ) ; DefaultCmdLineHandler defaultCmdLineHandler0 = new DefaultCmdLineHandler ( "^KM : $rg . ) " , "^KM : $rg . ) " , ( Collection ) collection0 , ( Collection ) collection0 ) ; boolean boolean0 = defaultCmdLineHandler0 . processParsedOptions ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processParsedOptions ( boolean parseStatus ) ; / * * * Sets a flag indicating that the program should exit in the case of * a parse error ( after displaying the usage and an error message ) . * This flag defaults to < code > true < / code > . * * @param val < code > true < / code > ( the default ) if the < code > * parse < / code > method should call System . exit ( ) in * case of a parse error , < code > false < / code > if * < code > parse ( ) < / code > should return to the user * for error processing . * @see #parse ( String [ ] ) parse ( ) * / void setDieOnParseError ( boolean val ) { handler . setDieOnParseError ( val ) ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; StringParam stringParam0 = new StringParam ( "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , stringArray0 , true , true ) ; Collection < Object > collection0 = stringParam0 . getValues ( ) ; VersionCmdLineHandler versionCmdLineHandler0 = new VersionCmdLineHandler ( "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , ( Collection ) collection0 , ( Collection ) collection0 ) ; versionCmdLineHandler0 . setCmdName ( "3NzJslFe0`3WUqj" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCmdDesc ( ) { return handler . getCmdDesc ( ) ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; StringParam stringParam0 = new StringParam ( "c6_ [ 9XVu / i" , "c6_ [ 9XVu / i" , stringArray0 , true , false ) ; Collection < Object > collection0 = stringParam0 . getValues ( ) ; HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler ( "c6_ [ 9XVu / i" , "c6_ [ 9XVu / i" , "c6_ [ 9XVu / i" , "c6_ [ 9XVu / i" , ( Collection ) collection0 , ( Collection ) collection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection getOptions ( ) { return handler . getOptions ( ) ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; StringParam stringParam0 = new StringParam ( "fFU2 , 3~2 ] Uv\"\"t" , "02lEk . MJ2c } " , stringArray0 , false , false ) ; Collection < Object > collection0 = stringParam0 . getValues ( ) ; DefaultCmdLineHandler defaultCmdLineHandler0 = new DefaultCmdLineHandler ( "fFU2 , 3~2 ] Uv\"\"t" , "fFU2 , 3~2 ] Uv\"\"t" , ( Collection ) collection0 , ( Collection ) collection0 ) ; Parameter parameter0 = defaultCmdLineHandler0 . getArg ( "fFU2 , 3~2 ] Uv\"\"t" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Parameter getArg ( String tag ) { return handler . getArg ( tag ) ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; StringParam stringParam0 = new StringParam ( "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , stringArray0 , true , true ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 10 ) ; Collection < Object > collection0 = stringParam0 . getValues ( ) ; HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler ( "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , ( Collection ) collection0 , ( Collection ) collection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDieOnParseError ( ) { return handler . getDieOnParseError ( ) ; }
void test5 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( "lEOJL0`adK#" , "lEOJL0`adK#" , false ) ; Collection < Object > collection0 = fileParam0 . getValues ( ) ; DefaultCmdLineHandler defaultCmdLineHandler0 = new DefaultCmdLineHandler ( "lEOJL0`adK#" , "lEOJL0`adK#" , ( Collection ) collection0 , ( Collection ) collection0 ) ; defaultCmdLineHandler0 . addArg ( ( Parameter ) fileParam0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test6 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( "lEOJL0`adK#" , "lEOJL0`adK#" , false ) ; Collection < Object > collection0 = fileParam0 . getValues ( ) ; DefaultCmdLineHandler defaultCmdLineHandler0 = new DefaultCmdLineHandler ( "lEOJL0`adK#" , "lEOJL0`adK#" , ( Collection ) collection0 , ( Collection ) collection0 ) ; Parameter [ ] parameterArray0 = defaultCmdLineHandler0 . getCustomOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Parameter [ ] getCustomOptions ( ) { return customOptions ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; StringParam stringParam0 = new StringParam ( "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , stringArray0 , true , true ) ; Collection < Object > collection0 = stringParam0 . getValues ( ) ; VersionCmdLineHandler versionCmdLineHandler0 = new VersionCmdLineHandler ( "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , ( Collection ) collection0 , ( Collection ) collection0 ) ; PosixCmdLineParser posixCmdLineParser0 = ( PosixCmdLineParser ) versionCmdLineHandler0 . getParser ( ) ; versionCmdLineHandler0 . setParser ( ( CmdLineParser ) posixCmdLineParser0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCmdDesc ( ) { return handler . getCmdDesc ( ) ; }
void test8 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; StringParam stringParam0 = new StringParam ( "fFU2 , 3~2 ] Uv\"\"t" , "02lEk . MJ2c } " , stringArray0 , false , false ) ; Collection < Object > collection0 = stringParam0 . getValues ( ) ; DefaultCmdLineHandler defaultCmdLineHandler0 = new DefaultCmdLineHandler ( "fFU2 , 3~2 ] Uv\"\"t" , "fFU2 , 3~2 ] Uv\"\"t" , ( Collection ) collection0 , ( Collection ) collection0 ) ; String string0 = defaultCmdLineHandler0 . getCmdName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCmdName ( ) { return handler . getCmdName ( ) ; }
void test10 ( ) throws Throwable { Parameter [ ] parameterArray0 = new Parameter [ 1 ] ; BooleanParam booleanParam0 = new BooleanParam ( "%fw7oE_UFN ) sGCFq" , "%fw7oE_UFN ) sGCFq" , true ) ; parameterArray0 [ 0 ] = ( Parameter ) booleanParam0 ; HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler ( "%fw7oE_UFN ) sGCFq" , "%fw7oE_UFN ) sGCFq" , "%fw7oE_UFN ) sGCFq" , "%fw7oE_UFN ) sGCFq" , parameterArray0 , parameterArray0 ) ; String string0 = helpCmdLineHandler0 . getParseError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getParseError ( ) { return handler . getParseError ( ) ; }
void test11 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; StringParam stringParam0 = new StringParam ( "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , stringArray0 , true , true ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 10 ) ; Collection < Object > collection0 = stringParam0 . getValues ( ) ; HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler ( "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , ( Collection ) collection0 , ( Collection ) collection0 ) ; List < Object > list0 = helpCmdLineHandler0 . getArgs ( ) ; LoggerCmdLineHandler loggerCmdLineHandler0 = new LoggerCmdLineHandler ( ( OutputStream ) byteArrayOutputStream0 , "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , ( Collection ) list0 , ( Collection ) list0 ) ; Parameter parameter0 = loggerCmdLineHandler0 . getOption ( "3NzJslFe0`3WUqj" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Parameter getOption ( String tag ) { return handler . getOption ( tag ) ; }
void test12 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; StringParam stringParam0 = new StringParam ( "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , stringArray0 , true , true ) ; Collection < Object > collection0 = stringParam0 . getValues ( ) ; HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler ( "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , "3NzJslFe0`3WUqj" , ( Collection ) collection0 , ( Collection ) collection0 ) ; helpCmdLineHandler0 . setCmdDesc ( "3NzJslFe0`3WUqj" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCmdDesc ( ) { return handler . getCmdDesc ( ) ; }
void test13 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; StringParam stringParam0 = new StringParam ( "fFU2 , 3~2 ] Uv\"\"t" , "02lEk . MJ2c } " , stringArray0 , false , false ) ; Collection < Object > collection0 = stringParam0 . getValues ( ) ; DefaultCmdLineHandler defaultCmdLineHandler0 = new DefaultCmdLineHandler ( "fFU2 , 3~2 ] Uv\"\"t" , "fFU2 , 3~2 ] Uv\"\"t" , ( Collection ) collection0 , ( Collection ) collection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDieOnParseError ( ) { return handler . getDieOnParseError ( ) ; }
void test14 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; StringParam stringParam0 = new StringParam ( "c6_ [ 9XVu / i" , "c6_ [ 9XVu / i" , stringArray0 , true , false ) ; Collection < Object > collection0 = stringParam0 . getValues ( ) ; HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler ( "c6_ [ 9XVu / i" , "c6_ [ 9XVu / i" , "c6_ [ 9XVu / i" , "c6_ [ 9XVu / i" , ( Collection ) collection0 , ( Collection ) collection0 ) ; VersionCmdLineHandler versionCmdLineHandler0 = new VersionCmdLineHandler ( "c6_ [ 9XVu / i" , ( CmdLineHandler ) helpCmdLineHandler0 ) ; versionCmdLineHandler0 . setParseError ( " ] il ZuNe@ } ZJWq | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getParseError ( ) { return handler . getParseError ( ) ; }
void test15 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; StringParam stringParam0 = new StringParam ( "c6_ [ 9XVu / i" , "c6_ [ 9XVu / i" , stringArray0 , true , false ) ; Collection < Object > collection0 = stringParam0 . getValues ( ) ; HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler ( "c6_ [ 9XVu / i" , "c6_ [ 9XVu / i" , "c6_ [ 9XVu / i" , "c6_ [ 9XVu / i" , ( Collection ) collection0 , ( Collection ) collection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsage ( boolean hidden ) { return handler . getUsage ( hidden ) ; }
void test16 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( "lEOJL0`adK#" , "lEOJL0`adK#" , false ) ; Collection < Object > collection0 = fileParam0 . getValues ( ) ; DefaultCmdLineHandler defaultCmdLineHandler0 = new DefaultCmdLineHandler ( "lEOJL0`adK#" , "lEOJL0`adK#" , ( Collection ) collection0 , ( Collection ) collection0 ) ; String string0 = defaultCmdLineHandler0 . getCmdDesc ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCmdDesc ( ) { return handler . getCmdDesc ( ) ; }
void test18 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; StringParam stringParam0 = new StringParam ( "fFU2 , 3~2 ] Uv\"\"t" , "02lEk . MJ2c } " , stringArray0 , false , false ) ; Parameter [ ] parameterArray0 = new Parameter [ 7 ] ; parameterArray0 [ 0 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 1 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 2 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 3 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 4 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 5 ] = ( Parameter ) stringParam0 ; parameterArray0 [ 6 ] = ( Parameter ) stringParam0 ; HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler ( "fFU2 , 3~2 ] Uv\"\"t" , "02lEk . MJ2c } " , "02lEk . MJ2c } " , "fFU2 , 3~2 ] Uv\"\"t" , parameterArray0 , parameterArray0 ) ; helpCmdLineHandler0 . setOptions ( parameterArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCmdDesc ( ) { return handler . getCmdDesc ( ) ; }
void test0 ( ) throws Throwable { BooleanParam booleanParam0 = new BooleanParam ( "0^I ; X ! D * 1%4" , "0^I ; X ! D * 1%4" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test1 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( "sJ2 : N > > ; " , "sJ2 : N > > ; " , 65514 , false , false ) ; String [ ] stringArray0 = fileParam0 . getAcceptableValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getAcceptableValues ( ) { return acceptableTimes ; }
void test2 ( ) throws Throwable { BooleanParam booleanParam0 = new BooleanParam ( "7B4 . [ } * e ! ) qw4 ( wm ; " , "7B4 . [ } * e ! ) qw4 ( wm ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test3 ( ) throws Throwable { FileParam fileParam0 = new FileParam ( "sJ2 : N > > ; " , "sJ2 : N > > ; " , 65514 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; TimeParam timeParam0 = new TimeParam ( " | 9emfo > jpv`PU ; #Q" , " | 9emfo > jpv`PU ; #Q" , stringArray0 , true , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiValued ( ) { return multiValued ; }
void test5 ( ) throws Throwable { DateParam dateParam0 = new DateParam ( "PdfFileParam . a" , "PdfFileParam . a" , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIgnoreRequired ( ) { return ignoreRequired ; }
void test6 ( ) throws Throwable { TimeParam timeParam0 = new TimeParam ( "PdfFileParam . a" , "PdfFileParam . a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiValued ( ) { return multiValued ; }
void test7 ( ) throws Throwable { DateParam dateParam0 = new DateParam ( "PdfFileParam . a" , "PdfFileParam . a" , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiValued ( ) { return multiValued ; }
void test8 ( ) throws Throwable { Date [ ] dateArray0 = new Date [ 1 ] ; Date date0 = new Date ( ) ; dateArray0 [ 0 ] = date0 ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiValued ( ) { return multiValued ; }
void test9 ( ) throws Throwable { BooleanParam booleanParam0 = new BooleanParam ( "`p$ AC ; l > ! : `KY`" , "`p$ AC ; l > ! : `KY`" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiValued ( ) { return multiValued ; }
void test10 ( ) throws Throwable { PdfFileParam pdfFileParam0 = new PdfFileParam ( "PdfFileParam . a" , "PdfFileParam . a" , ( - 720 ) , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiValued ( ) { return multiValued ; }
void test11 ( ) throws Throwable { LongParam longParam0 = new LongParam ( "`p$ AC ; l > ! : `KY`" , "`p$ AC ; l > ! : `KY`" , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiValued ( ) { return multiValued ; }
void test16 ( ) throws Throwable { StringParam stringParam0 = new StringParam ( "MM / dd / yyyy" , "MM / dd / yyyy" , ( String [ ] ) null , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( values . size ( ) = = 0 ) { return null ; } return ( String ) values . get ( 0 ) ; }
void test17 ( ) throws Throwable { DateTimeParam dateTimeParam0 = new DateTimeParam ( "`p$ AC ; l > ! : `KY`" , "`p$ AC ; l > ! : `KY`" , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test18 ( ) throws Throwable { BooleanParam booleanParam0 = new BooleanParam ( "7B4 . [ } * e ! ) qw4 ( wm ; " , "7B4 . [ } * e ! ) qw4 ( wm ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test19 ( ) throws Throwable { int [ ] intArray0 = new int [ 2 ] ; IntParam intParam0 = new IntParam ( " | 9emfo > jpv`PU ; #Q" , " | 9emfo > jpv`PU ; #Q" , intArray0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test20 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; TimeParam timeParam0 = new TimeParam ( " | 9emfo > jpvRx`PU ; #Q" , " | 9emfo > jpvRx`PU ; #Q" , stringArray0 , false , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValues ( Collection values ) throws CmdLineException { this . values . clear ( ) ; for ( Iterator itr = values . iterator ( ) ; itr . hasNext ( ) ; ) { addValue ( ( String ) itr . next ( ) ) ; / / let addValue ( ) validate } }
void test21 ( ) throws Throwable { TimeParam timeParam0 = new TimeParam ( "PdfFileParam . a" , "PdfFileParam . a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMultiValued ( ) { return multiValued ; }
void test22 ( ) throws Throwable { int [ ] intArray0 = new int [ 2 ] ; IntParam intParam0 = new IntParam ( " | 9emfo > jpv`PU ; #Q" , " | 9emfo > jpv`PU ; #Q" , intArray0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValues ( Collection values ) throws CmdLineException { this . values . clear ( ) ; for ( Iterator itr = values . iterator ( ) ; itr . hasNext ( ) ; ) { addValue ( ( String ) itr . next ( ) ) ; / / let addValue ( ) validate } }
void test23 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; TimeParam timeParam0 = new TimeParam ( " | 9emfo > jpv`PU ; #Q" , " | 9emfo > jpv`PU ; #Q" , stringArray0 , true , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOptional ( ) { return optional ; }
void test24 ( ) throws Throwable { String [ ] stringArray0 = new String [ 5 ] ; TimeParam timeParam0 = new TimeParam ( "hw } 4\"u" , "hw } 4\"u" , stringArray0 , false , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getDate ( ) { String sVal = getValue ( ) ; Date date = null ; if ( sVal ! = null ) { try { date = stringToDate ( sVal ) ; } catch ( ParseException e ) { / / Should never get here because all values would have been / / parsed as part of validateValue ( ) . throw new RuntimeException ( e ) ; } } return date ; }
void test25 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; StringParam stringParam0 = new StringParam ( " | 9emfo > jpvRx`PU ; #Q" , " | 9emfo > jpvRx`PU ; #Q" , stringArray0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOptionLabel ( ) { return ( ( optionLabel = = null ) ? "" : optionLabel ) ; }
void test0 ( ) throws Throwable { IntParam intParam0 = new IntParam ( "e_ ) dZu8I sVgldo ] > " , "e_ ) dZu8I sVgldo ] > " , ( - 61 ) , 1336 , false , false , true ) ; Parameter [ ] parameterArray0 = new Parameter [ 8 ] ; parameterArray0 [ 0 ] = ( Parameter ) intParam0 ; parameterArray0 [ 1 ] = ( Parameter ) intParam0 ; parameterArray0 [ 2 ] = ( Parameter ) intParam0 ; parameterArray0 [ 3 ] = ( Parameter ) intParam0 ; parameterArray0 [ 4 ] = ( Parameter ) intParam0 ; parameterArray0 [ 5 ] = ( Parameter ) intParam0 ; parameterArray0 [ 6 ] = ( Parameter ) intParam0 ; parameterArray0 [ 7 ] = ( Parameter ) intParam0 ; DefaultCmdLineHandler defaultCmdLineHandler0 = new DefaultCmdLineHandler ( "e_ ) dZu8I sVgldo ] > " , "e_ ) dZu8I sVgldo ] > " , parameterArray0 , parameterArray0 ) ; VersionCmdLineHandler versionCmdLineHandler0 = new VersionCmdLineHandler ( "e_ ) dZu8I sVgldo ] > " , ( CmdLineHandler ) defaultCmdLineHandler0 ) ; PosixCmdLineParser posixCmdLineParser0 = ( PosixCmdLineParser ) versionCmdLineHandler0 . getParser ( ) ; HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler ( "e_ ) dZu8I sVgldo ] > " , "e_ ) dZu8I sVgldo ] > " , "e_ ) dZu8I sVgldo ] > " , parameterArray0 , parameterArray0 , ( CmdLineParser ) posixCmdLineParser0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCmdDesc ( ) { return handler . getCmdDesc ( ) ; }
void test1 ( ) throws Throwable { TimeParam timeParam0 = new TimeParam ( "5" , "0 udcX'rVdlL5F" , true , true ) ; Collection < Object > collection0 = timeParam0 . getValues ( ) ; HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler ( "5" , "5" , "0 udcX'rVdlL5F" , "@8lJ" , ( Collection ) collection0 , ( Collection ) collection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDieOnParseError ( ) { return handler . getDieOnParseError ( ) ; }
void test2 ( ) throws Throwable { IntParam intParam0 = new IntParam ( "e_ ) dZu8I sVgldo ] > " , "e_ ) dZu8I sVgldo ] > " , ( - 61 ) , 1336 , false , false , false ) ; Collection < Object > collection0 = intParam0 . getValues ( ) ; HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler ( "e_ ) dZu8I sVgldo ] > " , "e_ ) dZu8I sVgldo ] > " , "e_ ) dZu8I sVgldo ] > " , ( Collection ) collection0 , ( Collection ) collection0 ) ; boolean boolean0 = helpCmdLineHandler0 . processParsedOptions ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processParsedOptions ( boolean parseStatus ) ; / * * * Sets a flag indicating that the program should exit in the case of * a parse error ( after displaying the usage and an error message ) . * This flag defaults to < code > true < / code > . * * @param val < code > true < / code > ( the default ) if the < code > * parse < / code > method should call System . exit ( ) in * case of a parse error , < code > false < / code > if * < code > parse ( ) < / code > should return to the user * for error processing . * @see #parse ( String [ ] ) parse ( ) * / void setDieOnParseError ( boolean val ) { handler . setDieOnParseError ( val ) ; }
void test3 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler ( " ! PwFW [ " , " ! PwFW [ " , " ! PwFW [ " , " ! PwFW [ " , " ! PwFW [ " , ( Collection ) linkedList0 , ( Collection ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getParseError ( ) { return handler . getParseError ( ) ; }
void test0 ( ) throws Throwable { long [ ] longArray0 = new long [ 6 ] ; LongParam longParam0 = new LongParam ( "MO t#Z%xMN * } z + @#" , "MO t#Z%xMN * } z + @#" , longArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMin ( ) { return min ; }
void test1 ( ) throws Throwable { long [ ] longArray0 = new long [ 1 ] ; LongParam longParam0 = new LongParam ( "goh@H'Os" , "goh@H'Os" , longArray0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTag ( ) { return tag ; }
void test2 ( ) throws Throwable { LongParam longParam0 = new LongParam ( "0 ( cmvdMaxM1%n" , "0 ( cmvdMaxM1%n" , 14L , 14L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateValue ( String val ) throws CmdLineException { / / Strip off any leading 0s before calling / / AbstractParameter . validateValue ( ) because the Strings we sent / / as acceptable values were without . int offset = 0 ; while ( val . startsWith ( "0" , offset ) ) { offset + + ; } super . validateValue ( val . substring ( offset ) ) ; CmdLineException exception = new CmdLineException ( Strings . get ( "IntParam . validValues" , new Object [ ] { tag , new Integer ( min ) , new Integer ( max ) } ) ) ; int intVal = 0 ; try { intVal = Integer . parseInt ( val ) ; } catch ( NumberFormatException e ) { throw exception ; } if ( intVal < min | | intVal > max ) { throw exception ; } }
void test3 ( ) throws Throwable { LongParam longParam0 = new LongParam ( "goh@H'Os" , "goh@H'Os" , 766L , 766L , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTag ( ) { return tag ; }
void test4 ( ) throws Throwable { LongParam longParam0 = new LongParam ( "goh@H'Os" , "goh@H'Os" , 766L , 766L , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOptionLabel ( ) { return ( ( optionLabel = = null ) ? "" : optionLabel ) ; }
void test5 ( ) throws Throwable { long [ ] longArray0 = new long [ 4 ] ; LongParam longParam0 = new LongParam ( " ; prams^ " , " ; prams^ " , longArray0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTag ( ) { return tag ; }
void test6 ( ) throws Throwable { LongParam longParam0 = new LongParam ( "Ge5w$01" , "Ge5w$01" , 10L , 10L , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTag ( ) { return tag ; }
void test8 ( ) throws Throwable { LongParam longParam0 = new LongParam ( " ] WVN%je < iQdlxyz ) '2" , " ] WVN%je < iQdlxyz ) '2" , 0L , 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long longValue ( ) { if ( ! set ) { throw new RuntimeException ( Strings . get ( "LongParam . valueNotSet" , new Object [ ] { tag } ) ) ; } return Long . parseLong ( ( String ) values . get ( 0 ) ) ; }
void test9 ( ) throws Throwable { LongParam longParam0 = new LongParam ( "JsF * JE > L0" , "JsF * JE > L0" , 9223372036854775807L , 9223372036854775807L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMax ( int max ) { if ( min > max ) { throw new IllegalArgumentException ( Strings . get ( "IntParam . maxLessThanMin" , new Object [ ] { tag } ) ) ; } this . max = max ; }
void test10 ( ) throws Throwable { LongParam longParam0 = new LongParam ( " ] WVN%je < iQdl } xyz ) '2" , " ] WVN%je < iQdl } xyz ) '2" , 0L , 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; File file0 = pdfFile0 . getFile ( ) ; pdfFile0 . setFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test1 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; String string0 = pdfFile0 . getPassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return password ; }
void test2 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; byte [ ] byteArray0 = pdfFile0 . getPasswordBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getPasswordBytes ( ) { return ( password ! = null ) ? password . getBytes ( ) : null ; }
void test3 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; File file0 = pdfFile0 . getFile ( ) ; PdfFile pdfFile1 = new PdfFile ( file0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test4 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; byte [ ] byteArray0 = pdfFile0 . getPasswordBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getPasswordBytes ( ) { return ( password ! = null ) ? password . getBytes ( ) : null ; }
void test5 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; String string0 = pdfFile0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test6 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; String string0 = pdfFile0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test7 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; PdfFile pdfFile1 = new PdfFile ( ) ; boolean boolean0 = pdfFile0 . equals ( ( Object ) pdfFile1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test8 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; boolean boolean0 = pdfFile0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test9 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; Object object0 = new Object ( ) ; boolean boolean0 = pdfFile0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test10 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; PdfFile pdfFile1 = new PdfFile ( ) ; boolean boolean0 = pdfFile1 . equals ( ( Object ) pdfFile0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test11 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; PdfFile pdfFile1 = new PdfFile ( "" , "" ) ; boolean boolean0 = pdfFile0 . equals ( ( Object ) pdfFile1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test12 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( "a ; ( J = " , "a ; ( J = " ) ; PdfFile pdfFile1 = new PdfFile ( "a ; ( J = " , "a ; ( J = " ) ; boolean boolean0 = pdfFile0 . equals ( ( Object ) pdfFile1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test13 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; PdfFile pdfFile1 = new PdfFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test14 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; PdfFile pdfFile1 = new PdfFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test0 ( ) throws Throwable { JButton jButton0 = new JButton ( ( Icon ) null ) ; EnterDoClickListener enterDoClickListener0 = new EnterDoClickListener ( jButton0 ) ; enterDoClickListener0 . setButton ( jButton0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setButton ( JButton button ) { this . button = button ; }
void test1 ( ) throws Throwable { JButton jButton0 = new JButton ( ) ; EnterDoClickListener enterDoClickListener0 = new EnterDoClickListener ( jButton0 ) ; JButton jButton1 = enterDoClickListener0 . getButton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JButton getButton ( ) { return button ; }
void test3 ( ) throws Throwable { JButton jButton0 = new JButton ( "" , ( Icon ) null ) ; EnterDoClickListener enterDoClickListener0 = new EnterDoClickListener ( jButton0 ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) jButton0 , 8 , ( - 1663L ) , 600 , 8 , 'S' ) ; enterDoClickListener0 . keyPressed ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyPressed ( KeyEvent e ) { if ( button ! = null ) { if ( e . getKeyCode ( ) = = KeyEvent . VK_ENTER ) { button . doClick ( ) ; } } }
void test0 ( ) throws Throwable { Configuration configuration0 = Configuration . getInstance ( ) ; XMLConfig xMLConfig0 = configuration0 . getXmlConfigObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" XMLConfig getXmlConfigObject ( ) { return xmlConfigObject ; }
void test3 ( ) throws Throwable { Configuration configuration0 = Configuration . getInstance ( ) ; ResourceBundle resourceBundle0 = configuration0 . getI18nResourceBundle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResourceBundle getI18nResourceBundle ( ) { return i18n_messages ; }
void test4 ( ) throws Throwable { Configuration configuration0 = Configuration . getInstance ( ) ; MainConsole mainConsole0 = configuration0 . getMainConsole ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MainConsole getMainConsole ( ) { return mc ; }
void test7 ( ) throws Throwable { Configuration configuration0 = Configuration . getInstance ( ) ; Vector < Object > vector0 = new Vector < Object > ( ) ; configuration0 . setLanguageList ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( ( bookmarkName = = null | | bookmarkName . length ( ) = = 0 ) & & ( fileNumber = = null ) & & ( pageNumber = = null ) ) ; }
void test0 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( ) ; RadioListener radioListener0 = new RadioListener ( ( SplitMainGUI ) null , ( JTextField ) jPasswordField0 , ( JTextField ) jPasswordField0 , ( byte ) 0 ) ; Integer integer0 = JLayeredPane . PALETTE_LAYER ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) integer0 , ( int ) integer0 , "" , ( long ) ( byte ) 0 , ( int ) integer0 ) ; radioListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { switch ( policy ) { case RadioListener . DISABLE_ALL : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; case RadioListener . DISABLE_FIRST : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) { second_text . setEnabled ( true ) ; second_text . requestFocus ( ) ; } break ; case RadioListener . DISABLE_SECOND : if ( first_text ! = null ) { first_text . setEnabled ( true ) ; first_text . requestFocus ( ) ; } if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; default : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; } / / sets the split type if ( container instanceof it . pdfsam . plugin . split . GUI . SplitMainGUI ) { container . setSplitType ( e . getActionCommand ( ) ) ; } }
void test1 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( ) ; RadioListener radioListener0 = new RadioListener ( ( SplitMainGUI ) null , ( JTextField ) jPasswordField0 , ( JTextField ) jPasswordField0 , ( byte ) 1 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "jpeg" , ( int ) ( byte ) 1 , "jpeg" , ( long ) ( byte ) 1 , ( int ) ( byte ) 1 ) ; radioListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { switch ( policy ) { case RadioListener . DISABLE_ALL : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; case RadioListener . DISABLE_FIRST : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) { second_text . setEnabled ( true ) ; second_text . requestFocus ( ) ; } break ; case RadioListener . DISABLE_SECOND : if ( first_text ! = null ) { first_text . setEnabled ( true ) ; first_text . requestFocus ( ) ; } if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; default : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; } / / sets the split type if ( container instanceof it . pdfsam . plugin . split . GUI . SplitMainGUI ) { container . setSplitType ( e . getActionCommand ( ) ) ; } }
void test2 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( ) ; RadioListener radioListener0 = new RadioListener ( ( SplitMainGUI ) null , ( JTextField ) jPasswordField0 , ( JTextField ) jPasswordField0 , ( byte ) 2 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "horizontalAlignment" , ( int ) ( byte ) 2 , "horizontalAlignment" , ( int ) ( byte ) 2 ) ; radioListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { switch ( policy ) { case RadioListener . DISABLE_ALL : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; case RadioListener . DISABLE_FIRST : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) { second_text . setEnabled ( true ) ; second_text . requestFocus ( ) ; } break ; case RadioListener . DISABLE_SECOND : if ( first_text ! = null ) { first_text . setEnabled ( true ) ; first_text . requestFocus ( ) ; } if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; default : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; } / / sets the split type if ( container instanceof it . pdfsam . plugin . split . GUI . SplitMainGUI ) { container . setSplitType ( e . getActionCommand ( ) ) ; } }
void test3 ( ) throws Throwable { ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "default" , 975 , " & wLdQ } 00 ; h2" ) ; RadioListener radioListener0 = new RadioListener ( ( SplitMainGUI ) null , ( JTextField ) null , ( JTextField ) null , ( byte ) 89 ) ; radioListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { switch ( policy ) { case RadioListener . DISABLE_ALL : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; case RadioListener . DISABLE_FIRST : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) { second_text . setEnabled ( true ) ; second_text . requestFocus ( ) ; } break ; case RadioListener . DISABLE_SECOND : if ( first_text ! = null ) { first_text . setEnabled ( true ) ; first_text . requestFocus ( ) ; } if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; default : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; } / / sets the split type if ( container instanceof it . pdfsam . plugin . split . GUI . SplitMainGUI ) { container . setSplitType ( e . getActionCommand ( ) ) ; } }
void test4 ( ) throws Throwable { RadioListener radioListener0 = new RadioListener ( ( SplitMainGUI ) null , ( JTextField ) null , ( JTextField ) null , ( byte ) 0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "default" , 975 , " & wLdQ } 00 ; h2" ) ; radioListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { switch ( policy ) { case RadioListener . DISABLE_ALL : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; case RadioListener . DISABLE_FIRST : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) { second_text . setEnabled ( true ) ; second_text . requestFocus ( ) ; } break ; case RadioListener . DISABLE_SECOND : if ( first_text ! = null ) { first_text . setEnabled ( true ) ; first_text . requestFocus ( ) ; } if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; default : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; } / / sets the split type if ( container instanceof it . pdfsam . plugin . split . GUI . SplitMainGUI ) { container . setSplitType ( e . getActionCommand ( ) ) ; } }
void test5 ( ) throws Throwable { ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "default" , 975 , " & wLdQ } 00 ; h2" ) ; RadioListener radioListener0 = new RadioListener ( ( SplitMainGUI ) null , ( JTextField ) null , ( JTextField ) null , ( byte ) 1 ) ; radioListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test6 ( ) throws Throwable { ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "horizontalAlignment" , ( int ) ( byte ) ( - 8 ) , "horizontalAlignment" , ( int ) ( byte ) ( - 8 ) ) ; JTextField jTextField0 = new JTextField ( ) ; RadioListener radioListener0 = new RadioListener ( ( SplitMainGUI ) null , jTextField0 , jTextField0 , ( byte ) ( - 8 ) ) ; radioListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { switch ( policy ) { case RadioListener . DISABLE_ALL : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; case RadioListener . DISABLE_FIRST : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) { second_text . setEnabled ( true ) ; second_text . requestFocus ( ) ; } break ; case RadioListener . DISABLE_SECOND : if ( first_text ! = null ) { first_text . setEnabled ( true ) ; first_text . requestFocus ( ) ; } if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; default : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; } / / sets the split type if ( container instanceof it . pdfsam . plugin . split . GUI . SplitMainGUI ) { container . setSplitType ( e . getActionCommand ( ) ) ; } }
void test0 ( ) throws Throwable { JSplitRadioButton jSplitRadioButton0 = new JSplitRadioButton ( "" ) ; String string0 = jSplitRadioButton0 . getSplitCommand ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSplitCommand ( ) { return split_command ; }
void test1 ( ) throws Throwable { JSplitRadioButton jSplitRadioButton0 = new JSplitRadioButton ( "" ) ; jSplitRadioButton0 . setSplitCommand ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSplitCommand ( ) { return split_command ; }
void test0 ( ) throws Throwable { JMergeTable jMergeTable0 = new JMergeTable ( ) ; MoveActionListener moveActionListener0 = new MoveActionListener ( jMergeTable0 , ( MergeMainGUI ) null , ( byte ) 30 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "javax . swing . JTextArea [ , 0 , 0 , 0x0 , invalid , layout = javax . swing . plaf . basic . BasicTextUI$UpdateHandler , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = javax . swing . plaf . basic . BasicBorders$MarginBorder@a0526a8 , flags = 296 , maximumSize = , minimumSize = , preferredSize = , caretColor = sun . swing . PrintColorUIResource [ r = 51 , g = 51 , b = 51 ] , disabledTextColor = javax . swing . plaf . ColorUIResource [ r = 184 , g = 207 , b = 229 ] , editable = true , margin = javax . swing . plaf . InsetsUIResource [ top = 0 , left = 0 , bottom = 0 , right = 0 ] , selectedTextColor = sun . swing . PrintColorUIResource [ r = 51 , g = 51 , b = 51 ] , selectionColor = javax . swing . plaf . ColorUIResource [ r = 184 , g = 207 , b = 229 ] , colums = 0 , columWidth = 0 , rows = 0 , rowHeight = 0 , word = false , wrap = false ] " , ( int ) ( byte ) 30 , "javax . swing . JTextArea [ , 0 , 0 , 0x0 , invalid , layout = javax . swing . plaf . basic . BasicTextUI$UpdateHandler , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = javax . swing . plaf . basic . BasicBorders$MarginBorder@a0526a8 , flags = 296 , maximumSize = , minimumSize = , preferredSize = , caretColor = sun . swing . PrintColorUIResource [ r = 51 , g = 51 , b = 51 ] , disabledTextColor = javax . swing . plaf . ColorUIResource [ r = 184 , g = 207 , b = 229 ] , editable = true , margin = javax . swing . plaf . InsetsUIResource [ top = 0 , left = 0 , bottom = 0 , right = 0 ] , selectedTextColor = sun . swing . PrintColorUIResource [ r = 51 , g = 51 , b = 51 ] , selectionColor = javax . swing . plaf . ColorUIResource [ r = 184 , g = 207 , b = 229 ] , colums = 0 , columWidth = 0 , rows = 0 , rowHeight = 0 , word = false , wrap = false ] " , ( int ) ( byte ) 30 ) ; moveActionListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { switch ( policy ) { case RadioListener . DISABLE_ALL : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; case RadioListener . DISABLE_FIRST : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) { second_text . setEnabled ( true ) ; second_text . requestFocus ( ) ; } break ; case RadioListener . DISABLE_SECOND : if ( first_text ! = null ) { first_text . setEnabled ( true ) ; first_text . requestFocus ( ) ; } if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; default : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; } / / sets the split type if ( container instanceof it . pdfsam . plugin . split . GUI . SplitMainGUI ) { container . setSplitType ( e . getActionCommand ( ) ) ; } }
void test0 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; String [ ] stringArray0 = new String [ 10 ] ; mergeTableModel0 . setColumnNames ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { try { return data . size ( ) ; } catch ( NullPointerException e ) { return 0 ; } }
void test3 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; String [ ] stringArray0 = mergeTableModel0 . getToolTips ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getToolTips ( ) { return toolTips ; }
void test4 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; int int0 = mergeTableModel0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { try { return data . size ( ) ; } catch ( NullPointerException e ) { return 0 ; } }
void test5 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; mergeTableModel0 . clearData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return SHOWED_COLS ; }
void test6 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return SHOWED_COLS ; }
void test8 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int row , int column ) { if ( PAGESELECTION = = column ) { return true ; } else { return false ; } }
void test9 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int row , int column ) { if ( PAGESELECTION = = column ) { return true ; } else { return false ; } }
void test13 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; mergeTableModel0 . setValueAt ( ( Object ) null , 0 , 982 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return SHOWED_COLS ; }
void test14 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { try { return data . size ( ) ; } catch ( NullPointerException e ) { return 0 ; } }
void test15 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { try { return data . size ( ) ; } catch ( NullPointerException e ) { return 0 ; } }
void test16 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; mergeTableModel0 . addRowAt ( ( - 1494 ) , ( MergeItemType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { try { return data . size ( ) ; } catch ( NullPointerException e ) { return 0 ; } }
void test17 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { try { return data . size ( ) ; } catch ( NullPointerException e ) { return 0 ; } }
void test18 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; mergeTableModel0 . moveUpRow ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { try { return data . size ( ) ; } catch ( NullPointerException e ) { return 0 ; } }
void test20 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; int [ ] intArray0 = new int [ 10 ] ; mergeTableModel0 . moveUpRows ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { try { return data . size ( ) ; } catch ( NullPointerException e ) { return 0 ; } }
void test22 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; mergeTableModel0 . moveDownRow ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { try { return data . size ( ) ; } catch ( NullPointerException e ) { return 0 ; } }
void test24 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; int [ ] intArray0 = new int [ 1 ] ; mergeTableModel0 . moveDownRows ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { try { return data . size ( ) ; } catch ( NullPointerException e ) { return 0 ; } }
void test25 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { try { return data . size ( ) ; } catch ( NullPointerException e ) { return 0 ; } }
void test26 ( ) throws Throwable { MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { try { return data . size ( ) ; } catch ( NullPointerException e ) { return 0 ; } }
void test2 ( ) throws Throwable { TableTransferHandler tableTransferHandler0 = new TableTransferHandler ( ) ; JPasswordField jPasswordField0 = new JPasswordField ( "" ) ; tableTransferHandler0 . importMergeItem ( ( JComponent ) jPasswordField0 , ( ArrayList ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void importMergeItem ( JComponent c , ArrayList list_item ) { if ( ! ( c instanceof JMergeTable ) ) { return ; } JMergeTable target_merge_table = ( JMergeTable ) c ; MergeTableModel model = ( MergeTableModel ) ( target_merge_table . getModel ( ) ) ; int index = target_merge_table . getSelectedRow ( ) ; / / Prevent the user from dropping data back on itself . / / For example , if the user is moving rows #4 , #5 , #6 and #7 and / / attempts to insert the rows after row #5 , this would / / be problematic when removing the original rows . if ( ( rows ! = null ) & & ( index > ( rows [ 0 ] - 1 ) ) & & ( index < = rows [ rows . length - 1 ] ) ) { / / needed to avoid cleanup rows = null ; return ; } / / GET_DROP_INDEX int max = model . getRowCount ( ) ; if ( index < 0 ) { index = max ; } else { if ( rows = = null ) { index + + ; } else { if ( rows [ 0 ] < index ) { index + + ; } } if ( index > max ) { index = max ; } } addIndex = index ; / / GET_DROP_INDEX_END try { for ( int i = 0 ; i < list_item . size ( ) ; i + + ) { if ( list_item . get ( i ) instanceof MergeItemType ) { MergeItemType item = ( MergeItemType ) list_item . get ( i ) ; model . addRowAt ( index + + , item ) ; addCount + + ; } } target_merge_table . setRowSelectionInterval ( addIndex , index - 1 ) ; } catch ( IndexOutOfBoundsException ioobe ) { return ; } }
void test3 ( ) throws Throwable { TableTransferHandler tableTransferHandler0 = new TableTransferHandler ( ) ; JMergeTable jMergeTable0 = new JMergeTable ( ) ; MergeItemTransfer mergeItemTransfer0 = ( MergeItemTransfer ) tableTransferHandler0 . createTransferable ( ( JComponent ) null ) ; tableTransferHandler0 . exportDone ( ( JComponent ) jMergeTable0 , ( Transferable ) mergeItemTransfer0 , 808 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void exportDone ( JComponent c , Transferable data , int action ) { if ( ! ( c instanceof JMergeTable ) ) { return ; } cleanup ( c , action = = MOVE ) ; }
void test5 ( ) throws Throwable { TableTransferHandler tableTransferHandler0 = new TableTransferHandler ( ) ; JPasswordField jPasswordField0 = new JPasswordField ( "" ) ; StringSelection stringSelection0 = new StringSelection ( "" ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jPasswordField0 , ( Transferable ) stringSelection0 ) ; boolean boolean0 = tableTransferHandler0 . importData ( transferHandler_TransferSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean importData ( JComponent c , Transferable t ) { if ( ! ( c instanceof JMergeTable ) ) { return false ; } if ( canImport ( c , t . getTransferDataFlavors ( ) ) ) { try { if ( hasMergeItemFlavor ( t ) ) { Object obj = t . getTransferData ( MergeItemTransfer . MERGEITEMFLAVOUR ) ; if ( ! ( obj instanceof MergeItemTransfer ) ) return false ; MergeItemTransfer mit = ( MergeItemTransfer ) obj ; ArrayList merge_item_obj = mit . getData ( ) ; importMergeItem ( c , merge_item_obj ) ; return true ; } else if ( hasFileFlavor ( t ) ) { List file_list = ( List ) t . getTransferData ( DataFlavor . javaFileListFlavor ) ; ArrayList row_items = new ArrayList ( ) ; for ( int i = 0 ; i < file_list . size ( ) ; i + + ) { File file_item = ( File ) file_list . get ( i ) ; boolean encrypt = false ; String num_pages = "" ; try { PdfReader pdf_reader = new PdfReader ( file_item . getAbsolutePath ( ) ) ; encrypt = pdf_reader . isEncrypted ( ) ; / / we retrieve the total number of pages num_pages = Integer . toString ( pdf_reader . getNumberOfPages ( ) ) ; } catch ( Exception ex ) { num_pages = ex . getMessage ( ) ; } MergeItemType merge_item_obj = new MergeItemType ( file_item . getName ( ) , file_item . getAbsolutePath ( ) , num_pages , "All" , encrypt ) ; row_items . add ( merge_item_obj ) ; } importMergeItem ( c , row_items ) ; return true ; } else { return false ; } } catch ( UnsupportedFlavorException ufe ) { } catch ( IOException ioe ) { } } return false ; }
void test6 ( ) throws Throwable { TableTransferHandler tableTransferHandler0 = new TableTransferHandler ( ) ; JList jList0 = new JList ( ) ; JToolTip jToolTip0 = jList0 . createToolTip ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) jList0 , 1 , ( long ) 1 , 1 , 1 , 1 , 1 , false , 1 ) ; tableTransferHandler0 . exportAsDrag ( ( JComponent ) jToolTip0 , ( InputEvent ) mouseEvent0 , ( - 1569 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test7 ( ) throws Throwable { TableTransferHandler tableTransferHandler0 = new TableTransferHandler ( ) ; JPasswordField jPasswordField0 = new JPasswordField ( "" ) ; StringSelection stringSelection0 = new StringSelection ( "" ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jPasswordField0 , ( Transferable ) stringSelection0 ) ; boolean boolean0 = tableTransferHandler0 . canImport ( transferHandler_TransferSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canImport ( JComponent c , DataFlavor [ ] flavors ) { for ( int i = 0 ; i < flavors . length ; i + + ) { if ( flavors [ i ] . equals ( MergeItemTransfer . MERGEITEMFLAVOUR ) | | flavors [ i ] . equals ( DataFlavor . javaFileListFlavor ) ) { return true ; } } return false ; }
void test8 ( ) throws Throwable { TableTransferHandler tableTransferHandler0 = new TableTransferHandler ( ) ; Vector < Integer > vector0 = new Vector < Integer > ( ) ; JList jList0 = new JList ( vector0 ) ; DataFlavor [ ] dataFlavorArray0 = new DataFlavor [ 3 ] ; DataFlavor dataFlavor0 = new DataFlavor ( ) ; dataFlavorArray0 [ 0 ] = dataFlavor0 ; DataFlavor dataFlavor1 = DataFlavor . javaFileListFlavor ; dataFlavorArray0 [ 1 ] = dataFlavor1 ; boolean boolean0 = tableTransferHandler0 . canImport ( ( JComponent ) jList0 , dataFlavorArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canImport ( JComponent c , DataFlavor [ ] flavors ) { for ( int i = 0 ; i < flavors . length ; i + + ) { if ( flavors [ i ] . equals ( MergeItemTransfer . MERGEITEMFLAVOUR ) | | flavors [ i ] . equals ( DataFlavor . javaFileListFlavor ) ) { return true ; } } return false ; }
void test0 ( ) throws Throwable { DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel ( ) ; JColorChooser jColorChooser0 = new JColorChooser ( ( ColorSelectionModel ) defaultColorSelectionModel0 ) ; MergeItemTransfer mergeItemTransfer0 = new MergeItemTransfer ( ( JComponent ) jColorChooser0 , ( ArrayList ) null ) ; ArrayList < Object > arrayList0 = mergeItemTransfer0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList getData ( ) { return mit_data ; }
void test1 ( ) throws Throwable { JToolBar jToolBar0 = new JToolBar ( "java . io . InputStream" , 0 ) ; ArrayList < Object > arrayList0 = new ArrayList < Object > ( ) ; MergeItemTransfer mergeItemTransfer0 = new MergeItemTransfer ( ( JComponent ) jToolBar0 , ( ArrayList ) arrayList0 ) ; DataFlavor [ ] dataFlavorArray0 = mergeItemTransfer0 . getTransferDataFlavors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataFlavor [ ] getTransferDataFlavors ( ) { return new DataFlavor [ ] { MERGEITEMFLAVOUR } ; }
void test2 ( ) throws Throwable { JToolBar jToolBar0 = new JToolBar ( "java . io . InputStream" , 0 ) ; ArrayList < Object > arrayList0 = new ArrayList < Object > ( ) ; MergeItemTransfer mergeItemTransfer0 = new MergeItemTransfer ( ( JComponent ) jToolBar0 , ( ArrayList ) arrayList0 ) ; JToolBar jToolBar1 = ( JToolBar ) mergeItemTransfer0 . getSource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JComponent getSource ( ) { return mit_source ; }
void test3 ( ) throws Throwable { ArrayList < Integer > arrayList0 = new ArrayList < Integer > ( ) ; MergeItemTransfer mergeItemTransfer0 = new MergeItemTransfer ( ( JComponent ) null , ( ArrayList ) arrayList0 ) ; MergeItemTransfer mergeItemTransfer1 = ( MergeItemTransfer ) mergeItemTransfer0 . getTransferData ( mergeItemTransfer0 . MERGEITEMFLAVOUR ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getTransferData ( DataFlavor flavor ) throws UnsupportedFlavorException , IOException { if ( ! isDataFlavorSupported ( flavor ) ) { throw new UnsupportedFlavorException ( flavor ) ; } return this ; }
void test0 ( ) throws Throwable { MergeItemType mergeItemType0 = new MergeItemType ( "" , "" , "" , "" , false ) ; mergeItemType0 . setPageSelection ( "all" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) { return encrypted ; }
void test1 ( ) throws Throwable { MergeItemType mergeItemType0 = new MergeItemType ( "W } KS" ) ; mergeItemType0 . setFilePath ( "all" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) { return encrypted ; }
void test2 ( ) throws Throwable { MergeItemType mergeItemType0 = new MergeItemType ( "#c71" , " / " , "#c71" , "#c71" , false ) ; MergeItemType mergeItemType1 = new MergeItemType ( mergeItemType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileName ( ) { return file_name ; }
void test3 ( ) throws Throwable { MergeItemType mergeItemType0 = new MergeItemType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) { return encrypted ; }
void test4 ( ) throws Throwable { MergeItemType mergeItemType0 = new MergeItemType ( "" , "" , "" , "" , false ) ; mergeItemType0 . setNumPages ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) { return encrypted ; }
void test5 ( ) throws Throwable { MergeItemType mergeItemType0 = new MergeItemType ( "W } KS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) { return encrypted ; }
void test6 ( ) throws Throwable { MergeItemType mergeItemType0 = new MergeItemType ( "" , "" , "" , "" , false ) ; mergeItemType0 . setFileName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) { return encrypted ; }
void test7 ( ) throws Throwable { MergeItemType mergeItemType0 = new MergeItemType ( ( String ) null ) ; String string0 = mergeItemType0 . getValue ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) { return encrypted ; }
void test8 ( ) throws Throwable { MergeItemType mergeItemType0 = new MergeItemType ( "" , "" , "" , "" , false ) ; String string0 = mergeItemType0 . getValue ( 692 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) { return encrypted ; }
void test9 ( ) throws Throwable { MergeItemType mergeItemType0 = new MergeItemType ( "W } KS" ) ; String string0 = mergeItemType0 . getValue ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPageSelection ( ) { return page_selection ; }
void test10 ( ) throws Throwable { MergeItemType mergeItemType0 = new MergeItemType ( "#c71" , " / " , "#c71" , "#c71" , false ) ; String string0 = mergeItemType0 . getValue ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPageSelection ( ) { return page_selection ; }
void test11 ( ) throws Throwable { MergeItemType mergeItemType0 = new MergeItemType ( "" , "" , "" , "" , false ) ; String string0 = mergeItemType0 . getValue ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) { return encrypted ; }
void test0 ( ) throws Throwable { JMergeToolTipHeader jMergeToolTipHeader0 = new JMergeToolTipHeader ( ( TableColumnModel ) null ) ; jMergeToolTipHeader0 . setToolTipStrings ( jMergeToolTipHeader0 . tool_tips ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setToolTipStrings ( String [ ] tool_tips_strings ) { this . tool_tips = tool_tips_strings ; }
void test0 ( ) throws Throwable { JMergeTable jMergeTable0 = new JMergeTable ( ) ; boolean boolean0 = jMergeTable0 . getScrollableTracksViewportWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getToolTipText ( MouseEvent e ) { int col = columnAtPoint ( e . getPoint ( ) ) ; int modelCol = getTable ( ) . convertColumnIndexToModel ( col ) ; String ret_val ; try { ret_val = tool_tips [ modelCol ] ; } catch ( Exception ex ) { ret_val = "" ; } if ( ret_val . length ( ) < 1 ) { ret_val = super . getToolTipText ( e ) ; } return ret_val ; }
void test1 ( ) throws Throwable { JMergeTable jMergeTable0 = new JMergeTable ( ) ; JScrollPane jScrollPane0 = new JScrollPane ( ( Component ) jMergeTable0 ) ; boolean boolean0 = jMergeTable0 . getScrollableTracksViewportWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getScrollableTracksViewportWidth ( ) { if ( autoResizeMode = = AUTO_RESIZE_OFF ) { return ( false ) ; } else { Container p = getParent ( ) ; if ( p instanceof JViewport ) { if ( p . getSize ( ) . getWidth ( ) < getPreferredSize ( ) . getWidth ( ) ) { return ( false ) ; } else { return ( true ) ; } } return ( false ) ; } }
void test0 ( ) throws Throwable { PageColumnRender pageColumnRender0 = new PageColumnRender ( ) ; JTable jTable0 = new JTable ( ) ; pageColumnRender0 . getTableCellRendererComponent ( jTable0 , ( Object ) "AcceleratorKey" , true , true , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test1 ( ) throws Throwable { PageColumnRender pageColumnRender0 = new PageColumnRender ( ) ; MergeTableModel mergeTableModel0 = new MergeTableModel ( ) ; JTable jTable0 = new JTable ( ( TableModel ) mergeTableModel0 ) ; PageColumnRender pageColumnRender1 = ( PageColumnRender ) pageColumnRender0 . getTableCellRendererComponent ( jTable0 , ( Object ) pageColumnRender0 , false , false , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int row , int column ) { setOpaque ( true ) ; try { setText ( value . toString ( ) ) ; setIcon ( null ) ; setForeground ( Color . BLACK ) ; if ( column = = MergeTableModel . PAGES ) { if ( ( ( MergeTableModel ) table . getModel ( ) ) . getRow ( row ) . isEncrypted ( ) ) { setIcon ( new ImageIcon ( this . getClass ( ) . getResource ( " / images / encrypted . png" ) ) ) ; } } } catch ( NullPointerException e ) { setText ( "" ) ; } if ( isSelected ) { setBackground ( table . getSelectionBackground ( ) ) ; } else { setBackground ( table . getBackground ( ) ) ; } return this ; }
void test0 ( ) throws Throwable { JHelpLabel jHelpLabel0 = new JHelpLabel ( "Tem9ar - documeaHnt " , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getToolTipText ( MouseEvent e ) { int col = columnAtPoint ( e . getPoint ( ) ) ; int modelCol = getTable ( ) . convertColumnIndexToModel ( col ) ; String ret_val ; try { ret_val = tool_tips [ modelCol ] ; } catch ( Exception ex ) { ret_val = "" ; } if ( ret_val . length ( ) < 1 ) { ret_val = super . getToolTipText ( e ) ; } return ret_val ; }
void test1 ( ) throws Throwable { JHelpLabel jHelpLabel0 = new JHelpLabel ( " { B8lOAI ! " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getToolTipText ( MouseEvent e ) { int col = columnAtPoint ( e . getPoint ( ) ) ; int modelCol = getTable ( ) . convertColumnIndexToModel ( col ) ; String ret_val ; try { ret_val = tool_tips [ modelCol ] ; } catch ( Exception ex ) { ret_val = "" ; } if ( ret_val . length ( ) < 1 ) { ret_val = super . getToolTipText ( e ) ; } return ret_val ; }
void test2 ( ) throws Throwable { JHelpLabel jHelpLabel0 = new JHelpLabel ( " { B8lOAI ! " , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getToolTipText ( MouseEvent e ) { int col = columnAtPoint ( e . getPoint ( ) ) ; int modelCol = getTable ( ) . convertColumnIndexToModel ( col ) ; String ret_val ; try { ret_val = tool_tips [ modelCol ] ; } catch ( Exception ex ) { ret_val = "" ; } if ( ret_val . length ( ) < 1 ) { ret_val = super . getToolTipText ( e ) ; } return ret_val ; }
void test0 ( ) throws Throwable { char [ ] charArray0 = new char [ 10 ] ; charArray0 [ 0 ] = ' : ' ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle ( ( Reader ) charArrayReader0 ) ; String string0 = GettextResource . gettext ( ( ResourceBundle ) propertyResourceBundle0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String gettext ( ResourceBundle catalog , String msgid ) { try { String result = ( String ) catalog . getObject ( msgid ) ; if ( result ! = null ) return result ; } catch ( MissingResourceException e ) { } return msgid ; }
void test1 ( ) throws Throwable { char [ ] charArray0 = new char [ 10 ] ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle ( ( Reader ) charArrayReader0 ) ; String string0 = GettextResource . ngettext ( ( ResourceBundle ) propertyResourceBundle0 , "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" , "" , ( long ) '\u0000' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ngettext ( ResourceBundle catalog , String msgid , String msgid_plural , long n ) { / / The reason why we use so many reflective API calls instead of letting / / the GNU gettext generated ResourceBundles implement some interface , / / is that we want the generated ResourceBundles to be completely / / standalone , so that migration from the Sun approach to the GNU gettext / / approach ( without use of plurals ) is as straightforward as possible . / / ResourceBundle origCatalog = catalog ; do { / / Try catalog itself . if ( verbose ) System . out . println ( "ngettext on " + catalog ) ; Method handleGetObjectMethod = null ; Method getParentMethod = null ; try { handleGetObjectMethod = catalog . getClass ( ) . getMethod ( "handleGetObject" , new Class [ ] { java . lang . String . class } ) ; getParentMethod = catalog . getClass ( ) . getMethod ( "getParent" , new Class [ 0 ] ) ; } catch ( NoSuchMethodException e ) { } catch ( SecurityException e ) { } if ( verbose ) System . out . println ( "handleGetObject = " + ( handleGetObjectMethod ! = null ) + " , getParent = " + ( getParentMethod ! = null ) ) ; if ( handleGetObjectMethod ! = null & & Modifier . isPublic ( handleGetObjectMethod . getModifiers ( ) ) & & getParentMethod ! = null ) { / / A GNU gettext created class . Method lookupMethod = null ; Method pluralEvalMethod = null ; try { lookupMethod = catalog . getClass ( ) . getMethod ( "lookup" , new Class [ ] { java . lang . String . class } ) ; pluralEvalMethod = catalog . getClass ( ) . getMethod ( "pluralEval" , new Class [ ] { Long . TYPE } ) ; } catch ( NoSuchMethodException e ) { } catch ( SecurityException e ) { } if ( verbose ) System . out . println ( "lookup = " + ( lookupMethod ! = null ) + " , pluralEval = " + ( pluralEvalMethod ! = null ) ) ; if ( lookupMethod ! = null & & pluralEvalMethod ! = null ) { / / A GNU gettext created class with plural handling . Object localValue = null ; try { localValue = lookupMethod . invoke ( catalog , new Object [ ] { msgid } ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( localValue ! = null ) { if ( verbose ) System . out . println ( "localValue = " + localValue ) ; if ( localValue instanceof String ) / / Found the value . It doesn't depend on n in this case . return ( String ) localValue ; else { String [ ] pluralforms = ( String [ ] ) localValue ; long i = 0 ; try { i = ( ( Long ) pluralEvalMethod . invoke ( catalog , new Object [ ] { new Long ( n ) } ) ) . longValue ( ) ; if ( ! ( i > = 0 & & i < pluralforms . length ) ) i = 0 ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } return pluralforms [ ( int ) i ] ; } } } else { / / A GNU gettext created class without plural handling . Object localValue = null ; try { localValue = handleGetObjectMethod . invoke ( catalog , new Object [ ] { msgid } ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( localValue ! = null ) { / / Found the value . It doesn't depend on n in this case . if ( verbose ) System . out . println ( "localValue = " + localValue ) ; return ( String ) localValue ; } } Object parentCatalog = catalog ; try { parentCatalog = getParentMethod . invoke ( catalog , new Object [ 0 ] ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( parentCatalog ! = catalog ) catalog = ( ResourceBundle ) parentCatalog ; else break ; } else / / Not a GNU gettext created class . break ; } while ( catalog ! = null ) ; / / The end of chain of GNU gettext ResourceBundles is reached . if ( catalog ! = null ) { / / For a non - GNU ResourceBundle we cannot access 'parent' and / / 'handleGetObject' , so make a single call to catalog and all / / its parent catalogs at once . Object value ; try { value = catalog . getObject ( msgid ) ; } catch ( MissingResourceException e ) { value = null ; } if ( value ! = null ) / / Found the value . It doesn't depend on n in this case . return ( String ) value ; } / / Default : English strings and Germanic plural rule . return ( n ! = 1 ? msgid_plural : msgid ) ; }
void test2 ( ) throws Throwable { char [ ] charArray0 = new char [ 10 ] ; charArray0 [ 0 ] = ' : ' ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle ( ( Reader ) charArrayReader0 ) ; String string0 = GettextResource . ngettext ( ( ResourceBundle ) propertyResourceBundle0 , "" , "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" , ( long ) '\u0000' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ngettext ( ResourceBundle catalog , String msgid , String msgid_plural , long n ) { / / The reason why we use so many reflective API calls instead of letting / / the GNU gettext generated ResourceBundles implement some interface , / / is that we want the generated ResourceBundles to be completely / / standalone , so that migration from the Sun approach to the GNU gettext / / approach ( without use of plurals ) is as straightforward as possible . / / ResourceBundle origCatalog = catalog ; do { / / Try catalog itself . if ( verbose ) System . out . println ( "ngettext on " + catalog ) ; Method handleGetObjectMethod = null ; Method getParentMethod = null ; try { handleGetObjectMethod = catalog . getClass ( ) . getMethod ( "handleGetObject" , new Class [ ] { java . lang . String . class } ) ; getParentMethod = catalog . getClass ( ) . getMethod ( "getParent" , new Class [ 0 ] ) ; } catch ( NoSuchMethodException e ) { } catch ( SecurityException e ) { } if ( verbose ) System . out . println ( "handleGetObject = " + ( handleGetObjectMethod ! = null ) + " , getParent = " + ( getParentMethod ! = null ) ) ; if ( handleGetObjectMethod ! = null & & Modifier . isPublic ( handleGetObjectMethod . getModifiers ( ) ) & & getParentMethod ! = null ) { / / A GNU gettext created class . Method lookupMethod = null ; Method pluralEvalMethod = null ; try { lookupMethod = catalog . getClass ( ) . getMethod ( "lookup" , new Class [ ] { java . lang . String . class } ) ; pluralEvalMethod = catalog . getClass ( ) . getMethod ( "pluralEval" , new Class [ ] { Long . TYPE } ) ; } catch ( NoSuchMethodException e ) { } catch ( SecurityException e ) { } if ( verbose ) System . out . println ( "lookup = " + ( lookupMethod ! = null ) + " , pluralEval = " + ( pluralEvalMethod ! = null ) ) ; if ( lookupMethod ! = null & & pluralEvalMethod ! = null ) { / / A GNU gettext created class with plural handling . Object localValue = null ; try { localValue = lookupMethod . invoke ( catalog , new Object [ ] { msgid } ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( localValue ! = null ) { if ( verbose ) System . out . println ( "localValue = " + localValue ) ; if ( localValue instanceof String ) / / Found the value . It doesn't depend on n in this case . return ( String ) localValue ; else { String [ ] pluralforms = ( String [ ] ) localValue ; long i = 0 ; try { i = ( ( Long ) pluralEvalMethod . invoke ( catalog , new Object [ ] { new Long ( n ) } ) ) . longValue ( ) ; if ( ! ( i > = 0 & & i < pluralforms . length ) ) i = 0 ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } return pluralforms [ ( int ) i ] ; } } } else { / / A GNU gettext created class without plural handling . Object localValue = null ; try { localValue = handleGetObjectMethod . invoke ( catalog , new Object [ ] { msgid } ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( localValue ! = null ) { / / Found the value . It doesn't depend on n in this case . if ( verbose ) System . out . println ( "localValue = " + localValue ) ; return ( String ) localValue ; } } Object parentCatalog = catalog ; try { parentCatalog = getParentMethod . invoke ( catalog , new Object [ 0 ] ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( parentCatalog ! = catalog ) catalog = ( ResourceBundle ) parentCatalog ; else break ; } else / / Not a GNU gettext created class . break ; } while ( catalog ! = null ) ; / / The end of chain of GNU gettext ResourceBundles is reached . if ( catalog ! = null ) { / / For a non - GNU ResourceBundle we cannot access 'parent' and / / 'handleGetObject' , so make a single call to catalog and all / / its parent catalogs at once . Object value ; try { value = catalog . getObject ( msgid ) ; } catch ( MissingResourceException e ) { value = null ; } if ( value ! = null ) / / Found the value . It doesn't depend on n in this case . return ( String ) value ; } / / Default : English strings and Germanic plural rule . return ( n ! = 1 ? msgid_plural : msgid ) ; }
void test3 ( ) throws Throwable { char [ ] charArray0 = new char [ 10 ] ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle ( ( Reader ) charArrayReader0 ) ; String string0 = GettextResource . ngettext ( ( ResourceBundle ) propertyResourceBundle0 , "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000" , "" , 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ngettext ( ResourceBundle catalog , String msgid , String msgid_plural , long n ) { / / The reason why we use so many reflective API calls instead of letting / / the GNU gettext generated ResourceBundles implement some interface , / / is that we want the generated ResourceBundles to be completely / / standalone , so that migration from the Sun approach to the GNU gettext / / approach ( without use of plurals ) is as straightforward as possible . / / ResourceBundle origCatalog = catalog ; do { / / Try catalog itself . if ( verbose ) System . out . println ( "ngettext on " + catalog ) ; Method handleGetObjectMethod = null ; Method getParentMethod = null ; try { handleGetObjectMethod = catalog . getClass ( ) . getMethod ( "handleGetObject" , new Class [ ] { java . lang . String . class } ) ; getParentMethod = catalog . getClass ( ) . getMethod ( "getParent" , new Class [ 0 ] ) ; } catch ( NoSuchMethodException e ) { } catch ( SecurityException e ) { } if ( verbose ) System . out . println ( "handleGetObject = " + ( handleGetObjectMethod ! = null ) + " , getParent = " + ( getParentMethod ! = null ) ) ; if ( handleGetObjectMethod ! = null & & Modifier . isPublic ( handleGetObjectMethod . getModifiers ( ) ) & & getParentMethod ! = null ) { / / A GNU gettext created class . Method lookupMethod = null ; Method pluralEvalMethod = null ; try { lookupMethod = catalog . getClass ( ) . getMethod ( "lookup" , new Class [ ] { java . lang . String . class } ) ; pluralEvalMethod = catalog . getClass ( ) . getMethod ( "pluralEval" , new Class [ ] { Long . TYPE } ) ; } catch ( NoSuchMethodException e ) { } catch ( SecurityException e ) { } if ( verbose ) System . out . println ( "lookup = " + ( lookupMethod ! = null ) + " , pluralEval = " + ( pluralEvalMethod ! = null ) ) ; if ( lookupMethod ! = null & & pluralEvalMethod ! = null ) { / / A GNU gettext created class with plural handling . Object localValue = null ; try { localValue = lookupMethod . invoke ( catalog , new Object [ ] { msgid } ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( localValue ! = null ) { if ( verbose ) System . out . println ( "localValue = " + localValue ) ; if ( localValue instanceof String ) / / Found the value . It doesn't depend on n in this case . return ( String ) localValue ; else { String [ ] pluralforms = ( String [ ] ) localValue ; long i = 0 ; try { i = ( ( Long ) pluralEvalMethod . invoke ( catalog , new Object [ ] { new Long ( n ) } ) ) . longValue ( ) ; if ( ! ( i > = 0 & & i < pluralforms . length ) ) i = 0 ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } return pluralforms [ ( int ) i ] ; } } } else { / / A GNU gettext created class without plural handling . Object localValue = null ; try { localValue = handleGetObjectMethod . invoke ( catalog , new Object [ ] { msgid } ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( localValue ! = null ) { / / Found the value . It doesn't depend on n in this case . if ( verbose ) System . out . println ( "localValue = " + localValue ) ; return ( String ) localValue ; } } Object parentCatalog = catalog ; try { parentCatalog = getParentMethod . invoke ( catalog , new Object [ 0 ] ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( parentCatalog ! = catalog ) catalog = ( ResourceBundle ) parentCatalog ; else break ; } else / / Not a GNU gettext created class . break ; } while ( catalog ! = null ) ; / / The end of chain of GNU gettext ResourceBundles is reached . if ( catalog ! = null ) { / / For a non - GNU ResourceBundle we cannot access 'parent' and / / 'handleGetObject' , so make a single call to catalog and all / / its parent catalogs at once . Object value ; try { value = catalog . getObject ( msgid ) ; } catch ( MissingResourceException e ) { value = null ; } if ( value ! = null ) / / Found the value . It doesn't depend on n in this case . return ( String ) value ; } / / Default : English strings and Germanic plural rule . return ( n ! = 1 ? msgid_plural : msgid ) ; }
void test0 ( ) throws Throwable { ArrayList < String > arrayList0 = new ArrayList < String > ( ) ; PluginsModel pluginsModel0 = new PluginsModel ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return SHOWED_COLS ; }
void test1 ( ) throws Throwable { ArrayList < String > arrayList0 = new ArrayList < String > ( ) ; PluginsModel pluginsModel0 = new PluginsModel ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return SHOWED_COLS ; }
void test2 ( ) throws Throwable { ArrayList < JSpinner . DateEditor > arrayList0 = new ArrayList < JSpinner . DateEditor > ( 15 ) ; PluginsModel pluginsModel0 = new PluginsModel ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return SHOWED_COLS ; }
void test3 ( ) throws Throwable { ArrayList < String > arrayList0 = new ArrayList < String > ( ) ; PluginsModel pluginsModel0 = new PluginsModel ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return SHOWED_COLS ; }
void test4 ( ) throws Throwable { ArrayList < String > arrayList0 = new ArrayList < String > ( ) ; PluginsModel pluginsModel0 = new PluginsModel ( arrayList0 ) ; String [ ] stringArray0 = new String [ 3 ] ; pluginsModel0 . setColumnNames ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { try { return data . size ( ) ; } catch ( NullPointerException e ) { return 0 ; } }
void test5 ( ) throws Throwable { ArrayList < Object > arrayList0 = new ArrayList < Object > ( ) ; PluginsModel pluginsModel0 = new PluginsModel ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValueAt ( int row , int col ) { return ( ( MergeItemType ) data . get ( row ) ) . getValue ( col ) ; }
void test1 ( ) throws Throwable { JComboListItemRender jComboListItemRender0 = new JComboListItemRender ( ) ; JList jList0 = new JList ( ) ; JComboListItemRender jComboListItemRender1 = ( JComboListItemRender ) jComboListItemRender0 . getListCellRendererComponent ( jList0 , ( Object ) null , 23 , false , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getListCellRendererComponent ( JList list , Object value , int index , boolean isSelected , boolean cellHasFocus ) { if ( isSelected ) { setBackground ( list . getSelectionBackground ( ) ) ; setForeground ( list . getSelectionForeground ( ) ) ; selectedIndex = index ; } else { setBackground ( list . getBackground ( ) ) ; setForeground ( list . getForeground ( ) ) ; } if ( value ! = null ) { String text = ( ( ListItem ) value ) . getValue ( ) ; setText ( text ) ; } else { setText ( "" ) ; } return this ; }
void test0 ( ) throws Throwable { ListItem listItem0 = new ListItem ( ( - 1 ) , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test1 ( ) throws Throwable { ListItem listItem0 = new ListItem ( ) ; String string0 = listItem0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test2 ( ) throws Throwable { ListItem listItem0 = new ListItem ( ) ; listItem0 . setId ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( values . size ( ) = = 0 ) { return null ; } return ( String ) values . get ( 0 ) ; }
void test3 ( ) throws Throwable { ListItem listItem0 = new ListItem ( "bTw ( he\"kWa" , "bTw ( he\"kWa" ) ; listItem0 . setValue ( "bTw ( he\"kWa" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test4 ( ) throws Throwable { ListItem listItem0 = new ListItem ( ) ; int int0 = listItem0 . compareTo ( ( Object ) listItem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object arg0 ) { int retVal = 0 ; if ( ! ( arg0 instanceof ListItem ) ) { throw new ClassCastException ( "ListItem object expected . " ) ; } else { retVal = this . getValue ( ) . compareTo ( ( ( ListItem ) arg0 ) . getValue ( ) ) ; } return retVal ; }
void test0 ( ) throws Throwable { Document document0 = new Document ( ( Rectangle ) null , ( - 1260 . 7708F ) , ( - 1260 . 7708F ) , ( - 1260 . 7708F ) , ( - 1260 . 7708F ) ) ; MainConsole . setDocumentCreator ( document0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDocumentCreator ( Document doc_to_set ) { doc_to_set . addCreator ( MainConsole . CREATOR ) ; }
void test3 ( ) throws Throwable { MainConsole mainConsole0 = new MainConsole ( ) ; WorkDoneEvent workDoneEvent0 = new WorkDoneEvent ( ( Object ) "text ( ) " , 8 ) ; mainConsole0 . fireWorkDoneEvent ( workDoneEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) { return event_type ; }
void test2 ( ) throws Throwable { PrefixParser prefixParser0 = new PrefixParser ( "4bE . . " , "4bE . . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateFileName ( String page_number ) { String timestamp = new SimpleDateFormat ( "yyyyMMdd_HHmmssSS" ) . format ( new Date ( ) ) ; String retVal = "" ; if ( isComplexPrefix ( true ) ) { retVal = prefix ; retVal = retVal . replaceAll ( CURRENT_PAGE_REGX , page_number ) ; retVal = retVal . replaceAll ( BASE_NAME_REGX , fileName ) ; retVal = retVal . replaceAll ( TIMESTAMP_RGX , timestamp ) ; retVal + = " . pdf" ; } else { retVal = page_number + "_" + prefix + fileName + " . pdf" ; } return retVal ; }
void test3 ( ) throws Throwable { PrefixParser prefixParser0 = new PrefixParser ( "4bE . . " , " ? ) G { ; - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateFileName ( String page_number ) { String timestamp = new SimpleDateFormat ( "yyyyMMdd_HHmmssSS" ) . format ( new Date ( ) ) ; String retVal = "" ; if ( isComplexPrefix ( true ) ) { retVal = prefix ; retVal = retVal . replaceAll ( CURRENT_PAGE_REGX , page_number ) ; retVal = retVal . replaceAll ( BASE_NAME_REGX , fileName ) ; retVal = retVal . replaceAll ( TIMESTAMP_RGX , timestamp ) ; retVal + = " . pdf" ; } else { retVal = page_number + "_" + prefix + fileName + " . pdf" ; } return retVal ; }
void test4 ( ) throws Throwable { PrefixParser prefixParser0 = new PrefixParser ( " [ CURRENTPAGE ] " , " [ CURRENTPAGE ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateFileName ( String page_number ) { String timestamp = new SimpleDateFormat ( "yyyyMMdd_HHmmssSS" ) . format ( new Date ( ) ) ; String retVal = "" ; if ( isComplexPrefix ( true ) ) { retVal = prefix ; retVal = retVal . replaceAll ( CURRENT_PAGE_REGX , page_number ) ; retVal = retVal . replaceAll ( BASE_NAME_REGX , fileName ) ; retVal = retVal . replaceAll ( TIMESTAMP_RGX , timestamp ) ; retVal + = " . pdf" ; } else { retVal = page_number + "_" + prefix + fileName + " . pdf" ; } return retVal ; }
void test5 ( ) throws Throwable { PrefixParser prefixParser0 = new PrefixParser ( "4bE . . " , " ? ) G { ; - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateFileName ( String page_number ) { String timestamp = new SimpleDateFormat ( "yyyyMMdd_HHmmssSS" ) . format ( new Date ( ) ) ; String retVal = "" ; if ( isComplexPrefix ( true ) ) { retVal = prefix ; retVal = retVal . replaceAll ( CURRENT_PAGE_REGX , page_number ) ; retVal = retVal . replaceAll ( BASE_NAME_REGX , fileName ) ; retVal = retVal . replaceAll ( TIMESTAMP_RGX , timestamp ) ; retVal + = " . pdf" ; } else { retVal = page_number + "_" + prefix + fileName + " . pdf" ; } return retVal ; }
void test6 ( ) throws Throwable { PrefixParser prefixParser0 = new PrefixParser ( " [ TIMESTAMP ] " , " [ TIMESTAMP ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateFileName ( String page_number ) { String timestamp = new SimpleDateFormat ( "yyyyMMdd_HHmmssSS" ) . format ( new Date ( ) ) ; String retVal = "" ; if ( isComplexPrefix ( true ) ) { retVal = prefix ; retVal = retVal . replaceAll ( CURRENT_PAGE_REGX , page_number ) ; retVal = retVal . replaceAll ( BASE_NAME_REGX , fileName ) ; retVal = retVal . replaceAll ( TIMESTAMP_RGX , timestamp ) ; retVal + = " . pdf" ; } else { retVal = page_number + "_" + prefix + fileName + " . pdf" ; } return retVal ; }
void test7 ( ) throws Throwable { PrefixParser prefixParser0 = new PrefixParser ( " [ TIMESTAMP ] " , " [ TIMESTAMP ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateFileName ( String page_number ) { String timestamp = new SimpleDateFormat ( "yyyyMMdd_HHmmssSS" ) . format ( new Date ( ) ) ; String retVal = "" ; if ( isComplexPrefix ( true ) ) { retVal = prefix ; retVal = retVal . replaceAll ( CURRENT_PAGE_REGX , page_number ) ; retVal = retVal . replaceAll ( BASE_NAME_REGX , fileName ) ; retVal = retVal . replaceAll ( TIMESTAMP_RGX , timestamp ) ; retVal + = " . pdf" ; } else { retVal = page_number + "_" + prefix + fileName + " . pdf" ; } return retVal ; }
void test0 ( ) throws Throwable { LogFormatter logFormatter0 = new LogFormatter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = LogFormatter . formatMessage ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatMessage ( String message ) { return " [ " + DateFormat . getDateTimeInstance ( DateFormat . SHORT , DateFormat . MEDIUM ) . format ( new Date ( ) ) + " ] " + message ; }
void test0 ( ) throws Throwable { TmpFileNameGenerator tmpFileNameGenerator0 = new TmpFileNameGenerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { File file0 = TmpFileNameGenerator . generateTmpFile ( "q [ ( ; JrI { " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test2 ( ) throws Throwable { File file0 = TmpFileNameGenerator . generateTmpFile ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File generateTmpFile ( String file_path ) { File retVal = null ; boolean already_exist = true ; int enthropy = 0 ; String file_name = "" ; / / generates a random 4 char string StringBuffer randomString = new StringBuffer ( ) ; Random random = new Random ( ) ; for ( int i = 0 ; i < 5 ; i + + ) { char ascii = ( char ) ( ( random . nextInt ( 26 ) ) + 'A' ) ; randomString . append ( ascii ) ; } while ( already_exist ) { file_name = "PDFsamTMPbuffer" + randomString + Integer . toString ( + + enthropy ) + " . pdf" ; File tmp_file = new File ( file_path + File . separator + file_name ) ; if ( ! ( already_exist = tmp_file . exists ( ) ) ) { retVal = tmp_file ; } } return retVal ; }
void test3 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; File file1 = TmpFileNameGenerator . generateTmpFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test0 ( ) throws Throwable { StrNumComparator strNumComparator0 = new StrNumComparator ( ) ; Object object0 = new Object ( ) ; int int0 = strNumComparator0 . compare ( object0 , object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object obj1 , Object obj2 ) { try { return new Integer ( ( String ) obj1 ) . compareTo ( new Integer ( ( String ) obj2 ) ) ; } catch ( Exception e ) { return 0 ; } }
void test0 ( ) throws Throwable { HtmlTags htmlTags0 = new HtmlTags ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = HtmlTags . disable ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String disable ( String input_text ) { return input_text . replaceAll ( " < " , " & lt ; " ) . replaceAll ( " > " , " & gt ; " ) ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getInputOption ( ) { return input_option ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressed ( ) { return compressed_value ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean COverwrite ( ) { return overwrite_value ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getInputOption ( ) { return input_option ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getInputCommand ( ) { return input_command ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverwrite ( ) { return overwrite_value ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressed ( ) { return compressed_value ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean COverwrite ( ) { return overwrite_value ; }
void test8 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean COverwrite ( ) { return overwrite_value ; }
void test9 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCCopyFields ( ) { return copyfields_value ; }
void test10 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressed ( ) { return compressed_value ; }
void test11 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverwrite ( ) { return overwrite_value ; }
void test12 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverwrite ( ) { return overwrite_value ; }
void test13 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getInputCommand ( ) { return input_command ; }
void test14 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( String [ ] clargs , Map opts , List args ) throws CmdLineException { if ( clargs = = null ) { clargs = new String [ ] { } ; } int i = processOptions ( clargs , opts ) ; processArguments ( i , clargs , args ) ; }
void test15 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 6 ] = "concat" ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( String [ ] clargs , Map opts , List args ) throws CmdLineException { if ( clargs = = null ) { clargs = new String [ ] { } ; } int i = processOptions ( clargs , opts ) ; processArguments ( i , clargs , args ) ; }
void test16 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "DYA9 & t" ; CmdParser cmdParser0 = new CmdParser ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( String [ ] clargs , Map opts , List args ) throws CmdLineException { if ( clargs = = null ) { clargs = new String [ ] { } ; } int i = processOptions ( clargs , opts ) ; processArguments ( i , clargs , args ) ; }
void test1 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; Vector < Object > vector0 = defaultTableModel0 . getDataVector ( ) ; RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand ( ) ; File file0 = rotateParsedCommand0 . getOutputFile ( ) ; PdfConcat pdfConcat0 = new PdfConcat ( ( Collection ) vector0 , file0 , ( String ) null , false , ( MainConsole ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutHTMLMessage ( ) { return out_message . replaceAll ( " > " , " & gt ; " ) . replaceAll ( " < " , " & lt ; " ) . replaceAll ( "\n" , " < br > " ) ; }
void test0 ( ) throws Throwable { MainConsole mainConsole0 = new MainConsole ( ) ; PdfSplit pdfSplit0 = new PdfSplit ( ( File ) null , ( File ) null , ( String ) null , ( String ) null , ( String ) null , false , mainConsole0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutMessage ( ) { return out_message ; }
void test1 ( ) throws Throwable { MainConsole mainConsole0 = new MainConsole ( ) ; PdfSplit pdfSplit0 = new PdfSplit ( ( File ) null , ( File ) null , "~c { j $ ! i$Qi" , "~c { j $ ! i$Qi" , "~c { j $ ! i$Qi" , mainConsole0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutHTMLMessage ( ) { return out_message . replaceAll ( " > " , " & gt ; " ) . replaceAll ( " < " , " & lt ; " ) . replaceAll ( "\n" , " < br > " ) ; }
void test0 ( ) throws Throwable { MainConsole mainConsole0 = new MainConsole ( ) ; PdfSplit pdfSplit0 = new PdfSplit ( ( File ) null , ( File ) null , "" , "" , "" , false , mainConsole0 ) ; String string0 = pdfSplit0 . getOutMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutMessage ( ) { return out_message ; }
void test1 ( ) throws Throwable { MainConsole mainConsole0 = new MainConsole ( ) ; PdfSplit pdfSplit0 = new PdfSplit ( ( File ) null , ( File ) null , "" , "" , "" , false , mainConsole0 ) ; String string0 = pdfSplit0 . getOutHTMLMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutHTMLMessage ( ) { return out_message . replaceAll ( " > " , " & gt ; " ) . replaceAll ( " < " , " & lt ; " ) . replaceAll ( "\n" , " < br > " ) ; }
void test2 ( ) throws Throwable { PdfSplit pdfSplit0 = new PdfSplit ( ( File ) null , ( File ) null , "" , "" , "" , ( MainConsole ) null ) ; pdfSplit0 . workingIndeterminate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutMessage ( ) { return out_message ; }
void test3 ( ) throws Throwable { MainConsole mainConsole0 = new MainConsole ( ) ; PdfSplit pdfSplit0 = new PdfSplit ( ( File ) null , ( File ) null , "Applying pages rotation . " , "Applying pages rotation . " , "Applying pages rotation . " , true , true , mainConsole0 ) ; pdfSplit0 . workingIndeterminate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutHTMLMessage ( ) { return out_message . replaceAll ( " > " , " & gt ; " ) . replaceAll ( " < " , " & lt ; " ) . replaceAll ( "\n" , " < br > " ) ; }
void test4 ( ) throws Throwable { ChapterAutoNumber chapterAutoNumber0 = new ChapterAutoNumber ( "" ) ; PdfConcat pdfConcat0 = new PdfConcat ( ( Collection ) chapterAutoNumber0 , ( File ) null , "" , false , true , ( MainConsole ) null ) ; pdfConcat0 . workCompleted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutHTMLMessage ( ) { return out_message . replaceAll ( " > " , " & gt ; " ) . replaceAll ( " < " , " & lt ; " ) . replaceAll ( "\n" , " < br > " ) ; }
void test6 ( ) throws Throwable { PdfSplit pdfSplit0 = new PdfSplit ( ( File ) null , ( File ) null , "" , "" , "" , true , false , ( MainConsole ) null ) ; pdfSplit0 . percentageChanged ( 182 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutMessage ( ) { return out_message ; }
void test7 ( ) throws Throwable { PdfSplit pdfSplit0 = new PdfSplit ( ( File ) null , ( File ) null , "" , "" , "" , true , false , ( MainConsole ) null ) ; pdfSplit0 . percentageChanged ( 182 , 121 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutMessage ( ) { return out_message ; }
void test9 ( ) throws Throwable { PdfSplit pdfSplit0 = new PdfSplit ( ( File ) null , ( File ) null , "" , "" , "" , true , false , ( MainConsole ) null ) ; pdfSplit0 . renameTemporaryFile ( ( File ) null , ( File ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutHTMLMessage ( ) { return out_message . replaceAll ( " > " , " & gt ; " ) . replaceAll ( " < " , " & lt ; " ) . replaceAll ( "\n" , " < br > " ) ; }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { File file0 = new File ( "T ) l ! A#9D" ) ; MainConsole mainConsole0 = new MainConsole ( ) ; PdfSplit pdfSplit0 = new PdfSplit ( file0 , file0 , "T ) l ! A#9D" , ( String ) null , ( String ) null , true , mainConsole0 ) ; pdfSplit0 . renameTemporaryFile ( file0 , file0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String get ( String key , Object [ ] params ) { String ret = missingKeyMsg + key ; try { ret = rb . getString ( key ) ; ret = MessageFormat . format ( ret , params ) ; } catch ( Exception e ) { ret + = " ; params : " ; for ( int i = 0 ; i < params . length ; i + + ) { ret + = " [ " + params [ i ] + " ] " ; } } return ret ; }
void test0 ( ) throws Throwable { Document document0 = new Document ( ) ; PdfSimpleConcatenator pdfSimpleConcatenator0 = new PdfSimpleConcatenator ( document0 , ( OutputStream ) null ) ; Anchor anchor0 = new Anchor ( ( - 149 . 93225F ) , "ELGAMAL / PKCS1" ) ; pdfSimpleConcatenator0 . setOutlines ( ( List ) anchor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setOutlines ( List outlines ) { writer . setOutlines ( outlines ) ; }
void test0 ( ) throws Throwable { WorkDoneEvent workDoneEvent0 = new WorkDoneEvent ( ( Object ) "Name" , 0 , 0 ) ; String string0 = workDoneEvent0 . getEventMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) { return event_type ; }
void test1 ( ) throws Throwable { WorkDoneEvent workDoneEvent0 = new WorkDoneEvent ( ( Object ) "margin" , 1648 , "margin" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPagesDone ( ) { return pages_done ; }
void test2 ( ) throws Throwable { WorkDoneEvent workDoneEvent0 = new WorkDoneEvent ( ( Object ) "margin" , 1648 , 1648 , 1648 ) ; int int0 = workDoneEvent0 . getPercentageDone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPagesDone ( ) { return pages_done ; }
void test3 ( ) throws Throwable { WorkDoneEvent workDoneEvent0 = new WorkDoneEvent ( ( Object ) "margin" , 1648 , 1648 , 1648 ) ; int int0 = workDoneEvent0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPagesDone ( ) { return pages_done ; }
void test6 ( ) throws Throwable { WorkDoneEvent workDoneEvent0 = new WorkDoneEvent ( ( Object ) "margin" , 1648 , 1648 , 1648 ) ; int int0 = workDoneEvent0 . getPagesDone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) { return event_type ; }
void test0 ( ) throws Throwable { DirFilter dirFilter0 = new DirFilter ( ) ; String string0 = dirFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Direcotries" ; }
void test1 ( ) throws Throwable { DirFilter dirFilter0 = new DirFilter ( ) ; File file0 = new File ( " [ q81Lb`Qc@@cL2fv" ) ; boolean boolean0 = dirFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test2 ( ) throws Throwable { DirFilter dirFilter0 = new DirFilter ( ) ; File file0 = new File ( "" , "" ) ; boolean boolean0 = dirFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test0 ( ) throws Throwable { PdfFilter pdfFilter0 = new PdfFilter ( ) ; String string0 = pdfFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Direcotries" ; }
void test1 ( ) throws Throwable { PdfFilter pdfFilter0 = new PdfFilter ( ) ; File file0 = new File ( "Mbk_v ) { % : . = Df" , "Mbk_v ) { % : . = Df" ) ; boolean boolean0 = pdfFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test2 ( ) throws Throwable { PdfFilter pdfFilter0 = new PdfFilter ( ) ; File file0 = new File ( " / " , " / " ) ; boolean boolean0 = pdfFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test3 ( ) throws Throwable { PdfFilter pdfFilter0 = new PdfFilter ( ) ; File file0 = new File ( "cevs8 { K7 , . W > j#Sxf . " ) ; boolean boolean0 = pdfFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test4 ( ) throws Throwable { File file0 = new File ( " / " , " / " ) ; String string0 = PdfFilter . getExtension ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExtension ( File f ) { String ext = null ; String s = f . getName ( ) ; int i = s . lastIndexOf ( ' . ' ) ; if ( i > 0 & & i < s . length ( ) - 1 ) { ext = s . substring ( i + 1 ) . toLowerCase ( ) ; } return ext ; }
void test0 ( ) throws Throwable { LinkedList < Object > linkedList0 = ThemeSelector . getThemeList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LinkedList getThemeList ( ) { LinkedList retval = new LinkedList ( ) ; retval . add ( new ListItem ( "0" , "None" ) ) ; retval . add ( new ListItem ( "1" , "DesertBlue" ) ) ; retval . add ( new ListItem ( "2" , "DesertRed" ) ) ; retval . add ( new ListItem ( "3" , "Silver" ) ) ; retval . add ( new ListItem ( "4" , "SkyPink" ) ) ; retval . add ( new ListItem ( "5" , "SkyKrupp" ) ) ; retval . add ( new ListItem ( "6" , "SkyYellow" ) ) ; retval . add ( new ListItem ( "7" , "SkyGreen" ) ) ; retval . add ( new ListItem ( "8" , "DarkStar" ) ) ; retval . add ( new ListItem ( "9" , "BrownSugar" ) ) ; retval . add ( new ListItem ( "10" , "DesertGreen" ) ) ; retval . add ( new ListItem ( "11" , "ExperienceBlue" ) ) ; retval . add ( new ListItem ( "12" , "ExperienceGreen" ) ) ; retval . add ( new ListItem ( "13" , "SkyBlue" ) ) ; return retval ; }
void test1 ( ) throws Throwable { LinkedList < Object > linkedList0 = ThemeSelector . getLAFList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LinkedList getLAFList ( ) { LinkedList retval = new LinkedList ( ) ; retval . add ( new ListItem ( "0" , "Java" ) ) ; retval . add ( new ListItem ( "1" , "System" ) ) ; retval . add ( new ListItem ( "2" , "Metal" ) ) ; retval . add ( new ListItem ( "3" , "Plastic3D" ) ) ; retval . add ( new ListItem ( "4" , "Plastic" ) ) ; retval . add ( new ListItem ( "5" , "PlasticXP" ) ) ; retval . add ( new ListItem ( "6" , "Windows" ) ) ; return retval ; }
void test2 ( ) throws Throwable { ThemeSelector themeSelector0 = new ThemeSelector ( ) ; String string0 = themeSelector0 . getLAF ( "1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLAF ( String LAF_number ) { String ThemeSelected ; try { switch ( Integer . parseInt ( LAF_number ) ) { case 1 : ThemeSelected = UIManager . getSystemLookAndFeelClassName ( ) ; break ; case 2 : ThemeSelected = "javax . swing . plaf . metal . MetalLookAndFeel" ; break ; case 3 : ThemeSelected = "com . jgoodies . looks . plastic . Plastic3DLookAndFeel" ; break ; case 4 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticLookAndFeel" ; break ; case 5 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticXPLookAndFeel" ; break ; case 6 : ThemeSelected = "com . jgoodies . looks . windows . WindowsLookAndFeel" ; break ; default : ThemeSelected = UIManager . getCrossPlatformLookAndFeelClassName ( ) ; break ; } return ThemeSelected ; } catch ( NumberFormatException e ) { return UIManager . getCrossPlatformLookAndFeelClassName ( ) ; } }
void test3 ( ) throws Throwable { ThemeSelector themeSelector0 = new ThemeSelector ( ) ; String string0 = themeSelector0 . getLAF ( "4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLAF ( String LAF_number ) { String ThemeSelected ; try { switch ( Integer . parseInt ( LAF_number ) ) { case 1 : ThemeSelected = UIManager . getSystemLookAndFeelClassName ( ) ; break ; case 2 : ThemeSelected = "javax . swing . plaf . metal . MetalLookAndFeel" ; break ; case 3 : ThemeSelected = "com . jgoodies . looks . plastic . Plastic3DLookAndFeel" ; break ; case 4 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticLookAndFeel" ; break ; case 5 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticXPLookAndFeel" ; break ; case 6 : ThemeSelected = "com . jgoodies . looks . windows . WindowsLookAndFeel" ; break ; default : ThemeSelected = UIManager . getCrossPlatformLookAndFeelClassName ( ) ; break ; } return ThemeSelected ; } catch ( NumberFormatException e ) { return UIManager . getCrossPlatformLookAndFeelClassName ( ) ; } }
void test4 ( ) throws Throwable { ThemeSelector themeSelector0 = new ThemeSelector ( ) ; String string0 = themeSelector0 . getLAF ( "2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLAF ( String LAF_number ) { String ThemeSelected ; try { switch ( Integer . parseInt ( LAF_number ) ) { case 1 : ThemeSelected = UIManager . getSystemLookAndFeelClassName ( ) ; break ; case 2 : ThemeSelected = "javax . swing . plaf . metal . MetalLookAndFeel" ; break ; case 3 : ThemeSelected = "com . jgoodies . looks . plastic . Plastic3DLookAndFeel" ; break ; case 4 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticLookAndFeel" ; break ; case 5 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticXPLookAndFeel" ; break ; case 6 : ThemeSelected = "com . jgoodies . looks . windows . WindowsLookAndFeel" ; break ; default : ThemeSelected = UIManager . getCrossPlatformLookAndFeelClassName ( ) ; break ; } return ThemeSelected ; } catch ( NumberFormatException e ) { return UIManager . getCrossPlatformLookAndFeelClassName ( ) ; } }
void test5 ( ) throws Throwable { ThemeSelector themeSelector0 = new ThemeSelector ( ) ; String string0 = themeSelector0 . getLAF ( "3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLAF ( String LAF_number ) { String ThemeSelected ; try { switch ( Integer . parseInt ( LAF_number ) ) { case 1 : ThemeSelected = UIManager . getSystemLookAndFeelClassName ( ) ; break ; case 2 : ThemeSelected = "javax . swing . plaf . metal . MetalLookAndFeel" ; break ; case 3 : ThemeSelected = "com . jgoodies . looks . plastic . Plastic3DLookAndFeel" ; break ; case 4 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticLookAndFeel" ; break ; case 5 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticXPLookAndFeel" ; break ; case 6 : ThemeSelected = "com . jgoodies . looks . windows . WindowsLookAndFeel" ; break ; default : ThemeSelected = UIManager . getCrossPlatformLookAndFeelClassName ( ) ; break ; } return ThemeSelected ; } catch ( NumberFormatException e ) { return UIManager . getCrossPlatformLookAndFeelClassName ( ) ; } }
void test6 ( ) throws Throwable { ThemeSelector themeSelector0 = new ThemeSelector ( ) ; String string0 = themeSelector0 . getLAF ( "5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLAF ( String LAF_number ) { String ThemeSelected ; try { switch ( Integer . parseInt ( LAF_number ) ) { case 1 : ThemeSelected = UIManager . getSystemLookAndFeelClassName ( ) ; break ; case 2 : ThemeSelected = "javax . swing . plaf . metal . MetalLookAndFeel" ; break ; case 3 : ThemeSelected = "com . jgoodies . looks . plastic . Plastic3DLookAndFeel" ; break ; case 4 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticLookAndFeel" ; break ; case 5 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticXPLookAndFeel" ; break ; case 6 : ThemeSelected = "com . jgoodies . looks . windows . WindowsLookAndFeel" ; break ; default : ThemeSelected = UIManager . getCrossPlatformLookAndFeelClassName ( ) ; break ; } return ThemeSelected ; } catch ( NumberFormatException e ) { return UIManager . getCrossPlatformLookAndFeelClassName ( ) ; } }
void test7 ( ) throws Throwable { ThemeSelector themeSelector0 = new ThemeSelector ( ) ; String string0 = themeSelector0 . getLAF ( "6" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLAF ( String LAF_number ) { String ThemeSelected ; try { switch ( Integer . parseInt ( LAF_number ) ) { case 1 : ThemeSelected = UIManager . getSystemLookAndFeelClassName ( ) ; break ; case 2 : ThemeSelected = "javax . swing . plaf . metal . MetalLookAndFeel" ; break ; case 3 : ThemeSelected = "com . jgoodies . looks . plastic . Plastic3DLookAndFeel" ; break ; case 4 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticLookAndFeel" ; break ; case 5 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticXPLookAndFeel" ; break ; case 6 : ThemeSelected = "com . jgoodies . looks . windows . WindowsLookAndFeel" ; break ; default : ThemeSelected = UIManager . getCrossPlatformLookAndFeelClassName ( ) ; break ; } return ThemeSelected ; } catch ( NumberFormatException e ) { return UIManager . getCrossPlatformLookAndFeelClassName ( ) ; } }
void test8 ( ) throws Throwable { ThemeSelector themeSelector0 = new ThemeSelector ( ) ; String string0 = themeSelector0 . getLAF ( "7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLAF ( String LAF_number ) { String ThemeSelected ; try { switch ( Integer . parseInt ( LAF_number ) ) { case 1 : ThemeSelected = UIManager . getSystemLookAndFeelClassName ( ) ; break ; case 2 : ThemeSelected = "javax . swing . plaf . metal . MetalLookAndFeel" ; break ; case 3 : ThemeSelected = "com . jgoodies . looks . plastic . Plastic3DLookAndFeel" ; break ; case 4 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticLookAndFeel" ; break ; case 5 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticXPLookAndFeel" ; break ; case 6 : ThemeSelected = "com . jgoodies . looks . windows . WindowsLookAndFeel" ; break ; default : ThemeSelected = UIManager . getCrossPlatformLookAndFeelClassName ( ) ; break ; } return ThemeSelected ; } catch ( NumberFormatException e ) { return UIManager . getCrossPlatformLookAndFeelClassName ( ) ; } }
void test10 ( ) throws Throwable { boolean boolean0 = ThemeSelector . isPlastic ( "0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPlastic ( String LAF_number ) { try { int tn = Integer . parseInt ( LAF_number ) ; return ( ( tn > = 3 ) & & ( tn < = 5 ) ) ? true : false ; } catch ( NumberFormatException e ) { return false ; } }
void test11 ( ) throws Throwable { boolean boolean0 = ThemeSelector . isPlastic ( "4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPlastic ( String LAF_number ) { try { int tn = Integer . parseInt ( LAF_number ) ; return ( ( tn > = 3 ) & & ( tn < = 5 ) ) ? true : false ; } catch ( NumberFormatException e ) { return false ; } }
void test12 ( ) throws Throwable { boolean boolean0 = ThemeSelector . isPlastic ( "6" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPlastic ( String LAF_number ) { try { int tn = Integer . parseInt ( LAF_number ) ; return ( ( tn > = 3 ) & & ( tn < = 5 ) ) ? true : false ; } catch ( NumberFormatException e ) { return false ; } }
void test26 ( ) throws Throwable { ThemeSelector themeSelector0 = new ThemeSelector ( ) ; boolean boolean0 = themeSelector0 . setTheme ( "0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean setTheme ( String theme_number ) { try { switch ( Integer . parseInt ( theme_number ) ) { case 1 : PlasticLookAndFeel . setPlasticTheme ( new DesertBlue ( ) ) ; break ; case 2 : PlasticLookAndFeel . setPlasticTheme ( new DesertRed ( ) ) ; break ; case 3 : PlasticLookAndFeel . setPlasticTheme ( new Silver ( ) ) ; break ; case 4 : PlasticLookAndFeel . setPlasticTheme ( new SkyPink ( ) ) ; break ; case 5 : PlasticLookAndFeel . setPlasticTheme ( new SkyKrupp ( ) ) ; break ; case 6 : PlasticLookAndFeel . setPlasticTheme ( new SkyYellow ( ) ) ; break ; case 7 : PlasticLookAndFeel . setPlasticTheme ( new SkyGreen ( ) ) ; break ; case 8 : PlasticLookAndFeel . setPlasticTheme ( new DarkStar ( ) ) ; break ; case 9 : PlasticLookAndFeel . setPlasticTheme ( new BrownSugar ( ) ) ; break ; case 10 : PlasticLookAndFeel . setPlasticTheme ( new DesertGreen ( ) ) ; break ; case 11 : PlasticLookAndFeel . setPlasticTheme ( new ExperienceBlue ( ) ) ; break ; case 12 : PlasticLookAndFeel . setPlasticTheme ( new ExperienceGreen ( ) ) ; break ; case 13 : PlasticLookAndFeel . setPlasticTheme ( new SkyBlue ( ) ) ; break ; default : break ; } return true ; } catch ( NumberFormatException e ) { return false ; } }
void test0 ( ) throws Throwable { PlugInsLoader plugInsLoader0 = new PlugInsLoader ( " / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPNumber ( ) { return p_number ; }
void test0 ( ) throws Throwable { JarFilter jarFilter0 = new JarFilter ( ) ; String string0 = jarFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Direcotries" ; }
void test1 ( ) throws Throwable { JarFilter jarFilter0 = new JarFilter ( ) ; File file0 = new File ( "" ) ; File file1 = file0 . getAbsoluteFile ( ) ; File [ ] fileArray0 = file1 . listFiles ( ( FileFilter ) jarFilter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JarFilter ( ) { super ( ) ; }
void test2 ( ) throws Throwable { JarFilter jarFilter0 = new JarFilter ( ) ; File file0 = new File ( "" ) ; boolean boolean0 = jarFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test3 ( ) throws Throwable { JarFilter jarFilter0 = new JarFilter ( ) ; File file0 = new File ( " > < fnhv ] x . YU" ) ; boolean boolean0 = jarFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test4 ( ) throws Throwable { File file0 = new File ( "T > . " ) ; String string0 = JarFilter . getExtension ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExtension ( File f ) { String ext = null ; String s = f . getName ( ) ; int i = s . lastIndexOf ( ' . ' ) ; if ( i > 0 & & i < s . length ( ) - 1 ) { ext = s . substring ( i + 1 ) . toLowerCase ( ) ; } return ext ; }
void test0 ( ) throws Throwable { LanguageLoader languageLoader0 = new LanguageLoader ( "x ) qV } - " , "hEl8# | < W 5" ) ; Locale locale0 = Locale . GERMAN ; languageLoader0 . setLocale ( locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setLocale ( Locale current_locale ) { this . current_locale = current_locale ; }
void test0 ( ) throws Throwable { XMLParser xMLParser0 = new XMLParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { StringReader stringReader0 = new StringReader ( "4_\"f2" ) ; PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle ( ( Reader ) stringReader0 ) ; String string0 = GettextResource . ngettext ( ( ResourceBundle ) propertyResourceBundle0 , "4_\"f2" , "4_\"f2" , 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ngettext ( ResourceBundle catalog , String msgid , String msgid_plural , long n ) { / / The reason why we use so many reflective API calls instead of letting / / the GNU gettext generated ResourceBundles implement some interface , / / is that we want the generated ResourceBundles to be completely / / standalone , so that migration from the Sun approach to the GNU gettext / / approach ( without use of plurals ) is as straightforward as possible . / / ResourceBundle origCatalog = catalog ; do { / / Try catalog itself . if ( verbose ) System . out . println ( "ngettext on " + catalog ) ; Method handleGetObjectMethod = null ; Method getParentMethod = null ; try { handleGetObjectMethod = catalog . getClass ( ) . getMethod ( "handleGetObject" , new Class [ ] { java . lang . String . class } ) ; getParentMethod = catalog . getClass ( ) . getMethod ( "getParent" , new Class [ 0 ] ) ; } catch ( NoSuchMethodException e ) { } catch ( SecurityException e ) { } if ( verbose ) System . out . println ( "handleGetObject = " + ( handleGetObjectMethod ! = null ) + " , getParent = " + ( getParentMethod ! = null ) ) ; if ( handleGetObjectMethod ! = null & & Modifier . isPublic ( handleGetObjectMethod . getModifiers ( ) ) & & getParentMethod ! = null ) { / / A GNU gettext created class . Method lookupMethod = null ; Method pluralEvalMethod = null ; try { lookupMethod = catalog . getClass ( ) . getMethod ( "lookup" , new Class [ ] { java . lang . String . class } ) ; pluralEvalMethod = catalog . getClass ( ) . getMethod ( "pluralEval" , new Class [ ] { Long . TYPE } ) ; } catch ( NoSuchMethodException e ) { } catch ( SecurityException e ) { } if ( verbose ) System . out . println ( "lookup = " + ( lookupMethod ! = null ) + " , pluralEval = " + ( pluralEvalMethod ! = null ) ) ; if ( lookupMethod ! = null & & pluralEvalMethod ! = null ) { / / A GNU gettext created class with plural handling . Object localValue = null ; try { localValue = lookupMethod . invoke ( catalog , new Object [ ] { msgid } ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( localValue ! = null ) { if ( verbose ) System . out . println ( "localValue = " + localValue ) ; if ( localValue instanceof String ) / / Found the value . It doesn't depend on n in this case . return ( String ) localValue ; else { String [ ] pluralforms = ( String [ ] ) localValue ; long i = 0 ; try { i = ( ( Long ) pluralEvalMethod . invoke ( catalog , new Object [ ] { new Long ( n ) } ) ) . longValue ( ) ; if ( ! ( i > = 0 & & i < pluralforms . length ) ) i = 0 ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } return pluralforms [ ( int ) i ] ; } } } else { / / A GNU gettext created class without plural handling . Object localValue = null ; try { localValue = handleGetObjectMethod . invoke ( catalog , new Object [ ] { msgid } ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( localValue ! = null ) { / / Found the value . It doesn't depend on n in this case . if ( verbose ) System . out . println ( "localValue = " + localValue ) ; return ( String ) localValue ; } } Object parentCatalog = catalog ; try { parentCatalog = getParentMethod . invoke ( catalog , new Object [ 0 ] ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( parentCatalog ! = catalog ) catalog = ( ResourceBundle ) parentCatalog ; else break ; } else / / Not a GNU gettext created class . break ; } while ( catalog ! = null ) ; / / The end of chain of GNU gettext ResourceBundles is reached . if ( catalog ! = null ) { / / For a non - GNU ResourceBundle we cannot access 'parent' and / / 'handleGetObject' , so make a single call to catalog and all / / its parent catalogs at once . Object value ; try { value = catalog . getObject ( msgid ) ; } catch ( MissingResourceException e ) { value = null ; } if ( value ! = null ) / / Found the value . It doesn't depend on n in this case . return ( String ) value ; } / / Default : English strings and Germanic plural rule . return ( n ! = 1 ? msgid_plural : msgid ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle ( ( InputStream ) byteArrayInputStream0 ) ; String string0 = GettextResource . ngettext ( ( ResourceBundle ) propertyResourceBundle0 , "" , "" , 6L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ngettext ( ResourceBundle catalog , String msgid , String msgid_plural , long n ) { / / The reason why we use so many reflective API calls instead of letting / / the GNU gettext generated ResourceBundles implement some interface , / / is that we want the generated ResourceBundles to be completely / / standalone , so that migration from the Sun approach to the GNU gettext / / approach ( without use of plurals ) is as straightforward as possible . / / ResourceBundle origCatalog = catalog ; do { / / Try catalog itself . if ( verbose ) System . out . println ( "ngettext on " + catalog ) ; Method handleGetObjectMethod = null ; Method getParentMethod = null ; try { handleGetObjectMethod = catalog . getClass ( ) . getMethod ( "handleGetObject" , new Class [ ] { java . lang . String . class } ) ; getParentMethod = catalog . getClass ( ) . getMethod ( "getParent" , new Class [ 0 ] ) ; } catch ( NoSuchMethodException e ) { } catch ( SecurityException e ) { } if ( verbose ) System . out . println ( "handleGetObject = " + ( handleGetObjectMethod ! = null ) + " , getParent = " + ( getParentMethod ! = null ) ) ; if ( handleGetObjectMethod ! = null & & Modifier . isPublic ( handleGetObjectMethod . getModifiers ( ) ) & & getParentMethod ! = null ) { / / A GNU gettext created class . Method lookupMethod = null ; Method pluralEvalMethod = null ; try { lookupMethod = catalog . getClass ( ) . getMethod ( "lookup" , new Class [ ] { java . lang . String . class } ) ; pluralEvalMethod = catalog . getClass ( ) . getMethod ( "pluralEval" , new Class [ ] { Long . TYPE } ) ; } catch ( NoSuchMethodException e ) { } catch ( SecurityException e ) { } if ( verbose ) System . out . println ( "lookup = " + ( lookupMethod ! = null ) + " , pluralEval = " + ( pluralEvalMethod ! = null ) ) ; if ( lookupMethod ! = null & & pluralEvalMethod ! = null ) { / / A GNU gettext created class with plural handling . Object localValue = null ; try { localValue = lookupMethod . invoke ( catalog , new Object [ ] { msgid } ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( localValue ! = null ) { if ( verbose ) System . out . println ( "localValue = " + localValue ) ; if ( localValue instanceof String ) / / Found the value . It doesn't depend on n in this case . return ( String ) localValue ; else { String [ ] pluralforms = ( String [ ] ) localValue ; long i = 0 ; try { i = ( ( Long ) pluralEvalMethod . invoke ( catalog , new Object [ ] { new Long ( n ) } ) ) . longValue ( ) ; if ( ! ( i > = 0 & & i < pluralforms . length ) ) i = 0 ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } return pluralforms [ ( int ) i ] ; } } } else { / / A GNU gettext created class without plural handling . Object localValue = null ; try { localValue = handleGetObjectMethod . invoke ( catalog , new Object [ ] { msgid } ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( localValue ! = null ) { / / Found the value . It doesn't depend on n in this case . if ( verbose ) System . out . println ( "localValue = " + localValue ) ; return ( String ) localValue ; } } Object parentCatalog = catalog ; try { parentCatalog = getParentMethod . invoke ( catalog , new Object [ 0 ] ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( parentCatalog ! = catalog ) catalog = ( ResourceBundle ) parentCatalog ; else break ; } else / / Not a GNU gettext created class . break ; } while ( catalog ! = null ) ; / / The end of chain of GNU gettext ResourceBundles is reached . if ( catalog ! = null ) { / / For a non - GNU ResourceBundle we cannot access 'parent' and / / 'handleGetObject' , so make a single call to catalog and all / / its parent catalogs at once . Object value ; try { value = catalog . getObject ( msgid ) ; } catch ( MissingResourceException e ) { value = null ; } if ( value ! = null ) / / Found the value . It doesn't depend on n in this case . return ( String ) value ; } / / Default : English strings and Germanic plural rule . return ( n ! = 1 ? msgid_plural : msgid ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle ( ( InputStream ) byteArrayInputStream0 ) ; String string0 = GettextResource . ngettext ( ( ResourceBundle ) propertyResourceBundle0 , "" , "" , ( long ) ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ngettext ( ResourceBundle catalog , String msgid , String msgid_plural , long n ) { / / The reason why we use so many reflective API calls instead of letting / / the GNU gettext generated ResourceBundles implement some interface , / / is that we want the generated ResourceBundles to be completely / / standalone , so that migration from the Sun approach to the GNU gettext / / approach ( without use of plurals ) is as straightforward as possible . / / ResourceBundle origCatalog = catalog ; do { / / Try catalog itself . if ( verbose ) System . out . println ( "ngettext on " + catalog ) ; Method handleGetObjectMethod = null ; Method getParentMethod = null ; try { handleGetObjectMethod = catalog . getClass ( ) . getMethod ( "handleGetObject" , new Class [ ] { java . lang . String . class } ) ; getParentMethod = catalog . getClass ( ) . getMethod ( "getParent" , new Class [ 0 ] ) ; } catch ( NoSuchMethodException e ) { } catch ( SecurityException e ) { } if ( verbose ) System . out . println ( "handleGetObject = " + ( handleGetObjectMethod ! = null ) + " , getParent = " + ( getParentMethod ! = null ) ) ; if ( handleGetObjectMethod ! = null & & Modifier . isPublic ( handleGetObjectMethod . getModifiers ( ) ) & & getParentMethod ! = null ) { / / A GNU gettext created class . Method lookupMethod = null ; Method pluralEvalMethod = null ; try { lookupMethod = catalog . getClass ( ) . getMethod ( "lookup" , new Class [ ] { java . lang . String . class } ) ; pluralEvalMethod = catalog . getClass ( ) . getMethod ( "pluralEval" , new Class [ ] { Long . TYPE } ) ; } catch ( NoSuchMethodException e ) { } catch ( SecurityException e ) { } if ( verbose ) System . out . println ( "lookup = " + ( lookupMethod ! = null ) + " , pluralEval = " + ( pluralEvalMethod ! = null ) ) ; if ( lookupMethod ! = null & & pluralEvalMethod ! = null ) { / / A GNU gettext created class with plural handling . Object localValue = null ; try { localValue = lookupMethod . invoke ( catalog , new Object [ ] { msgid } ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( localValue ! = null ) { if ( verbose ) System . out . println ( "localValue = " + localValue ) ; if ( localValue instanceof String ) / / Found the value . It doesn't depend on n in this case . return ( String ) localValue ; else { String [ ] pluralforms = ( String [ ] ) localValue ; long i = 0 ; try { i = ( ( Long ) pluralEvalMethod . invoke ( catalog , new Object [ ] { new Long ( n ) } ) ) . longValue ( ) ; if ( ! ( i > = 0 & & i < pluralforms . length ) ) i = 0 ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } return pluralforms [ ( int ) i ] ; } } } else { / / A GNU gettext created class without plural handling . Object localValue = null ; try { localValue = handleGetObjectMethod . invoke ( catalog , new Object [ ] { msgid } ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( localValue ! = null ) { / / Found the value . It doesn't depend on n in this case . if ( verbose ) System . out . println ( "localValue = " + localValue ) ; return ( String ) localValue ; } } Object parentCatalog = catalog ; try { parentCatalog = getParentMethod . invoke ( catalog , new Object [ 0 ] ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } catch ( InvocationTargetException e ) { e . getTargetException ( ) . printStackTrace ( ) ; } if ( parentCatalog ! = catalog ) catalog = ( ResourceBundle ) parentCatalog ; else break ; } else / / Not a GNU gettext created class . break ; } while ( catalog ! = null ) ; / / The end of chain of GNU gettext ResourceBundles is reached . if ( catalog ! = null ) { / / For a non - GNU ResourceBundle we cannot access 'parent' and / / 'handleGetObject' , so make a single call to catalog and all / / its parent catalogs at once . Object value ; try { value = catalog . getObject ( msgid ) ; } catch ( MissingResourceException e ) { value = null ; } if ( value ! = null ) / / Found the value . It doesn't depend on n in this case . return ( String ) value ; } / / Default : English strings and Germanic plural rule . return ( n ! = 1 ? msgid_plural : msgid ) ; }
void test3 ( ) throws Throwable { StringReader stringReader0 = new StringReader ( "4_\"f2" ) ; PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle ( ( Reader ) stringReader0 ) ; String string0 = GettextResource . gettext ( ( ResourceBundle ) propertyResourceBundle0 , "4_\"f2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String gettext ( ResourceBundle catalog , String msgid ) { try { String result = ( String ) catalog . getObject ( msgid ) ; if ( result ! = null ) return result ; } catch ( MissingResourceException e ) { } return msgid ; }
void test1 ( ) throws Throwable { ExceptionMessageProvider exceptionMessageProvider0 = ExceptionMessageProvider . getInstance ( ) ; String string0 = exceptionMessageProvider0 . getExceptionMessage ( ( Object ) exceptionMessageProvider0 , ( - 1253 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExceptionMessage ( Object exceptionTypeKey , int exceptionErrorCode , String [ ] args ) { String retVal = "" ; try { ExceptionMessageProvider emp = ExceptionMessageProvider . getInstance ( ) ; if ( emp ! = null ) { retVal = ExceptionMessageProvider . getInstance ( ) . getExceptionMessage ( exceptionTypeKey , exceptionErrorCode , args ) ; } else { retVal = "ExceptionMessageProvider is null : exceptionTypeKey = " + exceptionTypeKey . toString ( ) + " exceptionErrorCode = " + exceptionErrorCode ; } } catch ( Exception ex ) { retVal = "Unable to get Exception message [ " + ex . getMessage ( ) + " ] exceptionTypeKey = " + exceptionTypeKey . toString ( ) + " exceptionErrorCode = " + exceptionErrorCode ; } return retVal ; }
void test2 ( ) throws Throwable { ExceptionMessageProvider exceptionMessageProvider0 = ExceptionMessageProvider . getInstance ( ) ; String [ ] stringArray0 = new String [ 12 ] ; String string0 = exceptionMessageProvider0 . getExceptionMessage ( ( Object ) exceptionMessageProvider0 , 0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExceptionMessage ( Object exceptionTypeKey , int exceptionErrorCode , String [ ] args ) { String retVal = "" ; try { ExceptionMessageProvider emp = ExceptionMessageProvider . getInstance ( ) ; if ( emp ! = null ) { retVal = ExceptionMessageProvider . getInstance ( ) . getExceptionMessage ( exceptionTypeKey , exceptionErrorCode , args ) ; } else { retVal = "ExceptionMessageProvider is null : exceptionTypeKey = " + exceptionTypeKey . toString ( ) + " exceptionErrorCode = " + exceptionErrorCode ; } } catch ( Exception ex ) { retVal = "Unable to get Exception message [ " + ex . getMessage ( ) + " ] exceptionTypeKey = " + exceptionTypeKey . toString ( ) + " exceptionErrorCode = " + exceptionErrorCode ; } return retVal ; }
void test3 ( ) throws Throwable { ExceptionMessageProvider exceptionMessageProvider0 = ExceptionMessageProvider . getInstance ( ) ; String string0 = exceptionMessageProvider0 . getLocalizedExceptionMessage ( ( Object ) "" , 341 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLocalizedExceptionMessage ( Object exceptionTypeKey , int exceptionErrorCode , String [ ] args ) { String retVal = "" ; try { ExceptionMessageProvider emp = ExceptionMessageProvider . getInstance ( ) ; if ( emp ! = null ) { retVal = ExceptionMessageProvider . getInstance ( ) . getLocalizedExceptionMessage ( exceptionTypeKey , exceptionErrorCode , args ) ; } else { retVal = "ExceptionMessageProvider is null : exceptionTypeKey = " + exceptionTypeKey . toString ( ) + " exceptionErrorCode = " + exceptionErrorCode ; } } catch ( Exception ex ) { retVal = "Unable to get Localized Exception message [ " + ex . getMessage ( ) + " ] exceptionTypeKey = " + exceptionTypeKey . toString ( ) + " exceptionErrorCode = " + exceptionErrorCode ; } return retVal ; }
void test4 ( ) throws Throwable { ExceptionMessageProvider exceptionMessageProvider0 = ExceptionMessageProvider . getInstance ( ) ; String [ ] stringArray0 = new String [ 1 ] ; String string0 = exceptionMessageProvider0 . getLocalizedExceptionMessage ( ( Object ) "UNK341 - " , 341 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLocalizedExceptionMessage ( Object exceptionTypeKey , int exceptionErrorCode , String [ ] args ) { String retVal = "" ; try { ExceptionMessageProvider emp = ExceptionMessageProvider . getInstance ( ) ; if ( emp ! = null ) { retVal = ExceptionMessageProvider . getInstance ( ) . getLocalizedExceptionMessage ( exceptionTypeKey , exceptionErrorCode , args ) ; } else { retVal = "ExceptionMessageProvider is null : exceptionTypeKey = " + exceptionTypeKey . toString ( ) + " exceptionErrorCode = " + exceptionErrorCode ; } } catch ( Exception ex ) { retVal = "Unable to get Localized Exception message [ " + ex . getMessage ( ) + " ] exceptionTypeKey = " + exceptionTypeKey . toString ( ) + " exceptionErrorCode = " + exceptionErrorCode ; } return retVal ; }
void test0 ( ) throws Throwable { JCheckBox jCheckBox0 = new JCheckBox ( ( Icon ) null ) ; JCheckBox [ ] jCheckBoxArray0 = new JCheckBox [ 4 ] ; EncryptionTypeComboActionListener encryptionTypeComboActionListener0 = new EncryptionTypeComboActionListener ( jCheckBox0 , jCheckBoxArray0 , ( JPdfVersionCombo ) null ) ; ItemEvent itemEvent0 = new ItemEvent ( ( ItemSelectable ) jCheckBox0 , ( - 1 ) , ( Object ) "Undo" , 2 ) ; encryptionTypeComboActionListener0 . itemStateChanged ( itemEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void itemStateChanged ( ItemEvent e ) { if ( e . getStateChange ( ) = = ItemEvent . SELECTED ) { if ( ! allowAllCheck . isSelected ( ) ) { Object source = e . getSource ( ) ; if ( source instanceof JComboBox ) { String encType = ( String ) e . getItem ( ) ; System . out . println ( "EncType : " + encType ) ; if ( EncryptionUtility . RC4_40 . equals ( encType ) ) { System . out . println ( "Abilito solo RC4" ) ; permissionsCheck [ EncryptMainGUI . PRINT ] . setEnabled ( true ) ; permissionsCheck [ EncryptMainGUI . DPRINT ] . setEnabled ( false ) ; permissionsCheck [ EncryptMainGUI . COPY ] . setEnabled ( true ) ; permissionsCheck [ EncryptMainGUI . MODIFY ] . setEnabled ( true ) ; permissionsCheck [ EncryptMainGUI . ANNOTATION ] . setEnabled ( true ) ; permissionsCheck [ EncryptMainGUI . FILL ] . setEnabled ( false ) ; permissionsCheck [ EncryptMainGUI . SCREEN ] . setEnabled ( false ) ; permissionsCheck [ EncryptMainGUI . ASSEMBLY ] . setEnabled ( false ) ; } else { System . out . println ( "Altro enctype , abilito tutto" ) ; for ( int i = 0 ; i < permissionsCheck . length ; i + + ) { permissionsCheck [ i ] . setEnabled ( true ) ; } if ( encType . equals ( EncryptionUtility . RC4_128 ) ) { versionCombo . addVersionFilter ( RC4_128_FILTER ) ; } else if ( encType . equals ( EncryptionUtility . AES_128 ) ) { versionCombo . addVersionFilter ( AES_FILTER ) ; } } } } } else if ( e . getStateChange ( ) = = ItemEvent . DESELECTED ) { Object source = e . getSource ( ) ; if ( source instanceof JComboBox ) { String encType = ( String ) e . getItem ( ) ; if ( encType . equals ( EncryptionUtility . RC4_128 ) ) { versionCombo . removeVersionFilter ( RC4_128_FILTER ) ; } else if ( encType . equals ( EncryptionUtility . AES_128 ) ) { versionCombo . removeVersionFilter ( AES_FILTER ) ; } } } }
void test1 ( ) throws Throwable { DefaultEditorKit . InsertBreakAction defaultEditorKit_InsertBreakAction0 = new DefaultEditorKit . InsertBreakAction ( ) ; JCheckBox jCheckBox0 = new JCheckBox ( ( Action ) defaultEditorKit_InsertBreakAction0 ) ; JCheckBox [ ] jCheckBoxArray0 = new JCheckBox [ 11 ] ; jCheckBoxArray0 [ 2 ] = jCheckBox0 ; jCheckBoxArray0 [ 5 ] = jCheckBoxArray0 [ 2 ] ; EncryptionTypeComboActionListener encryptionTypeComboActionListener0 = new EncryptionTypeComboActionListener ( jCheckBox0 , jCheckBoxArray0 , ( JPdfVersionCombo ) null ) ; ItemEvent itemEvent0 = new ItemEvent ( ( ItemSelectable ) jCheckBoxArray0 [ 5 ] , 1 , ( Object ) null , 1 ) ; encryptionTypeComboActionListener0 . itemStateChanged ( itemEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void itemStateChanged ( ItemEvent e ) { if ( e . getStateChange ( ) = = ItemEvent . SELECTED ) { if ( ! allowAllCheck . isSelected ( ) ) { Object source = e . getSource ( ) ; if ( source instanceof JComboBox ) { String encType = ( String ) e . getItem ( ) ; System . out . println ( "EncType : " + encType ) ; if ( EncryptionUtility . RC4_40 . equals ( encType ) ) { System . out . println ( "Abilito solo RC4" ) ; permissionsCheck [ EncryptMainGUI . PRINT ] . setEnabled ( true ) ; permissionsCheck [ EncryptMainGUI . DPRINT ] . setEnabled ( false ) ; permissionsCheck [ EncryptMainGUI . COPY ] . setEnabled ( true ) ; permissionsCheck [ EncryptMainGUI . MODIFY ] . setEnabled ( true ) ; permissionsCheck [ EncryptMainGUI . ANNOTATION ] . setEnabled ( true ) ; permissionsCheck [ EncryptMainGUI . FILL ] . setEnabled ( false ) ; permissionsCheck [ EncryptMainGUI . SCREEN ] . setEnabled ( false ) ; permissionsCheck [ EncryptMainGUI . ASSEMBLY ] . setEnabled ( false ) ; } else { System . out . println ( "Altro enctype , abilito tutto" ) ; for ( int i = 0 ; i < permissionsCheck . length ; i + + ) { permissionsCheck [ i ] . setEnabled ( true ) ; } if ( encType . equals ( EncryptionUtility . RC4_128 ) ) { versionCombo . addVersionFilter ( RC4_128_FILTER ) ; } else if ( encType . equals ( EncryptionUtility . AES_128 ) ) { versionCombo . addVersionFilter ( AES_FILTER ) ; } } } } } else if ( e . getStateChange ( ) = = ItemEvent . DESELECTED ) { Object source = e . getSource ( ) ; if ( source instanceof JComboBox ) { String encType = ( String ) e . getItem ( ) ; if ( encType . equals ( EncryptionUtility . RC4_128 ) ) { versionCombo . removeVersionFilter ( RC4_128_FILTER ) ; } else if ( encType . equals ( EncryptionUtility . AES_128 ) ) { versionCombo . removeVersionFilter ( AES_FILTER ) ; } } } }
void test2 ( ) throws Throwable { JCheckBox jCheckBox0 = new JCheckBox ( ( Icon ) null ) ; JCheckBox [ ] jCheckBoxArray0 = new JCheckBox [ 4 ] ; jCheckBoxArray0 [ 0 ] = jCheckBox0 ; EncryptionTypeComboActionListener encryptionTypeComboActionListener0 = new EncryptionTypeComboActionListener ( jCheckBox0 , jCheckBoxArray0 , ( JPdfVersionCombo ) null ) ; ItemEvent itemEvent0 = new ItemEvent ( ( ItemSelectable ) jCheckBoxArray0 [ 0 ] , 3 , ( Object ) "Undo" , 3 ) ; encryptionTypeComboActionListener0 . itemStateChanged ( itemEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void itemStateChanged ( ItemEvent e ) { if ( e . getStateChange ( ) = = ItemEvent . SELECTED ) { if ( ! allowAllCheck . isSelected ( ) ) { Object source = e . getSource ( ) ; if ( source instanceof JComboBox ) { String encType = ( String ) e . getItem ( ) ; System . out . println ( "EncType : " + encType ) ; if ( EncryptionUtility . RC4_40 . equals ( encType ) ) { System . out . println ( "Abilito solo RC4" ) ; permissionsCheck [ EncryptMainGUI . PRINT ] . setEnabled ( true ) ; permissionsCheck [ EncryptMainGUI . DPRINT ] . setEnabled ( false ) ; permissionsCheck [ EncryptMainGUI . COPY ] . setEnabled ( true ) ; permissionsCheck [ EncryptMainGUI . MODIFY ] . setEnabled ( true ) ; permissionsCheck [ EncryptMainGUI . ANNOTATION ] . setEnabled ( true ) ; permissionsCheck [ EncryptMainGUI . FILL ] . setEnabled ( false ) ; permissionsCheck [ EncryptMainGUI . SCREEN ] . setEnabled ( false ) ; permissionsCheck [ EncryptMainGUI . ASSEMBLY ] . setEnabled ( false ) ; } else { System . out . println ( "Altro enctype , abilito tutto" ) ; for ( int i = 0 ; i < permissionsCheck . length ; i + + ) { permissionsCheck [ i ] . setEnabled ( true ) ; } if ( encType . equals ( EncryptionUtility . RC4_128 ) ) { versionCombo . addVersionFilter ( RC4_128_FILTER ) ; } else if ( encType . equals ( EncryptionUtility . AES_128 ) ) { versionCombo . addVersionFilter ( AES_FILTER ) ; } } } } } else if ( e . getStateChange ( ) = = ItemEvent . DESELECTED ) { Object source = e . getSource ( ) ; if ( source instanceof JComboBox ) { String encType = ( String ) e . getItem ( ) ; if ( encType . equals ( EncryptionUtility . RC4_128 ) ) { versionCombo . removeVersionFilter ( RC4_128_FILTER ) ; } else if ( encType . equals ( EncryptionUtility . AES_128 ) ) { versionCombo . removeVersionFilter ( AES_FILTER ) ; } } } }
void test0 ( ) throws Throwable { JSplitRadioButtonModel jSplitRadioButtonModel0 = new JSplitRadioButtonModel ( "" ) ; jSplitRadioButtonModel0 . setSplitCommand ( "s ? y%@~ ! - & G / gX & _" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setSplitCommand ( String split_command ) { this . split_command = split_command ; }
void test1 ( ) throws Throwable { JSplitRadioButtonModel jSplitRadioButtonModel0 = new JSplitRadioButtonModel ( "" ) ; String string0 = jSplitRadioButtonModel0 . getSplitCommand ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSplitCommand ( ) { return split_command ; }
void test0 ( ) throws Throwable { JSplitRadioButton jSplitRadioButton0 = new JSplitRadioButton ( "" ) ; String string0 = jSplitRadioButton0 . getSplitCommand ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSplitCommand ( ) { return split_command ; }
void test0 ( ) throws Throwable { JSplitSizeCombo jSplitSizeCombo0 = new JSplitSizeCombo ( ) ; long long0 = jSplitSizeCombo0 . getSelectedBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValidSelectedItem ( ) { pattern . matcher ( ( String ) getSelectedItem ( ) ) . reset ( ) ; return pattern . matcher ( ( String ) getSelectedItem ( ) ) . matches ( ) ; }
void test2 ( ) throws Throwable { JSplitSizeCombo jSplitSizeCombo0 = new JSplitSizeCombo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSelectedItem ( ) { return ( getSelectedItem ( ) ! = null & & ( ( String ) getSelectedItem ( ) ) . trim ( ) . length ( ) > 0 ) ; }
void test3 ( ) throws Throwable { JSplitSizeCombo jSplitSizeCombo0 = new JSplitSizeCombo ( ) ; boolean boolean0 = jSplitSizeCombo0 . isSelectedItem ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValidSelectedItem ( ) { pattern . matcher ( ( String ) getSelectedItem ( ) ) . reset ( ) ; return pattern . matcher ( ( String ) getSelectedItem ( ) ) . matches ( ) ; }
void test4 ( ) throws Throwable { JSplitSizeCombo jSplitSizeCombo0 = new JSplitSizeCombo ( ) ; jSplitSizeCombo0 . setSelectedItem ( ( Object ) "UPPER_LEFT_CORNER" ) ; boolean boolean0 = jSplitSizeCombo0 . isSelectedItem ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSelectedIndex ( ) { return levelCombo . getSelectedIndex ( ) ; }
void test0 ( ) throws Throwable { RunButtonActionListener runButtonActionListener0 = new RunButtonActionListener ( ( VComposerMainGUI ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RunButtonActionListener ( EncryptMainGUI panel ) { super ( ) ; this . panel = panel ; }
void test0 ( ) throws Throwable { SetMetaFieldsHook setMetaFieldsHook0 = new SetMetaFieldsHook ( ( DocInfoMainGUI ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SetMetaFieldsHook ( DocInfoMainGUI panel ) { super ( ) ; this . panel = panel ; }
void test0 ( ) throws Throwable { RunButtonActionListener runButtonActionListener0 = new RunButtonActionListener ( ( VPageReorderMainGUI ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RunButtonActionListener ( EncryptMainGUI panel ) { super ( ) ; this . panel = panel ; }
void test0 ( ) throws Throwable { String string0 = GuiClient . getApplicationName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getApplicationName ( ) { return NAME + " " + defaultProps . getProperty ( VERSION_TYPE_PROPERTY , VERSION_TYPE_DEFAULT ) ; }
void test1 ( ) throws Throwable { String string0 = GuiClient . getVersionType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersionType ( ) { return defaultProps . getProperty ( VERSION_TYPE_PROPERTY , VERSION_TYPE_DEFAULT ) ; }
void test2 ( ) throws Throwable { String string0 = GuiClient . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return MainGUI . APP_VERSION ; }
void test3 ( ) throws Throwable { String string0 = GuiClient . getBuildDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBuildDate ( ) { return defaultProps . getProperty ( BUILDDATE_PROPERTY , BUILDDATE_DEFAULT ) ; }
void test4 ( ) throws Throwable { GuiClient guiClient0 = new GuiClient ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getApplicationName ( ) { return NAME + " " + defaultProps . getProperty ( VERSION_TYPE_PROPERTY , VERSION_TYPE_DEFAULT ) ; }
void test5 ( ) throws Throwable { String string0 = GuiClient . getBranch ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBranch ( ) { return defaultProps . getProperty ( BRANCH_PROPERTY , BRANCH_DEFAULT ) ; }
void test0 ( ) throws Throwable { ApplicationCloser applicationCloser0 = new ApplicationCloser ( ( JMainFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ApplicationCloser ( JMainFrame mainFrame ) { super ( ) ; this . mainFrame = mainFrame ; }
void test0 ( ) throws Throwable { IdManager idManager0 = IdManager . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNewId ( ) { id + + ; return id ; }
void test1 ( ) throws Throwable { IdManager idManager0 = IdManager . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object clone ( ) throws CloneNotSupportedException { throw new CloneNotSupportedException ( "Cannot clone configuration object . " ) ; }
void test2 ( ) throws Throwable { IdManager idManager0 = IdManager . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNewId ( ) { id + + ; return id ; }
void test3 ( ) throws Throwable { IdManager idManager0 = IdManager . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNewId ( ) { id + + ; return id ; }
void test4 ( ) throws Throwable { IdManager idManager0 = IdManager . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNewId ( ) { id + + ; return id ; }
void test1 ( ) throws Throwable { TextPaneAppender textPaneAppender0 = new TextPaneAppender ( ) ; textPaneAppender0 . finalize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean requiresLayout ( ) { return true ; }
void test0 ( ) throws Throwable { Document document0 = new Document ( ) ; IcdPdfCreatorCloser icdPdfCreatorCloser0 = new IcdPdfCreatorCloser ( document0 ) ; Boolean boolean0 = icdPdfCreatorCloser0 . call ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean call ( ) { Boolean retVal = Boolean . FALSE ; try { if ( pdfDoc ! = null ) { pdfDoc . close ( ) ; pdfDoc = null ; retVal = Boolean . TRUE ; } } catch ( Exception e ) { log . error ( GettextResource . gettext ( Configuration . getInstance ( ) . getI18nResourceBundle ( ) , "Unable to close thumbnail creator" ) , e ) ; } return retVal ; }
void test0 ( ) throws Throwable { JPodCreatorCloser jPodCreatorCloser0 = new JPodCreatorCloser ( ( PDDocument ) null ) ; Boolean boolean0 = jPodCreatorCloser0 . call ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean call ( ) { Boolean retVal = Boolean . FALSE ; try { if ( pdfDoc ! = null ) { pdfDoc . close ( ) ; pdfDoc = null ; retVal = Boolean . TRUE ; } } catch ( Exception e ) { log . error ( GettextResource . gettext ( Configuration . getInstance ( ) . getI18nResourceBundle ( ) , "Unable to close thumbnail creator" ) , e ) ; } return retVal ; }
void test1 ( ) throws Throwable { PDDocument pDDocument0 = PDDocument . createNew ( ) ; JPodCreatorCloser jPodCreatorCloser0 = new JPodCreatorCloser ( pDDocument0 ) ; Boolean boolean0 = jPodCreatorCloser0 . call ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { JPodThumbnailCreator jPodThumbnailCreator0 = new JPodThumbnailCreator ( ) ; long long0 = jPodThumbnailCreator0 . getCurrentId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCurrentId ( ) { return currentId ; }
void test4 ( ) throws Throwable { IcePdfThumbnailsCreator icePdfThumbnailsCreator0 = new IcePdfThumbnailsCreator ( ) ; icePdfThumbnailsCreator0 . clean ( 636L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCurrentId ( ) { return currentId ; }
void test5 ( ) throws Throwable { IcePdfThumbnailsCreator icePdfThumbnailsCreator0 = new IcePdfThumbnailsCreator ( ) ; icePdfThumbnailsCreator0 . getPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCurrentId ( ) { return currentId ; }
void test0 ( ) throws Throwable { JPodThumbnailCreator jPodThumbnailCreator0 = new JPodThumbnailCreator ( ) ; String string0 = jPodThumbnailCreator0 . getCreatorName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test1 ( ) throws Throwable { JPodThumbnailCreator jPodThumbnailCreator0 = new JPodThumbnailCreator ( ) ; String string0 = jPodThumbnailCreator0 . getCreatorIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreatorIdentifier ( ) ; }
void test2 ( ) throws Throwable { JPodThumbnailCreator jPodThumbnailCreator0 = new JPodThumbnailCreator ( ) ; int int0 = jPodThumbnailCreator0 . getResolution ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getResolution ( ) ; / * * * clean the thumbnails generation with the given id * * @param id * / void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test5 ( ) throws Throwable { JPodThumbnailCreator jPodThumbnailCreator0 = new JPodThumbnailCreator ( ) ; jPodThumbnailCreator0 . finalizeThumbnailsCreation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getResolution ( ) ; / * * * clean the thumbnails generation with the given id * * @param id * / void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test9 ( ) throws Throwable { JPodThumbnailCreator jPodThumbnailCreator0 = new JPodThumbnailCreator ( ) ; Callable < Boolean > callable0 = jPodThumbnailCreator0 . getCloserTask ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Callable < Boolean > getCloserTask ( ) throws ThumbnailCreationException ; / * * * @param modelList * the model list set on the Visual List Component * @return a Collection of tasks that will run the thumbnails generation * @throws ThumbnailCreationException * / Collection < ? extends Callable < Boolean > > getGenerationTasks ( Vector < VisualPageListItem > modelList ) throws ThumbnailCreationException ; / * * * generic finalization . It shouldn't clean resources used by the Thumbnails Generation Tasks ( Callable ) . * * @throws ThumbnailCreationException * / void finalizeThumbnailsCreation ( ) throws ThumbnailCreationException ; / * * * @return the providedPassword * / String getProvidedPassword ( ) { return providedPassword ; }
void test10 ( ) throws Throwable { JPodThumbnailCreator jPodThumbnailCreator0 = new JPodThumbnailCreator ( ) ; Vector < VisualPageListItem > vector0 = new Vector < VisualPageListItem > ( ) ; Collection < ? > collection0 = jPodThumbnailCreator0 . getGenerationTasks ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < ? extends Callable < Boolean > > getGenerationTasks ( Vector < VisualPageListItem > modelList ) throws ThumbnailCreationException ; / * * * generic finalization . It shouldn't clean resources used by the Thumbnails Generation Tasks ( Callable ) . * * @throws ThumbnailCreationException * / void finalizeThumbnailsCreation ( ) throws ThumbnailCreationException ; / * * * @return the providedPassword * / String getProvidedPassword ( ) { return providedPassword ; }
void test11 ( ) throws Throwable { JPodThumbnailCreator jPodThumbnailCreator0 = new JPodThumbnailCreator ( ) ; boolean boolean0 = jPodThumbnailCreator0 . openInputDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean openInputDocument ( ) throws ThumbnailCreationException ; / * * * @return the DocumentiInfo to set on the thumbnails panel * @throws ThumbnailCreationException * / DocumentInfo getDocumentInfo ( ) throws ThumbnailCreationException ; / * * * The model to set on thumbnails list before the thumbnails generation starts . This is used to show hourglasses images as thumbnails . * * @param template * Pages template . Used when loading an environment to set rotation and other informations * @return a Vector of VisualPageListItem * @throws ThumbnailCreationException * / Vector < VisualPageListItem > getDocumentModel ( List < DocumentPage > template ) throws ThumbnailCreationException ; / * * * @return The Collable that is submitted when all the thumbnails generation tasks are terminated . Used to close the document or other clean operations . * @throws ThumbnailCreationException * / Callable < Boolean > getCloserTask ( ) throws ThumbnailCreationException ; / * * * @param modelList * the model list set on the Visual List Component * @return a Collection of tasks that will run the thumbnails generation * @throws ThumbnailCreationException * / Collection < ? extends Callable < Boolean > > getGenerationTasks ( Vector < VisualPageListItem > modelList ) throws ThumbnailCreationException ; / * * * generic finalization . It shouldn't clean resources used by the Thumbnails Generation Tasks ( Callable ) . * * @throws ThumbnailCreationException * / void finalizeThumbnailsCreation ( ) throws ThumbnailCreationException ; / * * * @return the providedPassword * / String getProvidedPassword ( ) { return providedPassword ; }
void test0 ( ) throws Throwable { IcePdfThumbnailsCreator icePdfThumbnailsCreator0 = new IcePdfThumbnailsCreator ( ) ; icePdfThumbnailsCreator0 . initThumbnailsCreation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test1 ( ) throws Throwable { IcePdfThumbnailsCreator icePdfThumbnailsCreator0 = new IcePdfThumbnailsCreator ( ) ; String string0 = icePdfThumbnailsCreator0 . getCreatorName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test2 ( ) throws Throwable { IcePdfThumbnailsCreator icePdfThumbnailsCreator0 = new IcePdfThumbnailsCreator ( ) ; int int0 = icePdfThumbnailsCreator0 . getResolution ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getResolution ( ) ; / * * * clean the thumbnails generation with the given id * * @param id * / void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test3 ( ) throws Throwable { IcePdfThumbnailsCreator icePdfThumbnailsCreator0 = new IcePdfThumbnailsCreator ( ) ; String string0 = icePdfThumbnailsCreator0 . getCreatorIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreatorIdentifier ( ) ; }
void test4 ( ) throws Throwable { IcePdfThumbnailsCreator icePdfThumbnailsCreator0 = new IcePdfThumbnailsCreator ( ) ; icePdfThumbnailsCreator0 . finalizeThumbnailsCreation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getResolution ( ) ; / * * * clean the thumbnails generation with the given id * * @param id * / void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test5 ( ) throws Throwable { IcePdfThumbnailsCreator icePdfThumbnailsCreator0 = new IcePdfThumbnailsCreator ( ) ; Callable < Boolean > callable0 = icePdfThumbnailsCreator0 . getCloserTask ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Callable < Boolean > getCloserTask ( ) throws ThumbnailCreationException ; / * * * @param modelList * the model list set on the Visual List Component * @return a Collection of tasks that will run the thumbnails generation * @throws ThumbnailCreationException * / Collection < ? extends Callable < Boolean > > getGenerationTasks ( Vector < VisualPageListItem > modelList ) throws ThumbnailCreationException ; / * * * generic finalization . It shouldn't clean resources used by the Thumbnails Generation Tasks ( Callable ) . * * @throws ThumbnailCreationException * / void finalizeThumbnailsCreation ( ) throws ThumbnailCreationException ; / * * * @return the providedPassword * / String getProvidedPassword ( ) { return providedPassword ; }
void test6 ( ) throws Throwable { IcePdfThumbnailsCreator icePdfThumbnailsCreator0 = new IcePdfThumbnailsCreator ( ) ; Vector < VisualPageListItem > vector0 = new Vector < VisualPageListItem > ( ) ; Collection < ? > collection0 = icePdfThumbnailsCreator0 . getGenerationTasks ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < ? extends Callable < Boolean > > getGenerationTasks ( Vector < VisualPageListItem > modelList ) throws ThumbnailCreationException ; / * * * generic finalization . It shouldn't clean resources used by the Thumbnails Generation Tasks ( Callable ) . * * @throws ThumbnailCreationException * / void finalizeThumbnailsCreation ( ) throws ThumbnailCreationException ; / * * * @return the providedPassword * / String getProvidedPassword ( ) { return providedPassword ; }
void test0 ( ) throws Throwable { RunButtonActionListener runButtonActionListener0 = new RunButtonActionListener ( ( DocInfoMainGUI ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RunButtonActionListener ( EncryptMainGUI panel ) { super ( ) ; this . panel = panel ; }
void test1 ( ) throws Throwable { JTextField jTextField0 = new JTextField ( 5 ) ; AbstractRunButtonActionListener . ensurePdfExtensionOnTextField ( jTextField0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void ensurePdfExtensionOnTextField ( JTextField field ) { String stringWithExtension = FileExtensionUtility . ensureExtension ( field . getText ( ) , FileExtensionUtility . PDF_EXTENSION ) ; if ( ! StringUtils . equalsIgnoreCase ( stringWithExtension , field . getText ( ) ) ) { field . setText ( stringWithExtension ) ; } }
void test2 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( " ; NvfAOt ? } qdqODg , F" ) ; AbstractRunButtonActionListener . ensurePdfExtensionOnTextField ( ( JTextField ) jPasswordField0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void ensurePdfExtensionOnTextField ( JTextField field ) { String stringWithExtension = FileExtensionUtility . ensureExtension ( field . getText ( ) , FileExtensionUtility . PDF_EXTENSION ) ; if ( ! StringUtils . equalsIgnoreCase ( stringWithExtension , field . getText ( ) ) ) { field . setText ( stringWithExtension ) ; } }
void test0 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( ) ; PrefixMenuActionListener prefixMenuActionListener0 = new PrefixMenuActionListener ( ( JTextField ) jPasswordField0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "com . sun . media . jai . util . SunTileCache@28370973 : memoryCapacity = 6ed memoryUsage = 0 #tilesInCache = 0" , 0 , "filenumber" , 0 ) ; prefixMenuActionListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { switch ( policy ) { case RadioListener . DISABLE_ALL : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; case RadioListener . DISABLE_FIRST : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) { second_text . setEnabled ( true ) ; second_text . requestFocus ( ) ; } break ; case RadioListener . DISABLE_SECOND : if ( first_text ! = null ) { first_text . setEnabled ( true ) ; first_text . requestFocus ( ) ; } if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; default : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; } / / sets the split type if ( container instanceof it . pdfsam . plugin . split . GUI . SplitMainGUI ) { container . setSplitType ( e . getActionCommand ( ) ) ; } }
void test1 ( ) throws Throwable { ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "basename" , 47 , "basename" ) ; JPasswordField jPasswordField0 = new JPasswordField ( ) ; PrefixMenuActionListener prefixMenuActionListener0 = new PrefixMenuActionListener ( ( JTextField ) jPasswordField0 ) ; prefixMenuActionListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { switch ( policy ) { case RadioListener . DISABLE_ALL : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; case RadioListener . DISABLE_FIRST : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) { second_text . setEnabled ( true ) ; second_text . requestFocus ( ) ; } break ; case RadioListener . DISABLE_SECOND : if ( first_text ! = null ) { first_text . setEnabled ( true ) ; first_text . requestFocus ( ) ; } if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; default : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; } / / sets the split type if ( container instanceof it . pdfsam . plugin . split . GUI . SplitMainGUI ) { container . setSplitType ( e . getActionCommand ( ) ) ; } }
void test2 ( ) throws Throwable { JTextField jTextField0 = new JTextField ( 1709 ) ; PrefixMenuActionListener prefixMenuActionListener0 = new PrefixMenuActionListener ( jTextField0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "Name" , 1709 , "timestamp" , ( long ) 1709 , 1709 ) ; prefixMenuActionListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { switch ( policy ) { case RadioListener . DISABLE_ALL : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; case RadioListener . DISABLE_FIRST : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) { second_text . setEnabled ( true ) ; second_text . requestFocus ( ) ; } break ; case RadioListener . DISABLE_SECOND : if ( first_text ! = null ) { first_text . setEnabled ( true ) ; first_text . requestFocus ( ) ; } if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; default : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; } / / sets the split type if ( container instanceof it . pdfsam . plugin . split . GUI . SplitMainGUI ) { container . setSplitType ( e . getActionCommand ( ) ) ; } }
void test3 ( ) throws Throwable { PrefixMenuActionListener prefixMenuActionListener0 = new PrefixMenuActionListener ( ( JTextField ) null ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "currentpage" , ( - 1197 ) , "currentpage" , ( - 1197 ) ) ; prefixMenuActionListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { switch ( policy ) { case RadioListener . DISABLE_ALL : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; case RadioListener . DISABLE_FIRST : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) { second_text . setEnabled ( true ) ; second_text . requestFocus ( ) ; } break ; case RadioListener . DISABLE_SECOND : if ( first_text ! = null ) { first_text . setEnabled ( true ) ; first_text . requestFocus ( ) ; } if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; default : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; } / / sets the split type if ( container instanceof it . pdfsam . plugin . split . GUI . SplitMainGUI ) { container . setSplitType ( e . getActionCommand ( ) ) ; } }
void test4 ( ) throws Throwable { ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "Min" , ( - 1197 ) , "bookmarkname" ) ; PrefixMenuActionListener prefixMenuActionListener0 = new PrefixMenuActionListener ( ( JTextField ) null ) ; prefixMenuActionListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test5 ( ) throws Throwable { JTextField jTextField0 = new JTextField ( ) ; PrefixMenuActionListener prefixMenuActionListener0 = new PrefixMenuActionListener ( jTextField0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "decrypt" , 0 , "decrypt" ) ; prefixMenuActionListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { switch ( policy ) { case RadioListener . DISABLE_ALL : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; case RadioListener . DISABLE_FIRST : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) { second_text . setEnabled ( true ) ; second_text . requestFocus ( ) ; } break ; case RadioListener . DISABLE_SECOND : if ( first_text ! = null ) { first_text . setEnabled ( true ) ; first_text . requestFocus ( ) ; } if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; default : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; } / / sets the split type if ( container instanceof it . pdfsam . plugin . split . GUI . SplitMainGUI ) { container . setSplitType ( e . getActionCommand ( ) ) ; } }
void test0 ( ) throws Throwable { DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer ( ) ; JPreviewImage jPreviewImage0 = new JPreviewImage ( ( Image ) null ) ; MouseWheelZoomListener mouseWheelZoomListener0 = new MouseWheelZoomListener ( jPreviewImage0 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) defaultTreeCellRenderer0 , ( - 892 ) , 0L , 1 , 0 , 0 , 1 , false , 1354 , 20000 , 895 ) ; mouseWheelZoomListener0 . mouseWheelMoved ( mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseWheelMoved ( MouseWheelEvent e ) { if ( ( e . getModifiers ( ) & InputEvent . CTRL_MASK ) = = InputEvent . CTRL_MASK ) { if ( e . getScrollType ( ) = = MouseWheelEvent . WHEEL_UNIT_SCROLL ) { image . zoom ( e . getWheelRotation ( ) ) ; } } }
void test1 ( ) throws Throwable { JPreviewImage jPreviewImage0 = new JPreviewImage ( ( Image ) null ) ; MouseWheelZoomListener mouseWheelZoomListener0 = new MouseWheelZoomListener ( jPreviewImage0 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jPreviewImage0 , 0 , ( - 785L ) , 1546 , ( - 145 ) , 0 , ( - 1 ) , 1491 , ( - 1 ) , false , 0 , 1491 , 1491 ) ; mouseWheelZoomListener0 . mouseWheelMoved ( mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseWheelMoved ( MouseWheelEvent e ) { if ( ( e . getModifiers ( ) & InputEvent . CTRL_MASK ) = = InputEvent . CTRL_MASK ) { if ( e . getScrollType ( ) = = MouseWheelEvent . WHEEL_UNIT_SCROLL ) { image . zoom ( e . getWheelRotation ( ) ) ; } } }
void test2 ( ) throws Throwable { JPreviewImage jPreviewImage0 = new JPreviewImage ( ( Image ) null ) ; MouseWheelZoomListener mouseWheelZoomListener0 = new MouseWheelZoomListener ( jPreviewImage0 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jPreviewImage0 , ( - 145 ) , ( long ) ( - 145 ) , 1986 , 1986 , ( - 145 ) , 1986 , 1986 , ( - 145 ) , true , 1165 , ( - 1927 ) , ( - 145 ) ) ; mouseWheelZoomListener0 . mouseWheelMoved ( mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JButton getButton ( ) { return button ; }
void test0 ( ) throws Throwable { EnterDoClickListener enterDoClickListener0 = new EnterDoClickListener ( ( JButton ) null ) ; JButton jButton0 = enterDoClickListener0 . getButton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JButton getButton ( ) { return button ; }
void test1 ( ) throws Throwable { JButton jButton0 = new JButton ( ( Icon ) null ) ; EnterDoClickListener enterDoClickListener0 = new EnterDoClickListener ( jButton0 ) ; enterDoClickListener0 . setButton ( jButton0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setButton ( JButton button ) { this . button = button ; }
void test3 ( ) throws Throwable { JButton jButton0 = new JButton ( "Q" , ( Icon ) null ) ; EnterDoClickListener enterDoClickListener0 = new EnterDoClickListener ( jButton0 ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) jButton0 , 8 , ( long ) 8 , 600 , 8 , 'S' ) ; enterDoClickListener0 . keyPressed ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyPressed ( KeyEvent e ) { if ( button ! = null ) { if ( e . getKeyCode ( ) = = KeyEvent . VK_ENTER ) { button . doClick ( ) ; } } }
void test1 ( ) throws Throwable { LogActionListener logActionListener0 = new LogActionListener ( ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "selectalllog" , ( - 8 ) , "selectalllog" ) ; logActionListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { switch ( policy ) { case RadioListener . DISABLE_ALL : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; case RadioListener . DISABLE_FIRST : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) { second_text . setEnabled ( true ) ; second_text . requestFocus ( ) ; } break ; case RadioListener . DISABLE_SECOND : if ( first_text ! = null ) { first_text . setEnabled ( true ) ; first_text . requestFocus ( ) ; } if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; default : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; } / / sets the split type if ( container instanceof it . pdfsam . plugin . split . GUI . SplitMainGUI ) { container . setSplitType ( e . getActionCommand ( ) ) ; } }
void test3 ( ) throws Throwable { ApplicationExitMediator applicationExitMediator0 = new ApplicationExitMediator ( ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "caret - down" , ( - 1315 ) , "caret - down" , 6L , ( - 1315 ) ) ; applicationExitMediator0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { switch ( policy ) { case RadioListener . DISABLE_ALL : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; case RadioListener . DISABLE_FIRST : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) { second_text . setEnabled ( true ) ; second_text . requestFocus ( ) ; } break ; case RadioListener . DISABLE_SECOND : if ( first_text ! = null ) { first_text . setEnabled ( true ) ; first_text . requestFocus ( ) ; } if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; default : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; } / / sets the split type if ( container instanceof it . pdfsam . plugin . split . GUI . SplitMainGUI ) { container . setSplitType ( e . getActionCommand ( ) ) ; } }
void test0 ( ) throws Throwable { UpdateCheckerMediator updateCheckerMediator0 = new UpdateCheckerMediator ( ( JStatusPanel ) null ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "verticalTextPosition" , 0 , "verticalTextPosition" , 0 ) ; updateCheckerMediator0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test0 ( ) throws Throwable { TreeMediator treeMediator0 = new TreeMediator ( ( JMainFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TreeMediator ( JMainFrame container ) { this . container = container ; }
void test0 ( ) throws Throwable { SoundPlayer soundPlayer0 = SoundPlayer . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Configuration getInstance ( ) { if ( configObject = = null ) { configObject = new Configuration ( ) ; } return configObject ; }
void test0 ( ) throws Throwable { WorkExecutor workExecutor0 = WorkExecutor . getInstance ( ) ; WorkExecutor . WorkQueue workExecutor_WorkQueue0 = workExecutor0 . new WorkQueue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Configuration getInstance ( ) { if ( configObject = = null ) { configObject = new Configuration ( ) ; } return configObject ; }
void test1 ( ) throws Throwable { WorkExecutor workExecutor0 = WorkExecutor . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRunningThreads ( ) { return workQueue . getRunning ( ) ; }
void test2 ( ) throws Throwable { WorkExecutor workExecutor0 = WorkExecutor . getInstance ( ) ; workExecutor0 . execute ( ( Runnable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRunningThreads ( ) { return workQueue . getRunning ( ) ; }
void test3 ( ) throws Throwable { WorkExecutor workExecutor0 = WorkExecutor . getInstance ( ) ; WorkExecutor . WorkQueue workExecutor_WorkQueue0 = workExecutor0 . new WorkQueue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Configuration getInstance ( ) { if ( configObject = = null ) { configObject = new Configuration ( ) ; } return configObject ; }
void test5 ( ) throws Throwable { WorkExecutor workExecutor0 = WorkExecutor . getInstance ( ) ; WorkExecutor . WorkQueue workExecutor_WorkQueue0 = workExecutor0 . new WorkQueue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Configuration getInstance ( ) { if ( configObject = = null ) { configObject = new Configuration ( ) ; } return configObject ; }
void test0 ( ) throws Throwable { PdfThumbnailsLoader pdfThumbnailsLoader0 = new PdfThumbnailsLoader ( ( JVisualPdfPageSelectionPanel ) null ) ; VisualPdfSelectionActionListener visualPdfSelectionActionListener0 = new VisualPdfSelectionActionListener ( ( JVisualPdfPageSelectionPanel ) null , pdfThumbnailsLoader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VisualPdfSelectionActionListener ( JVisualPdfPageSelectionPanel panel , PdfThumbnailsLoader loader ) { super ( ) ; this . panel = panel ; this . loader = loader ; }
void test0 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( ) ; CleanClosedTabbedPanelListener cleanClosedTabbedPanelListener0 = new CleanClosedTabbedPanelListener ( closeableTabbedPane0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CleanClosedTabbedPanelListener ( CloseableTabbedPane panel ) { super ( ) ; this . panel = panel ; }
void test0 ( ) throws Throwable { DefaultComboBoxModel defaultComboBoxModel0 = new DefaultComboBoxModel ( ) ; JVisualSelectionList jVisualSelectionList0 = new JVisualSelectionList ( ( ListModel ) defaultComboBoxModel0 ) ; PagesWorker pagesWorker0 = new PagesWorker ( jVisualSelectionList0 ) ; PagesActionsMediator pagesActionsMediator0 = new PagesActionsMediator ( pagesWorker0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "BLEVEL" , ( - 1 ) , "BLEVEL" , 1L , 0 ) ; pagesActionsMediator0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { switch ( policy ) { case RadioListener . DISABLE_ALL : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; case RadioListener . DISABLE_FIRST : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) { second_text . setEnabled ( true ) ; second_text . requestFocus ( ) ; } break ; case RadioListener . DISABLE_SECOND : if ( first_text ! = null ) { first_text . setEnabled ( true ) ; first_text . requestFocus ( ) ; } if ( second_text ! = null ) second_text . setEnabled ( false ) ; break ; default : if ( first_text ! = null ) first_text . setEnabled ( false ) ; if ( second_text ! = null ) second_text . setEnabled ( false ) ; } / / sets the split type if ( container instanceof it . pdfsam . plugin . split . GUI . SplitMainGUI ) { container . setSplitType ( e . getActionCommand ( ) ) ; } }
void test0 ( ) throws Throwable { JVisualSelectionList jVisualSelectionList0 = new JVisualSelectionList ( false ) ; PageOpenerMouseAdapter pageOpenerMouseAdapter0 = new PageOpenerMouseAdapter ( jVisualSelectionList0 ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) jVisualSelectionList0 , 0 , 1389L , 0 , 0 , 0 , 0 , 1 , 20000 , false , 1 ) ; pageOpenerMouseAdapter0 . mouseClicked ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent e ) { if ( tableModel . isSortable ( ) ) { JTableHeader h = ( JTableHeader ) e . getSource ( ) ; TableColumnModel columnModel = h . getColumnModel ( ) ; int viewColumn = columnModel . getColumnIndexAtX ( e . getX ( ) ) ; int column = columnModel . getColumn ( viewColumn ) . getModelIndex ( ) ; if ( column ! = - 1 & & column ! = SortablePdfSelectionTableModel . PASSWORD & & column ! = SortablePdfSelectionTableModel . ROW_NUM ) { int sortType = ( tableModel . getSortingState ( ) . getCol ( ) = = column ) ? tableModel . getSortingState ( ) . getSortType ( ) : SortablePdfSelectionTableModel . NOT_SORTED ; / / Cycle the sorting states through { NOT_SORTED , ASCENDING , DESCENDING } or / / { NOT_SORTED , DESCENDING , ASCENDING } depending on whether shift is pressed . sortType = sortType + ( e . isShiftDown ( ) ? - 1 : 1 ) ; sortType = ( sortType + 4 ) % 3 - 1 ; / / signed mod , returning { - 1 , 0 , 1 } tableModel . setSortingState ( tableModel . new SortingState ( column , sortType ) ) ; h . repaint ( ) ; } } }
void test1 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 2 ] [ 3 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , objectArray0 [ 1 ] ) ; DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel ( ) ; JTable jTable0 = new JTable ( ( TableModel ) defaultTableModel0 , ( TableColumnModel ) defaultTableColumnModel0 ) ; TableShowPopupMouseAdapter tableShowPopupMouseAdapter0 = new TableShowPopupMouseAdapter ( ( JPopupMenu ) null , jTable0 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jTable0 , 813 , ( long ) 813 , ( - 1 ) , 813 , 813 , ( - 94 ) , false , ( - 1 ) , ( - 1 ) , 150 ) ; tableShowPopupMouseAdapter0 . mousePressed ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mousePressed ( MouseEvent e ) { if ( e . isPopupTrigger ( ) ) { showMenu ( e ) ; } }
void test3 ( ) throws Throwable { JTable jTable0 = new JTable ( 382 , 382 ) ; TableShowPopupMouseAdapter tableShowPopupMouseAdapter0 = new TableShowPopupMouseAdapter ( ( JPopupMenu ) null , jTable0 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jTable0 , 382 , ( - 1L ) , 1833 , 457 , 320 , 0 , false , 457 , 0 , 0 ) ; tableShowPopupMouseAdapter0 . mouseReleased ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseReleased ( MouseEvent e ) { if ( e . isPopupTrigger ( ) ) { showMenu ( e ) ; } }
void test0 ( ) throws Throwable { JVisualSelectionList jVisualSelectionList0 = new JVisualSelectionList ( ) ; PagesWorker pagesWorker0 = new PagesWorker ( jVisualSelectionList0 ) ; VisualPdfSelectionKeyAdapter visualPdfSelectionKeyAdapter0 = new VisualPdfSelectionKeyAdapter ( pagesWorker0 ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) jVisualSelectionList0 , 0 , ( long ) 0 , ( - 1845 ) , 0 , 'O' ) ; visualPdfSelectionKeyAdapter0 . keyPressed ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyPressed ( KeyEvent e ) { if ( button ! = null ) { if ( e . getKeyCode ( ) = = KeyEvent . VK_ENTER ) { button . doClick ( ) ; } } }
void test1 ( ) throws Throwable { JVisualSelectionList jVisualSelectionList0 = new JVisualSelectionList ( ) ; PagesWorker pagesWorker0 = new PagesWorker ( jVisualSelectionList0 ) ; VisualPdfSelectionKeyAdapter visualPdfSelectionKeyAdapter0 = new VisualPdfSelectionKeyAdapter ( pagesWorker0 ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) jVisualSelectionList0 , ( - 1528 ) , ( long ) ( - 243 ) , 40 , 40 , 'p' ) ; visualPdfSelectionKeyAdapter0 . keyPressed ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyPressed ( KeyEvent e ) { if ( button ! = null ) { if ( e . getKeyCode ( ) = = KeyEvent . VK_ENTER ) { button . doClick ( ) ; } } }
void test2 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 1 ] ; DefaultComboBoxModel defaultComboBoxModel0 = new DefaultComboBoxModel ( objectArray0 ) ; JVisualSelectionList jVisualSelectionList0 = new JVisualSelectionList ( ( ListModel ) defaultComboBoxModel0 ) ; PagesWorker pagesWorker0 = new PagesWorker ( jVisualSelectionList0 ) ; VisualPdfSelectionKeyAdapter visualPdfSelectionKeyAdapter0 = new VisualPdfSelectionKeyAdapter ( pagesWorker0 ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) jVisualSelectionList0 , ( - 1757 ) , 1048576L , 0 , 117 , 'w' ) ; visualPdfSelectionKeyAdapter0 . keyPressed ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyPressed ( KeyEvent e ) { if ( button ! = null ) { if ( e . getKeyCode ( ) = = KeyEvent . VK_ENTER ) { button . doClick ( ) ; } } }
void test0 ( ) throws Throwable { PdfSelectionMouseHeaderAdapter pdfSelectionMouseHeaderAdapter0 = new PdfSelectionMouseHeaderAdapter ( ( AbstractPdfSelectionTableModel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PdfSelectionMouseHeaderAdapter ( AbstractPdfSelectionTableModel tableModel ) { this . tableModel = tableModel ; }
void test0 ( ) throws Throwable { PdfLoaderExecutor pdfLoaderExecutor0 = new PdfLoaderExecutor ( ) ; AddPdfDocument addPdfDocument0 = new AddPdfDocument ( ( File ) null , ( JPdfSelectionPanel ) null , "I ? " , "I ? " ) ; SetMetaFieldsHook setMetaFieldsHook0 = new SetMetaFieldsHook ( ( DocInfoMainGUI ) null ) ; pdfLoaderExecutor0 . execute ( addPdfDocument0 , ( PdfDocumentLoadedHook ) setMetaFieldsHook0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExecuting ( ) { boolean retVal = false ; for ( Future < Boolean > future : futures ) { if ( ! future . isDone ( ) ) { retVal = true ; break ; } } return retVal ; }
void test4 ( ) throws Throwable { PdfLoader pdfLoader0 = new PdfLoader ( ( JPdfSelectionPanel ) null ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 6 ] ; PdfFile pdfFile0 = new PdfFile ( ( File ) null , "" ) ; pdfFileArray0 [ 0 ] = pdfFile0 ; pdfFile0 . setPassword ( "Location" ) ; DocumentInfoParsedCommand documentInfoParsedCommand0 = new DocumentInfoParsedCommand ( ( File ) null , pdfFileArray0 [ 0 ] , "" , "" , "" , "" ) ; PdfFile pdfFile1 = documentInfoParsedCommand0 . getInputFile ( ) ; pdfFileArray0 [ 1 ] = pdfFile1 ; PdfLoader pdfLoader1 = new PdfLoader ( ( JPdfSelectionPanel ) null ) ; PageLabel pageLabel0 = new PageLabel ( ) ; Vector < File > vector0 = new Vector < File > ( ) ; pdfLoader0 . addFiles ( ( List < File > ) vector0 , true ) ; File [ ] fileArray0 = new File [ 1 ] ; fileArray0 [ 0 ] = null ; pdfLoader0 . addFiles ( fileArray0 ) ; PdfFile pdfFile2 = new PdfFile ( ( File ) null , "" ) ; pdfFileArray0 [ 4 ] = pdfFile2 ; PdfLoader pdfLoader2 = new PdfLoader ( ( JPdfSelectionPanel ) null ) ; String [ ] stringArray0 = new String [ 18 ] ; stringArray0 [ 0 ] = "" ; PageRotation [ ] pageRotationArray0 = new PageRotation [ 9 ] ; PageRotation pageRotation0 = new PageRotation ( ) ; pageRotationArray0 [ 1 ] = pageRotation0 ; RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand ( ) ; rotateParsedCommand0 . getRotation ( ) ; PageRotation pageRotation1 = new PageRotation ( ) ; pageRotationArray0 [ 3 ] = pageRotation1 ; rotateParsedCommand0 . getRotation ( ) ; pageRotationArray0 [ 4 ] = null ; PageRotation pageRotation2 = new PageRotation ( ) ; pageRotationArray0 [ 5 ] = pageRotation2 ; PageRotation pageRotation3 = new PageRotation ( ) ; pageRotationArray0 [ 6 ] = pageRotation3 ; PageRotation pageRotation4 = new PageRotation ( ) ; pageRotationArray0 [ 7 ] = pageRotation4 ; rotateParsedCommand0 . getRotation ( ) ; pageRotationArray0 [ 8 ] = null ; File file0 = new File ( "" , "" ) ; ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( ( File ) null , ( File ) null , pdfFileArray0 , stringArray0 , false , pageRotationArray0 , file0 , false , false , 'I' ) ; File file1 = concatParsedCommand0 . getInputDirectory ( ) ; pdfLoader0 . addFile ( file1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExecuting ( ) { boolean retVal = false ; for ( Future < Boolean > future : futures ) { if ( ! future . isDone ( ) ) { retVal = true ; break ; } } return retVal ; }
void test5 ( ) throws Throwable { PdfLoader pdfLoader0 = new PdfLoader ( ( JPdfSelectionPanel ) null ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 6 ] ; PdfFile pdfFile0 = new PdfFile ( ( File ) null , "" ) ; pdfFileArray0 [ 0 ] = pdfFile0 ; pdfFile0 . setPassword ( "Location" ) ; DocumentInfoParsedCommand documentInfoParsedCommand0 = new DocumentInfoParsedCommand ( ( File ) null , pdfFileArray0 [ 0 ] , "" , "" , "" , "" ) ; PdfFile pdfFile1 = documentInfoParsedCommand0 . getInputFile ( ) ; pdfFileArray0 [ 1 ] = pdfFile1 ; PdfLoader pdfLoader1 = new PdfLoader ( ( JPdfSelectionPanel ) null ) ; PageLabel pageLabel0 = new PageLabel ( ) ; Vector < File > vector0 = new Vector < File > ( ) ; pdfLoader0 . addFiles ( ( List < File > ) vector0 , true ) ; File [ ] fileArray0 = new File [ 1 ] ; fileArray0 [ 0 ] = null ; pdfLoader0 . addFiles ( fileArray0 ) ; PdfFile pdfFile2 = new PdfFile ( ( File ) null , "" ) ; pdfFileArray0 [ 4 ] = pdfFile2 ; PdfLoader pdfLoader2 = new PdfLoader ( ( JPdfSelectionPanel ) null ) ; String [ ] stringArray0 = new String [ 18 ] ; stringArray0 [ 0 ] = "" ; PageRotation [ ] pageRotationArray0 = new PageRotation [ 9 ] ; PageRotation pageRotation0 = new PageRotation ( ) ; pageRotationArray0 [ 0 ] = pageRotation0 ; PageRotation pageRotation1 = new PageRotation ( ) ; pageRotationArray0 [ 1 ] = pageRotation1 ; RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand ( ) ; rotateParsedCommand0 . getRotation ( ) ; PageRotation pageRotation2 = new PageRotation ( ) ; pageRotationArray0 [ 3 ] = pageRotation2 ; rotateParsedCommand0 . getRotation ( ) ; pageRotationArray0 [ 4 ] = null ; PageRotation pageRotation3 = new PageRotation ( ) ; pageRotationArray0 [ 5 ] = pageRotation3 ; PageRotation pageRotation4 = new PageRotation ( ) ; pageRotationArray0 [ 6 ] = pageRotation4 ; PageRotation pageRotation5 = new PageRotation ( ) ; pageRotationArray0 [ 7 ] = pageRotation5 ; rotateParsedCommand0 . getRotation ( ) ; pageRotationArray0 [ 8 ] = null ; File file0 = new File ( "" , "" ) ; ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( ( File ) null , ( File ) null , pdfFileArray0 , stringArray0 , false , pageRotationArray0 , file0 , false , false , 'I' ) ; File file1 = concatParsedCommand0 . getInputDirectory ( ) ; pdfLoader0 . addFile ( file1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addFile ( File file , String password , List < DocumentPage > template ) throws ThumbnailCreationException { creator = ThumbnailCreatorsRegisty . getCreator ( Configuration . getInstance ( ) . getThumbnailsCreatorIdentifier ( ) ) ; if ( creator ! = null ) { log . debug ( GettextResource . gettext ( Configuration . getInstance ( ) . getI18nResourceBundle ( ) , "Generating thumbnails using the following library : " ) + " " + creator . getCreatorName ( ) ) ; generateNewId ( ) ; creator . initThumbnailsPanel ( file , password , panel , id , template ) ; } else { log . error ( GettextResource . gettext ( Configuration . getInstance ( ) . getI18nResourceBundle ( ) , "Unable to initialize the thumbnails creation library . " ) ) ; } }
void test0 ( ) throws Throwable { PdfThumbnailsLoader pdfThumbnailsLoader0 = new PdfThumbnailsLoader ( ( JVisualPdfPageSelectionPanel ) null ) ; long long0 = pdfThumbnailsLoader0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test3 ( ) throws Throwable { PdfThumbnailsLoader pdfThumbnailsLoader0 = new PdfThumbnailsLoader ( ( JVisualPdfPageSelectionPanel ) null ) ; pdfThumbnailsLoader0 . cleanCreator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test1 ( ) throws Throwable { ReloadPdfDocument reloadPdfDocument0 = new ReloadPdfDocument ( ( File ) null , ( JPdfSelectionPanel ) null , "8Z%b ? * g^Fmk ? } KC5kl" , "8Z%b ? * g^Fmk ? } KC5kl" , 201 ) ; Boolean boolean0 = reloadPdfDocument0 . call ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean call ( ) { Boolean retVal = Boolean . FALSE ; try { if ( pdfDoc ! = null ) { pdfDoc . close ( ) ; pdfDoc = null ; retVal = Boolean . TRUE ; } } catch ( Exception e ) { log . error ( GettextResource . gettext ( Configuration . getInstance ( ) . getI18nResourceBundle ( ) , "Unable to close thumbnail creator" ) , e ) ; } return retVal ; }
void test0 ( ) throws Throwable { AddPdfDocument addPdfDocument0 = new AddPdfDocument ( ( File ) null , ( JPdfSelectionPanel ) null ) ; Boolean boolean0 = addPdfDocument0 . call ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean call ( ) { Boolean retVal = Boolean . FALSE ; try { if ( pdfDoc ! = null ) { pdfDoc . close ( ) ; pdfDoc = null ; retVal = Boolean . TRUE ; } } catch ( Exception e ) { log . error ( GettextResource . gettext ( Configuration . getInstance ( ) . getI18nResourceBundle ( ) , "Unable to close thumbnail creator" ) , e ) ; } return retVal ; }
void test2 ( ) throws Throwable { AddPdfDocument addPdfDocument0 = new AddPdfDocument ( ( File ) null , ( JPdfSelectionPanel ) null ) ; PdfSelectionTableItem pdfSelectionTableItem0 = addPdfDocument0 . getPdfSelectionTableItem ( ( File ) null , "%1p | A" , "%1p | A" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PdfSelectionTableItem getPdfSelectionTableItem ( File fileToAdd , String password , String pageSelection ) { PdfSelectionTableItem tableItem = null ; PdfReader pdfReader = null ; if ( fileToAdd ! = null ) { tableItem = new PdfSelectionTableItem ( ) ; tableItem . setInputFile ( fileToAdd ) ; tableItem . setPassword ( password ) ; tableItem . setPageSelection ( pageSelection ) ; try { / / fix 04 / 11 / 08 for memory usage pdfReader = new PdfReader ( new RandomAccessFileOrArray ( fileToAdd . getAbsolutePath ( ) ) , ( password ! = null ) ? password . getBytes ( ) : null ) ; tableItem . setEncrypted ( pdfReader . isEncrypted ( ) ) ; tableItem . setFullPermission ( pdfReader . isOpenedWithFullPermissions ( ) ) ; if ( tableItem . isEncrypted ( ) ) { tableItem . setPermissions ( getPermissionsVerbose ( pdfReader . getPermissions ( ) ) ) ; int cMode = pdfReader . getCryptoMode ( ) ; switch ( cMode ) { case PdfWriter . STANDARD_ENCRYPTION_40 : tableItem . setEncryptionAlgorithm ( EncryptionUtility . RC4_40 ) ; break ; case PdfWriter . STANDARD_ENCRYPTION_128 : tableItem . setEncryptionAlgorithm ( EncryptionUtility . RC4_128 ) ; break ; case PdfWriter . ENCRYPTION_AES_128 : tableItem . setEncryptionAlgorithm ( EncryptionUtility . AES_128 ) ; break ; default : break ; } } tableItem . setPagesNumber ( Integer . toString ( pdfReader . getNumberOfPages ( ) ) ) ; tableItem . setFileSize ( fileToAdd . length ( ) ) ; tableItem . setPdfVersion ( pdfReader . getPdfVersion ( ) ) ; tableItem . setSyntaxErrors ( pdfReader . isRebuilt ( ) ) ; initTableItemDocumentData ( pdfReader , tableItem ) ; } catch ( Exception e ) { tableItem . setLoadedWithErrors ( true ) ; LOG . error ( GettextResource . gettext ( Configuration . getInstance ( ) . getI18nResourceBundle ( ) , "Error loading " ) + fileToAdd . getAbsolutePath ( ) + " : " , e ) ; } finally { if ( pdfReader ! = null ) { pdfReader . close ( ) ; pdfReader = null ; } } } return tableItem ; }
void test2 ( ) throws Throwable { CommonComponentsFactory commonComponentsFactory0 = CommonComponentsFactory . getInstance ( ) ; JButton jButton0 = commonComponentsFactory0 . createButton ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JButton createButton ( int buttonType ) { JButton retVal = new JButton ( ) ; switch ( buttonType ) { case RUN_BUTTON_TYPE : retVal . setMargin ( new Insets ( 2 , 2 , 2 , 2 ) ) ; retVal . setIcon ( new ImageIcon ( this . getClass ( ) . getResource ( " / images / run . png" ) ) ) ; retVal . setText ( GettextResource . gettext ( config . getI18nResourceBundle ( ) , "Run" ) ) ; break ; case BROWSE_BUTTON_TYPE : retVal . setMargin ( new Insets ( 2 , 2 , 2 , 2 ) ) ; retVal . setIcon ( new ImageIcon ( this . getClass ( ) . getResource ( " / images / browse . png" ) ) ) ; retVal . setText ( GettextResource . gettext ( config . getI18nResourceBundle ( ) , "Browse" ) ) ; break ; case ADD_BUTTON_TYPE : retVal . setMargin ( new Insets ( 2 , 2 , 2 , 2 ) ) ; retVal . setIcon ( new ImageIcon ( this . getClass ( ) . getResource ( " / images / add . png" ) ) ) ; retVal . setText ( GettextResource . gettext ( config . getI18nResourceBundle ( ) , "Add" ) ) ; break ; default : break ; } return retVal ; }
void test6 ( ) throws Throwable { CommonComponentsFactory commonComponentsFactory0 = CommonComponentsFactory . getInstance ( ) ; JCheckBox jCheckBox0 = commonComponentsFactory0 . createCheckBox ( ( - 1773 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JCheckBox createCheckBox ( int checkboxType ) { JCheckBox retVal = new JCheckBox ( ) ; switch ( checkboxType ) { case COMPRESS_CHECKBOX_TYPE : retVal . setText ( GettextResource . gettext ( config . getI18nResourceBundle ( ) , "Compress output file / files" ) ) ; retVal . setToolTipText ( GettextResource . gettext ( config . getI18nResourceBundle ( ) , "Pdf version required : " ) + " 1 . 5" ) ; break ; case OVERWRITE_CHECKBOX_TYPE : retVal . setText ( GettextResource . gettext ( config . getI18nResourceBundle ( ) , "Overwrite if already exists" ) ) ; retVal . setSelected ( true ) ; break ; case DONT_PRESERVER_ORDER_CHECKBOX_TYPE : retVal . setText ( GettextResource . gettext ( config . getI18nResourceBundle ( ) , "Don't preserve file order ( fast load ) " ) ) ; break ; default : break ; } return retVal ; }
void test10 ( ) throws Throwable { CommonComponentsFactory commonComponentsFactory0 = CommonComponentsFactory . getInstance ( ) ; JLabel jLabel0 = commonComponentsFactory0 . createLabel ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JLabel createLabel ( int labelType ) { JLabel retVal = new JLabel ( ) ; switch ( labelType ) { case PDF_VERSION_LABEL : retVal . setText ( GettextResource . gettext ( config . getI18nResourceBundle ( ) , "Output document pdf version : " ) ) ; break ; default : break ; } return retVal ; }
void test15 ( ) throws Throwable { CommonComponentsFactory commonComponentsFactory0 = CommonComponentsFactory . getInstance ( ) ; JTextField jTextField0 = commonComponentsFactory0 . createTextField ( ( - 1773 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JTextField createTextField ( int textFieldType ) { JTextField retVal = new JTextField ( ) ; retVal . setBorder ( new EtchedBorder ( EtchedBorder . LOWERED ) ) ; switch ( textFieldType ) { case SIMPLE_TEXT_FIELD_TYPE : case DESTINATION_TEXT_FIELD_TYPE : retVal . setComponentPopupMenu ( new DefaultPopupMenu ( ) ) ; break ; case PREFIX_TEXT_FIELD_TYPE : retVal . setComponentPopupMenu ( new PrefixPopupMenu ( PrefixPopupMenu . BASIC_MENU , retVal ) ) ; retVal . setText ( "pdfsam_" ) ; break ; case PREFIX_TEXT_FIELD_TYPE_FULL_MENU : retVal . setComponentPopupMenu ( new PrefixPopupMenu ( PrefixPopupMenu . FULL_MENU , retVal ) ) ; retVal . setText ( "pdfsam_" ) ; break ; default : break ; } return retVal ; }
void test0 ( ) throws Throwable { JTableHeader jTableHeader0 = new JTableHeader ( ) ; DefaultTableColumnModel defaultTableColumnModel0 = ( DefaultTableColumnModel ) jTableHeader0 . getColumnModel ( ) ; JPdfSelectionToolTipHeader jPdfSelectionToolTipHeader0 = new JPdfSelectionToolTipHeader ( ( TableColumnModel ) defaultTableColumnModel0 ) ; String [ ] stringArray0 = new String [ 4 ] ; jPdfSelectionToolTipHeader0 . setToolTips ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setToolTips ( String [ ] toolTips ) { this . toolTips = toolTips ; }
void test0 ( ) throws Throwable { JVisualSelectionList jVisualSelectionList0 = new JVisualSelectionList ( false ) ; jVisualSelectionList0 . setCurrentZoomLevel ( 40002 ) ; jVisualSelectionList0 . incZoomLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentZoomLevel ( ) { return currentZoomLevel ; }
void test1 ( ) throws Throwable { JVisualSelectionList jVisualSelectionList0 = new JVisualSelectionList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDrawDeletedItems ( ) { return drawDeletedItems ; }
void test2 ( ) throws Throwable { Vector < Integer > vector0 = new Vector < Integer > ( ) ; JVisualSelectionList jVisualSelectionList0 = new JVisualSelectionList ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentZoomLevel ( ) { return currentZoomLevel ; }
void test3 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 16 ] ; JVisualSelectionList jVisualSelectionList0 = new JVisualSelectionList ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDrawDeletedItems ( ) { return drawDeletedItems ; }
void test4 ( ) throws Throwable { JVisualSelectionList jVisualSelectionList0 = new JVisualSelectionList ( false ) ; boolean boolean0 = jVisualSelectionList0 . isDrawDeletedItems ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentZoomLevel ( ) { return currentZoomLevel ; }
void test5 ( ) throws Throwable { JVisualSelectionList jVisualSelectionList0 = new JVisualSelectionList ( false ) ; int int0 = jVisualSelectionList0 . getCurrentZoomLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDrawDeletedItems ( ) { return drawDeletedItems ; }
void test6 ( ) throws Throwable { DefaultListModel defaultListModel0 = new DefaultListModel ( ) ; JVisualSelectionList jVisualSelectionList0 = new JVisualSelectionList ( ( ListModel ) defaultListModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDrawDeletedItems ( ) { return drawDeletedItems ; }
void test7 ( ) throws Throwable { JVisualSelectionList jVisualSelectionList0 = new JVisualSelectionList ( false ) ; jVisualSelectionList0 . incZoomLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentZoomLevel ( ) { return currentZoomLevel ; }
void test8 ( ) throws Throwable { JVisualSelectionList jVisualSelectionList0 = new JVisualSelectionList ( ) ; jVisualSelectionList0 . deincZoomLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentZoomLevel ( ) { return currentZoomLevel ; }
void test0 ( ) throws Throwable { JPdfSelectionTable jPdfSelectionTable0 = new JPdfSelectionTable ( ) ; boolean boolean0 = jPdfSelectionTable0 . getScrollableTracksViewportWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getScrollableTracksViewportWidth ( ) { if ( autoResizeMode = = AUTO_RESIZE_OFF ) { return ( false ) ; } else { Container p = getParent ( ) ; if ( p instanceof JViewport ) { if ( p . getSize ( ) . getWidth ( ) < getPreferredSize ( ) . getWidth ( ) ) { return ( false ) ; } else { return ( true ) ; } } return ( false ) ; } }
void test1 ( ) throws Throwable { JPdfSelectionTable jPdfSelectionTable0 = new JPdfSelectionTable ( ) ; jPdfSelectionTable0 . setAutoResizeMode ( 0 ) ; boolean boolean0 = jPdfSelectionTable0 . getScrollableTracksViewportWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getScrollableTracksViewportWidth ( ) { if ( autoResizeMode = = AUTO_RESIZE_OFF ) { return ( false ) ; } else { Container p = getParent ( ) ; if ( p instanceof JViewport ) { if ( p . getSize ( ) . getWidth ( ) < getPreferredSize ( ) . getWidth ( ) ) { return ( false ) ; } else { return ( true ) ; } } return ( false ) ; } }
void test0 ( ) throws Throwable { SharedJFileChooserType sharedJFileChooserType0 = SharedJFileChooserType . NO_FILTER ; FileFilter fileFilter0 = sharedJFileChooserType0 . getFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FileFilter getFilter ( ) { return filter ; }
void test0 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; visualListModel0 . elementsChanged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test1 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; Collection < VisualPageListItem > collection0 = visualListModel0 . subList ( ( - 1811 ) , ( - 1811 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < VisualPageListItem > subList ( int fromIndex , int toIndex ) { return subList ( fromIndex , toIndex , false ) ; }
void test2 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; Object object0 = visualListModel0 . getElementAt ( 382 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getElementAt ( int index ) { VisualPageListItem retVal = null ; if ( index < data . size ( ) ) { retVal = ( VisualPageListItem ) ( data . get ( index ) ) ; } return retVal ; }
void test3 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; visualListModel0 . addElement ( ( VisualPageListItem ) null ) ; visualListModel0 . getElementAt ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test4 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; int int0 = visualListModel0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test5 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; VisualPageListItem [ ] visualPageListItemArray0 = visualListModel0 . getElements ( ) ; visualListModel0 . setData ( visualPageListItemArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test7 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; Vector < VisualPageListItem > vector0 = new Vector < VisualPageListItem > ( ) ; visualListModel0 . setData ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setData ( MergeItemType [ ] input_data ) { data . clear ( ) ; for ( int i = 0 ; i < input_data . length ; i + + ) { data . add ( input_data [ i ] ) ; } }
void test8 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; Vector < VisualPageListItem > vector0 = new Vector < VisualPageListItem > ( ) ; vector0 . add ( ( VisualPageListItem ) null ) ; visualListModel0 . appendAllElements ( ( Collection < VisualPageListItem > ) vector0 ) ; visualListModel0 . setData ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test11 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; int [ ] intArray0 = new int [ 1 ] ; visualListModel0 . removeElements ( intArray0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test13 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; int [ ] intArray0 = new int [ 1 ] ; visualListModel0 . addElement ( ( VisualPageListItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test14 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; visualListModel0 . removeElements ( ( - 1 ) , 9 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test15 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; visualListModel0 . removeElements ( 976 , ( - 1 ) , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test16 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; visualListModel0 . removeElements ( 0 , 0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test17 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; VisualPageListItem [ ] visualPageListItemArray0 = new VisualPageListItem [ 6 ] ; visualListModel0 . setData ( visualPageListItemArray0 ) ; visualListModel0 . removeElements ( 0 , 0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test18 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; visualListModel0 . addElement ( ( VisualPageListItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test19 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; visualListModel0 . addElementAt ( ( VisualPageListItem ) null , ( - 1480 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test20 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; visualListModel0 . appendAllElements ( ( Collection < VisualPageListItem > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test21 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; visualListModel0 . prependAllElements ( ( Collection < VisualPageListItem > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test22 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; Vector < VisualPageListItem > vector0 = new Vector < VisualPageListItem > ( ) ; visualListModel0 . prependAllElements ( ( Collection < VisualPageListItem > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void prependAllElements ( Collection < VisualPageListItem > c ) { if ( c ! = null & & c . size ( ) > 0 ) { data . addAll ( 0 , c ) ; fireIntervalAdded ( this , 0 , c . size ( ) - 1 ) ; } }
void test23 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; Vector < VisualPageListItem > vector0 = new Vector < VisualPageListItem > ( ) ; vector0 . add ( ( VisualPageListItem ) null ) ; visualListModel0 . prependAllElements ( ( Collection < VisualPageListItem > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test24 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; visualListModel0 . addAllElements ( 39 , ( Collection < VisualPageListItem > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test25 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; LinkedList < VisualPageListItem > linkedList0 = new LinkedList < VisualPageListItem > ( ) ; visualListModel0 . addAllElements ( ( - 1672 ) , ( Collection < VisualPageListItem > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test26 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; LinkedList < VisualPageListItem > linkedList0 = new LinkedList < VisualPageListItem > ( ) ; visualListModel0 . addAllElements ( 9 , ( Collection < VisualPageListItem > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test27 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; Vector < VisualPageListItem > vector0 = new Vector < VisualPageListItem > ( ) ; vector0 . add ( ( VisualPageListItem ) null ) ; visualListModel0 . addAllElements ( 0 , ( Collection < VisualPageListItem > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test28 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; Collection < VisualPageListItem > collection0 = visualListModel0 . subList ( 6 , 180 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < VisualPageListItem > subList ( int fromIndex , int toIndex ) { return subList ( fromIndex , toIndex , false ) ; }
void test29 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; Collection < VisualPageListItem > collection0 = visualListModel0 . subList ( 0 , 0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( ( bookmarkName = = null | | bookmarkName . length ( ) = = 0 ) & & ( fileNumber = = null ) & & ( pageNumber = = null ) ) ; }
void test30 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; Collection < VisualPageListItem > collection0 = visualListModel0 . subList ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( ( bookmarkName = = null | | bookmarkName . length ( ) = = 0 ) & & ( fileNumber = = null ) & & ( pageNumber = = null ) ) ; }
void test31 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; visualListModel0 . updateElementAt ( 1 , ( VisualPageListItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test32 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; visualListModel0 . elementChanged ( ( VisualPageListItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test33 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; int [ ] intArray0 = new int [ 1 ] ; visualListModel0 . undeleteElements ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test34 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; int [ ] intArray0 = new int [ 4 ] ; visualListModel0 . reverseElements ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test35 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; VisualPageListItem [ ] visualPageListItemArray0 = new VisualPageListItem [ 7 ] ; visualListModel0 . setData ( visualPageListItemArray0 ) ; int [ ] intArray0 = new int [ 4 ] ; visualListModel0 . reverseElements ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test36 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; int [ ] intArray0 = new int [ 4 ] ; visualListModel0 . rotateClockwiseElements ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test38 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; int [ ] intArray0 = new int [ 1 ] ; visualListModel0 . rotateAnticlockwiseElements ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test40 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; visualListModel0 . moveUpIndex ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test41 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; visualListModel0 . moveUpIndex ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test42 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; int [ ] intArray0 = new int [ 4 ] ; visualListModel0 . moveUpIndexes ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test43 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; VisualPageListItem [ ] visualPageListItemArray0 = new VisualPageListItem [ 7 ] ; visualListModel0 . setData ( visualPageListItemArray0 ) ; int [ ] intArray0 = new int [ 4 ] ; visualListModel0 . moveUpIndexes ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test44 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; VisualPageListItem [ ] visualPageListItemArray0 = new VisualPageListItem [ 7 ] ; visualListModel0 . setData ( visualPageListItemArray0 ) ; int [ ] intArray0 = new int [ 4 ] ; intArray0 [ 0 ] = 1 ; visualListModel0 . moveUpIndexes ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test45 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; visualListModel0 . moveDownIndex ( ( - 1244 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test46 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; visualListModel0 . moveDownIndex ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test47 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; VisualPageListItem [ ] visualPageListItemArray0 = new VisualPageListItem [ 7 ] ; visualListModel0 . setData ( visualPageListItemArray0 ) ; visualListModel0 . moveDownIndex ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test48 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; int [ ] intArray0 = new int [ 4 ] ; visualListModel0 . moveDownIndexes ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test49 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; VisualPageListItem [ ] visualPageListItemArray0 = new VisualPageListItem [ 7 ] ; visualListModel0 . setData ( visualPageListItemArray0 ) ; int [ ] intArray0 = new int [ 4 ] ; visualListModel0 . moveDownIndexes ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test50 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; VisualPageListItem [ ] visualPageListItemArray0 = new VisualPageListItem [ 7 ] ; visualListModel0 . setData ( visualPageListItemArray0 ) ; int [ ] intArray0 = new int [ 4 ] ; intArray0 [ 3 ] = 7 ; visualListModel0 . moveDownIndexes ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return ( data ! = null ) ? data . size ( ) : 0 ; }
void test51 ( ) throws Throwable { VisualListModel visualListModel0 = new VisualListModel ( ) ; List < VisualPageListItem > list0 = visualListModel0 . getValidElements ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < VisualPageListItem > getValidElements ( ) { ArrayList < VisualPageListItem > retVal = null ; if ( data ! = null & & data . size ( ) > 0 ) { retVal = new ArrayList < VisualPageListItem > ( data . size ( ) ) ; for ( int i = 0 ; i < data . size ( ) ; i + + ) { if ( ! ( data . get ( i ) ) . isDeleted ( ) ) { retVal . add ( data . get ( i ) ) ; } } } return retVal ; }
void test0 ( ) throws Throwable { JPdfSelectionTableRenderer jPdfSelectionTableRenderer0 = new JPdfSelectionTableRenderer ( ) ; jPdfSelectionTableRenderer0 . setFullAccessRequired ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFullAccessRequired ( ) { return fullAccessRequired ; }
void test1 ( ) throws Throwable { JPdfSelectionTableRenderer jPdfSelectionTableRenderer0 = new JPdfSelectionTableRenderer ( false ) ; boolean boolean0 = jPdfSelectionTableRenderer0 . isFullAccessRequired ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFullAccessRequired ( ) { return fullAccessRequired ; }
void test0 ( ) throws Throwable { VisualListRenderer visualListRenderer0 = new VisualListRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test0 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( ) ; byte [ ] byteArray0 = new byte [ 4 ] ; ImageIcon imageIcon0 = new ImageIcon ( byteArray0 , "" ) ; CloseableTabbedPane . CloseTabIcon closeableTabbedPane_CloseTabIcon0 = closeableTabbedPane0 . new CloseTabIcon ( ( Icon ) imageIcon0 ) ; int int0 = closeableTabbedPane_CloseTabIcon0 . getIconWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test1 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( 1611 ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) closeableTabbedPane0 , 0 , ( long ) 0 , 0 , ( - 134 ) , 0 , 728 , false ) ; closeableTabbedPane0 . add ( ( Component ) null , ( Object ) "margin" ) ; closeableTabbedPane0 . getToolTipText ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getToolTipText ( MouseEvent e ) { int col = columnAtPoint ( e . getPoint ( ) ) ; int modelCol = getTable ( ) . convertColumnIndexToModel ( col ) ; String ret_val ; try { ret_val = tool_tips [ modelCol ] ; } catch ( Exception ex ) { ret_val = "" ; } if ( ret_val . length ( ) < 1 ) { ret_val = super . getToolTipText ( e ) ; } return ret_val ; }
void test2 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( ) ; CloseableTabbedPane . CloseTabIcon closeableTabbedPane_CloseTabIcon0 = closeableTabbedPane0 . new CloseTabIcon ( ( Icon ) null ) ; Rectangle rectangle0 = closeableTabbedPane_CloseTabIcon0 . getBounds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test3 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( 0 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) closeableTabbedPane0 , 1125 , ( long ) 1125 , 0 , 0 , 0 , 0 , true , 1125 , ( - 1287 ) , 0 ) ; closeableTabbedPane0 . mousePressed ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mousePressed ( MouseEvent e ) { if ( e . isPopupTrigger ( ) ) { showMenu ( e ) ; } }
void test4 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( 1611 ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) closeableTabbedPane0 , 0 , ( long ) 0 , 0 , ( - 134 ) , 0 , 728 , false ) ; closeableTabbedPane0 . mouseEntered ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test5 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( ) ; JScrollBar jScrollBar0 = new JScrollBar ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jScrollBar0 , 0 , ( long ) 0 , ( - 291 ) , ( - 1121 ) , 0 , 0 , false , ( - 1 ) , 1 , 1 ) ; closeableTabbedPane0 . mouseReleased ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test6 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( 1696 ) ; closeableTabbedPane0 . setCloseIcons ( ( Icon ) null , ( Icon ) null , ( Icon ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test7 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( ) ; CloseableTabbedPaneListener [ ] closeableTabbedPaneListenerArray0 = closeableTabbedPane0 . getCloseableTabbedPaneListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test8 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( ) ; JScrollBar jScrollBar0 = new JScrollBar ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jScrollBar0 , 0 , ( long ) 0 , ( - 291 ) , ( - 1121 ) , 0 , 0 , false , ( - 1 ) , 1 , 1 ) ; closeableTabbedPane0 . mouseClicked ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test9 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( ) ; CleanClosedTabbedPanelListener cleanClosedTabbedPanelListener0 = new CleanClosedTabbedPanelListener ( closeableTabbedPane0 ) ; closeableTabbedPane0 . addCloseableTabbedPaneListener ( ( CloseableTabbedPaneListener ) cleanClosedTabbedPanelListener0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test10 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) closeableTabbedPane0 , 40000 , ( long ) 40000 , ( - 716 ) , 40000 , 40000 , ( - 716 ) , false ) ; closeableTabbedPane0 . mouseDragged ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test11 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) closeableTabbedPane0 , 32767 , ( long ) 32767 , 11 , 32767 , 32767 , 32767 , false , 11 , 11 , 0 ) ; closeableTabbedPane0 . mouseMoved ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test12 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( 0 ) ; CleanClosedTabbedPanelListener cleanClosedTabbedPanelListener0 = new CleanClosedTabbedPanelListener ( closeableTabbedPane0 ) ; closeableTabbedPane0 . removeCloseableTabbedPaneListener ( ( CloseableTabbedPaneListener ) cleanClosedTabbedPanelListener0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test13 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( 0 ) ; CloseableTabbedPane . CloseableMetalTabbedPaneUI closeableTabbedPane_CloseableMetalTabbedPaneUI0 = closeableTabbedPane0 . new CloseableMetalTabbedPaneUI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test14 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( 1696 ) ; CloseableTabbedPane . CloseableTabbedPaneUI closeableTabbedPane_CloseableTabbedPaneUI0 = closeableTabbedPane0 . new CloseableTabbedPaneUI ( 1696 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test15 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( 0 ) ; CloseableTabbedPane . CloseableTabbedPaneUI closeableTabbedPane_CloseableTabbedPaneUI0 = closeableTabbedPane0 . new CloseableTabbedPaneUI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test16 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( ) ; DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer ( ) ; Icon icon0 = defaultTreeCellRenderer0 . getClosedIcon ( ) ; closeableTabbedPane0 . addTab ( " " , ( Component ) defaultTreeCellRenderer0 , icon0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test17 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( 1611 ) ; JRadioButton jRadioButton0 = new JRadioButton ( ( Icon ) null , false ) ; closeableTabbedPane0 . addTab ( "" , ( Icon ) null , ( Component ) jRadioButton0 ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) closeableTabbedPane0 , 0 , ( long ) 0 , 0 , ( - 134 ) , 0 , 728 , false ) ; closeableTabbedPane0 . mouseExited ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test18 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( 1611 ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) closeableTabbedPane0 , 0 , ( long ) 0 , 0 , ( - 134 ) , 0 , 728 , false ) ; closeableTabbedPane0 . add ( ( Component ) null , ( Object ) "margin" ) ; closeableTabbedPane0 . mouseExited ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test19 ( ) throws Throwable { CloseableTabbedPane closeableTabbedPane0 = new CloseableTabbedPane ( 0 ) ; boolean boolean0 = closeableTabbedPane0 . fireCloseTab ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test0 ( ) throws Throwable { List < File > list0 = DnDSupportUtility . textURIListToFileList ( "# + 76l . ( 'u - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < File > textURIListToFileList ( String data ) { List < File > retVal = new java . util . ArrayList < File > ( 1 ) ; Scanner scanner = new Scanner ( data ) ; scanner . useDelimiter ( URI_DELIMITER ) ; while ( scanner . hasNext ( ) ) { String token = scanner . next ( ) ; if ( token ! = null & & ! token . startsWith ( "#" ) ) { try { File currentFile = new File ( new URI ( token ) ) ; if ( currentFile . exists ( ) ) { retVal . add ( currentFile ) ; } } catch ( java . net . URISyntaxException e ) { / / empty on purpose } catch ( IllegalArgumentException e ) { / / empty on purpose } } } return retVal ; }
void test1 ( ) throws Throwable { List < File > list0 = DnDSupportUtility . textURIListToFileList ( "scg YYUN ; NB4h * S4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < File > textURIListToFileList ( String data ) { List < File > retVal = new java . util . ArrayList < File > ( 1 ) ; Scanner scanner = new Scanner ( data ) ; scanner . useDelimiter ( URI_DELIMITER ) ; while ( scanner . hasNext ( ) ) { String token = scanner . next ( ) ; if ( token ! = null & & ! token . startsWith ( "#" ) ) { try { File currentFile = new File ( new URI ( token ) ) ; if ( currentFile . exists ( ) ) { retVal . add ( currentFile ) ; } } catch ( java . net . URISyntaxException e ) { / / empty on purpose } catch ( IllegalArgumentException e ) { / / empty on purpose } } } return retVal ; }
void test0 ( ) throws Throwable { JPdfSelectionTableDropper jPdfSelectionTableDropper0 = new JPdfSelectionTableDropper ( ( PdfLoader ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JPdfSelectionTableDropper ( PdfLoader loader ) { this . loader = loader ; }
void test0 ( ) throws Throwable { VisualListTransferHandler visualListTransferHandler0 = new VisualListTransferHandler ( ) ; int int0 = visualListTransferHandler0 . getSourceActions ( ( JComponent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSourceActions ( JComponent c ) { return MOVE ; }
void test1 ( ) throws Throwable { PdfThumbnailsLoader pdfThumbnailsLoader0 = new PdfThumbnailsLoader ( ( JVisualPdfPageSelectionPanel ) null ) ; VisualListTransferHandler visualListTransferHandler0 = new VisualListTransferHandler ( pdfThumbnailsLoader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VisualListTransferHandler ( ) { }
void test2 ( ) throws Throwable { VisualListTransferHandler visualListTransferHandler0 = new VisualListTransferHandler ( ) ; JMenuBar jMenuBar0 = new JMenuBar ( ) ; Clipboard clipboard0 = new Clipboard ( " ] %25HbRq_" ) ; visualListTransferHandler0 . exportToClipboard ( ( JComponent ) jMenuBar0 , clipboard0 , 1967 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VisualListTransferHandler ( ) { }
void test4 ( ) throws Throwable { VisualListTransferHandler visualListTransferHandler0 = new VisualListTransferHandler ( ) ; JMenuBar jMenuBar0 = new JMenuBar ( ) ; StringSelection stringSelection0 = new StringSelection ( " ] %25HbRq_" ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jMenuBar0 , ( Transferable ) stringSelection0 ) ; boolean boolean0 = visualListTransferHandler0 . importData ( transferHandler_TransferSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean importData ( JComponent c , Transferable t ) { if ( ! ( c instanceof JMergeTable ) ) { return false ; } if ( canImport ( c , t . getTransferDataFlavors ( ) ) ) { try { if ( hasMergeItemFlavor ( t ) ) { Object obj = t . getTransferData ( MergeItemTransfer . MERGEITEMFLAVOUR ) ; if ( ! ( obj instanceof MergeItemTransfer ) ) return false ; MergeItemTransfer mit = ( MergeItemTransfer ) obj ; ArrayList merge_item_obj = mit . getData ( ) ; importMergeItem ( c , merge_item_obj ) ; return true ; } else if ( hasFileFlavor ( t ) ) { List file_list = ( List ) t . getTransferData ( DataFlavor . javaFileListFlavor ) ; ArrayList row_items = new ArrayList ( ) ; for ( int i = 0 ; i < file_list . size ( ) ; i + + ) { File file_item = ( File ) file_list . get ( i ) ; boolean encrypt = false ; String num_pages = "" ; try { PdfReader pdf_reader = new PdfReader ( file_item . getAbsolutePath ( ) ) ; encrypt = pdf_reader . isEncrypted ( ) ; / / we retrieve the total number of pages num_pages = Integer . toString ( pdf_reader . getNumberOfPages ( ) ) ; } catch ( Exception ex ) { num_pages = ex . getMessage ( ) ; } MergeItemType merge_item_obj = new MergeItemType ( file_item . getName ( ) , file_item . getAbsolutePath ( ) , num_pages , "All" , encrypt ) ; row_items . add ( merge_item_obj ) ; } importMergeItem ( c , row_items ) ; return true ; } else { return false ; } } catch ( UnsupportedFlavorException ufe ) { } catch ( IOException ioe ) { } } return false ; }
void test5 ( ) throws Throwable { VisualListTransferHandler visualListTransferHandler0 = new VisualListTransferHandler ( ) ; JMenuBar jMenuBar0 = new JMenuBar ( ) ; StringSelection stringSelection0 = new StringSelection ( " ] %25HbRq_" ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jMenuBar0 , ( Transferable ) stringSelection0 ) ; boolean boolean0 = visualListTransferHandler0 . canImport ( transferHandler_TransferSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canImport ( JComponent c , DataFlavor [ ] flavors ) { for ( int i = 0 ; i < flavors . length ; i + + ) { if ( flavors [ i ] . equals ( MergeItemTransfer . MERGEITEMFLAVOUR ) | | flavors [ i ] . equals ( DataFlavor . javaFileListFlavor ) ) { return true ; } } return false ; }
void test0 ( ) throws Throwable { VisualPageListTransferable visualPageListTransferable0 = new VisualPageListTransferable ( ( VisualPageListTransferable . TransferableData ) null ) ; DataFlavor [ ] dataFlavorArray0 = visualPageListTransferable0 . getTransferDataFlavors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataFlavor [ ] getTransferDataFlavors ( ) { return new DataFlavor [ ] { MERGEITEMFLAVOUR } ; }
void test1 ( ) throws Throwable { VisualPageListItem [ ] visualPageListItemArray0 = new VisualPageListItem [ 1 ] ; int [ ] intArray0 = new int [ 1 ] ; VisualPageListTransferable visualPageListTransferable0 = new VisualPageListTransferable ( visualPageListItemArray0 , intArray0 ) ; int [ ] intArray1 = new int [ 5 ] ; VisualPageListTransferable . TransferableData visualPageListTransferable_TransferableData0 = visualPageListTransferable0 . new TransferableData ( visualPageListItemArray0 , intArray1 ) ; VisualPageListItem [ ] visualPageListItemArray1 = visualPageListTransferable_TransferableData0 . getDataList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VisualPageListTransferable ( TransferableData data ) { super ( ) ; this . data = data ; }
void test2 ( ) throws Throwable { VisualPageListTransferable visualPageListTransferable0 = new VisualPageListTransferable ( ( VisualPageListTransferable . TransferableData ) null ) ; VisualPageListTransferable . TransferableData visualPageListTransferable_TransferableData0 = visualPageListTransferable0 . new TransferableData ( ) ; int [ ] intArray0 = visualPageListTransferable_TransferableData0 . getIndexesList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VisualPageListTransferable ( TransferableData data ) { super ( ) ; this . data = data ; }
void test4 ( ) throws Throwable { Configuration configuration0 = Configuration . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getScreenResolution ( ) { return screenResolution ; }
void test0 ( ) throws Throwable { DefaultDocument defaultDocument0 = new DefaultDocument ( ) ; BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy ( ( Document ) defaultDocument0 ) ; DefaultDocument defaultDocument1 = ( DefaultDocument ) backwardCompatibilityXmlStrategy0 . getDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Document getDocument ( String filename ) throws Exception { Document retVal ; SAXReader reader = new SAXReader ( ) ; File resourceFile = new File ( filename ) ; if ( resourceFile . exists ( ) ) { retVal = reader . read ( resourceFile ) ; } else { ClassLoader cl = XmlMessagesSource . class . getClassLoader ( ) ; URL resourceUrl = null ; if ( cl ! = null ) { resourceUrl = cl . getResource ( filename ) ; } else { resourceUrl = ClassLoader . getSystemResource ( filename ) ; } if ( resourceUrl ! = null ) { retVal = reader . read ( resourceUrl ) ; } else { throw new NullPointerException ( "Cannot locate XmlMessageSource data file . " ) ; } } return retVal ; }
void test1 ( ) throws Throwable { BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy ( ( Document ) null ) ; backwardCompatibilityXmlStrategy0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getThumbnailsSize ( ) { return Integer . toString ( 190 ) ; }
void test0 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( ) ; DefaultXmlStrategy defaultXmlStrategy0 = new DefaultXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = defaultXmlStrategy0 . getDefaultEnvironmentValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultEnvironmentValue ( ) { return XmlUtility . getXmlValue ( getDocument ( ) , DEFAULT_JOB_XPATH ) ; }
void test2 ( ) throws Throwable { DefaultDocument defaultDocument0 = new DefaultDocument ( ) ; DefaultXmlStrategy defaultXmlStrategy0 = new DefaultXmlStrategy ( ( Document ) defaultDocument0 ) ; String string0 = defaultXmlStrategy0 . getThumbnailsSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getThumbnailsSize ( ) { return Integer . toString ( 190 ) ; }
void test5 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( ) ; DefaultXmlStrategy defaultXmlStrategy0 = new DefaultXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = defaultXmlStrategy0 . getThreadPoolSizeValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getThreadPoolSizeValue ( ) { return XmlUtility . getXmlValue ( getDocument ( ) , POOL_SIZE_XPATH ) ; }
void test7 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( ) ; DefaultXmlStrategy defaultXmlStrategy0 = new DefaultXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = defaultXmlStrategy0 . getLocaleValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLocaleValue ( ) { return XmlUtility . getXmlValue ( getDocument ( ) , LANGUAGE_XPATH ) ; }
void test8 ( ) throws Throwable { DefaultDocument defaultDocument0 = new DefaultDocument ( ) ; DefaultXmlStrategy defaultXmlStrategy0 = new DefaultXmlStrategy ( ( Document ) defaultDocument0 ) ; String string0 = defaultXmlStrategy0 . getPlaySoundsValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlaySoundsValue ( ) { return XmlUtility . getXmlValue ( getDocument ( ) , PLAYSOUNDS_XPATH ) ; }
void test9 ( ) throws Throwable { NonLazyElement nonLazyElement0 = new NonLazyElement ( "" ) ; QName qName0 = nonLazyElement0 . getQName ( ) ; DOMElement dOMElement0 = new DOMElement ( qName0 ) ; DOMDocument dOMDocument0 = new DOMDocument ( dOMElement0 , ( DOMDocumentType ) null ) ; DefaultXmlStrategy defaultXmlStrategy0 = new DefaultXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = defaultXmlStrategy0 . getHighQualityThumbnails ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHighQualityThumbnails ( ) { return Boolean . FALSE . toString ( ) ; }
void test10 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( ) ; DefaultXmlStrategy defaultXmlStrategy0 = new DefaultXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = defaultXmlStrategy0 . getPluginAbsolutePath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPluginAbsolutePath ( ) { return configurationService . getPluginAbsolutePath ( ) ; }
void test13 ( ) throws Throwable { DefaultDocument defaultDocument0 = new DefaultDocument ( ) ; DefaultXmlStrategy defaultXmlStrategy0 = new DefaultXmlStrategy ( ( Document ) defaultDocument0 ) ; String string0 = defaultXmlStrategy0 . getLoggingLevelValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLoggingLevelValue ( ) { return XmlUtility . getXmlValue ( getDocument ( ) , LOGGING_LEVEL_XPATH ) ; }
void test14 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( ) ; DefaultXmlStrategy defaultXmlStrategy0 = new DefaultXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = defaultXmlStrategy0 . getAskOverwriteConfirmation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAskOverwriteConfirmation ( ) { return Boolean . TRUE . toString ( ) ; }
void test0 ( ) throws Throwable { DocumentFactory documentFactory0 = DocumentFactory . getInstance ( ) ; DefaultDocument defaultDocument0 = ( DefaultDocument ) documentFactory0 . createDocument ( "org . apache . log4j . xml . DOMConfigurator" ) ; BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy ( ( Document ) defaultDocument0 ) ; String string0 = backwardCompatibilityXmlStrategy0 . getCheckForUpdatesValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCheckForUpdatesValue ( ) { return XmlUtility . getXmlValue ( getDocument ( ) , CHECK_UPDATES_XPATH ) ; }
void test1 ( ) throws Throwable { UserDataElement userDataElement0 = new UserDataElement ( "GR : . j\" ! : " ) ; DefaultDocument defaultDocument0 = new DefaultDocument ( ( Element ) userDataElement0 ) ; BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy ( ( Document ) defaultDocument0 ) ; String string0 = backwardCompatibilityXmlStrategy0 . getThemeValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getThemeValue ( ) { return XmlUtility . getXmlValue ( getDocument ( ) , THEME_XPATH ) ; }
void test2 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( ) ; BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = backwardCompatibilityXmlStrategy0 . getHighQualityThumbnails ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHighQualityThumbnails ( ) { return Boolean . FALSE . toString ( ) ; }
void test3 ( ) throws Throwable { DocumentFactory documentFactory0 = DocumentFactory . getInstance ( ) ; QName qName0 = documentFactory0 . createQName ( "^HGc0qT gLq\" -  . 6" , "^HGc0qT gLq\" -  . 6" ) ; DOMElement dOMElement0 = new DOMElement ( qName0 ) ; DOMDocument dOMDocument0 = new DOMDocument ( dOMElement0 ) ; BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = backwardCompatibilityXmlStrategy0 . getThumbnailsSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getThumbnailsSize ( ) { return Integer . toString ( 190 ) ; }
void test4 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( "6q ? H@Hp0" ) ; BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = backwardCompatibilityXmlStrategy0 . getLookAndFeelValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLookAndFeelValue ( ) { return XmlUtility . getXmlValue ( getDocument ( ) , LAF_XPATH ) ; }
void test5 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( "xC < 83~6Y : o9 < sbp~" ) ; BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = backwardCompatibilityXmlStrategy0 . getThumbnailsCreatorIdentifierValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getThumbnailsCreatorIdentifierValue ( ) { return XmlUtility . getXmlValue ( getDocument ( ) , THUMBNAILS_CREATOR_XPATH ) ; }
void test6 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( ) ; BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = backwardCompatibilityXmlStrategy0 . getDefaultWorkingDirectoryValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultWorkingDirectoryValue ( ) { return XmlUtility . getXmlValue ( getDocument ( ) , DEF_WORKING_DIR_XPATH ) ; }
void test7 ( ) throws Throwable { DocumentFactory documentFactory0 = DocumentFactory . getInstance ( ) ; DefaultDocument defaultDocument0 = ( DefaultDocument ) documentFactory0 . createDocument ( "org . apache . log4j . xml . DOMConfigurator" ) ; BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy ( ( Document ) defaultDocument0 ) ; Deque < String > deque0 = backwardCompatibilityXmlStrategy0 . getRecentEnvironments ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < String > getRecentEnvironments ( ) { return guiConfigurationService . getRecentEnvironments ( ) ; }
void test8 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( "xC < 83~6Y : o9 < sbp~" ) ; BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = backwardCompatibilityXmlStrategy0 . getAskOverwriteConfirmation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAskOverwriteConfirmation ( ) { return Boolean . TRUE . toString ( ) ; }
void test9 ( ) throws Throwable { DocumentFactory documentFactory0 = DocumentFactory . getInstance ( ) ; QName qName0 = documentFactory0 . createQName ( "^HGc0qT gLq\" -  . 6" , "^HGc0qT gLq\" -  . 6" ) ; DOMElement dOMElement0 = new DOMElement ( qName0 ) ; DOMDocument dOMDocument0 = new DOMDocument ( dOMElement0 ) ; BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = backwardCompatibilityXmlStrategy0 . getPlaySoundsValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlaySoundsValue ( ) { return XmlUtility . getXmlValue ( getDocument ( ) , PLAYSOUNDS_XPATH ) ; }
void test10 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( "6q ? H@Hp0" ) ; BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = backwardCompatibilityXmlStrategy0 . getThreadPoolSizeValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getThreadPoolSizeValue ( ) { return XmlUtility . getXmlValue ( getDocument ( ) , POOL_SIZE_XPATH ) ; }
void test11 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( "xC < 83~6Y : o9 < sbp~" ) ; BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = backwardCompatibilityXmlStrategy0 . getLoggingLevelValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLoggingLevelValue ( ) { return XmlUtility . getXmlValue ( getDocument ( ) , LOGGING_LEVEL_XPATH ) ; }
void test13 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( ) ; BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = backwardCompatibilityXmlStrategy0 . getDefaultEnvironmentValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultEnvironmentValue ( ) { return XmlUtility . getXmlValue ( getDocument ( ) , DEFAULT_JOB_XPATH ) ; }
void test14 ( ) throws Throwable { DocumentFactory documentFactory0 = DocumentFactory . getInstance ( ) ; QName qName0 = documentFactory0 . createQName ( "^HGc0qT gLq\" -  . 6" , "^HGc0qT gLq\" -  . 6" ) ; DOMElement dOMElement0 = new DOMElement ( qName0 ) ; DOMDocument dOMDocument0 = new DOMDocument ( dOMElement0 ) ; BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy ( ( Document ) dOMDocument0 ) ; String string0 = backwardCompatibilityXmlStrategy0 . getLocaleValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLocaleValue ( ) { return XmlUtility . getXmlValue ( getDocument ( ) , LANGUAGE_XPATH ) ; }
void test1 ( ) throws Throwable { CellRendererPane cellRendererPane0 = new CellRendererPane ( ) ; DirectColorModel directColorModel0 = ( DirectColorModel ) cellRendererPane0 . getColorModel ( ) ; JPreviewImage jPreviewImage0 = new JPreviewImage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Dimension getPreferredSize ( ) { return pagePreview . getPreferredSize ( ) ; }
void test3 ( ) throws Throwable { JPreviewImage jPreviewImage0 = new JPreviewImage ( ( Image ) null ) ; jPreviewImage0 . zoomOut ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void zoomOut ( ) { zoomLevel - = ZOOM_STEP ; initRectangle ( ) ; }
void test4 ( ) throws Throwable { JPreviewImage jPreviewImage0 = new JPreviewImage ( ( Image ) null ) ; Image image0 = jPreviewImage0 . getImage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Image getImage ( ) { return image ; }
void test8 ( ) throws Throwable { JPreviewImage jPreviewImage0 = new JPreviewImage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test9 ( ) throws Throwable { JPreviewImage jPreviewImage0 = new JPreviewImage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test10 ( ) throws Throwable { JPreviewImage jPreviewImage0 = new JPreviewImage ( ) ; Dimension dimension0 = jPreviewImage0 . getPreferredSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Dimension getPreferredSize ( ) { return pagePreview . getPreferredSize ( ) ; }
void test11 ( ) throws Throwable { DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer ( ) ; JTable jTable0 = new JTable ( 54 , 54 ) ; DirectColorModel directColorModel0 = ( DirectColorModel ) jTable0 . getColorModel ( ) ; byte [ ] byteArray0 = new byte [ 1 ] ; Properties properties0 = new Properties ( ) ; MemoryImageSource memoryImageSource0 = new MemoryImageSource ( 54 , 54 , ( ColorModel ) directColorModel0 , byteArray0 , 54 , 54 , ( Hashtable < ? , ? > ) properties0 ) ; Image image0 = defaultTreeCellRenderer0 . createImage ( ( ImageProducer ) memoryImageSource0 ) ; JPreviewImage jPreviewImage0 = new JPreviewImage ( image0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JPreviewImage ( Image image ) { this ( ) ; setImage ( image ) ; }
void test0 ( ) throws Throwable { JBackgroundedPanel jBackgroundedPanel0 = new JBackgroundedPanel ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JBackgroundedPanel ( String resourceName ) { try { if ( resourceName ! = null & & resourceName . length ( ) > 0 ) { background = new ImageIcon ( this . getClass ( ) . getResource ( resourceName ) ) . getImage ( ) ; setOpaque ( false ) ; } else { background = null ; } } catch ( Exception e ) { background = null ; } }
void test1 ( ) throws Throwable { JBackgroundedPanel jBackgroundedPanel0 = new JBackgroundedPanel ( "" ) ; jBackgroundedPanel0 . update ( ( Graphics ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test2 ( ) throws Throwable { JBackgroundedPanel jBackgroundedPanel0 = new JBackgroundedPanel ( "p" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JBackgroundedPanel ( String resourceName ) { try { if ( resourceName ! = null & & resourceName . length ( ) > 0 ) { background = new ImageIcon ( this . getClass ( ) . getResource ( resourceName ) ) . getImage ( ) ; setOpaque ( false ) ; } else { background = null ; } } catch ( Exception e ) { background = null ; } }
void test0 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; pdfFile0 . setPassword ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return password ; }
void test1 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; pdfFile0 . setInputFile ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return password ; }
void test2 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; File file0 = pdfFile0 . getInputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getInputFile ( ) { return inputFile ; }
void test3 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; String string0 = pdfFile0 . getPassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return password ; }
void test4 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ( File ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return password ; }
void test0 ( ) throws Throwable { DocumentInfo documentInfo0 = new DocumentInfo ( ) ; DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; documentInfo0 . setDocumentMetaData ( documentMetaData0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThumbnailsCreator getCreator ( ) { return ThumbnailCreatorsRegisty . getCreator ( Configuration . getInstance ( ) . getThumbnailsCreatorIdentifier ( ) ) ; }
void test1 ( ) throws Throwable { DocumentInfo documentInfo0 = new DocumentInfo ( ) ; documentInfo0 . setPdfVersion ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPdfVersion ( ) { return pdfVersion ; }
void test2 ( ) throws Throwable { DocumentInfo documentInfo0 = new DocumentInfo ( ) ; String string0 = documentInfo0 . getFileName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileName ( ) { return file_name ; }
void test3 ( ) throws Throwable { DocumentInfo documentInfo0 = new DocumentInfo ( ) ; DocumentMetaData documentMetaData0 = documentInfo0 . getDocumentMetaData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) { return encrypted ; }
void test4 ( ) throws Throwable { DocumentInfo documentInfo0 = new DocumentInfo ( ) ; documentInfo0 . setEncrypted ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) { return encrypted ; }
void test5 ( ) throws Throwable { DocumentInfo documentInfo0 = new DocumentInfo ( ) ; documentInfo0 . setPages ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPages ( ) { return pages ; }
void test6 ( ) throws Throwable { DocumentInfo documentInfo0 = new DocumentInfo ( ) ; documentInfo0 . setFileName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileName ( ) { return file_name ; }
void test7 ( ) throws Throwable { DocumentInfo documentInfo0 = new DocumentInfo ( ) ; boolean boolean0 = documentInfo0 . isEncrypted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) { return encrypted ; }
void test8 ( ) throws Throwable { DocumentInfo documentInfo0 = new DocumentInfo ( ) ; int int0 = documentInfo0 . getPages ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPages ( ) { return pages ; }
void test9 ( ) throws Throwable { DocumentInfo documentInfo0 = new DocumentInfo ( ) ; String string0 = documentInfo0 . getPdfVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPdfVersion ( ) { return pdfVersion ; }
void test0 ( ) throws Throwable { DocumentPage documentPage0 = new DocumentPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPageNumber ( ) { return pageNumber ; }
void test1 ( ) throws Throwable { Rotation rotation0 = Rotation . DEGREES_270 ; DocumentPage documentPage0 = new DocumentPage ( ( - 1668 ) , true , rotation0 ) ; documentPage0 . setDeleted ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPageNumber ( ) { return pageNumber ; }
void test2 ( ) throws Throwable { Rotation rotation0 = Rotation . DEGREES_180 ; DocumentPage documentPage0 = new DocumentPage ( ( - 1124 ) , true , rotation0 ) ; boolean boolean0 = documentPage0 . isDeleted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPageNumber ( ) { return pageNumber ; }
void test3 ( ) throws Throwable { Rotation rotation0 = Rotation . DEGREES_180 ; DocumentPage documentPage0 = new DocumentPage ( ( - 1124 ) , true , rotation0 ) ; documentPage0 . setPageNumber ( ( - 789 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPageNumber ( ) { return pageNumber ; }
void test4 ( ) throws Throwable { Rotation rotation0 = Rotation . DEGREES_270 ; DocumentPage documentPage0 = new DocumentPage ( ( - 1668 ) , true , rotation0 ) ; int int0 = documentPage0 . getPageNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeleted ( ) { return deleted ; }
void test5 ( ) throws Throwable { Rotation rotation0 = Rotation . DEGREES_270 ; DocumentPage documentPage0 = new DocumentPage ( ( - 1668 ) , true , rotation0 ) ; Rotation rotation1 = documentPage0 . getRotation ( ) ; documentPage0 . setRotation ( rotation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeleted ( ) { return deleted ; }
void test0 ( ) throws Throwable { IntItem intItem0 = new IntItem ( ( - 1 ) , "tJhPmF / w9sR8kIM" ) ; String string0 = intItem0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test1 ( ) throws Throwable { IntItem intItem0 = new IntItem ( ) ; int int0 = intItem0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test2 ( ) throws Throwable { IntItem intItem0 = new IntItem ( 0 , "" ) ; String string0 = intItem0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test3 ( ) throws Throwable { IntItem intItem0 = new IntItem ( 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test4 ( ) throws Throwable { IntItem intItem0 = new IntItem ( 0 , "" ) ; intItem0 . setDescription ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test0 ( ) throws Throwable { DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; documentMetaData0 . setSubject ( "aD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeywords ( ) { return keywords ; }
void test1 ( ) throws Throwable { DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; documentMetaData0 . setCreator ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return title ; }
void test2 ( ) throws Throwable { DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; String string0 = documentMetaData0 . getSubject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSubject ( ) { return subject ; }
void test3 ( ) throws Throwable { DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; documentMetaData0 . setAuthor ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreationDate ( ) { return creationDate ; }
void test4 ( ) throws Throwable { DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; String string0 = documentMetaData0 . getProducer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProducer ( ) { return producer ; }
void test5 ( ) throws Throwable { DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; String string0 = documentMetaData0 . getCreator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThumbnailsCreator getCreator ( ) { return ThumbnailCreatorsRegisty . getCreator ( Configuration . getInstance ( ) . getThumbnailsCreatorIdentifier ( ) ) ; }
void test6 ( ) throws Throwable { DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; String string0 = documentMetaData0 . getTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return title ; }
void test7 ( ) throws Throwable { DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; documentMetaData0 . setTitle ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSubject ( ) { return subject ; }
void test8 ( ) throws Throwable { DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; String string0 = documentMetaData0 . getAuthor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthor ( ) { return author ; }
void test9 ( ) throws Throwable { DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; documentMetaData0 . setKeywords ( " = L" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeywords ( ) { return keywords ; }
void test10 ( ) throws Throwable { DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; String string0 = documentMetaData0 . getCreationDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCreationDate ( ) { return creationDate ; }
void test11 ( ) throws Throwable { DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; documentMetaData0 . setModificationDate ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThumbnailsCreator getCreator ( ) { return ThumbnailCreatorsRegisty . getCreator ( Configuration . getInstance ( ) . getThumbnailsCreatorIdentifier ( ) ) ; }
void test12 ( ) throws Throwable { DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; documentMetaData0 . setProducer ( "O ) ? LNrX4x5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthor ( ) { return author ; }
void test13 ( ) throws Throwable { DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; String string0 = documentMetaData0 . getModificationDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getModificationDate ( ) { return modificationDate ; }
void test14 ( ) throws Throwable { DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; documentMetaData0 . setCreationDate ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return title ; }
void test15 ( ) throws Throwable { DocumentMetaData documentMetaData0 = new DocumentMetaData ( ) ; String string0 = documentMetaData0 . getKeywords ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeywords ( ) { return keywords ; }
void test0 ( ) throws Throwable { Rotation rotation0 = Rotation . DEGREES_90 ; int int0 = rotation0 . getDegrees ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDegrees ( ) { return degrees ; }
void test1 ( ) throws Throwable { Rotation rotation0 = Rotation . getRotation ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Rotation getRotation ( ) { return rotation ; }
void test2 ( ) throws Throwable { Rotation rotation0 = Rotation . getRotation ( 270 ) ; Rotation rotation1 = rotation0 . rotateClockwise ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void rotateClockwise ( ) { image = ImageUtility . rotateImage ( image , 90 ) ; originalDimension = new Dimension ( image . getWidth ( this ) , image . getHeight ( this ) ) ; initRectangle ( ) ; }
void test3 ( ) throws Throwable { Rotation rotation0 = Rotation . getRotation ( 90 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Rotation getRotation ( ) { return rotation ; }
void test4 ( ) throws Throwable { Rotation rotation0 = Rotation . getRotation ( 180 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Rotation getRotation ( ) { return rotation ; }
void test5 ( ) throws Throwable { Rotation rotation0 = Rotation . getRotation ( ( - 34 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Rotation getRotation ( ) { return rotation ; }
void test6 ( ) throws Throwable { Rotation rotation0 = Rotation . DEGREES_0 ; Rotation rotation1 = rotation0 . rotateClockwise ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void rotateClockwise ( ) { image = ImageUtility . rotateImage ( image , 90 ) ; originalDimension = new Dimension ( image . getWidth ( this ) , image . getHeight ( this ) ) ; initRectangle ( ) ; }
void test7 ( ) throws Throwable { Rotation rotation0 = Rotation . DEGREES_180 ; Rotation rotation1 = rotation0 . rotateClockwise ( ) ; Rotation rotation2 = rotation1 . rotateAnticlockwise ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void rotateClockwise ( ) { image = ImageUtility . rotateImage ( image , 90 ) ; originalDimension = new Dimension ( image . getWidth ( this ) , image . getHeight ( this ) ) ; initRectangle ( ) ; }
void test8 ( ) throws Throwable { Rotation rotation0 = Rotation . DEGREES_90 ; Rotation rotation1 = rotation0 . rotateAnticlockwise ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void rotateAnticlockwise ( ) { this . rotation = rotation . rotateAnticlockwise ( ) ; this . thumbnail = ImageUtility . rotateImage ( thumbnail , 270 ) ; }
void test9 ( ) throws Throwable { Rotation rotation0 = Rotation . DEGREES_180 ; Rotation rotation1 = rotation0 . rotateAnticlockwise ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void rotateAnticlockwise ( ) { this . rotation = rotation . rotateAnticlockwise ( ) ; this . thumbnail = ImageUtility . rotateImage ( thumbnail , 270 ) ; }
void test0 ( ) throws Throwable { VisualSelectedItem visualSelectedItem0 = new VisualSelectedItem ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSelectedFile ( ) { return selectedFile ; }
void test1 ( ) throws Throwable { VisualSelectedItem visualSelectedItem0 = new VisualSelectedItem ( ) ; String string0 = visualSelectedItem0 . getSelectedFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSelectedFile ( ) { return selectedFile ; }
void test2 ( ) throws Throwable { VisualSelectedItem visualSelectedItem0 = new VisualSelectedItem ( ) ; visualSelectedItem0 . setPagesSelection ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPagesSelection ( ) { return pagesSelection ; }
void test3 ( ) throws Throwable { VisualSelectedItem visualSelectedItem0 = new VisualSelectedItem ( ) ; visualSelectedItem0 . setSelectedFile ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPagesSelection ( ) { return pagesSelection ; }
void test4 ( ) throws Throwable { VisualSelectedItem visualSelectedItem0 = new VisualSelectedItem ( ) ; String string0 = visualSelectedItem0 . getPassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return password ; }
void test5 ( ) throws Throwable { VisualSelectedItem visualSelectedItem0 = new VisualSelectedItem ( ) ; String string0 = visualSelectedItem0 . getPagesSelection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPagesSelection ( ) { return pagesSelection ; }
void test6 ( ) throws Throwable { VisualSelectedItem visualSelectedItem0 = new VisualSelectedItem ( ) ; visualSelectedItem0 . setPassword ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSelectedFile ( ) { return selectedFile ; }
void test0 ( ) throws Throwable { StringItem stringItem0 = new StringItem ( ( String ) null , ( String ) null ) ; String string0 = stringItem0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Direcotries" ; }
void test1 ( ) throws Throwable { StringItem stringItem0 = new StringItem ( ) ; String string0 = stringItem0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test2 ( ) throws Throwable { StringItem stringItem0 = new StringItem ( ) ; String string0 = stringItem0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test3 ( ) throws Throwable { StringItem stringItem0 = new StringItem ( " * Jk" , " * Jk" ) ; int int0 = stringItem0 . compareTo ( stringItem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object arg0 ) { int retVal = 0 ; if ( ! ( arg0 instanceof ListItem ) ) { throw new ClassCastException ( "ListItem object expected . " ) ; } else { retVal = this . getValue ( ) . compareTo ( ( ( ListItem ) arg0 ) . getValue ( ) ) ; } return retVal ; }
void test4 ( ) throws Throwable { StringItem stringItem0 = new StringItem ( ) ; int int0 = stringItem0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int prime = 31 ; int result = 1 ; result = prime * result + ( ( file = = null ) ? 0 : file . hashCode ( ) ) ; result = prime * result + ( ( password = = null ) ? 0 : password . hashCode ( ) ) ; return result ; }
void test5 ( ) throws Throwable { StringItem stringItem0 = new StringItem ( " * Jk" , " * Jk" ) ; boolean boolean0 = stringItem0 . equals ( ( Object ) "1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test6 ( ) throws Throwable { StringItem stringItem0 = new StringItem ( ) ; boolean boolean0 = stringItem0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test7 ( ) throws Throwable { StringItem stringItem0 = new StringItem ( ( String ) null , ( String ) null ) ; StringItem stringItem1 = new StringItem ( ) ; boolean boolean0 = stringItem0 . equals ( ( Object ) stringItem1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test8 ( ) throws Throwable { StringItem stringItem0 = new StringItem ( ) ; StringItem stringItem1 = new StringItem ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test9 ( ) throws Throwable { StringItem stringItem0 = new StringItem ( ) ; StringItem stringItem1 = new StringItem ( "" , "" ) ; boolean boolean0 = stringItem0 . equals ( ( Object ) stringItem1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test10 ( ) throws Throwable { StringItem stringItem0 = new StringItem ( ) ; stringItem0 . setDescription ( "" ) ; StringItem stringItem1 = new StringItem ( "" , "" ) ; boolean boolean0 = stringItem0 . equals ( ( Object ) stringItem1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test11 ( ) throws Throwable { StringItem stringItem0 = new StringItem ( ) ; stringItem0 . setId ( "" ) ; stringItem0 . setDescription ( "" ) ; StringItem stringItem1 = new StringItem ( "" , "" ) ; boolean boolean0 = stringItem0 . equals ( ( Object ) stringItem1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test12 ( ) throws Throwable { StringItem stringItem0 = new StringItem ( ) ; StringItem stringItem1 = new StringItem ( "r ! l0\" , #B" , ( String ) null ) ; boolean boolean0 = stringItem1 . equals ( ( Object ) stringItem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test13 ( ) throws Throwable { StringItem stringItem0 = new StringItem ( "Wjfcpuj & Kjv00$ ] " , "Wjfcpuj & Kjv00$ ] " ) ; StringItem stringItem1 = new StringItem ( "" , "" ) ; int int0 = stringItem1 . compareTo ( stringItem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object arg0 ) { int retVal = 0 ; if ( ! ( arg0 instanceof ListItem ) ) { throw new ClassCastException ( "ListItem object expected . " ) ; } else { retVal = this . getValue ( ) . compareTo ( ( ( ListItem ) arg0 ) . getValue ( ) ) ; } return retVal ; }
void test14 ( ) throws Throwable { StringItem stringItem0 = new StringItem ( " * Jk" , " * Jk" ) ; StringItem stringItem1 = new StringItem ( "1" , " * Jk" ) ; int int0 = stringItem0 . compareTo ( stringItem1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object arg0 ) { int retVal = 0 ; if ( ! ( arg0 instanceof ListItem ) ) { throw new ClassCastException ( "ListItem object expected . " ) ; } else { retVal = this . getValue ( ) . compareTo ( ( ( ListItem ) arg0 ) . getValue ( ) ) ; } return retVal ; }
void test1 ( ) throws Throwable { LanguageLoader languageLoader0 = new LanguageLoader ( " ! " , " ! " ) ; Locale locale0 = Locale . ITALIAN ; languageLoader0 . setLocale ( locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setLocale ( Locale current_locale ) { this . current_locale = current_locale ; }
void test4 ( ) throws Throwable { LanguageLoader languageLoader0 = new LanguageLoader ( "jfcpuj & Kjv00$ ] 2_At" , "jfcpuj & Kjv00$ ] 2_At" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LanguageLoader ( String language_code , String bundle ) { bundle_name = bundle ; String [ ] i18n_infos = language_code . split ( "_" ) ; try { current_locale = new Locale ( i18n_infos [ 0 ] . toLowerCase ( ) , i18n_infos [ 1 ] . toUpperCase ( ) ) ; } catch ( NullPointerException nupe ) { current_locale = DEFAULT_LOCALE ; } catch ( Exception ex ) { current_locale = DEFAULT_LOCALE ; } }
void test0 ( ) throws Throwable { ConversionUtility conversionUtility0 = new ConversionUtility ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { double double0 = ConversionUtility . toInches ( ( - 1 . 0 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double toInches ( double cm ) { return cm * CM ; }
void test2 ( ) throws Throwable { double double0 = ConversionUtility . toCentimeters ( 664 . 0444427939331 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double toCentimeters ( double inches ) { return inches * INCH ; }
void test0 ( ) throws Throwable { EncryptionUtility encryptionUtility0 = new EncryptionUtility ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = EncryptionUtility . getEncAlgorithm ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncAlgorithm ( String algorithm ) { String retval = EncryptParsedCommand . E_RC4_40 ; if ( algorithm ! = null ) { if ( algorithm . equals ( RC4_40 ) ) { retval = EncryptParsedCommand . E_RC4_40 ; } else if ( algorithm . equals ( RC4_128 ) ) { retval = EncryptParsedCommand . E_RC4_128 ; } else if ( algorithm . equals ( AES_128 ) ) { retval = EncryptParsedCommand . E_AES_128 ; } } return retval ; }
void test2 ( ) throws Throwable { String string0 = EncryptionUtility . getEncAlgorithm ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncAlgorithm ( String algorithm ) { String retval = EncryptParsedCommand . E_RC4_40 ; if ( algorithm ! = null ) { if ( algorithm . equals ( RC4_40 ) ) { retval = EncryptParsedCommand . E_RC4_40 ; } else if ( algorithm . equals ( RC4_128 ) ) { retval = EncryptParsedCommand . E_RC4_128 ; } else if ( algorithm . equals ( AES_128 ) ) { retval = EncryptParsedCommand . E_AES_128 ; } } return retval ; }
void test3 ( ) throws Throwable { String string0 = EncryptionUtility . getEncAlgorithm ( "RC4 - 40b" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncAlgorithm ( String algorithm ) { String retval = EncryptParsedCommand . E_RC4_40 ; if ( algorithm ! = null ) { if ( algorithm . equals ( RC4_40 ) ) { retval = EncryptParsedCommand . E_RC4_40 ; } else if ( algorithm . equals ( RC4_128 ) ) { retval = EncryptParsedCommand . E_RC4_128 ; } else if ( algorithm . equals ( AES_128 ) ) { retval = EncryptParsedCommand . E_AES_128 ; } } return retval ; }
void test4 ( ) throws Throwable { String string0 = EncryptionUtility . getEncAlgorithm ( "RC4 - 128b" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncAlgorithm ( String algorithm ) { String retval = EncryptParsedCommand . E_RC4_40 ; if ( algorithm ! = null ) { if ( algorithm . equals ( RC4_40 ) ) { retval = EncryptParsedCommand . E_RC4_40 ; } else if ( algorithm . equals ( RC4_128 ) ) { retval = EncryptParsedCommand . E_RC4_128 ; } else if ( algorithm . equals ( AES_128 ) ) { retval = EncryptParsedCommand . E_AES_128 ; } } return retval ; }
void test5 ( ) throws Throwable { String string0 = EncryptionUtility . getEncAlgorithm ( "AES - 128b" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncAlgorithm ( String algorithm ) { String retval = EncryptParsedCommand . E_RC4_40 ; if ( algorithm ! = null ) { if ( algorithm . equals ( RC4_40 ) ) { retval = EncryptParsedCommand . E_RC4_40 ; } else if ( algorithm . equals ( RC4_128 ) ) { retval = EncryptParsedCommand . E_RC4_128 ; } else if ( algorithm . equals ( AES_128 ) ) { retval = EncryptParsedCommand . E_AES_128 ; } } return retval ; }
void test3 ( ) throws Throwable { DocumentPage documentPage0 = XmlUtility . getDocumentPage ( ( Node ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DocumentPage getDocumentPage ( Node pageNode ) { DocumentPage retVal = null ; try { if ( pageNode ! = null ) { retVal = new DocumentPage ( ) ; Node deletedNode = ( Node ) pageNode . selectSingleNode ( "@deleted" ) ; if ( deletedNode ! = null & & deletedNode . getText ( ) . length ( ) > 0 ) { retVal . setDeleted ( Boolean . valueOf ( deletedNode . getText ( ) ) ) ; } Node numberNode = ( Node ) pageNode . selectSingleNode ( "@number" ) ; if ( numberNode ! = null & & numberNode . getText ( ) . length ( ) > 0 ) { retVal . setPageNumber ( Integer . valueOf ( numberNode . getText ( ) ) ) ; } Node rotationNode = ( Node ) pageNode . selectSingleNode ( "@rotation" ) ; if ( rotationNode ! = null & & rotationNode . getText ( ) . length ( ) > 0 ) { retVal . setRotation ( Rotation . getRotation ( Integer . valueOf ( rotationNode . getText ( ) ) ) ) ; } } } catch ( Exception e ) { LOG . warn ( GettextResource . gettext ( Configuration . getInstance ( ) . getI18nResourceBundle ( ) , "Error retrieving page saved informations" ) , e ) ; } return retVal ; }
void test4 ( ) throws Throwable { DocumentFactory documentFactory0 = DocumentFactory . getInstance ( ) ; DefaultDocument defaultDocument0 = ( DefaultDocument ) documentFactory0 . createDocument ( " . " ) ; DocumentPage documentPage0 = XmlUtility . getDocumentPage ( ( Node ) defaultDocument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Rotation getRotation ( ) { return rotation ; }
void test5 ( ) throws Throwable { DocumentFactory documentFactory0 = DocumentFactory . getInstance ( ) ; DefaultDocument defaultDocument0 = ( DefaultDocument ) documentFactory0 . createDocument ( "o" ) ; String string0 = XmlUtility . getXmlValue ( ( Document ) defaultDocument0 , "o" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getXmlValue ( Document document , String xpath ) { String retVal = "" ; Node node = document . selectSingleNode ( xpath ) ; if ( node ! = null ) { retVal = node . getText ( ) . trim ( ) ; } return retVal ; }
void test6 ( ) throws Throwable { DocumentFactory documentFactory0 = DocumentFactory . getInstance ( ) ; DefaultDocument defaultDocument0 = ( DefaultDocument ) documentFactory0 . createDocument ( " . " ) ; String string0 = XmlUtility . getXmlValue ( ( Document ) defaultDocument0 , " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getXmlValue ( Document document , String xpath ) { String retVal = "" ; Node node = document . selectSingleNode ( xpath ) ; if ( node ! = null ) { retVal = node . getText ( ) . trim ( ) ; } return retVal ; }
void test7 ( ) throws Throwable { DocumentFactory documentFactory0 = DocumentFactory . getInstance ( ) ; DefaultDocument defaultDocument0 = ( DefaultDocument ) documentFactory0 . createDocument ( " . " ) ; Set < String > set0 = XmlUtility . getXmlValues ( ( Document ) defaultDocument0 , " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( ( bookmarkName = = null | | bookmarkName . length ( ) = = 0 ) & & ( fileNumber = = null ) & & ( pageNumber = = null ) ) ; }
void test8 ( ) throws Throwable { DefaultElement defaultElement0 = new DefaultElement ( "" ) ; DefaultElement defaultElement1 = ( DefaultElement ) XmlUtility . processXPath ( ( Element ) defaultElement0 , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Element processXPath ( Element rootElement , String xpath , String attributeValue ) { String [ ] values = xpath . split ( "@" ) ; if ( values . length = = 2 ) { return addXmlNodeAndAttribute ( rootElement , values [ 0 ] , values [ 1 ] , attributeValue ) ; } return addXmlNodeAndAttribute ( rootElement , values [ 0 ] , null , null ) ; }
void test10 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( ( DOMDocumentType ) null ) ; DOMElement dOMElement0 = ( DOMElement ) dOMDocument0 . addElement ( " / text ( ) " , " / text ( ) " ) ; XmlUtility . addXmlNodeAndAttribute ( ( Element ) dOMElement0 , " / text ( ) " , " / text ( ) " , " / text ( ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Element addXmlNodeAndAttribute ( Element rootElement , String nodeXPath , String attributeName , String attributeValue ) { String [ ] nodes = nodeXPath . split ( " / " ) ; Element currentElement = rootElement ; for ( String node : nodes ) { if ( StringUtils . isNotBlank ( node ) ) { Element tmpElement = ( Element ) currentElement . selectSingleNode ( node ) ; if ( tmpElement ! = null ) { currentElement = tmpElement ; } else { currentElement = currentElement . addElement ( node ) ; } } } if ( attributeName ! = null & & attributeValue ! = null ) { currentElement . addAttribute ( attributeName , attributeValue ) ; } return currentElement ; }
void test11 ( ) throws Throwable { DOMDocument dOMDocument0 = new DOMDocument ( ) ; DOMElement dOMElement0 = ( DOMElement ) dOMDocument0 . addElement ( " . " , " . " ) ; XmlUtility . addXmlNodeAndAttribute ( ( Element ) dOMElement0 , " . " , " . " , " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Element addXmlNodeAndAttribute ( Element rootElement , String nodeXPath , String attributeName , String attributeValue ) { String [ ] nodes = nodeXPath . split ( " / " ) ; Element currentElement = rootElement ; for ( String node : nodes ) { if ( StringUtils . isNotBlank ( node ) ) { Element tmpElement = ( Element ) currentElement . selectSingleNode ( node ) ; if ( tmpElement ! = null ) { currentElement = tmpElement ; } else { currentElement = currentElement . addElement ( node ) ; } } } if ( attributeName ! = null & & attributeValue ! = null ) { currentElement . addAttribute ( attributeName , attributeValue ) ; } return currentElement ; }
void test12 ( ) throws Throwable { DefaultElement defaultElement0 = new DefaultElement ( "" ) ; DefaultElement defaultElement1 = ( DefaultElement ) XmlUtility . addXmlNodeAndAttribute ( ( Element ) defaultElement0 , "" , "" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Element addXmlNodeAndAttribute ( Element rootElement , String nodeXPath , String attributeName , String attributeValue ) { String [ ] nodes = nodeXPath . split ( " / " ) ; Element currentElement = rootElement ; for ( String node : nodes ) { if ( StringUtils . isNotBlank ( node ) ) { Element tmpElement = ( Element ) currentElement . selectSingleNode ( node ) ; if ( tmpElement ! = null ) { currentElement = tmpElement ; } else { currentElement = currentElement . addElement ( node ) ; } } } if ( attributeName ! = null & & attributeValue ! = null ) { currentElement . addAttribute ( attributeName , attributeValue ) ; } return currentElement ; }
void test0 ( ) throws Throwable { ThemeUtility themeUtility0 = new ThemeUtility ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { LinkedList < StringItem > linkedList0 = ThemeUtility . getThemeList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test2 ( ) throws Throwable { LinkedList < StringItem > linkedList0 = ThemeUtility . getLAFList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test3 ( ) throws Throwable { String string0 = ThemeUtility . getLAF ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLAF ( String LAF_number ) { String ThemeSelected ; try { switch ( Integer . parseInt ( LAF_number ) ) { case 1 : ThemeSelected = UIManager . getSystemLookAndFeelClassName ( ) ; break ; case 2 : ThemeSelected = "javax . swing . plaf . metal . MetalLookAndFeel" ; break ; case 3 : ThemeSelected = "com . jgoodies . looks . plastic . Plastic3DLookAndFeel" ; break ; case 4 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticLookAndFeel" ; break ; case 5 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticXPLookAndFeel" ; break ; case 6 : ThemeSelected = "com . jgoodies . looks . windows . WindowsLookAndFeel" ; break ; default : ThemeSelected = UIManager . getCrossPlatformLookAndFeelClassName ( ) ; break ; } return ThemeSelected ; } catch ( NumberFormatException e ) { return UIManager . getCrossPlatformLookAndFeelClassName ( ) ; } }
void test4 ( ) throws Throwable { String string0 = ThemeUtility . getLAF ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLAF ( String LAF_number ) { String ThemeSelected ; try { switch ( Integer . parseInt ( LAF_number ) ) { case 1 : ThemeSelected = UIManager . getSystemLookAndFeelClassName ( ) ; break ; case 2 : ThemeSelected = "javax . swing . plaf . metal . MetalLookAndFeel" ; break ; case 3 : ThemeSelected = "com . jgoodies . looks . plastic . Plastic3DLookAndFeel" ; break ; case 4 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticLookAndFeel" ; break ; case 5 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticXPLookAndFeel" ; break ; case 6 : ThemeSelected = "com . jgoodies . looks . windows . WindowsLookAndFeel" ; break ; default : ThemeSelected = UIManager . getCrossPlatformLookAndFeelClassName ( ) ; break ; } return ThemeSelected ; } catch ( NumberFormatException e ) { return UIManager . getCrossPlatformLookAndFeelClassName ( ) ; } }
void test5 ( ) throws Throwable { String string0 = ThemeUtility . getLAF ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLAF ( String LAF_number ) { String ThemeSelected ; try { switch ( Integer . parseInt ( LAF_number ) ) { case 1 : ThemeSelected = UIManager . getSystemLookAndFeelClassName ( ) ; break ; case 2 : ThemeSelected = "javax . swing . plaf . metal . MetalLookAndFeel" ; break ; case 3 : ThemeSelected = "com . jgoodies . looks . plastic . Plastic3DLookAndFeel" ; break ; case 4 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticLookAndFeel" ; break ; case 5 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticXPLookAndFeel" ; break ; case 6 : ThemeSelected = "com . jgoodies . looks . windows . WindowsLookAndFeel" ; break ; default : ThemeSelected = UIManager . getCrossPlatformLookAndFeelClassName ( ) ; break ; } return ThemeSelected ; } catch ( NumberFormatException e ) { return UIManager . getCrossPlatformLookAndFeelClassName ( ) ; } }
void test6 ( ) throws Throwable { String string0 = ThemeUtility . getLAF ( 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLAF ( String LAF_number ) { String ThemeSelected ; try { switch ( Integer . parseInt ( LAF_number ) ) { case 1 : ThemeSelected = UIManager . getSystemLookAndFeelClassName ( ) ; break ; case 2 : ThemeSelected = "javax . swing . plaf . metal . MetalLookAndFeel" ; break ; case 3 : ThemeSelected = "com . jgoodies . looks . plastic . Plastic3DLookAndFeel" ; break ; case 4 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticLookAndFeel" ; break ; case 5 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticXPLookAndFeel" ; break ; case 6 : ThemeSelected = "com . jgoodies . looks . windows . WindowsLookAndFeel" ; break ; default : ThemeSelected = UIManager . getCrossPlatformLookAndFeelClassName ( ) ; break ; } return ThemeSelected ; } catch ( NumberFormatException e ) { return UIManager . getCrossPlatformLookAndFeelClassName ( ) ; } }
void test7 ( ) throws Throwable { String string0 = ThemeUtility . getLAF ( 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLAF ( String LAF_number ) { String ThemeSelected ; try { switch ( Integer . parseInt ( LAF_number ) ) { case 1 : ThemeSelected = UIManager . getSystemLookAndFeelClassName ( ) ; break ; case 2 : ThemeSelected = "javax . swing . plaf . metal . MetalLookAndFeel" ; break ; case 3 : ThemeSelected = "com . jgoodies . looks . plastic . Plastic3DLookAndFeel" ; break ; case 4 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticLookAndFeel" ; break ; case 5 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticXPLookAndFeel" ; break ; case 6 : ThemeSelected = "com . jgoodies . looks . windows . WindowsLookAndFeel" ; break ; default : ThemeSelected = UIManager . getCrossPlatformLookAndFeelClassName ( ) ; break ; } return ThemeSelected ; } catch ( NumberFormatException e ) { return UIManager . getCrossPlatformLookAndFeelClassName ( ) ; } }
void test8 ( ) throws Throwable { String string0 = ThemeUtility . getLAF ( 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLAF ( String LAF_number ) { String ThemeSelected ; try { switch ( Integer . parseInt ( LAF_number ) ) { case 1 : ThemeSelected = UIManager . getSystemLookAndFeelClassName ( ) ; break ; case 2 : ThemeSelected = "javax . swing . plaf . metal . MetalLookAndFeel" ; break ; case 3 : ThemeSelected = "com . jgoodies . looks . plastic . Plastic3DLookAndFeel" ; break ; case 4 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticLookAndFeel" ; break ; case 5 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticXPLookAndFeel" ; break ; case 6 : ThemeSelected = "com . jgoodies . looks . windows . WindowsLookAndFeel" ; break ; default : ThemeSelected = UIManager . getCrossPlatformLookAndFeelClassName ( ) ; break ; } return ThemeSelected ; } catch ( NumberFormatException e ) { return UIManager . getCrossPlatformLookAndFeelClassName ( ) ; } }
void test9 ( ) throws Throwable { String string0 = ThemeUtility . getLAF ( ( - 1058 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLAF ( String LAF_number ) { String ThemeSelected ; try { switch ( Integer . parseInt ( LAF_number ) ) { case 1 : ThemeSelected = UIManager . getSystemLookAndFeelClassName ( ) ; break ; case 2 : ThemeSelected = "javax . swing . plaf . metal . MetalLookAndFeel" ; break ; case 3 : ThemeSelected = "com . jgoodies . looks . plastic . Plastic3DLookAndFeel" ; break ; case 4 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticLookAndFeel" ; break ; case 5 : ThemeSelected = "com . jgoodies . looks . plastic . PlasticXPLookAndFeel" ; break ; case 6 : ThemeSelected = "com . jgoodies . looks . windows . WindowsLookAndFeel" ; break ; default : ThemeSelected = UIManager . getCrossPlatformLookAndFeelClassName ( ) ; break ; } return ThemeSelected ; } catch ( NumberFormatException e ) { return UIManager . getCrossPlatformLookAndFeelClassName ( ) ; } }
void test10 ( ) throws Throwable { boolean boolean0 = ThemeUtility . isPlastic ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPlastic ( String LAF_number ) { try { int tn = Integer . parseInt ( LAF_number ) ; return ( ( tn > = 3 ) & & ( tn < = 5 ) ) ? true : false ; } catch ( NumberFormatException e ) { return false ; } }
void test11 ( ) throws Throwable { boolean boolean0 = ThemeUtility . isPlastic ( 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPlastic ( String LAF_number ) { try { int tn = Integer . parseInt ( LAF_number ) ; return ( ( tn > = 3 ) & & ( tn < = 5 ) ) ? true : false ; } catch ( NumberFormatException e ) { return false ; } }
void test12 ( ) throws Throwable { boolean boolean0 = ThemeUtility . isPlastic ( 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPlastic ( String LAF_number ) { try { int tn = Integer . parseInt ( LAF_number ) ; return ( ( tn > = 3 ) & & ( tn < = 5 ) ) ? true : false ; } catch ( NumberFormatException e ) { return false ; } }
void test7 ( ) throws Throwable { DialogUtility dialogUtility0 = new DialogUtility ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { PdfVersionUtility pdfVersionUtility0 = new PdfVersionUtility ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { ImageUtility imageUtility0 = new ImageUtility ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test6 ( ) throws Throwable { byte [ ] byteArray0 = ImageUtility . toByteArray ( ( BufferedImage ) null ) ; BufferedImage bufferedImage0 = ImageUtility . fromByteArray ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BufferedImage fromByteArray ( byte [ ] imagebytes ) throws IOException { BufferedImage retVal = null ; if ( imagebytes ! = null & & ( imagebytes . length > 0 ) ) { retVal = ImageIO . read ( new ByteArrayInputStream ( imagebytes ) ) ; } return retVal ; }
void test7 ( ) throws Throwable { BufferedImage bufferedImage0 = new BufferedImage ( 1 , 1 , 1 ) ; byte [ ] byteArray0 = ImageUtility . toByteArray ( bufferedImage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( BufferedImage o ) throws IOException { if ( o ! = null ) { BufferedImage image = o ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( 1024 ) ; ImageIO . write ( image , "jpeg" , baos ) ; byte [ ] b = baos . toByteArray ( ) ; return b ; } return new byte [ 0 ] ; }
void test8 ( ) throws Throwable { BufferedImage bufferedImage0 = ImageUtility . fromByteArray ( ( byte [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BufferedImage fromByteArray ( byte [ ] imagebytes ) throws IOException { BufferedImage retVal = null ; if ( imagebytes ! = null & & ( imagebytes . length > 0 ) ) { retVal = ImageIO . read ( new ByteArrayInputStream ( imagebytes ) ) ; } return retVal ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; BufferedImage bufferedImage0 = ImageUtility . fromByteArray ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BufferedImage fromByteArray ( byte [ ] imagebytes ) throws IOException { BufferedImage retVal = null ; if ( imagebytes ! = null & & ( imagebytes . length > 0 ) ) { retVal = ImageIO . read ( new ByteArrayInputStream ( imagebytes ) ) ; } return retVal ; }
void test10 ( ) throws Throwable { BufferedImage bufferedImage0 = new BufferedImage ( 1 , 1 , 1 ) ; BufferedImage bufferedImage1 = ImageUtility . getScaledInstance ( bufferedImage0 , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) { return event_type ; }
void test0 ( ) throws Throwable { File file0 = new File ( ( File ) null , "" ) ; File file1 = FileExtensionUtility . ensureExtension ( file0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { String string0 = FileExtensionUtility . ensureExtension ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String ensureExtension ( String filePath , String fileExtension ) { String retVal = filePath ; if ( StringUtils . isNotEmpty ( filePath ) ) { if ( ! ( filePath . toLowerCase ( ) . endsWith ( ' . ' + fileExtension . toLowerCase ( ) ) ) ) { retVal = new StringBuilder ( filePath ) . append ( ' . ' ) . append ( fileExtension ) . toString ( ) ; } } return retVal ; }
void test0 ( ) throws Throwable { DirFilter dirFilter0 = new DirFilter ( ) ; String string0 = dirFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Direcotries" ; }
void test1 ( ) throws Throwable { DirFilter dirFilter0 = new DirFilter ( ) ; boolean boolean0 = dirFilter0 . accept ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test2 ( ) throws Throwable { DirFilter dirFilter0 = new DirFilter ( ) ; File file0 = new File ( ( File ) null , "Direcotries" ) ; boolean boolean0 = dirFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test0 ( ) throws Throwable { PdfFilter pdfFilter0 = new PdfFilter ( ) ; String string0 = pdfFilter0 . getAcceptedExtension ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAcceptedExtension ( ) { return FILE_EXTENSION ; }
void test1 ( ) throws Throwable { PdfFilter pdfFilter0 = new PdfFilter ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAcceptedExtension ( ) { return FILE_EXTENSION ; }
void test2 ( ) throws Throwable { PdfFilter pdfFilter0 = new PdfFilter ( ) ; String string0 = pdfFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Direcotries" ; }
void test0 ( ) throws Throwable { XmlFilter xmlFilter0 = new XmlFilter ( ) ; String string0 = xmlFilter0 . getAcceptedExtension ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAcceptedExtension ( ) { return FILE_EXTENSION ; }
void test1 ( ) throws Throwable { XmlFilter xmlFilter0 = new XmlFilter ( ) ; String string0 = xmlFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Direcotries" ; }
void test2 ( ) throws Throwable { XmlFilter xmlFilter0 = new XmlFilter ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Direcotries" ; }
void test0 ( ) throws Throwable { CsvFilter csvFilter0 = new CsvFilter ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAcceptedExtension ( ) { return FILE_EXTENSION ; }
void test1 ( ) throws Throwable { CsvFilter csvFilter0 = new CsvFilter ( ) ; String string0 = csvFilter0 . getAcceptedExtension ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAcceptedExtension ( ) { return FILE_EXTENSION ; }
void test2 ( ) throws Throwable { CsvFilter csvFilter0 = new CsvFilter ( ) ; String string0 = csvFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Direcotries" ; }
void test0 ( ) throws Throwable { TxtFilter txtFilter0 = new TxtFilter ( false ) ; File file0 = new File ( " ) KtfplZsK ? . " ) ; String string0 = txtFilter0 . getExtension ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExtension ( File f ) { String ext = null ; String s = f . getName ( ) ; int i = s . lastIndexOf ( ' . ' ) ; if ( i > 0 & & i < s . length ( ) - 1 ) { ext = s . substring ( i + 1 ) . toLowerCase ( ) ; } return ext ; }
void test1 ( ) throws Throwable { CsvFilter csvFilter0 = new CsvFilter ( ) ; File file0 = new File ( "" , "" ) ; boolean boolean0 = csvFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test2 ( ) throws Throwable { PdfFilter pdfFilter0 = new PdfFilter ( ) ; boolean boolean0 = pdfFilter0 . accept ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test3 ( ) throws Throwable { CsvFilter csvFilter0 = new CsvFilter ( ) ; File file0 = new File ( " : Cnk%K\" . cm" ) ; boolean boolean0 = csvFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test4 ( ) throws Throwable { CsvFilter csvFilter0 = new CsvFilter ( ) ; File file0 = new File ( "" , "" ) ; String string0 = csvFilter0 . getExtension ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExtension ( File f ) { String ext = null ; String s = f . getName ( ) ; int i = s . lastIndexOf ( ' . ' ) ; if ( i > 0 & & i < s . length ( ) - 1 ) { ext = s . substring ( i + 1 ) . toLowerCase ( ) ; } return ext ; }
void test0 ( ) throws Throwable { TxtFilter txtFilter0 = new TxtFilter ( ) ; String string0 = txtFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Direcotries" ; }
void test1 ( ) throws Throwable { TxtFilter txtFilter0 = new TxtFilter ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAcceptedExtension ( ) { return FILE_EXTENSION ; }
void test2 ( ) throws Throwable { TxtFilter txtFilter0 = new TxtFilter ( ) ; String string0 = txtFilter0 . getAcceptedExtension ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAcceptedExtension ( ) { return FILE_EXTENSION ; }
void test0 ( ) throws Throwable { JarFilter jarFilter0 = new JarFilter ( ) ; String string0 = jarFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Direcotries" ; }
void test1 ( ) throws Throwable { JarFilter jarFilter0 = new JarFilter ( ) ; String string0 = jarFilter0 . getAcceptedExtension ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAcceptedExtension ( ) { return FILE_EXTENSION ; }
void test2 ( ) throws Throwable { JarFilter jarFilter0 = new JarFilter ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAcceptedExtension ( ) { return FILE_EXTENSION ; }
void test0 ( ) throws Throwable { HtmlFilter htmlFilter0 = new HtmlFilter ( ) ; String string0 = htmlFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Direcotries" ; }
void test1 ( ) throws Throwable { HtmlFilter htmlFilter0 = new HtmlFilter ( ) ; boolean boolean0 = htmlFilter0 . accept ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test2 ( ) throws Throwable { HtmlFilter htmlFilter0 = new HtmlFilter ( ) ; File file0 = new File ( "" , "" ) ; boolean boolean0 = htmlFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test3 ( ) throws Throwable { HtmlFilter htmlFilter0 = new HtmlFilter ( ) ; File file0 = new File ( "PiY ! `kl^Ya . Ht" ) ; boolean boolean0 = htmlFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test4 ( ) throws Throwable { HtmlFilter htmlFilter0 = new HtmlFilter ( ) ; File file0 = new File ( "" , "" ) ; String string0 = htmlFilter0 . getExtension ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExtension ( File f ) { String ext = null ; String s = f . getName ( ) ; int i = s . lastIndexOf ( ' . ' ) ; if ( i > 0 & & i < s . length ( ) - 1 ) { ext = s . substring ( i + 1 ) . toLowerCase ( ) ; } return ext ; }
void test5 ( ) throws Throwable { HtmlFilter htmlFilter0 = new HtmlFilter ( ) ; File file0 = new File ( "u = #V . " ) ; boolean boolean0 = htmlFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test0 ( ) throws Throwable { PaperFormat paperFormat0 = new PaperFormat ( 0 . 0 , 0 . 0 , ( String ) null , 0 . 0 , 0 . 0 ) ; paperFormat0 . setVerticalTolerance ( 0 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getHeight ( ) { return height ; }
void test1 ( ) throws Throwable { PaperFormat paperFormat0 = new PaperFormat ( ) ; boolean boolean0 = paperFormat0 . isTolerable ( paperFormat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getHeight ( ) { return height ; }
void test2 ( ) throws Throwable { PaperFormat paperFormat0 = new PaperFormat ( ) ; paperFormat0 . setDescription ( " ! b@FY$" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getHorizontalTolerance ( ) { return horizontalTolerance ; }
void test3 ( ) throws Throwable { PaperFormat paperFormat0 = new PaperFormat ( ) ; paperFormat0 . setHeight ( ( - 578 . 044317604598 ) ) ; paperFormat0 . setHorizontalTolerance ( 87 . 35963420278784 ) ; PaperFormat paperFormat1 = new PaperFormat ( 87 . 35963420278784 , 87 . 35963420278784 , "tj | z ( | % [ . } T" , ( - 956 . 2645380918584 ) , 87 . 35963420278784 ) ; boolean boolean0 = paperFormat0 . isTolerable ( paperFormat1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getHorizontalTolerance ( ) { return horizontalTolerance ; }
void test4 ( ) throws Throwable { PaperFormat paperFormat0 = new PaperFormat ( ) ; double double0 = paperFormat0 . getHorizontalTolerance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getVerticalTolerance ( ) { return verticalTolerance ; }
void test5 ( ) throws Throwable { PaperFormat paperFormat0 = new PaperFormat ( ) ; paperFormat0 . setHorizontalTolerance ( 87 . 35963420278784 ) ; PaperFormat paperFormat1 = new PaperFormat ( 87 . 35963420278784 , ( - 956 . 2645380918584 ) , " { $'l > Z$H < SJ#2Wim" , 1 . 0 , 1 . 0 ) ; boolean boolean0 = paperFormat0 . isTolerable ( paperFormat1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getHorizontalTolerance ( ) { return horizontalTolerance ; }
void test6 ( ) throws Throwable { PaperFormat paperFormat0 = new PaperFormat ( ) ; String string0 = paperFormat0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getWidth ( ) { return width ; }
void test7 ( ) throws Throwable { PaperFormat paperFormat0 = new PaperFormat ( ) ; String string0 = paperFormat0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getVerticalTolerance ( ) { return verticalTolerance ; }
void test8 ( ) throws Throwable { PaperFormat paperFormat0 = new PaperFormat ( ) ; double double0 = paperFormat0 . getVerticalTolerance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getWidth ( ) { return width ; }
void test9 ( ) throws Throwable { PaperFormat paperFormat0 = new PaperFormat ( ) ; boolean boolean0 = paperFormat0 . isTolerable ( ( PaperFormat ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getHorizontalTolerance ( ) { return horizontalTolerance ; }
void test10 ( ) throws Throwable { PaperFormat paperFormat0 = new PaperFormat ( ) ; PaperFormat paperFormat1 = new PaperFormat ( 1 . 0 , ( - 1014 . 9173899584771 ) , "I0x6 } ~z = " , ( - 1014 . 9173899584771 ) , ( - 1014 . 9173899584771 ) ) ; boolean boolean0 = paperFormat1 . isTolerable ( paperFormat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getHeight ( ) { return height ; }
void test11 ( ) throws Throwable { PaperFormat paperFormat0 = new PaperFormat ( ) ; PaperFormat paperFormat1 = new PaperFormat ( ) ; paperFormat0 . setWidth ( ( - 328 . 1911658739991 ) ) ; boolean boolean0 = paperFormat1 . isTolerable ( paperFormat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getWidth ( ) { return width ; }
void test0 ( ) throws Throwable { PaperFormatUtility paperFormatUtility0 = new PaperFormatUtility ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = PaperFormatUtility . getFormat ( 31 . 0 , 1189 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFormat ( double width , double height ) { String retVal = Math . round ( width ) + "x" + Math . round ( height ) ; initFormats ( ) ; PaperFormat inputValue = new PaperFormat ( width , height , "" , 0 . 0 , 0 . 0 ) ; for ( PaperFormat value : formats ) { if ( value . isTolerable ( inputValue ) ) { retVal = value . getDescription ( ) ; break ; } } return retVal ; }
void test2 ( ) throws Throwable { String string0 = PaperFormatUtility . getFormat ( 125 . 0 , 176 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFormat ( double width , double height ) { String retVal = Math . round ( width ) + "x" + Math . round ( height ) ; initFormats ( ) ; PaperFormat inputValue = new PaperFormat ( width , height , "" , 0 . 0 , 0 . 0 ) ; for ( PaperFormat value : formats ) { if ( value . isTolerable ( inputValue ) ) { retVal = value . getDescription ( ) ; break ; } } return retVal ; }
void test0 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( "xh & _D - cv ; Ubttg~ Sr" , "xh & _D - cv ; Ubttg~ Sr" , "xh & _D - cv ; Ubttg~ Sr" , "xh & _D - cv ; Ubttg~ Sr" ) ; int int0 = pluginDataModel0 . compareTo ( pluginDataModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object arg0 ) { int retVal = 0 ; if ( ! ( arg0 instanceof ListItem ) ) { throw new ClassCastException ( "ListItem object expected . " ) ; } else { retVal = this . getValue ( ) . compareTo ( ( ( ListItem ) arg0 ) . getValue ( ) ) ; } return retVal ; }
void test1 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( ) ; String string0 = pluginDataModel0 . getAuthor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthor ( ) { return author ; }
void test2 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( " ; p - " , " ; p - " , " ; p - " , " ; p - " ) ; String string0 = pluginDataModel0 . getClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassName ( ) { return className ; }
void test3 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( ) ; pluginDataModel0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test4 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( ) ; String string0 = pluginDataModel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test5 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( ) ; pluginDataModel0 . setAuthor ( "2j & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test6 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( " ; p - " , " ; p - " , " ; p - " , " ; p - " ) ; pluginDataModel0 . setClassName ( " ; p - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return MainGUI . APP_VERSION ; }
void test7 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( ) ; String string0 = pluginDataModel0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return MainGUI . APP_VERSION ; }
void test8 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( "VxdBm + : 6 { i = cnn" , "VxdBm + : 6 { i = cnn" , "VxdBm + : 6 { i = cnn" , "VxdBm + : 6 { i = cnn" ) ; int int0 = pluginDataModel0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int prime = 31 ; int result = 1 ; result = prime * result + ( ( file = = null ) ? 0 : file . hashCode ( ) ) ; result = prime * result + ( ( password = = null ) ? 0 : password . hashCode ( ) ) ; return result ; }
void test9 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( ) ; int int0 = pluginDataModel0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int prime = 31 ; int result = 1 ; result = prime * result + ( ( file = = null ) ? 0 : file . hashCode ( ) ) ; result = prime * result + ( ( password = = null ) ? 0 : password . hashCode ( ) ) ; return result ; }
void test10 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( " ; p - " , " ; p - " , " ; p - " , " ; p - " ) ; PluginDataModel pluginDataModel1 = new PluginDataModel ( "" , " ; p - " , " ; p - " , "" ) ; boolean boolean0 = pluginDataModel0 . equals ( ( Object ) pluginDataModel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return MainGUI . APP_VERSION ; }
void test11 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( " ; p - " , " ; p - " , " ; p - " , " ; p - " ) ; boolean boolean0 = pluginDataModel0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test12 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( ) ; boolean boolean0 = pluginDataModel0 . equals ( ( Object ) "xh & _D - cv ; Ubttg~ Sr" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test13 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( ) ; PluginDataModel pluginDataModel1 = new PluginDataModel ( " / 33 + N" , " / 33 + N" , " / 33 + N" , " / 33 + N" ) ; boolean boolean0 = pluginDataModel0 . equals ( ( Object ) pluginDataModel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test14 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( ) ; PluginDataModel pluginDataModel1 = new PluginDataModel ( ( String ) null , ( String ) null , ( String ) null , ( String ) null ) ; boolean boolean0 = pluginDataModel0 . equals ( ( Object ) pluginDataModel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test15 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( ) ; PluginDataModel pluginDataModel1 = new PluginDataModel ( "VxdBm + : 6 { i = cnn" , "VxdBm + : 6 { i = cnn" , "VxdBm + : 6 { i = cnn" , "VxdBm + : 6 { i = cnn" ) ; boolean boolean0 = pluginDataModel1 . equals ( ( Object ) pluginDataModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test16 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( ) ; PluginDataModel pluginDataModel1 = new PluginDataModel ( ( String ) null , ( String ) null , ( String ) null , "K { Hz & [ * zENMndx , 70" ) ; boolean boolean0 = pluginDataModel0 . equals ( ( Object ) pluginDataModel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test17 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( "eN & [ Ye : yQ { S'R9" , "eN & [ Ye : yQ { S'R9" , "eN & [ Ye : yQ { S'R9" , "eN & [ Ye : yQ { S'R9" ) ; PluginDataModel pluginDataModel1 = new PluginDataModel ( "eN & [ Ye : yQ { S'R9" , "eN & [ Ye : yQ { S'R9" , "eN & [ Ye : yQ { S'R9" , "eN & [ Ye : yQ { S'R9" ) ; boolean boolean0 = pluginDataModel0 . equals ( ( Object ) pluginDataModel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test18 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( ) ; PluginDataModel pluginDataModel1 = new PluginDataModel ( "" , ( String ) null , ( String ) null , ( String ) null ) ; boolean boolean0 = pluginDataModel0 . equals ( ( Object ) pluginDataModel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test19 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( "xh & _D - cv ; Ubttg~ Sr" , "xh & _D - cv ; Ubttg~ Sr" , "xh & _D - cv ; Ubttg~ Sr" , "xh & _D - cv ; Ubttg~ Sr" ) ; PluginDataModel pluginDataModel1 = new PluginDataModel ( "o" , "xh & _D - cv ; Ubttg~ Sr" , "xh & _D - cv ; Ubttg~ Sr" , "xh & _D - cv ; Ubttg~ Sr" ) ; boolean boolean0 = pluginDataModel0 . equals ( ( Object ) pluginDataModel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthor ( ) { return author ; }
void test20 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( ) ; PluginDataModel pluginDataModel1 = new PluginDataModel ( ( String ) null , ( String ) null , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test21 ( ) throws Throwable { PluginDataModel pluginDataModel0 = new PluginDataModel ( ) ; pluginDataModel0 . setVersion ( "d" ) ; PluginDataModel pluginDataModel1 = new PluginDataModel ( ( String ) null , ( String ) null , ( String ) null , ( String ) null ) ; boolean boolean0 = pluginDataModel0 . equals ( ( Object ) pluginDataModel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test0 ( ) throws Throwable { HashMap < PluginDataModel , AbstractPlugablePanel > hashMap0 = new HashMap < PluginDataModel , AbstractPlugablePanel > ( ) ; PluginsTableModel pluginsTableModel0 = new PluginsTableModel ( ( Map < PluginDataModel , AbstractPlugablePanel > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return SHOWED_COLS ; }
void test1 ( ) throws Throwable { ArrayList < PluginDataModel > arrayList0 = new ArrayList < PluginDataModel > ( ) ; PluginsTableModel pluginsTableModel0 = new PluginsTableModel ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return SHOWED_COLS ; }
void test2 ( ) throws Throwable { ArrayList < PluginDataModel > arrayList0 = new ArrayList < PluginDataModel > ( ) ; PluginsTableModel pluginsTableModel0 = new PluginsTableModel ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return SHOWED_COLS ; }
void test3 ( ) throws Throwable { ArrayList < PluginDataModel > arrayList0 = new ArrayList < PluginDataModel > ( ) ; PluginsTableModel pluginsTableModel0 = new PluginsTableModel ( arrayList0 ) ; String [ ] stringArray0 = new String [ 13 ] ; pluginsTableModel0 . setColumnNames ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { try { return data . size ( ) ; } catch ( NullPointerException e ) { return 0 ; } }
void test4 ( ) throws Throwable { ArrayList < PluginDataModel > arrayList0 = new ArrayList < PluginDataModel > ( ) ; PluginsTableModel pluginsTableModel0 = new PluginsTableModel ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return SHOWED_COLS ; }
void test5 ( ) throws Throwable { HashMap < PluginDataModel , AbstractPlugablePanel > hashMap0 = new HashMap < PluginDataModel , AbstractPlugablePanel > ( ) ; PluginDataModel pluginDataModel0 = new PluginDataModel ( ) ; hashMap0 . put ( pluginDataModel0 , ( AbstractPlugablePanel ) null ) ; PluginsTableModel pluginsTableModel0 = new PluginsTableModel ( ( Map < PluginDataModel , AbstractPlugablePanel > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return SHOWED_COLS ; }
void test6 ( ) throws Throwable { ArrayList < PluginDataModel > arrayList0 = new ArrayList < PluginDataModel > ( ) ; PluginsTableModel pluginsTableModel0 = new PluginsTableModel ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return SHOWED_COLS ; }
void test7 ( ) throws Throwable { ArrayList < PluginDataModel > arrayList0 = new ArrayList < PluginDataModel > ( ) ; PluginDataModel pluginDataModel0 = new PluginDataModel ( ) ; arrayList0 . add ( pluginDataModel0 ) ; PluginsTableModel pluginsTableModel0 = new PluginsTableModel ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return SHOWED_COLS ; }
void test8 ( ) throws Throwable { ArrayList < PluginDataModel > arrayList0 = new ArrayList < PluginDataModel > ( ) ; arrayList0 . add ( ( PluginDataModel ) null ) ; PluginsTableModel pluginsTableModel0 = new PluginsTableModel ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return SHOWED_COLS ; }
void test1 ( ) throws Throwable { UpdateManager updateManager0 = new UpdateManager ( "sbE3EHs : DjyRJ" ) ; String string0 = updateManager0 . getAvailableVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAvailableVersion ( ) { return availableVersion ; }
void test2 ( ) throws Throwable { UpdateManager updateManager0 = new UpdateManager ( "IQ" ) ; boolean boolean0 = updateManager0 . isNewVersionAvailable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewVersionAvailable ( ) { return StringUtils . isNotBlank ( availableVersion ) & & StringUtils . equalsIgnoreCase ( GuiClient . getVersion ( ) , availableVersion ) ; }
void test0 ( ) throws Throwable { ConsoleClient consoleClient0 = new ConsoleClient ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { ConsoleServicesFacade consoleServicesFacade0 = new ConsoleServicesFacade ( ) ; CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager ( ) ; consoleServicesFacade0 . addExecutionObserver ( ( Observer ) cmdExecuteManager0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLicense ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( ConsoleServicesFacade . CREATOR + " Copyright ( C ) 2007 Andrea Vacondio\n" ) ; sb . append ( "This library is provided under dual license . \n" ) ; sb . append ( "You may choose the terms of the Lesser General Public License version 2 . 1 or the General Public License version 2\n" ) ; sb . append ( "License at your discretion . \n\n" ) ; sb . append ( "This library is free software ; you can redistribute it and / or\n" ) ; sb . append ( "modify it under the terms of the GNU Lesser General Public\n" ) ; sb . append ( "License as published by the Free Software Foundation ; \n" ) ; sb . append ( "version 2 . 1 of the License . \n\n" ) ; sb . append ( "This library is distributed in the hope that it will be useful , \n" ) ; sb . append ( "but WITHOUT ANY WARRANTY ; without even the implied warranty of\n" ) ; sb . append ( "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU\n" ) ; sb . append ( "Lesser General Public License for more details . \n\n" ) ; sb . append ( "You should have received a copy of the GNU Lesser General Public\n" ) ; sb . append ( "License along with this library ; if not , write to the Free Software\n" ) ; sb . append ( "Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA\n\n\n" ) ; sb . append ( "This program is free software : you can redistribute it and / or modify\n" ) ; sb . append ( "it under the terms of the GNU General Public License as published by\n" ) ; sb . append ( "the Free Software Foundation , version 2 of the License\n\n" ) ; sb . append ( "This program is distributed in the hope that it will be useful , \n" ) ; sb . append ( "but WITHOUT ANY WARRANTY ; without even the implied warranty of\n" ) ; sb . append ( "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the\n" ) ; sb . append ( "GNU General Public License for more details . \n\n" ) ; sb . append ( "You should have received a copy of the GNU General Public License\n" ) ; sb . append ( "along with this program . If not , see < http : / / www . gnu . org / licenses / > . . \n" ) ; sb . append ( "This is free software , and you are welcome to redistribute it\n" ) ; sb . append ( "under certain conditions ; \n" ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void execute ( ) throws ConsoleException ; }
void test2 ( ) throws Throwable { CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void execute ( ) throws ConsoleException ; }
void test3 ( ) throws Throwable { CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void execute ( ) throws ConsoleException ; }
void test4 ( ) throws Throwable { CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void execute ( ) throws ConsoleException ; }
void test5 ( ) throws Throwable { CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void execute ( ) throws ConsoleException ; }
void test6 ( ) throws Throwable { CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void execute ( ) throws ConsoleException ; }
void test7 ( ) throws Throwable { CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void execute ( ) throws ConsoleException ; }
void test8 ( ) throws Throwable { CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void execute ( ) throws ConsoleException ; }
void test9 ( ) throws Throwable { CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void execute ( ) throws ConsoleException ; }
void test10 ( ) throws Throwable { CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void execute ( ) throws ConsoleException ; }
void test11 ( ) throws Throwable { CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void execute ( ) throws ConsoleException ; }
void test0 ( ) throws Throwable { SetViewerCmdExecutor setViewerCmdExecutor0 = new SetViewerCmdExecutor ( ) ; setViewerCmdExecutor0 . clean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test4 ( ) throws Throwable { SetViewerCmdExecutor setViewerCmdExecutor0 = new SetViewerCmdExecutor ( ) ; File file0 = new File ( "" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 4 ] ; PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; pdfFileArray0 [ 0 ] = pdfFile0 ; pdfFileArray0 [ 1 ] = pdfFile0 ; pdfFileArray0 [ 2 ] = pdfFile0 ; pdfFileArray0 [ 3 ] = pdfFileArray0 [ 0 ] ; SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( file0 , ( - 1805 ) , ( - 1805 ) , ( - 1805 ) , ( - 1805 ) , pdfFileArray0 , "" , true , true , true , true , true , true , true , file0 ) ; setViewerCmdExecutor0 . execute ( ( AbstractParsedCommand ) setViewerParsedCommand0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHideWindowUI ( ) { return hideWindowUI ; }
void test0 ( ) throws Throwable { AlternateMixCmdExecutor alternateMixCmdExecutor0 = new AlternateMixCmdExecutor ( ) ; alternateMixCmdExecutor0 . clean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test1 ( ) throws Throwable { SplitCmdExecutor splitCmdExecutor0 = new SplitCmdExecutor ( ) ; splitCmdExecutor0 . clean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test0 ( ) throws Throwable { UnpackCmdExecutor unpackCmdExecutor0 = new UnpackCmdExecutor ( ) ; unpackCmdExecutor0 . clean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test4 ( ) throws Throwable { UnpackCmdExecutor unpackCmdExecutor0 = new UnpackCmdExecutor ( ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 1 ] ; PdfFile pdfFile0 = new PdfFile ( " ) A\"Fu@ , vuQO } $JJ" , " ) A\"Fu@ , vuQO } $JJ" ) ; pdfFileArray0 [ 0 ] = pdfFile0 ; UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand ( ( File ) null , ( File ) null , pdfFileArray0 ) ; unpackCmdExecutor0 . execute ( ( AbstractParsedCommand ) unpackParsedCommand0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void execute ( ) throws ConsoleException ; }
void test0 ( ) throws Throwable { EncryptCmdExecutor encryptCmdExecutor0 = new EncryptCmdExecutor ( ) ; encryptCmdExecutor0 . clean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test0 ( ) throws Throwable { PageLabelsCmdExecutor pageLabelsCmdExecutor0 = new PageLabelsCmdExecutor ( ) ; pageLabelsCmdExecutor0 . clean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test0 ( ) throws Throwable { RotateCmdExecutor rotateCmdExecutor0 = new RotateCmdExecutor ( ) ; rotateCmdExecutor0 . clean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test0 ( ) throws Throwable { DecryptCmdExecutor decryptCmdExecutor0 = new DecryptCmdExecutor ( ) ; decryptCmdExecutor0 . clean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test6 ( ) throws Throwable { ConcatCmdExecutor concatCmdExecutor0 = new ConcatCmdExecutor ( ) ; concatCmdExecutor0 . clean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test1 ( ) throws Throwable { SlideShowCmdExecutor slideShowCmdExecutor0 = new SlideShowCmdExecutor ( ) ; slideShowCmdExecutor0 . clean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test0 ( ) throws Throwable { DocumentInfoCmdExecutor documentInfoCmdExecutor0 = new DocumentInfoCmdExecutor ( ) ; documentInfoCmdExecutor0 . clean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test0 ( ) throws Throwable { SplitCmdExecutor splitCmdExecutor0 = new SplitCmdExecutor ( ) ; MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( ( File ) null , ( PdfFile ) null , ( PdfFile ) null , true , true , 10130 , 10130 ) ; Document document0 = new Document ( ) ; PdfWriter pdfWriter0 = PdfWriter . getInstance ( document0 , ( OutputStream ) null , ( DocListener ) document0 ) ; splitCmdExecutor0 . setPdfVersionSettingOnWriter ( ( AbstractParsedCommand ) mixParsedCommand0 , pdfWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPdfVersionSettingOnWriter ( AbstractParsedCommand inputCommand , PdfWriter pdfWriter , Character defaultVersion ) { if ( inputCommand . getOutputPdfVersion ( ) ! = null ) { pdfWriter . setPdfVersion ( inputCommand . getOutputPdfVersion ( ) . charValue ( ) ) ; } else { if ( defaultVersion ! = null ) { pdfWriter . setPdfVersion ( defaultVersion . charValue ( ) ) ; } } }
void test1 ( ) throws Throwable { SlideShowCmdExecutor slideShowCmdExecutor0 = new SlideShowCmdExecutor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setWorkIndeterminate ( ) { setPercentageOfWorkDone ( WorkDoneDataModel . INDETERMINATE ) ; }
void test2 ( ) throws Throwable { DecryptCmdExecutor decryptCmdExecutor0 = new DecryptCmdExecutor ( ) ; decryptCmdExecutor0 . resetPercentageOfWorkDone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void resetPercentageOfWorkDone ( ) { if ( workDone ! = null ) { workDone . resetPercentage ( ) ; } }
void test3 ( ) throws Throwable { SlideShowCmdExecutor slideShowCmdExecutor0 = new SlideShowCmdExecutor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void resetPercentageOfWorkDone ( ) { if ( workDone ! = null ) { workDone . resetPercentage ( ) ; } }
void test4 ( ) throws Throwable { UnpackCmdExecutor unpackCmdExecutor0 = new UnpackCmdExecutor ( ) ; PdfFile [ ] pdfFileArray0 = unpackCmdExecutor0 . getPdfFiles ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection getPdfFiles ( ) { ArrayList vals = new ArrayList ( values . size ( ) ) ; for ( Iterator itr = values . iterator ( ) ; itr . hasNext ( ) ; ) { vals . add ( getPdfFile ( ( String ) itr . next ( ) ) ) ; } return vals ; }
void test5 ( ) throws Throwable { PageLabelsCmdExecutor pageLabelsCmdExecutor0 = new PageLabelsCmdExecutor ( ) ; File file0 = new File ( "" , "" ) ; PdfFile [ ] pdfFileArray0 = pageLabelsCmdExecutor0 . getPdfFiles ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection getPdfFiles ( ) { ArrayList vals = new ArrayList ( values . size ( ) ) ; for ( Iterator itr = values . iterator ( ) ; itr . hasNext ( ) ; ) { vals . add ( getPdfFile ( ( String ) itr . next ( ) ) ) ; } return vals ; }
void test6 ( ) throws Throwable { SplitCmdExecutor splitCmdExecutor0 = new SplitCmdExecutor ( ) ; File file0 = new File ( " = qo + q" , " = qo + q" ) ; PdfFile [ ] pdfFileArray0 = splitCmdExecutor0 . getPdfFiles ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection getPdfFiles ( ) { ArrayList vals = new ArrayList ( values . size ( ) ) ; for ( Iterator itr = values . iterator ( ) ; itr . hasNext ( ) ; ) { vals . add ( getPdfFile ( ( String ) itr . next ( ) ) ) ; } return vals ; }
void test7 ( ) throws Throwable { UnpackCmdExecutor unpackCmdExecutor0 = new UnpackCmdExecutor ( ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 10 ] ; PdfFile [ ] pdfFileArray1 = unpackCmdExecutor0 . arraysConcat ( ( PdfFile [ ] ) null , pdfFileArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PdfFile [ ] arraysConcat ( PdfFile [ ] first , PdfFile [ ] second ) { PdfFile [ ] retVal = null ; if ( first ! = null & & second ! = null ) { retVal = new PdfFile [ first . length + second . length ] ; System . arraycopy ( first , 0 , retVal , 0 , first . length ) ; System . arraycopy ( second , 0 , retVal , first . length , second . length ) ; } else if ( first ! = null ) { retVal = first ; } else { retVal = second ; } return retVal ; }
void test8 ( ) throws Throwable { PdfFile [ ] pdfFileArray0 = new PdfFile [ 6 ] ; SlideShowCmdExecutor slideShowCmdExecutor0 = new SlideShowCmdExecutor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PdfFile [ ] arraysConcat ( PdfFile [ ] first , PdfFile [ ] second ) { PdfFile [ ] retVal = null ; if ( first ! = null & & second ! = null ) { retVal = new PdfFile [ first . length + second . length ] ; System . arraycopy ( first , 0 , retVal , 0 , first . length ) ; System . arraycopy ( second , 0 , retVal , first . length , second . length ) ; } else if ( first ! = null ) { retVal = first ; } else { retVal = second ; } return retVal ; }
void test9 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; Transition transition0 = new Transition ( ) ; Transition [ ] transitionArray0 = new Transition [ 2 ] ; SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( ( File ) null , pdfFile0 , true , transition0 , transitionArray0 , ( File ) null ) ; EncryptCmdExecutor encryptCmdExecutor0 = new EncryptCmdExecutor ( ) ; encryptCmdExecutor0 . setCompressionSettingOnWriter ( ( AbstractParsedCommand ) slideShowParsedCommand0 , ( PdfWriter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCompressionSettingOnWriter ( AbstractParsedCommand inputCommand , PdfWriter pdfWriter ) { if ( inputCommand . isCompress ( ) ) { pdfWriter . setFullCompression ( ) ; pdfWriter . setCompressionLevel ( PdfStream . BEST_COMPRESSION ) ; } }
void test10 ( ) throws Throwable { UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand ( ) ; DocumentInfoCmdExecutor documentInfoCmdExecutor0 = new DocumentInfoCmdExecutor ( ) ; documentInfoCmdExecutor0 . setCompressionSettingOnStamper ( ( AbstractParsedCommand ) unpackParsedCommand0 , ( PdfStamper ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompress ( ) { return compress ; }
void test13 ( ) throws Throwable { AlternateMixCmdExecutor alternateMixCmdExecutor0 = new AlternateMixCmdExecutor ( ) ; alternateMixCmdExecutor0 . clean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test14 ( ) throws Throwable { RotateCmdExecutor rotateCmdExecutor0 = new RotateCmdExecutor ( ) ; rotateCmdExecutor0 . clean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clean ( long id ) ; / * * * @return the Name of the creator * / String getCreatorName ( ) ; / * * * @return a unique identifier for the creator . * / String getCreatorIdentifier ( ) ; }
void test15 ( ) throws Throwable { Document document0 = new Document ( ) ; PdfWriter pdfWriter0 = PdfWriter . getInstance ( document0 , ( OutputStream ) null , ( DocListener ) document0 ) ; DocumentInfoCmdExecutor documentInfoCmdExecutor0 = new DocumentInfoCmdExecutor ( ) ; documentInfoCmdExecutor0 . closePdfWriter ( pdfWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void closePdfWriter ( PdfWriter pdfWriter ) { if ( pdfWriter ! = null ) { pdfWriter . close ( ) ; pdfWriter = null ; } }
void test3 ( ) throws Throwable { Document document0 = new Document ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PdfSimpleConcatenator pdfSimpleConcatenator0 = new PdfSimpleConcatenator ( document0 , ( OutputStream ) byteArrayOutputStream0 ) ; Phrase phrase0 = new Phrase ( 0 . 0F ) ; pdfSimpleConcatenator0 . setOutlines ( ( List ) phrase0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setOutlines ( List outlines ) { writer . setOutlines ( outlines ) ; }
void test4 ( ) throws Throwable { Document document0 = new Document ( ) ; PdfSimpleConcatenator pdfSimpleConcatenator0 = new PdfSimpleConcatenator ( document0 , ( OutputStream ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PdfSimpleConcatenator ( Document document , OutputStream os ) throws DocumentException { writer = new PdfCopy ( document , os ) ; }
void test0 ( ) throws Throwable { BookmarksProcessor bookmarksProcessor0 = new BookmarksProcessor ( ( List ) null , ( - 746 ) ) ; List < Object > list0 = bookmarksProcessor0 . processBookmarks ( ( - 1 ) , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List processBookmarks ( int startPage , int endPage , int pageOffset ) { List books = null ; if ( bookmarks ! = null ) { books = getCopyBookmarks ( bookmarks ) ; if ( endPage < numberOfPages ) { SimpleBookmark . eliminatePages ( books , new int [ ] { endPage + 1 , numberOfPages } ) ; } if ( startPage > 1 ) { SimpleBookmark . eliminatePages ( books , new int [ ] { 1 , startPage - 1 } ) ; SimpleBookmark . shiftPageNumbers ( books , - ( startPage - 1 ) , null ) ; } if ( pageOffset ! = 0 ) { SimpleBookmark . shiftPageNumbers ( books , pageOffset , null ) ; } } return books ; }
void test1 ( ) throws Throwable { LinkedList < HashMap < String , Integer > > linkedList0 = new LinkedList < HashMap < String , Integer > > ( ) ; BookmarksProcessor bookmarksProcessor0 = new BookmarksProcessor ( ( List ) linkedList0 , 1668 ) ; List < Object > list0 = bookmarksProcessor0 . processBookmarks ( 1668 , 0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List processBookmarks ( int startPage , int endPage , int pageOffset ) { List books = null ; if ( bookmarks ! = null ) { books = getCopyBookmarks ( bookmarks ) ; if ( endPage < numberOfPages ) { SimpleBookmark . eliminatePages ( books , new int [ ] { endPage + 1 , numberOfPages } ) ; } if ( startPage > 1 ) { SimpleBookmark . eliminatePages ( books , new int [ ] { 1 , startPage - 1 } ) ; SimpleBookmark . shiftPageNumbers ( books , - ( startPage - 1 ) , null ) ; } if ( pageOffset ! = 0 ) { SimpleBookmark . shiftPageNumbers ( books , pageOffset , null ) ; } } return books ; }
void test2 ( ) throws Throwable { LinkedList < Map . Entry < Integer , String > > linkedList0 = new LinkedList < Map . Entry < Integer , String > > ( ) ; linkedList0 . add ( ( Map . Entry < Integer , String > ) null ) ; BookmarksProcessor bookmarksProcessor0 = new BookmarksProcessor ( ( List ) linkedList0 , 1 ) ; List < Object > list0 = bookmarksProcessor0 . processBookmarks ( 1 , 1675 , ( - 10 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( ( bookmarkName = = null | | bookmarkName . length ( ) = = 0 ) & & ( fileNumber = = null ) & & ( pageNumber = = null ) ) ; }
void test3 ( ) throws Throwable { LinkedList < HashMap < String , Object > > linkedList0 = new LinkedList < HashMap < String , Object > > ( ) ; HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; linkedList0 . add ( hashMap0 ) ; hashMap0 . put ( "bq0D ! Mmi ( ; SQOib_w" , ( Object ) null ) ; BookmarksProcessor bookmarksProcessor0 = new BookmarksProcessor ( ( List ) linkedList0 , ( - 1 ) ) ; List < Object > list0 = bookmarksProcessor0 . processBookmarks ( 1813 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List processBookmarks ( int startPage , int endPage , int pageOffset ) { List books = null ; if ( bookmarks ! = null ) { books = getCopyBookmarks ( bookmarks ) ; if ( endPage < numberOfPages ) { SimpleBookmark . eliminatePages ( books , new int [ ] { endPage + 1 , numberOfPages } ) ; } if ( startPage > 1 ) { SimpleBookmark . eliminatePages ( books , new int [ ] { 1 , startPage - 1 } ) ; SimpleBookmark . shiftPageNumbers ( books , - ( startPage - 1 ) , null ) ; } if ( pageOffset ! = 0 ) { SimpleBookmark . shiftPageNumbers ( books , pageOffset , null ) ; } } return books ; }
void test4 ( ) throws Throwable { LinkedList < HashMap < String , Object > > linkedList0 = new LinkedList < HashMap < String , Object > > ( ) ; HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; linkedList0 . add ( hashMap0 ) ; LinkedList < List < List < String > > > linkedList1 = new LinkedList < List < List < String > > > ( ) ; hashMap0 . put ( "OCMD" , ( Object ) linkedList1 ) ; BookmarksProcessor bookmarksProcessor0 = new BookmarksProcessor ( ( List ) linkedList0 , ( - 1 ) ) ; List < Object > list0 = bookmarksProcessor0 . processBookmarks ( 1813 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( ( bookmarkName = = null | | bookmarkName . length ( ) = = 0 ) & & ( fileNumber = = null ) & & ( pageNumber = = null ) ) ; }
void test0 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; File file0 = pdfFile0 . getFile ( ) ; pdfFile0 . setFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setFile ( File file ) { this . file = file ; }
void test1 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; String string0 = pdfFile0 . getPassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return password ; }
void test2 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; byte [ ] byteArray0 = pdfFile0 . getPasswordBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getPasswordBytes ( ) { return ( password ! = null ) ? password . getBytes ( ) : null ; }
void test3 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; File file0 = pdfFile0 . getFile ( ) ; PdfFile pdfFile1 = new PdfFile ( file0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test4 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; byte [ ] byteArray0 = pdfFile0 . getPasswordBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getPasswordBytes ( ) { return ( password ! = null ) ? password . getBytes ( ) : null ; }
void test5 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; String string0 = pdfFile0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test6 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; String string0 = pdfFile0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test7 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; PdfFile pdfFile1 = new PdfFile ( ) ; boolean boolean0 = pdfFile0 . equals ( ( Object ) pdfFile1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test8 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; boolean boolean0 = pdfFile0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test9 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; Object object0 = new Object ( ) ; boolean boolean0 = pdfFile0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test10 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; PdfFile pdfFile1 = new PdfFile ( ) ; boolean boolean0 = pdfFile1 . equals ( ( Object ) pdfFile0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test11 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; PdfFile pdfFile1 = new PdfFile ( "" , "" ) ; boolean boolean0 = pdfFile0 . equals ( ( Object ) pdfFile1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test12 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( "a ; ( J = " , "a ; ( J = " ) ; PdfFile pdfFile1 = new PdfFile ( "a ; ( J = " , "a ; ( J = " ) ; boolean boolean0 = pdfFile0 . equals ( ( Object ) pdfFile1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test13 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; PdfFile pdfFile1 = new PdfFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test14 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; PdfFile pdfFile1 = new PdfFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test0 ( ) throws Throwable { PageRotation pageRotation0 = new PageRotation ( 1994 , 0 , 2 ) ; pageRotation0 . setType ( 1593 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDegrees ( ) { return degrees ; }
void test1 ( ) throws Throwable { PageRotation pageRotation0 = new PageRotation ( ) ; pageRotation0 . setPageNumber ( ( - 106 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPageNumber ( ) { return pageNumber ; }
void test2 ( ) throws Throwable { PageRotation pageRotation0 = new PageRotation ( ) ; pageRotation0 . setDegrees ( ( - 106 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDegrees ( ) { return degrees ; }
void test3 ( ) throws Throwable { PageRotation pageRotation0 = new PageRotation ( 1994 , 0 , 2 ) ; int int0 = pageRotation0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDegrees ( ) { return degrees ; }
void test4 ( ) throws Throwable { PageRotation pageRotation0 = new PageRotation ( 1994 , 0 , 2 ) ; int int0 = pageRotation0 . getPageNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) { return event_type ; }
void test5 ( ) throws Throwable { PageRotation pageRotation0 = new PageRotation ( 1994 , 0 , 2 ) ; int int0 = pageRotation0 . getDegrees ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) { return event_type ; }
void test6 ( ) throws Throwable { PageRotation pageRotation0 = new PageRotation ( ( - 106 ) , ( - 106 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDegrees ( ) { return degrees ; }
void test7 ( ) throws Throwable { PageRotation pageRotation0 = new PageRotation ( 1994 , 0 , 2 ) ; String string0 = pageRotation0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) { return event_type ; }
void test0 ( ) throws Throwable { WorkDoneDataModel workDoneDataModel0 = new WorkDoneDataModel ( ) ; int int0 = workDoneDataModel0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int prime = 31 ; int result = 1 ; result = prime * result + ( ( file = = null ) ? 0 : file . hashCode ( ) ) ; result = prime * result + ( ( password = = null ) ? 0 : password . hashCode ( ) ) ; return result ; }
void test1 ( ) throws Throwable { WorkDoneDataModel workDoneDataModel0 = new WorkDoneDataModel ( ) ; workDoneDataModel0 . setPercentageMax ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentage ( ) { return percentage ; }
void test2 ( ) throws Throwable { WorkDoneDataModel workDoneDataModel0 = new WorkDoneDataModel ( ) ; int int0 = workDoneDataModel0 . getPercentage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentage ( ) { return percentage ; }
void test3 ( ) throws Throwable { WorkDoneDataModel workDoneDataModel0 = new WorkDoneDataModel ( ) ; workDoneDataModel0 . setPercentageIndeterminate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test4 ( ) throws Throwable { WorkDoneDataModel workDoneDataModel0 = new WorkDoneDataModel ( ) ; String string0 = workDoneDataModel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test5 ( ) throws Throwable { WorkDoneDataModel workDoneDataModel0 = new WorkDoneDataModel ( ) ; workDoneDataModel0 . resetPercentage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentage ( ) { return percentage ; }
void test6 ( ) throws Throwable { WorkDoneDataModel workDoneDataModel0 = new WorkDoneDataModel ( ) ; workDoneDataModel0 . setPercentage ( 1057 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test7 ( ) throws Throwable { WorkDoneDataModel workDoneDataModel0 = new WorkDoneDataModel ( ) ; workDoneDataModel0 . setPercentage ( ( - 1303 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test8 ( ) throws Throwable { WorkDoneDataModel workDoneDataModel0 = new WorkDoneDataModel ( ) ; Object object0 = new Object ( ) ; boolean boolean0 = workDoneDataModel0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentage ( ) { return percentage ; }
void test9 ( ) throws Throwable { WorkDoneDataModel workDoneDataModel0 = new WorkDoneDataModel ( ) ; boolean boolean0 = workDoneDataModel0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentage ( ) { return percentage ; }
void test10 ( ) throws Throwable { WorkDoneDataModel workDoneDataModel0 = new WorkDoneDataModel ( ) ; WorkDoneDataModel workDoneDataModel1 = new WorkDoneDataModel ( ) ; boolean boolean0 = workDoneDataModel0 . equals ( ( Object ) workDoneDataModel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentage ( ) { return percentage ; }
void test11 ( ) throws Throwable { WorkDoneDataModel workDoneDataModel0 = new WorkDoneDataModel ( ) ; workDoneDataModel0 . setPercentage ( ( - 1 ) ) ; WorkDoneDataModel workDoneDataModel1 = new WorkDoneDataModel ( ) ; boolean boolean0 = workDoneDataModel0 . equals ( ( Object ) workDoneDataModel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test0 ( ) throws Throwable { Transition transition0 = new Transition ( ) ; String string0 = transition0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDuration ( ) { return duration ; }
void test1 ( ) throws Throwable { Transition transition0 = new Transition ( ) ; transition0 . setTransition ( ( String ) null ) ; Transition transition1 = new Transition ( ) ; boolean boolean0 = transition0 . equals ( ( Object ) transition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransitionDuration ( ) { return transitionDuration ; }
void test2 ( ) throws Throwable { Transition transition0 = new Transition ( ) ; transition0 . setDuration ( 1696 ) ; Transition transition1 = new Transition ( ) ; boolean boolean0 = transition1 . equals ( ( Object ) transition0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDuration ( ) { return duration ; }
void test3 ( ) throws Throwable { Transition transition0 = new Transition ( ) ; int int0 = transition0 . getDuration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPageNumber ( ) { return pageNumber ; }
void test4 ( ) throws Throwable { Transition transition0 = new Transition ( ) ; int int0 = transition0 . getPageNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransitionDuration ( ) { return transitionDuration ; }
void test5 ( ) throws Throwable { Transition transition0 = new Transition ( ) ; String string0 = transition0 . getTransition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransitionDuration ( ) { return transitionDuration ; }
void test6 ( ) throws Throwable { Transition transition0 = new Transition ( ) ; int int0 = transition0 . getTransitionDuration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPageNumber ( ) { return pageNumber ; }
void test7 ( ) throws Throwable { Transition transition0 = new Transition ( ) ; transition0 . setPageNumber ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPageNumber ( ) { return pageNumber ; }
void test8 ( ) throws Throwable { Transition transition0 = new Transition ( 1592 , 1592 , ( String ) null , 1592 ) ; int int0 = transition0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int prime = 31 ; int result = 1 ; result = prime * result + ( ( file = = null ) ? 0 : file . hashCode ( ) ) ; result = prime * result + ( ( password = = null ) ? 0 : password . hashCode ( ) ) ; return result ; }
void test9 ( ) throws Throwable { Transition transition0 = new Transition ( ) ; boolean boolean0 = transition0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDuration ( ) { return duration ; }
void test10 ( ) throws Throwable { Transition transition0 = new Transition ( 194 , 194 , "gi : te\"d" , 194 ) ; boolean boolean0 = transition0 . equals ( ( Object ) "splithout" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPageNumber ( ) { return pageNumber ; }
void test11 ( ) throws Throwable { Transition transition0 = new Transition ( 194 , 194 , "gi : te\"d" , 194 ) ; Transition transition1 = new Transition ( 0 , 194 , "gi : te\"d" , 194 ) ; boolean boolean0 = transition0 . equals ( ( Object ) transition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDuration ( ) { return duration ; }
void test12 ( ) throws Throwable { Transition transition0 = new Transition ( ) ; transition0 . setTransition ( ( String ) null ) ; Transition transition1 = new Transition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; PdfFile other = ( PdfFile ) obj ; if ( file = = null ) { if ( other . file ! = null ) return false ; } else if ( ! file . equals ( other . file ) ) return false ; if ( password = = null ) { if ( other . password ! = null ) return false ; } else if ( ! password . equals ( other . password ) ) return false ; return true ; }
void test13 ( ) throws Throwable { Transition transition0 = new Transition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDuration ( ) { return duration ; }
void test14 ( ) throws Throwable { Transition transition0 = new Transition ( ) ; Transition transition1 = new Transition ( ) ; transition1 . setTransitionDuration ( 0 ) ; boolean boolean0 = transition0 . equals ( ( Object ) transition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransitionDuration ( ) { return transitionDuration ; }
void test0 ( ) throws Throwable { Bounds bounds0 = new Bounds ( ) ; bounds0 . setStart ( 808 ) ; Bounds bounds1 = new Bounds ( ) ; boolean boolean0 = bounds1 . intersects ( bounds0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test1 ( ) throws Throwable { Bounds bounds0 = new Bounds ( ( - 1 ) , ( - 1 ) ) ; Bounds bounds1 = new Bounds ( ) ; boolean boolean0 = bounds0 . intersects ( bounds1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEnd ( ) { return end ; }
void test2 ( ) throws Throwable { Bounds bounds0 = new Bounds ( ( - 505 ) , 0 ) ; String string0 = bounds0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test3 ( ) throws Throwable { Bounds bounds0 = new Bounds ( ( - 1 ) , ( - 1 ) ) ; bounds0 . setEnd ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test4 ( ) throws Throwable { Bounds bounds0 = new Bounds ( 0 , 0 ) ; Bounds bounds1 = new Bounds ( 1 , 1 ) ; boolean boolean0 = bounds1 . intersects ( bounds0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEnd ( ) { return end ; }
void test5 ( ) throws Throwable { Bounds bounds0 = new Bounds ( ( - 505 ) , 0 ) ; boolean boolean0 = bounds0 . intersects ( bounds0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEnd ( ) { return end ; }
void test0 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; int int0 = pageLabel0 . getLogicalPageNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test1 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; int int0 = pageLabel0 . getPageNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test2 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; pageLabel0 . setStyle ( "lV { 80Wf [ W" ) ; PageLabel pageLabel1 = new PageLabel ( ) ; boolean boolean0 = pageLabel0 . equals ( ( Object ) pageLabel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test3 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; String string0 = pageLabel0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test4 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; String string0 = pageLabel0 . getPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPageNumber ( ) { return pageNumber ; }
void test5 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; String string0 = pageLabel0 . getStyle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test6 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; pageLabel0 . setPrefix ( "empty" ) ; int int0 = pageLabel0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test7 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; int int0 = pageLabel0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int prime = 31 ; int result = 1 ; result = prime * result + ( ( file = = null ) ? 0 : file . hashCode ( ) ) ; result = prime * result + ( ( password = = null ) ? 0 : password . hashCode ( ) ) ; return result ; }
void test8 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; pageLabel0 . setStyle ( ( String ) null ) ; int int0 = pageLabel0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test9 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; boolean boolean0 = pageLabel0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test10 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; boolean boolean0 = pageLabel0 . equals ( ( Object ) "empty" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test11 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; PageLabel pageLabel1 = new PageLabel ( ) ; pageLabel0 . setLogicalPageNumber ( ( - 1298353164 ) ) ; boolean boolean0 = pageLabel0 . equals ( ( Object ) pageLabel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test12 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; PageLabel pageLabel1 = new PageLabel ( ) ; pageLabel0 . setPageNumber ( 0 ) ; boolean boolean0 = pageLabel0 . equals ( ( Object ) pageLabel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPageNumber ( ) { return pageNumber ; }
void test13 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; PageLabel pageLabel1 = new PageLabel ( ) ; pageLabel0 . setPrefix ( "empty" ) ; boolean boolean0 = pageLabel0 . equals ( ( Object ) pageLabel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test14 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; PageLabel pageLabel1 = new PageLabel ( ) ; pageLabel1 . setPrefix ( " > , ? - d + 7 [ \"G8 / " ) ; boolean boolean0 = pageLabel0 . equals ( ( Object ) pageLabel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test15 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; PageLabel pageLabel1 = new PageLabel ( ) ; pageLabel0 . setPrefix ( "empty" ) ; pageLabel1 . setPrefix ( "empty" ) ; boolean boolean0 = pageLabel0 . equals ( ( Object ) pageLabel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test16 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; pageLabel0 . setStyle ( ( String ) null ) ; PageLabel pageLabel1 = new PageLabel ( ) ; boolean boolean0 = pageLabel0 . equals ( ( Object ) pageLabel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test17 ( ) throws Throwable { PageLabel pageLabel0 = new PageLabel ( ) ; pageLabel0 . setStyle ( ( String ) null ) ; pageLabel0 . setPrefix ( "empty" ) ; PageLabel pageLabel1 = new PageLabel ( ) ; pageLabel1 . setStyle ( ( String ) null ) ; pageLabel1 . setPrefix ( "empty" ) ; boolean boolean0 = pageLabel0 . equals ( ( Object ) pageLabel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( super . toString ( ) ) ; retVal . append ( ( file = = null ) ? "" : " [ file = " + file . getAbsolutePath ( ) + " ] " ) ; retVal . append ( " [ password = " + password + " ] " ) ; return retVal . toString ( ) ; }
void test0 ( ) throws Throwable { DocumentInfoParsedCommand documentInfoParsedCommand0 = new DocumentInfoParsedCommand ( ) ; PdfFile pdfFile0 = documentInfoParsedCommand0 . getInputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getInputFile ( ) { return inputFile ; }
void test1 ( ) throws Throwable { DocumentInfoParsedCommand documentInfoParsedCommand0 = new DocumentInfoParsedCommand ( ) ; String string0 = documentInfoParsedCommand0 . getSubject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSubject ( ) { return subject ; }
void test2 ( ) throws Throwable { DocumentInfoParsedCommand documentInfoParsedCommand0 = new DocumentInfoParsedCommand ( ) ; documentInfoParsedCommand0 . setSubject ( "org . pdfsam . console . business . dto . commands . DocumentInfoParsedCommand@3d9a20d0 [ false , false , < null > ] [ command = setdocinfo ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompress ( ) { return compress ; }
void test3 ( ) throws Throwable { DocumentInfoParsedCommand documentInfoParsedCommand0 = new DocumentInfoParsedCommand ( ) ; String string0 = documentInfoParsedCommand0 . getKeywords ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeywords ( ) { return keywords ; }
void test4 ( ) throws Throwable { DocumentInfoParsedCommand documentInfoParsedCommand0 = new DocumentInfoParsedCommand ( ) ; File file0 = documentInfoParsedCommand0 . getOutputFile ( ) ; documentInfoParsedCommand0 . setOutputFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSubject ( ) { return subject ; }
void test5 ( ) throws Throwable { DocumentInfoParsedCommand documentInfoParsedCommand0 = new DocumentInfoParsedCommand ( ) ; documentInfoParsedCommand0 . setTitle ( "org . pdfsam . console . business . dto . commands . DocumentInfoParsedCommand@f3a8317 [ false , false , < null > ] [ command = setdocinfo ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test6 ( ) throws Throwable { File file0 = new File ( "mix" , "mix" ) ; PdfFile pdfFile0 = new PdfFile ( ) ; DocumentInfoParsedCommand documentInfoParsedCommand0 = new DocumentInfoParsedCommand ( file0 , pdfFile0 , "mix" , "mix" , "mix" , "mix" ) ; documentInfoParsedCommand0 . setInputFile ( pdfFile0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthor ( ) { return author ; }
void test7 ( ) throws Throwable { File file0 = new File ( ( File ) null , " + b * jnVY7Z" ) ; PdfFile pdfFile0 = new PdfFile ( ) ; DocumentInfoParsedCommand documentInfoParsedCommand0 = new DocumentInfoParsedCommand ( file0 , pdfFile0 , " + b * jnVY7Z" , " + b * jnVY7Z" , " + b * jnVY7Z" , " + b * jnVY7Z" , false , true , 'l' ) ; String string0 = documentInfoParsedCommand0 . getAuthor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeywords ( ) { return keywords ; }
void test8 ( ) throws Throwable { DocumentInfoParsedCommand documentInfoParsedCommand0 = new DocumentInfoParsedCommand ( ) ; documentInfoParsedCommand0 . setAuthor ( "org . pdfsam . console . business . dto . commands . DocumentInfoParsedCommand@3d9a20d0 [ false , false , < null > ] [ command = setdocinfo ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSubject ( ) { return subject ; }
void test9 ( ) throws Throwable { DocumentInfoParsedCommand documentInfoParsedCommand0 = new DocumentInfoParsedCommand ( ) ; documentInfoParsedCommand0 . setKeywords ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeywords ( ) { return keywords ; }
void test10 ( ) throws Throwable { File file0 = new File ( "mix" , "mix" ) ; PdfFile pdfFile0 = new PdfFile ( ) ; DocumentInfoParsedCommand documentInfoParsedCommand0 = new DocumentInfoParsedCommand ( file0 , pdfFile0 , "mix" , "mix" , "mix" , "mix" ) ; String string0 = documentInfoParsedCommand0 . getTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthor ( ) { return author ; }
void test11 ( ) throws Throwable { DocumentInfoParsedCommand documentInfoParsedCommand0 = new DocumentInfoParsedCommand ( ) ; String string0 = documentInfoParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test12 ( ) throws Throwable { File file0 = new File ( ( File ) null , " + b * jnVY7Z" ) ; PdfFile pdfFile0 = new PdfFile ( ) ; DocumentInfoParsedCommand documentInfoParsedCommand0 = new DocumentInfoParsedCommand ( file0 , pdfFile0 , " + b * jnVY7Z" , " + b * jnVY7Z" , " + b * jnVY7Z" , " + b * jnVY7Z" , false , true , 'l' ) ; String string0 = documentInfoParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeywords ( ) { return keywords ; }
void test0 ( ) throws Throwable { ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( ) ; concatParsedCommand0 . getRotations ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test1 ( ) throws Throwable { ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( ) ; concatParsedCommand0 . setOutputFile ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test2 ( ) throws Throwable { PdfFile [ ] pdfFileArray0 = new PdfFile [ 9 ] ; String [ ] stringArray0 = new String [ 9 ] ; PageRotation [ ] pageRotationArray0 = new PageRotation [ 3 ] ; ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( ( File ) null , ( File ) null , pdfFileArray0 , stringArray0 , false , pageRotationArray0 , ( File ) null ) ; concatParsedCommand0 . getInputDirectory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test3 ( ) throws Throwable { File file0 = new File ( ( File ) null , "N ! oMdjm - " ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 10 ] ; String [ ] stringArray0 = new String [ 8 ] ; PageRotation [ ] pageRotationArray0 = new PageRotation [ 9 ] ; ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( file0 , file0 , pdfFileArray0 , stringArray0 , false , pageRotationArray0 , ( File ) null , true , false , 'a' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test4 ( ) throws Throwable { ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( ) ; concatParsedCommand0 . getInputCvsOrXmlFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test5 ( ) throws Throwable { PdfFile [ ] pdfFileArray0 = new PdfFile [ 9 ] ; String [ ] stringArray0 = new String [ 9 ] ; PageRotation [ ] pageRotationArray0 = new PageRotation [ 3 ] ; ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( ( File ) null , ( File ) null , pdfFileArray0 , stringArray0 , false , pageRotationArray0 , ( File ) null ) ; String [ ] stringArray1 = concatParsedCommand0 . getPageSelections ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test6 ( ) throws Throwable { File file0 = new File ( ( File ) null , "N ! oMdjm - " ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 10 ] ; String [ ] stringArray0 = new String [ 4 ] ; PageRotation [ ] pageRotationArray0 = new PageRotation [ 1 ] ; ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( file0 , ( File ) null , pdfFileArray0 , stringArray0 , true , pageRotationArray0 , ( File ) null ) ; boolean boolean0 = concatParsedCommand0 . isCopyFields ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test7 ( ) throws Throwable { File file0 = new File ( ( File ) null , "N ! oMdjm - " ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 10 ] ; String [ ] stringArray0 = new String [ 8 ] ; PageRotation [ ] pageRotationArray0 = new PageRotation [ 9 ] ; ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( file0 , ( File ) null , pdfFileArray0 , stringArray0 , false , pageRotationArray0 , file0 ) ; concatParsedCommand0 . setRotations ( pageRotationArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test8 ( ) throws Throwable { File file0 = new File ( "" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 6 ] ; PageRotation [ ] pageRotationArray0 = new PageRotation [ 5 ] ; ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( file0 , file0 , pdfFileArray0 , "" , true , pageRotationArray0 , file0 , true , true , file0 , 'G' ) ; concatParsedCommand0 . setCopyFields ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test9 ( ) throws Throwable { File file0 = new File ( ( File ) null , "N ! oMdjm - " ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 10 ] ; String [ ] stringArray0 = new String [ 4 ] ; PageRotation [ ] pageRotationArray0 = new PageRotation [ 1 ] ; ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( file0 , ( File ) null , pdfFileArray0 , stringArray0 , true , pageRotationArray0 , ( File ) null ) ; PdfFile [ ] pdfFileArray1 = concatParsedCommand0 . getInputFileList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test10 ( ) throws Throwable { File file0 = new File ( ( File ) null , "N ! oMdjm - " ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 10 ] ; String [ ] stringArray0 = new String [ 4 ] ; PageRotation [ ] pageRotationArray0 = new PageRotation [ 1 ] ; ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( file0 , ( File ) null , pdfFileArray0 , stringArray0 , true , pageRotationArray0 , ( File ) null ) ; concatParsedCommand0 . setPageSelections ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test11 ( ) throws Throwable { ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( ) ; concatParsedCommand0 . setInputDirectory ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test12 ( ) throws Throwable { ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( ) ; concatParsedCommand0 . getOutputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test13 ( ) throws Throwable { ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( ) ; concatParsedCommand0 . setInputCvsOrXmlFile ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test14 ( ) throws Throwable { PdfFile [ ] pdfFileArray0 = new PdfFile [ 5 ] ; String [ ] stringArray0 = new String [ 6 ] ; PageRotation [ ] pageRotationArray0 = new PageRotation [ 4 ] ; ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( ( File ) null , ( File ) null , pdfFileArray0 , stringArray0 , true , pageRotationArray0 , ( File ) null ) ; concatParsedCommand0 . setInputFileList ( pdfFileArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test15 ( ) throws Throwable { ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( ) ; String string0 = concatParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test16 ( ) throws Throwable { File file0 = new File ( "" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 6 ] ; PdfFile pdfFile0 = new PdfFile ( file0 , "" ) ; pdfFileArray0 [ 0 ] = pdfFile0 ; PageRotation [ ] pageRotationArray0 = new PageRotation [ 5 ] ; ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( file0 , file0 , pdfFileArray0 , "" , true , pageRotationArray0 , file0 , true , true , file0 , 'G' ) ; String string0 = concatParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test17 ( ) throws Throwable { File file0 = new File ( "" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 6 ] ; String [ ] stringArray0 = new String [ 8 ] ; PageRotation [ ] pageRotationArray0 = new PageRotation [ 6 ] ; ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( file0 , file0 , pdfFileArray0 , stringArray0 , true , pageRotationArray0 , file0 ) ; String string0 = concatParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCopyFields ( ) { return copyFields ; }
void test0 ( ) throws Throwable { RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand ( ) ; File file0 = rotateParsedCommand0 . getOutputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getOutputFile ( ) { return outputFile ; }
void test1 ( ) throws Throwable { RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand ( ) ; String string0 = rotateParsedCommand0 . getOutputFilesPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilesPrefix ( ) { return outputFilesPrefix ; }
void test2 ( ) throws Throwable { PdfFile [ ] pdfFileArray0 = new PdfFile [ 1 ] ; PdfFile pdfFile0 = new PdfFile ( "@8 ; ST } C - iFCp$2 , B - Li" , "@8 ; ST } C - iFCp$2 , B - Li" ) ; File file0 = pdfFile0 . getFile ( ) ; PageRotation pageRotation0 = new PageRotation ( ) ; RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand ( pdfFileArray0 , file0 , "@8 ; ST } C - iFCp$2 , B - Li" , pageRotation0 , true , false , 'Q' ) ; rotateParsedCommand0 . setInputFileList ( pdfFileArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilesPrefix ( ) { return outputFilesPrefix ; }
void test3 ( ) throws Throwable { PdfFile [ ] pdfFileArray0 = new PdfFile [ 2 ] ; File file0 = new File ( "M7s~#4u2ipB > . G" , "M7s~#4u2ipB > . G" ) ; RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand ( pdfFileArray0 , file0 , "M7s~#4u2ipB > . G" , ( PageRotation ) null , false , true , ' - ' ) ; rotateParsedCommand0 . getRotation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilesPrefix ( ) { return outputFilesPrefix ; }
void test4 ( ) throws Throwable { RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand ( ) ; rotateParsedCommand0 . setOutputFile ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompress ( ) { return compress ; }
void test5 ( ) throws Throwable { RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand ( ) ; PageRotation pageRotation0 = new PageRotation ( ( - 1974 ) , 0 , 0 ) ; rotateParsedCommand0 . setRotation ( pageRotation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getType ( ) { return event_type ; }
void test6 ( ) throws Throwable { PdfFile [ ] pdfFileArray0 = new PdfFile [ 1 ] ; PageRotation pageRotation0 = new PageRotation ( ) ; RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand ( pdfFileArray0 , ( File ) null , ( String ) null , pageRotation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompress ( ) { return compress ; }
void test7 ( ) throws Throwable { RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand ( ) ; PdfFile [ ] pdfFileArray0 = rotateParsedCommand0 . getInputFileList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PdfFile [ ] getInputFileList ( ) { return inputFileList ; }
void test8 ( ) throws Throwable { RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand ( ) ; rotateParsedCommand0 . setOutputFilesPrefix ( "encrypt" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilesPrefix ( ) { return outputFilesPrefix ; }
void test9 ( ) throws Throwable { RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand ( ) ; String string0 = rotateParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test10 ( ) throws Throwable { PdfFile [ ] pdfFileArray0 = new PdfFile [ 2 ] ; File file0 = new File ( "M7s~#4u2ipB > . G" , "M7s~#4u2ipB > . G" ) ; PdfFile pdfFile0 = new PdfFile ( file0 , "M7s~#4u2ipB > . G" ) ; pdfFileArray0 [ 1 ] = pdfFile0 ; RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand ( pdfFileArray0 , file0 , "M7s~#4u2ipB > . G" , ( PageRotation ) null , false , true , ' - ' ) ; String string0 = rotateParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilesPrefix ( ) { return outputFilesPrefix ; }
void test0 ( ) throws Throwable { File file0 = new File ( "" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 6 ] ; EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( file0 , "" , "" , "" , 0 , "" , pdfFileArray0 , file0 , true , false , file0 , 'S' ) ; String string0 = encryptParsedCommand0 . getUserPwd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserPwd ( ) { return userPwd ; }
void test1 ( ) throws Throwable { EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( ) ; encryptParsedCommand0 . setPermissions ( ( - 1027 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPermissions ( ) { return permissions ; }
void test2 ( ) throws Throwable { File file0 = new File ( "1 . 1" , "1 . 1" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 10 ] ; EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( file0 , "1 . 1" , "1 . 1" , "1 . 1" , ( - 399 ) , "1 . 1" , pdfFileArray0 , file0 , false , false , 'A' ) ; encryptParsedCommand0 . setOutputFilesPrefix ( "1 . 1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOwnerPwd ( ) { return ownerPwd ; }
void test3 ( ) throws Throwable { PdfFile [ ] pdfFileArray0 = new PdfFile [ 1 ] ; EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( ( File ) null , "" , "" , "" , 54 , "" , pdfFileArray0 , ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserPwd ( ) { return userPwd ; }
void test4 ( ) throws Throwable { EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( ) ; encryptParsedCommand0 . setInputDirectory ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncryptionType ( ) { return encryptionType ; }
void test5 ( ) throws Throwable { File file0 = new File ( "" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 6 ] ; EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( file0 , "" , "" , "" , 0 , "" , pdfFileArray0 , file0 , true , false , file0 , 'S' ) ; String string0 = encryptParsedCommand0 . getEncryptionType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncryptionType ( ) { return encryptionType ; }
void test6 ( ) throws Throwable { EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( ) ; encryptParsedCommand0 . getOutputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncryptionType ( ) { return encryptionType ; }
void test7 ( ) throws Throwable { EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( ) ; encryptParsedCommand0 . setOwnerPwd ( "dfY + jrO ; 0BOPD ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOwnerPwd ( ) { return ownerPwd ; }
void test8 ( ) throws Throwable { EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( ) ; encryptParsedCommand0 . setUserPwd ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncryptionType ( ) { return encryptionType ; }
void test9 ( ) throws Throwable { EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( ) ; encryptParsedCommand0 . getInputFileList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncryptionType ( ) { return encryptionType ; }
void test10 ( ) throws Throwable { EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( ) ; encryptParsedCommand0 . getInputDirectory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncryptionType ( ) { return encryptionType ; }
void test11 ( ) throws Throwable { EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncryptionType ( ) { return encryptionType ; }
void test12 ( ) throws Throwable { EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( ) ; File file0 = new File ( "dfY + jrO ; 0BOPD ] " , "dfY + jrO ; 0BOPD ] " ) ; encryptParsedCommand0 . setOutputFile ( file0 ) ; String string0 = encryptParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncryptionType ( ) { return encryptionType ; }
void test13 ( ) throws Throwable { EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( ) ; String string0 = encryptParsedCommand0 . getOutputFilesPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncryptionType ( ) { return encryptionType ; }
void test14 ( ) throws Throwable { EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( ) ; int int0 = encryptParsedCommand0 . getPermissions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncryptionType ( ) { return encryptionType ; }
void test15 ( ) throws Throwable { EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( ) ; String string0 = encryptParsedCommand0 . getOwnerPwd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncryptionType ( ) { return encryptionType ; }
void test16 ( ) throws Throwable { EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( ) ; String string0 = encryptParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncryptionType ( ) { return encryptionType ; }
void test17 ( ) throws Throwable { EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 4 ] ; PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; pdfFileArray0 [ 0 ] = pdfFile0 ; encryptParsedCommand0 . setInputFileList ( pdfFileArray0 ) ; String string0 = encryptParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncryptionType ( ) { return encryptionType ; }
void test18 ( ) throws Throwable { File file0 = new File ( "1 . 1" , "1 . 1" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 10 ] ; EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand ( file0 , "oO" , "oO" , "oO" , ( - 124 ) , "oO" , pdfFileArray0 , file0 , false , false , file0 , 'H' ) ; String string0 = encryptParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test0 ( ) throws Throwable { UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand ( ) ; PdfFile pdfFile0 = new PdfFile ( "MOi~ , t#e } < { h [ 4@" , "MOi~ , t#e } < { h [ 4@" ) ; File file0 = pdfFile0 . getFile ( ) ; unpackParsedCommand0 . setOutputFile ( file0 ) ; String string0 = unpackParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test1 ( ) throws Throwable { UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand ( ) ; PdfFile [ ] pdfFileArray0 = unpackParsedCommand0 . getInputFileList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PdfFile [ ] getInputFileList ( ) { return inputFileList ; }
void test2 ( ) throws Throwable { UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand ( ) ; File file0 = unpackParsedCommand0 . getOutputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getOutputFile ( ) { return outputFile ; }
void test3 ( ) throws Throwable { UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand ( ) ; File file0 = unpackParsedCommand0 . getInputDirectory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getInputDirectory ( ) { return inputDirectory ; }
void test4 ( ) throws Throwable { PdfFile [ ] pdfFileArray0 = new PdfFile [ 1 ] ; UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand ( ( File ) null , ( File ) null , pdfFileArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompress ( ) { return compress ; }
void test5 ( ) throws Throwable { UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand ( ) ; PdfFile pdfFile0 = new PdfFile ( "MOi~ , t#e } < { h [ 4@" , "MOi~ , t#e } < { h [ 4@" ) ; File file0 = pdfFile0 . getFile ( ) ; unpackParsedCommand0 . setInputDirectory ( file0 ) ; String string0 = unpackParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test6 ( ) throws Throwable { UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand ( ) ; PdfFile pdfFile0 = new PdfFile ( "MOi~ , t#e } < { h [ 4@" , "MOi~ , t#e } < { h [ 4@" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 10 ] ; pdfFileArray0 [ 0 ] = pdfFile0 ; unpackParsedCommand0 . setInputFileList ( pdfFileArray0 ) ; String string0 = unpackParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test0 ( ) throws Throwable { DecryptParsedCommand decryptParsedCommand0 = new DecryptParsedCommand ( ) ; decryptParsedCommand0 . setOutputFile ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test1 ( ) throws Throwable { DecryptParsedCommand decryptParsedCommand0 = new DecryptParsedCommand ( ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 5 ] ; decryptParsedCommand0 . setInputFileList ( pdfFileArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilesPrefix ( ) { return outputFilesPrefix ; }
void test2 ( ) throws Throwable { PdfFile [ ] pdfFileArray0 = new PdfFile [ 10 ] ; DecryptParsedCommand decryptParsedCommand0 = new DecryptParsedCommand ( pdfFileArray0 , ( File ) null , "" , false , false , 'm' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilesPrefix ( ) { return outputFilesPrefix ; }
void test3 ( ) throws Throwable { DecryptParsedCommand decryptParsedCommand0 = new DecryptParsedCommand ( ) ; String string0 = decryptParsedCommand0 . getOutputFilesPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilesPrefix ( ) { return outputFilesPrefix ; }
void test4 ( ) throws Throwable { DecryptParsedCommand decryptParsedCommand0 = new DecryptParsedCommand ( ) ; String string0 = decryptParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test5 ( ) throws Throwable { DecryptParsedCommand decryptParsedCommand0 = new DecryptParsedCommand ( ) ; decryptParsedCommand0 . setOutputFilesPrefix ( "GaQ6kFD [ " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilesPrefix ( ) { return outputFilesPrefix ; }
void test6 ( ) throws Throwable { DecryptParsedCommand decryptParsedCommand0 = new DecryptParsedCommand ( ) ; PdfFile [ ] pdfFileArray0 = decryptParsedCommand0 . getInputFileList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PdfFile [ ] getInputFileList ( ) { return inputFileList ; }
void test7 ( ) throws Throwable { PdfFile [ ] pdfFileArray0 = new PdfFile [ 8 ] ; File file0 = new File ( "gezxI# - V ) wx" ) ; DecryptParsedCommand decryptParsedCommand0 = new DecryptParsedCommand ( pdfFileArray0 , file0 , "gezxI# - V ) wx" ) ; String string0 = decryptParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test8 ( ) throws Throwable { PdfFile [ ] pdfFileArray0 = new PdfFile [ 10 ] ; PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; pdfFileArray0 [ 0 ] = pdfFile0 ; DecryptParsedCommand decryptParsedCommand0 = new DecryptParsedCommand ( ) ; File file0 = decryptParsedCommand0 . getOutputFile ( ) ; DecryptParsedCommand decryptParsedCommand1 = new DecryptParsedCommand ( pdfFileArray0 , file0 , "" ) ; String string0 = decryptParsedCommand1 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test0 ( ) throws Throwable { PdfFile [ ] pdfFileArray0 = new PdfFile [ 3 ] ; PageRotation pageRotation0 = new PageRotation ( ) ; RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand ( pdfFileArray0 , ( File ) null , "" , pageRotation0 ) ; boolean boolean0 = rotateParsedCommand0 . isOverwrite ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompress ( ) { return compress ; }
void test1 ( ) throws Throwable { ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( ) ; boolean boolean0 = concatParsedCommand0 . isCompress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverwrite ( ) { return overwrite_value ; }
void test2 ( ) throws Throwable { PdfFile [ ] pdfFileArray0 = new PdfFile [ 4 ] ; PageRotation [ ] pageRotationArray0 = new PageRotation [ 5 ] ; ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( ( File ) null , ( File ) null , pdfFileArray0 , "org . pdfsam . console . business . dto . commands . UnpackParsedCommand@263586a4 [ false , false , < null > ] [ command = unpack ] " , false , pageRotationArray0 , ( File ) null , true , true , ( File ) null , ' [ ' ) ; concatParsedCommand0 . setOutputPdfVersion ( ( Character ) ' [ ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompress ( ) { return compress ; }
void test3 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverwrite ( ) { return overwrite_value ; }
void test4 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; String string0 = setViewerParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverwrite ( ) { return overwrite_value ; }
void test5 ( ) throws Throwable { ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand ( ) ; concatParsedCommand0 . setOverwrite ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompress ( ) { return compress ; }
void test6 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; setViewerParsedCommand0 . getOutputPdfVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverwrite ( ) { return overwrite_value ; }
void test7 ( ) throws Throwable { MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( ( File ) null , ( PdfFile ) null , ( PdfFile ) null , false , false , 352 , 2 ) ; mixParsedCommand0 . setOutputPdfVersion ( 'b' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompress ( ) { return compress ; }
void test0 ( ) throws Throwable { SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand ( ) ; splitParsedCommand0 . setSplitType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSplitType ( ) { return splitType ; }
void test1 ( ) throws Throwable { SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand ( ) ; File file0 = new File ( "" , "" ) ; splitParsedCommand0 . setOutputFile ( file0 ) ; String string0 = splitParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test2 ( ) throws Throwable { SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand ( ) ; PdfFile pdfFile0 = splitParsedCommand0 . getInputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getInputFile ( ) { return inputFile ; }
void test3 ( ) throws Throwable { SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand ( ) ; Integer integer0 = new Integer ( 0 ) ; Long long0 = new Long ( ( long ) integer0 ) ; splitParsedCommand0 . setSplitSize ( long0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilesPrefix ( ) { return outputFilesPrefix ; }
void test4 ( ) throws Throwable { SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand ( ) ; String string0 = splitParsedCommand0 . getSplitType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSplitType ( ) { return splitType ; }
void test6 ( ) throws Throwable { SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand ( ) ; File file0 = splitParsedCommand0 . getOutputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getOutputFile ( ) { return outputFile ; }
void test7 ( ) throws Throwable { SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand ( ) ; Integer [ ] integerArray0 = splitParsedCommand0 . getSplitPageNumbers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Integer [ ] getSplitPageNumbers ( ) { return splitPageNumbers ; }
void test8 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; Integer [ ] integerArray0 = new Integer [ 7 ] ; Long long0 = new Long ( ( long ) ( - 8 ) ) ; SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand ( file0 , "" , ( PdfFile ) null , "" , integerArray0 , long0 , ( Integer ) null , false , false , ' ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSplitType ( ) { return splitType ; }
void test9 ( ) throws Throwable { SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand ( ) ; splitParsedCommand0 . setOutputFilesPrefix ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilesPrefix ( ) { return outputFilesPrefix ; }
void test10 ( ) throws Throwable { SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand ( ) ; String string0 = splitParsedCommand0 . getOutputFilesPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilesPrefix ( ) { return outputFilesPrefix ; }
void test12 ( ) throws Throwable { SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand ( ) ; Integer [ ] integerArray0 = new Integer [ 1 ] ; splitParsedCommand0 . setSplitPageNumbers ( integerArray0 ) ; String string0 = splitParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test13 ( ) throws Throwable { SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand ( ) ; Integer integer0 = new Integer ( 0 ) ; splitParsedCommand0 . setBookmarksLevel ( integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSplitType ( ) { return splitType ; }
void test14 ( ) throws Throwable { SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand ( ) ; PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; splitParsedCommand0 . setInputFile ( pdfFile0 ) ; String string0 = splitParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test15 ( ) throws Throwable { Integer [ ] integerArray0 = new Integer [ 5 ] ; Integer integer0 = new Integer ( 0 ) ; Long long0 = new Long ( ( long ) integer0 ) ; SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand ( ( File ) null , ( String ) null , ( PdfFile ) null , ( String ) null , integerArray0 , long0 , ( Integer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOverwrite ( ) { return overwrite_value ; }
void test0 ( ) throws Throwable { File file0 = new File ( "`6X9CT - T > XW + g / * z#R" , "`6X9CT - T > XW + g / * z#R" ) ; PdfFile pdfFile0 = new PdfFile ( ) ; pdfFile0 . setFile ( file0 ) ; MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( file0 , pdfFile0 , pdfFile0 , true , true , ( - 21 ) , ( - 1 ) , true , false , 'm' ) ; String string0 = mixParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test1 ( ) throws Throwable { MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( ) ; mixParsedCommand0 . getSecondInputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStep ( ) { return step ; }
void test2 ( ) throws Throwable { MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( ) ; int int0 = mixParsedCommand0 . getSecondStep ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStep ( ) { return step ; }
void test3 ( ) throws Throwable { MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( ) ; mixParsedCommand0 . setStep ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverseSecond ( ) { return reverseSecond ; }
void test4 ( ) throws Throwable { MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( ) ; boolean boolean0 = mixParsedCommand0 . isReverseSecond ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStep ( ) { return step ; }
void test5 ( ) throws Throwable { File file0 = new File ( "jva . v . name" , "jva . v . name" ) ; MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( file0 , ( PdfFile ) null , ( PdfFile ) null , false , true , ( - 167 ) , ( - 167 ) , false , false , '8' ) ; PdfFile pdfFile0 = new PdfFile ( "jva . v . name" , "jva . v . name" ) ; mixParsedCommand0 . setFirstInputFile ( pdfFile0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverseSecond ( ) { return reverseSecond ; }
void test6 ( ) throws Throwable { MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( ) ; mixParsedCommand0 . getFirstInputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverseFirst ( ) { return reverseFirst ; }
void test7 ( ) throws Throwable { File file0 = new File ( "`6X9CT - T > XW + g / * z#R" , "`6X9CT - T > XW + g / * z#R" ) ; PdfFile pdfFile0 = new PdfFile ( ) ; MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( file0 , pdfFile0 , pdfFile0 , true , true , ( - 21 ) , ( - 1 ) , true , false , 'm' ) ; mixParsedCommand0 . setOutputFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverseSecond ( ) { return reverseSecond ; }
void test8 ( ) throws Throwable { MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( ) ; boolean boolean0 = mixParsedCommand0 . isReverseFirst ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStep ( ) { return step ; }
void test9 ( ) throws Throwable { MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( ) ; int int0 = mixParsedCommand0 . getStep ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSecondStep ( ) { return secondStep ; }
void test10 ( ) throws Throwable { MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( ) ; mixParsedCommand0 . getOutputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverseFirst ( ) { return reverseFirst ; }
void test11 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ( File ) null , "@`1B%C" ) ; MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( ( File ) null , pdfFile0 , pdfFile0 , true , false , ( - 1970 ) , ( - 1970 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverseSecond ( ) { return reverseSecond ; }
void test12 ( ) throws Throwable { File file0 = new File ( "`6X9CT - T > XW + g / * z#R" , "`6X9CT - T > XW + g / * z#R" ) ; PdfFile pdfFile0 = new PdfFile ( ) ; MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( file0 , pdfFile0 , pdfFile0 , true , true , ( - 21 ) , ( - 1 ) , true , false , 'm' ) ; mixParsedCommand0 . setReverseSecond ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSecondStep ( ) { return secondStep ; }
void test13 ( ) throws Throwable { MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( ) ; mixParsedCommand0 . setSecondInputFile ( ( PdfFile ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSecondStep ( ) { return secondStep ; }
void test14 ( ) throws Throwable { File file0 = new File ( "jva . v . name" , "jva . v . name" ) ; MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( file0 , ( PdfFile ) null , ( PdfFile ) null , false , true , ( - 167 ) , ( - 167 ) , false , false , '8' ) ; mixParsedCommand0 . setSecondStep ( ( - 167 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSecondStep ( ) { return secondStep ; }
void test15 ( ) throws Throwable { MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( ) ; mixParsedCommand0 . setReverseFirst ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverseFirst ( ) { return reverseFirst ; }
void test16 ( ) throws Throwable { MixParsedCommand mixParsedCommand0 = new MixParsedCommand ( ) ; String string0 = mixParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReverseFirst ( ) { return reverseFirst ; }
void test0 ( ) throws Throwable { SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( ) ; slideShowParsedCommand0 . setInputFile ( ( PdfFile ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFullScreen ( ) { return fullScreen ; }
void test1 ( ) throws Throwable { File file0 = new File ( " / ! RRcD8V8b\"Eip" , "q` } O7 > z0@0u" ) ; PdfFile pdfFile0 = new PdfFile ( file0 , " / ! RRcD8V8b\"Eip" ) ; Transition transition0 = new Transition ( ) ; Transition [ ] transitionArray0 = new Transition [ 4 ] ; SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( file0 , pdfFile0 , false , transition0 , transitionArray0 , ( File ) null ) ; File file1 = slideShowParsedCommand0 . getOutputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFullScreen ( ) { return fullScreen ; }
void test2 ( ) throws Throwable { File file0 = new File ( "" ) ; Transition transition0 = new Transition ( ) ; Transition [ ] transitionArray0 = new Transition [ 2 ] ; SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( file0 , ( PdfFile ) null , false , transition0 , transitionArray0 , ( File ) null , false , false , ' [ ' ) ; slideShowParsedCommand0 . setFullScreen ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFullScreen ( ) { return fullScreen ; }
void test3 ( ) throws Throwable { SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( ) ; Transition [ ] transitionArray0 = new Transition [ 7 ] ; slideShowParsedCommand0 . setDefaultTransition ( transitionArray0 [ 0 ] ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFullScreen ( ) { return fullScreen ; }
void test4 ( ) throws Throwable { File file0 = new File ( " / ! RRcD8V8b\"Eip" , "q` } O7 > z0@0u" ) ; PdfFile pdfFile0 = new PdfFile ( file0 , " / ! RRcD8V8b\"Eip" ) ; Transition transition0 = new Transition ( ) ; Transition [ ] transitionArray0 = new Transition [ 4 ] ; SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( file0 , pdfFile0 , false , transition0 , transitionArray0 , ( File ) null ) ; slideShowParsedCommand0 . setInputXmlFile ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFullScreen ( ) { return fullScreen ; }
void test5 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; File file0 = pdfFile0 . getFile ( ) ; Transition transition0 = new Transition ( 0 , 54 , "" , 50 ) ; Transition [ ] transitionArray0 = new Transition [ 2 ] ; SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( ( File ) null , pdfFile0 , false , transition0 , transitionArray0 , ( File ) null , true , false , file0 , 'z' ) ; Transition [ ] transitionArray1 = slideShowParsedCommand0 . getTransitions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Transition [ ] getTransitions ( ) { return transitions ; }
void test6 ( ) throws Throwable { File file0 = new File ( "" ) ; Transition transition0 = new Transition ( ) ; Transition [ ] transitionArray0 = new Transition [ 2 ] ; SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( file0 , ( PdfFile ) null , false , transition0 , transitionArray0 , ( File ) null , false , false , ' [ ' ) ; slideShowParsedCommand0 . setOutputFilesPrefix ( "_7ede0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilesPrefix ( ) { return outputFilesPrefix ; }
void test7 ( ) throws Throwable { SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( ) ; Transition [ ] transitionArray0 = new Transition [ 7 ] ; slideShowParsedCommand0 . setTransitions ( transitionArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFullScreen ( ) { return fullScreen ; }
void test8 ( ) throws Throwable { SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( ) ; boolean boolean0 = slideShowParsedCommand0 . isFullScreen ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFullScreen ( ) { return fullScreen ; }
void test9 ( ) throws Throwable { SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( ) ; slideShowParsedCommand0 . getDefaultTransition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFullScreen ( ) { return fullScreen ; }
void test10 ( ) throws Throwable { SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( ) ; slideShowParsedCommand0 . getInputXmlFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFullScreen ( ) { return fullScreen ; }
void test11 ( ) throws Throwable { SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( ) ; slideShowParsedCommand0 . setOutputFile ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFullScreen ( ) { return fullScreen ; }
void test12 ( ) throws Throwable { File file0 = new File ( " / ! RRcD8V8b\"Eip" , "q` } O7 > z0@0u" ) ; PdfFile pdfFile0 = new PdfFile ( file0 , " / ! RRcD8V8b\"Eip" ) ; Transition transition0 = new Transition ( ) ; Transition [ ] transitionArray0 = new Transition [ 4 ] ; SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( file0 , pdfFile0 , false , transition0 , transitionArray0 , ( File ) null ) ; PdfFile pdfFile1 = slideShowParsedCommand0 . getInputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFullScreen ( ) { return fullScreen ; }
void test13 ( ) throws Throwable { SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( ) ; String string0 = slideShowParsedCommand0 . getOutputFilesPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFullScreen ( ) { return fullScreen ; }
void test14 ( ) throws Throwable { File file0 = new File ( "pdfversion" , "pdfversion" ) ; PdfFile pdfFile0 = new PdfFile ( ) ; Transition transition0 = new Transition ( 0 , 0 , "pdfversion" , ( - 1 ) ) ; Transition [ ] transitionArray0 = new Transition [ 5 ] ; SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( file0 , pdfFile0 , false , transition0 , transitionArray0 , file0 ) ; String string0 = slideShowParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test15 ( ) throws Throwable { SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand ( ) ; String string0 = slideShowParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test0 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( ) ; PageLabel [ ] pageLabelArray0 = new PageLabel [ 9 ] ; PageLabelsParsedCommand pageLabelsParsedCommand0 = new PageLabelsParsedCommand ( pdfFile0 , ( File ) null , pageLabelArray0 , true , true , 'I' ) ; PageLabel [ ] pageLabelArray1 = pageLabelsParsedCommand0 . getLabels ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PageLabel [ ] getLabels ( ) { return labels ; }
void test1 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; File file0 = pdfFile0 . getFile ( ) ; PageLabel [ ] pageLabelArray0 = new PageLabel [ 8 ] ; PageLabelsParsedCommand pageLabelsParsedCommand0 = new PageLabelsParsedCommand ( pdfFile0 , file0 , pageLabelArray0 , true , true , '_' ) ; pageLabelsParsedCommand0 . setInputFile ( ( PdfFile ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompress ( ) { return compress ; }
void test2 ( ) throws Throwable { PageLabelsParsedCommand pageLabelsParsedCommand0 = new PageLabelsParsedCommand ( ) ; PdfFile pdfFile0 = pageLabelsParsedCommand0 . getInputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getInputFile ( ) { return inputFile ; }
void test3 ( ) throws Throwable { PageLabelsParsedCommand pageLabelsParsedCommand0 = new PageLabelsParsedCommand ( ) ; File file0 = pageLabelsParsedCommand0 . getOutputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getOutputFile ( ) { return outputFile ; }
void test4 ( ) throws Throwable { PageLabel [ ] pageLabelArray0 = new PageLabel [ 1 ] ; PageLabelsParsedCommand pageLabelsParsedCommand0 = new PageLabelsParsedCommand ( ( PdfFile ) null , ( File ) null , pageLabelArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test5 ( ) throws Throwable { PageLabelsParsedCommand pageLabelsParsedCommand0 = new PageLabelsParsedCommand ( ) ; PageLabel [ ] pageLabelArray0 = new PageLabel [ 8 ] ; pageLabelsParsedCommand0 . setLabels ( pageLabelArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test6 ( ) throws Throwable { PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; File file0 = pdfFile0 . getFile ( ) ; PageLabel [ ] pageLabelArray0 = new PageLabel [ 8 ] ; PageLabelsParsedCommand pageLabelsParsedCommand0 = new PageLabelsParsedCommand ( pdfFile0 , file0 , pageLabelArray0 , true , true , '_' ) ; pageLabelsParsedCommand0 . setOutputFile ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test7 ( ) throws Throwable { PageLabelsParsedCommand pageLabelsParsedCommand0 = new PageLabelsParsedCommand ( ) ; String string0 = pageLabelsParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test8 ( ) throws Throwable { File file0 = new File ( "asF ? ^$ ! " ) ; PdfFile pdfFile0 = new PdfFile ( file0 , "asF ? ^$ ! " ) ; PageLabel [ ] pageLabelArray0 = new PageLabel [ 10 ] ; PageLabel pageLabel0 = new PageLabel ( ) ; pageLabelArray0 [ 0 ] = pageLabel0 ; PageLabelsParsedCommand pageLabelsParsedCommand0 = new PageLabelsParsedCommand ( pdfFile0 , file0 , pageLabelArray0 , true , true , 'g' ) ; String string0 = pageLabelsParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test0 ( ) throws Throwable { File file0 = new File ( "u ! %8`1 ! " ) ; SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; setViewerParsedCommand0 . setInputDirectory ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoPrintScaling ( ) { return noPrintScaling ; }
void test1 ( ) throws Throwable { File file0 = new File ( "layout" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 3 ] ; SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( file0 , 0 , 1650 , 50 , 50 , pdfFileArray0 , "layout" , false , false , false , false , false , false , false , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLayout ( ) { return layout ; }
void test2 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; boolean boolean0 = setViewerParsedCommand0 . isFitWindow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNfsmode ( ) { return nfsmode ; }
void test3 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDirection ( ) { return direction ; }
void test4 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; setViewerParsedCommand0 . setOutputFilesPrefix ( "' / $0fL~sBwSV ] ? b0Uv" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOutputFilesPrefix ( ) { return outputFilesPrefix ; }
void test5 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 2 ] ; SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( file0 , 0 , ( - 935 ) , ( - 935 ) , 540 , pdfFileArray0 , "nfsocontent" , true , true , false , false , true , false , false , file0 , true , true , ' , ' ) ; boolean boolean0 = setViewerParsedCommand0 . isHideMenu ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDirection ( ) { return direction ; }
void test6 ( ) throws Throwable { File file0 = new File ( "layout" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 3 ] ; SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( file0 , 0 , 1650 , 50 , 50 , pdfFileArray0 , "layout" , false , false , false , false , false , false , false , file0 ) ; setViewerParsedCommand0 . setMode ( 53 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMode ( ) { return mode ; }
void test7 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; boolean boolean0 = setViewerParsedCommand0 . isHideWindowUI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHideToolBar ( ) { return hideToolBar ; }
void test8 ( ) throws Throwable { File file0 = new File ( "layout" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 3 ] ; SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( file0 , 0 , 1650 , 50 , 50 , pdfFileArray0 , "layout" , false , false , false , false , false , false , false , file0 ) ; String string0 = setViewerParsedCommand0 . getOutputFilesPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLayout ( ) { return layout ; }
void test9 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLayout ( ) { return layout ; }
void test10 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; setViewerParsedCommand0 . setLayout ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLayout ( ) { return layout ; }
void test11 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; int int0 = setViewerParsedCommand0 . getMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoPrintScaling ( ) { return noPrintScaling ; }
void test12 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; boolean boolean0 = setViewerParsedCommand0 . isHideToolBar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHideWindowUI ( ) { return hideWindowUI ; }
void test13 ( ) throws Throwable { File file0 = new File ( "layout" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 3 ] ; SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( file0 , 0 , 1650 , 50 , 50 , pdfFileArray0 , "layout" , false , false , false , false , false , false , false , file0 ) ; setViewerParsedCommand0 . isNoPrintScaling ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNfsmode ( ) { return nfsmode ; }
void test14 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; boolean boolean0 = setViewerParsedCommand0 . isCenterWindow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDisplayDocTitle ( ) { return displayDocTitle ; }
void test15 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; int int0 = setViewerParsedCommand0 . getNfsmode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCenterWindow ( ) { return centerWindow ; }
void test16 ( ) throws Throwable { File file0 = new File ( "layout" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 3 ] ; SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( file0 , 0 , 1650 , 50 , 50 , pdfFileArray0 , "layout" , false , false , false , false , false , false , false , file0 ) ; PdfFile [ ] pdfFileArray1 = new PdfFile [ 13 ] ; setViewerParsedCommand0 . setInputFileList ( pdfFileArray1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLayout ( ) { return layout ; }
void test17 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; setViewerParsedCommand0 . getInputDirectory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLayout ( ) { return layout ; }
void test18 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; setViewerParsedCommand0 . setNfsmode ( 1669 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCenterWindow ( ) { return centerWindow ; }
void test19 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; boolean boolean0 = setViewerParsedCommand0 . isDisplayDocTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHideWindowUI ( ) { return hideWindowUI ; }
void test20 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; setViewerParsedCommand0 . getOutputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFitWindow ( ) { return fitWindow ; }
void test21 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; PdfFile pdfFile0 = new PdfFile ( "" , "" ) ; File file0 = pdfFile0 . getFile ( ) ; setViewerParsedCommand0 . setOutputFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLayout ( ) { return layout ; }
void test22 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; int int0 = setViewerParsedCommand0 . getLayout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMode ( ) { return mode ; }
void test23 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; setViewerParsedCommand0 . setFitWindow ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHideWindowUI ( ) { return hideWindowUI ; }
void test24 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; setViewerParsedCommand0 . getInputFileList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMode ( ) { return mode ; }
void test25 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; setViewerParsedCommand0 . setCenterWindow ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDisplayDocTitle ( ) { return displayDocTitle ; }
void test26 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; setViewerParsedCommand0 . setHideWindowUI ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCenterWindow ( ) { return centerWindow ; }
void test27 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; int int0 = setViewerParsedCommand0 . getDirection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCenterWindow ( ) { return centerWindow ; }
void test28 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; setViewerParsedCommand0 . setDisplayDocTitle ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHideMenu ( ) { return hideMenu ; }
void test29 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 2 ] ; SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( file0 , 0 , ( - 935 ) , ( - 935 ) , 540 , pdfFileArray0 , "nfsocontent" , true , true , false , false , true , false , false , file0 , true , true , ' , ' ) ; setViewerParsedCommand0 . setHideMenu ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLayout ( ) { return layout ; }
void test30 ( ) throws Throwable { SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( ) ; String string0 = setViewerParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommand ( ) { return COMMAND_UNPACK ; }
void test31 ( ) throws Throwable { File file0 = new File ( "layout" ) ; PdfFile [ ] pdfFileArray0 = new PdfFile [ 3 ] ; PdfFile pdfFile0 = new PdfFile ( "layout" , "layout" ) ; pdfFileArray0 [ 0 ] = pdfFile0 ; SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand ( file0 , 0 , 1650 , 50 , 50 , pdfFileArray0 , "layout" , false , false , false , false , false , false , false , file0 ) ; String string0 = setViewerParsedCommand0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNfsmode ( ) { return nfsmode ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 1 ] = "setviewer" ; CmdParseManager cmdParseManager0 = new CmdParseManager ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CmdParseManager ( ) { setInputArguments ( null ) ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 3 ] = "slideshow" ; CmdParseManager cmdParseManager0 = new CmdParseManager ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CmdParseManager ( ) { setInputArguments ( null ) ; }
void test0 ( ) throws Throwable { ConcatCmdHandler concatCmdHandler0 = new ConcatCmdHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHelpExamples ( ) { return SPLIT_EXAMPLES ; }
void test0 ( ) throws Throwable { DecryptCmdHandler decryptCmdHandler0 = new DecryptCmdHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHelpExamples ( ) { return SPLIT_EXAMPLES ; }
void test0 ( ) throws Throwable { UnpackCmdHandler unpackCmdHandler0 = new UnpackCmdHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDieOnParseError ( ) { return handler . getDieOnParseError ( ) ; }
void test0 ( ) throws Throwable { SplitCmdHandler splitCmdHandler0 = new SplitCmdHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHelpMessage ( ) { return SPLIT_HELP_TEXT ; }
void test0 ( ) throws Throwable { DocumentInfoCmdHandler documentInfoCmdHandler0 = new DocumentInfoCmdHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHelpMessage ( ) { return SPLIT_HELP_TEXT ; }
void test0 ( ) throws Throwable { SetViewerCmdHandler setViewerCmdHandler0 = new SetViewerCmdHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHelpMessage ( ) { return SPLIT_HELP_TEXT ; }
void test0 ( ) throws Throwable { DefaultCmdHandler defaultCmdHandler0 = new DefaultCmdHandler ( ) ; String string0 = defaultCmdHandler0 . getHelpExamples ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHelpExamples ( ) { return SPLIT_EXAMPLES ; }
void test1 ( ) throws Throwable { DefaultCmdHandler defaultCmdHandler0 = new DefaultCmdHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDieOnParseError ( ) { return handler . getDieOnParseError ( ) ; }
void test0 ( ) throws Throwable { RotateCmdHandler rotateCmdHandler0 = new RotateCmdHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHelpMessage ( ) { return SPLIT_HELP_TEXT ; }
void test0 ( ) throws Throwable { SlideShowCmdHandler slideShowCmdHandler0 = new SlideShowCmdHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHelpMessage ( ) { return SPLIT_HELP_TEXT ; }
void test0 ( ) throws Throwable { PageLabelsCmdHandler pageLabelsCmdHandler0 = new PageLabelsCmdHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHelpMessage ( ) { return SPLIT_HELP_TEXT ; }
void test0 ( ) throws Throwable { MixCmdHandler mixCmdHandler0 = new MixCmdHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHelpExamples ( ) { return SPLIT_EXAMPLES ; }
void test0 ( ) throws Throwable { EncryptCmdHandler encryptCmdHandler0 = new EncryptCmdHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommandDescription ( ) { return COMMAND_DESCRIPTION ; }
void test0 ( ) throws Throwable { RotateCmdHandler rotateCmdHandler0 = new RotateCmdHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDieOnParseError ( ) { return handler . getDieOnParseError ( ) ; }
void test0 ( ) throws Throwable { DecryptCmdValidator decryptCmdValidator0 = new DecryptCmdValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { FilenameComparator filenameComparator0 = new FilenameComparator ( ) ; File file0 = new File ( "Input files must not be null . " ) ; int int0 = filenameComparator0 . compare ( ( Object ) file0 , ( Object ) file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object obj1 , Object obj2 ) { try { return new Integer ( ( String ) obj1 ) . compareTo ( new Integer ( ( String ) obj2 ) ) ; } catch ( Exception e ) { return 0 ; } }
void test0 ( ) throws Throwable { PdfFilter pdfFilter0 = new PdfFilter ( ) ; boolean boolean0 = pdfFilter0 . accept ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test1 ( ) throws Throwable { File file0 = new File ( "Snu_6eu0@Vw1u" , "sgV - 46Xh5 . `V^" ) ; PdfFilter pdfFilter0 = new PdfFilter ( ) ; boolean boolean0 = pdfFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test2 ( ) throws Throwable { PdfFilter pdfFilter0 = new PdfFilter ( ) ; File file0 = new File ( "" ) ; File file1 = file0 . getAbsoluteFile ( ) ; boolean boolean0 = pdfFilter0 . accept ( file1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File f ) { if ( f . isDirectory ( ) ) { return true ; } else { return false ; } }
void test3 ( ) throws Throwable { PdfFilter pdfFilter0 = new PdfFilter ( ) ; File file0 = new File ( "" ) ; String string0 = pdfFilter0 . getExtension ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExtension ( File f ) { String ext = null ; String s = f . getName ( ) ; int i = s . lastIndexOf ( ' . ' ) ; if ( i > 0 & & i < s . length ( ) - 1 ) { ext = s . substring ( i + 1 ) . toLowerCase ( ) ; } return ext ; }
void test4 ( ) throws Throwable { PdfFilter pdfFilter0 = new PdfFilter ( ) ; File file0 = new File ( ( File ) null , " > 7VQw < . " ) ; String string0 = pdfFilter0 . getExtension ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExtension ( File f ) { String ext = null ; String s = f . getName ( ) ; int i = s . lastIndexOf ( ' . ' ) ; if ( i > 0 & & i < s . length ( ) - 1 ) { ext = s . substring ( i + 1 ) . toLowerCase ( ) ; } return ext ; }
void test0 ( ) throws Throwable { PageRotation [ ] pageRotationArray0 = ValidationUtility . getPagesRotation ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PageRotation [ ] getPagesRotation ( String inputString , boolean allowSinglePagesRotation ) throws ValidationException { ArrayList retVal = new ArrayList ( ) ; try { if ( inputString ! = null & & inputString . length ( ) > 0 ) { String [ ] rotateParams = inputString . split ( " , " ) ; for ( int i = 0 ; i < rotateParams . length ; i + + ) { String currentRotation = rotateParams [ i ] ; if ( currentRotation . length ( ) > 3 ) { String [ ] rotationParams = currentRotation . split ( " : " ) ; if ( rotationParams . length = = 2 ) { String pageNumber = rotationParams [ 0 ] . trim ( ) ; int degrees = Integer . parseInt ( rotationParams [ 1 ] ) % 360 ; / / must be a multiple of 90 if ( ( degrees % 90 ) ! = 0 ) { throw new ValidationException ( ValidationException . ERR_DEGREES_NOT_ALLOWED , new String [ ] { Integer . toString ( degrees ) } ) ; } / / rotate all if ( ALL_STRING . equals ( pageNumber ) ) { if ( ! retVal . isEmpty ( ) ) { LOG . warn ( "Page rotation for every page found , other rotations removed" ) ; retVal . clear ( ) ; } retVal . add ( new PageRotation ( PageRotation . NO_PAGE , degrees , PageRotation . ALL_PAGES ) ) ; break ; } else if ( ODD_STRING . equals ( pageNumber ) ) { if ( ! retVal . isEmpty ( ) ) { LOG . warn ( "Page rotation for odd pages found , other rotations removed" ) ; retVal . clear ( ) ; } retVal . add ( new PageRotation ( PageRotation . NO_PAGE , degrees , PageRotation . ODD_PAGES ) ) ; break ; } else if ( EVEN_STRING . equals ( pageNumber ) ) { if ( ! retVal . isEmpty ( ) ) { LOG . warn ( "Page rotation for even pages found , other rotations removed" ) ; retVal . clear ( ) ; } retVal . add ( new PageRotation ( PageRotation . NO_PAGE , degrees , PageRotation . EVEN_PAGES ) ) ; break ; } else { if ( allowSinglePagesRotation ) { retVal . add ( new PageRotation ( Integer . parseInt ( pageNumber ) , degrees ) ) ; } } } else { throw new ValidationException ( ValidationException . ERR_PARAM_ROTATION , new String [ ] { currentRotation } ) ; } } else { throw new ValidationException ( ValidationException . ERR_PARAM_ROTATION , new String [ ] { currentRotation } ) ; } } } } catch ( Exception e ) { throw new ValidationException ( ValidationException . ERR_WRONG_ROTATION , e ) ; } return ( PageRotation [ ] ) retVal . toArray ( new PageRotation [ retVal . size ( ) ] ) ; }
void test1 ( ) throws Throwable { PageRotation [ ] pageRotationArray0 = ValidationUtility . getPagesRotation ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PageRotation [ ] getPagesRotation ( String inputString , boolean allowSinglePagesRotation ) throws ValidationException { ArrayList retVal = new ArrayList ( ) ; try { if ( inputString ! = null & & inputString . length ( ) > 0 ) { String [ ] rotateParams = inputString . split ( " , " ) ; for ( int i = 0 ; i < rotateParams . length ; i + + ) { String currentRotation = rotateParams [ i ] ; if ( currentRotation . length ( ) > 3 ) { String [ ] rotationParams = currentRotation . split ( " : " ) ; if ( rotationParams . length = = 2 ) { String pageNumber = rotationParams [ 0 ] . trim ( ) ; int degrees = Integer . parseInt ( rotationParams [ 1 ] ) % 360 ; / / must be a multiple of 90 if ( ( degrees % 90 ) ! = 0 ) { throw new ValidationException ( ValidationException . ERR_DEGREES_NOT_ALLOWED , new String [ ] { Integer . toString ( degrees ) } ) ; } / / rotate all if ( ALL_STRING . equals ( pageNumber ) ) { if ( ! retVal . isEmpty ( ) ) { LOG . warn ( "Page rotation for every page found , other rotations removed" ) ; retVal . clear ( ) ; } retVal . add ( new PageRotation ( PageRotation . NO_PAGE , degrees , PageRotation . ALL_PAGES ) ) ; break ; } else if ( ODD_STRING . equals ( pageNumber ) ) { if ( ! retVal . isEmpty ( ) ) { LOG . warn ( "Page rotation for odd pages found , other rotations removed" ) ; retVal . clear ( ) ; } retVal . add ( new PageRotation ( PageRotation . NO_PAGE , degrees , PageRotation . ODD_PAGES ) ) ; break ; } else if ( EVEN_STRING . equals ( pageNumber ) ) { if ( ! retVal . isEmpty ( ) ) { LOG . warn ( "Page rotation for even pages found , other rotations removed" ) ; retVal . clear ( ) ; } retVal . add ( new PageRotation ( PageRotation . NO_PAGE , degrees , PageRotation . EVEN_PAGES ) ) ; break ; } else { if ( allowSinglePagesRotation ) { retVal . add ( new PageRotation ( Integer . parseInt ( pageNumber ) , degrees ) ) ; } } } else { throw new ValidationException ( ValidationException . ERR_PARAM_ROTATION , new String [ ] { currentRotation } ) ; } } else { throw new ValidationException ( ValidationException . ERR_PARAM_ROTATION , new String [ ] { currentRotation } ) ; } } } } catch ( Exception e ) { throw new ValidationException ( ValidationException . ERR_WRONG_ROTATION , e ) ; } return ( PageRotation [ ] ) retVal . toArray ( new PageRotation [ retVal . size ( ) ] ) ; }
void test3 ( ) throws Throwable { PageRotation [ ] pageRotationArray0 = ValidationUtility . getPagesRotation ( " , " , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PageRotation [ ] getPagesRotation ( String inputString , boolean allowSinglePagesRotation ) throws ValidationException { ArrayList retVal = new ArrayList ( ) ; try { if ( inputString ! = null & & inputString . length ( ) > 0 ) { String [ ] rotateParams = inputString . split ( " , " ) ; for ( int i = 0 ; i < rotateParams . length ; i + + ) { String currentRotation = rotateParams [ i ] ; if ( currentRotation . length ( ) > 3 ) { String [ ] rotationParams = currentRotation . split ( " : " ) ; if ( rotationParams . length = = 2 ) { String pageNumber = rotationParams [ 0 ] . trim ( ) ; int degrees = Integer . parseInt ( rotationParams [ 1 ] ) % 360 ; / / must be a multiple of 90 if ( ( degrees % 90 ) ! = 0 ) { throw new ValidationException ( ValidationException . ERR_DEGREES_NOT_ALLOWED , new String [ ] { Integer . toString ( degrees ) } ) ; } / / rotate all if ( ALL_STRING . equals ( pageNumber ) ) { if ( ! retVal . isEmpty ( ) ) { LOG . warn ( "Page rotation for every page found , other rotations removed" ) ; retVal . clear ( ) ; } retVal . add ( new PageRotation ( PageRotation . NO_PAGE , degrees , PageRotation . ALL_PAGES ) ) ; break ; } else if ( ODD_STRING . equals ( pageNumber ) ) { if ( ! retVal . isEmpty ( ) ) { LOG . warn ( "Page rotation for odd pages found , other rotations removed" ) ; retVal . clear ( ) ; } retVal . add ( new PageRotation ( PageRotation . NO_PAGE , degrees , PageRotation . ODD_PAGES ) ) ; break ; } else if ( EVEN_STRING . equals ( pageNumber ) ) { if ( ! retVal . isEmpty ( ) ) { LOG . warn ( "Page rotation for even pages found , other rotations removed" ) ; retVal . clear ( ) ; } retVal . add ( new PageRotation ( PageRotation . NO_PAGE , degrees , PageRotation . EVEN_PAGES ) ) ; break ; } else { if ( allowSinglePagesRotation ) { retVal . add ( new PageRotation ( Integer . parseInt ( pageNumber ) , degrees ) ) ; } } } else { throw new ValidationException ( ValidationException . ERR_PARAM_ROTATION , new String [ ] { currentRotation } ) ; } } else { throw new ValidationException ( ValidationException . ERR_PARAM_ROTATION , new String [ ] { currentRotation } ) ; } } } } catch ( Exception e ) { throw new ValidationException ( ValidationException . ERR_WRONG_ROTATION , e ) ; } return ( PageRotation [ ] ) retVal . toArray ( new PageRotation [ retVal . size ( ) ] ) ; }
void test6 ( ) throws Throwable { PageLabel pageLabel0 = ValidationUtility . getPageLabel ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PageLabel getPageLabel ( String inputString ) throws ValidationException { PageLabel retVal = null ; if ( inputString ! = null & & inputString . length ( ) > 0 ) { String [ ] values = inputString . split ( " : " ) ; if ( values . length > = 2 ) { try { retVal = new PageLabel ( ) ; retVal . setPageNumber ( Integer . parseInt ( values [ 0 ] ) ) ; if ( values . length = = 3 ) { retVal . setLogicalPageNumber ( Integer . parseInt ( values [ 2 ] ) ) ; } } catch ( Exception e ) { throw new ValidationException ( ValidationException . ERR_WRONG_PAGE_LABEL , new String [ ] { inputString } , e ) ; } / / style retVal . setStyle ( getPageLabelStyle ( values [ 1 ] ) ) ; } else { throw new ValidationException ( ValidationException . ERR_WRONG_PAGE_LABEL , new String [ ] { inputString } ) ; } } return retVal ; }
void test7 ( ) throws Throwable { PageLabel pageLabel0 = ValidationUtility . getPageLabel ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PageLabel getPageLabel ( String inputString ) throws ValidationException { PageLabel retVal = null ; if ( inputString ! = null & & inputString . length ( ) > 0 ) { String [ ] values = inputString . split ( " : " ) ; if ( values . length > = 2 ) { try { retVal = new PageLabel ( ) ; retVal . setPageNumber ( Integer . parseInt ( values [ 0 ] ) ) ; if ( values . length = = 3 ) { retVal . setLogicalPageNumber ( Integer . parseInt ( values [ 2 ] ) ) ; } } catch ( Exception e ) { throw new ValidationException ( ValidationException . ERR_WRONG_PAGE_LABEL , new String [ ] { inputString } , e ) ; } / / style retVal . setStyle ( getPageLabelStyle ( values [ 1 ] ) ) ; } else { throw new ValidationException ( ValidationException . ERR_WRONG_PAGE_LABEL , new String [ ] { inputString } ) ; } } return retVal ; }
void test10 ( ) throws Throwable { try { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test11 ( ) throws Throwable { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test12 ( ) throws Throwable { try { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test13 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test14 ( ) throws Throwable { File file0 = new File ( " ; ] $i } y2xk" ) ; try { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test15 ( ) throws Throwable { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test16 ( ) throws Throwable { String [ ] stringArray0 = new String [ 13 ] ; stringArray0 [ 0 ] = "" ; try { "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test17 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = " ? : ? : 0 ] 0" ; boolean boolean0 = ValidationUtility . isValidPageSelectionsArray ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValidPageSelectionsArray ( String [ ] selections ) { boolean retVal = true ; if ( ! ArrayUtils . isEmpty ( selections ) ) { Pattern pattern = Pattern . compile ( SELECTION_REGEXP , Pattern . CASE_INSENSITIVE ) ; for ( int i = 0 ; i < selections . length ; i + + ) { String currentSelection = selections [ i ] ; if ( ! ALL_STRING . equalsIgnoreCase ( currentSelection ) ) { if ( ! ( pattern . matcher ( currentSelection ) . matches ( ) ) ) { retVal = false ; break ; } } } } return retVal ; }
void test19 ( ) throws Throwable { Bounds bounds0 = new Bounds ( 10005 , 576 ) ; try { "<AssertPlaceHolder>" ; } "<FocalMethod>" Bounds ( ) { }
void test20 ( ) throws Throwable { Bounds bounds0 = new Bounds ( ( - 13 ) , ( - 13 ) ) ; try { "<AssertPlaceHolder>" ; } "<FocalMethod>" Bounds ( ) { }
void test21 ( ) throws Throwable { Bounds bounds0 = new Bounds ( 394 , 394 ) ; try { "<AssertPlaceHolder>" ; } "<FocalMethod>" Bounds ( ) { }
void test22 ( ) throws Throwable { Bounds bounds0 = new Bounds ( 394 , 394 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStart ( ) { return start ; }
void test23 ( ) throws Throwable { LinkedList < Bounds > linkedList0 = new LinkedList < Bounds > ( ) ; Bounds bounds0 = new Bounds ( ) ; linkedList0 . add ( bounds0 ) ; linkedList0 . add ( bounds0 ) ; try { "<AssertPlaceHolder>" ; } "<FocalMethod>" Bounds ( ) { }
void test24 ( ) throws Throwable { LinkedList < Bounds > linkedList0 = new LinkedList < Bounds > ( ) ; Bounds bounds0 = new Bounds ( ) ; Bounds bounds1 = new Bounds ( ( - 1711 ) , ( - 1711 ) ) ; linkedList0 . add ( bounds1 ) ; linkedList0 . add ( bounds0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Bounds ( ) { }
void test0 ( ) throws Throwable { LinkedList < PdfFile > linkedList0 = new LinkedList < PdfFile > ( ) ; PdfFile [ ] pdfFileArray0 = FileUtility . getPdfFiles ( ( Collection ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection getPdfFiles ( ) { ArrayList vals = new ArrayList ( values . size ( ) ) ; for ( Iterator itr = values . iterator ( ) ; itr . hasNext ( ) ; ) { vals . add ( getPdfFile ( ( String ) itr . next ( ) ) ) ; } return vals ; }
void test1 ( ) throws Throwable { jcmdline . dto . PdfFile pdfFile0 = new jcmdline . dto . PdfFile ( " | _4AJ" , " | _4AJ" ) ; PdfFile pdfFile1 = FileUtility . getPdfFile ( pdfFile0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return password ; }
void test2 ( ) throws Throwable { File file0 = new File ( "P" ) ; File file1 = FileUtility . generateTmpFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File generateTmpFile ( String file_path ) { File retVal = null ; boolean already_exist = true ; int enthropy = 0 ; String file_name = "" ; / / generates a random 4 char string StringBuffer randomString = new StringBuffer ( ) ; Random random = new Random ( ) ; for ( int i = 0 ; i < 5 ; i + + ) { char ascii = ( char ) ( ( random . nextInt ( 26 ) ) + 'A' ) ; randomString . append ( ascii ) ; } while ( already_exist ) { file_name = "PDFsamTMPbuffer" + randomString + Integer . toString ( + + enthropy ) + " . pdf" ; File tmp_file = new File ( file_path + File . separator + file_name ) ; if ( ! ( already_exist = tmp_file . exists ( ) ) ) { retVal = tmp_file ; } } return retVal ; }
void test3 ( ) throws Throwable { File file0 = FileUtility . generateTmpFile ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File generateTmpFile ( String file_path ) { File retVal = null ; boolean already_exist = true ; int enthropy = 0 ; String file_name = "" ; / / generates a random 4 char string StringBuffer randomString = new StringBuffer ( ) ; Random random = new Random ( ) ; for ( int i = 0 ; i < 5 ; i + + ) { char ascii = ( char ) ( ( random . nextInt ( 26 ) ) + 'A' ) ; randomString . append ( ascii ) ; } while ( already_exist ) { file_name = "PDFsamTMPbuffer" + randomString + Integer . toString ( + + enthropy ) + " . pdf" ; File tmp_file = new File ( file_path + File . separator + file_name ) ; if ( ! ( already_exist = tmp_file . exists ( ) ) ) { retVal = tmp_file ; } } return retVal ; }
void test4 ( ) throws Throwable { File file0 = new File ( ( File ) null , "" ) ; File file1 = file0 . getCanonicalFile ( ) ; File file2 = FileUtility . generateTmpFile ( file1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File generateTmpFile ( String file_path ) { File retVal = null ; boolean already_exist = true ; int enthropy = 0 ; String file_name = "" ; / / generates a random 4 char string StringBuffer randomString = new StringBuffer ( ) ; Random random = new Random ( ) ; for ( int i = 0 ; i < 5 ; i + + ) { char ascii = ( char ) ( ( random . nextInt ( 26 ) ) + 'A' ) ; randomString . append ( ascii ) ; } while ( already_exist ) { file_name = "PDFsamTMPbuffer" + randomString + Integer . toString ( + + enthropy ) + " . pdf" ; File tmp_file = new File ( file_path + File . separator + file_name ) ; if ( ! ( already_exist = tmp_file . exists ( ) ) ) { retVal = tmp_file ; } } return retVal ; }
void test7 ( ) throws Throwable { File file0 = new File ( ( File ) null , "" ) ; FileUtility . renameTemporaryFile ( file0 , ( File ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return hidden ; }
void test0 ( ) throws Throwable { int int0 = PdfUtility . getMaxBookmarksDepth ( ( InputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxBookmarksDepth ( InputStream bookmarks ) throws Exception { int retVal = 0 ; if ( bookmarks ! = null ) { SAXReader reader = new SAXReader ( ) ; org . dom4j . Document document = reader . read ( bookmarks ) ; StringBuffer buffer = new StringBuffer ( " / Bookmark / Title [ @Action = \"GoTo\" ] " ) ; List nodes = document . selectNodes ( buffer . toString ( ) ) ; while ( ( nodes ! = null & & nodes . size ( ) > 0 ) ) { retVal + + ; buffer . append ( " / Title [ @Action = \"GoTo\" ] " ) ; nodes = document . selectNodes ( buffer . toString ( ) ) ; } } return retVal ; }
void test1 ( ) throws Throwable { PrefixParser prefixParser0 = new PrefixParser ( " [ BOOKMARK_NAME ] [ BOOKMARK_NAME ] . pdf" , "B" ) ; FileNameRequest fileNameRequest0 = new FileNameRequest ( 19 , 19 , "" ) ; String string0 = prefixParser0 . generateFileName ( fileNameRequest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateFileName ( String page_number ) { String timestamp = new SimpleDateFormat ( "yyyyMMdd_HHmmssSS" ) . format ( new Date ( ) ) ; String retVal = "" ; if ( isComplexPrefix ( true ) ) { retVal = prefix ; retVal = retVal . replaceAll ( CURRENT_PAGE_REGX , page_number ) ; retVal = retVal . replaceAll ( BASE_NAME_REGX , fileName ) ; retVal = retVal . replaceAll ( TIMESTAMP_RGX , timestamp ) ; retVal + = " . pdf" ; } else { retVal = page_number + "_" + prefix + fileName + " . pdf" ; } return retVal ; }
void test2 ( ) throws Throwable { PrefixParser prefixParser0 = new PrefixParser ( " [ TIMESTAMP ] " , " [ TIMESTAMP ] " ) ; FileNameRequest fileNameRequest0 = new FileNameRequest ( ( Integer ) ( - 217 ) , ( Integer ) ( - 217 ) , " [ TIMESTAMP ] " ) ; String string0 = prefixParser0 . generateFileName ( fileNameRequest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateFileName ( String page_number ) { String timestamp = new SimpleDateFormat ( "yyyyMMdd_HHmmssSS" ) . format ( new Date ( ) ) ; String retVal = "" ; if ( isComplexPrefix ( true ) ) { retVal = prefix ; retVal = retVal . replaceAll ( CURRENT_PAGE_REGX , page_number ) ; retVal = retVal . replaceAll ( BASE_NAME_REGX , fileName ) ; retVal = retVal . replaceAll ( TIMESTAMP_RGX , timestamp ) ; retVal + = " . pdf" ; } else { retVal = page_number + "_" + prefix + fileName + " . pdf" ; } return retVal ; }
void test3 ( ) throws Throwable { PrefixParser prefixParser0 = new PrefixParser ( " [ CURRENTPAGE ] " , " [ CURRENTPAGE ] " ) ; String string0 = prefixParser0 . generateFileName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateFileName ( String page_number ) { String timestamp = new SimpleDateFormat ( "yyyyMMdd_HHmmssSS" ) . format ( new Date ( ) ) ; String retVal = "" ; if ( isComplexPrefix ( true ) ) { retVal = prefix ; retVal = retVal . replaceAll ( CURRENT_PAGE_REGX , page_number ) ; retVal = retVal . replaceAll ( BASE_NAME_REGX , fileName ) ; retVal = retVal . replaceAll ( TIMESTAMP_RGX , timestamp ) ; retVal + = " . pdf" ; } else { retVal = page_number + "_" + prefix + fileName + " . pdf" ; } return retVal ; }
void test5 ( ) throws Throwable { PrefixParser prefixParser0 = new PrefixParser ( " [ BASENAME ] " , " [ BASENAME ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateFileName ( String page_number ) { String timestamp = new SimpleDateFormat ( "yyyyMMdd_HHmmssSS" ) . format ( new Date ( ) ) ; String retVal = "" ; if ( isComplexPrefix ( true ) ) { retVal = prefix ; retVal = retVal . replaceAll ( CURRENT_PAGE_REGX , page_number ) ; retVal = retVal . replaceAll ( BASE_NAME_REGX , fileName ) ; retVal = retVal . replaceAll ( TIMESTAMP_RGX , timestamp ) ; retVal + = " . pdf" ; } else { retVal = page_number + "_" + prefix + fileName + " . pdf" ; } return retVal ; }
void test6 ( ) throws Throwable { PrefixParser prefixParser0 = new PrefixParser ( " [ FILENUMBER ] " , " [ FILENUMBER ] " ) ; String string0 = prefixParser0 . generateFileName ( ( FileNameRequest ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateFileName ( String page_number ) { String timestamp = new SimpleDateFormat ( "yyyyMMdd_HHmmssSS" ) . format ( new Date ( ) ) ; String retVal = "" ; if ( isComplexPrefix ( true ) ) { retVal = prefix ; retVal = retVal . replaceAll ( CURRENT_PAGE_REGX , page_number ) ; retVal = retVal . replaceAll ( BASE_NAME_REGX , fileName ) ; retVal = retVal . replaceAll ( TIMESTAMP_RGX , timestamp ) ; retVal + = " . pdf" ; } else { retVal = page_number + "_" + prefix + fileName + " . pdf" ; } return retVal ; }
void test8 ( ) throws Throwable { PrefixParser prefixParser0 = new PrefixParser ( " [ BOOKMRRKNAME ] [ BOOKMARK_NAME ] . pdf < ijY > uKLY <  + & ! nA ? P . pdf" , " [ BOOKMRRKNAME ] [ BOOKMARK_NAME ] . pdf < ijY > uKLY <  + & ! nA ? P . pdf" ) ; FileNameRequest fileNameRequest0 = new FileNameRequest ( ( Integer ) ( - 315 ) , ( Integer ) ( - 315 ) , ( String ) null ) ; String string0 = prefixParser0 . generateFileName ( fileNameRequest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateFileName ( String page_number ) { String timestamp = new SimpleDateFormat ( "yyyyMMdd_HHmmssSS" ) . format ( new Date ( ) ) ; String retVal = "" ; if ( isComplexPrefix ( true ) ) { retVal = prefix ; retVal = retVal . replaceAll ( CURRENT_PAGE_REGX , page_number ) ; retVal = retVal . replaceAll ( BASE_NAME_REGX , fileName ) ; retVal = retVal . replaceAll ( TIMESTAMP_RGX , timestamp ) ; retVal + = " . pdf" ; } else { retVal = page_number + "_" + prefix + fileName + " . pdf" ; } return retVal ; }
void test9 ( ) throws Throwable { Integer integer0 = new Integer ( 19 ) ; PrefixParser prefixParser0 = new PrefixParser ( " [ BOOKMARK_NAME ] [ BOOKMARK_NAME ] . pdf" , "B" ) ; FileNameRequest fileNameRequest0 = new FileNameRequest ( integer0 , integer0 , "B" ) ; String string0 = prefixParser0 . generateFileName ( fileNameRequest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateFileName ( String page_number ) { String timestamp = new SimpleDateFormat ( "yyyyMMdd_HHmmssSS" ) . format ( new Date ( ) ) ; String retVal = "" ; if ( isComplexPrefix ( true ) ) { retVal = prefix ; retVal = retVal . replaceAll ( CURRENT_PAGE_REGX , page_number ) ; retVal = retVal . replaceAll ( BASE_NAME_REGX , fileName ) ; retVal = retVal . replaceAll ( TIMESTAMP_RGX , timestamp ) ; retVal + = " . pdf" ; } else { retVal = page_number + "_" + prefix + fileName + " . pdf" ; } return retVal ; }
void test11 ( ) throws Throwable { PrefixParser prefixParser0 = new PrefixParser ( " [ CURREN8PAGE ] [ CURRENTPAGE ] . pdf" , " [ CURREN8PAGE ] [ CURRENTPAGE ] . pdf" ) ; FileNameRequest fileNameRequest0 = new FileNameRequest ( ( Integer ) null , ( Integer ) null , " [ CURREN8PAGE ] [ CURRENTPAGE ] . pdf" ) ; String string0 = prefixParser0 . generateFileName ( fileNameRequest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateFileName ( String page_number ) { String timestamp = new SimpleDateFormat ( "yyyyMMdd_HHmmssSS" ) . format ( new Date ( ) ) ; String retVal = "" ; if ( isComplexPrefix ( true ) ) { retVal = prefix ; retVal = retVal . replaceAll ( CURRENT_PAGE_REGX , page_number ) ; retVal = retVal . replaceAll ( BASE_NAME_REGX , fileName ) ; retVal = retVal . replaceAll ( TIMESTAMP_RGX , timestamp ) ; retVal + = " . pdf" ; } else { retVal = page_number + "_" + prefix + fileName + " . pdf" ; } return retVal ; }
void test12 ( ) throws Throwable { PrefixParser prefixParser0 = new PrefixParser ( " [ FILENUMBER ] " , " [ FILENUMBER ] " ) ; FileNameRequest fileNameRequest0 = new FileNameRequest ( ( Integer ) null , ( Integer ) null , " [ FILENUMBER ] " ) ; String string0 = prefixParser0 . generateFileName ( fileNameRequest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateFileName ( String page_number ) { String timestamp = new SimpleDateFormat ( "yyyyMMdd_HHmmssSS" ) . format ( new Date ( ) ) ; String retVal = "" ; if ( isComplexPrefix ( true ) ) { retVal = prefix ; retVal = retVal . replaceAll ( CURRENT_PAGE_REGX , page_number ) ; retVal = retVal . replaceAll ( BASE_NAME_REGX , fileName ) ; retVal = retVal . replaceAll ( TIMESTAMP_RGX , timestamp ) ; retVal + = " . pdf" ; } else { retVal = page_number + "_" + prefix + fileName + " . pdf" ; } return retVal ; }
void test0 ( ) throws Throwable { FileNameRequest fileNameRequest0 = new FileNameRequest ( ( Integer ) 0 , ( Integer ) 0 , "KkIl | 6F37eF@g ? x4 } " ) ; fileNameRequest0 . setBookmarkName ( "KkIl | 6F37eF@g ? x4 } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBookmarkName ( ) { return bookmarkName ; }
void test1 ( ) throws Throwable { FileNameRequest fileNameRequest0 = new FileNameRequest ( ( Integer ) 0 , ( Integer ) 0 , "KkIl | 6F37eF@g ? x4 } " ) ; Integer integer0 = fileNameRequest0 . getPageNumber ( ) ; fileNameRequest0 . setFileNumber ( integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setFileNumber ( Integer fileNumber ) { this . fileNumber = fileNumber ; }
void test2 ( ) throws Throwable { FileNameRequest fileNameRequest0 = new FileNameRequest ( 0 , 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBookmarkName ( ) { return bookmarkName ; }
void test3 ( ) throws Throwable { FileNameRequest fileNameRequest0 = new FileNameRequest ( ( Integer ) 0 , ( Integer ) 0 , "KkIl | 6F37eF@g ? x4 } " ) ; String string0 = fileNameRequest0 . getBookmarkName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBookmarkName ( ) { return bookmarkName ; }
void test4 ( ) throws Throwable { FileNameRequest fileNameRequest0 = new FileNameRequest ( ( Integer ) 0 , ( Integer ) 0 , "" ) ; Integer integer0 = fileNameRequest0 . getFileNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long longValue ( ) { if ( ! set ) { throw new RuntimeException ( Strings . get ( "LongParam . valueNotSet" , new Object [ ] { tag } ) ) ; } return Long . parseLong ( ( String ) values . get ( 0 ) ) ; }
void test5 ( ) throws Throwable { FileNameRequest fileNameRequest0 = new FileNameRequest ( ) ; boolean boolean0 = fileNameRequest0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( ( bookmarkName = = null | | bookmarkName . length ( ) = = 0 ) & & ( fileNumber = = null ) & & ( pageNumber = = null ) ) ; }
void test6 ( ) throws Throwable { FileNameRequest fileNameRequest0 = new FileNameRequest ( ( Integer ) 0 , ( Integer ) 0 , "" ) ; boolean boolean0 = fileNameRequest0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( ( bookmarkName = = null | | bookmarkName . length ( ) = = 0 ) & & ( fileNumber = = null ) & & ( pageNumber = = null ) ) ; }
void test7 ( ) throws Throwable { Integer integer0 = new Integer ( ( - 550 ) ) ; FileNameRequest fileNameRequest0 = new FileNameRequest ( integer0 , integer0 , "G ( B" ) ; boolean boolean0 = fileNameRequest0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( ( bookmarkName = = null | | bookmarkName . length ( ) = = 0 ) & & ( fileNumber = = null ) & & ( pageNumber = = null ) ) ; }
void test8 ( ) throws Throwable { FileNameRequest fileNameRequest0 = new FileNameRequest ( ( Integer ) 0 , ( Integer ) 0 , "" ) ; Integer integer0 = fileNameRequest0 . getPageNumber ( ) ; FileNameRequest fileNameRequest1 = new FileNameRequest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( ( bookmarkName = = null | | bookmarkName . length ( ) = = 0 ) & & ( fileNumber = = null ) & & ( pageNumber = = null ) ) ; }
