void test0 ( ) throws Throwable { Genome genome0 = new Genome ( ) ; Evaluator evaluator0 = genome0 . getEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Evaluator getEvaluator ( ) { return this . evaluator ; }
void test0 ( ) throws Throwable { Population population0 = new Population ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGenomeSize ( ) { return genomeSize ; }
void test1 ( ) throws Throwable { Population population0 = new Population ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Genome selectNextGenome ( ) { return selector . select ( this ) ; }
void test2 ( ) throws Throwable { Population population0 = new Population ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGenomeSize ( ) { return genomeSize ; }
void test3 ( ) throws Throwable { Population population0 = new Population ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGenomeSize ( ) { return genomeSize ; }
void test4 ( ) throws Throwable { Population population0 = new Population ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGenomeSize ( ) { return genomeSize ; }
void test5 ( ) throws Throwable { Population population0 = new Population ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGenomeSize ( ) { return genomeSize ; }
void test6 ( ) throws Throwable { Population population0 = new Population ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGenomeSize ( ) { return genomeSize ; }
void test7 ( ) throws Throwable { Population population0 = new Population ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGenomeSize ( ) { return genomeSize ; }
void test8 ( ) throws Throwable { Population population0 = new Population ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Genome get ( int i ) { return ( Genome ) genoms . get ( i - 1 ) ; }
void test9 ( ) throws Throwable { Population population0 = new Population ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGenomeSize ( ) { return genomeSize ; }
void test10 ( ) throws Throwable { Population population0 = new Population ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGenomeSize ( ) { return genomeSize ; }
void test1 ( ) throws Throwable { SectMutator sectMutator0 = new SectMutator ( ) ; VectorGenome vectorGenome0 = new VectorGenome ( ) ; int int0 = sectMutator0 . mutate ( ( Genome ) vectorGenome0 , ( - 0 . 009802801872989764 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int mutate ( Genome genome , double pmut ) { / * * @todo : Implement this ga . Mutator method * / / / throw new java . lang . UnsupportedOperationException ( "Method mutate ( ) not yet implemented . " ) ; double p ; VectorGenome vGenome = ( VectorGenome ) genome ; for ( int i = 0 ; i < vGenome . getGenesCount ( ) ; i + + ) { p = rnd . nextDouble ( ) ; if ( p < = pmut ) { vGenome . setGene ( i , allelesSet . allele ( ) ) ; } } return 0 ; }
void test0 ( ) throws Throwable { GAUtilities gAUtilities0 = new GAUtilities ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { boolean boolean0 = GAUtilities . flipCoin ( ( - 1 . 0 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean flipCoin ( double prob ) { return rnd . nextBoolean ( ) ; }
void test2 ( ) throws Throwable { int int0 = GAUtilities . nextPos ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nextPos ( int n ) { int nn = rnd . nextInt ( n * ( n + 1 ) / 2 ) + 1 ; / / System . out . print ( nn + " , " ) ; int i ; for ( i = 1 ; ( i < = n ) & & ( i * ( i - 1 ) / 2 < nn ) ; i + + ) { } return i - 1 ; }
void test3 ( ) throws Throwable { int int0 = GAUtilities . nextPos ( 1805 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nextPos ( int n ) { int nn = rnd . nextInt ( n * ( n + 1 ) / 2 ) + 1 ; / / System . out . print ( nn + " , " ) ; int i ; for ( i = 1 ; ( i < = n ) & & ( i * ( i - 1 ) / 2 < nn ) ; i + + ) { } return i - 1 ; }
void test2 ( ) throws Throwable { GAEnumAllelesSet gAEnumAllelesSet0 = new GAEnumAllelesSet ( ) ; Vector < String > vector0 = new Vector < String > ( ) ; gAEnumAllelesSet0 . setAlleles ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setAlleles ( Vector newAlleles ) { alleles = newAlleles ; }
void test0 ( ) throws Throwable { UniformCrossover uniformCrossover0 = new UniformCrossover ( ) ; Vector < VectorGenome > vector0 = new Vector < VectorGenome > ( 1794 , 0 ) ; VectorGenome vectorGenome0 = new VectorGenome ( ( Vector ) vector0 , ( Evaluator ) null ) ; vector0 . add ( vectorGenome0 ) ; VectorGenome vectorGenome1 = ( VectorGenome ) uniformCrossover0 . cross ( ( Genome ) vectorGenome0 , ( Genome ) vectorGenome0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGenesCount ( ) { return genes . size ( ) ; }
void test1 ( ) throws Throwable { UniformCrossover uniformCrossover0 = new UniformCrossover ( ) ; Vector < VectorGenome > vector0 = new Vector < VectorGenome > ( ) ; VectorGenome vectorGenome0 = new VectorGenome ( ) ; vector0 . add ( vectorGenome0 ) ; VectorGenome vectorGenome1 = new VectorGenome ( ( Vector ) vector0 , ( Evaluator ) null ) ; VectorGenome vectorGenome2 = ( VectorGenome ) uniformCrossover0 . cross ( ( Genome ) vectorGenome1 , ( Genome ) vectorGenome1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGenesCount ( ) { return genes . size ( ) ; }
void test0 ( ) throws Throwable { GAAlgorithm gAAlgorithm0 = new GAAlgorithm ( ) ; SexualCrossover sexualCrossover0 = gAAlgorithm0 . getCrossoverOperator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SexualCrossover getCrossoverOperator ( ) { return crossoverOperator ; }
void test1 ( ) throws Throwable { GAAlgorithm gAAlgorithm0 = new GAAlgorithm ( ) ; Evaluator evaluator0 = gAAlgorithm0 . getEvaluator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Evaluator getEvaluator ( ) { return this . evaluator ; }
void test2 ( ) throws Throwable { GAAlgorithm gAAlgorithm0 = new GAAlgorithm ( ) ; gAAlgorithm0 . evolve ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean done ( ) { return true ; }
void test3 ( ) throws Throwable { GAAlgorithm gAAlgorithm0 = new GAAlgorithm ( ) ; gAAlgorithm0 . step ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean done ( ) { return true ; }
void test4 ( ) throws Throwable { GAAlgorithm gAAlgorithm0 = new GAAlgorithm ( ) ; gAAlgorithm0 . setMutator ( ( Mutator ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean done ( ) { return true ; }
void test6 ( ) throws Throwable { GAAlgorithm gAAlgorithm0 = new GAAlgorithm ( ) ; Mutator mutator0 = gAAlgorithm0 . getMutator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Mutator getMutator ( ) { return mutator ; }
void test7 ( ) throws Throwable { GAAlgorithm gAAlgorithm0 = new GAAlgorithm ( ) ; gAAlgorithm0 . setCrossoverOperator ( ( SexualCrossover ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean done ( ) { return true ; }
void test8 ( ) throws Throwable { GAAlgorithm gAAlgorithm0 = new GAAlgorithm ( ) ; Selector selector0 = gAAlgorithm0 . getSelector ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Selector getSelector ( ) { return selector ; }
