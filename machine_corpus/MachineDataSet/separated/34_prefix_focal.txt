void test0 ( ) throws Throwable { SBMLGraphReader2 sBMLGraphReader2_0 = new SBMLGraphReader2 ( "kXK { v ? P0# ; 3 < _vlt1A" ) ; SBMLGraphReader2 . SBMLError sBMLGraphReader2_SBMLError0 = sBMLGraphReader2_0 . new SBMLError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SBMLGraphReader2 ( String filename ) { super ( filename ) ; }
void test1 ( ) throws Throwable { SBMLGraphReader2 sBMLGraphReader2_0 = new SBMLGraphReader2 ( "D" ) ; ArrayList < Integer > arrayList0 = new ArrayList < Integer > ( ) ; sBMLGraphReader2_0 . nodeIds = arrayList0 ; StraightenSelectedEdgesAction straightenSelectedEdgesAction0 = new StraightenSelectedEdgesAction ( ) ; Integer integer0 = straightenSelectedEdgesAction0 . getPrefferedIndex ( ) ; arrayList0 . add ( integer0 ) ; int [ ] intArray0 = sBMLGraphReader2_0 . getNodeIndicesArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getNodeIndicesArray ( ) { int [ ] nodes = new int [ nodeIds . size ( ) ] ; for ( int i = 0 ; i < nodes . length ; i + + ) nodes [ i ] = nodeIds . get ( i ) . intValue ( ) ; return nodes ; }
void test2 ( ) throws Throwable { SBMLGraphReader2 sBMLGraphReader2_0 = new SBMLGraphReader2 ( "D" ) ; ArrayList < Integer > arrayList0 = new ArrayList < Integer > ( ) ; StraightenSelectedEdgesAction straightenSelectedEdgesAction0 = new StraightenSelectedEdgesAction ( ) ; Integer integer0 = straightenSelectedEdgesAction0 . getPrefferedIndex ( ) ; sBMLGraphReader2_0 . edgeIds = arrayList0 ; arrayList0 . add ( integer0 ) ; int [ ] intArray0 = sBMLGraphReader2_0 . getEdgeIndicesArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getEdgeIndicesArray ( ) { int [ ] edges = new int [ edgeIds . size ( ) ] ; for ( int i = 0 ; i < edges . length ; i + + ) edges [ i ] = edgeIds . get ( i ) . intValue ( ) ; return edges ; }
void test0 ( ) throws Throwable { SBMLVisualStyleFactory sBMLVisualStyleFactory0 = new SBMLVisualStyleFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SBMLFilter sBMLFilter0 = new SBMLFilter ( ) ; SBMLGraphReader sBMLGraphReader0 = ( SBMLGraphReader ) sBMLFilter0 . getReader ( " < } xmlsbml" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GraphReader getReader ( String fileName ) { System . out . println ( "Getting SBML reader . . . " ) ; try { / / Test if libsbml library is available System . loadLibrary ( "sbmlj" ) ; / * Extra check to be sure we have access to libSBML : * / Class . forName ( "org . sbml . libsbml . libsbml" ) ; / / Use the libSBML based parser System . out . println ( " . . . using 'libsbml parser'" ) ; return new SBMLGraphReader2 ( fileName ) ; } catch ( Exception e ) { / / If any error occurs use the classic SBML Reader return new SBMLGraphReader ( fileName ) ; } }
void test1 ( ) throws Throwable { SBMLFilter sBMLFilter0 = new SBMLFilter ( ) ; boolean boolean0 = sBMLFilter0 . accept ( " < } xmlsbml" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File file ) { String fileName = file . getName ( ) ; boolean firstPass = false ; / / First test : file must end with one of the registered file extensions . for ( int i = 0 ; i < fileExtensions . length ; i + + ) { if ( fileName . endsWith ( fileExtensions [ i ] ) ) { firstPass = true ; } } if ( firstPass ) { / / Second test : file header must contain the biopax declaration try { String header = getHeader ( file ) ; if ( header . indexOf ( "www . sbml . org" ) > 0 ) { return true ; } } catch ( IOException e ) { } } return false ; }
void test2 ( ) throws Throwable { SBMLFilter sBMLFilter0 = new SBMLFilter ( ) ; boolean boolean0 = sBMLFilter0 . accept ( "rl . dozwnloam" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File file ) { String fileName = file . getName ( ) ; boolean firstPass = false ; / / First test : file must end with one of the registered file extensions . for ( int i = 0 ; i < fileExtensions . length ; i + + ) { if ( fileName . endsWith ( fileExtensions [ i ] ) ) { firstPass = true ; } } if ( firstPass ) { / / Second test : file header must contain the biopax declaration try { String header = getHeader ( file ) ; if ( header . indexOf ( "www . sbml . org" ) > 0 ) { return true ; } } catch ( IOException e ) { } } return false ; }
void test0 ( ) throws Throwable { AddToClasspath addToClasspath0 = new AddToClasspath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { SBMLGraphReader sBMLGraphReader0 = new SBMLGraphReader ( "" ) ; ArrayList < Integer > arrayList0 = new ArrayList < Integer > ( ) ; sBMLGraphReader0 . nodeIds = arrayList0 ; int [ ] intArray0 = sBMLGraphReader0 . getNodeIndicesArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getNodeIndicesArray ( ) { int [ ] nodes = new int [ nodeIds . size ( ) ] ; for ( int i = 0 ; i < nodes . length ; i + + ) nodes [ i ] = nodeIds . get ( i ) . intValue ( ) ; return nodes ; }
void test4 ( ) throws Throwable { SBMLGraphReader sBMLGraphReader0 = new SBMLGraphReader ( "t" ) ; ArrayList < Integer > arrayList0 = new ArrayList < Integer > ( ) ; Integer integer0 = JLayeredPane . PALETTE_LAYER ; arrayList0 . add ( integer0 ) ; sBMLGraphReader0 . edgeIds = arrayList0 ; int [ ] intArray0 = sBMLGraphReader0 . getEdgeIndicesArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getEdgeIndicesArray ( ) { int [ ] edges = new int [ edgeIds . size ( ) ] ; for ( int i = 0 ; i < edges . length ; i + + ) edges [ i ] = edgeIds . get ( i ) . intValue ( ) ; return edges ; }
