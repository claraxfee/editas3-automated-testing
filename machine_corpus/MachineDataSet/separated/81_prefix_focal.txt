void test0 ( ) throws Throwable { CharServer charServer0 = new CharServer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CharServer ( ) { }
void test1 ( ) throws Throwable { MapServerConnection mapServerConnection0 = new MapServerConnection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { TXTMapPersistence tXTMapPersistence0 = new TXTMapPersistence ( ) ; tXTMapPersistence0 . setFileDB ( "db / map_index . txt" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileDB ( ) { return fileDB ; }
void test1 ( ) throws Throwable { TXTMapPersistence tXTMapPersistence0 = new TXTMapPersistence ( ) ; String string0 = tXTMapPersistence0 . getFileDB ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileDB ( ) { return fileDB ; }
void test0 ( ) throws Throwable { XMLMapPersistence xMLMapPersistence0 = new XMLMapPersistence ( ) ; xMLMapPersistence0 . setFileDB ( "db / map_index . xml" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileDB ( ) { return fileDB ; }
void test1 ( ) throws Throwable { XMLMapPersistence xMLMapPersistence0 = new XMLMapPersistence ( ) ; String string0 = xMLMapPersistence0 . getFileDB ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileDB ( ) { return fileDB ; }
void test4 ( ) throws Throwable { FastMap < Integer , String > fastMap0 = new FastMap < Integer , String > ( ) ; Integer integer0 = new Integer ( 100 ) ; fastMap0 . put ( integer0 , "u | ua" ) ; FastMap < String , Integer > fastMap1 = MapIndex . makeIndex ( fastMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FastMap < String , Integer > makeIndex ( FastMap < Integer , String > data ) { FastMap < String , Integer > index = new FastMap < String , Integer > ( data . size ( ) ) ; for ( Entry < Integer , String > e : data . entrySet ( ) ) { index . put ( e . getValue ( ) , e . getKey ( ) ) ; } return index ; }
void test0 ( ) throws Throwable { Subnet subnet0 = new Subnet ( "" , "" , "" ) ; subnet0 . setPersistenceMethod ( ( PersistenteData < FastTable < Subnet > > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMapIP ( ) { return mapIP ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; int int0 = Subnet . hashIP ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashIP ( byte addr [ ] ) { int address = addr [ 3 ] & 0xFF ; address | = ( ( addr [ 2 ] < < 8 ) & 0xFF00 ) ; address | = ( ( addr [ 1 ] < < 16 ) & 0xFF0000 ) ; address | = ( ( addr [ 0 ] < < 24 ) & 0xFF000000 ) ; return address ; }
void test3 ( ) throws Throwable { Subnet subnet0 = new Subnet ( "" , "" , "" ) ; String string0 = subnet0 . getMapIP ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMapIP ( ) { return mapIP ; }
void test4 ( ) throws Throwable { Subnet subnet0 = new Subnet ( "" , "" , "" ) ; subnet0 . setCharIP ( "KkJwS | Q~q ( & N < ] F0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . subNet + " : " + this . charIP + " : " + this . mapIP ; }
void test5 ( ) throws Throwable { Subnet subnet0 = new Subnet ( "" , "" , "" ) ; String string0 = subnet0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . subNet + " : " + this . charIP + " : " + this . mapIP ; }
void test7 ( ) throws Throwable { Subnet subnet0 = new Subnet ( "" , "" , "" ) ; PersistenteData < FastTable < Subnet > > persistenteData0 = subnet0 . getPersistenceMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PersistenteData < FastTable < Subnet > > getPersistenceMethod ( ) { return persistenceMethod ; }
void test8 ( ) throws Throwable { Subnet subnet0 = new Subnet ( "" , "" , "" ) ; subnet0 . setMapIP ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharIP ( ) { return charIP ; }
void test9 ( ) throws Throwable { Subnet subnet0 = new Subnet ( "" , "" , "" ) ; subnet0 . setSubNet ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharIP ( ) { return charIP ; }
void test10 ( ) throws Throwable { Subnet subnet0 = new Subnet ( "" , "" , "" ) ; String string0 = subnet0 . getCharIP ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharIP ( ) { return charIP ; }
void test12 ( ) throws Throwable { Subnet subnet0 = new Subnet ( "" , "" , "" ) ; String string0 = subnet0 . getSubNet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSubNet ( ) { return subNet ; }
void test1 ( ) throws Throwable { XMLSubnet xMLSubnet0 = new XMLSubnet ( ) ; xMLSubnet0 . setFileConfig ( "conf / subnet_athena . xml" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileConfig ( ) { return fileConfig ; }
void test2 ( ) throws Throwable { XMLSubnet xMLSubnet0 = new XMLSubnet ( ) ; String string0 = xMLSubnet0 . getFileConfig ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileConfig ( ) { return fileConfig ; }
void test1 ( ) throws Throwable { TXTSubnet tXTSubnet0 = new TXTSubnet ( ) ; String string0 = tXTSubnet0 . getFileConfig ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileConfig ( ) { return fileConfig ; }
void test2 ( ) throws Throwable { TXTSubnet tXTSubnet0 = new TXTSubnet ( ) ; tXTSubnet0 . load ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileConfig ( ) { return fileConfig ; }
void test1 ( ) throws Throwable { TXTCharConfig tXTCharConfig0 = new TXTCharConfig ( ) ; String string0 = tXTCharConfig0 . getFileConfig ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileConfig ( ) { return fileConfig ; }
void test2 ( ) throws Throwable { TXTCharConfig tXTCharConfig0 = new TXTCharConfig ( ) ; tXTCharConfig0 . save ( ( CharConfig ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileConfig ( ) { return fileConfig ; }
void test3 ( ) throws Throwable { TXTCharConfig tXTCharConfig0 = new TXTCharConfig ( ) ; tXTCharConfig0 . load ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileConfig ( ) { return fileConfig ; }
void test2 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setFameListSizeBlacksmith ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFameListSizeBlacksmith ( ) { return fameListSizeBlacksmith ; }
void test4 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; String string0 = charConfig0 . getOnlineTxtFilename ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOnlineTxtFilename ( ) { return onlineTxtFilename ; }
void test6 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; int int0 = charConfig0 . getLoginPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoginPort ( ) { return loginPort ; }
void test7 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; boolean boolean0 = charConfig0 . isEmailCreation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmailCreation ( ) { return emailCreation ; }
void test9 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setGmAllowLevel ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGmAllowLevel ( ) { return gmAllowLevel ; }
void test10 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setServerName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmailCreation ( ) { return emailCreation ; }
void test13 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setLoginPort ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoginPort ( ) { return loginPort ; }
void test18 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; int int0 = charConfig0 . getOnlineDisplayOption ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOnlineDisplayOption ( ) { return onlineDisplayOption ; }
void test19 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setStartPoint ( ( Point ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharDelLevel ( ) { return charDelLevel ; }
void test20 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setStartWeapon ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStartWeapon ( ) { return startWeapon ; }
void test21 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; String string0 = charConfig0 . getUserid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserid ( ) { return userid ; }
void test24 ( ) throws Throwable { PersistenteData < CharConfig > persistenteData0 = CharConfig . getPersistenceMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PersistenteData < FastTable < Subnet > > getPersistenceMethod ( ) { return persistenceMethod ; }
void test25 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setBindIp ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharNewDisplay ( ) { return charNewDisplay ; }
void test26 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; int int0 = charConfig0 . getOnlineSortingOption ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOnlineSortingOption ( ) { return onlineSortingOption ; }
void test27 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; String string0 = charConfig0 . getServerName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerName ( ) { return serverName ; }
void test28 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; boolean boolean0 = charConfig0 . isStdoutWithAnsisequence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStdoutWithAnsisequence ( ) { return stdoutWithAnsisequence ; }
void test32 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setEmailCreation ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmailCreation ( ) { return emailCreation ; }
void test33 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setHotkeysTXT ( " ! $t2m" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFameListSizeTaekwon ( ) { return fameListSizeTaekwon ; }
void test35 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; boolean boolean0 = charConfig0 . isSaveLog ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSaveLog ( ) { return saveLog ; }
void test36 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; int int0 = charConfig0 . getFameListSizeTaekwon ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFameListSizeTaekwon ( ) { return fameListSizeTaekwon ; }
void test37 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; int int0 = charConfig0 . getGuildExpRate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGuildExpRate ( ) { return guildExpRate ; }
void test41 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; boolean boolean0 = charConfig0 . isNameIgnoringCase ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameIgnoringCase ( ) { return nameIgnoringCase ; }
void test43 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setGuildExpRate ( 1957 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGuildExpRate ( ) { return guildExpRate ; }
void test44 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; int int0 = charConfig0 . getAutosaveInterval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAutosaveInterval ( ) { return autosaveInterval ; }
void test45 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; boolean boolean0 = charConfig0 . isLogChar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLogChar ( ) { return logChar ; }
void test47 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; boolean boolean0 = charConfig0 . isCharNew ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCharNew ( ) { return charNew ; }
void test48 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setUserid ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharLogFilename ( ) { return charLogFilename ; }
void test49 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setPasswd ( "Q > ) OF" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxConnectUser ( ) { return maxConnectUser ; }
void test50 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; int int0 = charConfig0 . getFameListSizeAlchemist ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFameListSizeAlchemist ( ) { return fameListSizeAlchemist ; }
void test51 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setCharsPerAccount ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharsPerAccount ( ) { return charsPerAccount ; }
void test52 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; int int0 = charConfig0 . getFameListSizeBlacksmith ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFameListSizeBlacksmith ( ) { return fameListSizeBlacksmith ; }
void test53 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; String string0 = charConfig0 . getCharNameLetters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCharNameLetters ( ) { return charNameLetters ; }
void test54 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; String string0 = charConfig0 . getBindIp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBindIp ( ) { return bindIp ; }
void test55 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setNameIgnoringCase ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNameIgnoringCase ( ) { return nameIgnoringCase ; }
void test58 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; int int0 = charConfig0 . getCharPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharPort ( ) { return charPort ; }
void test67 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setLoginIp ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWispServerName ( ) { return wispServerName ; }
void test68 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; int int0 = charConfig0 . getMaxConnectUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxConnectUser ( ) { return maxConnectUser ; }
void test69 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; int int0 = charConfig0 . getStartWeapon ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStartWeapon ( ) { return startWeapon ; }
void test70 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; boolean boolean0 = charConfig0 . isConsole ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test71 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setWispServerName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLoginIp ( ) { return loginIp ; }
void test72 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setCharNew ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCharNew ( ) { return charNew ; }
void test73 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; int int0 = charConfig0 . getGmAllowLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGmAllowLevel ( ) { return gmAllowLevel ; }
void test75 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setConsole ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test76 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setCharNameOption ( 1103 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharNameOption ( ) { return charNameOption ; }
void test77 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; CharConfig . setCharConfig ( charConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStartZeny ( ) { return startZeny ; }
void test78 ( ) throws Throwable { CharConfig charConfig0 = CharConfig . getCharConfig ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFameListSizeAlchemist ( ) { return fameListSizeAlchemist ; }
void test79 ( ) throws Throwable { CharConfig charConfig0 = CharConfig . getCharConfig ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFameListSizeTaekwon ( ) { return fameListSizeTaekwon ; }
void test80 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setMsgSilent ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMsgSilent ( ) { return msgSilent ; }
void test81 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setStartZeny ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStartZeny ( ) { return startZeny ; }
void test82 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; String string0 = charConfig0 . getOnlineHtmlFilename ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOnlineHtmlFilename ( ) { return onlineHtmlFilename ; }
void test83 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; String string0 = charConfig0 . getHotkeysTXT ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHotkeysTXT ( ) { return hotkeysTXT ; }
void test84 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setStartArmor ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStartArmor ( ) { return startArmor ; }
void test85 ( ) throws Throwable { CharConfig charConfig0 = CharConfig . getCharConfig ( ) ; String string0 = charConfig0 . getUnknownCharName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUnknownCharName ( ) { return unknownCharName ; }
void test86 ( ) throws Throwable { CharConfig charConfig0 = CharConfig . getCharConfig ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharNameOption ( ) { return charNameOption ; }
void test87 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; String string0 = charConfig0 . getFriendsTXT ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFriendsTXT ( ) { return friendsTXT ; }
void test88 ( ) throws Throwable { CharConfig charConfig0 = CharConfig . getCharConfig ( ) ; String string0 = charConfig0 . getPasswd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPasswd ( ) { return passwd ; }
void test89 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; Point point0 = charConfig0 . getStartPoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Point getStartPoint ( ) { return startPoint ; }
void test90 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setFameListSizeSmith ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFameListSizeSmith ( ) { return fameListSizeSmith ; }
void test91 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; int int0 = charConfig0 . getCharNewDisplay ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharNewDisplay ( ) { return charNewDisplay ; }
void test92 ( ) throws Throwable { CharConfig charConfig0 = CharConfig . getCharConfig ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOnlineRefreshHtml ( ) { return onlineRefreshHtml ; }
void test93 ( ) throws Throwable { CharConfig charConfig0 = CharConfig . getCharConfig ( ) ; charConfig0 . setCharLogFilename ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStartArmor ( ) { return startArmor ; }
void test94 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; int int0 = charConfig0 . getFameListSizeSmith ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFameListSizeSmith ( ) { return fameListSizeSmith ; }
void test96 ( ) throws Throwable { CharConfig charConfig0 = CharConfig . getCharConfig ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharPort ( ) { return charPort ; }
void test97 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setTimestampFormat ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharNameOption ( ) { return charNameOption ; }
void test98 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; charConfig0 . setCharDelLevel ( 1957 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharDelLevel ( ) { return charDelLevel ; }
void test99 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; int int0 = charConfig0 . getMsgSilent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMsgSilent ( ) { return msgSilent ; }
void test100 ( ) throws Throwable { CharConfig charConfig0 = CharConfig . getCharConfig ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharNewDisplay ( ) { return charNewDisplay ; }
void test101 ( ) throws Throwable { CharConfig charConfig0 = new CharConfig ( ) ; int int0 = charConfig0 . getOnlineGmDisplayMinLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOnlineGmDisplayMinLevel ( ) { return onlineGmDisplayMinLevel ; }
void test1 ( ) throws Throwable { XMLCharConfig xMLCharConfig0 = new XMLCharConfig ( ) ; xMLCharConfig0 . setFileConfig ( "conf / char_athena . xml" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileConfig ( ) { return fileConfig ; }
void test2 ( ) throws Throwable { XMLCharConfig xMLCharConfig0 = new XMLCharConfig ( ) ; String string0 = xMLCharConfig0 . getFileConfig ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileConfig ( ) { return fileConfig ; }
void test0 ( ) throws Throwable { Main main0 = new Main ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; int int0 = loginAthena0 . getAllowed_regs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test1 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setUse_MD5_passwords ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUse_MD5_passwords ( ) { return use_MD5_passwords ; }
void test2 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setAdmin_allowed_host ( "_OWs" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test3 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setDate_format ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDynamic_pass_failure_ban ( ) { return dynamic_pass_failure_ban ; }
void test4 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDynamic_pass_failure_ban ( ) { return dynamic_pass_failure_ban ; }
void test5 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . getAdmin_pass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDynamic_pass_failure_ban ( ) { return dynamic_pass_failure_ban ; }
void test6 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setUse_dnsbl ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test7 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; boolean boolean0 = loginAthena0 . isDynamic_pass_failure_ban ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIpban ( ) { return ipban ; }
void test8 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; FastTable < String > fastTable0 = loginAthena0 . getBanIps ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDynamic_pass_failure_ban ( ) { return dynamic_pass_failure_ban ; }
void test9 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . getDate_format ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test10 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setDynamic_pass_failure_ban ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test11 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setMin_level_to_connect ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDynamic_pass_failure_ban ( ) { return dynamic_pass_failure_ban ; }
void test12 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . isUse_md5_passwds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIpban ( ) { return ipban ; }
void test13 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . getNew_account_flag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDynamic_pass_failure_ban ( ) { return dynamic_pass_failure_ban ; }
void test14 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . getDnsbl_servs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDynamic_pass_failure_ban ( ) { return dynamic_pass_failure_ban ; }
void test15 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . getTimestamp_format ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test16 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setTimestamp_format ( "_OWs" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test17 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setBanIps ( ( FastTable < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIpban ( ) { return ipban ; }
void test18 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . isStdout_with_ansisequence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDynamic_pass_failure_ban ( ) { return dynamic_pass_failure_ban ; }
void test19 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setIpban_cleanup_interval ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBind_ip_str ( ) { return bind_ip_str ; }
void test20 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; int int0 = loginAthena0 . getStart_limited_time ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDynamic_pass_failure_ban ( ) { return dynamic_pass_failure_ban ; }
void test21 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . getAdmin_state ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBind_ip_str ( ) { return bind_ip_str ; }
void test22 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setDynamic_pass_failure_ban_duration ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDynamic_pass_failure_ban ( ) { return dynamic_pass_failure_ban ; }
void test23 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; int int0 = loginAthena0 . getDynamic_pass_failure_ban_duration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test24 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . isLog_login ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIpban ( ) { return ipban ; }
void test25 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setAdmin_state ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBind_ip_str ( ) { return bind_ip_str ; }
void test26 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setDynamic_pass_failure_ban_limit ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIpban ( ) { return ipban ; }
void test27 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setLogin_port ( 1519 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIpban ( ) { return ipban ; }
void test28 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setTime_allowed ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTime_allowed ( ) { return time_allowed ; }
void test29 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . addToBanListTXT ( "m & 2n / ^Zk - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDynamic_pass_failure_ban ( ) { return dynamic_pass_failure_ban ; }
void test30 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; int int0 = loginAthena0 . getDynamic_pass_failure_ban_limit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBind_ip_str ( ) { return bind_ip_str ; }
void test31 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setDynamic_pass_failure_ban_interval ( ( - 26 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIpban ( ) { return ipban ; }
void test32 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setAccount_engine ( "_OWs" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBind_ip_str ( ) { return bind_ip_str ; }
void test33 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . isUse_dnsbl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test34 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setAllowed_regs ( ( - 36 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDynamic_pass_failure_ban ( ) { return dynamic_pass_failure_ban ; }
void test35 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setDnsbl_servs ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIpban ( ) { return ipban ; }
void test36 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setConsole ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBind_ip_str ( ) { return bind_ip_str ; }
void test37 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . getAccount_filename ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBind_ip_str ( ) { return bind_ip_str ; }
void test38 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setClient_version_to_connect ( ( - 26 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClient_version_to_connect ( ) { return client_version_to_connect ; }
void test39 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; int int0 = loginAthena0 . getIpban_cleanup_interval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test40 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; int int0 = loginAthena0 . getIp_sync_interval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test41 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setStart_limited_time ( ( - 26 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBind_ip_str ( ) { return bind_ip_str ; }
void test42 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; int int0 = loginAthena0 . getTime_allowed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBind_ip_str ( ) { return bind_ip_str ; }
void test43 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; boolean boolean0 = loginAthena0 . isConsole ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDynamic_pass_failure_ban ( ) { return dynamic_pass_failure_ban ; }
void test44 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setLog_login ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIpban ( ) { return ipban ; }
void test45 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setLogin_log_filename ( "_OWs" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIpban ( ) { return ipban ; }
void test46 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . getAccount_engine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test47 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; int int0 = loginAthena0 . getDynamic_pass_failure_ban_interval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test48 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . getLogin_log_filename ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test49 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; String string0 = loginAthena0 . getBind_ip_str ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test50 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; boolean boolean0 = loginAthena0 . isIpban ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test51 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . getUse_MD5_passwords ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDynamic_pass_failure_ban ( ) { return dynamic_pass_failure_ban ; }
void test52 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setIp_sync_interval ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test53 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . checkIpBanTXT ( "m & 2n / ^Zk - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test54 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setCheck_client_version ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test55 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setAdmin_pass ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIpban ( ) { return ipban ; }
void test56 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; int int0 = loginAthena0 . getMin_level_to_connect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIpban ( ) { return ipban ; }
void test57 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setStdout_with_ansisequence ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test58 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setAccount_filename ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test59 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . isCheck_client_version ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIpban ( ) { return ipban ; }
void test61 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; int int0 = loginAthena0 . getLogin_port ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIpban ( ) { return ipban ; }
void test62 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; int int0 = loginAthena0 . getClient_version_to_connect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIpban ( ) { return ipban ; }
void test63 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . getAdmin_allowed_host ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBind_ip_str ( ) { return bind_ip_str ; }
void test64 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; loginAthena0 . setNew_account_flag ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole ( ) { return console ; }
void test65 ( ) throws Throwable { LoginAthena loginAthena0 = new LoginAthena ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBind_ip_str ( ) { return bind_ip_str ; }
void test2 ( ) throws Throwable { long long0 = ConfigurationManagement . getNew_reg_tick ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNew_reg_tick ( ) { return new_reg_tick ; }
void test7 ( ) throws Throwable { String string0 = ConfigurationManagement . getBackup_txt_flag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBackup_txt_flag ( ) { return backup_txt_flag ; }
void test8 ( ) throws Throwable { boolean boolean0 = ConfigurationManagement . isConsole_silent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConsole_silent ( ) { return console_silent ; }
void test9 ( ) throws Throwable { int int0 = ConfigurationManagement . getChar_id_count ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChar_id_count ( ) { return char_id_count ; }
void test10 ( ) throws Throwable { int int0 = ConfigurationManagement . getAccess_denynum ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccess_denynum ( ) { return access_denynum ; }
void test11 ( ) throws Throwable { int int0 = ConfigurationManagement . getEmail_creation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEmail_creation ( ) { return email_creation ; }
void test13 ( ) throws Throwable { long long0 = ConfigurationManagement . getStartLimitedTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getStartLimitedTime ( ) { return startLimitedTime ; }
void test14 ( ) throws Throwable { String string0 = ConfigurationManagement . getAccess_deny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAccess_deny ( ) { return access_deny ; }
void test15 ( ) throws Throwable { long long0 = ConfigurationManagement . getNum_regs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNum_regs ( ) { return num_regs ; }
void test20 ( ) throws Throwable { String string0 = ConfigurationManagement . getScdata_txt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getScdata_txt ( ) { return scdata_txt ; }
void test21 ( ) throws Throwable { int int0 = ConfigurationManagement . getAutosave_interval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAutosave_interval ( ) { return autosave_interval ; }
void test22 ( ) throws Throwable { String string0 = ConfigurationManagement . getChar_txt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getChar_txt ( ) { return char_txt ; }
void test23 ( ) throws Throwable { String string0 = ConfigurationManagement . getFriends_txt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFriends_txt ( ) { return friends_txt ; }
void test25 ( ) throws Throwable { String string0 = ConfigurationManagement . getWisp_server_name ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWisp_server_name ( ) { return wisp_server_name ; }
void test27 ( ) throws Throwable { int int0 = ConfigurationManagement . getAuth_before_save_file ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAuth_before_save_file ( ) { return auth_before_save_file ; }
void test28 ( ) throws Throwable { int [ ] intArray0 = ConfigurationManagement . getSubnetmaski ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getSubnetmaski ( ) { return subnetmaski ; }
void test30 ( ) throws Throwable { String string0 = ConfigurationManagement . getLan_char_ip ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLan_char_ip ( ) { return lan_char_ip ; }
void test33 ( ) throws Throwable { int int0 = ConfigurationManagement . getAutosave_time ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAutosave_time ( ) { return autosave_time ; }
void test34 ( ) throws Throwable { String string0 = ConfigurationManagement . getLogin_ip_str ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_ip_str ( ) { return getLoginAthenaConf ( ) . getBind_ip_str ( ) ; }
void test36 ( ) throws Throwable { int [ ] intArray0 = ConfigurationManagement . getSubneti ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getSubneti ( ) { return subneti ; }
void test39 ( ) throws Throwable { ACO aCO0 = ConfigurationManagement . getAccess_order ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ACO getAccess_order ( ) { return access_order ; }
void test40 ( ) throws Throwable { int int0 = ConfigurationManagement . getGMMax ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGMMax ( ) { return GMMax ; }
void test41 ( ) throws Throwable { String string0 = ConfigurationManagement . getMax_connect_user ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMax_connect_user ( ) { return max_connect_user ; }
void test42 ( ) throws Throwable { int int0 = ConfigurationManagement . getAccess_allownum ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccess_allownum ( ) { return access_allownum ; }
void test45 ( ) throws Throwable { int int0 = ConfigurationManagement . lesslessAuth_before_save_file ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int lesslessAuth_before_save_file ( ) { return - - auth_before_save_file ; }
void test48 ( ) throws Throwable { String string0 = ConfigurationManagement . getAccess_allow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAccess_allow ( ) { return access_allow ; }
void test53 ( ) throws Throwable { boolean boolean0 = ConfigurationManagement . yesNoOnOffToBoolean ( "NO" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean yesNoOnOffToBoolean ( String anw ) { anw = anw . toUpperCase ( ) ; if ( anw . equals ( "YES" ) | | anw . equals ( "ON" ) ) return true ; if ( anw . equals ( "NO" ) | | anw . equals ( "OFF" ) ) return false ; throw new IllegalArgumentException ( "anw doit etre egale a yes / no / on / off" ) ; }
void test54 ( ) throws Throwable { boolean boolean0 = ConfigurationManagement . yesNoOnOffToBoolean ( "OFF" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean yesNoOnOffToBoolean ( String anw ) { anw = anw . toUpperCase ( ) ; if ( anw . equals ( "YES" ) | | anw . equals ( "ON" ) ) return true ; if ( anw . equals ( "NO" ) | | anw . equals ( "OFF" ) ) return false ; throw new IllegalArgumentException ( "anw doit etre egale a yes / no / on / off" ) ; }
void test58 ( ) throws Throwable { int int0 = ConfigurationManagement . login_config_readXML ( " / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int login_config_readXML ( String cfgName ) { File gmacc = new File ( cfgName ) ; if ( ! gmacc . exists ( ) & & gmacc . length ( ) ! = 0 ) { Functions . showError ( MultilanguageManagement . getError_1 ( ) , loginAthenaConf . getAccount_filename ( ) ) ; return 1 ; } try { XStream xstream = new XStream ( new DomDriver ( ) ) ; setLoginAthenaConf ( ( LoginAthena ) xstream . fromXML ( Functions . readConf ( gmacc ) ) ) ; } catch ( IOException ex ) { ex . printStackTrace ( ) ; } return 0 ; }
void test59 ( ) throws Throwable { int int0 = ConfigurationManagement . login_config_readXML ( "ON" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int login_config_readXML ( String cfgName ) { File gmacc = new File ( cfgName ) ; if ( ! gmacc . exists ( ) & & gmacc . length ( ) ! = 0 ) { Functions . showError ( MultilanguageManagement . getError_1 ( ) , loginAthenaConf . getAccount_filename ( ) ) ; return 1 ; } try { XStream xstream = new XStream ( new DomDriver ( ) ) ; setLoginAthenaConf ( ( LoginAthena ) xstream . fromXML ( Functions . readConf ( gmacc ) ) ) ; } catch ( IOException ex ) { ex . printStackTrace ( ) ; } return 0 ; }
void test0 ( ) throws Throwable { int int0 = MySQLConfig . getDynamic_account_ban ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDynamic_account_ban ( ) { return dynamic_account_ban ; }
void test1 ( ) throws Throwable { String string0 = MySQLConfig . getGm_db ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGm_db ( ) { return gm_db ; }
void test3 ( ) throws Throwable { int int0 = MySQLConfig . getDynamic_account_ban_class ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDynamic_account_ban_class ( ) { return dynamic_account_ban_class ; }
void test6 ( ) throws Throwable { String string0 = MySQLConfig . getLogin_db_userid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_db_userid ( ) { return login_db_userid ; }
void test9 ( ) throws Throwable { String string0 = MySQLConfig . getLogin_db ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_db ( ) { return login_db ; }
void test10 ( ) throws Throwable { String string0 = MySQLConfig . getLogin_db_user_pass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_db_user_pass ( ) { return login_db_user_pass ; }
void test11 ( ) throws Throwable { String string0 = MySQLConfig . getLoginlog_db ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLoginlog_db ( ) { return loginlog_db ; }
void test14 ( ) throws Throwable { String string0 = MySQLConfig . getLogin_db_account_id ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_db_account_id ( ) { return login_db_account_id ; }
void test15 ( ) throws Throwable { boolean boolean0 = MySQLConfig . isLogin_gm_read ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLogin_gm_read ( ) { return login_gm_read ; }
void test18 ( ) throws Throwable { String string0 = MySQLConfig . getLogin_db_level ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_db_level ( ) { return login_db_level ; }
void test21 ( ) throws Throwable { String string0 = MySQLConfig . getDefault_codepage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefault_codepage ( ) { return default_codepage ; }
void test22 ( ) throws Throwable { String string0 = MySQLConfig . getMd5key ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMd5key ( ) { return md5key ; }
void test29 ( ) throws Throwable { String string0 = MySQLConfig . getReg_db ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReg_db ( ) { return reg_db ; }
void test31 ( ) throws Throwable { int int0 = MySQLConfig . getConnection_ping_interval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnection_ping_interval ( ) { return connection_ping_interval ; }
void test35 ( ) throws Throwable { int int0 = MySQLConfig . getUse_md5_passwds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUse_md5_passwds ( ) { return use_md5_passwds ; }
void test0 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_24 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_24 ( ) { return login_log_24 ; }
void test1 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_12 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_12 ( ) { return notice_12 ; }
void test2 ( ) throws Throwable { String string0 = MultilanguageManagement . getInfo_6 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInfo_6 ( ) { return info_6 ; }
void test3 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_30 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_30 ( ) { return login_log_30 ; }
void test4 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_7 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_7 ( ) { return login_log_7 ; }
void test5 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_26 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_26 ( ) { return login_log_26 ; }
void test6 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_1 ( ) { return warning_1 ; }
void test7 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_44 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_44 ( ) { return warning_44 ; }
void test8 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_40 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_40 ( ) { return warning_40 ; }
void test9 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_43 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_43 ( ) { return login_log_43 ; }
void test10 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_5 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_5 ( ) { return login_log_5 ; }
void test11 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_17 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_17 ( ) { return notice_17 ; }
void test12 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_25 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_25 ( ) { return login_log_25 ; }
void test13 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_38 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_38 ( ) { return login_log_38 ; }
void test14 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_6 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_6 ( ) { return login_log_6 ; }
void test15 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_15 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_15 ( ) { return warning_15 ; }
void test16 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_33 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_33 ( ) { return warning_33 ; }
void test17 ( ) throws Throwable { String string0 = MultilanguageManagement . getInfo_12 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInfo_12 ( ) { return info_12 ; }
void test18 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_19 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_19 ( ) { return notice_19 ; }
void test19 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_12 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_12 ( ) { return login_log_12 ; }
void test20 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_41 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_41 ( ) { return login_log_41 ; }
void test21 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_30 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_30 ( ) { return warning_30 ; }
void test22 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_28 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_28 ( ) { return login_log_28 ; }
void test23 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_4 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_4 ( ) { return login_log_4 ; }
void test24 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_26 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_26 ( ) { return warning_26 ; }
void test25 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_10 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_10 ( ) { return notice_10 ; }
void test26 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_33 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_33 ( ) { return login_log_33 ; }
void test27 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_37 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_37 ( ) { return login_log_37 ; }
void test28 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_2 ( ) { return login_log_2 ; }
void test29 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_29 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_29 ( ) { return warning_29 ; }
void test30 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_18 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_18 ( ) { return login_log_18 ; }
void test31 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_1 ( ) { return notice_1 ; }
void test32 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_32 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_32 ( ) { return warning_32 ; }
void test33 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_16 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_16 ( ) { return notice_16 ; }
void test34 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_11 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_11 ( ) { return warning_11 ; }
void test35 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_45 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_45 ( ) { return login_log_45 ; }
void test36 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_15 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_15 ( ) { return login_log_15 ; }
void test37 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_9 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_9 ( ) { return error_9 ; }
void test38 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_18 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_18 ( ) { return error_18 ; }
void test39 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_4 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_4 ( ) { return error_4 ; }
void test40 ( ) throws Throwable { String string0 = MultilanguageManagement . getStatus_4 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStatus_4 ( ) { return status_4 ; }
void test41 ( ) throws Throwable { String string0 = MultilanguageManagement . getInfo_8 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInfo_8 ( ) { return info_8 ; }
void test42 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_21 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_21 ( ) { return error_21 ; }
void test43 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_23 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_23 ( ) { return error_23 ; }
void test44 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_47 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_47 ( ) { return login_log_47 ; }
void test45 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_15 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_15 ( ) { return notice_15 ; }
void test46 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_1 ( ) { return error_1 ; }
void test47 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_25 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_25 ( ) { return error_25 ; }
void test48 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_36 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_36 ( ) { return warning_36 ; }
void test49 ( ) throws Throwable { String string0 = MultilanguageManagement . getInfo_9 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInfo_9 ( ) { return info_9 ; }
void test50 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_20 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_20 ( ) { return error_20 ; }
void test51 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_44 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_44 ( ) { return login_log_44 ; }
void test52 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_5 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_5 ( ) { return notice_5 ; }
void test53 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_32 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_32 ( ) { return login_log_32 ; }
void test54 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_13 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_13 ( ) { return notice_13 ; }
void test55 ( ) throws Throwable { String string0 = MultilanguageManagement . getInfo_10 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInfo_10 ( ) { return info_10 ; }
void test56 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_3 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_3 ( ) { return login_log_3 ; }
void test57 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_8 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_8 ( ) { return login_log_8 ; }
void test58 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_10 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_10 ( ) { return error_10 ; }
void test59 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_48 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_48 ( ) { return login_log_48 ; }
void test60 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_5 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_5 ( ) { return error_5 ; }
void test61 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_11 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_11 ( ) { return error_11 ; }
void test62 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_47 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_47 ( ) { return warning_47 ; }
void test64 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_42 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_42 ( ) { return login_log_42 ; }
void test65 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_16 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_16 ( ) { return login_log_16 ; }
void test66 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_36 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_36 ( ) { return login_log_36 ; }
void test67 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_49 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_49 ( ) { return warning_49 ; }
void test68 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_17 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_17 ( ) { return login_log_17 ; }
void test69 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_27 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_27 ( ) { return warning_27 ; }
void test70 ( ) throws Throwable { String string0 = MultilanguageManagement . getInfo_4 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInfo_4 ( ) { return info_4 ; }
void test71 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_39 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_39 ( ) { return warning_39 ; }
void test72 ( ) throws Throwable { String string0 = MultilanguageManagement . getStatus_5 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStatus_5 ( ) { return status_5 ; }
void test73 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_43 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_43 ( ) { return warning_43 ; }
void test74 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_18 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_18 ( ) { return notice_18 ; }
void test75 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_39 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_39 ( ) { return login_log_39 ; }
void test76 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_31 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_31 ( ) { return warning_31 ; }
void test77 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_24 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_24 ( ) { return error_24 ; }
void test78 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_3 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_3 ( ) { return error_3 ; }
void test79 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_24 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_24 ( ) { return warning_24 ; }
void test80 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_12 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_12 ( ) { return warning_12 ; }
void test81 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_9 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_9 ( ) { return login_log_9 ; }
void test82 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_28 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_28 ( ) { return warning_28 ; }
void test83 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_7 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_7 ( ) { return notice_7 ; }
void test84 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_6 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_6 ( ) { return notice_6 ; }
void test85 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_2 ( ) { return error_2 ; }
void test86 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_21 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_21 ( ) { return login_log_21 ; }
void test87 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_14 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_14 ( ) { return warning_14 ; }
void test88 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_8 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_8 ( ) { return notice_8 ; }
void test89 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_14 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_14 ( ) { return notice_14 ; }
void test90 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_13 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_13 ( ) { return error_13 ; }
void test91 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_35 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_35 ( ) { return login_log_35 ; }
void test92 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_23 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_23 ( ) { return warning_23 ; }
void test93 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_20 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_20 ( ) { return warning_20 ; }
void test94 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_42 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_42 ( ) { return warning_42 ; }
void test95 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_2 ( ) { return warning_2 ; }
void test96 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_37 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_37 ( ) { return warning_37 ; }
void test97 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_1 ( ) { return login_log_1 ; }
void test98 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_15 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_15 ( ) { return error_15 ; }
void test99 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_5 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_5 ( ) { return warning_5 ; }
void test100 ( ) throws Throwable { String string0 = MultilanguageManagement . getInfo_1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInfo_1 ( ) { return info_1 ; }
void test101 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_12 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_12 ( ) { return error_12 ; }
void test102 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_34 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_34 ( ) { return warning_34 ; }
void test103 ( ) throws Throwable { String string0 = MultilanguageManagement . getStatus_2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStatus_2 ( ) { return status_2 ; }
void test104 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_31 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_31 ( ) { return login_log_31 ; }
void test105 ( ) throws Throwable { String string0 = MultilanguageManagement . getStatus_1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStatus_1 ( ) { return status_1 ; }
void test106 ( ) throws Throwable { MultilanguageManagement multilanguageManagement0 = new MultilanguageManagement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_7 ( ) { return login_log_7 ; }
void test107 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_50 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_50 ( ) { return warning_50 ; }
void test108 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_18 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_18 ( ) { return warning_18 ; }
void test109 ( ) throws Throwable { String string0 = MultilanguageManagement . getChar_log_2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getChar_log_2 ( ) { return char_log_2 ; }
void test110 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_13 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_13 ( ) { return warning_13 ; }
void test112 ( ) throws Throwable { String string0 = MultilanguageManagement . getStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStatus ( ) { return status ; }
void test113 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_22 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_22 ( ) { return warning_22 ; }
void test114 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_7 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_7 ( ) { return error_7 ; }
void test115 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_16 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_16 ( ) { return warning_16 ; }
void test116 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_10 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_10 ( ) { return warning_10 ; }
void test117 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice ( ) { return notice ; }
void test118 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_41 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_41 ( ) { return warning_41 ; }
void test119 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_22 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_22 ( ) { return login_log_22 ; }
void test120 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_6 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_6 ( ) { return error_6 ; }
void test121 ( ) throws Throwable { String string0 = MultilanguageManagement . getInfo_5 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInfo_5 ( ) { return info_5 ; }
void test122 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_9 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_9 ( ) { return warning_9 ; }
void test123 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_19 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_19 ( ) { return warning_19 ; }
void test124 ( ) throws Throwable { String string0 = MultilanguageManagement . getInfo_2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInfo_2 ( ) { return info_2 ; }
void test125 ( ) throws Throwable { String string0 = MultilanguageManagement . getError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError ( ) { return error ; }
void test126 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_7 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_7 ( ) { return warning_7 ; }
void test127 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_6 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_6 ( ) { return warning_6 ; }
void test128 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_3 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_3 ( ) { return warning_3 ; }
void test129 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_9 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_9 ( ) { return notice_9 ; }
void test130 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_48 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_48 ( ) { return warning_48 ; }
void test131 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_19 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_19 ( ) { return login_log_19 ; }
void test132 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_38 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_38 ( ) { return warning_38 ; }
void test133 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_17 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_17 ( ) { return warning_17 ; }
void test134 ( ) throws Throwable { String string0 = MultilanguageManagement . getChar_log_1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getChar_log_1 ( ) { return char_log_1 ; }
void test135 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_2 ( ) { return notice_2 ; }
void test136 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_21 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_21 ( ) { return warning_21 ; }
void test137 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_46 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_46 ( ) { return login_log_46 ; }
void test138 ( ) throws Throwable { String string0 = MultilanguageManagement . getInfo_7 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInfo_7 ( ) { return info_7 ; }
void test139 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_4 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_4 ( ) { return notice_4 ; }
void test140 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_11 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_11 ( ) { return login_log_11 ; }
void test141 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_14 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_14 ( ) { return error_14 ; }
void test142 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_27 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_27 ( ) { return login_log_27 ; }
void test143 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_4 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_4 ( ) { return warning_4 ; }
void test144 ( ) throws Throwable { String string0 = MultilanguageManagement . getInfo_3 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInfo_3 ( ) { return info_3 ; }
void test145 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_23 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_23 ( ) { return login_log_23 ; }
void test146 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_45 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_45 ( ) { return warning_45 ; }
void test147 ( ) throws Throwable { String string0 = MultilanguageManagement . getFatalError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFatalError ( ) { return fatalError ; }
void test148 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_25 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_25 ( ) { return warning_25 ; }
void test149 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_13 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_13 ( ) { return login_log_13 ; }
void test150 ( ) throws Throwable { String string0 = MultilanguageManagement . getInfo_11 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInfo_11 ( ) { return info_11 ; }
void test151 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_35 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_35 ( ) { return warning_35 ; }
void test152 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_17 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_17 ( ) { return error_17 ; }
void test153 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_14 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_14 ( ) { return login_log_14 ; }
void test154 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning ( ) { return warning ; }
void test155 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_8 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_8 ( ) { return warning_8 ; }
void test156 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_34 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_34 ( ) { return login_log_34 ; }
void test157 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_8 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_8 ( ) { return error_8 ; }
void test158 ( ) throws Throwable { String string0 = MultilanguageManagement . getStatus_6 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStatus_6 ( ) { return status_6 ; }
void test159 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_11 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_11 ( ) { return notice_11 ; }
void test160 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_51 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_51 ( ) { return warning_51 ; }
void test161 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_29 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_29 ( ) { return login_log_29 ; }
void test162 ( ) throws Throwable { String string0 = MultilanguageManagement . getNotice_3 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotice_3 ( ) { return notice_3 ; }
void test163 ( ) throws Throwable { String string0 = MultilanguageManagement . getFatal_error_1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFatal_error_1 ( ) { return fatal_error_1 ; }
void test164 ( ) throws Throwable { String string0 = MultilanguageManagement . getWarning_46 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWarning_46 ( ) { return warning_46 ; }
void test165 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_22 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_22 ( ) { return error_22 ; }
void test166 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_20 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_20 ( ) { return login_log_20 ; }
void test167 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_40 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_40 ( ) { return login_log_40 ; }
void test168 ( ) throws Throwable { String string0 = MultilanguageManagement . getLogin_log_10 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogin_log_10 ( ) { return login_log_10 ; }
void test169 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_19 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_19 ( ) { return error_19 ; }
void test170 ( ) throws Throwable { String string0 = MultilanguageManagement . getError_16 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getError_16 ( ) { return error_16 ; }
void test171 ( ) throws Throwable { String string0 = MultilanguageManagement . getStatus_3 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStatus_3 ( ) { return status_3 ; }
void test172 ( ) throws Throwable { String string0 = MultilanguageManagement . getInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInfo ( ) { return info ; }
void test0 ( ) throws Throwable { Constants . BL constants_BL0 = Constants . BL . MOB ; int int0 = constants_BL0 . value ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { Constants . JOB constants_JOB0 = Constants . JOB . BABY_WIZARD ; int int0 = constants_JOB0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValue ( ) { return value ; }
void test2 ( ) throws Throwable { Constants . ITEM_GROUP constants_ITEM_GROUP0 = Constants . ITEM_GROUP . POTION ; int int0 = constants_ITEM_GROUP0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValue ( ) { return value ; }
void test3 ( ) throws Throwable { Constants . MAPID constants_MAPID0 = Constants . MAPID . ASSASSIN_CROSS ; int int0 = constants_MAPID0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValue ( ) { return value ; }
void test4 ( ) throws Throwable { int int0 = Constants . stringToDB_MODE ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int stringToDB_MODE ( String mode ) { if ( mode ! = null ) { if ( mode . equals ( "MySQL" ) ) return 1 ; else if ( mode . toUpperCase ( ) . equals ( "XML" ) ) return 2 ; } return 0 ; }
void test5 ( ) throws Throwable { int int0 = Constants . stringToDB_MODE ( "MOB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int stringToDB_MODE ( String mode ) { if ( mode ! = null ) { if ( mode . equals ( "MySQL" ) ) return 1 ; else if ( mode . toUpperCase ( ) . equals ( "XML" ) ) return 2 ; } return 0 ; }
void test6 ( ) throws Throwable { int int0 = Constants . stringToDB_MODE ( "MySQL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int stringToDB_MODE ( String mode ) { if ( mode ! = null ) { if ( mode . equals ( "MySQL" ) ) return 1 ; else if ( mode . toUpperCase ( ) . equals ( "XML" ) ) return 2 ; } return 0 ; }
void test7 ( ) throws Throwable { int int0 = Constants . stringToDB_MODE ( "XML" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int stringToDB_MODE ( String mode ) { if ( mode ! = null ) { if ( mode . equals ( "MySQL" ) ) return 1 ; else if ( mode . toUpperCase ( ) . equals ( "XML" ) ) return 2 ; } return 0 ; }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Inet4Address inet4Address0 = ( Inet4Address ) Functions . stringToInet ( " = | / K" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Integer get ( String key ) { return maps . getIndexedData ( ) . get ( key ) ; }
void test16 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; String string0 = Functions . byteTabToString ( 142 , 142 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String byteTabToString ( int start , int end , byte [ ] buf ) { return byteTabToString ( start , end , buf , false ) ; }
void test22 ( ) throws Throwable { String string0 = Functions . getMd5String ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMd5String ( ) { int md5keylen = new java . security . SecureRandom ( ) . nextInt ( ) % 4 + 12 ; String tmpMd5 = "" ; for ( int i = 0 ; i < md5keylen ; i + + ) { tmpMd5 + = ( char ) new java . security . SecureRandom ( ) . nextInt ( ) % 255 + 1 ; } return tmpMd5 ; }
void test23 ( ) throws Throwable { String string0 = Functions . getValueFromConfigString ( "\n" , "\n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValueFromConfigString ( String strConfig , String value ) { value + = " : " ; if ( strConfig . indexOf ( value ) ! = - 1 ) { int start = strConfig . indexOf ( " : " , strConfig . indexOf ( value ) ) + 1 ; int end = strConfig . indexOf ( "\n" , start ) ; return strConfig . substring ( start , end ) . trim ( ) ; } return null ; }
void test24 ( ) throws Throwable { int int0 = Functions . charSexToInt ( 'F' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int charSexToInt ( char s ) { switch ( s ) { case 'S' : case 's' : return 2 ; case 'M' : case 'm' : return 1 ; case 'F' : case 'f' : return 0 ; } return - 1 ; }
void test25 ( ) throws Throwable { int int0 = Functions . charSexToInt ( 'M' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int charSexToInt ( char s ) { switch ( s ) { case 'S' : case 's' : return 2 ; case 'M' : case 'm' : return 1 ; case 'F' : case 'f' : return 0 ; } return - 1 ; }
void test26 ( ) throws Throwable { int int0 = Functions . charSexToInt ( 'S' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int charSexToInt ( char s ) { switch ( s ) { case 'S' : case 's' : return 2 ; case 'M' : case 'm' : return 1 ; case 'F' : case 'f' : return 0 ; } return - 1 ; }
void test27 ( ) throws Throwable { int int0 = Functions . charSexToInt ( 'f' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int charSexToInt ( char s ) { switch ( s ) { case 'S' : case 's' : return 2 ; case 'M' : case 'm' : return 1 ; case 'F' : case 'f' : return 0 ; } return - 1 ; }
void test28 ( ) throws Throwable { int int0 = Functions . charSexToInt ( 's' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int charSexToInt ( char s ) { switch ( s ) { case 'S' : case 's' : return 2 ; case 'M' : case 'm' : return 1 ; case 'F' : case 'f' : return 0 ; } return - 1 ; }
void test29 ( ) throws Throwable { int int0 = Functions . charSexToInt ( 'l' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int charSexToInt ( char s ) { switch ( s ) { case 'S' : case 's' : return 2 ; case 'M' : case 'm' : return 1 ; case 'F' : case 'f' : return 0 ; } return - 1 ; }
void test34 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; double double0 = Functions . byteTabToDouble ( 0 , 0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double byteTabToDouble ( int start , int end , byte [ ] bytesTab ) { double reponse = 0 ; for ( int i = start , j = 1 ; i < end ; i + + , j * = 0x100 ) { reponse + = unsignedByteToInt ( bytesTab [ i ] ) * j ; } return reponse ; }
void test36 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; int int0 = Functions . byteTabToInt ( ( int ) ( byte ) ( - 39 ) , ( int ) ( byte ) ( - 39 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int byteTabToInt ( int start , int end , byte [ ] bytesTab ) { int reponse = 0 ; for ( int i = start , j = 1 ; i < end ; i + + , j * = 0x100 ) { reponse + = unsignedByteToInt ( bytesTab [ i ] ) * j ; } return reponse ; }
void test38 ( ) throws Throwable { GregorianCalendar gregorianCalendar0 = ( GregorianCalendar ) Calendar . getInstance ( ) ; String string0 = Functions . calendarToString ( ( Calendar ) gregorianCalendar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . subNet + " : " + this . charIP + " : " + this . mapIP ; }
void test39 ( ) throws Throwable { String string0 = Functions . calendarToString ( ( Calendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String calendarToString ( Calendar tv ) { if ( tv = = null ) return "0" ; NumberFormat nf = NumberFormat . getInstance ( ) ; nf . setMinimumIntegerDigits ( 2 ) ; nf . setMaximumIntegerDigits ( 2 ) ; return tv . get ( Calendar . YEAR ) + " - " + nf . format ( tv . get ( Calendar . MONTH ) ) + " - " + nf . format ( tv . get ( Calendar . DAY_OF_MONTH ) ) + " " + nf . format ( tv . get ( Calendar . HOUR_OF_DAY ) ) + " : " + nf . format ( tv . get ( Calendar . MINUTE ) ) + " : " + nf . format ( tv . get ( Calendar . SECOND ) ) + " : " + nf . format ( tv . get ( Calendar . MILLISECOND ) ) ; }
void test43 ( ) throws Throwable { int int0 = Functions . unsignedByteToInt ( ( byte ) 11 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int unsignedByteToInt ( byte bti ) { if ( bti < 0 ) return ( bti + 256 ) ; return bti ; }
void test44 ( ) throws Throwable { int int0 = Functions . unsignedByteToInt ( ( byte ) ( - 114 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int unsignedByteToInt ( byte bti ) { if ( bti < 0 ) return ( bti + 256 ) ; return bti ; }
void test45 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; String string0 = Functions . unsignedBytesToString ( byteArray0 , 1 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String unsignedBytesToString ( byte [ ] bTable , int startIndex , int endIndex ) { String result = "" ; for ( int i = startIndex ; i < = endIndex & & bTable [ i ] ! = 0 ; i + + ) { result + = ( char ) parseByteToInt ( bTable [ i ] ) ; } return result ; }
void test46 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 16 ] ; byteArray0 [ 0 ] = ( byte ) 34 ; String string0 = Functions . unsignedBytesToString ( byteArray0 , 0 , 144 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String unsignedBytesToString ( byte [ ] bTable , int startIndex , int endIndex ) { String result = "" ; for ( int i = startIndex ; i < = endIndex & & bTable [ i ] ! = 0 ; i + + ) { result + = ( char ) parseByteToInt ( bTable [ i ] ) ; } return result ; }
void test47 ( ) throws Throwable { int int0 = Functions . parseByteToInt ( ( byte ) ( - 114 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int parseByteToInt ( byte value ) { int val = value ; if ( value < 0 ) { val = ( value + 256 ) ; } return val ; }
void test48 ( ) throws Throwable { byte byte0 = Functions . parseIntToByte ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte parseIntToByte ( int value ) throws Exception { byte val = 0 ; if ( value > 127 ) value = ( value - 256 ) ; if ( value > Byte . MIN_VALUE & & value < Byte . MAX_VALUE ) val = ( byte ) value ; else throw new Exception ( "Value doit etre inferieur a 256 et superieur a - 128" ) ; return val ; }
void test55 ( ) throws Throwable { boolean boolean0 = Functions . e_mail_check ( " / / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean e_mail_check ( String email ) { if ( email . length ( ) < 3 | | email . length ( ) > 39 ) return false ; if ( email . indexOf ( "@" ) = = - 1 | | email . indexOf ( " . " ) = = - 1 ) return false ; if ( email . indexOf ( "@ . " ) ! = - 1 | | email . indexOf ( " . . " ) ! = - 1 | | email . indexOf ( "@" ) = = 0 | | email . indexOf ( " " ) ! = - 1 | | email . indexOf ( " ; " ) ! = - 1 ) return false ; / / all correct return true ; }
void test56 ( ) throws Throwable { boolean boolean0 = Functions . e_mail_check ( "A ( l * abzO$dJcJA | f fR" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean e_mail_check ( String email ) { if ( email . length ( ) < 3 | | email . length ( ) > 39 ) return false ; if ( email . indexOf ( "@" ) = = - 1 | | email . indexOf ( " . " ) = = - 1 ) return false ; if ( email . indexOf ( "@ . " ) ! = - 1 | | email . indexOf ( " . . " ) ! = - 1 | | email . indexOf ( "@" ) = = 0 | | email . indexOf ( " " ) ! = - 1 | | email . indexOf ( " ; " ) ! = - 1 ) return false ; / / all correct return true ; }
void test57 ( ) throws Throwable { boolean boolean0 = Functions . e_mail_check ( "cv@Y ; HUiLME_ZM" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean e_mail_check ( String email ) { if ( email . length ( ) < 3 | | email . length ( ) > 39 ) return false ; if ( email . indexOf ( "@" ) = = - 1 | | email . indexOf ( " . " ) = = - 1 ) return false ; if ( email . indexOf ( "@ . " ) ! = - 1 | | email . indexOf ( " . . " ) ! = - 1 | | email . indexOf ( "@" ) = = 0 | | email . indexOf ( " " ) ! = - 1 | | email . indexOf ( " ; " ) ! = - 1 ) return false ; / / all correct return true ; }
void test58 ( ) throws Throwable { boolean boolean0 = Functions . e_mail_check ( "pV . @" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean e_mail_check ( String email ) { if ( email . length ( ) < 3 | | email . length ( ) > 39 ) return false ; if ( email . indexOf ( "@" ) = = - 1 | | email . indexOf ( " . " ) = = - 1 ) return false ; if ( email . indexOf ( "@ . " ) ! = - 1 | | email . indexOf ( " . . " ) ! = - 1 | | email . indexOf ( "@" ) = = 0 | | email . indexOf ( " " ) ! = - 1 | | email . indexOf ( " ; " ) ! = - 1 ) return false ; / / all correct return true ; }
void test59 ( ) throws Throwable { String string0 = Functions . encryptePassword ( "" , "" , "^Y2w [ S_" , ( - 20 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String encryptePassword ( String md5key , String passwordAccount , String encryptedPassword , int passwdenc ) throws UnsupportedEncodingException , NoSuchAlgorithmException { MessageDigest md = MessageDigest . getInstance ( Constants . ALGORITHM ) ; switch ( passwdenc ) { / / case 0 : case 1 : md . update ( ( md5key + encryptedPassword ) . getBytes ( "8859_1" ) ) ; break ; case 2 : md . update ( ( encryptedPassword + md5key ) . getBytes ( "8859_1" ) ) ; break ; default : return null ; } return new String ( md . digest ( ) ) ; }
void test60 ( ) throws Throwable { String string0 = Functions . encryptePassword ( "oui" , "oui" , "oui" , 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String encryptePassword ( String md5key , String passwordAccount , String encryptedPassword , int passwdenc ) throws UnsupportedEncodingException , NoSuchAlgorithmException { MessageDigest md = MessageDigest . getInstance ( Constants . ALGORITHM ) ; switch ( passwdenc ) { / / case 0 : case 1 : md . update ( ( md5key + encryptedPassword ) . getBytes ( "8859_1" ) ) ; break ; case 2 : md . update ( ( encryptedPassword + md5key ) . getBytes ( "8859_1" ) ) ; break ; default : return null ; } return new String ( md . digest ( ) ) ; }
void test61 ( ) throws Throwable { boolean boolean0 = Functions . checkEncryptedPassword ( "1cevR ? ? flcuVpAQ7C" , "1cevR ? ? flcuVpAQ7C" , "1cevR ? ? flcuVpAQ7C" , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkEncryptedPassword ( String md5key , String passwordAccount , String encryptedPassword , int passwdenc ) throws NoSuchAlgorithmException , UnsupportedEncodingException { MessageDigest md = MessageDigest . getInstance ( Constants . ALGORITHM ) ; switch ( passwdenc ) { / / case 0 : case 1 : md . update ( ( md5key + encryptedPassword ) . getBytes ( "8859_1" ) ) ; return md . digest ( ) . equals ( passwordAccount . getBytes ( "8859_1" ) ) ; case 2 : md . update ( ( encryptedPassword + md5key ) . getBytes ( "8859_1" ) ) ; return md . digest ( ) . equals ( passwordAccount . getBytes ( "8859_1" ) ) ; default : return false ; } }
void test62 ( ) throws Throwable { boolean boolean0 = Functions . checkEncryptedPassword ( "" , "^Y2w [ S_" , "" , ( - 1374 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkEncryptedPassword ( String md5key , String passwordAccount , String encryptedPassword , int passwdenc ) throws NoSuchAlgorithmException , UnsupportedEncodingException { MessageDigest md = MessageDigest . getInstance ( Constants . ALGORITHM ) ; switch ( passwdenc ) { / / case 0 : case 1 : md . update ( ( md5key + encryptedPassword ) . getBytes ( "8859_1" ) ) ; return md . digest ( ) . equals ( passwordAccount . getBytes ( "8859_1" ) ) ; case 2 : md . update ( ( encryptedPassword + md5key ) . getBytes ( "8859_1" ) ) ; return md . digest ( ) . equals ( passwordAccount . getBytes ( "8859_1" ) ) ; default : return false ; } }
void test65 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 36 ] ; byte [ ] byteArray1 = Functions . subByteTab ( byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] subByteTab ( byte tab [ ] , int start , int end ) { byte tabTo [ ] = new byte [ end - start ] ; for ( int i = start ; i < end ; i + + ) { tabTo [ i ] = tab [ i ] ; } return tabTo ; }
void test69 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; byteArray0 [ 0 ] = ( byte ) ( - 90 ) ; String string0 = Functions . byteTabToString ( 0 , 998 , byteArray0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String byteTabToString ( int start , int end , byte [ ] buf ) { return byteTabToString ( start , end , buf , false ) ; }
void test70 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 18 ] ; short short0 = Functions . byteTabToShort ( ( - 1 ) , ( - 1 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short byteTabToShort ( int start , int end , byte [ ] tab ) { short reponse = 0 ; for ( int i = start , j = 1 ; i < end ; i + + , j * = 0x100 ) { reponse + = unsignedByteToInt ( tab [ i ] ) * j ; } return reponse ; }
void test74 ( ) throws Throwable { char char0 = Functions . byteSexToChar ( ( byte ) 70 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char byteSexToChar ( byte sex ) { return ( sex = = 0 ? 'F' : ( sex = = 1 ? 'M' : 'S' ) ) ; }
void test75 ( ) throws Throwable { char char0 = Functions . byteSexToChar ( ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char byteSexToChar ( byte sex ) { return ( sex = = 0 ? 'F' : ( sex = = 1 ? 'M' : 'S' ) ) ; }
void test76 ( ) throws Throwable { char char0 = Functions . byteSexToChar ( ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char byteSexToChar ( byte sex ) { return ( sex = = 0 ? 'F' : ( sex = = 1 ? 'M' : 'S' ) ) ; }
void test77 ( ) throws Throwable { int int0 = Functions . config_switch ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int config_switch ( String str ) { if ( str . equals ( "on" ) | | str . equals ( "yes" ) | | str . equals ( "oui" ) | | str . equals ( "ja" ) | | str . equals ( "si" ) | | str . equals ( "1" ) ) return 1 ; if ( str . equals ( "off" ) | | str . equals ( "no" ) | | str . equals ( "non" ) | | str . equals ( "nein" ) | | str . equals ( "0" ) ) return 0 ; return - 1 ; }
void test78 ( ) throws Throwable { int int0 = Functions . config_switch ( "oui" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int config_switch ( String str ) { if ( str . equals ( "on" ) | | str . equals ( "yes" ) | | str . equals ( "oui" ) | | str . equals ( "ja" ) | | str . equals ( "si" ) | | str . equals ( "1" ) ) return 1 ; if ( str . equals ( "off" ) | | str . equals ( "no" ) | | str . equals ( "non" ) | | str . equals ( "nein" ) | | str . equals ( "0" ) ) return 0 ; return - 1 ; }
void test79 ( ) throws Throwable { int int0 = Functions . config_switch ( "nein" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int config_switch ( String str ) { if ( str . equals ( "on" ) | | str . equals ( "yes" ) | | str . equals ( "oui" ) | | str . equals ( "ja" ) | | str . equals ( "si" ) | | str . equals ( "1" ) ) return 1 ; if ( str . equals ( "off" ) | | str . equals ( "no" ) | | str . equals ( "non" ) | | str . equals ( "nein" ) | | str . equals ( "0" ) ) return 0 ; return - 1 ; }
void test0 ( ) throws Throwable { ACO aCO0 = ACO . DENY_ALLOW ; int int0 = aCO0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValue ( ) { return value ; }
void test0 ( ) throws Throwable { int int0 = SessionPacket . readInt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int readInt ( ) { return 0 ; }
void test1 ( ) throws Throwable { SessionPacket sessionPacket0 = new SessionPacket ( 1447 ) ; byte [ ] byteArray0 = new byte [ 6 ] ; String string0 = sessionPacket0 . readString ( 1447 , 107 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String readString ( int start , int end , byte [ ] buf ) { return readString ( start , end , buf , false ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; SessionPacket sessionPacket0 = new SessionPacket ( byteArray0 ) ; sessionPacket0 . writeInteger ( 17 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int readInt ( ) { return 0 ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; SessionPacket sessionPacket0 = new SessionPacket ( byteArray0 ) ; sessionPacket0 . writeString ( "o" , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int readInt ( ) { return 0 ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; SessionPacket sessionPacket0 = new SessionPacket ( byteArray0 ) ; sessionPacket0 . writeString ( "o" , ( int ) ( byte ) 107 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int readInt ( ) { return 0 ; }
void test6 ( ) throws Throwable { SessionPacket sessionPacket0 = new SessionPacket ( 361 ) ; byte [ ] byteArray0 = sessionPacket0 . getPacketTab ( ) ; String string0 = sessionPacket0 . readString ( 0 , 1 , byteArray0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String readString ( int start , int end , byte [ ] buf ) { return readString ( start , end , buf , false ) ; }
void test0 ( ) throws Throwable { SubNetConf subNetConf0 = new SubNetConf ( ) ; subNetConf0 . setMap_ip ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMap_ip ( ) { return map_ip ; }
void test1 ( ) throws Throwable { SubNetConf subNetConf0 = new SubNetConf ( ) ; long long0 = subNetConf0 . getMask ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMask ( ) { return mask ; }
void test2 ( ) throws Throwable { SubNetConf subNetConf0 = new SubNetConf ( ) ; subNetConf0 . setSubnet ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMask ( ) { return mask ; }
void test3 ( ) throws Throwable { SubNetConf subNetConf0 = new SubNetConf ( ) ; long long0 = subNetConf0 . getSubnet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubnet ( ) { return subnet ; }
void test4 ( ) throws Throwable { SubNetConf subNetConf0 = new SubNetConf ( ) ; long long0 = subNetConf0 . getMap_ip ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMap_ip ( ) { return map_ip ; }
void test5 ( ) throws Throwable { SubNetConf subNetConf0 = new SubNetConf ( ) ; subNetConf0 . setMask ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMap_ip ( ) { return map_ip ; }
void test6 ( ) throws Throwable { SubNetConf subNetConf0 = new SubNetConf ( ) ; subNetConf0 . setChar_ip ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMask ( ) { return mask ; }
void test7 ( ) throws Throwable { SubNetConf subNetConf0 = new SubNetConf ( ) ; long long0 = subNetConf0 . getChar_ip ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getChar_ip ( ) { return char_ip ; }
void test0 ( ) throws Throwable { Point point0 = new Point ( ( - 1094 ) , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMapId ( ) { return mapId ; }
void test1 ( ) throws Throwable { Point point0 = new Point ( ( - 1094 ) , 0 , 0 ) ; int int0 = point0 . getY ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getX ( ) { return x ; }
void test2 ( ) throws Throwable { Point point0 = new Point ( ( - 1094 ) , 0 , 0 ) ; point0 . setX ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getX ( ) { return x ; }
void test3 ( ) throws Throwable { Point point0 = new Point ( ( - 1094 ) , 0 , 0 ) ; int int0 = point0 . getMapId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getY ( ) { return y ; }
void test4 ( ) throws Throwable { Point point0 = new Point ( ( - 1094 ) , 0 , 0 ) ; int int0 = point0 . getX ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMapId ( ) { return mapId ; }
void test5 ( ) throws Throwable { Point point0 = new Point ( 0 , 1713 , 1713 ) ; point0 . setY ( 1713 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMapId ( ) { return mapId ; }
void test0 ( ) throws Throwable { Packet packet0 = new Packet ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test1 ( ) throws Throwable { Packet packet0 = new Packet ( 51 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test2 ( ) throws Throwable { Packet packet0 = new Packet ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test3 ( ) throws Throwable { Packet packet0 = new Packet ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeString ( String nString , int end ) { for ( int i = index , j = 0 ; i < end & & j < nString . length ( ) ; i + + , j + + ) { packet [ i ] = ( byte ) nString . charAt ( j ) ; } index + = nString . length ( ) ; }
void test4 ( ) throws Throwable { Packet packet0 = new Packet ( 137 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test5 ( ) throws Throwable { Packet packet0 = new Packet ( 1029 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeString ( String nString , int end ) { for ( int i = index , j = 0 ; i < end & & j < nString . length ( ) ; i + + , j + + ) { packet [ i ] = ( byte ) nString . charAt ( j ) ; } index + = nString . length ( ) ; }
void test6 ( ) throws Throwable { Packet packet0 = new Packet ( 137 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeString ( String nString , int end ) { for ( int i = index , j = 0 ; i < end & & j < nString . length ( ) ; i + + , j + + ) { packet [ i ] = ( byte ) nString . charAt ( j ) ; } index + = nString . length ( ) ; }
void test7 ( ) throws Throwable { Packet packet0 = new Packet ( 137 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test8 ( ) throws Throwable { Packet packet0 = new Packet ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeByte ( byte nByte ) { packet [ index ] = nByte ; index + + ; }
void test9 ( ) throws Throwable { Packet packet0 = new Packet ( 51 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test10 ( ) throws Throwable { Packet packet0 = new Packet ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeBoolean ( boolean b ) { assert currentIndex + 1 < data . length ; data [ currentIndex + + ] = ( byte ) ( b ? 1 : 0 ) ; }
void test11 ( ) throws Throwable { Packet packet0 = new Packet ( 1272 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test12 ( ) throws Throwable { Packet packet0 = new Packet ( 146 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test13 ( ) throws Throwable { Packet packet0 = new Packet ( 137 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test14 ( ) throws Throwable { Packet packet0 = new Packet ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeInteger ( int nInt ) { packet [ index ] = ( byte ) ( nInt % 256 ) ; nInt / = 256 ; packet [ index + 1 ] = ( byte ) ( nInt % 256 ) ; index + = 2 ; }
void test15 ( ) throws Throwable { Packet packet0 = new Packet ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeShort ( int i ) { assert currentIndex + 2 < data . length ; Functions . intToByteTab ( i , currentIndex , currentIndex + = 2 , data ) ; }
void test16 ( ) throws Throwable { Packet packet0 = new Packet ( 1029 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test17 ( ) throws Throwable { Packet packet0 = new Packet ( 146 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String readString ( int start , int end , byte [ ] buf ) { return readString ( start , end , buf , false ) ; }
void test18 ( ) throws Throwable { Packet packet0 = new Packet ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test19 ( ) throws Throwable { Packet packet0 = new Packet ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte readByte ( ) { assert currentIndex + 1 < data . length ; return data [ currentIndex + + ] ; }
void test20 ( ) throws Throwable { Packet packet0 = new Packet ( 146 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test21 ( ) throws Throwable { Packet packet0 = new Packet ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean readBoolean ( ) { assert currentIndex + 1 < data . length ; return data [ currentIndex + + ] > = 1 ; }
void test22 ( ) throws Throwable { Packet packet0 = new Packet ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test23 ( ) throws Throwable { Packet packet0 = new Packet ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int readInteger ( ) { assert currentIndex + 4 < data . length ; return Functions . byteTabToInt ( currentIndex , currentIndex + = 4 , data ) ; }
void test24 ( ) throws Throwable { Packet packet0 = new Packet ( 51 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test25 ( ) throws Throwable { Packet packet0 = new Packet ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short readShort ( ) { assert currentIndex + 2 < data . length ; return Functions . byteTabToShort ( currentIndex , currentIndex + = 2 , data ) ; }
void test26 ( ) throws Throwable { Packet packet0 = new Packet ( 1272 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test27 ( ) throws Throwable { Packet packet0 = new Packet ( 1272 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test28 ( ) throws Throwable { Packet packet0 = new Packet ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test29 ( ) throws Throwable { Packet packet0 = new Packet ( 51 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentIndex ( ) { return currentIndex ; }
void test0 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 ) ; String string0 = socket_data0 . getMd5key ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMd5key ( ) { return md5key ; }
void test1 ( ) throws Throwable { FromClient fromClient0 = new FromClient ( ) ; Socket_data socket_data0 = new Socket_data ( ( Socket ) null , ( IParse ) fromClient0 ) ; SessionType sessionType0 = SessionType . SESSION_MAX ; socket_data0 . setType ( sessionType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEof ( ) { return eof ; }
void test2 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; FromClient fromClient0 = new FromClient ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) fromClient0 ) ; Excecutable excecutable0 = socket_data0 . getFunc_console ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Excecutable getFunc_console ( ) { return func_console ; }
void test3 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; FromClient fromClient0 = new FromClient ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) fromClient0 ) ; String string0 = socket_data0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test4 ( ) throws Throwable { Proxy proxy0 = Proxy . NO_PROXY ; Socket socket0 = new Socket ( proxy0 ) ; Socket_data socket_data0 = new Socket_data ( socket0 ) ; socket_data0 . setAccount_id ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIpStr ( ) { return client_addr . getLocalAddress ( ) . getHostAddress ( ) ; }
void test5 ( ) throws Throwable { FromClient fromClient0 = new FromClient ( ) ; Socket_data socket_data0 = new Socket_data ( ( Socket ) null , ( IParse ) fromClient0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaintenance ( ) { return maintenance ; }
void test8 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; FromAdmin fromAdmin0 = new FromAdmin ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) fromAdmin0 ) ; Integer integer0 = socket_data0 . getAccount_id ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccount_id ( ) { return account_id ; }
void test9 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; FromClient fromClient0 = new FromClient ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) fromClient0 ) ; socket_data0 . setFunc_send ( ( Excecutable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getListenPort ( ) { return listenPort ; }
void test10 ( ) throws Throwable { Socket_data socket_data0 = new Socket_data ( ( Socket ) null ) ; Calendar calendar0 = socket_data0 . getRdata_tick ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Calendar getRdata_tick ( ) { return rdata_tick ; }
void test11 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) null ) ; Socket socket1 = socket_data0 . getClient_addr ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Socket getClient_addr ( ) { return client_addr ; }
void test13 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 ) ; int int0 = socket_data0 . getNew_ ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNew_ ( ) { return new_ ; }
void test14 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 ) ; int int0 = socket_data0 . getEof ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEof ( ) { return eof ; }
void test15 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; FromClient fromClient0 = new FromClient ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) fromClient0 ) ; socket_data0 . setUsers ( 17 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUsers ( ) { return users ; }
void test16 ( ) throws Throwable { Socket_data socket_data0 = new Socket_data ( ( Socket ) null ) ; socket_data0 . setRdata_tick ( ( Calendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setRdata_tick ( Calendar rdata_tick ) { this . rdata_tick = rdata_tick ; }
void test17 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 ) ; int int0 = socket_data0 . getListenPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getListenPort ( ) { return listenPort ; }
void test18 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; FromAdmin fromAdmin0 = new FromAdmin ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) fromAdmin0 ) ; socket_data0 . setName ( "0 . 0 . 0 . 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test19 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; FromAdmin fromAdmin0 = new FromAdmin ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) fromAdmin0 ) ; String string0 = socket_data0 . getIpStr ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIpStr ( ) { return client_addr . getLocalAddress ( ) . getHostAddress ( ) ; }
void test20 ( ) throws Throwable { Socket_data socket_data0 = new Socket_data ( ( Socket ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getListenPort ( ) { return listenPort ; }
void test21 ( ) throws Throwable { Proxy proxy0 = Proxy . NO_PROXY ; Socket socket0 = new Socket ( proxy0 ) ; Socket_data socket_data0 = new Socket_data ( socket0 ) ; socket_data0 . setMaintenance ( ( - 8 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaintenance ( ) { return maintenance ; }
void test22 ( ) throws Throwable { FromClient fromClient0 = new FromClient ( ) ; Socket_data socket_data0 = new Socket_data ( ( Socket ) null , ( IParse ) fromClient0 ) ; FromClient fromClient1 = ( FromClient ) socket_data0 . getFunc_parse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IParse getFunc_parse ( ) { return func_parse ; }
void test23 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) null ) ; socket_data0 . setNew_ ( 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNew_ ( ) { return new_ ; }
void test24 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; FromAdmin fromAdmin0 = new FromAdmin ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) fromAdmin0 ) ; socket_data0 . setFunc_console ( ( Excecutable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaintenance ( ) { return maintenance ; }
void test25 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 ) ; int int0 = socket_data0 . getUsers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUsers ( ) { return users ; }
void test26 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; FromClient fromClient0 = new FromClient ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) fromClient0 ) ; FromAdmin fromAdmin0 = new FromAdmin ( ) ; socket_data0 . setFunc_parse ( ( IParse ) fromAdmin0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setFunc_parse ( IParse func_parse ) { this . func_parse = func_parse ; }
void test27 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; FromAdmin fromAdmin0 = new FromAdmin ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) fromAdmin0 ) ; Excecutable excecutable0 = socket_data0 . getFunc_send ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Excecutable getFunc_send ( ) { return func_send ; }
void test28 ( ) throws Throwable { Proxy proxy0 = Proxy . NO_PROXY ; Socket socket0 = new Socket ( proxy0 ) ; Socket_data socket_data0 = new Socket_data ( socket0 ) ; socket_data0 . setFunc_recv ( ( Excecutable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUsers ( ) { return users ; }
void test29 ( ) throws Throwable { Socket_data socket_data0 = new Socket_data ( ( Socket ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEof ( ) { return eof ; }
void test30 ( ) throws Throwable { Proxy proxy0 = Proxy . NO_PROXY ; Socket socket0 = new Socket ( proxy0 ) ; Socket_data socket_data0 = new Socket_data ( socket0 ) ; socket_data0 . setMd5key ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEof ( ) { return eof ; }
void test31 ( ) throws Throwable { Proxy proxy0 = Proxy . NO_PROXY ; Socket socket0 = new Socket ( proxy0 ) ; Socket_data socket_data0 = new Socket_data ( socket0 ) ; Excecutable excecutable0 = socket_data0 . getFunc_recv ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Excecutable getFunc_recv ( ) { return func_recv ; }
void test34 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; socket0 . close ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) null ) ; int int0 = socket_data0 . func_recv ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int func_recv ( ) { try { if ( ! client_addr . isClosed ( ) ) return in . read ( ) ; else { System . out . println ( "Socket closed" ) ; } return - 1 ; } catch ( IOException ex ) { ex . printStackTrace ( ) ; return - 1 ; } }
void test36 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; FromAdmin fromAdmin0 = new FromAdmin ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) fromAdmin0 ) ; byte [ ] byteArray0 = new byte [ 1 ] ; socket0 . close ( ) ; int int0 = socket_data0 . func_recv ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int func_recv ( ) { try { if ( ! client_addr . isClosed ( ) ) return in . read ( ) ; else { System . out . println ( "Socket closed" ) ; } return - 1 ; } catch ( IOException ex ) { ex . printStackTrace ( ) ; return - 1 ; } }
void test38 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; socket0 . close ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) null ) ; byte [ ] byteArray0 = new byte [ 5 ] ; socket_data0 . func_send ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getListenPort ( ) { return listenPort ; }
void test40 ( ) throws Throwable { Proxy proxy0 = Proxy . NO_PROXY ; Socket socket0 = new Socket ( proxy0 ) ; Socket_data socket_data0 = new Socket_data ( socket0 ) ; int [ ] intArray0 = new int [ 2 ] ; socket_data0 . func_send ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMd5key ( ) { return md5key ; }
void test42 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; socket0 . close ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) null ) ; socket_data0 . func_send ( 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaintenance ( ) { return maintenance ; }
void test44 ( ) throws Throwable { FromClient fromClient0 = new FromClient ( ) ; Socket_data socket_data0 = new Socket_data ( ( Socket ) null , ( IParse ) fromClient0 ) ; socket_data0 . setClient_addr ( ( Socket ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SessionType getType ( ) { return type ; }
void test45 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 ) ; socket_data0 . setClient_addr ( socket0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setClient_addr ( Socket client_addr ) { if ( client_addr ! = null ) { this . client_addr = client_addr ; try { in = client_addr . getInputStream ( ) ; out = client_addr . getOutputStream ( ) ; } catch ( IOException ex ) { ex . printStackTrace ( ) ; } } }
void test0 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setLogin_id1 ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLogin_id1 ( ) { return login_id1 ; }
void test1 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setResetLogincoun ( true ) ; auth_data0 . setLogincount ( 342 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . subNet + " : " + this . charIP + " : " + this . mapIP ; }
void test2 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . getSex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test3 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setAccount_id ( 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test4 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; int int0 = auth_data0 . getLogin_id1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test5 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . getAccount_reg2_num ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test6 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; int int0 = auth_data0 . getDelflag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test7 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setBan_until_time ( ( long ) ( - 18 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test8 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setSex ( '3' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSex ( ) { return sex ; }
void test9 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; int int0 = auth_data0 . getClientType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test10 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setEmail ( "ZR6hGO" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test11 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; int int0 = auth_data0 . getLogin_id2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test12 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setConnect_until_time ( ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test13 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setDelflag ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDelflag ( ) { return delflag ; }
void test14 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setLastlogin ( ) ; String string0 = auth_data0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLogincount ( ) { return logincount ; }
void test15 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setPass ( " : ] @ic . BdUS~k [ " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test16 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; int int0 = auth_data0 . getCharserver ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test17 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . isResetLogincoun ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test18 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; int int0 = auth_data0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test19 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setLastlogin ( ( Calendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test20 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setUserid ( "ZR6hGO" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test21 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setLast_ip ( " ! 2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test22 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setLevel ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . subNet + " : " + this . charIP + " : " + this . mapIP ; }
void test23 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; FastMap < String , String > fastMap0 = new FastMap < String , String > ( 0 ) ; auth_data0 . setAccount_reg2 ( fastMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test24 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; FastMap < String , String > fastMap0 = auth_data0 . getAccount_reg2 ( ) ; fastMap0 . put ( "" , "" ) ; String string0 = auth_data0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . subNet + " : " + this . charIP + " : " + this . mapIP ; }
void test25 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setVersion ( ( - 821 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test26 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setClientType ( 1784 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test27 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setLogin_id2 ( 342 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLogin_id2 ( ) { return login_id2 ; }
void test28 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test29 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setLogincount ( ( - 18 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test30 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setLogincount ( 1269 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCharserver ( ) { return charserver ; }
void test31 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setState ( ( - 987 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getState ( ) { return state ; }
void test32 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setState ( 1269 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getState ( ) { return state ; }
void test33 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; auth_data0 . setState ( 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . subNet + " : " + this . charIP + " : " + this . mapIP ; }
void test0 ( ) throws Throwable { Item item0 = new Item ( ) ; short short0 = item0 . getNameid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getNameid ( ) { return nameid ; }
void test1 ( ) throws Throwable { Item item0 = new Item ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAttribute ( ) { return attribute ; }
void test2 ( ) throws Throwable { Item item0 = new Item ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getNameid ( ) { return nameid ; }
void test3 ( ) throws Throwable { Item item0 = new Item ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRefine ( ) { return refine ; }
void test4 ( ) throws Throwable { Item item0 = new Item ( ) ; int int0 = item0 . getCard ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCard ( int ind ) { return cards [ ind ] ; }
void test5 ( ) throws Throwable { Item item0 = new Item ( ) ; short short0 = item0 . getEquip ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getEquip ( ) { return equip ; }
void test6 ( ) throws Throwable { Item item0 = new Item ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAttribute ( ) { return attribute ; }
void test7 ( ) throws Throwable { Item item0 = new Item ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getEquip ( ) { return equip ; }
void test8 ( ) throws Throwable { Item item0 = new Item ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentify ( ) { return identify ; }
void test9 ( ) throws Throwable { Item item0 = new Item ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test10 ( ) throws Throwable { Item item0 = new Item ( ) ; item0 . setCard ( 0 , ( - 1979 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getAmount ( ) { return amount ; }
void test11 ( ) throws Throwable { Item item0 = new Item ( ) ; short short0 = item0 . getAmount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getAmount ( ) { return amount ; }
void test12 ( ) throws Throwable { Item item0 = new Item ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getAmount ( ) { return amount ; }
void test13 ( ) throws Throwable { Item item0 = new Item ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExpire_time ( ) { return expire_time ; }
void test14 ( ) throws Throwable { Item item0 = new Item ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test15 ( ) throws Throwable { Item item0 = new Item ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRefine ( ) { return refine ; }
void test16 ( ) throws Throwable { Item item0 = new Item ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExpire_time ( ) { return expire_time ; }
void test17 ( ) throws Throwable { Item item0 = new Item ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentify ( ) { return identify ; }
void test0 ( ) throws Throwable { SessionType sessionType0 = SessionType . SESSION_UNKNOWN ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValue ( ) { return value ; }
void test1 ( ) throws Throwable { SessionType sessionType0 = SessionType . SESSION_UNKNOWN ; int int0 = sessionType0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValue ( ) { return value ; }
void test0 ( ) throws Throwable { Friend friend0 = new Friend ( ( - 1 ) , 701 , ( String ) null ) ; int int0 = friend0 . getChar_id ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccount_id ( ) { return account_id ; }
void test1 ( ) throws Throwable { Friend friend0 = new Friend ( ( - 1 ) , 701 , ( String ) null ) ; friend0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChar_id ( ) { return char_id ; }
void test2 ( ) throws Throwable { Friend friend0 = new Friend ( ( - 1 ) , 701 , ( String ) null ) ; friend0 . setChar_id ( 1404 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChar_id ( ) { return char_id ; }
void test3 ( ) throws Throwable { Friend friend0 = new Friend ( ( - 1 ) , 701 , ( String ) null ) ; friend0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChar_id ( ) { return char_id ; }
void test4 ( ) throws Throwable { Friend friend0 = new Friend ( ( - 1 ) , 701 , ( String ) null ) ; friend0 . setAccount_id ( ( - 230 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccount_id ( ) { return account_id ; }
void test5 ( ) throws Throwable { Friend friend0 = new Friend ( ( - 1 ) , 701 , ( String ) null ) ; int int0 = friend0 . getAccount_id ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChar_id ( ) { return char_id ; }
void test0 ( ) throws Throwable { ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . SNIPER ; int int0 = rOCharacter_JOB0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValue ( ) { return value ; }
void test1 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSp ( ) { return sp ; }
void test2 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFame ( ) { return fame ; }
void test3 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; String string0 = rOCharacter0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test5 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getInt ( ) { return intel ; }
void test6 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getHair ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getHair ( ) { return hair ; }
void test7 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHp ( ) { return hp ; }
void test8 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSpear_faith ( ) { return spear_faith ; }
void test9 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus_point ( ) { return status_point ; }
void test10 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; rOCharacter0 . addInventoryItem ( ( Item ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSp ( ) { return sp ; }
void test11 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMapip ( ) { return mapip ; }
void test12 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getIntel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getIntel ( ) { return intel ; }
void test13 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; rOCharacter0 . addPoint ( ( Point ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getStr ( ) { return str ; }
void test14 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . BABY_HUNTER ; rOCharacter0 . setClass_ ( rOCharacter_JOB0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSkill_point ( ) { return skill_point ; }
void test15 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; rOCharacter0 . setStorage ( ( FastTable < Item > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccount_id ( ) { return account_id ; }
void test16 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGuild_id ( ) { return guild_id ; }
void test18 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; FastTable < Point > fastTable0 = rOCharacter0 . getMemoPoints ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FastTable < Point > getMemoPoints ( ) { return memoPoint ; }
void test19 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSlot ( ) { return slot ; }
void test20 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSword_calls ( ) { return sword_calls ; }
void test21 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccount_id ( ) { return account_id ; }
void test22 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChild ( ) { return child ; }
void test23 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBase_level ( ) { return base_level ; }
void test24 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getAgi ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getAgi ( ) { return agi ; }
void test26 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getParty_id ( ) { return party_id ; }
void test27 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSex ( ) { return sex ; }
void test28 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getHair_color ( ) { return hair_color ; }
void test29 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMax_sp ( ) { return max_sp ; }
void test30 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getZeny ( ) { return zeny ; }
void test31 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; FastTable < Skill > fastTable0 = new FastTable < Skill > ( ( - 1871 ) ) ; rOCharacter0 . setSkill ( fastTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getManner ( ) { return manner ; }
void test32 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getJob_exp ( ) { return job_exp ; }
void test33 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHom_id ( ) { return hom_id ; }
void test34 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKarma ( ) { return karma ; }
void test35 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getStr ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getStr ( ) { return str ; }
void test36 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMother ( ) { return mother ; }
void test37 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; Friend friend0 = new Friend ( 0 , 0 , "_" ) ; rOCharacter0 . addFriend ( friend0 , ( int ) ( short ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMother ( ) { return mother ; }
void test38 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getJob_level ( ) { return job_level ; }
void test40 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getHead_bottom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getHead_bottom ( ) { return head_bottom ; }
void test41 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMapport ( ) { return mapport ; }
void test42 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; FastTable < Item > fastTable0 = rOCharacter0 . getStorage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FastTable < Item > getStorage ( ) { return storage ; }
void test43 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getHead_top ( ) { return head_top ; }
void test44 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getJob_level ( ) { return job_level ; }
void test45 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChar_id ( ) { return char_id ; }
void test46 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getHair ( ) { return hair ; }
void test47 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; FastTable < Item > fastTable0 = rOCharacter0 . getInventory ( ) ; rOCharacter0 . setInventory ( fastTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getHead_bottom ( ) { return head_bottom ; }
void test48 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFather ( ) { return father ; }
void test49 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getVit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getVit ( ) { return vit ; }
void test50 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChar_id ( ) { return char_id ; }
void test51 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; FastTable < Item > fastTable0 = rOCharacter0 . getCart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FastTable < Item > getCart ( ) { return cart ; }
void test52 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getRename ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getRename ( ) { return rename ; }
void test53 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; Hotkey [ ] hotkeyArray0 = new Hotkey [ 10 ] ; rOCharacter0 . setHotkeys ( hotkeyArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getDex ( ) { return dex ; }
void test54 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArch_calls ( ) { return arch_calls ; }
void test55 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getHead_top ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getHead_top ( ) { return head_top ; }
void test56 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSkill_point ( ) { return skill_point ; }
void test57 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMax_sp ( ) { return max_sp ; }
void test58 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFame ( ) { return fame ; }
void test59 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSp ( ) { return sp ; }
void test60 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; Point point0 = rOCharacter0 . getSave_point ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Point getSave_point ( ) { return save_point ; }
void test61 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHp ( ) { return hp ; }
void test62 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getVit ( ) { return vit ; }
void test63 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOption ( ) { return option ; }
void test64 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKarma ( ) { return karma ; }
void test65 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMother ( ) { return mother ; }
void test66 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getInt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getInt ( ) { return intel ; }
void test67 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; rOCharacter0 . setName ( "_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMapip ( ) { return mapip ; }
void test68 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMer_id ( ) { return mer_id ; }
void test69 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getHead_mid ( ) { return head_mid ; }
void test70 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getHead_mid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getHead_mid ( ) { return head_mid ; }
void test71 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getIntel ( ) { return intel ; }
void test72 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; boolean boolean0 = rOCharacter0 . isShow_equip ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isShow_equip ( ) { return show_equip ; }
void test73 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSword_faith ( ) { return sword_faith ; }
void test74 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getRename ( ) { return rename ; }
void test75 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getLuk ( ) { return luk ; }
void test76 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccount_id ( ) { return account_id ; }
void test77 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getShield ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getShield ( ) { return shield ; }
void test78 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getStr ( ) { return str ; }
void test79 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSword_calls ( ) { return sword_calls ; }
void test80 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGuild_id ( ) { return guild_id ; }
void test81 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBase_level ( ) { return base_level ; }
void test82 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getWeapon ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getWeapon ( ) { return weapon ; }
void test83 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMapip ( ) { return mapip ; }
void test84 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus_point ( ) { return status_point ; }
void test85 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getShield ( ) { return shield ; }
void test86 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getHead_bottom ( ) { return head_bottom ; }
void test87 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMax_hp ( ) { return max_hp ; }
void test88 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getJob_exp ( ) { return job_exp ; }
void test89 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArch_calls ( ) { return arch_calls ; }
void test90 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPet_id ( ) { return pet_id ; }
void test91 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getClothes_color ( ) { return clothes_color ; }
void test93 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; Hotkey [ ] hotkeyArray0 = rOCharacter0 . getHotkeys ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Hotkey [ ] getHotkeys ( ) { return hotkeys ; }
void test94 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSlot ( ) { return slot ; }
void test95 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChild ( ) { return child ; }
void test96 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOption ( ) { return option ; }
void test97 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; Friend [ ] friendArray0 = new Friend [ 2 ] ; rOCharacter0 . setFriends ( friendArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getStr ( ) { return str ; }
void test98 ( ) throws Throwable { PersistenteData < IndexedFastMap < Integer , ROCharacter > > persistenteData0 = ROCharacter . getPersistenceMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PersistenteData < FastTable < Subnet > > getPersistenceMethod ( ) { return persistenceMethod ; }
void test99 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getDex ( ) { return dex ; }
void test100 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getParty_id ( ) { return party_id ; }
void test101 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMax_hp ( ) { return max_hp ; }
void test102 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getAgi ( ) { return agi ; }
void test103 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; Skill skill0 = new Skill ( ( short ) 1639 , ( short ) 1639 ) ; rOCharacter0 . addSkill ( skill0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHp ( ) { return hp ; }
void test104 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getZeny ( ) { return zeny ; }
void test105 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPartner_id ( ) { return partner_id ; }
void test106 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFather ( ) { return father ; }
void test107 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSpear_calls ( ) { return spear_calls ; }
void test108 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getLuk ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getLuk ( ) { return luk ; }
void test109 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBase_exp ( ) { return base_exp ; }
void test110 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; Point point0 = rOCharacter0 . getLast_point ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Point getLast_point ( ) { return last_point ; }
void test111 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getClothes_color ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getClothes_color ( ) { return clothes_color ; }
void test112 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHom_id ( ) { return hom_id ; }
void test113 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSword_faith ( ) { return sword_faith ; }
void test114 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSkill_point ( ) { return skill_point ; }
void test115 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; rOCharacter0 . setSave_point ( ( Point ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSex ( ) { return sex ; }
void test116 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSex ( ) { return sex ; }
void test117 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPartner_id ( ) { return partner_id ; }
void test118 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMapport ( ) { return mapport ; }
void test119 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; FastTable < Item > fastTable0 = new FastTable < Item > ( ) ; rOCharacter0 . setCart ( fastTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getIntel ( ) { return intel ; }
void test120 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; Friend [ ] friendArray0 = rOCharacter0 . getFriends ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Friend [ ] getFriends ( ) { return friends ; }
void test121 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSpear_calls ( ) { return spear_calls ; }
void test122 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getManner ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getManner ( ) { return manner ; }
void test123 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; rOCharacter0 . setLast_point ( ( Point ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test124 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArch_faith ( ) { return arch_faith ; }
void test125 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getDex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getDex ( ) { return dex ; }
void test126 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSpear_faith ( ) { return spear_faith ; }
void test127 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; short short0 = rOCharacter0 . getHair_color ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getHair_color ( ) { return hair_color ; }
void test128 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; rOCharacter0 . addCartItem ( ( Item ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getWeapon ( ) { return weapon ; }
void test129 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getArch_faith ( ) { return arch_faith ; }
void test130 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getWeapon ( ) { return weapon ; }
void test131 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; FastTable < Skill > fastTable0 = rOCharacter0 . getSkill ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FastTable < Skill > getSkill ( ) { return skills ; }
void test132 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; FastTable < Point > fastTable0 = new FastTable < Point > ( ) ; rOCharacter0 . setMemoPoints ( fastTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHom_id ( ) { return hom_id ; }
void test133 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPet_id ( ) { return pet_id ; }
void test134 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMer_id ( ) { return mer_id ; }
void test136 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBase_exp ( ) { return base_exp ; }
void test137 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; rOCharacter0 . addGlobalReg ( "ZeoP~ ! FO ( " , "ZeoP~ ! FO ( " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getClothes_color ( ) { return clothes_color ; }
void test138 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isShow_equip ( ) { return show_equip ; }
void test139 ( ) throws Throwable { ROCharacter rOCharacter0 = new ROCharacter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getManner ( ) { return manner ; }
void test140 ( ) throws Throwable { ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . parseFromValue ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test141 ( ) throws Throwable { ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . parseFromValue ( 14 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test142 ( ) throws Throwable { ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . parseFromValue ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test143 ( ) throws Throwable { ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . parseFromValue ( 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test144 ( ) throws Throwable { ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . parseFromValue ( 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test145 ( ) throws Throwable { ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . parseFromValue ( 11 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test146 ( ) throws Throwable { ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . parseFromValue ( 16 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test147 ( ) throws Throwable { ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . parseFromValue ( ( int ) '\u0013' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test148 ( ) throws Throwable { ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . parseFromValue ( 23 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test149 ( ) throws Throwable { ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . parseFromValue ( 27 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test150 ( ) throws Throwable { ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . parseFromValue ( 4004 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test151 ( ) throws Throwable { ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . parseFromValue ( 4012 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test152 ( ) throws Throwable { ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . parseFromValue ( 4028 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test153 ( ) throws Throwable { ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . parseFromValue ( 4034 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test154 ( ) throws Throwable { ROCharacter . JOB rOCharacter_JOB0 = ROCharacter . JOB . parseFromValue ( 4045 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { IndexedFastMap < Object , Integer > indexedFastMap0 = new IndexedFastMap < Object , Integer > ( ) ; FastMap < Object , Integer > fastMap0 = indexedFastMap0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FastMap < T , F > getData ( ) { return data ; }
void test1 ( ) throws Throwable { IndexedFastMap < Object , Object > indexedFastMap0 = new IndexedFastMap < Object , Object > ( ) ; FastMap < Object , Object > fastMap0 = new FastMap < Object , Object > ( ) ; indexedFastMap0 . setData ( fastMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setData ( FastMap < T , F > data ) { this . data = data ; }
void test0 ( ) throws Throwable { Skill skill0 = new Skill ( ( short ) 990 , ( short ) 990 ) ; skill0 . setId ( ( short ) ( - 1042 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test1 ( ) throws Throwable { Skill skill0 = new Skill ( ( short ) ( - 1864 ) , ( short ) 473 ) ; short short0 = skill0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test2 ( ) throws Throwable { Skill skill0 = new Skill ( ( short ) ( - 1864 ) , ( short ) 473 ) ; skill0 . setFlag ( ( short ) 473 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getFlag ( ) { return flag ; }
void test3 ( ) throws Throwable { Skill skill0 = new Skill ( ( short ) 990 , ( short ) 990 ) ; short short0 = skill0 . getLv ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getLv ( ) { return lv ; }
void test4 ( ) throws Throwable { Skill skill0 = new Skill ( ( short ) 990 , ( short ) 990 ) ; skill0 . setLv ( ( short ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getLv ( ) { return lv ; }
void test5 ( ) throws Throwable { Skill skill0 = new Skill ( ( short ) 990 , ( short ) 990 ) ; short short0 = skill0 . getFlag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getFlag ( ) { return flag ; }
void test0 ( ) throws Throwable { Hotkey hotkey0 = new Hotkey ( ( - 1094 ) , 0 , 0 ) ; int int0 = hotkey0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test1 ( ) throws Throwable { Hotkey hotkey0 = new Hotkey ( 0 , 1713 , 1713 ) ; hotkey0 . setType ( 1713 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test2 ( ) throws Throwable { Hotkey hotkey0 = new Hotkey ( ( - 1094 ) , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getLv ( ) { return lv ; }
void test3 ( ) throws Throwable { Hotkey hotkey0 = new Hotkey ( ( - 1094 ) , 0 , 0 ) ; int int0 = hotkey0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SessionType getType ( ) { return type ; }
void test4 ( ) throws Throwable { Hotkey hotkey0 = new Hotkey ( ( - 1094 ) , 0 , 0 ) ; hotkey0 . setLv ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getLv ( ) { return lv ; }
void test5 ( ) throws Throwable { Hotkey hotkey0 = new Hotkey ( ( - 1094 ) , 0 , 0 ) ; int int0 = hotkey0 . getLv ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return id ; }
void test1 ( ) throws Throwable { MySQLDBManagement mySQLDBManagement0 = new MySQLDBManagement ( ) ; mySQLDBManagement0 . login_log ( "" , "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int mmo_auth_init ( ) { / / Functions . showWarning ( "mmo_auth_init : This is a dummy method because the MySQL mode doesn't need this method ! ! ! " ) ; return 0 ; }
void test5 ( ) throws Throwable { MySQLDBManagement mySQLDBManagement0 = new MySQLDBManagement ( ) ; mySQLDBManagement0 . login_log ( "%d\t%s\t%s\t%s\t%s\t%d\t%d\t%s\t%s\t%d\t%s\t%s\t" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int mmo_auth_init ( ) { / / Functions . showWarning ( "mmo_auth_init : This is a dummy method because the MySQL mode doesn't need this method ! ! ! " ) ; return 0 ; }
void test6 ( ) throws Throwable { MySQLDBManagement mySQLDBManagement0 = new MySQLDBManagement ( ) ; Auth_data auth_data0 = mySQLDBManagement0 . addUser ( "%d\t%s\t%s\t%s\t%s\t%d\t%d\t%s\t%s\t%d\t%s\t%s\t" , "%d\t%s\t%s\t%s\t%s\t%d\t%d\t%s\t%s\t%d\t%s\t%s\t" , "%d\t%s\t%s\t%s\t%s\t%d\t%d\t%s\t%s\t%d\t%s\t%s\t" , 'U' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Auth_data addUser ( String userid , String password , String email , char sex ) { return UserManagement . addUserSQL ( userid , password , email , sex ) ; }
void test0 ( ) throws Throwable { TXTDBManagement tXTDBManagement0 = new TXTDBManagement ( ) ; boolean boolean0 = tXTDBManagement0 . isIpBan ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIpBan ( String ip ) { try { return MySQLConfig . checkIpBanMySQL ( ip ) ; } catch ( SQLException ex ) { ex . printStackTrace ( ) ; return true ; } }
void test6 ( ) throws Throwable { TXTDBManagement tXTDBManagement0 = new TXTDBManagement ( ) ; Auth_data auth_data0 = tXTDBManagement0 . getUser ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Auth_data getUser ( Integer account_id ) { return UserManagement . getUserSQL ( account_id ) ; }
void test7 ( ) throws Throwable { TXTDBManagement tXTDBManagement0 = new TXTDBManagement ( ) ; Integer integer0 = new Integer ( 7 ) ; Auth_data auth_data0 = tXTDBManagement0 . getUser ( integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Auth_data getUser ( Integer account_id ) { return UserManagement . getUserSQL ( account_id ) ; }
void test8 ( ) throws Throwable { TXTDBManagement tXTDBManagement0 = new TXTDBManagement ( ) ; Auth_data auth_data0 = tXTDBManagement0 . addUser ( "" , "" , "" , 'v' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . subNet + " : " + this . charIP + " : " + this . mapIP ; }
void test2 ( ) throws Throwable { XMLDBManagementLogin xMLDBManagementLogin0 = new XMLDBManagementLogin ( ) ; int int0 = xMLDBManagementLogin0 . mmo_auth_init ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int mmo_auth_init ( ) { / / Functions . showWarning ( "mmo_auth_init : This is a dummy method because the MySQL mode doesn't need this method ! ! ! " ) ; return 0 ; }
void test1 ( ) throws Throwable { int int0 = UserManagement . getNBSession ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNBSession ( ) { return sessions . size ( ) ; }
void test2 ( ) throws Throwable { Proxy proxy0 = Proxy . NO_PROXY ; Socket socket0 = new Socket ( proxy0 ) ; Socket_data socket_data0 = new Socket_data ( socket0 ) ; UserManagement . addSession ( socket_data0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIpStr ( ) { return client_addr . getLocalAddress ( ) . getHostAddress ( ) ; }
void test3 ( ) throws Throwable { int int0 = UserManagement . online_db_final ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int online_db_final ( ) { online_db . clear ( ) ; return 0 ; }
void test4 ( ) throws Throwable { int int0 = UserManagement . getNBGM ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNBGM ( ) { return gm_account_db . size ( ) ; }
void test5 ( ) throws Throwable { int int0 = UserManagement . getAccountIdCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAccountIdCount ( ) { return account_id_count ; }
void test12 ( ) throws Throwable { FastMap < Integer , Auth_data > fastMap0 = new FastMap < Integer , Auth_data > ( ) ; UserManagement . setAuth_dats ( fastMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . subNet + " : " + this . charIP + " : " + this . mapIP ; }
void test13 ( ) throws Throwable { int int0 = UserManagement . getNBUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNBUser ( ) { return getAuth_dats ( ) . size ( ) ; }
void test15 ( ) throws Throwable { Auth_data auth_data0 = UserManagement . getUserTxt ( ( Integer ) ( - 423 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Auth_data getUserTxt ( Integer account_id ) { return auth_dats . get ( account_id ) ; }
void test16 ( ) throws Throwable { Auth_data auth_data0 = UserManagement . addUserSQL ( "Banned . " , "Banned . " , "Banned . " , ( - 92 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Auth_data addUserSQL ( String userid , String password , String email , int sex ) { Auth_data_SQL new_accountSQL ; try { new_accountSQL = new Auth_data_SQL ( userid , password , email , sex ) ; Auth_data new_account = addUser ( new_accountSQL ) ; return new_account ; } catch ( SQLException ex ) { ex . printStackTrace ( ) ; return null ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return null ; } }
void test20 ( ) throws Throwable { Auth_data auth_data0 = UserManagement . addUserTXT ( "" , " * Tm0EUv6 . %4k@" , " * Tm0EUv6 . %4k@" , ' : ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . subNet + " : " + this . charIP + " : " + this . mapIP ; }
void test21 ( ) throws Throwable { Auth_data auth_data0 = new Auth_data ( ) ; Auth_data auth_data1 = UserManagement . removeUser ( auth_data0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Auth_data removeUser ( Auth_data new_account ) { if ( index_userid_accountid . get ( new_account . getAccount_id ( ) ) ! = null ) { online_db . remove ( new_account . getAccount_id ( ) ) ; index_userid_accountid . remove ( new_account . getUserid ( ) ) ; account_ids . remove ( new Integer ( new_account . getAccount_id ( ) ) ) ; getAuth_dats ( ) . remove ( new_account . getAccount_id ( ) ) ; return new_account ; } return null ; }
void test25 ( ) throws Throwable { int int0 = UserManagement . levelIsValid ( 83 , "" , 83 , 83 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int levelIsValid ( int level , String GM_account_filename , int GM_num , int line_counter ) { if ( level < = 0 ) { Functions . showError ( MultilanguageManagement . getError_16 ( ) , GM_account_filename , ( GM_num + 1 ) , line_counter , level ) ; level = - 1 ; } else { if ( level > 99 ) { / / , GM_account_filename , GM_num + 1 , level Functions . showNotice ( MultilanguageManagement . getNotice_18 ( ) , GM_account_filename , ( GM_num + 1 ) , level ) ; level = 99 ; } } return level ; }
void test26 ( ) throws Throwable { int int0 = UserManagement . levelIsValid ( ( - 1390 ) , ( String ) null , ( - 1390 ) , ( - 1390 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int levelIsValid ( int level , String GM_account_filename , int GM_num , int line_counter ) { if ( level < = 0 ) { Functions . showError ( MultilanguageManagement . getError_16 ( ) , GM_account_filename , ( GM_num + 1 ) , line_counter , level ) ; level = - 1 ; } else { if ( level > 99 ) { / / , GM_account_filename , GM_num + 1 , level Functions . showNotice ( MultilanguageManagement . getNotice_18 ( ) , GM_account_filename , ( GM_num + 1 ) , level ) ; level = 99 ; } } return level ; }
void test27 ( ) throws Throwable { int int0 = UserManagement . levelIsValid ( 1069 , ( String ) null , 1069 , 1069 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int levelIsValid ( int level , String GM_account_filename , int GM_num , int line_counter ) { if ( level < = 0 ) { Functions . showError ( MultilanguageManagement . getError_16 ( ) , GM_account_filename , ( GM_num + 1 ) , line_counter , level ) ; level = - 1 ; } else { if ( level > 99 ) { / / , GM_account_filename , GM_num + 1 , level Functions . showNotice ( MultilanguageManagement . getNotice_18 ( ) , GM_account_filename , ( GM_num + 1 ) , level ) ; level = 99 ; } } return level ; }
void test29 ( ) throws Throwable { int [ ] intArray0 = new int [ 10 ] ; int int0 = UserManagement . charif_sendallwos ( ( - 225 ) , intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int charif_sendallwos ( int sfd , int [ ] buf ) { Integer i , c = 0 , fd ; for ( i = 0 ; i < char_sessions . size ( ) ; i + + ) { fd = char_sessions . get ( i ) . getAccount_id ( ) ; if ( fd > = 0 & & fd ! = sfd ) { sessions . get ( i ) . func_send ( buf ) ; c + + ; } } return c ; }
void test30 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; int int0 = UserManagement . charif_sendallwos ( 3 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int charif_sendallwos ( int sfd , int [ ] buf ) { Integer i , c = 0 , fd ; for ( i = 0 ; i < char_sessions . size ( ) ; i + + ) { fd = char_sessions . get ( i ) . getAccount_id ( ) ; if ( fd > = 0 & & fd ! = sfd ) { sessions . get ( i ) . func_send ( buf ) ; c + + ; } } return c ; }
void test31 ( ) throws Throwable { Auth_data auth_data0 = UserManagement . addUserTXT ( "C | 'Qa#C ? . WiXKs" , "C | 'Qa#C ? . WiXKs" , "C | 'Qa#C ? . WiXKs" , ' , ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . subNet + " : " + this . charIP + " : " + this . mapIP ; }
void test32 ( ) throws Throwable { Auth_data auth_data0 = UserManagement . getUserTxt ( "3E9 ( < W" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Auth_data getUserTxt ( Integer account_id ) { return auth_dats . get ( account_id ) ; }
void test33 ( ) throws Throwable { Auth_data auth_data0 = UserManagement . getUserTxt ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . subNet + " : " + this . charIP + " : " + this . mapIP ; }
void test34 ( ) throws Throwable { FastTable < Integer > fastTable0 = UserManagement . getAccountIds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return this . subNet + " : " + this . charIP + " : " + this . mapIP ; }
void test38 ( ) throws Throwable { Socket_data socket_data0 = UserManagement . getSessionAt ( 0 ) ; byte [ ] byteArray0 = new byte [ 2 ] ; UserManagement . receiveAllOnlinAccounts ( socket_data0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUsers ( ) { return users ; }
void test1 ( ) throws Throwable { FromClient fromClient0 = new FromClient ( ) ; Socket_data socket_data0 = new Socket_data ( ( Socket ) null , ( IParse ) fromClient0 ) ; Login . logUnknownPackets ( socket_data0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { MySQLDBManagement mySQLDBManagement0 = ( MySQLDBManagement ) Login . getDbManagemtType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IDBManagementLogin getDbManagemtType ( ) { return dbManagemtType ; }
void test7 ( ) throws Throwable { int int0 = Login . getPASSWORDENC ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPASSWORDENC ( ) { return PASSWORDENC ; }
void test10 ( ) throws Throwable { int int0 = Login . mmo_auth_initXML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int mmo_auth_initXML ( ) { File gmacc = new File ( "save / account . xml" ) ; if ( ! gmacc . exists ( ) & & gmacc . length ( ) ! = 0 ) { Functions . showError ( MultilanguageManagement . getError_1 ( ) , ConfigurationManagement . getLoginAthenaConf ( ) . getAccount_filename ( ) ) ; return 1 ; } try { XStream xstream = new XStream ( new DomDriver ( ) ) ; UserManagement . setAuth_dats ( ( FastMap < Integer , Auth_data > ) xstream . fromXML ( Functions . readConf ( gmacc ) ) ) ; } catch ( IOException ex ) { ex . printStackTrace ( ) ; } return 0 ; }
void test0 ( ) throws Throwable { FromChar fromChar0 = new FromChar ( ) ; Socket socket0 = new Socket ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 ) ; byte [ ] byteArray0 = new byte [ 5 ] ; fromChar0 . parse ( socket_data0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEof ( ) { return eof ; }
void test3 ( ) throws Throwable { FromChar fromChar0 = new FromChar ( ) ; Socket_data socket_data0 = new Socket_data ( ( Socket ) null , ( IParse ) fromChar0 ) ; byte [ ] byteArray0 = new byte [ 2 ] ; byteArray0 [ 0 ] = ( byte ) 45 ; byteArray0 [ 1 ] = ( byte ) 39 ; fromChar0 . parse ( socket_data0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEof ( ) { return eof ; }
void test0 ( ) throws Throwable { FromAdmin fromAdmin0 = new FromAdmin ( ) ; byte [ ] byteArray0 = new byte [ 22 ] ; Socket socket0 = new Socket ( ) ; FromChar fromChar0 = new FromChar ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) fromChar0 ) ; int int0 = fromAdmin0 . parse ( byteArray0 , socket_data0 , ( Login ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int parse ( Socket_data session , byte [ ] packet ) { session . func_send ( packets [ packet [ 0 ] + ( packet [ 1 ] * 256 ) ] . execute ( new SessionPacket ( packet ) ) ) ; return 0 ; }
void test1 ( ) throws Throwable { FromAdmin fromAdmin0 = new FromAdmin ( ) ; Socket socket0 = new Socket ( ) ; FromChar fromChar0 = new FromChar ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) fromChar0 ) ; socket0 . close ( ) ; byte [ ] byteArray0 = new byte [ 12 ] ; byteArray0 [ 0 ] = ( byte ) 80 ; int int0 = fromAdmin0 . parse ( socket_data0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int parse ( Socket_data session , byte [ ] packet ) { session . func_send ( packets [ packet [ 0 ] + ( packet [ 1 ] * 256 ) ] . execute ( new SessionPacket ( packet ) ) ) ; return 0 ; }
void test2 ( ) throws Throwable { Socket socket0 = new Socket ( ) ; FromAdmin fromAdmin0 = new FromAdmin ( ) ; byte [ ] byteArray0 = new byte [ 3 ] ; byteArray0 [ 1 ] = ( byte ) 1 ; socket0 . close ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) fromAdmin0 ) ; int int0 = fromAdmin0 . parse ( socket_data0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int parse ( Socket_data session , byte [ ] packet ) { session . func_send ( packets [ packet [ 0 ] + ( packet [ 1 ] * 256 ) ] . execute ( new SessionPacket ( packet ) ) ) ; return 0 ; }
void test3 ( ) throws Throwable { FromAdmin fromAdmin0 = new FromAdmin ( ) ; Socket socket0 = new Socket ( ) ; FromChar fromChar0 = new FromChar ( ) ; Socket_data socket_data0 = new Socket_data ( socket0 , ( IParse ) fromChar0 ) ; byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 1 ] = ( byte ) 122 ; byteArray0 [ 0 ] = ( byte ) 55 ; socket0 . close ( ) ; int int0 = fromAdmin0 . parse ( socket_data0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int parse ( Socket_data session , byte [ ] packet ) { session . func_send ( packets [ packet [ 0 ] + ( packet [ 1 ] * 256 ) ] . execute ( new SessionPacket ( packet ) ) ) ; return 0 ; }
