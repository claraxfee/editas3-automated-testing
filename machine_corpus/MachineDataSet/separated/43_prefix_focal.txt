void test1 ( ) throws Throwable { File file0 = new File ( "Ig7fpRIED" ) ; SerializingFileBuffer < EventWrapper < LoggingEvent > > serializingFileBuffer0 = new SerializingFileBuffer < EventWrapper < LoggingEvent > > ( file0 ) ; Log4jImportCallable log4jImportCallable0 = new Log4jImportCallable ( file0 , ( AppendOperation < EventWrapper < LoggingEvent > > ) serializingFileBuffer0 ) ; File file1 = log4jImportCallable0 . getInputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getInputFile ( ) { return inputFile ; }
void test0 ( ) throws Throwable { LoggingEventReader loggingEventReader0 = new LoggingEventReader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LoggingEventReader ( ) { }
void test0 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( "Fa" ) ; EventIdentifier eventIdentifier0 = new EventIdentifier ( ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( eventIdentifier0 , loggingEvent0 ) ; boolean boolean0 = messageContainsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test1 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( ) ; MessageContainsCondition messageContainsCondition1 = messageContainsCondition0 . clone ( ) ; boolean boolean0 = messageContainsCondition1 . equals ( ( Object ) messageContainsCondition0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test2 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( ) ; String string0 = messageContainsCondition0 . getSearchString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSearchString ( ) { return searchString ; }
void test3 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( ) ; Object object0 = new Object ( ) ; boolean boolean0 = messageContainsCondition0 . isTrue ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test4 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( ) ; messageContainsCondition0 . setSearchString ( "W5 ; " ) ; boolean boolean0 = messageContainsCondition0 . isTrue ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test5 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( ) ; messageContainsCondition0 . setSearchString ( "" ) ; EventWrapper < String > eventWrapper0 = new EventWrapper < String > ( ( EventIdentifier ) null , "" ) ; boolean boolean0 = messageContainsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test6 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( ) ; messageContainsCondition0 . setSearchString ( "message . contains" ) ; EventWrapper < String > eventWrapper0 = new EventWrapper < String > ( ( EventIdentifier ) null , "message . contains" ) ; boolean boolean0 = messageContainsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test7 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( "y" ) ; EventIdentifier eventIdentifier0 = new EventIdentifier ( ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( eventIdentifier0 , loggingEvent0 ) ; Message message0 = new Message ( "y" ) ; loggingEvent0 . setMessage ( message0 ) ; boolean boolean0 = messageContainsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test8 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( "y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test9 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; boolean boolean0 = messageContainsCondition0 . equals ( ( Object ) loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test10 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( ) ; boolean boolean0 = messageContainsCondition0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test11 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( ) ; MessageContainsCondition messageContainsCondition1 = messageContainsCondition0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test12 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( ) ; messageContainsCondition0 . setSearchString ( "message . contains" ) ; MessageContainsCondition messageContainsCondition1 = new MessageContainsCondition ( "message . contains" ) ; boolean boolean0 = messageContainsCondition0 . equals ( ( Object ) messageContainsCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test13 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( ) ; MessageContainsCondition messageContainsCondition1 = new MessageContainsCondition ( " & s$wgQP" ) ; boolean boolean0 = messageContainsCondition0 . equals ( ( Object ) messageContainsCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test14 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( ) ; int int0 = messageContainsCondition0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test15 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( ) ; messageContainsCondition0 . setSearchString ( "W5 ; " ) ; int int0 = messageContainsCondition0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test16 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( ) ; String string0 = messageContainsCondition0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test17 ( ) throws Throwable { MessageContainsCondition messageContainsCondition0 = new MessageContainsCondition ( ) ; messageContainsCondition0 . setSearchString ( "message . contains" ) ; String string0 = messageContainsCondition0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test0 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( " > adnf = > adnf = " ) ; String string0 = loggerStartsWithCondition0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test1 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( ) ; String string0 = loggerStartsWithCondition0 . getSearchString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSearchString ( ) { return searchString ; }
void test2 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( " > adnf = > adnf = " ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( " > adnf = > adnf = " ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( sourceIdentifier0 , 775L , loggingEvent0 ) ; boolean boolean0 = loggerStartsWithCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test3 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( ) ; boolean boolean0 = loggerStartsWithCondition0 . isTrue ( ( Object ) loggerStartsWithCondition0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test4 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( ) ; LoggerStartsWithCondition loggerStartsWithCondition1 = new LoggerStartsWithCondition ( "logger . startsWith" ) ; LoggerStartsWithCondition loggerStartsWithCondition2 = loggerStartsWithCondition1 . clone ( ) ; boolean boolean0 = loggerStartsWithCondition2 . isTrue ( ( Object ) loggerStartsWithCondition0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test5 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( "" , "" ) ; EventWrapper < LoggerStartsWithCondition > eventWrapper0 = new EventWrapper < LoggerStartsWithCondition > ( sourceIdentifier0 , 7L , loggerStartsWithCondition0 ) ; EventIdentifier eventIdentifier0 = eventWrapper0 . getEventIdentifier ( ) ; EventWrapper < Integer > eventWrapper1 = new EventWrapper < Integer > ( ) ; loggerStartsWithCondition0 . setSearchString ( "" ) ; EventWrapper < EventWrapper < Integer > > eventWrapper2 = new EventWrapper < EventWrapper < Integer > > ( eventIdentifier0 , eventWrapper1 ) ; boolean boolean0 = loggerStartsWithCondition0 . isTrue ( ( Object ) eventWrapper2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test6 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( ) ; LoggerStartsWithCondition loggerStartsWithCondition1 = new LoggerStartsWithCondition ( "l" ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( "l" , ( String ) null ) ; EventWrapper < LoggerStartsWithCondition > eventWrapper0 = new EventWrapper < LoggerStartsWithCondition > ( sourceIdentifier0 , ( - 45L ) , loggerStartsWithCondition0 ) ; EventIdentifier eventIdentifier0 = eventWrapper0 . getEventIdentifier ( ) ; EventWrapper < Integer > eventWrapper1 = new EventWrapper < Integer > ( ) ; EventWrapper < EventWrapper < Integer > > eventWrapper2 = new EventWrapper < EventWrapper < Integer > > ( eventIdentifier0 , eventWrapper1 ) ; boolean boolean0 = loggerStartsWithCondition1 . isTrue ( ( Object ) eventWrapper2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test7 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( " > adnf = > adnf = " ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; loggingEvent0 . setLogger ( " > adnf = > adnf = " ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( " > adnf = > adnf = " ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( sourceIdentifier0 , 775L , loggingEvent0 ) ; boolean boolean0 = loggerStartsWithCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test8 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( " > adnf = > adnf = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test9 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( ) ; LoggerStartsWithCondition loggerStartsWithCondition1 = new LoggerStartsWithCondition ( " ] ; wj" ) ; boolean boolean0 = loggerStartsWithCondition0 . equals ( ( Object ) loggerStartsWithCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test10 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( ) ; boolean boolean0 = loggerStartsWithCondition0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test11 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( ) ; boolean boolean0 = loggerStartsWithCondition0 . equals ( ( Object ) "logger . startsWith" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test12 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( ) ; LoggerStartsWithCondition loggerStartsWithCondition1 = new LoggerStartsWithCondition ( "l" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test13 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( ) ; LoggerStartsWithCondition loggerStartsWithCondition1 = new LoggerStartsWithCondition ( "logger . startsWith" ) ; boolean boolean0 = loggerStartsWithCondition1 . equals ( ( Object ) loggerStartsWithCondition0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test14 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( ( String ) null ) ; LoggerStartsWithCondition loggerStartsWithCondition1 = new LoggerStartsWithCondition ( ) ; boolean boolean0 = loggerStartsWithCondition0 . equals ( ( Object ) loggerStartsWithCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test15 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( ) ; int int0 = loggerStartsWithCondition0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test16 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( ) ; loggerStartsWithCondition0 . setSearchString ( "l" ) ; int int0 = loggerStartsWithCondition0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test17 ( ) throws Throwable { LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition ( ) ; String string0 = loggerStartsWithCondition0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test0 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( "ev8nt . contains ( r \" ) " ) ; String string0 = eventContainsCondition0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test1 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( ) ; String string0 = eventContainsCondition0 . getSearchString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSearchString ( ) { return searchString ; }
void test2 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( " = p$npf < 6Ofk8G ] ~" ) ; EventContainsCondition eventContainsCondition1 = eventContainsCondition0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test3 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( "'MOmkd" ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( ( SourceIdentifier ) null , ( - 1992L ) , loggingEvent0 ) ; String [ ] stringArray0 = new String [ 7 ] ; Message message0 = new Message ( "'MOmkd" , stringArray0 ) ; loggingEvent0 . setMessage ( message0 ) ; boolean boolean0 = eventContainsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test4 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( ( String ) null ) ; boolean boolean0 = eventContainsCondition0 . isTrue ( ( Object ) "0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test5 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( " { " ) ; eventContainsCondition0 . isTrue ( ( Object ) "event . contains" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test6 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( "" ) ; EventWrapper < String > eventWrapper0 = new EventWrapper < String > ( ) ; boolean boolean0 = eventContainsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test7 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( " { " ) ; EventWrapper < String > eventWrapper0 = new EventWrapper < String > ( ) ; boolean boolean0 = eventContainsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test8 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( "@'MOmkd" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test9 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( " = p$npf < 6Ofk8G ] ~" ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; LoggerContext loggerContext0 = new LoggerContext ( ) ; loggingEvent0 . setLoggerContext ( loggerContext0 ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( ( SourceIdentifier ) null , 0L , loggingEvent0 ) ; boolean boolean0 = eventContainsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test10 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( " = p$npf < 6Ofk8G ] ~" ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; LoggerContext loggerContext0 = new LoggerContext ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; hashMap0 . put ( "INFO" , "INFO" ) ; loggerContext0 . setProperties ( ( Map < String , String > ) hashMap0 ) ; loggingEvent0 . setLoggerContext ( loggerContext0 ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( ( SourceIdentifier ) null , 0L , loggingEvent0 ) ; boolean boolean0 = eventContainsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test11 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( " = p$npf < 6Ofk8G ] ~" ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; ThreadInfo threadInfo0 = new ThreadInfo ( ( Long ) 0L , "INFO" , ( Long ) 0L , "INFO" ) ; loggingEvent0 . setThreadInfo ( threadInfo0 ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( ( SourceIdentifier ) null , 0L , loggingEvent0 ) ; boolean boolean0 = eventContainsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test12 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( "ev8n , t . contains ( r \" ) " ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; ThreadInfo threadInfo0 = new ThreadInfo ( ) ; loggingEvent0 . setThreadInfo ( threadInfo0 ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( ( SourceIdentifier ) null , 0L , loggingEvent0 ) ; boolean boolean0 = eventContainsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test13 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( " = p$npf < 6Ofk8G ] ~" ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; Marker marker0 = new Marker ( ) ; loggingEvent0 . setMarker ( marker0 ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( ( SourceIdentifier ) null , 0L , loggingEvent0 ) ; boolean boolean0 = eventContainsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test14 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( " = p$npf < 6Ofk8G ] ~" ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; Marker marker0 = new Marker ( ) ; loggingEvent0 . setMarker ( marker0 ) ; Marker marker1 = new Marker ( " = p$npf < 6Ofk8G ] ~" ) ; marker0 . add ( marker1 ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( ( SourceIdentifier ) null , 0L , loggingEvent0 ) ; boolean boolean0 = eventContainsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test15 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( "event . contains ( null ) " ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( "@zG" , "@zG" ) ; EventIdentifier eventIdentifier0 = new EventIdentifier ( sourceIdentifier0 , ( - 32L ) ) ; AccessEvent accessEvent0 = new AccessEvent ( ) ; EventWrapper < AccessEvent > eventWrapper0 = new EventWrapper < AccessEvent > ( eventIdentifier0 , accessEvent0 ) ; boolean boolean0 = eventContainsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test16 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( "ev8nt . contains ( r \" ) " ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; Marker marker0 = new Marker ( ) ; loggingEvent0 . setMarker ( marker0 ) ; marker0 . add ( marker0 ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( ( SourceIdentifier ) null , ( - 20L ) , loggingEvent0 ) ; boolean boolean0 = eventContainsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test17 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( " = p$npf < 6Ofk8G ] ~" ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; loggingEvent0 . setMdc ( ( Map < String , String > ) hashMap0 ) ; hashMap0 . put ( "INFO" , "INFO" ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( ( SourceIdentifier ) null , 0L , loggingEvent0 ) ; boolean boolean0 = eventContainsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test18 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( " = p$npf < 6Ofk8G ] ~" ) ; boolean boolean0 = eventContainsCondition0 . equals ( ( Object ) "INFO" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test19 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( " { " ) ; boolean boolean0 = eventContainsCondition0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test20 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( ) ; EventContainsCondition eventContainsCondition1 = new EventContainsCondition ( ( String ) null ) ; boolean boolean0 = eventContainsCondition0 . equals ( ( Object ) eventContainsCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test21 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( ) ; EventContainsCondition eventContainsCondition1 = new EventContainsCondition ( "event . contains ( null ) " ) ; eventContainsCondition0 . setSearchString ( "@zG" ) ; boolean boolean0 = eventContainsCondition0 . equals ( ( Object ) eventContainsCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test22 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( ) ; EventContainsCondition eventContainsCondition1 = new EventContainsCondition ( "event . contains ( null ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test23 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( ) ; EventContainsCondition eventContainsCondition1 = new EventContainsCondition ( "event . contains ( null ) " ) ; boolean boolean0 = eventContainsCondition0 . equals ( ( Object ) eventContainsCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test24 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( ( String ) null ) ; int int0 = eventContainsCondition0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test25 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( "'MOmkd" ) ; int int0 = eventContainsCondition0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test26 ( ) throws Throwable { EventContainsCondition eventContainsCondition0 = new EventContainsCondition ( ) ; String string0 = eventContainsCondition0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test0 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( "" ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( "" , "" ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( sourceIdentifier0 , ( - 1188L ) , loggingEvent0 ) ; boolean boolean0 = loggerEqualsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test1 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( ) ; String string0 = loggerEqualsCondition0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test2 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( ) ; String string0 = loggerEqualsCondition0 . getSearchString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSearchString ( ) { return searchString ; }
void test3 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( ) ; LoggerEqualsCondition loggerEqualsCondition1 = loggerEqualsCondition0 . clone ( ) ; boolean boolean0 = loggerEqualsCondition0 . equals ( ( Object ) loggerEqualsCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test4 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( ) ; Object object0 = new Object ( ) ; boolean boolean0 = loggerEqualsCondition0 . isTrue ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test5 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( ) ; loggerEqualsCondition0 . setSearchString ( "logger . equals ( null ) " ) ; boolean boolean0 = loggerEqualsCondition0 . isTrue ( ( Object ) "logger . equals ( null ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test6 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( ) ; loggerEqualsCondition0 . setSearchString ( "logger . equals ( null ) " ) ; EventWrapper < String > eventWrapper0 = new EventWrapper < String > ( ( EventIdentifier ) null , "logger . equals ( null ) " ) ; boolean boolean0 = loggerEqualsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test7 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( "Kh - lt : " ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( "Kh - lt : " , "Kh - lt : " ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; loggingEvent0 . setLogger ( "Kh - lt : " ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( sourceIdentifier0 , ( - 1230L ) , loggingEvent0 ) ; boolean boolean0 = loggerEqualsCondition0 . isTrue ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test8 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( "e < hl$ ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( Object value ) { if ( searchString = = null ) { return false ; } if ( value instanceof EventWrapper ) { EventWrapper wrapper = ( EventWrapper ) value ; Object eventObj = wrapper . getEvent ( ) ; if ( searchString . length ( ) = = 0 ) { return true ; } if ( eventObj instanceof LoggingEvent ) { LoggingEvent event = ( LoggingEvent ) eventObj ; { String message = null ; Message messageObj = event . getMessage ( ) ; if ( messageObj ! = null ) { message = messageObj . getMessage ( ) ; } if ( message ! = null ) { if ( checkString ( message ) ) { return true ; } } } { LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String level = "" + event . getLevel ( ) ; if ( checkString ( level ) ) { return true ; } } { String loggerName = event . getLogger ( ) ; if ( checkString ( loggerName ) ) { return true ; } } { ThreadInfo threadInfo = event . getThreadInfo ( ) ; if ( threadInfo ! = null ) { String threadName = threadInfo . getName ( ) ; if ( checkString ( threadName ) ) { return true ; } Long threadId = threadInfo . getId ( ) ; if ( threadId ! = null ) { if ( checkString ( "" + threadId ) ) { return true ; } } } } { Map < String , String > mdcMap = event . getMdc ( ) ; if ( checkMap ( mdcMap ) ) { return true ; } } { Marker marker = event . getMarker ( ) ; if ( marker ! = null ) { if ( checkMarker ( marker , null ) ) { return true ; } } } } else if ( eventObj instanceof AccessEvent ) { AccessEvent event = ( AccessEvent ) eventObj ; { String message = event . getRequestURL ( ) ; if ( checkString ( message ) ) { return true ; } } { de . huxhorn . lilith . data . access . LoggerContext context = event . getLoggerContext ( ) ; if ( context ! = null ) { if ( checkString ( context . getName ( ) ) ) { return true ; } Map < String , String > props = context . getProperties ( ) ; if ( props ! = null ) { for ( Map . Entry < String , String > current : props . entrySet ( ) ) { if ( checkString ( current . getKey ( ) ) ) { return true ; } if ( checkString ( current . getValue ( ) ) ) { return true ; } } } } } { String message = "" + event . getStatusCode ( ) ; if ( checkString ( message ) ) { return true ; } } { Map < String , String > propertyMap = event . getRequestHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String > propertyMap = event . getResponseHeaders ( ) ; if ( checkMap ( propertyMap ) ) { return true ; } } { Map < String , String [ ] > propertyMap = event . getRequestParameters ( ) ; if ( checkArrayMap ( propertyMap ) ) { return true ; } } } } return false ; }
void test9 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( ) ; Object object0 = new Object ( ) ; boolean boolean0 = loggerEqualsCondition0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test10 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( ) ; boolean boolean0 = loggerEqualsCondition0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test11 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( ) ; loggerEqualsCondition0 . setSearchString ( "lES" ) ; LoggerEqualsCondition loggerEqualsCondition1 = new LoggerEqualsCondition ( "F ) 7`tlxDLq / A : kh" ) ; boolean boolean0 = loggerEqualsCondition0 . equals ( ( Object ) loggerEqualsCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test12 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( ) ; loggerEqualsCondition0 . setSearchString ( "lES" ) ; LoggerEqualsCondition loggerEqualsCondition1 = new LoggerEqualsCondition ( "lES" ) ; boolean boolean0 = loggerEqualsCondition0 . equals ( ( Object ) loggerEqualsCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test13 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( ) ; LoggerEqualsCondition loggerEqualsCondition1 = new LoggerEqualsCondition ( " , name = " ) ; boolean boolean0 = loggerEqualsCondition0 . equals ( ( Object ) loggerEqualsCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test14 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( ) ; int int0 = loggerEqualsCondition0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test15 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( "" ) ; int int0 = loggerEqualsCondition0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test16 ( ) throws Throwable { LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition ( ) ; loggerEqualsCondition0 . setSearchString ( "logger . equals ( null ) " ) ; String string0 = loggerEqualsCondition0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test1 ( ) throws Throwable { SourceManagerImpl < Integer > sourceManagerImpl0 = new SourceManagerImpl < Integer > ( ( BlockingCircularBuffer < EventWrapper < Integer > > ) null ) ; FileSplitterEventConsumer < Integer > fileSplitterEventConsumer0 = new FileSplitterEventConsumer < Integer > ( ( FileBufferFactory < Integer > ) null , ( SourceManager < Integer > ) sourceManagerImpl0 ) ; LinkedList < EventWrapper < Integer > > linkedList0 = new LinkedList < EventWrapper < Integer > > ( ) ; fileSplitterEventConsumer0 . consume ( ( List < EventWrapper < Integer > > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test0 ( ) throws Throwable { AlarmSoundAccessEventConsumer alarmSoundAccessEventConsumer0 = new AlarmSoundAccessEventConsumer ( ) ; Sounds sounds0 = alarmSoundAccessEventConsumer0 . getSounds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Sounds getSounds ( ) { return sounds ; }
void test1 ( ) throws Throwable { AlarmSoundAccessEventConsumer alarmSoundAccessEventConsumer0 = new AlarmSoundAccessEventConsumer ( ) ; Class < ? > class0 = AlarmSoundAccessEventConsumer . class ; Sequence sequence0 = new Sequence ( class0 ) ; alarmSoundAccessEventConsumer0 . consume ( ( List < EventWrapper < AccessEvent > > ) sequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test0 ( ) throws Throwable { UserNotificationLoggingEventConsumer userNotificationLoggingEventConsumer0 = new UserNotificationLoggingEventConsumer ( ( Application ) null ) ; LinkedList < EventWrapper < LoggingEvent > > linkedList0 = new LinkedList < EventWrapper < LoggingEvent > > ( ) ; userNotificationLoggingEventConsumer0 . consume ( ( List < EventWrapper < LoggingEvent > > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test1 ( ) throws Throwable { SocketEventConsumer < EventWrapper < Serializable > > socketEventConsumer0 = new SocketEventConsumer < EventWrapper < Serializable > > ( ) ; socketEventConsumer0 . getHost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return port ; }
void test2 ( ) throws Throwable { SocketEventConsumer < Integer > socketEventConsumer0 = new SocketEventConsumer < Integer > ( ( String ) null , 0 ) ; int int0 = socketEventConsumer0 . getPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getReconnectionDelay ( ) { return reconnectionDelay ; }
void test3 ( ) throws Throwable { SocketEventConsumer < EventWrapper < Serializable > > socketEventConsumer0 = new SocketEventConsumer < EventWrapper < Serializable > > ( ) ; int int0 = socketEventConsumer0 . getWriteTimeout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionTimeout ( ) { return connectionTimeout ; }
void test4 ( ) throws Throwable { SocketEventConsumer < EventWrapper < DefaultTableModel > > socketEventConsumer0 = new SocketEventConsumer < EventWrapper < DefaultTableModel > > ( ) ; int int0 = socketEventConsumer0 . getConnectionTimeout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getReconnectionDelay ( ) { return reconnectionDelay ; }
void test5 ( ) throws Throwable { SocketEventConsumer < EventWrapper < Serializable > > socketEventConsumer0 = new SocketEventConsumer < EventWrapper < Serializable > > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWriteTimeout ( ) { return writeTimeout ; }
void test6 ( ) throws Throwable { SocketEventConsumer < Serializable > socketEventConsumer0 = new SocketEventConsumer < Serializable > ( " ) " , 0 ) ; socketEventConsumer0 . setPort ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionTimeout ( ) { return connectionTimeout ; }
void test7 ( ) throws Throwable { SocketEventConsumer < Serializable > socketEventConsumer0 = new SocketEventConsumer < Serializable > ( " ) " , 0 ) ; socketEventConsumer0 . setWriteTimeout ( 635 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionTimeout ( ) { return connectionTimeout ; }
void test8 ( ) throws Throwable { SocketEventConsumer < Serializable > socketEventConsumer0 = new SocketEventConsumer < Serializable > ( "" , 1415 ) ; socketEventConsumer0 . setHost ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionTimeout ( ) { return connectionTimeout ; }
void test9 ( ) throws Throwable { SocketEventConsumer < Serializable > socketEventConsumer0 = new SocketEventConsumer < Serializable > ( " ) " , 0 ) ; socketEventConsumer0 . setReconnectionDelay ( ( long ) 1868 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWriteTimeout ( ) { return writeTimeout ; }
void test0 ( ) throws Throwable { AlarmSoundLoggingEventConsumer alarmSoundLoggingEventConsumer0 = new AlarmSoundLoggingEventConsumer ( ) ; Sounds sounds0 = alarmSoundLoggingEventConsumer0 . getSounds ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Sounds getSounds ( ) { return sounds ; }
void test1 ( ) throws Throwable { AlarmSoundLoggingEventConsumer alarmSoundLoggingEventConsumer0 = new AlarmSoundLoggingEventConsumer ( ) ; Vector < EventWrapper < LoggingEvent > > vector0 = new Vector < EventWrapper < LoggingEvent > > ( ) ; alarmSoundLoggingEventConsumer0 . consume ( ( List < EventWrapper < LoggingEvent > > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void consume ( List < EventWrapper < T > > events ) { fileBuffer . addAll ( events ) ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Wrote { } events to file . " , events . size ( ) ) ; }
void test3 ( ) throws Throwable { AlarmSoundLoggingEventConsumer alarmSoundLoggingEventConsumer0 = new AlarmSoundLoggingEventConsumer ( ) ; Vector < EventWrapper < LoggingEvent > > vector0 = new Vector < EventWrapper < LoggingEvent > > ( ) ; EventIdentifier eventIdentifier0 = new EventIdentifier ( ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( eventIdentifier0 , loggingEvent0 ) ; vector0 . add ( eventWrapper0 ) ; JLayerSounds jLayerSounds0 = new JLayerSounds ( ) ; alarmSoundLoggingEventConsumer0 . setSounds ( ( Sounds ) jLayerSounds0 ) ; alarmSoundLoggingEventConsumer0 . consume ( ( List < EventWrapper < LoggingEvent > > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void consume ( List < EventWrapper < T > > events ) { fileBuffer . addAll ( events ) ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Wrote { } events to file . " , events . size ( ) ) ; }
void test4 ( ) throws Throwable { AlarmSoundLoggingEventConsumer alarmSoundLoggingEventConsumer0 = new AlarmSoundLoggingEventConsumer ( ) ; Vector < EventWrapper < LoggingEvent > > vector0 = new Vector < EventWrapper < LoggingEvent > > ( ) ; EventIdentifier eventIdentifier0 = new EventIdentifier ( ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( eventIdentifier0 , loggingEvent0 ) ; vector0 . add ( eventWrapper0 ) ; JLayerSounds jLayerSounds0 = new JLayerSounds ( ) ; alarmSoundLoggingEventConsumer0 . setSounds ( ( Sounds ) jLayerSounds0 ) ; LoggingEvent . Level loggingEvent_Level0 = LoggingEvent . Level . ERROR ; loggingEvent0 . setLevel ( loggingEvent_Level0 ) ; alarmSoundLoggingEventConsumer0 . consume ( ( List < EventWrapper < LoggingEvent > > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void consume ( List < EventWrapper < T > > events ) { fileBuffer . addAll ( events ) ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Wrote { } events to file . " , events . size ( ) ) ; }
void test1 ( ) throws Throwable { SoftReferenceCachingBuffer < Integer > softReferenceCachingBuffer0 = new SoftReferenceCachingBuffer < Integer > ( ( Buffer < Integer > ) null ) ; Not not0 = new Not ( ) ; FilteringBuffer < Integer > filteringBuffer0 = new FilteringBuffer < Integer > ( ( Buffer < Integer > ) softReferenceCachingBuffer0 , ( Condition ) not0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDisposed ( ) { return disposed ; }
void test2 ( ) throws Throwable { BooleanValues booleanValues0 = BooleanValues . TRUE ; FilteringBuffer < Long > filteringBuffer0 = new FilteringBuffer < Long > ( ( Buffer < Long > ) null , ( Condition ) booleanValues0 ) ; Buffer < Long > buffer0 = FilteringBuffer . resolveSourceBuffer ( ( Buffer < Long > ) filteringBuffer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDisposed ( ) { return disposed ; }
void test3 ( ) throws Throwable { BlockingCircularBuffer < Object > blockingCircularBuffer0 = new BlockingCircularBuffer < Object > ( 162 ) ; BooleanValues booleanValues0 = BooleanValues . TRUE ; FilteringBuffer < Object > filteringBuffer0 = new FilteringBuffer < Object > ( ( Buffer < Object > ) blockingCircularBuffer0 , ( Condition ) booleanValues0 ) ; filteringBuffer0 . clearFilteredIndices ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDisposed ( ) { return disposed ; }
void test4 ( ) throws Throwable { SoftReferenceCachingBuffer < Integer > softReferenceCachingBuffer0 = new SoftReferenceCachingBuffer < Integer > ( ( Buffer < Integer > ) null ) ; Not not0 = new Not ( ) ; FilteringBuffer < Integer > filteringBuffer0 = new FilteringBuffer < Integer > ( ( Buffer < Integer > ) softReferenceCachingBuffer0 , ( Condition ) not0 ) ; boolean boolean0 = filteringBuffer0 . isDisposed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDisposed ( ) { return disposed ; }
void test5 ( ) throws Throwable { BlockingCircularBuffer < Object > blockingCircularBuffer0 = new BlockingCircularBuffer < Object > ( 162 ) ; BooleanValues booleanValues0 = BooleanValues . TRUE ; FilteringBuffer < Object > filteringBuffer0 = new FilteringBuffer < Object > ( ( Buffer < Object > ) blockingCircularBuffer0 , ( Condition ) booleanValues0 ) ; BooleanValues booleanValues1 = ( BooleanValues ) filteringBuffer0 . getCondition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDisposed ( ) { return disposed ; }
void test6 ( ) throws Throwable { SoftReferenceCachingBuffer < Integer > softReferenceCachingBuffer0 = new SoftReferenceCachingBuffer < Integer > ( ( Buffer < Integer > ) null ) ; Not not0 = new Not ( ) ; FilteringBuffer < Integer > filteringBuffer0 = new FilteringBuffer < Integer > ( ( Buffer < Integer > ) softReferenceCachingBuffer0 , ( Condition ) not0 ) ; FilteringBuffer < Integer > filteringBuffer1 = new FilteringBuffer < Integer > ( ( Buffer < Integer > ) filteringBuffer0 , ( Condition ) not0 ) ; filteringBuffer1 . addFilteredIndex ( 0L ) ; filteringBuffer1 . get ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) { return buffer . getSize ( ) ; }
void test7 ( ) throws Throwable { SoftReferenceCachingBuffer < Integer > softReferenceCachingBuffer0 = new SoftReferenceCachingBuffer < Integer > ( ( Buffer < Integer > ) null ) ; Not not0 = new Not ( ) ; FilteringBuffer < Integer > filteringBuffer0 = new FilteringBuffer < Integer > ( ( Buffer < Integer > ) softReferenceCachingBuffer0 , ( Condition ) not0 ) ; long long0 = filteringBuffer0 . getSourceIndex ( ( - 1718L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDisposed ( ) { return disposed ; }
void test8 ( ) throws Throwable { BlockingCircularBuffer < Integer > blockingCircularBuffer0 = new BlockingCircularBuffer < Integer > ( 520 , 520 ) ; Not not0 = new Not ( ) ; FilteringBuffer < Integer > filteringBuffer0 = new FilteringBuffer < Integer > ( ( Buffer < Integer > ) blockingCircularBuffer0 , ( Condition ) not0 ) ; filteringBuffer0 . addFilteredIndex ( ( - 1395L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) { return buffer . getSize ( ) ; }
void test9 ( ) throws Throwable { BlockingCircularBuffer < Integer > blockingCircularBuffer0 = new BlockingCircularBuffer < Integer > ( 520 , 520 ) ; Not not0 = new Not ( ) ; blockingCircularBuffer0 . add ( ( Integer ) 520 ) ; FilteringBuffer < Integer > filteringBuffer0 = new FilteringBuffer < Integer > ( ( Buffer < Integer > ) blockingCircularBuffer0 , ( Condition ) not0 ) ; filteringBuffer0 . addFilteredIndex ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) { return buffer . getSize ( ) ; }
void test1 ( ) throws Throwable { File file0 = new File ( "SLF4J : L" ) ; JulImportCallable julImportCallable0 = new JulImportCallable ( file0 , ( AppendOperation < EventWrapper < LoggingEvent > > ) null ) ; File file1 = julImportCallable0 . getInputFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; / * * * @return the Threshold of this Logger . * / Threshold getThreshold ( ) ; boolean isLoggingEnabled ( Level level ) ; boolean isLoggingEnabled ( Level level , Marker marker ) ; void log ( Level level , String messagePattern , Object . . . args ) ; void log ( Level level , Marker marker , String messagePattern , Object . . . args ) ; boolean isTraceEnabled ( ) ; boolean isTraceEnabled ( Marker marker ) ; void trace ( String messagePattern , Object . . . args ) ; void trace ( Marker marker , String messagePattern , Object . . . args ) ; boolean isDebugEnabled ( ) ; boolean isDebugEnabled ( Marker marker ) ; void debug ( String messagePattern , Object . . . args ) ; void debug ( Marker marker , String messagePattern , Object . . . args ) ; boolean isInfoEnabled ( ) ; boolean isInfoEnabled ( Marker marker ) ; void info ( String messagePattern , Object . . . args ) ; void info ( Marker marker , String messagePattern , Object . . . args ) ; boolean isWarnEnabled ( ) ; boolean isWarnEnabled ( Marker marker ) ; void warn ( String messagePattern , Object . . . args ) ; void warn ( Marker marker , String messagePattern , Object . . . args ) ; boolean isErrorEnabled ( ) ; boolean isErrorEnabled ( Marker marker ) ; void error ( String messagePattern , Object . . . args ) ; void error ( Marker marker , String messagePattern , Object . . . args ) ; }
void test0 ( ) throws Throwable { Slf4JHandler slf4JHandler0 = new Slf4JHandler ( ) ; slf4JHandler0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) throws SecurityException { }
void test1 ( ) throws Throwable { Slf4JHandler slf4JHandler0 = new Slf4JHandler ( ) ; slf4JHandler0 . flush ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void flush ( ) { }
void test2 ( ) throws Throwable { Slf4JHandler slf4JHandler0 = new Slf4JHandler ( ) ; slf4JHandler0 . publish ( ( LogRecord ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void publish ( LogRecord record ) { if ( record ! = null ) { logRecord ( record ) ; } }
void test4 ( ) throws Throwable { Slf4JHandler slf4JHandler0 = new Slf4JHandler ( ) ; Level level0 = Level . ALL ; LogRecord logRecord0 = new LogRecord ( level0 , "h" ) ; slf4JHandler0 . publish ( logRecord0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getSequenceNumber ( ) { return sequenceNumber ; }
void test5 ( ) throws Throwable { Slf4JHandler slf4JHandler0 = new Slf4JHandler ( ) ; Level level0 = Level . FINE ; LogRecord logRecord0 = new LogRecord ( level0 , " . YoP_1i#" ) ; slf4JHandler0 . publish ( logRecord0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getSequenceNumber ( ) { return sequenceNumber ; }
void test6 ( ) throws Throwable { Slf4JHandler slf4JHandler0 = new Slf4JHandler ( ) ; Level level0 = Level . OFF ; LogRecord logRecord0 = new LogRecord ( level0 , ( String ) null ) ; slf4JHandler0 . publish ( logRecord0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getSequenceNumber ( ) { return sequenceNumber ; }
void test7 ( ) throws Throwable { Slf4JHandler slf4JHandler0 = new Slf4JHandler ( ) ; Level level0 = Level . WARNING ; LogRecord logRecord0 = new LogRecord ( level0 , "P^opertySettr . $anCohtainComponent etuned " ) ; slf4JHandler0 . publish ( logRecord0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getSequenceNumber ( ) { return sequenceNumber ; }
void test0 ( ) throws Throwable { AccessMultiplexSocketAppender accessMultiplexSocketAppender0 = new AccessMultiplexSocketAppender ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return port ; }
void test1 ( ) throws Throwable { AccessMultiplexSocketAppender accessMultiplexSocketAppender0 = new AccessMultiplexSocketAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return port ; }
void test2 ( ) throws Throwable { AccessMultiplexSocketAppender accessMultiplexSocketAppender0 = new AccessMultiplexSocketAppender ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return port ; }
void test3 ( ) throws Throwable { AccessMultiplexSocketAppender accessMultiplexSocketAppender0 = new AccessMultiplexSocketAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test0 ( ) throws Throwable { ClassicMultiplexSocketAppender classicMultiplexSocketAppender0 = new ClassicMultiplexSocketAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test1 ( ) throws Throwable { ClassicMultiplexSocketAppender classicMultiplexSocketAppender0 = new ClassicMultiplexSocketAppender ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test2 ( ) throws Throwable { ClassicMultiplexSocketAppender classicMultiplexSocketAppender0 = new ClassicMultiplexSocketAppender ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void preProcess ( LoggingEvent event ) { if ( event ! = null ) { if ( includeCallerData ) { event . getCallerData ( ) ; } } }
void test3 ( ) throws Throwable { ClassicMultiplexSocketAppender classicMultiplexSocketAppender0 = new ClassicMultiplexSocketAppender ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return port ; }
void test4 ( ) throws Throwable { ClassicMultiplexSocketAppender classicMultiplexSocketAppender0 = new ClassicMultiplexSocketAppender ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIncludeCallerData ( ) { return includeCallerData ; }
void test5 ( ) throws Throwable { ClassicMultiplexSocketAppender classicMultiplexSocketAppender0 = new ClassicMultiplexSocketAppender ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test0 ( ) throws Throwable { ZeroDelimitedWriteByteStrategy zeroDelimitedWriteByteStrategy0 = new ZeroDelimitedWriteByteStrategy ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 0 ) ; DataOutputStream dataOutputStream0 = new DataOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; zeroDelimitedWriteByteStrategy0 . writeBytes ( dataOutputStream0 , ( byte [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeBytes ( DataOutputStream dataOutputStream , byte [ ] bytes ) throws IOException { dataOutputStream . writeInt ( bytes . length ) ; if ( bytes . length > 0 ) { dataOutputStream . write ( bytes ) ; } }
void test2 ( ) throws Throwable { ZeroDelimitedWriteByteStrategy zeroDelimitedWriteByteStrategy0 = new ZeroDelimitedWriteByteStrategy ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 0 ) ; byte [ ] byteArray0 = byteArrayOutputStream0 . toByteArray ( ) ; DataOutputStream dataOutputStream0 = new DataOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; zeroDelimitedWriteByteStrategy0 . writeBytes ( dataOutputStream0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeBytes ( DataOutputStream dataOutputStream , byte [ ] bytes ) throws IOException { dataOutputStream . writeInt ( bytes . length ) ; if ( bytes . length > 0 ) { dataOutputStream . write ( bytes ) ; } }
void test1 ( ) throws Throwable { ClassicMultiplexSocketAppender classicMultiplexSocketAppender0 = new ClassicMultiplexSocketAppender ( ) ; int int0 = classicMultiplexSocketAppender0 . getQueueSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return port ; }
void test2 ( ) throws Throwable { ClassicXmlMultiplexSocketAppender classicXmlMultiplexSocketAppender0 = new ClassicXmlMultiplexSocketAppender ( ) ; classicXmlMultiplexSocketAppender0 . setReconnectionDelay ( ( - 1342 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getReconnectionDelay ( ) { return reconnectionDelay ; }
void test3 ( ) throws Throwable { AccessMultiplexSocketAppender accessMultiplexSocketAppender0 = new AccessMultiplexSocketAppender ( ) ; accessMultiplexSocketAppender0 . isDebug ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getQueueSize ( ) { return queueSize ; }
void test4 ( ) throws Throwable { ClassicMultiplexSocketAppender classicMultiplexSocketAppender0 = new ClassicMultiplexSocketAppender ( ) ; int int0 = classicMultiplexSocketAppender0 . getReconnectionDelay ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getQueueSize ( ) { return queueSize ; }
void test5 ( ) throws Throwable { AccessMultiplexSocketAppender accessMultiplexSocketAppender0 = new AccessMultiplexSocketAppender ( ) ; int int0 = accessMultiplexSocketAppender0 . getPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getQueueSize ( ) { return queueSize ; }
void test6 ( ) throws Throwable { ZeroDelimitedClassicXmlMultiplexSocketAppender zeroDelimitedClassicXmlMultiplexSocketAppender0 = new ZeroDelimitedClassicXmlMultiplexSocketAppender ( ) ; zeroDelimitedClassicXmlMultiplexSocketAppender0 . setApplicationIdentifier ( "de . huxhorn . lilith . logback . appender . ClassicXmlMultiplexSocketAppender [ null ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getQueueSize ( ) { return queueSize ; }
void test7 ( ) throws Throwable { ClassicMultiplexSocketAppender classicMultiplexSocketAppender0 = new ClassicMultiplexSocketAppender ( ) ; classicMultiplexSocketAppender0 . setDebug ( true ) ; classicMultiplexSocketAppender0 . setRemoteHosts ( "Em . W : MwN | 0 : Zk% ! 8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getQueueSize ( ) { return queueSize ; }
void test8 ( ) throws Throwable { ClassicMultiplexSocketAppender classicMultiplexSocketAppender0 = new ClassicMultiplexSocketAppender ( ) ; classicMultiplexSocketAppender0 . setRemoteHosts ( "Em . W : MwN | 0 : Zk% ! 8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return port ; }
void test9 ( ) throws Throwable { ClassicMultiplexSocketAppender classicMultiplexSocketAppender0 = new ClassicMultiplexSocketAppender ( true ) ; classicMultiplexSocketAppender0 . start ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return port ; }
void test10 ( ) throws Throwable { AccessMultiplexSocketAppender accessMultiplexSocketAppender0 = new AccessMultiplexSocketAppender ( ) ; accessMultiplexSocketAppender0 . stop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getQueueSize ( ) { return queueSize ; }
void test0 ( ) throws Throwable { ClassicXmlMultiplexSocketAppender classicXmlMultiplexSocketAppender0 = new ClassicXmlMultiplexSocketAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test1 ( ) throws Throwable { ClassicXmlMultiplexSocketAppender classicXmlMultiplexSocketAppender0 = new ClassicXmlMultiplexSocketAppender ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void preProcess ( LoggingEvent event ) { if ( event ! = null ) { if ( includeCallerData ) { event . getCallerData ( ) ; } } }
void test2 ( ) throws Throwable { ClassicXmlMultiplexSocketAppender classicXmlMultiplexSocketAppender0 = new ClassicXmlMultiplexSocketAppender ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return port ; }
void test3 ( ) throws Throwable { ClassicXmlMultiplexSocketAppender classicXmlMultiplexSocketAppender0 = new ClassicXmlMultiplexSocketAppender ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return port ; }
void test4 ( ) throws Throwable { ClassicXmlMultiplexSocketAppender classicXmlMultiplexSocketAppender0 = new ClassicXmlMultiplexSocketAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return port ; }
void test5 ( ) throws Throwable { ClassicXmlMultiplexSocketAppender classicXmlMultiplexSocketAppender0 = new ClassicXmlMultiplexSocketAppender ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIncludeCallerData ( ) { return includeCallerData ; }
void test6 ( ) throws Throwable { ClassicXmlMultiplexSocketAppender classicXmlMultiplexSocketAppender0 = new ClassicXmlMultiplexSocketAppender ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return port ; }
void test0 ( ) throws Throwable { ZeroDelimitedClassicXmlMultiplexSocketAppender zeroDelimitedClassicXmlMultiplexSocketAppender0 = new ZeroDelimitedClassicXmlMultiplexSocketAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return port ; }
void test1 ( ) throws Throwable { ZeroDelimitedClassicXmlMultiplexSocketAppender zeroDelimitedClassicXmlMultiplexSocketAppender0 = new ZeroDelimitedClassicXmlMultiplexSocketAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIncludeCallerData ( ) { return includeCallerData ; }
void test2 ( ) throws Throwable { ZeroDelimitedClassicXmlMultiplexSocketAppender zeroDelimitedClassicXmlMultiplexSocketAppender0 = new ZeroDelimitedClassicXmlMultiplexSocketAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { return port ; }
void test3 ( ) throws Throwable { ZeroDelimitedClassicXmlMultiplexSocketAppender zeroDelimitedClassicXmlMultiplexSocketAppender0 = new ZeroDelimitedClassicXmlMultiplexSocketAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIncludeCallerData ( ) { return includeCallerData ; }
void test4 ( ) throws Throwable { ZeroDelimitedClassicXmlMultiplexSocketAppender zeroDelimitedClassicXmlMultiplexSocketAppender0 = new ZeroDelimitedClassicXmlMultiplexSocketAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void preProcess ( LoggingEvent event ) { if ( event ! = null ) { if ( includeCallerData ) { event . getCallerData ( ) ; } } }
void test0 ( ) throws Throwable { SimpleNDCAdapter simpleNDCAdapter0 = new SimpleNDCAdapter ( ) ; boolean boolean0 = simpleNDCAdapter0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test1 ( ) throws Throwable { SimpleNDCAdapter simpleNDCAdapter0 = new SimpleNDCAdapter ( ) ; int int0 = simpleNDCAdapter0 . getDepth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDepth ( ) ; void setMaximumDepth ( int maximumDepth ) ; boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test2 ( ) throws Throwable { SimpleNDCAdapter simpleNDCAdapter0 = new SimpleNDCAdapter ( ) ; simpleNDCAdapter0 . push ( " ? [ a = vYX" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDepth ( ) ; void setMaximumDepth ( int maximumDepth ) ; boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test3 ( ) throws Throwable { SimpleNDCAdapter simpleNDCAdapter0 = new SimpleNDCAdapter ( ) ; Object [ ] objectArray0 = new Object [ 2 ] ; simpleNDCAdapter0 . push ( " ? [ a = vYX" , objectArray0 ) ; simpleNDCAdapter0 . push ( " ? [ a = vYX" , ( Object [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDepth ( ) ; void setMaximumDepth ( int maximumDepth ) ; boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test4 ( ) throws Throwable { SimpleNDCAdapter simpleNDCAdapter0 = new SimpleNDCAdapter ( ) ; simpleNDCAdapter0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test5 ( ) throws Throwable { SimpleNDCAdapter simpleNDCAdapter0 = new SimpleNDCAdapter ( ) ; simpleNDCAdapter0 . pop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test6 ( ) throws Throwable { SimpleNDCAdapter simpleNDCAdapter0 = new SimpleNDCAdapter ( ) ; Message [ ] messageArray0 = simpleNDCAdapter0 . getContextStack ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDepth ( ) ; void setMaximumDepth ( int maximumDepth ) ; boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test7 ( ) throws Throwable { SimpleNDCAdapter simpleNDCAdapter0 = new SimpleNDCAdapter ( ) ; Object [ ] objectArray0 = new Object [ 2 ] ; simpleNDCAdapter0 . push ( " ? [ a = vYX" , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDepth ( ) ; void setMaximumDepth ( int maximumDepth ) ; boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test8 ( ) throws Throwable { SimpleNDCAdapter simpleNDCAdapter0 = new SimpleNDCAdapter ( ) ; Object [ ] objectArray0 = new Object [ 2 ] ; simpleNDCAdapter0 . push ( " ? [ a = vYX" , objectArray0 ) ; simpleNDCAdapter0 . getContextStack ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test0 ( ) throws Throwable { Message [ ] messageArray0 = NDC . getContextStack ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test6 ( ) throws Throwable { int int0 = NDC . getDepth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDepth ( ) ; void setMaximumDepth ( int maximumDepth ) ; boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test7 ( ) throws Throwable { boolean boolean0 = NDC . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test0 ( ) throws Throwable { NoOpNDCAdapter noOpNDCAdapter0 = new NoOpNDCAdapter ( ) ; Message [ ] messageArray0 = noOpNDCAdapter0 . getContextStack ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test1 ( ) throws Throwable { NoOpNDCAdapter noOpNDCAdapter0 = new NoOpNDCAdapter ( ) ; int int0 = noOpNDCAdapter0 . getDepth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDepth ( ) ; void setMaximumDepth ( int maximumDepth ) ; boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test2 ( ) throws Throwable { NoOpNDCAdapter noOpNDCAdapter0 = new NoOpNDCAdapter ( ) ; boolean boolean0 = noOpNDCAdapter0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test3 ( ) throws Throwable { NoOpNDCAdapter noOpNDCAdapter0 = new NoOpNDCAdapter ( ) ; noOpNDCAdapter0 . push ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test4 ( ) throws Throwable { NoOpNDCAdapter noOpNDCAdapter0 = new NoOpNDCAdapter ( ) ; Object [ ] objectArray0 = new Object [ 2 ] ; noOpNDCAdapter0 . push ( "KmEVSx@DKB" , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test5 ( ) throws Throwable { NoOpNDCAdapter noOpNDCAdapter0 = new NoOpNDCAdapter ( ) ; noOpNDCAdapter0 . pop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDepth ( ) ; void setMaximumDepth ( int maximumDepth ) ; boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test6 ( ) throws Throwable { NoOpNDCAdapter noOpNDCAdapter0 = new NoOpNDCAdapter ( ) ; noOpNDCAdapter0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDepth ( ) ; void setMaximumDepth ( int maximumDepth ) ; boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test7 ( ) throws Throwable { NoOpNDCAdapter noOpNDCAdapter0 = new NoOpNDCAdapter ( ) ; noOpNDCAdapter0 . setMaximumDepth ( ( - 940 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test0 ( ) throws Throwable { LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter ( ) ; String string0 = loggingEventWriter0 . getPreferredPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPreferredPrefix ( ) { return preferredPrefix ; }
void test2 ( ) throws Throwable { LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter ( ) ; LoggingEventWriter . TimeStampType loggingEventWriter_TimeStampType0 = LoggingEventWriter . TimeStampType . ONLY_MILLIS ; loggingEventWriter0 . setTimeStampType ( loggingEventWriter_TimeStampType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPreferredPrefix ( ) { return preferredPrefix ; }
void test4 ( ) throws Throwable { LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter ( ) ; LoggingEventWriter . TimeStampType loggingEventWriter_TimeStampType0 = loggingEventWriter0 . getTimeStampType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TimeStampType getTimeStampType ( ) { return timeStampType ; }
void test5 ( ) throws Throwable { LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter ( ) ; loggingEventWriter0 . setPreferredPrefix ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPreferredPrefix ( ) { return preferredPrefix ; }
void test6 ( ) throws Throwable { LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter ( ) ; boolean boolean0 = loggingEventWriter0 . isWritingSchemaLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWritingSchemaLocation ( ) { return writingSchemaLocation ; }
void test7 ( ) throws Throwable { LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter ( ) ; loggingEventWriter0 . setSortingMdcValues ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSortingMdcValues ( ) { return sortingMdcValues ; }
void test8 ( ) throws Throwable { LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter ( ) ; boolean boolean0 = loggingEventWriter0 . isSortingMdcValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSortingMdcValues ( ) { return sortingMdcValues ; }
void test0 ( ) throws Throwable { LoggingEventsWriter loggingEventsWriter0 = new LoggingEventsWriter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEventSourcePrefix ( ) { return sourceIdentifierWriter . getPreferredPrefix ( ) ; }
void test1 ( ) throws Throwable { LoggingEventsWriter loggingEventsWriter0 = new LoggingEventsWriter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEventSourcePrefix ( ) { return sourceIdentifierWriter . getPreferredPrefix ( ) ; }
void test2 ( ) throws Throwable { LoggingEventsWriter loggingEventsWriter0 = new LoggingEventsWriter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPreferredPrefix ( ) { return preferredPrefix ; }
void test3 ( ) throws Throwable { LoggingEventsWriter loggingEventsWriter0 = new LoggingEventsWriter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEventSourcePrefix ( ) { return sourceIdentifierWriter . getPreferredPrefix ( ) ; }
void test4 ( ) throws Throwable { LoggingEventsWriter loggingEventsWriter0 = new LoggingEventsWriter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEventSourcePrefix ( ) { return sourceIdentifierWriter . getPreferredPrefix ( ) ; }
void test5 ( ) throws Throwable { LoggingEventsWriter loggingEventsWriter0 = new LoggingEventsWriter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test0 ( ) throws Throwable { LoggingEventReader loggingEventReader0 = new LoggingEventReader ( ) ; XMLStreamPlayer xMLStreamPlayer0 = new XMLStreamPlayer ( ) ; LoggingEvent loggingEvent0 = loggingEventReader0 . read ( ( XMLStreamReader ) xMLStreamPlayer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LoggingEvent read ( XMLStreamReader reader ) throws XMLStreamException { LoggingEvent result = null ; String rootNamespace = NAMESPACE_URI ; int type = reader . getEventType ( ) ; if ( XMLStreamConstants . START_DOCUMENT = = type ) { do { reader . next ( ) ; type = reader . getEventType ( ) ; } while ( type ! = XMLStreamConstants . START_ELEMENT ) ; rootNamespace = null ; } if ( XMLStreamConstants . START_ELEMENT = = type & & LOGGING_EVENT_NODE . equals ( reader . getLocalName ( ) ) ) { result = new LoggingEvent ( ) ; result . setLogger ( StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , LOGGER_ATTRIBUTE ) ) ; String levelStr = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , LEVEL_ATTRIBUTE ) ; if ( "FATAL" . equals ( levelStr ) ) { levelStr = "ERROR" ; } try { result . setLevel ( LoggingEvent . Level . valueOf ( levelStr ) ) ; } catch ( IllegalArgumentException ex ) { / / ignore } String threadName = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , THREAD_NAME_ATTRIBUTE ) ; Long threadId = null ; try { String threadIdStr = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , THREAD_ID_ATTRIBUTE ) ; if ( threadIdStr ! = null ) { threadId = Long . valueOf ( threadIdStr ) ; } } catch ( NumberFormatException ex ) { / / ignore } String threadGroupName = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , THREAD_GROUP_NAME_ATTRIBUTE ) ; Long threadGroupId = null ; try { String idStr = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , THREAD_GROUP_ID_ATTRIBUTE ) ; if ( idStr ! = null ) { threadGroupId = Long . valueOf ( idStr ) ; } } catch ( NumberFormatException ex ) { / / ignore } if ( threadName ! = null | | threadId ! = null | | threadGroupId ! = null | | threadGroupName ! = null ) { result . setThreadInfo ( new ThreadInfo ( threadId , threadName , threadGroupId , threadGroupName ) ) ; } String timeStamp = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , TIMESTAMP_ATTRIBUTE ) ; try { result . setTimeStamp ( Long . parseLong ( timeStamp ) ) ; } catch ( NumberFormatException e ) { / / ignore } reader . nextTag ( ) ; String messagePattern = StaxUtilities . readSimpleTextNodeIfAvailable ( reader , NAMESPACE_URI , MESSAGE_NODE ) ; if ( messagePattern ! = null ) { result . setMessage ( new Message ( messagePattern ) ) ; } result . setNdc ( readNdc ( reader ) ) ; result . setThrowable ( readThrowable ( reader ) ) ; result . setCallStack ( readLocationInfo ( reader ) ) ; result . setMdc ( readMdc ( reader ) ) ; return result ; } return result ; }
void test0 ( ) throws Throwable { LoggingEventsReader loggingEventsReader0 = new LoggingEventsReader ( ) ; XMLStreamPlayer xMLStreamPlayer0 = new XMLStreamPlayer ( ) ; LoggingEvents loggingEvents0 = loggingEventsReader0 . read ( ( XMLStreamReader ) xMLStreamPlayer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LoggingEvent read ( XMLStreamReader reader ) throws XMLStreamException { LoggingEvent result = null ; String rootNamespace = NAMESPACE_URI ; int type = reader . getEventType ( ) ; if ( XMLStreamConstants . START_DOCUMENT = = type ) { do { reader . next ( ) ; type = reader . getEventType ( ) ; } while ( type ! = XMLStreamConstants . START_ELEMENT ) ; rootNamespace = null ; } if ( XMLStreamConstants . START_ELEMENT = = type & & LOGGING_EVENT_NODE . equals ( reader . getLocalName ( ) ) ) { result = new LoggingEvent ( ) ; result . setLogger ( StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , LOGGER_ATTRIBUTE ) ) ; String levelStr = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , LEVEL_ATTRIBUTE ) ; if ( "FATAL" . equals ( levelStr ) ) { levelStr = "ERROR" ; } try { result . setLevel ( LoggingEvent . Level . valueOf ( levelStr ) ) ; } catch ( IllegalArgumentException ex ) { / / ignore } String threadName = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , THREAD_NAME_ATTRIBUTE ) ; Long threadId = null ; try { String threadIdStr = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , THREAD_ID_ATTRIBUTE ) ; if ( threadIdStr ! = null ) { threadId = Long . valueOf ( threadIdStr ) ; } } catch ( NumberFormatException ex ) { / / ignore } String threadGroupName = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , THREAD_GROUP_NAME_ATTRIBUTE ) ; Long threadGroupId = null ; try { String idStr = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , THREAD_GROUP_ID_ATTRIBUTE ) ; if ( idStr ! = null ) { threadGroupId = Long . valueOf ( idStr ) ; } } catch ( NumberFormatException ex ) { / / ignore } if ( threadName ! = null | | threadId ! = null | | threadGroupId ! = null | | threadGroupName ! = null ) { result . setThreadInfo ( new ThreadInfo ( threadId , threadName , threadGroupId , threadGroupName ) ) ; } String timeStamp = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , TIMESTAMP_ATTRIBUTE ) ; try { result . setTimeStamp ( Long . parseLong ( timeStamp ) ) ; } catch ( NumberFormatException e ) { / / ignore } reader . nextTag ( ) ; String messagePattern = StaxUtilities . readSimpleTextNodeIfAvailable ( reader , NAMESPACE_URI , MESSAGE_NODE ) ; if ( messagePattern ! = null ) { result . setMessage ( new Message ( messagePattern ) ) ; } result . setNdc ( readNdc ( reader ) ) ; result . setThrowable ( readThrowable ( reader ) ) ; result . setCallStack ( readLocationInfo ( reader ) ) ; result . setMdc ( readMdc ( reader ) ) ; return result ; } return result ; }
void test0 ( ) throws Throwable { StackTraceElementWriter stackTraceElementWriter0 = new StackTraceElementWriter ( ) ; stackTraceElementWriter0 . setPreferredPrefix ( "BhB { MR : + Z%" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPreferredPrefix ( ) { return preferredPrefix ; }
void test1 ( ) throws Throwable { StackTraceElementWriter stackTraceElementWriter0 = new StackTraceElementWriter ( ) ; boolean boolean0 = stackTraceElementWriter0 . isWritingSchemaLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWritingSchemaLocation ( ) { return writingSchemaLocation ; }
void test2 ( ) throws Throwable { StackTraceElementWriter stackTraceElementWriter0 = new StackTraceElementWriter ( ) ; String string0 = stackTraceElementWriter0 . getPreferredPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPreferredPrefix ( ) { return preferredPrefix ; }
void test5 ( ) throws Throwable { StackTraceElementWriter stackTraceElementWriter0 = new StackTraceElementWriter ( ) ; CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; XMLStreamRecorder xMLStreamRecorder0 = new XMLStreamRecorder ( ( Writer ) charArrayWriter0 ) ; ExtendedStackTraceElement extendedStackTraceElement0 = new ExtendedStackTraceElement ( "BhB { MR : + Z%" , "BhB { MR : + Z%" , "BhB { MR : + Z%" , ( - 1 ) , "BhB { MR : + Z%" , "BhB { MR : + Z%" , true ) ; stackTraceElementWriter0 . write ( ( XMLStreamWriter ) xMLStreamRecorder0 , extendedStackTraceElement0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test0 ( ) throws Throwable { StackTraceElementReader stackTraceElementReader0 = new StackTraceElementReader ( ) ; XMLStreamPlayer xMLStreamPlayer0 = new XMLStreamPlayer ( ) ; ExtendedStackTraceElement extendedStackTraceElement0 = stackTraceElementReader0 . read ( ( XMLStreamReader ) xMLStreamPlayer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LoggingEvent read ( XMLStreamReader reader ) throws XMLStreamException { LoggingEvent result = null ; String rootNamespace = NAMESPACE_URI ; int type = reader . getEventType ( ) ; if ( XMLStreamConstants . START_DOCUMENT = = type ) { do { reader . next ( ) ; type = reader . getEventType ( ) ; } while ( type ! = XMLStreamConstants . START_ELEMENT ) ; rootNamespace = null ; } if ( XMLStreamConstants . START_ELEMENT = = type & & LOGGING_EVENT_NODE . equals ( reader . getLocalName ( ) ) ) { result = new LoggingEvent ( ) ; result . setLogger ( StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , LOGGER_ATTRIBUTE ) ) ; String levelStr = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , LEVEL_ATTRIBUTE ) ; if ( "FATAL" . equals ( levelStr ) ) { levelStr = "ERROR" ; } try { result . setLevel ( LoggingEvent . Level . valueOf ( levelStr ) ) ; } catch ( IllegalArgumentException ex ) { / / ignore } String threadName = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , THREAD_NAME_ATTRIBUTE ) ; Long threadId = null ; try { String threadIdStr = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , THREAD_ID_ATTRIBUTE ) ; if ( threadIdStr ! = null ) { threadId = Long . valueOf ( threadIdStr ) ; } } catch ( NumberFormatException ex ) { / / ignore } String threadGroupName = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , THREAD_GROUP_NAME_ATTRIBUTE ) ; Long threadGroupId = null ; try { String idStr = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , THREAD_GROUP_ID_ATTRIBUTE ) ; if ( idStr ! = null ) { threadGroupId = Long . valueOf ( idStr ) ; } } catch ( NumberFormatException ex ) { / / ignore } if ( threadName ! = null | | threadId ! = null | | threadGroupId ! = null | | threadGroupName ! = null ) { result . setThreadInfo ( new ThreadInfo ( threadId , threadName , threadGroupId , threadGroupName ) ) ; } String timeStamp = StaxUtilities . readAttributeValue ( reader , NAMESPACE_URI , TIMESTAMP_ATTRIBUTE ) ; try { result . setTimeStamp ( Long . parseLong ( timeStamp ) ) ; } catch ( NumberFormatException e ) { / / ignore } reader . nextTag ( ) ; String messagePattern = StaxUtilities . readSimpleTextNodeIfAvailable ( reader , NAMESPACE_URI , MESSAGE_NODE ) ; if ( messagePattern ! = null ) { result . setMessage ( new Message ( messagePattern ) ) ; } result . setNdc ( readNdc ( reader ) ) ; result . setThrowable ( readThrowable ( reader ) ) ; result . setCallStack ( readLocationInfo ( reader ) ) ; result . setMdc ( readMdc ( reader ) ) ; return result ; } return result ; }
void test0 ( ) throws Throwable { LoggingXmlDecoder loggingXmlDecoder0 = new LoggingXmlDecoder ( false ) ; byte [ ] byteArray0 = new byte [ 1 ] ; LoggingEvent loggingEvent0 = loggingXmlDecoder0 . decode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LoggingEvent decode ( byte [ ] bytes ) { XMLInputFactory inputFactory = XMLInputFactory . newInstance ( ) ; ByteArrayInputStream in = new ByteArrayInputStream ( bytes ) ; XMLStreamReader reader ; try { if ( compressing ) { GZIPInputStream gis = new GZIPInputStream ( in ) ; reader = inputFactory . createXMLStreamReader ( new InputStreamReader ( gis , "utf - 8" ) ) ; } else { reader = inputFactory . createXMLStreamReader ( new InputStreamReader ( in , "utf - 8" ) ) ; } return loggingEventReader . read ( reader ) ; } catch ( XMLStreamException e ) { / / TODO : change body of catch statement e . printStackTrace ( ) ; } catch ( UnsupportedEncodingException e ) { / / TODO : change body of catch statement e . printStackTrace ( ) ; } catch ( IOException e ) { / / TODO : change body of catch statement e . printStackTrace ( ) ; } finally { IOUtils . closeQuietly ( in ) ; } return null ; }
void test1 ( ) throws Throwable { LoggingXmlDecoder loggingXmlDecoder0 = new LoggingXmlDecoder ( true ) ; byte [ ] byteArray0 = new byte [ 10 ] ; LoggingEvent loggingEvent0 = loggingXmlDecoder0 . decode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LoggingEvent decode ( byte [ ] bytes ) { XMLInputFactory inputFactory = XMLInputFactory . newInstance ( ) ; ByteArrayInputStream in = new ByteArrayInputStream ( bytes ) ; XMLStreamReader reader ; try { if ( compressing ) { GZIPInputStream gis = new GZIPInputStream ( in ) ; reader = inputFactory . createXMLStreamReader ( new InputStreamReader ( gis , "utf - 8" ) ) ; } else { reader = inputFactory . createXMLStreamReader ( new InputStreamReader ( in , "utf - 8" ) ) ; } return loggingEventReader . read ( reader ) ; } catch ( XMLStreamException e ) { / / TODO : change body of catch statement e . printStackTrace ( ) ; } catch ( UnsupportedEncodingException e ) { / / TODO : change body of catch statement e . printStackTrace ( ) ; } catch ( IOException e ) { / / TODO : change body of catch statement e . printStackTrace ( ) ; } finally { IOUtils . closeQuietly ( in ) ; } return null ; }
void test0 ( ) throws Throwable { LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder ( true ) ; loggingEventProtobufEncoder0 . setCompressing ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test1 ( ) throws Throwable { LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder ( true ) ; boolean boolean0 = loggingEventProtobufEncoder0 . isCompressing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test2 ( ) throws Throwable { LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder ( true ) ; loggingEventProtobufEncoder0 . encode ( ( LoggingEvent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test3 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; Marker marker0 = new Marker ( " - " ) ; loggingEvent0 . setMarker ( marker0 ) ; LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder ( false ) ; byte [ ] byteArray0 = loggingEventProtobufEncoder0 . encode ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test4 ( ) throws Throwable { LoggingProto . Marker loggingProto_Marker0 = LoggingEventProtobufEncoder . convert ( ( Marker ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test5 ( ) throws Throwable { Marker marker0 = new Marker ( ) ; marker0 . add ( marker0 ) ; LoggingProto . Marker loggingProto_Marker0 = LoggingEventProtobufEncoder . convert ( marker0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test6 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; ExtendedStackTraceElement [ ] extendedStackTraceElementArray0 = new ExtendedStackTraceElement [ 8 ] ; LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder ( false ) ; ExtendedStackTraceElement extendedStackTraceElement0 = new ExtendedStackTraceElement ( " - " , " - " , " - " , 0 , " - " , " - " , true ) ; extendedStackTraceElementArray0 [ 7 ] = extendedStackTraceElement0 ; loggingEvent0 . setCallStack ( extendedStackTraceElementArray0 ) ; byte [ ] byteArray0 = loggingEventProtobufEncoder0 . encode ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test7 ( ) throws Throwable { LoggingProto . StackTraceElement loggingProto_StackTraceElement0 = LoggingEventProtobufEncoder . convert ( ( ExtendedStackTraceElement ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test8 ( ) throws Throwable { ThrowableInfo throwableInfo0 = new ThrowableInfo ( ) ; ExtendedStackTraceElement [ ] extendedStackTraceElementArray0 = new ExtendedStackTraceElement [ 10 ] ; ExtendedStackTraceElement extendedStackTraceElement0 = new ExtendedStackTraceElement ( ) ; extendedStackTraceElementArray0 [ 3 ] = extendedStackTraceElement0 ; throwableInfo0 . setStackTrace ( extendedStackTraceElementArray0 ) ; LoggingProto . Throwable loggingProto_Throwable0 = LoggingEventProtobufEncoder . convert ( throwableInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test9 ( ) throws Throwable { LoggingProto . Throwable loggingProto_Throwable0 = LoggingEventProtobufEncoder . convert ( ( ThrowableInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test10 ( ) throws Throwable { ThrowableInfo throwableInfo0 = new ThrowableInfo ( ) ; throwableInfo0 . setName ( " < " ) ; LoggingProto . Throwable loggingProto_Throwable0 = LoggingEventProtobufEncoder . convert ( throwableInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test11 ( ) throws Throwable { ThrowableInfo throwableInfo0 = new ThrowableInfo ( ) ; throwableInfo0 . setMessage ( "Marker" ) ; LoggingProto . Throwable loggingProto_Throwable0 = LoggingEventProtobufEncoder . convert ( throwableInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test12 ( ) throws Throwable { ThrowableInfo throwableInfo0 = new ThrowableInfo ( ) ; throwableInfo0 . setOmittedElements ( 1642 ) ; LoggingProto . Throwable loggingProto_Throwable0 = LoggingEventProtobufEncoder . convert ( throwableInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOmittedElements ( ) { return omittedElements ; }
void test15 ( ) throws Throwable { Message message0 = new Message ( ) ; message0 . setMessagePattern ( "a4BB - FhK ; % = ; " ) ; LoggingProto . Message loggingProto_Message0 = LoggingEventProtobufEncoder . convert ( message0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessagePattern ( ) { return messagePattern ; }
void test16 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; String [ ] stringArray0 = new String [ 13 ] ; stringArray0 [ 4 ] = "mi ( ; SQOib_wJ1" ; Message message0 = new Message ( "mi ( ; SQOib_wJ1" , stringArray0 ) ; loggingEvent0 . setMessage ( message0 ) ; LoggingProto . LoggingEvent loggingProto_LoggingEvent0 = LoggingEventProtobufEncoder . convert ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test17 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; Long long0 = new Long ( ( - 16L ) ) ; ThreadInfo threadInfo0 = new ThreadInfo ( long0 , "LoggingEvent [ logger = null , level = DEBUG , message = null , threadInfo = null , loggerContext = null , sequenceNumber = null , timeStamp = null ] " , ( Long ) ( - 16L ) , "LoggingEvent [ logger = null , level = DEBUG , message = null , threadInfo = null , loggerContext = null , sequenceNumber = null , timeStamp = null ] " ) ; loggingEvent0 . setThreadInfo ( threadInfo0 ) ; LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder ( true ) ; byte [ ] byteArray0 = loggingEventProtobufEncoder0 . encode ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test18 ( ) throws Throwable { LoggingProto . ThreadInfo loggingProto_ThreadInfo0 = LoggingEventProtobufEncoder . convert ( ( ThreadInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test19 ( ) throws Throwable { ThreadInfo threadInfo0 = new ThreadInfo ( ) ; LoggingProto . ThreadInfo loggingProto_ThreadInfo0 = LoggingEventProtobufEncoder . convert ( threadInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGroupName ( ) { return groupName ; }
void test20 ( ) throws Throwable { LoggingProto . LoggerContext loggingProto_LoggerContext0 = LoggingEventProtobufEncoder . convert ( ( LoggerContext ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test21 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; LoggerContext loggerContext0 = new LoggerContext ( ) ; loggingEvent0 . setLoggerContext ( loggerContext0 ) ; loggerContext0 . setName ( " - " ) ; LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder ( false ) ; byte [ ] byteArray0 = loggingEventProtobufEncoder0 . encode ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test22 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; Long long0 = new Long ( 44L ) ; loggerContext0 . setBirthTime ( long0 ) ; LoggingProto . LoggerContext loggingProto_LoggerContext0 = LoggingEventProtobufEncoder . convert ( loggerContext0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getBirthTime ( ) { return birthTime ; }
void test23 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; loggerContext0 . setProperties ( ( Map < String , String > ) hashMap0 ) ; LoggingProto . LoggerContext loggingProto_LoggerContext0 = LoggingEventProtobufEncoder . convert ( loggerContext0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test24 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; LoggerContext loggerContext0 = new LoggerContext ( ) ; loggingEvent0 . setLoggerContext ( loggerContext0 ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder ( false ) ; hashMap0 . put ( " - " , " - " ) ; loggerContext0 . setProperties ( ( Map < String , String > ) hashMap0 ) ; byte [ ] byteArray0 = loggingEventProtobufEncoder0 . encode ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test25 ( ) throws Throwable { LoggingProto . StringMap loggingProto_StringMap0 = LoggingEventProtobufEncoder . convert ( ( Map < String , String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test26 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; loggingEvent0 . setMdc ( ( Map < String , String > ) hashMap0 ) ; LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder ( false ) ; hashMap0 . put ( " - " , ( String ) null ) ; byte [ ] byteArray0 = loggingEventProtobufEncoder0 . encode ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test27 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; loggingEvent0 . setLogger ( " - " ) ; LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder ( false ) ; byte [ ] byteArray0 = loggingEventProtobufEncoder0 . encode ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test28 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; loggingEvent0 . setSequenceNumber ( ( Long ) 0L ) ; LoggingProto . LoggingEvent loggingProto_LoggingEvent0 = LoggingEventProtobufEncoder . convert ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test29 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder ( false ) ; LoggingEvent . Level loggingEvent_Level0 = LoggingEvent . Level . INFO ; loggingEvent0 . setLevel ( loggingEvent_Level0 ) ; byte [ ] byteArray0 = loggingEventProtobufEncoder0 . encode ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test30 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; LoggingEvent . Level loggingEvent_Level0 = LoggingEvent . Level . TRACE ; loggingEvent0 . setLevel ( loggingEvent_Level0 ) ; LoggingProto . LoggingEvent loggingProto_LoggingEvent0 = LoggingEventProtobufEncoder . convert ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test31 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; LoggingEvent . Level loggingEvent_Level0 = LoggingEvent . Level . DEBUG ; loggingEvent0 . setLevel ( loggingEvent_Level0 ) ; LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder ( true ) ; byte [ ] byteArray0 = loggingEventProtobufEncoder0 . encode ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test32 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; LoggingEvent . Level loggingEvent_Level0 = LoggingEvent . Level . WARN ; loggingEvent0 . setLevel ( loggingEvent_Level0 ) ; LoggingProto . LoggingEvent loggingProto_LoggingEvent0 = LoggingEventProtobufEncoder . convert ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test33 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; LoggingEvent . Level loggingEvent_Level0 = LoggingEvent . Level . ERROR ; loggingEvent0 . setLevel ( loggingEvent_Level0 ) ; LoggingProto . LoggingEvent loggingProto_LoggingEvent0 = LoggingEventProtobufEncoder . convert ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Level getLevel ( ) { return level ; }
void test34 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; ThrowableInfo throwableInfo0 = new ThrowableInfo ( ) ; loggingEvent0 . setThrowable ( throwableInfo0 ) ; LoggingProto . LoggingEvent loggingProto_LoggingEvent0 = LoggingEventProtobufEncoder . convert ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test35 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; Long long0 = new Long ( 0L ) ; loggingEvent0 . setTimeStamp ( long0 ) ; LoggingProto . LoggingEvent loggingProto_LoggingEvent0 = LoggingEventProtobufEncoder . convert ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test36 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; loggingEvent0 . setMdc ( ( Map < String , String > ) hashMap0 ) ; LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder ( false ) ; byte [ ] byteArray0 = loggingEventProtobufEncoder0 . encode ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test37 ( ) throws Throwable { LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; String [ ] stringArray0 = new String [ 13 ] ; Message message0 = new Message ( "mi ( ; SQOib_wJ1" , stringArray0 ) ; Message [ ] messageArray0 = new Message [ 3 ] ; messageArray0 [ 0 ] = message0 ; messageArray0 [ 1 ] = message0 ; messageArray0 [ 2 ] = messageArray0 [ 0 ] ; loggingEvent0 . setNdc ( messageArray0 ) ; LoggingProto . LoggingEvent loggingProto_LoggingEvent0 = LoggingEventProtobufEncoder . convert ( loggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test0 ( ) throws Throwable { LoggingEventProtobufDecoder loggingEventProtobufDecoder0 = new LoggingEventProtobufDecoder ( false ) ; boolean boolean0 = loggingEventProtobufDecoder0 . isCompressing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test1 ( ) throws Throwable { LoggingEventProtobufDecoder loggingEventProtobufDecoder0 = new LoggingEventProtobufDecoder ( false ) ; loggingEventProtobufDecoder0 . setCompressing ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test2 ( ) throws Throwable { LoggingEventProtobufDecoder loggingEventProtobufDecoder0 = new LoggingEventProtobufDecoder ( false ) ; byte [ ] byteArray0 = new byte [ 10 ] ; loggingEventProtobufDecoder0 . decode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; LoggingEventProtobufDecoder loggingEventProtobufDecoder0 = new LoggingEventProtobufDecoder ( true ) ; loggingEventProtobufDecoder0 . decode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test4 ( ) throws Throwable { ByteString byteString0 = ByteString . EMPTY ; ExtensionRegistry extensionRegistry0 = ExtensionRegistry . newInstance ( ) ; LoggingProto . LoggingEvent loggingProto_LoggingEvent0 = LoggingProto . LoggingEvent . parseFrom ( byteString0 , extensionRegistry0 ) ; LoggingProto . Marker loggingProto_Marker0 = loggingProto_LoggingEvent0 . getMarker ( ) ; Marker marker0 = LoggingEventProtobufDecoder . convert ( loggingProto_Marker0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test5 ( ) throws Throwable { Marker marker0 = LoggingEventProtobufDecoder . convert ( ( LoggingProto . Marker ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test6 ( ) throws Throwable { ByteString byteString0 = ByteString . EMPTY ; LoggingProto . StackTraceElement loggingProto_StackTraceElement0 = LoggingProto . StackTraceElement . parseFrom ( byteString0 ) ; ExtendedStackTraceElement extendedStackTraceElement0 = LoggingEventProtobufDecoder . convert ( loggingProto_StackTraceElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test7 ( ) throws Throwable { ExtendedStackTraceElement extendedStackTraceElement0 = LoggingEventProtobufDecoder . convert ( ( LoggingProto . StackTraceElement ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test8 ( ) throws Throwable { ByteString byteString0 = ByteString . EMPTY ; ExtensionRegistry extensionRegistry0 = ExtensionRegistry . newInstance ( ) ; LoggingProto . Throwable loggingProto_Throwable0 = LoggingProto . Throwable . parseFrom ( byteString0 , extensionRegistry0 ) ; ThrowableInfo throwableInfo0 = LoggingEventProtobufDecoder . convert ( loggingProto_Throwable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test9 ( ) throws Throwable { ThrowableInfo throwableInfo0 = LoggingEventProtobufDecoder . convert ( ( LoggingProto . Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test10 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 14 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( int ) ( byte ) ( - 38 ) , ( int ) ( byte ) ( - 38 ) ) ; LoggingProto . Message loggingProto_Message0 = LoggingProto . Message . parseFrom ( ( InputStream ) byteArrayInputStream0 ) ; Message message0 = LoggingEventProtobufDecoder . convert ( loggingProto_Message0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test11 ( ) throws Throwable { Message message0 = LoggingEventProtobufDecoder . convert ( ( LoggingProto . Message ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test12 ( ) throws Throwable { LoggingProto . ThreadInfo loggingProto_ThreadInfo0 = LoggingProto . ThreadInfo . getDefaultInstance ( ) ; ThreadInfo threadInfo0 = LoggingEventProtobufDecoder . convert ( loggingProto_ThreadInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test13 ( ) throws Throwable { ThreadInfo threadInfo0 = LoggingEventProtobufDecoder . convert ( ( LoggingProto . ThreadInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test14 ( ) throws Throwable { LoggingProto . LoggingEvent loggingProto_LoggingEvent0 = LoggingProto . LoggingEvent . getDefaultInstance ( ) ; LoggingProto . LoggerContext loggingProto_LoggerContext0 = loggingProto_LoggingEvent0 . getLoggerContext ( ) ; LoggerContext loggerContext0 = LoggingEventProtobufDecoder . convert ( loggingProto_LoggerContext0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test15 ( ) throws Throwable { LoggerContext loggerContext0 = LoggingEventProtobufDecoder . convert ( ( LoggingProto . LoggerContext ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test16 ( ) throws Throwable { ByteString byteString0 = ByteString . EMPTY ; ExtensionRegistry extensionRegistry0 = ExtensionRegistry . newInstance ( ) ; LoggingProto . StringMap loggingProto_StringMap0 = LoggingProto . StringMap . parseFrom ( byteString0 , extensionRegistry0 ) ; Map < String , String > map0 = LoggingEventProtobufDecoder . convert ( loggingProto_StringMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test17 ( ) throws Throwable { Map < String , String > map0 = LoggingEventProtobufDecoder . convert ( ( LoggingProto . StringMap ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test18 ( ) throws Throwable { LoggingProto . LoggingEvent loggingProto_LoggingEvent0 = LoggingProto . LoggingEvent . getDefaultInstance ( ) ; LoggingEvent loggingEvent0 = LoggingEventProtobufDecoder . convert ( loggingProto_LoggingEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test0 ( ) throws Throwable { LoggingEventWrapperProtobufEncoder loggingEventWrapperProtobufEncoder0 = new LoggingEventWrapperProtobufEncoder ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test1 ( ) throws Throwable { LoggingEventWrapperProtobufEncoder loggingEventWrapperProtobufEncoder0 = new LoggingEventWrapperProtobufEncoder ( false ) ; boolean boolean0 = loggingEventWrapperProtobufEncoder0 . isCompressing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test2 ( ) throws Throwable { LoggingEventWrapperProtobufEncoder loggingEventWrapperProtobufEncoder0 = new LoggingEventWrapperProtobufEncoder ( false ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( ) ; byte [ ] byteArray0 = loggingEventWrapperProtobufEncoder0 . encode ( eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test3 ( ) throws Throwable { LoggingEventWrapperProtobufEncoder loggingEventWrapperProtobufEncoder0 = new LoggingEventWrapperProtobufEncoder ( true ) ; loggingEventWrapperProtobufEncoder0 . encode ( ( EventWrapper < LoggingEvent > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test4 ( ) throws Throwable { LoggingEventWrapperProtobufEncoder loggingEventWrapperProtobufEncoder0 = new LoggingEventWrapperProtobufEncoder ( true ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( " ( nw\"P\"S > UW% ? / j5" ) ; LoggingEvent loggingEvent0 = new LoggingEvent ( ) ; EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( sourceIdentifier0 , 1614L , loggingEvent0 ) ; byte [ ] byteArray0 = loggingEventWrapperProtobufEncoder0 . encode ( eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test5 ( ) throws Throwable { EventWrapper < LoggingEvent > eventWrapper0 = new EventWrapper < LoggingEvent > ( ( EventIdentifier ) null , ( LoggingEvent ) null ) ; LoggingProto . EventWrapper loggingProto_EventWrapper0 = LoggingEventWrapperProtobufEncoder . convert ( eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test6 ( ) throws Throwable { LoggingProto . EventIdentifier loggingProto_EventIdentifier0 = LoggingEventWrapperProtobufEncoder . convert ( ( EventIdentifier ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test7 ( ) throws Throwable { LoggingProto . SourceIdentifier loggingProto_SourceIdentifier0 = LoggingEventWrapperProtobufEncoder . convert ( ( SourceIdentifier ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test8 ( ) throws Throwable { SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( ) ; LoggingProto . SourceIdentifier loggingProto_SourceIdentifier0 = LoggingEventWrapperProtobufEncoder . convert ( sourceIdentifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test9 ( ) throws Throwable { SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( "" , "" ) ; LoggingProto . SourceIdentifier loggingProto_SourceIdentifier0 = LoggingEventWrapperProtobufEncoder . convert ( sourceIdentifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test0 ( ) throws Throwable { LoggingEventWrapperProtobufDecoder loggingEventWrapperProtobufDecoder0 = new LoggingEventWrapperProtobufDecoder ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test1 ( ) throws Throwable { LoggingEventWrapperProtobufDecoder loggingEventWrapperProtobufDecoder0 = new LoggingEventWrapperProtobufDecoder ( true ) ; boolean boolean0 = loggingEventWrapperProtobufDecoder0 . isCompressing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test2 ( ) throws Throwable { LoggingEventWrapperProtobufDecoder loggingEventWrapperProtobufDecoder0 = new LoggingEventWrapperProtobufDecoder ( true ) ; byte [ ] byteArray0 = new byte [ 4 ] ; loggingEventWrapperProtobufDecoder0 . decode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test3 ( ) throws Throwable { LoggingProto . EventWrapper loggingProto_EventWrapper0 = LoggingProto . EventWrapper . getDefaultInstance ( ) ; EventWrapper < LoggingEvent > eventWrapper0 = LoggingEventWrapperProtobufDecoder . convert ( loggingProto_EventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test4 ( ) throws Throwable { ExtensionRegistry extensionRegistry0 = ExtensionRegistry . getEmptyRegistry ( ) ; LoggingProto . EventIdentifier loggingProto_EventIdentifier0 = LoggingProto . EventIdentifier . parseFrom ( ( InputStream ) null , extensionRegistry0 ) ; EventIdentifier eventIdentifier0 = LoggingEventWrapperProtobufDecoder . convert ( loggingProto_EventIdentifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test5 ( ) throws Throwable { EventIdentifier eventIdentifier0 = LoggingEventWrapperProtobufDecoder . convert ( ( LoggingProto . EventIdentifier ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test6 ( ) throws Throwable { LoggingProto . SourceIdentifier loggingProto_SourceIdentifier0 = LoggingProto . SourceIdentifier . getDefaultInstance ( ) ; SourceIdentifier sourceIdentifier0 = LoggingEventWrapperProtobufDecoder . convert ( loggingProto_SourceIdentifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test7 ( ) throws Throwable { SourceIdentifier sourceIdentifier0 = LoggingEventWrapperProtobufDecoder . convert ( ( LoggingProto . SourceIdentifier ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test0 ( ) throws Throwable { ExtensionRegistry extensionRegistry0 = ExtensionRegistry . getEmptyRegistry ( ) ; LoggingProto . LoggingEvent loggingProto_LoggingEvent0 = LoggingProto . LoggingEvent . parseFrom ( ( InputStream ) null , extensionRegistry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getSequenceNumber ( ) { return sequenceNumber ; }
void test1 ( ) throws Throwable { LoggingProto . EventWrapper loggingProto_EventWrapper0 = LoggingProto . EventWrapper . parseFrom ( ( InputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T getEvent ( ) { return event ; }
void test2 ( ) throws Throwable { LoggingProto . Level loggingProto_Level0 = LoggingProto . Level . ERROR ; Descriptors . EnumValueDescriptor descriptors_EnumValueDescriptor0 = loggingProto_Level0 . getValueDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( int ) ( byte ) 53 , ( - 1069 ) ) ; CodedInputStream codedInputStream0 = CodedInputStream . newInstance ( ( InputStream ) byteArrayInputStream0 ) ; LoggingProto . LoggingEvent loggingProto_LoggingEvent0 = LoggingProto . LoggingEvent . parseFrom ( codedInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getTimeStamp ( ) { return timeStamp ; }
void test4 ( ) throws Throwable { LoggingProto . LoggerContext loggingProto_LoggerContext0 = LoggingProto . LoggerContext . parseFrom ( ( InputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getBirthTime ( ) { return birthTime ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( int ) ( byte ) 53 , ( - 1069 ) ) ; ExtensionRegistry extensionRegistry0 = ExtensionRegistry . getEmptyRegistry ( ) ; LoggingProto . Message loggingProto_Message0 = LoggingProto . Message . parseFrom ( ( InputStream ) byteArrayInputStream0 , extensionRegistry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test7 ( ) throws Throwable { ExtensionRegistry extensionRegistry0 = ExtensionRegistry . getEmptyRegistry ( ) ; LoggingProto . SourceIdentifier loggingProto_SourceIdentifier0 = LoggingProto . SourceIdentifier . parseFrom ( ( InputStream ) null , extensionRegistry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test8 ( ) throws Throwable { LoggingProto . LoggerContext loggingProto_LoggerContext0 = LoggingProto . LoggerContext . parseFrom ( ( InputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getBirthTime ( ) { return birthTime ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; ExtensionRegistry extensionRegistry0 = ExtensionRegistry . getEmptyRegistry ( ) ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , 480 , 0 ) ; LoggingProto . StackTraceElement loggingProto_StackTraceElement0 = LoggingProto . StackTraceElement . parseFrom ( ( InputStream ) byteArrayInputStream0 , extensionRegistry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLineNumber ( ) { return lineNumber ; }
void test10 ( ) throws Throwable { UnknownFieldSet unknownFieldSet0 = UnknownFieldSet . parseFrom ( ( InputStream ) null ) ; ByteString byteString0 = unknownFieldSet0 . toByteString ( ) ; LoggingProto . NestedDiagnosticContext loggingProto_NestedDiagnosticContext0 = LoggingProto . NestedDiagnosticContext . parseFrom ( byteString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test11 ( ) throws Throwable { LoggingProto . LoggerContext loggingProto_LoggerContext0 = LoggingProto . LoggerContext . parseFrom ( ( InputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test12 ( ) throws Throwable { LoggingProto . LoggerContext loggingProto_LoggerContext0 = LoggingProto . LoggerContext . parseFrom ( ( InputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getBirthTime ( ) { return birthTime ; }
void test14 ( ) throws Throwable { LoggingProto . ThreadInfo loggingProto_ThreadInfo0 = LoggingProto . ThreadInfo . parseFrom ( ( InputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getGroupId ( ) { return groupId ; }
void test15 ( ) throws Throwable { ByteString byteString0 = ByteString . EMPTY ; ExtensionRegistry extensionRegistry0 = ExtensionRegistry . getEmptyRegistry ( ) ; LoggingProto . ThreadInfo loggingProto_ThreadInfo0 = LoggingProto . ThreadInfo . parseFrom ( byteString0 , extensionRegistry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getId ( ) { return id ; }
void test16 ( ) throws Throwable { LoggingProto . ThreadInfo loggingProto_ThreadInfo0 = LoggingProto . ThreadInfo . parseFrom ( ( InputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getGroupId ( ) { return groupId ; }
void test20 ( ) throws Throwable { LoggingProto . Throwable loggingProto_Throwable0 = LoggingProto . Throwable . parseFrom ( ( InputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOmittedElements ( ) { return omittedElements ; }
void test21 ( ) throws Throwable { Descriptors . Descriptor descriptors_Descriptor0 = LoggingProto . Throwable . getDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" com . google . protobuf . Descriptors . FileDescriptor getDescriptor ( ) { return descriptor ; }
void test22 ( ) throws Throwable { LoggingProto . Marker loggingProto_Marker0 = LoggingProto . Marker . getDefaultInstance ( ) ; ByteString byteString0 = loggingProto_Marker0 . toByteString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" StackTraceElement getStackTraceElement ( ) { return new StackTraceElement ( className , methodName , fileName , lineNumber ) ; }
void test23 ( ) throws Throwable { Descriptors . Descriptor descriptors_Descriptor0 = LoggingProto . EventIdentifier . getDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; / * * * @return the Threshold of this Logger . * / Threshold getThreshold ( ) ; boolean isLoggingEnabled ( Level level ) ; boolean isLoggingEnabled ( Level level , Marker marker ) ; void log ( Level level , String messagePattern , Object . . . args ) ; void log ( Level level , Marker marker , String messagePattern , Object . . . args ) ; boolean isTraceEnabled ( ) ; boolean isTraceEnabled ( Marker marker ) ; void trace ( String messagePattern , Object . . . args ) ; void trace ( Marker marker , String messagePattern , Object . . . args ) ; boolean isDebugEnabled ( ) ; boolean isDebugEnabled ( Marker marker ) ; void debug ( String messagePattern , Object . . . args ) ; void debug ( Marker marker , String messagePattern , Object . . . args ) ; boolean isInfoEnabled ( ) ; boolean isInfoEnabled ( Marker marker ) ; void info ( String messagePattern , Object . . . args ) ; void info ( Marker marker , String messagePattern , Object . . . args ) ; boolean isWarnEnabled ( ) ; boolean isWarnEnabled ( Marker marker ) ; void warn ( String messagePattern , Object . . . args ) ; void warn ( Marker marker , String messagePattern , Object . . . args ) ; boolean isErrorEnabled ( ) ; boolean isErrorEnabled ( Marker marker ) ; void error ( String messagePattern , Object . . . args ) ; void error ( Marker marker , String messagePattern , Object . . . args ) ; }
void test25 ( ) throws Throwable { ExtensionRegistry extensionRegistry0 = ExtensionRegistry . getEmptyRegistry ( ) ; LoggingProto . StringMap loggingProto_StringMap0 = LoggingProto . StringMap . parseFrom ( ( InputStream ) null , extensionRegistry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test26 ( ) throws Throwable { LoggingProto . EventWrapper loggingProto_EventWrapper0 = LoggingProto . EventWrapper . getDefaultInstance ( ) ; LoggingProto . EventWrapper loggingProto_EventWrapper1 = ( LoggingProto . EventWrapper ) loggingProto_EventWrapper0 . getDefaultInstanceForType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test27 ( ) throws Throwable { LoggingProto . LoggerContext loggingProto_LoggerContext0 = LoggingProto . LoggerContext . parseFrom ( ( InputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getBirthTime ( ) { return birthTime ; }
void test0 ( ) throws Throwable { TransformingEncoder transformingEncoder0 = new TransformingEncoder ( false ) ; CompressingSerializableCodec < LoggingEvent > compressingSerializableCodec0 = new CompressingSerializableCodec < LoggingEvent > ( ) ; transformingEncoder0 . setLilithEncoder ( ( Encoder < LoggingEvent > ) compressingSerializableCodec0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInSameThread ( ) { return inSameThread ; }
void test1 ( ) throws Throwable { TransformingEncoder transformingEncoder0 = new TransformingEncoder ( false ) ; boolean boolean0 = transformingEncoder0 . isInSameThread ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInSameThread ( ) { return inSameThread ; }
void test3 ( ) throws Throwable { TransformingEncoder transformingEncoder0 = new TransformingEncoder ( true ) ; transformingEncoder0 . getLilithEncoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInSameThread ( ) { return inSameThread ; }
void test4 ( ) throws Throwable { TransformingEncoder transformingEncoder0 = new TransformingEncoder ( false ) ; String string0 = transformingEncoder0 . getApplicationIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInSameThread ( ) { return inSameThread ; }
void test0 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRequestURI ( "rQD ? 3l^1^q , ^`W1`F" ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; boolean boolean0 = accessEvent0 . equals ( ( Object ) accessEvent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test1 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; accessEvent0 . setRequestHeaders ( ( Map < String , String > ) hashMap0 ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; boolean boolean0 = accessEvent0 . equals ( ( Object ) accessEvent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test2 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; String string0 = accessEvent0 . getRequestURL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRequestURL ( ) { return requestURL ; }
void test4 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRemoteUser ( "Zz ? 0wR9SpH g`" ) ; accessEvent0 . setRemoteHost ( "Zz ? 0wR9SpH g`" ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; accessEvent1 . setRemoteHost ( "Zz ? 0wR9SpH g`" ) ; boolean boolean0 = accessEvent0 . equals ( ( Object ) accessEvent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test5 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; String string0 = accessEvent0 . getServerName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerName ( ) { return serverName ; }
void test6 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; Long long0 = new Long ( 14L ) ; accessEvent0 . setTimeStamp ( long0 ) ; accessEvent0 . setRemoteUser ( "Zz ? 0wR9SpH g`" ) ; accessEvent0 . setRemoteHost ( "Zz ? 0wR9SpH g`" ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; accessEvent1 . setRemoteHost ( "Zz ? 0wR9SpH g`" ) ; accessEvent1 . setRemoteUser ( "Zz ? 0wR9SpH g`" ) ; boolean boolean0 = accessEvent0 . equals ( ( Object ) accessEvent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test7 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; String string0 = accessEvent0 . getRequestURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRequestURI ( ) { return requestURI ; }
void test8 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; LoggerContext loggerContext0 = accessEvent0 . getLoggerContext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LoggerContext getLoggerContext ( ) { return loggerContext ; }
void test9 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; String string0 = accessEvent0 . getMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMethod ( ) { return method ; }
void test10 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setLocalPort ( 1671 ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; boolean boolean0 = accessEvent0 . equals ( ( Object ) accessEvent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalPort ( ) { return localPort ; }
void test11 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; Map < String , String > map0 = accessEvent0 . getResponseHeaders ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , String > getResponseHeaders ( ) { return responseHeaders ; }
void test12 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setServerName ( "d - Wx + " ) ; int int0 = accessEvent0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test13 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; HashMap < String , String [ ] > hashMap0 = new HashMap < String , String [ ] > ( ) ; accessEvent0 . setRequestParameters ( ( Map < String , String [ ] > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test14 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; Map < String , String [ ] > map0 = accessEvent0 . getRequestParameters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , String [ ] > getRequestParameters ( ) { return requestParameters ; }
void test15 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setStatusCode ( 7 ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; boolean boolean0 = accessEvent0 . equals ( ( Object ) accessEvent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatusCode ( ) { return statusCode ; }
void test16 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; String string0 = accessEvent0 . getRemoteUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRemoteUser ( ) { return remoteUser ; }
void test17 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; accessEvent0 . setResponseHeaders ( ( Map < String , String > ) hashMap0 ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; boolean boolean0 = accessEvent0 . equals ( ( Object ) accessEvent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test18 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setMethod ( "" ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; boolean boolean0 = accessEvent0 . equals ( ( Object ) accessEvent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test19 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; String string0 = accessEvent0 . getRemoteHost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRemoteHost ( ) { return remoteHost ; }
void test20 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; String string0 = accessEvent0 . getProtocol ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProtocol ( ) { return protocol ; }
void test21 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; Map < String , String > map0 = accessEvent0 . getRequestHeaders ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , String > getRequestHeaders ( ) { return requestHeaders ; }
void test22 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; String string0 = accessEvent0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test23 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; int int0 = accessEvent0 . getStatusCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatusCode ( ) { return statusCode ; }
void test24 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; int int0 = accessEvent0 . getLocalPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalPort ( ) { return localPort ; }
void test25 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; String string0 = accessEvent0 . getRemoteAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRemoteAddress ( ) { return remoteAddress ; }
void test26 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test27 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; boolean boolean0 = accessEvent0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test28 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; boolean boolean0 = accessEvent0 . equals ( ( Object ) "7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test29 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; LoggerContext loggerContext0 = new LoggerContext ( ) ; accessEvent0 . setLoggerContext ( loggerContext0 ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; boolean boolean0 = accessEvent0 . equals ( ( Object ) accessEvent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test30 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; LoggerContext loggerContext0 = new LoggerContext ( ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; accessEvent0 . setLoggerContext ( loggerContext0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test31 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setMethod ( "AccessEvent [ " ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test32 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test33 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test34 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRemoteAddress ( "" ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; boolean boolean0 = accessEvent0 . equals ( ( Object ) accessEvent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test35 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; accessEvent1 . setRemoteAddress ( "AccessEvent [ loggerContext = null , timeStamp = null ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test36 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test37 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRemoteHost ( "Zz ? 0wR9SpH g`" ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; boolean boolean0 = accessEvent0 . equals ( ( Object ) accessEvent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test38 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test39 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; accessEvent0 . setRequestHeaders ( ( Map < String , String > ) hashMap0 ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test40 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRequestURI ( "loggeKContext = " ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; boolean boolean0 = accessEvent1 . equals ( ( Object ) accessEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test41 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRequestURL ( "6sYUw . \u0002XXCkET" ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; boolean boolean0 = accessEvent0 . equals ( ( Object ) accessEvent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test42 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test43 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; accessEvent0 . setResponseHeaders ( ( Map < String , String > ) hashMap0 ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test44 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRequestURL ( "6sYUw . \u0002XXCkET" ) ; accessEvent0 . setServerName ( "6sYUw . \u0002XXCkET" ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; accessEvent0 . setRequestURI ( "6sYUw . \u0002XXCkET" ) ; accessEvent1 . setRequestURL ( "6sYUw . \u0002XXCkET" ) ; accessEvent1 . setRequestURI ( "6sYUw . \u0002XXCkET" ) ; boolean boolean0 = accessEvent0 . equals ( ( Object ) accessEvent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test45 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; Long long0 = new Long ( 14L ) ; accessEvent0 . setTimeStamp ( long0 ) ; accessEvent0 . setRemoteUser ( "Zz ? 0wR9SpH g`" ) ; accessEvent0 . setRemoteHost ( "Zz ? 0wR9SpH g`" ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; accessEvent1 . setRemoteHost ( "Zz ? 0wR9SpH g`" ) ; accessEvent1 . setRemoteUser ( "Zz ? 0wR9SpH g`" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test46 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; Long long0 = new Long ( 15L ) ; accessEvent0 . setTimeStamp ( long0 ) ; AccessEvent accessEvent1 = new AccessEvent ( ) ; boolean boolean0 = accessEvent1 . equals ( ( Object ) accessEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test47 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; Long long0 = new Long ( 1L ) ; accessEvent0 . setTimeStamp ( long0 ) ; int int0 = accessEvent0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test48 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; LoggerContext loggerContext0 = new LoggerContext ( ) ; accessEvent0 . setLoggerContext ( loggerContext0 ) ; int int0 = accessEvent0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test49 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRequestURI ( "d - Wx + " ) ; int int0 = accessEvent0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test50 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRequestURL ( " | z8 & , ZqtN ; " ) ; int int0 = accessEvent0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test51 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRemoteHost ( "d - Wx + " ) ; int int0 = accessEvent0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test52 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRemoteUser ( " | z8 & , ZqtN ; " ) ; int int0 = accessEvent0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test53 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setProtocol ( "T" ) ; int int0 = accessEvent0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test54 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setMethod ( "" ) ; int int0 = accessEvent0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test55 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRemoteAddress ( "T" ) ; int int0 = accessEvent0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test0 ( ) throws Throwable { AccessEvents accessEvents0 = new AccessEvents ( ) ; SourceIdentifier sourceIdentifier0 = accessEvents0 . getSource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SourceIdentifier getSource ( ) { return sourceIdentifier ; }
void test1 ( ) throws Throwable { AccessEvents accessEvents0 = new AccessEvents ( ) ; LinkedList < AccessEvent > linkedList0 = new LinkedList < AccessEvent > ( ) ; accessEvents0 . setEvents ( ( List < AccessEvent > ) linkedList0 ) ; AccessEvents accessEvents1 = new AccessEvents ( ) ; boolean boolean0 = accessEvents0 . equals ( ( Object ) accessEvents1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test2 ( ) throws Throwable { AccessEvents accessEvents0 = new AccessEvents ( ) ; accessEvents0 . setStartIndex ( ( - 824L ) ) ; AccessEvents accessEvents1 = new AccessEvents ( ) ; boolean boolean0 = accessEvents0 . equals ( ( Object ) accessEvents1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getStartIndex ( ) { return startIndex ; }
void test3 ( ) throws Throwable { AccessEvents accessEvents0 = new AccessEvents ( ) ; List < AccessEvent > list0 = accessEvents0 . getEvents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < LoggingEvent > getEvents ( ) { return events ; }
void test4 ( ) throws Throwable { AccessEvents accessEvents0 = new AccessEvents ( ) ; long long0 = accessEvents0 . getStartIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getStartIndex ( ) { return startIndex ; }
void test5 ( ) throws Throwable { AccessEvents accessEvents0 = new AccessEvents ( ) ; AccessEvents accessEvents1 = new AccessEvents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test6 ( ) throws Throwable { AccessEvents accessEvents0 = new AccessEvents ( ) ; boolean boolean0 = accessEvents0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test7 ( ) throws Throwable { AccessEvents accessEvents0 = new AccessEvents ( ) ; boolean boolean0 = accessEvents0 . equals ( ( Object ) "C" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test8 ( ) throws Throwable { AccessEvents accessEvents0 = new AccessEvents ( ) ; LinkedList < AccessEvent > linkedList0 = new LinkedList < AccessEvent > ( ) ; accessEvents0 . setEvents ( ( List < AccessEvent > ) linkedList0 ) ; AccessEvents accessEvents1 = new AccessEvents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test9 ( ) throws Throwable { AccessEvents accessEvents0 = new AccessEvents ( ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( " = " , " = " ) ; accessEvents0 . setSource ( sourceIdentifier0 ) ; AccessEvents accessEvents1 = new AccessEvents ( ) ; boolean boolean0 = accessEvents0 . equals ( ( Object ) accessEvents1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test10 ( ) throws Throwable { AccessEvents accessEvents0 = new AccessEvents ( ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( " = " , " = " ) ; accessEvents0 . setSource ( sourceIdentifier0 ) ; AccessEvents accessEvents1 = new AccessEvents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test11 ( ) throws Throwable { AccessEvents accessEvents0 = new AccessEvents ( ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( " = " , " = " ) ; accessEvents0 . setSource ( sourceIdentifier0 ) ; int int0 = accessEvents0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test12 ( ) throws Throwable { AccessEvents accessEvents0 = new AccessEvents ( ) ; LinkedList < AccessEvent > linkedList0 = new LinkedList < AccessEvent > ( ) ; accessEvents0 . setEvents ( ( List < AccessEvent > ) linkedList0 ) ; int int0 = accessEvents0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test0 ( ) throws Throwable { HttpStatus httpStatus0 = HttpStatus . SEE_OTHER ; httpStatus0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCode ( ) { return code ; }
void test1 ( ) throws Throwable { HttpStatus httpStatus0 = HttpStatus . SEE_OTHER ; String string0 = httpStatus0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "event . contains" ; }
void test2 ( ) throws Throwable { HttpStatus httpStatus0 = HttpStatus . SEE_OTHER ; int int0 = httpStatus0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCode ( ) { return code ; }
void test4 ( ) throws Throwable { HttpStatus . Type httpStatus_Type0 = HttpStatus . getType ( 143 ) ; String string0 = httpStatus_Type0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test6 ( ) throws Throwable { HttpStatus . Type httpStatus_Type0 = HttpStatus . getType ( 303 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HttpStatus . Type getType ( int code ) { if ( code > = 100 & & code < 200 ) { return Type . INFORMATIONAL ; } if ( code > = 200 & & code < 300 ) { return Type . SUCCESSFUL ; } if ( code > = 300 & & code < 400 ) { return Type . REDIRECTION ; } if ( code > = 400 & & code < 500 ) { return Type . CLIENT_ERROR ; } if ( code > = 500 & & code < 600 ) { return Type . SERVER_ERROR ; } return null ; }
void test7 ( ) throws Throwable { HttpStatus . Type httpStatus_Type0 = HttpStatus . getType ( 203 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HttpStatus . Type getType ( int code ) { if ( code > = 100 & & code < 200 ) { return Type . INFORMATIONAL ; } if ( code > = 200 & & code < 300 ) { return Type . SUCCESSFUL ; } if ( code > = 300 & & code < 400 ) { return Type . REDIRECTION ; } if ( code > = 400 & & code < 500 ) { return Type . CLIENT_ERROR ; } if ( code > = 500 & & code < 600 ) { return Type . SERVER_ERROR ; } return null ; }
void test9 ( ) throws Throwable { HttpStatus . Type httpStatus_Type0 = HttpStatus . getType ( 410 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HttpStatus . Type getType ( int code ) { if ( code > = 100 & & code < 200 ) { return Type . INFORMATIONAL ; } if ( code > = 200 & & code < 300 ) { return Type . SUCCESSFUL ; } if ( code > = 300 & & code < 400 ) { return Type . REDIRECTION ; } if ( code > = 400 & & code < 500 ) { return Type . CLIENT_ERROR ; } if ( code > = 500 & & code < 600 ) { return Type . SERVER_ERROR ; } return null ; }
void test10 ( ) throws Throwable { HttpStatus . Type httpStatus_Type0 = HttpStatus . getType ( 561 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" HttpStatus . Type getType ( int code ) { if ( code > = 100 & & code < 200 ) { return Type . INFORMATIONAL ; } if ( code > = 200 & & code < 300 ) { return Type . SUCCESSFUL ; } if ( code > = 300 & & code < 400 ) { return Type . REDIRECTION ; } if ( code > = 400 & & code < 500 ) { return Type . CLIENT_ERROR ; } if ( code > = 500 & & code < 600 ) { return Type . SERVER_ERROR ; } return null ; }
void test0 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; loggerContext0 . setName ( "LoggerContext [ name = null , birthTime = null , properties = { } ] " ) ; LoggerContext loggerContext1 = loggerContext0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test1 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; Map < String , String > map0 = loggerContext0 . getProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , String > getProperties ( ) { return properties ; }
void test2 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; Date date0 = loggerContext0 . getBirthTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getBirthTime ( ) { return birthTime ; }
void test3 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; loggerContext0 . setProperties ( ( Map < String , String > ) hashMap0 ) ; LoggerContext loggerContext1 = loggerContext0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test4 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; String string0 = loggerContext0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test5 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; String string0 = loggerContext0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; / * * * @return the Threshold of this Logger . * / Threshold getThreshold ( ) ; boolean isLoggingEnabled ( Level level ) ; boolean isLoggingEnabled ( Level level , Marker marker ) ; void log ( Level level , String messagePattern , Object . . . args ) ; void log ( Level level , Marker marker , String messagePattern , Object . . . args ) ; boolean isTraceEnabled ( ) ; boolean isTraceEnabled ( Marker marker ) ; void trace ( String messagePattern , Object . . . args ) ; void trace ( Marker marker , String messagePattern , Object . . . args ) ; boolean isDebugEnabled ( ) ; boolean isDebugEnabled ( Marker marker ) ; void debug ( String messagePattern , Object . . . args ) ; void debug ( Marker marker , String messagePattern , Object . . . args ) ; boolean isInfoEnabled ( ) ; boolean isInfoEnabled ( Marker marker ) ; void info ( String messagePattern , Object . . . args ) ; void info ( Marker marker , String messagePattern , Object . . . args ) ; boolean isWarnEnabled ( ) ; boolean isWarnEnabled ( Marker marker ) ; void warn ( String messagePattern , Object . . . args ) ; void warn ( Marker marker , String messagePattern , Object . . . args ) ; boolean isErrorEnabled ( ) ; boolean isErrorEnabled ( Marker marker ) ; void error ( String messagePattern , Object . . . args ) ; void error ( Marker marker , String messagePattern , Object . . . args ) ; }
void test6 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; Date date0 = new Date ( ) ; loggerContext0 . setBirthTime ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test7 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; boolean boolean0 = loggerContext0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test8 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; boolean boolean0 = loggerContext0 . equals ( ( Object ) "LoggerContext [ name = null , birthTime = null , properties = null ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test9 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; Date date0 = new Date ( ) ; loggerContext0 . setBirthTime ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test10 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; Date date0 = new Date ( ) ; loggerContext0 . setBirthTime ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test11 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; LoggerContext loggerContext1 = loggerContext0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test12 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; LoggerContext loggerContext1 = new LoggerContext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test13 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; loggerContext0 . setProperties ( ( Map < String , String > ) hashMap0 ) ; LoggerContext loggerContext1 = loggerContext0 . clone ( ) ; hashMap0 . put ( ( String ) null , ( String ) null ) ; boolean boolean0 = loggerContext0 . equals ( ( Object ) loggerContext1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test14 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; LoggerContext loggerContext1 = new LoggerContext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test15 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; loggerContext0 . setName ( "LoggerContext [ name = null , birthTime = null , properties = { } ] " ) ; int int0 = loggerContext0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test16 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; Date date0 = new Date ( ) ; loggerContext0 . setBirthTime ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test17 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; loggerContext0 . setProperties ( ( Map < String , String > ) hashMap0 ) ; int int0 = loggerContext0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test0 ( ) throws Throwable { AccessEventProtobufDecoder accessEventProtobufDecoder0 = new AccessEventProtobufDecoder ( true ) ; accessEventProtobufDecoder0 . setCompressing ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test1 ( ) throws Throwable { AccessEventProtobufDecoder accessEventProtobufDecoder0 = new AccessEventProtobufDecoder ( false ) ; boolean boolean0 = accessEventProtobufDecoder0 . isCompressing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test2 ( ) throws Throwable { AccessEventProtobufDecoder accessEventProtobufDecoder0 = new AccessEventProtobufDecoder ( true ) ; byte [ ] byteArray0 = new byte [ 2 ] ; accessEventProtobufDecoder0 . decode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test3 ( ) throws Throwable { AccessEventProtobufDecoder accessEventProtobufDecoder0 = new AccessEventProtobufDecoder ( false ) ; byte [ ] byteArray0 = new byte [ 2 ] ; byteArray0 [ 0 ] = ( byte ) 122 ; AccessEvent accessEvent0 = accessEventProtobufDecoder0 . decode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; byteArray0 [ 0 ] = ( byte ) 18 ; AccessProto . AccessEvent accessProto_AccessEvent0 = AccessProto . AccessEvent . parseFrom ( byteArray0 ) ; AccessEvent accessEvent0 = AccessEventProtobufDecoder . convert ( accessProto_AccessEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRequestURL ( ) { return requestURL ; }
void test5 ( ) throws Throwable { LoggerContext loggerContext0 = AccessEventProtobufDecoder . convert ( ( AccessProto . LoggerContext ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; byteArray0 [ 0 ] = ( byte ) 18 ; ExtensionRegistry extensionRegistry0 = ExtensionRegistry . newInstance ( ) ; CodedInputStream codedInputStream0 = CodedInputStream . newInstance ( byteArray0 ) ; AccessProto . LoggerContext accessProto_LoggerContext0 = AccessProto . LoggerContext . parseFrom ( codedInputStream0 , extensionRegistry0 ) ; LoggerContext loggerContext0 = AccessEventProtobufDecoder . convert ( accessProto_LoggerContext0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; CodedInputStream codedInputStream0 = CodedInputStream . newInstance ( byteArray0 , ( int ) ( byte ) 18 , 0 ) ; AccessProto . StringMap accessProto_StringMap0 = AccessProto . StringMap . parseFrom ( codedInputStream0 ) ; Map < String , String > map0 = AccessEventProtobufDecoder . convertStringMap ( accessProto_StringMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test8 ( ) throws Throwable { Map < String , String > map0 = AccessEventProtobufDecoder . convertStringMap ( ( AccessProto . StringMap ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AccessProto . StringMap convertStringMap ( Map < String , String > data ) { if ( data = = null ) { return null ; } AccessProto . StringMap . Builder builder = AccessProto . StringMap . newBuilder ( ) ; for ( Map . Entry < String , String > current : data . entrySet ( ) ) { AccessProto . StringMapEntry . Builder entryBuilder = AccessProto . StringMapEntry . newBuilder ( ) . setKey ( current . getKey ( ) ) ; String value = current . getValue ( ) ; if ( value ! = null ) { entryBuilder . setValue ( value ) ; } builder . addEntry ( entryBuilder . build ( ) ) ; } return builder . build ( ) ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; byteArray0 [ 0 ] = ( byte ) 18 ; ExtensionRegistry extensionRegistry0 = ExtensionRegistry . newInstance ( ) ; AccessProto . StringArrayMap accessProto_StringArrayMap0 = AccessProto . StringArrayMap . parseFrom ( byteArray0 , extensionRegistry0 ) ; Map < String , String [ ] > map0 = AccessEventProtobufDecoder . convertStringArrayMap ( accessProto_StringArrayMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test10 ( ) throws Throwable { Map < String , String [ ] > map0 = AccessEventProtobufDecoder . convertStringArrayMap ( ( AccessProto . StringArrayMap ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AccessProto . StringArrayMap convertStringArrayMap ( Map < String , String [ ] > data ) { if ( data = = null ) { return null ; } AccessProto . StringArrayMap . Builder builder = AccessProto . StringArrayMap . newBuilder ( ) ; for ( Map . Entry < String , String [ ] > current : data . entrySet ( ) ) { AccessProto . StringArrayMapEntry . Builder entryBuilder = AccessProto . StringArrayMapEntry . newBuilder ( ) . setKey ( current . getKey ( ) ) ; String [ ] value = current . getValue ( ) ; if ( value ! = null & & value . length > 0 ) { for ( String cur : value ) { AccessProto . StringArrayValue . Builder valBuilder = AccessProto . StringArrayValue . newBuilder ( ) ; if ( cur ! = null ) { valBuilder . setValue ( cur ) ; } entryBuilder . addValue ( valBuilder . build ( ) ) ; } } builder . addEntry ( entryBuilder . build ( ) ) ; } return builder . build ( ) ; }
void test0 ( ) throws Throwable { AccessEventWrapperProtobufEncoder accessEventWrapperProtobufEncoder0 = new AccessEventWrapperProtobufEncoder ( true ) ; accessEventWrapperProtobufEncoder0 . setCompressing ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test1 ( ) throws Throwable { AccessEventWrapperProtobufEncoder accessEventWrapperProtobufEncoder0 = new AccessEventWrapperProtobufEncoder ( true ) ; boolean boolean0 = accessEventWrapperProtobufEncoder0 . isCompressing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test2 ( ) throws Throwable { AccessEventWrapperProtobufEncoder accessEventWrapperProtobufEncoder0 = new AccessEventWrapperProtobufEncoder ( false ) ; EventWrapper < AccessEvent > eventWrapper0 = new EventWrapper < AccessEvent > ( ) ; byte [ ] byteArray0 = accessEventWrapperProtobufEncoder0 . encode ( eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test3 ( ) throws Throwable { AccessEventWrapperProtobufEncoder accessEventWrapperProtobufEncoder0 = new AccessEventWrapperProtobufEncoder ( true ) ; accessEventWrapperProtobufEncoder0 . encode ( ( EventWrapper < AccessEvent > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test4 ( ) throws Throwable { AccessEventWrapperProtobufEncoder accessEventWrapperProtobufEncoder0 = new AccessEventWrapperProtobufEncoder ( true ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( ) ; AccessEvent accessEvent0 = new AccessEvent ( ) ; EventWrapper < AccessEvent > eventWrapper0 = new EventWrapper < AccessEvent > ( sourceIdentifier0 , 0L , accessEvent0 ) ; byte [ ] byteArray0 = accessEventWrapperProtobufEncoder0 . encode ( eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test5 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; EventWrapper < AccessEvent > eventWrapper0 = new EventWrapper < AccessEvent > ( ( EventIdentifier ) null , accessEvent0 ) ; AccessProto . EventWrapper accessProto_EventWrapper0 = AccessEventWrapperProtobufEncoder . convert ( eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test6 ( ) throws Throwable { AccessProto . EventIdentifier accessProto_EventIdentifier0 = AccessEventWrapperProtobufEncoder . convert ( ( EventIdentifier ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test7 ( ) throws Throwable { AccessProto . SourceIdentifier accessProto_SourceIdentifier0 = AccessEventWrapperProtobufEncoder . convert ( ( SourceIdentifier ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test8 ( ) throws Throwable { SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( "z~gaO * cev" ) ; AccessProto . SourceIdentifier accessProto_SourceIdentifier0 = AccessEventWrapperProtobufEncoder . convert ( sourceIdentifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test9 ( ) throws Throwable { SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( "" , "" ) ; EventIdentifier eventIdentifier0 = new EventIdentifier ( sourceIdentifier0 , ( - 680L ) ) ; AccessEvent accessEvent0 = new AccessEvent ( ) ; EventWrapper < AccessEvent > eventWrapper0 = new EventWrapper < AccessEvent > ( eventIdentifier0 , accessEvent0 ) ; AccessProto . EventWrapper accessProto_EventWrapper0 = AccessEventWrapperProtobufEncoder . convert ( eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test0 ( ) throws Throwable { AccessEventProtobufEncoder accessEventProtobufEncoder0 = new AccessEventProtobufEncoder ( true ) ; boolean boolean0 = accessEventProtobufEncoder0 . isCompressing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test1 ( ) throws Throwable { AccessEventProtobufEncoder accessEventProtobufEncoder0 = new AccessEventProtobufEncoder ( true ) ; accessEventProtobufEncoder0 . setCompressing ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test2 ( ) throws Throwable { AccessEventProtobufEncoder accessEventProtobufEncoder0 = new AccessEventProtobufEncoder ( true ) ; accessEventProtobufEncoder0 . encode ( ( AccessEvent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test3 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setMethod ( "" ) ; AccessProto . AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder . convert ( accessEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test4 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setProtocol ( " ] " ) ; AccessEventProtobufEncoder accessEventProtobufEncoder0 = new AccessEventProtobufEncoder ( false ) ; byte [ ] byteArray0 = accessEventProtobufEncoder0 . encode ( accessEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test5 ( ) throws Throwable { AccessEventProtobufEncoder accessEventProtobufEncoder0 = new AccessEventProtobufEncoder ( true ) ; AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRemoteAddress ( "K%v [ ip . yu" ) ; byte [ ] byteArray0 = accessEventProtobufEncoder0 . encode ( accessEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test6 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRemoteHost ( "" ) ; AccessProto . AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder . convert ( accessEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test7 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRemoteUser ( "" ) ; AccessProto . AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder . convert ( accessEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test8 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRequestURI ( "b" ) ; AccessProto . AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder . convert ( accessEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test9 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setRequestURL ( "" ) ; AccessProto . AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder . convert ( accessEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test10 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; accessEvent0 . setServerName ( "" ) ; AccessProto . AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder . convert ( accessEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test11 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; Long long0 = new Long ( 0L ) ; accessEvent0 . setTimeStamp ( long0 ) ; AccessProto . AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder . convert ( accessEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test12 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; accessEvent0 . setRequestHeaders ( ( Map < String , String > ) hashMap0 ) ; AccessProto . AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder . convert ( accessEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test13 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; LoggerContext loggerContext0 = new LoggerContext ( ) ; accessEvent0 . setLoggerContext ( loggerContext0 ) ; AccessProto . AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder . convert ( accessEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test14 ( ) throws Throwable { AccessProto . LoggerContext accessProto_LoggerContext0 = AccessEventProtobufEncoder . convert ( ( LoggerContext ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test15 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; loggerContext0 . setName ( "Sw9TRING" ) ; AccessProto . LoggerContext accessProto_LoggerContext0 = AccessEventProtobufEncoder . convert ( loggerContext0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; / * * * @return the Threshold of this Logger . * / Threshold getThreshold ( ) ; boolean isLoggingEnabled ( Level level ) ; boolean isLoggingEnabled ( Level level , Marker marker ) ; void log ( Level level , String messagePattern , Object . . . args ) ; void log ( Level level , Marker marker , String messagePattern , Object . . . args ) ; boolean isTraceEnabled ( ) ; boolean isTraceEnabled ( Marker marker ) ; void trace ( String messagePattern , Object . . . args ) ; void trace ( Marker marker , String messagePattern , Object . . . args ) ; boolean isDebugEnabled ( ) ; boolean isDebugEnabled ( Marker marker ) ; void debug ( String messagePattern , Object . . . args ) ; void debug ( Marker marker , String messagePattern , Object . . . args ) ; boolean isInfoEnabled ( ) ; boolean isInfoEnabled ( Marker marker ) ; void info ( String messagePattern , Object . . . args ) ; void info ( Marker marker , String messagePattern , Object . . . args ) ; boolean isWarnEnabled ( ) ; boolean isWarnEnabled ( Marker marker ) ; void warn ( String messagePattern , Object . . . args ) ; void warn ( Marker marker , String messagePattern , Object . . . args ) ; boolean isErrorEnabled ( ) ; boolean isErrorEnabled ( Marker marker ) ; void error ( String messagePattern , Object . . . args ) ; void error ( Marker marker , String messagePattern , Object . . . args ) ; }
void test16 ( ) throws Throwable { LoggerContext loggerContext0 = new LoggerContext ( ) ; Date date0 = new Date ( ) ; loggerContext0 . setBirthTime ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test17 ( ) throws Throwable { HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; LoggerContext loggerContext0 = new LoggerContext ( ) ; loggerContext0 . setProperties ( ( Map < String , String > ) hashMap0 ) ; AccessProto . LoggerContext accessProto_LoggerContext0 = AccessEventProtobufEncoder . convert ( loggerContext0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test18 ( ) throws Throwable { HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; hashMap0 . put ( "#af5" , "#af5" ) ; LoggerContext loggerContext0 = new LoggerContext ( ) ; loggerContext0 . setProperties ( ( Map < String , String > ) hashMap0 ) ; AccessProto . LoggerContext accessProto_LoggerContext0 = AccessEventProtobufEncoder . convert ( loggerContext0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test19 ( ) throws Throwable { AccessEvent accessEvent0 = new AccessEvent ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; accessEvent0 . setResponseHeaders ( ( Map < String , String > ) hashMap0 ) ; hashMap0 . put ( "b" , ( String ) null ) ; AccessProto . AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder . convert ( accessEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test20 ( ) throws Throwable { AccessEventProtobufEncoder accessEventProtobufEncoder0 = new AccessEventProtobufEncoder ( true ) ; AccessEvent accessEvent0 = new AccessEvent ( ) ; HashMap < String , String [ ] > hashMap0 = new HashMap < String , String [ ] > ( ) ; accessEvent0 . setRequestParameters ( ( Map < String , String [ ] > ) hashMap0 ) ; String [ ] stringArray0 = new String [ 1 ] ; hashMap0 . put ( "K%v [ ip . yu" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test21 ( ) throws Throwable { HashMap < String , String [ ] > hashMap0 = new HashMap < String , String [ ] > ( ) ; hashMap0 . put ( " > \"dVfi - p - < x" , ( String [ ] ) null ) ; AccessProto . StringArrayMap accessProto_StringArrayMap0 = AccessEventProtobufEncoder . convertStringArrayMap ( ( Map < String , String [ ] > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test22 ( ) throws Throwable { HashMap < String , String [ ] > hashMap0 = new HashMap < String , String [ ] > ( ) ; String [ ] stringArray0 = new String [ 37 ] ; hashMap0 . put ( "" , stringArray0 ) ; stringArray0 [ 4 ] = " > \"dVfi - p - < x" ; AccessEventProtobufEncoder . convertStringArrayMap ( ( Map < String , String [ ] > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test0 ( ) throws Throwable { AccessEventWrapperProtobufDecoder accessEventWrapperProtobufDecoder0 = new AccessEventWrapperProtobufDecoder ( false ) ; boolean boolean0 = accessEventWrapperProtobufDecoder0 . isCompressing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test1 ( ) throws Throwable { AccessEventWrapperProtobufDecoder accessEventWrapperProtobufDecoder0 = new AccessEventWrapperProtobufDecoder ( false ) ; accessEventWrapperProtobufDecoder0 . setCompressing ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test2 ( ) throws Throwable { AccessEventWrapperProtobufDecoder accessEventWrapperProtobufDecoder0 = new AccessEventWrapperProtobufDecoder ( true ) ; byte [ ] byteArray0 = new byte [ 8 ] ; accessEventWrapperProtobufDecoder0 . decode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test3 ( ) throws Throwable { AccessEventWrapperProtobufDecoder accessEventWrapperProtobufDecoder0 = new AccessEventWrapperProtobufDecoder ( false ) ; byte [ ] byteArray0 = new byte [ 3 ] ; accessEventWrapperProtobufDecoder0 . decode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test4 ( ) throws Throwable { AccessProto . EventWrapper accessProto_EventWrapper0 = AccessProto . EventWrapper . getDefaultInstance ( ) ; EventWrapper < AccessEvent > eventWrapper0 = AccessEventWrapperProtobufDecoder . convert ( accessProto_EventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test5 ( ) throws Throwable { ByteString byteString0 = ByteString . copyFromUtf8 ( "" ) ; ExtensionRegistry extensionRegistry0 = ExtensionRegistry . getEmptyRegistry ( ) ; AccessProto . EventIdentifier accessProto_EventIdentifier0 = AccessProto . EventIdentifier . parseFrom ( byteString0 , extensionRegistry0 ) ; EventIdentifier eventIdentifier0 = AccessEventWrapperProtobufDecoder . convert ( accessProto_EventIdentifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test6 ( ) throws Throwable { EventIdentifier eventIdentifier0 = AccessEventWrapperProtobufDecoder . convert ( ( AccessProto . EventIdentifier ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test7 ( ) throws Throwable { ByteString byteString0 = ByteString . EMPTY ; ExtensionRegistry extensionRegistry0 = ExtensionRegistry . newInstance ( ) ; AccessProto . SourceIdentifier accessProto_SourceIdentifier0 = AccessProto . SourceIdentifier . parseFrom ( byteString0 , extensionRegistry0 ) ; SourceIdentifier sourceIdentifier0 = AccessEventWrapperProtobufDecoder . convert ( accessProto_SourceIdentifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test8 ( ) throws Throwable { SourceIdentifier sourceIdentifier0 = AccessEventWrapperProtobufDecoder . convert ( ( AccessProto . SourceIdentifier ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test0 ( ) throws Throwable { ByteString byteString0 = ByteString . EMPTY ; AccessProto . AccessEvent accessProto_AccessEvent0 = AccessProto . AccessEvent . parseFrom ( byteString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLocalPort ( ) { return localPort ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; CodedInputStream codedInputStream0 = CodedInputStream . newInstance ( byteArray0 , ( - 1416 ) , ( int ) ( byte ) 0 ) ; ExtensionRegistry extensionRegistry0 = ExtensionRegistry . newInstance ( ) ; AccessProto . LoggerContext accessProto_LoggerContext0 = AccessProto . LoggerContext . parseFrom ( codedInputStream0 , extensionRegistry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getBirthTime ( ) { return birthTime ; }
void test2 ( ) throws Throwable { AccessProto . LoggerContext accessProto_LoggerContext0 = AccessProto . LoggerContext . getDefaultInstance ( ) ; ByteString byteString0 = accessProto_LoggerContext0 . toByteString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; CodedInputStream codedInputStream0 = CodedInputStream . newInstance ( byteArray0 , ( - 1416 ) , ( int ) ( byte ) 0 ) ; AccessProto . StringMap accessProto_StringMap0 = AccessProto . StringMap . parseFrom ( codedInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test5 ( ) throws Throwable { CodedInputStream codedInputStream0 = CodedInputStream . newInstance ( ( InputStream ) null ) ; AccessProto . EventWrapper accessProto_EventWrapper0 = AccessProto . EventWrapper . parseFrom ( codedInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventIdentifier getEventIdentifier ( ) { return eventIdentifier ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( int ) ( byte ) ( - 77 ) , ( int ) ( byte ) 0 ) ; AccessProto . AccessEvent accessProto_AccessEvent0 = AccessProto . AccessEvent . parseFrom ( ( InputStream ) byteArrayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getTimeStamp ( ) { return timeStamp ; }
void test8 ( ) throws Throwable { AccessProto . LoggerContext accessProto_LoggerContext0 = AccessProto . LoggerContext . getDefaultInstance ( ) ; ByteString byteString0 = accessProto_LoggerContext0 . toByteString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatusCode ( ) { return statusCode ; }
void test11 ( ) throws Throwable { AccessProto . LoggerContext accessProto_LoggerContext0 = AccessProto . LoggerContext . getDefaultInstance ( ) ; ByteString byteString0 = accessProto_LoggerContext0 . toByteString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test12 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , 1699 , 0 ) ; AccessProto . StringArrayValue accessProto_StringArrayValue0 = AccessProto . StringArrayValue . parseFrom ( ( InputStream ) byteArrayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test13 ( ) throws Throwable { AccessProto . LoggerContext accessProto_LoggerContext0 = AccessProto . LoggerContext . getDefaultInstance ( ) ; ByteString byteString0 = accessProto_LoggerContext0 . toByteString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test15 ( ) throws Throwable { Descriptors . Descriptor descriptors_Descriptor0 = AccessProto . StringMapEntry . getDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" com . google . protobuf . Descriptors . FileDescriptor getDescriptor ( ) { return descriptor ; }
void test16 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; byteArray0 [ 0 ] = ( byte ) 58 ; byteArray0 [ 2 ] = ( byte ) ( - 107 ) ; ExtensionRegistry extensionRegistry0 = ExtensionRegistry . newInstance ( ) ; AccessProto . EventIdentifier accessProto_EventIdentifier0 = AccessProto . EventIdentifier . parseFrom ( byteArray0 , extensionRegistry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatusCode ( ) { return statusCode ; }
void test18 ( ) throws Throwable { AccessProto . LoggerContext accessProto_LoggerContext0 = AccessProto . LoggerContext . getDefaultInstance ( ) ; ByteString byteString0 = accessProto_LoggerContext0 . toByteString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLocalId ( ) { if ( eventIdentifier ! = null ) { return eventIdentifier . getLocalId ( ) ; } return EventIdentifier . NO_LOCAL_ID ; }
void test19 ( ) throws Throwable { Descriptors . Descriptor descriptors_Descriptor0 = AccessProto . EventIdentifier . getDescriptor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; / * * * @return the Threshold of this Logger . * / Threshold getThreshold ( ) ; boolean isLoggingEnabled ( Level level ) ; boolean isLoggingEnabled ( Level level , Marker marker ) ; void log ( Level level , String messagePattern , Object . . . args ) ; void log ( Level level , Marker marker , String messagePattern , Object . . . args ) ; boolean isTraceEnabled ( ) ; boolean isTraceEnabled ( Marker marker ) ; void trace ( String messagePattern , Object . . . args ) ; void trace ( Marker marker , String messagePattern , Object . . . args ) ; boolean isDebugEnabled ( ) ; boolean isDebugEnabled ( Marker marker ) ; void debug ( String messagePattern , Object . . . args ) ; void debug ( Marker marker , String messagePattern , Object . . . args ) ; boolean isInfoEnabled ( ) ; boolean isInfoEnabled ( Marker marker ) ; void info ( String messagePattern , Object . . . args ) ; void info ( Marker marker , String messagePattern , Object . . . args ) ; boolean isWarnEnabled ( ) ; boolean isWarnEnabled ( Marker marker ) ; void warn ( String messagePattern , Object . . . args ) ; void warn ( Marker marker , String messagePattern , Object . . . args ) ; boolean isErrorEnabled ( ) ; boolean isErrorEnabled ( Marker marker ) ; void error ( String messagePattern , Object . . . args ) ; void error ( Marker marker , String messagePattern , Object . . . args ) ; }
void test20 ( ) throws Throwable { AccessProto . EventWrapper accessProto_EventWrapper0 = AccessProto . EventWrapper . getDefaultInstance ( ) ; ByteString byteString0 = accessProto_EventWrapper0 . toByteString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test21 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; AccessProto . EventWrapper accessProto_EventWrapper0 = AccessProto . EventWrapper . parseDelimitedFrom ( ( InputStream ) byteArrayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test22 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; AccessProto . EventWrapper accessProto_EventWrapper0 = AccessProto . EventWrapper . parseDelimitedFrom ( ( InputStream ) byteArrayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { LogbackAccessAdapter logbackAccessAdapter0 = new LogbackAccessAdapter ( ) ; de . huxhorn . lilith . data . access . AccessEvent accessEvent0 = logbackAccessAdapter0 . convert ( ( AccessEvent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventWrapper < LoggingEvent > convert ( LoggingProto . EventWrapper parsedEvent ) { if ( parsedEvent = = null ) { return null ; } EventWrapper < LoggingEvent > result = new EventWrapper < LoggingEvent > ( ) ; if ( parsedEvent . hasEventIdentifier ( ) ) { result . setEventIdentifier ( convert ( parsedEvent . getEventIdentifier ( ) ) ) ; } if ( parsedEvent . hasEvent ( ) ) { result . setEvent ( LoggingEventProtobufDecoder . convert ( parsedEvent . getEvent ( ) ) ) ; } return result ; }
void test0 ( ) throws Throwable { TransformingEncoder transformingEncoder0 = new TransformingEncoder ( ) ; String string0 = transformingEncoder0 . getApplicationIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getApplicationIdentifier ( ) { return applicationIdentifier ; }
void test1 ( ) throws Throwable { TransformingEncoder transformingEncoder0 = new TransformingEncoder ( ) ; Encoder < AccessEvent > encoder0 = transformingEncoder0 . getLilithEncoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Encoder < de . huxhorn . lilith . data . logging . LoggingEvent > getLilithEncoder ( ) { return lilithEncoder ; }
void test2 ( ) throws Throwable { TransformingEncoder transformingEncoder0 = new TransformingEncoder ( ) ; transformingEncoder0 . setLilithEncoder ( ( Encoder < AccessEvent > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getApplicationIdentifier ( ) { return applicationIdentifier ; }
void test0 ( ) throws Throwable { EventIdentifier eventIdentifier0 = new EventIdentifier ( ) ; long long0 = eventIdentifier0 . getLocalId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLocalId ( ) { if ( eventIdentifier ! = null ) { return eventIdentifier . getLocalId ( ) ; } return EventIdentifier . NO_LOCAL_ID ; }
void test1 ( ) throws Throwable { EventIdentifier eventIdentifier0 = new EventIdentifier ( ) ; eventIdentifier0 . getSourceIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLocalId ( ) { if ( eventIdentifier ! = null ) { return eventIdentifier . getLocalId ( ) ; } return EventIdentifier . NO_LOCAL_ID ; }
void test2 ( ) throws Throwable { EventIdentifier eventIdentifier0 = new EventIdentifier ( ) ; String string0 = eventIdentifier0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test3 ( ) throws Throwable { EventIdentifier eventIdentifier0 = new EventIdentifier ( ) ; Object object0 = new Object ( ) ; boolean boolean0 = eventIdentifier0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test4 ( ) throws Throwable { EventIdentifier eventIdentifier0 = new EventIdentifier ( ) ; boolean boolean0 = eventIdentifier0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test5 ( ) throws Throwable { EventIdentifier eventIdentifier0 = new EventIdentifier ( ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( ( String ) null , ( String ) null ) ; EventIdentifier eventIdentifier1 = new EventIdentifier ( sourceIdentifier0 , 1L ) ; boolean boolean0 = eventIdentifier0 . equals ( ( Object ) eventIdentifier1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test6 ( ) throws Throwable { EventIdentifier eventIdentifier0 = new EventIdentifier ( ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( ( String ) null , ( String ) null ) ; eventIdentifier0 . setLocalId ( 1L ) ; EventIdentifier eventIdentifier1 = new EventIdentifier ( sourceIdentifier0 , 1L ) ; boolean boolean0 = eventIdentifier0 . equals ( ( Object ) eventIdentifier1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLocalId ( ) { if ( eventIdentifier ! = null ) { return eventIdentifier . getLocalId ( ) ; } return EventIdentifier . NO_LOCAL_ID ; }
void test7 ( ) throws Throwable { SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( "" , "" ) ; EventIdentifier eventIdentifier0 = new EventIdentifier ( sourceIdentifier0 , 1396L ) ; EventIdentifier eventIdentifier1 = eventIdentifier0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLocalId ( ) { if ( eventIdentifier ! = null ) { return eventIdentifier . getLocalId ( ) ; } return EventIdentifier . NO_LOCAL_ID ; }
void test8 ( ) throws Throwable { SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( ) ; EventIdentifier eventIdentifier0 = new EventIdentifier ( ) ; eventIdentifier0 . setSourceIdentifier ( sourceIdentifier0 ) ; EventIdentifier eventIdentifier1 = new EventIdentifier ( ) ; boolean boolean0 = eventIdentifier0 . equals ( ( Object ) eventIdentifier1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test9 ( ) throws Throwable { EventIdentifier eventIdentifier0 = new EventIdentifier ( ) ; EventIdentifier eventIdentifier1 = eventIdentifier0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLocalId ( ) { if ( eventIdentifier ! = null ) { return eventIdentifier . getLocalId ( ) ; } return EventIdentifier . NO_LOCAL_ID ; }
void test10 ( ) throws Throwable { EventIdentifier eventIdentifier0 = new EventIdentifier ( ) ; int int0 = eventIdentifier0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test11 ( ) throws Throwable { SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( "KGtPRHga" , "KGtPRHga" ) ; EventIdentifier eventIdentifier0 = new EventIdentifier ( sourceIdentifier0 , ( - 330L ) ) ; int int0 = eventIdentifier0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test0 ( ) throws Throwable { SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( ) ; EventWrapper < Serializable > eventWrapper0 = new EventWrapper < Serializable > ( sourceIdentifier0 , 963L , ( Serializable ) 963L ) ; Long long0 = ( Long ) eventWrapper0 . getEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" T getEvent ( ) { return event ; }
void test1 ( ) throws Throwable { EventWrapper < Serializable > eventWrapper0 = new EventWrapper < Serializable > ( ) ; eventWrapper0 . setEventIdentifier ( ( EventIdentifier ) null ) ; SourceIdentifier sourceIdentifier0 = eventWrapper0 . getSourceIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SourceIdentifier getSourceIdentifier ( ) { try { return sourceIdentifier . clone ( ) ; } catch ( CloneNotSupportedException e ) { / / won't happen return null ; } }
void test2 ( ) throws Throwable { EventWrapper < Serializable > eventWrapper0 = new EventWrapper < Serializable > ( ) ; EventIdentifier eventIdentifier0 = eventWrapper0 . getEventIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLocalId ( ) { if ( eventIdentifier ! = null ) { return eventIdentifier . getLocalId ( ) ; } return EventIdentifier . NO_LOCAL_ID ; }
void test3 ( ) throws Throwable { SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( ) ; EventWrapper < String > eventWrapper0 = new EventWrapper < String > ( sourceIdentifier0 , ( - 1L ) , "" ) ; String string0 = eventWrapper0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test4 ( ) throws Throwable { EventWrapper < Serializable > eventWrapper0 = new EventWrapper < Serializable > ( ( SourceIdentifier ) null , ( - 1L ) , ( Serializable ) ( - 1L ) ) ; TransferSizeInfo transferSizeInfo0 = eventWrapper0 . getTransferSizeInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TransferSizeInfo getTransferSizeInfo ( ) { return transferSizeInfo ; }
void test5 ( ) throws Throwable { EventWrapper < Serializable > eventWrapper0 = new EventWrapper < Serializable > ( ) ; TransferSizeInfo transferSizeInfo0 = new TransferSizeInfo ( ) ; eventWrapper0 . setTransferSizeInfo ( transferSizeInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test6 ( ) throws Throwable { SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( ) ; EventWrapper < String > eventWrapper0 = new EventWrapper < String > ( sourceIdentifier0 , ( - 1L ) , "" ) ; eventWrapper0 . setEvent ( ( String ) null ) ; EventWrapper < String > eventWrapper1 = new EventWrapper < String > ( sourceIdentifier0 , ( - 1L ) , "" ) ; boolean boolean0 = eventWrapper0 . equals ( ( Object ) eventWrapper1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test7 ( ) throws Throwable { EventWrapper < Serializable > eventWrapper0 = new EventWrapper < Serializable > ( ) ; EventWrapper < EventWrapper < Serializable > > eventWrapper1 = new EventWrapper < EventWrapper < Serializable > > ( ( EventIdentifier ) null , eventWrapper0 ) ; eventWrapper1 . setLocalId ( ( - 1090L ) ) ; eventWrapper1 . getSourceIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLocalId ( ) { if ( eventIdentifier ! = null ) { return eventIdentifier . getLocalId ( ) ; } return EventIdentifier . NO_LOCAL_ID ; }
void test8 ( ) throws Throwable { EventWrapper < Serializable > eventWrapper0 = new EventWrapper < Serializable > ( ( SourceIdentifier ) null , ( - 1L ) , ( Serializable ) ( - 1L ) ) ; eventWrapper0 . setSourceIdentifier ( ( SourceIdentifier ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLocalId ( ) { if ( eventIdentifier ! = null ) { return eventIdentifier . getLocalId ( ) ; } return EventIdentifier . NO_LOCAL_ID ; }
void test9 ( ) throws Throwable { EventWrapper < Serializable > eventWrapper0 = new EventWrapper < Serializable > ( ) ; eventWrapper0 . setEventIdentifier ( ( EventIdentifier ) null ) ; eventWrapper0 . setSourceIdentifier ( ( SourceIdentifier ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test10 ( ) throws Throwable { EventWrapper < Serializable > eventWrapper0 = new EventWrapper < Serializable > ( ( SourceIdentifier ) null , ( - 1L ) , ( Serializable ) ( - 1L ) ) ; EventWrapper < EventWrapper < Serializable > > eventWrapper1 = new EventWrapper < EventWrapper < Serializable > > ( ( EventIdentifier ) null , eventWrapper0 ) ; long long0 = eventWrapper1 . getLocalId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLocalId ( ) { if ( eventIdentifier ! = null ) { return eventIdentifier . getLocalId ( ) ; } return EventIdentifier . NO_LOCAL_ID ; }
void test11 ( ) throws Throwable { EventWrapper < Serializable > eventWrapper0 = new EventWrapper < Serializable > ( ) ; long long0 = eventWrapper0 . getLocalId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLocalId ( ) { if ( eventIdentifier ! = null ) { return eventIdentifier . getLocalId ( ) ; } return EventIdentifier . NO_LOCAL_ID ; }
void test12 ( ) throws Throwable { EventWrapper < Serializable > eventWrapper0 = new EventWrapper < Serializable > ( ( SourceIdentifier ) null , ( - 1L ) , ( Serializable ) ( - 1L ) ) ; eventWrapper0 . setLocalId ( ( - 1L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLocalId ( ) { if ( eventIdentifier ! = null ) { return eventIdentifier . getLocalId ( ) ; } return EventIdentifier . NO_LOCAL_ID ; }
void test13 ( ) throws Throwable { EventWrapper < Serializable > eventWrapper0 = new EventWrapper < Serializable > ( ( EventIdentifier ) null , ( Serializable ) null ) ; EventWrapper < Serializable > eventWrapper1 = new EventWrapper < Serializable > ( ( SourceIdentifier ) null , ( - 1L ) , ( Serializable ) null ) ; boolean boolean0 = eventWrapper0 . equals ( ( Object ) eventWrapper1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test14 ( ) throws Throwable { EventWrapper < EventWrapper < Integer > > eventWrapper0 = new EventWrapper < EventWrapper < Integer > > ( ) ; EventWrapper < Serializable > eventWrapper1 = new EventWrapper < Serializable > ( ( SourceIdentifier ) null , ( - 1L ) , ( Serializable ) null ) ; boolean boolean0 = eventWrapper0 . equals ( ( Object ) eventWrapper1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test15 ( ) throws Throwable { EventWrapper < Integer > eventWrapper0 = new EventWrapper < Integer > ( ) ; Class < Long > class0 = Long . TYPE ; boolean boolean0 = eventWrapper0 . equals ( ( Object ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test16 ( ) throws Throwable { SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( ) ; EventWrapper < Serializable > eventWrapper0 = new EventWrapper < Serializable > ( sourceIdentifier0 , 963L , ( Serializable ) 963L ) ; EventWrapper < EventWrapper < Serializable > > eventWrapper1 = new EventWrapper < EventWrapper < Serializable > > ( ) ; boolean boolean0 = eventWrapper0 . equals ( ( Object ) eventWrapper1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test17 ( ) throws Throwable { EventWrapper < Serializable > eventWrapper0 = new EventWrapper < Serializable > ( ) ; eventWrapper0 . setEventIdentifier ( ( EventIdentifier ) null ) ; EventWrapper < Integer > eventWrapper1 = new EventWrapper < Integer > ( ( SourceIdentifier ) null , ( - 1090L ) , ( Integer ) 0 ) ; EventWrapper < EventWrapper < Integer > > eventWrapper2 = new EventWrapper < EventWrapper < Integer > > ( ( EventIdentifier ) null , eventWrapper1 ) ; boolean boolean0 = eventWrapper2 . equals ( ( Object ) eventWrapper0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test18 ( ) throws Throwable { SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( ) ; EventWrapper < String > eventWrapper0 = new EventWrapper < String > ( sourceIdentifier0 , 12L , " : = ] OB ; , UvN" ) ; EventWrapper < String > eventWrapper1 = new EventWrapper < String > ( sourceIdentifier0 , 12L , " : = ] OB ; , UvN" ) ; boolean boolean0 = eventWrapper0 . equals ( ( Object ) eventWrapper1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test19 ( ) throws Throwable { EventWrapper < Serializable > eventWrapper0 = new EventWrapper < Serializable > ( ) ; EventWrapper < EventWrapper < Serializable > > eventWrapper1 = new EventWrapper < EventWrapper < Serializable > > ( ( EventIdentifier ) null , eventWrapper0 ) ; int int0 = eventWrapper1 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test20 ( ) throws Throwable { EventWrapper < Serializable > eventWrapper0 = new EventWrapper < Serializable > ( ) ; eventWrapper0 . setEventIdentifier ( ( EventIdentifier ) null ) ; int int0 = eventWrapper0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test0 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; LogFileFactoryImpl logFileFactoryImpl0 = new LogFileFactoryImpl ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDataFileExtension ( ) ; long getSizeOnDisk ( SourceIdentifier sourceIdentifier ) ; long getNumberOfEvents ( SourceIdentifier sourceIdentifier ) ; }
void test1 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; LogFileFactoryImpl logFileFactoryImpl0 = new LogFileFactoryImpl ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDataFileExtension ( ) ; long getSizeOnDisk ( SourceIdentifier sourceIdentifier ) ; long getNumberOfEvents ( SourceIdentifier sourceIdentifier ) ; }
void test2 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; LogFileFactoryImpl logFileFactoryImpl0 = new LogFileFactoryImpl ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDataFileExtension ( ) ; long getSizeOnDisk ( SourceIdentifier sourceIdentifier ) ; long getNumberOfEvents ( SourceIdentifier sourceIdentifier ) ; }
void test3 ( ) throws Throwable { LogFileFactoryImpl logFileFactoryImpl0 = new LogFileFactoryImpl ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getActiveFile ( SourceIdentifier sourceIdentifier ) ; String getDataFileExtension ( ) ; long getSizeOnDisk ( SourceIdentifier sourceIdentifier ) ; long getNumberOfEvents ( SourceIdentifier sourceIdentifier ) ; }
void test4 ( ) throws Throwable { LogFileFactoryImpl logFileFactoryImpl0 = new LogFileFactoryImpl ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDataFileExtension ( ) ; long getSizeOnDisk ( SourceIdentifier sourceIdentifier ) ; long getNumberOfEvents ( SourceIdentifier sourceIdentifier ) ; }
void test1 ( ) throws Throwable { EventPoller < Serializable > eventPoller0 = new EventPoller < Serializable > ( ( RemoveOperation < EventWrapper < Serializable > > ) null ) ; List < EventConsumer < Serializable > > list0 = eventPoller0 . getConsumers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < EventConsumer < T > > getConsumers ( ) { return consumers ; }
void test2 ( ) throws Throwable { OverwritingCircularBuffer < EventWrapper < EventWrapper < DefaultTableModel > > > overwritingCircularBuffer0 = new OverwritingCircularBuffer < EventWrapper < EventWrapper < DefaultTableModel > > > ( 83 ) ; EventPoller < EventWrapper < DefaultTableModel > > eventPoller0 = new EventPoller < EventWrapper < DefaultTableModel > > ( ( RemoveOperation < EventWrapper < EventWrapper < DefaultTableModel > > > ) overwritingCircularBuffer0 ) ; Vector < EventConsumer < EventWrapper < DefaultTableModel > > > vector0 = new Vector < EventConsumer < EventWrapper < DefaultTableModel > > > ( ) ; eventPoller0 . setConsumers ( ( List < EventConsumer < EventWrapper < DefaultTableModel > > > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setConsumers ( List < EventConsumer < T > > consumers ) { this . consumers = consumers ; }
void test3 ( ) throws Throwable { EventPoller < Serializable > eventPoller0 = new EventPoller < Serializable > ( ( RemoveOperation < EventWrapper < Serializable > > ) null ) ; RemoveOperation < EventWrapper < Serializable > > removeOperation0 = eventPoller0 . getQueue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AppendOperation < EventWrapper < T > > getQueue ( ) ; void setQueue ( AppendOperation < EventWrapper < T > > queue ) ; SourceManager < T > getSourceManager ( ) ; void setSourceManager ( SourceManager < T > sourceManager ) ; }
void test1 ( ) throws Throwable { BlockingCircularBuffer < EventWrapper < EventWrapper < Serializable > > > blockingCircularBuffer0 = new BlockingCircularBuffer < EventWrapper < EventWrapper < Serializable > > > ( 745 , 745 ) ; SourceManagerImpl < EventWrapper < Serializable > > sourceManagerImpl0 = new SourceManagerImpl < EventWrapper < Serializable > > ( blockingCircularBuffer0 ) ; sourceManagerImpl0 . addPropertyChangeListener ( ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfSources ( ) ; void addEventSourceListener ( EventSourceListener < T > listener ) ; void removeEventSourceListener ( EventSourceListener < T > listener ) ; void addEventSourceProducer ( EventSourceProducer < T > producer ) ; void addEventProducer ( EventProducer producer ) ; void removeEventProducer ( SourceIdentifier id ) ; void setEventConsumers ( List < EventConsumer < T > > consumers ) ; List < EventConsumer < T > > getEventConsumers ( ) ; / / void removeEventProducer ( EventProducer producer ) ; void start ( ) ; }
void test2 ( ) throws Throwable { BlockingCircularBuffer < EventWrapper < String > > blockingCircularBuffer0 = new BlockingCircularBuffer < EventWrapper < String > > ( 23 ) ; SourceManagerImpl < String > sourceManagerImpl0 = new SourceManagerImpl < String > ( blockingCircularBuffer0 ) ; sourceManagerImpl0 . removePropertyChangeListener ( ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfSources ( ) ; void addEventSourceListener ( EventSourceListener < T > listener ) ; void removeEventSourceListener ( EventSourceListener < T > listener ) ; void addEventSourceProducer ( EventSourceProducer < T > producer ) ; void addEventProducer ( EventProducer producer ) ; void removeEventProducer ( SourceIdentifier id ) ; void setEventConsumers ( List < EventConsumer < T > > consumers ) ; List < EventConsumer < T > > getEventConsumers ( ) ; / / void removeEventProducer ( EventProducer producer ) ; void start ( ) ; }
void test4 ( ) throws Throwable { SourceManagerImpl < String > sourceManagerImpl0 = new SourceManagerImpl < String > ( ( BlockingCircularBuffer < EventWrapper < String > > ) null ) ; List < EventSource < String > > list0 = sourceManagerImpl0 . getSources ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < EventSource < T > > getSources ( ) ; int getNumberOfSources ( ) ; void addEventSourceListener ( EventSourceListener < T > listener ) ; void removeEventSourceListener ( EventSourceListener < T > listener ) ; void addEventSourceProducer ( EventSourceProducer < T > producer ) ; void addEventProducer ( EventProducer producer ) ; void removeEventProducer ( SourceIdentifier id ) ; void setEventConsumers ( List < EventConsumer < T > > consumers ) ; List < EventConsumer < T > > getEventConsumers ( ) ; / / void removeEventProducer ( EventProducer producer ) ; void start ( ) ; }
void test5 ( ) throws Throwable { SourceManagerImpl < String > sourceManagerImpl0 = new SourceManagerImpl < String > ( ( BlockingCircularBuffer < EventWrapper < String > > ) null ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( "2re4VQz ? " , "2re4VQz ? " ) ; EventSourceImpl < String > eventSourceImpl0 = new EventSourceImpl < String > ( sourceIdentifier0 , ( Buffer < EventWrapper < String > > ) null , true ) ; sourceManagerImpl0 . addSource ( ( EventSource < String > ) eventSourceImpl0 ) ; sourceManagerImpl0 . addSource ( ( EventSource < String > ) eventSourceImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfSources ( ) ; void addEventSourceListener ( EventSourceListener < T > listener ) ; void removeEventSourceListener ( EventSourceListener < T > listener ) ; void addEventSourceProducer ( EventSourceProducer < T > producer ) ; void addEventProducer ( EventProducer producer ) ; void removeEventProducer ( SourceIdentifier id ) ; void setEventConsumers ( List < EventConsumer < T > > consumers ) ; List < EventConsumer < T > > getEventConsumers ( ) ; / / void removeEventProducer ( EventProducer producer ) ; void start ( ) ; }
void test6 ( ) throws Throwable { BlockingCircularBuffer < EventWrapper < EventWrapper < Serializable > > > blockingCircularBuffer0 = new BlockingCircularBuffer < EventWrapper < EventWrapper < Serializable > > > ( 1961 , 1961 ) ; SourceManagerImpl < EventWrapper < Serializable > > sourceManagerImpl0 = new SourceManagerImpl < EventWrapper < Serializable > > ( blockingCircularBuffer0 ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( " : j$ = M [ t = _0 & ) I" ) ; EventSourceImpl < EventWrapper < Serializable > > eventSourceImpl0 = new EventSourceImpl < EventWrapper < Serializable > > ( sourceIdentifier0 , ( Buffer < EventWrapper < EventWrapper < Serializable > > > ) blockingCircularBuffer0 , false ) ; sourceManagerImpl0 . addSource ( ( EventSource < EventWrapper < Serializable > > ) eventSourceImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfSources ( ) ; void addEventSourceListener ( EventSourceListener < T > listener ) ; void removeEventSourceListener ( EventSourceListener < T > listener ) ; void addEventSourceProducer ( EventSourceProducer < T > producer ) ; void addEventProducer ( EventProducer producer ) ; void removeEventProducer ( SourceIdentifier id ) ; void setEventConsumers ( List < EventConsumer < T > > consumers ) ; List < EventConsumer < T > > getEventConsumers ( ) ; / / void removeEventProducer ( EventProducer producer ) ; void start ( ) ; }
void test7 ( ) throws Throwable { BlockingCircularBuffer < EventWrapper < EventWrapper < Serializable > > > blockingCircularBuffer0 = new BlockingCircularBuffer < EventWrapper < EventWrapper < Serializable > > > ( 23 ) ; SourceManagerImpl < EventWrapper < Serializable > > sourceManagerImpl0 = new SourceManagerImpl < EventWrapper < Serializable > > ( blockingCircularBuffer0 ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( " ! K9a8qt5" , " ! K9a8qt5" ) ; And and0 = new And ( ( List < Condition > ) null ) ; EventSourceImpl < EventWrapper < Serializable > > eventSourceImpl0 = new EventSourceImpl < EventWrapper < Serializable > > ( sourceIdentifier0 , ( Buffer < EventWrapper < EventWrapper < Serializable > > > ) blockingCircularBuffer0 , ( Condition ) and0 , false ) ; sourceManagerImpl0 . addSource ( ( EventSource < EventWrapper < Serializable > > ) eventSourceImpl0 ) ; SourceIdentifier sourceIdentifier1 = new SourceIdentifier ( "v > Z$q : 5% = + > + p8zk } Vv" , "v > Z$q : 5% = + > + p8zk } Vv" ) ; sourceManagerImpl0 . removeSource ( sourceIdentifier1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfSources ( ) ; void addEventSourceListener ( EventSourceListener < T > listener ) ; void removeEventSourceListener ( EventSourceListener < T > listener ) ; void addEventSourceProducer ( EventSourceProducer < T > producer ) ; void addEventProducer ( EventProducer producer ) ; void removeEventProducer ( SourceIdentifier id ) ; void setEventConsumers ( List < EventConsumer < T > > consumers ) ; List < EventConsumer < T > > getEventConsumers ( ) ; / / void removeEventProducer ( EventProducer producer ) ; void start ( ) ; }
void test8 ( ) throws Throwable { BlockingCircularBuffer < EventWrapper < EventWrapper < Serializable > > > blockingCircularBuffer0 = new BlockingCircularBuffer < EventWrapper < EventWrapper < Serializable > > > ( 745 , 745 ) ; SourceManagerImpl < EventWrapper < Serializable > > sourceManagerImpl0 = new SourceManagerImpl < EventWrapper < Serializable > > ( blockingCircularBuffer0 ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( "1F" , "1F" ) ; byte [ ] byteArray0 = new byte [ 2 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; SerializingMessageBasedEventProducer < String > serializingMessageBasedEventProducer0 = new SerializingMessageBasedEventProducer < String > ( sourceIdentifier0 , ( AppendOperation < EventWrapper < String > > ) null , ( InputStream ) byteArrayInputStream0 , false ) ; sourceManagerImpl0 . addEventProducer ( ( EventProducer ) serializingMessageBasedEventProducer0 ) ; sourceManagerImpl0 . addEventProducer ( ( EventProducer ) serializingMessageBasedEventProducer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfSources ( ) ; void addEventSourceListener ( EventSourceListener < T > listener ) ; void removeEventSourceListener ( EventSourceListener < T > listener ) ; void addEventSourceProducer ( EventSourceProducer < T > producer ) ; void addEventProducer ( EventProducer producer ) ; void removeEventProducer ( SourceIdentifier id ) ; void setEventConsumers ( List < EventConsumer < T > > consumers ) ; List < EventConsumer < T > > getEventConsumers ( ) ; / / void removeEventProducer ( EventProducer producer ) ; void start ( ) ; }
void test9 ( ) throws Throwable { SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( "2re4VQz ? " , "2re4VQz ? " ) ; BlockingCircularBuffer < EventWrapper < Integer > > blockingCircularBuffer0 = new BlockingCircularBuffer < EventWrapper < Integer > > ( 64 , 64 ) ; SourceManagerImpl < Integer > sourceManagerImpl0 = new SourceManagerImpl < Integer > ( blockingCircularBuffer0 ) ; sourceManagerImpl0 . removeEventProducer ( sourceIdentifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfSources ( ) ; void addEventSourceListener ( EventSourceListener < T > listener ) ; void removeEventSourceListener ( EventSourceListener < T > listener ) ; void addEventSourceProducer ( EventSourceProducer < T > producer ) ; void addEventProducer ( EventProducer producer ) ; void removeEventProducer ( SourceIdentifier id ) ; void setEventConsumers ( List < EventConsumer < T > > consumers ) ; List < EventConsumer < T > > getEventConsumers ( ) ; / / void removeEventProducer ( EventProducer producer ) ; void start ( ) ; }
void test10 ( ) throws Throwable { BlockingCircularBuffer < EventWrapper < EventWrapper < Serializable > > > blockingCircularBuffer0 = new BlockingCircularBuffer < EventWrapper < EventWrapper < Serializable > > > ( 745 , 745 ) ; SourceManagerImpl < EventWrapper < Serializable > > sourceManagerImpl0 = new SourceManagerImpl < EventWrapper < Serializable > > ( blockingCircularBuffer0 ) ; SourceIdentifier sourceIdentifier0 = new SourceIdentifier ( "1F" , "1F" ) ; byte [ ] byteArray0 = new byte [ 2 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; SerializingMessageBasedEventProducer < String > serializingMessageBasedEventProducer0 = new SerializingMessageBasedEventProducer < String > ( sourceIdentifier0 , ( AppendOperation < EventWrapper < String > > ) null , ( InputStream ) byteArrayInputStream0 , false ) ; sourceManagerImpl0 . addEventProducer ( ( EventProducer ) serializingMessageBasedEventProducer0 ) ; sourceManagerImpl0 . removeEventProducer ( sourceIdentifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test11 ( ) throws Throwable { BlockingCircularBuffer < EventWrapper < EventWrapper < Serializable > > > blockingCircularBuffer0 = new BlockingCircularBuffer < EventWrapper < EventWrapper < Serializable > > > ( 23 ) ; SourceManagerImpl < EventWrapper < Serializable > > sourceManagerImpl0 = new SourceManagerImpl < EventWrapper < Serializable > > ( blockingCircularBuffer0 ) ; sourceManagerImpl0 . addEventSourceListener ( ( EventSourceListener < EventWrapper < Serializable > > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfSources ( ) ; void addEventSourceListener ( EventSourceListener < T > listener ) ; void removeEventSourceListener ( EventSourceListener < T > listener ) ; void addEventSourceProducer ( EventSourceProducer < T > producer ) ; void addEventProducer ( EventProducer producer ) ; void removeEventProducer ( SourceIdentifier id ) ; void setEventConsumers ( List < EventConsumer < T > > consumers ) ; List < EventConsumer < T > > getEventConsumers ( ) ; / / void removeEventProducer ( EventProducer producer ) ; void start ( ) ; }
void test12 ( ) throws Throwable { SourceManagerImpl < String > sourceManagerImpl0 = new SourceManagerImpl < String > ( ( BlockingCircularBuffer < EventWrapper < String > > ) null ) ; sourceManagerImpl0 . removeEventSourceListener ( ( EventSourceListener < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfSources ( ) ; void addEventSourceListener ( EventSourceListener < T > listener ) ; void removeEventSourceListener ( EventSourceListener < T > listener ) ; void addEventSourceProducer ( EventSourceProducer < T > producer ) ; void addEventProducer ( EventProducer producer ) ; void removeEventProducer ( SourceIdentifier id ) ; void setEventConsumers ( List < EventConsumer < T > > consumers ) ; List < EventConsumer < T > > getEventConsumers ( ) ; / / void removeEventProducer ( EventProducer producer ) ; void start ( ) ; }
void test13 ( ) throws Throwable { BlockingCircularBuffer < EventWrapper < EventWrapper < Serializable > > > blockingCircularBuffer0 = new BlockingCircularBuffer < EventWrapper < EventWrapper < Serializable > > > ( 64 ) ; SourceManagerImpl < EventWrapper < Serializable > > sourceManagerImpl0 = new SourceManagerImpl < EventWrapper < Serializable > > ( blockingCircularBuffer0 ) ; Vector < EventConsumer < EventWrapper < Serializable > > > vector0 = new Vector < EventConsumer < EventWrapper < Serializable > > > ( ) ; sourceManagerImpl0 . setEventConsumers ( ( List < EventConsumer < EventWrapper < Serializable > > > ) vector0 ) ; vector0 . add ( ( EventConsumer < EventWrapper < Serializable > > ) null ) ; sourceManagerImpl0 . start ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfSources ( ) ; void addEventSourceListener ( EventSourceListener < T > listener ) ; void removeEventSourceListener ( EventSourceListener < T > listener ) ; void addEventSourceProducer ( EventSourceProducer < T > producer ) ; void addEventProducer ( EventProducer producer ) ; void removeEventProducer ( SourceIdentifier id ) ; void setEventConsumers ( List < EventConsumer < T > > consumers ) ; List < EventConsumer < T > > getEventConsumers ( ) ; / / void removeEventProducer ( EventProducer producer ) ; void start ( ) ; }
void test14 ( ) throws Throwable { BlockingCircularBuffer < EventWrapper < EventWrapper < Serializable > > > blockingCircularBuffer0 = new BlockingCircularBuffer < EventWrapper < EventWrapper < Serializable > > > ( 64 ) ; SourceManagerImpl < EventWrapper < Serializable > > sourceManagerImpl0 = new SourceManagerImpl < EventWrapper < Serializable > > ( blockingCircularBuffer0 ) ; Vector < EventConsumer < EventWrapper < Serializable > > > vector0 = new Vector < EventConsumer < EventWrapper < Serializable > > > ( ) ; sourceManagerImpl0 . setEventConsumers ( ( List < EventConsumer < EventWrapper < Serializable > > > ) vector0 ) ; StdoutEventConsumer < EventWrapper < Serializable > > stdoutEventConsumer0 = new StdoutEventConsumer < EventWrapper < Serializable > > ( ) ; vector0 . add ( ( EventConsumer < EventWrapper < Serializable > > ) stdoutEventConsumer0 ) ; sourceManagerImpl0 . start ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfSources ( ) ; void addEventSourceListener ( EventSourceListener < T > listener ) ; void removeEventSourceListener ( EventSourceListener < T > listener ) ; void addEventSourceProducer ( EventSourceProducer < T > producer ) ; void addEventProducer ( EventProducer producer ) ; void removeEventProducer ( SourceIdentifier id ) ; void setEventConsumers ( List < EventConsumer < T > > consumers ) ; List < EventConsumer < T > > getEventConsumers ( ) ; / / void removeEventProducer ( EventProducer producer ) ; void start ( ) ; }
void test2 ( ) throws Throwable { BlockingCircularBuffer < EventWrapper < Serializable > > blockingCircularBuffer0 = new BlockingCircularBuffer < EventWrapper < Serializable > > ( 1 ) ; SerializingMessageBasedEventProducer < Serializable > serializingMessageBasedEventProducer0 = new SerializingMessageBasedEventProducer < Serializable > ( ( SourceIdentifier ) null , ( AppendOperation < EventWrapper < Serializable > > ) blockingCircularBuffer0 , ( InputStream ) null , false ) ; serializingMessageBasedEventProducer0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompressing ( ) { return compressing ; }
void test0 ( ) throws Throwable { HtmlTransferable htmlTransferable0 = new HtmlTransferable ( "" ) ; DataFlavor [ ] dataFlavorArray0 = htmlTransferable0 . getTransferDataFlavors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataFlavor [ ] getTransferDataFlavors ( ) { return FLAVORS . clone ( ) ; }
void test1 ( ) throws Throwable { HtmlTransferable htmlTransferable0 = new HtmlTransferable ( "" ) ; String string0 = htmlTransferable0 . getHtml ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHtml ( ) { return html ; }
void test2 ( ) throws Throwable { HtmlTransferable htmlTransferable0 = new HtmlTransferable ( "" ) ; Class < ? > class0 = Locale . class ; DataFlavor dataFlavor0 = new DataFlavor ( class0 , "" ) ; boolean boolean0 = htmlTransferable0 . isDataFlavorSupported ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { for ( DataFlavor aFlavor : FLAVORS ) { if ( flavor . equals ( aFlavor ) ) { return true ; } } return false ; }
void test3 ( ) throws Throwable { HtmlTransferable htmlTransferable0 = new HtmlTransferable ( "" ) ; DataFlavor dataFlavor0 = HtmlTransferable . XHTML_FLAVOR ; boolean boolean0 = htmlTransferable0 . isDataFlavorSupported ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { for ( DataFlavor aFlavor : FLAVORS ) { if ( flavor . equals ( aFlavor ) ) { return true ; } } return false ; }
void test4 ( ) throws Throwable { HtmlTransferable htmlTransferable0 = new HtmlTransferable ( "" ) ; DataFlavor dataFlavor0 = HtmlTransferable . XHTML_FLAVOR ; ByteArrayInputStream byteArrayInputStream0 = ( ByteArrayInputStream ) htmlTransferable0 . getTransferData ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getTransferData ( DataFlavor flavor ) throws UnsupportedFlavorException , IOException { if ( flavor . equals ( XHTML_FLAVOR ) | | / * flavor . equals ( HTML_FLAVOR ) | | * / flavor . equals ( PLAIN_TEXT_FLAVOR ) ) { return new ByteArrayInputStream ( data ) ; } else { throw new UnsupportedFlavorException ( flavor ) ; } }
void test5 ( ) throws Throwable { HtmlTransferable htmlTransferable0 = new HtmlTransferable ( "" ) ; DataFlavor dataFlavor0 = HtmlTransferable . PLAIN_TEXT_FLAVOR ; ByteArrayInputStream byteArrayInputStream0 = ( ByteArrayInputStream ) htmlTransferable0 . getTransferData ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getTransferData ( DataFlavor flavor ) throws UnsupportedFlavorException , IOException { if ( flavor . equals ( XHTML_FLAVOR ) | | / * flavor . equals ( HTML_FLAVOR ) | | * / flavor . equals ( PLAIN_TEXT_FLAVOR ) ) { return new ByteArrayInputStream ( data ) ; } else { throw new UnsupportedFlavorException ( flavor ) ; } }
void test0 ( ) throws Throwable { ColorIcon colorIcon0 = new ColorIcon ( ( Color ) null ) ; int int0 = colorIcon0 . getIconHeight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIconHeight ( ) { return size . height ; }
void test2 ( ) throws Throwable { Color color0 = Color . GREEN ; ColorIcon colorIcon0 = new ColorIcon ( color0 ) ; int int0 = colorIcon0 . getIconWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIconWidth ( ) { return size . width ; }
void test1 ( ) throws Throwable { TaskManager < Object > taskManager0 = new TaskManager < Object > ( ) ; TaskManagerPanel < Object > taskManagerPanel0 = new TaskManagerPanel < Object > ( taskManager0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test2 ( ) throws Throwable { TaskManagerPanel < String > taskManagerPanel0 = new TaskManagerPanel < String > ( ( TaskManager < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test3 ( ) throws Throwable { TaskManagerPanel < String > taskManagerPanel0 = new TaskManagerPanel < String > ( ( TaskManager < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test4 ( ) throws Throwable { TaskManagerPanel < String > taskManagerPanel0 = new TaskManagerPanel < String > ( ( TaskManager < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test1 ( ) throws Throwable { TaskProgressRenderer taskProgressRenderer0 = new TaskProgressRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test0 ( ) throws Throwable { RrdFileFilter rrdFileFilter0 = new RrdFileFilter ( ) ; File file0 = new File ( "" , "" ) ; File [ ] fileArray0 = file0 . listFiles ( ( FileFilter ) rrdFileFilter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { XmlImportFileFilter xmlImportFileFilter0 = new XmlImportFileFilter ( ) ; String string0 = xmlImportFileFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "event . contains" ; }
void test1 ( ) throws Throwable { XmlImportFileFilter xmlImportFileFilter0 = new XmlImportFileFilter ( ) ; File file0 = new File ( "XML files" , "XML files" ) ; boolean boolean0 = xmlImportFileFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void accept ( ) { setLicenseAgreed ( true ) ; }
void test2 ( ) throws Throwable { XmlImportFileFilter xmlImportFileFilter0 = new XmlImportFileFilter ( ) ; File file0 = new File ( "" , "" ) ; boolean boolean0 = xmlImportFileFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void accept ( ) { setLicenseAgreed ( true ) ; }
void test0 ( ) throws Throwable { LogImportFileFilter logImportFileFilter0 = new LogImportFileFilter ( ) ; String string0 = logImportFileFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "event . contains" ; }
void test1 ( ) throws Throwable { LogImportFileFilter logImportFileFilter0 = new LogImportFileFilter ( ) ; File file0 = new File ( "Log files" , "Log files" ) ; boolean boolean0 = logImportFileFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void accept ( ) { setLicenseAgreed ( true ) ; }
void test2 ( ) throws Throwable { LogImportFileFilter logImportFileFilter0 = new LogImportFileFilter ( ) ; File file0 = new File ( "" , "" ) ; boolean boolean0 = logImportFileFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void accept ( ) { setLicenseAgreed ( true ) ; }
void test0 ( ) throws Throwable { Mp3FileFilter mp3FileFilter0 = new Mp3FileFilter ( ) ; String string0 = mp3FileFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "event . contains" ; }
void test1 ( ) throws Throwable { Mp3FileFilter mp3FileFilter0 = new Mp3FileFilter ( ) ; File file0 = new File ( "" , "" ) ; boolean boolean0 = mp3FileFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void accept ( ) { setLicenseAgreed ( true ) ; }
void test2 ( ) throws Throwable { Mp3FileFilter mp3FileFilter0 = new Mp3FileFilter ( ) ; File file0 = new File ( "MP3 files" , "MP3 files" ) ; boolean boolean0 = mp3FileFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void accept ( ) { setLicenseAgreed ( true ) ; }
void test0 ( ) throws Throwable { PngFileFilter pngFileFilter0 = new PngFileFilter ( ) ; String string0 = pngFileFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "event . contains" ; }
void test1 ( ) throws Throwable { PngFileFilter pngFileFilter0 = new PngFileFilter ( ) ; File file0 = new File ( "" , "" ) ; boolean boolean0 = pngFileFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void accept ( ) { setLicenseAgreed ( true ) ; }
void test2 ( ) throws Throwable { PngFileFilter pngFileFilter0 = new PngFileFilter ( ) ; File file0 = new File ( "PNG files" , "PNG files" ) ; boolean boolean0 = pngFileFilter0 . accept ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void accept ( ) { setLicenseAgreed ( true ) ; }
void test0 ( ) throws Throwable { SourceTooltipGenerator sourceTooltipGenerator0 = new SourceTooltipGenerator ( ) ; Object [ ] [ ] objectArray0 = new Object [ 71 ] [ 10 ] ; Object [ ] objectArray1 = new Object [ 1 ] ; objectArray1 [ 0 ] = ( Object ) sourceTooltipGenerator0 ; JTable jTable0 = new JTable ( objectArray0 , objectArray1 ) ; String string0 = sourceTooltipGenerator0 . createTooltipText ( jTable0 , 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createTooltipText ( JTable table , int row ) ; }
void test0 ( ) throws Throwable { MessageTooltipGenerator messageTooltipGenerator0 = new MessageTooltipGenerator ( ) ; JTable jTable0 = new JTable ( 96 , 96 ) ; String string0 = messageTooltipGenerator0 . createTooltipText ( jTable0 , 23 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createTooltipText ( JTable table , int row ) ; }
void test0 ( ) throws Throwable { StatusCodeTooltipGenerator statusCodeTooltipGenerator0 = new StatusCodeTooltipGenerator ( ) ; JTable jTable0 = new JTable ( 1411 , 1411 ) ; String string0 = statusCodeTooltipGenerator0 . createTooltipText ( jTable0 , 33 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createTooltipText ( JTable table , int row ) ; }
void test0 ( ) throws Throwable { RequestUrlTooltipGenerator requestUrlTooltipGenerator0 = new RequestUrlTooltipGenerator ( ) ; JTable jTable0 = new JTable ( 1416 , 1416 ) ; String string0 = requestUrlTooltipGenerator0 . createTooltipText ( jTable0 , 32 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createTooltipText ( JTable table , int row ) ; }
void test0 ( ) throws Throwable { ThreadTooltipGenerator threadTooltipGenerator0 = new ThreadTooltipGenerator ( ) ; JTable jTable0 = new JTable ( 96 , 96 ) ; String string0 = threadTooltipGenerator0 . createTooltipText ( jTable0 , 23 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createTooltipText ( JTable table , int row ) ; }
void test0 ( ) throws Throwable { NdcTooltipGenerator ndcTooltipGenerator0 = new NdcTooltipGenerator ( ) ; Object [ ] objectArray0 = new Object [ 2 ] ; objectArray0 [ 0 ] = ( Object ) ndcTooltipGenerator0 ; objectArray0 [ 1 ] = ( Object ) ndcTooltipGenerator0 ; Object [ ] [ ] objectArray1 = new Object [ 9 ] [ 8 ] ; JTable jTable0 = new JTable ( objectArray1 , objectArray0 ) ; String string0 = ndcTooltipGenerator0 . createTooltipText ( jTable0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createTooltipText ( JTable table , int row ) ; }
void test1 ( ) throws Throwable { StringBuilder stringBuilder0 = new StringBuilder ( ( CharSequence ) "JEditorPane . w3cLengthUnits" ) ; NdcTooltipGenerator . appendNdc ( ( Message [ ] ) null , stringBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test2 ( ) throws Throwable { Message [ ] messageArray0 = new Message [ 2 ] ; String [ ] stringArray0 = new String [ 19 ] ; Message message0 = new Message ( "" , stringArray0 ) ; messageArray0 [ 0 ] = message0 ; messageArray0 [ 1 ] = messageArray0 [ 0 ] ; StringBuilder stringBuilder0 = new StringBuilder ( ( CharSequence ) "" ) ; NdcTooltipGenerator . appendNdc ( messageArray0 , stringBuilder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test0 ( ) throws Throwable { TimestampTooltipGenerator timestampTooltipGenerator0 = new TimestampTooltipGenerator ( ) ; Object [ ] [ ] objectArray0 = new Object [ 2 ] [ 1 ] ; Object [ ] objectArray1 = new Object [ 1 ] ; objectArray1 [ 0 ] = ( Object ) timestampTooltipGenerator0 ; objectArray0 [ 0 ] = objectArray1 ; JTable jTable0 = new JTable ( objectArray0 , objectArray0 [ 0 ] ) ; String string0 = timestampTooltipGenerator0 . createTooltipText ( jTable0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createTooltipText ( JTable table , int row ) ; }
void test0 ( ) throws Throwable { LoggerNameTooltipGenerator loggerNameTooltipGenerator0 = new LoggerNameTooltipGenerator ( ) ; JTable jTable0 = new JTable ( 338 , 338 ) ; String string0 = loggerNameTooltipGenerator0 . createTooltipText ( jTable0 , 190 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createTooltipText ( JTable table , int row ) ; }
void test0 ( ) throws Throwable { MarkerTooltipGenerator markerTooltipGenerator0 = new MarkerTooltipGenerator ( ) ; Object [ ] [ ] objectArray0 = new Object [ 3 ] [ 6 ] ; Object [ ] objectArray1 = new Object [ 6 ] ; objectArray1 [ 0 ] = ( Object ) markerTooltipGenerator0 ; objectArray1 [ 1 ] = ( Object ) markerTooltipGenerator0 ; objectArray1 [ 2 ] = ( Object ) markerTooltipGenerator0 ; objectArray1 [ 3 ] = ( Object ) markerTooltipGenerator0 ; objectArray1 [ 4 ] = ( Object ) markerTooltipGenerator0 ; objectArray1 [ 5 ] = ( Object ) 0 ; JTable jTable0 = new JTable ( objectArray0 , objectArray1 ) ; String string0 = markerTooltipGenerator0 . createTooltipText ( jTable0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createTooltipText ( JTable table , int row ) ; }
void test1 ( ) throws Throwable { StringBuilder stringBuilder0 = new StringBuilder ( ( CharSequence ) "UCU@ [ " ) ; MarkerTooltipGenerator . appendMarker ( ( Marker ) null , stringBuilder0 , ( List < String > ) null , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test2 ( ) throws Throwable { Marker marker0 = new Marker ( "IKy ) p < m [ ~Id" ) ; StringBuilder stringBuilder0 = new StringBuilder ( ) ; marker0 . add ( marker0 ) ; MarkerTooltipGenerator . appendMarker ( marker0 , stringBuilder0 , ( List < String > ) null , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test3 ( ) throws Throwable { Marker marker0 = new Marker ( ) ; StringBuilder stringBuilder0 = new StringBuilder ( ) ; NonEmptySequence nonEmptySequence0 = new NonEmptySequence ( ) ; MarkerTooltipGenerator . appendMarker ( marker0 , stringBuilder0 , ( List < String > ) nonEmptySequence0 , false , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test0 ( ) throws Throwable { ThrowableTooltipGenerator throwableTooltipGenerator0 = new ThrowableTooltipGenerator ( ) ; JTable jTable0 = new JTable ( 133 , 133 ) ; String string0 = throwableTooltipGenerator0 . createTooltipText ( jTable0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createTooltipText ( JTable table , int row ) ; }
void test0 ( ) throws Throwable { ProtocolRenderer protocolRenderer0 = new ProtocolRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test1 ( ) throws Throwable { ProtocolRenderer protocolRenderer0 = new ProtocolRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test2 ( ) throws Throwable { ProtocolRenderer protocolRenderer0 = new ProtocolRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test0 ( ) throws Throwable { SourceRenderer sourceRenderer0 = new SourceRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test1 ( ) throws Throwable { SourceRenderer sourceRenderer0 = new SourceRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test2 ( ) throws Throwable { SourceRenderer sourceRenderer0 = new SourceRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test0 ( ) throws Throwable { LoggerNameRenderer loggerNameRenderer0 = new LoggerNameRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test1 ( ) throws Throwable { LoggerNameRenderer loggerNameRenderer0 = new LoggerNameRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test2 ( ) throws Throwable { LoggerNameRenderer loggerNameRenderer0 = new LoggerNameRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test0 ( ) throws Throwable { StatusCodeRenderer statusCodeRenderer0 = new StatusCodeRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test1 ( ) throws Throwable { StatusCodeRenderer statusCodeRenderer0 = new StatusCodeRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test2 ( ) throws Throwable { StatusCodeRenderer statusCodeRenderer0 = new StatusCodeRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test2 ( ) throws Throwable { ToStringRenderer toStringRenderer0 = new ToStringRenderer ( ) ; JTable jTable0 = new JTable ( ) ; toStringRenderer0 . getTableCellRendererComponent ( jTable0 , ( Object ) toStringRenderer0 , false , false , ( - 1 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test0 ( ) throws Throwable { RemoteAddrRenderer remoteAddrRenderer0 = new RemoteAddrRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test1 ( ) throws Throwable { RemoteAddrRenderer remoteAddrRenderer0 = new RemoteAddrRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test2 ( ) throws Throwable { RemoteAddrRenderer remoteAddrRenderer0 = new RemoteAddrRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test0 ( ) throws Throwable { MethodRenderer methodRenderer0 = new MethodRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test1 ( ) throws Throwable { MethodRenderer methodRenderer0 = new MethodRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test2 ( ) throws Throwable { MethodRenderer methodRenderer0 = new MethodRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test0 ( ) throws Throwable { LabelCellRenderer labelCellRenderer0 = new LabelCellRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setSelected ( boolean selected ) { this . selected = selected ; initCellProperties ( ) ; }
void test1 ( ) throws Throwable { JTable jTable0 = new JTable ( ) ; int int0 = LabelCellRenderer . getSelectedRow ( jTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSelectedRow ( ) { ListSelectionModel selectionModel = table . getSelectionModel ( ) ; return selectionModel . getLeadSelectionIndex ( ) ; }
void test2 ( ) throws Throwable { LabelCellRenderer labelCellRenderer0 = new LabelCellRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setBorderColor ( Color borderColor ) { this . borderColor = borderColor ; }
void test3 ( ) throws Throwable { LabelCellRenderer labelCellRenderer0 = new LabelCellRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validate ( ) { super . validate ( ) ; if ( logger . isDebugEnabled ( ) ) logger . debug ( "Validate" ) ; }
void test4 ( ) throws Throwable { LabelCellRenderer labelCellRenderer0 = new LabelCellRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setFocused ( boolean focused ) { this . focused = focused ; initCellProperties ( ) ; }
void test5 ( ) throws Throwable { LabelCellRenderer labelCellRenderer0 = new LabelCellRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean updateColors ( Colors colors ) { boolean result = false ; if ( colors ! = null ) { ColorScheme scheme = colors . getColorScheme ( ) ; if ( scheme ! = null ) { Color fg = scheme . getTextColor ( ) ; if ( fg ! = null ) { setForeground ( fg ) ; result = true ; } Color bg = scheme . getBackgroundColor ( ) ; if ( bg ! = null ) { result = true ; setBackground ( bg ) ; } Color borderColor = scheme . getBorderColor ( ) ; if ( borderColor ! = null ) { result = true ; border . setBorderColor ( borderColor ) ; } } } return result ; }
void test6 ( ) throws Throwable { LabelCellRenderer labelCellRenderer0 = new LabelCellRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean updateColors ( Colors colors ) { boolean result = false ; if ( colors ! = null ) { ColorScheme scheme = colors . getColorScheme ( ) ; if ( scheme ! = null ) { Color fg = scheme . getTextColor ( ) ; if ( fg ! = null ) { setForeground ( fg ) ; result = true ; } Color bg = scheme . getBackgroundColor ( ) ; if ( bg ! = null ) { result = true ; setBackground ( bg ) ; } Color borderColor = scheme . getBorderColor ( ) ; if ( borderColor ! = null ) { result = true ; border . setBorderColor ( borderColor ) ; } } } return result ; }
void test7 ( ) throws Throwable { LabelCellRenderer labelCellRenderer0 = new LabelCellRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean updateColors ( Colors colors ) { boolean result = false ; if ( colors ! = null ) { ColorScheme scheme = colors . getColorScheme ( ) ; if ( scheme ! = null ) { Color fg = scheme . getTextColor ( ) ; if ( fg ! = null ) { setForeground ( fg ) ; result = true ; } Color bg = scheme . getBackgroundColor ( ) ; if ( bg ! = null ) { result = true ; setBackground ( bg ) ; } Color borderColor = scheme . getBorderColor ( ) ; if ( borderColor ! = null ) { result = true ; border . setBorderColor ( borderColor ) ; } } } return result ; }
void test8 ( ) throws Throwable { LabelCellRenderer labelCellRenderer0 = new LabelCellRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void correctRowHeight ( JTable table ) { if ( table ! = null ) { int rowHeight = table . getRowHeight ( ) ; int preferredHeight = getPreferredSize ( ) . height ; if ( rowHeight < preferredHeight ) { table . setRowHeight ( preferredHeight ) ; } } }
void test9 ( ) throws Throwable { LabelCellRenderer labelCellRenderer0 = new LabelCellRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test0 ( ) throws Throwable { IdRenderer idRenderer0 = new IdRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test1 ( ) throws Throwable { IdRenderer idRenderer0 = new IdRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test2 ( ) throws Throwable { IdRenderer idRenderer0 = new IdRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test0 ( ) throws Throwable { ThrowableRenderer throwableRenderer0 = new ThrowableRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test1 ( ) throws Throwable { ThrowableRenderer throwableRenderer0 = new ThrowableRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test2 ( ) throws Throwable { ThrowableRenderer throwableRenderer0 = new ThrowableRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test0 ( ) throws Throwable { ThreadRenderer threadRenderer0 = new ThreadRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test1 ( ) throws Throwable { ThreadRenderer threadRenderer0 = new ThreadRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test2 ( ) throws Throwable { ThreadRenderer threadRenderer0 = new ThreadRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test0 ( ) throws Throwable { MarkerRenderer markerRenderer0 = new MarkerRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test1 ( ) throws Throwable { MarkerRenderer markerRenderer0 = new MarkerRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test2 ( ) throws Throwable { MarkerRenderer markerRenderer0 = new MarkerRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test0 ( ) throws Throwable { TimestampRenderer timestampRenderer0 = new TimestampRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test1 ( ) throws Throwable { TimestampRenderer timestampRenderer0 = new TimestampRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test2 ( ) throws Throwable { TimestampRenderer timestampRenderer0 = new TimestampRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test3 ( ) throws Throwable { TimestampRenderer timestampRenderer0 = new TimestampRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test0 ( ) throws Throwable { TroubleshootingPanel troubleshootingPanel0 = new TroubleshootingPanel ( ( PreferencesDialog ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TroubleshootingPanel ( PreferencesDialog preferencesDialog ) { this . preferencesDialog = preferencesDialog ; createUI ( ) ; }
void test1 ( ) throws Throwable { ColorSchemeEditorPanel colorSchemeEditorPanel0 = new ColorSchemeEditorPanel ( ) ; colorSchemeEditorPanel0 . saveColors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void saveColors ( ) { this . colorScheme = new ColorScheme ( textChooser . getColor ( ) , backgroundChooser . getColor ( ) , borderChooser . getColor ( ) ) ; }
void test2 ( ) throws Throwable { ColorSchemeEditorPanel colorSchemeEditorPanel0 = new ColorSchemeEditorPanel ( ) ; Color color0 = Color . RED ; ColorScheme colorScheme0 = new ColorScheme ( color0 , color0 ) ; colorSchemeEditorPanel0 . setColorScheme ( colorScheme0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setColorScheme ( ColorScheme colorScheme ) { this . colorScheme = colorScheme ; }
void test3 ( ) throws Throwable { ColorSchemeEditorPanel colorSchemeEditorPanel0 = new ColorSchemeEditorPanel ( ) ; colorSchemeEditorPanel0 . resetColors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void resetColors ( ) { if ( colorScheme = = null ) { colorScheme = new ColorScheme ( ) ; } textChooser . setColor ( colorScheme . getTextColor ( ) ) ; backgroundChooser . setColor ( colorScheme . getBackgroundColor ( ) ) ; borderChooser . setColor ( colorScheme . getBorderColor ( ) ) ; }
void test0 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; savedCondition0 . getCondition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test1 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; savedCondition0 . setColorScheme ( ( ColorScheme ) null ) ; savedCondition0 . getTextColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test2 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; Or or0 = new Or ( ) ; savedCondition0 . setCondition ( ( Condition ) or0 ) ; SavedCondition savedCondition1 = new SavedCondition ( ( Condition ) or0 ) ; boolean boolean0 = savedCondition0 . equals ( ( Object ) savedCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test3 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; boolean boolean0 = savedCondition0 . isActive ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test4 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; savedCondition0 . setActive ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test5 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; ColorScheme colorScheme0 = savedCondition0 . getColorScheme ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test6 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; savedCondition0 . setName ( ( String ) null ) ; int int0 = savedCondition0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test7 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; String string0 = savedCondition0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test8 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; String string0 = savedCondition0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test9 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; Color color0 = savedCondition0 . getTextColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test10 ( ) throws Throwable { Or or0 = new Or ( ) ; Not not0 = new Not ( ( Condition ) or0 ) ; SavedCondition savedCondition0 = new SavedCondition ( "VCwf . Qu n^9Eyi" , ( Condition ) not0 , ( ColorScheme ) null , true ) ; savedCondition0 . getBackgroundColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test11 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; Color color0 = savedCondition0 . getBackgroundColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test12 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; savedCondition0 . setColorScheme ( ( ColorScheme ) null ) ; savedCondition0 . getBorderColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test13 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; Color color0 = savedCondition0 . getBorderColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test14 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; BooleanValues booleanValues0 = BooleanValues . FALSE ; SavedCondition savedCondition1 = new SavedCondition ( ( Condition ) booleanValues0 ) ; boolean boolean0 = savedCondition0 . equals ( ( Object ) savedCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test15 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; boolean boolean0 = savedCondition0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test16 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; boolean boolean0 = savedCondition0 . equals ( ( Object ) "SavedCondition [ name = , condition = null , colorScheme = ColorScheme [ textColor = java . awt . Color [ r = 0 , g = 0 , b = 0 ] , backgroundColor = java . awt . Color [ r = 255 , g = 255 , b = 255 ] , borderColor = java . awt . Color [ r = 255 , g = 255 , b = 255 ] ] , active = false ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test17 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; SavedCondition savedCondition1 = new SavedCondition ( "XUM . G_g ; " , ( Condition ) null , ( ColorScheme ) null , true ) ; boolean boolean0 = savedCondition0 . equals ( ( Object ) savedCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test18 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; savedCondition0 . setColorScheme ( ( ColorScheme ) null ) ; SavedCondition savedCondition1 = new SavedCondition ( ( String ) null , ( Condition ) null , ( ColorScheme ) null , false ) ; boolean boolean0 = savedCondition0 . equals ( ( Object ) savedCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test19 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; Or or0 = new Or ( ) ; Color color0 = Color . GREEN ; ColorScheme colorScheme0 = new ColorScheme ( color0 , color0 , color0 ) ; SavedCondition savedCondition1 = new SavedCondition ( "6_BSnC0Dhh~xyG` : Z" , ( Condition ) or0 , colorScheme0 , false ) ; boolean boolean0 = savedCondition0 . equals ( ( Object ) savedCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test20 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; SavedCondition savedCondition1 = savedCondition0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test21 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; savedCondition0 . setColorScheme ( ( ColorScheme ) null ) ; savedCondition0 . setName ( ( String ) null ) ; SavedCondition savedCondition1 = new SavedCondition ( ( String ) null , ( Condition ) null , ( ColorScheme ) null , false ) ; boolean boolean0 = savedCondition0 . equals ( ( Object ) savedCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test22 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( ) ; savedCondition0 . setColorScheme ( ( ColorScheme ) null ) ; savedCondition0 . setName ( ( String ) null ) ; SavedCondition savedCondition1 = new SavedCondition ( "#CJ } Ajw" , ( Condition ) null , ( ColorScheme ) null , false ) ; boolean boolean0 = savedCondition0 . equals ( ( Object ) savedCondition1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test23 ( ) throws Throwable { BooleanValues booleanValues0 = BooleanValues . getInstance ( false ) ; SavedCondition savedCondition0 = new SavedCondition ( ( Condition ) booleanValues0 ) ; int int0 = savedCondition0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test24 ( ) throws Throwable { SavedCondition savedCondition0 = new SavedCondition ( "XUM . G_g ; " , ( Condition ) null , ( ColorScheme ) null , true ) ; int int0 = savedCondition0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test25 ( ) throws Throwable { Or or0 = new Or ( ) ; Not not0 = new Not ( ( Condition ) or0 ) ; SavedCondition savedCondition0 = new SavedCondition ( "VCwf . Qu n^9Eyi" , ( Condition ) not0 , ( ColorScheme ) null , true ) ; SavedCondition savedCondition1 = savedCondition0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) { return active ; }
void test0 ( ) throws Throwable { GenericSortedListModel < Comparable < Integer > > genericSortedListModel0 = new GenericSortedListModel < Comparable < Integer > > ( ) ; List < Comparable < Integer > > list0 = genericSortedListModel0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test1 ( ) throws Throwable { GenericSortedListModel < Comparable < String > > genericSortedListModel0 = new GenericSortedListModel < Comparable < String > > ( ) ; int int0 = genericSortedListModel0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) { return buffer . getSize ( ) ; }
void test3 ( ) throws Throwable { GenericSortedListModel < String > genericSortedListModel0 = new GenericSortedListModel < String > ( ) ; Class < ? > class0 = GroovyClassLoader . class ; NonEmptySequence nonEmptySequence0 = new NonEmptySequence ( class0 ) ; genericSortedListModel0 . setData ( ( List < String > ) nonEmptySequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) ; void clear ( ) ; Message [ ] getContextStack ( ) ; Message [ ] NO_MESSAGES = new Message [ 0 ] ; }
void test5 ( ) throws Throwable { GenericSortedListModel < String > genericSortedListModel0 = new GenericSortedListModel < String > ( ) ; genericSortedListModel0 . add ( "groovy . xml . StreamingDOMBuilder$_bind_closure5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) { return buffer . getSize ( ) ; }
void test6 ( ) throws Throwable { GenericSortedListModel < Integer > genericSortedListModel0 = new GenericSortedListModel < Integer > ( ) ; Integer integer0 = Opcodes . DOUBLE ; genericSortedListModel0 . remove ( integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) { return buffer . getSize ( ) ; }
void test0 ( ) throws Throwable { Source source0 = new Source ( ) ; source0 . setIdentifier ( "B" ) ; int int0 = source0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test1 ( ) throws Throwable { Source source0 = new Source ( ) ; String string0 = source0 . getIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIdentifier ( ) { return identifier ; }
void test2 ( ) throws Throwable { Source source0 = new Source ( ) ; String string0 = source0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; / * * * @return the Threshold of this Logger . * / Threshold getThreshold ( ) ; boolean isLoggingEnabled ( Level level ) ; boolean isLoggingEnabled ( Level level , Marker marker ) ; void log ( Level level , String messagePattern , Object . . . args ) ; void log ( Level level , Marker marker , String messagePattern , Object . . . args ) ; boolean isTraceEnabled ( ) ; boolean isTraceEnabled ( Marker marker ) ; void trace ( String messagePattern , Object . . . args ) ; void trace ( Marker marker , String messagePattern , Object . . . args ) ; boolean isDebugEnabled ( ) ; boolean isDebugEnabled ( Marker marker ) ; void debug ( String messagePattern , Object . . . args ) ; void debug ( Marker marker , String messagePattern , Object . . . args ) ; boolean isInfoEnabled ( ) ; boolean isInfoEnabled ( Marker marker ) ; void info ( String messagePattern , Object . . . args ) ; void info ( Marker marker , String messagePattern , Object . . . args ) ; boolean isWarnEnabled ( ) ; boolean isWarnEnabled ( Marker marker ) ; void warn ( String messagePattern , Object . . . args ) ; void warn ( Marker marker , String messagePattern , Object . . . args ) ; boolean isErrorEnabled ( ) ; boolean isErrorEnabled ( Marker marker ) ; void error ( String messagePattern , Object . . . args ) ; void error ( Marker marker , String messagePattern , Object . . . args ) ; }
void test3 ( ) throws Throwable { Source source0 = new Source ( ) ; Source source1 = new Source ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test4 ( ) throws Throwable { Source source0 = new Source ( ) ; boolean boolean0 = source0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test5 ( ) throws Throwable { Source source0 = new Source ( ) ; boolean boolean0 = source0 . equals ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test6 ( ) throws Throwable { Source source0 = new Source ( ) ; Source source1 = new Source ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test7 ( ) throws Throwable { Source source0 = new Source ( ) ; Source source1 = new Source ( ) ; boolean boolean0 = source0 . equals ( ( Object ) source1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test8 ( ) throws Throwable { Source source0 = new Source ( ) ; Source source1 = new Source ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test9 ( ) throws Throwable { Source source0 = new Source ( ) ; Source source1 = new Source ( ) ; source0 . setIdentifier ( "B" ) ; source1 . setName ( "B" ) ; source1 . setIdentifier ( "B" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test10 ( ) throws Throwable { Source source0 = new Source ( ) ; Source source1 = new Source ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; EventContainsCondition that = ( EventContainsCondition ) o ; return ! ( searchString ! = null ? ! searchString . equals ( that . searchString ) : that . searchString ! = null ) ; }
void test11 ( ) throws Throwable { Source source0 = new Source ( ) ; int int0 = source0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test12 ( ) throws Throwable { Source source0 = new Source ( ) ; source0 . setName ( "" ) ; int int0 = source0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result ; result = ( searchString ! = null ? searchString . hashCode ( ) : 0 ) ; return result ; }
void test13 ( ) throws Throwable { Source source0 = new Source ( ) ; Source source1 = new Source ( ) ; source1 . setName ( "B## + 8EDi'" ) ; int int0 = source0 . compareTo ( ( Object ) source1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( SourceIdentifier o ) { if ( this . identifier = = null ) { if ( o . identifier ! = null ) { return - 1 ; } } else if ( o . identifier = = null ) { return 1 ; } else { int compare = this . identifier . compareTo ( o . identifier ) ; if ( compare ! = 0 ) { return compare ; } } if ( this . secondaryIdentifier = = null ) { if ( o . secondaryIdentifier ! = null ) { return - 1 ; } } else if ( o . secondaryIdentifier = = null ) { return 1 ; } else { int compare = this . secondaryIdentifier . compareTo ( o . secondaryIdentifier ) ; if ( compare ! = 0 ) { return compare ; } } return 0 ; }
void test14 ( ) throws Throwable { Source source0 = new Source ( ) ; int int0 = source0 . compareTo ( ( Object ) source0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( SourceIdentifier o ) { if ( this . identifier = = null ) { if ( o . identifier ! = null ) { return - 1 ; } } else if ( o . identifier = = null ) { return 1 ; } else { int compare = this . identifier . compareTo ( o . identifier ) ; if ( compare ! = 0 ) { return compare ; } } if ( this . secondaryIdentifier = = null ) { if ( o . secondaryIdentifier ! = null ) { return - 1 ; } } else if ( o . secondaryIdentifier = = null ) { return 1 ; } else { int compare = this . secondaryIdentifier . compareTo ( o . secondaryIdentifier ) ; if ( compare ! = 0 ) { return compare ; } } return 0 ; }
void test15 ( ) throws Throwable { Source source0 = new Source ( ) ; source0 . setName ( "" ) ; Source source1 = new Source ( ) ; int int0 = source0 . compareTo ( ( Object ) source1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( SourceIdentifier o ) { if ( this . identifier = = null ) { if ( o . identifier ! = null ) { return - 1 ; } } else if ( o . identifier = = null ) { return 1 ; } else { int compare = this . identifier . compareTo ( o . identifier ) ; if ( compare ! = 0 ) { return compare ; } } if ( this . secondaryIdentifier = = null ) { if ( o . secondaryIdentifier ! = null ) { return - 1 ; } } else if ( o . secondaryIdentifier = = null ) { return 1 ; } else { int compare = this . secondaryIdentifier . compareTo ( o . secondaryIdentifier ) ; if ( compare ! = 0 ) { return compare ; } } return 0 ; }
void test16 ( ) throws Throwable { Source source0 = new Source ( ) ; source0 . setName ( "" ) ; Source source1 = new Source ( ) ; source1 . setName ( "FL > P < g } Gx = 7u" ) ; int int0 = source0 . compareTo ( ( Object ) source1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( SourceIdentifier o ) { if ( this . identifier = = null ) { if ( o . identifier ! = null ) { return - 1 ; } } else if ( o . identifier = = null ) { return 1 ; } else { int compare = this . identifier . compareTo ( o . identifier ) ; if ( compare ! = 0 ) { return compare ; } } if ( this . secondaryIdentifier = = null ) { if ( o . secondaryIdentifier ! = null ) { return - 1 ; } } else if ( o . secondaryIdentifier = = null ) { return 1 ; } else { int compare = this . secondaryIdentifier . compareTo ( o . secondaryIdentifier ) ; if ( compare ! = 0 ) { return compare ; } } return 0 ; }
void test0 ( ) throws Throwable { ConditionPreviewRenderer conditionPreviewRenderer0 = new ConditionPreviewRenderer ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ( Vector ) null , ( Vector ) null ) ; Vector < Object > vector0 = defaultTableModel0 . getDataVector ( ) ; JTable jTable0 = new JTable ( vector0 , ( Vector ) null ) ; SavedCondition savedCondition0 = new SavedCondition ( ) ; JLabel jLabel0 = ( JLabel ) conditionPreviewRenderer0 . getTableCellRendererComponent ( jTable0 , ( Object ) savedCondition0 , false , true , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test1 ( ) throws Throwable { ConditionPreviewRenderer conditionPreviewRenderer0 = new ConditionPreviewRenderer ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ( Vector ) null , ( Vector ) null ) ; Vector < Object > vector0 = defaultTableModel0 . getDataVector ( ) ; JTable jTable0 = new JTable ( vector0 , ( Vector ) null ) ; ColorScheme colorScheme0 = conditionPreviewRenderer0 . resolveColorScheme ( jTable0 , ( Object ) vector0 , false , false , 701 , 701 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ColorScheme resolveColorScheme ( JTable table , Object value , boolean isSelected , boolean hasFocus , int row , int column ) { ColorScheme result = null ; if ( value instanceof SavedCondition ) { SavedCondition condition = ( SavedCondition ) value ; result = condition . getColorScheme ( ) ; } return result ; }
void test0 ( ) throws Throwable { ConditionTableColumnModel conditionTableColumnModel0 = new ConditionTableColumnModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_CLASSES . length ; }
void test0 ( ) throws Throwable { ConditionPreviewRenderer conditionPreviewRenderer0 = new ConditionPreviewRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test1 ( ) throws Throwable { ConditionPreviewRenderer conditionPreviewRenderer0 = new ConditionPreviewRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( getDescription ( ) ) . append ( " ( " ) ; if ( searchString ! = null ) { result . append ( "\"" ) ; result . append ( searchString ) ; result . append ( "\"" ) ; } else { result . append ( "null" ) ; } result . append ( " ) " ) ; return result . toString ( ) ; }
void test0 ( ) throws Throwable { ConditionActiveRenderer conditionActiveRenderer0 = new ConditionActiveRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test1 ( ) throws Throwable { ConditionActiveRenderer conditionActiveRenderer0 = new ConditionActiveRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test0 ( ) throws Throwable { ConditionNameRenderer conditionNameRenderer0 = new ConditionNameRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test1 ( ) throws Throwable { ConditionNameRenderer conditionNameRenderer0 = new ConditionNameRenderer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int rowIndex , int vColIndex ) { int progress = - 1 ; if ( logger . isInfoEnabled ( ) ) logger . info ( "Object : { } " , value ) ; if ( value instanceof Integer ) { progress = ( Integer ) value ; } else if ( value instanceof Task ) { Task task = ( Task ) value ; progress = task . getProgress ( ) ; } if ( logger . isInfoEnabled ( ) ) logger . info ( "Progress : { } " , progress ) ; if ( progress < 0 ) { progressBar . setValue ( 0 ) ; progressBar . setString ( "Unknown" ) ; } else { progressBar . setValue ( progress ) ; progressBar . setString ( "" + progress + "%" ) ; } return progressBar ; }
void test1 ( ) throws Throwable { StackTraceElementLinkListener stackTraceElementLinkListener0 = new StackTraceElementLinkListener ( ( MainFrame ) null ) ; XHTMLPanel xHTMLPanel0 = new XHTMLPanel ( ) ; stackTraceElementLinkListener0 . linkClicked ( ( BasicPanel ) xHTMLPanel0 , "O^nr | Qt ) J" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void linkClicked ( BasicPanel basicPanel , String uri ) { if ( logger . isDebugEnabled ( ) ) logger . debug ( "Link clicked : { } " , uri ) ; if ( uri . startsWith ( STACK_TRACE_ELEMENT_URI_PREFIX ) ) { String steStr = uri . substring ( STACK_TRACE_ELEMENT_URI_PREFIX . length ( ) ) ; steStr = SimpleXml . unescape ( steStr ) ; ExtendedStackTraceElement ste = ExtendedStackTraceElement . parseStackTraceElement ( steStr ) ; if ( logger . isDebugEnabled ( ) ) logger . debug ( "STE : { } " , ste ) ; mainFrame . goToSource ( ste . getStackTraceElement ( ) ) ; } }
void test2 ( ) throws Throwable { OpenUrlLinkListener openUrlLinkListener0 = new OpenUrlLinkListener ( ( MainFrame ) null , ( LinkListener ) null ) ; NaiveUserAgent naiveUserAgent0 = new NaiveUserAgent ( 4105 ) ; ScalableXHTMLPanel scalableXHTMLPanel0 = new ScalableXHTMLPanel ( ( UserAgentCallback ) naiveUserAgent0 ) ; openUrlLinkListener0 . linkClicked ( ( BasicPanel ) scalableXHTMLPanel0 , "h" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void linkClicked ( BasicPanel basicPanel , String uri ) { if ( logger . isDebugEnabled ( ) ) logger . debug ( "Link clicked : { } " , uri ) ; if ( uri . startsWith ( STACK_TRACE_ELEMENT_URI_PREFIX ) ) { String steStr = uri . substring ( STACK_TRACE_ELEMENT_URI_PREFIX . length ( ) ) ; steStr = SimpleXml . unescape ( steStr ) ; ExtendedStackTraceElement ste = ExtendedStackTraceElement . parseStackTraceElement ( steStr ) ; if ( logger . isDebugEnabled ( ) ) logger . debug ( "STE : { } " , ste ) ; mainFrame . goToSource ( ste . getStackTraceElement ( ) ) ; } }
