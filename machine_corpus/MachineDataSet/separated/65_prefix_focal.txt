void test1 ( ) throws Throwable { ProgressBar progressBar0 = new ProgressBar ( 22 , 22 , 22 ) ; progressBar0 . setValue ( ( long ) 22 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return mName ; }
void test2 ( ) throws Throwable { ProgressBar progressBar0 = new ProgressBar ( ( - 1 ) , ( - 1 ) , ( - 1 ) ) ; progressBar0 . getPreferredSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return mName ; }
void test3 ( ) throws Throwable { ProgressBar progressBar0 = new ProgressBar ( ( - 1676 ) , ( - 1676 ) , ( - 1676 ) ) ; progressBar0 . setBarColor ( progressBar0 . barColor ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return mName ; }
void test4 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( ) ; AWTConvenience . setBackgroundOfChildren ( ( Container ) jInternalFrame0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setBackgroundOfChildren ( Container container ) { Component [ ] children = container . getComponents ( ) ; container . setBackground ( SystemColor . menu ) ; for ( int i = 0 ; i < children . length ; i + + ) { if ( children [ i ] instanceof Choice ) continue ; children [ i ] . setBackground ( SystemColor . menu ) ; if ( children [ i ] instanceof Container ) { setBackgroundOfChildren ( ( Container ) children [ i ] ) ; } else if ( children [ i ] instanceof Choice ) { continue ; } else if ( children [ i ] instanceof TextField | | children [ i ] instanceof List ) { children [ i ] . setBackground ( SystemColor . text ) ; } else { children [ i ] . setBackground ( SystemColor . menu ) ; } } }
void test5 ( ) throws Throwable { JOptionPane jOptionPane0 = new JOptionPane ( ) ; AWTConvenience . OKCancelAdapter aWTConvenience_OKCancelAdapter0 = new AWTConvenience . OKCancelAdapter ( ( Button ) null , ( Button ) null ) ; Class < ? > class0 = SampleModel . class ; AWTConvenience . setKeyListenerOfChildren ( ( Container ) jOptionPane0 , ( KeyListener ) aWTConvenience_OKCancelAdapter0 , ( Class ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setKeyListenerOfChildren ( Container container , KeyListener listener , Class typeOfChild ) { Component [ ] children = container . getComponents ( ) ; for ( int i = 0 ; i < children . length ; i + + ) { if ( children [ i ] instanceof Choice ) continue ; if ( children [ i ] instanceof Container ) { setKeyListenerOfChildren ( ( Container ) children [ i ] , listener , typeOfChild ) ; } else if ( children [ i ] ! = null & & ( typeOfChild = = null | | typeOfChild . isInstance ( children [ i ] ) ) ) { children [ i ] . addKeyListener ( listener ) ; } } }
void test2 ( ) throws Throwable { SSHSCPGUIThread sSHSCPGUIThread0 = new SSHSCPGUIThread ( ( Frame ) null , ( FileDisplay ) null , ( FileDisplay ) null , ( RemoteFileBrowser ) null , false , false , true , false , ( SSHSCPPanel ) null ) ; sSHSCPGUIThread0 . endDir ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void endDir ( ) ; void progress ( long size ) ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = SSHSCPGUIThread . spaceSplit ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] spaceSplit ( String str ) { if ( str = = null | | str . length ( ) < = 0 ) return null ; int l = 0 , r , cnt = 0 ; String [ ] list = new String [ str . length ( ) / 2 ] ; boolean lastIsQuoted = false ; str = str . trim ( ) ; while ( ( r = str . indexOf ( ' ' , l ) ) > = 0 ) { if ( str . charAt ( l ) = = '"' ) { l + = 1 ; r = str . indexOf ( '"' , l ) ; if ( r = = - 1 ) return null ; } String name = str . substring ( l , r ) ; if ( name . endsWith ( File . separator ) ) name = name . substring ( 0 , name . length ( ) - 1 ) ; list [ cnt + + ] = name ; l = r ; do { l + + ; if ( l = = str . length ( ) ) { lastIsQuoted = true ; break ; } } while ( str . charAt ( l ) = = ' ' ) ; } if ( ! lastIsQuoted ) { if ( str . charAt ( l ) = = '"' ) { l + = 1 ; r = str . indexOf ( '"' , l ) ; if ( r = = - 1 ) return null ; } String name = str . substring ( l ) ; if ( name . endsWith ( File . separator ) ) name = name . substring ( 0 , name . length ( ) - 1 ) ; list [ cnt + + ] = name ; } for ( int i = 0 ; i < cnt ; i + + ) { if ( list [ i ] . endsWith ( "\"" ) ) { list [ i ] = list [ i ] . substring ( 0 , list [ i ] . length ( ) - 1 ) ; } } String [ ] tmp = list ; list = new String [ cnt ] ; System . arraycopy ( tmp , 0 , list , 0 , cnt ) ; return list ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = SSHSCPGUIThread . spaceSplit ( "Uo \"kdl3C6 L5ki" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] spaceSplit ( String str ) { if ( str = = null | | str . length ( ) < = 0 ) return null ; int l = 0 , r , cnt = 0 ; String [ ] list = new String [ str . length ( ) / 2 ] ; boolean lastIsQuoted = false ; str = str . trim ( ) ; while ( ( r = str . indexOf ( ' ' , l ) ) > = 0 ) { if ( str . charAt ( l ) = = '"' ) { l + = 1 ; r = str . indexOf ( '"' , l ) ; if ( r = = - 1 ) return null ; } String name = str . substring ( l , r ) ; if ( name . endsWith ( File . separator ) ) name = name . substring ( 0 , name . length ( ) - 1 ) ; list [ cnt + + ] = name ; l = r ; do { l + + ; if ( l = = str . length ( ) ) { lastIsQuoted = true ; break ; } } while ( str . charAt ( l ) = = ' ' ) ; } if ( ! lastIsQuoted ) { if ( str . charAt ( l ) = = '"' ) { l + = 1 ; r = str . indexOf ( '"' , l ) ; if ( r = = - 1 ) return null ; } String name = str . substring ( l ) ; if ( name . endsWith ( File . separator ) ) name = name . substring ( 0 , name . length ( ) - 1 ) ; list [ cnt + + ] = name ; } for ( int i = 0 ; i < cnt ; i + + ) { if ( list [ i ] . endsWith ( "\"" ) ) { list [ i ] = list [ i ] . substring ( 0 , list [ i ] . length ( ) - 1 ) ; } } String [ ] tmp = list ; list = new String [ cnt ] ; System . arraycopy ( tmp , 0 , list , 0 , cnt ) ; return list ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = SSHSCPGUIThread . spaceSplit ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] spaceSplit ( String str ) { if ( str = = null | | str . length ( ) < = 0 ) return null ; int l = 0 , r , cnt = 0 ; String [ ] list = new String [ str . length ( ) / 2 ] ; boolean lastIsQuoted = false ; str = str . trim ( ) ; while ( ( r = str . indexOf ( ' ' , l ) ) > = 0 ) { if ( str . charAt ( l ) = = '"' ) { l + = 1 ; r = str . indexOf ( '"' , l ) ; if ( r = = - 1 ) return null ; } String name = str . substring ( l , r ) ; if ( name . endsWith ( File . separator ) ) name = name . substring ( 0 , name . length ( ) - 1 ) ; list [ cnt + + ] = name ; l = r ; do { l + + ; if ( l = = str . length ( ) ) { lastIsQuoted = true ; break ; } } while ( str . charAt ( l ) = = ' ' ) ; } if ( ! lastIsQuoted ) { if ( str . charAt ( l ) = = '"' ) { l + = 1 ; r = str . indexOf ( '"' , l ) ; if ( r = = - 1 ) return null ; } String name = str . substring ( l ) ; if ( name . endsWith ( File . separator ) ) name = name . substring ( 0 , name . length ( ) - 1 ) ; list [ cnt + + ] = name ; } for ( int i = 0 ; i < cnt ; i + + ) { if ( list [ i ] . endsWith ( "\"" ) ) { list [ i ] = list [ i ] . substring ( 0 , list [ i ] . length ( ) - 1 ) ; } } String [ ] tmp = list ; list = new String [ cnt ] ; System . arraycopy ( tmp , 0 , list , 0 , cnt ) ; return list ; }
void test8 ( ) throws Throwable { String [ ] stringArray0 = SSHSCPGUIThread . spaceSplit ( "Eb4qz + l / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] spaceSplit ( String str ) { if ( str = = null | | str . length ( ) < = 0 ) return null ; int l = 0 , r , cnt = 0 ; String [ ] list = new String [ str . length ( ) / 2 ] ; boolean lastIsQuoted = false ; str = str . trim ( ) ; while ( ( r = str . indexOf ( ' ' , l ) ) > = 0 ) { if ( str . charAt ( l ) = = '"' ) { l + = 1 ; r = str . indexOf ( '"' , l ) ; if ( r = = - 1 ) return null ; } String name = str . substring ( l , r ) ; if ( name . endsWith ( File . separator ) ) name = name . substring ( 0 , name . length ( ) - 1 ) ; list [ cnt + + ] = name ; l = r ; do { l + + ; if ( l = = str . length ( ) ) { lastIsQuoted = true ; break ; } } while ( str . charAt ( l ) = = ' ' ) ; } if ( ! lastIsQuoted ) { if ( str . charAt ( l ) = = '"' ) { l + = 1 ; r = str . indexOf ( '"' , l ) ; if ( r = = - 1 ) return null ; } String name = str . substring ( l ) ; if ( name . endsWith ( File . separator ) ) name = name . substring ( 0 , name . length ( ) - 1 ) ; list [ cnt + + ] = name ; } for ( int i = 0 ; i < cnt ; i + + ) { if ( list [ i ] . endsWith ( "\"" ) ) { list [ i ] = list [ i ] . substring ( 0 , list [ i ] . length ( ) - 1 ) ; } } String [ ] tmp = list ; list = new String [ cnt ] ; System . arraycopy ( tmp , 0 , list , 0 , cnt ) ; return list ; }
void test9 ( ) throws Throwable { String [ ] stringArray0 = SSHSCPGUIThread . spaceSplit ( "FTP response 421 received Server clsei conctio" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] spaceSplit ( String str ) { if ( str = = null | | str . length ( ) < = 0 ) return null ; int l = 0 , r , cnt = 0 ; String [ ] list = new String [ str . length ( ) / 2 ] ; boolean lastIsQuoted = false ; str = str . trim ( ) ; while ( ( r = str . indexOf ( ' ' , l ) ) > = 0 ) { if ( str . charAt ( l ) = = '"' ) { l + = 1 ; r = str . indexOf ( '"' , l ) ; if ( r = = - 1 ) return null ; } String name = str . substring ( l , r ) ; if ( name . endsWith ( File . separator ) ) name = name . substring ( 0 , name . length ( ) - 1 ) ; list [ cnt + + ] = name ; l = r ; do { l + + ; if ( l = = str . length ( ) ) { lastIsQuoted = true ; break ; } } while ( str . charAt ( l ) = = ' ' ) ; } if ( ! lastIsQuoted ) { if ( str . charAt ( l ) = = '"' ) { l + = 1 ; r = str . indexOf ( '"' , l ) ; if ( r = = - 1 ) return null ; } String name = str . substring ( l ) ; if ( name . endsWith ( File . separator ) ) name = name . substring ( 0 , name . length ( ) - 1 ) ; list [ cnt + + ] = name ; } for ( int i = 0 ; i < cnt ; i + + ) { if ( list [ i ] . endsWith ( "\"" ) ) { list [ i ] = list [ i ] . substring ( 0 , list [ i ] . length ( ) - 1 ) ; } } String [ ] tmp = list ; list = new String [ cnt ] ; System . arraycopy ( tmp , 0 , list , 0 , cnt ) ; return list ; }
void test10 ( ) throws Throwable { String [ ] stringArray0 = SSHSCPGUIThread . spaceSplit ( "\"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] spaceSplit ( String str ) { if ( str = = null | | str . length ( ) < = 0 ) return null ; int l = 0 , r , cnt = 0 ; String [ ] list = new String [ str . length ( ) / 2 ] ; boolean lastIsQuoted = false ; str = str . trim ( ) ; while ( ( r = str . indexOf ( ' ' , l ) ) > = 0 ) { if ( str . charAt ( l ) = = '"' ) { l + = 1 ; r = str . indexOf ( '"' , l ) ; if ( r = = - 1 ) return null ; } String name = str . substring ( l , r ) ; if ( name . endsWith ( File . separator ) ) name = name . substring ( 0 , name . length ( ) - 1 ) ; list [ cnt + + ] = name ; l = r ; do { l + + ; if ( l = = str . length ( ) ) { lastIsQuoted = true ; break ; } } while ( str . charAt ( l ) = = ' ' ) ; } if ( ! lastIsQuoted ) { if ( str . charAt ( l ) = = '"' ) { l + = 1 ; r = str . indexOf ( '"' , l ) ; if ( r = = - 1 ) return null ; } String name = str . substring ( l ) ; if ( name . endsWith ( File . separator ) ) name = name . substring ( 0 , name . length ( ) - 1 ) ; list [ cnt + + ] = name ; } for ( int i = 0 ; i < cnt ; i + + ) { if ( list [ i ] . endsWith ( "\"" ) ) { list [ i ] = list [ i ] . substring ( 0 , list [ i ] . length ( ) - 1 ) ; } } String [ ] tmp = list ; list = new String [ cnt ] ; System . arraycopy ( tmp , 0 , list , 0 , cnt ) ; return list ; }
void test11 ( ) throws Throwable { String [ ] stringArray0 = SSHSCPGUIThread . spaceSplit ( "opdio : \"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] spaceSplit ( String str ) { if ( str = = null | | str . length ( ) < = 0 ) return null ; int l = 0 , r , cnt = 0 ; String [ ] list = new String [ str . length ( ) / 2 ] ; boolean lastIsQuoted = false ; str = str . trim ( ) ; while ( ( r = str . indexOf ( ' ' , l ) ) > = 0 ) { if ( str . charAt ( l ) = = '"' ) { l + = 1 ; r = str . indexOf ( '"' , l ) ; if ( r = = - 1 ) return null ; } String name = str . substring ( l , r ) ; if ( name . endsWith ( File . separator ) ) name = name . substring ( 0 , name . length ( ) - 1 ) ; list [ cnt + + ] = name ; l = r ; do { l + + ; if ( l = = str . length ( ) ) { lastIsQuoted = true ; break ; } } while ( str . charAt ( l ) = = ' ' ) ; } if ( ! lastIsQuoted ) { if ( str . charAt ( l ) = = '"' ) { l + = 1 ; r = str . indexOf ( '"' , l ) ; if ( r = = - 1 ) return null ; } String name = str . substring ( l ) ; if ( name . endsWith ( File . separator ) ) name = name . substring ( 0 , name . length ( ) - 1 ) ; list [ cnt + + ] = name ; } for ( int i = 0 ; i < cnt ; i + + ) { if ( list [ i ] . endsWith ( "\"" ) ) { list [ i ] = list [ i ] . substring ( 0 , list [ i ] . length ( ) - 1 ) ; } } String [ ] tmp = list ; list = new String [ cnt ] ; System . arraycopy ( tmp , 0 , list , 0 , cnt ) ; return list ; }
void test12 ( ) throws Throwable { String [ ] stringArray0 = new String [ 9 ] ; stringArray0 [ 0 ] = " / " ; stringArray0 [ 1 ] = " / " ; stringArray0 [ 2 ] = " / " ; stringArray0 [ 3 ] = " / 8a^UP * 9~ ? " ; stringArray0 [ 4 ] = " / 8a^UP * 9~ ? " ; stringArray0 [ 5 ] = " / " ; stringArray0 [ 6 ] = " / " ; stringArray0 [ 7 ] = " / " ; stringArray0 [ 8 ] = " / " ; String [ ] stringArray1 = SSHSCPGUIThread . starExpand ( stringArray0 , " / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] starExpand ( String [ ] fileList , String curDir ) { int i , j , n , cnt = 0 ; String [ ] newList = new String [ 4096 ] ; / / ! ! ! Ouch . . . String [ ] curDirList = ( new File ( curDir ) ) . list ( ) ; String path , curFile ; for ( i = 0 ; i < fileList . length ; i + + ) { curFile = fileList [ i ] ; path = "" ; n = curFile . indexOf ( ' * ' ) ; if ( n = = - 1 ) { cnt = addUnique ( newList , curFile , cnt ) ; continue ; } String [ ] dirList ; File f = new File ( curFile ) ; if ( ! f . isAbsolute ( ) ) { dirList = curDirList ; } else { String dir = f . getParent ( ) ; if ( dir = = null ) dir = new String ( File . separator ) ; / / ! ! ! Ouch . . . dirList = ( new File ( dir ) ) . list ( ) ; curFile = f . getName ( ) ; path = dir + File . separator ; n = curFile . indexOf ( ' * ' ) ; } String pre = curFile . substring ( 0 , n ) ; String post = curFile . substring ( n + 1 ) ; for ( j = 0 ; j < dirList . length ; j + + ) { String name = dirList [ j ] ; if ( name . startsWith ( pre ) & & name . endsWith ( post ) ) { cnt = addUnique ( newList , path + name , cnt ) ; } } } String [ ] tmp = newList ; newList = new String [ cnt ] ; System . arraycopy ( tmp , 0 , newList , 0 , cnt ) ; return newList ; }
void test16 ( ) throws Throwable { SSHSCPGUIThread sSHSCPGUIThread0 = new SSHSCPGUIThread ( ( Frame ) null , ( FileDisplay ) null , ( FileDisplay ) null , ( RemoteFileBrowser ) null , false , false , false , false , ( SSHSCPPanel ) null ) ; sSHSCPGUIThread0 . progress ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void progress ( long size ) ; }
void test17 ( ) throws Throwable { SSHSCPGUIThread sSHSCPGUIThread0 = new SSHSCPGUIThread ( ( Frame ) null , ( FileDisplay ) null , ( FileDisplay ) null , ( RemoteFileBrowser ) null , false , false , false , false , ( SSHSCPPanel ) null ) ; String string0 = sSHSCPGUIThread0 . cutName ( "q4U81WbYk + j , $ } : $ + '" , 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String cutName ( String name , int len ) { if ( name . length ( ) > len ) { len - = 3 ; String pre = name . substring ( 0 , len / 2 ) ; String suf = name . substring ( name . length ( ) - ( len / 2 ) ) ; name = pre + " . . . " + suf ; } return name ; }
void test0 ( ) throws Throwable { String string0 = SSHSCPPanel . createThreadName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createThreadName ( ) { return "SSH - " + ( thrdPart + + ) ; }
void test1 ( ) throws Throwable { ThreadGroup threadGroup0 = SSHSCPPanel . getThreadGroup ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThreadGroup getThreadGroup ( ) { if ( threadGroup = = null ) { threadGroup = new ThreadGroup ( "Mindbright SSH" ) ; / / JH_Mod } return threadGroup ; }
void test0 ( ) throws Throwable { SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler ( ) ; String string0 = sSHPropertyHandler0 . getRemoteServer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRemoteServer ( ) { return remoteServer ; }
void test1 ( ) throws Throwable { SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler ( ) ; sSHPropertyHandler0 . setHasBinay ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRemotePort ( ) { return remotePort ; }
void test2 ( ) throws Throwable { SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler ( ) ; int int0 = sSHPropertyHandler0 . getRemotePort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRemoteServer ( ) { return remoteServer ; }
void test3 ( ) throws Throwable { SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler ( ) ; sSHPropertyHandler0 . setRemotePort ( ( - 82 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRemotePort ( ) { return remotePort ; }
void test4 ( ) throws Throwable { SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler ( ) ; sSHPropertyHandler0 . setSshHomeDir ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSshHomeDir ( ) { return sshHomeDir ; }
void test5 ( ) throws Throwable { SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler ( ) ; String string0 = sSHPropertyHandler0 . getRemotePassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRemoteServer ( ) { return remoteServer ; }
void test6 ( ) throws Throwable { SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler ( ) ; sSHPropertyHandler0 . setRemoteUser ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBinay ( ) { return hasBinay ; }
void test7 ( ) throws Throwable { SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler ( ) ; sSHPropertyHandler0 . setRemotePassword ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRemotePort ( ) { return remotePort ; }
void test8 ( ) throws Throwable { SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler ( ) ; boolean boolean0 = sSHPropertyHandler0 . hasBinay ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRemoteServer ( ) { return remoteServer ; }
void test9 ( ) throws Throwable { SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler ( ) ; String string0 = sSHPropertyHandler0 . getRemoteUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRemoteServer ( ) { return remoteServer ; }
void test10 ( ) throws Throwable { SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler ( ) ; String string0 = sSHPropertyHandler0 . getSshHomeDir ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRemoteServer ( ) { return remoteServer ; }
void test11 ( ) throws Throwable { SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler ( ) ; sSHPropertyHandler0 . setRemoteServer ( "localhost" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRemotePort ( ) { return remotePort ; }
void test12 ( ) throws Throwable { SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler ( ) ; sSHPropertyHandler0 . getParent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBinay ( ) { return hasBinay ; }
void test13 ( ) throws Throwable { SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler ( ) ; sSHPropertyHandler0 . setParent ( ( Frame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRemotePort ( ) { return remotePort ; }
void test14 ( ) throws Throwable { SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler ( ) ; sSHPropertyHandler0 . setSSHHomeDir ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBinay ( ) { return hasBinay ; }
void test15 ( ) throws Throwable { SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler ( ) ; sSHPropertyHandler0 . getSSHHomeDir ( ) ; String string0 = sSHPropertyHandler0 . getSSHHomeDir ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRemoteServer ( ) { return remoteServer ; }
void test3 ( ) throws Throwable { SSHMiscDialogs sSHMiscDialogs0 = new SSHMiscDialogs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { File file0 = new File ( "~ : w ] " ) ; FileListItem fileListItem0 = new FileListItem ( file0 ) ; fileListItem0 . getLastModify ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirectory ( ) { return mDirectory ; }
void test1 ( ) throws Throwable { File file0 = new File ( "~ : w ] " ) ; FileListItem fileListItem0 = new FileListItem ( file0 ) ; fileListItem0 . getParent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirectory ( ) { return mDirectory ; }
void test2 ( ) throws Throwable { FileListItem fileListItem0 = new FileListItem ( "sb9el%" , "sb9el%" , true , ( - 1L ) , 0L ) ; long long0 = fileListItem0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirectory ( ) { return mDirectory ; }
void test3 ( ) throws Throwable { FileListItem fileListItem0 = new FileListItem ( "sb9el%" , "sb9el%" , true , ( - 1L ) , 0L ) ; String string0 = fileListItem0 . getAbsolutePath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLastModify ( ) { return mLastModify ; }
void test4 ( ) throws Throwable { File file0 = new File ( "~ : w ] " ) ; FileListItem fileListItem0 = new FileListItem ( file0 ) ; String string0 = fileListItem0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAbsolutePath ( ) { return mParent + mName ; }
void test5 ( ) throws Throwable { Vector < FileListItem > vector0 = new Vector < FileListItem > ( ) ; FileListItem fileListItem0 = new FileListItem ( " . . " , " . . " , true , ( long ) ( - 11 ) , ( long ) ( - 11 ) ) ; vector0 . add ( fileListItem0 ) ; FileListItem . sort ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void sort ( Vector files ) { for ( int i = 0 ; i < files . size ( ) ; i + + ) { for ( int j = i ; j < files . size ( ) ; j + + ) { if ( ! ( ( FileListItem ) files . elementAt ( i ) ) . earlierThan ( ( FileListItem ) files . elementAt ( j ) ) ) { FileListItem temp = ( FileListItem ) files . elementAt ( j ) ; files . setElementAt ( ( FileListItem ) files . elementAt ( i ) , j ) ; files . setElementAt ( temp , i ) ; } } } }
void test6 ( ) throws Throwable { FileListItem fileListItem0 = new FileListItem ( "sb9el%" , "sb9el%" , true , ( - 1L ) , 0L ) ; Vector < FileListItem > vector0 = new Vector < FileListItem > ( ) ; vector0 . add ( fileListItem0 ) ; FileListItem fileListItem1 = new FileListItem ( " . . " , " . . " , true , ( long ) ( - 11 ) , ( long ) ( - 11 ) ) ; vector0 . add ( fileListItem1 ) ; FileListItem . sort ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void sort ( Vector files ) { for ( int i = 0 ; i < files . size ( ) ; i + + ) { for ( int j = i ; j < files . size ( ) ; j + + ) { if ( ! ( ( FileListItem ) files . elementAt ( i ) ) . earlierThan ( ( FileListItem ) files . elementAt ( j ) ) ) { FileListItem temp = ( FileListItem ) files . elementAt ( j ) ; files . setElementAt ( ( FileListItem ) files . elementAt ( i ) , j ) ; files . setElementAt ( temp , i ) ; } } } }
void test7 ( ) throws Throwable { FileListItem fileListItem0 = new FileListItem ( "sb9el%" , "sb9el%" , true , ( - 1L ) , 0L ) ; Vector < FileListItem > vector0 = new Vector < FileListItem > ( ) ; vector0 . add ( fileListItem0 ) ; FileListItem fileListItem1 = new FileListItem ( "" , " . . " , false , ( long ) ( - 11 ) , ( long ) ( - 11 ) ) ; vector0 . add ( fileListItem1 ) ; FileListItem . sort ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void sort ( Vector files ) { for ( int i = 0 ; i < files . size ( ) ; i + + ) { for ( int j = i ; j < files . size ( ) ; j + + ) { if ( ! ( ( FileListItem ) files . elementAt ( i ) ) . earlierThan ( ( FileListItem ) files . elementAt ( j ) ) ) { FileListItem temp = ( FileListItem ) files . elementAt ( j ) ; files . setElementAt ( ( FileListItem ) files . elementAt ( i ) , j ) ; files . setElementAt ( temp , i ) ; } } } }
void test8 ( ) throws Throwable { FileListItem fileListItem0 = new FileListItem ( "sb9el%" , "sb9el%" , true , ( - 1L ) , 0L ) ; Vector < FileListItem > vector0 = new Vector < FileListItem > ( ) ; FileListItem fileListItem1 = new FileListItem ( "S\"H' : c8 < / \tK - eA4" , "S\"H' : c8 < / \tK - eA4" , false , 1L , 1L ) ; vector0 . add ( fileListItem1 ) ; vector0 . add ( fileListItem0 ) ; FileListItem . sort ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void sort ( Vector files ) { for ( int i = 0 ; i < files . size ( ) ; i + + ) { for ( int j = i ; j < files . size ( ) ; j + + ) { if ( ! ( ( FileListItem ) files . elementAt ( i ) ) . earlierThan ( ( FileListItem ) files . elementAt ( j ) ) ) { FileListItem temp = ( FileListItem ) files . elementAt ( j ) ; files . setElementAt ( ( FileListItem ) files . elementAt ( i ) , j ) ; files . setElementAt ( temp , i ) ; } } } }
void test9 ( ) throws Throwable { Vector < FileListItem > vector0 = new Vector < FileListItem > ( ) ; FileListItem fileListItem0 = new FileListItem ( "S\"H' : c8 < / \tK - eA4" , "S\"H' : c8 < / \tK - eA4" , false , 1L , 1L ) ; vector0 . add ( fileListItem0 ) ; FileListItem fileListItem1 = new FileListItem ( "" , " . . " , false , ( long ) ( - 11 ) , ( long ) ( - 11 ) ) ; vector0 . add ( fileListItem1 ) ; FileListItem . sort ( vector0 ) ; FileListItem . sort ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void sort ( Vector files ) { for ( int i = 0 ; i < files . size ( ) ; i + + ) { for ( int j = i ; j < files . size ( ) ; j + + ) { if ( ! ( ( FileListItem ) files . elementAt ( i ) ) . earlierThan ( ( FileListItem ) files . elementAt ( j ) ) ) { FileListItem temp = ( FileListItem ) files . elementAt ( j ) ; files . setElementAt ( ( FileListItem ) files . elementAt ( i ) , j ) ; files . setElementAt ( temp , i ) ; } } } }
