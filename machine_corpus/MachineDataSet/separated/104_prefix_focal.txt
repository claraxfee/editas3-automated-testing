void test1 ( ) throws Throwable { UIFunctionsManager uIFunctionsManager0 = new UIFunctionsManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; String [ ] stringArray0 = new String [ 9 ] ; stringArray0 [ 0 ] = " [ zjJebYwXAp#S4" ; SWTSkinPropertiesClone sWTSkinPropertiesClone0 = new SWTSkinPropertiesClone ( ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , " [ zjJebYwXAp#S4" , stringArray0 ) ; Color color0 = sWTSkinPropertiesClone0 . getColor ( " [ zjJebYwXAp#S4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test2 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; Color color0 = sWTSkinPropertiesImpl0 . getColor ( " [ zjJebYwXAp#S4" , ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; SWTSkinPropertiesClone sWTSkinPropertiesClone0 = new SWTSkinPropertiesClone ( ( SWTSkinProperties ) null , ( String ) null , stringArray0 ) ; SWTSkinProperties sWTSkinProperties0 = sWTSkinPropertiesClone0 . getOriginalProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SWTSkinProperties getOriginalProperties ( ) { return properties ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; SWTSkinPropertiesClone sWTSkinPropertiesClone0 = new SWTSkinPropertiesClone ( ( SWTSkinProperties ) null , "@PGC^ , IB4" , stringArray0 ) ; String [ ] stringArray1 = sWTSkinPropertiesClone0 . getParamValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getParamValues ( ) { return sCloneParams ; }
void test9 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; SWTSkinPropertiesClone sWTSkinPropertiesClone0 = new SWTSkinPropertiesClone ( ( SWTSkinProperties ) null , ( String ) null , stringArray0 ) ; SWTColorWithAlpha sWTColorWithAlpha0 = sWTSkinPropertiesClone0 . getColorWithAlpha ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SWTColorWithAlpha getColorWithAlpha ( String sID ) { return properties . getColorWithAlpha ( sID ) ; }
void test16 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; SWTSkinPropertiesClone sWTSkinPropertiesClone0 = new SWTSkinPropertiesClone ( ( SWTSkinProperties ) null , ( String ) null , stringArray0 ) ; int [ ] intArray0 = sWTSkinPropertiesClone0 . getColorValue ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getColorValue ( String name ) { return properties . getColorValue ( name ) ; }
void test19 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; SWTSkinPropertiesClone sWTSkinPropertiesClone0 = new SWTSkinPropertiesClone ( ( SWTSkinProperties ) null , ( String ) null , stringArray0 ) ; int int0 = sWTSkinPropertiesClone0 . getIntValue ( ( String ) null , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntValue ( String name , int def ) { return properties . getIntValue ( name , def ) ; }
void test22 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; SWTSkinPropertiesClone sWTSkinPropertiesClone0 = new SWTSkinPropertiesClone ( ( SWTSkinProperties ) null , ( String ) null , stringArray0 ) ; String [ ] stringArray1 = sWTSkinPropertiesClone0 . getStringArray ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getStringArray ( String name , String [ ] params ) { return properties . getStringArray ( name , params ) ; }
void test26 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; SWTSkinPropertiesClone sWTSkinPropertiesClone0 = new SWTSkinPropertiesClone ( ( SWTSkinProperties ) null , ( String ) null , stringArray0 ) ; String string0 = sWTSkinPropertiesClone0 . getStringValue ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStringValue ( String name , String def ) { return properties . getStringValue ( name , sCloneParams , def ) ; }
void test30 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; SWTSkinPropertiesClone sWTSkinPropertiesClone0 = new SWTSkinPropertiesClone ( ( SWTSkinProperties ) null , ( String ) null , stringArray0 ) ; String string0 = sWTSkinPropertiesClone0 . getStringValue ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStringValue ( String name , String def ) { return properties . getStringValue ( name , sCloneParams , def ) ; }
void test34 ( ) throws Throwable { String [ ] stringArray0 = new String [ 9 ] ; SWTSkinPropertiesClone sWTSkinPropertiesClone0 = new SWTSkinPropertiesClone ( ( SWTSkinProperties ) null , "isVisible" , stringArray0 ) ; String [ ] stringArray1 = sWTSkinPropertiesClone0 . getStringArray ( ( String ) null , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getStringArray ( String name , String [ ] params ) { return properties . getStringArray ( name , params ) ; }
void test38 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; SWTSkinPropertiesClone sWTSkinPropertiesClone0 = new SWTSkinPropertiesClone ( ( SWTSkinProperties ) null , "ConsoleInput : starting . . . ConsoleInput : starting . . . Ip Filter Enable Banning" , stringArray0 ) ; String string0 = sWTSkinPropertiesClone0 . getStringValue ( ( String ) null , stringArray0 , "ConsoleInput : starting . . . ConsoleInput : starting . . . Ip Filter Enable Banning" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStringValue ( String name , String def ) { return properties . getStringValue ( name , sCloneParams , def ) ; }
void test42 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; SWTSkinPropertiesClone sWTSkinPropertiesClone0 = new SWTSkinPropertiesClone ( ( SWTSkinProperties ) null , ( String ) null , stringArray0 ) ; String string0 = sWTSkinPropertiesClone0 . getStringValue ( ( String ) null , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStringValue ( String name , String def ) { return properties . getStringValue ( name , sCloneParams , def ) ; }
void test46 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; SWTSkinPropertiesClone sWTSkinPropertiesClone0 = new SWTSkinPropertiesClone ( ( SWTSkinProperties ) null , ( String ) null , stringArray0 ) ; boolean boolean0 = sWTSkinPropertiesClone0 . getBooleanValue ( ( String ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBooleanValue ( String name , boolean def ) { return properties . getBooleanValue ( name , def ) ; }
void test50 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; SWTSkinPropertiesClone sWTSkinPropertiesClone0 = new SWTSkinPropertiesClone ( ( SWTSkinProperties ) null , ( String ) null , stringArray0 ) ; Color color0 = sWTSkinPropertiesClone0 . getColor ( ( String ) null , ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test51 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; SWTSkinPropertiesClone sWTSkinPropertiesClone0 = new SWTSkinPropertiesClone ( ( SWTSkinProperties ) null , ( String ) null , stringArray0 ) ; String string0 = sWTSkinPropertiesClone0 . getReferenceID ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReferenceID ( String name ) { return properties . getReferenceID ( name ) ; }
void test0 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; String [ ] stringArray0 = new String [ 6 ] ; SWTSkinPropertiesParamImpl sWTSkinPropertiesParamImpl0 = new SWTSkinPropertiesParamImpl ( ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , stringArray0 ) ; int [ ] intArray0 = sWTSkinPropertiesParamImpl0 . getColorValue ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getColorValue ( String name ) { return properties . getColorValue ( name ) ; }
void test1 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; String [ ] stringArray0 = new String [ 7 ] ; SWTSkinPropertiesParamImpl sWTSkinPropertiesParamImpl0 = new SWTSkinPropertiesParamImpl ( ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , stringArray0 ) ; InstrumentingClassLoader instrumentingClassLoader0 = ( InstrumentingClassLoader ) sWTSkinPropertiesParamImpl0 . getClassLoader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClassLoader getClassLoader ( ) { return properties . getClassLoader ( ) ; }
void test2 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; String [ ] stringArray0 = new String [ 7 ] ; SWTSkinPropertiesParamImpl sWTSkinPropertiesParamImpl0 = new SWTSkinPropertiesParamImpl ( ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , stringArray0 ) ; String string0 = sWTSkinPropertiesParamImpl0 . getStringValue ( ( String ) null , "W = ~I . ? % = X" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStringValue ( String name , String def ) { return properties . getStringValue ( name , sCloneParams , def ) ; }
void test4 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; String [ ] stringArray0 = new String [ 7 ] ; SWTSkinPropertiesParamImpl sWTSkinPropertiesParamImpl0 = new SWTSkinPropertiesParamImpl ( ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , stringArray0 ) ; int int0 = sWTSkinPropertiesParamImpl0 . getIntValue ( "W = ~I . ? % = X" , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntValue ( String name , int def ) { return properties . getIntValue ( name , def ) ; }
void test5 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; String [ ] stringArray0 = new String [ 7 ] ; SWTSkinPropertiesParamImpl sWTSkinPropertiesParamImpl0 = new SWTSkinPropertiesParamImpl ( ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , stringArray0 ) ; String [ ] stringArray1 = sWTSkinPropertiesParamImpl0 . getParamValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getParamValues ( ) { return sCloneParams ; }
void test8 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; String [ ] stringArray0 = new String [ 7 ] ; SWTSkinPropertiesParamImpl sWTSkinPropertiesParamImpl0 = new SWTSkinPropertiesParamImpl ( ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , stringArray0 ) ; String [ ] stringArray1 = sWTSkinPropertiesParamImpl0 . getStringArray ( "W = ~I . ? % = X" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getStringArray ( String name , String [ ] params ) { return properties . getStringArray ( name , params ) ; }
void test9 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; String [ ] stringArray0 = new String [ 6 ] ; SWTSkinPropertiesParamImpl sWTSkinPropertiesParamImpl0 = new SWTSkinPropertiesParamImpl ( ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , stringArray0 ) ; boolean boolean0 = sWTSkinPropertiesParamImpl0 . hasKey ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasKey ( String name ) { return properties . hasKey ( name ) ; }
void test10 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; String [ ] stringArray0 = new String [ 7 ] ; SWTSkinPropertiesParamImpl sWTSkinPropertiesParamImpl0 = new SWTSkinPropertiesParamImpl ( ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , stringArray0 ) ; String string0 = sWTSkinPropertiesParamImpl0 . getStringValue ( "W = ~I . ? % = X" , stringArray0 , "W = ~I . ? % = X" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStringValue ( String name , String def ) { return properties . getStringValue ( name , sCloneParams , def ) ; }
void test12 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; String [ ] stringArray0 = new String [ 6 ] ; SWTSkinPropertiesParamImpl sWTSkinPropertiesParamImpl0 = new SWTSkinPropertiesParamImpl ( ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , stringArray0 ) ; String string0 = sWTSkinPropertiesParamImpl0 . getStringValue ( ( String ) null , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStringValue ( String name , String def ) { return properties . getStringValue ( name , sCloneParams , def ) ; }
void test13 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; String [ ] stringArray0 = new String [ 6 ] ; SWTSkinPropertiesParamImpl sWTSkinPropertiesParamImpl0 = new SWTSkinPropertiesParamImpl ( ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , stringArray0 ) ; Color color0 = sWTSkinPropertiesParamImpl0 . getColor ( ( String ) null , ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test14 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; String [ ] stringArray0 = new String [ 6 ] ; SWTSkinPropertiesParamImpl sWTSkinPropertiesParamImpl0 = new SWTSkinPropertiesParamImpl ( ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , stringArray0 ) ; String [ ] stringArray1 = sWTSkinPropertiesParamImpl0 . getStringArray ( "e" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getStringArray ( String name , String [ ] params ) { return properties . getStringArray ( name , params ) ; }
void test15 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; String [ ] stringArray0 = new String [ 7 ] ; SWTSkinPropertiesParamImpl sWTSkinPropertiesParamImpl0 = new SWTSkinPropertiesParamImpl ( ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , stringArray0 ) ; boolean boolean0 = sWTSkinPropertiesParamImpl0 . getBooleanValue ( "W = ~I . ? % = X" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBooleanValue ( String name , boolean def ) { return properties . getBooleanValue ( name , def ) ; }
void test16 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; String [ ] stringArray0 = new String [ 8 ] ; SWTSkinPropertiesParamImpl sWTSkinPropertiesParamImpl0 = new SWTSkinPropertiesParamImpl ( ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , stringArray0 ) ; SWTColorWithAlpha sWTColorWithAlpha0 = sWTSkinPropertiesParamImpl0 . getColorWithAlpha ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SWTColorWithAlpha getColorWithAlpha ( String sID ) { return properties . getColorWithAlpha ( sID ) ; }
void test17 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; String [ ] stringArray0 = new String [ 6 ] ; SWTSkinPropertiesParamImpl sWTSkinPropertiesParamImpl0 = new SWTSkinPropertiesParamImpl ( ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , stringArray0 ) ; String string0 = sWTSkinPropertiesParamImpl0 . getReferenceID ( "f" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReferenceID ( String name ) { return properties . getReferenceID ( name ) ; }
void test18 ( ) throws Throwable { SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; String [ ] stringArray0 = new String [ 8 ] ; SWTSkinPropertiesParamImpl sWTSkinPropertiesParamImpl0 = new SWTSkinPropertiesParamImpl ( ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , stringArray0 ) ; String string0 = sWTSkinPropertiesParamImpl0 . getStringValue ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStringValue ( String name , String def ) { return properties . getStringValue ( name , sCloneParams , def ) ; }
void test2 ( ) throws Throwable { SWTSkinUtils sWTSkinUtils0 = new SWTSkinUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { int int0 = SWTSkinUtils . getAlignment ( " = hMik` | " , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAlignment ( String sAlign , int def ) { int align ; if ( sAlign = = null ) { align = def ; } else if ( sAlign . equalsIgnoreCase ( "center" ) ) { align = SWT . CENTER ; } else if ( sAlign . equalsIgnoreCase ( "bottom" ) ) { align = SWT . BOTTOM ; } else if ( sAlign . equalsIgnoreCase ( "top" ) ) { align = SWT . TOP ; } else if ( sAlign . equalsIgnoreCase ( "left" ) ) { align = SWT . LEFT ; } else if ( sAlign . equalsIgnoreCase ( "right" ) ) { align = SWT . RIGHT ; } else { align = def ; } return align ; }
void test4 ( ) throws Throwable { int int0 = SWTSkinUtils . getAlignment ( ( String ) null , 1095 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAlignment ( String sAlign , int def ) { int align ; if ( sAlign = = null ) { align = def ; } else if ( sAlign . equalsIgnoreCase ( "center" ) ) { align = SWT . CENTER ; } else if ( sAlign . equalsIgnoreCase ( "bottom" ) ) { align = SWT . BOTTOM ; } else if ( sAlign . equalsIgnoreCase ( "top" ) ) { align = SWT . TOP ; } else if ( sAlign . equalsIgnoreCase ( "left" ) ) { align = SWT . LEFT ; } else if ( sAlign . equalsIgnoreCase ( "right" ) ) { align = SWT . RIGHT ; } else { align = def ; } return align ; }
void test5 ( ) throws Throwable { int int0 = SWTSkinUtils . getTileMode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTileMode ( String sTileMode ) { int tileMode = TILE_NONE ; if ( sTileMode = = null | | sTileMode = = "" ) { return tileMode ; } sTileMode = sTileMode . toLowerCase ( ) ; if ( sTileMode . equals ( "tile" ) ) { tileMode = TILE_X | TILE_Y ; } else if ( sTileMode . equals ( "tile - x" ) ) { tileMode = TILE_X ; } else if ( sTileMode . equals ( "tile - y" ) ) { tileMode = TILE_Y ; } else if ( sTileMode . equals ( "center - x" ) ) { tileMode = TILE_CENTER_X ; } else if ( sTileMode . equals ( "center - y" ) ) { tileMode = TILE_CENTER_Y ; } return tileMode ; }
void test6 ( ) throws Throwable { int int0 = SWTSkinUtils . getTileMode ( "tA77" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTileMode ( String sTileMode ) { int tileMode = TILE_NONE ; if ( sTileMode = = null | | sTileMode = = "" ) { return tileMode ; } sTileMode = sTileMode . toLowerCase ( ) ; if ( sTileMode . equals ( "tile" ) ) { tileMode = TILE_X | TILE_Y ; } else if ( sTileMode . equals ( "tile - x" ) ) { tileMode = TILE_X ; } else if ( sTileMode . equals ( "tile - y" ) ) { tileMode = TILE_Y ; } else if ( sTileMode . equals ( "center - x" ) ) { tileMode = TILE_CENTER_X ; } else if ( sTileMode . equals ( "center - y" ) ) { tileMode = TILE_CENTER_Y ; } return tileMode ; }
void test7 ( ) throws Throwable { int int0 = SWTSkinUtils . getTileMode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTileMode ( String sTileMode ) { int tileMode = TILE_NONE ; if ( sTileMode = = null | | sTileMode = = "" ) { return tileMode ; } sTileMode = sTileMode . toLowerCase ( ) ; if ( sTileMode . equals ( "tile" ) ) { tileMode = TILE_X | TILE_Y ; } else if ( sTileMode . equals ( "tile - x" ) ) { tileMode = TILE_X ; } else if ( sTileMode . equals ( "tile - y" ) ) { tileMode = TILE_Y ; } else if ( sTileMode . equals ( "center - x" ) ) { tileMode = TILE_CENTER_X ; } else if ( sTileMode . equals ( "center - y" ) ) { tileMode = TILE_CENTER_Y ; } return tileMode ; }
void test8 ( ) throws Throwable { SWTSkinObjectBrowser sWTSkinObjectBrowser0 = SWTSkinUtils . findBrowserSO ( ( SWTSkinObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SWTSkinObjectBrowser findBrowserSO ( SWTSkinObject so ) { if ( so instanceof SWTSkinObjectBrowser ) { return ( SWTSkinObjectBrowser ) so ; } if ( so instanceof SWTSkinObjectContainer ) { SWTSkinObjectContainer soContainer = ( SWTSkinObjectContainer ) so ; SWTSkinObject [ ] children = soContainer . getChildren ( ) ; for ( int i = 0 ; i < children . length ; i + + ) { SWTSkinObject child = children [ i ] ; SWTSkinObjectBrowser found = findBrowserSO ( child ) ; if ( found ! = null ) { return found ; } } } return null ; }
void test0 ( ) throws Throwable { SWTSkinTabSet sWTSkinTabSet0 = new SWTSkinTabSet ( ( SWTSkin ) null , "gZ%g8 < efrdug" ) ; sWTSkinTabSet0 . setActiveTab ( ( SWTSkinObjectTab ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test1 ( ) throws Throwable { SWTSkinTabSet sWTSkinTabSet0 = new SWTSkinTabSet ( ( SWTSkin ) null , " = X | " ) ; SWTSkinObjectTab [ ] sWTSkinObjectTabArray0 = sWTSkinTabSet0 . getTabs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SWTSkinObjectTab [ ] getTabs ( ) { return ( SWTSkinObjectTab [ ] ) tabs . toArray ( new SWTSkinObjectTab [ 0 ] ) ; }
void test3 ( ) throws Throwable { SWTSkinTabSet sWTSkinTabSet0 = new SWTSkinTabSet ( ( SWTSkin ) null , "gZ%g8 < efrdug" ) ; String string0 = sWTSkinTabSet0 . getID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test4 ( ) throws Throwable { SWTSkinTabSet sWTSkinTabSet0 = new SWTSkinTabSet ( ( SWTSkin ) null , " = X | " ) ; SWTSkinObjectTab sWTSkinObjectTab0 = sWTSkinTabSet0 . getActiveTab ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SWTSkinObjectTab getActiveTab ( ) { return activeTab ; }
void test5 ( ) throws Throwable { SWTSkinTabSet sWTSkinTabSet0 = new SWTSkinTabSet ( ( SWTSkin ) null , "gZ%g8 < efrdug" ) ; sWTSkinTabSet0 . addListener ( ( SWTSkinTabSetListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test7 ( ) throws Throwable { SWTSkinTabSet sWTSkinTabSet0 = new SWTSkinTabSet ( ( SWTSkin ) null , "" ) ; SWTSkinObjectTab sWTSkinObjectTab0 = sWTSkinTabSet0 . getTabByID ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SWTSkinObjectTab getTabByID ( String sID ) { for ( int i = 0 ; i < tabs . size ( ) ; i + + ) { SWTSkinObjectTab tab = ( SWTSkinObjectTab ) tabs . get ( i ) ; String sTabID = tab . getSkinObjectID ( ) ; if ( sTabID . equals ( sID ) ) { return tab ; } } return null ; }
void test8 ( ) throws Throwable { SWTSkinTabSet sWTSkinTabSet0 = new SWTSkinTabSet ( ( SWTSkin ) null , "gZ%g8 < efrdug" ) ; SWTSkinObjectTab sWTSkinObjectTab0 = sWTSkinTabSet0 . getTab ( "gZ%g8 < efrdug" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SWTSkinObjectTab getTab ( String sViewID ) { for ( int i = 0 ; i < tabs . size ( ) ; i + + ) { SWTSkinObjectTab tab = ( SWTSkinObjectTab ) tabs . get ( i ) ; String sTabViewID = tab . getViewID ( ) ; if ( sTabViewID . equals ( sViewID ) ) { return tab ; } } return null ; }
void test9 ( ) throws Throwable { SWTSkinTabSet sWTSkinTabSet0 = new SWTSkinTabSet ( ( SWTSkin ) null , "" ) ; sWTSkinTabSet0 . swtSetActiveTab ( ( SWTSkinObjectTab ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test0 ( ) throws Throwable { ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( ( ToolBarView ) null , "y4R~kCGR ] rM% b$ ( ^ . " , true ) ; toolBarItemSO0 . dispose ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getState ( TableCell cell ) { DownloadManager dm = ( DownloadManager ) cell . getDataSource ( ) ; if ( dm = = null ) { return DownloadManager . STATE_ERROR ; } return dm . getState ( ) ; }
void test1 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "c / b ! ] `s` ; f = : w" , "c / b ! ] `s` ; f = : w" ) ; long long0 = toolBarItemSO0 . getDefaultState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test2 ( ) throws Throwable { ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( ( ToolBarView ) null , "y4R~kCGR ] rM% b$ ( ^ . " , true ) ; toolBarItemSO0 . setSkinTitle ( ( SWTSkinObjectText ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "t" , true ) ; SBC_ActivityTableView sBC_ActivityTableView0 = new SBC_ActivityTableView ( ) ; toolBarItemSO0 . setDefaultActivationListener ( ( UIToolBarActivationListener ) sBC_ActivityTableView0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test4 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "t" , true ) ; toolBarItemSO0 . setGroupID ( "image . toolbar . run" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test5 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "x4UwZ5" , "x4UwZ5" , "x4UwZ5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getImageID ( ) { return imageID ; }
void test7 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "r" , true ) ; boolean boolean0 = toolBarItemSO0 . isAlwaysAvailable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getImageID ( ) { return imageID ; }
void test8 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "" , true ) ; toolBarItemSO0 . setTooltipID ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test9 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "c / b ! ] `s` ; f = : w" , "c / b ! ] `s` ; f = : w" ) ; toolBarItemSO0 . getDefaultActivationListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getImageID ( ) { return imageID ; }
void test10 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "r" , true ) ; String string0 = toolBarItemSO0 . getTextID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAlwaysAvailable ( ) { return alwaysAvailable ; }
void test11 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "x4UwZ5" , "x4UwZ5" , "x4UwZ5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGroupID ( ) { return groupID ; }
void test12 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "" , true ) ; String string0 = toolBarItemSO0 . getTooltipID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGroupID ( ) { return groupID ; }
void test13 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "x4UwZ5" , "x4UwZ5" , "x4UwZ5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setSkinButton ( SWTSkinButtonUtility btn ) { this . skinButton = btn ; skinButton . setDisabled ( ! enabled ) ; }
void test15 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "x4UwZ5" , "x4UwZ5" , "x4UwZ5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getState ( TableCell cell ) { DownloadManager dm = ( DownloadManager ) cell . getDataSource ( ) ; if ( dm = = null ) { return DownloadManager . STATE_ERROR ; } return dm . getState ( ) ; }
void test16 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "c / b ! ] `s` ; f = : w" , "c / b ! ] `s` ; f = : w" ) ; toolBarItemSO0 . setState ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test17 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "c / b ! ] `s` ; f = : w" , "c / b ! ] `s` ; f = : w" ) ; SWTSkinButtonUtility sWTSkinButtonUtility0 = new SWTSkinButtonUtility ( ( SWTSkinObject ) null ) ; toolBarItemSO0 . setSkinButton ( sWTSkinButtonUtility0 ) ; toolBarView0 . addToolBarItem ( toolBarItemSO0 , "c / b ! ] `s` ; f = : w" , ( SWTSkinObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test18 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "c / b ! ] `s` ; f = : w" , "c / b ! ] `s` ; f = : w" ) ; toolBarItemSO0 . setAlwaysAvailable ( true ) ; toolBarItemSO0 . setState ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAlwaysAvailable ( ) { return alwaysAvailable ; }
void test19 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "c / b ! ] `s` ; f = : w" , "c / b ! ] `s` ; f = : w" ) ; SWTSkinButtonUtility sWTSkinButtonUtility0 = new SWTSkinButtonUtility ( ( SWTSkinObject ) null ) ; toolBarItemSO0 . setSkinButton ( sWTSkinButtonUtility0 ) ; toolBarItemSO0 . setAlwaysAvailable ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGroupID ( ) { return groupID ; }
void test20 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "t" , true ) ; toolBarItemSO0 . setImageID ( "image . toolbar . run" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test21 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "c / b ! ] `s` ; f = : w" , "c / b ! ] `s` ; f = : w" ) ; SWTSkinButtonUtility sWTSkinButtonUtility0 = new SWTSkinButtonUtility ( ( SWTSkinObject ) null ) ; toolBarItemSO0 . setSkinButton ( sWTSkinButtonUtility0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGroupID ( ) { return groupID ; }
void test22 ( ) throws Throwable { ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "c / b ! ] `s` ; f = : w" , "c / b ! ] `s` ; f = : w" ) ; toolBarItemSO0 . setTextID ( "c / b ! ] `s` ; f = : w" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGroupID ( ) { return groupID ; }
void test23 ( ) throws Throwable { ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( ( ToolBarView ) null , "y4R~kCGR ] rM% b$ ( ^ . " , true ) ; toolBarItemSO0 . setAlwaysAvailable ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGroupID ( ) { return groupID ; }
void test0 ( ) throws Throwable { RemotePairingWindow . testPairingClass remotePairingWindow_testPairingClass0 = new RemotePairingWindow . testPairingClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getErrorMessage ( ) ; void cancel ( ) ; }
void test1 ( ) throws Throwable { RemotePairingWindow . testPairingClass remotePairingWindow_testPairingClass0 = new RemotePairingWindow . testPairingClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOutcome ( ) ; String getErrorMessage ( ) ; void cancel ( ) ; }
void test2 ( ) throws Throwable { RemotePairingWindow . testPairingClass remotePairingWindow_testPairingClass0 = new RemotePairingWindow . testPairingClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOutcome ( ) ; String getErrorMessage ( ) ; void cancel ( ) ; }
void test5 ( ) throws Throwable { RemotePairingWindow remotePairingWindow0 = new RemotePairingWindow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test7 ( ) throws Throwable { RemotePairingWindow . testPairingClass remotePairingWindow_testPairingClass0 = new RemotePairingWindow . testPairingClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOutcome ( ) ; String getErrorMessage ( ) ; void cancel ( ) ; }
void test0 ( ) throws Throwable { MainWindowFactory mainWindowFactory0 = new MainWindowFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { MainMDISetup mainMDISetup0 = new MainMDISetup ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { DebugMenuHelper debugMenuHelper0 = new DebugMenuHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { MainHelpers mainHelpers0 = new MainHelpers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , " > 0T , 6" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "nr" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "ok #fLHZ8S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { TabbedEntry tabbedEntry0 = new TabbedEntry ( ( TabbedMDI ) null , ( SWTSkin ) null , " { ! + G8$PP } Ha * < ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCollapseDisabled ( ) { return collapseDisabled ; }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , " | ; jKUKN%" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test6 ( ) throws Throwable { TabbedEntry tabbedEntry0 = new TabbedEntry ( ( TabbedMDI ) null , ( SWTSkin ) null , " { ! + G8$PP } Ha * < ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAdded ( ) { return added ; }
void test7 ( ) throws Throwable { TabbedEntry tabbedEntry0 = new TabbedEntry ( ( TabbedMDI ) null , ( SWTSkin ) null , " ? + } 6%U ( * GG" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAdded ( ) { return added ; }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "0o3 - e , lX#XbxrMI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test10 ( ) throws Throwable { TabbedEntry tabbedEntry0 = new TabbedEntry ( ( TabbedMDI ) null , ( SWTSkin ) null , " { ! + G8$PP } Ha * < ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setEventListener ( UISWTViewEventListener _eventListener ) { this . eventListener = _eventListener ; if ( view ! = null ) { return ; } try { setCoreView ( new UISWTViewImpl ( parentID , id , _eventListener , datasource ) ) ; } catch ( Exception e ) { Debug . out ( e ) ; } if ( _eventListener instanceof UISWTViewEventListenerHolder ) { UISWTViewEventListenerHolder h = ( UISWTViewEventListenerHolder ) _eventListener ; UISWTViewEventListener delegatedEventListener = h . getDelegatedEventListener ( view ) ; if ( delegatedEventListener ! = null ) { this . eventListener = delegatedEventListener ; } } if ( eventListener instanceof UIToolBarEnablerBase ) { addToolbarEnabler ( ( UIToolBarEnablerBase ) eventListener ) ; } if ( ( eventListener instanceof ViewTitleInfo ) & & viewTitleInfo = = null ) { setViewTitleInfo ( ( ViewTitleInfo ) eventListener ) ; } if ( eventListener instanceof BasicPluginViewImpl ) { if ( "image . sidebar . plugin" . equals ( getImageLeftID ( ) ) ) { setImageLeftID ( "image . sidebar . logview" ) ; } } }
void test11 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "nr" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , " { fgi ; OJGRyvVk , 3$BN" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "AlgorithmParameterGenerator . DH" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test16 ( ) throws Throwable { TabbedEntry tabbedEntry0 = new TabbedEntry ( ( TabbedMDI ) null , ( SWTSkin ) null , " { ! + G8$PP } Ha * < ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExpanded ( ) { return isExpanded = = null ? COConfigurationManager . getBooleanParameter ( "SideBar . Expanded . " + id ) : isExpanded ; }
void test17 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , " | ; jKUKN%" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test18 ( ) throws Throwable { TabbedEntry tabbedEntry0 = new TabbedEntry ( ( TabbedMDI ) null , ( SWTSkin ) null , " { ! + G8$PP } Ha * < ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDisposed ( ) { return disposed ; }
void test19 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , " { @fHKY ( r * ( K@1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test20 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "nr" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test21 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test22 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "Zg_ - tB'' [ h" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test23 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "nr" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test24 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test26 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "nr" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test27 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "Signature . RIPEMD160ithRSAEncryption" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test28 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , " { @fHKY ( r * ( K@1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test29 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "Signature . RIPEMD160ithRSAEncryption" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test30 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , " & uploaded = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test31 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , " { fgi ; OJGRyvVk , 3$BN" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test32 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "Signature . RIPEMD160ithRSAEncryption" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test33 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "0o3 - e , lX#XbxrMI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test34 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "R6 ( ] LYq" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test35 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test36 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "nr" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test37 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "ok #fLHZ8S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test38 ( ) throws Throwable { TabbedEntry tabbedEntry0 = new TabbedEntry ( ( TabbedMDI ) null , ( SWTSkin ) null , " { ! + G8$PP } Ha * < ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCollapseDisabled ( ) { return collapseDisabled ; }
void test39 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "N" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test40 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test41 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , " & uploaded = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test42 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "ok #fLHZ8S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test43 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , " { fgi ; OJGRyvVk , 3$BN" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test45 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , " & uploaded = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test46 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , " { fgi ; OJGRyvVk , 3$BN" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test47 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "AlgorithmParameterGenerator . DH" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test49 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "0o3 - e , lX#XbxrMI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test50 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "f ) W : > 3 ] nG' 'dTqwE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test52 ( ) throws Throwable { TabbedEntry tabbedEntry0 = new TabbedEntry ( ( TabbedMDI ) null , ( SWTSkin ) null , " { ! + G8$PP } Ha * < ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDisposed ( ) { return disposed ; }
void test53 ( ) throws Throwable { TabbedEntry tabbedEntry0 = new TabbedEntry ( ( TabbedMDI ) null , ( SWTSkin ) null , " { ! + G8$PP } Ha * < ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCollapseDisabled ( ) { return collapseDisabled ; }
void test54 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "nr" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test55 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "nr" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test57 ( ) throws Throwable { TabbedEntry tabbedEntry0 = new TabbedEntry ( ( TabbedMDI ) null , ( SWTSkin ) null , " { ! + G8$PP } Ha * < ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExpanded ( ) { return isExpanded = = null ? COConfigurationManager . getBooleanParameter ( "SideBar . Expanded . " + id ) : isExpanded ; }
void test59 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "Signature . RIPEMD160ithRSAEncryption" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test60 ( ) throws Throwable { TabbedEntry tabbedEntry0 = new TabbedEntry ( ( TabbedMDI ) null , ( SWTSkin ) null , " { ! + G8$PP } Ha * < ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDisposed ( ) { return disposed ; }
void test62 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , " & uploaded = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test63 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "ok #fLHZ8S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test64 ( ) throws Throwable { TabbedEntry tabbedEntry0 = new TabbedEntry ( ( TabbedMDI ) null , ( SWTSkin ) null , " { ! + G8$PP } Ha * < ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAdded ( ) { return added ; }
void test65 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test66 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test67 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "Zg_ - tB'' [ h" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; tabbedMDI0 . removeListener ( ( MdiEntryLoadedListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; tabbedMDI0 . setupPluginViews ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; String [ ] stringArray0 = new String [ 7 ] ; tabbedMDI0 . setPreferredOrder ( stringArray0 ) ; String [ ] stringArray1 = tabbedMDI0 . getPreferredOrder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; tabbedMDI0 . removeListener ( ( MdiListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MdiEntry mdiEntry0 = tabbedMDI0 . getCurrentEntry ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; tabbedMDI0 . addListener ( ( MdiEntryLoadedListener ) null ) ; tabbedMDI0 . triggerEntryLoadedListeners ( ( MdiEntry ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; UISWTViewCore uISWTViewCore0 = tabbedMDI0 . getCoreViewFromID ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test16 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; tabbedMDI0 . registerEntry ( "6282\"q + " , ( MdiEntryCreationListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test19 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; boolean boolean0 = tabbedMDI0 . loadEntryByID ( " & cN' > iv ) dYyJ" , true , false , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test20 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; tabbedMDI0 . loadCloseables ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test23 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; List < MdiEntry > list0 = tabbedMDI0 . getChildrenOf ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test25 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; String [ ] stringArray0 = tabbedMDI0 . getPreferredOrder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "9\" , o" ) ; tabbedEntry0 . show ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "s\" , o" ) ; boolean boolean0 = tabbedEntry0 . close ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , ( String ) null ) ; MySharesView mySharesView0 = new MySharesView ( ) ; tabbedEntry0 . setViewTitleInfo ( ( ViewTitleInfo ) mySharesView0 ) ; tabbedEntry0 . viewTitleInfoRefresh ( ( ViewTitleInfo ) mySharesView0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "W4" ) ; MdiEntryVitalityImage mdiEntryVitalityImage0 = tabbedEntry0 . addVitalityImage ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "9\" , o" ) ; tabbedEntry0 . setSelectable ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , " + G" ) ; MdiEntryVitalityImage [ ] mdiEntryVitalityImageArray0 = tabbedEntry0 . getVitalityImages ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "s\" , o" ) ; tabbedEntry0 . expandTo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "s\" , o" ) ; tabbedEntry0 . build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , ( String ) null ) ; boolean boolean0 = tabbedEntry0 . isSelectable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "9\" , o" ) ; Item item0 = tabbedEntry0 . getSwtItem ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "@lD = | C#\"S$" ) ; tabbedEntry0 . removeListener ( ( MdiSWTMenuHackListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test11 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , ( String ) null ) ; boolean boolean0 = tabbedEntry0 . isCloseable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "W4" ) ; tabbedEntry0 . addListener ( ( MdiSWTMenuHackListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "W4" ) ; boolean boolean0 = tabbedEntry0 . swt_build ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "9\" , o" ) ; tabbedEntry0 . setTitle ( "9\" , o" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test16 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "@lD = | C#\"S$" ) ; tabbedEntry0 . viewTitleInfoRefresh ( ( ViewTitleInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test17 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "W4" ) ; MySharesView mySharesView0 = new MySharesView ( ) ; tabbedEntry0 . viewTitleInfoRefresh ( ( ViewTitleInfo ) mySharesView0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MySharesView mySharesView0 = new MySharesView ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromSkinRef ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( ViewTitleInfo ) mySharesView0 , ( Object ) "time" , false , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; boolean boolean0 = tabbedMDI0 . showEntryByID ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MdiEntry mdiEntry0 = tabbedMDI0 . createHeader ( "gV%^7M < ) gC3" , "gV%^7M < ) gC3" , "gV%^7M < ) gC3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , " #P , F" ) ; tabbedMDI0 . showEntry ( ( MdiEntry ) tabbedEntry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; tabbedMDI0 . showEntry ( ( MdiEntry ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; tabbedMDI0 . updateUI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MySharesView mySharesView0 = new MySharesView ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromSkinRef ( "BT_INTERESTED" , "BT_INTERESTED" , "BT_INTERESTED" , "" , ( ViewTitleInfo ) mySharesView0 , ( Object ) "BT_INTERESTED" , false , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; PiecesView piecesView0 = new PiecesView ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromEventListener ( ( String ) null , ( UISWTViewEventListener ) piecesView0 , ( String ) null , false , ( Object ) "azureus_private_properties" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromView ( "racker Password Web HTTPS Only" , ( UISWTViewCore ) null , "racker Password Web HTTPS Only" , ( Object ) "AZ_SESSION_REQUEST" , false , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; String string0 = tabbedMDI0 . getUpdateUIName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; IndentWriter indentWriter0 = new IndentWriter ( ( PrintWriter ) null ) ; tabbedMDI0 . generate ( indentWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MdiEntrySWT mdiEntrySWT0 = tabbedMDI0 . getEntryFromSkinObject ( ( PluginUISWTSkinObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { UIUpdaterSWT uIUpdaterSWT0 = new UIUpdaterSWT ( ) ; TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; uIUpdaterSWT0 . removeUpdater ( ( UIUpdatable ) tabbedMDI0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { UIUpdaterSWT uIUpdaterSWT0 = ( UIUpdaterSWT ) UIUpdaterSWT . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { PlayerInstaller playerInstaller0 = new PlayerInstaller ( ) ; PlayerInstallWindow playerInstallWindow0 = new PlayerInstallWindow ( playerInstaller0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PlayerInstallWindow ( PlayerInstaller installer ) { this . installer = installer ; installer . setListener ( this ) ; }
void test1 ( ) throws Throwable { PlayerInstaller playerInstaller0 = new PlayerInstaller ( ) ; playerInstaller0 . cancel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean install ( ) { try { installer = AzureusCoreFactory . getSingleton ( ) . getPluginManager ( ) . getPluginInstaller ( ) ; StandardPlugin sp = installer . getStandardPlugin ( plugin_id ) ; if ( sp = = null ) { throw ( new Exception ( "Unknown plugin" ) ) ; } Map < Integer , Object > properties = new HashMap < Integer , Object > ( ) ; properties . put ( UpdateCheckInstance . PT_UI_STYLE , UpdateCheckInstance . PT_UI_STYLE_NONE ) ; properties . put ( UpdateCheckInstance . PT_UI_DISABLE_ON_SUCCESS_SLIDEY , true ) ; AESemaphore sem = new AESemaphore ( "plugin - install" ) ; Object [ ] result = new Object [ ] { null } ; instance = installer . install ( new InstallablePlugin [ ] { sp } , false , properties , new PluginInstallationListener ( ) { void completed ( ) { ( SimplePluginInstaller . this ) { completed = true ; } result [ 0 ] = true ; if ( listener ! = null ) { listener . finished ( ) ; } sem . release ( ) ; } void cancelled ( ) { result [ 0 ] = new Exception ( "Cancelled" ) ; if ( listener ! = null ) { listener . finished ( ) ; } sem . release ( ) ; } void failed ( PluginException e ) { result [ 0 ] = e ; if ( listener ! = null ) { listener . finished ( ) ; } sem . release ( ) ; } } ) ; boolean kill_it ; ( this ) { kill_it = cancelled ; } if ( kill_it ) { instance . cancel ( ) ; action_listener . actionComplete ( new Exception ( "Cancelled" ) ) ; return ( false ) ; } instance . addListener ( new UpdateCheckInstanceListener ( ) { void cancelled ( UpdateCheckInstance instance ) { } void complete ( UpdateCheckInstance instance ) { Update [ ] updates = instance . getUpdates ( ) ; for ( Update update : updates ) { ResourceDownloader [ ] rds = update . getDownloaders ( ) ; for ( ResourceDownloader rd : rds ) { rd . addListener ( new ResourceDownloaderAdapter ( ) { void reportActivity ( ResourceDownloader downloader , String activity ) { } void reportPercentComplete ( ResourceDownloader downloader , int percentage ) { if ( listener ! = null ) { listener . progress ( percentage ) ; } } } ) ; } } } } ) ; sem . reserve ( ) ; action_listener . actionComplete ( result [ 0 ] ) ; return ( result [ 0 ] instanceof Boolean ) ; } catch ( Throwable e ) { if ( listener ! = null ) { listener . finished ( ) ; } action_listener . actionComplete ( e ) ; } return false ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeListener vuzeListener0 = new VuzeListener ( ) ; HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; BrowserMessage browserMessage0 = new BrowserMessage ( "install - trial" , "install - trial" , ( Map < ? , ? > ) hashMap0 ) ; vuzeListener0 . handleMessage ( browserMessage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeListener vuzeListener0 = new VuzeListener ( ) ; BrowserMessage browserMessage0 = new BrowserMessage ( "load - vuze - file" , "get - mode" , ( Map < ? , ? > ) null ) ; vuzeListener0 . handleMessage ( browserMessage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeListener vuzeListener0 = new VuzeListener ( ) ; BrowserMessage browserMessage0 = new BrowserMessage ( "get - plus - remaining" , "get - plus - remaining" , ( Map < ? , ? > ) null ) ; vuzeListener0 . handleMessage ( browserMessage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { MessageDispatcherSWT messageDispatcherSWT0 = new MessageDispatcherSWT ( ( ClientMessageContext ) null ) ; BrowserMessageListener browserMessageListener0 = messageDispatcherSWT0 . getListener ( "o~u ( : WgZYr & nd = 2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BrowserMessageListener getListener ( String id ) { return listeners . get ( id ) ; }
void test1 ( ) throws Throwable { MessageDispatcherSWT messageDispatcherSWT0 = new MessageDispatcherSWT ( ( ClientMessageContext ) null ) ; TorrentListener torrentListener0 = new TorrentListener ( "o~u ( : WgZYr & nd = 2" ) ; messageDispatcherSWT0 . removeListener ( ( BrowserMessageListener ) torrentListener0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test4 ( ) throws Throwable { MessageDispatcherSWT messageDispatcherSWT0 = new MessageDispatcherSWT ( ( ClientMessageContext ) null ) ; TorrentListener torrentListener0 = new TorrentListener ( "o~u ( : WgZYr & nd = 2" ) ; messageDispatcherSWT0 . addListener ( ( BrowserMessageListener ) torrentListener0 ) ; messageDispatcherSWT0 . removeListener ( ( BrowserMessageListener ) torrentListener0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test5 ( ) throws Throwable { VuzeListener vuzeListener0 = new VuzeListener ( ) ; MessageDispatcherSWT messageDispatcherSWT0 = new MessageDispatcherSWT ( ( ClientMessageContext ) null ) ; messageDispatcherSWT0 . addListener ( ( BrowserMessageListener ) vuzeListener0 ) ; messageDispatcherSWT0 . addListener ( ( BrowserMessageListener ) vuzeListener0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView ( ) ; int int0 = sBC_LibraryTableView0 . getTableMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView ( ) ; ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , " / bFp * cu7zX , " , true ) ; boolean boolean0 = sBC_LibraryTableView0 . toolBarItemActivated ( ( ToolBarItem ) toolBarItemSO0 , 0L , ( Object ) "BT_UNINTERESTED" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView ( ) ; String string0 = sBC_LibraryTableView0 . getUpdateUIName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView ( ) ; boolean boolean0 = sBC_LibraryTableView0 . useBigTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView ( ) ; SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl ( ) ; SWTSkinObjectBasic sWTSkinObjectBasic0 = new SWTSkinObjectBasic ( ( SWTSkin ) null , ( SWTSkinProperties ) sWTSkinPropertiesImpl0 , ( String ) null , ( String ) null , ( String ) null , ( SWTSkinObject ) null ) ; Object object0 = sBC_LibraryTableView0 . skinObjectInitialShow ( ( SWTSkinObject ) sWTSkinObjectBasic0 , ( Object ) sWTSkinPropertiesImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView ( ) ; Object object0 = sBC_LibraryTableView0 . skinObjectShown ( ( SWTSkinObject ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SBC_LibraryTableView_Big sBC_LibraryTableView_Big0 = new SBC_LibraryTableView_Big ( ) ; sBC_LibraryTableView_Big0 . updateUI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView ( ) ; Object object0 = sBC_LibraryTableView0 . skinObjectHidden ( ( SWTSkinObject ) null , ( Object ) "filelinks" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test11 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView ( ) ; sBC_LibraryTableView0 . refreshToolBarItems ( ( Map < String , Long > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView ( ) ; TableColumnCore [ ] tableColumnCoreArray0 = sBC_LibraryTableView0 . getColumns ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView ( ) ; Object object0 = sBC_LibraryTableView0 . skinObjectDestroyed ( ( SWTSkinObject ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SBC_LibraryTableView_Big sBC_LibraryTableView_Big0 = new SBC_LibraryTableView_Big ( ) ; Image image0 = sBC_LibraryTableView_Big0 . obfusticatedImage ( ( Image ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { SBC_GenericBrowsePage sBC_GenericBrowsePage0 = new SBC_GenericBrowsePage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) { return isVisible ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MyTorrentsView myTorrentsView0 = new MyTorrentsView ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromEventListener ( "cu * " , ( UISWTViewEventListener ) myTorrentsView0 , "cu * " , true , ( Object ) "fileotherhashes" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "fileotherhashes" ) ; sideBarVitalityImageSWT0 . getHitArea ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MyTorrentsView myTorrentsView0 = new MyTorrentsView ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromEventListener ( "cu * " , ( UISWTViewEventListener ) myTorrentsView0 , "cu * " , true , ( Object ) "fileotherhashes" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "fileotherhashes" ) ; sideBarVitalityImageSWT0 . setAlignment ( ( - 2001 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MySharesView mySharesView0 = new MySharesView ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromSkinRef ( "BT_CHOKE" , "com . aelitis . azureus . plugins . upnp . UPnPPlugin" , "BT_CHOKE" , "BT_CHOKE" , ( ViewTitleInfo ) mySharesView0 , ( Object ) null , false , "com . aelitis . azureus . plugins . upnp . UPnPPlugin" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "BT_CHOKE" ) ; int int0 = sideBarVitalityImageSWT0 . getDelayTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MyTorrentsView myTorrentsView0 = new MyTorrentsView ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromEventListener ( "cu * " , ( UISWTViewEventListener ) myTorrentsView0 , "cu * " , true , ( Object ) "fileotherhashes" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "fileotherhashes" ) ; sideBarVitalityImageSWT0 . setToolTip ( "fileotherhashes" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MyTorrentsView myTorrentsView0 = new MyTorrentsView ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromEventListener ( "cu * " , ( UISWTViewEventListener ) myTorrentsView0 , "cu * " , true , ( Object ) "fileotherhashes" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "fileotherhashes" ) ; sideBarVitalityImageSWT0 . getImageID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; ViewTitleInfoBetaP viewTitleInfoBetaP0 = new ViewTitleInfoBetaP ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromSkinRef ( "" , "" , "" , "" , ( ViewTitleInfo ) viewTitleInfoBetaP0 , ( Object ) "BT_INTERESTED" , true , "" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "" ) ; int int0 = sideBarVitalityImageSWT0 . getAlignment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MyTorrentsView myTorrentsView0 = new MyTorrentsView ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromEventListener ( "cu * " , ( UISWTViewEventListener ) myTorrentsView0 , "cu * " , true , ( Object ) "fileotherhashes" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "fileotherhashes" ) ; TabbedEntry tabbedEntry1 = ( TabbedEntry ) sideBarVitalityImageSWT0 . getMdiEntry ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MyTorrentsView myTorrentsView0 = new MyTorrentsView ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromEventListener ( "cu * " , ( UISWTViewEventListener ) myTorrentsView0 , "cu * " , true , ( Object ) "fileotherhashes" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "fileotherhashes" ) ; sideBarVitalityImageSWT0 . setHitArea ( ( Rectangle ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "G" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "G" ) ; sideBarVitalityImageSWT0 . getToolTip ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; ViewTitleInfoBetaP viewTitleInfoBetaP0 = new ViewTitleInfoBetaP ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromSkinRef ( "" , "" , "" , "" , ( ViewTitleInfo ) viewTitleInfoBetaP0 , ( Object ) "BT_INTERESTED" , true , "" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "" ) ; sideBarVitalityImageSWT0 . addListener ( ( MdiEntryVitalityImageListener ) null ) ; sideBarVitalityImageSWT0 . addListener ( ( MdiEntryVitalityImageListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; ViewTitleInfoBetaP viewTitleInfoBetaP0 = new ViewTitleInfoBetaP ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromSkinRef ( "" , "" , "" , "" , ( ViewTitleInfo ) viewTitleInfoBetaP0 , ( Object ) "BT_INTERESTED" , true , "" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "" ) ; sideBarVitalityImageSWT0 . addListener ( ( MdiEntryVitalityImageListener ) null ) ; sideBarVitalityImageSWT0 . triggerClickedListeners ( 802 , 802 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test11 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MyTorrentsView myTorrentsView0 = new MyTorrentsView ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromEventListener ( "cu * " , ( UISWTViewEventListener ) myTorrentsView0 , "cu * " , true , ( Object ) "fileotherhashes" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "fileotherhashes" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MyTorrentsView myTorrentsView0 = new MyTorrentsView ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromEventListener ( "cu * " , ( UISWTViewEventListener ) myTorrentsView0 , "cu * " , true , ( Object ) "fileotherhashes" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "fileotherhashes" ) ; Image [ ] imageArray0 = new Image [ 1 ] ; int int0 = sideBarVitalityImageSWT0 . getCurrentAnimationIndex ( imageArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MyTorrentsView myTorrentsView0 = new MyTorrentsView ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromEventListener ( "cu * " , ( UISWTViewEventListener ) myTorrentsView0 , "cu * " , true , ( Object ) "fileotherhashes" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "fileotherhashes" ) ; sideBarVitalityImageSWT0 . switchSuffix ( "fileotherhashes" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; TabbedEntry tabbedEntry0 = new TabbedEntry ( tabbedMDI0 , ( SWTSkin ) null , "\" | " ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "\" | " ) ; sideBarVitalityImageSWT0 . switchSuffix ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MyTorrentsView myTorrentsView0 = new MyTorrentsView ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromEventListener ( "cu * " , ( UISWTViewEventListener ) myTorrentsView0 , "cu * " , true , ( Object ) "fileotherhashes" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "fileotherhashes" ) ; sideBarVitalityImageSWT0 . getImage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test16 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MySharesView mySharesView0 = new MySharesView ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromSkinRef ( "BT_CHOKE" , "com . aelitis . azureus . plugins . upnp . UPnPPlugin" , "BT_CHOKE" , "BT_CHOKE" , ( ViewTitleInfo ) mySharesView0 , ( Object ) null , false , "com . aelitis . azureus . plugins . upnp . UPnPPlugin" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "BT_CHOKE" ) ; sideBarVitalityImageSWT0 . setDelayTime ( ( - 52 ) ) ; sideBarVitalityImageSWT0 . setDelayTime ( ( - 52 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test17 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TabbedMDI tabbedMDI0 = new TabbedMDI ( ) ; MySharesView mySharesView0 = new MySharesView ( ) ; TabbedEntry tabbedEntry0 = ( TabbedEntry ) tabbedMDI0 . createEntryFromSkinRef ( "BT_CHOKE" , "com . aelitis . azureus . plugins . upnp . UPnPPlugin" , "BT_CHOKE" , "BT_CHOKE" , ( ViewTitleInfo ) mySharesView0 , ( Object ) null , false , "com . aelitis . azureus . plugins . upnp . UPnPPlugin" ) ; SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT ( ( MdiEntry ) tabbedEntry0 , "BT_CHOKE" ) ; sideBarVitalityImageSWT0 . setVisible ( false ) ; sideBarVitalityImageSWT0 . setDelayTime ( ( - 52 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test4 ( ) throws Throwable { FontUtils fontUtils0 = new FontUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { UIMagnetHandler uIMagnetHandler0 = new UIMagnetHandler ( ( AzureusCore ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UIMagnetHandler ( AzureusCore core ) { int val = Integer . parseInt ( Constants . getBaseVersion ( ) . replaceAll ( "\\ . " , "" ) ) ; String ui = COConfigurationManager . getStringParameter ( "ui" ) ; if ( ! "az2" . equals ( ui ) ) { val + = 10000 ; } MagnetURIHandler magnetURIHandler = MagnetURIHandler . getSingleton ( ) ; magnetURIHandler . addInfo ( "get - version - info" , val ) ; }
void test0 ( ) throws Throwable { Color color0 = ColorCache . getColor ( ( Device ) null , "#F" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test1 ( ) throws Throwable { ColorCache colorCache0 = new ColorCache ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { Color color0 = ColorCache . getSchemedColor ( ( Device ) null , "#F" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getSchemedColor ( Device device , int red , int green , int blue ) { ensureMapColorsInitialized ( device ) ; Long key = new Long ( ( ( long ) red < < 16 ) + ( green < < 8 ) + blue + 0x1000000l ) ; Color color = mapColors . get ( key ) ; if ( color = = null | | color . isDisposed ( ) ) { try { if ( red < 0 ) { red = 0 ; } else if ( red > 255 ) { red = 255 ; } if ( green < 0 ) { green = 0 ; } else if ( green > 255 ) { green = 255 ; } if ( blue < 0 ) { blue = 0 ; } else if ( blue > 255 ) { blue = 255 ; } RGB rgb = new RGB ( red , green , blue ) ; float [ ] hsb = rgb . getHSB ( ) ; hsb [ 0 ] + = Colors . diffHue ; if ( hsb [ 0 ] > 360 ) { hsb [ 0 ] - = 360 ; } else if ( hsb [ 0 ] < 0 ) { hsb [ 0 ] + = 360 ; } hsb [ 1 ] * = Colors . diffSatPct ; / / hsb [ 2 ] * = Colors . diffLumPct ; color = getColor ( device , hsb ) ; mapColors . put ( key , color ) ; } catch ( IllegalArgumentException e ) { Debug . out ( "One Invalid : " + red + " ; " + green + " ; " + blue , e ) ; } } return color ; }
void test3 ( ) throws Throwable { RGB rGB0 = CTabFolder . borderMiddleRGB ; Color color0 = ColorCache . getColor ( ( Device ) null , rGB0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test4 ( ) throws Throwable { Color color0 = ColorCache . getSchemedColor ( ( Device ) null , ( - 531 ) , ( - 531 ) , ( - 531 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getSchemedColor ( Device device , int red , int green , int blue ) { ensureMapColorsInitialized ( device ) ; Long key = new Long ( ( ( long ) red < < 16 ) + ( green < < 8 ) + blue + 0x1000000l ) ; Color color = mapColors . get ( key ) ; if ( color = = null | | color . isDisposed ( ) ) { try { if ( red < 0 ) { red = 0 ; } else if ( red > 255 ) { red = 255 ; } if ( green < 0 ) { green = 0 ; } else if ( green > 255 ) { green = 255 ; } if ( blue < 0 ) { blue = 0 ; } else if ( blue > 255 ) { blue = 255 ; } RGB rgb = new RGB ( red , green , blue ) ; float [ ] hsb = rgb . getHSB ( ) ; hsb [ 0 ] + = Colors . diffHue ; if ( hsb [ 0 ] > 360 ) { hsb [ 0 ] - = 360 ; } else if ( hsb [ 0 ] < 0 ) { hsb [ 0 ] + = 360 ; } hsb [ 1 ] * = Colors . diffSatPct ; / / hsb [ 2 ] * = Colors . diffLumPct ; color = getColor ( device , hsb ) ; mapColors . put ( key , color ) ; } catch ( IllegalArgumentException e ) { Debug . out ( "One Invalid : " + red + " ; " + green + " ; " + blue , e ) ; } } return color ; }
void test5 ( ) throws Throwable { Color color0 = ColorCache . getSchemedColor ( ( Device ) null , 792 , 0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getSchemedColor ( Device device , int red , int green , int blue ) { ensureMapColorsInitialized ( device ) ; Long key = new Long ( ( ( long ) red < < 16 ) + ( green < < 8 ) + blue + 0x1000000l ) ; Color color = mapColors . get ( key ) ; if ( color = = null | | color . isDisposed ( ) ) { try { if ( red < 0 ) { red = 0 ; } else if ( red > 255 ) { red = 255 ; } if ( green < 0 ) { green = 0 ; } else if ( green > 255 ) { green = 255 ; } if ( blue < 0 ) { blue = 0 ; } else if ( blue > 255 ) { blue = 255 ; } RGB rgb = new RGB ( red , green , blue ) ; float [ ] hsb = rgb . getHSB ( ) ; hsb [ 0 ] + = Colors . diffHue ; if ( hsb [ 0 ] > 360 ) { hsb [ 0 ] - = 360 ; } else if ( hsb [ 0 ] < 0 ) { hsb [ 0 ] + = 360 ; } hsb [ 1 ] * = Colors . diffSatPct ; / / hsb [ 2 ] * = Colors . diffLumPct ; color = getColor ( device , hsb ) ; mapColors . put ( key , color ) ; } catch ( IllegalArgumentException e ) { Debug . out ( "One Invalid : " + red + " ; " + green + " ; " + blue , e ) ; } } return color ; }
void test6 ( ) throws Throwable { Color color0 = ColorCache . getSchemedColor ( ( Device ) null , 1161 , 262 , 262 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getSchemedColor ( Device device , int red , int green , int blue ) { ensureMapColorsInitialized ( device ) ; Long key = new Long ( ( ( long ) red < < 16 ) + ( green < < 8 ) + blue + 0x1000000l ) ; Color color = mapColors . get ( key ) ; if ( color = = null | | color . isDisposed ( ) ) { try { if ( red < 0 ) { red = 0 ; } else if ( red > 255 ) { red = 255 ; } if ( green < 0 ) { green = 0 ; } else if ( green > 255 ) { green = 255 ; } if ( blue < 0 ) { blue = 0 ; } else if ( blue > 255 ) { blue = 255 ; } RGB rgb = new RGB ( red , green , blue ) ; float [ ] hsb = rgb . getHSB ( ) ; hsb [ 0 ] + = Colors . diffHue ; if ( hsb [ 0 ] > 360 ) { hsb [ 0 ] - = 360 ; } else if ( hsb [ 0 ] < 0 ) { hsb [ 0 ] + = 360 ; } hsb [ 1 ] * = Colors . diffSatPct ; / / hsb [ 2 ] * = Colors . diffLumPct ; color = getColor ( device , hsb ) ; mapColors . put ( key , color ) ; } catch ( IllegalArgumentException e ) { Debug . out ( "One Invalid : " + red + " ; " + green + " ; " + blue , e ) ; } } return color ; }
void test7 ( ) throws Throwable { Color color0 = ColorCache . getSchemedColor ( ( Device ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getSchemedColor ( Device device , int red , int green , int blue ) { ensureMapColorsInitialized ( device ) ; Long key = new Long ( ( ( long ) red < < 16 ) + ( green < < 8 ) + blue + 0x1000000l ) ; Color color = mapColors . get ( key ) ; if ( color = = null | | color . isDisposed ( ) ) { try { if ( red < 0 ) { red = 0 ; } else if ( red > 255 ) { red = 255 ; } if ( green < 0 ) { green = 0 ; } else if ( green > 255 ) { green = 255 ; } if ( blue < 0 ) { blue = 0 ; } else if ( blue > 255 ) { blue = 255 ; } RGB rgb = new RGB ( red , green , blue ) ; float [ ] hsb = rgb . getHSB ( ) ; hsb [ 0 ] + = Colors . diffHue ; if ( hsb [ 0 ] > 360 ) { hsb [ 0 ] - = 360 ; } else if ( hsb [ 0 ] < 0 ) { hsb [ 0 ] + = 360 ; } hsb [ 1 ] * = Colors . diffSatPct ; / / hsb [ 2 ] * = Colors . diffLumPct ; color = getColor ( device , hsb ) ; mapColors . put ( key , color ) ; } catch ( IllegalArgumentException e ) { Debug . out ( "One Invalid : " + red + " ; " + green + " ; " + blue , e ) ; } } return color ; }
void test8 ( ) throws Throwable { Color color0 = ColorCache . getColor ( ( Device ) null , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { Color color0 = ColorCache . getColor ( ( Device ) null , "BLUE . FADED . L_7D = SD7 / _V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { Color color0 = ColorCache . getColor ( ( Device ) null , "SI ) ! Vg2` , \"X ! #WN = \"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test11 ( ) throws Throwable { Color color0 = ColorCache . getColor ( ( Device ) null , "COLOR_LIST_SELECTION" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { Color color0 = ColorCache . getSchemedColor ( ( Device ) null , "BLUE . QG" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test13 ( ) throws Throwable { Color color0 = ColorCache . getSchemedColor ( ( Device ) null , "attr" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getSchemedColor ( Device device , int red , int green , int blue ) { ensureMapColorsInitialized ( device ) ; Long key = new Long ( ( ( long ) red < < 16 ) + ( green < < 8 ) + blue + 0x1000000l ) ; Color color = mapColors . get ( key ) ; if ( color = = null | | color . isDisposed ( ) ) { try { if ( red < 0 ) { red = 0 ; } else if ( red > 255 ) { red = 255 ; } if ( green < 0 ) { green = 0 ; } else if ( green > 255 ) { green = 255 ; } if ( blue < 0 ) { blue = 0 ; } else if ( blue > 255 ) { blue = 255 ; } RGB rgb = new RGB ( red , green , blue ) ; float [ ] hsb = rgb . getHSB ( ) ; hsb [ 0 ] + = Colors . diffHue ; if ( hsb [ 0 ] > 360 ) { hsb [ 0 ] - = 360 ; } else if ( hsb [ 0 ] < 0 ) { hsb [ 0 ] + = 360 ; } hsb [ 1 ] * = Colors . diffSatPct ; / / hsb [ 2 ] * = Colors . diffLumPct ; color = getColor ( device , hsb ) ; mapColors . put ( key , color ) ; } catch ( IllegalArgumentException e ) { Debug . out ( "One Invalid : " + red + " ; " + green + " ; " + blue , e ) ; } } return color ; }
void test14 ( ) throws Throwable { Color color0 = ColorCache . getSchemedColor ( ( Device ) null , "ALTROW" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getSchemedColor ( Device device , int red , int green , int blue ) { ensureMapColorsInitialized ( device ) ; Long key = new Long ( ( ( long ) red < < 16 ) + ( green < < 8 ) + blue + 0x1000000l ) ; Color color = mapColors . get ( key ) ; if ( color = = null | | color . isDisposed ( ) ) { try { if ( red < 0 ) { red = 0 ; } else if ( red > 255 ) { red = 255 ; } if ( green < 0 ) { green = 0 ; } else if ( green > 255 ) { green = 255 ; } if ( blue < 0 ) { blue = 0 ; } else if ( blue > 255 ) { blue = 255 ; } RGB rgb = new RGB ( red , green , blue ) ; float [ ] hsb = rgb . getHSB ( ) ; hsb [ 0 ] + = Colors . diffHue ; if ( hsb [ 0 ] > 360 ) { hsb [ 0 ] - = 360 ; } else if ( hsb [ 0 ] < 0 ) { hsb [ 0 ] + = 360 ; } hsb [ 1 ] * = Colors . diffSatPct ; / / hsb [ 2 ] * = Colors . diffLumPct ; color = getColor ( device , hsb ) ; mapColors . put ( key , color ) ; } catch ( IllegalArgumentException e ) { Debug . out ( "One Invalid : " + red + " ; " + green + " ; " + blue , e ) ; } } return color ; }
void test15 ( ) throws Throwable { int [ ] intArray0 = new int [ 2 ] ; Color color0 = ColorCache . getColor ( ( Device ) null , intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test16 ( ) throws Throwable { int [ ] intArray0 = new int [ 27 ] ; Color color0 = ColorCache . getColor ( ( Device ) null , intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test17 ( ) throws Throwable { Color color0 = ColorCache . getRandomColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getRandomColor ( ) { if ( mapColors . size ( ) = = 0 ) { return Colors . black ; } int r = ( int ) ( Math . random ( ) * mapColors . size ( ) ) ; return ( Color ) mapColors . values ( ) . toArray ( ) [ r ] ; }
void test18 ( ) throws Throwable { float [ ] floatArray0 = new float [ 13 ] ; floatArray0 [ 0 ] = ( - 1042 . 0674F ) ; Color color0 = ColorCache . getColor ( ( Device ) null , floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test19 ( ) throws Throwable { float [ ] floatArray0 = new float [ 13 ] ; floatArray0 [ 0 ] = 1253 . 1709F ; Color color0 = ColorCache . getColor ( ( Device ) null , floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test20 ( ) throws Throwable { float [ ] floatArray0 = new float [ 13 ] ; floatArray0 [ 1 ] = ( - 267 . 0394F ) ; Color color0 = ColorCache . getColor ( ( Device ) null , floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test21 ( ) throws Throwable { float [ ] floatArray0 = new float [ 13 ] ; floatArray0 [ 1 ] = 1253 . 1709F ; Color color0 = ColorCache . getColor ( ( Device ) null , floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test22 ( ) throws Throwable { float [ ] floatArray0 = new float [ 8 ] ; floatArray0 [ 2 ] = ( - 1049 . 3845F ) ; Color color0 = ColorCache . getColor ( ( Device ) null , floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test23 ( ) throws Throwable { float [ ] floatArray0 = new float [ 13 ] ; floatArray0 [ 2 ] = 1253 . 1709F ; Color color0 = ColorCache . getColor ( ( Device ) null , floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test0 ( ) throws Throwable { ColorCache2 colorCache2_0 = new ColorCache2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { ColorCache2 . CachedColor colorCache2_CachedColor0 = ColorCache2 . getColor ( ( Color ) null ) ; Color color0 = colorCache2_CachedColor0 . getColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getColor ( String name ) { return properties . getColor ( name ) ; }
void test2 ( ) throws Throwable { TorrentUIUtilsV3 torrentUIUtilsV3_0 = new TorrentUIUtilsV3 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { Image [ ] imageArray0 = TorrentUIUtilsV3 . getContentImage ( ( Object ) false , false , ( TorrentUIUtilsV3 . ContentImageLoadedListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Image [ ] getContentImage ( Object datasource , boolean big , ContentImageLoadedListener l ) { if ( l = = null ) { return null ; } TOTorrent torrent = DataSourceUtils . getTorrent ( datasource ) ; if ( torrent = = null ) { l . contentImageLoaded ( null , true ) ; return null ; } if ( imageLoaderThumb = = null ) { imageLoaderThumb = new ImageLoader ( null , null ) ; } String thumbnailUrl = PlatformTorrentUtils . getContentThumbnailUrl ( torrent ) ; / / System . out . println ( "thumburl = " + thumbnailUrl ) ; if ( thumbnailUrl ! = null & & imageLoaderThumb . imageExists ( thumbnailUrl ) ) { / / System . out . println ( "return thumburl" ) ; Image image = imageLoaderThumb . getImage ( thumbnailUrl ) ; l . contentImageLoaded ( image , true ) ; return new Image [ ] { image } ; } String hash = null ; try { hash = torrent . getHashWrapper ( ) . toBase32String ( ) ; } catch ( TOTorrentException e ) { } if ( hash = = null ) { l . contentImageLoaded ( null , true ) ; return null ; } / / add torrent size here to differentiate meta - data downloads from actuals String id = "Thumbnail . " + hash + " . " + torrent . getSize ( ) ; Image image = imageLoaderThumb . imageAdded ( id ) ? imageLoaderThumb . getImage ( id ) : null ; / / System . out . println ( "image = " + image ) ; if ( image ! = null & & ! image . isDisposed ( ) ) { l . contentImageLoaded ( image , true ) ; return new Image [ ] { image } ; } byte [ ] imageBytes = PlatformTorrentUtils . getContentThumbnail ( torrent ) ; / / System . out . println ( "imageBytes = " + imageBytes ) ; if ( imageBytes ! = null ) { image = ( Image ) Utils . execSWTThreadWithObject ( "thumbcreator" , new AERunnableObject ( ) { Object runSupport ( ) { ByteArrayInputStream bis = new ByteArrayInputStream ( imageBytes ) ; Image image = new Image ( Display . getDefault ( ) , bis ) ; return image ; } } , 500 ) ; } / * * if ( ( image = = null | | image . isDisposed ( ) ) & & thumbnailUrl ! = null ) { / / System . out . println ( "get image from " + thumbnailUrl ) ; image = imageLoader . getUrlImage ( thumbnailUrl , new ImageDownloaderListener ( ) { void imageDownloaded ( Image image , boolean returnedImmediately ) { l . contentImageLoaded ( image , returnedImmediately ) ; / / System . out . println ( "got image from thumburl" ) ; } } ) ; / / System . out . println ( "returning " + image + " ( url loading ) " ) ; return image = = null ? null : new Image [ ] { image } ; } * * / if ( image = = null | | image . isDisposed ( ) ) { / / System . out . println ( "build image from files" ) ; DownloadManager dm = DataSourceUtils . getDM ( datasource ) ; / * * Try to get an image from the OS * / String path = null ; if ( dm = = null ) { TOTorrentFile [ ] files = torrent . getFiles ( ) ; if ( files . length > 0 ) { path = files [ 0 ] . getRelativePath ( ) ; } } else { DiskManagerFileInfo primaryFile = dm . getDownloadState ( ) . getPrimaryFile ( ) ; path = primaryFile = = null ? null : primaryFile . getFile ( true ) . getName ( ) ; } if ( path ! = null ) { image = ImageRepository . getPathIcon ( path , big , false ) ; if ( image ! = null & & ! torrent . isSimpleTorrent ( ) ) { Image [ ] images = new Image [ ] { image , ImageRepository . getPathIcon ( new File ( path ) . getParent ( ) , false , false ) } ; return images ; } } if ( image = = null ) { imageLoaderThumb . addImageNoDipose ( id , ImageLoader . noImage ) ; } else { imageLoaderThumb . addImageNoDipose ( id , image ) ; } } else { / / System . out . println ( "has mystery image" ) ; imageLoaderThumb . addImage ( id , image ) ; } l . contentImageLoaded ( image , true ) ; return new Image [ ] { image } ; }
void test0 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; skinPropertiesImpl0 . addProperty ( "" , "# ) { \"E~e4s40 , C . " ) ; int [ ] intArray0 = skinPropertiesImpl0 . getColorValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getColorValue ( String name ) { return properties . getColorValue ( name ) ; }
void test1 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; String string0 = skinPropertiesImpl0 . getStringValue ( "Q } BDHS9s . b`I + ~ / ZWst" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStringValue ( String name , String def ) { return properties . getStringValue ( name , sCloneParams , def ) ; }
void test2 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; String [ ] stringArray0 = skinPropertiesImpl0 . getStringArray ( "AGEv$ } { + \"PY } & Gv" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getStringArray ( String name , String [ ] params ) { return properties . getStringArray ( name , params ) ; }
void test5 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; boolean boolean0 = skinPropertiesImpl0 . hasKey ( "1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasKey ( String name ) { return properties . hasKey ( name ) ; }
void test6 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasKey ( String name ) { return properties . hasKey ( name ) ; }
void test7 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasKey ( String name ) { return properties . hasKey ( name ) ; }
void test8 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; String string0 = skinPropertiesImpl0 . getReferenceID ( "k" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReferenceID ( String name ) { return properties . getReferenceID ( name ) ; }
void test9 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; skinPropertiesImpl0 . addProperty ( "1" , "1" ) ; String string0 = skinPropertiesImpl0 . getReferenceID ( "1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReferenceID ( String name ) { return properties . getReferenceID ( name ) ; }
void test10 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; skinPropertiesImpl0 . addProperty ( " | HlE_ [ S_3$NM1" , " | HlE_ [ S_3$NM1" ) ; String string0 = skinPropertiesImpl0 . getReferenceID ( " | HlE_ [ S_3$NM1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReferenceID ( String name ) { return properties . getReferenceID ( name ) ; }
void test11 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBooleanValue ( String name , boolean def ) { return properties . getBooleanValue ( name , def ) ; }
void test12 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; skinPropertiesImpl0 . addProperty ( "AGEv$ } { + \"PY } & Gv" , "AGEv$ } { + \"PY } & Gv" ) ; int [ ] intArray0 = skinPropertiesImpl0 . getColorValue ( "AGEv$ } { + \"PY } & Gv" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getColorValue ( String name ) { return properties . getColorValue ( name ) ; }
void test13 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getStringArray ( String name , String [ ] params ) { return properties . getStringArray ( name , params ) ; }
void test14 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntValue ( String name , int def ) { return properties . getIntValue ( name , def ) ; }
void test15 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntValue ( String name , int def ) { return properties . getIntValue ( name , def ) ; }
void test16 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; int [ ] intArray0 = skinPropertiesImpl0 . getColorValue ( "Xn . properties" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getColorValue ( String name ) { return properties . getColorValue ( name ) ; }
void test17 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBooleanValue ( String name , boolean def ) { return properties . getBooleanValue ( name , def ) ; }
void test18 ( ) throws Throwable { SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBooleanValue ( String name , boolean def ) { return properties . getBooleanValue ( name , def ) ; }
void test0 ( ) throws Throwable { RememberedDecisionsManager rememberedDecisionsManager0 = new RememberedDecisionsManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { int int0 = RememberedDecisionsManager . getRememberedDecision ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRememberedDecision ( String id ) { return getRememberedDecision ( id , - 1 ) ; }
void test2 ( ) throws Throwable { int int0 = RememberedDecisionsManager . getRememberedDecision ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRememberedDecision ( String id ) { return getRememberedDecision ( id , - 1 ) ; }
void test3 ( ) throws Throwable { int int0 = RememberedDecisionsManager . getRememberedDecision ( "" , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRememberedDecision ( String id ) { return getRememberedDecision ( id , - 1 ) ; }
void test4 ( ) throws Throwable { int int0 = RememberedDecisionsManager . getRememberedDecision ( "jW - GlI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRememberedDecision ( String id ) { return getRememberedDecision ( id , - 1 ) ; }
void test5 ( ) throws Throwable { int int0 = RememberedDecisionsManager . getRememberedDecision ( "" , ( - 1667 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRememberedDecision ( String id ) { return getRememberedDecision ( id , - 1 ) ; }
void test0 ( ) throws Throwable { String string0 = SelectedContentManager . getCurrentySelectedViewID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCurrentySelectedViewID ( ) { return viewID ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ISelectedContent [ ] iSelectedContentArray0 = SelectedContentManager . getCurrentlySelectedContent ( ) ; MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; TableViewSWT < TRHostTorrent > tableViewSWT0 = myTrackerView0 . initYourTableView ( ) ; SelectedContentManager . changeCurrentlySelectedContent ( "U + " , iSelectedContentArray0 , ( TableView ) tableViewSWT0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { TableView < Object > tableView0 = SelectedContentManager . getCurrentlySelectedTableView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableView getCurrentlySelectedTableView ( ) { return tv ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ISelectedContent [ ] iSelectedContentArray0 = SelectedContentManager . getCurrentlySelectedContent ( ) ; ISelectedContent [ ] iSelectedContentArray1 = SelectedContentManager . getCurrentlySelectedContent ( ) ; SelectedContentManager . changeCurrentlySelectedContent ( "" , iSelectedContentArray1 , ( TableView ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test8 ( ) throws Throwable { ISelectedContent [ ] iSelectedContentArray0 = new ISelectedContent [ 1 ] ; SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( ) ; iSelectedContentArray0 [ 0 ] = ( ISelectedContent ) selectedContentV3_0 ; SelectedContentManager . convertSelectedContentToObject ( iSelectedContentArray0 ) ; DownloadManager [ ] downloadManagerArray0 = SelectedContentManager . getDMSFromSelectedContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DownloadManager [ ] getDMSFromSelectedContent ( ) { ISelectedContent [ ] sc = SelectedContentManager . getCurrentlySelectedContent ( ) ; if ( sc . length > 0 ) { int x = 0 ; DownloadManager [ ] dms = new DownloadManager [ sc . length ] ; for ( int i = 0 ; i < sc . length ; i + + ) { ISelectedContent selectedContent = sc [ i ] ; if ( selectedContent = = null ) { continue ; } dms [ x ] = selectedContent . getDownloadManager ( ) ; if ( dms [ x ] ! = null ) { x + + ; } } if ( x > 0 ) { System . arraycopy ( dms , 0 , dms , 0 , x ) ; return dms ; } } return null ; }
void test10 ( ) throws Throwable { ISelectedContent [ ] iSelectedContentArray0 = new ISelectedContent [ 2 ] ; SelectedContent selectedContent0 = new SelectedContent ( "" , "" ) ; iSelectedContentArray0 [ 0 ] = ( ISelectedContent ) selectedContent0 ; iSelectedContentArray0 [ 1 ] = ( ISelectedContent ) selectedContent0 ; Object object0 = SelectedContentManager . convertSelectedContentToObject ( iSelectedContentArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convertSelectedContentToObject ( ISelectedContent [ ] contents ) { if ( contents = = null ) { contents = getCurrentlySelectedContent ( ) ; } if ( contents . length = = 0 ) { return null ; } if ( contents . length = = 1 ) { return selectedContentToObject ( contents [ 0 ] ) ; } Object [ ] objects = new Object [ contents . length ] ; for ( int i = 0 ; i < contents . length ; i + + ) { ISelectedContent content = contents [ i ] ; objects [ i ] = selectedContentToObject ( content ) ; } return objects ; }
void test0 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( "T | JR7i - [ c d^ * ] w" , "T | JR7i - [ c d^ * ] w" ) ; selectedContent0 . getDownloadInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test1 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( ( String ) null , ( String ) null ) ; selectedContent0 . setHash ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test2 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( ( DownloadManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test3 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( "T | JR7i - [ c d^ * ] w" , "T | JR7i - [ c d^ * ] w" ) ; int int0 = selectedContent0 . getFileIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test4 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( ) ; selectedContent0 . getHash ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test5 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( " * c ] G%CIAN / ! RR" , " * c ] G%CIAN / ! RR" ) ; selectedContent0 . getTorrent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test6 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( ( DownloadManager ) null , 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test7 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( ) ; selectedContent0 . getDisplayName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test8 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( ( String ) null , ( String ) null ) ; DownloadUrlInfo downloadUrlInfo0 = new DownloadUrlInfo ( ( String ) null ) ; selectedContent0 . setDownloadInfo ( downloadUrlInfo0 ) ; SelectedContent selectedContent1 = new SelectedContent ( ( String ) null , ( String ) null ) ; boolean boolean0 = selectedContent1 . sameAs ( ( ISelectedContent ) selectedContent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test9 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( "T | JR7i - [ c d^ * ] w" , "T | JR7i - [ c d^ * ] w" ) ; selectedContent0 . getDownloadManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test10 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( " * c ] G%CIAN / ! RR" , " * c ] G%CIAN / ! RR" ) ; selectedContent0 . setTorrent ( ( TOTorrent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test11 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( ) ; selectedContent0 . sameAs ( ( ISelectedContent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test12 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( "" , "I" ) ; boolean boolean0 = selectedContent0 . sameAs ( ( ISelectedContent ) selectedContent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHash ( ) { return ( subs . getID ( ) ) ; }
void test13 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( "" , "I" ) ; SelectedContent selectedContent1 = new SelectedContent ( "I" , "I" ) ; boolean boolean0 = selectedContent0 . sameAs ( ( ISelectedContent ) selectedContent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayName ( ) { return ( MessageText . getString ( "subscriptions . column . name" ) + " : " + subs . getName ( ) ) ; }
void test14 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( "T | JR7i - [ c d^ * ] w" , "T | JR7i - [ c d^ * ] w" ) ; SelectedContent selectedContent1 = new SelectedContent ( ( DownloadManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test15 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( "J73" , "J73" ) ; SelectedContent selectedContent1 = new SelectedContent ( ) ; boolean boolean0 = selectedContent0 . sameAs ( ( ISelectedContent ) selectedContent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test16 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( ( DownloadManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test17 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( ( DownloadManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test18 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( ) ; selectedContent0 . setDisplayName ( "" ) ; SelectedContent selectedContent1 = new SelectedContent ( ( DownloadManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test19 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( ( String ) null , ( String ) null ) ; DownloadUrlInfo downloadUrlInfo0 = new DownloadUrlInfo ( ( String ) null ) ; SelectedContent selectedContent1 = new SelectedContent ( ( String ) null , ( String ) null ) ; selectedContent1 . setDownloadInfo ( downloadUrlInfo0 ) ; boolean boolean0 = selectedContent1 . sameAs ( ( ISelectedContent ) selectedContent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test20 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( ( String ) null , ( String ) null ) ; DownloadUrlInfo downloadUrlInfo0 = new DownloadUrlInfo ( ( String ) null ) ; selectedContent0 . setDownloadInfo ( downloadUrlInfo0 ) ; SelectedContent selectedContent1 = new SelectedContent ( ( String ) null , ( String ) null ) ; DownloadUrlInfo downloadUrlInfo1 = new DownloadUrlInfo ( ( String ) null ) ; selectedContent1 . setDownloadInfo ( downloadUrlInfo1 ) ; boolean boolean0 = selectedContent1 . sameAs ( ( ISelectedContent ) selectedContent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test21 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( ) ; DownloadUrlInfo downloadUrlInfo0 = new DownloadUrlInfo ( "Y\"mth ? 95074m & U" ) ; selectedContent0 . setDownloadInfo ( downloadUrlInfo0 ) ; SelectedContent selectedContent1 = new SelectedContent ( ( DownloadManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFileIndex ( ) { return 0 ; }
void test0 ( ) throws Throwable { TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 0L , 353L , "~vG9z\"Th' , _2 & S" , ( Map < String , Object > ) null , ( Set < Integer > ) treeSet0 , "~vG9z\"Th' , _2 & S" , "~vG9z\"Th' , _2 & S" , ( String ) null , "~vG9z\"Th' , _2 & S" , ( String ) null , "" , "~vG9z\"Th' , _2 & S" , "~vG9z\"Th' , _2 & S" , "~vG9z\"Th' , _2 & S" ) ; DownloadUrlInfoContentNetwork downloadUrlInfoContentNetwork0 = new DownloadUrlInfoContentNetwork ( ( String ) null , ( ContentNetwork ) contentNetworkVuzeGeneric0 ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric1 = ( ContentNetworkVuzeGeneric ) downloadUrlInfoContentNetwork0 . getContentNetwork ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ContentNetwork getContentNetwork ( ) { return cn ; }
void test1 ( ) throws Throwable { TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 0L , 353L , "~vG9z\"Th' , _2 & S" , ( Map < String , Object > ) null , ( Set < Integer > ) treeSet0 , "~vG9z\"Th' , _2 & S" , "~vG9z\"Th' , _2 & S" , ( String ) null , "~vG9z\"Th' , _2 & S" , ( String ) null , "" , "~vG9z\"Th' , _2 & S" , "~vG9z\"Th' , _2 & S" , "~vG9z\"Th' , _2 & S" ) ; DownloadUrlInfoContentNetwork downloadUrlInfoContentNetwork0 = new DownloadUrlInfoContentNetwork ( ( String ) null , ( ContentNetwork ) contentNetworkVuzeGeneric0 ) ; downloadUrlInfoContentNetwork0 . setContentNetwork ( ( ContentNetwork ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDownloadURL ( ) { return dlURL ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( - 1504L ) , "Vf6 : ONpJH * 9w" , "Vf6 : ONpJH * 9w" , "Vf6 : ONpJH * 9w" , "Vf6 : ONpJH * 9w" , "Vf6 : ONpJH * 9w" ) ; SelectedContentV3 selectedContentV3_0 = vuzeActivitiesEntry0 . createSelectedContentObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { SelectedContent selectedContent0 = new SelectedContent ( "^C" , "^C" ) ; SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( selectedContent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayName ( ) { return ( MessageText . getString ( "subscriptions . column . name" ) + " : " + subs . getName ( ) ) ; }
void test2 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( ) ; boolean boolean0 = selectedContentV3_0 . isPlatformContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPlatformContent ( ) { return isPlatformContent ; }
void test3 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; SelectedContentV3 selectedContentV3_0 = vuzeActivitiesEntry0 . createSelectedContentObject ( ) ; selectedContentV3_0 . setCanPlay ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canPlay ( ) { return canPlay ; }
void test4 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( ) ; TOTorrent tOTorrent0 = selectedContentV3_0 . getTorrent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TOTorrent getTorrent ( ) { ( this ) { if ( torrent = = null ) { / / hack alert - we embed the vuze - file into a torrent to allow it to go through / / the normal share route , then pick it out again when the recipient 'downloads' it try { VuzeFile vf = subs . getVuzeFile ( ) ; / / if not corrupt . . . . if ( vf ! = null ) { File f1 = AETemporaryFileHandler . createTempFile ( ) ; File f = new File ( f1 . getParent ( ) , "Update Vuze to access this share_" + f1 . getName ( ) ) ; f1 . delete ( ) ; try { vf . write ( f ) ; TOTorrentCreator cr = TOTorrentFactory . createFromFileOrDirWithComputedPieceLength ( f , new URL ( "dht : / / " ) ) ; TOTorrent temp = cr . create ( ) ; Map vuze_map = vf . exportToMap ( ) ; Map torrent_map = temp . serialiseToMap ( ) ; torrent_map . putAll ( vuze_map ) ; torrent = TOTorrentFactory . deserialiseFromMap ( torrent_map ) ; } finally { f . delete ( ) ; } } } catch ( Throwable e ) { Debug . out ( e ) ; } } } return ( torrent ) ; }
void test5 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( "Ls" , "Ls" , false , true ) ; selectedContentV3_0 . getDownloadManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canPlay ( ) { return canPlay ; }
void test6 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( ) ; DownloadUrlInfo downloadUrlInfo0 = selectedContentV3_0 . getDownloadInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DownloadUrlInfo getDownloadInfo ( ) { return null ; }
void test7 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( ) ; byte [ ] byteArray0 = selectedContentV3_0 . getImageBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getImageBytes ( ) { return imageBytes ; }
void test8 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( ) ; boolean boolean0 = selectedContentV3_0 . canPlay ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canPlay ( ) { return canPlay ; }
void test9 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( "Ls" , "Ls" , false , true ) ; int int0 = selectedContentV3_0 . getFileIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPlatformContent ( ) { return isPlatformContent ; }
void test10 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( ) ; selectedContentV3_0 . setHash ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPlatformContent ( ) { return isPlatformContent ; }
void test11 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( ) ; String string0 = selectedContentV3_0 . getThumbURL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getThumbURL ( ) { return thumbURL ; }
void test12 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( ) ; selectedContentV3_0 . setTorrent ( ( TOTorrent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canPlay ( ) { return canPlay ; }
void test13 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( "Ls" , "Ls" , false , true ) ; SelectedContentV3 selectedContentV3_1 = new SelectedContentV3 ( "Ls" , "Ls" , true , false ) ; boolean boolean0 = selectedContentV3_0 . sameAs ( ( ISelectedContent ) selectedContentV3_1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPlatformContent ( ) { return isPlatformContent ; }
void test14 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( ) ; boolean boolean0 = selectedContentV3_0 . sameAs ( ( ISelectedContent ) selectedContentV3_0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sameAs ( ISelectedContent _other ) { if ( _other = = this ) { return ( true ) ; } if ( _other instanceof SubscriptionSelectedContent ) { SubscriptionSelectedContent other = ( SubscriptionSelectedContent ) _other ; return ( subs = = other . subs ) ; } return ( false ) ; }
void test15 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( ) ; SelectedContent selectedContent0 = new SelectedContent ( ( DownloadManager ) null , 0 ) ; boolean boolean0 = selectedContentV3_0 . sameAs ( ( ISelectedContent ) selectedContent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sameAs ( ISelectedContent _other ) { if ( _other = = this ) { return ( true ) ; } if ( _other instanceof SubscriptionSelectedContent ) { SubscriptionSelectedContent other = ( SubscriptionSelectedContent ) _other ; return ( subs = = other . subs ) ; } return ( false ) ; }
void test16 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( ) ; SelectedContentV3 selectedContentV3_1 = new SelectedContentV3 ( "yO . Jt8t" , "yO . Jt8t" , false , false ) ; boolean boolean0 = selectedContentV3_0 . sameAs ( ( ISelectedContent ) selectedContentV3_1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canPlay ( ) { return canPlay ; }
void test17 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( "Ls" , "Ls" , false , true ) ; SelectedContentV3 selectedContentV3_1 = new SelectedContentV3 ( "Ls" , "Ls" , false , false ) ; boolean boolean0 = selectedContentV3_0 . sameAs ( ( ISelectedContent ) selectedContentV3_1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPlatformContent ( ) { return isPlatformContent ; }
void test18 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( ) ; SelectedContentV3 selectedContentV3_1 = new SelectedContentV3 ( ( DownloadManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sameAs ( ISelectedContent _other ) { if ( _other = = this ) { return ( true ) ; } if ( _other instanceof SubscriptionSelectedContent ) { SubscriptionSelectedContent other = ( SubscriptionSelectedContent ) _other ; return ( subs = = other . subs ) ; } return ( false ) ; }
void test19 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( ) ; selectedContentV3_0 . setThumbURL ( "" ) ; VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; SelectedContentV3 selectedContentV3_1 = vuzeActivitiesEntry0 . createSelectedContentObject ( ) ; boolean boolean0 = selectedContentV3_0 . sameAs ( ( ISelectedContent ) selectedContentV3_1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sameAs ( ISelectedContent _other ) { if ( _other = = this ) { return ( true ) ; } if ( _other instanceof SubscriptionSelectedContent ) { SubscriptionSelectedContent other = ( SubscriptionSelectedContent ) _other ; return ( subs = = other . subs ) ; } return ( false ) ; }
void test20 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( ) ; selectedContentV3_0 . setThumbURL ( "N" ) ; VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; SelectedContentV3 selectedContentV3_1 = vuzeActivitiesEntry0 . createSelectedContentObject ( ) ; boolean boolean0 = selectedContentV3_1 . sameAs ( ( ISelectedContent ) selectedContentV3_0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sameAs ( ISelectedContent _other ) { if ( _other = = this ) { return ( true ) ; } if ( _other instanceof SubscriptionSelectedContent ) { SubscriptionSelectedContent other = ( SubscriptionSelectedContent ) _other ; return ( subs = = other . subs ) ; } return ( false ) ; }
void test21 ( ) throws Throwable { SelectedContentV3 selectedContentV3_0 = new SelectedContentV3 ( ) ; byte [ ] byteArray0 = new byte [ 2 ] ; selectedContentV3_0 . setImageBytes ( byteArray0 ) ; VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( long ) ( byte ) 125 , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null ) ; SelectedContentV3 selectedContentV3_1 = vuzeActivitiesEntry0 . createSelectedContentObject ( ) ; boolean boolean0 = selectedContentV3_0 . sameAs ( ( ISelectedContent ) selectedContentV3_1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sameAs ( ISelectedContent _other ) { if ( _other = = this ) { return ( true ) ; } if ( _other instanceof SubscriptionSelectedContent ) { SubscriptionSelectedContent other = ( SubscriptionSelectedContent ) _other ; return ( subs = = other . subs ) ; } return ( false ) ; }
void test22 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( - 1504L ) , "Vf6 : ONpJH * 9w" , "Vf6 : ONpJH * 9w" , "Vf6 : ONpJH * 9w" , "Vf6 : ONpJH * 9w" , "Vf6 : ONpJH * 9w" ) ; SelectedContentV3 selectedContentV3_0 = vuzeActivitiesEntry0 . createSelectedContentObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { Launcher launcher0 = new Launcher ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBootStrapped ( ) { if ( ! LOADER_ENABLED | | ClassLoaderWitness . class . getClassLoader ( ) instanceof PeeringClassloader ) return true ; return false ; }
void test2 ( ) throws Throwable { Class < ? > class0 = AzURLStreamHandlerFactory . class ; String [ ] stringArray0 = new String [ 4 ] ; boolean boolean0 = Launcher . checkAndLaunch ( ( Class ) class0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkAndLaunch ( Class MainClass , String [ ] args ) { if ( isBootStrapped ( ) ) return false ; launch ( MainClass , args ) ; return true ; }
void test1 ( ) throws Throwable { MainExecutor mainExecutor0 = new MainExecutor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { AzureusCoreLifecycleAdapter azureusCoreLifecycleAdapter0 = new AzureusCoreLifecycleAdapter ( ) ; azureusCoreLifecycleAdapter0 . stopped ( ( AzureusCore ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean syncInvokeRequired ( ) ; / * * * hack - original semantics of the "started" event was that all plugins init complete * However , some can take a long time ( and even block if attempting to acquire , say , * IP address and version server is down . . . ) so added this flag to allow listeners to * indicate that they're happy to be "started" before plugin init complete * @return * / boolean requiresPluginInitCompleteBeforeStartedEvent ( ) ; }
void test1 ( ) throws Throwable { AzureusCoreLifecycleAdapter azureusCoreLifecycleAdapter0 = new AzureusCoreLifecycleAdapter ( ) ; boolean boolean0 = azureusCoreLifecycleAdapter0 . stopRequested ( ( AzureusCore ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean stopRequested ( AzureusCore core ) throws AzureusCoreException ; boolean restartRequested ( AzureusCore core ) throws AzureusCoreException ; / * * * Some listeners must be invoked on the same thread that initiates a core closedown . In particular * the show - alerts - raised - during - closedown logic requires that it is invoked on the swt thread that * initiated the closedown . * @return * / boolean syncInvokeRequired ( ) ; / * * * hack - original semantics of the "started" event was that all plugins init complete * However , some can take a long time ( and even block if attempting to acquire , say , * IP address and version server is down . . . ) so added this flag to allow listeners to * indicate that they're happy to be "started" before plugin init complete * @return * / boolean requiresPluginInitCompleteBeforeStartedEvent ( ) ; }
void test2 ( ) throws Throwable { AzureusCoreLifecycleAdapter azureusCoreLifecycleAdapter0 = new AzureusCoreLifecycleAdapter ( ) ; azureusCoreLifecycleAdapter0 . stopping ( ( AzureusCore ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean requiresPluginInitCompleteBeforeStartedEvent ( ) ; }
void test3 ( ) throws Throwable { AzureusCoreLifecycleAdapter azureusCoreLifecycleAdapter0 = new AzureusCoreLifecycleAdapter ( ) ; boolean boolean0 = azureusCoreLifecycleAdapter0 . requiresPluginInitCompleteBeforeStartedEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean requiresPluginInitCompleteBeforeStartedEvent ( ) ; }
void test4 ( ) throws Throwable { AzureusCoreLifecycleAdapter azureusCoreLifecycleAdapter0 = new AzureusCoreLifecycleAdapter ( ) ; boolean boolean0 = azureusCoreLifecycleAdapter0 . syncInvokeRequired ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean syncInvokeRequired ( ) ; / * * * hack - original semantics of the "started" event was that all plugins init complete * However , some can take a long time ( and even block if attempting to acquire , say , * IP address and version server is down . . . ) so added this flag to allow listeners to * indicate that they're happy to be "started" before plugin init complete * @return * / boolean requiresPluginInitCompleteBeforeStartedEvent ( ) ; }
void test5 ( ) throws Throwable { AzureusCoreLifecycleAdapter azureusCoreLifecycleAdapter0 = new AzureusCoreLifecycleAdapter ( ) ; boolean boolean0 = azureusCoreLifecycleAdapter0 . restartRequested ( ( AzureusCore ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean restartRequested ( AzureusCore core ) throws AzureusCoreException ; / * * * Some listeners must be invoked on the same thread that initiates a core closedown . In particular * the show - alerts - raised - during - closedown logic requires that it is invoked on the swt thread that * initiated the closedown . * @return * / boolean syncInvokeRequired ( ) ; / * * * hack - original semantics of the "started" event was that all plugins init complete * However , some can take a long time ( and even block if attempting to acquire , say , * IP address and version server is down . . . ) so added this flag to allow listeners to * indicate that they're happy to be "started" before plugin init complete * @return * / boolean requiresPluginInitCompleteBeforeStartedEvent ( ) ; }
void test6 ( ) throws Throwable { AzureusCoreLifecycleAdapter azureusCoreLifecycleAdapter0 = new AzureusCoreLifecycleAdapter ( ) ; azureusCoreLifecycleAdapter0 . started ( ( AzureusCore ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean syncInvokeRequired ( ) ; / * * * hack - original semantics of the "started" event was that all plugins init complete * However , some can take a long time ( and even block if attempting to acquire , say , * IP address and version server is down . . . ) so added this flag to allow listeners to * indicate that they're happy to be "started" before plugin init complete * @return * / boolean requiresPluginInitCompleteBeforeStartedEvent ( ) ; }
void test7 ( ) throws Throwable { AzureusCoreLifecycleAdapter azureusCoreLifecycleAdapter0 = new AzureusCoreLifecycleAdapter ( ) ; UIFunctionsImpl uIFunctionsImpl0 = new UIFunctionsImpl ( ( MainWindow ) null ) ; azureusCoreLifecycleAdapter0 . componentCreated ( ( AzureusCore ) null , ( AzureusCoreComponent ) uIFunctionsImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGlobalTransferBarShown ( ) ; void showGlobalTransferBar ( ) ; void closeGlobalTransferBar ( ) ; / * * * @return * / UISWTView [ ] getPluginViews ( ) ; / * * * * @param sParentID * @param sViewID * @param l * @param dataSource * @param bSetFocus * / void openPluginView ( String sParentID , String sViewID , UISWTViewEventListener l , Object dataSource , boolean bSetFocus ) ; void openPluginView ( UISWTViewCore view , String name ) ; / * * * @param viewID * / void removePluginView ( String viewID ) ; / * * * @param impl * / void closePluginView ( UISWTViewCore view ) ; void closePluginViews ( String sViewID ) ; UISWTInstance getUISWTInstance ( ) ; void refreshTorrentMenu ( ) ; IMainStatusBar getMainStatusBar ( ) ; / * * * Creates the main application menu and attach it to the given < code > Shell < / code > ; * this is only used for OSX so that we can attach the global menu to popup dialogs which * is the expected behavior on OSX . Windows and Linux do not require this since they do not have * a global menu and because their main menu is already attached to the main application window . * @param shell * @return * / IMainMenu createMainMenu ( Shell shell ) ; IMainWindow getMainWindow ( ) ; / * * * * * @since 3 . 1 . 1 . 1 * / void closeAllDetails ( ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / boolean hasDetailViews ( ) ; Shell showCoreWaitDlg ( ) ; MultipleDocumentInterfaceSWT getMDISWT ( ) ; void promptForSearch ( ) ; UIToolBarManager getToolBarManager ( ) ; }
void test0 ( ) throws Throwable { boolean boolean0 = AzureusCoreFactory . isCoreAvailable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCoreAvailable ( ) { return ( AzureusCoreImpl . isCoreAvailable ( ) ) ; }
void test1 ( ) throws Throwable { AzureusCoreFactory azureusCoreFactory0 = new AzureusCoreFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCoreRunning ( ) { return AzureusCoreImpl . isCoreRunning ( ) ; }
void test3 ( ) throws Throwable { boolean boolean0 = AzureusCoreFactory . isCoreRunning ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCoreRunning ( ) { return AzureusCoreImpl . isCoreRunning ( ) ; }
void test0 ( ) throws Throwable { LogisticActivationFunction logisticActivationFunction0 = new LogisticActivationFunction ( ) ; double double0 = logisticActivationFunction0 . getValueFor ( ( - 1253 . 9131143341833 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getValueFor ( double x ) { return 1 . 0 / ( 1 . 0 + Math . exp ( - x ) ) ; }
void test1 ( ) throws Throwable { LogisticActivationFunction logisticActivationFunction0 = new LogisticActivationFunction ( ) ; double double0 = logisticActivationFunction0 . getDerivedFunctionValueFor ( 1 . 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDerivedFunctionValueFor ( double x ) { return x * ( 1 - x ) ; }
void test0 ( ) throws Throwable { NeuralNetworkLayer neuralNetworkLayer0 = new NeuralNetworkLayer ( 1 ) ; neuralNetworkLayer0 . setMomentum ( true , ( double ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMomentum ( boolean useMomentum , double factor ) { this . useMomentum = useMomentum ; this . momentumFactor = factor ; }
void test1 ( ) throws Throwable { NeuralNetworkLayer neuralNetworkLayer0 = new NeuralNetworkLayer ( ( - 1941 ) ) ; neuralNetworkLayer0 . setLearningRate ( 1854 . 769730900511 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setLearningRate ( double rate ) { this . learningRate = rate ; }
void test2 ( ) throws Throwable { NeuralNetworkLayer neuralNetworkLayer0 = new NeuralNetworkLayer ( ( - 1941 ) ) ; neuralNetworkLayer0 . calculateNeuronValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void calculateNeuronValues ( ) { if ( parentLayer ! = null ) { for ( int j = 0 ; j < numberOfNodes ; j + + ) { double x = 0 ; for ( int i = 0 ; i < parentLayer . getNumberOfNodes ( ) ; i + + ) { x + = parentLayer . neuronValues [ i ] * parentLayer . weights [ i ] [ j ] ; } x + = parentLayer . biasValues [ j ] * parentLayer . biasWeights [ j ] ; if ( childLayer = = null & & linearOutput ) { neuronValues [ j ] = x ; } else { neuronValues [ j ] = activationFunction . getValueFor ( x ) ; } } } }
void test3 ( ) throws Throwable { NeuralNetworkLayer neuralNetworkLayer0 = new NeuralNetworkLayer ( ( - 576 ) ) ; neuralNetworkLayer0 . calculateErrors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfNodes ( ) { return numberOfNodes ; }
void test5 ( ) throws Throwable { NeuralNetworkLayer neuralNetworkLayer0 = new NeuralNetworkLayer ( ( - 1941 ) ) ; neuralNetworkLayer0 . adjustWeights ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void adjustWeights ( ) { if ( childLayer ! = null ) { for ( int i = 0 ; i < numberOfNodes ; i + + ) { for ( int j = 0 ; j < childLayer . getNumberOfNodes ( ) ; j + + ) { double dw = learningRate * childLayer . errors [ j ] * neuronValues [ i ] ; if ( useMomentum ) { weights [ i ] [ j ] + = dw + momentumFactor * weightChanges [ i ] [ j ] ; weightChanges [ i ] [ j ] = dw ; } else { weights [ i ] [ j ] + = dw ; } } } for ( int j = 0 ; j < childLayer . getNumberOfNodes ( ) ; j + + ) { biasWeights [ j ] + = learningRate * childLayer . errors [ j ] * biasValues [ j ] ; } } }
void test6 ( ) throws Throwable { NeuralNetworkLayer neuralNetworkLayer0 = new NeuralNetworkLayer ( ( - 1941 ) ) ; String string0 = neuralNetworkLayer0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { NeuralNetwork neuralNetwork0 = new NeuralNetwork ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { NeuralNetwork neuralNetwork0 = new NeuralNetwork ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { NeuralNetwork neuralNetwork0 = new NeuralNetwork ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { NeuralNetwork neuralNetwork0 = new NeuralNetwork ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double calculateError ( ) { double error = 0 . 0 ; for ( int i = 0 ; i < outputLayer . numberOfNodes ; i + + ) { error + = Math . pow ( outputLayer . neuronValues [ i ] - outputLayer . desiredValues [ i ] , 2 . 0 ) ; } error / = outputLayer . numberOfNodes ; return error ; }
void test4 ( ) throws Throwable { NeuralNetwork neuralNetwork0 = new NeuralNetwork ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test5 ( ) throws Throwable { NeuralNetwork neuralNetwork0 = new NeuralNetwork ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test6 ( ) throws Throwable { NeuralNetwork neuralNetwork0 = new NeuralNetwork ( 10 , 10 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test7 ( ) throws Throwable { NeuralNetwork neuralNetwork0 = new NeuralNetwork ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test8 ( ) throws Throwable { NeuralNetwork neuralNetwork0 = new NeuralNetwork ( 1170 , 0 , 1170 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test9 ( ) throws Throwable { NeuralNetwork neuralNetwork0 = new NeuralNetwork ( 0 , 0 , 475 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test10 ( ) throws Throwable { NeuralNetwork neuralNetwork0 = new NeuralNetwork ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test12 ( ) throws Throwable { NeuralNetwork neuralNetwork0 = new NeuralNetwork ( 10 , 10 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test13 ( ) throws Throwable { NeuralNetwork neuralNetwork0 = new NeuralNetwork ( 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test5 ( ) throws Throwable { RSSGeneratorPlugin rSSGeneratorPlugin0 = new RSSGeneratorPlugin ( ) ; rSSGeneratorPlugin0 . initStage ( 8089 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void initStage ( int num ) { if ( num = = 1 ) { BasicPluginConfigModel config = getConfigModel ( ) ; test_param = config . addHyperlinkParameter2 ( "rss . internal . test . url" , "" ) ; test_param . setEnabled ( isPluginEnabled ( ) ) ; } }
void test0 ( ) throws Throwable { EventWaiter eventWaiter0 = new EventWaiter ( ) ; boolean boolean0 = eventWaiter0 . waitForEvent ( 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean waitForEvent ( long timeout ) { ( this ) { if ( wakeup_outstanding ) { wakeup_outstanding = false ; return ( false ) ; } try { sleeping = true ; this . wait ( timeout ) ; } catch ( Throwable e ) { Debug . printStackTrace ( e ) ; } finally { sleeping = false ; } return ( true ) ; } }
void test1 ( ) throws Throwable { EventWaiter eventWaiter0 = new EventWaiter ( ) ; eventWaiter0 . eventOccurred ( ) ; boolean boolean0 = eventWaiter0 . waitForEvent ( 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean waitForEvent ( long timeout ) { ( this ) { if ( wakeup_outstanding ) { wakeup_outstanding = false ; return ( false ) ; } try { sleeping = true ; this . wait ( timeout ) ; } catch ( Throwable e ) { Debug . printStackTrace ( e ) ; } finally { sleeping = false ; } return ( true ) ; } }
void test0 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = InetSocketAddress . createUnresolved ( "o ? U2 [ Q" , 68 ) ; VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = ( VirtualBlockingServerChannelSelector ) VirtualServerChannelSelectorFactory . createTest ( inetSocketAddress0 , 68 , ( VirtualServerChannelSelector . SelectListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRunning ( ) ; InetAddress getBoundToAddress ( ) ; long getTimeOfLastAccept ( ) ; / * * * Listener notified when a new incoming connection is accepted . * / interface SelectListener { / * * * The given connection has just been accepted . * @param channel new connection * / void newConnectionAccepted ( ServerSocketChannel server , SocketChannel channel ) ; }
void test1 ( ) throws Throwable { VirtualServerChannelSelectorFactory virtualServerChannelSelectorFactory0 = new VirtualServerChannelSelectorFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = InetSocketAddress . createUnresolved ( "o ? U2 [ Q" , 68 ) ; VirtualNonBlockingServerChannelSelector virtualNonBlockingServerChannelSelector0 = ( VirtualNonBlockingServerChannelSelector ) VirtualServerChannelSelectorFactory . createNonBlocking ( inetSocketAddress0 , 68 , ( VirtualServerChannelSelector . SelectListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTimeOfLastAccept ( ) ; / * * * Listener notified when a new incoming connection is accepted . * / interface SelectListener { / * * * The given connection has just been accepted . * @param channel new connection * / void newConnectionAccepted ( ServerSocketChannel server , SocketChannel channel ) ; }
void test1 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 33 ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( inetSocketAddress0 ) ; boolean boolean0 = connectionEndpoint0 . matchIP ( "O * _l3o } yd ? N" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchIP ( String ip ) { if ( matchIP ( ip , notional_address ) ) { return ( true ) ; } ProtocolEndpoint [ ] peps = getProtocols ( ) ; for ( int i = 0 ; i < peps . length ; i + + ) { ProtocolEndpoint pep = peps [ i ] ; if ( pep . getType ( ) = = ProtocolEndpoint . PROTOCOL_TCP ) { ProtocolEndpointTCP tcp = ( ProtocolEndpointTCP ) pep ; if ( matchIP ( ip , tcp . getAddress ( ) ) ) { return ( true ) ; } } else { ProtocolEndpointUDP tcp = ( ProtocolEndpointUDP ) pep ; if ( matchIP ( ip , tcp . getAddress ( ) ) ) { return ( true ) ; } } } return ( false ) ; }
void test2 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 33 ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( inetSocketAddress0 ) ; InetSocketAddress inetSocketAddress1 = connectionEndpoint0 . getNotionalAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InetSocketAddress getNotionalAddress ( ) { return ( notional_address ) ; }
void test3 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 33 ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( inetSocketAddress0 ) ; boolean boolean0 = connectionEndpoint0 . matchIP ( "0 . 0 . 0 . 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchIP ( String ip ) { if ( matchIP ( ip , notional_address ) ) { return ( true ) ; } ProtocolEndpoint [ ] peps = getProtocols ( ) ; for ( int i = 0 ; i < peps . length ; i + + ) { ProtocolEndpoint pep = peps [ i ] ; if ( pep . getType ( ) = = ProtocolEndpoint . PROTOCOL_TCP ) { ProtocolEndpointTCP tcp = ( ProtocolEndpointTCP ) pep ; if ( matchIP ( ip , tcp . getAddress ( ) ) ) { return ( true ) ; } } else { ProtocolEndpointUDP tcp = ( ProtocolEndpointUDP ) pep ; if ( matchIP ( ip , tcp . getAddress ( ) ) ) { return ( true ) ; } } } return ( false ) ; }
void test0 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 775 ) ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 16 ] [ 6 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , true , true , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUploadLimit ( ) { if ( dirty ) feedForward ( ) ; return ( long ) ( 1 . 2 * maxUlSpeed * neuralNetwork . getOutput ( 3 ) ) ; }
void test1 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = InetSocketAddress . createUnresolved ( "wA" , 0 ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( inetSocketAddress0 ) ; AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 0 ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 15 ] [ 4 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( connectionEndpoint0 , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) aZMessageDecoder0 , false , false , byteArray0 ) ; networkConnectionImpl0 . startMessageProcessing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMssSize ( ) ; / * * * Inject the given already - read data back into the read stream . * @param bytes_already_read data * / void setAlreadyRead ( ByteBuffer bytes_already_read ) ; / * * * Get the socket channel used by the transport . * @return the socket channel * / TransportEndpoint getTransportEndpoint ( ) ; boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test2 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = InetSocketAddress . createUnresolved ( "wA" , 0 ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( inetSocketAddress0 ) ; AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 0 ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 15 ] [ 4 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( connectionEndpoint0 , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) aZMessageDecoder0 , false , false , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getDownloadLimit ( ) { if ( dirty ) feedForward ( ) ; return ( long ) ( 1 . 2 * maxDlSpeed * neuralNetwork . getOutput ( 1 ) ) ; }
void test3 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 775 ) ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 16 ] [ 6 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , true , true , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUploadLimit ( ) { if ( dirty ) feedForward ( ) ; return ( long ) ( 1 . 2 * maxUlSpeed * neuralNetwork . getOutput ( 3 ) ) ; }
void test4 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 5 ] [ 6 ] ; BTMessageEncoder bTMessageEncoder0 = new BTMessageEncoder ( ) ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) bTMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , false , false , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getDownloadLimit ( ) { if ( dirty ) feedForward ( ) ; return ( long ) ( 1 . 2 * maxDlSpeed * neuralNetwork . getOutput ( 1 ) ) ; }
void test5 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 775 ) ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 16 ] [ 6 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , true , true , byteArray0 ) ; networkConnectionImpl0 . addRateLimiter ( ( LimitedRateGroup ) null , false ) ; networkConnectionImpl0 . addRateLimiter ( ( LimitedRateGroup ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUploadLimit ( ) { if ( dirty ) feedForward ( ) ; return ( long ) ( 1 . 2 * maxUlSpeed * neuralNetwork . getOutput ( 3 ) ) ; }
void test6 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 775 ) ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 16 ] [ 6 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , true , true , byteArray0 ) ; networkConnectionImpl0 . addRateLimiter ( ( LimitedRateGroup ) null , true ) ; networkConnectionImpl0 . addRateLimiter ( ( LimitedRateGroup ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getDownloadLimit ( ) { if ( dirty ) feedForward ( ) ; return ( long ) ( 1 . 2 * maxDlSpeed * neuralNetwork . getOutput ( 1 ) ) ; }
void test7 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 5 ] [ 6 ] ; BTMessageEncoder bTMessageEncoder0 = new BTMessageEncoder ( ) ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) bTMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , false , false , byteArray0 ) ; networkConnectionImpl0 . removeRateLimiter ( ( LimitedRateGroup ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUploadLimit ( ) { if ( dirty ) feedForward ( ) ; return ( long ) ( 1 . 2 * maxUlSpeed * neuralNetwork . getOutput ( 3 ) ) ; }
void test8 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 775 ) ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 16 ] [ 6 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , true , true , byteArray0 ) ; networkConnectionImpl0 . removeRateLimiter ( ( LimitedRateGroup ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMssSize ( ) ; / * * * Inject the given already - read data back into the read stream . * @param bytes_already_read data * / void setAlreadyRead ( ByteBuffer bytes_already_read ) ; / * * * Get the socket channel used by the transport . * @return the socket channel * / TransportEndpoint getTransportEndpoint ( ) ; boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test9 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 775 ) ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 16 ] [ 6 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , true , true , byteArray0 ) ; networkConnectionImpl0 . addRateLimiter ( ( LimitedRateGroup ) null , true ) ; networkConnectionImpl0 . removeRateLimiter ( ( LimitedRateGroup ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test10 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 5 ] [ 6 ] ; BTMessageEncoder bTMessageEncoder0 = new BTMessageEncoder ( ) ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) bTMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , false , false , byteArray0 ) ; networkConnectionImpl0 . addRateLimiter ( ( LimitedRateGroup ) null , false ) ; networkConnectionImpl0 . removeRateLimiter ( ( LimitedRateGroup ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUploadLimit ( ) { if ( dirty ) feedForward ( ) ; return ( long ) ( 1 . 2 * maxUlSpeed * neuralNetwork . getOutput ( 3 ) ) ; }
void test0 ( ) throws Throwable { NetworkManagerStats networkManagerStats0 = new NetworkManagerStats ( ) ; long long0 = networkManagerStats0 . getOutbound ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getOutbound ( int type ) { return ( outbound [ type ] ) ; }
void test1 ( ) throws Throwable { NetworkManagerStats networkManagerStats0 = new NetworkManagerStats ( ) ; long long0 = networkManagerStats0 . getInbound ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getInbound ( int type ) { return ( inbound [ type ] ) ; }
void test0 ( ) throws Throwable { ProtocolEndpointFactory protocolEndpointFactory0 = new ProtocolEndpointFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { boolean boolean0 = ProtocolEndpointFactory . isHandlerRegistered ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHandlerRegistered ( int type ) { if ( type = = ProtocolEndpoint . PROTOCOL_TCP | | type = = ProtocolEndpoint . PROTOCOL_UDP ) { return ( true ) ; } else { return ( other_handlers . containsKey ( type ) ) ; } }
void test2 ( ) throws Throwable { boolean boolean0 = ProtocolEndpointFactory . isHandlerRegistered ( 892 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHandlerRegistered ( int type ) { if ( type = = ProtocolEndpoint . PROTOCOL_TCP | | type = = ProtocolEndpoint . PROTOCOL_UDP ) { return ( true ) ; } else { return ( other_handlers . containsKey ( type ) ) ; } }
void test3 ( ) throws Throwable { boolean boolean0 = ProtocolEndpointFactory . isHandlerRegistered ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHandlerRegistered ( int type ) { if ( type = = ProtocolEndpoint . PROTOCOL_TCP | | type = = ProtocolEndpoint . PROTOCOL_UDP ) { return ( true ) ; } else { return ( other_handlers . containsKey ( type ) ) ; } }
void test4 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 1 ) ; ProtocolEndpointTCP protocolEndpointTCP0 = ( ProtocolEndpointTCP ) ProtocolEndpointFactory . createEndpoint ( 1 , inetSocketAddress0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test5 ( ) throws Throwable { ProtocolEndpoint protocolEndpoint0 = ProtocolEndpointFactory . createEndpoint ( 892 , ( InetSocketAddress ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ProtocolEndpoint createEndpoint ( int type , InetSocketAddress target ) { switch ( type ) { case ProtocolEndpoint . PROTOCOL_TCP : { return ( tcp_handler . create ( target ) ) ; } case ProtocolEndpoint . PROTOCOL_UDP : { return ( udp_handler . create ( target ) ) ; } default : { ProtocolEndpointHandler handler = other_handlers . get ( type ) ; if ( handler ! = null ) { return ( handler . create ( target ) ) ; } return ( null ) ; } } }
void test6 ( ) throws Throwable { ProtocolEndpointUDP protocolEndpointUDP0 = ( ProtocolEndpointUDP ) ProtocolEndpointFactory . createEndpoint ( 2 , ( InetSocketAddress ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test7 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 1 ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( inetSocketAddress0 ) ; ProtocolEndpointTCP protocolEndpointTCP0 = ( ProtocolEndpointTCP ) ProtocolEndpointFactory . createEndpoint ( 1 , connectionEndpoint0 , inetSocketAddress0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test8 ( ) throws Throwable { ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( ( InetSocketAddress ) null ) ; ProtocolEndpoint protocolEndpoint0 = ProtocolEndpointFactory . createEndpoint ( 892 , connectionEndpoint0 , ( InetSocketAddress ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ProtocolEndpoint createEndpoint ( int type , InetSocketAddress target ) { switch ( type ) { case ProtocolEndpoint . PROTOCOL_TCP : { return ( tcp_handler . create ( target ) ) ; } case ProtocolEndpoint . PROTOCOL_UDP : { return ( udp_handler . create ( target ) ) ; } default : { ProtocolEndpointHandler handler = other_handlers . get ( type ) ; if ( handler ! = null ) { return ( handler . create ( target ) ) ; } return ( null ) ; } } }
void test9 ( ) throws Throwable { ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( ( InetSocketAddress ) null ) ; ProtocolEndpointUDP protocolEndpointUDP0 = ( ProtocolEndpointUDP ) ProtocolEndpointFactory . createEndpoint ( 2 , connectionEndpoint0 , ( InetSocketAddress ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test1 ( ) throws Throwable { BTMessageEncoder bTMessageEncoder0 = new BTMessageEncoder ( ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 3 ] [ 2 ] ; NetworkConnectionImpl networkConnectionImpl0 = ( NetworkConnectionImpl ) NetworkConnectionFactory . create ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) bTMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , true , false , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUploadLimit ( ) { if ( dirty ) feedForward ( ) ; return ( long ) ( 1 . 2 * maxUlSpeed * neuralNetwork . getOutput ( 3 ) ) ; }
void test2 ( ) throws Throwable { NetworkConnectionFactory networkConnectionFactory0 = new NetworkConnectionFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { NetworkManager networkManager0 = NetworkManager . getSingleton ( ) ; RateHandler rateHandler0 = networkManager0 . getRateHandler ( true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSeedingOnlyUploadRate ( ) { return seeding_only_mode_allowed & & seeding_only_mode ; }
void test2 ( ) throws Throwable { boolean boolean0 = NetworkManager . isLANRateEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLANRateEnabled ( ) { return ( lan_rate_enabled ) ; }
void test3 ( ) throws Throwable { NetworkManager networkManager0 = NetworkManager . getSingleton ( ) ; InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( "" , 0 ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( inetSocketAddress0 ) ; BTMessageEncoder bTMessageEncoder0 = new BTMessageEncoder ( ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 8 ] [ 9 ] ; NetworkConnectionImpl networkConnectionImpl0 = ( NetworkConnectionImpl ) networkManager0 . createConnection ( connectionEndpoint0 , ( MessageStreamEncoder ) bTMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , true , true , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinMssSize ( ) { return Math . min ( TCPNetworkManager . getTcpMssSize ( ) , UDPNetworkManager . getUdpMssSize ( ) ) ; }
void test4 ( ) throws Throwable { NetworkManager networkManager0 = NetworkManager . getSingleton ( ) ; NetworkManagerStats networkManagerStats0 = networkManager0 . getStats ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NetworkManagerStats getStats ( ) { return ( stats ) ; }
void test9 ( ) throws Throwable { NetworkManager networkManager0 = NetworkManager . getSingleton ( ) ; TransferProcessor transferProcessor0 = networkManager0 . getUploadProcessor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TransferProcessor getUploadProcessor ( ) { return ( upload_processor ) ; }
void test10 ( ) throws Throwable { boolean boolean0 = NetworkManager . isSeedingOnlyUploadRate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSeedingOnlyUploadRate ( ) { return seeding_only_mode_allowed & & seeding_only_mode ; }
void test11 ( ) throws Throwable { int int0 = NetworkManager . getMaxUploadRateBPSNormal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxUploadRateBPSNormal ( ) { if ( max_upload_rate_bps_normal = = UNLIMITED_RATE ) return 0 ; return max_upload_rate_bps_normal ; }
void test12 ( ) throws Throwable { int int0 = NetworkManager . getMaxUploadRateBPSSeedingOnly ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxUploadRateBPSSeedingOnly ( ) { if ( max_upload_rate_bps_seeding_only = = UNLIMITED_RATE ) return 0 ; return max_upload_rate_bps_seeding_only ; }
void test13 ( ) throws Throwable { int int0 = NetworkManager . getMaxDownloadRateBPS ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxDownloadRateBPS ( ) { if ( max_download_rate_bps = = UNLIMITED_RATE ) return 0 ; return external_max_download_rate_bps ; }
void test14 ( ) throws Throwable { boolean boolean0 = NetworkManager . getCryptoRequired ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCryptoRequired ( int override_level ) { if ( override_level = = CRYPTO_OVERRIDE_NONE ) { return ( REQUIRE_CRYPTO_HANDSHAKE ) ; } else if ( override_level = = CRYPTO_OVERRIDE_REQUIRED ) { return ( true ) ; } else { return ( false ) ; } }
void test15 ( ) throws Throwable { boolean boolean0 = NetworkManager . getCryptoRequired ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCryptoRequired ( int override_level ) { if ( override_level = = CRYPTO_OVERRIDE_NONE ) { return ( REQUIRE_CRYPTO_HANDSHAKE ) ; } else if ( override_level = = CRYPTO_OVERRIDE_REQUIRED ) { return ( true ) ; } else { return ( false ) ; } }
void test16 ( ) throws Throwable { boolean boolean0 = NetworkManager . getCryptoRequired ( 66 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCryptoRequired ( int override_level ) { if ( override_level = = CRYPTO_OVERRIDE_NONE ) { return ( REQUIRE_CRYPTO_HANDSHAKE ) ; } else if ( override_level = = CRYPTO_OVERRIDE_REQUIRED ) { return ( true ) ; } else { return ( false ) ; } }
void test17 ( ) throws Throwable { NetworkManager networkManager0 = NetworkManager . getSingleton ( ) ; MultiPeerUploader multiPeerUploader0 = new MultiPeerUploader ( ( RateHandler ) null ) ; networkManager0 . addWriteEntity ( ( RateControlledEntity ) multiPeerUploader0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test18 ( ) throws Throwable { NetworkManager networkManager0 = NetworkManager . getSingleton ( ) ; MultiPeerDownloader2 multiPeerDownloader2_0 = new MultiPeerDownloader2 ( ( RateHandler ) null ) ; networkManager0 . removeWriteEntity ( ( RateControlledEntity ) multiPeerDownloader2_0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test19 ( ) throws Throwable { NetworkManager networkManager0 = NetworkManager . getSingleton ( ) ; MultiPeerDownloader2 multiPeerDownloader2_0 = new MultiPeerDownloader2 ( ( RateHandler ) null ) ; networkManager0 . addReadEntity ( ( RateControlledEntity ) multiPeerDownloader2_0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxDownloadRateBPS ( ) { if ( max_download_rate_bps = = UNLIMITED_RATE ) return 0 ; return external_max_download_rate_bps ; }
void test20 ( ) throws Throwable { NetworkManager networkManager0 = NetworkManager . getSingleton ( ) ; MultiPeerUploader multiPeerUploader0 = new MultiPeerUploader ( ( RateHandler ) null ) ; networkManager0 . removeReadEntity ( ( RateControlledEntity ) multiPeerUploader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) ; / * * * Is this a no - delay message . * No - delay messages are transmitted immediately , * i . e . force - flushed out the transport . * @return true if a no - delay message * / boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test21 ( ) throws Throwable { NetworkManager networkManager0 = NetworkManager . getSingleton ( ) ; networkManager0 . stopTransferProcessing ( ( NetworkConnectionBase ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void stopTransferProcessing ( NetworkConnectionBase peer_connection ) { if ( lan_upload_processor . isRegistered ( peer_connection ) ) { lan_upload_processor . deregisterPeerConnection ( peer_connection ) ; lan_download_processor . deregisterPeerConnection ( peer_connection ) ; } else { upload_processor . deregisterPeerConnection ( peer_connection ) ; download_processor . deregisterPeerConnection ( peer_connection ) ; } }
void test22 ( ) throws Throwable { NetworkManager networkManager0 = NetworkManager . getSingleton ( ) ; AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 0 ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 8 ] [ 7 ] ; NetworkConnectionImpl networkConnectionImpl0 = ( NetworkConnectionImpl ) networkManager0 . createConnection ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) aZMessageDecoder0 , true , true , byteArray0 ) ; networkManager0 . upgradeTransferProcessing ( ( NetworkConnectionBase ) networkConnectionImpl0 , ( int ) ( byte ) ( - 101 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test23 ( ) throws Throwable { NetworkManager networkManager0 = NetworkManager . getSingleton ( ) ; networkManager0 . downgradeTransferProcessing ( ( NetworkConnectionBase ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxUploadRateBPSSeedingOnly ( ) { if ( max_upload_rate_bps_seeding_only = = UNLIMITED_RATE ) return 0 ; return max_upload_rate_bps_seeding_only ; }
void test24 ( ) throws Throwable { NetworkManager networkManager0 = NetworkManager . getSingleton ( ) ; networkManager0 . addRateLimiter ( ( NetworkConnectionBase ) null , ( LimitedRateGroup ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxDownloadRateBPS ( ) { if ( max_download_rate_bps = = UNLIMITED_RATE ) return 0 ; return external_max_download_rate_bps ; }
void test25 ( ) throws Throwable { NetworkManager networkManager0 = NetworkManager . getSingleton ( ) ; networkManager0 . removeRateLimiter ( ( NetworkConnectionBase ) null , ( LimitedRateGroup ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinMssSize ( ) { return Math . min ( TCPNetworkManager . getTcpMssSize ( ) , UDPNetworkManager . getUdpMssSize ( ) ) ; }
void test26 ( ) throws Throwable { NetworkManager networkManager0 = NetworkManager . getSingleton ( ) ; RateHandler rateHandler0 = networkManager0 . getRateHandler ( false , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentNumBytesAllowed ( ) ; / * * * Notification of any bytes processed by the entity . * @param num_bytes_processed * / void bytesProcessed ( int num_bytes_processed ) ; }
void test27 ( ) throws Throwable { NetworkManager networkManager0 = NetworkManager . getSingleton ( ) ; RateHandler rateHandler0 = networkManager0 . getRateHandler ( true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentNumBytesAllowed ( ) ; / * * * Notification of any bytes processed by the entity . * @param num_bytes_processed * / void bytesProcessed ( int num_bytes_processed ) ; }
void test1 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 6 ] [ 1 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , false , byteArray0 ) ; tCPTransportImpl0 . setTrace ( true ) ; tCPTransportImpl0 . setFilter ( ( TransportHelperFilter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test2 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 4 ] [ 2 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , true , byteArray0 ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) null , ( MessageStreamDecoder ) aZMessageDecoder0 , false , false , byteArray0 ) ; tCPTransportImpl0 . unbindConnection ( ( NetworkConnection ) networkConnectionImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test3 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 10 ] [ 2 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , false , true , byteArray0 ) ; tCPTransportImpl0 . connectedInbound ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMssSize ( ) ; / * * * Inject the given already - read data back into the read stream . * @param bytes_already_read data * / void setAlreadyRead ( ByteBuffer bytes_already_read ) ; / * * * Get the socket channel used by the transport . * @return the socket channel * / TransportEndpoint getTransportEndpoint ( ) ; boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test5 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 10 ] [ 2 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , false , true , byteArray0 ) ; tCPTransportImpl0 . close ( "Ktc5_EEaHB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test6 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 9 ] [ 10 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , false , byteArray0 ) ; BTMessageEncoder bTMessageEncoder0 = new BTMessageEncoder ( ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) bTMessageEncoder0 , ( MessageStreamDecoder ) aZMessageDecoder0 , false , true , byteArray0 ) ; tCPTransportImpl0 . bindConnection ( ( NetworkConnection ) networkConnectionImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTCP ( ) ; / * * * Get a textual description for this transport . * @return description * / String getDescription ( ) ; }
void test7 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 10 ] [ 2 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , false , true , byteArray0 ) ; tCPTransportImpl0 . connectedOutbound ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test8 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 4 ] [ 4 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , false , true , byteArray0 ) ; tCPTransportImpl0 . setAlreadyRead ( ( ByteBuffer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test9 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 6 ] [ 1 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , false , byteArray0 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) ( - 1 ) , ( byte ) 109 ) ; ByteBuffer byteBuffer0 = directByteBuffer0 . getBuffer ( ( byte ) ( - 39 ) ) ; tCPTransportImpl0 . setAlreadyRead ( byteBuffer0 ) ; tCPTransportImpl0 . setAlreadyRead ( byteBuffer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasRemaining ( byte subsystem ) { if ( TRACE ) { traceUsage ( subsystem , OP_HASREMAINING ) ; } return ( buffer . hasRemaining ( ) ) ; }
void test10 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 1 ] [ 6 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , true , byteArray0 ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; ByteBuffer byteBuffer0 = bTMessageDecoder0 . destroy ( ) ; tCPTransportImpl0 . setAlreadyRead ( byteBuffer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTCP ( ) ; / * * * Get a textual description for this transport . * @return description * / String getDescription ( ) ; }
void test12 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 9 ] [ 10 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , false , byteArray0 ) ; String string0 = tCPTransportImpl0 . getEncryption ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test13 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 8 ] [ 3 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , true , byteArray0 ) ; boolean boolean0 = tCPTransportImpl0 . isEncrypted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test14 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 9 ] [ 10 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , false , byteArray0 ) ; boolean boolean0 = tCPTransportImpl0 . isReadyForWrite ( ( EventWaiter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReadyForWrite ( EventWaiter waiter ) ; / * * * Is the transport ready to read , * i . e . will a read request result in > 0 bytes read . * @return 0 if the transport is read ready , ms since last ready or created if never ready * / long isReadyForRead ( EventWaiter waiter ) ; boolean isTCP ( ) ; / * * * Get a textual description for this transport . * @return description * / String getDescription ( ) ; }
void test15 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 6 ] [ 1 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , false , byteArray0 ) ; EventWaiter eventWaiter0 = new EventWaiter ( ) ; tCPTransportImpl0 . isReadyForWrite ( eventWaiter0 ) ; boolean boolean0 = tCPTransportImpl0 . readyForWrite ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean readyForWrite ( boolean ready ) { if ( trace ) { TimeFormatter . milliTrace ( "trans : readyForWrite - > " + ready ) ; } if ( ready ) { boolean progress = ! is_ready_for_write ; is_ready_for_write = true ; EventWaiter ww = write_waiter ; if ( ww ! = null ) { ww . eventOccurred ( ) ; } return progress ; } else { is_ready_for_write = false ; return ( false ) ; } }
void test16 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 6 ] [ 1 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , false , byteArray0 ) ; tCPTransportImpl0 . setTrace ( true ) ; boolean boolean0 = tCPTransportImpl0 . readyForWrite ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean readyForWrite ( boolean ready ) { if ( trace ) { TimeFormatter . milliTrace ( "trans : readyForWrite - > " + ready ) ; } if ( ready ) { boolean progress = ! is_ready_for_write ; is_ready_for_write = true ; EventWaiter ww = write_waiter ; if ( ww ! = null ) { ww . eventOccurred ( ) ; } return progress ; } else { is_ready_for_write = false ; return ( false ) ; } }
void test17 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 6 ] [ 1 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , false , byteArray0 ) ; boolean boolean0 = tCPTransportImpl0 . readyForWrite ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean readyForWrite ( boolean ready ) { if ( trace ) { TimeFormatter . milliTrace ( "trans : readyForWrite - > " + ready ) ; } if ( ready ) { boolean progress = ! is_ready_for_write ; is_ready_for_write = true ; EventWaiter ww = write_waiter ; if ( ww ! = null ) { ww . eventOccurred ( ) ; } return progress ; } else { is_ready_for_write = false ; return ( false ) ; } }
void test18 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 4 ] [ 4 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , false , true , byteArray0 ) ; long long0 = tCPTransportImpl0 . isReadyForRead ( ( EventWaiter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long isReadyForRead ( EventWaiter waiter ) ; boolean isTCP ( ) ; / * * * Get a textual description for this transport . * @return description * / String getDescription ( ) ; }
void test19 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 8 ] [ 3 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , true , byteArray0 ) ; EventWaiter eventWaiter0 = new EventWaiter ( ) ; tCPTransportImpl0 . isReadyForRead ( eventWaiter0 ) ; tCPTransportImpl0 . setReadyForRead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test20 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 8 ] [ 3 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , true , byteArray0 ) ; EventWaiter eventWaiter0 = new EventWaiter ( ) ; tCPTransportImpl0 . setReadyForRead ( ) ; long long0 = tCPTransportImpl0 . isReadyForRead ( eventWaiter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long isReadyForRead ( EventWaiter waiter ) ; boolean isTCP ( ) ; / * * * Get a textual description for this transport . * @return description * / String getDescription ( ) ; }
void test21 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 6 ] [ 1 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , false , byteArray0 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 9 , ( byte ) 109 ) ; ByteBuffer byteBuffer0 = directByteBuffer0 . getBuffer ( ( byte ) 1 ) ; tCPTransportImpl0 . setAlreadyRead ( byteBuffer0 ) ; tCPTransportImpl0 . setReadyForRead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test22 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 4 ] [ 2 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , true , byteArray0 ) ; ByteBuffer [ ] byteBufferArray0 = new ByteBuffer [ 2 ] ; long long0 = tCPTransportImpl0 . write ( byteBufferArray0 , 0 , 49 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test1 ( ) throws Throwable { TransportHelperFilterStreamCipher transportHelperFilterStreamCipher0 = new TransportHelperFilterStreamCipher ( ( TransportHelper ) null , ( TransportCipher ) null , ( TransportCipher ) null ) ; boolean boolean0 = transportHelperFilterStreamCipher0 . isEncrypted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test2 ( ) throws Throwable { BTMessageEncoder bTMessageEncoder0 = new BTMessageEncoder ( ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 6 ] [ 7 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) bTMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , true , true , byteArray0 ) ; EntityHandler entityHandler0 = new EntityHandler ( 0 , ( RateHandler ) null ) ; entityHandler0 . registerPeerConnection ( ( NetworkConnectionBase ) networkConnectionImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getDownloadLimit ( ) { if ( dirty ) feedForward ( ) ; return ( long ) ( 1 . 2 * maxDlSpeed * neuralNetwork . getOutput ( 1 ) ) ; }
void test9 ( ) throws Throwable { EntityHandler entityHandler0 = new EntityHandler ( ( - 806 ) , ( RateHandler ) null ) ; RateHandler rateHandler0 = entityHandler0 . getRateHandler ( ( NetworkConnectionBase ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RateHandler getRateHandler ( boolean upload , boolean lan ) { if ( upload ) { if ( lan ) { return ( lan_upload_processor . getRateHandler ( ) ) ; } else { return ( upload_processor . getRateHandler ( ) ) ; } } else { if ( lan ) { return ( lan_download_processor . getRateHandler ( ) ) ; } else { return ( download_processor . getRateHandler ( ) ) ; } } }
void test10 ( ) throws Throwable { EntityHandler entityHandler0 = new EntityHandler ( 0 , ( RateHandler ) null ) ; RateHandler rateHandler0 = entityHandler0 . getRateHandler ( ( NetworkConnectionBase ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RateHandler getRateHandler ( boolean upload , boolean lan ) { if ( upload ) { if ( lan ) { return ( lan_upload_processor . getRateHandler ( ) ) ; } else { return ( upload_processor . getRateHandler ( ) ) ; } } else { if ( lan ) { return ( lan_download_processor . getRateHandler ( ) ) ; } else { return ( download_processor . getRateHandler ( ) ) ; } } }
void test0 ( ) throws Throwable { ByteBucketST byteBucketST0 = new ByteBucketST ( 1602 ) ; byteBucketST0 . setRate ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBurstRate ( ) { return burst_rate ; }
void test1 ( ) throws Throwable { ByteBucketST byteBucketST0 = new ByteBucketST ( ( - 1922 ) ) ; int int0 = byteBucketST0 . getRate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBurstRate ( ) { return burst_rate ; }
void test2 ( ) throws Throwable { ByteBucketST byteBucketST0 = new ByteBucketST ( ( - 1922 ) ) ; int int0 = byteBucketST0 . getBurstRate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRate ( ) { return rate ; }
void test3 ( ) throws Throwable { ByteBucketST byteBucketST0 = new ByteBucketST ( ( - 1922 ) ) ; int int0 = byteBucketST0 . getAvailableByteCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBurstRate ( ) { return burst_rate ; }
void test4 ( ) throws Throwable { ByteBucketST byteBucketST0 = new ByteBucketST ( ( - 1922 ) ) ; byteBucketST0 . setBytesUsed ( ( - 1922 ) ) ; byteBucketST0 . setRate ( ( - 1922 ) , ( - 1922 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRate ( ) { return rate ; }
void test5 ( ) throws Throwable { ByteBucketST byteBucketST0 = new ByteBucketST ( 28 ) ; byteBucketST0 . setBytesUsed ( 28 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRate ( ) { return rate ; }
void test6 ( ) throws Throwable { ByteBucketST byteBucketST0 = new ByteBucketST ( ( - 1922 ) ) ; byteBucketST0 . setRate ( ( - 1922 ) , ( - 1922 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRate ( ) { return rate ; }
void test7 ( ) throws Throwable { ByteBucketST byteBucketST0 = new ByteBucketST ( ( - 1922 ) ) ; byteBucketST0 . setFrozen ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAvailableByteCount ( ) { if ( avail_bytes < NetworkManager . UNLIMITED_RATE ) { update_avail_byte_count ( ) ; } int res = ( int ) avail_bytes ; if ( res < 0 ) { res = 0 ; } return ( res ) ; }
void test8 ( ) throws Throwable { ByteBucketST byteBucketST0 = new ByteBucketST ( 1602 ) ; byteBucketST0 . setFrozen ( true ) ; byteBucketST0 . setFrozen ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAvailableByteCount ( ) { if ( avail_bytes < NetworkManager . UNLIMITED_RATE ) { update_avail_byte_count ( ) ; } int res = ( int ) avail_bytes ; if ( res < 0 ) { res = 0 ; } return ( res ) ; }
void test9 ( ) throws Throwable { ByteBucketST byteBucketST0 = new ByteBucketST ( 1602 ) ; byteBucketST0 . setFrozen ( true ) ; int int0 = byteBucketST0 . getAvailableByteCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBurstRate ( ) { return burst_rate ; }
void test10 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; ByteBuffer byteBuffer0 = bTMessageDecoder0 . destroy ( ) ; TransportHelperFilterSwitcher transportHelperFilterSwitcher0 = new TransportHelperFilterSwitcher ( ( TransportHelperFilter ) null , ( TransportHelperFilter ) null , byteBuffer0 ) ; boolean boolean0 = transportHelperFilterSwitcher0 . hasBufferedRead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBufferedRead ( ) { return ( read_insert ! = null & & read_insert . remaining ( ) > 0 ) ; }
void test11 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; ByteBuffer byteBuffer0 = bTMessageDecoder0 . destroy ( ) ; TransportHelperFilterInserter transportHelperFilterInserter0 = new TransportHelperFilterInserter ( ( TransportHelperFilter ) null , byteBuffer0 ) ; TransportHelperFilterSwitcher transportHelperFilterSwitcher0 = new TransportHelperFilterSwitcher ( ( TransportHelperFilter ) transportHelperFilterInserter0 , ( TransportHelperFilter ) transportHelperFilterInserter0 , ( - 340 ) , ( - 340 ) ) ; boolean boolean0 = transportHelperFilterSwitcher0 . hasBufferedRead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBufferedRead ( ) { return ( read_insert ! = null & & read_insert . remaining ( ) > 0 ) ; }
void test12 ( ) throws Throwable { TransportHelperFilterStreamCipher transportHelperFilterStreamCipher0 = new TransportHelperFilterStreamCipher ( ( TransportHelper ) null , ( TransportCipher ) null , ( TransportCipher ) null ) ; TransportHelperFilterSwitcher transportHelperFilterSwitcher0 = new TransportHelperFilterSwitcher ( ( TransportHelperFilter ) transportHelperFilterStreamCipher0 , ( TransportHelperFilter ) transportHelperFilterStreamCipher0 , 0 , 0 ) ; boolean boolean0 = transportHelperFilterSwitcher0 . hasBufferedRead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBufferedRead ( ) { return ( read_insert ! = null & & read_insert . remaining ( ) > 0 ) ; }
void test13 ( ) throws Throwable { TransportHelperFilterStreamCipher transportHelperFilterStreamCipher0 = new TransportHelperFilterStreamCipher ( ( TransportHelper ) null , ( TransportCipher ) null , ( TransportCipher ) null ) ; TransportHelperFilterSwitcher transportHelperFilterSwitcher0 = new TransportHelperFilterSwitcher ( ( TransportHelperFilter ) transportHelperFilterStreamCipher0 , ( TransportHelperFilter ) transportHelperFilterStreamCipher0 , 0 , 0 ) ; boolean boolean0 = transportHelperFilterSwitcher0 . isEncrypted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test14 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , false ) ; TransportHelperFilterSwitcher transportHelperFilterSwitcher0 = new TransportHelperFilterSwitcher ( ( TransportHelperFilter ) transportHelperFilterTransparent0 , ( TransportHelperFilter ) transportHelperFilterTransparent0 , 529 , 529 ) ; boolean boolean0 = transportHelperFilterSwitcher0 . isEncrypted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test0 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; transportHelperFilterTransparent0 . setTrace ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBufferedRead ( ) { return ( read_insert ! = null & & read_insert . remaining ( ) > 0 ) ; }
void test1 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; String string0 = transportHelperFilterTransparent0 . getName ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test2 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; boolean boolean0 = transportHelperFilterTransparent0 . hasBufferedWrite ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBufferedWrite ( ) { return ( transport . hasDelayedWrite ( ) ) ; }
void test3 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; ByteBuffer byteBuffer0 = bTMessageDecoder0 . destroy ( ) ; transportHelperFilterTransparent0 . insertRead ( byteBuffer0 ) ; boolean boolean0 = transportHelperFilterTransparent0 . hasBufferedRead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBufferedRead ( ) { return ( read_insert ! = null & & read_insert . remaining ( ) > 0 ) ; }
void test4 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; ByteBuffer byteBuffer0 = bTMessageDecoder0 . destroy ( ) ; int int0 = transportHelperFilterTransparent0 . write ( byteBuffer0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test5 ( ) throws Throwable { TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) null , true ) ; boolean boolean0 = transportHelperFilterTransparent0 . isEncrypted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test6 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; ByteBuffer [ ] byteBufferArray0 = new ByteBuffer [ 8 ] ; long long0 = transportHelperFilterTransparent0 . write ( byteBufferArray0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test7 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; boolean boolean0 = transportHelperFilterTransparent0 . hasBufferedRead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBufferedRead ( ) { return ( read_insert ! = null & & read_insert . remaining ( ) > 0 ) ; }
void test8 ( ) throws Throwable { TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) null , true ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) ( - 15 ) , 1864 ) ; ByteBuffer byteBuffer0 = directByteBuffer0 . getBuffer ( ( byte ) ( - 15 ) ) ; transportHelperFilterTransparent0 . insertRead ( byteBuffer0 ) ; boolean boolean0 = transportHelperFilterTransparent0 . hasBufferedRead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBufferedRead ( ) { return ( read_insert ! = null & & read_insert . remaining ( ) > 0 ) ; }
void test9 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; ByteBuffer [ ] byteBufferArray0 = new ByteBuffer [ 8 ] ; long long0 = transportHelperFilterTransparent0 . read ( byteBufferArray0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test10 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; ByteBuffer byteBuffer0 = bTMessageDecoder0 . destroy ( ) ; transportHelperFilterTransparent0 . insertRead ( byteBuffer0 ) ; int int0 = transportHelperFilterTransparent0 . read ( byteBuffer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test12 ( ) throws Throwable { TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) null , true ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) ( - 15 ) , 1864 ) ; ByteBuffer [ ] byteBufferArray0 = new ByteBuffer [ 5 ] ; ByteBuffer byteBuffer0 = directByteBuffer0 . getBuffer ( ( byte ) ( - 15 ) ) ; transportHelperFilterTransparent0 . insertRead ( byteBuffer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test13 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; ByteBuffer byteBuffer0 = bTMessageDecoder0 . destroy ( ) ; int int0 = transportHelperFilterTransparent0 . read ( byteBuffer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test14 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; String string0 = transportHelperFilterTransparent0 . getName ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test15 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , false ) ; String string0 = transportHelperFilterTransparent0 . getName ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test0 ( ) throws Throwable { MultiPeerDownloader2 . connectionList multiPeerDownloader2_connectionList0 = new MultiPeerDownloader2 . connectionList ( ) ; MultiPeerDownloader2 . connectionEntry multiPeerDownloader2_connectionEntry0 = multiPeerDownloader2_connectionList0 . head ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MultiPeerDownloader2 ( RateHandler _main_handler ) { main_handler = _main_handler ; }
void test1 ( ) throws Throwable { MultiPeerDownloader2 multiPeerDownloader2_0 = new MultiPeerDownloader2 ( ( RateHandler ) null ) ; long long0 = multiPeerDownloader2_0 . getBytesReadyToWrite ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBytesReadyToWrite ( ) { long total = 0 ; try { lists_lock . enter ( ) ; for ( Iterator i = waiting_connections . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) { NetworkConnectionBase conn = ( NetworkConnectionBase ) i . next ( ) ; total + = conn . getOutgoingMessageQueue ( ) . getTotalSize ( ) ; } for ( Iterator i = ready_connections . iterator ( ) ; i . hasNext ( ) ; ) { NetworkConnectionBase conn = ( NetworkConnectionBase ) i . next ( ) ; total + = conn . getOutgoingMessageQueue ( ) . getTotalSize ( ) ; } } finally { lists_lock . exit ( ) ; } return ( total ) ; }
void test2 ( ) throws Throwable { MultiPeerDownloader2 multiPeerDownloader2_0 = new MultiPeerDownloader2 ( ( RateHandler ) null ) ; int int0 = multiPeerDownloader2_0 . getPriority ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) ; / * * * Is this a no - delay message . * No - delay messages are transmitted immediately , * i . e . force - flushed out the transport . * @return true if a no - delay message * / boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test3 ( ) throws Throwable { MultiPeerDownloader2 multiPeerDownloader2_0 = new MultiPeerDownloader2 ( ( RateHandler ) null ) ; boolean boolean0 = multiPeerDownloader2_0 . getPriorityBoost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test4 ( ) throws Throwable { MultiPeerDownloader2 multiPeerDownloader2_0 = new MultiPeerDownloader2 ( ( RateHandler ) null ) ; RateHandler rateHandler0 = multiPeerDownloader2_0 . getRateHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RateHandler getRateHandler ( boolean upload , boolean lan ) { if ( upload ) { if ( lan ) { return ( lan_upload_processor . getRateHandler ( ) ) ; } else { return ( upload_processor . getRateHandler ( ) ) ; } } else { if ( lan ) { return ( lan_download_processor . getRateHandler ( ) ) ; } else { return ( download_processor . getRateHandler ( ) ) ; } } }
void test5 ( ) throws Throwable { MultiPeerDownloader2 multiPeerDownloader2_0 = new MultiPeerDownloader2 ( ( RateHandler ) null ) ; int int0 = multiPeerDownloader2_0 . getConnectionCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionCount ( ) { return ( waiting_connections . size ( ) + ready_connections . size ( ) ) ; }
void test6 ( ) throws Throwable { MultiPeerDownloader2 multiPeerDownloader2_0 = new MultiPeerDownloader2 ( ( RateHandler ) null ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( ( InetSocketAddress ) null ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 1 ] [ 7 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( connectionEndpoint0 , ( MessageStreamEncoder ) null , ( MessageStreamDecoder ) aZMessageDecoder0 , false , true , byteArray0 ) ; multiPeerDownloader2_0 . addPeerConnection ( ( NetworkConnectionBase ) networkConnectionImpl0 ) ; multiPeerDownloader2_0 . addPeerConnection ( ( NetworkConnectionBase ) networkConnectionImpl0 ) ; String string0 = multiPeerDownloader2_0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionCount ( ) { return ( waiting_connections . size ( ) + ready_connections . size ( ) ) ; }
void test7 ( ) throws Throwable { MultiPeerDownloader2 multiPeerDownloader2_0 = new MultiPeerDownloader2 ( ( RateHandler ) null ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( ( InetSocketAddress ) null ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 1 ] [ 7 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( connectionEndpoint0 , ( MessageStreamEncoder ) null , ( MessageStreamDecoder ) aZMessageDecoder0 , false , true , byteArray0 ) ; multiPeerDownloader2_0 . addPeerConnection ( ( NetworkConnectionBase ) networkConnectionImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removePeerConnection ( NetworkConnectionBase peer_connection ) { try { lists_lock . enter ( ) ; / / look for the connection in the waiting list and cancel listener if found PeerData peer_data = ( PeerData ) waiting_connections . remove ( peer_connection ) ; if ( peer_data ! = null ) { peer_connection . getOutgoingMessageQueue ( ) . cancelQueueListener ( peer_data . queue_listener ) ; return true ; } / / look for the connection in the ready list if ( ready_connections . remove ( peer_connection ) ) { return true ; } return false ; } finally { lists_lock . exit ( ) ; } }
void test8 ( ) throws Throwable { MultiPeerDownloader2 multiPeerDownloader2_0 = new MultiPeerDownloader2 ( ( RateHandler ) null ) ; boolean boolean0 = multiPeerDownloader2_0 . removePeerConnection ( ( NetworkConnectionBase ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removePeerConnection ( NetworkConnectionBase peer_connection ) { try { lists_lock . enter ( ) ; / / look for the connection in the waiting list and cancel listener if found PeerData peer_data = ( PeerData ) waiting_connections . remove ( peer_connection ) ; if ( peer_data ! = null ) { peer_connection . getOutgoingMessageQueue ( ) . cancelQueueListener ( peer_data . queue_listener ) ; return true ; } / / look for the connection in the ready list if ( ready_connections . remove ( peer_connection ) ) { return true ; } return false ; } finally { lists_lock . exit ( ) ; } }
void test9 ( ) throws Throwable { MultiPeerDownloader2 multiPeerDownloader2_0 = new MultiPeerDownloader2 ( ( RateHandler ) null ) ; EventWaiter eventWaiter0 = new EventWaiter ( ) ; int int0 = multiPeerDownloader2_0 . getReadyConnectionCount ( eventWaiter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReadyConnectionCount ( EventWaiter waiter ) { int total = 0 ; try { lists_lock . enter ( ) ; for ( Iterator i = waiting_connections . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) { NetworkConnectionBase conn = ( NetworkConnectionBase ) i . next ( ) ; if ( conn . getTransportBase ( ) . isReadyForWrite ( waiter ) ) { total + + ; } } for ( Iterator i = ready_connections . iterator ( ) ; i . hasNext ( ) ; ) { NetworkConnectionBase conn = ( NetworkConnectionBase ) i . next ( ) ; if ( conn . getTransportBase ( ) . isReadyForWrite ( waiter ) ) { total + + ; } } } finally { lists_lock . exit ( ) ; } return ( total ) ; }
void test11 ( ) throws Throwable { MultiPeerDownloader2 multiPeerDownloader2_0 = new MultiPeerDownloader2 ( ( RateHandler ) null ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( ( InetSocketAddress ) null ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 1 ] [ 7 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( connectionEndpoint0 , ( MessageStreamEncoder ) null , ( MessageStreamDecoder ) aZMessageDecoder0 , false , true , byteArray0 ) ; multiPeerDownloader2_0 . addPeerConnection ( ( NetworkConnectionBase ) networkConnectionImpl0 ) ; String string0 = multiPeerDownloader2_0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionCount ( ) { return ( waiting_connections . size ( ) + ready_connections . size ( ) ) ; }
void test13 ( ) throws Throwable { MultiPeerDownloader2 . connectionList multiPeerDownloader2_connectionList0 = new MultiPeerDownloader2 . connectionList ( ) ; multiPeerDownloader2_connectionList0 . add ( ( NetworkConnectionBase ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test14 ( ) throws Throwable { MultiPeerDownloader2 . connectionList multiPeerDownloader2_connectionList0 = new MultiPeerDownloader2 . connectionList ( ) ; BTMessageEncoder bTMessageEncoder0 = new BTMessageEncoder ( ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 7 ] [ 7 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) bTMessageEncoder0 , ( MessageStreamDecoder ) aZMessageDecoder0 , true , true , byteArray0 ) ; MultiPeerDownloader2 . connectionEntry multiPeerDownloader2_connectionEntry0 = new MultiPeerDownloader2 . connectionEntry ( ( NetworkConnectionBase ) networkConnectionImpl0 ) ; multiPeerDownloader2_connectionList0 . addToStart ( multiPeerDownloader2_connectionEntry0 ) ; multiPeerDownloader2_connectionList0 . addToEnd ( multiPeerDownloader2_connectionEntry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test15 ( ) throws Throwable { MultiPeerDownloader2 . connectionList multiPeerDownloader2_connectionList0 = new MultiPeerDownloader2 . connectionList ( ) ; MultiPeerDownloader2 . connectionEntry multiPeerDownloader2_connectionEntry0 = new MultiPeerDownloader2 . connectionEntry ( ( NetworkConnectionBase ) null ) ; multiPeerDownloader2_connectionList0 . addToEnd ( multiPeerDownloader2_connectionEntry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test16 ( ) throws Throwable { MultiPeerDownloader2 . connectionList multiPeerDownloader2_connectionList0 = new MultiPeerDownloader2 . connectionList ( ) ; BTMessageEncoder bTMessageEncoder0 = new BTMessageEncoder ( ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 7 ] [ 7 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) bTMessageEncoder0 , ( MessageStreamDecoder ) aZMessageDecoder0 , true , true , byteArray0 ) ; MultiPeerDownloader2 . connectionEntry multiPeerDownloader2_connectionEntry0 = new MultiPeerDownloader2 . connectionEntry ( ( NetworkConnectionBase ) networkConnectionImpl0 ) ; multiPeerDownloader2_connectionList0 . addToStart ( multiPeerDownloader2_connectionEntry0 ) ; multiPeerDownloader2_connectionList0 . moveToEnd ( multiPeerDownloader2_connectionEntry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test19 ( ) throws Throwable { MultiPeerDownloader2 . connectionList multiPeerDownloader2_connectionList0 = new MultiPeerDownloader2 . connectionList ( ) ; MultiPeerDownloader2 . connectionEntry multiPeerDownloader2_connectionEntry0 = new MultiPeerDownloader2 . connectionEntry ( ( NetworkConnectionBase ) null ) ; multiPeerDownloader2_connectionList0 . addToStart ( multiPeerDownloader2_connectionEntry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test20 ( ) throws Throwable { MultiPeerDownloader2 . connectionList multiPeerDownloader2_connectionList0 = new MultiPeerDownloader2 . connectionList ( ) ; BTMessageEncoder bTMessageEncoder0 = new BTMessageEncoder ( ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 7 ] [ 7 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) bTMessageEncoder0 , ( MessageStreamDecoder ) aZMessageDecoder0 , true , true , byteArray0 ) ; MultiPeerDownloader2 . connectionEntry multiPeerDownloader2_connectionEntry0 = new MultiPeerDownloader2 . connectionEntry ( ( NetworkConnectionBase ) networkConnectionImpl0 ) ; multiPeerDownloader2_connectionList0 . addToStart ( multiPeerDownloader2_connectionEntry0 ) ; MultiPeerDownloader2 . connectionEntry multiPeerDownloader2_connectionEntry1 = new MultiPeerDownloader2 . connectionEntry ( ( NetworkConnectionBase ) null ) ; multiPeerDownloader2_connectionList0 . addToStart ( multiPeerDownloader2_connectionEntry1 ) ; multiPeerDownloader2_connectionList0 . remove ( ( NetworkConnectionBase ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test0 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; byte [ ] byteArray0 = new byte [ 10 ] ; TransportHelperFilterStreamXOR transportHelperFilterStreamXOR0 = new TransportHelperFilterStreamXOR ( ( TransportHelper ) tCPTransportHelper0 , byteArray0 ) ; String string0 = transportHelperFilterStreamXOR0 . getName ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; TransportHelperFilterStreamXOR transportHelperFilterStreamXOR0 = new TransportHelperFilterStreamXOR ( ( TransportHelper ) null , byteArray0 ) ; boolean boolean0 = transportHelperFilterStreamXOR0 . isEncrypted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; TransportHelperFilterStreamXOR transportHelperFilterStreamXOR0 = new TransportHelperFilterStreamXOR ( ( TransportHelper ) null , byteArray0 ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; ByteBuffer byteBuffer0 = bTMessageDecoder0 . destroy ( ) ; transportHelperFilterStreamXOR0 . cryptoOut ( byteBuffer0 , byteBuffer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void cryptoOut ( ByteBuffer source_buffer , ByteBuffer target_buffer ) throws IOException { int rem = source_buffer . remaining ( ) ; for ( int i = 0 ; i < rem ; i + + ) { byte b = source_buffer . get ( ) ; b = ( byte ) ( b ^ mask [ write_position + + ] ) ; target_buffer . put ( b ) ; if ( write_position = = mask . length ) { write_position = 0 ; } } }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; TransportHelperFilterStreamXOR transportHelperFilterStreamXOR0 = new TransportHelperFilterStreamXOR ( ( TransportHelper ) null , byteArray0 ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; ByteBuffer byteBuffer0 = bTMessageDecoder0 . destroy ( ) ; transportHelperFilterStreamXOR0 . cryptoIn ( byteBuffer0 , byteBuffer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void cryptoIn ( ByteBuffer source_buffer , ByteBuffer target_buffer ) throws IOException { int rem = source_buffer . remaining ( ) ; for ( int i = 0 ; i < rem ; i + + ) { byte b = source_buffer . get ( ) ; b = ( byte ) ( b ^ mask [ read_position + + ] ) ; target_buffer . put ( b ) ; if ( read_position = = mask . length ) { read_position = 0 ; } } }
void test6 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; byte [ ] byteArray0 = new byte [ 3 ] ; TransportHelperFilterStreamXOR transportHelperFilterStreamXOR0 = new TransportHelperFilterStreamXOR ( ( TransportHelper ) tCPTransportHelper0 , byteArray0 ) ; String string0 = transportHelperFilterStreamXOR0 . getName ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test2 ( ) throws Throwable { TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) null , false ) ; TransportHelperFilterInserter transportHelperFilterInserter0 = new TransportHelperFilterInserter ( ( TransportHelperFilter ) transportHelperFilterTransparent0 , ( ByteBuffer ) null ) ; TransportHelper transportHelper0 = transportHelperFilterInserter0 . getHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TransportHelper getHelper ( ) { return ( transport ) ; }
void test10 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 91 , ( byte ) 91 ) ; ByteBuffer byteBuffer0 = directByteBuffer0 . getBuffer ( ( byte ) 91 ) ; TransportHelperFilterInserter transportHelperFilterInserter0 = new TransportHelperFilterInserter ( ( TransportHelperFilter ) null , byteBuffer0 ) ; ByteBuffer [ ] byteBufferArray0 = new ByteBuffer [ 4 ] ; long long0 = transportHelperFilterInserter0 . read ( byteBufferArray0 , ( int ) ( byte ) 91 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test11 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; ByteBuffer byteBuffer0 = bTMessageDecoder0 . destroy ( ) ; TransportHelperFilterInserter transportHelperFilterInserter0 = new TransportHelperFilterInserter ( ( TransportHelperFilter ) null , byteBuffer0 ) ; TransportHelperFilterInserter transportHelperFilterInserter1 = new TransportHelperFilterInserter ( ( TransportHelperFilter ) transportHelperFilterInserter0 , ( ByteBuffer ) null ) ; boolean boolean0 = transportHelperFilterInserter1 . hasBufferedRead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBufferedRead ( ) { return ( read_insert ! = null & & read_insert . remaining ( ) > 0 ) ; }
void test12 ( ) throws Throwable { TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) null , false ) ; TransportHelperFilterInserter transportHelperFilterInserter0 = new TransportHelperFilterInserter ( ( TransportHelperFilter ) transportHelperFilterTransparent0 , ( ByteBuffer ) null ) ; boolean boolean0 = transportHelperFilterInserter0 . hasBufferedRead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBufferedRead ( ) { return ( read_insert ! = null & & read_insert . remaining ( ) > 0 ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; SecretKeySpec secretKeySpec0 = new SecretKeySpec ( byteArray0 , "RC4" ) ; TransportCipher transportCipher0 = new TransportCipher ( "RC4" , 1 , secretKeySpec0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void update ( SubscriptionItemModel subscriptionItem , long popularity , String text ) { subscriptionItem . popularity = popularity ; subscriptionItem . popularityDisplay = text ; display . asyncExec ( new Runnable ( ) { void run ( ) { sortAndRefresh ( ) ; } } ) ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; SecretKeySpec secretKeySpec0 = new SecretKeySpec ( byteArray0 , "RC4" ) ; TransportCipher transportCipher0 = new TransportCipher ( "RC4" , 0 , secretKeySpec0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; SecretKeySpec secretKeySpec0 = new SecretKeySpec ( byteArray0 , "RC4" ) ; TransportCipher transportCipher0 = new TransportCipher ( "RC4" , 1 , secretKeySpec0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test0 ( ) throws Throwable { WriteController writeController0 = new WriteController ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEntityCount ( ) { return ( entity_count ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { WriteController writeController0 = new WriteController ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { WriteController writeController0 = new WriteController ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEntityCount ( ) { return ( entity_count ) ; }
void test3 ( ) throws Throwable { WriteController writeController0 = new WriteController ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEntityCount ( ) { return ( entity_count ) ; }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { WriteController writeController0 = new WriteController ( ) ; SinglePeerUploader singlePeerUploader0 = new SinglePeerUploader ( ( NetworkConnectionBase ) null , ( RateHandler ) null ) ; writeController0 . removeWriteEntity ( ( RateControlledEntity ) singlePeerUploader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test5 ( ) throws Throwable { WriteController writeController0 = new WriteController ( ) ; MultiPeerUploader multiPeerUploader0 = new MultiPeerUploader ( ( RateHandler ) null ) ; writeController0 . removeWriteEntity ( ( RateControlledEntity ) multiPeerUploader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBytesReadyToWrite ( ) { long total = 0 ; try { lists_lock . enter ( ) ; for ( Iterator i = waiting_connections . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) { NetworkConnectionBase conn = ( NetworkConnectionBase ) i . next ( ) ; total + = conn . getOutgoingMessageQueue ( ) . getTotalSize ( ) ; } for ( Iterator i = ready_connections . iterator ( ) ; i . hasNext ( ) ; ) { NetworkConnectionBase conn = ( NetworkConnectionBase ) i . next ( ) ; total + = conn . getOutgoingMessageQueue ( ) . getTotalSize ( ) ; } } finally { lists_lock . exit ( ) ; } return ( total ) ; }
void test0 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; IncomingMessageQueueImpl incomingMessageQueueImpl0 = new IncomingMessageQueueImpl ( ( MessageStreamDecoder ) bTMessageDecoder0 , ( NetworkConnection ) null ) ; incomingMessageQueueImpl0 . cancelQueueListener ( ( IncomingMessageQueue . MessageQueueListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test1 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; IncomingMessageQueueImpl incomingMessageQueueImpl0 = new IncomingMessageQueueImpl ( ( MessageStreamDecoder ) aZMessageDecoder0 , ( NetworkConnection ) null ) ; AZMessageDecoder aZMessageDecoder1 = ( AZMessageDecoder ) incomingMessageQueueImpl0 . getDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProtocolBytesDecoded ( ) { return ( protocol_bytes_read ) ; }
void test3 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; IncomingMessageQueueImpl incomingMessageQueueImpl0 = new IncomingMessageQueueImpl ( ( MessageStreamDecoder ) aZMessageDecoder0 , ( NetworkConnection ) null ) ; incomingMessageQueueImpl0 . resumeQueueProcessing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test4 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; IncomingMessageQueueImpl incomingMessageQueueImpl0 = new IncomingMessageQueueImpl ( ( MessageStreamDecoder ) aZMessageDecoder0 , ( NetworkConnection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test5 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; IncomingMessageQueueImpl incomingMessageQueueImpl0 = new IncomingMessageQueueImpl ( ( MessageStreamDecoder ) bTMessageDecoder0 , ( NetworkConnection ) null ) ; incomingMessageQueueImpl0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test8 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; IncomingMessageQueueImpl incomingMessageQueueImpl0 = new IncomingMessageQueueImpl ( ( MessageStreamDecoder ) bTMessageDecoder0 , ( NetworkConnection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test9 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; IncomingMessageQueueImpl incomingMessageQueueImpl0 = new IncomingMessageQueueImpl ( ( MessageStreamDecoder ) bTMessageDecoder0 , ( NetworkConnection ) null ) ; AZMetaData aZMetaData0 = new AZMetaData ( ( int ) ( byte ) ( - 41 ) , ( byte ) ( - 41 ) ) ; incomingMessageQueueImpl0 . notifyOfExternallyReceivedMessage ( ( Message ) aZMetaData0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test0 ( ) throws Throwable { MultiPeerDownloader multiPeerDownloader0 = new MultiPeerDownloader ( ( RateHandler ) null ) ; long long0 = multiPeerDownloader0 . getBytesReadyToWrite ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBytesReadyToWrite ( ) { long total = 0 ; try { lists_lock . enter ( ) ; for ( Iterator i = waiting_connections . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) { NetworkConnectionBase conn = ( NetworkConnectionBase ) i . next ( ) ; total + = conn . getOutgoingMessageQueue ( ) . getTotalSize ( ) ; } for ( Iterator i = ready_connections . iterator ( ) ; i . hasNext ( ) ; ) { NetworkConnectionBase conn = ( NetworkConnectionBase ) i . next ( ) ; total + = conn . getOutgoingMessageQueue ( ) . getTotalSize ( ) ; } } finally { lists_lock . exit ( ) ; } return ( total ) ; }
void test1 ( ) throws Throwable { MultiPeerDownloader multiPeerDownloader0 = new MultiPeerDownloader ( ( RateHandler ) null ) ; int int0 = multiPeerDownloader0 . getPriority ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) ; / * * * Is this a no - delay message . * No - delay messages are transmitted immediately , * i . e . force - flushed out the transport . * @return true if a no - delay message * / boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test2 ( ) throws Throwable { MultiPeerDownloader multiPeerDownloader0 = new MultiPeerDownloader ( ( RateHandler ) null ) ; boolean boolean0 = multiPeerDownloader0 . getPriorityBoost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test3 ( ) throws Throwable { MultiPeerDownloader multiPeerDownloader0 = new MultiPeerDownloader ( ( RateHandler ) null ) ; int int0 = multiPeerDownloader0 . getConnectionCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionCount ( ) { return ( waiting_connections . size ( ) + ready_connections . size ( ) ) ; }
void test4 ( ) throws Throwable { MultiPeerDownloader multiPeerDownloader0 = new MultiPeerDownloader ( ( RateHandler ) null ) ; RateHandler rateHandler0 = multiPeerDownloader0 . getRateHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RateHandler getRateHandler ( boolean upload , boolean lan ) { if ( upload ) { if ( lan ) { return ( lan_upload_processor . getRateHandler ( ) ) ; } else { return ( upload_processor . getRateHandler ( ) ) ; } } else { if ( lan ) { return ( lan_download_processor . getRateHandler ( ) ) ; } else { return ( download_processor . getRateHandler ( ) ) ; } } }
void test5 ( ) throws Throwable { MultiPeerDownloader multiPeerDownloader0 = new MultiPeerDownloader ( ( RateHandler ) null ) ; multiPeerDownloader0 . addPeerConnection ( ( NetworkConnectionBase ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removePeerConnection ( NetworkConnectionBase peer_connection ) { try { lists_lock . enter ( ) ; / / look for the connection in the waiting list and cancel listener if found PeerData peer_data = ( PeerData ) waiting_connections . remove ( peer_connection ) ; if ( peer_data ! = null ) { peer_connection . getOutgoingMessageQueue ( ) . cancelQueueListener ( peer_data . queue_listener ) ; return true ; } / / look for the connection in the ready list if ( ready_connections . remove ( peer_connection ) ) { return true ; } return false ; } finally { lists_lock . exit ( ) ; } }
void test6 ( ) throws Throwable { MultiPeerDownloader multiPeerDownloader0 = new MultiPeerDownloader ( ( RateHandler ) null ) ; boolean boolean0 = multiPeerDownloader0 . removePeerConnection ( ( NetworkConnectionBase ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removePeerConnection ( NetworkConnectionBase peer_connection ) { try { lists_lock . enter ( ) ; / / look for the connection in the waiting list and cancel listener if found PeerData peer_data = ( PeerData ) waiting_connections . remove ( peer_connection ) ; if ( peer_data ! = null ) { peer_connection . getOutgoingMessageQueue ( ) . cancelQueueListener ( peer_data . queue_listener ) ; return true ; } / / look for the connection in the ready list if ( ready_connections . remove ( peer_connection ) ) { return true ; } return false ; } finally { lists_lock . exit ( ) ; } }
void test7 ( ) throws Throwable { MultiPeerDownloader multiPeerDownloader0 = new MultiPeerDownloader ( ( RateHandler ) null ) ; EventWaiter eventWaiter0 = new EventWaiter ( ) ; int int0 = multiPeerDownloader0 . getReadyConnectionCount ( eventWaiter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReadyConnectionCount ( EventWaiter waiter ) { int total = 0 ; try { lists_lock . enter ( ) ; for ( Iterator i = waiting_connections . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) { NetworkConnectionBase conn = ( NetworkConnectionBase ) i . next ( ) ; if ( conn . getTransportBase ( ) . isReadyForWrite ( waiter ) ) { total + + ; } } for ( Iterator i = ready_connections . iterator ( ) ; i . hasNext ( ) ; ) { NetworkConnectionBase conn = ( NetworkConnectionBase ) i . next ( ) ; if ( conn . getTransportBase ( ) . isReadyForWrite ( waiter ) ) { total + + ; } } } finally { lists_lock . exit ( ) ; } return ( total ) ; }
void test9 ( ) throws Throwable { MultiPeerDownloader multiPeerDownloader0 = new MultiPeerDownloader ( ( RateHandler ) null ) ; String string0 = multiPeerDownloader0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test0 ( ) throws Throwable { NetworkManagerUtilities networkManagerUtilities0 = new NetworkManagerUtilities ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { MultiPeerUploader multiPeerUploader0 = new MultiPeerUploader ( ( RateHandler ) null ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( ( InetSocketAddress ) null ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 6 ] [ 1 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( connectionEndpoint0 , ( MessageStreamEncoder ) null , ( MessageStreamDecoder ) aZMessageDecoder0 , true , true , byteArray0 ) ; multiPeerUploader0 . addPeerConnection ( ( NetworkConnectionBase ) networkConnectionImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionCount ( ) { return ( waiting_connections . size ( ) + ready_connections . size ( ) ) ; }
void test1 ( ) throws Throwable { MultiPeerUploader multiPeerUploader0 = new MultiPeerUploader ( ( RateHandler ) null ) ; boolean boolean0 = multiPeerUploader0 . getPriorityBoost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test2 ( ) throws Throwable { MultiPeerUploader multiPeerUploader0 = new MultiPeerUploader ( ( RateHandler ) null ) ; RateHandler rateHandler0 = multiPeerUploader0 . getRateHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RateHandler getRateHandler ( boolean upload , boolean lan ) { if ( upload ) { if ( lan ) { return ( lan_upload_processor . getRateHandler ( ) ) ; } else { return ( upload_processor . getRateHandler ( ) ) ; } } else { if ( lan ) { return ( lan_download_processor . getRateHandler ( ) ) ; } else { return ( download_processor . getRateHandler ( ) ) ; } } }
void test3 ( ) throws Throwable { MultiPeerUploader multiPeerUploader0 = new MultiPeerUploader ( ( RateHandler ) null ) ; int int0 = multiPeerUploader0 . getPriority ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) ; / * * * Is this a no - delay message . * No - delay messages are transmitted immediately , * i . e . force - flushed out the transport . * @return true if a no - delay message * / boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test4 ( ) throws Throwable { MultiPeerUploader multiPeerUploader0 = new MultiPeerUploader ( ( RateHandler ) null ) ; int int0 = multiPeerUploader0 . getConnectionCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionCount ( ) { return ( waiting_connections . size ( ) + ready_connections . size ( ) ) ; }
void test7 ( ) throws Throwable { MultiPeerUploader multiPeerUploader0 = new MultiPeerUploader ( ( RateHandler ) null ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( ( InetSocketAddress ) null ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 6 ] [ 1 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( connectionEndpoint0 , ( MessageStreamEncoder ) null , ( MessageStreamDecoder ) aZMessageDecoder0 , true , true , byteArray0 ) ; boolean boolean0 = multiPeerUploader0 . removePeerConnection ( ( NetworkConnectionBase ) networkConnectionImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removePeerConnection ( NetworkConnectionBase peer_connection ) { try { lists_lock . enter ( ) ; / / look for the connection in the waiting list and cancel listener if found PeerData peer_data = ( PeerData ) waiting_connections . remove ( peer_connection ) ; if ( peer_data ! = null ) { peer_connection . getOutgoingMessageQueue ( ) . cancelQueueListener ( peer_data . queue_listener ) ; return true ; } / / look for the connection in the ready list if ( ready_connections . remove ( peer_connection ) ) { return true ; } return false ; } finally { lists_lock . exit ( ) ; } }
void test8 ( ) throws Throwable { MultiPeerUploader multiPeerUploader0 = new MultiPeerUploader ( ( RateHandler ) null ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( ( InetSocketAddress ) null ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 6 ] [ 1 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( connectionEndpoint0 , ( MessageStreamEncoder ) null , ( MessageStreamDecoder ) aZMessageDecoder0 , true , true , byteArray0 ) ; multiPeerUploader0 . addPeerConnection ( ( NetworkConnectionBase ) networkConnectionImpl0 ) ; long long0 = multiPeerUploader0 . getBytesReadyToWrite ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionCount ( ) { return ( waiting_connections . size ( ) + ready_connections . size ( ) ) ; }
void test9 ( ) throws Throwable { MultiPeerUploader multiPeerUploader0 = new MultiPeerUploader ( ( RateHandler ) null ) ; EventWaiter eventWaiter0 = new EventWaiter ( ) ; int int0 = multiPeerUploader0 . getReadyConnectionCount ( eventWaiter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReadyConnectionCount ( EventWaiter waiter ) { int total = 0 ; try { lists_lock . enter ( ) ; for ( Iterator i = waiting_connections . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) { NetworkConnectionBase conn = ( NetworkConnectionBase ) i . next ( ) ; if ( conn . getTransportBase ( ) . isReadyForWrite ( waiter ) ) { total + + ; } } for ( Iterator i = ready_connections . iterator ( ) ; i . hasNext ( ) ; ) { NetworkConnectionBase conn = ( NetworkConnectionBase ) i . next ( ) ; if ( conn . getTransportBase ( ) . isReadyForWrite ( waiter ) ) { total + + ; } } } finally { lists_lock . exit ( ) ; } return ( total ) ; }
void test0 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 604 ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( inetSocketAddress0 ) ; AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 1771 ) ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 10 ] [ 1 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( connectionEndpoint0 , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) aZMessageDecoder0 , false , false , byteArray0 ) ; networkConnectionImpl0 . startMessageProcessing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMssSize ( ) ; / * * * Inject the given already - read data back into the read stream . * @param bytes_already_read data * / void setAlreadyRead ( ByteBuffer bytes_already_read ) ; / * * * Get the socket channel used by the transport . * @return the socket channel * / TransportEndpoint getTransportEndpoint ( ) ; boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test2 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 10 ] [ 10 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) null , ( MessageStreamDecoder ) aZMessageDecoder0 , false , false , byteArray0 ) ; boolean boolean0 = networkConnectionImpl0 . isConnected ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test3 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 1 ] [ 10 ] ; AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 1 ) ) ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , true , true , byteArray0 ) ; networkConnectionImpl0 . getTransportBase ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test4 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 0 ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 2 ] [ 5 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) aZMessageDecoder0 , true , true , byteArray0 ) ; networkConnectionImpl0 . getTransport ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test5 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 10 ] [ 10 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) null , ( MessageStreamDecoder ) aZMessageDecoder0 , false , false , byteArray0 ) ; IncomingMessageQueueImpl incomingMessageQueueImpl0 = ( IncomingMessageQueueImpl ) networkConnectionImpl0 . getIncomingMessageQueue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test7 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 18 ) ; InetSocketAddress inetSocketAddress0 = InetSocketAddress . createUnresolved ( " version : " , 1200 ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( inetSocketAddress0 ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 4 ] [ 1 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( connectionEndpoint0 , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , true , false , byteArray0 ) ; ConnectionEndpoint connectionEndpoint1 = networkConnectionImpl0 . getEndpoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLANLocal ( ) ; void setUploadLimit ( int limit ) ; int getUploadLimit ( ) ; void setDownloadLimit ( int limit ) ; int getDownloadLimit ( ) ; LimitedRateGroup [ ] getRateLimiters ( boolean upload ) ; void addRateLimiter ( LimitedRateGroup limiter , boolean upload ) ; void removeRateLimiter ( LimitedRateGroup limiter , boolean upload ) ; String getString ( ) ; }
void test12 ( ) throws Throwable { NetworkConnectionImpl . bogusTransport networkConnectionImpl_bogusTransport0 = new NetworkConnectionImpl . bogusTransport ( ( Transport ) null ) ; EventWaiter eventWaiter0 = new EventWaiter ( ) ; long long0 = networkConnectionImpl_bogusTransport0 . isReadyForRead ( eventWaiter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long isReadyForRead ( EventWaiter waiter ) ; boolean isTCP ( ) ; / * * * Get a textual description for this transport . * @return description * / String getDescription ( ) ; }
void test17 ( ) throws Throwable { NetworkConnectionImpl . bogusTransport networkConnectionImpl_bogusTransport0 = new NetworkConnectionImpl . bogusTransport ( ( Transport ) null ) ; EventWaiter eventWaiter0 = new EventWaiter ( ) ; boolean boolean0 = networkConnectionImpl_bogusTransport0 . isReadyForWrite ( eventWaiter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReadyForWrite ( EventWaiter waiter ) ; / * * * Is the transport ready to read , * i . e . will a read request result in > 0 bytes read . * @return 0 if the transport is read ready , ms since last ready or created if never ready * / long isReadyForRead ( EventWaiter waiter ) ; boolean isTCP ( ) ; / * * * Get a textual description for this transport . * @return description * / String getDescription ( ) ; }
void test20 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 1 ] [ 10 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , true , byteArray0 ) ; NetworkConnectionImpl . bogusTransport networkConnectionImpl_bogusTransport0 = new NetworkConnectionImpl . bogusTransport ( ( Transport ) tCPTransportImpl0 ) ; networkConnectionImpl_bogusTransport0 . setTrace ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test28 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = InetSocketAddress . createUnresolved ( "" , 68 ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( inetSocketAddress0 ) ; AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 68 ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 1 ] [ 10 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( connectionEndpoint0 , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) aZMessageDecoder0 , true , true , byteArray0 ) ; networkConnectionImpl0 . close ( "AZ_SESSION_REQUEST" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLANLocal ( ) ; void setUploadLimit ( int limit ) ; int getUploadLimit ( ) ; void setDownloadLimit ( int limit ) ; int getDownloadLimit ( ) ; LimitedRateGroup [ ] getRateLimiters ( boolean upload ) ; void addRateLimiter ( LimitedRateGroup limiter , boolean upload ) ; void removeRateLimiter ( LimitedRateGroup limiter , boolean upload ) ; String getString ( ) ; }
void test30 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 1 ) ) ; byte [ ] [ ] byteArray0 = new byte [ 1 ] [ 7 ] ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , false , false , byteArray0 ) ; networkConnectionImpl0 . enableEnhancedMessageProcessing ( false , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test31 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = InetSocketAddress . createUnresolved ( "" , 68 ) ; ConnectionEndpoint connectionEndpoint0 = new ConnectionEndpoint ( inetSocketAddress0 ) ; AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 68 ) ; AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 1 ] [ 10 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( connectionEndpoint0 , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) aZMessageDecoder0 , true , true , byteArray0 ) ; networkConnectionImpl0 . enableEnhancedMessageProcessing ( true , ( int ) ( byte ) ( - 27 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test32 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 10 ] [ 10 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) null , ( MessageStreamDecoder ) aZMessageDecoder0 , false , false , byteArray0 ) ; networkConnectionImpl0 . setUserData ( ( Object ) "BT_ALLOWED_FAST" , ( Object ) "BT_CANCEL" ) ; networkConnectionImpl0 . setUserData ( ( Object ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test33 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 10 ] [ 10 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) null , ( MessageStreamDecoder ) aZMessageDecoder0 , false , false , byteArray0 ) ; networkConnectionImpl0 . setUserData ( ( Object ) "BT_ALLOWED_FAST" , ( Object ) "BT_CANCEL" ) ; networkConnectionImpl0 . getUserData ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test34 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 1 ) ) ; byte [ ] [ ] byteArray0 = new byte [ 1 ] [ 7 ] ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , false , false , byteArray0 ) ; networkConnectionImpl0 . getUserData ( ( Object ) "BT_HAVE_ALL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test36 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 1 ] [ 10 ] ; AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 1 ) ) ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , true , true , byteArray0 ) ; String string0 = networkConnectionImpl0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test0 ( ) throws Throwable { SinglePeerUploader singlePeerUploader0 = new SinglePeerUploader ( ( NetworkConnectionBase ) null , ( RateHandler ) null ) ; RateHandler rateHandler0 = singlePeerUploader0 . getRateHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RateHandler getRateHandler ( boolean upload , boolean lan ) { if ( upload ) { if ( lan ) { return ( lan_upload_processor . getRateHandler ( ) ) ; } else { return ( upload_processor . getRateHandler ( ) ) ; } } else { if ( lan ) { return ( lan_download_processor . getRateHandler ( ) ) ; } else { return ( download_processor . getRateHandler ( ) ) ; } } }
void test2 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 1232 ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; byte [ ] [ ] byteArray0 = new byte [ 2 ] [ 9 ] ; NetworkConnectionImpl networkConnectionImpl0 = new NetworkConnectionImpl ( ( ConnectionEndpoint ) null , ( MessageStreamEncoder ) aZMessageEncoder0 , ( MessageStreamDecoder ) bTMessageDecoder0 , false , false , byteArray0 ) ; SinglePeerUploader singlePeerUploader0 = new SinglePeerUploader ( ( NetworkConnectionBase ) networkConnectionImpl0 , ( RateHandler ) null ) ; boolean boolean0 = singlePeerUploader0 . getPriorityBoost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test4 ( ) throws Throwable { SinglePeerUploader singlePeerUploader0 = new SinglePeerUploader ( ( NetworkConnectionBase ) null , ( RateHandler ) null ) ; int int0 = singlePeerUploader0 . getConnectionCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionCount ( ) { return ( waiting_connections . size ( ) + ready_connections . size ( ) ) ; }
void test5 ( ) throws Throwable { SinglePeerUploader singlePeerUploader0 = new SinglePeerUploader ( ( NetworkConnectionBase ) null , ( RateHandler ) null ) ; int int0 = singlePeerUploader0 . getPriority ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) ; / * * * Is this a no - delay message . * No - delay messages are transmitted immediately , * i . e . force - flushed out the transport . * @return true if a no - delay message * / boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test0 ( ) throws Throwable { DirectByteBuffer [ ] directByteBufferArray0 = new DirectByteBuffer [ 5 ] ; Message [ ] messageArray0 = new Message [ 5 ] ; RawMessageImpl rawMessageImpl0 = new RawMessageImpl ( ( Message ) null , directByteBufferArray0 , ( int ) ( byte ) ( - 117 ) , false , messageArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) ; / * * * Is this a no - delay message . * No - delay messages are transmitted immediately , * i . e . force - flushed out the transport . * @return true if a no - delay message * / boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test1 ( ) throws Throwable { DirectByteBuffer [ ] directByteBufferArray0 = new DirectByteBuffer [ 2 ] ; BTPiece bTPiece0 = new BTPiece ( ( - 306 ) , ( - 1030 ) , ( DirectByteBuffer ) null , ( byte ) 25 ) ; Message [ ] messageArray0 = new Message [ 2 ] ; RawMessageImpl rawMessageImpl0 = new RawMessageImpl ( ( Message ) bTPiece0 , directByteBufferArray0 , ( - 1030 ) , false , messageArray0 ) ; Message [ ] messageArray1 = rawMessageImpl0 . messagesToRemove ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test2 ( ) throws Throwable { BTHaveNone bTHaveNone0 = new BTHaveNone ( ( byte ) 66 ) ; DirectByteBuffer [ ] directByteBufferArray0 = new DirectByteBuffer [ 8 ] ; Message [ ] messageArray0 = new Message [ 3 ] ; RawMessageImpl rawMessageImpl0 = new RawMessageImpl ( ( Message ) bTHaveNone0 , directByteBufferArray0 , ( int ) ( byte ) 28 , true , messageArray0 ) ; DirectByteBuffer [ ] directByteBufferArray1 = rawMessageImpl0 . getRawData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) ; / * * * Is this a no - delay message . * No - delay messages are transmitted immediately , * i . e . force - flushed out the transport . * @return true if a no - delay message * / boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test3 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 52 , ( byte ) 52 ) ; BTBitfield bTBitfield0 = new BTBitfield ( directByteBuffer0 , ( byte ) 0 ) ; DirectByteBuffer [ ] directByteBufferArray0 = new DirectByteBuffer [ 9 ] ; Message [ ] messageArray0 = new Message [ 4 ] ; RawMessageImpl rawMessageImpl0 = new RawMessageImpl ( ( Message ) bTBitfield0 , directByteBufferArray0 , ( int ) ( byte ) 0 , true , messageArray0 ) ; byte [ ] byteArray0 = rawMessageImpl0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test4 ( ) throws Throwable { DirectByteBuffer [ ] directByteBufferArray0 = new DirectByteBuffer [ 5 ] ; Message [ ] messageArray0 = new Message [ 5 ] ; RawMessageImpl rawMessageImpl0 = new RawMessageImpl ( ( Message ) null , directByteBufferArray0 , ( int ) ( byte ) ( - 117 ) , false , messageArray0 ) ; int int0 = rawMessageImpl0 . getPriority ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test6 ( ) throws Throwable { BTHaveNone bTHaveNone0 = new BTHaveNone ( ( byte ) 66 ) ; DirectByteBuffer [ ] directByteBufferArray0 = new DirectByteBuffer [ 8 ] ; Message [ ] messageArray0 = new Message [ 3 ] ; RawMessageImpl rawMessageImpl0 = new RawMessageImpl ( ( Message ) bTHaveNone0 , directByteBufferArray0 , ( int ) ( byte ) 28 , true , messageArray0 ) ; boolean boolean0 = rawMessageImpl0 . isNoDelay ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) ; / * * * Is this a no - delay message . * No - delay messages are transmitted immediately , * i . e . force - flushed out the transport . * @return true if a no - delay message * / boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test7 ( ) throws Throwable { BTHaveNone bTHaveNone0 = new BTHaveNone ( ( byte ) 66 ) ; DirectByteBuffer [ ] directByteBufferArray0 = new DirectByteBuffer [ 8 ] ; Message [ ] messageArray0 = new Message [ 3 ] ; RawMessageImpl rawMessageImpl0 = new RawMessageImpl ( ( Message ) bTHaveNone0 , directByteBufferArray0 , ( int ) ( byte ) 28 , true , messageArray0 ) ; DirectByteBuffer [ ] directByteBufferArray1 = rawMessageImpl0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test9 ( ) throws Throwable { BTHaveNone bTHaveNone0 = new BTHaveNone ( ( byte ) 66 ) ; DirectByteBuffer [ ] directByteBufferArray0 = new DirectByteBuffer [ 8 ] ; Message [ ] messageArray0 = new Message [ 3 ] ; RawMessageImpl rawMessageImpl0 = new RawMessageImpl ( ( Message ) bTHaveNone0 , directByteBufferArray0 , ( int ) ( byte ) 28 , true , messageArray0 ) ; String string0 = rawMessageImpl0 . getID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test10 ( ) throws Throwable { BTHaveNone bTHaveNone0 = new BTHaveNone ( ( byte ) 66 ) ; DirectByteBuffer [ ] directByteBufferArray0 = new DirectByteBuffer [ 8 ] ; Message [ ] messageArray0 = new Message [ 3 ] ; RawMessageImpl rawMessageImpl0 = new RawMessageImpl ( ( Message ) bTHaveNone0 , directByteBufferArray0 , ( int ) ( byte ) 28 , true , messageArray0 ) ; rawMessageImpl0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) ; / * * * Is this a no - delay message . * No - delay messages are transmitted immediately , * i . e . force - flushed out the transport . * @return true if a no - delay message * / boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test11 ( ) throws Throwable { BTHaveNone bTHaveNone0 = new BTHaveNone ( ( byte ) 66 ) ; DirectByteBuffer [ ] directByteBufferArray0 = new DirectByteBuffer [ 8 ] ; Message [ ] messageArray0 = new Message [ 3 ] ; RawMessageImpl rawMessageImpl0 = new RawMessageImpl ( ( Message ) bTHaveNone0 , directByteBufferArray0 , ( int ) ( byte ) 28 , true , messageArray0 ) ; BTHaveNone bTHaveNone1 = ( BTHaveNone ) rawMessageImpl0 . getBaseMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) ; / * * * Is this a no - delay message . * No - delay messages are transmitted immediately , * i . e . force - flushed out the transport . * @return true if a no - delay message * / boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test12 ( ) throws Throwable { DirectByteBuffer [ ] directByteBufferArray0 = new DirectByteBuffer [ 2 ] ; BTPiece bTPiece0 = new BTPiece ( ( - 306 ) , ( - 1030 ) , ( DirectByteBuffer ) null , ( byte ) 25 ) ; Message [ ] messageArray0 = new Message [ 2 ] ; RawMessageImpl rawMessageImpl0 = new RawMessageImpl ( ( Message ) bTPiece0 , directByteBufferArray0 , ( - 1030 ) , false , messageArray0 ) ; String string0 = rawMessageImpl0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) ; / * * * Is this a no - delay message . * No - delay messages are transmitted immediately , * i . e . force - flushed out the transport . * @return true if a no - delay message * / boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test13 ( ) throws Throwable { BTPiece bTPiece0 = new BTPiece ( ( - 1 ) , ( - 1 ) , ( DirectByteBuffer ) null , ( byte ) ( - 2 ) ) ; DirectByteBuffer [ ] directByteBufferArray0 = new DirectByteBuffer [ 10 ] ; Message [ ] messageArray0 = new Message [ 4 ] ; RawMessageImpl rawMessageImpl0 = new RawMessageImpl ( ( Message ) bTPiece0 , directByteBufferArray0 , 31 , false , messageArray0 ) ; String string0 = rawMessageImpl0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test0 ( ) throws Throwable { TransportHelperFilterStreamCipher transportHelperFilterStreamCipher0 = new TransportHelperFilterStreamCipher ( ( TransportHelper ) null , ( TransportCipher ) null , ( TransportCipher ) null ) ; boolean boolean0 = transportHelperFilterStreamCipher0 . hasBufferedRead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBufferedRead ( ) { return ( read_insert ! = null & & read_insert . remaining ( ) > 0 ) ; }
void test2 ( ) throws Throwable { TransportHelperFilterStreamCipher transportHelperFilterStreamCipher0 = new TransportHelperFilterStreamCipher ( ( TransportHelper ) null , ( TransportCipher ) null , ( TransportCipher ) null ) ; TransportHelper transportHelper0 = transportHelperFilterStreamCipher0 . getHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TransportHelper getHelper ( ) { return ( transport ) ; }
void test3 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterStreamCipher transportHelperFilterStreamCipher0 = new TransportHelperFilterStreamCipher ( ( TransportHelper ) tCPTransportHelper0 , ( TransportCipher ) null , ( TransportCipher ) null ) ; boolean boolean0 = transportHelperFilterStreamCipher0 . hasBufferedWrite ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBufferedWrite ( ) { return ( transport . hasDelayedWrite ( ) ) ; }
void test4 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterStreamCipher transportHelperFilterStreamCipher0 = new TransportHelperFilterStreamCipher ( ( TransportHelper ) tCPTransportHelper0 , ( TransportCipher ) null , ( TransportCipher ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBufferedWrite ( ) { return ( transport . hasDelayedWrite ( ) ) ; }
void test5 ( ) throws Throwable { TransportHelperFilterStreamCipher transportHelperFilterStreamCipher0 = new TransportHelperFilterStreamCipher ( ( TransportHelper ) null , ( TransportCipher ) null , ( TransportCipher ) null ) ; ByteBuffer [ ] byteBufferArray0 = new ByteBuffer [ 2 ] ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; ByteBuffer byteBuffer0 = bTMessageDecoder0 . destroy ( ) ; byteBufferArray0 [ 1 ] = byteBuffer0 ; long long0 = transportHelperFilterStreamCipher0 . write ( byteBufferArray0 , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test7 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterStreamCipher transportHelperFilterStreamCipher0 = new TransportHelperFilterStreamCipher ( ( TransportHelper ) tCPTransportHelper0 , ( TransportCipher ) null , ( TransportCipher ) null ) ; ByteBuffer [ ] byteBufferArray0 = new ByteBuffer [ 3 ] ; long long0 = transportHelperFilterStreamCipher0 . read ( byteBufferArray0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test0 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 361 ) ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; outgoingMessageQueueImpl0 . setEncoder ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test1 ( ) throws Throwable { OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) null ) ; boolean boolean0 = outgoingMessageQueueImpl0 . isDestroyed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test2 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 12 ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; outgoingMessageQueueImpl0 . cancelQueueListener ( ( OutgoingMessageQueue . MessageQueueListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDestroyed ( ) { return ( destroyed ) ; }
void test3 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 12 ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; int int0 = outgoingMessageQueueImpl0 . getProtocolQueuedBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDestroyed ( ) { return ( destroyed ) ; }
void test4 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 0 ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalSize ( ) ; int getDataQueuedBytes ( ) ; int getProtocolQueuedBytes ( ) ; boolean isBlocked ( ) ; boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test5 ( ) throws Throwable { BTMessageEncoder bTMessageEncoder0 = new BTMessageEncoder ( ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) bTMessageEncoder0 ) ; boolean boolean0 = outgoingMessageQueueImpl0 . getPriorityBoost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDestroyed ( ) { return ( destroyed ) ; }
void test6 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 686 ) ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; int int0 = outgoingMessageQueueImpl0 . getTotalSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDataQueuedBytes ( ) ; int getProtocolQueuedBytes ( ) ; boolean isBlocked ( ) ; boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test7 ( ) throws Throwable { BTMessageEncoder bTMessageEncoder0 = new BTMessageEncoder ( ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) bTMessageEncoder0 ) ; int int0 = outgoingMessageQueueImpl0 . getDataQueuedBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDestroyed ( ) { return ( destroyed ) ; }
void test9 ( ) throws Throwable { BTMessageEncoder bTMessageEncoder0 = new BTMessageEncoder ( ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) bTMessageEncoder0 ) ; outgoingMessageQueueImpl0 . setTransport ( ( Transport ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test10 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 12 ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; AZMessageEncoder aZMessageEncoder1 = ( AZMessageEncoder ) outgoingMessageQueueImpl0 . getEncoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProtocolQueuedBytes ( ) ; boolean isBlocked ( ) ; boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test11 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 30 ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; int int0 = outgoingMessageQueueImpl0 . getPercentDoneOfCurrentMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test12 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 686 ) ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; int int0 = outgoingMessageQueueImpl0 . getMssSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test13 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 0 ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDestroyed ( ) { return ( destroyed ) ; }
void test14 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 25 ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; BTDHTPort bTDHTPort0 = new BTDHTPort ( 25 ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) bTDHTPort0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test15 ( ) throws Throwable { BTMessageEncoder bTMessageEncoder0 = new BTMessageEncoder ( ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) bTMessageEncoder0 ) ; boolean boolean0 = outgoingMessageQueueImpl0 . isBlocked ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProtocolQueuedBytes ( ) ; boolean isBlocked ( ) ; boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test16 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 361 ) ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; BTInterested bTInterested0 = new BTInterested ( ( byte ) 0 ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) bTInterested0 , true ) ; boolean boolean0 = outgoingMessageQueueImpl0 . hasUrgentMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test17 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 12 ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; boolean boolean0 = outgoingMessageQueueImpl0 . hasUrgentMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProtocolQueuedBytes ( ) ; boolean isBlocked ( ) ; boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test19 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 361 ) ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; BTInterested bTInterested0 = new BTInterested ( ( byte ) 0 ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) bTInterested0 , false ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) bTInterested0 , true ) ; boolean boolean0 = outgoingMessageQueueImpl0 . removeMessage ( ( Message ) bTInterested0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test20 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 932 ) ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; AZRequestHint aZRequestHint0 = new AZRequestHint ( ( - 686 ) , ( - 932 ) , ( int ) ( byte ) 0 , ( - 932 ) , ( byte ) 0 ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) aZRequestHint0 , true ) ; BTChoke bTChoke0 = new BTChoke ( ( byte ) 0 ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) bTChoke0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test21 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 1403 ) ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 113 , 461 ) ; BTPiece bTPiece0 = new BTPiece ( ( - 1403 ) , 1401 , directByteBuffer0 , ( byte ) 0 ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) bTPiece0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalSize ( ) ; int getDataQueuedBytes ( ) ; int getProtocolQueuedBytes ( ) ; boolean isBlocked ( ) ; boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test22 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 932 ) ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; BTChoke bTChoke0 = new BTChoke ( ( byte ) 0 ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) bTChoke0 , false ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) bTChoke0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test23 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 932 ) ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; BTChoke bTChoke0 = new BTChoke ( ( byte ) 0 ) ; RawMessage [ ] rawMessageArray0 = aZMessageEncoder0 . encodeMessage ( ( Message ) bTChoke0 ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) bTChoke0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalSize ( ) ; int getDataQueuedBytes ( ) ; int getProtocolQueuedBytes ( ) ; boolean isBlocked ( ) ; boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test24 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 361 ) ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; BTInterested bTInterested0 = new BTInterested ( ( byte ) 0 ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) bTInterested0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test25 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 686 ) ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; BTChoke bTChoke0 = new BTChoke ( ( byte ) 0 ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) bTChoke0 , true ) ; AZBadPiece aZBadPiece0 = new AZBadPiece ( 0 , ( byte ) 0 ) ; boolean boolean0 = outgoingMessageQueueImpl0 . removeMessage ( ( Message ) aZBadPiece0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test26 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 361 ) ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; BTInterested bTInterested0 = new BTInterested ( ( byte ) 0 ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) bTInterested0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test28 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 0 ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; int int0 = outgoingMessageQueueImpl0 . deliverToTransport ( 0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDestroyed ( ) { return ( destroyed ) ; }
void test29 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 1403 ) ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; outgoingMessageQueueImpl0 . flush ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test30 ( ) throws Throwable { AZBadPiece aZBadPiece0 = new AZBadPiece ( 0 , ( byte ) 86 ) ; AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 0 ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 86 , ( byte ) 86 ) ; BTBitfield bTBitfield0 = new BTBitfield ( directByteBuffer0 , ( byte ) 86 ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) bTBitfield0 , true ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) aZBadPiece0 , true ) ; outgoingMessageQueueImpl0 . flush ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test31 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 932 ) ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; BTChoke bTChoke0 = new BTChoke ( ( byte ) 0 ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) bTChoke0 , true ) ; outgoingMessageQueueImpl0 . doListenerNotifications ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProtocolQueuedBytes ( ) ; boolean isBlocked ( ) ; boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test32 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 0 ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; outgoingMessageQueueImpl0 . doListenerNotifications ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDataQueuedBytes ( ) ; int getProtocolQueuedBytes ( ) ; boolean isBlocked ( ) ; boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test33 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( ( - 932 ) ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; AZRequestHint aZRequestHint0 = new AZRequestHint ( ( - 686 ) , ( - 932 ) , ( int ) ( byte ) 0 , ( - 932 ) , ( byte ) 0 ) ; outgoingMessageQueueImpl0 . addMessage ( ( Message ) aZRequestHint0 , true ) ; String string0 = outgoingMessageQueueImpl0 . getQueueTrace ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProtocolQueuedBytes ( ) ; boolean isBlocked ( ) ; boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test34 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 12 ) ; OutgoingMessageQueueImpl outgoingMessageQueueImpl0 = new OutgoingMessageQueueImpl ( ( MessageStreamEncoder ) aZMessageEncoder0 ) ; AZMetaData aZMetaData0 = new AZMetaData ( 12 , ( byte ) 0 ) ; outgoingMessageQueueImpl0 . notifyOfExternallySentMessage ( ( Message ) aZMetaData0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDestroyed ( ) { return ( destroyed ) ; }
void test0 ( ) throws Throwable { SinglePeerDownloader singlePeerDownloader0 = new SinglePeerDownloader ( ( NetworkConnectionBase ) null , ( RateHandler ) null ) ; boolean boolean0 = singlePeerDownloader0 . getPriorityBoost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPriorityBoost ( ) ; void setPriorityBoost ( boolean boost ) ; / * * * Whether or not an urgent message ( one that needs an immediate send , i . e . a no - delay message ) is queued . * @return true if there's a message tagged for immediate write * / boolean hasUrgentMessage ( ) ; / * * * Add a message to the message queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message message to add * @param manual_listener_notify true for manual notification , false for automatic * / void addMessage ( Message message , boolean manual_listener_notify ) ; / * * * Remove all messages of the given types from the queue . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message_types type to remove * @param manual_listener_notify true for manual notification , false for automatic * / void removeMessagesOfType ( Message [ ] message_types , boolean manual_listener_notify ) ; / * * * Remove a particular message from the queue . * NOTE : Only the original message found in the queue will be destroyed upon removal , * which may not necessarily be the one passed as the method parameter , * as some messages override equals ( ) ( i . e . BTRequest messages ) instead of using reference * equality , and could be a completely different object , and would need to be destroyed * manually . If the message does not override equals , then any such method will likely * * not * be found and removed , as internal queued object was a new allocation on insertion . * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param message to remove * @param manual_listener_notify true for manual notification , false for automatic * @return true if the message was removed , false otherwise * / boolean removeMessage ( Message message , boolean manual_listener_notify ) ; / * * * Deliver ( write ) message ( s ) data to the underlying transport . * * NOTE : Allows for manual listener notification at some later time , * using doListenerNotifications ( ) , instead of notifying immediately * from within this method . This is useful if you want to invoke * listeners outside of some greater synchronised block to avoid * deadlock . * @param max_bytes maximum number of bytes to deliver * @param manual_listener_notify true for manual notification , false for automatic * @return number of bytes delivered * @throws IOException on delivery error * / int deliverToTransport ( int max_bytes , boolean manual_listener_notify ) throws IOException ; / * * * Manually send any unsent listener notifications . * / void doListenerNotifications ( ) ; / * * * Force all pending messages to be delivered * / void flush ( ) ; void setTrace ( boolean on ) ; String getQueueTrace ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Notifty the queue ( and its listeners ) of a message sent externally on the queue's behalf . * @param message sent externally * / void notifyOfExternallySentMessage ( Message message ) ; / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / * * * Receive notification of queue events . * / interface MessageQueueListener { / * * * The given message has just been added to the queue . * @param message added for queuing * @return true if this message addition is allowed , false if it should be immediately removed without being queued or sent * / boolean messageAdded ( Message message ) ; / * * * The given message has just been queued for sending out the transport . * @param message queued * / void messageQueued ( Message message ) ; / * * * The given message has just been forcibly removed from the queue , * i . e . it was * not * sent out the transport . * @param message removed * / void messageRemoved ( Message message ) ; / * * * The given message has been completely sent out through the transport . * @param message sent * / void messageSent ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes has been written to the transport . * @param byte_count number of protocol bytes * / void protocolBytesSent ( int byte_count ) ; / * * * The given number of ( piece ) data bytes has been written to the transport . * @param byte_count number of data bytes * / void dataBytesSent ( int byte_count ) ; void flush ( ) ; }
void test2 ( ) throws Throwable { SinglePeerDownloader singlePeerDownloader0 = new SinglePeerDownloader ( ( NetworkConnectionBase ) null , ( RateHandler ) null ) ; int int0 = singlePeerDownloader0 . getConnectionCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectionCount ( ) { return ( waiting_connections . size ( ) + ready_connections . size ( ) ) ; }
void test3 ( ) throws Throwable { SinglePeerDownloader singlePeerDownloader0 = new SinglePeerDownloader ( ( NetworkConnectionBase ) null , ( RateHandler ) null ) ; RateHandler rateHandler0 = singlePeerDownloader0 . getRateHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RateHandler getRateHandler ( boolean upload , boolean lan ) { if ( upload ) { if ( lan ) { return ( lan_upload_processor . getRateHandler ( ) ) ; } else { return ( upload_processor . getRateHandler ( ) ) ; } } else { if ( lan ) { return ( lan_download_processor . getRateHandler ( ) ) ; } else { return ( download_processor . getRateHandler ( ) ) ; } } }
void test4 ( ) throws Throwable { SinglePeerDownloader singlePeerDownloader0 = new SinglePeerDownloader ( ( NetworkConnectionBase ) null , ( RateHandler ) null ) ; long long0 = singlePeerDownloader0 . getBytesReadyToWrite ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBytesReadyToWrite ( ) { long total = 0 ; try { lists_lock . enter ( ) ; for ( Iterator i = waiting_connections . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) { NetworkConnectionBase conn = ( NetworkConnectionBase ) i . next ( ) ; total + = conn . getOutgoingMessageQueue ( ) . getTotalSize ( ) ; } for ( Iterator i = ready_connections . iterator ( ) ; i . hasNext ( ) ; ) { NetworkConnectionBase conn = ( NetworkConnectionBase ) i . next ( ) ; total + = conn . getOutgoingMessageQueue ( ) . getTotalSize ( ) ; } } finally { lists_lock . exit ( ) ; } return ( total ) ; }
void test5 ( ) throws Throwable { SinglePeerDownloader singlePeerDownloader0 = new SinglePeerDownloader ( ( NetworkConnectionBase ) null , ( RateHandler ) null ) ; int int0 = singlePeerDownloader0 . getPriority ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) ; / * * * Is this a no - delay message . * No - delay messages are transmitted immediately , * i . e . force - flushed out the transport . * @return true if a no - delay message * / boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = ProtocolDecoderPHE . getZeroPadding ( ( int ) ( byte ) ( - 6 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getZeroPadding ( int max_len ) { byte [ ] bytes = new byte [ random . nextInt ( max_len ) ] ; return ( bytes ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = ProtocolDecoderPHE . getRandomPadding ( 352 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getRandomPadding ( int max_len ) { byte [ ] bytes = new byte [ random . nextInt ( max_len ) ] ; random . nextBytes ( bytes ) ; return ( bytes ) ; }
void test3 ( ) throws Throwable { int int0 = ProtocolDecoderPHE . getMaxIncomingInitialPacketSize ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxIncomingInitialPacketSize ( boolean min_overheads ) { return ( MIN_INCOMING_INITIAL_PACKET_SIZE + ( min_overheads ? PADDING_MAX_LIMITED : PADDING_MAX_NORMAL ) / 2 ) ; }
void test4 ( ) throws Throwable { int int0 = ProtocolDecoderPHE . getMaxIncomingInitialPacketSize ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxIncomingInitialPacketSize ( boolean min_overheads ) { return ( MIN_INCOMING_INITIAL_PACKET_SIZE + ( min_overheads ? PADDING_MAX_LIMITED : PADDING_MAX_NORMAL ) / 2 ) ; }
void test8 ( ) throws Throwable { KeyPair keyPair0 = ProtocolDecoderPHE . generateDHKeyPair ( ( TransportHelper ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" KeyPair generateDHKeyPair ( TransportHelper transport , boolean outbound ) throws IOException { if ( dh_key_generator = = null ) { throw ( new IOException ( "Crypto not setup" ) ) ; } ( dh_key_generator ) { if ( ! outbound ) { byte [ ] address = transport . getAddress ( ) . getAddress ( ) . getAddress ( ) ; int hit_count = generate_bloom . add ( address ) ; long now = SystemTime . getCurrentTime ( ) ; / / allow up to 10% bloom filter utilisation if ( generate_bloom . getSize ( ) / generate_bloom . getEntryCount ( ) < 10 ) { generate_bloom = BloomFilterFactory . createAddRemove4Bit ( generate_bloom . getSize ( ) + BLOOM_INCREASE ) ; generate_bloom_create_time = now ; Logger . log ( new LogEvent ( LOGID , "PHE bloom : size increased to " + generate_bloom . getSize ( ) ) ) ; } else if ( now < generate_bloom_create_time | | now - generate_bloom_create_time > BLOOM_RECREATE ) { generate_bloom = BloomFilterFactory . createAddRemove4Bit ( generate_bloom . getSize ( ) ) ; generate_bloom_create_time = now ; } if ( hit_count > = 15 ) { Logger . log ( new LogEvent ( LOGID , "PHE bloom : too many recent connection attempts from " + transport . getAddress ( ) ) ) ; throw ( new IOException ( "Too many recent connection attempts ( phe ) " ) ) ; } long since_last = now - last_dh_incoming_key_generate ; long delay = 100 - since_last ; / / limit key gen operations to 10 a second if ( delay > 0 & & delay < 100 ) { try { Thread . sleep ( delay ) ; } catch ( Throwable e ) { } } last_dh_incoming_key_generate = now ; } KeyPair res = dh_key_generator . generateKeyPair ( ) ; return ( res ) ; } }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ReadController readController0 = new ReadController ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ReadController readController0 = new ReadController ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { ReadController readController0 = new ReadController ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { ReadController readController0 = new ReadController ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEntityCount ( ) { return ( entity_count ) ; }
void test4 ( ) throws Throwable { ReadController readController0 = new ReadController ( ) ; SinglePeerUploader singlePeerUploader0 = new SinglePeerUploader ( ( NetworkConnectionBase ) null , ( RateHandler ) null ) ; readController0 . removeReadEntity ( ( RateControlledEntity ) singlePeerUploader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) ; / * * * Is this a no - delay message . * No - delay messages are transmitted immediately , * i . e . force - flushed out the transport . * @return true if a no - delay message * / boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test5 ( ) throws Throwable { ReadController readController0 = new ReadController ( ) ; MultiPeerDownloader2 multiPeerDownloader2_0 = new MultiPeerDownloader2 ( ( RateHandler ) null ) ; readController0 . removeReadEntity ( ( RateControlledEntity ) multiPeerDownloader2_0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) ; / * * * Is this a no - delay message . * No - delay messages are transmitted immediately , * i . e . force - flushed out the transport . * @return true if a no - delay message * / boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test0 ( ) throws Throwable { IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager ( ) ; int int0 = incomingConnectionManager0 . getMaxMinMatchBufferSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxMatchBufferSize ( ) { return ( max_match_buffer_size ) ; }
void test1 ( ) throws Throwable { IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager ( ) ; int int0 = incomingConnectionManager0 . getMaxMatchBufferSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxMinMatchBufferSize ( ) { return ( max_min_match_buffer_size ) ; }
void test3 ( ) throws Throwable { IncomingConnectionManager incomingConnectionManager0 = IncomingConnectionManager . getSingleton ( ) ; incomingConnectionManager0 . addSharedSecrets ( ( byte [ ] [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test5 ( ) throws Throwable { IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager ( ) ; BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; ByteBuffer byteBuffer0 = bTMessageDecoder0 . destroy ( ) ; incomingConnectionManager0 . checkForMatch ( ( TransportHelper ) null , 1949 , byteBuffer0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxMinMatchBufferSize ( ) { return ( max_min_match_buffer_size ) ; }
void test6 ( ) throws Throwable { IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager ( ) ; byte [ ] [ ] byteArray0 = new byte [ 14 ] [ 6 ] ; incomingConnectionManager0 . addSharedSecrets ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxMinMatchBufferSize ( ) { return ( max_min_match_buffer_size ) ; }
void test7 ( ) throws Throwable { IncomingConnectionManager incomingConnectionManager0 = IncomingConnectionManager . getSingleton ( ) ; incomingConnectionManager0 . removeSharedSecrets ( ( byte [ ] [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxMatchBufferSize ( ) { return ( max_match_buffer_size ) ; }
void test8 ( ) throws Throwable { IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager ( ) ; byte [ ] [ ] byteArray0 = new byte [ 14 ] [ 6 ] ; incomingConnectionManager0 . removeSharedSecrets ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxMinMatchBufferSize ( ) { return ( max_min_match_buffer_size ) ; }
void test9 ( ) throws Throwable { IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager ( ) ; TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , false ) ; IncomingConnectionManager . IncomingConnection incomingConnectionManager_IncomingConnection0 = new IncomingConnectionManager . IncomingConnection ( ( TransportHelperFilter ) transportHelperFilterTransparent0 , ( int ) ( byte ) 53 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxMatchBufferSize ( ) { return ( max_match_buffer_size ) ; }
void test10 ( ) throws Throwable { IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager ( ) ; TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , false ) ; IncomingConnectionManager . IncomingConnection incomingConnectionManager_IncomingConnection0 = new IncomingConnectionManager . IncomingConnection ( ( TransportHelperFilter ) transportHelperFilterTransparent0 , 10 ) ; incomingConnectionManager0 . removeConnection ( incomingConnectionManager_IncomingConnection0 , true , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test11 ( ) throws Throwable { IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager ( ) ; TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , false ) ; IncomingConnectionManager . IncomingConnection incomingConnectionManager_IncomingConnection0 = new IncomingConnectionManager . IncomingConnection ( ( TransportHelperFilter ) transportHelperFilterTransparent0 , ( int ) ( byte ) 53 ) ; incomingConnectionManager0 . removeConnection ( incomingConnectionManager_IncomingConnection0 , true , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test12 ( ) throws Throwable { IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager ( ) ; TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , false ) ; IncomingConnectionManager . IncomingConnection incomingConnectionManager_IncomingConnection0 = new IncomingConnectionManager . IncomingConnection ( ( TransportHelperFilter ) transportHelperFilterTransparent0 , ( int ) ( byte ) 0 ) ; incomingConnectionManager0 . removeConnection ( incomingConnectionManager_IncomingConnection0 , true , "'@uiEeH { " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test13 ( ) throws Throwable { IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager ( ) ; incomingConnectionManager0 . doTimeoutChecks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxMatchBufferSize ( ) { return ( max_match_buffer_size ) ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TCPConnectionManager tCPConnectionManager0 = new TCPConnectionManager ( ) ; int int0 = tCPConnectionManager0 . getMaxOutboundPermitted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TCPConnectionManager tCPConnectionManager0 = new TCPConnectionManager ( ) ; tCPConnectionManager0 . closeConnection ( ( SocketChannel ) null ) ; tCPConnectionManager0 . closeConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { TCPConnectionManager tCPConnectionManager0 = new TCPConnectionManager ( ) ; InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 1803 ) ; tCPConnectionManager0 . requestNewConnection ( inetSocketAddress0 , ( TCPConnectionManager . ConnectListener ) null , 553 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; Object object0 = new Object ( ) ; tCPTransportHelper0 . registerForReadSelects ( ( TransportHelper . selectListener ) null , object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean minimiseOverheads ( ) ; int getConnectTimeout ( ) ; int getReadTimeout ( ) ; boolean delayWrite ( ByteBuffer buffer ) ; boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test1 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; Object object0 = new Object ( ) ; tCPTransportHelper0 . registerForWriteSelects ( ( TransportHelper . selectListener ) null , object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectTimeout ( ) ; int getReadTimeout ( ) ; boolean delayWrite ( ByteBuffer buffer ) ; boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test2 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; boolean boolean0 = tCPTransportHelper0 . isClosed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test3 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; tCPTransportHelper0 . resumeReadSelects ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test4 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; SocketChannel socketChannel0 = tCPTransportHelper0 . getSocketChannel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SocketChannel getSocketChannel ( ) { return ( sc ) ; }
void test6 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; boolean boolean0 = tCPTransportHelper0 . minimiseOverheads ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean minimiseOverheads ( ) ; int getConnectTimeout ( ) ; int getReadTimeout ( ) ; boolean delayWrite ( ByteBuffer buffer ) ; boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test7 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; int int0 = tCPTransportHelper0 . getReadTimeout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReadTimeout ( ) ; boolean delayWrite ( ByteBuffer buffer ) ; boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test8 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; int int0 = tCPTransportHelper0 . getConnectTimeout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectTimeout ( ) ; int getReadTimeout ( ) ; boolean delayWrite ( ByteBuffer buffer ) ; boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test9 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; tCPTransportHelper0 . pauseReadSelects ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectTimeout ( ) ; int getReadTimeout ( ) ; boolean delayWrite ( ByteBuffer buffer ) ; boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test10 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; tCPTransportHelper0 . cancelReadSelects ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test11 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; tCPTransportHelper0 . failed ( ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test12 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; tCPTransportHelper0 . setTrace ( true ) ; tCPTransportHelper0 . cancelWriteSelects ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectTimeout ( ) ; int getReadTimeout ( ) ; boolean delayWrite ( ByteBuffer buffer ) ; boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test13 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; String string0 = tCPTransportHelper0 . getName ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test14 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; String string0 = tCPTransportHelper0 . getName ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test15 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; boolean boolean0 = tCPTransportHelper0 . delayWrite ( ( ByteBuffer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean delayWrite ( ByteBuffer buffer ) ; boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test16 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; boolean boolean0 = tCPTransportHelper0 . hasDelayedWrite ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test17 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; int int0 = tCPTransportHelper0 . write ( ( ByteBuffer ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test18 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; ByteBuffer [ ] byteBufferArray0 = new ByteBuffer [ 6 ] ; long long0 = tCPTransportHelper0 . write ( byteBufferArray0 , 20000 , 20000 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test19 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; int int0 = tCPTransportHelper0 . read ( ( ByteBuffer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test20 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; ByteBuffer [ ] byteBufferArray0 = new ByteBuffer [ 15 ] ; long long0 = tCPTransportHelper0 . read ( byteBufferArray0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test21 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; tCPTransportHelper0 . cancelWriteSelects ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test22 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; tCPTransportHelper0 . resumeWriteSelects ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test23 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; tCPTransportHelper0 . setTrace ( true ) ; tCPTransportHelper0 . resumeWriteSelects ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getConnectTimeout ( ) ; int getReadTimeout ( ) ; boolean delayWrite ( ByteBuffer buffer ) ; boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test24 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; tCPTransportHelper0 . pauseWriteSelects ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test25 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; tCPTransportHelper0 . setTrace ( true ) ; tCPTransportHelper0 . pauseWriteSelects ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test26 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; Object object0 = new Object ( ) ; tCPTransportHelper0 . setUserData ( object0 , object0 ) ; tCPTransportHelper0 . setUserData ( ( Object ) "TCP" , object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReadTimeout ( ) ; boolean delayWrite ( ByteBuffer buffer ) ; boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test27 ( ) throws Throwable { Object object0 = new Object ( ) ; TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; tCPTransportHelper0 . setUserData ( object0 , object0 ) ; Object object1 = tCPTransportHelper0 . getUserData ( ( Object ) " ( > ; { QRuo , A0 } q" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getUserData ( String key ) { if ( userData ! = null ) return userData . get ( key ) ; return null ; }
void test28 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; Object object0 = tCPTransportHelper0 . getUserData ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getUserData ( String key ) { if ( userData ! = null ) return userData . get ( key ) ; return null ; }
void test29 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; tCPTransportHelper0 . setScatteringMode ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test0 ( ) throws Throwable { TransportEndpointTCP transportEndpointTCP0 = new TransportEndpointTCP ( ( ProtocolEndpoint ) null , ( SocketChannel ) null ) ; ProtocolEndpoint protocolEndpoint0 = transportEndpointTCP0 . getProtocolEndpoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ProtocolEndpoint getProtocolEndpoint ( ) ; }
void test1 ( ) throws Throwable { TransportEndpointTCP transportEndpointTCP0 = new TransportEndpointTCP ( ( ProtocolEndpoint ) null , ( SocketChannel ) null ) ; SocketChannel socketChannel0 = transportEndpointTCP0 . getSocketChannel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SocketChannel getSocketChannel ( ) { return ( sc ) ; }
void test0 ( ) throws Throwable { SelectorGuard selectorGuard0 = new SelectorGuard ( "aqm * jp < " , ( SelectorGuard . GuardListener ) null ) ; selectorGuard0 . markPreSelectTime ( ) ; selectorGuard0 . verifySelectorIntegrity ( 0 , 17L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test1 ( ) throws Throwable { SelectorGuard selectorGuard0 = new SelectorGuard ( "aqm * jp < " , ( SelectorGuard . GuardListener ) null ) ; String string0 = selectorGuard0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test2 ( ) throws Throwable { SelectorGuard selectorGuard0 = new SelectorGuard ( "aqm * jp < " , ( SelectorGuard . GuardListener ) null ) ; selectorGuard0 . verifySelectorIntegrity ( 0 , 17L ) ; selectorGuard0 . verifySelectorIntegrity ( 0 , 0 ) ; selectorGuard0 . verifySelectorIntegrity ( 0 , 17L ) ; selectorGuard0 . verifySelectorIntegrity ( ( - 1 ) , 0 ) ; selectorGuard0 . verifySelectorIntegrity ( ( - 1 ) , 17L ) ; selectorGuard0 . verifySelectorIntegrity ( 0 , 2L ) ; selectorGuard0 . verifySelectorIntegrity ( 0 , 877L ) ; selectorGuard0 . verifySelectorIntegrity ( ( - 1328 ) , 877L ) ; selectorGuard0 . verifySelectorIntegrity ( 0 , 0 ) ; selectorGuard0 . verifySelectorIntegrity ( 0 , 2L ) ; selectorGuard0 . verifySelectorIntegrity ( 0 , 17L ) ; selectorGuard0 . verifySelectorIntegrity ( 0 , 0 ) ; selectorGuard0 . verifySelectorIntegrity ( 0 , 17L ) ; selectorGuard0 . verifySelectorIntegrity ( 0 , 2L ) ; selectorGuard0 . verifySelectorIntegrity ( 0 , 17L ) ; selectorGuard0 . verifySelectorIntegrity ( 0 , 1310L ) ; selectorGuard0 . verifySelectorIntegrity ( ( - 1328 ) , 2L ) ; selectorGuard0 . verifySelectorIntegrity ( 0 , 17L ) ; selectorGuard0 . verifySelectorIntegrity ( ( - 1328 ) , 17L ) ; selectorGuard0 . verifySelectorIntegrity ( ( - 1967 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { SelectorGuard selectorGuard0 = new SelectorGuard ( " & B - ( o / s ] MK ; _" , ( SelectorGuard . GuardListener ) null ) ; selectorGuard0 . verifySelectorIntegrity ( 14 , 14 ) ; selectorGuard0 . verifySelectorIntegrity ( 14 , 14 ) ; selectorGuard0 . verifySelectorIntegrity ( 14 , 14 ) ; selectorGuard0 . verifySelectorIntegrity ( 14 , 14 ) ; selectorGuard0 . verifySelectorIntegrity ( 14 , 14 ) ; selectorGuard0 . verifySelectorIntegrity ( 14 , 14 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test4 ( ) throws Throwable { SelectorGuard selectorGuard0 = new SelectorGuard ( "aqm * jp < " , ( SelectorGuard . GuardListener ) null ) ; selectorGuard0 . verifySelectorIntegrity ( 0 , ( - 284L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 0 ) ; VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = new VirtualBlockingServerChannelSelector ( inetSocketAddress0 , 0 , ( VirtualServerChannelSelector . SelectListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = new VirtualBlockingServerChannelSelector ( ( InetSocketAddress ) null , 44 , ( VirtualServerChannelSelector . SelectListener ) null ) ; long long0 = virtualBlockingServerChannelSelector0 . getTimeOfLastAccept ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTimeOfLastAccept ( ) ; / * * * Listener notified when a new incoming connection is accepted . * / interface SelectListener { / * * * The given connection has just been accepted . * @param channel new connection * / void newConnectionAccepted ( ServerSocketChannel server , SocketChannel channel ) ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = new VirtualBlockingServerChannelSelector ( ( InetSocketAddress ) null , 44 , ( VirtualServerChannelSelector . SelectListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = new VirtualBlockingServerChannelSelector ( ( InetSocketAddress ) null , 44 , ( VirtualServerChannelSelector . SelectListener ) null ) ; virtualBlockingServerChannelSelector0 . stop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRunning ( ) ; InetAddress getBoundToAddress ( ) ; long getTimeOfLastAccept ( ) ; / * * * Listener notified when a new incoming connection is accepted . * / interface SelectListener { / * * * The given connection has just been accepted . * @param channel new connection * / void newConnectionAccepted ( ServerSocketChannel server , SocketChannel channel ) ; }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 0 ) ; VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = new VirtualBlockingServerChannelSelector ( inetSocketAddress0 , 0 , ( VirtualServerChannelSelector . SelectListener ) null ) ; virtualBlockingServerChannelSelector0 . start ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test5 ( ) throws Throwable { VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = new VirtualBlockingServerChannelSelector ( ( InetSocketAddress ) null , 44 , ( VirtualServerChannelSelector . SelectListener ) null ) ; virtualBlockingServerChannelSelector0 . accept_loop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTimeOfLastAccept ( ) ; / * * * Listener notified when a new incoming connection is accepted . * / interface SelectListener { / * * * The given connection has just been accepted . * @param channel new connection * / void newConnectionAccepted ( ServerSocketChannel server , SocketChannel channel ) ; }
void test6 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 0 ) ; VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = new VirtualBlockingServerChannelSelector ( inetSocketAddress0 , 0 , ( VirtualServerChannelSelector . SelectListener ) null ) ; InetAddress inetAddress0 = virtualBlockingServerChannelSelector0 . getBoundToAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InetAddress getBoundToAddress ( ) ; long getTimeOfLastAccept ( ) ; / * * * Listener notified when a new incoming connection is accepted . * / interface SelectListener { / * * * The given connection has just been accepted . * @param channel new connection * / void newConnectionAccepted ( ServerSocketChannel server , SocketChannel channel ) ; }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 0 ) ; VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = new VirtualBlockingServerChannelSelector ( inetSocketAddress0 , 0 , ( VirtualServerChannelSelector . SelectListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { TCPTransportHelperFilterFactory tCPTransportHelperFilterFactory0 = new TCPTransportHelperFilterFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { TransportHelperFilterTransparent transportHelperFilterTransparent0 = ( TransportHelperFilterTransparent ) TCPTransportHelperFilterFactory . createTransparentFilter ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBufferedRead ( ) { return ( read_insert ! = null & & read_insert . remaining ( ) > 0 ) ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { IncomingSocketChannelManager incomingSocketChannelManager0 = new IncomingSocketChannelManager ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { IncomingSocketChannelManager incomingSocketChannelManager0 = new IncomingSocketChannelManager ( "c`yqpK@#O ) P" , "c`yqpK@#O ) P" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { IncomingSocketChannelManager incomingSocketChannelManager0 = new IncomingSocketChannelManager ( "prop '" , "prop '" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { IncomingSocketChannelManager incomingSocketChannelManager0 = new IncomingSocketChannelManager ( "Max . Peer . Connections . Per . Torrent . When . Seeding" , "Max . Peer . Connections . Per . Torrent . When . Seeding" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { IncomingSocketChannelManager incomingSocketChannelManager0 = new IncomingSocketChannelManager ( "c`yqpK@#O ) P" , "c`yqpK@#O ) P" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { IncomingSocketChannelManager incomingSocketChannelManager0 = new IncomingSocketChannelManager ( "Max . Peer . Connections . Per . Torrent . When . Seeding" , "Max . Peer . Connections . Per . Torrent . When . Seeding" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { IncomingSocketChannelManager incomingSocketChannelManager0 = new IncomingSocketChannelManager ( "8 / @r" , "8 / @r" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport ( ( ProtocolEndpoint ) null , ( TransportHelperFilter ) transportHelperFilterTransparent0 ) ; lightweightTCPTransport0 . close ( "Plain ( TCP ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test3 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport ( ( ProtocolEndpoint ) null , ( TransportHelperFilter ) transportHelperFilterTransparent0 ) ; ByteBuffer [ ] byteBufferArray0 = new ByteBuffer [ 16 ] ; long long0 = lightweightTCPTransport0 . write ( byteBufferArray0 , ( - 1867 ) , 10000 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test5 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport ( ( ProtocolEndpoint ) null , ( TransportHelperFilter ) transportHelperFilterTransparent0 ) ; boolean boolean0 = lightweightTCPTransport0 . isEncrypted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test6 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport ( ( ProtocolEndpoint ) null , ( TransportHelperFilter ) transportHelperFilterTransparent0 ) ; lightweightTCPTransport0 . setTrace ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test7 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport ( ( ProtocolEndpoint ) null , ( TransportHelperFilter ) transportHelperFilterTransparent0 ) ; lightweightTCPTransport0 . unbindConnection ( ( NetworkConnection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test8 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport ( ( ProtocolEndpoint ) null , ( TransportHelperFilter ) transportHelperFilterTransparent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTCP ( ) ; / * * * Get a textual description for this transport . * @return description * / String getDescription ( ) ; }
void test9 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport ( ( ProtocolEndpoint ) null , ( TransportHelperFilter ) transportHelperFilterTransparent0 ) ; int int0 = lightweightTCPTransport0 . getMssSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMssSize ( ) ; / * * * Inject the given already - read data back into the read stream . * @param bytes_already_read data * / void setAlreadyRead ( ByteBuffer bytes_already_read ) ; / * * * Get the socket channel used by the transport . * @return the socket channel * / TransportEndpoint getTransportEndpoint ( ) ; boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test10 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport ( ( ProtocolEndpoint ) null , ( TransportHelperFilter ) transportHelperFilterTransparent0 ) ; lightweightTCPTransport0 . bindConnection ( ( NetworkConnection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMssSize ( ) ; / * * * Inject the given already - read data back into the read stream . * @param bytes_already_read data * / void setAlreadyRead ( ByteBuffer bytes_already_read ) ; / * * * Get the socket channel used by the transport . * @return the socket channel * / TransportEndpoint getTransportEndpoint ( ) ; boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test11 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterStreamCipher transportHelperFilterStreamCipher0 = new TransportHelperFilterStreamCipher ( ( TransportHelper ) tCPTransportHelper0 , ( TransportCipher ) null , ( TransportCipher ) null ) ; LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport ( ( ProtocolEndpoint ) null , ( TransportHelperFilter ) transportHelperFilterStreamCipher0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test12 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport ( ( ProtocolEndpoint ) null , ( TransportHelperFilter ) transportHelperFilterTransparent0 ) ; TransportEndpointTCP transportEndpointTCP0 = ( TransportEndpointTCP ) lightweightTCPTransport0 . getTransportEndpoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TransportEndpoint getTransportEndpoint ( ) ; boolean isEncrypted ( ) ; / * * * Return a textual description of the encryption for this transport * @return * / String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test15 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport ( ( ProtocolEndpoint ) null , ( TransportHelperFilter ) transportHelperFilterTransparent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEncryption ( boolean verbose ) ; String getProtocol ( ) ; / * * * fake a wakeup so that a read cycle is attempted * / void setReadyForRead ( ) ; / * * * Write data to the transport from the given buffers . * NOTE : Works like GatheringByteChannel . * @param buffers from which bytes are to be retrieved * @param array_offset offset within the buffer array of the first buffer from which bytes are to be retrieved * @param length maximum number of buffers to be accessed * @return number of bytes written * @throws IOException on write error * / long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test16 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport ( ( ProtocolEndpoint ) null , ( TransportHelperFilter ) transportHelperFilterTransparent0 ) ; ByteBuffer [ ] byteBufferArray0 = new ByteBuffer [ 16 ] ; long long0 = lightweightTCPTransport0 . read ( byteBufferArray0 , ( - 1867 ) , ( - 1867 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VirtualChannelSelector virtualChannelSelector0 = new VirtualChannelSelector ( "" , ( - 1 ) , false ) ; VirtualChannelSelectorImpl virtualChannelSelectorImpl0 = new VirtualChannelSelectorImpl ( virtualChannelSelector0 , 7 , false , true ) ; int int0 = virtualChannelSelectorImpl0 . select ( ( - 464L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VirtualChannelSelector virtualChannelSelector0 = new VirtualChannelSelector ( "xCMX7n ! e * 5 ; * " , 1 , false ) ; VirtualChannelSelectorImpl virtualChannelSelectorImpl0 = new VirtualChannelSelectorImpl ( virtualChannelSelector0 , 1 , false , false ) ; int int0 = virtualChannelSelectorImpl0 . select ( ( long ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VirtualChannelSelector virtualChannelSelector0 = new VirtualChannelSelector ( "" , ( - 1 ) , false ) ; VirtualChannelSelectorImpl virtualChannelSelectorImpl0 = new VirtualChannelSelectorImpl ( virtualChannelSelector0 , ( - 1849 ) , false , false ) ; int int0 = virtualChannelSelectorImpl0 . select ( ( - 464L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 4 ] [ 6 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , true , byteArray0 ) ; TransportEndpointTCP transportEndpointTCP0 = ( TransportEndpointTCP ) tCPTransportImpl0 . getTransportEndpoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test1 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 17 ] [ 9 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , true , byteArray0 ) ; int int0 = tCPTransportImpl0 . getTransportMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test2 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 2 ] [ 8 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , true , byteArray0 ) ; String string0 = tCPTransportImpl0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test3 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 4 ] [ 3 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , false , false , byteArray0 ) ; boolean boolean0 = tCPTransportImpl0 . isTCP ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test4 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 2 ] [ 10 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , false , false , byteArray0 ) ; String string0 = tCPTransportImpl0 . getProtocol ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test5 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 2 ] [ 8 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , true , byteArray0 ) ; tCPTransportImpl0 . getMssSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test11 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 15 ] [ 10 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , false , false , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test12 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 5 ] [ 10 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , true , byteArray0 ) ; tCPTransportImpl0 . setTransportMode ( ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test13 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 4 ] [ 10 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , true , byteArray0 ) ; tCPTransportImpl0 . setTransportMode ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test14 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 2 ] [ 10 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , false , false , byteArray0 ) ; tCPTransportImpl0 . setTransportMode ( ( int ) ( byte ) 117 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test15 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 2 ] [ 10 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , false , false , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void handleCrypto ( InetSocketAddress address , SocketChannel channel , ByteBuffer initial_data , int priority , ConnectListener listener ) { if ( connect_with_crypto ) { / / attempt encrypted transport TransportHelper helper = new TCPTransportHelper ( channel ) ; TransportCryptoManager . getSingleton ( ) . manageCrypto ( helper , shared_secrets , false , initial_data , new TransportCryptoManager . HandshakeListener ( ) { void handshakeSuccess ( ProtocolDecoder decoder , ByteBuffer remaining_initial_data ) { / / System . out . println ( description + " | crypto handshake success [ " + _filter . getName ( ) + " ] " ) ; TransportHelperFilter filter = decoder . getFilter ( ) ; setFilter ( filter ) ; if ( Logger . isEnabled ( ) ) { Logger . log ( new LogEvent ( LOGID , "Outgoing TCP stream to " + channel . socket ( ) . getRemoteSocketAddress ( ) + " established , type = " + filter . getName ( false ) ) ) ; } connectedOutbound ( remaining_initial_data , listener ) ; } void handshakeFailure ( Throwable failure_msg ) { if ( fallback_allowed & & NetworkManager . OUTGOING_HANDSHAKE_FALLBACK_ALLOWED & & ! has_been_closed ) { if ( Logger . isEnabled ( ) ) Logger . log ( new LogEvent ( LOGID , description + " | crypto handshake failure [ " + failure_msg . getMessage ( ) + " ] , attempting non - crypto fallback . " ) ) ; connect_with_crypto = false ; fallback_count + + ; close ( helper , "Handshake failure and retry" ) ; has_been_closed = false ; if ( initial_data ! = null ) { initial_data . position ( 0 ) ; } connectOutbound ( initial_data , listener , priority ) ; } else { close ( helper , "Handshake failure" ) ; listener . connectFailure ( failure_msg ) ; } } void gotSecret ( byte [ ] session_secret ) { } int getMaximumPlainHeaderLength ( ) { throw ( new RuntimeException ( ) ) ; / / this is outgoing } int matchPlainHeader ( ByteBuffer buffer ) { throw ( new RuntimeException ( ) ) ; / / this is outgoing } } ) ; } else { / / no crypto / / if ( fallback_count > 0 ) { / / System . out . println ( channel . socket ( ) + " | non - crypto fallback successful ! " ) ; / / } setFilter ( TCPTransportHelperFilterFactory . createTransparentFilter ( channel ) ) ; if ( Logger . isEnabled ( ) ) { Logger . log ( new LogEvent ( LOGID , "Outgoing TCP stream to " + channel . socket ( ) . getRemoteSocketAddress ( ) + " established , type = " + getFilter ( ) . getName ( false ) + " , fallback = " + ( fallback_count = = 0 ? "no" : "yes" ) ) ) ; } connectedOutbound ( initial_data , listener ) ; } }
void test16 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 4 ] [ 10 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , true , byteArray0 ) ; TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , false ) ; tCPTransportImpl0 . setFilter ( ( TransportHelperFilter ) transportHelperFilterTransparent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void handleCrypto ( InetSocketAddress address , SocketChannel channel , ByteBuffer initial_data , int priority , ConnectListener listener ) { if ( connect_with_crypto ) { / / attempt encrypted transport TransportHelper helper = new TCPTransportHelper ( channel ) ; TransportCryptoManager . getSingleton ( ) . manageCrypto ( helper , shared_secrets , false , initial_data , new TransportCryptoManager . HandshakeListener ( ) { void handshakeSuccess ( ProtocolDecoder decoder , ByteBuffer remaining_initial_data ) { / / System . out . println ( description + " | crypto handshake success [ " + _filter . getName ( ) + " ] " ) ; TransportHelperFilter filter = decoder . getFilter ( ) ; setFilter ( filter ) ; if ( Logger . isEnabled ( ) ) { Logger . log ( new LogEvent ( LOGID , "Outgoing TCP stream to " + channel . socket ( ) . getRemoteSocketAddress ( ) + " established , type = " + filter . getName ( false ) ) ) ; } connectedOutbound ( remaining_initial_data , listener ) ; } void handshakeFailure ( Throwable failure_msg ) { if ( fallback_allowed & & NetworkManager . OUTGOING_HANDSHAKE_FALLBACK_ALLOWED & & ! has_been_closed ) { if ( Logger . isEnabled ( ) ) Logger . log ( new LogEvent ( LOGID , description + " | crypto handshake failure [ " + failure_msg . getMessage ( ) + " ] , attempting non - crypto fallback . " ) ) ; connect_with_crypto = false ; fallback_count + + ; close ( helper , "Handshake failure and retry" ) ; has_been_closed = false ; if ( initial_data ! = null ) { initial_data . position ( 0 ) ; } connectOutbound ( initial_data , listener , priority ) ; } else { close ( helper , "Handshake failure" ) ; listener . connectFailure ( failure_msg ) ; } } void gotSecret ( byte [ ] session_secret ) { } int getMaximumPlainHeaderLength ( ) { throw ( new RuntimeException ( ) ) ; / / this is outgoing } int matchPlainHeader ( ByteBuffer buffer ) { throw ( new RuntimeException ( ) ) ; / / this is outgoing } } ) ; } else { / / no crypto / / if ( fallback_count > 0 ) { / / System . out . println ( channel . socket ( ) + " | non - crypto fallback successful ! " ) ; / / } setFilter ( TCPTransportHelperFilterFactory . createTransparentFilter ( channel ) ) ; if ( Logger . isEnabled ( ) ) { Logger . log ( new LogEvent ( LOGID , "Outgoing TCP stream to " + channel . socket ( ) . getRemoteSocketAddress ( ) + " established , type = " + getFilter ( ) . getName ( false ) + " , fallback = " + ( fallback_count = = 0 ? "no" : "yes" ) ) ) ; } connectedOutbound ( initial_data , listener ) ; } }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; HTTPMessage hTTPMessage0 = new HTTPMessage ( byteArray0 ) ; DirectByteBuffer [ ] directByteBufferArray0 = hTTPMessage0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getData ( String id ) { return mapData . get ( id ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; HTTPMessage hTTPMessage0 = new HTTPMessage ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; HTTPMessage hTTPMessage0 = new HTTPMessage ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { HTTPMessage hTTPMessage0 = new HTTPMessage ( "4bg" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFeatureSubID ( ) { return message . getFeatureSubID ( ) ; }
void test4 ( ) throws Throwable { HTTPMessage hTTPMessage0 = new HTTPMessage ( "" ) ; String string0 = hTTPMessage0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFeatureID ( ) { return message . getFeatureID ( ) ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; HTTPMessage hTTPMessage0 = new HTTPMessage ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; HTTPMessage hTTPMessage0 = new HTTPMessage ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; HTTPMessage hTTPMessage0 = new HTTPMessage ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; HTTPMessage hTTPMessage0 = new HTTPMessage ( byteArray0 ) ; hTTPMessage0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFeatureSubID ( ) { return message . getFeatureSubID ( ) ; }
void test10 ( ) throws Throwable { HTTPMessage hTTPMessage0 = new HTTPMessage ( "4bg" ) ; byte [ ] byteArray0 = hTTPMessage0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getIDBytes ( ) { return message . getIDBytes ( ) ; }
void test0 ( ) throws Throwable { HTTPMessageDecoder hTTPMessageDecoder0 = new HTTPMessageDecoder ( ) ; int int0 = hTTPMessageDecoder0 . getProtocolBytesDecoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProtocolBytesDecoded ( ) { return ( protocol_bytes_read ) ; }
void test1 ( ) throws Throwable { HTTPMessageDecoder hTTPMessageDecoder0 = new HTTPMessageDecoder ( ) ; int int0 = hTTPMessageDecoder0 . getDataBytesDecoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDataBytesDecoded ( ) { return ( 0 ) ; }
void test3 ( ) throws Throwable { HTTPMessageDecoder hTTPMessageDecoder0 = new HTTPMessageDecoder ( "" ) ; hTTPMessageDecoder0 . pauseDecoding ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test4 ( ) throws Throwable { HTTPMessageDecoder hTTPMessageDecoder0 = new HTTPMessageDecoder ( "ilKeb0e ] ~ + ] M ? / t [ ^u" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test5 ( ) throws Throwable { HTTPMessageDecoder hTTPMessageDecoder0 = new HTTPMessageDecoder ( ) ; int int0 = hTTPMessageDecoder0 . getQueueSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getQueueSize ( ) { return ( messages . size ( ) ) ; }
void test6 ( ) throws Throwable { HTTPMessageDecoder hTTPMessageDecoder0 = new HTTPMessageDecoder ( ) ; hTTPMessageDecoder0 . pauseInternally ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDataBytesDecoded ( ) { return ( 0 ) ; }
void test7 ( ) throws Throwable { HTTPMessageDecoder hTTPMessageDecoder0 = new HTTPMessageDecoder ( ) ; hTTPMessageDecoder0 . setConnection ( ( HTTPNetworkConnection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProtocolBytesDecoded ( ) { return ( protocol_bytes_read ) ; }
void test10 ( ) throws Throwable { HTTPMessageDecoder hTTPMessageDecoder0 = new HTTPMessageDecoder ( "ilKeb0e ] ~ + ] M ? / t [ ^u" ) ; Message [ ] messageArray0 = hTTPMessageDecoder0 . removeDecodedMessages ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Message [ ] removeDecodedMessages ( ) { ( messages ) { if ( messages . isEmpty ( ) ) { return null ; } Message [ ] msgs = ( Message [ ] ) messages . toArray ( new Message [ messages . size ( ) ] ) ; messages . clear ( ) ; return ( msgs ) ; } }
void test11 ( ) throws Throwable { HTTPMessageDecoder hTTPMessageDecoder0 = new HTTPMessageDecoder ( ) ; hTTPMessageDecoder0 . destroy ( ) ; hTTPMessageDecoder0 . resumeDecoding ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getQueueSize ( ) { return ( messages . size ( ) ) ; }
void test12 ( ) throws Throwable { HTTPMessageDecoder hTTPMessageDecoder0 = new HTTPMessageDecoder ( ) ; hTTPMessageDecoder0 . resumeDecoding ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getQueueSize ( ) { return ( messages . size ( ) ) ; }
void test0 ( ) throws Throwable { HTTPNetworkManager hTTPNetworkManager0 = HTTPNetworkManager . getSingleton ( ) ; String string0 = hTTPNetworkManager0 . getRangeNotSatisfiable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRangeNotSatisfiable ( ) { return ( "HTTP / 1 . 1 416 Not Satisfiable" + NL + "Connection : Close" + NL + "Content - Length : 0" + NL + NL ) ; }
void test1 ( ) throws Throwable { HTTPNetworkManager hTTPNetworkManager0 = HTTPNetworkManager . getSingleton ( ) ; String string0 = hTTPNetworkManager0 . getIndexPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndexPage ( ) { return ( "HTTP / 1 . 1 200 OK" + NL + "Connection : Close" + NL + "Content - Length : 0" + NL + NL ) ; }
void test2 ( ) throws Throwable { HTTPNetworkManager hTTPNetworkManager0 = HTTPNetworkManager . getSingleton ( ) ; hTTPNetworkManager0 . addURLHandler ( ( HTTPNetworkManager . URLHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotFound ( ) { return ( "HTTP / 1 . 1 404 Not Found" + NL + "Connection : Close" + NL + "Content - Length : 0" + NL + NL ) ; }
void test3 ( ) throws Throwable { HTTPNetworkManager hTTPNetworkManager0 = HTTPNetworkManager . getSingleton ( ) ; hTTPNetworkManager0 . clearExplicitBindAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHTTPListeningPortNumber ( ) { return ( http_incoming_manager . getTCPListeningPortNumber ( ) ) ; }
void test4 ( ) throws Throwable { HTTPNetworkManager hTTPNetworkManager0 = HTTPNetworkManager . getSingleton ( ) ; hTTPNetworkManager0 . removeURLHandler ( ( HTTPNetworkManager . URLHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNotFound ( ) { return ( "HTTP / 1 . 1 404 Not Found" + NL + "Connection : Close" + NL + "Content - Length : 0" + NL + NL ) ; }
void test5 ( ) throws Throwable { HTTPNetworkManager hTTPNetworkManager0 = HTTPNetworkManager . getSingleton ( ) ; String string0 = hTTPNetworkManager0 . getTest503 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTest503 ( ) { return ( "HTTP / 1 . 1 503 Service Unavailable" + NL + "Connection : Close" + NL + "Content - Length : 4" + NL + NL + "1234" ) ; }
void test6 ( ) throws Throwable { HTTPNetworkManager hTTPNetworkManager0 = HTTPNetworkManager . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEffectiveBindAddress ( InetAddress address ) { return ( incoming_socketchannel_manager . isEffectiveBindAddress ( address ) ) ; }
void test7 ( ) throws Throwable { HTTPNetworkManager hTTPNetworkManager0 = HTTPNetworkManager . getSingleton ( ) ; boolean boolean0 = hTTPNetworkManager0 . isHTTPListenerEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHTTPListenerEnabled ( ) { return ( http_incoming_manager . isEnabled ( ) ) ; }
void test8 ( ) throws Throwable { HTTPNetworkManager hTTPNetworkManager0 = HTTPNetworkManager . getSingleton ( ) ; String string0 = hTTPNetworkManager0 . getPingPage ( "HTTP / 1 . 1 200 OK\r\nConnection : Close\r\nContent - Length : 0\r\n\r\n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPingPage ( String url ) { int pos = url . indexOf ( ' ' ) ; if ( pos ! = - 1 ) { url = url . substring ( 0 , pos ) ; } pos = url . indexOf ( ' ? ' ) ; Map response = new HashMap ( ) ; boolean ok = false ; if ( pos ! = - 1 ) { StringTokenizer tok = new StringTokenizer ( url . substring ( pos + 1 ) , " & " ) ; while ( tok . hasMoreTokens ( ) ) { String token = tok . nextToken ( ) ; pos = token . indexOf ( ' = ' ) ; if ( pos ! = - 1 ) { String lhs = token . substring ( 0 , pos ) ; String rhs = token . substring ( pos + 1 ) ; if ( lhs . equals ( "check" ) ) { response . put ( "check" , rhs ) ; ok = true ; } } } } if ( ok ) { try { byte [ ] bytes = BEncoder . encode ( response ) ; byte [ ] length = new byte [ 4 ] ; ByteBuffer . wrap ( length ) . putInt ( bytes . length ) ; return ( "HTTP / 1 . 1 200 OK" + NL + "Connection : Close" + NL + "Content - Length : " + ( bytes . length + 4 ) + NL + NL + new String ( length , "ISO - 8859 - 1" ) + new String ( bytes , "ISO - 8859 - 1" ) ) ; } catch ( Throwable e ) { } } return ( getNotFound ( ) ) ; }
void test9 ( ) throws Throwable { HTTPNetworkManager hTTPNetworkManager0 = HTTPNetworkManager . getSingleton ( ) ; String string0 = hTTPNetworkManager0 . getPingPage ( " ? Qf011~ , y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPingPage ( String url ) { int pos = url . indexOf ( ' ' ) ; if ( pos ! = - 1 ) { url = url . substring ( 0 , pos ) ; } pos = url . indexOf ( ' ? ' ) ; Map response = new HashMap ( ) ; boolean ok = false ; if ( pos ! = - 1 ) { StringTokenizer tok = new StringTokenizer ( url . substring ( pos + 1 ) , " & " ) ; while ( tok . hasMoreTokens ( ) ) { String token = tok . nextToken ( ) ; pos = token . indexOf ( ' = ' ) ; if ( pos ! = - 1 ) { String lhs = token . substring ( 0 , pos ) ; String rhs = token . substring ( pos + 1 ) ; if ( lhs . equals ( "check" ) ) { response . put ( "check" , rhs ) ; ok = true ; } } } } if ( ok ) { try { byte [ ] bytes = BEncoder . encode ( response ) ; byte [ ] length = new byte [ 4 ] ; ByteBuffer . wrap ( length ) . putInt ( bytes . length ) ; return ( "HTTP / 1 . 1 200 OK" + NL + "Connection : Close" + NL + "Content - Length : " + ( bytes . length + 4 ) + NL + NL + new String ( length , "ISO - 8859 - 1" ) + new String ( bytes , "ISO - 8859 - 1" ) ) ; } catch ( Throwable e ) { } } return ( getNotFound ( ) ) ; }
void test0 ( ) throws Throwable { LinkedList < HTTPNetworkConnection > linkedList0 = new LinkedList < HTTPNetworkConnection > ( ) ; boolean boolean0 = HTTPNetworkConnection . checkConnections ( ( List < HTTPNetworkConnection > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkConnections ( List < HTTPNetworkConnection > connections ) { boolean some_closed = false ; HTTPNetworkConnection oldest = null ; long oldest_time = - 1 ; Iterator < HTTPNetworkConnection > it = connections . iterator ( ) ; List < HTTPNetworkConnection > timed_out = new ArrayList < HTTPNetworkConnection > ( ) ; while ( it . hasNext ( ) ) { HTTPNetworkConnection connection = ( HTTPNetworkConnection ) it . next ( ) ; long time = connection . getTimeSinceLastActivity ( ) ; if ( time > DEAD_CONNECTION_TIMEOUT_PERIOD ) { if ( connection . getRequestCount ( ) = = 0 ) { timed_out . add ( connection ) ; continue ; } } if ( time > oldest_time & & ! connection . isClosing ( ) ) { oldest_time = time ; oldest = connection ; } } for ( int i = 0 ; i < timed_out . size ( ) ; i + + ) { ( ( HTTPNetworkConnection ) timed_out . get ( i ) ) . close ( "Timeout" ) ; some_closed = true ; } if ( connections . size ( ) - timed_out . size ( ) > MAX_CON_PER_ENDPOINT ) { oldest . close ( "Too many connections from initiator" ) ; some_closed = true ; } return ( some_closed ) ; }
void test0 ( ) throws Throwable { UDPTransport uDPTransport0 = new UDPTransport ( ( ProtocolEndpointUDP ) null , ( TransportHelperFilter ) null ) ; int int0 = uDPTransport0 . getTransportMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test1 ( ) throws Throwable { UDPTransport uDPTransport0 = new UDPTransport ( ( ProtocolEndpointUDP ) null , ( TransportHelperFilter ) null ) ; uDPTransport0 . setTransportMode ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test2 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 16 ] [ 10 ] ; UDPTransport uDPTransport0 = new UDPTransport ( ( ProtocolEndpointUDP ) null , byteArray0 ) ; int int0 = uDPTransport0 . getMssSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test3 ( ) throws Throwable { UDPTransport uDPTransport0 = new UDPTransport ( ( ProtocolEndpointUDP ) null , ( TransportHelperFilter ) null ) ; uDPTransport0 . isClosed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test5 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 16 ] [ 10 ] ; UDPTransport uDPTransport0 = new UDPTransport ( ( ProtocolEndpointUDP ) null , byteArray0 ) ; String string0 = uDPTransport0 . getProtocol ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test6 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; UDPTransport uDPTransport0 = new UDPTransport ( ( ProtocolEndpointUDP ) null , ( TransportHelperFilter ) transportHelperFilterTransparent0 ) ; boolean boolean0 = uDPTransport0 . isTCP ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test7 ( ) throws Throwable { TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent ( ( TransportHelper ) tCPTransportHelper0 , true ) ; UDPTransport uDPTransport0 = new UDPTransport ( ( ProtocolEndpointUDP ) null , ( TransportHelperFilter ) transportHelperFilterTransparent0 ) ; uDPTransport0 . getTransportEndpoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test0 ( ) throws Throwable { UDPNetworkManager uDPNetworkManager0 = new UDPNetworkManager ( ) ; UDPConnectionManager uDPConnectionManager0 = uDPNetworkManager0 . getConnectionManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUDPNonDataListeningPortNumber ( ) { return ( udp_non_data_listen_port ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { UDPNetworkManager uDPNetworkManager0 = UDPNetworkManager . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { UDPNetworkManager uDPNetworkManager0 = UDPNetworkManager . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUDPListenerEnabled ( ) { return ( UDP_INCOMING_ENABLED ) ; }
void test3 ( ) throws Throwable { int int0 = UDPNetworkManager . getUdpMssSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUdpMssSize ( ) { return udp_mss_size ; }
void test4 ( ) throws Throwable { UDPNetworkManager uDPNetworkManager0 = UDPNetworkManager . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUDPListeningPortNumber ( ) { return ( udp_listen_port ) ; }
void test5 ( ) throws Throwable { UDPNetworkManager uDPNetworkManager0 = UDPNetworkManager . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUDPNonDataListenerEnabled ( ) { return ( UDP_INCOMING_ENABLED ) ; }
void test8 ( ) throws Throwable { UDPNetworkManager uDPNetworkManager0 = UDPNetworkManager . getSingleton ( ) ; UDPConnectionManager uDPConnectionManager0 = uDPNetworkManager0 . getConnectionManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxOutboundPermitted ( ) { return ( Math . max ( max_outbound_connections - new_requests . size ( ) , 0 ) ) ; }
void test0 ( ) throws Throwable { UDPConnection uDPConnection0 = new UDPConnection ( ( UDPConnectionSet ) null , ( - 6 ) ) ; int int0 = uDPConnection0 . getID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test1 ( ) throws Throwable { UDPConnection uDPConnection0 = new UDPConnection ( ( UDPConnectionSet ) null , 1921 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void failed ( Throwable e ) { if ( box ! = null ) { box . close ( 0 ) ; } }
void test2 ( ) throws Throwable { UDPConnection uDPConnection0 = new UDPConnection ( ( UDPConnectionSet ) null , ( - 2 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) { Utils . execSWTThread ( new AERunnable ( ) { void runSupport ( ) { if ( shell ! = null & & ! shell . isDisposed ( ) ) { shell . dispose ( ) ; } } } ) ; }
void test3 ( ) throws Throwable { UDPConnection uDPConnection0 = new UDPConnection ( ( UDPConnectionSet ) null , 13 ) ; uDPConnection0 . setID ( 13 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test6 ( ) throws Throwable { UDPConnection uDPConnection0 = new UDPConnection ( ( UDPConnectionSet ) null , 1921 ) ; uDPConnection0 . setTransport ( ( UDPTransportHelper ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test9 ( ) throws Throwable { UDPConnection uDPConnection0 = new UDPConnection ( ( UDPConnectionSet ) null , 18 ) ; boolean boolean0 = uDPConnection0 . isConnected ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test10 ( ) throws Throwable { UDPConnection uDPConnection0 = new UDPConnection ( ( UDPConnectionSet ) null , 1921 , ( UDPTransportHelper ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test13 ( ) throws Throwable { UDPConnection uDPConnection0 = new UDPConnection ( ( UDPConnectionSet ) null , 1921 ) ; uDPConnection0 . getTransport ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test14 ( ) throws Throwable { UDPConnection uDPConnection0 = new UDPConnection ( ( UDPConnectionSet ) null , 157 ) ; boolean boolean0 = uDPConnection0 . canRead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test15 ( ) throws Throwable { UDPConnection uDPConnection0 = new UDPConnection ( ( UDPConnectionSet ) null , 592 ) ; int int0 = uDPConnection0 . read ( ( ByteBuffer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test16 ( ) throws Throwable { UDPConnection uDPConnection0 = new UDPConnection ( ( UDPConnectionSet ) null , ( - 6 ) ) ; uDPConnection0 . poll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test0 ( ) throws Throwable { int [ ] intArray0 = new int [ 4 ] ; byte [ ] byteArray0 = new byte [ 7 ] ; UDPPacket uDPPacket0 = new UDPPacket ( ( UDPConnection ) null , intArray0 , ( byte ) ( - 1 ) , byteArray0 , ( long ) ( - 3 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getCommand ( ) { return ( command ) ; }
void test1 ( ) throws Throwable { int [ ] intArray0 = new int [ 8 ] ; byte [ ] byteArray0 = new byte [ 2 ] ; UDPPacket uDPPacket0 = new UDPPacket ( ( UDPConnection ) null , intArray0 , ( byte ) 0 , byteArray0 , ( long ) 256 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getCommand ( ) { return ( command ) ; }
void test2 ( ) throws Throwable { int [ ] intArray0 = new int [ 10 ] ; byte [ ] byteArray0 = new byte [ 10 ] ; UDPPacket uDPPacket0 = new UDPPacket ( ( UDPConnection ) null , intArray0 , ( byte ) ( - 1 ) , byteArray0 , 1217L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { int [ ] intArray0 = new int [ 9 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; UDPPacket uDPPacket0 = new UDPPacket ( ( UDPConnection ) null , intArray0 , ( byte ) 0 , byteArray0 , ( long ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test4 ( ) throws Throwable { int [ ] intArray0 = new int [ 5 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; UDPPacket uDPPacket0 = new UDPPacket ( ( UDPConnection ) null , intArray0 , ( byte ) ( - 94 ) , byteArray0 , 1092L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUnAckInSequenceCount ( ) { return ( unack_in_sequence_count ) ; }
void test5 ( ) throws Throwable { int [ ] intArray0 = new int [ 5 ] ; byte [ ] byteArray0 = new byte [ 6 ] ; UDPPacket uDPPacket0 = new UDPPacket ( ( UDPConnection ) null , intArray0 , ( byte ) 105 , byteArray0 , 1092L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getResendCount ( ) { return ( resend_count ) ; }
void test6 ( ) throws Throwable { int [ ] intArray0 = new int [ 10 ] ; byte [ ] byteArray0 = new byte [ 10 ] ; UDPPacket uDPPacket0 = new UDPPacket ( ( UDPConnection ) null , intArray0 , ( byte ) ( - 1 ) , byteArray0 , 1217L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test7 ( ) throws Throwable { int [ ] intArray0 = new int [ 4 ] ; byte [ ] byteArray0 = new byte [ 7 ] ; UDPPacket uDPPacket0 = new UDPPacket ( ( UDPConnection ) null , intArray0 , ( byte ) ( - 1 ) , byteArray0 , ( long ) ( - 3 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUnAckInSequenceCount ( ) { return ( unack_in_sequence_count ) ; }
void test8 ( ) throws Throwable { int [ ] intArray0 = new int [ 8 ] ; byte [ ] byteArray0 = new byte [ 2 ] ; UDPPacket uDPPacket0 = new UDPPacket ( ( UDPConnection ) null , intArray0 , ( byte ) 0 , byteArray0 , ( long ) 256 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUnAckInSequenceCount ( ) { return ( unack_in_sequence_count ) ; }
void test9 ( ) throws Throwable { int [ ] intArray0 = new int [ 10 ] ; byte [ ] byteArray0 = new byte [ 10 ] ; UDPPacket uDPPacket0 = new UDPPacket ( ( UDPConnection ) null , intArray0 , ( byte ) ( - 1 ) , byteArray0 , 1217L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUnAckInSequenceCount ( ) { return ( unack_in_sequence_count ) ; }
void test10 ( ) throws Throwable { int [ ] intArray0 = new int [ 4 ] ; byte [ ] byteArray0 = new byte [ 8 ] ; UDPPacket uDPPacket0 = new UDPPacket ( ( UDPConnection ) null , intArray0 , ( byte ) 82 , byteArray0 , ( long ) 1213 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSendTickCount ( ) { return ( send_tick_count ) ; }
void test11 ( ) throws Throwable { int [ ] intArray0 = new int [ 4 ] ; byte [ ] byteArray0 = new byte [ 7 ] ; UDPPacket uDPPacket0 = new UDPPacket ( ( UDPConnection ) null , intArray0 , ( byte ) ( - 1 ) , byteArray0 , ( long ) ( - 3 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAutoRetransmit ( ) { return ( auto_retransmit ) ; }
void test12 ( ) throws Throwable { int [ ] intArray0 = new int [ 10 ] ; byte [ ] byteArray0 = new byte [ 10 ] ; UDPPacket uDPPacket0 = new UDPPacket ( ( UDPConnection ) null , intArray0 , ( byte ) ( - 1 ) , byteArray0 , 1217L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUnAckInSequenceCount ( ) { return ( unack_in_sequence_count ) ; }
void test13 ( ) throws Throwable { int [ ] intArray0 = new int [ 4 ] ; byte [ ] byteArray0 = new byte [ 8 ] ; UDPPacket uDPPacket0 = new UDPPacket ( ( UDPConnection ) null , intArray0 , ( byte ) 82 , byteArray0 , ( long ) 1213 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAutoRetransmit ( ) { return ( auto_retransmit ) ; }
void test14 ( ) throws Throwable { int [ ] intArray0 = new int [ 8 ] ; byte [ ] byteArray0 = new byte [ 4 ] ; UDPPacket uDPPacket0 = new UDPPacket ( ( UDPConnection ) null , intArray0 , ( byte ) 0 , byteArray0 , ( - 1127L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getCommand ( ) { return ( command ) ; }
void test15 ( ) throws Throwable { int [ ] intArray0 = new int [ 4 ] ; byte [ ] byteArray0 = new byte [ 8 ] ; UDPPacket uDPPacket0 = new UDPPacket ( ( UDPConnection ) null , intArray0 , ( byte ) 82 , byteArray0 , ( long ) 1213 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getCommand ( ) { return ( command ) ; }
void test0 ( ) throws Throwable { NetworkGlueLoopBack networkGlueLoopBack0 = new NetworkGlueLoopBack ( ( NetworkGlueListener ) null ) ; long [ ] longArray0 = networkGlueLoopBack0 . getStats ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NetworkManagerStats getStats ( ) { return ( stats ) ; }
void test0 ( ) throws Throwable { TransportEndpointUDP transportEndpointUDP0 = new TransportEndpointUDP ( ( ProtocolEndpoint ) null ) ; ProtocolEndpoint protocolEndpoint0 = transportEndpointUDP0 . getProtocolEndpoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ProtocolEndpoint getProtocolEndpoint ( ) ; }
void test0 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 0 ) ; UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , ( String ) null , ( UDPSelector ) null , 0 , inetSocketAddress0 ) ; uDPConnectionSet0 . stopKeepAliveTimer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExplicitAckTicks ( ) { int timer_to_use ; ( this ) { if ( timer_is_adjusting ) { if ( current_timer_base > old_timer_base ) { timer_to_use = old_timer_base ; } else { timer_to_use = current_timer_base ; } } else { timer_to_use = current_timer_base ; } } return ( Math . max ( 1 , timer_to_use / UDPConnectionManager . TIMER_TICK_MILLIS ) ) ; }
void test1 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 0 ) ; UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , ( String ) null , ( UDPSelector ) null , 0 , inetSocketAddress0 ) ; uDPConnectionSet0 . getSelector ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExplicitAckTicks ( ) { int timer_to_use ; ( this ) { if ( timer_is_adjusting ) { if ( current_timer_base > old_timer_base ) { timer_to_use = old_timer_base ; } else { timer_to_use = current_timer_base ; } } else { timer_to_use = current_timer_base ; } } return ( Math . max ( 1 , timer_to_use / UDPConnectionManager . TIMER_TICK_MILLIS ) ) ; }
void test2 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 0 ) ; UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , ( String ) null , ( UDPSelector ) null , 0 , inetSocketAddress0 ) ; byte [ ] byteArray0 = new byte [ 19 ] ; RC2Parameters rC2Parameters0 = new RC2Parameters ( byteArray0 , 0 ) ; ParametersWithRandom parametersWithRandom0 = new ParametersWithRandom ( ( CipherParameters ) rC2Parameters0 ) ; SecureRandom secureRandom0 = parametersWithRandom0 . getRandom ( ) ; RC4Engine rC4Engine0 = uDPConnectionSet0 . getCipher ( byteArray0 ) ; UDPConnectionSet . SequenceGenerator uDPConnectionSet_SequenceGenerator0 = uDPConnectionSet0 . new SequenceGenerator ( ( Random ) secureRandom0 , rC4Engine0 , false ) ; uDPConnectionSet_SequenceGenerator0 . getNextSequenceNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nextInt ( int n ) { return RANDOM . nextInt ( n ) ; }
void test5 ( ) throws Throwable { UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , "Alg . Alias . Mac . RC2" , ( UDPSelector ) null , ( - 1765 ) , ( InetSocketAddress ) null ) ; String string0 = uDPConnectionSet0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExplicitAckTicks ( ) { int timer_to_use ; ( this ) { if ( timer_is_adjusting ) { if ( current_timer_base > old_timer_base ) { timer_to_use = old_timer_base ; } else { timer_to_use = current_timer_base ; } } else { timer_to_use = current_timer_base ; } } return ( Math . max ( 1 , timer_to_use / UDPConnectionManager . TIMER_TICK_MILLIS ) ) ; }
void test7 ( ) throws Throwable { UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , "2F > 1u6G ? l & s9h$ & e" , ( UDPSelector ) null , 1 , ( InetSocketAddress ) null ) ; String string0 = uDPConnectionSet0 . getKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExplicitAckTicks ( ) { int timer_to_use ; ( this ) { if ( timer_is_adjusting ) { if ( current_timer_base > old_timer_base ) { timer_to_use = old_timer_base ; } else { timer_to_use = current_timer_base ; } } else { timer_to_use = current_timer_base ; } } return ( Math . max ( 1 , timer_to_use / UDPConnectionManager . TIMER_TICK_MILLIS ) ) ; }
void test8 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 0 ) ; UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , ( String ) null , ( UDPSelector ) null , 0 , inetSocketAddress0 ) ; uDPConnectionSet0 . resetTimerStats ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExplicitAckTicks ( ) { int timer_to_use ; ( this ) { if ( timer_is_adjusting ) { if ( current_timer_base > old_timer_base ) { timer_to_use = old_timer_base ; } else { timer_to_use = current_timer_base ; } } else { timer_to_use = current_timer_base ; } } return ( Math . max ( 1 , timer_to_use / UDPConnectionManager . TIMER_TICK_MILLIS ) ) ; }
void test9 ( ) throws Throwable { Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getByName ( ( String ) null ) ; InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( ( InetAddress ) inet4Address0 , 986 ) ; UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , "" , ( UDPSelector ) null , 0 , inetSocketAddress0 ) ; uDPConnectionSet0 . hasFailed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExplicitAckTicks ( ) { int timer_to_use ; ( this ) { if ( timer_is_adjusting ) { if ( current_timer_base > old_timer_base ) { timer_to_use = old_timer_base ; } else { timer_to_use = current_timer_base ; } } else { timer_to_use = current_timer_base ; } } return ( Math . max ( 1 , timer_to_use / UDPConnectionManager . TIMER_TICK_MILLIS ) ) ; }
void test10 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 0 ) ; UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , ( String ) null , ( UDPSelector ) null , 0 , inetSocketAddress0 ) ; InetSocketAddress inetSocketAddress1 = uDPConnectionSet0 . getRemoteAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRetransmitTicks ( ) { int timer_to_use ; ( this ) { if ( timer_is_adjusting ) { if ( current_timer_base > old_timer_base ) { timer_to_use = current_timer_base ; } else { timer_to_use = old_timer_base ; } } else { timer_to_use = current_timer_base ; } } / / 5 / 3 of base int timer = ( timer_to_use * 5 ) / 3 ; return ( Math . max ( 1 , timer / UDPConnectionManager . TIMER_TICK_MILLIS ) ) ; }
void test11 ( ) throws Throwable { UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , "2F > 1u6G ? l & s9h$ & e" , ( UDPSelector ) null , 1 , ( InetSocketAddress ) null ) ; uDPConnectionSet0 . removed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRetransmitTicks ( ) { int timer_to_use ; ( this ) { if ( timer_is_adjusting ) { if ( current_timer_base > old_timer_base ) { timer_to_use = current_timer_base ; } else { timer_to_use = old_timer_base ; } } else { timer_to_use = current_timer_base ; } } / / 5 / 3 of base int timer = ( timer_to_use * 5 ) / 3 ; return ( Math . max ( 1 , timer / UDPConnectionManager . TIMER_TICK_MILLIS ) ) ; }
void test12 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = InetSocketAddress . createUnresolved ( "" , 48 ) ; UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , "" , ( UDPSelector ) null , 0 , inetSocketAddress0 ) ; uDPConnectionSet0 . poll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExplicitAckTicks ( ) { int timer_to_use ; ( this ) { if ( timer_is_adjusting ) { if ( current_timer_base > old_timer_base ) { timer_to_use = old_timer_base ; } else { timer_to_use = current_timer_base ; } } else { timer_to_use = current_timer_base ; } } return ( Math . max ( 1 , timer_to_use / UDPConnectionManager . TIMER_TICK_MILLIS ) ) ; }
void test15 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 0 ) ; UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , ( String ) null , ( UDPSelector ) null , 0 , inetSocketAddress0 ) ; uDPConnectionSet0 . timerTick ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExplicitAckTicks ( ) { int timer_to_use ; ( this ) { if ( timer_is_adjusting ) { if ( current_timer_base > old_timer_base ) { timer_to_use = old_timer_base ; } else { timer_to_use = current_timer_base ; } } else { timer_to_use = current_timer_base ; } } return ( Math . max ( 1 , timer_to_use / UDPConnectionManager . TIMER_TICK_MILLIS ) ) ; }
void test16 ( ) throws Throwable { UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , "2F > 1u6G ? l & s9h$ & e" , ( UDPSelector ) null , 389 , ( InetSocketAddress ) null ) ; uDPConnectionSet0 . startKeepAliveTimer ( ) ; uDPConnectionSet0 . timerTick ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExplicitAckTicks ( ) { int timer_to_use ; ( this ) { if ( timer_is_adjusting ) { if ( current_timer_base > old_timer_base ) { timer_to_use = old_timer_base ; } else { timer_to_use = current_timer_base ; } } else { timer_to_use = current_timer_base ; } } return ( Math . max ( 1 , timer_to_use / UDPConnectionManager . TIMER_TICK_MILLIS ) ) ; }
void test17 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 0 ) ; UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , ( String ) null , ( UDPSelector ) null , 0 , inetSocketAddress0 ) ; int int0 = uDPConnectionSet0 . getExplicitAckTicks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExplicitAckTicks ( ) { int timer_to_use ; ( this ) { if ( timer_is_adjusting ) { if ( current_timer_base > old_timer_base ) { timer_to_use = old_timer_base ; } else { timer_to_use = current_timer_base ; } } else { timer_to_use = current_timer_base ; } } return ( Math . max ( 1 , timer_to_use / UDPConnectionManager . TIMER_TICK_MILLIS ) ) ; }
void test18 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 0 ) ; UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , ( String ) null , ( UDPSelector ) null , 0 , inetSocketAddress0 ) ; boolean boolean0 = uDPConnectionSet0 . idleLimitExceeded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean idleLimitExceeded ( ) { if ( idle_ticks > IDLE_TICKS + ( int ) ( Math . random ( ) * 2000 ) ) { ( connections ) { if ( connections . size ( ) = = 0 ) { failed = true ; return ( true ) ; } } } return ( false ) ; }
void test19 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = InetSocketAddress . createUnresolved ( "" , 48 ) ; UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , "" , ( UDPSelector ) null , 0 , inetSocketAddress0 ) ; uDPConnectionSet0 . retransmitExpired ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRetransmitTicks ( ) { int timer_to_use ; ( this ) { if ( timer_is_adjusting ) { if ( current_timer_base > old_timer_base ) { timer_to_use = current_timer_base ; } else { timer_to_use = old_timer_base ; } } else { timer_to_use = current_timer_base ; } } / / 5 / 3 of base int timer = ( timer_to_use * 5 ) / 3 ; return ( Math . max ( 1 , timer / UDPConnectionManager . TIMER_TICK_MILLIS ) ) ; }
void test20 ( ) throws Throwable { UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , "2F > 1u6G ? l & s9h$ & e" , ( UDPSelector ) null , 1 , ( InetSocketAddress ) null ) ; int int0 = uDPConnectionSet0 . getRetransmitTicks ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRetransmitTicks ( ) { int timer_to_use ; ( this ) { if ( timer_is_adjusting ) { if ( current_timer_base > old_timer_base ) { timer_to_use = current_timer_base ; } else { timer_to_use = old_timer_base ; } } else { timer_to_use = current_timer_base ; } } / / 5 / 3 of base int timer = ( timer_to_use * 5 ) / 3 ; return ( Math . max ( 1 , timer / UDPConnectionManager . TIMER_TICK_MILLIS ) ) ; }
void test21 ( ) throws Throwable { Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getByName ( ( String ) null ) ; InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( ( InetAddress ) inet4Address0 , 986 ) ; UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , "" , ( UDPSelector ) null , 0 , inetSocketAddress0 ) ; int int0 = uDPConnectionSet0 . getRetransmitTicks ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRetransmitTicks ( ) { int timer_to_use ; ( this ) { if ( timer_is_adjusting ) { if ( current_timer_base > old_timer_base ) { timer_to_use = current_timer_base ; } else { timer_to_use = old_timer_base ; } } else { timer_to_use = current_timer_base ; } } / / 5 / 3 of base int timer = ( timer_to_use * 5 ) / 3 ; return ( Math . max ( 1 , timer / UDPConnectionManager . TIMER_TICK_MILLIS ) ) ; }
void test22 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 0 ) ; UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , ( String ) null , ( UDPSelector ) null , 0 , inetSocketAddress0 ) ; boolean boolean0 = uDPConnectionSet0 . remoteLastInSequence ( ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExplicitAckTicks ( ) { int timer_to_use ; ( this ) { if ( timer_is_adjusting ) { if ( current_timer_base > old_timer_base ) { timer_to_use = old_timer_base ; } else { timer_to_use = current_timer_base ; } } else { timer_to_use = current_timer_base ; } } return ( Math . max ( 1 , timer_to_use / UDPConnectionManager . TIMER_TICK_MILLIS ) ) ; }
void test37 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 0 ) ; UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , ( String ) null , ( UDPSelector ) null , 0 , inetSocketAddress0 ) ; byte [ ] byteArray0 = new byte [ 20 ] ; RC2Parameters rC2Parameters0 = new RC2Parameters ( byteArray0 , 0 ) ; ParametersWithRandom parametersWithRandom0 = new ParametersWithRandom ( ( CipherParameters ) rC2Parameters0 ) ; SecureRandom secureRandom0 = parametersWithRandom0 . getRandom ( ) ; RC4Engine rC4Engine0 = uDPConnectionSet0 . getCipher ( byteArray0 ) ; UDPConnectionSet . SequenceGenerator uDPConnectionSet_SequenceGenerator0 = uDPConnectionSet0 . new SequenceGenerator ( ( Random ) secureRandom0 , rC4Engine0 , false ) ; boolean boolean0 = uDPConnectionSet_SequenceGenerator0 . isValidAlterativeSequence ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nextInt ( int n ) { return RANDOM . nextInt ( n ) ; }
void test38 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 0 ) ; UDPConnectionSet uDPConnectionSet0 = new UDPConnectionSet ( ( UDPConnectionManager ) null , ( String ) null , ( UDPSelector ) null , 0 , inetSocketAddress0 ) ; byte [ ] byteArray0 = new byte [ 19 ] ; RC2Parameters rC2Parameters0 = new RC2Parameters ( byteArray0 , 0 ) ; ParametersWithRandom parametersWithRandom0 = new ParametersWithRandom ( ( CipherParameters ) rC2Parameters0 ) ; SecureRandom secureRandom0 = parametersWithRandom0 . getRandom ( ) ; RC4Engine rC4Engine0 = uDPConnectionSet0 . getCipher ( byteArray0 ) ; UDPConnectionSet . SequenceGenerator uDPConnectionSet_SequenceGenerator0 = uDPConnectionSet0 . new SequenceGenerator ( ( Random ) secureRandom0 , rC4Engine0 , false ) ; boolean boolean0 = uDPConnectionSet_SequenceGenerator0 . isValidAlterativeSequence ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long nextLong ( ) { return RANDOM . nextLong ( ) ; }
void test0 ( ) throws Throwable { UDPSelector uDPSelector0 = new UDPSelector ( ( UDPConnectionManager ) null ) ; TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; uDPSelector0 . ready ( ( TransportHelper ) tCPTransportHelper0 , ( TransportHelper . selectListener ) null , ( Object ) "BT_REQUEST" ) ; uDPSelector0 . ready ( ( TransportHelper ) tCPTransportHelper0 , ( TransportHelper . selectListener ) null , ( Object ) "BT_DHT_PORT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReadTimeout ( ) ; boolean delayWrite ( ByteBuffer buffer ) ; boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test5 ( ) throws Throwable { UDPSelector uDPSelector0 = new UDPSelector ( ( UDPConnectionManager ) null ) ; TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; uDPSelector0 . ready ( ( TransportHelper ) tCPTransportHelper0 , ( TransportHelper . selectListener ) null , ( Object ) "BT_REQUEST" ) ; uDPSelector0 . cancel ( ( TransportHelper ) tCPTransportHelper0 , ( TransportHelper . selectListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean minimiseOverheads ( ) ; int getConnectTimeout ( ) ; int getReadTimeout ( ) ; boolean delayWrite ( ByteBuffer buffer ) ; boolean hasDelayedWrite ( ) ; int write ( ByteBuffer buffer , boolean partial_write ) throws IOException ; long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; int read ( ByteBuffer buffer ) throws IOException ; long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; void pauseReadSelects ( ) ; void pauseWriteSelects ( ) ; void resumeReadSelects ( ) ; void resumeWriteSelects ( ) ; void registerForReadSelects ( selectListener listener , Object attachment ) ; void registerForWriteSelects ( selectListener listener , Object attachment ) ; void cancelReadSelects ( ) ; void cancelWriteSelects ( ) ; boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test6 ( ) throws Throwable { UDPSelector uDPSelector0 = new UDPSelector ( ( UDPConnectionManager ) null ) ; TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper ( ( SocketChannel ) null ) ; uDPSelector0 . ready ( ( TransportHelper ) tCPTransportHelper0 , ( TransportHelper . selectListener ) null , ( Object ) "BT_REQUEST" ) ; TCPTransportHelper tCPTransportHelper1 = new TCPTransportHelper ( ( SocketChannel ) null ) ; uDPSelector0 . cancel ( ( TransportHelper ) tCPTransportHelper1 , ( TransportHelper . selectListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) ; void close ( String reason ) ; void failed ( Throwable reason ) ; interface selectListener { boolean selectSuccess ( TransportHelper helper , Object attachment ) ; void selectFailure ( TransportHelper helper , Object attachment , Throwable msg ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { UDPConnectionManager uDPConnectionManager0 = new UDPConnectionManager ( ) ; uDPConnectionManager0 . trace ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { NetworkAdminImpl networkAdminImpl0 = ( NetworkAdminImpl ) NetworkAdmin . getSingleton ( ) ; Inet4Address inet4Address0 = ( Inet4Address ) networkAdminImpl0 . getSingleHomedServiceBindAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { NetworkAdminSpeedTestSchedulerImpl networkAdminSpeedTestSchedulerImpl0 = ( NetworkAdminSpeedTestSchedulerImpl ) NetworkAdminSpeedTestSchedulerImpl . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test0 ( ) throws Throwable { NetworkAdminNATUDPCodecs networkAdminNATUDPCodecs0 = new NetworkAdminNATUDPCodecs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { NetworkAdminNATUDPRequest networkAdminNATUDPRequest0 = new NetworkAdminNATUDPRequest ( ( - 1387L ) ) ; networkAdminNATUDPRequest0 . setPayload ( ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransactionId ( ) { return ( transaction_id ) ; }
void test1 ( ) throws Throwable { NetworkAdminNATUDPRequest networkAdminNATUDPRequest0 = new NetworkAdminNATUDPRequest ( 0L ) ; networkAdminNATUDPRequest0 . getPayload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransactionId ( ) { return ( transaction_id ) ; }
void test2 ( ) throws Throwable { NetworkAdminNATUDPRequest networkAdminNATUDPRequest0 = new NetworkAdminNATUDPRequest ( 32L ) ; String string0 = networkAdminNATUDPRequest0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { NetworkAdminNATUDPRequest networkAdminNATUDPRequest0 = new NetworkAdminNATUDPRequest ( 2147483647L ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; DataOutputStream dataOutputStream0 = new DataOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; networkAdminNATUDPRequest0 . serialise ( dataOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test3 ( ) throws Throwable { NetworkAdminNATDeviceImpl networkAdminNATDeviceImpl0 = new NetworkAdminNATDeviceImpl ( ( UPnPPluginService ) null ) ; Inet4Address inet4Address0 = ( Inet4Address ) networkAdminNATDeviceImpl0 . getExternalAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InetAddress getExternalAddress ( ) ; String getString ( ) ; }
void test0 ( ) throws Throwable { NetworkAdminUDPTester networkAdminUDPTester0 = new NetworkAdminUDPTester ( ( AzureusCore ) null , ( NetworkAdminProgressListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NetworkAdminUDPTester ( AzureusCore _core , NetworkAdminProgressListener _listener ) { core = _core ; listener = _listener ; }
void test0 ( ) throws Throwable { NetworkAdminASNImpl networkAdminASNImpl0 = new NetworkAdminASNImpl ( " / 3" , " / 3" , " / 3" ) ; networkAdminASNImpl0 . setASName ( "as = / 3 , asn = / 3 , bgp_prefx = / 3 [ localhost / 127 . 0 . 0 . 1 - / 127 . 255 . 255 . 255 ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test1 ( ) throws Throwable { NetworkAdminASNImpl networkAdminASNImpl0 = new NetworkAdminASNImpl ( " / 3" , " / 3" , " / 3" ) ; String string0 = networkAdminASNImpl0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test2 ( ) throws Throwable { NetworkAdminASNImpl networkAdminASNImpl0 = new NetworkAdminASNImpl ( "" , "" , "" ) ; boolean boolean0 = networkAdminASNImpl0 . sameAs ( ( NetworkAdminASN ) networkAdminASNImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { NetworkAdminASNImpl networkAdminASNImpl0 = new NetworkAdminASNImpl ( ( String ) null , ( String ) null , ( String ) null ) ; String string0 = networkAdminASNImpl0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test4 ( ) throws Throwable { NetworkAdminASNImpl networkAdminASNImpl0 = new NetworkAdminASNImpl ( ( String ) null , ( String ) null , ( String ) null ) ; boolean boolean0 = networkAdminASNImpl0 . matchesCIDR ( ( InetAddress ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchesCIDR ( InetAddress address ) ; boolean sameAs ( NetworkAdminASN other ) ; String getString ( ) ; }
void test5 ( ) throws Throwable { NetworkAdminASNImpl networkAdminASNImpl0 = new NetworkAdminASNImpl ( "" , "" , "" ) ; boolean boolean0 = networkAdminASNImpl0 . matchesCIDR ( ( InetAddress ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchesCIDR ( InetAddress address ) ; boolean sameAs ( NetworkAdminASN other ) ; String getString ( ) ; }
void test6 ( ) throws Throwable { NetworkAdminASNImpl networkAdminASNImpl0 = new NetworkAdminASNImpl ( " / 3" , " / 3" , " / 3" ) ; byte [ ] byteArray0 = new byte [ 4 ] ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getByAddress ( " / 3" , byteArray0 ) ; boolean boolean0 = networkAdminASNImpl0 . matchesCIDR ( ( InetAddress ) inet4Address0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test7 ( ) throws Throwable { NetworkAdminASNImpl networkAdminASNImpl0 = new NetworkAdminASNImpl ( " / 3" , " / 3" , " / 3" ) ; Inet4Address inet4Address0 = ( Inet4Address ) networkAdminASNImpl0 . getCIDREndAddress ( ) ; boolean boolean0 = networkAdminASNImpl0 . matchesCIDR ( ( InetAddress ) inet4Address0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { NetworkAdminNATUDPReply networkAdminNATUDPReply0 = new NetworkAdminNATUDPReply ( 1755 ) ; networkAdminNATUDPReply0 . setPayload ( ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasContinuation ( ) { return ( has_continuation ) ; }
void test2 ( ) throws Throwable { NetworkAdminNATUDPReply networkAdminNATUDPReply0 = new NetworkAdminNATUDPReply ( 1755 ) ; String string0 = networkAdminNATUDPReply0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { NetworkAdminNATUDPReply networkAdminNATUDPReply0 = new NetworkAdminNATUDPReply ( 1 ) ; Map < Object , Object > map0 = networkAdminNATUDPReply0 . getPayload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getPayload ( ) { return ( payload ) ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test11 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test16 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test17 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test18 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test19 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test20 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test21 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test22 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test23 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test24 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test25 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test26 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test27 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test28 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test29 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test30 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test31 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test32 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { NetworkAdminSpeedTesterBTImpl networkAdminSpeedTesterBTImpl0 = new NetworkAdminSpeedTesterBTImpl ( ( PluginInterface ) null ) ; NetworkAdminSpeedTesterBTImpl . BitTorrentResult networkAdminSpeedTesterBTImpl_BitTorrentResult0 = networkAdminSpeedTesterBTImpl0 . new BitTorrentResult ( " ( ) ArDa [ " ) ; String string0 = networkAdminSpeedTesterBTImpl_BitTorrentResult0 . getLastError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLastError ( ) ; }
void test1 ( ) throws Throwable { NetworkAdminSpeedTesterBTImpl networkAdminSpeedTesterBTImpl0 = new NetworkAdminSpeedTesterBTImpl ( ( PluginInterface ) null ) ; NetworkAdminSpeedTesterBTImpl . BitTorrentResult networkAdminSpeedTesterBTImpl_BitTorrentResult0 = networkAdminSpeedTesterBTImpl0 . new BitTorrentResult ( "^ {  & ahtT3 W4muUL" ) ; int int0 = networkAdminSpeedTesterBTImpl_BitTorrentResult0 . getUploadSpeed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { NetworkAdminSpeedTesterBTImpl networkAdminSpeedTesterBTImpl0 = new NetworkAdminSpeedTesterBTImpl ( ( PluginInterface ) null ) ; NetworkAdminSpeedTesterBTImpl . BitTorrentResult networkAdminSpeedTesterBTImpl_BitTorrentResult0 = networkAdminSpeedTesterBTImpl0 . new BitTorrentResult ( "^ {  & ahtT3 W4muUL" ) ; NetworkAdminSpeedTesterBTImpl networkAdminSpeedTesterBTImpl1 = ( NetworkAdminSpeedTesterBTImpl ) networkAdminSpeedTesterBTImpl_BitTorrentResult0 . getTest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { NetworkAdminSpeedTesterBTImpl networkAdminSpeedTesterBTImpl0 = new NetworkAdminSpeedTesterBTImpl ( ( PluginInterface ) null ) ; NetworkAdminSpeedTesterBTImpl . BitTorrentResult networkAdminSpeedTesterBTImpl_BitTorrentResult0 = networkAdminSpeedTesterBTImpl0 . new BitTorrentResult ( " ( ) ArDa [ " ) ; networkAdminSpeedTesterBTImpl_BitTorrentResult0 . getTestTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hadError ( ) ; String getLastError ( ) ; }
void test5 ( ) throws Throwable { NetworkAdminSpeedTesterBTImpl networkAdminSpeedTesterBTImpl0 = new NetworkAdminSpeedTesterBTImpl ( ( PluginInterface ) null ) ; NetworkAdminSpeedTesterBTImpl . BitTorrentResult networkAdminSpeedTesterBTImpl_BitTorrentResult0 = networkAdminSpeedTesterBTImpl0 . new BitTorrentResult ( " ( ) ArDa [ " ) ; boolean boolean0 = networkAdminSpeedTesterBTImpl_BitTorrentResult0 . hadError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLastError ( ) ; }
void test6 ( ) throws Throwable { NetworkAdminSpeedTesterBTImpl networkAdminSpeedTesterBTImpl0 = new NetworkAdminSpeedTesterBTImpl ( ( PluginInterface ) null ) ; NetworkAdminSpeedTesterBTImpl . BitTorrentResult networkAdminSpeedTesterBTImpl_BitTorrentResult0 = networkAdminSpeedTesterBTImpl0 . new BitTorrentResult ( " ( ) ArDa [ " ) ; int int0 = networkAdminSpeedTesterBTImpl_BitTorrentResult0 . getDownloadSpeed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test7 ( ) throws Throwable { NetworkAdminSpeedTesterBTImpl networkAdminSpeedTesterBTImpl0 = new NetworkAdminSpeedTesterBTImpl ( ( PluginInterface ) null ) ; int int0 = networkAdminSpeedTesterBTImpl0 . getTestType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTestType ( ) ; void setMode ( int mode ) ; int getMode ( ) ; void setUseCrypto ( boolean use_crypto ) ; boolean getUseCrypto ( ) ; void addListener ( NetworkAdminSpeedTesterListener listener ) ; void removeListener ( NetworkAdminSpeedTesterListener listener ) ; }
void test8 ( ) throws Throwable { NetworkAdminSpeedTesterBTImpl networkAdminSpeedTesterBTImpl0 = new NetworkAdminSpeedTesterBTImpl ( ( PluginInterface ) null ) ; networkAdminSpeedTesterBTImpl0 . setMode ( 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMode ( ) { boolean isFull = hasFullLicence ( ) ; boolean isTrial = hasFullBurn ( ) & & ! isFull ; return isFull ? "plus" : isTrial ? "trial" : "free" ; }
void test9 ( ) throws Throwable { NetworkAdminSpeedTesterBTImpl networkAdminSpeedTesterBTImpl0 = new NetworkAdminSpeedTesterBTImpl ( ( PluginInterface ) null ) ; NetworkAdminSpeedTesterResult networkAdminSpeedTesterResult0 = networkAdminSpeedTesterBTImpl0 . getResult ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NetworkAdminSpeedTesterResult getResult ( ) { return lastResult ; }
void test10 ( ) throws Throwable { NetworkAdminSpeedTesterResult networkAdminSpeedTesterResult0 = NetworkAdminSpeedTesterBTImpl . getLastResult ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NetworkAdminSpeedTesterResult getLastResult ( int type ) ; }
void test11 ( ) throws Throwable { NetworkAdminSpeedTesterBTImpl networkAdminSpeedTesterBTImpl0 = new NetworkAdminSpeedTesterBTImpl ( ( PluginInterface ) null ) ; boolean boolean0 = networkAdminSpeedTesterBTImpl0 . getUseCrypto ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseCrypto ( ) ; void addListener ( NetworkAdminSpeedTesterListener listener ) ; void removeListener ( NetworkAdminSpeedTesterListener listener ) ; }
void test12 ( ) throws Throwable { NetworkAdminSpeedTesterBTImpl networkAdminSpeedTesterBTImpl0 = new NetworkAdminSpeedTesterBTImpl ( ( PluginInterface ) null ) ; NetworkAdminSpeedTesterBTImpl . BitTorrentResult networkAdminSpeedTesterBTImpl_BitTorrentResult0 = networkAdminSpeedTesterBTImpl0 . new BitTorrentResult ( "^ {  & ahtT3 W4muUL" ) ; networkAdminSpeedTesterBTImpl0 . complete ( ( NetworkAdminSpeedTesterResult ) networkAdminSpeedTesterBTImpl_BitTorrentResult0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hadError ( ) ; String getLastError ( ) ; }
void test13 ( ) throws Throwable { NetworkAdminSpeedTesterBTImpl networkAdminSpeedTesterBTImpl0 = new NetworkAdminSpeedTesterBTImpl ( ( PluginInterface ) null ) ; networkAdminSpeedTesterBTImpl0 . start ( ( TOTorrent ) null ) ; networkAdminSpeedTesterBTImpl0 . start ( ( TOTorrent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMode ( ) { boolean isFull = hasFullLicence ( ) ; boolean isTrial = hasFullBurn ( ) & & ! isFull ; return isFull ? "plus" : isTrial ? "trial" : "free" ; }
void test14 ( ) throws Throwable { NetworkAdminSpeedTesterBTImpl networkAdminSpeedTesterBTImpl0 = new NetworkAdminSpeedTesterBTImpl ( ( PluginInterface ) null ) ; networkAdminSpeedTesterBTImpl0 . abort ( " ( ) ArDa [ " , ( Throwable ) null ) ; networkAdminSpeedTesterBTImpl0 . abort ( " ( ) ArDa [ " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTestType ( ) ; void setMode ( int mode ) ; int getMode ( ) ; void setUseCrypto ( boolean use_crypto ) ; boolean getUseCrypto ( ) ; void addListener ( NetworkAdminSpeedTesterListener listener ) ; void removeListener ( NetworkAdminSpeedTesterListener listener ) ; }
void test15 ( ) throws Throwable { NetworkAdminSpeedTesterBTImpl networkAdminSpeedTesterBTImpl0 = new NetworkAdminSpeedTesterBTImpl ( ( PluginInterface ) null ) ; NetworkAdminSpeedTesterBTImpl . BitTorrentResult networkAdminSpeedTesterBTImpl_BitTorrentResult0 = networkAdminSpeedTesterBTImpl0 . new BitTorrentResult ( "nQlJ : cAw ( V / Q`4Mx" ) ; networkAdminSpeedTesterBTImpl0 . setUseCrypto ( true ) ; String string0 = networkAdminSpeedTesterBTImpl_BitTorrentResult0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseCrypto ( ) ; void addListener ( NetworkAdminSpeedTesterListener listener ) ; void removeListener ( NetworkAdminSpeedTesterListener listener ) ; }
void test16 ( ) throws Throwable { NetworkAdminSpeedTesterBTImpl networkAdminSpeedTesterBTImpl0 = new NetworkAdminSpeedTesterBTImpl ( ( PluginInterface ) null ) ; NetworkAdminSpeedTesterBTImpl . BitTorrentResult networkAdminSpeedTesterBTImpl_BitTorrentResult0 = networkAdminSpeedTesterBTImpl0 . new BitTorrentResult ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { NetworkAdminProtocolImpl networkAdminProtocolImpl0 = new NetworkAdminProtocolImpl ( ( AzureusCore ) null , 0 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test0 ( ) throws Throwable { NetworkAdminHTTPProxyImpl networkAdminHTTPProxyImpl0 = new NetworkAdminHTTPProxyImpl ( ) ; NetworkAdminHTTPProxyImpl . ProxyDetails networkAdminHTTPProxyImpl_ProxyDetails0 = networkAdminHTTPProxyImpl0 . new ProxyDetails ( " failed to query proxy - Connect failed" , " failed to query proxy - Connect failed" , " failed to query proxy - Connect failed" ) ; String string0 = networkAdminHTTPProxyImpl_ProxyDetails0 . getAuthenticationType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NetworkAdminHTTPProxyImpl ( ) { http_host = System . getProperty ( "http . proxyHost" , "" ) . trim ( ) ; http_port = System . getProperty ( "http . proxyPort" , "" ) . trim ( ) ; https_host = System . getProperty ( "https . proxyHost" , "" ) . trim ( ) ; https_port = System . getProperty ( "https . proxyPort" , "" ) . trim ( ) ; user = System . getProperty ( "http . proxyUser" , "" ) . trim ( ) ; password = System . getProperty ( "http . proxyPassword" , "" ) . trim ( ) ; String nph = System . getProperty ( "http . nonProxyHosts" , "" ) . trim ( ) ; StringTokenizer tok = new StringTokenizer ( nph , " | " ) ; non_proxy_hosts = new String [ tok . countTokens ( ) ] ; int pos = 0 ; while ( tok . hasMoreTokens ( ) ) { non_proxy_hosts [ pos + + ] = tok . nextToken ( ) ; } }
void test1 ( ) throws Throwable { NetworkAdminHTTPProxyImpl networkAdminHTTPProxyImpl0 = new NetworkAdminHTTPProxyImpl ( ) ; NetworkAdminHTTPProxyImpl . ProxyDetails networkAdminHTTPProxyImpl_ProxyDetails0 = networkAdminHTTPProxyImpl0 . new ProxyDetails ( " failed to query proxy - Connect failed" , " failed to query proxy - Connect failed" , " failed to query proxy - Connect failed" ) ; String string0 = networkAdminHTTPProxyImpl_ProxyDetails0 . getServerName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServerName ( ) { return ( System . getProperty ( "os . name" ) + " / " + System . getProperty ( "os . version" ) + " UPnP / 1 . 0 " + Constants . AZUREUS_NAME + " / " + Constants . AZUREUS_VERSION ) ; }
void test2 ( ) throws Throwable { NetworkAdminHTTPProxyImpl networkAdminHTTPProxyImpl0 = new NetworkAdminHTTPProxyImpl ( ) ; NetworkAdminHTTPProxyImpl . ProxyDetails networkAdminHTTPProxyImpl_ProxyDetails0 = networkAdminHTTPProxyImpl0 . new ProxyDetails ( " failed to query proxy - Connect failed" , " failed to query proxy - Connect failed" , " failed to query proxy - Connect failed" ) ; String string0 = networkAdminHTTPProxyImpl_ProxyDetails0 . getResponse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < byte [ ] > getResponse ( ) { return ( response ) ; }
void test3 ( ) throws Throwable { NetworkAdminHTTPProxyImpl networkAdminHTTPProxyImpl0 = new NetworkAdminHTTPProxyImpl ( ) ; String [ ] stringArray0 = networkAdminHTTPProxyImpl0 . getNonProxyHosts ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getNonProxyHosts ( ) ; Details getDetails ( ) throws NetworkAdminException ; String getString ( ) ; interface Details { String getServerName ( ) ; String getResponse ( ) ; String getAuthenticationType ( ) ; }
void test4 ( ) throws Throwable { NetworkAdminHTTPProxyImpl networkAdminHTTPProxyImpl0 = new NetworkAdminHTTPProxyImpl ( ) ; String string0 = networkAdminHTTPProxyImpl0 . getUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUser ( ) ; String [ ] getNonProxyHosts ( ) ; Details getDetails ( ) throws NetworkAdminException ; String getString ( ) ; interface Details { String getServerName ( ) ; String getResponse ( ) ; String getAuthenticationType ( ) ; }
void test5 ( ) throws Throwable { NetworkAdminHTTPProxyImpl networkAdminHTTPProxyImpl0 = new NetworkAdminHTTPProxyImpl ( ) ; String string0 = networkAdminHTTPProxyImpl0 . getHTTPPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHTTPPort ( ) ; String getHTTPSHost ( ) ; String getHTTPSPort ( ) ; String getUser ( ) ; String [ ] getNonProxyHosts ( ) ; Details getDetails ( ) throws NetworkAdminException ; String getString ( ) ; interface Details { String getServerName ( ) ; String getResponse ( ) ; String getAuthenticationType ( ) ; }
void test6 ( ) throws Throwable { NetworkAdminHTTPProxyImpl networkAdminHTTPProxyImpl0 = new NetworkAdminHTTPProxyImpl ( ) ; String string0 = networkAdminHTTPProxyImpl0 . getHTTPSHost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHTTPSHost ( ) ; String getHTTPSPort ( ) ; String getUser ( ) ; String [ ] getNonProxyHosts ( ) ; Details getDetails ( ) throws NetworkAdminException ; String getString ( ) ; interface Details { String getServerName ( ) ; String getResponse ( ) ; String getAuthenticationType ( ) ; }
void test7 ( ) throws Throwable { NetworkAdminHTTPProxyImpl networkAdminHTTPProxyImpl0 = new NetworkAdminHTTPProxyImpl ( ) ; String string0 = networkAdminHTTPProxyImpl0 . getHTTPSPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHTTPSPort ( ) ; String getUser ( ) ; String [ ] getNonProxyHosts ( ) ; Details getDetails ( ) throws NetworkAdminException ; String getString ( ) ; interface Details { String getServerName ( ) ; String getResponse ( ) ; String getAuthenticationType ( ) ; }
void test8 ( ) throws Throwable { NetworkAdminHTTPProxyImpl networkAdminHTTPProxyImpl0 = new NetworkAdminHTTPProxyImpl ( ) ; String string0 = networkAdminHTTPProxyImpl0 . getHTTPHost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHTTPHost ( ) ; String getHTTPPort ( ) ; String getHTTPSHost ( ) ; String getHTTPSPort ( ) ; String getUser ( ) ; String [ ] getNonProxyHosts ( ) ; Details getDetails ( ) throws NetworkAdminException ; String getString ( ) ; interface Details { String getServerName ( ) ; String getResponse ( ) ; String getAuthenticationType ( ) ; }
void test9 ( ) throws Throwable { NetworkAdminHTTPProxyImpl networkAdminHTTPProxyImpl0 = new NetworkAdminHTTPProxyImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test10 ( ) throws Throwable { NetworkAdminHTTPProxyImpl networkAdminHTTPProxyImpl0 = new NetworkAdminHTTPProxyImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConfigured ( ) { return ( http_host . length ( ) > 0 | | https_host . length ( ) > 0 ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; NetworkAdminASNLookupImpl networkAdminASNLookupImpl0 = new NetworkAdminASNLookupImpl ( ( InetAddress ) inet4Address0 ) ; NetworkAdminASNImpl networkAdminASNImpl0 = networkAdminASNLookupImpl0 . processResult ( " HHT^ . \n eh | M\r#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { NetworkAdminSocksProxyImpl networkAdminSocksProxyImpl0 = new NetworkAdminSocksProxyImpl ( " : rE . iL4 [ " , " : rE . iL4 [ " , " : rE . iL4 [ " , " : rE . iL4 [ " ) ; String string0 = networkAdminSocksProxyImpl0 . getPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) ; String getTypeString ( ) ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , NetworkAdminProgressListener listener ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , boolean upnp_map , NetworkAdminProgressListener listener ) throws NetworkAdminException ; String getName ( ) ; }
void test1 ( ) throws Throwable { NetworkAdminSocksProxyImpl networkAdminSocksProxyImpl0 = new NetworkAdminSocksProxyImpl ( "" , "" , "" , "" ) ; String string0 = networkAdminSocksProxyImpl0 . getHost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHost ( ) ; String getPort ( ) ; String getUser ( ) ; String [ ] getVersionsSupported ( ) throws NetworkAdminException ; String getString ( ) ; }
void test2 ( ) throws Throwable { NetworkAdminSocksProxyImpl networkAdminSocksProxyImpl0 = new NetworkAdminSocksProxyImpl ( "" , "" , "" , "" ) ; String string0 = networkAdminSocksProxyImpl0 . getUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUser ( ) ; String [ ] getNonProxyHosts ( ) ; Details getDetails ( ) throws NetworkAdminException ; String getString ( ) ; interface Details { String getServerName ( ) ; String getResponse ( ) ; String getAuthenticationType ( ) ; }
void test3 ( ) throws Throwable { NetworkAdminSocksProxyImpl networkAdminSocksProxyImpl0 = new NetworkAdminSocksProxyImpl ( "" , "" , "" , "" ) ; String string0 = networkAdminSocksProxyImpl0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test4 ( ) throws Throwable { NetworkAdminSocksProxyImpl networkAdminSocksProxyImpl0 = new NetworkAdminSocksProxyImpl ( "" , "" , "" , "" ) ; boolean boolean0 = networkAdminSocksProxyImpl0 . isConfigured ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConfigured ( ) { return ( http_host . length ( ) > 0 | | https_host . length ( ) > 0 ) ; }
void test5 ( ) throws Throwable { NetworkAdminSocksProxyImpl networkAdminSocksProxyImpl0 = new NetworkAdminSocksProxyImpl ( " : rE . iL4 [ " , " : rE . iL4 [ " , " : rE . iL4 [ " , " : rE . iL4 [ " ) ; boolean boolean0 = networkAdminSocksProxyImpl0 . isConfigured ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConfigured ( ) { return ( http_host . length ( ) > 0 | | https_host . length ( ) > 0 ) ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NetworkAdminSocksProxyImpl networkAdminSocksProxyImpl0 = new NetworkAdminSocksProxyImpl ( " : rE . iL4 [ " , " : rE . iL4 [ " , " : rE . iL4 [ " , " : rE . iL4 [ " ) ; String string0 = networkAdminSocksProxyImpl0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { SearchParameter searchParameter0 = new SearchParameter ( "" , "" ) ; String string0 = searchParameter0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( String name , String [ ] params ) { return getValue ( name , params , true ) ; }
void test1 ( ) throws Throwable { SearchParameter searchParameter0 = new SearchParameter ( "" , "" ) ; String string0 = searchParameter0 . getMatchPattern ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMatchPattern ( ) { return matchPattern ; }
void test1 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( "" , false , "" ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "" , "" , ( DateParser ) dateParserRegex0 , "" ) ; Engine engine0 = webResult0 . getEngine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Engine getEngine ( long id ) ; Engine getEngineByUID ( String uid ) ; void addEngine ( Engine engine ) ; Engine addEngine ( long id ) throws MetaSearchException ; Engine createRSSEngine ( String name , URL url ) throws MetaSearchException ; void removeEngine ( Engine engine ) ; int getEngineCount ( ) ; void enginePreferred ( Engine engine ) ; void exportEngines ( File to_file ) throws MetaSearchException ; void addListener ( MetaSearchListener listener ) ; void removeListener ( MetaSearchListener listener ) ; }
void test3 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; Result . adjustRelativeTerms ( ( Map ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { String string0 = Result . removeHTMLTags ( " = kn_ } f^sg" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeHTMLTags ( String input ) { if ( input = = null ) { return ( null ) ; } String result = input . replaceAll ( HTML_TAGS , " " ) ; return result . replaceAll ( DUPLICATE_SPACES , " " ) . trim ( ) ; }
void test5 ( ) throws Throwable { String string0 = Result . unescapeEntities ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String unescapeEntities ( String input ) { if ( input = = null ) { return ( null ) ; } return ( Entities . HTML40 . unescape ( input ) ) ; }
void test0 ( ) throws Throwable { CookieParameter cookieParameter0 = new CookieParameter ( "" , "" ) ; String string0 = cookieParameter0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test1 ( ) throws Throwable { CookieParameter cookieParameter0 = new CookieParameter ( "" , "" ) ; String string0 = cookieParameter0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( String name , String [ ] params ) { return getValue ( name , params , true ) ; }
void test0 ( ) throws Throwable { FieldRemapping [ ] fieldRemappingArray0 = new FieldRemapping [ 1 ] ; FieldRemapper fieldRemapper0 = new FieldRemapper ( ( - 10 ) , ( - 10 ) , fieldRemappingArray0 ) ; int int0 = fieldRemapper0 . getInField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOutField ( ) { return ( outField ) ; }
void test1 ( ) throws Throwable { FieldRemapping [ ] fieldRemappingArray0 = new FieldRemapping [ 1 ] ; FieldRemapper fieldRemapper0 = new FieldRemapper ( ( - 10 ) , ( - 10 ) , fieldRemappingArray0 ) ; FieldRemapping [ ] fieldRemappingArray1 = fieldRemapper0 . getMappings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOutField ( ) { return ( outField ) ; }
void test2 ( ) throws Throwable { FieldRemapping [ ] fieldRemappingArray0 = new FieldRemapping [ 1 ] ; FieldRemapper fieldRemapper0 = new FieldRemapper ( ( - 10 ) , ( - 10 ) , fieldRemappingArray0 ) ; int int0 = fieldRemapper0 . getOutField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInField ( ) { return ( inField ) ; }
void test3 ( ) throws Throwable { FieldRemapping [ ] fieldRemappingArray0 = new FieldRemapping [ 1 ] ; FieldRemapper fieldRemapper0 = new FieldRemapper ( ( - 10 ) , ( - 10 ) , fieldRemappingArray0 ) ; fieldRemapper0 . remap ( ( Result ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOutField ( ) { return ( outField ) ; }
void test4 ( ) throws Throwable { FieldRemapping [ ] fieldRemappingArray0 = new FieldRemapping [ 9 ] ; FieldRemapping fieldRemapping0 = new FieldRemapping ( "b" , ( String ) null ) ; fieldRemappingArray0 [ 0 ] = fieldRemapping0 ; fieldRemappingArray0 [ 1 ] = fieldRemappingArray0 [ 0 ] ; fieldRemappingArray0 [ 3 ] = fieldRemapping0 ; fieldRemappingArray0 [ 2 ] = fieldRemappingArray0 [ 0 ] ; FieldRemapping fieldRemapping1 = new FieldRemapping ( "" , "" ) ; fieldRemappingArray0 [ 4 ] = fieldRemapping1 ; FieldRemapper fieldRemapper0 = new FieldRemapper ( 6 , ( - 828 ) , fieldRemappingArray0 ) ; DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "" , "" , ( DateParser ) dateParserClassic0 , "b" ) ; fieldRemapper0 . remap ( ( Result ) webResult0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOutField ( ) { return ( outField ) ; }
void test6 ( ) throws Throwable { FieldRemapping [ ] fieldRemappingArray0 = new FieldRemapping [ 9 ] ; FieldRemapping fieldRemapping0 = new FieldRemapping ( "b" , ( String ) null ) ; fieldRemappingArray0 [ 0 ] = fieldRemapping0 ; fieldRemappingArray0 [ 1 ] = fieldRemappingArray0 [ 0 ] ; fieldRemappingArray0 [ 3 ] = fieldRemapping0 ; fieldRemappingArray0 [ 2 ] = fieldRemapping0 ; FieldRemapping fieldRemapping1 = new FieldRemapping ( "" , "" ) ; fieldRemappingArray0 [ 4 ] = fieldRemapping1 ; DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "" , "" , ( DateParser ) dateParserClassic0 , "b" ) ; FieldRemapper fieldRemapper0 = new FieldRemapper ( 6 , 6 , fieldRemappingArray0 ) ; fieldRemapper0 . remap ( ( Result ) webResult0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOutField ( ) { return ( outField ) ; }
void test0 ( ) throws Throwable { FieldRemapping fieldRemapping0 = new FieldRemapping ( "" , "" ) ; Pattern pattern0 = fieldRemapping0 . getMatch ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { FieldRemapping fieldRemapping0 = new FieldRemapping ( "W * u - XqB - " , "W * u - XqB - " ) ; String string0 = fieldRemapping0 . getReplacement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReplacement ( ) { return replace ; }
void test2 ( ) throws Throwable { FieldRemapping fieldRemapping0 = new FieldRemapping ( "W * u - XqB - " , "W * u - XqB - " ) ; String string0 = fieldRemapping0 . getMatchString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMatchString ( ) { return ( match_str ) ; }
void test0 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test1 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( "y - day " , false , "y - day " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date parseDate ( String date ) { Date result = null ; if ( auto ) { result = parseDateInternal ( date ) ; } else { if ( userDateFormat ! = null ) { try { result = userDateFormat . parse ( date ) ; } catch ( Exception e ) { / / TODO : in debug mode , throw an exception to tell the user that his dateFormat is invalid / didn't parse a date } } } if ( DEBUG ) { System . out . println ( date + " > " + result . toString ( ) ) ; } return result ; }
void test2 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date parseDate ( String date ) { Date result = null ; if ( auto ) { result = parseDateInternal ( date ) ; } else { if ( userDateFormat ! = null ) { try { result = userDateFormat . parse ( date ) ; } catch ( Exception e ) { / / TODO : in debug mode , throw an exception to tell the user that his dateFormat is invalid / didn't parse a date } } } if ( DEBUG ) { System . out . println ( date + " > " + result . toString ( ) ) ; } return result ; }
void test3 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test4 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test5 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date parseDate ( String date ) { Date result = null ; if ( auto ) { result = parseDateInternal ( date ) ; } else { if ( userDateFormat ! = null ) { try { result = userDateFormat . parse ( date ) ; } catch ( Exception e ) { / / TODO : in debug mode , throw an exception to tell the user that his dateFormat is invalid / didn't parse a date } } } if ( DEBUG ) { System . out . println ( date + " > " + result . toString ( ) ) ; } return result ; }
void test6 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test7 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test8 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date parseDate ( String date ) { Date result = null ; if ( auto ) { result = parseDateInternal ( date ) ; } else { if ( userDateFormat ! = null ) { try { result = userDateFormat . parse ( date ) ; } catch ( Exception e ) { / / TODO : in debug mode , throw an exception to tell the user that his dateFormat is invalid / didn't parse a date } } } if ( DEBUG ) { System . out . println ( date + " > " + result . toString ( ) ) ; } return result ; }
void test9 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test10 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date parseDate ( String date ) { Date result = null ; if ( auto ) { result = parseDateInternal ( date ) ; } else { if ( userDateFormat ! = null ) { try { result = userDateFormat . parse ( date ) ; } catch ( Exception e ) { / / TODO : in debug mode , throw an exception to tell the user that his dateFormat is invalid / didn't parse a date } } } if ( DEBUG ) { System . out . println ( date + " > " + result . toString ( ) ) ; } return result ; }
void test11 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test12 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test13 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test14 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test15 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test16 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date parseDate ( String date ) { Date result = null ; if ( auto ) { result = parseDateInternal ( date ) ; } else { if ( userDateFormat ! = null ) { try { result = userDateFormat . parse ( date ) ; } catch ( Exception e ) { / / TODO : in debug mode , throw an exception to tell the user that his dateFormat is invalid / didn't parse a date } } } if ( DEBUG ) { System . out . println ( date + " > " + result . toString ( ) ) ; } return result ; }
void test17 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date parseDate ( String date ) { Date result = null ; if ( auto ) { result = parseDateInternal ( date ) ; } else { if ( userDateFormat ! = null ) { try { result = userDateFormat . parse ( date ) ; } catch ( Exception e ) { / / TODO : in debug mode , throw an exception to tell the user that his dateFormat is invalid / didn't parse a date } } } if ( DEBUG ) { System . out . println ( date + " > " + result . toString ( ) ) ; } return result ; }
void test0 ( ) throws Throwable { CookieParser cookieParser0 = new CookieParser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; boolean boolean0 = CookieParser . cookiesContain ( stringArray0 , " ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean cookiesContain ( String [ ] requiredCookies , String cookies ) { if ( cookies = = null ) return false ; boolean [ ] cookieFound = new boolean [ requiredCookies . length ] ; String [ ] names = getCookiesNames ( cookies ) ; for ( int j = 0 ; j < names . length ; j + + ) { String cookieName = names [ j ] ; for ( int i = 0 ; i < requiredCookies . length ; i + + ) { if ( requiredCookies [ i ] . equals ( cookieName ) ) { cookieFound [ i ] = true ; } } } for ( int i = 0 ; i < cookieFound . length ; i + + ) { if ( ! cookieFound [ i ] ) return false ; } return true ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = CookieParser . getCookiesNames ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean cookiesContain ( String [ ] requiredCookies , String cookies ) { if ( cookies = = null ) return false ; boolean [ ] cookieFound = new boolean [ requiredCookies . length ] ; String [ ] names = getCookiesNames ( cookies ) ; for ( int j = 0 ; j < names . length ; j + + ) { String cookieName = names [ j ] ; for ( int i = 0 ; i < requiredCookies . length ; i + + ) { if ( requiredCookies [ i ] . equals ( cookieName ) ) { cookieFound [ i ] = true ; } } } for ( int i = 0 ; i < cookieFound . length ; i + + ) { if ( ! cookieFound [ i ] ) return false ; } return true ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = CookieParser . getCookiesNames ( " = K7Ii1oA" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean cookiesContain ( String [ ] requiredCookies , String cookies ) { if ( cookies = = null ) return false ; boolean [ ] cookieFound = new boolean [ requiredCookies . length ] ; String [ ] names = getCookiesNames ( cookies ) ; for ( int j = 0 ; j < names . length ; j + + ) { String cookieName = names [ j ] ; for ( int i = 0 ; i < requiredCookies . length ; i + + ) { if ( requiredCookies [ i ] . equals ( cookieName ) ) { cookieFound [ i ] = true ; } } } for ( int i = 0 ; i < cookieFound . length ; i + + ) { if ( ! cookieFound [ i ] ) return false ; } return true ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = CookieParser . getCookiesNames ( "t ; `" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getCookiesNames ( String cookies ) { if ( cookies = = null ) return new String [ 0 ] ; StringTokenizer st = new StringTokenizer ( cookies , " ; " ) ; List names = new ArrayList ( ) ; while ( st . hasMoreTokens ( ) ) { String cookie = st . nextToken ( ) ; int separator = cookie . indexOf ( " = " ) ; if ( separator > - 1 ) { names . add ( cookie . substring ( 0 , separator ) ) ; } } String [ ] result = ( String [ ] ) names . toArray ( new String [ names . size ( ) ] ) ; return result ; }
void test0 ( ) throws Throwable { FieldMapping fieldMapping0 = new FieldMapping ( "" , ( - 1946 ) ) ; String string0 = fieldMapping0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getField ( ) { return ( field ) ; }
void test1 ( ) throws Throwable { FieldMapping fieldMapping0 = new FieldMapping ( "" , ( - 1946 ) ) ; int int0 = fieldMapping0 . getField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getField ( ) { return ( field ) ; }
void test0 ( ) throws Throwable { WebEngine . pageDetails webEngine_pageDetails0 = new WebEngine . pageDetails ( ( URL ) null , ( URL ) null , "obt33 ] g + Mt6tY" ) ; String string0 = webEngine_pageDetails0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getContent ( ) ; void setProcessed ( ) ; boolean isProcessed ( ) ; void setData ( Object key , Object value ) ; Object getData ( Object key ) ; }
void test1 ( ) throws Throwable { WebEngine . pageDetails webEngine_pageDetails0 = new WebEngine . pageDetails ( ( URL ) null , ( URL ) null , "obt33 ] g + Mt6tY" ) ; URL uRL0 = webEngine_pageDetails0 . getFinalURL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" WebEngine ( MetaSearchImpl meta_search , int type , long id , long last_updated , float rank_bias , String name , String searchURLFormat , String timeZone , boolean automaticDateParser , String userDateFormat , FieldMapping [ ] mappings , boolean needs_auth , String auth_method , String login_url , String [ ] required_cookies ) { super ( meta_search , type , id , last_updated , rank_bias , name ) ; this . searchURLFormat = searchURLFormat ; this . timeZone = timeZone ; this . automaticDateParser = automaticDateParser ; this . userDateFormat = userDateFormat ; this . mappings = mappings ; this . needsAuth = needs_auth ; this . authMethod = auth_method ; this . loginPageUrl = login_url ; this . requiredCookies = required_cookies ; init ( ) ; }
void test2 ( ) throws Throwable { WebEngine . pageDetails webEngine_pageDetails0 = new WebEngine . pageDetails ( ( URL ) null , ( URL ) null , "obt33 ] g + Mt6tY" ) ; URL uRL0 = webEngine_pageDetails0 . getInitialURL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" WebEngine ( MetaSearchImpl meta_search , int type , long id , long last_updated , float rank_bias , String name , String searchURLFormat , String timeZone , boolean automaticDateParser , String userDateFormat , FieldMapping [ ] mappings , boolean needs_auth , String auth_method , String login_url , String [ ] required_cookies ) { super ( meta_search , type , id , last_updated , rank_bias , name ) ; this . searchURLFormat = searchURLFormat ; this . timeZone = timeZone ; this . automaticDateParser = automaticDateParser ; this . userDateFormat = userDateFormat ; this . mappings = mappings ; this . needsAuth = needs_auth ; this . authMethod = auth_method ; this . loginPageUrl = login_url ; this . requiredCookies = required_cookies ; init ( ) ; }
void test3 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 10 ] ; String [ ] stringArray0 = new String [ 10 ] ; RegexEngine regexEngine0 = new RegexEngine ( ( MetaSearchImpl ) null , 0L , 1687L , ( float ) 1L , "" , "" , "" , "% > `mr_Q15A - m - " , false , "" , fieldMappingArray0 , false , "% > `mr_Q15A - m - " , "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSearchUrl ( boolean raw ) { if ( raw ) { return ( searchURLFormat ) ; } else { return ( getSearchUrl ( ) ) ; } }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , 0L , ( - 350L ) , ( - 888 . 5174F ) , "" , "" , true , "~H7D 6aB : to , B { 'Ro^ * " , "~H7D 6aB : to , B { 'Ro^ * " , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , 0L , ( - 350L ) , ( - 888 . 5174F ) , "" , "" , true , "~H7D 6aB : to , B { 'Ro^ * " , "~H7D 6aB : to , B { 'Ro^ * " , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , 20L , ( - 838L ) , ( float ) 1L , "" , "" , true , "" , "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNeedsAuth ( ) { return needsAuth ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , 0L , ( - 350L ) , ( - 888 . 5174F ) , "" , "" , true , "~H7D 6aB : to , B { 'Ro^ * " , "~H7D 6aB : to , B { 'Ro^ * " , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthMethod ( ) { return ( authMethod ) ; }
void test8 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 7 ] ; String [ ] stringArray0 = new String [ 10 ] ; JSONEngine jSONEngine0 = new JSONEngine ( ( MetaSearchImpl ) null , 1L , 1L , ( float ) 1L , "9l\"RQ { 6HQF : tf\fHw5 , " , "9l\"RQ { 6HQF : tf\fHw5 , " , "9l\"RQ { 6HQF : tf\fHw5 , " , true , "9l\"RQ { 6HQF : tf\fHw5 , " , "9l\"RQ { 6HQF : tf\fHw5 , " , fieldMappingArray0 , false , "9l\"RQ { 6HQF : tf\fHw5 , " , "9l\"RQ { 6HQF : tf\fHw5 , " , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameEx ( ) ; long getId ( ) ; String getUID ( ) ; int getVersion ( ) ; long getLastUpdated ( ) ; String getIcon ( ) ; String getDownloadLinkCSS ( ) ; boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test9 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , 3L , 3L , 665 . 35767F , "vuze : * j7 ? ? %zk2hzdr ; " , "vuze : * j7 ? ? %zk2hzdr ; " , false , "KeyPairGenerator . RSA" , "KeyPairGenerator . RSA" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" pageDetails getWebPageContent ( SearchParameter [ ] searchParameters , Map < String , String > searchContext , String headers , boolean only_if_modified ) throws SearchException { try { TorrentUtils . setTLSDescription ( "Search : " + getName ( ) ) ; if ( requiresLogin ( ) ) { throw new SearchLoginException ( "login required" ) ; } String searchURL = searchURLFormat ; boolean vuze_file = searchURL . toLowerCase ( ) . startsWith ( "vuze : " ) ; if ( ! vuze_file ) { String [ ] from_strs = new String [ searchParameters . length ] ; String [ ] to_strs = new String [ searchParameters . length ] ; for ( int i = 0 ; i < searchParameters . length ; i + + ) { SearchParameter parameter = searchParameters [ i ] ; from_strs [ i ] = "%" + parameter . getMatchPattern ( ) ; to_strs [ i ] = URLEncoder . encode ( parameter . getValue ( ) , "UTF - 8" ) ; } searchURL = GeneralUtils . replaceAll ( searchURL , from_strs , to_strs ) ; Iterator < Map . Entry < String , String > > it = searchContext . entrySet ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { Map . Entry < String , String > entry = it . next ( ) ; String key = entry . getKey ( ) ; if ( supportsContext ( key ) ) { if ( searchURL . indexOf ( ' ? ' ) = = - 1 ) { searchURL + = " ? " ; } else { searchURL + = " & " ; } String value = entry . getValue ( ) ; searchURL + = key + " = " + URLEncoder . encode ( value , "UTF - 8" ) ; } } } / / System . out . println ( searchURL ) ; / / hack to support POST by encoding into URL / / http : / / xxxx / index . php ? main = search & azmethod = post_basic : SearchString1 = %s & SearchString = & search = Search ResourceDownloaderFactory rdf = StaticUtilities . getResourceDownloaderFactory ( ) ; URL initial_url ; ResourceDownloader initial_url_rd ; int post_pos = searchURL . indexOf ( "azmethod = " ) ; if ( post_pos > 0 ) { String post_params = searchURL . substring ( post_pos + 9 ) ; searchURL = searchURL . substring ( 0 , post_pos - 1 ) ; debugLog ( "search_url : " + searchURL + " , post = " + post_params ) ; initial_url = new URL ( searchURL ) ; int sep = post_params . indexOf ( ' : ' ) ; String type = post_params . substring ( 0 , sep ) ; if ( ! type . equals ( "post_basic" ) ) { throw ( new SearchException ( "Only basic type supported" ) ) ; } post_params = post_params . substring ( sep + 1 ) ; / / already URL encoded initial_url_rd = rdf . create ( initial_url , post_params ) ; initial_url_rd . setProperty ( "URL_Content - Type" , "application / x - www - form - urlencoded" ) ; } else { debugLog ( "search_url : " + searchURL ) ; initial_url = new URL ( searchURL ) ; initial_url_rd = rdf . create ( initial_url ) ; } setHeaders ( initial_url_rd , headers ) ; if ( needsAuth & & local_cookies ! = null ) { initial_url_rd . setProperty ( "URL_Cookie" , local_cookies ) ; } if ( only_if_modified ) { String last_modified = getLocalString ( LD_LAST_MODIFIED ) ; String etag = getLocalString ( LD_ETAG ) ; if ( last_modified ! = null ) { initial_url_rd . setProperty ( "URL_If - Modified - Since" , last_modified ) ; } if ( etag ! = null ) { initial_url_rd . setProperty ( "URL_If - None - Match" , etag ) ; } } InputStream is ; String content_charset = "UTF - 8" ; ResourceDownloader mr_rd = null ; if ( initial_url . getProtocol ( ) . equalsIgnoreCase ( "file" ) ) { / / handle file : / / c : / - map to file : / c : / String str = initial_url . toExternalForm ( ) ; if ( initial_url . getAuthority ( ) ! = null ) { str = str . replaceFirst ( " : / / " , " : / " ) ; } int pos = str . indexOf ( ' ? ' ) ; if ( pos ! = - 1 ) { str = str . substring ( 0 , pos ) ; } is = new FileInputStream ( new File ( new URL ( str ) . toURI ( ) ) ) ; } else { mr_rd = rdf . getMetaRefreshDownloader ( initial_url_rd ) ; try { is = mr_rd . download ( ) ; } catch ( ResourceDownloaderException e ) { Long response = ( Long ) mr_rd . getProperty ( "URL_HTTP_Response" ) ; if ( response ! = null & & response . longValue ( ) = = 304 ) { / / not modified return ( new pageDetails ( initial_url , initial_url , "" ) ) ; } else { throw ( e ) ; } } if ( needsAuth ) { List cookies_list = ( List ) mr_rd . getProperty ( "URL_Set - Cookie" ) ; List cookies_set = new ArrayList ( ) ; if ( cookies_list ! = null ) { for ( int i = 0 ; i < cookies_list . size ( ) ; i + + ) { String [ ] cookies = ( ( String ) cookies_list . get ( i ) ) . split ( " ; " ) ; for ( int j = 0 ; j < cookies . length ; j + + ) { String cookie = cookies [ j ] . trim ( ) ; if ( cookie . indexOf ( ' = ' ) ! = - 1 ) { cookies_set . add ( cookie ) ; } } } } / / well , not much we can do with the cookies anyway as in general the ones / / set are the ones missing / expired , not the existing ones . That is , we can't / / deduce anything from the fact that a required cookie is not 'set' here / / the most we could do is catch a server that explicitly deleted invalid / / cookies by expiring it , but I doubt this is a common practice . / / Also note the complexity of cookie syntax / / Set - Cookie : old standard using expires = , new using MaxAge / / Set - Cookie2 : / / Maybe use http : / / jcookie . sourceforge . net / if needed } if ( only_if_modified ) { String last_modified = extractProperty ( mr_rd . getProperty ( "URL_Last - Modified" ) ) ; String etag = extractProperty ( mr_rd . getProperty ( "URL_ETag" ) ) ; if ( last_modified ! = null ) { setLocalString ( LD_LAST_MODIFIED , last_modified ) ; } if ( etag ! = null ) { setLocalString ( LD_ETAG , etag ) ; } } List cts = ( List ) mr_rd . getProperty ( "URL_Content - Type" ) ; if ( cts ! = null & & cts . size ( ) > 0 ) { String content_type = ( String ) cts . get ( 0 ) ; int pos = content_type . toLowerCase ( ) . indexOf ( "charset" ) ; if ( pos ! = - 1 ) { content_type = content_type . substring ( pos + 1 ) ; pos = content_type . indexOf ( ' = ' ) ; if ( pos ! = - 1 ) { content_type = content_type . substring ( pos + 1 ) . trim ( ) ; pos = content_type . indexOf ( ' ; ' ) ; if ( pos ! = - 1 ) { content_type = content_type . substring ( 0 , pos ) . trim ( ) ; } if ( content_type . startsWith ( "\"" ) ) { content_type = content_type . substring ( 1 ) . trim ( ) ; } if ( content_type . endsWith ( "\"" ) ) { content_type = content_type . substring ( 0 , content_type . length ( ) - 1 ) . trim ( ) ; } try { if ( Charset . isSupported ( content_type ) ) { debugLog ( "charset : " + content_type ) ; content_charset = content_type ; } } catch ( Throwable e ) { try { / / handle lowercase 'utf - 8' for example content_type = content_type . toUpperCase ( ) ; if ( Charset . isSupported ( content_type ) ) { debugLog ( "charset : " + content_type ) ; content_charset = content_type ; } } catch ( Throwable f ) { log ( "Content type '" + content_type + "' not supported" , f ) ; } } } } } } ByteArrayOutputStream baos = new ByteArrayOutputStream ( 8192 ) ; byte [ ] buffer = new byte [ 8192 ] ; while ( true ) { int len = is . read ( buffer ) ; if ( len < = 0 ) { break ; } baos . write ( buffer , 0 , len ) ; } byte [ ] data = baos . toByteArray ( ) ; if ( vuze_file ) { try { VuzeFileHandler vfh = VuzeFileHandler . getSingleton ( ) ; VuzeFile vf = vfh . loadVuzeFile ( data ) ; vfh . handleFiles ( new VuzeFile [ ] { vf } , VuzeFileComponent . COMP_TYPE_NONE ) ; } catch ( Throwable e ) { Debug . out ( e ) ; } return ( new pageDetails ( initial_url , initial_url , null ) ) ; } String page = null ; String content = new String ( data , 0 , Math . min ( data . length , 2048 ) , content_charset ) ; String lc_content = content . toLowerCase ( ) ; { / / first look for xml charset / / e . g . < ? xml version = "1 . 0" encoding = "windows - 1251" ? > int pos1 = lc_content . indexOf ( " < ? xml" ) ; if ( pos1 ! = - 1 ) { int pos2 = lc_content . indexOf ( " ? > " ) ; if ( pos2 ! = - 1 ) { int pos3 = lc_content . indexOf ( "encoding" , pos1 ) ; if ( pos3 ! = - 1 ) { pos3 = lc_content . indexOf ( "\"" , pos3 ) ; } if ( pos3 > pos1 & & pos3 < pos2 ) { pos3 + + ; int pos4 = lc_content . indexOf ( "\"" , pos3 ) ; if ( pos4 > pos3 & & pos4 < pos2 ) { String encoding = content . substring ( pos3 , pos4 ) . trim ( ) ; try { if ( Charset . isSupported ( encoding ) ) { debugLog ( "charset from xml tag : " + encoding ) ; content_charset = encoding ; / / some feeds have crap at the start which makes pos2 mismatch for the above ' ? ' - adjust if necessary int data_start = pos2 ; int max_skip = 64 ; while ( data [ data_start ] ! = ' ? ' & & max_skip - - > 0 ) { data_start + + ; } page = content . substring ( 0 , pos3 ) + "utf - 8" + content . substring ( pos4 , pos2 ) + new String ( data , data_start , data . length - data_start , content_charset ) ; } } catch ( Throwable e ) { log ( "Content type '" + encoding + "' not supported" , e ) ; } } } } } } if ( page = = null ) { / / next look for http - equiv charset / / e . g . < meta http - equiv = "Content - Type" content = "text / html ; charset = windows - 1251" / > int pos = 0 ; while ( true ) { int pos1 = lc_content . indexOf ( "http - equiv" , pos ) ; if ( pos1 ! = - 1 ) { int pos2 = lc_content . indexOf ( " > " , pos1 ) ; if ( pos2 ! = - 1 ) { int pos3 = lc_content . indexOf ( "charset" , pos1 ) ; if ( pos3 ! = - 1 & & pos3 < pos2 ) { pos3 = lc_content . indexOf ( " = " , pos3 ) ; if ( pos3 ! = - 1 ) { pos3 + + ; int pos4 = lc_content . indexOf ( "\"" , pos3 ) ; if ( pos4 ! = - 1 ) { int pos5 = lc_content . indexOf ( " ; " , pos3 ) ; if ( pos5 ! = - 1 & & pos5 < pos4 ) { pos4 = pos5 ; } String encoding = content . substring ( pos3 , pos4 ) . trim ( ) ; try { if ( Charset . isSupported ( encoding ) ) { debugLog ( "charset from http - equiv : " + encoding ) ; content_charset = encoding ; / / some feeds have crap at the start which makes pos2 mismatch for the above ' ? ' - adjust if necessary int data_start = pos2 ; int max_skip = 64 ; while ( data [ data_start ] ! = ' ? ' & & max_skip - - > 0 ) { data_start + + ; } page = content . substring ( 0 , pos3 ) + "utf - 8" + content . substring ( pos4 , pos2 ) + new String ( data , data_start , data . length - data_start , content_charset ) ; } } catch ( Throwable e ) { log ( "Content type '" + encoding + "' not supported" , e ) ; } break ; } } } pos = pos2 ; } else { break ; } } else { break ; } } } if ( page = = null ) { page = new String ( data , content_charset ) ; } debugLog ( "page : " ) ; debugLog ( page ) ; / / List cookie = ( List ) url_rd . getProperty ( "URL_Set - Cookie" ) ; try { Matcher m = baseTagPattern . matcher ( page ) ; if ( m . find ( ) ) { basePage = m . group ( 1 ) ; debugLog ( "base_page : " + basePage ) ; } } catch ( Exception e ) { / / No BASE tag in the page } URL final_url = initial_url ; if ( mr_rd ! = null ) { URL x = ( URL ) mr_rd . getProperty ( "URL_URL" ) ; if ( x ! = null ) { final_url = x ; } } return ( new pageDetails ( initial_url , final_url , page ) ) ; } catch ( SearchException e ) { throw ( e ) ; } catch ( Throwable e ) { / / e . printStackTrace ( ) ; debugLog ( "Failed to load page : " + Debug . getNestedExceptionMessageAndStack ( e ) ) ; throw ( new SearchException ( "Failed to load page" , e ) ) ; } finally { TorrentUtils . setTLSDescription ( null ) ; } }
void test10 ( ) throws Throwable { String [ ] stringArray0 = new String [ 9 ] ; FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 6 ] ; JSONEngine jSONEngine0 = new JSONEngine ( ( MetaSearchImpl ) null , 0L , ( - 1251L ) , 0 . 0F , "#" , "dT , ! a { < %6@^ * " , "#" , true , "N`uSZ } mJr8 - ld" , "die die die" , fieldMappingArray0 , true , "dT , ! a { < %6@^ * " , "dT , ! a { < %6@^ * " , stringArray0 ) ; String string0 = jSONEngine0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSearchUrl ( boolean raw ) { if ( raw ) { return ( searchURLFormat ) ; } else { return ( getSearchUrl ( ) ) ; } }
void test11 ( ) throws Throwable { String [ ] stringArray0 = new String [ 5 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , 1000L , ( long ) ( - 109 ) , 1 . 0F , "" , "" , true , "" , "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test12 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 7 ] ; String [ ] stringArray0 = new String [ 10 ] ; JSONEngine jSONEngine0 = new JSONEngine ( ( MetaSearchImpl ) null , 1L , 1L , ( float ) 1L , "9l\"RQ { 6HQF : tf\fHw5 , " , "9l\"RQ { 6HQF : tf\fHw5 , " , "9l\"RQ { 6HQF : tf\fHw5 , " , true , "9l\"RQ { 6HQF : tf\fHw5 , " , "9l\"RQ { 6HQF : tf\fHw5 , " , fieldMappingArray0 , false , "9l\"RQ { 6HQF : tf\fHw5 , " , "9l\"RQ { 6HQF : tf\fHw5 , " , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNeedsAuth ( ) { return needsAuth ; }
void test13 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , ( - 1L ) , 1L , 0 . 0F , "az . log" , "@Y4MW < } ; ^SNyy@el" , true , "az . log" , "az . log" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthMethod ( ) { return ( authMethod ) ; }
void test14 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 10 ] ; String [ ] stringArray0 = new String [ 10 ] ; RegexEngine regexEngine0 = new RegexEngine ( ( MetaSearchImpl ) null , 0L , 1687L , ( float ) 1L , "" , "" , "" , "% > `mr_Q15A - m - " , false , "" , fieldMappingArray0 , false , "% > `mr_Q15A - m - " , "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameEx ( ) ; long getId ( ) ; String getUID ( ) ; int getVersion ( ) ; long getLastUpdated ( ) ; String getIcon ( ) ; String getDownloadLinkCSS ( ) ; boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test15 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 9 ] ; String [ ] stringArray0 = new String [ 7 ] ; JSONEngine jSONEngine0 = new JSONEngine ( ( MetaSearchImpl ) null , 8080L , 951L , 0 . 0F , "f7 ; j' / XNnZ53" , "f7 ; j' / XNnZ53" , "f7 ; j' / XNnZ53" , true , "f7 ; j' / XNnZ53" , "f7 ; j' / XNnZ53" , fieldMappingArray0 , true , "GMT - 7" , "`@O'gmXSUr" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test16 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , 512L , ( long ) 1 , 2015 . 712F , "javax . net . ssl . trustStorePassword" , "5mX8$Ii & cVRa" , true , "javax . net . ssl . trustStorePassword" , "5mX8$Ii & cVRa" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test17 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 10 ] ; String [ ] stringArray0 = new String [ 10 ] ; JSONEngine jSONEngine0 = new JSONEngine ( ( MetaSearchImpl ) null , 20L , ( - 1L ) , 1401 . 0115F , "" , "" , "" , true , "" , "" , fieldMappingArray0 , true , "" , " * ! J & m ? u% & kv7 ] ( naSkE" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLoginPageUrl ( ) { / / Let's try with no login page url / / return loginPageUrl ; return searchURLFormat . replaceAll ( "%s" , "" ) ; }
void test18 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 9 ] ; String [ ] stringArray0 = new String [ 8 ] ; RegexEngine regexEngine0 = new RegexEngine ( ( MetaSearchImpl ) null , 951L , ( long ) ( - 1418 ) , ( - 585 . 7622F ) , " : HUn0 & * YlcX__" , "XVtlpF" , "`@O'gmXSUr" , "`@O'gmXSUr" , true , "FrClsC7" , fieldMappingArray0 , true , "XVtlpF" , "GMT - 7" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthMethod ( ) { return ( authMethod ) ; }
void test19 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 9 ] ; FieldMapping fieldMapping0 = new FieldMapping ( "`@O'gmXSUr" , ( - 739 ) ) ; fieldMappingArray0 [ 0 ] = fieldMapping0 ; fieldMappingArray0 [ 1 ] = fieldMappingArray0 [ 0 ] ; fieldMappingArray0 [ 2 ] = fieldMappingArray0 [ 0 ] ; fieldMappingArray0 [ 3 ] = fieldMappingArray0 [ 1 ] ; fieldMappingArray0 [ 4 ] = fieldMapping0 ; fieldMappingArray0 [ 5 ] = fieldMappingArray0 [ 0 ] ; fieldMappingArray0 [ 6 ] = fieldMappingArray0 [ 0 ] ; fieldMappingArray0 [ 7 ] = fieldMapping0 ; fieldMappingArray0 [ 8 ] = fieldMappingArray0 [ 0 ] ; String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 0 ] = "`@O'gmXSUr" ; stringArray0 [ 1 ] = " : HUn0 & * YlcX__" ; stringArray0 [ 2 ] = "`@O'gmXSUr" ; RegexEngine regexEngine0 = new RegexEngine ( ( MetaSearchImpl ) null , 951L , ( long ) ( - 1418 ) , ( - 585 . 7622F ) , " : HUn0 & * YlcX__" , "XVtlpF" , "`@O'gmXSUr" , "`@O'gmXSUr" , true , "FrClsC7" , fieldMappingArray0 , true , "XVtlpF" , "GMT - 7" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthMethod ( ) { return ( authMethod ) ; }
void test20 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 10 ] ; String [ ] stringArray0 = new String [ 10 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , 512L , ( long ) 1 , 2015 . 712F , "javax . net . ssl . trustStorePassword" , "5mX8$Ii & cVRa" , true , "javax . net . ssl . trustStorePassword" , "5mX8$Ii & cVRa" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test21 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 1 ] ; String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = "43" ; stringArray0 [ 1 ] = "43" ; stringArray0 [ 2 ] = "S' : c2" ; stringArray0 [ 3 ] = "43" ; stringArray0 [ 4 ] = "S' : c2" ; stringArray0 [ 5 ] = "43" ; stringArray0 [ 6 ] = "43" ; RegexEngine regexEngine0 = new RegexEngine ( ( MetaSearchImpl ) null , ( - 9223372036854775808L ) , ( - 9223372036854775808L ) , 0 . 0F , "43" , "S' : c2" , "43" , "43" , true , "43" , fieldMappingArray0 , false , "S' : c2" , "S' : c2" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test23 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 10 ] ; FieldMapping fieldMapping0 = new FieldMapping ( "" , ( - 1846 ) ) ; fieldMappingArray0 [ 0 ] = fieldMapping0 ; fieldMappingArray0 [ 1 ] = fieldMapping0 ; fieldMappingArray0 [ 2 ] = fieldMapping0 ; fieldMappingArray0 [ 3 ] = fieldMapping0 ; fieldMappingArray0 [ 4 ] = fieldMapping0 ; FieldMapping fieldMapping1 = new FieldMapping ( "" , 1 ) ; fieldMappingArray0 [ 5 ] = fieldMapping1 ; String [ ] stringArray0 = new String [ 10 ] ; RegexEngine regexEngine0 = new RegexEngine ( ( MetaSearchImpl ) null , ( long ) 512 , ( long ) 1 , 60 . 0F , "" , "" , "" , "" , false , "" , fieldMappingArray0 , false , "a6 | 3` ) U ; QzKLZ & eC ( & 3" , "a6 | 3` ) U ; QzKLZ & eC ( & 3" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test24 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 6 ] ; FieldMapping fieldMapping0 = new FieldMapping ( " november novembre noviembre november" , ( - 1 ) ) ; fieldMappingArray0 [ 0 ] = fieldMapping0 ; fieldMappingArray0 [ 1 ] = fieldMappingArray0 [ 0 ] ; fieldMappingArray0 [ 2 ] = fieldMappingArray0 [ 1 ] ; FieldMapping fieldMapping1 = new FieldMapping ( "43" , 1 ) ; fieldMappingArray0 [ 3 ] = fieldMapping1 ; JSONEngine jSONEngine0 = new JSONEngine ( ( MetaSearchImpl ) null , 0L , 0L , ( float ) 1L , "43" , "" , "43" , true , "43" , "43" , fieldMappingArray0 , true , "43" , "43" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test25 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 10 ] ; String [ ] stringArray0 = new String [ 10 ] ; RegexEngine regexEngine0 = new RegexEngine ( ( MetaSearchImpl ) null , 0L , 1687L , ( float ) 1L , "" , "" , "" , "% > `mr_Q15A - m - " , false , "" , fieldMappingArray0 , false , "% > `mr_Q15A - m - " , "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthMethod ( ) { return ( authMethod ) ; }
void test26 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , ( - 1L ) , 1L , 0 . 0F , "az . log" , "@Y4MW < } ; ^SNyy@el" , true , "az . log" , "az . log" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test27 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 10 ] ; String [ ] stringArray0 = new String [ 4 ] ; RegexEngine regexEngine0 = new RegexEngine ( ( MetaSearchImpl ) null , 8080L , 705L , ( float ) 98 , "vuze : * j7 ? ? %zk2hzdr ; " , "vuze : * j7 ? ? %zk2hzdr ; " , "vuze : * j7 ? ? %zk2hzdr ; " , " [ I@AQ2" , true , " [ I@AQ2" , fieldMappingArray0 , false , "vuze : * j7 ? ? %zk2hzdr ; " , "vuze : * j7 ? ? %zk2hzdr ; " , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test28 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 10 ] ; String [ ] stringArray0 = new String [ 4 ] ; RegexEngine regexEngine0 = new RegexEngine ( ( MetaSearchImpl ) null , 8080L , 705L , ( float ) 98 , "vuze : * j7 ? ? %zk2hzdr ; " , "vuze : * j7 ? ? %zk2hzdr ; " , "vuze : * j7 ? ? %zk2hzdr ; " , " [ I@AQ2" , true , " [ I@AQ2" , fieldMappingArray0 , false , "vuze : * j7 ? ? %zk2hzdr ; " , "vuze : * j7 ? ? %zk2hzdr ; " , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLoginPageUrl ( ) { / / Let's try with no login page url / / return loginPageUrl ; return searchURLFormat . replaceAll ( "%s" , "" ) ; }
void test29 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , 0L , 0L , 1137 . 3821F , "" , "" , true , "" , "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" pageDetails getWebPageContent ( SearchParameter [ ] searchParameters , Map < String , String > searchContext , String headers , boolean only_if_modified ) throws SearchException { try { TorrentUtils . setTLSDescription ( "Search : " + getName ( ) ) ; if ( requiresLogin ( ) ) { throw new SearchLoginException ( "login required" ) ; } String searchURL = searchURLFormat ; boolean vuze_file = searchURL . toLowerCase ( ) . startsWith ( "vuze : " ) ; if ( ! vuze_file ) { String [ ] from_strs = new String [ searchParameters . length ] ; String [ ] to_strs = new String [ searchParameters . length ] ; for ( int i = 0 ; i < searchParameters . length ; i + + ) { SearchParameter parameter = searchParameters [ i ] ; from_strs [ i ] = "%" + parameter . getMatchPattern ( ) ; to_strs [ i ] = URLEncoder . encode ( parameter . getValue ( ) , "UTF - 8" ) ; } searchURL = GeneralUtils . replaceAll ( searchURL , from_strs , to_strs ) ; Iterator < Map . Entry < String , String > > it = searchContext . entrySet ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { Map . Entry < String , String > entry = it . next ( ) ; String key = entry . getKey ( ) ; if ( supportsContext ( key ) ) { if ( searchURL . indexOf ( ' ? ' ) = = - 1 ) { searchURL + = " ? " ; } else { searchURL + = " & " ; } String value = entry . getValue ( ) ; searchURL + = key + " = " + URLEncoder . encode ( value , "UTF - 8" ) ; } } } / / System . out . println ( searchURL ) ; / / hack to support POST by encoding into URL / / http : / / xxxx / index . php ? main = search & azmethod = post_basic : SearchString1 = %s & SearchString = & search = Search ResourceDownloaderFactory rdf = StaticUtilities . getResourceDownloaderFactory ( ) ; URL initial_url ; ResourceDownloader initial_url_rd ; int post_pos = searchURL . indexOf ( "azmethod = " ) ; if ( post_pos > 0 ) { String post_params = searchURL . substring ( post_pos + 9 ) ; searchURL = searchURL . substring ( 0 , post_pos - 1 ) ; debugLog ( "search_url : " + searchURL + " , post = " + post_params ) ; initial_url = new URL ( searchURL ) ; int sep = post_params . indexOf ( ' : ' ) ; String type = post_params . substring ( 0 , sep ) ; if ( ! type . equals ( "post_basic" ) ) { throw ( new SearchException ( "Only basic type supported" ) ) ; } post_params = post_params . substring ( sep + 1 ) ; / / already URL encoded initial_url_rd = rdf . create ( initial_url , post_params ) ; initial_url_rd . setProperty ( "URL_Content - Type" , "application / x - www - form - urlencoded" ) ; } else { debugLog ( "search_url : " + searchURL ) ; initial_url = new URL ( searchURL ) ; initial_url_rd = rdf . create ( initial_url ) ; } setHeaders ( initial_url_rd , headers ) ; if ( needsAuth & & local_cookies ! = null ) { initial_url_rd . setProperty ( "URL_Cookie" , local_cookies ) ; } if ( only_if_modified ) { String last_modified = getLocalString ( LD_LAST_MODIFIED ) ; String etag = getLocalString ( LD_ETAG ) ; if ( last_modified ! = null ) { initial_url_rd . setProperty ( "URL_If - Modified - Since" , last_modified ) ; } if ( etag ! = null ) { initial_url_rd . setProperty ( "URL_If - None - Match" , etag ) ; } } InputStream is ; String content_charset = "UTF - 8" ; ResourceDownloader mr_rd = null ; if ( initial_url . getProtocol ( ) . equalsIgnoreCase ( "file" ) ) { / / handle file : / / c : / - map to file : / c : / String str = initial_url . toExternalForm ( ) ; if ( initial_url . getAuthority ( ) ! = null ) { str = str . replaceFirst ( " : / / " , " : / " ) ; } int pos = str . indexOf ( ' ? ' ) ; if ( pos ! = - 1 ) { str = str . substring ( 0 , pos ) ; } is = new FileInputStream ( new File ( new URL ( str ) . toURI ( ) ) ) ; } else { mr_rd = rdf . getMetaRefreshDownloader ( initial_url_rd ) ; try { is = mr_rd . download ( ) ; } catch ( ResourceDownloaderException e ) { Long response = ( Long ) mr_rd . getProperty ( "URL_HTTP_Response" ) ; if ( response ! = null & & response . longValue ( ) = = 304 ) { / / not modified return ( new pageDetails ( initial_url , initial_url , "" ) ) ; } else { throw ( e ) ; } } if ( needsAuth ) { List cookies_list = ( List ) mr_rd . getProperty ( "URL_Set - Cookie" ) ; List cookies_set = new ArrayList ( ) ; if ( cookies_list ! = null ) { for ( int i = 0 ; i < cookies_list . size ( ) ; i + + ) { String [ ] cookies = ( ( String ) cookies_list . get ( i ) ) . split ( " ; " ) ; for ( int j = 0 ; j < cookies . length ; j + + ) { String cookie = cookies [ j ] . trim ( ) ; if ( cookie . indexOf ( ' = ' ) ! = - 1 ) { cookies_set . add ( cookie ) ; } } } } / / well , not much we can do with the cookies anyway as in general the ones / / set are the ones missing / expired , not the existing ones . That is , we can't / / deduce anything from the fact that a required cookie is not 'set' here / / the most we could do is catch a server that explicitly deleted invalid / / cookies by expiring it , but I doubt this is a common practice . / / Also note the complexity of cookie syntax / / Set - Cookie : old standard using expires = , new using MaxAge / / Set - Cookie2 : / / Maybe use http : / / jcookie . sourceforge . net / if needed } if ( only_if_modified ) { String last_modified = extractProperty ( mr_rd . getProperty ( "URL_Last - Modified" ) ) ; String etag = extractProperty ( mr_rd . getProperty ( "URL_ETag" ) ) ; if ( last_modified ! = null ) { setLocalString ( LD_LAST_MODIFIED , last_modified ) ; } if ( etag ! = null ) { setLocalString ( LD_ETAG , etag ) ; } } List cts = ( List ) mr_rd . getProperty ( "URL_Content - Type" ) ; if ( cts ! = null & & cts . size ( ) > 0 ) { String content_type = ( String ) cts . get ( 0 ) ; int pos = content_type . toLowerCase ( ) . indexOf ( "charset" ) ; if ( pos ! = - 1 ) { content_type = content_type . substring ( pos + 1 ) ; pos = content_type . indexOf ( ' = ' ) ; if ( pos ! = - 1 ) { content_type = content_type . substring ( pos + 1 ) . trim ( ) ; pos = content_type . indexOf ( ' ; ' ) ; if ( pos ! = - 1 ) { content_type = content_type . substring ( 0 , pos ) . trim ( ) ; } if ( content_type . startsWith ( "\"" ) ) { content_type = content_type . substring ( 1 ) . trim ( ) ; } if ( content_type . endsWith ( "\"" ) ) { content_type = content_type . substring ( 0 , content_type . length ( ) - 1 ) . trim ( ) ; } try { if ( Charset . isSupported ( content_type ) ) { debugLog ( "charset : " + content_type ) ; content_charset = content_type ; } } catch ( Throwable e ) { try { / / handle lowercase 'utf - 8' for example content_type = content_type . toUpperCase ( ) ; if ( Charset . isSupported ( content_type ) ) { debugLog ( "charset : " + content_type ) ; content_charset = content_type ; } } catch ( Throwable f ) { log ( "Content type '" + content_type + "' not supported" , f ) ; } } } } } } ByteArrayOutputStream baos = new ByteArrayOutputStream ( 8192 ) ; byte [ ] buffer = new byte [ 8192 ] ; while ( true ) { int len = is . read ( buffer ) ; if ( len < = 0 ) { break ; } baos . write ( buffer , 0 , len ) ; } byte [ ] data = baos . toByteArray ( ) ; if ( vuze_file ) { try { VuzeFileHandler vfh = VuzeFileHandler . getSingleton ( ) ; VuzeFile vf = vfh . loadVuzeFile ( data ) ; vfh . handleFiles ( new VuzeFile [ ] { vf } , VuzeFileComponent . COMP_TYPE_NONE ) ; } catch ( Throwable e ) { Debug . out ( e ) ; } return ( new pageDetails ( initial_url , initial_url , null ) ) ; } String page = null ; String content = new String ( data , 0 , Math . min ( data . length , 2048 ) , content_charset ) ; String lc_content = content . toLowerCase ( ) ; { / / first look for xml charset / / e . g . < ? xml version = "1 . 0" encoding = "windows - 1251" ? > int pos1 = lc_content . indexOf ( " < ? xml" ) ; if ( pos1 ! = - 1 ) { int pos2 = lc_content . indexOf ( " ? > " ) ; if ( pos2 ! = - 1 ) { int pos3 = lc_content . indexOf ( "encoding" , pos1 ) ; if ( pos3 ! = - 1 ) { pos3 = lc_content . indexOf ( "\"" , pos3 ) ; } if ( pos3 > pos1 & & pos3 < pos2 ) { pos3 + + ; int pos4 = lc_content . indexOf ( "\"" , pos3 ) ; if ( pos4 > pos3 & & pos4 < pos2 ) { String encoding = content . substring ( pos3 , pos4 ) . trim ( ) ; try { if ( Charset . isSupported ( encoding ) ) { debugLog ( "charset from xml tag : " + encoding ) ; content_charset = encoding ; / / some feeds have crap at the start which makes pos2 mismatch for the above ' ? ' - adjust if necessary int data_start = pos2 ; int max_skip = 64 ; while ( data [ data_start ] ! = ' ? ' & & max_skip - - > 0 ) { data_start + + ; } page = content . substring ( 0 , pos3 ) + "utf - 8" + content . substring ( pos4 , pos2 ) + new String ( data , data_start , data . length - data_start , content_charset ) ; } } catch ( Throwable e ) { log ( "Content type '" + encoding + "' not supported" , e ) ; } } } } } } if ( page = = null ) { / / next look for http - equiv charset / / e . g . < meta http - equiv = "Content - Type" content = "text / html ; charset = windows - 1251" / > int pos = 0 ; while ( true ) { int pos1 = lc_content . indexOf ( "http - equiv" , pos ) ; if ( pos1 ! = - 1 ) { int pos2 = lc_content . indexOf ( " > " , pos1 ) ; if ( pos2 ! = - 1 ) { int pos3 = lc_content . indexOf ( "charset" , pos1 ) ; if ( pos3 ! = - 1 & & pos3 < pos2 ) { pos3 = lc_content . indexOf ( " = " , pos3 ) ; if ( pos3 ! = - 1 ) { pos3 + + ; int pos4 = lc_content . indexOf ( "\"" , pos3 ) ; if ( pos4 ! = - 1 ) { int pos5 = lc_content . indexOf ( " ; " , pos3 ) ; if ( pos5 ! = - 1 & & pos5 < pos4 ) { pos4 = pos5 ; } String encoding = content . substring ( pos3 , pos4 ) . trim ( ) ; try { if ( Charset . isSupported ( encoding ) ) { debugLog ( "charset from http - equiv : " + encoding ) ; content_charset = encoding ; / / some feeds have crap at the start which makes pos2 mismatch for the above ' ? ' - adjust if necessary int data_start = pos2 ; int max_skip = 64 ; while ( data [ data_start ] ! = ' ? ' & & max_skip - - > 0 ) { data_start + + ; } page = content . substring ( 0 , pos3 ) + "utf - 8" + content . substring ( pos4 , pos2 ) + new String ( data , data_start , data . length - data_start , content_charset ) ; } } catch ( Throwable e ) { log ( "Content type '" + encoding + "' not supported" , e ) ; } break ; } } } pos = pos2 ; } else { break ; } } else { break ; } } } if ( page = = null ) { page = new String ( data , content_charset ) ; } debugLog ( "page : " ) ; debugLog ( page ) ; / / List cookie = ( List ) url_rd . getProperty ( "URL_Set - Cookie" ) ; try { Matcher m = baseTagPattern . matcher ( page ) ; if ( m . find ( ) ) { basePage = m . group ( 1 ) ; debugLog ( "base_page : " + basePage ) ; } } catch ( Exception e ) { / / No BASE tag in the page } URL final_url = initial_url ; if ( mr_rd ! = null ) { URL x = ( URL ) mr_rd . getProperty ( "URL_URL" ) ; if ( x ! = null ) { final_url = x ; } } return ( new pageDetails ( initial_url , final_url , page ) ) ; } catch ( SearchException e ) { throw ( e ) ; } catch ( Throwable e ) { / / e . printStackTrace ( ) ; debugLog ( "Failed to load page : " + Debug . getNestedExceptionMessageAndStack ( e ) ) ; throw ( new SearchException ( "Failed to load page" , e ) ) ; } finally { TorrentUtils . setTLSDescription ( null ) ; } }
void test30 ( ) throws Throwable { MetaSearchImpl metaSearchImpl0 = null ; long long0 = 3L ; String string0 = " < Ak" ; boolean boolean0 = false ; String [ ] stringArray0 = new String [ 9 ] ; stringArray0 [ 6 ] = string0 ; RSSEngine rSSEngine0 = new RSSEngine ( metaSearchImpl0 , long0 , long0 , ( float ) long0 , string0 , string0 , boolean0 , string0 , string0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" pageDetails getWebPageContent ( SearchParameter [ ] searchParameters , Map < String , String > searchContext , String headers , boolean only_if_modified ) throws SearchException { try { TorrentUtils . setTLSDescription ( "Search : " + getName ( ) ) ; if ( requiresLogin ( ) ) { throw new SearchLoginException ( "login required" ) ; } String searchURL = searchURLFormat ; boolean vuze_file = searchURL . toLowerCase ( ) . startsWith ( "vuze : " ) ; if ( ! vuze_file ) { String [ ] from_strs = new String [ searchParameters . length ] ; String [ ] to_strs = new String [ searchParameters . length ] ; for ( int i = 0 ; i < searchParameters . length ; i + + ) { SearchParameter parameter = searchParameters [ i ] ; from_strs [ i ] = "%" + parameter . getMatchPattern ( ) ; to_strs [ i ] = URLEncoder . encode ( parameter . getValue ( ) , "UTF - 8" ) ; } searchURL = GeneralUtils . replaceAll ( searchURL , from_strs , to_strs ) ; Iterator < Map . Entry < String , String > > it = searchContext . entrySet ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { Map . Entry < String , String > entry = it . next ( ) ; String key = entry . getKey ( ) ; if ( supportsContext ( key ) ) { if ( searchURL . indexOf ( ' ? ' ) = = - 1 ) { searchURL + = " ? " ; } else { searchURL + = " & " ; } String value = entry . getValue ( ) ; searchURL + = key + " = " + URLEncoder . encode ( value , "UTF - 8" ) ; } } } / / System . out . println ( searchURL ) ; / / hack to support POST by encoding into URL / / http : / / xxxx / index . php ? main = search & azmethod = post_basic : SearchString1 = %s & SearchString = & search = Search ResourceDownloaderFactory rdf = StaticUtilities . getResourceDownloaderFactory ( ) ; URL initial_url ; ResourceDownloader initial_url_rd ; int post_pos = searchURL . indexOf ( "azmethod = " ) ; if ( post_pos > 0 ) { String post_params = searchURL . substring ( post_pos + 9 ) ; searchURL = searchURL . substring ( 0 , post_pos - 1 ) ; debugLog ( "search_url : " + searchURL + " , post = " + post_params ) ; initial_url = new URL ( searchURL ) ; int sep = post_params . indexOf ( ' : ' ) ; String type = post_params . substring ( 0 , sep ) ; if ( ! type . equals ( "post_basic" ) ) { throw ( new SearchException ( "Only basic type supported" ) ) ; } post_params = post_params . substring ( sep + 1 ) ; / / already URL encoded initial_url_rd = rdf . create ( initial_url , post_params ) ; initial_url_rd . setProperty ( "URL_Content - Type" , "application / x - www - form - urlencoded" ) ; } else { debugLog ( "search_url : " + searchURL ) ; initial_url = new URL ( searchURL ) ; initial_url_rd = rdf . create ( initial_url ) ; } setHeaders ( initial_url_rd , headers ) ; if ( needsAuth & & local_cookies ! = null ) { initial_url_rd . setProperty ( "URL_Cookie" , local_cookies ) ; } if ( only_if_modified ) { String last_modified = getLocalString ( LD_LAST_MODIFIED ) ; String etag = getLocalString ( LD_ETAG ) ; if ( last_modified ! = null ) { initial_url_rd . setProperty ( "URL_If - Modified - Since" , last_modified ) ; } if ( etag ! = null ) { initial_url_rd . setProperty ( "URL_If - None - Match" , etag ) ; } } InputStream is ; String content_charset = "UTF - 8" ; ResourceDownloader mr_rd = null ; if ( initial_url . getProtocol ( ) . equalsIgnoreCase ( "file" ) ) { / / handle file : / / c : / - map to file : / c : / String str = initial_url . toExternalForm ( ) ; if ( initial_url . getAuthority ( ) ! = null ) { str = str . replaceFirst ( " : / / " , " : / " ) ; } int pos = str . indexOf ( ' ? ' ) ; if ( pos ! = - 1 ) { str = str . substring ( 0 , pos ) ; } is = new FileInputStream ( new File ( new URL ( str ) . toURI ( ) ) ) ; } else { mr_rd = rdf . getMetaRefreshDownloader ( initial_url_rd ) ; try { is = mr_rd . download ( ) ; } catch ( ResourceDownloaderException e ) { Long response = ( Long ) mr_rd . getProperty ( "URL_HTTP_Response" ) ; if ( response ! = null & & response . longValue ( ) = = 304 ) { / / not modified return ( new pageDetails ( initial_url , initial_url , "" ) ) ; } else { throw ( e ) ; } } if ( needsAuth ) { List cookies_list = ( List ) mr_rd . getProperty ( "URL_Set - Cookie" ) ; List cookies_set = new ArrayList ( ) ; if ( cookies_list ! = null ) { for ( int i = 0 ; i < cookies_list . size ( ) ; i + + ) { String [ ] cookies = ( ( String ) cookies_list . get ( i ) ) . split ( " ; " ) ; for ( int j = 0 ; j < cookies . length ; j + + ) { String cookie = cookies [ j ] . trim ( ) ; if ( cookie . indexOf ( ' = ' ) ! = - 1 ) { cookies_set . add ( cookie ) ; } } } } / / well , not much we can do with the cookies anyway as in general the ones / / set are the ones missing / expired , not the existing ones . That is , we can't / / deduce anything from the fact that a required cookie is not 'set' here / / the most we could do is catch a server that explicitly deleted invalid / / cookies by expiring it , but I doubt this is a common practice . / / Also note the complexity of cookie syntax / / Set - Cookie : old standard using expires = , new using MaxAge / / Set - Cookie2 : / / Maybe use http : / / jcookie . sourceforge . net / if needed } if ( only_if_modified ) { String last_modified = extractProperty ( mr_rd . getProperty ( "URL_Last - Modified" ) ) ; String etag = extractProperty ( mr_rd . getProperty ( "URL_ETag" ) ) ; if ( last_modified ! = null ) { setLocalString ( LD_LAST_MODIFIED , last_modified ) ; } if ( etag ! = null ) { setLocalString ( LD_ETAG , etag ) ; } } List cts = ( List ) mr_rd . getProperty ( "URL_Content - Type" ) ; if ( cts ! = null & & cts . size ( ) > 0 ) { String content_type = ( String ) cts . get ( 0 ) ; int pos = content_type . toLowerCase ( ) . indexOf ( "charset" ) ; if ( pos ! = - 1 ) { content_type = content_type . substring ( pos + 1 ) ; pos = content_type . indexOf ( ' = ' ) ; if ( pos ! = - 1 ) { content_type = content_type . substring ( pos + 1 ) . trim ( ) ; pos = content_type . indexOf ( ' ; ' ) ; if ( pos ! = - 1 ) { content_type = content_type . substring ( 0 , pos ) . trim ( ) ; } if ( content_type . startsWith ( "\"" ) ) { content_type = content_type . substring ( 1 ) . trim ( ) ; } if ( content_type . endsWith ( "\"" ) ) { content_type = content_type . substring ( 0 , content_type . length ( ) - 1 ) . trim ( ) ; } try { if ( Charset . isSupported ( content_type ) ) { debugLog ( "charset : " + content_type ) ; content_charset = content_type ; } } catch ( Throwable e ) { try { / / handle lowercase 'utf - 8' for example content_type = content_type . toUpperCase ( ) ; if ( Charset . isSupported ( content_type ) ) { debugLog ( "charset : " + content_type ) ; content_charset = content_type ; } } catch ( Throwable f ) { log ( "Content type '" + content_type + "' not supported" , f ) ; } } } } } } ByteArrayOutputStream baos = new ByteArrayOutputStream ( 8192 ) ; byte [ ] buffer = new byte [ 8192 ] ; while ( true ) { int len = is . read ( buffer ) ; if ( len < = 0 ) { break ; } baos . write ( buffer , 0 , len ) ; } byte [ ] data = baos . toByteArray ( ) ; if ( vuze_file ) { try { VuzeFileHandler vfh = VuzeFileHandler . getSingleton ( ) ; VuzeFile vf = vfh . loadVuzeFile ( data ) ; vfh . handleFiles ( new VuzeFile [ ] { vf } , VuzeFileComponent . COMP_TYPE_NONE ) ; } catch ( Throwable e ) { Debug . out ( e ) ; } return ( new pageDetails ( initial_url , initial_url , null ) ) ; } String page = null ; String content = new String ( data , 0 , Math . min ( data . length , 2048 ) , content_charset ) ; String lc_content = content . toLowerCase ( ) ; { / / first look for xml charset / / e . g . < ? xml version = "1 . 0" encoding = "windows - 1251" ? > int pos1 = lc_content . indexOf ( " < ? xml" ) ; if ( pos1 ! = - 1 ) { int pos2 = lc_content . indexOf ( " ? > " ) ; if ( pos2 ! = - 1 ) { int pos3 = lc_content . indexOf ( "encoding" , pos1 ) ; if ( pos3 ! = - 1 ) { pos3 = lc_content . indexOf ( "\"" , pos3 ) ; } if ( pos3 > pos1 & & pos3 < pos2 ) { pos3 + + ; int pos4 = lc_content . indexOf ( "\"" , pos3 ) ; if ( pos4 > pos3 & & pos4 < pos2 ) { String encoding = content . substring ( pos3 , pos4 ) . trim ( ) ; try { if ( Charset . isSupported ( encoding ) ) { debugLog ( "charset from xml tag : " + encoding ) ; content_charset = encoding ; / / some feeds have crap at the start which makes pos2 mismatch for the above ' ? ' - adjust if necessary int data_start = pos2 ; int max_skip = 64 ; while ( data [ data_start ] ! = ' ? ' & & max_skip - - > 0 ) { data_start + + ; } page = content . substring ( 0 , pos3 ) + "utf - 8" + content . substring ( pos4 , pos2 ) + new String ( data , data_start , data . length - data_start , content_charset ) ; } } catch ( Throwable e ) { log ( "Content type '" + encoding + "' not supported" , e ) ; } } } } } } if ( page = = null ) { / / next look for http - equiv charset / / e . g . < meta http - equiv = "Content - Type" content = "text / html ; charset = windows - 1251" / > int pos = 0 ; while ( true ) { int pos1 = lc_content . indexOf ( "http - equiv" , pos ) ; if ( pos1 ! = - 1 ) { int pos2 = lc_content . indexOf ( " > " , pos1 ) ; if ( pos2 ! = - 1 ) { int pos3 = lc_content . indexOf ( "charset" , pos1 ) ; if ( pos3 ! = - 1 & & pos3 < pos2 ) { pos3 = lc_content . indexOf ( " = " , pos3 ) ; if ( pos3 ! = - 1 ) { pos3 + + ; int pos4 = lc_content . indexOf ( "\"" , pos3 ) ; if ( pos4 ! = - 1 ) { int pos5 = lc_content . indexOf ( " ; " , pos3 ) ; if ( pos5 ! = - 1 & & pos5 < pos4 ) { pos4 = pos5 ; } String encoding = content . substring ( pos3 , pos4 ) . trim ( ) ; try { if ( Charset . isSupported ( encoding ) ) { debugLog ( "charset from http - equiv : " + encoding ) ; content_charset = encoding ; / / some feeds have crap at the start which makes pos2 mismatch for the above ' ? ' - adjust if necessary int data_start = pos2 ; int max_skip = 64 ; while ( data [ data_start ] ! = ' ? ' & & max_skip - - > 0 ) { data_start + + ; } page = content . substring ( 0 , pos3 ) + "utf - 8" + content . substring ( pos4 , pos2 ) + new String ( data , data_start , data . length - data_start , content_charset ) ; } } catch ( Throwable e ) { log ( "Content type '" + encoding + "' not supported" , e ) ; } break ; } } } pos = pos2 ; } else { break ; } } else { break ; } } } if ( page = = null ) { page = new String ( data , content_charset ) ; } debugLog ( "page : " ) ; debugLog ( page ) ; / / List cookie = ( List ) url_rd . getProperty ( "URL_Set - Cookie" ) ; try { Matcher m = baseTagPattern . matcher ( page ) ; if ( m . find ( ) ) { basePage = m . group ( 1 ) ; debugLog ( "base_page : " + basePage ) ; } } catch ( Exception e ) { / / No BASE tag in the page } URL final_url = initial_url ; if ( mr_rd ! = null ) { URL x = ( URL ) mr_rd . getProperty ( "URL_URL" ) ; if ( x ! = null ) { final_url = x ; } } return ( new pageDetails ( initial_url , final_url , page ) ) ; } catch ( SearchException e ) { throw ( e ) ; } catch ( Throwable e ) { / / e . printStackTrace ( ) ; debugLog ( "Failed to load page : " + Debug . getNestedExceptionMessageAndStack ( e ) ) ; throw ( new SearchException ( "Failed to load page" , e ) ) ; } finally { TorrentUtils . setTLSDescription ( null ) ; } }
void test31 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 10 ] ; String [ ] stringArray0 = new String [ 10 ] ; RegexEngine regexEngine0 = new RegexEngine ( ( MetaSearchImpl ) null , 0L , 1687L , ( float ) 1L , "" , "" , "" , "% > `mr_Q15A - m - " , false , "" , fieldMappingArray0 , false , "% > `mr_Q15A - m - " , "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLoginPageUrl ( ) { / / Let's try with no login page url / / return loginPageUrl ; return searchURLFormat . replaceAll ( "%s" , "" ) ; }
void test32 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 10 ] ; String [ ] stringArray0 = new String [ 10 ] ; JSONEngine jSONEngine0 = new JSONEngine ( ( MetaSearchImpl ) null , 0L , 0L , ( - 888 . 5174F ) , "~H7D 6aB : to , B { 'Ro^ * " , "" , "o + ! UfsQV } w , UF" , true , "~H7D 6aB : to , B { 'Ro^ * " , "o + ! UfsQV } w , UF" , fieldMappingArray0 , false , "" , "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameEx ( ) ; long getId ( ) ; String getUID ( ) ; int getVersion ( ) ; long getLastUpdated ( ) ; String getIcon ( ) ; String getDownloadLinkCSS ( ) ; boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test33 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , ( long ) ( - 1051 ) , ( long ) ( - 1051 ) , ( float ) ( - 1051 ) , "die die die" , "die die die" , true , "die die die" , "die die die" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test34 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 10 ] ; FieldMapping fieldMapping0 = new FieldMapping ( "" , ( - 1256 ) ) ; fieldMappingArray0 [ 0 ] = fieldMapping0 ; fieldMappingArray0 [ 1 ] = fieldMapping0 ; fieldMappingArray0 [ 2 ] = fieldMappingArray0 [ 0 ] ; fieldMappingArray0 [ 3 ] = fieldMapping0 ; fieldMappingArray0 [ 4 ] = fieldMappingArray0 [ 0 ] ; fieldMappingArray0 [ 5 ] = fieldMappingArray0 [ 3 ] ; fieldMappingArray0 [ 6 ] = fieldMappingArray0 [ 0 ] ; fieldMappingArray0 [ 7 ] = fieldMappingArray0 [ 5 ] ; fieldMappingArray0 [ 8 ] = fieldMappingArray0 [ 1 ] ; fieldMappingArray0 [ 9 ] = fieldMappingArray0 [ 5 ] ; String [ ] stringArray0 = new String [ 6 ] ; JSONEngine jSONEngine0 = new JSONEngine ( ( MetaSearchImpl ) null , 0L , 0L , ( - 888 . 5174F ) , "~H7D 6aB : to , B { 'Ro^ * " , "" , "o + ! UfsQV } w , UF" , true , "~H7D 6aB : to , B { 'Ro^ * " , "o + ! UfsQV } w , UF" , fieldMappingArray0 , false , "" , "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test35 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 1 ] ; FieldMapping fieldMapping0 = new FieldMapping ( "43" , ( - 1051 ) ) ; fieldMappingArray0 [ 0 ] = fieldMapping0 ; String [ ] stringArray0 = new String [ 6 ] ; JSONEngine jSONEngine0 = new JSONEngine ( ( MetaSearchImpl ) null , ( - 1936L ) , ( - 1194L ) , ( float ) ( - 1936L ) , "43" , "43" , "43" , false , "43" , "43" , fieldMappingArray0 , false , "" , "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test36 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 5 ] ; JSONEngine jSONEngine0 = new JSONEngine ( ( MetaSearchImpl ) null , 900L , 184L , ( float ) 0L , "" , "" , "" , false , "" , "" , fieldMappingArray0 , false , "" , "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthMethod ( ) { return ( authMethod ) ; }
void test37 ( ) throws Throwable { String [ ] stringArray0 = new String [ 5 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , 1000L , ( long ) ( - 109 ) , 1 . 0F , "" , "" , true , "" , "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test38 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , 1L , 1L , ( float ) 1L , "43" , "43" , true , "43" , "43" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNeedsAuth ( ) { return needsAuth ; }
void test39 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 5 ] ; JSONEngine jSONEngine0 = new JSONEngine ( ( MetaSearchImpl ) null , 900L , 184L , ( float ) 0L , "" , "" , "" , false , "" , "" , fieldMappingArray0 , false , "" , "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthMethod ( ) { return ( authMethod ) ; }
void test0 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "~ & f2 ? FE^WI' } wCw = " , "~ & f2 ? FE^WI' } wCw = " , ( DateParser ) dateParserRegex0 , ( String ) null ) ; webResult0 . setDrmKey ( "dht : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test1 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , ( String ) null , ( String ) null , ( DateParser ) null , ( String ) null ) ; String string0 = webResult0 . getContentType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "AutoSpeed Choking Ping Milis" , "AutoSpeed Choking Ping Milis" , ( DateParser ) dateParserRegex0 , "AutoSpeed Choking Ping Milis" ) ; String string0 = webResult0 . getDRMKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test3 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( "Ud / aE0l# < ~3 + w" , true , "Ud / aE0l# < ~3 + w" ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "Ud / aE0l# < ~3 + w" , "Ud / aE0l# < ~3 + w" , ( DateParser ) dateParserRegex0 , "Ud / aE0l# < ~3 + w" ) ; webResult0 . setCategory ( "Ud / aE0l# < ~3 + w" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test6 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( "Alg . lias . AlgortmParam * ers . BEWIHSA1ANDC2" , true , "Alg . lias . AlgortmParam * ers . BEWIHSA1ANDC2" ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "Alg . lias . AlgortmParam * ers . BEWIHSA1ANDC2" , "Alg . lias . AlgortmParam * ers . BEWIHSA1ANDC2" , ( DateParser ) dateParserRegex0 , "Alg . lias . AlgortmParam * ers . BEWIHSA1ANDC2" ) ; webResult0 . setUID ( "Alg . lias . AlgortmParam * ers . BEWIHSA1ANDC2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test7 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , "https : / / keypa" , "https : / / keypa" , ( DateParser ) null , "https : / / keypa" ) ; webResult0 . setPublishedDate ( ( Date ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test9 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , ( String ) null , ( String ) null , ( DateParser ) null , ( String ) null ) ; webResult0 . setContentType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test10 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( "" , false , "" ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "" , "" , ( DateParser ) dateParserRegex0 , "" ) ; float float0 = webResult0 . getAccuracy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test11 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , " / ' " , " / ' " , ( DateParser ) null , " / ' " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test12 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "~ & f2 ? FE^WI' } wCw = " , "~ & f2 ? FE^WI' } wCw = " , ( DateParser ) dateParserRegex0 , ( String ) null ) ; String string0 = webResult0 . getHash ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test13 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , ( String ) null , ( String ) null , ( DateParser ) null , ( String ) null ) ; String string0 = webResult0 . getCDPLink ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test14 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "~ < qbO * ST^" , "~ < qbO * ST^" , ( DateParser ) dateParserClassic0 , "~ < qbO * ST^" ) ; String string0 = webResult0 . getUID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test15 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( "6" , false , "6" ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "6" , "6" , ( DateParser ) dateParserRegex0 , "6" ) ; webResult0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test16 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( "" , false , "" ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "" , "" , ( DateParser ) dateParserRegex0 , "" ) ; webResult0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test17 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , ( String ) null , ( String ) null , ( DateParser ) null , ( String ) null ) ; webResult0 . setNameFromHTML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test18 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , "\rk & 7 ( 0 { Om < sa + Gm" , "\rk & 7 ( 0 { Om < sa + Gm" , ( DateParser ) null , "\rk & 7 ( 0 { Om < sa + Gm" ) ; webResult0 . setNameFromHTML ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test19 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , ( String ) null , ( String ) null , ( DateParser ) null , ( String ) null ) ; webResult0 . setCommentsFromHTML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test20 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , " / ' " , " / ' " , ( DateParser ) null , " / ' " ) ; webResult0 . setCommentsFromHTML ( " / ' / ' " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test21 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "AutoSpeed Choking Ping Milis" , "AutoSpeed Choking Ping Milis" , ( DateParser ) dateParserRegex0 , "AutoSpeed Choking Ping Milis" ) ; webResult0 . setCategoryFromHTML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test22 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( "Ud / aE0l# < ~3 + w" , true , "Ud / aE0l# < ~3 + w" ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "Ud / aE0l# < ~3 + w" , "Ud / aE0l# < ~3 + w" , ( DateParser ) dateParserRegex0 , "Ud / aE0l# < ~3 + w" ) ; webResult0 . setCategoryFromHTML ( "Ud / aE0l# < ~3 + w" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCategory ( ) ; void setCategory ( String category ) ; String getContentType ( ) ; void setContentType ( String contentType ) ; String getName ( ) ; long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test23 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( "" , false , "" ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "" , "" , ( DateParser ) dateParserRegex0 , "" ) ; webResult0 . setNbPeersFromHTML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test24 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , " & az_template_version = " , ( String ) null , ( DateParser ) null , ( String ) null ) ; webResult0 . setNbPeersFromHTML ( "Tracker TCP NonBlocking Immediate Close" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test25 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , "keypa" , "keypa" , ( DateParser ) null , "keypa" ) ; webResult0 . setNbSeedsFromHTML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test26 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "~ & f2 ? FE^WI' } wCw = " , "~ & f2 ? FE^WI' } wCw = " , ( DateParser ) dateParserRegex0 , ( String ) null ) ; webResult0 . setNbSeedsFromHTML ( "~ & f2 ? FE^WI' } wCw = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test27 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "AutoSpeed Choking Ping Milis" , "AutoSpeed Choking Ping Milis" , ( DateParser ) dateParserRegex0 , "AutoSpeed Choking Ping Milis" ) ; webResult0 . setNbSuperSeedsFromHTML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test28 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , "keypa" , "keypa" , ( DateParser ) null , "keypa" ) ; webResult0 . setNbSuperSeedsFromHTML ( "keypa" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test29 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "b" , "b" , ( DateParser ) dateParserClassic0 , "b" ) ; webResult0 . setRankFromHTML ( "b" , ( float ) ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test30 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , ( String ) null , ( String ) null , ( DateParser ) null , ( String ) null ) ; webResult0 . setRankFromHTML ( ( String ) null , ( float ) ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test31 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , " & az_template_version = " , ( String ) null , ( DateParser ) null , ( String ) null ) ; webResult0 . setRankFromHTML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test33 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , "KFa / , n | qLtU' { T < \"r" , "KFa / , n | qLtU' { T < \"r" , ( DateParser ) null , "KFa / , n | qLtU' { T < \"r" ) ; webResult0 . setRankFromHTML ( "222" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test34 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , " & az_template_version = " , ( String ) null , ( DateParser ) null , ( String ) null ) ; webResult0 . setPublishedDateFromHTML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test35 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "~ & f2 ? FE^WI' } wCw = " , "~ & f2 ? FE^WI' } wCw = " , ( DateParser ) dateParserRegex0 , ( String ) null ) ; webResult0 . setPublishedDateFromHTML ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test36 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , ( String ) null , ( String ) null , ( DateParser ) null , ( String ) null ) ; webResult0 . setSizeFromHTML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test37 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( "results" , true , "results" ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "results" , "results" , ( DateParser ) dateParserClassic0 , "8745" ) ; webResult0 . setSizeFromHTML ( "8745" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test38 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( " > RT^" , true , " > RT^" ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , " > RT^" , " > RT^" , ( DateParser ) dateParserClassic0 , " > RT^" ) ; webResult0 . setVotesFromHTML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test39 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( "Alg . lias . AlgortmParam * ers . BEWIHSA1ANDC2" , true , "Alg . lias . AlgortmParam * ers . BEWIHSA1ANDC2" ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "Alg . lias . AlgortmParam * ers . BEWIHSA1ANDC2" , "Alg . lias . AlgortmParam * ers . BEWIHSA1ANDC2" , ( DateParser ) dateParserRegex0 , "Alg . lias . AlgortmParam * ers . BEWIHSA1ANDC2" ) ; webResult0 . setVotesFromHTML ( "Alg . lias . AlgortmParam * ers . BEWIHSA1ANDC2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test40 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( "" , false , "" ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "" , "" , ( DateParser ) dateParserRegex0 , "" ) ; webResult0 . setVotesDownFromHTML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test41 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( "6" , false , "6" ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "6" , "6" , ( DateParser ) dateParserRegex0 , "6" ) ; webResult0 . setVotesDownFromHTML ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test42 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , ( String ) null , ( String ) null , ( DateParser ) null , ( String ) null ) ; webResult0 . setPrivateFromHTML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test43 ( ) throws Throwable { DateParserRegex dateParserRegex0 = new DateParserRegex ( " | " , false , " | " ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , " | " , " | " , ( DateParser ) dateParserRegex0 , " | " ) ; webResult0 . setPrivateFromHTML ( " | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test44 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , "\rk & 7 ( 0 { Om < sa + Gm" , "\rk & 7 ( 0 { Om < sa + Gm" , ( DateParser ) null , "\rk & 7 ( 0 { Om < sa + Gm" ) ; webResult0 . setPrivateFromHTML ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test45 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( " > RT^" , true , " > RT^" ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , " > RT^" , " > RT^" , ( DateParser ) dateParserClassic0 , " > RT^" ) ; webResult0 . setHash ( " > RT^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test46 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , "keypa" , "keypa" , ( DateParser ) null , "keypa" ) ; String string0 = webResult0 . getDownloadButtonLink ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test47 ( ) throws Throwable { DateParserClassic dateParserClassic0 = new DateParserClassic ( ) ; WebResult webResult0 = new WebResult ( ( Engine ) null , "magnet : bctp : " , "magnet : bctp : " , ( DateParser ) dateParserClassic0 , "magnet : bctp : " ) ; webResult0 . downloadButtonLink = "magnet : bctp : " ; String string0 = webResult0 . getDownloadButtonLink ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test48 ( ) throws Throwable { WebResult webResult0 = new WebResult ( ( Engine ) null , "https : / / keypa" , "https : / / keypa" , ( DateParser ) null , "https : / / keypa" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test0 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 5 ] ; FieldMapping fieldMapping0 = new FieldMapping ( "'Hx , @YV" , 150 ) ; fieldMappingArray0 [ 0 ] = fieldMapping0 ; fieldMappingArray0 [ 1 ] = fieldMapping0 ; fieldMappingArray0 [ 2 ] = fieldMappingArray0 [ 0 ] ; fieldMappingArray0 [ 3 ] = fieldMapping0 ; fieldMappingArray0 [ 4 ] = fieldMapping0 ; String [ ] stringArray0 = new String [ 5 ] ; stringArray0 [ 0 ] = "'Hx , @YV" ; stringArray0 [ 1 ] = "'Hx , @YV" ; stringArray0 [ 2 ] = "'Hx , @YV" ; stringArray0 [ 3 ] = "'Hx , @YV" ; stringArray0 [ 4 ] = "'Hx , @YV" ; RegexEngine regexEngine0 = new RegexEngine ( ( MetaSearchImpl ) null , 0L , 0L , ( float ) 0L , "'Hx , @YV" , "'Hx , @YV" , "'Hx , @YV" , "'Hx , @YV" , true , "'Hx , @YV" , fieldMappingArray0 , true , "'Hx , @YV" , "'Hx , @YV" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test3 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 5 ] ; String [ ] stringArray0 = new String [ 5 ] ; RegexEngine regexEngine0 = new RegexEngine ( ( MetaSearchImpl ) null , 0L , 0L , ( float ) 0L , "'Hx , @YV" , "'Hx , @YV" , "'Hx , @YV" , "'Hx , @YV" , true , "'Hx , @YV" , fieldMappingArray0 , true , "'Hx , @YV" , "'Hx , @YV" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test1 ( ) throws Throwable { FieldMapping [ ] fieldMappingArray0 = new FieldMapping [ 2 ] ; FieldMapping fieldMapping0 = new FieldMapping ( "i0Gd@ , # ; '" , 1031 ) ; fieldMappingArray0 [ 0 ] = fieldMapping0 ; fieldMappingArray0 [ 1 ] = fieldMappingArray0 [ 0 ] ; String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = "i0Gd@ , # ; '" ; stringArray0 [ 1 ] = "i0Gd@ , # ; '" ; stringArray0 [ 2 ] = "i0Gd@ , # ; '" ; stringArray0 [ 3 ] = "i0Gd@ , # ; '" ; stringArray0 [ 4 ] = "i0Gd@ , # ; '" ; stringArray0 [ 5 ] = "i0Gd@ , # ; '" ; stringArray0 [ 6 ] = "i0Gd@ , # ; '" ; JSONEngine jSONEngine0 = new JSONEngine ( ( MetaSearchImpl ) null , ( - 6L ) , ( - 6L ) , ( float ) ( - 6L ) , "i0Gd@ , # ; '" , "i0Gd@ , # ; '" , "i0Gd@ , # ; '" , true , "i0Gd@ , # ; '" , "i0Gd@ , # ; '" , fieldMappingArray0 , true , "i0Gd@ , # ; '" , "i0Gd@ , # ; '" , stringArray0 ) ; Map < Object , Object > map0 = jSONEngine0 . exportToBencodedMap ( ) ; JSONEngine jSONEngine1 = new JSONEngine ( ( MetaSearchImpl ) null , ( Map ) map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , 0L , 0L , ( float ) 0L , "force_full" , "force_full" , false , "force_full" , "force_full" , stringArray0 ) ; int int0 = rSSEngine0 . getAutoDownloadSupported ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , ( - 1342L ) , ( - 1342L ) , ( float ) ( - 1342L ) , "udpport" , "udpport" , true , "udpport" , "udpport" , stringArray0 ) ; boolean boolean0 = rSSEngine0 . supportsField ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , 0L , 0L , ( float ) 0L , "org . bouncycaste . jceprovider . JCEMac$Tiger" , "org . bouncycaste . jceprovider . JCEMac$Tiger" , true , "org . bouncycaste . jceprovider . JCEMac$Tiger" , "org . bouncycaste . jceprovider . JCEMac$Tiger" , stringArray0 ) ; boolean boolean0 = rSSEngine0 . supportsField ( ( - 12 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , ( - 9223372036854775807L ) , ( - 9223372036854775807L ) , ( float ) ( - 9223372036854775807L ) , "V" , "V" , false , "V" , "V" , stringArray0 ) ; boolean boolean0 = rSSEngine0 . supportsField ( 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; RSSEngine rSSEngine0 = new RSSEngine ( ( MetaSearchImpl ) null , 1L , 1L , ( float ) 1L , "x | \" : T" , "x | \" : T" , true , "x | \" : T" , "x | \" : T" , stringArray0 ) ; boolean boolean0 = rSSEngine0 . supportsField ( 103 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test1 ( ) throws Throwable { PluginResult pluginResult0 = new PluginResult ( ( PluginEngine ) null , ( SearchResult ) null , "" ) ; int int0 = pluginResult0 . getVotes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test2 ( ) throws Throwable { PluginResult pluginResult0 = new PluginResult ( ( PluginEngine ) null , ( SearchResult ) null , "Alg . Alias . Signature . SHA1withRSAEncryption" ) ; String string0 = pluginResult0 . getSearchQuery ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test3 ( ) throws Throwable { PluginResult pluginResult0 = new PluginResult ( ( PluginEngine ) null , ( SearchResult ) null , " . , I { dQk { " ) ; String string0 = pluginResult0 . getDownloadLink ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { PluginResult pluginResult0 = new PluginResult ( ( PluginEngine ) null , ( SearchResult ) null , "Alg . Alias . Signature . SHA1withRSAEncryption" ) ; String string0 = pluginResult0 . getPlayLink ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test5 ( ) throws Throwable { PluginResult pluginResult0 = new PluginResult ( ( PluginEngine ) null , ( SearchResult ) null , "f ? * ( l56OA ? | gC ; , nET" ) ; String string0 = pluginResult0 . getDownloadButtonLink ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test6 ( ) throws Throwable { PluginResult pluginResult0 = new PluginResult ( ( PluginEngine ) null , ( SearchResult ) null , "2 + = a { 7g5 * on7 } c ( " ) ; String string0 = pluginResult0 . getUID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test7 ( ) throws Throwable { PluginResult pluginResult0 = new PluginResult ( ( PluginEngine ) null , ( SearchResult ) null , "f ? * ( l56OA ? | gC ; , nET" ) ; String string0 = pluginResult0 . getCDPLink ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test8 ( ) throws Throwable { PluginResult pluginResult0 = new PluginResult ( ( PluginEngine ) null , ( SearchResult ) null , "Alg . Alias . Signature . SHA1withRSAEncryption" ) ; pluginResult0 . setCategory ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test9 ( ) throws Throwable { PluginResult pluginResult0 = new PluginResult ( ( PluginEngine ) null , ( SearchResult ) null , "" ) ; pluginResult0 . setContentType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test10 ( ) throws Throwable { PluginResult pluginResult0 = new PluginResult ( ( PluginEngine ) null , ( SearchResult ) null , " . , I { dQk { " ) ; int int0 = pluginResult0 . getVotesDown ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test11 ( ) throws Throwable { PluginResult pluginResult0 = new PluginResult ( ( PluginEngine ) null , ( SearchResult ) null , "2 + = a { 7g5 * on7 } c ( " ) ; String string0 = pluginResult0 . getDRMKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test12 ( ) throws Throwable { PluginResult pluginResult0 = new PluginResult ( ( PluginEngine ) null , ( SearchResult ) null , "Alg . Alias . Signature . SHA1withRSAEncryption" ) ; boolean boolean0 = pluginResult0 . isPrivate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test13 ( ) throws Throwable { PluginResult pluginResult0 = new PluginResult ( ( PluginEngine ) null , ( SearchResult ) null , "f ? * ( l56OA ? | gC ; , nET" ) ; String string0 = pluginResult0 . getContentType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test14 ( ) throws Throwable { PluginResult pluginResult0 = new PluginResult ( ( PluginEngine ) null , ( SearchResult ) null , "Alg . Alias . Signature . SHA1withRSAEncryption" ) ; String string0 = pluginResult0 . getHash ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHash ( ) { return ( subs . getID ( ) ) ; }
void test15 ( ) throws Throwable { PluginResult pluginResult0 = new PluginResult ( ( PluginEngine ) null , ( SearchResult ) null , "2 + = a { 7g5 * on7 } c ( " ) ; float float0 = pluginResult0 . getAccuracy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test0 ( ) throws Throwable { MomentsAgoDateFormatter momentsAgoDateFormatter0 = new MomentsAgoDateFormatter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( ) ; Date date0 = gregorianCalendar0 . getGregorianChange ( ) ; SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat ( ) ; String string0 = MomentsAgoDateFormatter . getMomentsAgoString ( date0 , ( DateFormat ) simpleDateFormat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { GregorianCalendar gregorianCalendar0 = new GregorianCalendar ( ) ; Date date0 = gregorianCalendar0 . getTime ( ) ; SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat ( ) ; String string0 = MomentsAgoDateFormatter . getMomentsAgoString ( date0 , ( DateFormat ) simpleDateFormat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test0 ( ) throws Throwable { AEProxyAddressMapperImpl aEProxyAddressMapperImpl0 = ( AEProxyAddressMapperImpl ) AEProxyFactory . getAddressMapper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AEProxyAddressMapper getAddressMapper ( ) { return ( AEProxyAddressMapperImpl . getSingleton ( ) ) ; }
void test2 ( ) throws Throwable { AEProxyFactory aEProxyFactory0 = new AEProxyFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { AESocksProxyState aESocksProxyState0 = new AESocksProxyState ( ( AESocksProxyConnection ) null ) ; String string0 = aESocksProxyState0 . getStateName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStateName ( ) ; boolean read ( SocketChannel sc ) throws IOException ; boolean write ( SocketChannel sc ) throws IOException ; boolean connect ( SocketChannel sc ) throws IOException ; }
void test0 ( ) throws Throwable { AESocksProxyAddressImpl aESocksProxyAddressImpl0 = new AESocksProxyAddressImpl ( "127 . 0 . 0 . 1" , ( InetAddress ) null , 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) ; String getTypeString ( ) ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , NetworkAdminProgressListener listener ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , boolean upnp_map , NetworkAdminProgressListener listener ) throws NetworkAdminException ; String getName ( ) ; }
void test1 ( ) throws Throwable { AESocksProxyAddressImpl aESocksProxyAddressImpl0 = new AESocksProxyAddressImpl ( "127 . 0 . 0 . 1" , ( InetAddress ) null , 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) ; String getTypeString ( ) ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , NetworkAdminProgressListener listener ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , boolean upnp_map , NetworkAdminProgressListener listener ) throws NetworkAdminException ; String getName ( ) ; }
void test2 ( ) throws Throwable { AESocksProxyAddressImpl aESocksProxyAddressImpl0 = new AESocksProxyAddressImpl ( "127 . 0 . 0 . 1" , ( InetAddress ) null , 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) ; String getTypeString ( ) ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , NetworkAdminProgressListener listener ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , boolean upnp_map , NetworkAdminProgressListener listener ) throws NetworkAdminException ; String getName ( ) ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; AESocksProxyAddressImpl aESocksProxyAddressImpl0 = new AESocksProxyAddressImpl ( " . . " , ( InetAddress ) inet4Address0 , 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test4 ( ) throws Throwable { AESocksProxyAddressImpl aESocksProxyAddressImpl0 = new AESocksProxyAddressImpl ( "QO`b = 2w > N^Et" , ( InetAddress ) null , 1101 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) ; String getTypeString ( ) ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , NetworkAdminProgressListener listener ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , boolean upnp_map , NetworkAdminProgressListener listener ) throws NetworkAdminException ; String getName ( ) ; }
void test5 ( ) throws Throwable { AESocksProxyAddressImpl aESocksProxyAddressImpl0 = new AESocksProxyAddressImpl ( " . 32652 . 3994245 . 66MVr" , ( InetAddress ) null , 1101 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) ; String getTypeString ( ) ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , NetworkAdminProgressListener listener ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , boolean upnp_map , NetworkAdminProgressListener listener ) throws NetworkAdminException ; String getName ( ) ; }
void test6 ( ) throws Throwable { AESocksProxyAddressImpl aESocksProxyAddressImpl0 = new AESocksProxyAddressImpl ( " . . " , ( InetAddress ) null , 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) ; String getTypeString ( ) ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , NetworkAdminProgressListener listener ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , boolean upnp_map , NetworkAdminProgressListener listener ) throws NetworkAdminException ; String getName ( ) ; }
void test0 ( ) throws Throwable { AEProxyAddressMapperImpl aEProxyAddressMapperImpl0 = ( AEProxyAddressMapperImpl ) AEProxyAddressMapperImpl . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AzureusCore getSingleton ( ) throws AzureusCoreException { return ( AzureusCoreImpl . getSingleton ( ) ) ; }
void test1 ( ) throws Throwable { AEProxyAddressMapperImpl aEProxyAddressMapperImpl0 = new AEProxyAddressMapperImpl ( ) ; String string0 = aEProxyAddressMapperImpl0 . internalise ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String internalise ( String address ) ; String externalise ( String address ) ; URL internalise ( URL url ) ; URL externalise ( URL url ) ; }
void test2 ( ) throws Throwable { AEProxyAddressMapperImpl aEProxyAddressMapperImpl0 = new AEProxyAddressMapperImpl ( ) ; String string0 = aEProxyAddressMapperImpl0 . externalise ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String externalise ( String address ) ; URL internalise ( URL url ) ; URL externalise ( URL url ) ; }
void test3 ( ) throws Throwable { AEProxyAddressMapperImpl aEProxyAddressMapperImpl0 = new AEProxyAddressMapperImpl ( ) ; URL uRL0 = aEProxyAddressMapperImpl0 . internalise ( ( URL ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String internalise ( String address ) ; String externalise ( String address ) ; URL internalise ( URL url ) ; URL externalise ( URL url ) ; }
void test4 ( ) throws Throwable { AEProxyAddressMapperImpl aEProxyAddressMapperImpl0 = new AEProxyAddressMapperImpl ( ) ; URL uRL0 = aEProxyAddressMapperImpl0 . externalise ( ( URL ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String externalise ( String address ) ; URL internalise ( URL url ) ; URL externalise ( URL url ) ; }
void test0 ( ) throws Throwable { CryptoManagerFactory cryptoManagerFactory0 = new CryptoManagerFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { CryptoManagerImpl cryptoManagerImpl0 = ( CryptoManagerImpl ) CryptoManagerFactory . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AzureusCore getSingleton ( ) throws AzureusCoreException { return ( AzureusCoreImpl . getSingleton ( ) ) ; }
void test3 ( ) throws Throwable { CryptoECCUtils cryptoECCUtils0 = new CryptoECCUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHandlerType ( ) ; / * * * Gets a password * @param handler_type from AESecurityManager . HANDLER_x enum * @param action_type from above ACTION_x enum * @param reason reason for the password being sought * @return password details or null if no password available * / passwordDetails getPassword ( int handler_type , int action_type , boolean last_pw_incorrect , String reason ) ; void passwordOK ( int handler_type , passwordDetails details ) ; interface passwordDetails { char [ ] getPassword ( ) ; / * * * @return 0 - > don't persist , Integer . MAX_VALUE - > persist forever * < 0 - > current session ; other - > seconds to persist * / int getPersistForSeconds ( ) ; }
void test2 ( ) throws Throwable { CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl ( ) ; cryptoManagerImpl0 . addKeyListener ( ( CryptoManagerKeyListener ) null ) ; CryptoHandlerECC cryptoHandlerECC0 = ( CryptoHandlerECC ) cryptoManagerImpl0 . getECCHandler ( ) ; cryptoManagerImpl0 . keyChanged ( ( CryptoHandler ) cryptoHandlerECC0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl ( ) ; CryptoWindow cryptoWindow0 = new CryptoWindow ( ) ; cryptoManagerImpl0 . removePasswordHandler ( ( CryptoManagerPasswordHandler ) cryptoWindow0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHandlerType ( ) ; / * * * Gets a password * @param handler_type from AESecurityManager . HANDLER_x enum * @param action_type from above ACTION_x enum * @param reason reason for the password being sought * @return password details or null if no password available * / passwordDetails getPassword ( int handler_type , int action_type , boolean last_pw_incorrect , String reason ) ; void passwordOK ( int handler_type , passwordDetails details ) ; interface passwordDetails { char [ ] getPassword ( ) ; / * * * @return 0 - > don't persist , Integer . MAX_VALUE - > persist forever * < 0 - > current session ; other - > seconds to persist * / int getPersistForSeconds ( ) ; }
void test5 ( ) throws Throwable { CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] deobfuscate ( byte [ ] data ) ; void clearPasswords ( ) ; void clearPasswords ( int password_handler_type ) ; void addPasswordHandler ( CryptoManagerPasswordHandler handler ) ; void removePasswordHandler ( CryptoManagerPasswordHandler handler ) ; void addKeyListener ( CryptoManagerKeyListener listener ) ; void removeKeyListener ( CryptoManagerKeyListener listener ) ; }
void test6 ( ) throws Throwable { CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl ( ) ; CryptoHandlerECC cryptoHandlerECC0 = ( CryptoHandlerECC ) cryptoManagerImpl0 . getECCHandler ( ) ; cryptoManagerImpl0 . keyChanged ( ( CryptoHandler ) cryptoHandlerECC0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test9 ( ) throws Throwable { CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHandlerType ( ) ; / * * * Gets a password * @param handler_type from AESecurityManager . HANDLER_x enum * @param action_type from above ACTION_x enum * @param reason reason for the password being sought * @return password details or null if no password available * / passwordDetails getPassword ( int handler_type , int action_type , boolean last_pw_incorrect , String reason ) ; void passwordOK ( int handler_type , passwordDetails details ) ; interface passwordDetails { char [ ] getPassword ( ) ; / * * * @return 0 - > don't persist , Integer . MAX_VALUE - > persist forever * < 0 - > current session ; other - > seconds to persist * / int getPersistForSeconds ( ) ; }
void test16 ( ) throws Throwable { CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl ( ) ; cryptoManagerImpl0 . addKeyListener ( ( CryptoManagerKeyListener ) null ) ; CryptoHandlerECC cryptoHandlerECC0 = ( CryptoHandlerECC ) cryptoManagerImpl0 . getECCHandler ( ) ; cryptoManagerImpl0 . lockChanged ( ( CryptoHandler ) cryptoHandlerECC0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , 15 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , 1905 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , 1105 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , ( - 456 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , ( - 37 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , ( - 598 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , 1009 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , 1009 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , 2080 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , ( - 17 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , ( - 1643 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test11 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , ( - 1630 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , ( - 8 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , ( - 456 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test14 ( ) throws Throwable { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CryptoSTSEngine getSTSEngine ( String reason ) throws CryptoManagerException ; byte [ ] peekPublicKey ( ) ; byte [ ] getPublicKey ( String reason ) throws CryptoManagerException ; byte [ ] getEncryptedPrivateKey ( String reason ) throws CryptoManagerException ; boolean verifyPublicKey ( byte [ ] encoded ) ; void recoverKeys ( byte [ ] public_key , byte [ ] encrypted_private_key ) throws CryptoManagerException ; void resetKeys ( String reason ) throws CryptoManagerException ; String exportKeys ( ) throws CryptoManagerException ; int getDefaultPasswordHandlerType ( ) ; void setDefaultPasswordHandlerType ( int new_type ) throws CryptoManagerException ; / * * * * @param str * @return true if an Azureus restart is required * @throws CryptoManagerException * / boolean importKeys ( String str ) throws CryptoManagerException ; }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , 552 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test16 ( ) throws Throwable { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDefaultPasswordHandlerType ( int new_type ) throws CryptoManagerException ; / * * * * @param str * @return true if an Azureus restart is required * @throws CryptoManagerException * / boolean importKeys ( String str ) throws CryptoManagerException ; }
void test17 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , 1009 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test18 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , ( - 239 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test19 ( ) throws Throwable { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void recoverKeys ( byte [ ] public_key , byte [ ] encrypted_private_key ) throws CryptoManagerException ; void resetKeys ( String reason ) throws CryptoManagerException ; String exportKeys ( ) throws CryptoManagerException ; int getDefaultPasswordHandlerType ( ) ; void setDefaultPasswordHandlerType ( int new_type ) throws CryptoManagerException ; / * * * * @param str * @return true if an Azureus restart is required * @throws CryptoManagerException * / boolean importKeys ( String str ) throws CryptoManagerException ; }
void test20 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , 2080 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test21 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , ( - 456 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test22 ( ) throws Throwable { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentPasswordType ( ) { return ( ( int ) COConfigurationManager . getIntParameter ( CONFIG_PREFIX + "pwtype" , CryptoManagerPasswordHandler . HANDLER_TYPE_USER ) ) ; }
void test23 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC ( ( CryptoManagerImpl ) null , 1819 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { SubscriptionUtils subscriptionUtils0 = new SubscriptionUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = ( SubscriptionManagerImpl ) SubscriptionManagerFactory . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test1 ( ) throws Throwable { SubscriptionManagerFactory subscriptionManagerFactory0 = new SubscriptionManagerFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = ( SubscriptionManagerImpl ) SubscriptionManagerFactory . getStandaloneSingleton ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAutoStartMinMB ( ) ; void setAutoStartMinMB ( int mb ) ; int getAutoStartMaxMB ( ) ; void setAutoStartMaxMB ( int mb ) ; boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl ( ( SubscriptionManagerImpl ) null , "ds ; " , true , "ds ; " , byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; Map < String , Object > map0 = vuzeActivitiesEntry0 . toMap ( ) ; SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl ( ( SubscriptionManagerImpl ) null , "q%Dlqd" , true , "q%Dlqd" , byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , ( Map ) map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl ( ( SubscriptionManagerImpl ) null , "ds ; " , true , "ds ; " , byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl ( ( SubscriptionManagerImpl ) null , "" , false , "" , byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl ( ( SubscriptionManagerImpl ) null , "#s" , false , "#s" , byteArray0 , 1937208356 , 1937208356 , ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { byte [ ] byteArray0 = new byte [ 9 ] ; boolean boolean0 = SubscriptionBodyImpl . verify ( byteArray0 , byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 6 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; Map < String , Object > map0 = vuzeActivitiesEntry0 . toMap ( ) ; SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl ( ( SubscriptionManagerImpl ) null , "q%Dlqd" , true , "q%Dlqd" , byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , ( Map ) map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; byte [ ] byteArray1 = SubscriptionBodyImpl . encode ( byteArray0 , ( int ) ( byte ) ( - 22 ) , ( int ) ( byte ) ( - 22 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RawMessage encode ( Message message ) { return ( new RawMessageImpl ( message , data , RawMessage . PRIORITY_HIGH , true , new Message [ 0 ] ) ) ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl ( ( SubscriptionManagerImpl ) null , "" , false , "" , byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test10 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl ( ( SubscriptionManagerImpl ) null , "#s" , false , "#s" , byteArray0 , 1937208356 , 1937208356 , ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test11 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 11 ] ; HashMap < Long , Object > hashMap0 = new HashMap < Long , Object > ( ) ; SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl ( ( SubscriptionManagerImpl ) null , "" , false , "" , byteArray0 , ( - 6 ) , ( int ) ( byte ) 0 , ( Map ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test12 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl ( ( SubscriptionManagerImpl ) null , "#s" , false , "#s" , byteArray0 , 1937208356 , 1937208356 , ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test14 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl ( ( SubscriptionManagerImpl ) null , "" , false , "" , byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test15 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl ( ( SubscriptionManagerImpl ) null , "" , false , "" , byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 20 ] ; SubscriptionImpl . association subscriptionImpl_association0 = new SubscriptionImpl . association ( byteArray0 , ( long ) ( byte ) 0 ) ; byte [ ] byteArray1 = subscriptionImpl_association0 . getHash ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHash ( ) { return ( subs . getID ( ) ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; SubscriptionImpl . association subscriptionImpl_association0 = new SubscriptionImpl . association ( byteArray0 , ( long ) 0 ) ; long long0 = subscriptionImpl_association0 . getWhen ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getWhen ( ) ; String getString ( ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; SubscriptionImpl . association subscriptionImpl_association0 = new SubscriptionImpl . association ( byteArray0 , ( long ) 0 ) ; boolean boolean0 = subscriptionImpl_association0 . getPublished ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPublished ( ) { return ( published ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; SubscriptionImpl . association subscriptionImpl_association0 = new SubscriptionImpl . association ( byteArray0 , ( long ) 0 ) ; subscriptionImpl_association0 . setPublished ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPublished ( ) { return ( published ) ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; int int0 = SubscriptionImpl . bytesToInt ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int bytesToInt ( byte [ ] bytes , int offset ) { int res = ( bytes [ offset + + ] < < 24 ) & 0xff000000 | ( bytes [ offset + + ] < < 16 ) & 0x00ff0000 | ( bytes [ offset + + ] < < 8 ) & 0x0000ff00 | bytes [ offset + + ] & 0x000000ff ; return ( res ) ; }
void test13 ( ) throws Throwable { byte [ ] byteArray0 = SubscriptionImpl . intToBytes ( ( - 954 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] intToBytes ( int i ) { byte [ ] res = new byte [ ] { ( byte ) ( i > > 24 ) , ( byte ) ( i > > 16 ) , ( byte ) ( i > > 8 ) , ( byte ) i } ; return ( res ) ; }
void test0 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; byte [ ] byteArray0 = new byte [ 4 ] ; SubscriptionAssociationLookup subscriptionAssociationLookup0 = subscriptionManagerImpl0 . lookupAssociations ( byteArray0 , ( SubscriptionLookupListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SubscriptionAssociationLookup lookupAssociations ( byte [ ] hash , SubscriptionLookupListener listener ) throws SubscriptionException ; / * * * Cached view of hash's subs * @param hash * @return * / Subscription [ ] getKnownSubscriptions ( byte [ ] hash ) ; Subscription [ ] getLinkedSubscriptions ( byte [ ] hash ) ; SubscriptionScheduler getScheduler ( ) ; int getMaxNonDeletedResults ( ) ; void setMaxNonDeletedResults ( int max ) ; boolean getAutoStartDownloads ( ) ; void setAutoStartDownloads ( boolean auto_start ) ; int getAutoStartMinMB ( ) ; void setAutoStartMinMB ( int mb ) ; int getAutoStartMaxMB ( ) ; void setAutoStartMaxMB ( int mb ) ; boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test1 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; subscriptionManagerImpl0 . configDirty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAutoStartMinMB ( ) ; void setAutoStartMinMB ( int mb ) ; int getAutoStartMaxMB ( ) ; void setAutoStartMaxMB ( int mb ) ; boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test2 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; subscriptionManagerImpl0 . updatePopularityFromDHT ( ( SubscriptionImpl ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxNonDeletedResults ( ) ; void setMaxNonDeletedResults ( int max ) ; boolean getAutoStartDownloads ( ) ; void setAutoStartDownloads ( boolean auto_start ) ; int getAutoStartMinMB ( ) ; void setAutoStartMinMB ( int mb ) ; int getAutoStartMaxMB ( ) ; void setAutoStartMaxMB ( int mb ) ; boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test4 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; subscriptionManagerImpl0 . initialise ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test6 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; subscriptionManagerImpl0 . setSearchEnabled ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test7 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAutoStartMinMB ( ) ; void setAutoStartMinMB ( int mb ) ; int getAutoStartMaxMB ( ) ; void setAutoStartMaxMB ( int mb ) ; boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test8 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; SubscriptionSchedulerImpl subscriptionSchedulerImpl0 = ( SubscriptionSchedulerImpl ) subscriptionManagerImpl0 . getScheduler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SubscriptionScheduler getScheduler ( ) ; int getMaxNonDeletedResults ( ) ; void setMaxNonDeletedResults ( int max ) ; boolean getAutoStartDownloads ( ) ; void setAutoStartDownloads ( boolean auto_start ) ; int getAutoStartMinMB ( ) ; void setAutoStartMinMB ( int mb ) ; int getAutoStartMaxMB ( ) ; void setAutoStartMaxMB ( int mb ) ; boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test9 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; boolean boolean0 = subscriptionManagerImpl0 . hideSearchTemplates ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test10 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; boolean boolean0 = subscriptionManagerImpl0 . isRSSPublishEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test12 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; byte [ ] byteArray0 = new byte [ 10 ] ; SubscriptionImpl subscriptionImpl0 = subscriptionManagerImpl0 . getSubscriptionFromSID ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SubscriptionImpl getSubscriptionFromSID ( byte [ ] sid ) { return ( SubscriptionImpl ) getSubscriptionByID ( Base32 . encode ( sid ) ) ; }
void test15 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; subscriptionManagerImpl0 . removeListener ( ( SubscriptionManagerListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test17 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; boolean boolean0 = subscriptionManagerImpl0 . isSearchEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test18 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test19 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = ( SubscriptionManagerImpl ) SubscriptionManagerImpl . getSingleton ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAutoStartMinMB ( ) ; void setAutoStartMinMB ( int mb ) ; int getAutoStartMaxMB ( ) ; void setAutoStartMaxMB ( int mb ) ; boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test20 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAutoStartMaxMB ( ) ; void setAutoStartMaxMB ( int mb ) ; boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test21 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; subscriptionManagerImpl0 . checkMaxResults ( ( - 117 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAutoStartDownloads ( ) ; void setAutoStartDownloads ( boolean auto_start ) ; int getAutoStartMinMB ( ) ; void setAutoStartMinMB ( int mb ) ; int getAutoStartMaxMB ( ) ; void setAutoStartMaxMB ( int mb ) ; boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test25 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; subscriptionManagerImpl0 . removeSubscription ( ( SubscriptionImpl ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test26 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; subscriptionManagerImpl0 . checkStuff ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test28 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; Subscription [ ] subscriptionArray0 = subscriptionManagerImpl0 . getSubscriptions ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Subscription [ ] getSubscriptions ( ) ; Subscription [ ] getSubscriptions ( boolean subscribed_only ) ; Subscription getSubscriptionByID ( String id ) ; / * * * Full lookup * @param hash * @param listener * @return * @throws SubscriptionException * / SubscriptionAssociationLookup lookupAssociations ( byte [ ] hash , SubscriptionLookupListener listener ) throws SubscriptionException ; / * * * Cached view of hash's subs * @param hash * @return * / Subscription [ ] getKnownSubscriptions ( byte [ ] hash ) ; Subscription [ ] getLinkedSubscriptions ( byte [ ] hash ) ; SubscriptionScheduler getScheduler ( ) ; int getMaxNonDeletedResults ( ) ; void setMaxNonDeletedResults ( int max ) ; boolean getAutoStartDownloads ( ) ; void setAutoStartDownloads ( boolean auto_start ) ; int getAutoStartMinMB ( ) ; void setAutoStartMinMB ( int mb ) ; int getAutoStartMaxMB ( ) ; void setAutoStartMaxMB ( int mb ) ; boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test29 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; int int0 = subscriptionManagerImpl0 . getSubscriptionCount ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSubscriptionCount ( boolean subscribed_only ) ; Subscription [ ] getSubscriptions ( ) ; Subscription [ ] getSubscriptions ( boolean subscribed_only ) ; Subscription getSubscriptionByID ( String id ) ; / * * * Full lookup * @param hash * @param listener * @return * @throws SubscriptionException * / SubscriptionAssociationLookup lookupAssociations ( byte [ ] hash , SubscriptionLookupListener listener ) throws SubscriptionException ; / * * * Cached view of hash's subs * @param hash * @return * / Subscription [ ] getKnownSubscriptions ( byte [ ] hash ) ; Subscription [ ] getLinkedSubscriptions ( byte [ ] hash ) ; SubscriptionScheduler getScheduler ( ) ; int getMaxNonDeletedResults ( ) ; void setMaxNonDeletedResults ( int max ) ; boolean getAutoStartDownloads ( ) ; void setAutoStartDownloads ( boolean auto_start ) ; int getAutoStartMinMB ( ) ; void setAutoStartMinMB ( int mb ) ; int getAutoStartMaxMB ( ) ; void setAutoStartMaxMB ( int mb ) ; boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test30 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; int int0 = subscriptionManagerImpl0 . getSubscriptionCount ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSubscriptionCount ( boolean subscribed_only ) ; Subscription [ ] getSubscriptions ( ) ; Subscription [ ] getSubscriptions ( boolean subscribed_only ) ; Subscription getSubscriptionByID ( String id ) ; / * * * Full lookup * @param hash * @param listener * @return * @throws SubscriptionException * / SubscriptionAssociationLookup lookupAssociations ( byte [ ] hash , SubscriptionLookupListener listener ) throws SubscriptionException ; / * * * Cached view of hash's subs * @param hash * @return * / Subscription [ ] getKnownSubscriptions ( byte [ ] hash ) ; Subscription [ ] getLinkedSubscriptions ( byte [ ] hash ) ; SubscriptionScheduler getScheduler ( ) ; int getMaxNonDeletedResults ( ) ; void setMaxNonDeletedResults ( int max ) ; boolean getAutoStartDownloads ( ) ; void setAutoStartDownloads ( boolean auto_start ) ; int getAutoStartMinMB ( ) ; void setAutoStartMinMB ( int mb ) ; int getAutoStartMaxMB ( ) ; void setAutoStartMaxMB ( int mb ) ; boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test33 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; subscriptionManagerImpl0 . publishSubscriptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test34 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxNonDeletedResults ( ) ; void setMaxNonDeletedResults ( int max ) ; boolean getAutoStartDownloads ( ) ; void setAutoStartDownloads ( boolean auto_start ) ; int getAutoStartMinMB ( ) ; void setAutoStartMinMB ( int mb ) ; int getAutoStartMaxMB ( ) ; void setAutoStartMaxMB ( int mb ) ; boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test35 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAutoStartDownloads ( ) ; void setAutoStartDownloads ( boolean auto_start ) ; int getAutoStartMinMB ( ) ; void setAutoStartMinMB ( int mb ) ; int getAutoStartMaxMB ( ) ; void setAutoStartMaxMB ( int mb ) ; boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test36 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; TrackerNextAccessItem trackerNextAccessItem0 = new TrackerNextAccessItem ( "7j + 5ORlv\"j > } NL" ) ; trackerNextAccessItem0 . getColumnExtraInfoListeners ( ) ; subscriptionManagerImpl0 . checkStuff ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test37 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAutoStartMaxMB ( ) ; void setAutoStartMaxMB ( int mb ) ; boolean isRSSPublishEnabled ( ) ; void setRSSPublishEnabled ( boolean enabled ) ; boolean isSearchEnabled ( ) ; void setSearchEnabled ( boolean enabled ) ; boolean isSubsDownloadEnabled ( ) ; void setSubsDownloadEnabled ( boolean enabled ) ; boolean hideSearchTemplates ( ) ; String getRSSLink ( ) ; void addListener ( SubscriptionManagerListener listener ) ; void removeListener ( SubscriptionManagerListener listener ) ; }
void test38 ( ) throws Throwable { SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl ( true ) ; boolean boolean0 = subscriptionManagerImpl0 . shouldAutoStart ( ( Torrent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean shouldAutoStart ( Torrent torrent ) { if ( getAutoStartDownloads ( ) ) { long min = getAutoStartMinMB ( ) * 1024 * 1024L ; long max = getAutoStartMaxMB ( ) * 1024 * 1024L ; if ( min < = 0 & & max < = 0 ) { return ( true ) ; } long size = torrent . getSize ( ) ; if ( min > 0 & & size < min ) { return ( false ) ; } if ( max > 0 & & size > max ) { return ( false ) ; } return ( true ) ; } else { return ( false ) ; } }
void test0 ( ) throws Throwable { DeviceTivo . ContainerInfo deviceTivo_ContainerInfo0 = new DeviceTivo . ContainerInfo ( "EUu#rI" ) ; deviceTivo_ContainerInfo0 . addChild ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addChild ( PKIXPolicyNode _child ) { children . add ( _child ) ; _child . setParent ( this ) ; }
void test1 ( ) throws Throwable { DeviceTivo . ContainerInfo deviceTivo_ContainerInfo0 = new DeviceTivo . ContainerInfo ( "EUu#rI" ) ; int int0 = deviceTivo_ContainerInfo0 . getChildCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DeviceTivo ( DeviceManagerImpl _manager , String _uid , String _classification ) { super ( _manager , _uid , _classification , false ) ; setName ( "TiVo" , true ) ; }
void test2 ( ) throws Throwable { DeviceTivo . ContainerInfo deviceTivo_ContainerInfo0 = new DeviceTivo . ContainerInfo ( "EUu#rI" ) ; String string0 = deviceTivo_ContainerInfo0 . getLinkURL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DeviceTivo ( DeviceManagerImpl _manager , String _uid , String _classification ) { super ( _manager , _uid , _classification , false ) ; setName ( "TiVo" , true ) ; }
void test3 ( ) throws Throwable { DeviceTivo . ContainerInfo deviceTivo_ContainerInfo0 = new DeviceTivo . ContainerInfo ( "EUu#rI" ) ; String string0 = deviceTivo_ContainerInfo0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test4 ( ) throws Throwable { DeviceTivo . ContainerInfo deviceTivo_ContainerInfo0 = new DeviceTivo . ContainerInfo ( "EUu#rI" ) ; long long0 = deviceTivo_ContainerInfo0 . getCreationMillis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DeviceTivo ( DeviceManagerImpl _manager , String _uid , String _classification ) { super ( _manager , _uid , _classification , false ) ; setName ( "TiVo" , true ) ; }
void test5 ( ) throws Throwable { DeviceTivo . ContainerInfo deviceTivo_ContainerInfo0 = new DeviceTivo . ContainerInfo ( "EUu#rI" ) ; boolean boolean0 = deviceTivo_ContainerInfo0 . isContainer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DeviceTivo ( DeviceManagerImpl _manager , String _uid , String _classification ) { super ( _manager , _uid , _classification , false ) ; setName ( "TiVo" , true ) ; }
void test6 ( ) throws Throwable { String string0 = DeviceTivo . escape ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String escape ( String str ) { return ( XUXmlWriter . escapeXML ( str ) ) ; }
void test7 ( ) throws Throwable { DeviceTivo . FileInfo deviceTivo_FileInfo0 = new DeviceTivo . FileInfo ( ( TranscodeFile ) null , "FMFriGleManager ; CQ" ) ; long long0 = deviceTivo_FileInfo0 . getCreationMillis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DeviceTivo ( DeviceManagerImpl _manager , String _uid , String _classification ) { super ( _manager , _uid , _classification , false ) ; setName ( "TiVo" , true ) ; }
void test8 ( ) throws Throwable { DeviceTivo . FileInfo deviceTivo_FileInfo0 = new DeviceTivo . FileInfo ( ( TranscodeFile ) null , "ocO ] w < `F8 ! & Ytx } " ) ; boolean boolean0 = deviceTivo_FileInfo0 . isOK ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DeviceTivo ( DeviceManagerImpl _manager , String _uid , String _classification ) { super ( _manager , _uid , _classification , false ) ; setName ( "TiVo" , true ) ; }
void test10 ( ) throws Throwable { DeviceTivo . FileInfo deviceTivo_FileInfo0 = new DeviceTivo . FileInfo ( ( TranscodeFile ) null , "FMFriGleManager ; CQ" ) ; boolean boolean0 = deviceTivo_FileInfo0 . isContainer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DeviceTivo ( DeviceManagerImpl _manager , String _uid , String _classification ) { super ( _manager , _uid , _classification , false ) ; setName ( "TiVo" , true ) ; }
void test11 ( ) throws Throwable { DeviceTivo . FileInfo deviceTivo_FileInfo0 = new DeviceTivo . FileInfo ( ( TranscodeFile ) null , "FMFriGleManager ; CQ" ) ; long long0 = deviceTivo_FileInfo0 . getTargetSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DeviceTivo ( DeviceManagerImpl _manager , String _uid , String _classification ) { super ( _manager , _uid , _classification , false ) ; setName ( "TiVo" , true ) ; }
void test12 ( ) throws Throwable { DeviceTivo . FileInfo deviceTivo_FileInfo0 = new DeviceTivo . FileInfo ( ( TranscodeFile ) null , "FMFriGleManager ; CQ" ) ; String string0 = deviceTivo_FileInfo0 . getCaptureDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DeviceTivo ( DeviceManagerImpl _manager , String _uid , String _classification ) { super ( _manager , _uid , _classification , false ) ; setName ( "TiVo" , true ) ; }
void test13 ( ) throws Throwable { DeviceTivo . FileInfo deviceTivo_FileInfo0 = new DeviceTivo . FileInfo ( ( TranscodeFile ) null , "ocO ] w < `F8 ! & Ytx } " ) ; long long0 = deviceTivo_FileInfo0 . getEstimatedTargetSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DeviceTivo ( DeviceManagerImpl _manager , String _uid , String _classification ) { super ( _manager , _uid , _classification , false ) ; setName ( "TiVo" , true ) ; }
void test14 ( ) throws Throwable { DeviceTivo . FileInfo deviceTivo_FileInfo0 = new DeviceTivo . FileInfo ( ( TranscodeFile ) null , "FMFriGleManager ; CQ" ) ; String string0 = deviceTivo_FileInfo0 . getLinkURL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DeviceTivo ( DeviceManagerImpl _manager , String _uid , String _classification ) { super ( _manager , _uid , _classification , false ) ; setName ( "TiVo" , true ) ; }
void test0 ( ) throws Throwable { DeviceMediaRendererTemplateImpl deviceMediaRendererTemplateImpl0 = new DeviceMediaRendererTemplateImpl ( ( DeviceManagerImpl ) null , " 6z - vfIza + X" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test1 ( ) throws Throwable { DeviceMediaRendererTemplateImpl deviceMediaRendererTemplateImpl0 = new DeviceMediaRendererTemplateImpl ( ( DeviceManagerImpl ) null , "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAuto ( ) ; / * * * auto devices can't be manually created * @param name * @return * @throws DeviceManagerException * / Device createInstance ( String name ) throws DeviceManagerException ; Device createInstance ( String name , String uid , boolean manual ) throws DeviceManagerException ; }
void test2 ( ) throws Throwable { DeviceMediaRendererTemplateImpl deviceMediaRendererTemplateImpl0 = new DeviceMediaRendererTemplateImpl ( ( DeviceManagerImpl ) null , " 6z - vfIza + X" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getManufacturer ( ) ; long getSpaceAvailable ( boolean force ) throws DeviceManagerException ; int getTransferingCount ( ) ; DeviceOfflineDownload [ ] getDownloads ( ) ; void addListener ( DeviceOfflineDownloaderListener listener ) ; void removeListener ( DeviceOfflineDownloaderListener listener ) ; }
void test3 ( ) throws Throwable { DeviceMediaRendererTemplateImpl deviceMediaRendererTemplateImpl0 = new DeviceMediaRendererTemplateImpl ( ( DeviceManagerImpl ) null , "aA { j | ) " , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test4 ( ) throws Throwable { DeviceMediaRendererTemplateImpl deviceMediaRendererTemplateImpl0 = new DeviceMediaRendererTemplateImpl ( ( DeviceManagerImpl ) null , " | b" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getManufacturer ( ) ; long getSpaceAvailable ( boolean force ) throws DeviceManagerException ; int getTransferingCount ( ) ; DeviceOfflineDownload [ ] getDownloads ( ) ; void addListener ( DeviceOfflineDownloaderListener listener ) ; void removeListener ( DeviceOfflineDownloaderListener listener ) ; }
void test5 ( ) throws Throwable { DeviceMediaRendererTemplateImpl deviceMediaRendererTemplateImpl0 = new DeviceMediaRendererTemplateImpl ( ( DeviceManagerImpl ) null , "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAuto ( ) ; / * * * auto devices can't be manually created * @param name * @return * @throws DeviceManagerException * / Device createInstance ( String name ) throws DeviceManagerException ; Device createInstance ( String name , String uid , boolean manual ) throws DeviceManagerException ; }
void test6 ( ) throws Throwable { DeviceMediaRendererTemplateImpl deviceMediaRendererTemplateImpl0 = new DeviceMediaRendererTemplateImpl ( ( DeviceManagerImpl ) null , "874~ydTC } * E [ \"i#" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Device createInstance ( String name ) throws DeviceManagerException ; Device createInstance ( String name , String uid , boolean manual ) throws DeviceManagerException ; }
void test7 ( ) throws Throwable { DeviceMediaRendererTemplateImpl deviceMediaRendererTemplateImpl0 = new DeviceMediaRendererTemplateImpl ( ( DeviceManagerImpl ) null , "DiKYzp" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test8 ( ) throws Throwable { DeviceMediaRendererTemplateImpl deviceMediaRendererTemplateImpl0 = new DeviceMediaRendererTemplateImpl ( ( DeviceManagerImpl ) null , " 6z - vfIza + X" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getManufacturer ( ) ; long getSpaceAvailable ( boolean force ) throws DeviceManagerException ; int getTransferingCount ( ) ; DeviceOfflineDownload [ ] getDownloads ( ) ; void addListener ( DeviceOfflineDownloaderListener listener ) ; void removeListener ( DeviceOfflineDownloaderListener listener ) ; }
void test9 ( ) throws Throwable { DeviceMediaRendererTemplateImpl deviceMediaRendererTemplateImpl0 = new DeviceMediaRendererTemplateImpl ( ( DeviceManagerImpl ) null , " | b" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test10 ( ) throws Throwable { DeviceMediaRendererTemplateImpl deviceMediaRendererTemplateImpl0 = new DeviceMediaRendererTemplateImpl ( ( DeviceManagerImpl ) null , "GeneralView . label . uploadspeed" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAuto ( ) ; / * * * auto devices can't be manually created * @param name * @return * @throws DeviceManagerException * / Device createInstance ( String name ) throws DeviceManagerException ; Device createInstance ( String name , String uid , boolean manual ) throws DeviceManagerException ; }
void test11 ( ) throws Throwable { DeviceMediaRendererTemplateImpl deviceMediaRendererTemplateImpl0 = new DeviceMediaRendererTemplateImpl ( ( DeviceManagerImpl ) null , " 6z - vfIza + X" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Device createInstance ( String name ) throws DeviceManagerException ; Device createInstance ( String name , String uid , boolean manual ) throws DeviceManagerException ; }
void test0 ( ) throws Throwable { DeviceiTunesManager deviceiTunesManager0 = new DeviceiTunesManager ( ( DeviceManagerImpl ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DeviceiTunesManager ( DeviceManagerImpl _dm ) { device_manager = _dm ; AzureusCoreFactory . addCoreRunningListener ( new AzureusCoreRunningListener ( ) { void azureusCoreRunning ( AzureusCore core ) { init ( core ) ; } } ) ; }
void test0 ( ) throws Throwable { DeviceTivoManager deviceTivoManager0 = new DeviceTivoManager ( ( DeviceManagerImpl ) null ) ; boolean boolean0 = deviceTivoManager0 . isEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { if ( skinButton ! = null ) { return ! skinButton . isDisabled ( ) ; } return enabled ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { DeviceTivoManager deviceTivoManager0 = new DeviceTivoManager ( ( DeviceManagerImpl ) null ) ; deviceTivoManager0 . search ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { DeviceTivoManager deviceTivoManager0 = new DeviceTivoManager ( ( DeviceManagerImpl ) null ) ; deviceTivoManager0 . setEnabled ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test4 ( ) throws Throwable { DeviceTivoManager deviceTivoManager0 = new DeviceTivoManager ( ( DeviceManagerImpl ) null ) ; byte [ ] byteArray0 = deviceTivoManager0 . encodeBeacon ( false , 902 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeBeacon ( boolean is_broadcast , int my_port ) throws IOException { String beacon = "tivoconnect = 1" + LF + "swversion = 1" + LF + "method = " + ( is_broadcast ? "broadcast" : "connected" ) + LF + "identity = " + uid + LF + "machine = " + server_name + LF + "platform = pc" + LF + "services = TiVoMediaServer : " + my_port + " / http" ; return ( beacon . getBytes ( "ISO - 8859 - 1" ) ) ; }
void test5 ( ) throws Throwable { DeviceTivoManager deviceTivoManager0 = new DeviceTivoManager ( ( DeviceManagerImpl ) null ) ; byte [ ] byteArray0 = deviceTivoManager0 . encodeBeacon ( true , 902 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { DeviceTivoManager deviceTivoManager0 = new DeviceTivoManager ( ( DeviceManagerImpl ) null ) ; byte [ ] byteArray0 = new byte [ 32 ] ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; boolean boolean0 = deviceTivoManager0 . receiveBeacon ( ( InetAddress ) inet4Address0 , byteArray0 , ( - 23 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test7 ( ) throws Throwable { DeviceTivoManager deviceTivoManager0 = new DeviceTivoManager ( ( DeviceManagerImpl ) null ) ; deviceTivoManager0 . log ( " [ 4@L1 . BQ1 < dY^y4TBl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { if ( skinButton ! = null ) { return ! skinButton . isDisabled ( ) ; } return enabled ; }
void test0 ( ) throws Throwable { DeviceUPnPImpl . StreamWrapper deviceUPnPImpl_StreamWrapper0 = new DeviceUPnPImpl . StreamWrapper ( ( InputStream ) null , ( TranscodeJob ) null ) ; InputStream inputStream0 = deviceUPnPImpl_StreamWrapper0 . getStream ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream getStream ( int wait_for_millis ) throws IOException { if ( state = = ST_FAILED ) { throw ( new IOException ( "Transcode job failed : " + error ) ) ; } else if ( state = = ST_CANCELLED ) { throw ( new IOException ( "Transcode job cancelled" ) ) ; } else if ( state = = ST_REMOVED ) { throw ( new IOException ( "Transcode job removed" ) ) ; } stream_sem . reserve ( wait_for_millis ) ; return ( stream ) ; }
void test0 ( ) throws Throwable { AzureusPlatformContentDirectory azureusPlatformContentDirectory0 = new AzureusPlatformContentDirectory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { AzureusContentDirectory [ ] azureusContentDirectoryArray0 = AzureusContentDirectoryManager . getDirectories ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AzureusContentDirectory [ ] getDirectories ( ) { ( directories ) { return ( ( AzureusContentDirectory [ ] ) directories . toArray ( new AzureusContentDirectory [ directories . size ( ) ] ) ) ; } }
void test2 ( ) throws Throwable { AzureusContentDirectoryManager azureusContentDirectoryManager0 = new AzureusContentDirectoryManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { RelatedContentManager . ByteArrayHashMapEx < Object > relatedContentManager_ByteArrayHashMapEx0 = new RelatedContentManager . ByteArrayHashMapEx < Object > ( ) ; byte [ ] byteArray0 = new byte [ 11 ] ; relatedContentManager_ByteArrayHashMapEx0 . put ( byteArray0 , ( Object ) "BT_KEEP_ALIVE" ) ; String string0 = ( String ) relatedContentManager_ByteArrayHashMapEx0 . getRandomValueExcluding ( ( Object ) "BT_KEEP_ALIVE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void put ( byte [ ] key , String description , byte [ ] value , byte flags , DHTOperationListener listener ) ; / * * * default is HIGH PRIORITY . if you change to low priority then do so consistently as * operations can get out of order otherwise * @param key * @param description * @param value * @param flags * @param high_priority * @param listener * / void put ( byte [ ] key , String description , byte [ ] value , byte flags , boolean high_priority , DHTOperationListener listener ) ; void put ( byte [ ] key , String description , byte [ ] value , byte flags , byte life_hours , boolean high_priority , DHTOperationListener listener ) ; void put ( byte [ ] key , String description , byte [ ] value , byte flags , byte life_hours , byte replication_control , / / 4 bits 1 - > 14 republish hours ; 0 = vuze default | 4 bits 0 - > 15 maintain replicas ; [ ff = no replication control - use default ] boolean high_priority , DHTOperationListener listener ) ; / * * * Returns value if originated from here for key * @param key * @return * / DHTTransportValue getLocalValue ( byte [ ] key ) ; / * * * @param key * @param max_values * @param timeout * @param listener * / void get ( byte [ ] key , String description , byte flags , int max_values , long timeout , boolean exhaustive , boolean high_priority , DHTOperationListener listener ) ; byte [ ] remove ( byte [ ] key , String description , DHTOperationListener listener ) ; byte [ ] remove ( DHTTransportContact [ ] contacts , byte [ ] key , String description , DHTOperationListener listener ) ; boolean isDiversified ( byte [ ] key ) ; int getIntProperty ( String name ) ; DHTTransport getTransport ( ) ; DHTRouter getRouter ( ) ; DHTControl getControl ( ) ; DHTDB getDataBase ( ) ; DHTNATPuncher getNATPuncher ( ) ; DHTSpeedTester getSpeedTester ( ) ; DHTStorageAdapter getStorageAdapter ( ) ; / * * * externalises information that allows the DHT to be recreated at a later date * and populated via the import method * @param os * @param max maximum to export , 0 - > all * @throws IOException * / void exportState ( DataOutputStream os , int max ) throws IOException ; / * * * populate the DHT with previously exported state * @param is * @throws IOException * / void importState ( DataInputStream is ) throws IOException ; / * * * Integrate the node into the DHT * Can be invoked more than once if additional state is imported * / void integrate ( boolean full_wait ) ; void destroy ( ) ; void setLogging ( boolean on ) ; DHTLogger getLogger ( ) ; void print ( boolean full ) ; }
void test3 ( ) throws Throwable { RelatedContentManager . ByteArrayHashMapEx < Object > relatedContentManager_ByteArrayHashMapEx0 = new RelatedContentManager . ByteArrayHashMapEx < Object > ( ) ; byte [ ] byteArray0 = new byte [ 11 ] ; relatedContentManager_ByteArrayHashMapEx0 . put ( byteArray0 , ( Object ) "BT_KEEP_ALIVE" ) ; String string0 = ( String ) relatedContentManager_ByteArrayHashMapEx0 . getRandomValueExcluding ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void put ( byte [ ] key , String description , byte [ ] value , byte flags , DHTOperationListener listener ) ; / * * * default is HIGH PRIORITY . if you change to low priority then do so consistently as * operations can get out of order otherwise * @param key * @param description * @param value * @param flags * @param high_priority * @param listener * / void put ( byte [ ] key , String description , byte [ ] value , byte flags , boolean high_priority , DHTOperationListener listener ) ; void put ( byte [ ] key , String description , byte [ ] value , byte flags , byte life_hours , boolean high_priority , DHTOperationListener listener ) ; void put ( byte [ ] key , String description , byte [ ] value , byte flags , byte life_hours , byte replication_control , / / 4 bits 1 - > 14 republish hours ; 0 = vuze default | 4 bits 0 - > 15 maintain replicas ; [ ff = no replication control - use default ] boolean high_priority , DHTOperationListener listener ) ; / * * * Returns value if originated from here for key * @param key * @return * / DHTTransportValue getLocalValue ( byte [ ] key ) ; / * * * @param key * @param max_values * @param timeout * @param listener * / void get ( byte [ ] key , String description , byte flags , int max_values , long timeout , boolean exhaustive , boolean high_priority , DHTOperationListener listener ) ; byte [ ] remove ( byte [ ] key , String description , DHTOperationListener listener ) ; byte [ ] remove ( DHTTransportContact [ ] contacts , byte [ ] key , String description , DHTOperationListener listener ) ; boolean isDiversified ( byte [ ] key ) ; int getIntProperty ( String name ) ; DHTTransport getTransport ( ) ; DHTRouter getRouter ( ) ; DHTControl getControl ( ) ; DHTDB getDataBase ( ) ; DHTNATPuncher getNATPuncher ( ) ; DHTSpeedTester getSpeedTester ( ) ; DHTStorageAdapter getStorageAdapter ( ) ; / * * * externalises information that allows the DHT to be recreated at a later date * and populated via the import method * @param os * @param max maximum to export , 0 - > all * @throws IOException * / void exportState ( DataOutputStream os , int max ) throws IOException ; / * * * populate the DHT with previously exported state * @param is * @throws IOException * / void importState ( DataInputStream is ) throws IOException ; / * * * Integrate the node into the DHT * Can be invoked more than once if additional state is imported * / void integrate ( boolean full_wait ) ; void destroy ( ) ; void setLogging ( boolean on ) ; DHTLogger getLogger ( ) ; void print ( boolean full ) ; }
void test0 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getFileLinks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test1 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getPeerSources ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test2 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setActive ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test3 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; boolean boolean0 = lWSDiskManagerState0 . getBooleanAttribute ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test4 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setUserComment ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test5 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getListAttribute ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test6 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . clearFileLinks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test7 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; String [ ] stringArray0 = new String [ 6 ] ; lWSDiskManagerState0 . setPeerSources ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test8 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setParameterDefault ( " ( l7 : m > WyaED ) b~ - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test9 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; Map < Object , Object > map0 = lWSDiskManagerState0 . getTrackerResponseCache ( ) ; lWSDiskManagerState0 . setResumeData ( map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test10 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setBooleanAttribute ( "io^7cVU0o@ > x^r8 { \"" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test11 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getCategory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test12 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; Map < Object , Object > map0 = lWSDiskManagerState0 . getResumeData ( ) ; lWSDiskManagerState0 . setMapAttribute ( "FOKK : | X ] ) [ " , ( Map ) map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test13 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . save ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test14 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getDisplayName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test15 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setFlag ( 0L , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test16 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; int int0 = lWSDiskManagerState0 . getIntAttribute ( "g | t [ ( Sl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test17 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; boolean boolean0 = lWSDiskManagerState0 . parameterExists ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test18 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; long long0 = lWSDiskManagerState0 . getFlags ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test19 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getListAttribute ( "" , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test20 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getUserComment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test21 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setNetworkEnabled ( ( String ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test22 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . clearResumeData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test23 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; boolean boolean0 = lWSDiskManagerState0 . getBooleanParameter ( "2 < L~" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test24 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getStateFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test25 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setRelativeSavePath ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test26 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; boolean boolean0 = lWSDiskManagerState0 . isPeerSourceEnabled ( " ( l7 : m > WyaED ) b~ - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test27 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setDisplayName ( "vkU ( 3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test28 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getAttribute ( "ftR3 " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test29 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . supressStateSave ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test30 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setIntParameter ( "io^7cVU0o@ > x^r8 { \"" , 1647 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test31 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . generateEvidence ( ( IndentWriter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test32 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; String [ ] stringArray0 = new String [ 4 ] ; lWSDiskManagerState0 . setListAttribute ( "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test33 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getRelativeSavePath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test34 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; String [ ] stringArray0 = new String [ 4 ] ; lWSDiskManagerState0 . setNetworks ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test35 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getDownloadManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test36 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getStateFile ( " { 1\"B + X [ H" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test37 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setPeerSourcePermitted ( "Ot7 - k" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test38 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . suppressStateSave ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test39 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setIntAttribute ( ( String ) null , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test40 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; int int0 = lWSDiskManagerState0 . getIntParameter ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test41 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getMapAttribute ( "vkU ( 3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test42 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getPrimaryFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test43 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getFileLink ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test44 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getTorrent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test45 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; boolean boolean0 = lWSDiskManagerState0 . isResumeDataComplete ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test46 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . clearTrackerResponseCache ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test47 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . discardFluff ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test48 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . addListener ( ( DownloadManagerStateListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test49 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setLongAttribute ( "org . bouncycastle . jce . provider . JCEBlockCipher$PBEWithSHA1AndDES" , ( - 98L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test50 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . delete ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test51 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; long long0 = lWSDiskManagerState0 . getLongParameter ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test52 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setFileLink ( ( File ) null , ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test53 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . removeListener ( ( DownloadManagerStateAttributeListener ) null , "vkU ( 3" , 944 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test54 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setBooleanParameter ( "io^7cVU0o@ > x^r8 { \"" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test55 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; boolean boolean0 = lWSDiskManagerState0 . isPeerSourcePermitted ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test56 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; boolean boolean0 = lWSDiskManagerState0 . isOurContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test57 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; boolean boolean0 = lWSDiskManagerState0 . isNetworkEnabled ( " * ; e / xe < n & : 9$BbR" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test58 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getTrackerClientExtensions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test59 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; TorrentOptionsView torrentOptionsView0 = new TorrentOptionsView ( ) ; lWSDiskManagerState0 . addListener ( ( DownloadManagerStateAttributeListener ) torrentOptionsView0 , "iOd } o7 ? r" , ( - 156 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test60 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setTrackerClientExtensions ( "iOd } o7 ? r" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test61 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; long long0 = lWSDiskManagerState0 . getLongAttribute ( " ] n + b ! n5I < = ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test62 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setLongParameter ( "mswmp" , 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test63 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setCategory ( ( Category ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test64 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setAttribute ( "vkU ( 3" , "vkU ( 3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test65 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; boolean boolean0 = lWSDiskManagerState0 . hasAttribute ( " { 1\"B + X [ H" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test66 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; Map < Object , Object > map0 = lWSDiskManagerState0 . getResumeData ( ) ; lWSDiskManagerState0 . setTrackerResponseCache ( map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test67 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setPrimaryFile ( ( DiskManagerFileInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test68 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . setPeerSourceEnabled ( "" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test69 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . removeListener ( ( DownloadManagerStateListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test70 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; lWSDiskManagerState0 . getNetworks ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test71 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; boolean boolean0 = lWSDiskManagerState0 . getFlag ( ( - 565L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test72 ( ) throws Throwable { LWSDiskManagerState lWSDiskManagerState0 = new LWSDiskManagerState ( ) ; boolean boolean0 = lWSDiskManagerState0 . getFlag ( ( - 1318L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFlags ( ) { return 0 ; }
void test0 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . dataBytesSent ( ( PEPeer ) null , Integer . MAX_VALUE ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPeerExchangeEnabled ( ) { return ( true ) ; }
void test1 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . addPeer ( ( PEPeer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test2 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; byte [ ] byteArray0 = lWSPeerManagerAdapter0 . getTorrentInfoDict ( ( PEPeer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getTorrentInfoDict ( PEPeer peer ) { return ( null ) ; }
void test3 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; int int0 = lWSPeerManagerAdapter0 . getMaxUploads ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxUploads ( ) { return ( 4 ) ; }
void test4 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; int int0 = lWSPeerManagerAdapter0 . getMaxConnections ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxConnections ( ) { return ( 0 ) ; }
void test6 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . statsRequest ( ( PEPeer ) null , ( Map ) null , ( Map ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUploadRateLimitBytesPerSecond ( ) { return ( 0 ) ; }
void test7 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; boolean boolean0 = lWSPeerManagerAdapter0 . isMetadataDownload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMetadataDownload ( ) { return ( false ) ; }
void test8 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; int int0 = lWSPeerManagerAdapter0 . getMaxSeedConnections ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxSeedConnections ( ) { return ( 0 ) ; }
void test9 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; int int0 = lWSPeerManagerAdapter0 . getUploadRateLimitBytesPerSecond ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUploadRateLimitBytesPerSecond ( ) { return ( 0 ) ; }
void test10 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; int int0 = lWSPeerManagerAdapter0 . getPosition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test11 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; boolean boolean0 = lWSPeerManagerAdapter0 . isNATHealthy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNATHealthy ( ) { return ( true ) ; }
void test12 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; boolean boolean0 = lWSPeerManagerAdapter0 . isPeerSourceEnabled ( "q < ) { " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPeerSourceEnabled ( String peer_source ) { return ( true ) ; }
void test13 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; int int0 = lWSPeerManagerAdapter0 . getPermittedBytesToReceive ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPermittedBytesToReceive ( ) { return ( Integer . MAX_VALUE ) ; }
void test14 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . permittedReceiveBytesUsed ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDownloadRateLimitBytesPerSecond ( ) { return ( 0 ) ; }
void test15 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; boolean boolean0 = lWSPeerManagerAdapter0 . isPeriodicRescanEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPeriodicRescanEnabled ( ) { return ( false ) ; }
void test16 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . protocolBytesReceived ( ( PEPeer ) null , 1696 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPermittedBytesToReceive ( ) { return ( Integer . MAX_VALUE ) ; }
void test17 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; long long0 = lWSPeerManagerAdapter0 . getRandomSeed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRandomSeed ( ) { return 0 ; }
void test18 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . addHTTPSeed ( ( String ) null , 412 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTrackerClientExtensions ( ) { return ( null ) ; }
void test19 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; int int0 = lWSPeerManagerAdapter0 . getDownloadRateLimitBytesPerSecond ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDownloadRateLimitBytesPerSecond ( ) { return ( 0 ) ; }
void test20 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; int int0 = lWSPeerManagerAdapter0 . getTorrentInfoDictSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTorrentInfoDictSize ( ) { return ( 0 ) ; }
void test21 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; boolean boolean0 = lWSPeerManagerAdapter0 . isPeerExchangeEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPeerExchangeEnabled ( ) { return ( true ) ; }
void test22 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; boolean boolean0 = lWSPeerManagerAdapter0 . hasPriorityConnection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasPriorityConnection ( ) { return ( false ) ; }
void test23 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . dataBytesReceived ( ( PEPeer ) null , ( - 140 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDownloadRateLimitBytesPerSecond ( ) { return ( 0 ) ; }
void test24 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; PeerManagerRegistration peerManagerRegistration0 = lWSPeerManagerAdapter0 . getPeerManagerRegistration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PeerManagerRegistration getPeerManagerRegistration ( ) { return ( peer_manager_registration ) ; }
void test25 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . discarded ( ( PEPeer ) null , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTorrentInfoDictSize ( ) { return ( 0 ) ; }
void test27 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . permittedSendBytesUsed ( 1696 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test28 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . setStateSeeding ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test29 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; TRTrackerScraperResponse tRTrackerScraperResponse0 = lWSPeerManagerAdapter0 . getTrackerScrapeResponse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TRTrackerScraperResponse getTrackerScrapeResponse ( ) { return ( null ) ; }
void test30 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . setStateFinishing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCryptoLevel ( ) { return ( NetworkManager . CRYPTO_OVERRIDE_NONE ) ; }
void test31 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . priorityConnectionChanged ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDownloadRateLimitBytesPerSecond ( ) { return ( 0 ) ; }
void test32 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; boolean boolean0 = lWSPeerManagerAdapter0 . isExtendedMessagingEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExtendedMessagingEnabled ( ) { return ( true ) ; }
void test33 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; LWSPeerManagerAdapter lWSPeerManagerAdapter1 = ( LWSPeerManagerAdapter ) lWSPeerManagerAdapter0 . getLogRelation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTorrentInfoDictSize ( ) { return ( 0 ) ; }
void test34 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; int int0 = lWSPeerManagerAdapter0 . getPermittedBytesToSend ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPermittedBytesToSend ( ) { return ( Integer . MAX_VALUE ) ; }
void test35 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . protocolBytesSent ( ( PEPeer ) null , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNATHealthy ( ) { return ( true ) ; }
void test36 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; int int0 = lWSPeerManagerAdapter0 . getCryptoLevel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCryptoLevel ( ) { return ( NetworkManager . CRYPTO_OVERRIDE_NONE ) ; }
void test37 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . setTrackerRefreshDelayOverrides ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test38 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; int int0 = lWSPeerManagerAdapter0 . getUploadPriority ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUploadPriority ( ) { return ( 0 ) ; }
void test39 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . removePeer ( ( PEPeer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxUploads ( ) { return ( 4 ) ; }
void test40 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . addPiece ( ( PEPiece ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasPriorityConnection ( ) { return ( false ) ; }
void test42 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; lWSPeerManagerAdapter0 . removePiece ( ( PEPiece ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPeerExchangeEnabled ( ) { return ( true ) ; }
void test43 ( ) throws Throwable { LWSPeerManagerAdapter lWSPeerManagerAdapter0 = new LWSPeerManagerAdapter ( ( LightWeightSeed ) null , ( PeerManagerRegistration ) null ) ; String string0 = lWSPeerManagerAdapter0 . getTrackerClientExtensions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTrackerClientExtensions ( ) { return ( null ) ; }
void test1 ( ) throws Throwable { LightWeightSeedManager lightWeightSeedManager0 = LightWeightSeedManager . getSingleton ( ) ; LightWeightSeed lightWeightSeed0 = lightWeightSeedManager0 . get ( ( HashWrapper ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { LWSDiskManager . sePiece lWSDiskManager_sePiece0 = new LWSDiskManager . sePiece ( ) ; boolean boolean0 = lWSDiskManager_sePiece0 . isInteresting ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInteresting ( int piece_num ) { return ( false ) ; }
void test6 ( ) throws Throwable { LWSDiskManager . sePiece lWSDiskManager_sePiece0 = new LWSDiskManager . sePiece ( ) ; lWSDiskManager_sePiece0 . setReadCount ( ( short ) ( - 1390 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDone ( int piece_num ) { return ( false ) ; }
void test10 ( ) throws Throwable { LWSDiskManager . sePiece lWSDiskManager_sePiece0 = new LWSDiskManager . sePiece ( ) ; boolean boolean0 = lWSDiskManager_sePiece0 . isSkipped ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSkipped ( ) { return ( false ) ; }
void test13 ( ) throws Throwable { LWSDiskManager . sePiece lWSDiskManager_sePiece0 = new LWSDiskManager . sePiece ( ) ; String string0 = lWSDiskManager_sePiece0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test15 ( ) throws Throwable { LWSDiskManager . sePiece lWSDiskManager_sePiece0 = new LWSDiskManager . sePiece ( ) ; boolean boolean0 = lWSDiskManager_sePiece0 . isDownloadable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDownloadable ( ) ; void setDownloadable ( ) ; / * * * returns true if all the files that the piece spans are skipped * @return * / boolean isSkipped ( ) ; void reDownloadBlock ( int blockNumber ) ; void reset ( ) ; String getString ( ) ; }
void test16 ( ) throws Throwable { LWSDiskManager . sePiece lWSDiskManager_sePiece0 = new LWSDiskManager . sePiece ( ) ; boolean boolean0 = lWSDiskManager_sePiece0 . isDone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDone ( int piece_num ) { return ( false ) ; }
void test26 ( ) throws Throwable { LWSDiskManager . sePiece lWSDiskManager_sePiece0 = new LWSDiskManager . sePiece ( ) ; boolean boolean0 = lWSDiskManager_sePiece0 . isChecking ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChecking ( ) { return ( false ) ; }
void test30 ( ) throws Throwable { LWSDiskManager . sePiece lWSDiskManager_sePiece0 = new LWSDiskManager . sePiece ( ) ; short short0 = lWSDiskManager_sePiece0 . getReadCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" short getReadCount ( ) ; void setReadCount ( short c ) ; boolean calcNeeded ( ) ; void clearNeeded ( ) ; / * * @return true if any file the piece covers is neither Do Not Download nor Delete . * This is not a real - time indicator . Also , the results are not reliable for pieces that are Done . * Use calcNeeded ( ) for guaranteed correct and up to date results * @see calcNeeded ( ) , clearNeeded ( ) , setNeeded ( ) , setNeeded ( boolean ) * / boolean isNeeded ( ) ; void setNeeded ( ) ; void setNeeded ( boolean b ) ; / / a piece is Written if data has been written to storage for every block ( without concern for if it's checked ) boolean isWritten ( ) ; int getNbWritten ( ) ; boolean [ ] getWritten ( ) ; / * * * @param blockNumber int * @return true if the given blockNumber has already been written to disk * / boolean isWritten ( int blockNumber ) ; void setWritten ( int blockNumber ) ; / / a piece is Checking if a hash check has been setup and the hash check hasn't finalized the result yet / / this flag is asynch , so be careful , and it's also transitory ( comapared to most of the others being kinda sticky ) void setChecking ( ) ; boolean isChecking ( ) ; boolean isNeedsCheck ( ) ; boolean calcDone ( ) ; / * * @return true when the hash check has passed and the DiskManager has asyncronously updated the Done status . * There is nothing further to be done regarding downloading for pieces that are Done . * / boolean isDone ( ) ; void setDone ( boolean b ) ; / * * * @return true if a piece is Needed and not Done * / boolean isInteresting ( ) ; / * * This must not be used to qualify pieces in End Game Mode . * @return true if a piece is Needed but is not fully ; Requested , Downloaded , Written , Checking , or Done . * / boolean isDownloadable ( ) ; void setDownloadable ( ) ; / * * * returns true if all the files that the piece spans are skipped * @return * / boolean isSkipped ( ) ; void reDownloadBlock ( int blockNumber ) ; void reset ( ) ; String getString ( ) ; }
void test32 ( ) throws Throwable { LWSDiskManager . sePiece lWSDiskManager_sePiece0 = new LWSDiskManager . sePiece ( ) ; lWSDiskManager_sePiece0 . setDone ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDone ( int piece_num ) { return ( false ) ; }
void test33 ( ) throws Throwable { LWSDiskManager . sePiece lWSDiskManager_sePiece0 = new LWSDiskManager . sePiece ( ) ; lWSDiskManager_sePiece0 . setDone ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInteresting ( int piece_num ) { return ( false ) ; }
void test4 ( ) throws Throwable { LWSTorrent lWSTorrent0 = new LWSTorrent ( ( LightWeightSeed ) null ) ; lWSTorrent0 . setPrivate ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCreated ( ) { return ( true ) ; }
void test11 ( ) throws Throwable { LWSTorrent lWSTorrent0 = new LWSTorrent ( ( LightWeightSeed ) null ) ; Object [ ] objectArray0 = lWSTorrent0 . getQueryableInterfaces ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] getQueryableInterfaces ( ) { return new Object [ ] { } ; }
void test14 ( ) throws Throwable { LWSTorrent lWSTorrent0 = new LWSTorrent ( ( LightWeightSeed ) null ) ; TOTorrentAnnounceURLGroup tOTorrentAnnounceURLGroup0 = lWSTorrent0 . getAnnounceURLGroup ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TOTorrentAnnounceURLGroup getAnnounceURLGroup ( ) { return ( announce_group ) ; }
void test26 ( ) throws Throwable { LWSTorrent lWSTorrent0 = new LWSTorrent ( ( LightWeightSeed ) null ) ; boolean boolean0 = lWSTorrent0 . getPrivate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPrivate ( ) { return ( false ) ; }
void test32 ( ) throws Throwable { LWSTorrent lWSTorrent0 = new LWSTorrent ( ( LightWeightSeed ) null ) ; boolean boolean0 = lWSTorrent0 . setAnnounceURL ( ( URL ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean setAnnounceURL ( URL url ) { notSupported ( ) ; return ( false ) ; }
void test33 ( ) throws Throwable { LWSTorrent lWSTorrent0 = new LWSTorrent ( ( LightWeightSeed ) null ) ; boolean boolean0 = lWSTorrent0 . isCreated ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCreated ( ) { return ( true ) ; }
void test46 ( ) throws Throwable { LWSTorrent lWSTorrent0 = new LWSTorrent ( ( LightWeightSeed ) null ) ; Object object0 = lWSTorrent0 . getAdditionalProperty ( "url - list" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getAdditionalProperty ( String name ) { if ( name . equals ( "url - list" ) | | name . equals ( "httpseeds" ) ) { return ( null ) ; } return ( getDelegate ( ) . getAdditionalProperty ( name ) ) ; }
void test48 ( ) throws Throwable { LWSTorrent lWSTorrent0 = new LWSTorrent ( ( LightWeightSeed ) null ) ; Object object0 = lWSTorrent0 . getAdditionalProperty ( "httpseeds" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getAdditionalProperty ( String name ) { if ( name . equals ( "url - list" ) | | name . equals ( "httpseeds" ) ) { return ( null ) ; } return ( getDelegate ( ) . getAdditionalProperty ( name ) ) ; }
void test0 ( ) throws Throwable { VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler . getSingleton ( ) ; byte [ ] byteArray0 = new byte [ 3 ] ; VuzeFile vuzeFile0 = vuzeFileHandler0 . loadVuzeFile ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VuzeFile loadVuzeFile ( String target ) { try { File test_file = new File ( target ) ; if ( test_file . isFile ( ) ) { return ( getVuzeFile ( new FileInputStream ( test_file ) ) ) ; } else { URL url = new URI ( target ) . toURL ( ) ; String protocol = url . getProtocol ( ) . toLowerCase ( ) ; if ( protocol . equals ( "http" ) | | protocol . equals ( "https" ) ) { ResourceDownloader rd = StaticUtilities . getResourceDownloaderFactory ( ) . create ( url ) ; return ( getVuzeFile ( rd . download ( ) ) ) ; } } } catch ( Throwable e ) { } return ( null ) ; }
void test2 ( ) throws Throwable { VuzeFileHandler vuzeFileHandler0 = new VuzeFileHandler ( ) ; VuzeFile vuzeFile0 = vuzeFileHandler0 . loadAndHandleVuzeFile ( "ibbY" , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VuzeFile loadAndHandleVuzeFile ( String target , int expected_types ) { VuzeFile vf = loadVuzeFile ( target ) ; if ( vf = = null ) { return ( null ) ; } handleFiles ( new VuzeFile [ ] { vf } , expected_types ) ; return ( vf ) ; }
void test3 ( ) throws Throwable { VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler . getSingleton ( ) ; VuzeFile vuzeFile0 = vuzeFileHandler0 . loadVuzeFile ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VuzeFile loadVuzeFile ( String target ) { try { File test_file = new File ( target ) ; if ( test_file . isFile ( ) ) { return ( getVuzeFile ( new FileInputStream ( test_file ) ) ) ; } else { URL url = new URI ( target ) . toURL ( ) ; String protocol = url . getProtocol ( ) . toLowerCase ( ) ; if ( protocol . equals ( "http" ) | | protocol . equals ( "https" ) ) { ResourceDownloader rd = StaticUtilities . getResourceDownloaderFactory ( ) . create ( url ) ; return ( getVuzeFile ( rd . download ( ) ) ) ; } } } catch ( Throwable e ) { } return ( null ) ; }
void test4 ( ) throws Throwable { VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler . getSingleton ( ) ; HashMap < String , VuzeFileProcessor > hashMap0 = new HashMap < String , VuzeFileProcessor > ( ) ; VuzeFile vuzeFile0 = vuzeFileHandler0 . loadVuzeFile ( ( Map ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VuzeFile loadVuzeFile ( String target ) { try { File test_file = new File ( target ) ; if ( test_file . isFile ( ) ) { return ( getVuzeFile ( new FileInputStream ( test_file ) ) ) ; } else { URL url = new URI ( target ) . toURL ( ) ; String protocol = url . getProtocol ( ) . toLowerCase ( ) ; if ( protocol . equals ( "http" ) | | protocol . equals ( "https" ) ) { ResourceDownloader rd = StaticUtilities . getResourceDownloaderFactory ( ) . create ( url ) ; return ( getVuzeFile ( rd . download ( ) ) ) ; } } } catch ( Throwable e ) { } return ( null ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = " . " ; VuzeFileMerger vuzeFileMerger0 = new VuzeFileMerger ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler . getSingleton ( ) ; VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( vuzeFileHandler0 ) ; Map < Object , Object > map0 = vuzeFileImpl0 . exportToMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test2 ( ) throws Throwable { VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler . getSingleton ( ) ; VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( vuzeFileHandler0 ) ; VuzeFileComponent [ ] vuzeFileComponentArray0 = vuzeFileImpl0 . getComponents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VuzeFileComponent [ ] getComponents ( ) ; VuzeFileComponent addComponent ( int type , Map content ) ; byte [ ] exportToBytes ( ) throws IOException ; Map exportToMap ( ) throws IOException ; void write ( File target ) throws IOException ; }
void test3 ( ) throws Throwable { VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( ( VuzeFileHandler ) null ) ; HashMap < List < Integer > , List < Long > > hashMap0 = new HashMap < List < Integer > , List < Long > > ( ) ; VuzeFileImpl . comp vuzeFileImpl_comp0 = vuzeFileImpl0 . new comp ( 4 , ( Map ) hashMap0 ) ; vuzeFileImpl_comp0 . isProcessed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test4 ( ) throws Throwable { VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler . getSingleton ( ) ; VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( vuzeFileHandler0 ) ; Map < Object , Object > map0 = vuzeFileImpl0 . exportToMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test5 ( ) throws Throwable { VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( ( VuzeFileHandler ) null ) ; Map < Object , Object > map0 = vuzeFileImpl0 . exportToMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test6 ( ) throws Throwable { VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler . getSingleton ( ) ; VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( vuzeFileHandler0 ) ; Map < Object , Object > map0 = vuzeFileImpl0 . exportToMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test7 ( ) throws Throwable { VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( ( VuzeFileHandler ) null ) ; Map < Object , Object > map0 = vuzeFileImpl0 . exportToMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test8 ( ) throws Throwable { VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler . getSingleton ( ) ; VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( vuzeFileHandler0 ) ; VuzeFileImpl . comp vuzeFileImpl_comp0 = vuzeFileImpl0 . new comp ( ( int ) ( byte ) 2 , ( Map ) null ) ; String string0 = vuzeFileImpl_comp0 . getTypeName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeName ( ) ; Map getContent ( ) ; void setProcessed ( ) ; boolean isProcessed ( ) ; void setData ( Object key , Object value ) ; Object getData ( Object key ) ; }
void test9 ( ) throws Throwable { VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( ( VuzeFileHandler ) null ) ; HashMap < List < Integer > , List < Long > > hashMap0 = new HashMap < List < Integer > , List < Long > > ( ) ; VuzeFileImpl . comp vuzeFileImpl_comp0 = vuzeFileImpl0 . new comp ( 4 , ( Map ) hashMap0 ) ; String string0 = vuzeFileImpl_comp0 . getTypeName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeName ( ) ; Map getContent ( ) ; void setProcessed ( ) ; boolean isProcessed ( ) ; void setData ( Object key , Object value ) ; Object getData ( Object key ) ; }
void test10 ( ) throws Throwable { VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( ( VuzeFileHandler ) null ) ; HashMap < List < Integer > , List < Long > > hashMap0 = new HashMap < List < Integer > , List < Long > > ( ) ; VuzeFileImpl . comp vuzeFileImpl_comp0 = vuzeFileImpl0 . new comp ( 8 , ( Map ) hashMap0 ) ; String string0 = vuzeFileImpl_comp0 . getTypeName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeName ( ) ; Map getContent ( ) ; void setProcessed ( ) ; boolean isProcessed ( ) ; void setData ( Object key , Object value ) ; Object getData ( Object key ) ; }
void test11 ( ) throws Throwable { VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( ( VuzeFileHandler ) null ) ; HashMap < List < Integer > , List < Long > > hashMap0 = new HashMap < List < Integer > , List < Long > > ( ) ; VuzeFileImpl . comp vuzeFileImpl_comp0 = vuzeFileImpl0 . new comp ( 16 , ( Map ) hashMap0 ) ; String string0 = vuzeFileImpl_comp0 . getTypeName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test12 ( ) throws Throwable { VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler . getSingleton ( ) ; VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( vuzeFileHandler0 ) ; Map < Object , Object > map0 = vuzeFileImpl0 . exportToMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test13 ( ) throws Throwable { VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler . getSingleton ( ) ; VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( vuzeFileHandler0 ) ; Map < Object , Object > map0 = vuzeFileImpl0 . exportToMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test14 ( ) throws Throwable { VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler . getSingleton ( ) ; VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( vuzeFileHandler0 ) ; VuzeFileImpl . comp vuzeFileImpl_comp0 = vuzeFileImpl0 . new comp ( 128 , ( Map ) null ) ; String string0 = vuzeFileImpl_comp0 . getTypeName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeName ( ) ; Map getContent ( ) ; void setProcessed ( ) ; boolean isProcessed ( ) ; void setData ( Object key , Object value ) ; Object getData ( Object key ) ; }
void test15 ( ) throws Throwable { VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler . getSingleton ( ) ; VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( vuzeFileHandler0 ) ; Map < Object , Object > map0 = vuzeFileImpl0 . exportToMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test16 ( ) throws Throwable { VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler . getSingleton ( ) ; VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( vuzeFileHandler0 ) ; Map < Object , Object > map0 = vuzeFileImpl0 . exportToMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test17 ( ) throws Throwable { VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler . getSingleton ( ) ; VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( vuzeFileHandler0 ) ; Map < Object , Object > map0 = vuzeFileImpl0 . exportToMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeName ( ) ; Map getContent ( ) ; void setProcessed ( ) ; boolean isProcessed ( ) ; void setData ( Object key , Object value ) ; Object getData ( Object key ) ; }
void test18 ( ) throws Throwable { VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler . getSingleton ( ) ; VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl ( vuzeFileHandler0 ) ; Map < Object , Object > map0 = vuzeFileImpl0 . exportToMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test2 ( ) throws Throwable { AzureusCoreStats . fireProvidersChangeListeners ( ) ; System . setCurrentTimeMillis ( 0L ) ; TreeSet < String > treeSet0 = new TreeSet < String > ( ) ; AzureusCoreStats . setEnableAverages ( true ) ; Random . setNextRandom ( 0 ) ; Map < Object , Object > map0 = AzureusCoreStats . getStats ( ( Set ) treeSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getEnableAverages ( ) { return ( enable_averages ) ; }
void test6 ( ) throws Throwable { Set < String > set0 = MyTorrentsView . preferred_tracker_names ; Map < Object , Object > map0 = AzureusCoreStats . getStats ( set0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; AZOtherInstanceImpl aZOtherInstanceImpl0 = new AZOtherInstanceImpl ( " , udp2 = " , " , udp2 = " , ( InetAddress ) inet4Address0 , ( InetAddress ) inet4Address0 , 909 , 909 , 909 , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; AZOtherInstanceImpl aZOtherInstanceImpl0 = new AZOtherInstanceImpl ( " , udp2 = " , " , udp2 = " , ( InetAddress ) inet4Address0 , ( InetAddress ) inet4Address0 , 909 , 909 , 909 , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; AZOtherInstanceImpl aZOtherInstanceImpl0 = new AZOtherInstanceImpl ( " , udp2 = " , " , udp2 = " , ( InetAddress ) inet4Address0 , ( InetAddress ) inet4Address0 , 909 , 909 , 909 , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; AZOtherInstanceImpl aZOtherInstanceImpl0 = new AZOtherInstanceImpl ( " , udp2 = " , " , udp2 = " , ( InetAddress ) inet4Address0 , ( InetAddress ) inet4Address0 , 909 , 909 , 909 , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; AZOtherInstanceImpl aZOtherInstanceImpl0 = new AZOtherInstanceImpl ( " , udp2 = " , " , udp2 = " , ( InetAddress ) inet4Address0 , ( InetAddress ) inet4Address0 , 909 , 909 , 909 , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; AZOtherInstanceImpl aZOtherInstanceImpl0 = new AZOtherInstanceImpl ( "" , "" , ( InetAddress ) inet4Address0 , ( InetAddress ) inet4Address0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; AZOtherInstanceImpl aZOtherInstanceImpl0 = new AZOtherInstanceImpl ( " { I^n : 0n0 ; " , " { I^n : 0n0 ; " , ( InetAddress ) inet4Address0 , ( InetAddress ) inet4Address0 , ( - 1974 ) , ( int ) ( byte ) 0 , ( - 1974 ) , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; AZOtherInstanceImpl aZOtherInstanceImpl0 = new AZOtherInstanceImpl ( " , udp2 = " , " , udp2 = " , ( InetAddress ) inet4Address0 , ( InetAddress ) inet4Address0 , 909 , 909 , 909 , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest ( ( - 442L ) ) ; versionCheckClientUDPRequest0 . getPayload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test1 ( ) throws Throwable { VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest ( 0L ) ; PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) pipedOutputStream0 , true ) ; DataOutputStream dataOutputStream0 = new DataOutputStream ( ( OutputStream ) printStream0 ) ; versionCheckClientUDPRequest0 . serialise ( dataOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransactionId ( ) { return ( transaction_id ) ; }
void test2 ( ) throws Throwable { VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest ( ( - 442L ) ) ; String string0 = versionCheckClientUDPRequest0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest ( ( - 442L ) ) ; versionCheckClientUDPRequest0 . setPayload ( ( Map < String , Object > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSerialisedSize ( ) ; / * * * @param other * @return Float . NaN if no value available * / float estimateRTT ( DHTNetworkPosition other ) ; void update ( byte [ ] other_id , DHTNetworkPosition other , float rtt ) ; boolean isValid ( ) ; double [ ] getLocation ( ) ; void serialise ( DataOutputStream os ) throws IOException ; }
void test1 ( ) throws Throwable { VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply ( ( - 177 ) ) ; Map < String , Object > map0 = versionCheckClientUDPReply0 . getPayload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getPayload ( ) { return ( payload ) ; }
void test2 ( ) throws Throwable { VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply ( ( - 617 ) ) ; String string0 = versionCheckClientUDPReply0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply ( ( - 177 ) ) ; versionCheckClientUDPReply0 . setPayload ( ( Map < String , Object > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test0 ( ) throws Throwable { VersionCheckClientUDPCodecs versionCheckClientUDPCodecs0 = new VersionCheckClientUDPCodecs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { TestPingSourceRandom testPingSourceRandom0 = new TestPingSourceRandom ( ( SpeedManagerAlgorithmProviderAdapter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getContactNumber ( ) { return ( contact_num ) ; }
void test0 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 888 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMetric ( ) ; }
void test1 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "SystemTray . menu . stopalltransfers" , 0 , true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMetric ( ) ; }
void test3 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 888 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test4 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 1 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test5 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 1 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getEstimateType ( ) ; / * * * For estimated limits : * - 1 = estimate derived from bad metrics * + 1 = estimate derived from good metric * < 1 x > - 1 = relative goodness of metric * @return * / float getMetricRating ( ) ; int [ ] [ ] getSegments ( ) ; long getWhen ( ) ; String getString ( ) ; }
void test6 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 1 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test7 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 1 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getEstimateType ( ) ; / * * * For estimated limits : * - 1 = estimate derived from bad metrics * + 1 = estimate derived from good metric * < 1 x > - 1 = relative goodness of metric * @return * / float getMetricRating ( ) ; int [ ] [ ] getSegments ( ) ; long getWhen ( ) ; String getString ( ) ; }
void test8 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 1 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test9 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 888 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test10 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , " < ot2 { S7G , mR0j9CI$V * " , 1 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test11 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 1039 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test12 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , ( String ) null , 0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test13 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , " < ot2 { S7G , mR0j9CI$V * " , 1 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHits ( ) { return ( hits ) ; }
void test14 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , ( String ) null , 0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test15 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 888 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void generateEvidence ( IndentWriter writer ) { }
void test16 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , " < ot2 { S7G , mR0j9CI$V * " , 1 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getWhen ( ) ; String getString ( ) ; }
void test17 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 1 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHits ( ) { return ( hits ) ; }
void test18 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 1039 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMetricRating ( ) ; int [ ] [ ] getSegments ( ) ; long getWhen ( ) ; String getString ( ) ; }
void test20 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 888 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getCurrentMetricRating ( ) ; SpeedManagerLimitEstimate getLastBadUploadLimit ( ) ; SpeedManagerLimitEstimate getLastBadDownloadLimit ( ) ; SpeedManagerLimitEstimate [ ] getBadUploadHistory ( ) ; SpeedManagerLimitEstimate [ ] getBadDownloadHistory ( ) ; boolean isActive ( ) ; void destroy ( ) ; }
void test21 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , " < ot2 { S7G , mR0j9CI$V * " , 3 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBytesPerSec ( ) ; / * * * One of the above constants * @return * / float getEstimateType ( ) ; / * * * For estimated limits : * - 1 = estimate derived from bad metrics * + 1 = estimate derived from good metric * < 1 x > - 1 = relative goodness of metric * @return * / float getMetricRating ( ) ; int [ ] [ ] getSegments ( ) ; long getWhen ( ) ; String getString ( ) ; }
void test22 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "EaZ\"TWbHR1qyF4FN" , 0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" limitEstimate loadLimit ( Map m ) { if ( m = = null ) { return ( getNullLimit ( ) ) ; } int speed = ( ( Long ) m . get ( "s" ) ) . intValue ( ) ; double metric = Double . parseDouble ( new String ( ( byte [ ] ) m . get ( "m" ) ) ) ; int hits = ( ( Long ) m . get ( "h" ) ) . intValue ( ) ; long when = ( ( Long ) m . get ( "w" ) ) . longValue ( ) ; byte [ ] t_bytes = ( byte [ ] ) m . get ( "t" ) ; double type = t_bytes = = null ? SpeedManagerLimitEstimate . TYPE_ESTIMATED : Double . parseDouble ( new String ( t_bytes ) ) ; return ( new limitEstimate ( speed , type , metric , hits , when , new int [ 0 ] [ ] ) ) ; }
void test23 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 1039 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getEstimateType ( ) ; / * * * For estimated limits : * - 1 = estimate derived from bad metrics * + 1 = estimate derived from good metric * < 1 x > - 1 = relative goodness of metric * @return * / float getMetricRating ( ) ; int [ ] [ ] getSegments ( ) ; long getWhen ( ) ; String getString ( ) ; }
void test24 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 1 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test27 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 1 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test28 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 888 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getCurrentMetricRating ( ) ; SpeedManagerLimitEstimate getLastBadUploadLimit ( ) ; SpeedManagerLimitEstimate getLastBadDownloadLimit ( ) ; SpeedManagerLimitEstimate [ ] getBadUploadHistory ( ) ; SpeedManagerLimitEstimate [ ] getBadDownloadHistory ( ) ; boolean isActive ( ) ; void destroy ( ) ; }
void test30 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , " < ot2 { S7G , mR0j9CI$V * " , 1 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getCurrentMetricRating ( ) ; SpeedManagerLimitEstimate getLastBadUploadLimit ( ) ; SpeedManagerLimitEstimate getLastBadDownloadLimit ( ) ; SpeedManagerLimitEstimate [ ] getBadUploadHistory ( ) ; SpeedManagerLimitEstimate [ ] getBadDownloadHistory ( ) ; boolean isActive ( ) ; void destroy ( ) ; }
void test31 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "@ , " , 1261 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test32 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 1 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getWhen ( ) ; String getString ( ) ; }
void test33 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "SystemTray . menu . stopalltransfers" , 0 , true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test35 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "@ , " , 1261 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setEstimatedDownloadCapacityBytesPerSec ( int bytes_per_sec , float estimate_type ) ; void setSpeedTester ( DHTSpeedTester tester ) ; DHTSpeedTester getSpeedTester ( ) ; SpeedManagerPingSource [ ] getPingSources ( ) ; SpeedManagerPingMapper getActiveMapper ( ) ; SpeedManagerPingMapper [ ] getMappers ( ) ; void reset ( ) ; void addListener ( SpeedManagerListener l ) ; void removeListener ( SpeedManagerListener l ) ; }
void test36 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "dH , J < 'nrUO@wUSA * O" , 0 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setEstimatedDownloadCapacityBytesPerSec ( int bytes_per_sec , float estimate_type ) ; void setSpeedTester ( DHTSpeedTester tester ) ; DHTSpeedTester getSpeedTester ( ) ; SpeedManagerPingSource [ ] getPingSources ( ) ; SpeedManagerPingMapper getActiveMapper ( ) ; SpeedManagerPingMapper [ ] getMappers ( ) ; void reset ( ) ; void addListener ( SpeedManagerListener l ) ; void removeListener ( SpeedManagerListener l ) ; }
void test37 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "s3" , 0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setEstimatedUploadCapacityBytesPerSec ( int bytes_per_sec , float estimate_type ) ; SpeedManagerLimitEstimate getEstimatedDownloadCapacityBytesPerSec ( ) ; void setEstimatedDownloadCapacityBytesPerSec ( int bytes_per_sec , float estimate_type ) ; void setSpeedTester ( DHTSpeedTester tester ) ; DHTSpeedTester getSpeedTester ( ) ; SpeedManagerPingSource [ ] getPingSources ( ) ; SpeedManagerPingMapper getActiveMapper ( ) ; SpeedManagerPingMapper [ ] getMappers ( ) ; void reset ( ) ; void addListener ( SpeedManagerListener l ) ; void removeListener ( SpeedManagerListener l ) ; }
void test38 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "" , 888 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test39 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , " < ot2 { S7G , mR0j9CI$V * " , 3 , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isActive ( ) ; boolean isMine ( ) ; boolean isPublic ( ) ; void setMine ( boolean mine ) ; int getSelectionState ( ) ; void setSelectionState ( int state ) ; void recordSelectionState ( ) ; void checkSelectionStateRecorded ( ) ; int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test41 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , ( String ) null , 0 , false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test42 ( ) throws Throwable { SpeedManagerPingMapperImpl speedManagerPingMapperImpl0 = new SpeedManagerPingMapperImpl ( ( SpeedManagerImpl ) null , "Y\"mth ? 9504m & U" , 0 , false , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test1 ( ) throws Throwable { SpeedManagerAlgorithmProviderV1 speedManagerAlgorithmProviderV1_0 = new SpeedManagerAlgorithmProviderV1 ( ( SpeedManagerAlgorithmProviderAdapter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxPingMillis ( ) { return ( provider . getMaxPingMillis ( ) ) ; }
void test2 ( ) throws Throwable { SpeedManagerAlgorithmProviderV1 speedManagerAlgorithmProviderV1_0 = new SpeedManagerAlgorithmProviderV1 ( ( SpeedManagerAlgorithmProviderAdapter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdlePingMillis ( ) { return ( provider . getIdlePingMillis ( ) ) ; }
void test3 ( ) throws Throwable { SpeedManagerAlgorithmProviderV1 speedManagerAlgorithmProviderV1_0 = new SpeedManagerAlgorithmProviderV1 ( ( SpeedManagerAlgorithmProviderAdapter ) null ) ; speedManagerAlgorithmProviderV1_0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentChokeSpeed ( ) { return ( provider . getCurrentChokeSpeed ( ) ) ; }
void test4 ( ) throws Throwable { SpeedManagerAlgorithmProviderV1 speedManagerAlgorithmProviderV1_0 = new SpeedManagerAlgorithmProviderV1 ( ( SpeedManagerAlgorithmProviderAdapter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdlePingMillis ( ) { return ( provider . getIdlePingMillis ( ) ) ; }
void test5 ( ) throws Throwable { SpeedManagerAlgorithmProviderV1 speedManagerAlgorithmProviderV1_0 = new SpeedManagerAlgorithmProviderV1 ( ( SpeedManagerAlgorithmProviderAdapter ) null ) ; int int0 = speedManagerAlgorithmProviderV1_0 . getCurrentPingMillis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentPingMillis ( ) { return ( provider . getCurrentPingMillis ( ) ) ; }
void test7 ( ) throws Throwable { SpeedManagerAlgorithmProviderV1 speedManagerAlgorithmProviderV1_0 = new SpeedManagerAlgorithmProviderV1 ( ( SpeedManagerAlgorithmProviderAdapter ) null ) ; boolean boolean0 = speedManagerAlgorithmProviderV1_0 . getAdjustsDownloadLimits ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAdjustsDownloadLimits ( ) ; void destroy ( ) ; }
void test9 ( ) throws Throwable { SpeedManagerAlgorithmProviderV1 speedManagerAlgorithmProviderV1_0 = new SpeedManagerAlgorithmProviderV1 ( ( SpeedManagerAlgorithmProviderAdapter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxUploadSpeed ( ) { return ( provider . getMaxUploadSpeed ( ) ) ; }
void test10 ( ) throws Throwable { SpeedManagerAlgorithmProviderV1 speedManagerAlgorithmProviderV1_0 = new SpeedManagerAlgorithmProviderV1 ( ( SpeedManagerAlgorithmProviderAdapter ) null ) ; int int0 = speedManagerAlgorithmProviderV1_0 . getCurrentChokeSpeed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentChokeSpeed ( ) { return ( provider . getCurrentChokeSpeed ( ) ) ; }
void test0 ( ) throws Throwable { LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst ( ) ; boolean boolean0 = limitControlDropUploadFirst0 . isDownloadUnlimitedMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDownloadUnlimitedMode ( ) { return isDownloadUnlimited ; }
void test1 ( ) throws Throwable { LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst ( ) ; limitControlDropUploadFirst0 . setDownloadUnlimitedMode ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDownloadUnlimitedMode ( boolean isUnlimited ) { isDownloadUnlimited = isUnlimited ; if ( isUnlimited ) { valueDown = 1 . 0f ; } }
void test2 ( ) throws Throwable { LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst ( ) ; limitControlDropUploadFirst0 . updateLimits ( 61440 , 20480 , 20480 , 30720 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateLimits ( int _upMax , int _upMin , int _downMax , int _downMin ) { / / verify the limits . if ( _upMax < SMConst . START_UPLOAD_RATE_MAX ) { _upMax = SMConst . START_UPLOAD_RATE_MAX ; } if ( _downMax < SMConst . START_DOWNLOAD_RATE_MAX ) { _downMax = SMConst . START_DOWNLOAD_RATE_MAX ; } if ( _downMax < _upMax ) { _downMax = _upMax ; } _upMin = SMConst . calculateMinUpload ( _upMax ) ; _downMin = SMConst . calculateMinDownload ( _downMax ) ; upMax = _upMax ; upMin = _upMin ; downMax = _downMax ; downMin = _downMin ; }
void test3 ( ) throws Throwable { LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst ( ) ; limitControlDropUploadFirst0 . updateSeedSettings ( 1 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateSeedSettings ( float downloadModeUsed ) { if ( downloadModeUsed < 1 . 0f & & downloadModeUsed > 0 . 1f ) { usedUpMaxDownloadMode = downloadModeUsed ; SpeedManagerLogger . trace ( "LimitControlDropUploadFirst %used upload used while downloading : " + downloadModeUsed ) ; } }
void test4 ( ) throws Throwable { LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst ( ) ; limitControlDropUploadFirst0 . updateSeedSettings ( 0 . 6F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateSeedSettings ( float downloadModeUsed ) { if ( downloadModeUsed < 1 . 0f & & downloadModeUsed > 0 . 1f ) { usedUpMaxDownloadMode = downloadModeUsed ; SpeedManagerLogger . trace ( "LimitControlDropUploadFirst %used upload used while downloading : " + downloadModeUsed ) ; } }
void test5 ( ) throws Throwable { LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst ( ) ; limitControlDropUploadFirst0 . updateSeedSettings ( ( float ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateSeedSettings ( float downloadModeUsed ) { if ( downloadModeUsed < 1 . 0f & & downloadModeUsed > 0 . 1f ) { usedUpMaxDownloadMode = downloadModeUsed ; SpeedManagerLogger . trace ( "LimitControlDropUploadFirst %used upload used while downloading : " + downloadModeUsed ) ; } }
void test6 ( ) throws Throwable { LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst ( ) ; TransferMode transferMode0 = new TransferMode ( ) ; limitControlDropUploadFirst0 . updateStatus ( 0 , ( SaturatedMode ) null , 0 , ( SaturatedMode ) null , transferMode0 ) ; SMUpdate sMUpdate0 = limitControlDropUploadFirst0 . adjust ( ( - 1318 . 9626F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SMUpdate adjust ( float amount ) { boolean increase = true ; if ( amount < 0 . 0f ) { increase = false ; } float factor = amount / 10 . 0f ; int usedUpMax = usedUploadCapacity ( ) ; float gamma = ( float ) usedUpMax / downMax ; if ( increase ) { / / increase download first if ( valueDown < 0 . 99f ) { valueDown = calculateNewValue ( valueDown , factor ) ; } else { / / only increase upload if used . if ( upUsage = = SaturatedMode . AT_LIMIT ) { valueUp = calculateNewValue ( valueUp , gamma * 0 . 5f * factor ) ; } } } else { / / decrease upload first if ( valueUp > 0 . 01f ) { valueUp = calculateNewValue ( valueUp , gamma * factor ) ; } else { valueDown = calculateNewValue ( valueDown , factor ) ; } } return update ( ) ; }
void test7 ( ) throws Throwable { LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst ( ) ; SaturatedMode saturatedMode0 = SaturatedMode . AT_LIMIT ; TransferMode transferMode0 = new TransferMode ( ) ; limitControlDropUploadFirst0 . updateStatus ( 30720 , saturatedMode0 , 0 , saturatedMode0 , transferMode0 ) ; limitControlDropUploadFirst0 . adjust ( ( float ) 20480 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SMUpdate adjust ( float amount ) { boolean increase = true ; if ( amount < 0 . 0f ) { increase = false ; } float factor = amount / 10 . 0f ; int usedUpMax = usedUploadCapacity ( ) ; float gamma = ( float ) usedUpMax / downMax ; if ( increase ) { / / increase download first if ( valueDown < 0 . 99f ) { valueDown = calculateNewValue ( valueDown , factor ) ; } else { / / only increase upload if used . if ( upUsage = = SaturatedMode . AT_LIMIT ) { valueUp = calculateNewValue ( valueUp , gamma * 0 . 5f * factor ) ; } } } else { / / decrease upload first if ( valueUp > 0 . 01f ) { valueUp = calculateNewValue ( valueUp , gamma * factor ) ; } else { valueDown = calculateNewValue ( valueDown , factor ) ; } } return update ( ) ; }
void test8 ( ) throws Throwable { LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst ( ) ; limitControlDropUploadFirst0 . upMax = ( - 2 ) ; TransferMode transferMode0 = new TransferMode ( ) ; limitControlDropUploadFirst0 . updateStatus ( 0 , ( SaturatedMode ) null , 0 , ( SaturatedMode ) null , transferMode0 ) ; SMUpdate sMUpdate0 = limitControlDropUploadFirst0 . adjust ( 0 . 6F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SMUpdate adjust ( float amount ) { boolean increase = true ; if ( amount < 0 . 0f ) { increase = false ; } float factor = amount / 10 . 0f ; int usedUpMax = usedUploadCapacity ( ) ; float gamma = ( float ) usedUpMax / downMax ; if ( increase ) { / / increase download first if ( valueDown < 0 . 99f ) { valueDown = calculateNewValue ( valueDown , factor ) ; } else { / / only increase upload if used . if ( upUsage = = SaturatedMode . AT_LIMIT ) { valueUp = calculateNewValue ( valueUp , gamma * 0 . 5f * factor ) ; } } } else { / / decrease upload first if ( valueUp > 0 . 01f ) { valueUp = calculateNewValue ( valueUp , gamma * factor ) ; } else { valueDown = calculateNewValue ( valueDown , factor ) ; } } return update ( ) ; }
void test9 ( ) throws Throwable { LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst ( ) ; TransferMode transferMode0 = new TransferMode ( ) ; limitControlDropUploadFirst0 . updateStatus ( 0 , ( SaturatedMode ) null , 0 , ( SaturatedMode ) null , transferMode0 ) ; limitControlDropUploadFirst0 . setDownloadUnlimitedMode ( true ) ; limitControlDropUploadFirst0 . adjust ( ( float ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SMUpdate adjust ( float amount ) { boolean increase = true ; if ( amount < 0 . 0f ) { increase = false ; } float factor = amount / 10 . 0f ; int usedUpMax = usedUploadCapacity ( ) ; float gamma = ( float ) usedUpMax / downMax ; if ( increase ) { / / increase download first if ( valueDown < 0 . 99f ) { valueDown = calculateNewValue ( valueDown , factor ) ; } else { / / only increase upload if used . if ( upUsage = = SaturatedMode . AT_LIMIT ) { valueUp = calculateNewValue ( valueUp , gamma * 0 . 5f * factor ) ; } } } else { / / decrease upload first if ( valueUp > 0 . 01f ) { valueUp = calculateNewValue ( valueUp , gamma * factor ) ; } else { valueDown = calculateNewValue ( valueDown , factor ) ; } } return update ( ) ; }
void test10 ( ) throws Throwable { LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst ( ) ; SaturatedMode saturatedMode0 = SaturatedMode . AT_LIMIT ; limitControlDropUploadFirst0 . updateLimits ( 0 , 20480 , 61440 , 30720 ) ; TransferMode transferMode0 = new TransferMode ( ) ; limitControlDropUploadFirst0 . updateStatus ( 30720 , saturatedMode0 , 0 , saturatedMode0 , transferMode0 ) ; limitControlDropUploadFirst0 . adjust ( ( float ) 20480 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SMUpdate adjust ( float amount ) { boolean increase = true ; if ( amount < 0 . 0f ) { increase = false ; } float factor = amount / 10 . 0f ; int usedUpMax = usedUploadCapacity ( ) ; float gamma = ( float ) usedUpMax / downMax ; if ( increase ) { / / increase download first if ( valueDown < 0 . 99f ) { valueDown = calculateNewValue ( valueDown , factor ) ; } else { / / only increase upload if used . if ( upUsage = = SaturatedMode . AT_LIMIT ) { valueUp = calculateNewValue ( valueUp , gamma * 0 . 5f * factor ) ; } } } else { / / decrease upload first if ( valueUp > 0 . 01f ) { valueUp = calculateNewValue ( valueUp , gamma * factor ) ; } else { valueDown = calculateNewValue ( valueDown , factor ) ; } } return update ( ) ; }
void test0 ( ) throws Throwable { PingSourceStats pingSourceStats0 = new PingSourceStats ( ( SpeedManagerPingSource ) null ) ; MovingImmediateAverage movingImmediateAverage0 = ( MovingImmediateAverage ) pingSourceStats0 . getLongTermAve ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSampleCount ( ) { return ( pos > periods ? periods : pos ) ; }
void test1 ( ) throws Throwable { PingSourceStats pingSourceStats0 = new PingSourceStats ( ( SpeedManagerPingSource ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTrend ( ) { int retVal = 0 ; / / based on current ping values . if ( currPing < 0 . 0 ) { retVal - - ; } else { if ( currPing < shortTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } if ( currPing < medTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } if ( currPing < longTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } } / / compare shortTerm and medium term averages . if ( shortTerm . getAverage ( ) < medTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } / / compare short - term with long term . if ( shortTerm . getAverage ( ) < longTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } / / compare medium - term with long - term . if ( medTerm . getAverage ( ) < longTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } / / modify results based on absolute ping values . int ABSOLUTE_GOOD_PING_VALUE = 30 ; if ( currPing < ABSOLUTE_GOOD_PING_VALUE ) { retVal + + ; } if ( shortTerm . getAverage ( ) < ABSOLUTE_GOOD_PING_VALUE ) { retVal + + ; } if ( medTerm . getAverage ( ) < ABSOLUTE_GOOD_PING_VALUE ) { retVal + + ; } if ( longTerm . getAverage ( ) < ABSOLUTE_GOOD_PING_VALUE ) { retVal + + ; } / / modify results based on absolute ping values that are too long . int ABSOLUTE_BAD_PING_VALUE = 300 ; if ( currPing > ABSOLUTE_BAD_PING_VALUE ) { retVal - - ; } if ( shortTerm . getAverage ( ) > ABSOLUTE_BAD_PING_VALUE ) { retVal - - ; } if ( medTerm . getAverage ( ) > ABSOLUTE_BAD_PING_VALUE ) { retVal - - ; } if ( longTerm . getAverage ( ) > ABSOLUTE_BAD_PING_VALUE ) { retVal - - ; } return retVal ; }
void test2 ( ) throws Throwable { PingSourceStats pingSourceStats0 = new PingSourceStats ( ( SpeedManagerPingSource ) null ) ; pingSourceStats0 . madeChange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void madeChange ( ) { / / want to make all the values NAN until it is ready to compare again . }
void test3 ( ) throws Throwable { PingSourceStats pingSourceStats0 = new PingSourceStats ( ( SpeedManagerPingSource ) null ) ; MovingImmediateAverage movingImmediateAverage0 = ( MovingImmediateAverage ) pingSourceStats0 . getHistory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test4 ( ) throws Throwable { PingSourceStats pingSourceStats0 = new PingSourceStats ( ( SpeedManagerPingSource ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTrend ( ) { int retVal = 0 ; / / based on current ping values . if ( currPing < 0 . 0 ) { retVal - - ; } else { if ( currPing < shortTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } if ( currPing < medTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } if ( currPing < longTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } } / / compare shortTerm and medium term averages . if ( shortTerm . getAverage ( ) < medTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } / / compare short - term with long term . if ( shortTerm . getAverage ( ) < longTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } / / compare medium - term with long - term . if ( medTerm . getAverage ( ) < longTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } / / modify results based on absolute ping values . int ABSOLUTE_GOOD_PING_VALUE = 30 ; if ( currPing < ABSOLUTE_GOOD_PING_VALUE ) { retVal + + ; } if ( shortTerm . getAverage ( ) < ABSOLUTE_GOOD_PING_VALUE ) { retVal + + ; } if ( medTerm . getAverage ( ) < ABSOLUTE_GOOD_PING_VALUE ) { retVal + + ; } if ( longTerm . getAverage ( ) < ABSOLUTE_GOOD_PING_VALUE ) { retVal + + ; } / / modify results based on absolute ping values that are too long . int ABSOLUTE_BAD_PING_VALUE = 300 ; if ( currPing > ABSOLUTE_BAD_PING_VALUE ) { retVal - - ; } if ( shortTerm . getAverage ( ) > ABSOLUTE_BAD_PING_VALUE ) { retVal - - ; } if ( medTerm . getAverage ( ) > ABSOLUTE_BAD_PING_VALUE ) { retVal - - ; } if ( longTerm . getAverage ( ) > ABSOLUTE_BAD_PING_VALUE ) { retVal - - ; } return retVal ; }
void test5 ( ) throws Throwable { PingSourceStats pingSourceStats0 = new PingSourceStats ( ( SpeedManagerPingSource ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTrend ( ) { int retVal = 0 ; / / based on current ping values . if ( currPing < 0 . 0 ) { retVal - - ; } else { if ( currPing < shortTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } if ( currPing < medTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } if ( currPing < longTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } } / / compare shortTerm and medium term averages . if ( shortTerm . getAverage ( ) < medTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } / / compare short - term with long term . if ( shortTerm . getAverage ( ) < longTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } / / compare medium - term with long - term . if ( medTerm . getAverage ( ) < longTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } / / modify results based on absolute ping values . int ABSOLUTE_GOOD_PING_VALUE = 30 ; if ( currPing < ABSOLUTE_GOOD_PING_VALUE ) { retVal + + ; } if ( shortTerm . getAverage ( ) < ABSOLUTE_GOOD_PING_VALUE ) { retVal + + ; } if ( medTerm . getAverage ( ) < ABSOLUTE_GOOD_PING_VALUE ) { retVal + + ; } if ( longTerm . getAverage ( ) < ABSOLUTE_GOOD_PING_VALUE ) { retVal + + ; } / / modify results based on absolute ping values that are too long . int ABSOLUTE_BAD_PING_VALUE = 300 ; if ( currPing > ABSOLUTE_BAD_PING_VALUE ) { retVal - - ; } if ( shortTerm . getAverage ( ) > ABSOLUTE_BAD_PING_VALUE ) { retVal - - ; } if ( medTerm . getAverage ( ) > ABSOLUTE_BAD_PING_VALUE ) { retVal - - ; } if ( longTerm . getAverage ( ) > ABSOLUTE_BAD_PING_VALUE ) { retVal - - ; } return retVal ; }
void test6 ( ) throws Throwable { PingSourceStats pingSourceStats0 = new PingSourceStats ( ( SpeedManagerPingSource ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTrend ( ) { int retVal = 0 ; / / based on current ping values . if ( currPing < 0 . 0 ) { retVal - - ; } else { if ( currPing < shortTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } if ( currPing < medTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } if ( currPing < longTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } } / / compare shortTerm and medium term averages . if ( shortTerm . getAverage ( ) < medTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } / / compare short - term with long term . if ( shortTerm . getAverage ( ) < longTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } / / compare medium - term with long - term . if ( medTerm . getAverage ( ) < longTerm . getAverage ( ) ) { retVal + + ; } else { retVal - - ; } / / modify results based on absolute ping values . int ABSOLUTE_GOOD_PING_VALUE = 30 ; if ( currPing < ABSOLUTE_GOOD_PING_VALUE ) { retVal + + ; } if ( shortTerm . getAverage ( ) < ABSOLUTE_GOOD_PING_VALUE ) { retVal + + ; } if ( medTerm . getAverage ( ) < ABSOLUTE_GOOD_PING_VALUE ) { retVal + + ; } if ( longTerm . getAverage ( ) < ABSOLUTE_GOOD_PING_VALUE ) { retVal + + ; } / / modify results based on absolute ping values that are too long . int ABSOLUTE_BAD_PING_VALUE = 300 ; if ( currPing > ABSOLUTE_BAD_PING_VALUE ) { retVal - - ; } if ( shortTerm . getAverage ( ) > ABSOLUTE_BAD_PING_VALUE ) { retVal - - ; } if ( medTerm . getAverage ( ) > ABSOLUTE_BAD_PING_VALUE ) { retVal - - ; } if ( longTerm . getAverage ( ) > ABSOLUTE_BAD_PING_VALUE ) { retVal - - ; } return retVal ; }
void test0 ( ) throws Throwable { SMConst . FilteredLimitEstimate sMConst_FilteredLimitEstimate0 = new SMConst . FilteredLimitEstimate ( ( - 496 ) , 0 . 0F , 0 . 0F , ( long ) ( - 496 ) , "% | [ f [ & 7 * Oh :  ! 6lur [ " ) ; sMConst_FilteredLimitEstimate0 . getSegments ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getWhen ( ) ; String getString ( ) ; }
void test1 ( ) throws Throwable { SMConst . FilteredLimitEstimate sMConst_FilteredLimitEstimate0 = new SMConst . FilteredLimitEstimate ( 0 , 0 . 0F , ( - 1 . 0F ) , ( - 789L ) , "" ) ; SMConst . FilteredLimitEstimate sMConst_FilteredLimitEstimate1 = ( SMConst . FilteredLimitEstimate ) SMConst . filterEstimate ( ( SpeedManagerLimitEstimate ) sMConst_FilteredLimitEstimate0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getWhen ( ) ; String getString ( ) ; }
void test2 ( ) throws Throwable { int int0 = SMConst . calculateMinUpload ( 1197 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int calculateMinUpload ( int maxBytesPerSec ) { int min = maxBytesPerSec / 10 ; return checkForMinUploadValue ( min ) ; }
void test3 ( ) throws Throwable { int int0 = SMConst . calculateMinDownload ( ( - 436 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int calculateMinDownload ( int maxBytesPerSec ) { int min = maxBytesPerSec / 10 ; return checkForMinDownloadValue ( min ) ; }
void test4 ( ) throws Throwable { int int0 = SMConst . checkForMinUploadValue ( 20480 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int checkForMinUploadValue ( int rateBytesPerSec ) { if ( rateBytesPerSec < MIN_UPLOAD_BYTES_PER_SEC ) { return MIN_UPLOAD_BYTES_PER_SEC ; } return rateBytesPerSec ; }
void test5 ( ) throws Throwable { int int0 = SMConst . checkForMinDownloadValue ( 20480 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int checkForMinDownloadValue ( int rateBytesPerSec ) { if ( rateBytesPerSec < MIN_DOWNLOAD_BYTES_PER_SEC ) { return MIN_DOWNLOAD_BYTES_PER_SEC ; } return rateBytesPerSec ; }
void test6 ( ) throws Throwable { int int0 = SMConst . filterLimit ( 918 , 918 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int filterLimit ( int bytesPerSec , int startValue ) { int retVal = Math . max ( bytesPerSec , startValue ) ; / / Zero is unlimited . Don't filter that value . if ( bytesPerSec = = 0 ) { return bytesPerSec ; } return retVal ; }
void test0 ( ) throws Throwable { SMUpdate sMUpdate0 = new SMUpdate ( 1965 , true , 1181 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SMUpdate ( int upLimit , boolean newUpLimit , int downLimit , boolean newDownLimit ) { newUploadLimit = upLimit ; newDownloadLimit = downLimit ; hasNewUploadLimit = newUpLimit ; hasNewDownloadLimit = newDownLimit ; }
void test0 ( ) throws Throwable { TransferMode transferMode0 = new TransferMode ( ) ; PingSpaceMonitor pingSpaceMonitor0 = new PingSpaceMonitor ( ( - 61 ) , ( - 61 ) , transferMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNewLimit ( ) { return newLimit ; }
void test1 ( ) throws Throwable { PingSpaceMonitor pingSpaceMonitor0 = new PingSpaceMonitor ( ( - 1 ) , ( - 1 ) , ( TransferMode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int limitType ( ) { return limitType ; }
void test2 ( ) throws Throwable { TransferMode transferMode0 = new TransferMode ( ) ; PingSpaceMonitor pingSpaceMonitor0 = new PingSpaceMonitor ( 61 , 61 , transferMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNewLimit ( ) { return newLimit ; }
void test3 ( ) throws Throwable { TransferMode transferMode0 = new TransferMode ( ) ; PingSpaceMonitor pingSpaceMonitor0 = new PingSpaceMonitor ( ( - 61 ) , ( - 61 ) , transferMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCurrentTransferRates ( int downloadBitPerSec , int uploadBitsPerSec ) { lastDownloadBitsPerSec = downloadBitPerSec ; lastUploadBitsPerSec = uploadBitsPerSec ; }
void test4 ( ) throws Throwable { TransferMode transferMode0 = new TransferMode ( ) ; PingSpaceMonitor pingSpaceMonitor0 = new PingSpaceMonitor ( ( - 61 ) , ( - 61 ) , transferMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNewLimit ( ) { return hasNewLimit ; }
void test5 ( ) throws Throwable { PingSpaceMonitor pingSpaceMonitor0 = new PingSpaceMonitor ( ( - 1 ) , ( - 1 ) , ( TransferMode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean addToPingMapData ( int lastMetricValue , TransferMode mode ) { / / reset if we are changing modes . if ( transferMode = = null ) { transferMode = mode ; } / / reset everything if we change modes . if ( ! transferMode . equals ( mode ) ) { reset ( mode ) ; transferMode = mode ; return false ; } transferMode = mode ; if ( lastMetricValue < maxGoodPing ) { nGoodPings + + ; } else if ( lastMetricValue > minBadPing ) { nBadPings + + ; } else { nNeutralPings + + ; } pingMap . addMetricToMap ( lastMetricValue ) ; / / If the interval is up , we need to either recommend new limits or reset . long curr = SystemTime . getCurrentTime ( ) ; if ( curr > startTime + INTERVAL ) { boolean needLowerLimts = checkForLowerLimits ( ) ; if ( needLowerLimts ) { / / prepare the package for lowering the limit . if ( transferMode . isConfTestingLimits ( ) ) { reset ( mode ) ; return false ; } else if ( transferMode . isDownloadMode ( ) ) { / / recommend a new downloading limit . newLimit = pingMap . guessDownloadLimit ( ) ; SpeedManagerLogger . trace ( "PingSpaceMonitor - > guessDownloadLimit : newLimit = " + newLimit ) ; / / on cable modems uploads can be over - estimated by 3x . int uploadLimitGuess = pingMap . guessUploadLimit ( ) ; SpeedManagerLogger . trace ( "PingSpaceMonitor - > guessUploadLimit : guessUploadLimit = " + uploadLimitGuess ) ; / / download limit cannot be less the 40k if ( newLimit < 40960 ) { newLimit = 40960 ; } hasNewLimit = true ; limitType = DOWNLOAD ; reset ( mode ) ; return true ; } else { / / only seeding mode is left recommend a new upload limit . newLimit = pingMap . guessUploadLimit ( ) ; / / upload limit cannot be less the 20k if ( newLimit < 20480 ) { newLimit = 20480 ; } hasNewLimit = true ; limitType = UPLOAD ; reset ( mode ) ; return true ; } } else { / / No need for lower limits . reset ( mode ) ; } } / / if return false ; }
void test6 ( ) throws Throwable { TransferMode transferMode0 = new TransferMode ( ) ; PingSpaceMonitor pingSpaceMonitor0 = new PingSpaceMonitor ( ( - 61 ) , ( - 61 ) , transferMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean addToPingMapData ( int lastMetricValue , TransferMode mode ) { / / reset if we are changing modes . if ( transferMode = = null ) { transferMode = mode ; } / / reset everything if we change modes . if ( ! transferMode . equals ( mode ) ) { reset ( mode ) ; transferMode = mode ; return false ; } transferMode = mode ; if ( lastMetricValue < maxGoodPing ) { nGoodPings + + ; } else if ( lastMetricValue > minBadPing ) { nBadPings + + ; } else { nNeutralPings + + ; } pingMap . addMetricToMap ( lastMetricValue ) ; / / If the interval is up , we need to either recommend new limits or reset . long curr = SystemTime . getCurrentTime ( ) ; if ( curr > startTime + INTERVAL ) { boolean needLowerLimts = checkForLowerLimits ( ) ; if ( needLowerLimts ) { / / prepare the package for lowering the limit . if ( transferMode . isConfTestingLimits ( ) ) { reset ( mode ) ; return false ; } else if ( transferMode . isDownloadMode ( ) ) { / / recommend a new downloading limit . newLimit = pingMap . guessDownloadLimit ( ) ; SpeedManagerLogger . trace ( "PingSpaceMonitor - > guessDownloadLimit : newLimit = " + newLimit ) ; / / on cable modems uploads can be over - estimated by 3x . int uploadLimitGuess = pingMap . guessUploadLimit ( ) ; SpeedManagerLogger . trace ( "PingSpaceMonitor - > guessUploadLimit : guessUploadLimit = " + uploadLimitGuess ) ; / / download limit cannot be less the 40k if ( newLimit < 40960 ) { newLimit = 40960 ; } hasNewLimit = true ; limitType = DOWNLOAD ; reset ( mode ) ; return true ; } else { / / only seeding mode is left recommend a new upload limit . newLimit = pingMap . guessUploadLimit ( ) ; / / upload limit cannot be less the 20k if ( newLimit < 20480 ) { newLimit = 20480 ; } hasNewLimit = true ; limitType = UPLOAD ; reset ( mode ) ; return true ; } } else { / / No need for lower limits . reset ( mode ) ; } } / / if return false ; }
void test7 ( ) throws Throwable { TransferMode transferMode0 = new TransferMode ( ) ; PingSpaceMonitor pingSpaceMonitor0 = new PingSpaceMonitor ( 61 , 61 , transferMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean addToPingMapData ( int lastMetricValue , TransferMode mode ) { / / reset if we are changing modes . if ( transferMode = = null ) { transferMode = mode ; } / / reset everything if we change modes . if ( ! transferMode . equals ( mode ) ) { reset ( mode ) ; transferMode = mode ; return false ; } transferMode = mode ; if ( lastMetricValue < maxGoodPing ) { nGoodPings + + ; } else if ( lastMetricValue > minBadPing ) { nBadPings + + ; } else { nNeutralPings + + ; } pingMap . addMetricToMap ( lastMetricValue ) ; / / If the interval is up , we need to either recommend new limits or reset . long curr = SystemTime . getCurrentTime ( ) ; if ( curr > startTime + INTERVAL ) { boolean needLowerLimts = checkForLowerLimits ( ) ; if ( needLowerLimts ) { / / prepare the package for lowering the limit . if ( transferMode . isConfTestingLimits ( ) ) { reset ( mode ) ; return false ; } else if ( transferMode . isDownloadMode ( ) ) { / / recommend a new downloading limit . newLimit = pingMap . guessDownloadLimit ( ) ; SpeedManagerLogger . trace ( "PingSpaceMonitor - > guessDownloadLimit : newLimit = " + newLimit ) ; / / on cable modems uploads can be over - estimated by 3x . int uploadLimitGuess = pingMap . guessUploadLimit ( ) ; SpeedManagerLogger . trace ( "PingSpaceMonitor - > guessUploadLimit : guessUploadLimit = " + uploadLimitGuess ) ; / / download limit cannot be less the 40k if ( newLimit < 40960 ) { newLimit = 40960 ; } hasNewLimit = true ; limitType = DOWNLOAD ; reset ( mode ) ; return true ; } else { / / only seeding mode is left recommend a new upload limit . newLimit = pingMap . guessUploadLimit ( ) ; / / upload limit cannot be less the 20k if ( newLimit < 20480 ) { newLimit = 20480 ; } hasNewLimit = true ; limitType = UPLOAD ; reset ( mode ) ; return true ; } } else { / / No need for lower limits . reset ( mode ) ; } } / / if return false ; }
void test0 ( ) throws Throwable { TransferMode transferMode0 = new TransferMode ( ) ; String string0 = transferMode0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDownloadMode ( ) { return ( mode = = State . DOWNLOADING ) ; }
void test1 ( ) throws Throwable { TransferMode transferMode0 = new TransferMode ( ) ; TransferMode . State transferMode_State0 = transferMode0 . getMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDownloadMode ( ) { return ( mode = = State . DOWNLOADING ) ; }
void test2 ( ) throws Throwable { TransferMode transferMode0 = new TransferMode ( ) ; SaturatedMode saturatedMode0 = SaturatedMode . NONE ; transferMode0 . updateStatus ( saturatedMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConfTestingLimits ( ) { return ( mode = = State . DOWNLOAD_LIMIT_SEARCH | | mode = = State . UPLOAD_LIMIT_SEARCH ) ; }
void test3 ( ) throws Throwable { TransferMode transferMode0 = new TransferMode ( ) ; TransferMode . State transferMode_State0 = TransferMode . State . UPLOAD_LIMIT_SEARCH ; SaturatedMode saturatedMode0 = SaturatedMode . MED ; transferMode0 . setMode ( transferMode_State0 ) ; transferMode0 . updateStatus ( saturatedMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test4 ( ) throws Throwable { TransferMode transferMode0 = new TransferMode ( ) ; TransferMode . State transferMode_State0 = TransferMode . State . DOWNLOAD_LIMIT_SEARCH ; transferMode0 . setMode ( transferMode_State0 ) ; SaturatedMode saturatedMode0 = SaturatedMode . MED ; transferMode0 . updateStatus ( saturatedMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDownloadMode ( ) { return ( mode = = State . DOWNLOADING ) ; }
void test5 ( ) throws Throwable { TransferMode transferMode0 = new TransferMode ( ) ; SaturatedMode saturatedMode0 = SaturatedMode . AT_LIMIT ; transferMode0 . updateStatus ( saturatedMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDownloadMode ( ) { return ( mode = = State . DOWNLOADING ) ; }
void test6 ( ) throws Throwable { TransferMode transferMode0 = new TransferMode ( ) ; TransferMode . State transferMode_State0 = TransferMode . State . DOWNLOAD_LIMIT_SEARCH ; transferMode0 . setMode ( transferMode_State0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDownloadMode ( ) { return ( mode = = State . DOWNLOADING ) ; }
void test7 ( ) throws Throwable { TransferMode transferMode0 = new TransferMode ( ) ; boolean boolean0 = transferMode0 . isDownloadMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDownloadMode ( ) { return ( mode = = State . DOWNLOADING ) ; }
void test0 ( ) throws Throwable { PingSpaceMon . DefaultLimitEstimate pingSpaceMon_DefaultLimitEstimate0 = new PingSpaceMon . DefaultLimitEstimate ( ) ; long long0 = pingSpaceMon_DefaultLimitEstimate0 . getWhen ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getWhen ( ) ; String getString ( ) ; }
void test1 ( ) throws Throwable { PingSpaceMon . DefaultLimitEstimate pingSpaceMon_DefaultLimitEstimate0 = new PingSpaceMon . DefaultLimitEstimate ( ) ; String string0 = pingSpaceMon_DefaultLimitEstimate0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test2 ( ) throws Throwable { PingSpaceMon . DefaultLimitEstimate pingSpaceMon_DefaultLimitEstimate0 = new PingSpaceMon . DefaultLimitEstimate ( ) ; float float0 = pingSpaceMon_DefaultLimitEstimate0 . getEstimateType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getEstimateType ( ) ; / * * * For estimated limits : * - 1 = estimate derived from bad metrics * + 1 = estimate derived from good metric * < 1 x > - 1 = relative goodness of metric * @return * / float getMetricRating ( ) ; int [ ] [ ] getSegments ( ) ; long getWhen ( ) ; String getString ( ) ; }
void test3 ( ) throws Throwable { PingSpaceMon . DefaultLimitEstimate pingSpaceMon_DefaultLimitEstimate0 = new PingSpaceMon . DefaultLimitEstimate ( ) ; int [ ] [ ] intArray0 = pingSpaceMon_DefaultLimitEstimate0 . getSegments ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] [ ] getSegments ( ) ; long getWhen ( ) ; String getString ( ) ; }
void test4 ( ) throws Throwable { PingSpaceMon . DefaultLimitEstimate pingSpaceMon_DefaultLimitEstimate0 = new PingSpaceMon . DefaultLimitEstimate ( ) ; float float0 = pingSpaceMon_DefaultLimitEstimate0 . getMetricRating ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMetricRating ( ) ; int [ ] [ ] getSegments ( ) ; long getWhen ( ) ; String getString ( ) ; }
void test5 ( ) throws Throwable { PingSpaceMon . DefaultLimitEstimate pingSpaceMon_DefaultLimitEstimate0 = new PingSpaceMon . DefaultLimitEstimate ( ) ; int int0 = pingSpaceMon_DefaultLimitEstimate0 . getBytesPerSec ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBytesPerSec ( ) ; / * * * One of the above constants * @return * / float getEstimateType ( ) ; / * * * For estimated limits : * - 1 = estimate derived from bad metrics * + 1 = estimate derived from good metric * < 1 x > - 1 = relative goodness of metric * @return * / float getMetricRating ( ) ; int [ ] [ ] getSegments ( ) ; long getWhen ( ) ; String getString ( ) ; }
void test6 ( ) throws Throwable { PingSpaceMon . DefaultLimitEstimate pingSpaceMon_DefaultLimitEstimate0 = ( PingSpaceMon . DefaultLimitEstimate ) PingSpaceMon . getDownloadEstCapacity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getWhen ( ) ; String getString ( ) ; }
void test7 ( ) throws Throwable { PingSpaceMon pingSpaceMon0 = new PingSpaceMon ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeListener ( InitializerListener listener ) ; / * * * * * @since 3 . 0 . 4 . 3 * / void increaseProgress ( ) ; / * * * * @since 3 . 0 . 4 . 3 * / void abortProgress ( ) ; / * * * @param currentTaskString * * @since 3 . 0 . 4 . 3 * / void reportCurrentTask ( String currentTaskString ) ; void reportPercent ( int percent ) ; void initializationComplete ( ) ; / * * * Code that will be executed in the SWT Thread before { @link #run ( ) }
void test8 ( ) throws Throwable { PingSpaceMon . DefaultLimitEstimate pingSpaceMon_DefaultLimitEstimate0 = ( PingSpaceMon . DefaultLimitEstimate ) PingSpaceMon . getUploadLimit ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMetricRating ( ) ; int [ ] [ ] getSegments ( ) ; long getWhen ( ) ; String getString ( ) ; }
void test9 ( ) throws Throwable { PingSpaceMon . DefaultLimitEstimate pingSpaceMon_DefaultLimitEstimate0 = ( PingSpaceMon . DefaultLimitEstimate ) PingSpaceMon . getDownloadLimit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getMetricRating ( ) ; int [ ] [ ] getSegments ( ) ; long getWhen ( ) ; String getString ( ) ; }
void test10 ( ) throws Throwable { PingSpaceMon . DefaultLimitEstimate pingSpaceMon_DefaultLimitEstimate0 = ( PingSpaceMon . DefaultLimitEstimate ) PingSpaceMon . getUploadEstCapacity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getWhen ( ) ; String getString ( ) ; }
void test11 ( ) throws Throwable { PingSpaceMon pingSpaceMon0 = new PingSpaceMon ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addListener ( InitializerListener listener ) ; / * * * Remove listener that gets triggered on progress changes ( tasks , percent ) * * @param listener * * @since 3 . 0 . 1 . 3 * / void removeListener ( InitializerListener listener ) ; / * * * * * @since 3 . 0 . 4 . 3 * / void increaseProgress ( ) ; / * * * * @since 3 . 0 . 4 . 3 * / void abortProgress ( ) ; / * * * @param currentTaskString * * @since 3 . 0 . 4 . 3 * / void reportCurrentTask ( String currentTaskString ) ; void reportPercent ( int percent ) ; void initializationComplete ( ) ; / * * * Code that will be executed in the SWT Thread before { @link #run ( ) }
void test0 ( ) throws Throwable { SpeedManagerLogger speedManagerLogger0 = new SpeedManagerLogger ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { PingSpaceMapper . GridRegion pingSpaceMapper_GridRegion0 = new PingSpaceMapper . GridRegion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PingSpaceMapper ( int _goodPingInMilliSec , int _badPingInMilliSec ) { createNewGrid ( ) ; goodPingInMilliSec = _goodPingInMilliSec ; badPingInMilliSec = _badPingInMilliSec ; }
void test1 ( ) throws Throwable { PingSpaceMapper . Result pingSpaceMapper_Result0 = new PingSpaceMapper . Result ( ) ; pingSpaceMapper_Result0 . checkAndUpdate ( 1599 , 1599 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PingSpaceMapper ( int _goodPingInMilliSec , int _badPingInMilliSec ) { createNewGrid ( ) ; goodPingInMilliSec = _goodPingInMilliSec ; badPingInMilliSec = _badPingInMilliSec ; }
void test2 ( ) throws Throwable { PingSpaceMapper pingSpaceMapper0 = new PingSpaceMapper ( ( - 1620 ) , 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addMetricToMap ( int metric ) { int downIndex = convertBitsPerSec2meshIndex ( lastDownloadBitsPerSec ) ; int upIndex = convertBitsPerSec2meshIndex ( lastUploadBitsPerSec ) ; totalPointsInMap + + ; if ( metric < goodPingInMilliSec ) { gridRegion [ upIndex ] [ downIndex ] . incrementMetricCount ( GridRegion . INDEX_PING_GOOD ) ; } else if ( metric < badPingInMilliSec ) { gridRegion [ upIndex ] [ downIndex ] . incrementMetricCount ( GridRegion . INDEX_PING_NEUTRAL ) ; } else { gridRegion [ upIndex ] [ downIndex ] . incrementMetricCount ( GridRegion . INDEX_PING_BAD ) ; } }
void test3 ( ) throws Throwable { PingSpaceMapper pingSpaceMapper0 = new PingSpaceMapper ( ( - 1620 ) , 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addMetricToMap ( int metric ) { int downIndex = convertBitsPerSec2meshIndex ( lastDownloadBitsPerSec ) ; int upIndex = convertBitsPerSec2meshIndex ( lastUploadBitsPerSec ) ; totalPointsInMap + + ; if ( metric < goodPingInMilliSec ) { gridRegion [ upIndex ] [ downIndex ] . incrementMetricCount ( GridRegion . INDEX_PING_GOOD ) ; } else if ( metric < badPingInMilliSec ) { gridRegion [ upIndex ] [ downIndex ] . incrementMetricCount ( GridRegion . INDEX_PING_NEUTRAL ) ; } else { gridRegion [ upIndex ] [ downIndex ] . incrementMetricCount ( GridRegion . INDEX_PING_BAD ) ; } }
void test4 ( ) throws Throwable { PingSpaceMapper pingSpaceMapper0 = new PingSpaceMapper ( 1171 , ( - 11 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addMetricToMap ( int metric ) { int downIndex = convertBitsPerSec2meshIndex ( lastDownloadBitsPerSec ) ; int upIndex = convertBitsPerSec2meshIndex ( lastUploadBitsPerSec ) ; totalPointsInMap + + ; if ( metric < goodPingInMilliSec ) { gridRegion [ upIndex ] [ downIndex ] . incrementMetricCount ( GridRegion . INDEX_PING_GOOD ) ; } else if ( metric < badPingInMilliSec ) { gridRegion [ upIndex ] [ downIndex ] . incrementMetricCount ( GridRegion . INDEX_PING_NEUTRAL ) ; } else { gridRegion [ upIndex ] [ downIndex ] . incrementMetricCount ( GridRegion . INDEX_PING_BAD ) ; } }
void test5 ( ) throws Throwable { PingSpaceMapper . GridRegion pingSpaceMapper_GridRegion0 = new PingSpaceMapper . GridRegion ( ) ; pingSpaceMapper_GridRegion0 . incrementMetricCount ( ( - 16 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PingSpaceMapper ( int _goodPingInMilliSec , int _badPingInMilliSec ) { createNewGrid ( ) ; goodPingInMilliSec = _goodPingInMilliSec ; badPingInMilliSec = _badPingInMilliSec ; }
void test6 ( ) throws Throwable { PingSpaceMapper . GridRegion pingSpaceMapper_GridRegion0 = new PingSpaceMapper . GridRegion ( ) ; pingSpaceMapper_GridRegion0 . incrementMetricCount ( 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PingSpaceMapper ( int _goodPingInMilliSec , int _badPingInMilliSec ) { createNewGrid ( ) ; goodPingInMilliSec = _goodPingInMilliSec ; badPingInMilliSec = _badPingInMilliSec ; }
void test0 ( ) throws Throwable { SMInstance sMInstance0 = SMInstance . getInstance ( ) ; SpeedManagerAlgorithmProviderAdapter speedManagerAlgorithmProviderAdapter0 = sMInstance0 . getAdapter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SpeedManagerAlgorithmProviderAdapter getAdapter ( ) { return ( adapter ) ; }
void test1 ( ) throws Throwable { SMInstance sMInstance0 = SMInstance . getInstance ( ) ; SMConfigurationAdapterImpl sMConfigurationAdapterImpl0 = ( SMConfigurationAdapterImpl ) sMInstance0 . getConfigManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SMConfigurationAdapter getConfigManager ( ) { return conf ; }
void test0 ( ) throws Throwable { SaturatedMode saturatedMode0 = SaturatedMode . AT_LIMIT ; boolean boolean0 = saturatedMode0 . isGreater ( saturatedMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGreater ( SpeedLimitConfidence limitConf ) { if ( this . compareTo ( limitConf ) > 0 ) { return true ; } return false ; }
void test1 ( ) throws Throwable { SaturatedMode saturatedMode0 = SaturatedMode . HIGH ; String string0 = saturatedMode0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { SaturatedMode saturatedMode0 = SaturatedMode . getSaturatedMode ( ( - 1155 ) , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { SaturatedMode saturatedMode0 = SaturatedMode . getSaturatedMode ( ( - 1638 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { SaturatedMode saturatedMode0 = SaturatedMode . getSaturatedMode ( ( - 1461 ) , ( - 1615 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test5 ( ) throws Throwable { SaturatedMode saturatedMode0 = SaturatedMode . getSaturatedMode ( ( - 1384 ) , ( - 1856 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test6 ( ) throws Throwable { SaturatedMode saturatedMode0 = SaturatedMode . getSaturatedMode ( ( - 83 ) , ( - 1758 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test7 ( ) throws Throwable { SaturatedMode saturatedMode0 = SaturatedMode . AT_LIMIT ; SaturatedMode saturatedMode1 = SaturatedMode . MED ; boolean boolean0 = saturatedMode0 . isGreater ( saturatedMode1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGreater ( SpeedLimitConfidence limitConf ) { if ( this . compareTo ( limitConf ) > 0 ) { return true ; } return false ; }
void test8 ( ) throws Throwable { SaturatedMode saturatedMode0 = SaturatedMode . LOW ; SaturatedMode saturatedMode1 = SaturatedMode . MED ; int int0 = saturatedMode0 . compareTo ( ( Object ) saturatedMode1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( SpeedLimitConfidence limitConf ) { return ( order - limitConf . order ) ; }
void test0 ( ) throws Throwable { LimitControlSetting limitControlSetting0 = new LimitControlSetting ( ( - 1351 . 4377F ) ) ; limitControlSetting0 . adjust ( ( - 1351 . 4377F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( String name , String [ ] params ) { return getValue ( name , params , true ) ; }
void test1 ( ) throws Throwable { LimitControlSetting limitControlSetting0 = new LimitControlSetting ( ( - 1351 . 4377F ) ) ; float float0 = limitControlSetting0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( String name , String [ ] params ) { return getValue ( name , params , true ) ; }
void test1 ( ) throws Throwable { SMConfigurationAdapterImpl sMConfigurationAdapterImpl0 = new SMConfigurationAdapterImpl ( ) ; SMConfigurationAdapterImpl . SMConfigLimitEstimate sMConfigurationAdapterImpl_SMConfigLimitEstimate0 = ( SMConfigurationAdapterImpl . SMConfigLimitEstimate ) sMConfigurationAdapterImpl0 . getDownloadLimit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { SMConfigurationAdapterImpl sMConfigurationAdapterImpl0 = new SMConfigurationAdapterImpl ( ) ; SMConfigurationAdapterImpl . SMConfigLimitEstimate sMConfigurationAdapterImpl_SMConfigLimitEstimate0 = ( SMConfigurationAdapterImpl . SMConfigLimitEstimate ) sMConfigurationAdapterImpl0 . getUploadLimit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test4 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . convertType ( ( float ) 0 ) ; SMConfigurationAdapterImpl . SMConfigLimitEstimate sMConfigurationAdapterImpl_SMConfigLimitEstimate0 = new SMConfigurationAdapterImpl . SMConfigLimitEstimate ( 0 , speedLimitConfidence0 ) ; sMConfigurationAdapterImpl_SMConfigLimitEstimate0 . getSegments ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test5 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . HIGH ; SMConfigurationAdapterImpl . SMConfigLimitEstimate sMConfigurationAdapterImpl_SMConfigLimitEstimate0 = new SMConfigurationAdapterImpl . SMConfigLimitEstimate ( ( - 300 ) , speedLimitConfidence0 ) ; int int0 = sMConfigurationAdapterImpl_SMConfigLimitEstimate0 . getBytesPerSec ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getEstimateType ( ) ; / * * * For estimated limits : * - 1 = estimate derived from bad metrics * + 1 = estimate derived from good metric * < 1 x > - 1 = relative goodness of metric * @return * / float getMetricRating ( ) ; int [ ] [ ] getSegments ( ) ; long getWhen ( ) ; String getString ( ) ; }
void test6 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . HIGH ; SMConfigurationAdapterImpl . SMConfigLimitEstimate sMConfigurationAdapterImpl_SMConfigLimitEstimate0 = new SMConfigurationAdapterImpl . SMConfigLimitEstimate ( 0 , speedLimitConfidence0 ) ; String string0 = sMConfigurationAdapterImpl_SMConfigLimitEstimate0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test7 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . MED ; SMConfigurationAdapterImpl . SMConfigLimitEstimate sMConfigurationAdapterImpl_SMConfigLimitEstimate0 = new SMConfigurationAdapterImpl . SMConfigLimitEstimate ( ( - 543 ) , speedLimitConfidence0 ) ; long long0 = sMConfigurationAdapterImpl_SMConfigLimitEstimate0 . getWhen ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test8 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . ABSOLUTE ; SMConfigurationAdapterImpl . SMConfigLimitEstimate sMConfigurationAdapterImpl_SMConfigLimitEstimate0 = new SMConfigurationAdapterImpl . SMConfigLimitEstimate ( 1 , speedLimitConfidence0 ) ; float float0 = sMConfigurationAdapterImpl_SMConfigLimitEstimate0 . getMetricRating ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test9 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . parseString ( ( String ) null ) ; SMConfigurationAdapterImpl . SMConfigLimitEstimate sMConfigurationAdapterImpl_SMConfigLimitEstimate0 = new SMConfigurationAdapterImpl . SMConfigLimitEstimate ( 1771 , speedLimitConfidence0 ) ; float float0 = sMConfigurationAdapterImpl_SMConfigLimitEstimate0 . getEstimateType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBytesPerSec ( ) ; / * * * One of the above constants * @return * / float getEstimateType ( ) ; / * * * For estimated limits : * - 1 = estimate derived from bad metrics * + 1 = estimate derived from good metric * < 1 x > - 1 = relative goodness of metric * @return * / float getMetricRating ( ) ; int [ ] [ ] getSegments ( ) ; long getWhen ( ) ; String getString ( ) ; }
void test0 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . HIGH ; boolean boolean0 = speedLimitConfidence0 . isGreater ( speedLimitConfidence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGreater ( SpeedLimitConfidence limitConf ) { if ( this . compareTo ( limitConf ) > 0 ) { return true ; } return false ; }
void test1 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . HIGH ; float float0 = speedLimitConfidence0 . asEstimateType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float asEstimateType ( ) { return estimateType ; }
void test2 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . HIGH ; String string0 = speedLimitConfidence0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . HIGH ; String string0 = speedLimitConfidence0 . getInternationalizedString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInternationalizedString ( ) { return MessageText . getString ( MESSAGE_BUNDLE_PREFIX + name . toLowerCase ( ) ) ; }
void test4 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . convertType ( 1 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float asEstimateType ( ) { return estimateType ; }
void test5 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . convertType ( ( - 1 . 0F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInternationalizedString ( ) { return MessageText . getString ( MESSAGE_BUNDLE_PREFIX + name . toLowerCase ( ) ) ; }
void test6 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . convertType ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float asEstimateType ( ) { return estimateType ; }
void test7 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . convertType ( 0 . 5F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float asEstimateType ( ) { return estimateType ; }
void test8 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . convertType ( 0 . 8F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float asEstimateType ( ) { return estimateType ; }
void test9 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . parseString ( "High" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float asEstimateType ( ) { return estimateType ; }
void test10 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . parseString ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInternationalizedString ( ) { return MessageText . getString ( MESSAGE_BUNDLE_PREFIX + name . toLowerCase ( ) ) ; }
void test11 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . parseString ( "none" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test12 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . parseString ( "LOW" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float asEstimateType ( ) { return estimateType ; }
void test13 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . parseString ( "med" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInternationalizedString ( ) { return MessageText . getString ( MESSAGE_BUNDLE_PREFIX + name . toLowerCase ( ) ) ; }
void test14 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . parseString ( "p@d0O%Z + qEY ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInternationalizedString ( ) { return MessageText . getString ( MESSAGE_BUNDLE_PREFIX + name . toLowerCase ( ) ) ; }
void test15 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . parseString ( "Absolute" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInternationalizedString ( ) { return MessageText . getString ( MESSAGE_BUNDLE_PREFIX + name . toLowerCase ( ) ) ; }
void test16 ( ) throws Throwable { String string0 = SpeedLimitConfidence . asEstimateTypeString ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String asEstimateTypeString ( float type ) { / / ToDo : move to proper class . This is to do something now . if ( type = = SpeedManagerLimitEstimate . TYPE_UNKNOWN ) { return "Unknown" ; } else if ( type = = SpeedManagerLimitEstimate . TYPE_ESTIMATED ) { return "Estimate" ; } else if ( type = = SpeedManagerLimitEstimate . TYPE_MANUAL ) { return "Fixed" ; } return "" ; }
void test17 ( ) throws Throwable { String string0 = SpeedLimitConfidence . asEstimateTypeString ( ( - 0 . 1F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String asEstimateTypeString ( float type ) { / / ToDo : move to proper class . This is to do something now . if ( type = = SpeedManagerLimitEstimate . TYPE_UNKNOWN ) { return "Unknown" ; } else if ( type = = SpeedManagerLimitEstimate . TYPE_ESTIMATED ) { return "Estimate" ; } else if ( type = = SpeedManagerLimitEstimate . TYPE_MANUAL ) { return "Fixed" ; } return "" ; }
void test18 ( ) throws Throwable { String string0 = SpeedLimitConfidence . asEstimateTypeString ( 1 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String asEstimateTypeString ( float type ) { / / ToDo : move to proper class . This is to do something now . if ( type = = SpeedManagerLimitEstimate . TYPE_UNKNOWN ) { return "Unknown" ; } else if ( type = = SpeedManagerLimitEstimate . TYPE_ESTIMATED ) { return "Estimate" ; } else if ( type = = SpeedManagerLimitEstimate . TYPE_MANUAL ) { return "Fixed" ; } return "" ; }
void test19 ( ) throws Throwable { String string0 = SpeedLimitConfidence . asEstimateTypeString ( 1725 . 5759F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String asEstimateTypeString ( float type ) { / / ToDo : move to proper class . This is to do something now . if ( type = = SpeedManagerLimitEstimate . TYPE_UNKNOWN ) { return "Unknown" ; } else if ( type = = SpeedManagerLimitEstimate . TYPE_ESTIMATED ) { return "Estimate" ; } else if ( type = = SpeedManagerLimitEstimate . TYPE_MANUAL ) { return "Fixed" ; } return "" ; }
void test20 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . HIGH ; SpeedLimitConfidence speedLimitConfidence1 = SpeedLimitConfidence . LOW ; boolean boolean0 = speedLimitConfidence0 . isGreater ( speedLimitConfidence1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGreater ( SpeedLimitConfidence limitConf ) { if ( this . compareTo ( limitConf ) > 0 ) { return true ; } return false ; }
void test21 ( ) throws Throwable { SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence . convertType ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( SpeedLimitConfidence limitConf ) { return ( order - limitConf . order ) ; }
void test0 ( ) throws Throwable { LimitControlPreferDownload limitControlPreferDownload0 = new LimitControlPreferDownload ( ) ; boolean boolean0 = limitControlPreferDownload0 . isDownloadUnlimitedMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDownloadUnlimitedMode ( ) { return isDownloadUnlimited ; }
void test1 ( ) throws Throwable { LimitControlPreferDownload limitControlPreferDownload0 = new LimitControlPreferDownload ( ) ; limitControlPreferDownload0 . updateSeedSettings ( ( float ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateSeedSettings ( float downloadModeUsed ) { if ( downloadModeUsed < 1 . 0f & & downloadModeUsed > 0 . 1f ) { usedUpMaxDownloadMode = downloadModeUsed ; SpeedManagerLogger . trace ( "LimitControlDropUploadFirst %used upload used while downloading : " + downloadModeUsed ) ; } }
void test2 ( ) throws Throwable { LimitControlPreferDownload limitControlPreferDownload0 = new LimitControlPreferDownload ( ) ; limitControlPreferDownload0 . setDownloadUnlimitedMode ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDownloadUnlimitedMode ( boolean isUnlimited ) { isDownloadUnlimited = isUnlimited ; if ( isUnlimited ) { valueDown = 1 . 0f ; } }
void test3 ( ) throws Throwable { LimitControlPreferDownload limitControlPreferDownload0 = new LimitControlPreferDownload ( ) ; SaturatedMode saturatedMode0 = SaturatedMode . MED ; limitControlPreferDownload0 . updateStatus ( 0 , saturatedMode0 , 0 , saturatedMode0 , ( TransferMode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateStatus ( boolean update_completed ) { int RECORD_EXPIRY = 60 * 60 * 1000 ; int GOOD_EXPIRY = 1 * 1000 ; int BAD_EXPIRY = 5 * 60 * 1000 ; int MAX_IPS_PER_TYPE = 10 ; int MAX_TYPES = 10 ; if ( status = = null ) { return ; } long now_mono = SystemTime . getMonotonousTime ( ) ; if ( update_completed ) { if ( last_image ! = icon_idle & & last_update_count > = last_image_expiry_uc_min ) { if ( now_mono > = last_image_expiry_mono ) { last_image = icon_idle ; status . setImage ( icon_idle ) ; } } } StringBuffer tooltip_text = new StringBuffer ( 256 ) ; tooltip_text . append ( MessageText . getString ( "pairing . ui . icon . tip" ) ) ; long newest_bad_mono = - 1 ; long newest_good_mono = - 1 ; Iterator < Map . Entry < String , RemoteHistory > > it = history_map . entrySet ( ) . iterator ( ) ; String oldest_type = null ; long oldest_type_mono = Long . MAX_VALUE ; int records_added = 0 ; while ( it . hasNext ( ) ) { Map . Entry < String , RemoteHistory > entry = it . next ( ) ; String name = entry . getKey ( ) ; RemoteHistory history = entry . getValue ( ) ; String oldest_ip = null ; long oldest_ip_mono = Long . MAX_VALUE ; Map < String , RemoteHistoryEntry > records = history . getEntries ( ) ; Iterator < Map . Entry < String , RemoteHistoryEntry > > record_it = records . entrySet ( ) . iterator ( ) ; StringBuffer tt_ip_details = new StringBuffer ( 256 ) ; while ( record_it . hasNext ( ) ) { Map . Entry < String , RemoteHistoryEntry > record = record_it . next ( ) ; String ip = record . getKey ( ) ; RemoteHistoryEntry e = record . getValue ( ) ; long e_mono = e . getLastReceivedMono ( ) ; if ( e_mono < oldest_ip_mono ) { oldest_ip_mono = e_mono ; oldest_ip = ip ; } long age = now_mono - e_mono ; if ( age > RECORD_EXPIRY ) { record_it . remove ( ) ; } else { String age_str = TimeFormatter . format ( age / 1000 ) ; tt_ip_details . append ( "\n " ) ; if ( local_addresses . contains ( ip ) ) { tt_ip_details . append ( MessageText . getString ( "DHTView . db . local" ) + " ( " + ip + " ) " ) ; } else { tt_ip_details . append ( ip ) ; } if ( e . wasLastGood ( ) ) { tt_ip_details . append ( " OK" ) ; newest_good_mono = Math . max ( newest_good_mono , e_mono ) ; } else { tt_ip_details . append ( " " + MessageText . getString ( "label . access . denied" ) ) ; newest_bad_mono = Math . max ( newest_bad_mono , e_mono ) ; } tt_ip_details . append ( " - " + age_str + " ago" ) ; } } if ( records . size ( ) = = 0 ) { it . remove ( ) ; } else { if ( oldest_ip_mono < oldest_type_mono ) { oldest_type_mono = oldest_ip_mono ; oldest_type = name ; } if ( records . size ( ) > = MAX_IPS_PER_TYPE ) { records . remove ( oldest_ip ) ; } else { tooltip_text . append ( "\n " + name ) ; tooltip_text . append ( tt_ip_details ) ; records_added + + ; } } } if ( history_map . size ( ) > MAX_TYPES ) { history_map . remove ( oldest_type ) ; } if ( records_added = = 0 ) { tooltip_text . append ( "\n " + MessageText . getString ( "pairing . ui . icon . tip . no . recent" ) ) ; } if ( ! tooltip_text . equals ( last_tooltip_text ) ) { last_tooltip_text = tooltip_text . toString ( ) ; status . setTooltipText ( last_tooltip_text ) ; } Image target_image = null ; long age_newest_bad = now_mono - newest_bad_mono ; if ( newest_bad_mono > = 0 & & age_newest_bad < = BAD_EXPIRY ) { target_image = icon_red ; last_image_expiry_mono = newest_bad_mono + BAD_EXPIRY ; } else { long age_newest_good = now_mono - newest_good_mono ; if ( newest_good_mono > = 0 & & age_newest_good < = GOOD_EXPIRY ) { target_image = icon_green ; last_image_expiry_mono = age_newest_good + GOOD_EXPIRY ; } } if ( target_image ! = null & & target_image ! = last_image ) { last_image = target_image ; last_image_expiry_uc_min = last_update_count + 2 ; status . setImage ( target_image ) ; } }
void test4 ( ) throws Throwable { LimitControlPreferDownload limitControlPreferDownload0 = new LimitControlPreferDownload ( ) ; limitControlPreferDownload0 . updateLimits ( 0 , 0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateLimits ( int _upMax , int _upMin , int _downMax , int _downMin ) { / / verify the limits . if ( _upMax < SMConst . START_UPLOAD_RATE_MAX ) { _upMax = SMConst . START_UPLOAD_RATE_MAX ; } if ( _downMax < SMConst . START_DOWNLOAD_RATE_MAX ) { _downMax = SMConst . START_DOWNLOAD_RATE_MAX ; } if ( _downMax < _upMax ) { _downMax = _upMax ; } _upMin = SMConst . calculateMinUpload ( _upMax ) ; _downMin = SMConst . calculateMinDownload ( _downMax ) ; upMax = _upMax ; upMin = _upMin ; downMax = _downMax ; downMin = _downMin ; }
void test5 ( ) throws Throwable { LimitControlPreferDownload limitControlPreferDownload0 = new LimitControlPreferDownload ( ) ; TransferMode transferMode0 = new TransferMode ( ) ; limitControlPreferDownload0 . mode = ( com . aelitis . azureus . core . speedmanager . impl . v2 . TransferMode ) transferMode0 ; LimitControlSetting limitControlSetting0 = new LimitControlSetting ( 0 . 8F ) ; limitControlPreferDownload0 . setting = ( com . aelitis . azureus . core . speedmanager . impl . v2 . LimitControlSetting ) limitControlSetting0 ; SMUpdate sMUpdate0 = limitControlPreferDownload0 . adjust ( ( - 455 . 4339F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SMUpdate adjust ( float amount ) { boolean increase = true ; if ( amount < 0 . 0f ) { increase = false ; } float factor = amount / 10 . 0f ; int usedUpMax = usedUploadCapacity ( ) ; float gamma = ( float ) usedUpMax / downMax ; if ( increase ) { / / increase download first if ( valueDown < 0 . 99f ) { valueDown = calculateNewValue ( valueDown , factor ) ; } else { / / only increase upload if used . if ( upUsage = = SaturatedMode . AT_LIMIT ) { valueUp = calculateNewValue ( valueUp , gamma * 0 . 5f * factor ) ; } } } else { / / decrease upload first if ( valueUp > 0 . 01f ) { valueUp = calculateNewValue ( valueUp , gamma * factor ) ; } else { valueDown = calculateNewValue ( valueDown , factor ) ; } } return update ( ) ; }
void test6 ( ) throws Throwable { LimitControlPreferDownload limitControlPreferDownload0 = new LimitControlPreferDownload ( ) ; TransferMode transferMode0 = new TransferMode ( ) ; limitControlPreferDownload0 . mode = ( com . aelitis . azureus . core . speedmanager . impl . v2 . TransferMode ) transferMode0 ; LimitControlSetting limitControlSetting0 = new LimitControlSetting ( 0 . 8F ) ; limitControlPreferDownload0 . setting = ( com . aelitis . azureus . core . speedmanager . impl . v2 . LimitControlSetting ) limitControlSetting0 ; SMUpdate sMUpdate0 = limitControlPreferDownload0 . adjust ( 1003 . 28156F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SMUpdate adjust ( float amount ) { boolean increase = true ; if ( amount < 0 . 0f ) { increase = false ; } float factor = amount / 10 . 0f ; int usedUpMax = usedUploadCapacity ( ) ; float gamma = ( float ) usedUpMax / downMax ; if ( increase ) { / / increase download first if ( valueDown < 0 . 99f ) { valueDown = calculateNewValue ( valueDown , factor ) ; } else { / / only increase upload if used . if ( upUsage = = SaturatedMode . AT_LIMIT ) { valueUp = calculateNewValue ( valueUp , gamma * 0 . 5f * factor ) ; } } } else { / / decrease upload first if ( valueUp > 0 . 01f ) { valueUp = calculateNewValue ( valueUp , gamma * factor ) ; } else { valueDown = calculateNewValue ( valueDown , factor ) ; } } return update ( ) ; }
void test0 ( ) throws Throwable { SpeedManagerAlgorithmProviderV3 speedManagerAlgorithmProviderV3_0 = new SpeedManagerAlgorithmProviderV3 ( ( SpeedManagerAlgorithmProviderAdapter ) null ) ; boolean boolean0 = speedManagerAlgorithmProviderV3_0 . getAdjustsDownloadLimits ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAdjustsDownloadLimits ( ) ; void destroy ( ) ; }
void test1 ( ) throws Throwable { SpeedManagerAlgorithmProviderV3 speedManagerAlgorithmProviderV3_0 = new SpeedManagerAlgorithmProviderV3 ( ( SpeedManagerAlgorithmProviderAdapter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdlePingMillis ( ) { return ( provider . getIdlePingMillis ( ) ) ; }
void test2 ( ) throws Throwable { SpeedManagerAlgorithmProviderV3 speedManagerAlgorithmProviderV3_0 = new SpeedManagerAlgorithmProviderV3 ( ( SpeedManagerAlgorithmProviderAdapter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxUploadSpeed ( ) { return ( provider . getMaxUploadSpeed ( ) ) ; }
void test4 ( ) throws Throwable { SpeedManagerAlgorithmProviderV3 speedManagerAlgorithmProviderV3_0 = new SpeedManagerAlgorithmProviderV3 ( ( SpeedManagerAlgorithmProviderAdapter ) null ) ; int int0 = speedManagerAlgorithmProviderV3_0 . getCurrentChokeSpeed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentChokeSpeed ( ) { return ( provider . getCurrentChokeSpeed ( ) ) ; }
void test5 ( ) throws Throwable { SpeedManagerAlgorithmProviderV3 speedManagerAlgorithmProviderV3_0 = new SpeedManagerAlgorithmProviderV3 ( ( SpeedManagerAlgorithmProviderAdapter ) null ) ; int int0 = speedManagerAlgorithmProviderV3_0 . getCurrentPingMillis ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCurrentPingMillis ( ) { return ( provider . getCurrentPingMillis ( ) ) ; }
void test0 ( ) throws Throwable { VuzeCryptoManager vuzeCryptoManager0 = new VuzeCryptoManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VuzeCryptoManager ( ) { crypt_man = CryptoManagerFactory . getSingleton ( ) ; / * crypt_man . addPasswordHandler ( new CryptoManagerPasswordHandler ( ) { boolean error_logged = ! Constants . isCVSVersion ( ) ; int getHandlerType ( ) { return ( HANDLER_TYPE_SYSTEM ) ; } void passwordOK ( int handler_type , passwordDetails details ) { Iterator it = listeners . iterator ( ) ; while ( it . hasNext ( ) ) { ( ( VuzeCryptoListener ) it . next ( ) ) . sessionPasswordCorrect ( ) ; } } passwordDetails getPassword ( int handler_type , int action_type , boolean last_pw_incorrect , String reason ) { if ( last_pw_incorrect ) { Iterator it = listeners . iterator ( ) ; while ( it . hasNext ( ) ) { ( ( VuzeCryptoListener ) it . next ( ) ) . sessionPasswordIncorrect ( ) ; } return ( null ) ; } if ( session_pw ! = null ) { return ( session_pw ) ; } Iterator it = listeners . iterator ( ) ; while ( it . hasNext ( ) ) { try { char [ ] pw = ( ( VuzeCryptoListener ) it . next ( ) ) . getSessionPassword ( reason ) ; session_pw = new passwordDetails ( ) { char [ ] getPassword ( ) { return ( pw ) ; } int getPersistForSeconds ( ) { return ( - 1 ) ; / / session } } ; error_logged = false ; return ( session_pw ) ; } catch ( VuzeCryptoException ve ) { if ( ! error_logged ) { error_logged = true ; Debug . out ( "Listener failed " + ve . toString ( ) + " on " + reason ) ; if ( ve . getCause ( ) ! = null ) { Debug . out ( ve . getCause ( ) ) ; } } } catch ( Throwable e ) { Debug . out ( "Listener failed" , e ) ; } } if ( ! error_logged ) { error_logged = true ; Debug . out ( "VuzeCryptoManager : no listeners returned session key" ) ; } return ( null ) ; } } ) ; / / auto enable buddy plugin and system handler boolean init_done = COConfigurationManager . getBooleanParameter ( "vuze . crypto . manager . initial . login . done" , false ) ; if ( ! init_done ) { AzureusCoreFactory . addCoreRunningListener ( new AzureusCoreRunningListener ( ) { void azureusCoreRunning ( AzureusCore core ) { { initialise ( core ) ; } } } ) ; } * / }
void test1 ( ) throws Throwable { VuzeCryptoManager vuzeCryptoManager0 = VuzeCryptoManager . getSingleton ( ) ; byte [ ] byteArray0 = vuzeCryptoManager0 . getPlatformAZID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getPlatformAZID ( ) { return ( crypt_man . getSecureID ( ) ) ; }
void test1 ( ) throws Throwable { PeerNATTraverser peerNATTraverser0 = PeerNATTraverser . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AzureusCore getSingleton ( ) throws AzureusCoreException { return ( AzureusCoreImpl . getSingleton ( ) ) ; }
void test0 ( ) throws Throwable { BitFlags bitFlags0 = new BitFlags ( 43 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test1 ( ) throws Throwable { boolean [ ] booleanArray0 = new boolean [ 2 ] ; BitFlags bitFlags0 = new BitFlags ( booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setStart ( int i ) { flags [ i ] = true ; nbSet + + ; start = i ; }
void test2 ( ) throws Throwable { BitFlags bitFlags0 = new BitFlags ( 591 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setAll ( ) { start = 0 ; end = flags . length - 1 ; Arrays . fill ( flags , true ) ; nbSet = flags . length ; }
void test3 ( ) throws Throwable { BitFlags bitFlags0 = new BitFlags ( 822 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test4 ( ) throws Throwable { BitFlags bitFlags0 = new BitFlags ( 43 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test5 ( ) throws Throwable { boolean [ ] booleanArray0 = new boolean [ 26 ] ; BitFlags bitFlags0 = new BitFlags ( booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test6 ( ) throws Throwable { boolean [ ] booleanArray0 = new boolean [ 2 ] ; BitFlags bitFlags0 = new BitFlags ( booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test7 ( ) throws Throwable { BitFlags bitFlags0 = new BitFlags ( 43 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test8 ( ) throws Throwable { BitFlags bitFlags0 = new BitFlags ( 591 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test9 ( ) throws Throwable { BitFlags bitFlags0 = new BitFlags ( 822 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test10 ( ) throws Throwable { BitFlags bitFlags0 = new BitFlags ( 43 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test11 ( ) throws Throwable { boolean [ ] booleanArray0 = new boolean [ 2 ] ; booleanArray0 [ 0 ] = true ; BitFlags bitFlags0 = new BitFlags ( booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test12 ( ) throws Throwable { BitFlags bitFlags0 = new BitFlags ( 822 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test13 ( ) throws Throwable { BitFlags bitFlags0 = new BitFlags ( 43 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test14 ( ) throws Throwable { boolean [ ] booleanArray0 = new boolean [ 2 ] ; booleanArray0 [ 0 ] = true ; BitFlags bitFlags0 = new BitFlags ( booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void set ( int i ) { if ( ! flags [ i ] ) { flags [ i ] = true ; nbSet + + ; if ( start > i ) start = i ; if ( end < i ) end = i ; } }
void test15 ( ) throws Throwable { BitFlags bitFlags0 = new BitFlags ( 591 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test16 ( ) throws Throwable { boolean [ ] booleanArray0 = new boolean [ 36 ] ; booleanArray0 [ 0 ] = true ; BitFlags bitFlags0 = new BitFlags ( booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test17 ( ) throws Throwable { boolean [ ] booleanArray0 = new boolean [ 2 ] ; booleanArray0 [ 0 ] = true ; BitFlags bitFlags0 = new BitFlags ( booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BitFlags and ( BitFlags other ) { BitFlags result = new BitFlags ( flags . length ) ; if ( this . nbSet > 0 & & other . nbSet > 0 ) { / / setup outer union bounds int i = this . start > other . start ? this . start : other . start ; int endI = this . end < other . end ? this . end : other . end ; / / find the first common set bit for ( ; i < = endI ; i + + ) { if ( this . flags [ i ] & & other . flags [ i ] ) { result . flags [ i ] = true ; result . nbSet + + ; result . start = i ; break ; } } / / find any remaining common bits for ( ; i < = endI ; i + + ) { if ( this . flags [ i ] & & other . flags [ i ] ) { result . flags [ i ] = true ; result . nbSet + + ; result . end = i ; } } if ( result . end < result . start ) result . end = result . start ; } return result ; }
void test18 ( ) throws Throwable { boolean [ ] booleanArray0 = new boolean [ 2 ] ; booleanArray0 [ 1 ] = true ; BitFlags bitFlags0 = new BitFlags ( booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BitFlags and ( BitFlags other ) { BitFlags result = new BitFlags ( flags . length ) ; if ( this . nbSet > 0 & & other . nbSet > 0 ) { / / setup outer union bounds int i = this . start > other . start ? this . start : other . start ; int endI = this . end < other . end ? this . end : other . end ; / / find the first common set bit for ( ; i < = endI ; i + + ) { if ( this . flags [ i ] & & other . flags [ i ] ) { result . flags [ i ] = true ; result . nbSet + + ; result . start = i ; break ; } } / / find any remaining common bits for ( ; i < = endI ; i + + ) { if ( this . flags [ i ] & & other . flags [ i ] ) { result . flags [ i ] = true ; result . nbSet + + ; result . end = i ; } } if ( result . end < result . start ) result . end = result . start ; } return result ; }
void test19 ( ) throws Throwable { boolean [ ] booleanArray0 = new boolean [ 26 ] ; booleanArray0 [ 0 ] = true ; BitFlags bitFlags0 = new BitFlags ( booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test20 ( ) throws Throwable { boolean [ ] booleanArray0 = new boolean [ 26 ] ; booleanArray0 [ 0 ] = true ; BitFlags bitFlags0 = new BitFlags ( booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BitFlags and ( BitFlags other ) { BitFlags result = new BitFlags ( flags . length ) ; if ( this . nbSet > 0 & & other . nbSet > 0 ) { / / setup outer union bounds int i = this . start > other . start ? this . start : other . start ; int endI = this . end < other . end ? this . end : other . end ; / / find the first common set bit for ( ; i < = endI ; i + + ) { if ( this . flags [ i ] & & other . flags [ i ] ) { result . flags [ i ] = true ; result . nbSet + + ; result . start = i ; break ; } } / / find any remaining common bits for ( ; i < = endI ; i + + ) { if ( this . flags [ i ] & & other . flags [ i ] ) { result . flags [ i ] = true ; result . nbSet + + ; result . end = i ; } } if ( result . end < result . start ) result . end = result . start ; } return result ; }
void test21 ( ) throws Throwable { boolean [ ] booleanArray0 = new boolean [ 26 ] ; booleanArray0 [ 0 ] = true ; BitFlags bitFlags0 = new BitFlags ( booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test22 ( ) throws Throwable { boolean [ ] booleanArray0 = new boolean [ 26 ] ; booleanArray0 [ 0 ] = true ; booleanArray0 [ 6 ] = true ; BitFlags bitFlags0 = new BitFlags ( booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BitFlags and ( BitFlags other ) { BitFlags result = new BitFlags ( flags . length ) ; if ( this . nbSet > 0 & & other . nbSet > 0 ) { / / setup outer union bounds int i = this . start > other . start ? this . start : other . start ; int endI = this . end < other . end ? this . end : other . end ; / / find the first common set bit for ( ; i < = endI ; i + + ) { if ( this . flags [ i ] & & other . flags [ i ] ) { result . flags [ i ] = true ; result . nbSet + + ; result . start = i ; break ; } } / / find any remaining common bits for ( ; i < = endI ; i + + ) { if ( this . flags [ i ] & & other . flags [ i ] ) { result . flags [ i ] = true ; result . nbSet + + ; result . end = i ; } } if ( result . end < result . start ) result . end = result . start ; } return result ; }
void test0 ( ) throws Throwable { PeerItem peerItem0 = new PeerItem ( "" , 0 , ( byte ) ( - 1 ) , ( byte ) ( - 1 ) , ( int ) ( byte ) ( - 1 ) , ( byte ) ( - 1 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCryptoLevel ( ) { return ( NetworkManager . CRYPTO_OVERRIDE_NONE ) ; }
void test1 ( ) throws Throwable { PeerItem peerItem0 = new PeerItem ( "" , 0 , ( byte ) ( - 1 ) , ( byte ) ( - 1 ) , ( int ) ( byte ) ( - 1 ) , ( byte ) ( - 1 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getHandshakeType ( ) { return handshake ; }
void test2 ( ) throws Throwable { PeerItem peerItem0 = new PeerItem ( "" , ( int ) ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , 1629 , ( byte ) 0 , 1629 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUDPPort ( ) { return udp_port & 0xffff ; }
void test3 ( ) throws Throwable { PeerItem peerItem0 = new PeerItem ( "" , 0 , ( byte ) ( - 1 ) , ( byte ) ( - 1 ) , ( int ) ( byte ) ( - 1 ) , ( byte ) ( - 1 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCryptoLevel ( ) { return ( NetworkManager . CRYPTO_OVERRIDE_NONE ) ; }
void test4 ( ) throws Throwable { PeerItem peerItem0 = new PeerItem ( "" , ( int ) ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , 1629 , ( byte ) 0 , 1629 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test5 ( ) throws Throwable { PeerItem peerItem0 = new PeerItem ( ( String ) null , 0 , ( byte ) 6 , ( byte ) 6 , 0 , ( byte ) ( - 1 ) , ( - 921 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test6 ( ) throws Throwable { PeerItem peerItem0 = new PeerItem ( ( String ) null , 0 , ( byte ) 6 , ( byte ) 6 , 0 , ( byte ) ( - 1 ) , ( - 921 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCryptoLevel ( ) { return ( NetworkManager . CRYPTO_OVERRIDE_NONE ) ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 17 ] ; PeerItem peerItem0 = new PeerItem ( byteArray0 , ( byte ) ( - 78 ) , ( byte ) ( - 78 ) , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSource ( ) ; void setSource ( int source ) ; String getReferer ( ) ; float getRankBias ( ) ; void setRankBias ( float bias ) ; void setPreferredDelta ( float delta ) ; float getPreferredWeighting ( ) ; float applyRankBias ( float rank ) ; boolean supportsField ( int field_id ) ; boolean supportsContext ( String context_key ) ; boolean isShareable ( ) ; boolean isAuthenticated ( ) ; / * * * @return one of AUTO_DL constants above * / int getAutoDownloadSupported ( ) ; int getAZVersion ( ) ; void addPotentialAssociation ( String key ) ; Map < String , Object > exportToBencodedMap ( ) throws IOException ; Map < String , Object > exportToBencodedMap ( boolean generic ) throws IOException ; String exportToJSONString ( ) throws IOException ; void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test8 ( ) throws Throwable { PeerItem peerItem0 = new PeerItem ( "" , 0 , ( byte ) ( - 1 ) , ( byte ) ( - 1 ) , ( int ) ( byte ) ( - 1 ) , ( byte ) ( - 1 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getHandshakeType ( ) { return handshake ; }
void test11 ( ) throws Throwable { PeerItem peerItem0 = new PeerItem ( "" , ( int ) ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , 1629 , ( byte ) 0 , 1629 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getHandshakeType ( ) { return handshake ; }
void test12 ( ) throws Throwable { PeerItem peerItem0 = new PeerItem ( ( String ) null , 0 , ( byte ) 6 , ( byte ) 6 , 0 , ( byte ) ( - 1 ) , ( - 921 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUDPPort ( ) { return udp_port & 0xffff ; }
void test13 ( ) throws Throwable { PeerItem peerItem0 = new PeerItem ( "" , ( int ) ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , 1629 , ( byte ) 0 , 1629 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean useCrypto ( ) { return ( crypto_level ! = PeerItemFactory . HANDSHAKE_TYPE_PLAIN ) ; }
void test14 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; PeerItem peerItem0 = new PeerItem ( byteArray0 , ( byte ) 3 , ( byte ) 0 , ( int ) ( byte ) 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPeerSource ( ) { return convertSourceString ( source ) ; }
void test15 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 17 ] ; PeerItem peerItem0 = new PeerItem ( byteArray0 , ( byte ) ( - 78 ) , ( byte ) ( - 78 ) , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddressString ( ) { try { / / see if it's an IPv4 / 6 address ( 4 or 16 bytes ) return InetAddress . getByAddress ( address ) . getHostAddress ( ) ; } catch ( UnknownHostException e ) { / / not a standard IPv4 / 6 address , so just return as full string return new String ( address ) ; } }
void test16 ( ) throws Throwable { PeerItem peerItem0 = new PeerItem ( "" , ( int ) ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , 1629 , ( byte ) 0 , 1629 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPeerSource ( ) { return convertSourceString ( source ) ; }
void test17 ( ) throws Throwable { PeerItem peerItem0 = new PeerItem ( "" , ( int ) ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , 1629 , ( byte ) 0 , 1629 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIP ( ) { return ( getAddressString ( ) ) ; }
void test18 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 28 ] ; PeerItem peerItem0 = new PeerItem ( byteArray0 , ( byte ) 1 , ( byte ) 1 , ( int ) ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTCPPort ( ) { return tcp_port & 0xffff ; }
void test19 ( ) throws Throwable { PeerItem peerItem0 = new PeerItem ( "" , 0 , ( byte ) ( - 1 ) , ( byte ) ( - 1 ) , ( int ) ( byte ) ( - 1 ) , ( byte ) ( - 1 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTCPPort ( ) { return tcp_port & 0xffff ; }
void test20 ( ) throws Throwable { String string0 = PeerItem . convertSourceString ( ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertSourceString ( byte source_id ) { / / we use an int to store the source text string as this class is supposed to be lightweight switch ( source_id ) { case PeerItemFactory . PEER_SOURCE_TRACKER : return PEPeerSource . PS_BT_TRACKER ; case PeerItemFactory . PEER_SOURCE_DHT : return PEPeerSource . PS_DHT ; case PeerItemFactory . PEER_SOURCE_PEER_EXCHANGE : return PEPeerSource . PS_OTHER_PEER ; case PeerItemFactory . PEER_SOURCE_PLUGIN : return PEPeerSource . PS_PLUGIN ; case PeerItemFactory . PEER_SOURCE_INCOMING : return PEPeerSource . PS_INCOMING ; default : return " < unknown > " ; } }
void test21 ( ) throws Throwable { String string0 = PeerItem . convertSourceString ( ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertSourceString ( byte source_id ) { / / we use an int to store the source text string as this class is supposed to be lightweight switch ( source_id ) { case PeerItemFactory . PEER_SOURCE_TRACKER : return PEPeerSource . PS_BT_TRACKER ; case PeerItemFactory . PEER_SOURCE_DHT : return PEPeerSource . PS_DHT ; case PeerItemFactory . PEER_SOURCE_PEER_EXCHANGE : return PEPeerSource . PS_OTHER_PEER ; case PeerItemFactory . PEER_SOURCE_PLUGIN : return PEPeerSource . PS_PLUGIN ; case PeerItemFactory . PEER_SOURCE_INCOMING : return PEPeerSource . PS_INCOMING ; default : return " < unknown > " ; } }
void test22 ( ) throws Throwable { String string0 = PeerItem . convertSourceString ( ( byte ) 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertSourceString ( byte source_id ) { / / we use an int to store the source text string as this class is supposed to be lightweight switch ( source_id ) { case PeerItemFactory . PEER_SOURCE_TRACKER : return PEPeerSource . PS_BT_TRACKER ; case PeerItemFactory . PEER_SOURCE_DHT : return PEPeerSource . PS_DHT ; case PeerItemFactory . PEER_SOURCE_PEER_EXCHANGE : return PEPeerSource . PS_OTHER_PEER ; case PeerItemFactory . PEER_SOURCE_PLUGIN : return PEPeerSource . PS_PLUGIN ; case PeerItemFactory . PEER_SOURCE_INCOMING : return PEPeerSource . PS_INCOMING ; default : return " < unknown > " ; } }
void test23 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; PeerItem peerItem0 = new PeerItem ( byteArray0 , ( byte ) 3 , ( byte ) 0 , ( int ) ( byte ) 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddressString ( ) { try { / / see if it's an IPv4 / 6 address ( 4 or 16 bytes ) return InetAddress . getByAddress ( address ) . getHostAddress ( ) ; } catch ( UnknownHostException e ) { / / not a standard IPv4 / 6 address , so just return as full string return new String ( address ) ; } }
void test24 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 17 ] ; PeerItem peerItem0 = new PeerItem ( byteArray0 , ( byte ) 4 , ( byte ) ( - 78 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTCPPort ( ) { return tcp_port & 0xffff ; }
void test25 ( ) throws Throwable { byte byte0 = PeerItem . convertSourceID ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte convertSourceID ( String source ) { if ( source . equals ( PEPeerSource . PS_BT_TRACKER ) ) return PeerItemFactory . PEER_SOURCE_TRACKER ; if ( source . equals ( PEPeerSource . PS_DHT ) ) return PeerItemFactory . PEER_SOURCE_DHT ; if ( source . equals ( PEPeerSource . PS_OTHER_PEER ) ) return PeerItemFactory . PEER_SOURCE_PEER_EXCHANGE ; if ( source . equals ( PEPeerSource . PS_PLUGIN ) ) return PeerItemFactory . PEER_SOURCE_PLUGIN ; if ( source . equals ( PEPeerSource . PS_INCOMING ) ) return PeerItemFactory . PEER_SOURCE_INCOMING ; return - 1 ; }
void test26 ( ) throws Throwable { byte byte0 = PeerItem . convertSourceID ( "Tracker" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte convertSourceID ( String source ) { if ( source . equals ( PEPeerSource . PS_BT_TRACKER ) ) return PeerItemFactory . PEER_SOURCE_TRACKER ; if ( source . equals ( PEPeerSource . PS_DHT ) ) return PeerItemFactory . PEER_SOURCE_DHT ; if ( source . equals ( PEPeerSource . PS_OTHER_PEER ) ) return PeerItemFactory . PEER_SOURCE_PEER_EXCHANGE ; if ( source . equals ( PEPeerSource . PS_PLUGIN ) ) return PeerItemFactory . PEER_SOURCE_PLUGIN ; if ( source . equals ( PEPeerSource . PS_INCOMING ) ) return PeerItemFactory . PEER_SOURCE_INCOMING ; return - 1 ; }
void test27 ( ) throws Throwable { byte byte0 = PeerItem . convertSourceID ( "DHT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte convertSourceID ( String source ) { if ( source . equals ( PEPeerSource . PS_BT_TRACKER ) ) return PeerItemFactory . PEER_SOURCE_TRACKER ; if ( source . equals ( PEPeerSource . PS_DHT ) ) return PeerItemFactory . PEER_SOURCE_DHT ; if ( source . equals ( PEPeerSource . PS_OTHER_PEER ) ) return PeerItemFactory . PEER_SOURCE_PEER_EXCHANGE ; if ( source . equals ( PEPeerSource . PS_PLUGIN ) ) return PeerItemFactory . PEER_SOURCE_PLUGIN ; if ( source . equals ( PEPeerSource . PS_INCOMING ) ) return PeerItemFactory . PEER_SOURCE_INCOMING ; return - 1 ; }
void test28 ( ) throws Throwable { byte byte0 = PeerItem . convertSourceID ( "PeerExchange" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte convertSourceID ( String source ) { if ( source . equals ( PEPeerSource . PS_BT_TRACKER ) ) return PeerItemFactory . PEER_SOURCE_TRACKER ; if ( source . equals ( PEPeerSource . PS_DHT ) ) return PeerItemFactory . PEER_SOURCE_DHT ; if ( source . equals ( PEPeerSource . PS_OTHER_PEER ) ) return PeerItemFactory . PEER_SOURCE_PEER_EXCHANGE ; if ( source . equals ( PEPeerSource . PS_PLUGIN ) ) return PeerItemFactory . PEER_SOURCE_PLUGIN ; if ( source . equals ( PEPeerSource . PS_INCOMING ) ) return PeerItemFactory . PEER_SOURCE_INCOMING ; return - 1 ; }
void test29 ( ) throws Throwable { byte byte0 = PeerItem . convertSourceID ( "Plugin" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte convertSourceID ( String source ) { if ( source . equals ( PEPeerSource . PS_BT_TRACKER ) ) return PeerItemFactory . PEER_SOURCE_TRACKER ; if ( source . equals ( PEPeerSource . PS_DHT ) ) return PeerItemFactory . PEER_SOURCE_DHT ; if ( source . equals ( PEPeerSource . PS_OTHER_PEER ) ) return PeerItemFactory . PEER_SOURCE_PEER_EXCHANGE ; if ( source . equals ( PEPeerSource . PS_PLUGIN ) ) return PeerItemFactory . PEER_SOURCE_PLUGIN ; if ( source . equals ( PEPeerSource . PS_INCOMING ) ) return PeerItemFactory . PEER_SOURCE_INCOMING ; return - 1 ; }
void test30 ( ) throws Throwable { byte byte0 = PeerItem . convertSourceID ( "Incoming" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte convertSourceID ( String source ) { if ( source . equals ( PEPeerSource . PS_BT_TRACKER ) ) return PeerItemFactory . PEER_SOURCE_TRACKER ; if ( source . equals ( PEPeerSource . PS_DHT ) ) return PeerItemFactory . PEER_SOURCE_DHT ; if ( source . equals ( PEPeerSource . PS_OTHER_PEER ) ) return PeerItemFactory . PEER_SOURCE_PEER_EXCHANGE ; if ( source . equals ( PEPeerSource . PS_PLUGIN ) ) return PeerItemFactory . PEER_SOURCE_PLUGIN ; if ( source . equals ( PEPeerSource . PS_INCOMING ) ) return PeerItemFactory . PEER_SOURCE_INCOMING ; return - 1 ; }
void test31 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 28 ] ; PeerItem peerItem0 = new PeerItem ( byteArray0 , ( byte ) 6 , ( byte ) 0 , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTCPPort ( ) { return tcp_port & 0xffff ; }
void test32 ( ) throws Throwable { PeerItem peerItem0 = new PeerItem ( "" , 0 , ( byte ) ( - 1 ) , ( byte ) ( - 1 ) , ( int ) ( byte ) ( - 1 ) , ( byte ) ( - 1 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getHandshakeType ( ) { return handshake ; }
void test0 ( ) throws Throwable { PeerExchangerItem peerExchangerItem0 = new PeerExchangerItem ( ( PeerDatabase ) null , ( PeerItem ) null , ( PeerExchangerItem . Helper ) null ) ; PeerItem peerItem0 = peerExchangerItem0 . getBasePeer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PeerItem getBasePeer ( ) { return base_peer ; }
void test1 ( ) throws Throwable { PeerExchangerItem peerExchangerItem0 = new PeerExchangerItem ( ( PeerDatabase ) null , ( PeerItem ) null , ( PeerExchangerItem . Helper ) null ) ; PeerItem [ ] peerItemArray0 = peerExchangerItem0 . getConnectedPeers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PeerItem [ ] getConnectedPeers ( ) { try { peers_mon . enter ( ) ; PeerItem [ ] peers = new PeerItem [ connected_peers . size ( ) ] ; connected_peers . keySet ( ) . toArray ( peers ) ; return peers ; } finally { peers_mon . exit ( ) ; } }
void test2 ( ) throws Throwable { PeerExchangerItem peerExchangerItem0 = new PeerExchangerItem ( ( PeerDatabase ) null , ( PeerItem ) null , ( PeerExchangerItem . Helper ) null ) ; PeerExchangerItem . Helper peerExchangerItem_Helper0 = peerExchangerItem0 . getHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TransportHelper getHelper ( ) { return ( transport ) ; }
void test3 ( ) throws Throwable { PeerExchangerItem peerExchangerItem0 = new PeerExchangerItem ( ( PeerDatabase ) null , ( PeerItem ) null , ( PeerExchangerItem . Helper ) null ) ; boolean boolean0 = peerExchangerItem0 . isConnectedToPeer ( ( PeerItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnectedToPeer ( PeerItem peer ) { try { peers_mon . enter ( ) ; return connected_peers . containsKey ( peer ) ; } finally { peers_mon . exit ( ) ; } }
void test15 ( ) throws Throwable { PeerExchangerItem peerExchangerItem0 = new PeerExchangerItem ( ( PeerDatabase ) null , ( PeerItem ) null , ( PeerExchangerItem . Helper ) null ) ; peerExchangerItem0 . notifyAdded ( ( PeerItem ) null ) ; PeerItem [ ] peerItemArray0 = peerExchangerItem0 . getNewlyAddedPeerConnections ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PeerItem [ ] getNewlyAddedPeerConnections ( ) { try { peers_mon . enter ( ) ; if ( connections_added . isEmpty ( ) ) return null ; int num_to_send = connections_added . size ( ) > MAX_PEERS_PER_VOLLEY ? MAX_PEERS_PER_VOLLEY : connections_added . size ( ) ; PeerItem [ ] peers = new PeerItem [ num_to_send ] ; Iterator < PeerItem > it = connections_added . iterator ( ) ; for ( int i = 0 ; i < num_to_send ; i + + ) { peers [ i ] = it . next ( ) ; it . remove ( ) ; } return peers ; } finally { peers_mon . exit ( ) ; } }
void test16 ( ) throws Throwable { PeerExchangerItem peerExchangerItem0 = new PeerExchangerItem ( ( PeerDatabase ) null , ( PeerItem ) null , ( PeerExchangerItem . Helper ) null ) ; PeerItem [ ] peerItemArray0 = peerExchangerItem0 . getNewlyAddedPeerConnections ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PeerItem [ ] getNewlyAddedPeerConnections ( ) { try { peers_mon . enter ( ) ; if ( connections_added . isEmpty ( ) ) return null ; int num_to_send = connections_added . size ( ) > MAX_PEERS_PER_VOLLEY ? MAX_PEERS_PER_VOLLEY : connections_added . size ( ) ; PeerItem [ ] peers = new PeerItem [ num_to_send ] ; Iterator < PeerItem > it = connections_added . iterator ( ) ; for ( int i = 0 ; i < num_to_send ; i + + ) { peers [ i ] = it . next ( ) ; it . remove ( ) ; } return peers ; } finally { peers_mon . exit ( ) ; } }
void test17 ( ) throws Throwable { PeerExchangerItem peerExchangerItem0 = new PeerExchangerItem ( ( PeerDatabase ) null , ( PeerItem ) null , ( PeerExchangerItem . Helper ) null ) ; peerExchangerItem0 . notifyDropped ( ( PeerItem ) null ) ; PeerItem [ ] peerItemArray0 = peerExchangerItem0 . getNewlyDroppedPeerConnections ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PeerItem [ ] getNewlyDroppedPeerConnections ( ) { try { peers_mon . enter ( ) ; if ( connections_dropped . isEmpty ( ) ) return null ; int num_to_send = connections_dropped . size ( ) > MAX_PEERS_PER_VOLLEY ? MAX_PEERS_PER_VOLLEY : connections_dropped . size ( ) ; PeerItem [ ] peers = new PeerItem [ num_to_send ] ; Iterator < PeerItem > it = connections_dropped . iterator ( ) ; for ( int i = 0 ; i < num_to_send ; i + + ) { peers [ i ] = it . next ( ) ; it . remove ( ) ; } return peers ; } finally { peers_mon . exit ( ) ; } }
void test18 ( ) throws Throwable { PeerExchangerItem peerExchangerItem0 = new PeerExchangerItem ( ( PeerDatabase ) null , ( PeerItem ) null , ( PeerExchangerItem . Helper ) null ) ; PeerItem [ ] peerItemArray0 = peerExchangerItem0 . getNewlyDroppedPeerConnections ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PeerItem [ ] getNewlyDroppedPeerConnections ( ) { try { peers_mon . enter ( ) ; if ( connections_dropped . isEmpty ( ) ) return null ; int num_to_send = connections_dropped . size ( ) > MAX_PEERS_PER_VOLLEY ? MAX_PEERS_PER_VOLLEY : connections_dropped . size ( ) ; PeerItem [ ] peers = new PeerItem [ num_to_send ] ; Iterator < PeerItem > it = connections_dropped . iterator ( ) ; for ( int i = 0 ; i < num_to_send ; i + + ) { peers [ i ] = it . next ( ) ; it . remove ( ) ; } return peers ; } finally { peers_mon . exit ( ) ; } }
void test0 ( ) throws Throwable { PeerDatabase peerDatabase0 = new PeerDatabase ( ) ; PeerExchangerItem peerExchangerItem0 = peerDatabase0 . registerPeerConnection ( ( PeerItem ) null , ( PeerExchangerItem . Helper ) null ) ; peerExchangerItem0 . addConnectedPeer ( ( PeerItem ) null ) ; peerDatabase0 . getNextOptimisticConnectPeer ( ) ; peerDatabase0 . getNextOptimisticConnectPeer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExchangedPeersUsed ( ) { return ( pex_used_count ) ; }
void test1 ( ) throws Throwable { PeerDatabase peerDatabase0 = new PeerDatabase ( ) ; int int0 = peerDatabase0 . getDiscoveredPeerCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDiscoveredPeerCount ( ) { try { map_mon . enter ( ) ; return ( discovered_peers . size ( ) ) ; } finally { map_mon . exit ( ) ; } }
void test2 ( ) throws Throwable { PeerDatabase peerDatabase0 = new PeerDatabase ( ) ; PeerItem peerItem0 = peerDatabase0 . getSelfPeer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PeerItem getSelfPeer ( ) { / * / / disabled for now , as getExternalIpAddress ( ) will potential run a full version check every 60s if ( self_peer = = null ) { / / determine our 'self' info from config String ip = VersionCheckClient . getSingleton ( ) . getExternalIpAddress ( ) ; if ( ip ! = null & & ip . length ( ) > 0 ) { self_peer = PeerItemFactory . createPeerItem ( ip , NetworkManager . getSingleton ( ) . getTCPListeningPortNumber ( ) , 0 ) ; } } * / return self_peer ; }
void test3 ( ) throws Throwable { PeerDatabase peerDatabase0 = new PeerDatabase ( ) ; String string0 = peerDatabase0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test4 ( ) throws Throwable { PeerDatabase peerDatabase0 = new PeerDatabase ( ) ; PeerItem [ ] peerItemArray0 = peerDatabase0 . getDiscoveredPeers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PeerItem [ ] getDiscoveredPeers ( ) { try { map_mon . enter ( ) ; return ( ( PeerItem [ ] ) discovered_peers . toArray ( new PeerItem [ discovered_peers . size ( ) ] ) ) ; } finally { map_mon . exit ( ) ; } }
void test5 ( ) throws Throwable { PeerDatabase peerDatabase0 = new PeerDatabase ( ) ; int int0 = peerDatabase0 . getExchangedPeersUsed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExchangedPeersUsed ( ) { return ( pex_used_count ) ; }
void test6 ( ) throws Throwable { PeerDatabase peerDatabase0 = new PeerDatabase ( ) ; peerDatabase0 . setSelfPeer ( ( PeerItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test8 ( ) throws Throwable { PeerDatabase peerDatabase0 = new PeerDatabase ( ) ; peerDatabase0 . deregisterPeerConnection ( ( PeerItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test9 ( ) throws Throwable { PeerDatabase peerDatabase0 = new PeerDatabase ( ) ; peerDatabase0 . addDiscoveredPeer ( ( PeerItem ) null ) ; peerDatabase0 . addDiscoveredPeer ( ( PeerItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test10 ( ) throws Throwable { PeerDatabase peerDatabase0 = new PeerDatabase ( ) ; peerDatabase0 . registerPeerConnection ( ( PeerItem ) null , ( PeerExchangerItem . Helper ) null ) ; peerDatabase0 . addDiscoveredPeer ( ( PeerItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDiscoveredPeerCount ( ) { try { map_mon . enter ( ) ; return ( discovered_peers . size ( ) ) ; } finally { map_mon . exit ( ) ; } }
void test11 ( ) throws Throwable { PeerDatabase peerDatabase0 = new PeerDatabase ( ) ; PeerExchangerItem peerExchangerItem0 = peerDatabase0 . registerPeerConnection ( ( PeerItem ) null , ( PeerExchangerItem . Helper ) null ) ; peerExchangerItem0 . addConnectedPeer ( ( PeerItem ) null ) ; peerDatabase0 . addDiscoveredPeer ( ( PeerItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDiscoveredPeerCount ( ) { try { map_mon . enter ( ) ; return ( discovered_peers . size ( ) ) ; } finally { map_mon . exit ( ) ; } }
void test12 ( ) throws Throwable { PeerDatabase peerDatabase0 = new PeerDatabase ( ) ; PeerItem [ ] peerItemArray0 = peerDatabase0 . getDiscoveredPeers ( "m" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PeerItem [ ] getDiscoveredPeers ( ) { try { map_mon . enter ( ) ; return ( ( PeerItem [ ] ) discovered_peers . toArray ( new PeerItem [ discovered_peers . size ( ) ] ) ) ; } finally { map_mon . exit ( ) ; } }
void test14 ( ) throws Throwable { PeerDatabase peerDatabase0 = new PeerDatabase ( ) ; peerDatabase0 . addDiscoveredPeer ( ( PeerItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test15 ( ) throws Throwable { PeerDatabase peerDatabase0 = new PeerDatabase ( ) ; int int0 = peerDatabase0 . getExchangedPeerCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExchangedPeerCount ( ) { long now = SystemTime . getMonotonousTime ( ) ; if ( now - pex_count_last_time > = 10 * 1000 ) { PeerItem [ ] peers = getExchangedPeersSortedByLeastPopularFirst ( ) ; pex_count_last = peers = = null ? 0 : peers . length ; pex_count_last_time = now ; } return ( Math . max ( 0 , pex_count_last - popularity_pos ) ) ; }
void test0 ( ) throws Throwable { PeerItemFactory peerItemFactory0 = new PeerItemFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; PeerItem peerItem0 = PeerItemFactory . createPeerItem ( byteArray0 , ( byte ) 0 , ( byte ) ( - 1 ) , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getHandshakeType ( ) { return handshake ; }
void test2 ( ) throws Throwable { PeerItem peerItem0 = PeerItemFactory . createPeerItem ( ( String ) null , 255 , ( byte ) 0 , ( byte ) 0 , ( int ) ( byte ) 0 , ( byte ) 111 , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getHandshakeType ( ) { return handshake ; }
void test1 ( ) throws Throwable { MessagingUtil messagingUtil0 = new MessagingUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { MessageManager messageManager0 = MessageManager . getSingleton ( ) ; byte [ ] byteArray0 = new byte [ 9 ] ; Message message0 = messageManager0 . lookupMessage ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Message lookupMessage ( String id ) { return ( Message ) message_map . get ( id . getBytes ( ) ) ; }
void test2 ( ) throws Throwable { MessageManager messageManager0 = MessageManager . getSingleton ( ) ; Message message0 = messageManager0 . lookupMessage ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Message lookupMessage ( String id ) { return ( Message ) message_map . get ( id . getBytes ( ) ) ; }
void test3 ( ) throws Throwable { MessageManager messageManager0 = MessageManager . getSingleton ( ) ; Message [ ] messageArray0 = messageManager0 . getRegisteredMessages ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Message [ ] getRegisteredMessages ( ) { return ( Message [ ] ) messages . toArray ( new Message [ messages . size ( ) ] ) ; }
void test0 ( ) throws Throwable { Message [ ] messageArray0 = new Message [ 1 ] ; AZMessageFactory . LegacyData aZMessageFactory_LegacyData0 = new AZMessageFactory . LegacyData ( 0 , false , messageArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { AZMessageFactory aZMessageFactory0 = new AZMessageFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test5 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) 0 ) ; RawMessageImpl rawMessageImpl0 = ( RawMessageImpl ) AZMessageFactory . createAZRawMessage ( ( Message ) bTKeepAlive0 , ( - 572 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFeatureID ( ) { return message . getFeatureID ( ) ; }
void test6 ( ) throws Throwable { BTHaveAll bTHaveAll0 = new BTHaveAll ( ( byte ) 3 ) ; RawMessageImpl rawMessageImpl0 = ( RawMessageImpl ) AZMessageFactory . createAZRawMessage ( ( Message ) bTHaveAll0 , ( int ) ( byte ) 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test7 ( ) throws Throwable { int [ ] intArray0 = new int [ 5 ] ; AZHave aZHave0 = new AZHave ( intArray0 , ( byte ) 98 ) ; RawMessageImpl rawMessageImpl0 = ( RawMessageImpl ) AZMessageFactory . createAZRawMessage ( ( Message ) aZHave0 , 1113 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test0 ( ) throws Throwable { AZStatReply aZStatReply0 = new AZStatReply ( ( Map ) null , ( byte ) 3 ) ; int int0 = aZStatReply0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test1 ( ) throws Throwable { HashMap < String , Map < String , Integer > > hashMap0 = new HashMap < String , Map < String , Integer > > ( ) ; AZStatReply aZStatReply0 = new AZStatReply ( ( Map ) hashMap0 , ( byte ) 18 ) ; String string0 = aZStatReply0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { AZStatReply aZStatReply0 = new AZStatReply ( ( Map ) null , ( byte ) 25 ) ; byte byte0 = aZStatReply0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { AZStatReply aZStatReply0 = new AZStatReply ( ( Map ) null , ( byte ) 3 ) ; byte [ ] byteArray0 = aZStatReply0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { AZStatReply aZStatReply0 = new AZStatReply ( ( Map ) null , ( byte ) 25 ) ; String string0 = aZStatReply0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test5 ( ) throws Throwable { AZStatReply aZStatReply0 = new AZStatReply ( ( Map ) null , ( byte ) 25 ) ; aZStatReply0 . getReply ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test6 ( ) throws Throwable { AZStatReply aZStatReply0 = new AZStatReply ( ( Map ) null , ( byte ) 3 ) ; int int0 = aZStatReply0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test8 ( ) throws Throwable { AZStatReply aZStatReply0 = new AZStatReply ( ( Map ) null , ( byte ) 3 ) ; DirectByteBuffer [ ] directByteBufferArray0 = aZStatReply0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test9 ( ) throws Throwable { AZStatReply aZStatReply0 = new AZStatReply ( ( Map ) null , ( byte ) 25 ) ; aZStatReply0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test10 ( ) throws Throwable { HashMap < String , Map < String , Integer > > hashMap0 = new HashMap < String , Map < String , Integer > > ( ) ; AZStatReply aZStatReply0 = new AZStatReply ( ( Map ) hashMap0 , ( byte ) 18 ) ; DirectByteBuffer [ ] directByteBufferArray0 = aZStatReply0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { AZMessageEncoder aZMessageEncoder0 = new AZMessageEncoder ( 0 ) ; AZRequestHint aZRequestHint0 = new AZRequestHint ( 0 , 1690 , 0 , 215 , ( byte ) 89 ) ; RawMessage [ ] rawMessageArray0 = aZMessageEncoder0 . encodeMessage ( ( Message ) aZRequestHint0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RawMessage [ ] encodeMessage ( Message message ) { String id = message . getID ( ) ; / / System . out . println ( "encodeMessage : " + message . getID ( ) ) ; RawMessage raw_message = null ; if ( id . equals ( BTMessage . ID_BT_HANDSHAKE ) ) { raw_message = http_connection . encodeHandShake ( message ) ; } else if ( id . equals ( BTMessage . ID_BT_CHOKE ) ) { raw_message = http_connection . encodeChoke ( ) ; } else if ( id . equals ( BTMessage . ID_BT_UNCHOKE ) ) { raw_message = http_connection . encodeUnchoke ( ) ; } else if ( id . equals ( BTMessage . ID_BT_BITFIELD ) ) { raw_message = http_connection . encodeBitField ( ) ; } else if ( id . equals ( BTMessage . ID_BT_PIECE ) ) { return ( http_connection . encodePiece ( message ) ) ; } else if ( id . equals ( HTTPMessage . MSG_ID ) ) { raw_message = ( ( HTTPMessage ) message ) . encode ( message ) ; } if ( raw_message = = null ) { raw_message = http_connection . getEmptyRawMessage ( message ) ; } return ( new RawMessage [ ] { raw_message } ) ; }
void test0 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 117 ) , ( byte ) ( - 63 ) ) ; String string0 = aZRequestHint0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test1 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( ( - 356 ) , ( - 356 ) , 9 , ( - 356 ) , ( byte ) 0 ) ; byte [ ] byteArray0 = aZRequestHint0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test2 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 117 ) , ( byte ) ( - 63 ) ) ; int int0 = aZRequestHint0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test3 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( 15 , ( - 405 ) , 1527 , 15 , ( byte ) 1 ) ; int int0 = aZRequestHint0 . getLife ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test5 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( 15 , ( - 405 ) , 1527 , 15 , ( byte ) 1 ) ; int int0 = aZRequestHint0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test6 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( 1983 , 0 , 0 , 0 , ( byte ) 115 ) ; String string0 = aZRequestHint0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test7 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( 15 , ( - 405 ) , 1527 , 15 , ( byte ) 1 ) ; byte byte0 = aZRequestHint0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test8 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( ( - 1838 ) , ( int ) ( byte ) ( - 82 ) , 1 , 64 , ( byte ) ( - 82 ) ) ; int int0 = aZRequestHint0 . getOffset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test9 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( ( - 356 ) , ( - 356 ) , 9 , ( - 356 ) , ( byte ) 0 ) ; int int0 = aZRequestHint0 . getPieceNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test10 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( ( - 302 ) , ( - 302 ) , ( - 302 ) , 190 , ( byte ) ( - 111 ) ) ; int int0 = aZRequestHint0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test11 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( 1983 , 0 , 0 , 0 , ( byte ) 115 ) ; DirectByteBuffer [ ] directByteBufferArray0 = aZRequestHint0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test12 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( ( - 1838 ) , ( int ) ( byte ) ( - 82 ) , 1 , 64 , ( byte ) ( - 82 ) ) ; aZRequestHint0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return ( file . getLength ( ) ) ; }
void test13 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( 1983 , 0 , 0 , 0 , ( byte ) 115 ) ; DirectByteBuffer [ ] directByteBufferArray0 = aZRequestHint0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test1 ( ) throws Throwable { AZBadPiece aZBadPiece0 = new AZBadPiece ( 1 , ( byte ) 1 ) ; int int0 = aZBadPiece0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test2 ( ) throws Throwable { AZBadPiece aZBadPiece0 = new AZBadPiece ( 0 , ( byte ) 42 ) ; byte [ ] byteArray0 = aZBadPiece0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceNumber ( ) { return ( piece_number ) ; }
void test3 ( ) throws Throwable { AZBadPiece aZBadPiece0 = new AZBadPiece ( ( - 1097 ) , ( byte ) 31 ) ; String string0 = aZBadPiece0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { AZBadPiece aZBadPiece0 = new AZBadPiece ( ( - 1097 ) , ( byte ) 31 ) ; int int0 = aZBadPiece0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceNumber ( ) { return ( piece_number ) ; }
void test5 ( ) throws Throwable { AZBadPiece aZBadPiece0 = new AZBadPiece ( 1 , ( byte ) 1 ) ; int int0 = aZBadPiece0 . getPieceNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test6 ( ) throws Throwable { AZBadPiece aZBadPiece0 = new AZBadPiece ( ( - 1097 ) , ( byte ) 31 ) ; String string0 = aZBadPiece0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test7 ( ) throws Throwable { AZBadPiece aZBadPiece0 = new AZBadPiece ( 0 , ( byte ) 42 ) ; byte byte0 = aZBadPiece0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceNumber ( ) { return ( piece_number ) ; }
void test8 ( ) throws Throwable { AZBadPiece aZBadPiece0 = new AZBadPiece ( 596 , ( byte ) 14 ) ; DirectByteBuffer [ ] directByteBufferArray0 = aZBadPiece0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test9 ( ) throws Throwable { AZBadPiece aZBadPiece0 = new AZBadPiece ( 1 , ( byte ) 1 ) ; aZBadPiece0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceNumber ( ) { return ( piece_number ) ; }
void test10 ( ) throws Throwable { AZBadPiece aZBadPiece0 = new AZBadPiece ( 0 , ( byte ) 42 ) ; DirectByteBuffer [ ] directByteBufferArray0 = aZBadPiece0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { AZStatRequest aZStatRequest0 = new AZStatRequest ( ( Map ) null , ( byte ) 25 ) ; byte byte0 = aZStatRequest0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test1 ( ) throws Throwable { HashMap < String , Map < String , Integer > > hashMap0 = new HashMap < String , Map < String , Integer > > ( ) ; AZStatRequest aZStatRequest0 = new AZStatRequest ( ( Map ) hashMap0 , ( byte ) 18 ) ; String string0 = aZStatRequest0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { AZStatRequest aZStatRequest0 = new AZStatRequest ( ( Map ) null , ( byte ) 25 ) ; String string0 = aZStatRequest0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { AZStatRequest aZStatRequest0 = new AZStatRequest ( ( Map ) null , ( byte ) 25 ) ; aZStatRequest0 . getRequest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test5 ( ) throws Throwable { AZStatRequest aZStatRequest0 = new AZStatRequest ( ( Map ) null , ( byte ) 3 ) ; int int0 = aZStatRequest0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test6 ( ) throws Throwable { AZStatRequest aZStatRequest0 = new AZStatRequest ( ( Map ) null , ( byte ) 3 ) ; byte [ ] byteArray0 = aZStatRequest0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test7 ( ) throws Throwable { AZStatRequest aZStatRequest0 = new AZStatRequest ( ( Map ) null , ( byte ) 3 ) ; int int0 = aZStatRequest0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test8 ( ) throws Throwable { AZStatRequest aZStatRequest0 = new AZStatRequest ( ( Map ) null , ( byte ) 3 ) ; DirectByteBuffer [ ] directByteBufferArray0 = aZStatRequest0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test9 ( ) throws Throwable { AZStatRequest aZStatRequest0 = new AZStatRequest ( ( Map ) null , ( byte ) 25 ) ; aZStatRequest0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test10 ( ) throws Throwable { HashMap < String , Map < String , Integer > > hashMap0 = new HashMap < String , Map < String , Integer > > ( ) ; AZStatRequest aZStatRequest0 = new AZStatRequest ( ( Map ) hashMap0 , ( byte ) 18 ) ; DirectByteBuffer [ ] directByteBufferArray0 = aZStatRequest0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { byte [ ] byteArray0 = new byte [ 13 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; String [ ] stringArray0 = new String [ 25 ] ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , hashWrapper0 , hashWrapper0 , "\u0006 ! FqI ) B | c7" , "\u0006 ! FqI ) B | c7" , 0 , ( int ) ( byte ) ( - 11 ) , ( int ) ( byte ) ( - 11 ) , ( InetAddress ) inet4Address0 , ( int ) ( byte ) ( - 11 ) , stringArray0 , byteArray0 , ( int ) ( byte ) ( - 11 ) , ( byte ) 0 , true ) ; aZHandshake0 . getMessageIDs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { byte [ ] byteArray0 = new byte [ 9 ] ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; String [ ] stringArray0 = new String [ 1 ] ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , ( HashWrapper ) null , ( HashWrapper ) null , "\t" , "\t" , ( - 205 ) , ( - 971 ) , ( int ) ( byte ) 55 , ( InetAddress ) inet4Address0 , ( - 1274 ) , stringArray0 , byteArray0 , ( int ) ( byte ) ( - 94 ) , ( byte ) 0 , false ) ; aZHandshake0 . getIPv6 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; String [ ] stringArray0 = new String [ 4 ] ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , ( HashWrapper ) null , ( HashWrapper ) null , "Lr5eQ nl" , "Lr5eQ nl" , ( int ) ( byte ) 1 , ( - 1502 ) , 0 , ( InetAddress ) null , ( int ) ( byte ) 1 , stringArray0 , byteArray0 , 0 , ( byte ) 1 , false ) ; aZHandshake0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMetadataSize ( ) { return md_size ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; String [ ] stringArray0 = new String [ 8 ] ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , hashWrapper0 , hashWrapper0 , "org . bKuncycastle . jce . provider . JCEKeyGenerator$RIPEMD128HMAC" , "org . bKuncycastle . jce . provider . JCEKeyGenerator$RIPEMD128HMAC" , ( int ) ( byte ) 1 , ( int ) ( byte ) 1 , 523 , ( InetAddress ) null , ( int ) ( byte ) 0 , stringArray0 , byteArray0 , ( int ) ( byte ) 0 , ( byte ) 0 , true ) ; int int0 = aZHandshake0 . getUDPListenPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClientVersion ( ) { return client_version ; }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { byte [ ] byteArray0 = new byte [ 2 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; String [ ] stringArray0 = new String [ 8 ] ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , hashWrapper0 , hashWrapper0 , "AZ_HANDSHAKE" , ( String ) null , ( int ) ( byte ) ( - 1 ) , 120000 , 508 , ( InetAddress ) inet4Address0 , ( int ) ( byte ) 0 , stringArray0 , byteArray0 , 120000 , ( byte ) ( - 1 ) , false ) ; aZHandshake0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; String [ ] stringArray0 = new String [ 8 ] ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , hashWrapper0 , hashWrapper0 , "org . bKuncycastle . jce . provider . JCEKeyGenerator$RIPEMD128HMAC" , "org . bKuncycastle . jce . provider . JCEKeyGenerator$RIPEMD128HMAC" , ( int ) ( byte ) 1 , ( int ) ( byte ) 1 , 523 , ( InetAddress ) null , ( int ) ( byte ) 0 , stringArray0 , byteArray0 , ( int ) ( byte ) 0 , ( byte ) 0 , true ) ; byte [ ] byteArray1 = aZHandshake0 . getIdentity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUploadOnly ( ) { return uploadOnly ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { byte [ ] byteArray0 = new byte [ 32 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; String [ ] stringArray0 = new String [ 3 ] ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , hashWrapper0 , hashWrapper0 , "cFLjrv4" , "cFLjrv4" , ( - 28 ) , ( - 28 ) , ( - 28 ) , ( InetAddress ) inet4Address0 , ( - 28 ) , stringArray0 , byteArray0 , ( - 28 ) , ( byte ) 97 , true ) ; String string0 = aZHandshake0 . getClientVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; String [ ] stringArray0 = new String [ 8 ] ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , hashWrapper0 , hashWrapper0 , "org . bKuncycastle . jce . provider . JCEKeyGenerator$RIPEMD128HMAC" , "org . bKuncycastle . jce . provider . JCEKeyGenerator$RIPEMD128HMAC" , ( int ) ( byte ) 1 , ( int ) ( byte ) 1 , 523 , ( InetAddress ) null , ( int ) ( byte ) 0 , stringArray0 , byteArray0 , ( int ) ( byte ) 0 , ( byte ) 0 , true ) ; HashWrapper hashWrapper1 = aZHandshake0 . getRemoteSessionID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMetadataSize ( ) { return md_size ; }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { byte [ ] byteArray0 = new byte [ 2 ] ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; String [ ] stringArray0 = new String [ 9 ] ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , ( HashWrapper ) null , ( HashWrapper ) null , ( String ) null , ( String ) null , 30 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , ( InetAddress ) inet4Address0 , 0 , stringArray0 , byteArray0 , 30 , ( byte ) 6 , true ) ; int int0 = aZHandshake0 . getMetadataSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { byte [ ] byteArray0 = new byte [ 13 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; String [ ] stringArray0 = new String [ 25 ] ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , hashWrapper0 , hashWrapper0 , "\u0006 ! FqI ) B | c7" , "\u0006 ! FqI ) B | c7" , 0 , ( int ) ( byte ) ( - 11 ) , ( int ) ( byte ) ( - 11 ) , ( InetAddress ) inet4Address0 , ( int ) ( byte ) ( - 11 ) , stringArray0 , byteArray0 , ( int ) ( byte ) ( - 11 ) , ( byte ) 0 , true ) ; byte [ ] byteArray1 = aZHandshake0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test10 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; String [ ] stringArray0 = new String [ 8 ] ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , hashWrapper0 , hashWrapper0 , "org . bKuncycastle . jce . provider . JCEKeyGenerator$RIPEMD128HMAC" , "org . bKuncycastle . jce . provider . JCEKeyGenerator$RIPEMD128HMAC" , ( int ) ( byte ) 1 , ( int ) ( byte ) 1 , 523 , ( InetAddress ) null , ( int ) ( byte ) 0 , stringArray0 , byteArray0 , ( int ) ( byte ) 0 , ( byte ) 0 , true ) ; byte [ ] byteArray1 = aZHandshake0 . getMessageVersions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTCPListenPort ( ) ; int getUDPListenPort ( ) ; int getUDPNonDataListenPort ( ) ; Map < String , Object > getProperties ( ) ; String getString ( ) ; }
void test11 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { byte [ ] byteArray0 = new byte [ 9 ] ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; String [ ] stringArray0 = new String [ 1 ] ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , ( HashWrapper ) null , ( HashWrapper ) null , "\t" , "\t" , ( - 205 ) , ( - 971 ) , ( int ) ( byte ) 55 , ( InetAddress ) inet4Address0 , ( - 1274 ) , stringArray0 , byteArray0 , ( int ) ( byte ) ( - 94 ) , ( byte ) 0 , false ) ; int int0 = aZHandshake0 . getUDPNonDataListenPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { String [ ] stringArray0 = new String [ 6 ] ; byte [ ] byteArray0 = new byte [ 3 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , hashWrapper0 , hashWrapper0 , ( String ) null , ( String ) null , ( int ) ( byte ) ( - 37 ) , 52442 , ( int ) ( byte ) 0 , ( InetAddress ) inet4Address0 , ( int ) ( byte ) 0 , stringArray0 , byteArray0 , 52442 , ( byte ) 0 , true ) ; aZHandshake0 . getReconnectSessionID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { byte [ ] byteArray0 = new byte [ 2 ] ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; String [ ] stringArray0 = new String [ 9 ] ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , ( HashWrapper ) null , ( HashWrapper ) null , ( String ) null , ( String ) null , 30 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , ( InetAddress ) inet4Address0 , 0 , stringArray0 , byteArray0 , 30 , ( byte ) 6 , true ) ; String string0 = aZHandshake0 . getClient ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { byte [ ] byteArray0 = new byte [ 9 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; String [ ] stringArray0 = new String [ 4 ] ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , hashWrapper0 , hashWrapper0 , " ] " , " ] " , ( int ) ( byte ) ( - 87 ) , ( int ) ( byte ) 0 , ( int ) ( byte ) ( - 87 ) , ( InetAddress ) inet4Address0 , ( int ) ( byte ) ( - 87 ) , stringArray0 , byteArray0 , ( int ) ( byte ) 0 , ( byte ) 0 , true ) ; int int0 = aZHandshake0 . getTCPListenPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { byte [ ] byteArray0 = new byte [ 13 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; String [ ] stringArray0 = new String [ 25 ] ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , hashWrapper0 , hashWrapper0 , "\u0006 ! FqI ) B | c7" , "\u0006 ! FqI ) B | c7" , 0 , ( int ) ( byte ) ( - 11 ) , ( int ) ( byte ) ( - 11 ) , ( InetAddress ) inet4Address0 , ( int ) ( byte ) ( - 11 ) , stringArray0 , byteArray0 , ( int ) ( byte ) ( - 11 ) , ( byte ) 0 , true ) ; int int0 = aZHandshake0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test16 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { String [ ] stringArray0 = new String [ 6 ] ; byte [ ] byteArray0 = new byte [ 3 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , hashWrapper0 , hashWrapper0 , ( String ) null , ( String ) null , ( int ) ( byte ) ( - 37 ) , 52442 , ( int ) ( byte ) 0 , ( InetAddress ) inet4Address0 , ( int ) ( byte ) 0 , stringArray0 , byteArray0 , 52442 , ( byte ) 0 , true ) ; byte byte0 = aZHandshake0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test17 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { String [ ] stringArray0 = new String [ 6 ] ; byte [ ] byteArray0 = new byte [ 3 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , hashWrapper0 , hashWrapper0 , ( String ) null , ( String ) null , 52442 , ( int ) ( byte ) 0 , 65553 , ( InetAddress ) inet4Address0 , ( int ) ( byte ) 0 , stringArray0 , byteArray0 , ( int ) ( byte ) 15 , ( byte ) 0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test18 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { byte [ ] byteArray0 = new byte [ 9 ] ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "\t" ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , ( HashWrapper ) null , ( HashWrapper ) null , "\t" , "\t" , ( - 205 ) , ( - 971 ) , ( int ) ( byte ) 55 , ( InetAddress ) inet4Address0 , ( - 1274 ) , stringArray0 , byteArray0 , ( int ) ( byte ) ( - 94 ) , ( byte ) 0 , false ) ; aZHandshake0 . getDescription ( ) ; String string0 = aZHandshake0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test19 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 0 ] = " { % > $N8 ? 9" ; stringArray0 [ 1 ] = " { % > $N8 ? 9" ; stringArray0 [ 2 ] = " { % > $N8 ? 9" ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , hashWrapper0 , hashWrapper0 , " { % > $N8 ? 9" , " { % > $N8 ? 9" , 1000000 , ( int ) ( byte ) ( - 112 ) , ( int ) ( byte ) 0 , ( InetAddress ) null , ( int ) ( byte ) ( - 112 ) , stringArray0 , byteArray0 , ( int ) ( byte ) 0 , ( byte ) 0 , true ) ; String string0 = aZHandshake0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test23 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; String [ ] stringArray0 = new String [ 8 ] ; AZHandshake aZHandshake0 = new AZHandshake ( byteArray0 , hashWrapper0 , hashWrapper0 , "org . bKuncycastle . jce . provider . JCEKeyGenerator$RIPEMD128HMAC" , "org . bKuncycastle . jce . provider . JCEKeyGenerator$RIPEMD128HMAC" , ( int ) ( byte ) 1 , ( int ) ( byte ) 1 , 523 , ( InetAddress ) null , ( int ) ( byte ) 0 , stringArray0 , byteArray0 , ( int ) ( byte ) 0 , ( byte ) 0 , true ) ; aZHandshake0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUDPListenPort ( ) ; int getUDPNonDataListenPort ( ) ; Map < String , Object > getProperties ( ) ; String getString ( ) ; }
void test0 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test1 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProtocolBytesDecoded ( ) { return ( protocol_bytes_read ) ; }
void test2 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDataBytesDecoded ( ) { return ( 0 ) ; }
void test3 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test4 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDataBytesDecoded ( ) { return ( 0 ) ; }
void test5 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDataBytesDecoded ( ) { return ( 0 ) ; }
void test6 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test7 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test8 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int performStreamDecode ( Transport transport , int max_bytes ) throws IOException { / / before we start message processing we should have had the connection bound if ( http_connection = = null ) { Debug . out ( "connection not yet assigned" ) ; throw ( new IOException ( "Internal error - connection not yet assigned" ) ) ; } / / System . out . println ( "performStreamDecode" ) ; protocol_bytes_read = 0 ; if ( paused_internally ) { return ( 0 ) ; } if ( header_ready ) { header_ready = false ; int len = header_so_far . length ( ) ; http_connection . decodeHeader ( this , header_so_far . toString ( ) ) ; header_so_far . setLength ( 0 ) ; return ( len ) ; } else { int rem = max_bytes ; byte [ ] bytes = new byte [ 1 ] ; ByteBuffer bb = ByteBuffer . wrap ( bytes ) ; ByteBuffer [ ] bbs = { bb } ; while ( rem > 0 & & ! ( paused | | paused_internally ) ) { if ( transport . read ( bbs , 0 , 1 ) = = 0 ) { break ; } rem - - ; protocol_bytes_read + + ; bb . flip ( ) ; char c = ( char ) ( bytes [ 0 ] & 0xff ) ; header_so_far . append ( c ) ; if ( header_so_far . length ( ) > MAX_HEADER ) { throw ( new IOException ( "HTTP header exceeded maximum of " + MAX_HEADER ) ) ; } if ( c = = '\n' ) { String header_str = header_so_far . toString ( ) ; if ( header_str . endsWith ( NL + NL ) ) { http_connection . decodeHeader ( this , header_str ) ; header_so_far . setLength ( 0 ) ; } } } return ( max_bytes - rem ) ; } }
void test9 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDataBytesDecoded ( ) { return ( 0 ) ; }
void test10 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDataBytesDecoded ( ) { return ( 0 ) ; }
void test11 ( ) throws Throwable { AZMessageDecoder aZMessageDecoder0 = new AZMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int performStreamDecode ( Transport transport , int max_bytes ) throws IOException { / / before we start message processing we should have had the connection bound if ( http_connection = = null ) { Debug . out ( "connection not yet assigned" ) ; throw ( new IOException ( "Internal error - connection not yet assigned" ) ) ; } / / System . out . println ( "performStreamDecode" ) ; protocol_bytes_read = 0 ; if ( paused_internally ) { return ( 0 ) ; } if ( header_ready ) { header_ready = false ; int len = header_so_far . length ( ) ; http_connection . decodeHeader ( this , header_so_far . toString ( ) ) ; header_so_far . setLength ( 0 ) ; return ( len ) ; } else { int rem = max_bytes ; byte [ ] bytes = new byte [ 1 ] ; ByteBuffer bb = ByteBuffer . wrap ( bytes ) ; ByteBuffer [ ] bbs = { bb } ; while ( rem > 0 & & ! ( paused | | paused_internally ) ) { if ( transport . read ( bbs , 0 , 1 ) = = 0 ) { break ; } rem - - ; protocol_bytes_read + + ; bb . flip ( ) ; char c = ( char ) ( bytes [ 0 ] & 0xff ) ; header_so_far . append ( c ) ; if ( header_so_far . length ( ) > MAX_HEADER ) { throw ( new IOException ( "HTTP header exceeded maximum of " + MAX_HEADER ) ) ; } if ( c = = '\n' ) { String header_str = header_so_far . toString ( ) ; if ( header_str . endsWith ( NL + NL ) ) { http_connection . decodeHeader ( this , header_str ) ; header_so_far . setLength ( 0 ) ; } } } return ( max_bytes - rem ) ; } }
void test0 ( ) throws Throwable { AZMetaData aZMetaData0 = new AZMetaData ( 1 , ( byte ) ( - 71 ) ) ; int int0 = aZMetaData0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test1 ( ) throws Throwable { AZMetaData aZMetaData0 = new AZMetaData ( 0 , ( byte ) 68 ) ; byte byte0 = aZMetaData0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test2 ( ) throws Throwable { AZMetaData aZMetaData0 = new AZMetaData ( 0 , ( byte ) 68 ) ; int int0 = aZMetaData0 . getPiece ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { AZMetaData aZMetaData0 = new AZMetaData ( 1821 , ( ByteBuffer ) null , 0 , ( byte ) ( - 15 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageType ( ) { return ( msg_type ) ; }
void test4 ( ) throws Throwable { AZMetaData aZMetaData0 = new AZMetaData ( 0 , ( byte ) 68 ) ; String string0 = aZMetaData0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test5 ( ) throws Throwable { AZMetaData aZMetaData0 = new AZMetaData ( 0 , ( byte ) 116 ) ; byte [ ] byteArray0 = aZMetaData0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DiskManagerPiece getPiece ( int index ) { return ( pieces [ index ] ) ; }
void test6 ( ) throws Throwable { AZMetaData aZMetaData0 = new AZMetaData ( 0 , ( byte ) 116 ) ; int int0 = aZMetaData0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test7 ( ) throws Throwable { AZMetaData aZMetaData0 = new AZMetaData ( 0 , ( byte ) 68 ) ; aZMetaData0 . getMetadata ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test8 ( ) throws Throwable { AZMetaData aZMetaData0 = new AZMetaData ( 0 , ( byte ) 68 ) ; String string0 = aZMetaData0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test9 ( ) throws Throwable { AZMetaData aZMetaData0 = new AZMetaData ( 1821 , ( ByteBuffer ) null , 0 , ( byte ) ( - 15 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test11 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) ( - 10 ) , 496 ) ; ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0 . getReferenceCountedBuffer ( ) ; ByteBuffer byteBuffer0 = referenceCountedDirectByteBuffer0 . getBuffer ( ( byte ) 31 ) ; AZMetaData aZMetaData0 = new AZMetaData ( 1 , byteBuffer0 , 1 , ( byte ) ( - 36 ) ) ; DirectByteBuffer [ ] directByteBufferArray0 = aZMetaData0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DiskManagerPiece getPiece ( int index ) { return ( pieces [ index ] ) ; }
void test12 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) ( - 10 ) , 496 ) ; AZMetaData aZMetaData0 = new AZMetaData ( ( Map ) null , directByteBuffer0 , ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test14 ( ) throws Throwable { AZMetaData aZMetaData0 = new AZMetaData ( 0 , ( byte ) 68 ) ; DirectByteBuffer [ ] directByteBufferArray0 = aZMetaData0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test15 ( ) throws Throwable { AZMetaData aZMetaData0 = new AZMetaData ( 1 , ( byte ) ( - 71 ) ) ; DirectByteBuffer [ ] directByteBufferArray0 = aZMetaData0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test16 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) ( - 10 ) , 496 ) ; ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0 . getReferenceCountedBuffer ( ) ; ByteBuffer byteBuffer0 = referenceCountedDirectByteBuffer0 . getBuffer ( ( byte ) 31 ) ; AZMetaData aZMetaData0 = new AZMetaData ( 1 , byteBuffer0 , 1 , ( byte ) ( - 36 ) ) ; aZMetaData0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DiskManagerPiece getPiece ( int index ) { return ( pieces [ index ] ) ; }
void test0 ( ) throws Throwable { HashMap < Object , Object > hashMap0 = new HashMap < Object , Object > ( ) ; AZGenericMapPayload aZGenericMapPayload0 = new AZGenericMapPayload ( "" , ( Map ) hashMap0 , ( byte ) 60 ) ; int int0 = aZGenericMapPayload0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test1 ( ) throws Throwable { HashMap < Object , Integer > hashMap0 = new HashMap < Object , Integer > ( ) ; AZGenericMapPayload aZGenericMapPayload0 = new AZGenericMapPayload ( "" , ( Map ) hashMap0 , ( byte ) 16 ) ; String string0 = aZGenericMapPayload0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { HashMap < Object , Object > hashMap0 = new HashMap < Object , Object > ( ) ; AZGenericMapPayload aZGenericMapPayload0 = new AZGenericMapPayload ( "" , ( Map ) hashMap0 , ( byte ) 60 ) ; Map < Object , Object > map0 = aZGenericMapPayload0 . getMapPayload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test4 ( ) throws Throwable { HashMap < Object , Object > hashMap0 = new HashMap < Object , Object > ( ) ; AZGenericMapPayload aZGenericMapPayload0 = new AZGenericMapPayload ( "" , ( Map ) hashMap0 , ( byte ) 60 ) ; byte byte0 = aZGenericMapPayload0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test5 ( ) throws Throwable { HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( ) ; AZGenericMapPayload aZGenericMapPayload0 = new AZGenericMapPayload ( "" , ( Map ) hashMap0 , ( byte ) 18 ) ; String string0 = aZGenericMapPayload0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test6 ( ) throws Throwable { HashMap < Object , Object > hashMap0 = new HashMap < Object , Object > ( ) ; AZGenericMapPayload aZGenericMapPayload0 = new AZGenericMapPayload ( "" , ( Map ) hashMap0 , ( byte ) 60 ) ; byte [ ] byteArray0 = aZGenericMapPayload0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test7 ( ) throws Throwable { HashMap < Object , Object > hashMap0 = new HashMap < Object , Object > ( ) ; AZGenericMapPayload aZGenericMapPayload0 = new AZGenericMapPayload ( "" , ( Map ) hashMap0 , ( byte ) 60 ) ; int int0 = aZGenericMapPayload0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test8 ( ) throws Throwable { HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( ) ; AZGenericMapPayload aZGenericMapPayload0 = new AZGenericMapPayload ( "put ( byte [ ] ) " , ( Map ) hashMap0 , ( byte ) ( - 95 ) ) ; DirectByteBuffer [ ] directByteBufferArray0 = aZGenericMapPayload0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test9 ( ) throws Throwable { HashMap < Integer , String > hashMap0 = new HashMap < Integer , String > ( ) ; AZGenericMapPayload aZGenericMapPayload0 = new AZGenericMapPayload ( "" , ( Map ) hashMap0 , ( byte ) 82 ) ; aZGenericMapPayload0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test10 ( ) throws Throwable { HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( ) ; AZGenericMapPayload aZGenericMapPayload0 = new AZGenericMapPayload ( "put ( byte [ ] ) " , ( Map ) hashMap0 , ( byte ) ( - 95 ) ) ; DirectByteBuffer [ ] directByteBufferArray0 = aZGenericMapPayload0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test0 ( ) throws Throwable { int [ ] intArray0 = new int [ 10 ] ; AZHave aZHave0 = new AZHave ( intArray0 , ( byte ) 0 ) ; int int0 = aZHave0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test1 ( ) throws Throwable { int [ ] intArray0 = new int [ 2 ] ; AZHave aZHave0 = new AZHave ( intArray0 , ( byte ) 0 ) ; String string0 = aZHave0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { int [ ] intArray0 = new int [ 2 ] ; AZHave aZHave0 = new AZHave ( intArray0 , ( byte ) 0 ) ; int int0 = aZHave0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { int [ ] intArray0 = new int [ 2 ] ; AZHave aZHave0 = new AZHave ( intArray0 , ( byte ) 0 ) ; int [ ] intArray1 = aZHave0 . getPieceNumbers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { int [ ] intArray0 = new int [ 10 ] ; AZHave aZHave0 = new AZHave ( intArray0 , ( byte ) 0 ) ; DirectByteBuffer [ ] directByteBufferArray0 = aZHave0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test6 ( ) throws Throwable { int [ ] intArray0 = new int [ 10 ] ; AZHave aZHave0 = new AZHave ( intArray0 , ( byte ) 0 ) ; aZHave0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test7 ( ) throws Throwable { int [ ] intArray0 = new int [ 2 ] ; AZHave aZHave0 = new AZHave ( intArray0 , ( byte ) 0 ) ; DirectByteBuffer [ ] directByteBufferArray0 = aZHave0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { BTPiece bTPiece0 = new BTPiece ( 0 , 0 , ( DirectByteBuffer ) null , ( byte ) ( - 81 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test1 ( ) throws Throwable { BTPiece bTPiece0 = new BTPiece ( 0 , 0 , ( DirectByteBuffer ) null , ( byte ) ( - 81 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test2 ( ) throws Throwable { BTPiece bTPiece0 = new BTPiece ( 10 , 10 , ( DirectByteBuffer ) null , ( byte ) 64 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceNumber ( ) { return ( piece_number ) ; }
void test3 ( ) throws Throwable { BTPiece bTPiece0 = new BTPiece ( 0 , 0 , ( DirectByteBuffer ) null , ( byte ) ( - 81 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test4 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 23 , ( byte ) 23 ) ; BTPiece bTPiece0 = new BTPiece ( 0 , 0 , directByteBuffer0 , ( byte ) 23 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test5 ( ) throws Throwable { BTPiece bTPiece0 = new BTPiece ( 10 , 10 , ( DirectByteBuffer ) null , ( byte ) 64 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Message deserialize ( DirectByteBuffer data , byte version ) throws MessageException { return message . deserialize ( data , version ) ; }
void test6 ( ) throws Throwable { BTPiece bTPiece0 = new BTPiece ( 0 , 0 , ( DirectByteBuffer ) null , ( byte ) ( - 81 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test7 ( ) throws Throwable { BTPiece bTPiece0 = new BTPiece ( 0 , 0 , ( DirectByteBuffer ) null , ( byte ) ( - 81 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test8 ( ) throws Throwable { BTPiece bTPiece0 = new BTPiece ( 10 , 10 , ( DirectByteBuffer ) null , ( byte ) 64 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test9 ( ) throws Throwable { BTPiece bTPiece0 = new BTPiece ( 0 , 0 , ( DirectByteBuffer ) null , ( byte ) ( - 47 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test10 ( ) throws Throwable { BTPiece bTPiece0 = new BTPiece ( 10 , 10 , ( DirectByteBuffer ) null , ( byte ) 64 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceNumber ( ) { return ( piece_number ) ; }
void test11 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 1 , 14 ) ; ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0 . getReferenceCountedBuffer ( ) ; BTPiece bTPiece0 = new BTPiece ( 14 , ( int ) ( byte ) 1 , ( DirectByteBuffer ) referenceCountedDirectByteBuffer0 , ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test12 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 4 , ( byte ) 4 ) ; BTPiece bTPiece0 = new BTPiece ( ( - 15 ) , ( - 15 ) , directByteBuffer0 , ( byte ) 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Message deserialize ( DirectByteBuffer data , byte version ) throws MessageException { return message . deserialize ( data , version ) ; }
void test13 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 1 , 14 ) ; ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0 . getReferenceCountedBuffer ( ) ; BTPiece bTPiece0 = new BTPiece ( 14 , ( int ) ( byte ) 1 , ( DirectByteBuffer ) referenceCountedDirectByteBuffer0 , ( byte ) 1 ) ; bTPiece0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReferenceCount ( ) { return ( ref_count ) ; }
void test14 ( ) throws Throwable { BTPiece bTPiece0 = new BTPiece ( 10 , 10 , ( DirectByteBuffer ) null , ( byte ) 64 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceNumber ( ) { return ( piece_number ) ; }
void test0 ( ) throws Throwable { BTHaveNone bTHaveNone0 = new BTHaveNone ( ( byte ) ( - 115 ) ) ; String string0 = bTHaveNone0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test1 ( ) throws Throwable { BTHaveNone bTHaveNone0 = new BTHaveNone ( ( byte ) 0 ) ; int int0 = bTHaveNone0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { BTHaveNone bTHaveNone0 = new BTHaveNone ( ( byte ) ( - 115 ) ) ; int int0 = bTHaveNone0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { BTHaveNone bTHaveNone0 = new BTHaveNone ( ( byte ) ( - 115 ) ) ; bTHaveNone0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { BTHaveNone bTHaveNone0 = new BTHaveNone ( ( byte ) 0 ) ; bTHaveNone0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test5 ( ) throws Throwable { BTHaveNone bTHaveNone0 = new BTHaveNone ( ( byte ) ( - 115 ) ) ; byte [ ] byteArray0 = bTHaveNone0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test6 ( ) throws Throwable { BTHaveNone bTHaveNone0 = new BTHaveNone ( ( byte ) 0 ) ; byte byte0 = bTHaveNone0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test7 ( ) throws Throwable { BTHaveNone bTHaveNone0 = new BTHaveNone ( ( byte ) ( - 115 ) ) ; String string0 = bTHaveNone0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test8 ( ) throws Throwable { BTHaveNone bTHaveNone0 = new BTHaveNone ( ( byte ) ( - 115 ) ) ; BTHaveNone bTHaveNone1 = ( BTHaveNone ) bTHaveNone0 . deserialize ( ( DirectByteBuffer ) null , ( byte ) ( - 115 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test10 ( ) throws Throwable { BTHaveNone bTHaveNone0 = new BTHaveNone ( ( byte ) 103 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) ( - 13 ) , ( byte ) 103 ) ; directByteBuffer0 . flip ( ( byte ) ( - 13 ) ) ; BTHaveNone bTHaveNone1 = ( BTHaveNone ) bTHaveNone0 . deserialize ( directByteBuffer0 , ( byte ) 36 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { BTMessageEncoder bTMessageEncoder0 = new BTMessageEncoder ( ) ; BTChoke bTChoke0 = new BTChoke ( ( byte ) 0 ) ; RawMessage [ ] rawMessageArray0 = bTMessageEncoder0 . encodeMessage ( ( Message ) bTChoke0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RawMessage [ ] encodeMessage ( Message message ) { String id = message . getID ( ) ; / / System . out . println ( "encodeMessage : " + message . getID ( ) ) ; RawMessage raw_message = null ; if ( id . equals ( BTMessage . ID_BT_HANDSHAKE ) ) { raw_message = http_connection . encodeHandShake ( message ) ; } else if ( id . equals ( BTMessage . ID_BT_CHOKE ) ) { raw_message = http_connection . encodeChoke ( ) ; } else if ( id . equals ( BTMessage . ID_BT_UNCHOKE ) ) { raw_message = http_connection . encodeUnchoke ( ) ; } else if ( id . equals ( BTMessage . ID_BT_BITFIELD ) ) { raw_message = http_connection . encodeBitField ( ) ; } else if ( id . equals ( BTMessage . ID_BT_PIECE ) ) { return ( http_connection . encodePiece ( message ) ) ; } else if ( id . equals ( HTTPMessage . MSG_ID ) ) { raw_message = ( ( HTTPMessage ) message ) . encode ( message ) ; } if ( raw_message = = null ) { raw_message = http_connection . getEmptyRawMessage ( message ) ; } return ( new RawMessage [ ] { raw_message } ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , true , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , true , ( byte ) ( - 20 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , true , ( byte ) ( - 114 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , true , ( byte ) ( - 114 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , true , ( byte ) ( - 20 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , true , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , false , ( byte ) 11 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , true , ( byte ) ( - 114 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , true , ( byte ) ( - 114 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , false , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test10 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , true , ( byte ) ( - 114 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test11 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , false , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test12 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , true , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test13 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , true , ( byte ) 68 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Message deserialize ( DirectByteBuffer data , byte version ) throws MessageException { return message . deserialize ( data , version ) ; }
void test14 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , true , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test19 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , true , ( byte ) ( - 20 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test20 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , true , ( byte ) ( - 20 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test21 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , false , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Message deserialize ( DirectByteBuffer data , byte version ) throws MessageException { return message . deserialize ( data , version ) ; }
void test22 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , true , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Message deserialize ( DirectByteBuffer data , byte version ) throws MessageException { return message . deserialize ( data , version ) ; }
void test23 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , true , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test24 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; BTHandshake bTHandshake0 = new BTHandshake ( byteArray0 , byteArray0 , false , ( byte ) 11 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test0 ( ) throws Throwable { BTCancel bTCancel0 = new BTCancel ( ( - 9 ) , ( - 9 ) , ( - 9 ) , ( byte ) 45 ) ; byte byte0 = bTCancel0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test2 ( ) throws Throwable { BTCancel bTCancel0 = new BTCancel ( ( - 32 ) , ( - 32 ) , ( - 32 ) , ( byte ) 13 ) ; int int0 = bTCancel0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test3 ( ) throws Throwable { BTCancel bTCancel0 = new BTCancel ( ( - 32 ) , ( - 32 ) , ( - 32 ) , ( byte ) 13 ) ; int int0 = bTCancel0 . getPieceNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { BTCancel bTCancel0 = new BTCancel ( ( - 421 ) , ( - 421 ) , ( - 421 ) , ( byte ) ( - 29 ) ) ; int int0 = bTCancel0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test5 ( ) throws Throwable { BTCancel bTCancel0 = new BTCancel ( ( - 9 ) , ( - 9 ) , ( - 9 ) , ( byte ) 45 ) ; String string0 = bTCancel0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test6 ( ) throws Throwable { BTCancel bTCancel0 = new BTCancel ( ( - 9 ) , ( - 9 ) , ( - 9 ) , ( byte ) 45 ) ; byte [ ] byteArray0 = bTCancel0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceNumber ( ) { return ( piece_number ) ; }
void test7 ( ) throws Throwable { BTCancel bTCancel0 = new BTCancel ( 19 , 19 , ( int ) ( byte ) ( - 51 ) , ( byte ) ( - 51 ) ) ; int int0 = bTCancel0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test8 ( ) throws Throwable { BTCancel bTCancel0 = new BTCancel ( ( - 32 ) , ( - 32 ) , ( - 32 ) , ( byte ) 13 ) ; int int0 = bTCancel0 . getPieceOffset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test9 ( ) throws Throwable { BTCancel bTCancel0 = new BTCancel ( ( - 32 ) , ( - 32 ) , ( - 32 ) , ( byte ) 13 ) ; String string0 = bTCancel0 . getDescription ( ) ; String string1 = bTCancel0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test10 ( ) throws Throwable { BTCancel bTCancel0 = new BTCancel ( ( - 32 ) , ( - 32 ) , ( - 32 ) , ( byte ) 13 ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTCancel0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test12 ( ) throws Throwable { BTCancel bTCancel0 = new BTCancel ( ( - 1353 ) , ( - 1353 ) , ( - 1353 ) , ( byte ) 12 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 12 , ( byte ) 12 ) ; BTCancel bTCancel1 = ( BTCancel ) bTCancel0 . deserialize ( directByteBuffer0 , ( byte ) 12 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceOffset ( ) { return piece_offset ; }
void test13 ( ) throws Throwable { byte byte0 = ( byte ) 12 ; BTCancel bTCancel0 = new BTCancel ( ( - 1353 ) , ( - 1353 ) , ( - 1353 ) , ( byte ) 12 ) ; bTCancel0 . destroy ( ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 12 , ( byte ) 12 ) ; BTCancel bTCancel1 = ( BTCancel ) bTCancel0 . deserialize ( directByteBuffer0 , ( byte ) 12 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test14 ( ) throws Throwable { BTCancel bTCancel0 = new BTCancel ( ( - 421 ) , ( - 421 ) , ( - 421 ) , ( byte ) ( - 29 ) ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTCancel0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceOffset ( ) { return piece_offset ; }
void test0 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 0 , 0 , 0 , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test1 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 26 , 26 , 26 , ( byte ) ( - 35 ) ) ; bTRejectRequest0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceOffset ( ) { return piece_offset ; }
void test3 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 26 , 26 , 26 , ( byte ) ( - 35 ) ) ; int int0 = bTRejectRequest0 . getPieceOffset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test4 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 66 , 66 , 66 , ( byte ) 0 ) ; int int0 = bTRejectRequest0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test5 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 1154 , 1154 , 1154 , ( byte ) ( - 123 ) ) ; bTRejectRequest0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return ( file . getLength ( ) ) ; }
void test6 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 1959 , 1959 , 1959 , ( byte ) 12 ) ; int int0 = bTRejectRequest0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test7 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 66 , 66 , 66 , ( byte ) 0 ) ; byte byte0 = bTRejectRequest0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test8 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 26 , 26 , 26 , ( byte ) ( - 35 ) ) ; bTRejectRequest0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceNumber ( ) { return ( piece_number ) ; }
void test9 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 0 , 0 , 0 , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test10 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 26 , 26 , 26 , ( byte ) ( - 35 ) ) ; String string0 = bTRejectRequest0 . getDescription ( ) ; String string1 = bTRejectRequest0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test11 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 26 , 26 , 26 , ( byte ) ( - 35 ) ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTRejectRequest0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceOffset ( ) { return piece_offset ; }
void test12 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 1959 , 1959 , 1959 , ( byte ) 12 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 12 , ( byte ) 12 ) ; BTRejectRequest bTRejectRequest1 = ( BTRejectRequest ) bTRejectRequest0 . deserialize ( directByteBuffer0 , ( byte ) 12 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test14 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 1154 , 1154 , 1154 , ( byte ) ( - 123 ) ) ; bTRejectRequest0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceNumber ( ) { return ( piece_number ) ; }
void test15 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 26 , 26 , 26 , ( byte ) ( - 35 ) ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTRejectRequest0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return ( file . getLength ( ) ) ; }
void test16 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 0 , ( - 1 ) , 0 , ( byte ) ( - 127 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return ( file . getLength ( ) ) ; }
void test17 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 66 , 66 , 66 , ( byte ) 0 ) ; boolean boolean0 = bTRejectRequest0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test18 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 120 , 120 , 120 , ( byte ) ( - 88 ) ) ; boolean boolean0 = bTRejectRequest0 . equals ( ( Object ) "BT_KEEP_ALIVE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test19 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 26 , 26 , 26 , ( byte ) ( - 35 ) ) ; BTRejectRequest bTRejectRequest1 = new BTRejectRequest ( ( int ) ( byte ) ( - 35 ) , ( int ) ( byte ) ( - 35 ) , 26 , ( byte ) ( - 35 ) ) ; bTRejectRequest0 . equals ( ( Object ) bTRejectRequest1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test20 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 0 , 0 , 0 , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test21 ( ) throws Throwable { BTRejectRequest bTRejectRequest0 = new BTRejectRequest ( 0 , 0 , 0 , ( byte ) 0 ) ; BTRejectRequest bTRejectRequest1 = new BTRejectRequest ( 0 , 0 , 0 , ( byte ) 0 ) ; boolean boolean0 = bTRejectRequest0 . equals ( ( Object ) bTRejectRequest1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test0 ( ) throws Throwable { BTChoke bTChoke0 = new BTChoke ( ( byte ) ( - 15 ) ) ; String string0 = bTChoke0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test1 ( ) throws Throwable { BTChoke bTChoke0 = new BTChoke ( ( byte ) ( - 15 ) ) ; int int0 = bTChoke0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { BTChoke bTChoke0 = new BTChoke ( ( byte ) ( - 15 ) ) ; byte [ ] byteArray0 = bTChoke0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { BTChoke bTChoke0 = new BTChoke ( ( byte ) ( - 15 ) ) ; bTChoke0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { BTChoke bTChoke0 = new BTChoke ( ( byte ) ( - 15 ) ) ; bTChoke0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test5 ( ) throws Throwable { BTChoke bTChoke0 = new BTChoke ( ( byte ) ( - 15 ) ) ; int int0 = bTChoke0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test6 ( ) throws Throwable { BTChoke bTChoke0 = new BTChoke ( ( byte ) ( - 15 ) ) ; String string0 = bTChoke0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test7 ( ) throws Throwable { BTChoke bTChoke0 = new BTChoke ( ( byte ) ( - 15 ) ) ; byte byte0 = bTChoke0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test8 ( ) throws Throwable { BTChoke bTChoke0 = new BTChoke ( ( byte ) ( - 15 ) ) ; BTChoke bTChoke1 = ( BTChoke ) bTChoke0 . deserialize ( ( DirectByteBuffer ) null , ( byte ) ( - 15 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test10 ( ) throws Throwable { BTChoke bTChoke0 = new BTChoke ( ( byte ) 103 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) ( - 1 ) , ( byte ) 103 ) ; directByteBuffer0 . flip ( ( byte ) ( - 81 ) ) ; BTChoke bTChoke1 = ( BTChoke ) bTChoke0 . deserialize ( directByteBuffer0 , ( byte ) ( - 31 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { BTHave bTHave0 = new BTHave ( 1459 , ( byte ) 44 ) ; byte [ ] byteArray0 = bTHave0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceNumber ( ) { return ( piece_number ) ; }
void test1 ( ) throws Throwable { BTHave bTHave0 = new BTHave ( 7 , ( byte ) ( - 93 ) ) ; String string0 = bTHave0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { BTHave bTHave0 = new BTHave ( 1459 , ( byte ) 44 ) ; int int0 = bTHave0 . getPieceNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { BTHave bTHave0 = new BTHave ( 1459 , ( byte ) 44 ) ; byte byte0 = bTHave0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test4 ( ) throws Throwable { BTHave bTHave0 = new BTHave ( 1459 , ( byte ) 44 ) ; int int0 = bTHave0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test6 ( ) throws Throwable { BTHave bTHave0 = new BTHave ( 1459 , ( byte ) 44 ) ; int int0 = bTHave0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test7 ( ) throws Throwable { BTHave bTHave0 = new BTHave ( 1459 , ( byte ) 44 ) ; String string0 = bTHave0 . getDescription ( ) ; String string1 = bTHave0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test8 ( ) throws Throwable { BTHave bTHave0 = new BTHave ( 1459 , ( byte ) 44 ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTHave0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test9 ( ) throws Throwable { BTHave bTHave0 = new BTHave ( 1459 , ( byte ) 44 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 44 , 4 ) ; BTHave bTHave1 = ( BTHave ) bTHave0 . deserialize ( directByteBuffer0 , ( byte ) 44 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test11 ( ) throws Throwable { BTHave bTHave0 = new BTHave ( 1459 , ( byte ) 44 ) ; bTHave0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test12 ( ) throws Throwable { BTHave bTHave0 = new BTHave ( 1459 , ( byte ) 44 ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTHave0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test0 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 64 , ( byte ) 64 ) ; BTBitfield bTBitfield0 = new BTBitfield ( directByteBuffer0 , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test1 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) ( - 115 ) , 426 ) ; ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0 . getReferenceCountedBuffer ( ) ; BTBitfield bTBitfield0 = new BTBitfield ( ( DirectByteBuffer ) referenceCountedDirectByteBuffer0 , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { BTBitfield bTBitfield0 = new BTBitfield ( ( DirectByteBuffer ) null , ( byte ) 113 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { BTBitfield bTBitfield0 = new BTBitfield ( ( DirectByteBuffer ) null , ( byte ) 113 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { BTBitfield bTBitfield0 = new BTBitfield ( ( DirectByteBuffer ) null , ( byte ) 113 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test5 ( ) throws Throwable { BTBitfield bTBitfield0 = new BTBitfield ( ( DirectByteBuffer ) null , ( byte ) 113 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test6 ( ) throws Throwable { BTBitfield bTBitfield0 = new BTBitfield ( ( DirectByteBuffer ) null , ( byte ) 113 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test7 ( ) throws Throwable { BTBitfield bTBitfield0 = new BTBitfield ( ( DirectByteBuffer ) null , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test8 ( ) throws Throwable { BTBitfield bTBitfield0 = new BTBitfield ( ( DirectByteBuffer ) null , ( byte ) 113 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test9 ( ) throws Throwable { BTBitfield bTBitfield0 = new BTBitfield ( ( DirectByteBuffer ) null , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Message deserialize ( DirectByteBuffer data , byte version ) throws MessageException { return message . deserialize ( data , version ) ; }
void test10 ( ) throws Throwable { BTBitfield bTBitfield0 = new BTBitfield ( ( DirectByteBuffer ) null , ( byte ) 113 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test11 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 0 , 1701 ) ; BTBitfield bTBitfield0 = new BTBitfield ( directByteBuffer0 , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProtocolBytesDecoded ( ) { return ( protocol_bytes_read ) ; }
void test1 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProtocolBytesDecoded ( ) { return ( protocol_bytes_read ) ; }
void test2 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProtocolBytesDecoded ( ) { return ( protocol_bytes_read ) ; }
void test3 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test4 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Message createMessage ( byte [ ] id_bytes , DirectByteBuffer message_data , byte version ) throws MessageException { Message message = ( Message ) message_map . get ( id_bytes ) ; if ( message = = null ) { throw new MessageException ( "message id [ " + new String ( id_bytes ) + " ] not registered" ) ; } return message . deserialize ( message_data , version ) ; }
void test5 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDataBytesDecoded ( ) { return ( 0 ) ; }
void test6 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test7 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int performStreamDecode ( Transport transport , int max_bytes ) throws IOException { / / before we start message processing we should have had the connection bound if ( http_connection = = null ) { Debug . out ( "connection not yet assigned" ) ; throw ( new IOException ( "Internal error - connection not yet assigned" ) ) ; } / / System . out . println ( "performStreamDecode" ) ; protocol_bytes_read = 0 ; if ( paused_internally ) { return ( 0 ) ; } if ( header_ready ) { header_ready = false ; int len = header_so_far . length ( ) ; http_connection . decodeHeader ( this , header_so_far . toString ( ) ) ; header_so_far . setLength ( 0 ) ; return ( len ) ; } else { int rem = max_bytes ; byte [ ] bytes = new byte [ 1 ] ; ByteBuffer bb = ByteBuffer . wrap ( bytes ) ; ByteBuffer [ ] bbs = { bb } ; while ( rem > 0 & & ! ( paused | | paused_internally ) ) { if ( transport . read ( bbs , 0 , 1 ) = = 0 ) { break ; } rem - - ; protocol_bytes_read + + ; bb . flip ( ) ; char c = ( char ) ( bytes [ 0 ] & 0xff ) ; header_so_far . append ( c ) ; if ( header_so_far . length ( ) > MAX_HEADER ) { throw ( new IOException ( "HTTP header exceeded maximum of " + MAX_HEADER ) ) ; } if ( c = = '\n' ) { String header_str = header_so_far . toString ( ) ; if ( header_str . endsWith ( NL + NL ) ) { http_connection . decodeHeader ( this , header_str ) ; header_so_far . setLength ( 0 ) ; } } } return ( max_bytes - rem ) ; } }
void test8 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProtocolBytesDecoded ( ) { return ( protocol_bytes_read ) ; }
void test9 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPercentDoneOfCurrentMessage ( ) ; / * * * Receive ( read ) message ( s ) data from the underlying transport . * @param max_bytes to read * @return number of bytes received * @throws IOException on receive error * / int receiveFromTransport ( int max_bytes ) throws IOException ; / * * * Notifty the queue ( and its listeners ) of a message received externally on the queue's behalf . * @param message received externally * / void notifyOfExternallyReceivedMessage ( Message message ) ; / * * * Manually resume processing ( reading ) incoming messages . * NOTE : Allows us to resume docoding externally , in case it was auto - paused internally . * / void resumeQueueProcessing ( ) ; / * * * Add a listener to be notified of queue events . * @param listener * / void registerQueueListener ( MessageQueueListener listener ) ; / * * * Cancel queue event notification listener . * @param listener * / void cancelQueueListener ( MessageQueueListener listener ) ; / * * * Destroy this queue . * / void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test11 ( ) throws Throwable { BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int performStreamDecode ( Transport transport , int max_bytes ) throws IOException { / / before we start message processing we should have had the connection bound if ( http_connection = = null ) { Debug . out ( "connection not yet assigned" ) ; throw ( new IOException ( "Internal error - connection not yet assigned" ) ) ; } / / System . out . println ( "performStreamDecode" ) ; protocol_bytes_read = 0 ; if ( paused_internally ) { return ( 0 ) ; } if ( header_ready ) { header_ready = false ; int len = header_so_far . length ( ) ; http_connection . decodeHeader ( this , header_so_far . toString ( ) ) ; header_so_far . setLength ( 0 ) ; return ( len ) ; } else { int rem = max_bytes ; byte [ ] bytes = new byte [ 1 ] ; ByteBuffer bb = ByteBuffer . wrap ( bytes ) ; ByteBuffer [ ] bbs = { bb } ; while ( rem > 0 & & ! ( paused | | paused_internally ) ) { if ( transport . read ( bbs , 0 , 1 ) = = 0 ) { break ; } rem - - ; protocol_bytes_read + + ; bb . flip ( ) ; char c = ( char ) ( bytes [ 0 ] & 0xff ) ; header_so_far . append ( c ) ; if ( header_so_far . length ( ) > MAX_HEADER ) { throw ( new IOException ( "HTTP header exceeded maximum of " + MAX_HEADER ) ) ; } if ( c = = '\n' ) { String header_str = header_so_far . toString ( ) ; if ( header_str . endsWith ( NL + NL ) ) { http_connection . decodeHeader ( this , header_str ) ; header_so_far . setLength ( 0 ) ; } } } return ( max_bytes - rem ) ; } }
void test0 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) ( - 27 ) ) ; String string0 = bTKeepAlive0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test1 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) ( - 27 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) ( - 3 ) ) ; BTKeepAlive bTKeepAlive1 = ( BTKeepAlive ) bTKeepAlive0 . getBaseMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) ( - 27 ) ) ; int int0 = bTKeepAlive0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) ( - 27 ) ) ; int int0 = bTKeepAlive0 . getPriority ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test5 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) 65 ) ; int int0 = bTKeepAlive0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test6 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) ( - 27 ) ) ; boolean boolean0 = bTKeepAlive0 . isNoDelay ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test7 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) 22 ) ; byte byte0 = bTKeepAlive0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test8 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) ( - 27 ) ) ; bTKeepAlive0 . messagesToRemove ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test9 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) 0 ) ; byte [ ] byteArray0 = bTKeepAlive0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test10 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) ( - 3 ) ) ; bTKeepAlive0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test11 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) ( - 27 ) ) ; String string0 = bTKeepAlive0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test12 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) ( - 27 ) ) ; BTKeepAlive bTKeepAlive1 = ( BTKeepAlive ) bTKeepAlive0 . deserialize ( ( DirectByteBuffer ) null , ( byte ) ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test14 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) ( - 3 ) ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 99 , ( byte ) 99 ) ; directByteBuffer0 . flip ( ( byte ) 99 ) ; BTKeepAlive bTKeepAlive1 = ( BTKeepAlive ) bTKeepAlive0 . deserialize ( directByteBuffer0 , ( byte ) ( - 3 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test15 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) 22 ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTKeepAlive0 . getRawData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test16 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) 0 ) ; bTKeepAlive0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test17 ( ) throws Throwable { BTKeepAlive bTKeepAlive0 = new BTKeepAlive ( ( byte ) 22 ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTKeepAlive0 . getRawData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { BTAllowedFast bTAllowedFast0 = new BTAllowedFast ( ( - 1800 ) , ( byte ) 41 ) ; int int0 = bTAllowedFast0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test2 ( ) throws Throwable { BTAllowedFast bTAllowedFast0 = new BTAllowedFast ( 1828 , ( byte ) ( - 38 ) ) ; int int0 = bTAllowedFast0 . getPieceNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { BTAllowedFast bTAllowedFast0 = new BTAllowedFast ( 0 , ( byte ) 104 ) ; String string0 = bTAllowedFast0 . getDescription ( ) ; String string1 = bTAllowedFast0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { BTAllowedFast bTAllowedFast0 = new BTAllowedFast ( ( - 1800 ) , ( byte ) 41 ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTAllowedFast0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test5 ( ) throws Throwable { BTAllowedFast bTAllowedFast0 = new BTAllowedFast ( ( int ) ( byte ) 111 , ( byte ) 0 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 87 , ( byte ) 4 ) ; BTAllowedFast bTAllowedFast1 = ( BTAllowedFast ) bTAllowedFast0 . deserialize ( directByteBuffer0 , ( byte ) 87 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test7 ( ) throws Throwable { BTAllowedFast bTAllowedFast0 = new BTAllowedFast ( ( int ) ( byte ) 111 , ( byte ) 0 ) ; bTAllowedFast0 . getVersion ( ) ; BTAllowedFast bTAllowedFast1 = new BTAllowedFast ( ( - 869 ) , ( byte ) 111 ) ; byte [ ] byteArray0 = bTAllowedFast1 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test8 ( ) throws Throwable { BTAllowedFast bTAllowedFast0 = new BTAllowedFast ( 0 , ( byte ) 104 ) ; bTAllowedFast0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test9 ( ) throws Throwable { BTAllowedFast bTAllowedFast0 = new BTAllowedFast ( ( - 1800 ) , ( byte ) 41 ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTAllowedFast0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { BTHaveAll bTHaveAll0 = new BTHaveAll ( ( byte ) 0 ) ; bTHaveAll0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test1 ( ) throws Throwable { BTHaveAll bTHaveAll0 = new BTHaveAll ( ( byte ) ( - 115 ) ) ; bTHaveAll0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { BTHaveAll bTHaveAll0 = new BTHaveAll ( ( byte ) ( - 115 ) ) ; String string0 = bTHaveAll0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { BTHaveAll bTHaveAll0 = new BTHaveAll ( ( byte ) 0 ) ; int int0 = bTHaveAll0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { BTHaveAll bTHaveAll0 = new BTHaveAll ( ( byte ) ( - 115 ) ) ; String string0 = bTHaveAll0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test5 ( ) throws Throwable { BTHaveAll bTHaveAll0 = new BTHaveAll ( ( byte ) ( - 115 ) ) ; int int0 = bTHaveAll0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test6 ( ) throws Throwable { BTHaveAll bTHaveAll0 = new BTHaveAll ( ( byte ) 0 ) ; byte byte0 = bTHaveAll0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test7 ( ) throws Throwable { BTHaveAll bTHaveAll0 = new BTHaveAll ( ( byte ) ( - 115 ) ) ; byte [ ] byteArray0 = bTHaveAll0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test8 ( ) throws Throwable { BTHaveAll bTHaveAll0 = new BTHaveAll ( ( byte ) ( - 115 ) ) ; BTHaveAll bTHaveAll1 = ( BTHaveAll ) bTHaveAll0 . deserialize ( ( DirectByteBuffer ) null , ( byte ) ( - 115 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test10 ( ) throws Throwable { BTHaveAll bTHaveAll0 = new BTHaveAll ( ( byte ) 103 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) ( - 13 ) , ( byte ) 103 ) ; directByteBuffer0 . flip ( ( byte ) ( - 13 ) ) ; BTHaveAll bTHaveAll1 = ( BTHaveAll ) bTHaveAll0 . deserialize ( directByteBuffer0 , ( byte ) 36 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { BTRawMessage bTRawMessage0 = new BTRawMessage ( ( DirectByteBuffer ) null ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTRawMessage0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getData ( String id ) { return mapData . get ( id ) ; }
void test1 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 45 , ( byte ) 45 ) ; BTRawMessage bTRawMessage0 = new BTRawMessage ( directByteBuffer0 ) ; int int0 = bTRawMessage0 . getPriority ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPriority ( ) ; / * * * Is this a no - delay message . * No - delay messages are transmitted immediately , * i . e . force - flushed out the transport . * @return true if a no - delay message * / boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test2 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 45 , ( byte ) 45 ) ; BTRawMessage bTRawMessage0 = new BTRawMessage ( directByteBuffer0 ) ; String string0 = bTRawMessage0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFeatureID ( ) { return message . getFeatureID ( ) ; }
void test3 ( ) throws Throwable { BTRawMessage bTRawMessage0 = new BTRawMessage ( ( DirectByteBuffer ) null ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTRawMessage0 . getRawData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DirectByteBuffer [ ] getRawData ( ) ; / * * * Get the message's queue priority . * @return priority * / int getPriority ( ) ; / * * * Is this a no - delay message . * No - delay messages are transmitted immediately , * i . e . force - flushed out the transport . * @return true if a no - delay message * / boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test4 ( ) throws Throwable { BTRawMessage bTRawMessage0 = new BTRawMessage ( ( DirectByteBuffer ) null ) ; String string0 = bTRawMessage0 . getID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test6 ( ) throws Throwable { BTRawMessage bTRawMessage0 = new BTRawMessage ( ( DirectByteBuffer ) null ) ; BTRawMessage bTRawMessage1 = ( BTRawMessage ) bTRawMessage0 . getBaseMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test7 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 45 , ( byte ) 45 ) ; BTRawMessage bTRawMessage0 = new BTRawMessage ( directByteBuffer0 ) ; int int0 = bTRawMessage0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test8 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 45 , ( byte ) 45 ) ; BTRawMessage bTRawMessage0 = new BTRawMessage ( directByteBuffer0 ) ; String string0 = bTRawMessage0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test9 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 45 , ( byte ) 45 ) ; BTRawMessage bTRawMessage0 = new BTRawMessage ( directByteBuffer0 ) ; byte byte0 = bTRawMessage0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test10 ( ) throws Throwable { BTRawMessage bTRawMessage0 = new BTRawMessage ( ( DirectByteBuffer ) null ) ; byte [ ] byteArray0 = bTRawMessage0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getIDBytes ( ) { return message . getIDBytes ( ) ; }
void test11 ( ) throws Throwable { BTRawMessage bTRawMessage0 = new BTRawMessage ( ( DirectByteBuffer ) null ) ; int int0 = bTRawMessage0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFeatureSubID ( ) { return message . getFeatureSubID ( ) ; }
void test12 ( ) throws Throwable { BTRawMessage bTRawMessage0 = new BTRawMessage ( ( DirectByteBuffer ) null ) ; boolean boolean0 = bTRawMessage0 . isNoDelay ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNoDelay ( ) ; / * * * Set no - delay for this message * @param no_delay * / void setNoDelay ( ) ; / * * * Get the yet - unsent message types that should be removed * before queueing this message for sending . * @return message types ; null if no types * / Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test13 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) ( - 1 ) , 3 ) ; BTRawMessage bTRawMessage0 = new BTRawMessage ( directByteBuffer0 ) ; bTRawMessage0 . setNoDelay ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test14 ( ) throws Throwable { BTRawMessage bTRawMessage0 = new BTRawMessage ( ( DirectByteBuffer ) null ) ; Message [ ] messageArray0 = bTRawMessage0 . messagesToRemove ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Message [ ] messagesToRemove ( ) ; / * * * Get the message this raw message is based upon . * @return original message * / Message getBaseMessage ( ) ; }
void test15 ( ) throws Throwable { BTRawMessage bTRawMessage0 = new BTRawMessage ( ( DirectByteBuffer ) null ) ; bTRawMessage0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test16 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) ( - 1 ) , 3 ) ; BTRawMessage bTRawMessage0 = new BTRawMessage ( directByteBuffer0 ) ; bTRawMessage0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test0 ( ) throws Throwable { BTSuggestPiece bTSuggestPiece0 = new BTSuggestPiece ( ( - 1800 ) , ( byte ) 41 ) ; int int0 = bTSuggestPiece0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test1 ( ) throws Throwable { BTSuggestPiece bTSuggestPiece0 = new BTSuggestPiece ( 1828 , ( byte ) ( - 38 ) ) ; int int0 = bTSuggestPiece0 . getPieceNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { BTSuggestPiece bTSuggestPiece0 = new BTSuggestPiece ( 0 , ( byte ) 104 ) ; String string0 = bTSuggestPiece0 . getDescription ( ) ; String string1 = bTSuggestPiece0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { BTSuggestPiece bTSuggestPiece0 = new BTSuggestPiece ( ( - 1800 ) , ( byte ) 41 ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTSuggestPiece0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test5 ( ) throws Throwable { BTSuggestPiece bTSuggestPiece0 = new BTSuggestPiece ( ( int ) ( byte ) 111 , ( byte ) 0 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 87 , ( byte ) 4 ) ; BTSuggestPiece bTSuggestPiece1 = ( BTSuggestPiece ) bTSuggestPiece0 . deserialize ( directByteBuffer0 , ( byte ) 87 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test7 ( ) throws Throwable { BTSuggestPiece bTSuggestPiece0 = new BTSuggestPiece ( ( int ) ( byte ) 111 , ( byte ) 0 ) ; bTSuggestPiece0 . getVersion ( ) ; BTSuggestPiece bTSuggestPiece1 = new BTSuggestPiece ( ( - 869 ) , ( byte ) 111 ) ; byte [ ] byteArray0 = bTSuggestPiece1 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test8 ( ) throws Throwable { BTSuggestPiece bTSuggestPiece0 = new BTSuggestPiece ( 0 , ( byte ) 104 ) ; bTSuggestPiece0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test9 ( ) throws Throwable { BTSuggestPiece bTSuggestPiece0 = new BTSuggestPiece ( ( - 1800 ) , ( byte ) 41 ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTSuggestPiece0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceNumber ( ) { return ( piece_number ) ; }
void test0 ( ) throws Throwable { BTUninterested bTUninterested0 = new BTUninterested ( ( byte ) ( - 115 ) ) ; int int0 = bTUninterested0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test1 ( ) throws Throwable { BTUninterested bTUninterested0 = new BTUninterested ( ( byte ) 0 ) ; byte byte0 = bTUninterested0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { BTUninterested bTUninterested0 = new BTUninterested ( ( byte ) 0 ) ; bTUninterested0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { BTUninterested bTUninterested0 = new BTUninterested ( ( byte ) 0 ) ; int int0 = bTUninterested0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { BTUninterested bTUninterested0 = new BTUninterested ( ( byte ) ( - 115 ) ) ; bTUninterested0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test5 ( ) throws Throwable { BTUninterested bTUninterested0 = new BTUninterested ( ( byte ) ( - 115 ) ) ; byte [ ] byteArray0 = bTUninterested0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test6 ( ) throws Throwable { BTUninterested bTUninterested0 = new BTUninterested ( ( byte ) ( - 115 ) ) ; String string0 = bTUninterested0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test7 ( ) throws Throwable { BTUninterested bTUninterested0 = new BTUninterested ( ( byte ) ( - 115 ) ) ; String string0 = bTUninterested0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test8 ( ) throws Throwable { BTUninterested bTUninterested0 = new BTUninterested ( ( byte ) ( - 115 ) ) ; BTUninterested bTUninterested1 = ( BTUninterested ) bTUninterested0 . deserialize ( ( DirectByteBuffer ) null , ( byte ) ( - 115 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test10 ( ) throws Throwable { BTUninterested bTUninterested0 = new BTUninterested ( ( byte ) 103 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) ( - 13 ) , ( byte ) 103 ) ; directByteBuffer0 . flip ( ( byte ) ( - 13 ) ) ; BTUninterested bTUninterested1 = ( BTUninterested ) bTUninterested0 . deserialize ( directByteBuffer0 , ( byte ) 36 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { BTInterested bTInterested0 = new BTInterested ( ( byte ) ( - 115 ) ) ; String string0 = bTInterested0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test1 ( ) throws Throwable { BTInterested bTInterested0 = new BTInterested ( ( byte ) 0 ) ; int int0 = bTInterested0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { BTInterested bTInterested0 = new BTInterested ( ( byte ) ( - 115 ) ) ; String string0 = bTInterested0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { BTInterested bTInterested0 = new BTInterested ( ( byte ) ( - 115 ) ) ; bTInterested0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { BTInterested bTInterested0 = new BTInterested ( ( byte ) 0 ) ; byte byte0 = bTInterested0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test5 ( ) throws Throwable { BTInterested bTInterested0 = new BTInterested ( ( byte ) ( - 115 ) ) ; int int0 = bTInterested0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test6 ( ) throws Throwable { BTInterested bTInterested0 = new BTInterested ( ( byte ) ( - 115 ) ) ; byte [ ] byteArray0 = bTInterested0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test7 ( ) throws Throwable { BTInterested bTInterested0 = new BTInterested ( ( byte ) 0 ) ; bTInterested0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test8 ( ) throws Throwable { BTInterested bTInterested0 = new BTInterested ( ( byte ) ( - 115 ) ) ; BTInterested bTInterested1 = ( BTInterested ) bTInterested0 . deserialize ( ( DirectByteBuffer ) null , ( byte ) ( - 115 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test10 ( ) throws Throwable { BTInterested bTInterested0 = new BTInterested ( ( byte ) 103 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) ( - 13 ) , ( byte ) 103 ) ; directByteBuffer0 . flip ( ( byte ) ( - 13 ) ) ; BTInterested bTInterested1 = ( BTInterested ) bTInterested0 . deserialize ( directByteBuffer0 , ( byte ) 36 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { BTMessageFactory bTMessageFactory0 = new BTMessageFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { Message [ ] messageArray0 = new Message [ 1 ] ; BTMessageFactory . LegacyData bTMessageFactory_LegacyData0 = new BTMessageFactory . LegacyData ( 0 , true , messageArray0 , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) ( - 13 ) , 155 ) ; ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0 . getReferenceCountedBuffer ( ) ; int int0 = BTMessageFactory . getMessageType ( ( DirectByteBuffer ) referenceCountedDirectByteBuffer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageType ( ) { return ( msg_type ) ; }
void test5 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 81 , 1410 ) ; directByteBuffer0 . put ( ( byte ) 81 , ( byte ) 81 ) ; int int0 = BTMessageFactory . getMessageType ( directByteBuffer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageType ( ) { return ( msg_type ) ; }
void test6 ( ) throws Throwable { AZStatRequest aZStatRequest0 = new AZStatRequest ( ( Map ) null , ( byte ) 96 ) ; RawMessage rawMessage0 = BTMessageFactory . createBTRawMessage ( ( Message ) aZStatRequest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RawMessage createBTRawMessage ( Message base_message ) { if ( base_message instanceof RawMessage ) { / / used for handshake and keep - alive messages return ( RawMessage ) base_message ; } LegacyData ld = ( LegacyData ) legacy_data . get ( base_message . getID ( ) ) ; if ( ld = = null ) { Debug . out ( "legacy message type id not found for [ " + base_message . getID ( ) + " ] " ) ; return null ; / / message id type not found } DirectByteBuffer [ ] payload = base_message . getData ( ) ; int payload_size = 0 ; for ( int i = 0 ; i < payload . length ; i + + ) { payload_size + = payload [ i ] . remaining ( DirectByteBuffer . SS_MSG ) ; } DirectByteBuffer header = DirectByteBufferPool . getBuffer ( DirectByteBuffer . AL_MSG_BT_HEADER , 5 ) ; header . putInt ( DirectByteBuffer . SS_MSG , 1 + payload_size ) ; header . put ( DirectByteBuffer . SS_MSG , ld . bt_id ) ; header . flip ( DirectByteBuffer . SS_MSG ) ; DirectByteBuffer [ ] raw_buffs = new DirectByteBuffer [ payload . length + 1 ] ; raw_buffs [ 0 ] = header ; for ( int i = 0 ; i < payload . length ; i + + ) { raw_buffs [ i + 1 ] = payload [ i ] ; } return new RawMessageImpl ( base_message , raw_buffs , ld . priority , ld . is_no_delay , ld . to_remove ) ; }
void test7 ( ) throws Throwable { BTRawMessage bTRawMessage0 = new BTRawMessage ( ( DirectByteBuffer ) null ) ; BTRawMessage bTRawMessage1 = ( BTRawMessage ) BTMessageFactory . createBTRawMessage ( ( Message ) bTRawMessage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test8 ( ) throws Throwable { BTSuggestPiece bTSuggestPiece0 = new BTSuggestPiece ( 155 , ( byte ) ( - 13 ) ) ; RawMessageImpl rawMessageImpl0 = ( RawMessageImpl ) BTMessageFactory . createBTRawMessage ( ( Message ) bTSuggestPiece0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test0 ( ) throws Throwable { BTUnchoke bTUnchoke0 = new BTUnchoke ( ( byte ) ( - 115 ) ) ; String string0 = bTUnchoke0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test1 ( ) throws Throwable { BTUnchoke bTUnchoke0 = new BTUnchoke ( ( byte ) 0 ) ; bTUnchoke0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { BTUnchoke bTUnchoke0 = new BTUnchoke ( ( byte ) 0 ) ; byte byte0 = bTUnchoke0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { BTUnchoke bTUnchoke0 = new BTUnchoke ( ( byte ) ( - 115 ) ) ; int int0 = bTUnchoke0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { BTUnchoke bTUnchoke0 = new BTUnchoke ( ( byte ) ( - 115 ) ) ; String string0 = bTUnchoke0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test5 ( ) throws Throwable { BTUnchoke bTUnchoke0 = new BTUnchoke ( ( byte ) 0 ) ; int int0 = bTUnchoke0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test6 ( ) throws Throwable { BTUnchoke bTUnchoke0 = new BTUnchoke ( ( byte ) ( - 115 ) ) ; byte [ ] byteArray0 = bTUnchoke0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test7 ( ) throws Throwable { BTUnchoke bTUnchoke0 = new BTUnchoke ( ( byte ) ( - 115 ) ) ; bTUnchoke0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test8 ( ) throws Throwable { BTUnchoke bTUnchoke0 = new BTUnchoke ( ( byte ) ( - 115 ) ) ; BTUnchoke bTUnchoke1 = ( BTUnchoke ) bTUnchoke0 . deserialize ( ( DirectByteBuffer ) null , ( byte ) ( - 115 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test10 ( ) throws Throwable { BTUnchoke bTUnchoke0 = new BTUnchoke ( ( byte ) 103 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) ( - 13 ) , ( byte ) 103 ) ; directByteBuffer0 . flip ( ( byte ) ( - 13 ) ) ; BTUnchoke bTUnchoke1 = ( BTUnchoke ) bTUnchoke0 . deserialize ( directByteBuffer0 , ( byte ) 36 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( ( - 679 ) , ( - 679 ) , ( - 679 ) , ( byte ) ( - 12 ) ) ; int int0 = bTRequest0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test1 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( ( - 679 ) , ( - 679 ) , ( - 679 ) , ( byte ) ( - 12 ) ) ; byte byte0 = bTRequest0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test2 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( ( - 10 ) , ( - 10 ) , ( - 10 ) , ( byte ) 28 ) ; byte [ ] byteArray0 = bTRequest0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( 0 , 0 , 0 , ( byte ) 94 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( 0 , 0 , 0 , ( byte ) 94 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test5 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( 26 , 26 , 26 , ( byte ) 31 ) ; int int0 = bTRequest0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test6 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( 0 , 0 , 0 , ( byte ) 94 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test7 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( 26 , 26 , 26 , ( byte ) 31 ) ; bTRequest0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test9 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( 26 , 26 , 26 , ( byte ) 31 ) ; String string0 = bTRequest0 . getDescription ( ) ; String string1 = bTRequest0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test10 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( ( - 10 ) , ( - 10 ) , ( - 10 ) , ( byte ) 28 ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTRequest0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return ( file . getLength ( ) ) ; }
void test12 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( 0 , 0 , 0 , ( byte ) 12 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 12 , ( byte ) 12 ) ; BTRequest bTRequest1 = ( BTRequest ) bTRequest0 . deserialize ( directByteBuffer0 , ( byte ) 12 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test13 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( 0 , 0 , 0 , ( byte ) 94 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceNumber ( ) { return ( piece_number ) ; }
void test14 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( ( - 10 ) , ( - 10 ) , ( - 10 ) , ( byte ) 28 ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTRequest0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test15 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( ( - 10 ) , ( - 10 ) , ( - 10 ) , ( byte ) 28 ) ; boolean boolean0 = bTRequest0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test16 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( 0 , 0 , 0 , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test17 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( 26 , 26 , 26 , ( byte ) 31 ) ; boolean boolean0 = bTRequest0 . equals ( ( Object ) "BT_REQUEST piece #26 : 26 - > 51" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test18 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( 0 , 0 , 0 , ( byte ) 94 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test19 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( 0 , 364 , 364 , ( byte ) 0 ) ; BTRequest bTRequest1 = new BTRequest ( ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPieceNumber ( ) { return ( piece_number ) ; }
void test20 ( ) throws Throwable { BTRequest bTRequest0 = new BTRequest ( ( int ) ( byte ) 94 , ( int ) ( byte ) 94 , ( int ) ( byte ) 94 , ( byte ) 94 ) ; BTRequest bTRequest1 = new BTRequest ( ( int ) ( byte ) 94 , 94 , ( int ) ( byte ) 94 , ( byte ) 94 ) ; boolean boolean0 = bTRequest0 . equals ( ( Object ) bTRequest1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test0 ( ) throws Throwable { BTDHTPort bTDHTPort0 = new BTDHTPort ( 1125 ) ; byte byte0 = bTDHTPort0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test1 ( ) throws Throwable { BTDHTPort bTDHTPort0 = new BTDHTPort ( 1125 ) ; String string0 = bTDHTPort0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test2 ( ) throws Throwable { BTDHTPort bTDHTPort0 = new BTDHTPort ( ( - 1873 ) ) ; int int0 = bTDHTPort0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test3 ( ) throws Throwable { BTDHTPort bTDHTPort0 = new BTDHTPort ( 7 ) ; String string0 = bTDHTPort0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test4 ( ) throws Throwable { BTDHTPort bTDHTPort0 = new BTDHTPort ( 7 ) ; byte [ ] byteArray0 = bTDHTPort0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test5 ( ) throws Throwable { BTDHTPort bTDHTPort0 = new BTDHTPort ( 1125 ) ; int int0 = bTDHTPort0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDHTPort ( ) { return port ; }
void test6 ( ) throws Throwable { BTDHTPort bTDHTPort0 = new BTDHTPort ( 1125 ) ; int int0 = bTDHTPort0 . getDHTPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDHTPort ( ) { return port ; }
void test9 ( ) throws Throwable { BTDHTPort bTDHTPort0 = new BTDHTPort ( 870 ) ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 16 , 2 ) ; BTDHTPort bTDHTPort1 = ( BTDHTPort ) bTDHTPort0 . deserialize ( directByteBuffer0 , ( byte ) 16 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDHTPort ( ) { return port ; }
void test10 ( ) throws Throwable { BTDHTPort bTDHTPort0 = new BTDHTPort ( 7 ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTDHTPort0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test11 ( ) throws Throwable { BTDHTPort bTDHTPort0 = new BTDHTPort ( ( - 1873 ) ) ; bTDHTPort0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDHTPort ( ) { return port ; }
void test12 ( ) throws Throwable { BTDHTPort bTDHTPort0 = new BTDHTPort ( 7 ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTDHTPort0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDHTPort ( ) { return port ; }
void test1 ( ) throws Throwable { AZStatRequest aZStatRequest0 = new AZStatRequest ( ( Map ) null , ( byte ) 55 ) ; BTLTMessage bTLTMessage0 = new BTLTMessage ( ( Message ) aZStatRequest0 , ( byte ) 55 ) ; String string0 = bTLTMessage0 . getID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test2 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( 0 , 0 , 0 , 0 , ( byte ) 0 ) ; BTLTMessage bTLTMessage0 = new BTLTMessage ( ( Message ) aZRequestHint0 , ( byte ) 0 ) ; String string0 = bTLTMessage0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFeatureID ( ) { return message . getFeatureID ( ) ; }
void test4 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( ( - 697 ) , 906 , 1195 , ( - 66 ) , ( byte ) 7 ) ; BTLTMessage bTLTMessage0 = new BTLTMessage ( ( Message ) aZRequestHint0 , ( byte ) 47 ) ; byte [ ] byteArray0 = bTLTMessage0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getIDBytes ( ) { return message . getIDBytes ( ) ; }
void test5 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( 0 , 0 , 0 , 0 , ( byte ) 0 ) ; BTLTMessage bTLTMessage0 = new BTLTMessage ( ( Message ) aZRequestHint0 , ( byte ) 0 ) ; int int0 = bTLTMessage0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFeatureSubID ( ) { return message . getFeatureSubID ( ) ; }
void test6 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( 0 , 0 , 0 , 0 , ( byte ) 0 ) ; BTLTMessage bTLTMessage0 = new BTLTMessage ( ( Message ) aZRequestHint0 , ( byte ) 0 ) ; byte byte0 = bTLTMessage0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test7 ( ) throws Throwable { AZRequestHint aZRequestHint0 = new AZRequestHint ( ( - 697 ) , 906 , 1195 , ( - 66 ) , ( byte ) 7 ) ; BTLTMessage bTLTMessage0 = new BTLTMessage ( ( Message ) aZRequestHint0 , ( byte ) 47 ) ; int int0 = bTLTMessage0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test8 ( ) throws Throwable { BTLTMessage bTLTMessage0 = new BTLTMessage ( ( Message ) null , ( byte ) ( - 59 ) ) ; bTLTMessage0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test9 ( ) throws Throwable { AZStatRequest aZStatRequest0 = new AZStatRequest ( ( Map ) null , ( byte ) 55 ) ; BTLTMessage bTLTMessage0 = new BTLTMessage ( ( Message ) aZStatRequest0 , ( byte ) 55 ) ; bTLTMessage0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test10 ( ) throws Throwable { AZStatRequest aZStatRequest0 = new AZStatRequest ( ( Map ) null , ( byte ) 55 ) ; BTLTMessage bTLTMessage0 = new BTLTMessage ( ( Message ) aZStatRequest0 , ( byte ) 55 ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTLTMessage0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void destroy ( ) ; / * * * For notification of queue events . * / interface MessageQueueListener { / * * * A message has been read from the connection . * @param message recevied * @return true if this message was accepted , false if not handled * / boolean messageReceived ( Message message ) ; / * * * The given number of protocol ( overhead ) bytes read from the connection . * @param byte_count number of protocol bytes * / void protocolBytesReceived ( int byte_count ) ; / * * * The given number of ( piece ) data bytes read from the connection . * @param byte_count number of data bytes * / void dataBytesReceived ( int byte_count ) ; boolean isPriority ( ) ; }
void test11 ( ) throws Throwable { AZStatRequest aZStatRequest0 = new AZStatRequest ( ( Map ) null , ( byte ) 55 ) ; BTLTMessage bTLTMessage0 = new BTLTMessage ( ( Message ) aZStatRequest0 , ( byte ) 55 ) ; DirectByteBuffer [ ] directByteBufferArray0 = bTLTMessage0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getData ( String id ) { return mapData . get ( id ) ; }
void test0 ( ) throws Throwable { LTDisabledExtensionMessage lTDisabledExtensionMessage0 = LTDisabledExtensionMessage . INSTANCE ; int int0 = lTDisabledExtensionMessage0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFeatureSubID ( ) { return message . getFeatureSubID ( ) ; }
void test1 ( ) throws Throwable { LTDisabledExtensionMessage lTDisabledExtensionMessage0 = LTDisabledExtensionMessage . INSTANCE ; DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 95 , ( byte ) 95 ) ; LTDisabledExtensionMessage lTDisabledExtensionMessage1 = ( LTDisabledExtensionMessage ) lTDisabledExtensionMessage0 . deserialize ( directByteBuffer0 , ( byte ) 95 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Message deserialize ( DirectByteBuffer data , byte version ) throws MessageException { return message . deserialize ( data , version ) ; }
void test2 ( ) throws Throwable { LTDisabledExtensionMessage lTDisabledExtensionMessage0 = LTDisabledExtensionMessage . INSTANCE ; String string0 = lTDisabledExtensionMessage0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFeatureID ( ) { return message . getFeatureID ( ) ; }
void test3 ( ) throws Throwable { LTDisabledExtensionMessage lTDisabledExtensionMessage0 = LTDisabledExtensionMessage . INSTANCE ; String string0 = lTDisabledExtensionMessage0 . getID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test4 ( ) throws Throwable { LTDisabledExtensionMessage lTDisabledExtensionMessage0 = LTDisabledExtensionMessage . INSTANCE ; lTDisabledExtensionMessage0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFeatureSubID ( ) { return message . getFeatureSubID ( ) ; }
void test5 ( ) throws Throwable { LTDisabledExtensionMessage lTDisabledExtensionMessage0 = LTDisabledExtensionMessage . INSTANCE ; String string0 = lTDisabledExtensionMessage0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test6 ( ) throws Throwable { LTDisabledExtensionMessage lTDisabledExtensionMessage0 = LTDisabledExtensionMessage . INSTANCE ; int int0 = lTDisabledExtensionMessage0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test8 ( ) throws Throwable { LTDisabledExtensionMessage lTDisabledExtensionMessage0 = LTDisabledExtensionMessage . INSTANCE ; byte byte0 = lTDisabledExtensionMessage0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test9 ( ) throws Throwable { LTDisabledExtensionMessage lTDisabledExtensionMessage0 = LTDisabledExtensionMessage . INSTANCE ; byte [ ] byteArray0 = lTDisabledExtensionMessage0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getIDBytes ( ) { return message . getIDBytes ( ) ; }
void test0 ( ) throws Throwable { LTMessageEncoder lTMessageEncoder0 = new LTMessageEncoder ( ( Object ) null ) ; HashMap < Integer , Byte > hashMap0 = new HashMap < Integer , Byte > ( ) ; AZGenericMapPayload aZGenericMapPayload0 = new AZGenericMapPayload ( "yg * * hlyC@~ | " , ( Map ) hashMap0 , ( byte ) ( - 110 ) ) ; RawMessage [ ] rawMessageArray0 = lTMessageEncoder0 . encodeMessage ( ( Message ) aZGenericMapPayload0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RawMessage [ ] encodeMessage ( Message message ) { String id = message . getID ( ) ; / / System . out . println ( "encodeMessage : " + message . getID ( ) ) ; RawMessage raw_message = null ; if ( id . equals ( BTMessage . ID_BT_HANDSHAKE ) ) { raw_message = http_connection . encodeHandShake ( message ) ; } else if ( id . equals ( BTMessage . ID_BT_CHOKE ) ) { raw_message = http_connection . encodeChoke ( ) ; } else if ( id . equals ( BTMessage . ID_BT_UNCHOKE ) ) { raw_message = http_connection . encodeUnchoke ( ) ; } else if ( id . equals ( BTMessage . ID_BT_BITFIELD ) ) { raw_message = http_connection . encodeBitField ( ) ; } else if ( id . equals ( BTMessage . ID_BT_PIECE ) ) { return ( http_connection . encodePiece ( message ) ) ; } else if ( id . equals ( HTTPMessage . MSG_ID ) ) { raw_message = ( ( HTTPMessage ) message ) . encode ( message ) ; } if ( raw_message = = null ) { raw_message = http_connection . getEmptyRawMessage ( message ) ; } return ( new RawMessage [ ] { raw_message } ) ; }
void test1 ( ) throws Throwable { LTMessageEncoder lTMessageEncoder0 = new LTMessageEncoder ( ( Object ) "AZ1" ) ; HashMap < Number , Map . Entry < LTMessage , Byte > > hashMap0 = new HashMap < Number , Map . Entry < LTMessage , Byte > > ( ) ; LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) hashMap0 , ( byte ) 87 ) ; RawMessage [ ] rawMessageArray0 = lTMessageEncoder0 . encodeMessage ( ( Message ) lTHandshake0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RawMessage [ ] encodeMessage ( Message message ) { String id = message . getID ( ) ; / / System . out . println ( "encodeMessage : " + message . getID ( ) ) ; RawMessage raw_message = null ; if ( id . equals ( BTMessage . ID_BT_HANDSHAKE ) ) { raw_message = http_connection . encodeHandShake ( message ) ; } else if ( id . equals ( BTMessage . ID_BT_CHOKE ) ) { raw_message = http_connection . encodeChoke ( ) ; } else if ( id . equals ( BTMessage . ID_BT_UNCHOKE ) ) { raw_message = http_connection . encodeUnchoke ( ) ; } else if ( id . equals ( BTMessage . ID_BT_BITFIELD ) ) { raw_message = http_connection . encodeBitField ( ) ; } else if ( id . equals ( BTMessage . ID_BT_PIECE ) ) { return ( http_connection . encodePiece ( message ) ) ; } else if ( id . equals ( HTTPMessage . MSG_ID ) ) { raw_message = ( ( HTTPMessage ) message ) . encode ( message ) ; } if ( raw_message = = null ) { raw_message = http_connection . getEmptyRawMessage ( message ) ; } return ( new RawMessage [ ] { raw_message } ) ; }
void test2 ( ) throws Throwable { LTMessageEncoder lTMessageEncoder0 = new LTMessageEncoder ( ( Object ) "AZ_REQUEST_HINT" ) ; UTMetaData uTMetaData0 = new UTMetaData ( ( int ) ( byte ) ( - 32 ) , ( byte ) ( - 32 ) ) ; RawMessage [ ] rawMessageArray0 = lTMessageEncoder0 . encodeMessage ( ( Message ) uTMetaData0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RawMessage [ ] encodeMessage ( Message message ) { String id = message . getID ( ) ; / / System . out . println ( "encodeMessage : " + message . getID ( ) ) ; RawMessage raw_message = null ; if ( id . equals ( BTMessage . ID_BT_HANDSHAKE ) ) { raw_message = http_connection . encodeHandShake ( message ) ; } else if ( id . equals ( BTMessage . ID_BT_CHOKE ) ) { raw_message = http_connection . encodeChoke ( ) ; } else if ( id . equals ( BTMessage . ID_BT_UNCHOKE ) ) { raw_message = http_connection . encodeUnchoke ( ) ; } else if ( id . equals ( BTMessage . ID_BT_BITFIELD ) ) { raw_message = http_connection . encodeBitField ( ) ; } else if ( id . equals ( BTMessage . ID_BT_PIECE ) ) { return ( http_connection . encodePiece ( message ) ) ; } else if ( id . equals ( HTTPMessage . MSG_ID ) ) { raw_message = ( ( HTTPMessage ) message ) . encode ( message ) ; } if ( raw_message = = null ) { raw_message = http_connection . getEmptyRawMessage ( message ) ; } return ( new RawMessage [ ] { raw_message } ) ; }
void test3 ( ) throws Throwable { LTMessageEncoder lTMessageEncoder0 = new LTMessageEncoder ( ( Object ) "AZ1" ) ; HashMap < Number , Map . Entry < LTMessage , Byte > > hashMap0 = new HashMap < Number , Map . Entry < LTMessage , Byte > > ( ) ; lTMessageEncoder0 . updateSupportedExtensions ( ( Map ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test4 ( ) throws Throwable { LTMessageEncoder lTMessageEncoder0 = new LTMessageEncoder ( ( Object ) null ) ; HashMap < Integer , Byte > hashMap0 = new HashMap < Integer , Byte > ( ) ; Byte byte0 = new Byte ( ( byte ) ( - 110 ) ) ; AZGenericMapPayload aZGenericMapPayload0 = new AZGenericMapPayload ( "yg * * hlyC@~ | " , ( Map ) hashMap0 , ( byte ) ( - 110 ) ) ; Integer integer0 = new Integer ( ( int ) ( byte ) ( - 110 ) ) ; hashMap0 . put ( integer0 , byte0 ) ; Map < Object , Object > map0 = aZGenericMapPayload0 . getMapPayload ( ) ; lTMessageEncoder0 . updateSupportedExtensions ( map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsUTPEX ( ) { if ( this . extension_map = = null ) { return false ; } Number num = ( Number ) this . extension_map . get ( "ut_pex" ) ; return ( num ! = null & & num . intValue ( ) ! = 0 ) ; }
void test5 ( ) throws Throwable { LTMessageEncoder lTMessageEncoder0 = new LTMessageEncoder ( ( Object ) "BT_ALLOWED_FAST" ) ; HashMap < String , Number > hashMap0 = new HashMap < String , Number > ( ) ; hashMap0 . put ( "BT_ALLOWED_FAST" , ( Number ) 46 ) ; AZStatReply aZStatReply0 = new AZStatReply ( ( Map ) hashMap0 , ( byte ) 1 ) ; Map < Object , Object > map0 = aZStatReply0 . getReply ( ) ; lTMessageEncoder0 . updateSupportedExtensions ( map0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test6 ( ) throws Throwable { LTMessageEncoder lTMessageEncoder0 = new LTMessageEncoder ( ( Object ) "AZ1" ) ; boolean boolean0 = lTMessageEncoder0 . supportsUTPEX ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsUTPEX ( ) { if ( this . extension_map = = null ) { return false ; } Number num = ( Number ) this . extension_map . get ( "ut_pex" ) ; return ( num ! = null & & num . intValue ( ) ! = 0 ) ; }
void test7 ( ) throws Throwable { LTMessageEncoder lTMessageEncoder0 = new LTMessageEncoder ( ( Object ) null ) ; boolean boolean0 = lTMessageEncoder0 . supportsUTMetaData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsUTMetaData ( ) { if ( this . extension_map = = null ) { return false ; } Number num = ( Number ) this . extension_map . get ( "ut_metadata" ) ; return ( num ! = null & & num . intValue ( ) ! = 0 ) ; }
void test0 ( ) throws Throwable { LTMessageFactory lTMessageFactory0 = new LTMessageFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) null , ( byte ) 0 ) ; byte byte0 = lTHandshake0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test1 ( ) throws Throwable { HashMap < Object , Map < Number , Number > > hashMap0 = new HashMap < Object , Map < Number , Number > > ( ) ; LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) hashMap0 , ( byte ) 65 ) ; String string0 = lTHandshake0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { HashMap < Number , Map < Number , Long > > hashMap0 = new HashMap < Number , Map < Number , Long > > ( ) ; LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) hashMap0 , ( byte ) 57 ) ; byte [ ] byteArray0 = lTHandshake0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) null , ( byte ) 0 ) ; Map < Object , Object > map0 = lTHandshake0 . getDataMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { String str = " [ " ; for ( int i = 0 ; i < protocols . length ; i + + ) { str + = ( i = = 0 ? "" : " , " ) + protocols [ i ] . getDescription ( ) ; } return ( str + " ] " ) ; }
void test4 ( ) throws Throwable { HashMap < Number , Map < Number , Long > > hashMap0 = new HashMap < Number , Map < Number , Long > > ( ) ; LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) hashMap0 , ( byte ) 57 ) ; int int0 = lTHandshake0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test6 ( ) throws Throwable { HashMap < Number , Map < Number , Long > > hashMap0 = new HashMap < Number , Map < Number , Long > > ( ) ; LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) hashMap0 , ( byte ) 57 ) ; int int0 = lTHandshake0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test10 ( ) throws Throwable { LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) null , ( byte ) 15 ) ; lTHandshake0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBencodedString ( ) { if ( this . bencoded_string = = null ) { try { this . bencoded_string = new String ( this . getBencodedData ( ) , Constants . BYTE_ENCODING ) ; } catch ( java . io . UnsupportedEncodingException uee ) { this . bencoded_string = "" ; Debug . printStackTrace ( uee ) ; } } return this . bencoded_string ; }
void test12 ( ) throws Throwable { HashMap < Number , Map < Number , Long > > hashMap0 = new HashMap < Number , Map < Number , Long > > ( ) ; LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) hashMap0 , ( byte ) 57 ) ; String string0 = lTHandshake0 . getDescription ( ) ; String string1 = lTHandshake0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test13 ( ) throws Throwable { HashMap < Number , Map < Number , Long > > hashMap0 = new HashMap < Number , Map < Number , Long > > ( ) ; LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) hashMap0 , ( byte ) 57 ) ; lTHandshake0 . getBencodedString ( ) ; String string0 = lTHandshake0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test14 ( ) throws Throwable { HashMap < Number , Map < Number , Long > > hashMap0 = new HashMap < Number , Map < Number , Long > > ( ) ; LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) hashMap0 , ( byte ) 57 ) ; lTHandshake0 . getClientName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test15 ( ) throws Throwable { HashMap < Object , Map < Number , Number > > hashMap0 = new HashMap < Object , Map < Number , Number > > ( ) ; LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) hashMap0 , ( byte ) 65 ) ; boolean boolean0 = lTHandshake0 . isUploadOnly ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test16 ( ) throws Throwable { LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) null , ( byte ) 0 ) ; lTHandshake0 . getIPv6 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test17 ( ) throws Throwable { HashMap < Map < Number , Integer > , Object > hashMap0 = new HashMap < Map < Number , Integer > , Object > ( ) ; LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) hashMap0 , ( byte ) 6 ) ; int int0 = lTHandshake0 . getTCPListeningPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test18 ( ) throws Throwable { HashMap < Map < Number , Integer > , Object > hashMap0 = new HashMap < Map < Number , Integer > , Object > ( ) ; LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) hashMap0 , ( byte ) 6 ) ; lTHandshake0 . isCryptoRequested ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test19 ( ) throws Throwable { HashMap < Map < Object , Long > , String > hashMap0 = new HashMap < Map < Object , Long > , String > ( ) ; LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) hashMap0 , ( byte ) ( - 52 ) ) ; lTHandshake0 . addDefaultExtensionMappings ( false , true ) ; Map < Object , Object > map0 = lTHandshake0 . getExtensionMapping ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test20 ( ) throws Throwable { HashMap < Number , Map < Number , Long > > hashMap0 = new HashMap < Number , Map < Number , Long > > ( ) ; LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) hashMap0 , ( byte ) 57 ) ; Map < Object , Object > map0 = lTHandshake0 . getExtensionMapping ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test21 ( ) throws Throwable { HashMap < Object , Map < String , Object > > hashMap0 = new HashMap < Object , Map < String , Object > > ( ) ; LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) hashMap0 , ( byte ) 72 ) ; int int0 = lTHandshake0 . getMetadataSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test22 ( ) throws Throwable { HashMap < Object , Map < String , Object > > hashMap0 = new HashMap < Object , Map < String , Object > > ( ) ; LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) hashMap0 , ( byte ) 72 ) ; lTHandshake0 . addDefaultExtensionMappings ( false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test23 ( ) throws Throwable { HashMap < Map < Number , Integer > , Object > hashMap0 = new HashMap < Map < Number , Integer > , Object > ( ) ; LTHandshake lTHandshake0 = new LTHandshake ( ( Map ) hashMap0 , ( byte ) 6 ) ; lTHandshake0 . addDefaultExtensionMappings ( true , false ) ; lTHandshake0 . addDefaultExtensionMappings ( true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test0 ( ) throws Throwable { UTMetaData uTMetaData0 = new UTMetaData ( 0 , ( byte ) ( - 25 ) ) ; int int0 = uTMetaData0 . getFeatureSubID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DiskManagerPiece getPiece ( int index ) { return ( pieces [ index ] ) ; }
void test1 ( ) throws Throwable { UTMetaData uTMetaData0 = new UTMetaData ( 0 , ( byte ) ( - 25 ) ) ; byte [ ] byteArray0 = uTMetaData0 . getIDBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { UTMetaData uTMetaData0 = new UTMetaData ( 1 , ( ByteBuffer ) null , 1 , ( byte ) ( - 65 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DiskManagerPiece getPiece ( int index ) { return ( pieces [ index ] ) ; }
void test3 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 0 , 2000 ) ; ByteBuffer byteBuffer0 = directByteBuffer0 . getBuffer ( ( byte ) 94 ) ; UTMetaData uTMetaData0 = new UTMetaData ( ( - 782 ) , byteBuffer0 , 329 , ( byte ) 94 ) ; DirectByteBuffer directByteBuffer1 = uTMetaData0 . getMetadata ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageType ( ) { return ( msg_type ) ; }
void test4 ( ) throws Throwable { UTMetaData uTMetaData0 = new UTMetaData ( 307 , ( byte ) 79 ) ; int int0 = uTMetaData0 . getPiece ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageType ( ) { return ( msg_type ) ; }
void test6 ( ) throws Throwable { UTMetaData uTMetaData0 = new UTMetaData ( 307 , ( byte ) 79 ) ; String string0 = uTMetaData0 . getFeatureID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test7 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 0 , 1027 ) ; ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0 . getReferenceCountedBuffer ( ) ; ByteBuffer byteBuffer0 = referenceCountedDirectByteBuffer0 . getBuffer ( ( byte ) 76 ) ; UTMetaData uTMetaData0 = new UTMetaData ( 1027 , byteBuffer0 , ( int ) ( byte ) 76 , ( byte ) 76 ) ; String string0 = uTMetaData0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test8 ( ) throws Throwable { UTMetaData uTMetaData0 = new UTMetaData ( 307 , ( byte ) 79 ) ; uTMetaData0 . setMetadata ( ( DirectByteBuffer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageType ( ) { return ( msg_type ) ; }
void test9 ( ) throws Throwable { UTMetaData uTMetaData0 = new UTMetaData ( 1 , ( ByteBuffer ) null , 1 , ( byte ) ( - 65 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test10 ( ) throws Throwable { UTMetaData uTMetaData0 = new UTMetaData ( 1 , ( ByteBuffer ) null , 1 , ( byte ) ( - 65 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test11 ( ) throws Throwable { UTMetaData uTMetaData0 = new UTMetaData ( 0 , ( byte ) ( - 25 ) ) ; String string0 = uTMetaData0 . getID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageType ( ) { return ( msg_type ) ; }
void test12 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 79 , ( byte ) 79 ) ; UTMetaData uTMetaData0 = new UTMetaData ( ( Map ) null , directByteBuffer0 , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test14 ( ) throws Throwable { UTMetaData uTMetaData0 = new UTMetaData ( 0 , ( byte ) ( - 25 ) ) ; DirectByteBuffer [ ] directByteBufferArray0 = uTMetaData0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageType ( ) { return ( msg_type ) ; }
void test15 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 0 , 1027 ) ; ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0 . getReferenceCountedBuffer ( ) ; ByteBuffer byteBuffer0 = referenceCountedDirectByteBuffer0 . getBuffer ( ( byte ) 76 ) ; UTMetaData uTMetaData0 = new UTMetaData ( 1027 , byteBuffer0 , ( int ) ( byte ) 76 , ( byte ) 76 ) ; uTMetaData0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DiskManagerPiece getPiece ( int index ) { return ( pieces [ index ] ) ; }
void test16 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 0 , 2000 ) ; ByteBuffer byteBuffer0 = directByteBuffer0 . getBuffer ( ( byte ) 94 ) ; UTMetaData uTMetaData0 = new UTMetaData ( ( - 782 ) , byteBuffer0 , 329 , ( byte ) 94 ) ; uTMetaData0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test17 ( ) throws Throwable { UTMetaData uTMetaData0 = new UTMetaData ( 0 , ( byte ) ( - 25 ) ) ; DirectByteBuffer [ ] directByteBufferArray0 = uTMetaData0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DiskManagerPiece getPiece ( int index ) { return ( pieces [ index ] ) ; }
void test0 ( ) throws Throwable { LTMessageDecoder lTMessageDecoder0 = new LTMessageDecoder ( ) ; byte [ ] byteArray0 = new byte [ 11 ] ; lTMessageDecoder0 . addExtensionHandler ( ( byte ) 17 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDataBytesDecoded ( ) { return ( 0 ) ; }
void test0 ( ) throws Throwable { PeerMessageLimiter peerMessageLimiter0 = new PeerMessageLimiter ( ) ; peerMessageLimiter0 . countIncomingMessage ( "" , 1135 , 1135 ) ; boolean boolean0 = peerMessageLimiter0 . countIncomingMessage ( "" , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean countIncomingMessage ( String message_id , int max_counts , int time_limit_ms ) { CountData data = ( CountData ) message_counts . get ( message_id ) ; if ( data = = null ) { / / new message data = new CountData ( max_counts , time_limit_ms ) ; message_counts . put ( message_id , data ) ; } long now = SystemTime . getCurrentTime ( ) ; data . counts . addLast ( new Long ( now ) ) ; if ( data . counts . size ( ) > data . max_counts ) { / / we've potentially reached our count limit long cutoff = now - data . time_limit ; / / prune out any expired counts for ( Iterator it = data . counts . iterator ( ) ; it . hasNext ( ) ; ) { long time = ( ( Long ) it . next ( ) ) . longValue ( ) ; if ( time < cutoff ) { / / this count is older than the limit allows it . remove ( ) ; / / drop it } else { / / still within limit break ; } } if ( data . counts . size ( ) > data . max_counts ) { / / too many counts within the time limit return false ; / / return error } } return true ; }
void test1 ( ) throws Throwable { PeerMessageLimiter peerMessageLimiter0 = new PeerMessageLimiter ( ) ; boolean boolean0 = peerMessageLimiter0 . countIncomingMessage ( ( String ) null , ( - 69 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean countIncomingMessage ( String message_id , int max_counts , int time_limit_ms ) { CountData data = ( CountData ) message_counts . get ( message_id ) ; if ( data = = null ) { / / new message data = new CountData ( max_counts , time_limit_ms ) ; message_counts . put ( message_id , data ) ; } long now = SystemTime . getCurrentTime ( ) ; data . counts . addLast ( new Long ( now ) ) ; if ( data . counts . size ( ) > data . max_counts ) { / / we've potentially reached our count limit long cutoff = now - data . time_limit ; / / prune out any expired counts for ( Iterator it = data . counts . iterator ( ) ; it . hasNext ( ) ; ) { long time = ( ( Long ) it . next ( ) ) . longValue ( ) ; if ( time < cutoff ) { / / this count is older than the limit allows it . remove ( ) ; / / drop it } else { / / still within limit break ; } } if ( data . counts . size ( ) > data . max_counts ) { / / too many counts within the time limit return false ; / / return error } } return true ; }
void test2 ( ) throws Throwable { PeerMessageLimiter peerMessageLimiter0 = new PeerMessageLimiter ( ) ; boolean boolean0 = peerMessageLimiter0 . countIncomingMessage ( "LVpyY ; " , 0 , ( - 1386 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean countIncomingMessage ( String message_id , int max_counts , int time_limit_ms ) { CountData data = ( CountData ) message_counts . get ( message_id ) ; if ( data = = null ) { / / new message data = new CountData ( max_counts , time_limit_ms ) ; message_counts . put ( message_id , data ) ; } long now = SystemTime . getCurrentTime ( ) ; data . counts . addLast ( new Long ( now ) ) ; if ( data . counts . size ( ) > data . max_counts ) { / / we've potentially reached our count limit long cutoff = now - data . time_limit ; / / prune out any expired counts for ( Iterator it = data . counts . iterator ( ) ; it . hasNext ( ) ; ) { long time = ( ( Long ) it . next ( ) ) . longValue ( ) ; if ( time < cutoff ) { / / this count is older than the limit allows it . remove ( ) ; / / drop it } else { / / still within limit break ; } } if ( data . counts . size ( ) > data . max_counts ) { / / too many counts within the time limit return false ; / / return error } } return true ; }
void test0 ( ) throws Throwable { boolean boolean0 = PeerClassifier . isAzureusIP ( "Trans" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAzureusIP ( String ip ) { return ( platform_ips . contains ( ip ) ) ; }
void test1 ( ) throws Throwable { boolean boolean0 = PeerClassifier . isClientTypeAllowed ( "Trans" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClientTypeAllowed ( String client_description ) { / / if ( client_description . startsWith ( "BitComet" ) ) return false ; return true ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 29 ] ; String string0 = PeerClassifier . getClientDescription ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClientDescription ( byte [ ] peer_id ) { return BTPeerIDByteDecoder . decode ( peer_id ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 29 ] ; String string0 = PeerClassifier . getPrintablePeerID ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrintablePeerID ( byte [ ] peer_id ) { return BTPeerIDByteDecoder . getPrintablePeerID ( peer_id ) ; }
void test5 ( ) throws Throwable { PeerClassifier peerClassifier0 = new PeerClassifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test6 ( ) throws Throwable { boolean boolean0 = PeerClassifier . fullySupportsFE ( "Trans" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean fullySupportsFE ( String client_description ) { if ( FeatureAvailability . allowAllFEClients ( ) ) { return ( true ) ; } / / some clients don't ever offer any fast - allow pieces so we reciprocate boolean res = ! ( client_description . startsWith ( "\u00B5" ) | | client_description . startsWith ( "Trans" ) ) ; return ( res ) ; }
void test7 ( ) throws Throwable { boolean boolean0 = PeerClassifier . fullySupportsFE ( "\u00B5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean fullySupportsFE ( String client_description ) { if ( FeatureAvailability . allowAllFEClients ( ) ) { return ( true ) ; } / / some clients don't ever offer any fast - allow pieces so we reciprocate boolean res = ! ( client_description . startsWith ( "\u00B5" ) | | client_description . startsWith ( "Trans" ) ) ; return ( res ) ; }
void test8 ( ) throws Throwable { boolean boolean0 = PeerClassifier . fullySupportsFE ( " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean fullySupportsFE ( String client_description ) { if ( FeatureAvailability . allowAllFEClients ( ) ) { return ( true ) ; } / / some clients don't ever offer any fast - allow pieces so we reciprocate boolean res = ! ( client_description . startsWith ( "\u00B5" ) | | client_description . startsWith ( "Trans" ) ) ; return ( res ) ; }
void test0 ( ) throws Throwable { PlatformVuzeActivitiesMessenger platformVuzeActivitiesMessenger0 = new PlatformVuzeActivitiesMessenger ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Map < Object , Object > map0 = PlatformMetaDataMessenger . getParameter ( "v | LUj6" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test1 ( ) throws Throwable { PlatformMetaDataMessenger . TvShowAssociation platformMetaDataMessenger_TvShowAssociation0 = new PlatformMetaDataMessenger . TvShowAssociation ( ) ; String string0 = platformMetaDataMessenger_TvShowAssociation0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { PlatformMetaDataMessenger . MovieAssociation platformMetaDataMessenger_MovieAssociation0 = new PlatformMetaDataMessenger . MovieAssociation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { PlatformMetaDataMessenger . SearchResult platformMetaDataMessenger_SearchResult0 = new PlatformMetaDataMessenger . SearchResult ( ) ; String string0 = platformMetaDataMessenger_SearchResult0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { DHTTransportLoopbackImpl dHTTransportLoopbackImpl0 = ( DHTTransportLoopbackImpl ) DHTTransportFactory . createLoopback ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) ; String getTypeString ( ) ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , NetworkAdminProgressListener listener ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , boolean upnp_map , NetworkAdminProgressListener listener ) throws NetworkAdminException ; String getName ( ) ; }
void test2 ( ) throws Throwable { DHTTransportFactory dHTTransportFactory0 = new DHTTransportFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 12 ] ; DHTTransportLoopbackContactImpl dHTTransportLoopbackContactImpl0 = new DHTTransportLoopbackContactImpl ( ( DHTTransportLoopbackImpl ) null , byteArray0 ) ; dHTTransportLoopbackContactImpl0 . setRandomID ( ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRandomID ( ) ; String getName ( ) ; InetSocketAddress getAddress ( ) ; InetSocketAddress getExternalAddress ( ) ; boolean isAlive ( long timeout ) ; void isAlive ( DHTTransportReplyHandler handler , long timeout ) ; boolean isValid ( ) ; boolean isSleeping ( ) ; void sendPing ( DHTTransportReplyHandler handler ) ; void sendImmediatePing ( DHTTransportReplyHandler handler , long timeout ) ; void sendStats ( DHTTransportReplyHandler handler ) ; void sendStore ( DHTTransportReplyHandler handler , byte [ ] [ ] keys , DHTTransportValue [ ] [ ] value_sets , boolean immediate ) ; void sendQueryStore ( DHTTransportReplyHandler handler , int header_length , List < Object [ ] > key_details ) ; void sendFindNode ( DHTTransportReplyHandler handler , byte [ ] id ) ; void sendFindValue ( DHTTransportReplyHandler handler , byte [ ] key , int max_values , byte flags ) ; void sendKeyBlock ( DHTTransportReplyHandler handler , byte [ ] key_block_request , byte [ ] key_block_signature ) ; DHTTransportFullStats getStats ( ) ; void exportContact ( DataOutputStream os ) throws IOException , DHTTransportException ; void remove ( ) ; void createNetworkPositions ( boolean is_local ) ; DHTNetworkPosition [ ] getNetworkPositions ( ) ; DHTNetworkPosition getNetworkPosition ( byte position_type ) ; DHTTransport getTransport ( ) ; String getString ( ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 12 ] ; DHTTransportLoopbackContactImpl dHTTransportLoopbackContactImpl0 = new DHTTransportLoopbackContactImpl ( ( DHTTransportLoopbackImpl ) null , byteArray0 ) ; byte byte0 = dHTTransportLoopbackContactImpl0 . getProtocolVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getProtocolVersion ( ) ; long getClockSkew ( ) ; void setRandomID ( int id ) ; int getRandomID ( ) ; String getName ( ) ; InetSocketAddress getAddress ( ) ; InetSocketAddress getExternalAddress ( ) ; boolean isAlive ( long timeout ) ; void isAlive ( DHTTransportReplyHandler handler , long timeout ) ; boolean isValid ( ) ; boolean isSleeping ( ) ; void sendPing ( DHTTransportReplyHandler handler ) ; void sendImmediatePing ( DHTTransportReplyHandler handler , long timeout ) ; void sendStats ( DHTTransportReplyHandler handler ) ; void sendStore ( DHTTransportReplyHandler handler , byte [ ] [ ] keys , DHTTransportValue [ ] [ ] value_sets , boolean immediate ) ; void sendQueryStore ( DHTTransportReplyHandler handler , int header_length , List < Object [ ] > key_details ) ; void sendFindNode ( DHTTransportReplyHandler handler , byte [ ] id ) ; void sendFindValue ( DHTTransportReplyHandler handler , byte [ ] key , int max_values , byte flags ) ; void sendKeyBlock ( DHTTransportReplyHandler handler , byte [ ] key_block_request , byte [ ] key_block_signature ) ; DHTTransportFullStats getStats ( ) ; void exportContact ( DataOutputStream os ) throws IOException , DHTTransportException ; void remove ( ) ; void createNetworkPositions ( boolean is_local ) ; DHTNetworkPosition [ ] getNetworkPositions ( ) ; DHTNetworkPosition getNetworkPosition ( byte position_type ) ; DHTTransport getTransport ( ) ; String getString ( ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; DHTTransportLoopbackContactImpl dHTTransportLoopbackContactImpl0 = new DHTTransportLoopbackContactImpl ( ( DHTTransportLoopbackImpl ) null , byteArray0 ) ; String string0 = dHTTransportLoopbackContactImpl0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 12 ] ; DHTTransportLoopbackContactImpl dHTTransportLoopbackContactImpl0 = new DHTTransportLoopbackContactImpl ( ( DHTTransportLoopbackImpl ) null , byteArray0 ) ; long long0 = dHTTransportLoopbackContactImpl0 . getClockSkew ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getClockSkew ( ) ; boolean addInstance ( InetAddress explicit_address ) ; void addListener ( AZInstanceManagerListener l ) ; void removeListener ( AZInstanceManagerListener l ) ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 12 ] ; DHTTransportLoopbackContactImpl dHTTransportLoopbackContactImpl0 = new DHTTransportLoopbackContactImpl ( ( DHTTransportLoopbackImpl ) null , byteArray0 ) ; InetSocketAddress inetSocketAddress0 = dHTTransportLoopbackContactImpl0 . getExternalAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InetAddress getExternalAddress ( ) ; String getString ( ) ; }
void test10 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; DHTTransportLoopbackContactImpl dHTTransportLoopbackContactImpl0 = new DHTTransportLoopbackContactImpl ( ( DHTTransportLoopbackImpl ) null , byteArray0 ) ; DHTTransport dHTTransport0 = dHTTransportLoopbackContactImpl0 . getTransport ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Transport getTransport ( ) ; boolean isConnected ( ) ; Object setUserData ( Object key , Object value ) ; Object getUserData ( Object key ) ; / * * * Listener for notification of connection events . * / interface ConnectionListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified connect timeout * / int connectStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * NOTE : Called only during initial connect attempt . * / void connectSuccess ( ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * NOTE : Called only during initial connect attempt . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; / * * * Handle exception thrown by this connection . * NOTE : Can be called at any time during connection lifetime . * @param error exception * / void exceptionThrown ( Throwable error ) ; String getDescription ( ) ; }
void test11 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; DHTTransportLoopbackContactImpl dHTTransportLoopbackContactImpl0 = new DHTTransportLoopbackContactImpl ( ( DHTTransportLoopbackImpl ) null , byteArray0 ) ; DHTNetworkPosition dHTNetworkPosition0 = dHTTransportLoopbackContactImpl0 . getNetworkPosition ( ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DHTNetworkPosition getNetworkPosition ( byte position_type ) ; DHTTransport getTransport ( ) ; String getString ( ) ; }
void test0 ( ) throws Throwable { CacheEntry cacheEntry0 = new CacheEntry ( 0L ) ; DirectByteBuffer directByteBuffer0 = cacheEntry0 . getBuffer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getBuffer ( ) { return ( buffer ) ; }
void test1 ( ) throws Throwable { CacheEntry cacheEntry0 = new CacheEntry ( 16L ) ; long long0 = cacheEntry0 . getFilePosition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFilePosition ( ) { return ( offset ) ; }
void test2 ( ) throws Throwable { CacheEntry cacheEntry0 = new CacheEntry ( 2046L ) ; int int0 = cacheEntry0 . getUsageCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFilePosition ( ) { return ( offset ) ; }
void test3 ( ) throws Throwable { CacheEntry cacheEntry0 = new CacheEntry ( 2046L ) ; cacheEntry0 . getLastUsed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFilePosition ( ) { return ( offset ) ; }
void test4 ( ) throws Throwable { CacheEntry cacheEntry0 = new CacheEntry ( 16L ) ; cacheEntry0 . isDirty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFilePosition ( ) { return ( offset ) ; }
void test6 ( ) throws Throwable { CacheEntry cacheEntry0 = new CacheEntry ( 2046L ) ; cacheEntry0 . used ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUsageCount ( ) { return ( usage_count ) ; }
void test7 ( ) throws Throwable { CacheEntry cacheEntry0 = new CacheEntry ( 2046L ) ; int int0 = cacheEntry0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFilePosition ( ) { return ( offset ) ; }
void test8 ( ) throws Throwable { CacheEntry cacheEntry0 = new CacheEntry ( 0L ) ; int int0 = cacheEntry0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return ( file . getLength ( ) ) ; }
void test9 ( ) throws Throwable { CacheEntry cacheEntry0 = new CacheEntry ( 4L ) ; cacheEntry0 . setClean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFilePosition ( ) { return ( offset ) ; }
void test11 ( ) throws Throwable { CacheEntry cacheEntry0 = new CacheEntry ( 0L ) ; CacheFileWithCache cacheFileWithCache0 = cacheEntry0 . getFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DiskManagerFileInfo getFile ( ) { return ( file ) ; }
void test12 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 4 , ( byte ) 4 ) ; ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0 . getReferenceCountedBuffer ( ) ; CacheEntry cacheEntry0 = new CacheEntry ( 1532 , ( CacheFileWithCache ) null , ( DirectByteBuffer ) referenceCountedDirectByteBuffer0 , 685L , ( int ) ( byte ) 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return ( dirty ) ; }
void test13 ( ) throws Throwable { DirectByteBuffer directByteBuffer0 = DirectByteBufferPool . getBuffer ( ( byte ) 0 , 1532 ) ; CacheEntry cacheEntry0 = new CacheEntry ( 120000 , ( CacheFileWithCache ) null , directByteBuffer0 , ( long ) 1532 , ( - 673 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return ( dirty ) ; }
void test0 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCacheEnabled ( ) { return ( cache_enabled ) ; }
void test2 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReadCacheEnabled ( ) { return ( cache_read_enabled ) ; }
void test3 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCacheUsed ( ) { long free = cache_space_free ; if ( free < 0 ) { free = 0 ; } return ( cache_size - free ) ; }
void test4 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCacheEnabled ( ) { return ( cache_enabled ) ; }
void test5 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCacheUsed ( ) { long free = cache_space_free ; if ( free < 0 ) { free = 0 ; } return ( cache_size - free ) ; }
void test6 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWriteCacheEnabled ( ) { return ( cache_write_enabled ) ; }
void test7 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCacheEnabled ( ) { return ( cache_enabled ) ; }
void test8 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWriteCacheEnabled ( ) { return ( cache_write_enabled ) ; }
void test9 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWriteCacheEnabled ( ) { return ( cache_write_enabled ) ; }
void test10 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCacheSize ( ) { return ( cache_size ) ; }
void test11 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCacheUsed ( ) { long free = cache_space_free ; if ( free < 0 ) { free = 0 ; } return ( cache_size - free ) ; }
void test12 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReadCacheEnabled ( ) { return ( cache_read_enabled ) ; }
void test13 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCacheEnabled ( ) { return ( cache_enabled ) ; }
void test14 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCacheEnabled ( ) { return ( cache_enabled ) ; }
void test15 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWriteCacheEnabled ( ) { return ( cache_write_enabled ) ; }
void test16 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBytesReadFromFile ( ) ; long getAverageBytesWrittenToCache ( ) ; long getAverageBytesWrittenToFile ( ) ; long getAverageBytesReadFromCache ( ) ; long getAverageBytesReadFromFile ( ) ; long getCacheReadCount ( ) ; long getCacheWriteCount ( ) ; long getFileReadCount ( ) ; long getFileWriteCount ( ) ; / / returns the number of bytes in the requested range that are in cache boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test17 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCacheUsed ( ) { long free = cache_space_free ; if ( free < 0 ) { free = 0 ; } return ( cache_size - free ) ; }
void test18 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void generate ( IndentWriter writer ) { writer . println ( "ImageLoader for " + skinProperties ) ; writer . indent ( ) ; long [ ] sizeCouldBeFree = { 0 } ; long [ ] totalSizeEstimate = { 0 } ; try { writer . indent ( ) ; try { writer . println ( "Non - Disposable : " ) ; writer . indent ( ) ; for ( String key : _mapImages . keySet ( ) ) { ImageLoaderRefInfo info = _mapImages . get ( key ) ; if ( ! info . isNonDisposable ( ) ) { continue ; } writeEvidenceLine ( writer , key , info , totalSizeEstimate , sizeCouldBeFree ) ; } writer . exdent ( ) ; writer . println ( "Disposable : " ) ; writer . indent ( ) ; for ( String key : _mapImages . keySet ( ) ) { ImageLoaderRefInfo info = _mapImages . get ( key ) ; if ( info . isNonDisposable ( ) ) { continue ; } writeEvidenceLine ( writer , key , info , totalSizeEstimate , sizeCouldBeFree ) ; } writer . exdent ( ) ; } finally { writer . exdent ( ) ; } if ( totalSizeEstimate [ 0 ] > 0 ) { writer . println ( ( totalSizeEstimate [ 0 ] / 1024 ) + "k estimated used for images" ) ; } if ( sizeCouldBeFree [ 0 ] > 0 ) { writer . println ( ( sizeCouldBeFree [ 0 ] / 1024 ) + "k could be freed" ) ; } } finally { writer . exdent ( ) ; } }
void test19 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCacheEnabled ( ) { return ( cache_enabled ) ; }
void test20 ( ) throws Throwable { int int0 = CacheFileManagerImpl . convertCacheToFileType ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int convertCacheToFileType ( int cache_type ) { if ( cache_type = = CacheFile . CT_LINEAR ) { return ( FMFile . FT_LINEAR ) ; } else if ( cache_type = = CacheFile . CT_COMPACT ) { return ( FMFile . FT_COMPACT ) ; } else if ( cache_type = = CacheFile . CT_PIECE_REORDER ) { return ( FMFile . FT_PIECE_REORDER ) ; } else { return ( FMFile . FT_PIECE_REORDER_COMPACT ) ; } }
void test21 ( ) throws Throwable { int int0 = CacheFileManagerImpl . convertCacheToFileType ( ( - 1943 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int convertCacheToFileType ( int cache_type ) { if ( cache_type = = CacheFile . CT_LINEAR ) { return ( FMFile . FT_LINEAR ) ; } else if ( cache_type = = CacheFile . CT_COMPACT ) { return ( FMFile . FT_COMPACT ) ; } else if ( cache_type = = CacheFile . CT_PIECE_REORDER ) { return ( FMFile . FT_PIECE_REORDER ) ; } else { return ( FMFile . FT_PIECE_REORDER_COMPACT ) ; } }
void test22 ( ) throws Throwable { int int0 = CacheFileManagerImpl . convertCacheToFileType ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int convertCacheToFileType ( int cache_type ) { if ( cache_type = = CacheFile . CT_LINEAR ) { return ( FMFile . FT_LINEAR ) ; } else if ( cache_type = = CacheFile . CT_COMPACT ) { return ( FMFile . FT_COMPACT ) ; } else if ( cache_type = = CacheFile . CT_PIECE_REORDER ) { return ( FMFile . FT_PIECE_REORDER ) ; } else { return ( FMFile . FT_PIECE_REORDER_COMPACT ) ; } }
void test23 ( ) throws Throwable { int int0 = CacheFileManagerImpl . convertFileToCacheType ( 1769157415 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int convertFileToCacheType ( int file_type ) { if ( file_type = = FMFile . FT_LINEAR ) { return ( CacheFile . CT_LINEAR ) ; } else if ( file_type = = FMFile . FT_COMPACT ) { return ( CacheFile . CT_COMPACT ) ; } else if ( file_type = = FMFile . FT_PIECE_REORDER ) { return ( CacheFile . CT_PIECE_REORDER ) ; } else { return ( CacheFile . CT_PIECE_REORDER_COMPACT ) ; } }
void test24 ( ) throws Throwable { int int0 = CacheFileManagerImpl . convertFileToCacheType ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int convertFileToCacheType ( int file_type ) { if ( file_type = = FMFile . FT_LINEAR ) { return ( CacheFile . CT_LINEAR ) ; } else if ( file_type = = FMFile . FT_COMPACT ) { return ( CacheFile . CT_COMPACT ) ; } else if ( file_type = = FMFile . FT_PIECE_REORDER ) { return ( CacheFile . CT_PIECE_REORDER ) ; } else { return ( CacheFile . CT_PIECE_REORDER_COMPACT ) ; } }
void test25 ( ) throws Throwable { int int0 = CacheFileManagerImpl . convertFileToCacheType ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int convertFileToCacheType ( int file_type ) { if ( file_type = = FMFile . FT_LINEAR ) { return ( CacheFile . CT_LINEAR ) ; } else if ( file_type = = FMFile . FT_COMPACT ) { return ( CacheFile . CT_COMPACT ) ; } else if ( file_type = = FMFile . FT_PIECE_REORDER ) { return ( CacheFile . CT_PIECE_REORDER ) ; } else { return ( CacheFile . CT_PIECE_REORDER_COMPACT ) ; } }
void test26 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWriteCacheEnabled ( ) { return ( cache_write_enabled ) ; }
void test27 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isReadCacheEnabled ( ) { return ( cache_read_enabled ) ; }
void test28 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCacheEnabled ( ) { return ( cache_enabled ) ; }
void test29 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCacheSize ( ) { return ( cache_size ) ; }
void test30 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void cacheEntryUsed ( CacheEntry entry ) throws CacheFileManagerException { try { this_mon . enter ( ) ; / / note that the "get" operation update the MRU in cache_entries if ( cache_entries . get ( entry ) = = null ) { Debug . out ( "Cache inconsistency : entry missing on usage" ) ; throw ( new CacheFileManagerException ( null , "Cache inconsistency : entry missing on usage" ) ) ; } else { entry . used ( ) ; } } finally { this_mon . exit ( ) ; } }
void test31 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCacheSize ( ) { return ( cache_size ) ; }
void test32 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void releaseCacheSpace ( CacheEntry entry ) throws CacheFileManagerException { entry . getBuffer ( ) . returnToPool ( ) ; try { this_mon . enter ( ) ; cache_space_free + = entry . getLength ( ) ; if ( cache_entries . remove ( entry ) = = null ) { Debug . out ( "Cache inconsistency : entry missing on removal" ) ; throw ( new CacheFileManagerException ( null , "Cache inconsistency : entry missing on removal" ) ) ; } / * if ( entry . getType ( ) = = CacheEntry . CT_READ_AHEAD ) { if ( entry . getUsageCount ( ) < 2 ) { System . out . println ( "ra : not used" ) ; } else { System . out . println ( "ra : used" ) ; } } * / / / System . out . println ( "Total cache space = " + cache_space_free ) ; } finally { this_mon . exit ( ) ; } }
void test33 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCacheSize ( ) { return ( cache_size ) ; }
void test34 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCacheSize ( ) { return ( cache_size ) ; }
void test35 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test36 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test37 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test38 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test39 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWriteCacheEnabled ( ) { return ( cache_write_enabled ) ; }
void test0 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileManagerStatsImpl cacheFileManagerStatsImpl0 = new CacheFileManagerStatsImpl ( cacheFileManagerImpl0 ) ; long long0 = cacheFileManagerStatsImpl0 . getBytesWrittenToCache ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBytesWrittenToCache ( ) ; long getBytesWrittenToFile ( ) ; long getBytesReadFromCache ( ) ; long getBytesReadFromFile ( ) ; long getAverageBytesWrittenToCache ( ) ; long getAverageBytesWrittenToFile ( ) ; long getAverageBytesReadFromCache ( ) ; long getAverageBytesReadFromFile ( ) ; long getCacheReadCount ( ) ; long getCacheWriteCount ( ) ; long getFileReadCount ( ) ; long getFileWriteCount ( ) ; / / returns the number of bytes in the requested range that are in cache boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test1 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileManagerStatsImpl cacheFileManagerStatsImpl0 = new CacheFileManagerStatsImpl ( cacheFileManagerImpl0 ) ; long long0 = cacheFileManagerStatsImpl0 . getAverageBytesWrittenToFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getAverageBytesWrittenToFile ( ) ; long getAverageBytesReadFromCache ( ) ; long getAverageBytesReadFromFile ( ) ; long getCacheReadCount ( ) ; long getCacheWriteCount ( ) ; long getFileReadCount ( ) ; long getFileWriteCount ( ) ; / / returns the number of bytes in the requested range that are in cache boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test2 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileManagerStatsImpl cacheFileManagerStatsImpl0 = new CacheFileManagerStatsImpl ( cacheFileManagerImpl0 ) ; long long0 = cacheFileManagerStatsImpl0 . getAverageBytesReadFromCache ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getAverageBytesReadFromCache ( ) ; long getAverageBytesReadFromFile ( ) ; long getCacheReadCount ( ) ; long getCacheWriteCount ( ) ; long getFileReadCount ( ) ; long getFileWriteCount ( ) ; / / returns the number of bytes in the requested range that are in cache boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test3 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileManagerStatsImpl cacheFileManagerStatsImpl0 = new CacheFileManagerStatsImpl ( cacheFileManagerImpl0 ) ; long long0 = cacheFileManagerStatsImpl0 . getAverageBytesWrittenToCache ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getAverageBytesWrittenToCache ( ) ; long getAverageBytesWrittenToFile ( ) ; long getAverageBytesReadFromCache ( ) ; long getAverageBytesReadFromFile ( ) ; long getCacheReadCount ( ) ; long getCacheWriteCount ( ) ; long getFileReadCount ( ) ; long getFileWriteCount ( ) ; / / returns the number of bytes in the requested range that are in cache boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test5 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileManagerStatsImpl cacheFileManagerStatsImpl0 = new CacheFileManagerStatsImpl ( cacheFileManagerImpl0 ) ; long long0 = cacheFileManagerStatsImpl0 . getBytesWrittenToFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBytesWrittenToFile ( ) ; long getBytesReadFromCache ( ) ; long getBytesReadFromFile ( ) ; long getAverageBytesWrittenToCache ( ) ; long getAverageBytesWrittenToFile ( ) ; long getAverageBytesReadFromCache ( ) ; long getAverageBytesReadFromFile ( ) ; long getCacheReadCount ( ) ; long getCacheWriteCount ( ) ; long getFileReadCount ( ) ; long getFileWriteCount ( ) ; / / returns the number of bytes in the requested range that are in cache boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test6 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileManagerStatsImpl cacheFileManagerStatsImpl0 = new CacheFileManagerStatsImpl ( cacheFileManagerImpl0 ) ; long long0 = cacheFileManagerStatsImpl0 . getCacheWriteCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCacheWriteCount ( ) ; long getFileReadCount ( ) ; long getFileWriteCount ( ) ; / / returns the number of bytes in the requested range that are in cache boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test7 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileManagerStatsImpl cacheFileManagerStatsImpl0 = new CacheFileManagerStatsImpl ( cacheFileManagerImpl0 ) ; long long0 = cacheFileManagerStatsImpl0 . getUsedSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUsedSize ( ) ; long getBytesWrittenToCache ( ) ; long getBytesWrittenToFile ( ) ; long getBytesReadFromCache ( ) ; long getBytesReadFromFile ( ) ; long getAverageBytesWrittenToCache ( ) ; long getAverageBytesWrittenToFile ( ) ; long getAverageBytesReadFromCache ( ) ; long getAverageBytesReadFromFile ( ) ; long getCacheReadCount ( ) ; long getCacheWriteCount ( ) ; long getFileReadCount ( ) ; long getFileWriteCount ( ) ; / / returns the number of bytes in the requested range that are in cache boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test8 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileManagerStatsImpl cacheFileManagerStatsImpl0 = new CacheFileManagerStatsImpl ( cacheFileManagerImpl0 ) ; long long0 = cacheFileManagerStatsImpl0 . getBytesReadFromFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBytesReadFromFile ( ) ; long getAverageBytesWrittenToCache ( ) ; long getAverageBytesWrittenToFile ( ) ; long getAverageBytesReadFromCache ( ) ; long getAverageBytesReadFromFile ( ) ; long getCacheReadCount ( ) ; long getCacheWriteCount ( ) ; long getFileReadCount ( ) ; long getFileWriteCount ( ) ; / / returns the number of bytes in the requested range that are in cache boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test9 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileManagerStatsImpl cacheFileManagerStatsImpl0 = new CacheFileManagerStatsImpl ( cacheFileManagerImpl0 ) ; cacheFileManagerStatsImpl0 . update ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFileWriteCount ( ) ; / / returns the number of bytes in the requested range that are in cache boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test10 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileManagerStatsImpl cacheFileManagerStatsImpl0 = new CacheFileManagerStatsImpl ( cacheFileManagerImpl0 ) ; long long0 = cacheFileManagerStatsImpl0 . getBytesReadFromCache ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBytesReadFromCache ( ) ; long getBytesReadFromFile ( ) ; long getAverageBytesWrittenToCache ( ) ; long getAverageBytesWrittenToFile ( ) ; long getAverageBytesReadFromCache ( ) ; long getAverageBytesReadFromFile ( ) ; long getCacheReadCount ( ) ; long getCacheWriteCount ( ) ; long getFileReadCount ( ) ; long getFileWriteCount ( ) ; / / returns the number of bytes in the requested range that are in cache boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test11 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileManagerStatsImpl cacheFileManagerStatsImpl0 = new CacheFileManagerStatsImpl ( cacheFileManagerImpl0 ) ; long long0 = cacheFileManagerStatsImpl0 . getFileWriteCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFileWriteCount ( ) ; / / returns the number of bytes in the requested range that are in cache boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test12 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileManagerStatsImpl cacheFileManagerStatsImpl0 = new CacheFileManagerStatsImpl ( cacheFileManagerImpl0 ) ; long long0 = cacheFileManagerStatsImpl0 . getFileReadCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFileReadCount ( ) ; long getFileWriteCount ( ) ; / / returns the number of bytes in the requested range that are in cache boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test13 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileManagerStatsImpl cacheFileManagerStatsImpl0 = new CacheFileManagerStatsImpl ( cacheFileManagerImpl0 ) ; long long0 = cacheFileManagerStatsImpl0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test14 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileManagerStatsImpl cacheFileManagerStatsImpl0 = new CacheFileManagerStatsImpl ( cacheFileManagerImpl0 ) ; long long0 = cacheFileManagerStatsImpl0 . getAverageBytesReadFromFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getAverageBytesReadFromFile ( ) ; long getCacheReadCount ( ) ; long getCacheWriteCount ( ) ; long getFileReadCount ( ) ; long getFileWriteCount ( ) ; / / returns the number of bytes in the requested range that are in cache boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test15 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileManagerStatsImpl cacheFileManagerStatsImpl0 = new CacheFileManagerStatsImpl ( cacheFileManagerImpl0 ) ; long long0 = cacheFileManagerStatsImpl0 . getCacheReadCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCacheReadCount ( ) ; long getCacheWriteCount ( ) ; long getFileReadCount ( ) ; long getFileWriteCount ( ) ; / / returns the number of bytes in the requested range that are in cache boolean [ ] getBytesInCache ( TOTorrent torrent , long [ ] absoluteOffsets , long [ ] lengths ) ; }
void test1 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileWithoutCacheMT cacheFileWithoutCacheMT0 = new CacheFileWithoutCacheMT ( cacheFileManagerImpl0 , ( FMFile ) null , ( TOTorrentFile ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test7 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileWithoutCacheMT cacheFileWithoutCacheMT0 = new CacheFileWithoutCacheMT ( cacheFileManagerImpl0 , ( FMFile ) null , ( TOTorrentFile ) null ) ; TOTorrentFile tOTorrentFile0 = cacheFileWithoutCacheMT0 . getTorrentFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TOTorrentFile getTorrentFile ( ) ; boolean exists ( ) ; void moveFile ( File new_file ) throws CacheFileManagerException ; void renameFile ( String new_name ) throws CacheFileManagerException ; void setAccessMode ( int mode ) throws CacheFileManagerException ; int getAccessMode ( ) ; void setStorageType ( int type ) throws CacheFileManagerException ; int getStorageType ( ) ; long getLength ( ) throws CacheFileManagerException ; long compareLength ( long compare_to ) throws CacheFileManagerException ; void setLength ( long length ) throws CacheFileManagerException ; void setPieceComplete ( int piece_number , DirectByteBuffer piece_data ) throws CacheFileManagerException ; void read ( DirectByteBuffer buffer , long offset , short policy ) throws CacheFileManagerException ; void read ( DirectByteBuffer [ ] buffers , long offset , short policy ) throws CacheFileManagerException ; void write ( DirectByteBuffer buffer , long position ) throws CacheFileManagerException ; void write ( DirectByteBuffer [ ] buffers , long position ) throws CacheFileManagerException ; / * * * writes the block to the cache and gives control of the buffer to the cache . * @param buffer * @param position * @throws CacheFileManagerException write failed and buffer * not * taken - i . e . caller must de - allocate * / void writeAndHandoverBuffer ( DirectByteBuffer buffer , long position ) throws CacheFileManagerException ; void writeAndHandoverBuffers ( DirectByteBuffer [ ] buffers , long position ) throws CacheFileManagerException ; / * * * flushes the cache to disk but retains entries * @throws CacheFileManagerException * / void flushCache ( ) throws CacheFileManagerException ; / * * * flushes the cache and discards entries * @throws CacheFileManagerException * / void clearCache ( ) throws CacheFileManagerException ; void close ( ) throws CacheFileManagerException ; boolean isOpen ( ) ; void delete ( ) throws CacheFileManagerException ; }
void test18 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileWithoutCacheMT cacheFileWithoutCacheMT0 = new CacheFileWithoutCacheMT ( cacheFileManagerImpl0 , ( FMFile ) null , ( TOTorrentFile ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test19 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileWithoutCacheMT cacheFileWithoutCacheMT0 = new CacheFileWithoutCacheMT ( cacheFileManagerImpl0 , ( FMFile ) null , ( TOTorrentFile ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long write ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Read data from the transport into the given buffers . * NOTE : Works like ScatteringByteChannel . * @param buffers into which bytes are to be placed * @param array_offset offset within the buffer array of the first buffer into which bytes are to be placed * @param length maximum number of buffers to be accessed * @return number of bytes read * @throws IOException on read error * / long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test21 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileWithoutCacheMT cacheFileWithoutCacheMT0 = new CacheFileWithoutCacheMT ( cacheFileManagerImpl0 , ( FMFile ) null , ( TOTorrentFile ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeAndHandoverBuffers ( DirectByteBuffer [ ] buffers , long position ) throws CacheFileManagerException ; / * * * flushes the cache to disk but retains entries * @throws CacheFileManagerException * / void flushCache ( ) throws CacheFileManagerException ; / * * * flushes the cache and discards entries * @throws CacheFileManagerException * / void clearCache ( ) throws CacheFileManagerException ; void close ( ) throws CacheFileManagerException ; boolean isOpen ( ) ; void delete ( ) throws CacheFileManagerException ; }
void test2 ( ) throws Throwable { CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl ( ) ; CacheFileWithoutCache cacheFileWithoutCache0 = new CacheFileWithoutCache ( cacheFileManagerImpl0 , ( FMFile ) null , ( TOTorrentFile ) null ) ; TOTorrentFile tOTorrentFile0 = cacheFileWithoutCache0 . getTorrentFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TOTorrentFile getTorrentFile ( ) ; boolean exists ( ) ; void moveFile ( File new_file ) throws CacheFileManagerException ; void renameFile ( String new_name ) throws CacheFileManagerException ; void setAccessMode ( int mode ) throws CacheFileManagerException ; int getAccessMode ( ) ; void setStorageType ( int type ) throws CacheFileManagerException ; int getStorageType ( ) ; long getLength ( ) throws CacheFileManagerException ; long compareLength ( long compare_to ) throws CacheFileManagerException ; void setLength ( long length ) throws CacheFileManagerException ; void setPieceComplete ( int piece_number , DirectByteBuffer piece_data ) throws CacheFileManagerException ; void read ( DirectByteBuffer buffer , long offset , short policy ) throws CacheFileManagerException ; void read ( DirectByteBuffer [ ] buffers , long offset , short policy ) throws CacheFileManagerException ; void write ( DirectByteBuffer buffer , long position ) throws CacheFileManagerException ; void write ( DirectByteBuffer [ ] buffers , long position ) throws CacheFileManagerException ; / * * * writes the block to the cache and gives control of the buffer to the cache . * @param buffer * @param position * @throws CacheFileManagerException write failed and buffer * not * taken - i . e . caller must de - allocate * / void writeAndHandoverBuffer ( DirectByteBuffer buffer , long position ) throws CacheFileManagerException ; void writeAndHandoverBuffers ( DirectByteBuffer [ ] buffers , long position ) throws CacheFileManagerException ; / * * * flushes the cache to disk but retains entries * @throws CacheFileManagerException * / void flushCache ( ) throws CacheFileManagerException ; / * * * flushes the cache and discards entries * @throws CacheFileManagerException * / void clearCache ( ) throws CacheFileManagerException ; void close ( ) throws CacheFileManagerException ; boolean isOpen ( ) ; void delete ( ) throws CacheFileManagerException ; }
void test0 ( ) throws Throwable { FMFileManagerFactory fMFileManagerFactory0 = new FMFileManagerFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { FMFileManagerImpl fMFileManagerImpl0 = ( FMFileManagerImpl ) FMFileManagerFactory . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AzureusCore getSingleton ( ) throws AzureusCoreException { return ( AzureusCoreImpl . getSingleton ( ) ) ; }
void test0 ( ) throws Throwable { StringWriter stringWriter0 = new StringWriter ( 0 ) ; PrintWriter printWriter0 = new PrintWriter ( ( Writer ) stringWriter0 ) ; IndentWriter indentWriter0 = new IndentWriter ( printWriter0 ) ; FMFileImpl . generateEvidence ( indentWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear ( ( FMFileImpl ) null ) ; String string0 = fMFileAccessLinear0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test1 ( ) throws Throwable { FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear ( ( FMFileImpl ) null ) ; boolean boolean0 = fMFileAccessLinear0 . isPieceCompleteProcessingNeeded ( 40 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPieceCompleteProcessingNeeded ( int piece_number ) { return ( false ) ; }
void test2 ( ) throws Throwable { FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear ( ( FMFileImpl ) null ) ; fMFileAccessLinear0 . flush ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test4 ( ) throws Throwable { FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear ( ( FMFileImpl ) null ) ; fMFileAccessLinear0 . aboutToOpen ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test5 ( ) throws Throwable { FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear ( ( FMFileImpl ) null ) ; fMFileAccessLinear0 . setPieceComplete ( ( RandomAccessFile ) null , 40 , ( DirectByteBuffer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test7 ( ) throws Throwable { FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear ( ( FMFileImpl ) null ) ; FMFileImpl fMFileImpl0 = fMFileAccessLinear0 . getFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DiskManagerFileInfo getFile ( ) { return ( file ) ; }
void test0 ( ) throws Throwable { MemoryMappedFileTester memoryMappedFileTester0 = new MemoryMappedFileTester ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { BackupManagerFactory backupManagerFactory0 = new BackupManagerFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { CopyOnWriteSet < Object > copyOnWriteSet0 = new CopyOnWriteSet < Object > ( ) ; boolean boolean0 = copyOnWriteSet0 . contains ( ( Object ) copyOnWriteSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( T o ) { return ( set . contains ( o ) ) ; }
void test1 ( ) throws Throwable { CopyOnWriteSet < Object > copyOnWriteSet0 = new CopyOnWriteSet < Object > ( ) ; int int0 = copyOnWriteSet0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test2 ( ) throws Throwable { CopyOnWriteSet < Object > copyOnWriteSet0 = new CopyOnWriteSet < Object > ( ) ; Iterator < Object > iterator0 = copyOnWriteSet0 . iterator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) { return ! this . atEnd ( ) ; }
void test3 ( ) throws Throwable { CopyOnWriteSet < Object > copyOnWriteSet0 = new CopyOnWriteSet < Object > ( ) ; copyOnWriteSet0 . add ( ( Object ) true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test4 ( ) throws Throwable { CopyOnWriteSet < Object > copyOnWriteSet0 = new CopyOnWriteSet < Object > ( ) ; boolean boolean0 = copyOnWriteSet0 . remove ( ( Object ) true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( SkinView skinView ) { if ( skinView = = null ) { return ; } mon_skinViews . enter ( ) ; try { List < SkinView > list = mapSkinViews . get ( skinView . getClass ( ) ) ; if ( list ! = null ) { list . remove ( skinView ) ; if ( list . isEmpty ( ) ) { mapSkinViews . remove ( skinView . getClass ( ) ) ; } } } finally { mon_skinViews . exit ( ) ; } SWTSkinObject mainSkinObject = skinView . getMainSkinObject ( ) ; if ( mainSkinObject ! = null ) { skinIDs . remove ( mainSkinObject . getSkinObjectID ( ) ) ; skinViewIDs . remove ( mainSkinObject . getViewID ( ) ) ; } }
void test0 ( ) throws Throwable { HashCodeUtils hashCodeUtils0 = new HashCodeUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { int int0 = HashCodeUtils . hashMore ( ( - 1 ) , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashMore ( int hash , int more ) { int result = hash < < 1 ; if ( result < 0 ) result | = 1 ; return result ^more ; }
void test2 ( ) throws Throwable { boolean [ ] booleanArray0 = new boolean [ 5 ] ; booleanArray0 [ 0 ] = true ; int int0 = HashCodeUtils . hashMore ( ( - 129 ) , booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashMore ( int hash , int more ) { int result = hash < < 1 ; if ( result < 0 ) result | = 1 ; return result ^more ; }
void test3 ( ) throws Throwable { boolean [ ] booleanArray0 = new boolean [ 5 ] ; int int0 = HashCodeUtils . hashMore ( 340 , booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashMore ( int hash , int more ) { int result = hash < < 1 ; if ( result < 0 ) result | = 1 ; return result ^more ; }
void test4 ( ) throws Throwable { boolean [ ] booleanArray0 = new boolean [ 5 ] ; booleanArray0 [ 1 ] = true ; int int0 = HashCodeUtils . hashMore ( ( - 129 ) , booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashMore ( int hash , int more ) { int result = hash < < 1 ; if ( result < 0 ) result | = 1 ; return result ^more ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; int int0 = HashCodeUtils . hashCode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test0 ( ) throws Throwable { CopyOnWriteList < String > copyOnWriteList0 = new CopyOnWriteList < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMutationCount ( ) { return ( mutation_count ) ; }
void test1 ( ) throws Throwable { CopyOnWriteList < String > copyOnWriteList0 = new CopyOnWriteList < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInitialCapacity ( ) { return initialCapacity ; }
void test2 ( ) throws Throwable { CopyOnWriteList < Object > copyOnWriteList0 = new CopyOnWriteList < Object > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { CopyOnWriteList < Iterable < Object > > copyOnWriteList0 = new CopyOnWriteList < Iterable < Object > > ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInitialCapacity ( ) { return initialCapacity ; }
void test4 ( ) throws Throwable { CopyOnWriteList < Object > copyOnWriteList0 = new CopyOnWriteList < Object > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMutationCount ( ) { return ( mutation_count ) ; }
void test5 ( ) throws Throwable { CopyOnWriteList < TreeSet < Collections . EmptyList > > copyOnWriteList0 = new CopyOnWriteList < TreeSet < Collections . EmptyList > > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInitialCapacity ( ) { return initialCapacity ; }
void test6 ( ) throws Throwable { CopyOnWriteList < String > copyOnWriteList0 = new CopyOnWriteList < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInitialCapacity ( ) { return initialCapacity ; }
void test7 ( ) throws Throwable { CopyOnWriteList < Object > copyOnWriteList0 = new CopyOnWriteList < Object > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInitialCapacity ( ) { return initialCapacity ; }
void test8 ( ) throws Throwable { CopyOnWriteList < CopyOnWriteList < Collections . EmptyList > > copyOnWriteList0 = new CopyOnWriteList < CopyOnWriteList < Collections . EmptyList > > ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInitialCapacity ( ) { return initialCapacity ; }
void test9 ( ) throws Throwable { CopyOnWriteList < String > copyOnWriteList0 = new CopyOnWriteList < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInitialCapacity ( ) { return initialCapacity ; }
void test10 ( ) throws Throwable { CopyOnWriteList < String > copyOnWriteList0 = new CopyOnWriteList < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInitialCapacity ( ) { return initialCapacity ; }
void test11 ( ) throws Throwable { CopyOnWriteList < String > copyOnWriteList0 = new CopyOnWriteList < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMutationCount ( ) { return ( mutation_count ) ; }
void test12 ( ) throws Throwable { CopyOnWriteList < String > copyOnWriteList0 = new CopyOnWriteList < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMutationCount ( ) { return ( mutation_count ) ; }
void test13 ( ) throws Throwable { CopyOnWriteList < String > copyOnWriteList0 = new CopyOnWriteList < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMutationCount ( ) { return ( mutation_count ) ; }
void test14 ( ) throws Throwable { CopyOnWriteList < Iterable < String > > copyOnWriteList0 = new CopyOnWriteList < Iterable < String > > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMutationCount ( ) { return ( mutation_count ) ; }
void test15 ( ) throws Throwable { CopyOnWriteList < TreeSet < Collections . EmptyList > > copyOnWriteList0 = new CopyOnWriteList < TreeSet < Collections . EmptyList > > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test16 ( ) throws Throwable { CopyOnWriteList < String > copyOnWriteList0 = new CopyOnWriteList < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test17 ( ) throws Throwable { CopyOnWriteList < String > copyOnWriteList0 = new CopyOnWriteList < String > ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMutationCount ( ) { return ( mutation_count ) ; }
void test1 ( ) throws Throwable { LaunchManager launchManager0 = new LaunchManager ( ) ; LaunchManager . LaunchTarget launchManager_LaunchTarget0 = launchManager0 . createTarget ( ( DownloadManager ) null ) ; DownloadManager downloadManager0 = launchManager_LaunchTarget0 . getDownload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Download getDownload ( ) throws DownloadException { throw ( new DownloadException ( "Not supported" ) ) ; }
void test2 ( ) throws Throwable { LaunchManager launchManager0 = LaunchManager . getManager ( ) ; LaunchManager . LaunchTarget launchManager_LaunchTarget0 = launchManager0 . createTarget ( ( DownloadManager ) null ) ; DiskManagerFileInfo diskManagerFileInfo0 = launchManager_LaunchTarget0 . getFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DiskManagerFileInfo getFile ( ) { return ( file ) ; }
void test0 ( ) throws Throwable { CopyOnWriteMap copyOnWriteMap0 = new CopyOnWriteMap ( ) ; Object object0 = new Object ( ) ; Object object1 = copyOnWriteMap0 . remove ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( SkinView skinView ) { if ( skinView = = null ) { return ; } mon_skinViews . enter ( ) ; try { List < SkinView > list = mapSkinViews . get ( skinView . getClass ( ) ) ; if ( list ! = null ) { list . remove ( skinView ) ; if ( list . isEmpty ( ) ) { mapSkinViews . remove ( skinView . getClass ( ) ) ; } } } finally { mon_skinViews . exit ( ) ; } SWTSkinObject mainSkinObject = skinView . getMainSkinObject ( ) ; if ( mainSkinObject ! = null ) { skinIDs . remove ( mainSkinObject . getSkinObjectID ( ) ) ; skinViewIDs . remove ( mainSkinObject . getViewID ( ) ) ; } }
void test1 ( ) throws Throwable { CopyOnWriteMap copyOnWriteMap0 = new CopyOnWriteMap ( ) ; Object object0 = new Object ( ) ; copyOnWriteMap0 . put ( ( Object ) null , object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test2 ( ) throws Throwable { CopyOnWriteMap copyOnWriteMap0 = new CopyOnWriteMap ( ) ; int int0 = copyOnWriteMap0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test3 ( ) throws Throwable { CopyOnWriteMap copyOnWriteMap0 = new CopyOnWriteMap ( ) ; boolean boolean0 = copyOnWriteMap0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test4 ( ) throws Throwable { CopyOnWriteMap copyOnWriteMap0 = new CopyOnWriteMap ( ) ; Object object0 = new Object ( ) ; Object object1 = copyOnWriteMap0 . get ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { String string0 = UUIDGenerator . generateUUIDString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateUUIDString ( ) { byte [ ] bytes = generateUUID ( ) ; String res = ByteFormatter . encodeString ( bytes ) . toLowerCase ( MessageText . LOCALE_ENGLISH ) ; return ( res . substring ( 0 , 8 ) + " - " + res . substring ( 8 , 12 ) + " - " + res . substring ( 12 , 16 ) + " - " + res . substring ( 16 , 20 ) + " - " + res . substring ( 20 ) ) ; }
void test1 ( ) throws Throwable { UUIDGenerator uUIDGenerator0 = new UUIDGenerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String generateUUIDString ( ) { byte [ ] bytes = generateUUID ( ) ; String res = ByteFormatter . encodeString ( bytes ) . toLowerCase ( MessageText . LOCALE_ENGLISH ) ; return ( res . substring ( 0 , 8 ) + " - " + res . substring ( 8 , 12 ) + " - " + res . substring ( 12 , 16 ) + " - " + res . substring ( 16 , 20 ) + " - " + res . substring ( 20 ) ) ; }
void test0 ( ) throws Throwable { boolean boolean0 = QTFastStartRAF . isSupportedExtension ( "2 { ~@_09Hmo@" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSupportedExtension ( String extension ) { return ( supported_extensions . contains ( extension . toLowerCase ( ) ) ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; byte [ ] byteArray1 = QTFastStartRAF . copyOfRange ( byteArray0 , ( int ) ( byte ) 1 , ( int ) ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] copyOfRange ( byte [ ] original , int from , int to ) { int newLength = to - from ; if ( newLength < 0 ) throw new IllegalArgumentException ( from + " > " + to ) ; byte [ ] copy = new byte [ newLength ] ; System . arraycopy ( original , from , copy , 0 , Math . min ( original . length - from , newLength ) ) ; return copy ; }
void test0 ( ) throws Throwable { String string0 = GeneralUtils . stripOutHyperlinks ( "\"'\"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String stripOutHyperlinks ( String message ) { return Pattern . compile ( REGEX_URLHTML , Pattern . CASE_INSENSITIVE ) . matcher ( message ) . replaceAll ( "$2" ) ; }
void test1 ( ) throws Throwable { GeneralUtils generalUtils0 = new GeneralUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { String string0 = GeneralUtils . replaceAll ( " , " , " , " , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replaceAll ( String str , String from_str , String replacement ) { StringBuffer res = null ; int pos = 0 ; while ( true ) { int p1 = str . indexOf ( from_str , pos ) ; if ( p1 = = - 1 ) { if ( res = = null ) { return ( str ) ; } res . append ( str . substring ( pos ) ) ; return ( res . toString ( ) ) ; } else { if ( res = = null ) { res = new StringBuffer ( str . length ( ) * 2 ) ; } if ( p1 > pos ) { res . append ( str . substring ( pos , p1 ) ) ; } res . append ( replacement ) ; pos = p1 + from_str . length ( ) ; } } }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = "\"'\"" ; stringArray0 [ 1 ] = "\"'\"" ; stringArray0 [ 2 ] = "\"'\"" ; stringArray0 [ 3 ] = "\"'\"" ; stringArray0 [ 4 ] = "\"'\"" ; stringArray0 [ 5 ] = "\"'\"" ; stringArray0 [ 6 ] = "\"'\"" ; String string0 = GeneralUtils . replaceAll ( "\"'\"" , stringArray0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replaceAll ( String str , String from_str , String replacement ) { StringBuffer res = null ; int pos = 0 ; while ( true ) { int p1 = str . indexOf ( from_str , pos ) ; if ( p1 = = - 1 ) { if ( res = = null ) { return ( str ) ; } res . append ( str . substring ( pos ) ) ; return ( res . toString ( ) ) ; } else { if ( res = = null ) { res = new StringBuffer ( str . length ( ) * 2 ) ; } if ( p1 > pos ) { res . append ( str . substring ( pos , p1 ) ) ; } res . append ( replacement ) ; pos = p1 + from_str . length ( ) ; } } }
void test4 ( ) throws Throwable { String [ ] stringArray0 = GeneralUtils . splitQuotedTokens ( " , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] splitQuotedTokens ( String str ) { List < String > bits = new ArrayList < String > ( ) ; char quote = ' ' ; boolean escape = false ; boolean bit_contains_quotes = false ; String bit = "" ; char [ ] chars = str . toCharArray ( ) ; for ( int i = 0 ; i < chars . length ; i + + ) { char c = chars [ i ] ; if ( Character . isWhitespace ( c ) ) { c = ' ' ; } if ( escape ) { bit + = c ; escape = false ; continue ; } else if ( c = = '\\' ) { escape = true ; continue ; } if ( c = = '"' | | c = = '\'' & & ( i = = 0 | | chars [ i - 1 ] ! = '\\' ) ) { if ( quote = = ' ' ) { bit_contains_quotes = true ; quote = c ; } else if ( quote = = c ) { quote = ' ' ; } else { bit + = c ; } } else { if ( quote = = ' ' ) { if ( c = = ' ' ) { if ( bit . length ( ) > 0 | | bit_contains_quotes ) { bit_contains_quotes = false ; bits . add ( bit ) ; bit = "" ; } } else { bit + = c ; } } else { bit + = c ; } } } if ( quote ! = ' ' ) { bit + = quote ; } if ( bit . length ( ) > 0 | | bit_contains_quotes ) { bits . add ( bit ) ; } return ( bits . toArray ( new String [ bits . size ( ) ] ) ) ; }
void test0 ( ) throws Throwable { Pattern pattern0 = RegExUtil . getCachedPattern ( "`\u00EF\u00BF\u00BD\"\u00EF\u00BF\u00BD$%^ & * ( ) - _ = + [ { ] } ; : '@#~ , < . > / ? '" , "`\u00EF\u00BF\u00BD\"\u00EF\u00BF\u00BD$%^ & * ( ) - _ = + [ { ] } ; : '@#~ , < . > / ? '" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Pattern getCachedPattern ( String namespace , String pattern ) { return ( getCachedPattern ( namespace , pattern , 0 ) ) ; }
void test1 ( ) throws Throwable { RegExUtil regExUtil0 = new RegExUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { boolean boolean0 = RegExUtil . mightBeEvil ( "g5 ) / [ e { < Qv15We * J" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean mightBeEvil ( String str ) { / / http : / / en . wikipedia . org / wiki / ReDoS if ( ! str . contains ( " ) " ) ) { return ( false ) ; } char [ ] chars = str . toCharArray ( ) ; Stack < Integer > stack = new Stack < Integer > ( ) ; for ( int i = 0 ; i < chars . length ; i + + ) { char c = chars [ i ] ; if ( c = = ' ( ' ) { stack . push ( i + 1 ) ; } else if ( c = = ' ) ' ) { if ( stack . isEmpty ( ) ) { Debug . out ( "bracket un - matched in " + str + " - treating as evil" ) ; return ( true ) ; } else { int start = stack . pop ( ) ; if ( i < chars . length - 1 ) { char next = chars [ i + 1 ] ; if ( next = = ' * ' | | next = = ' + ' | | next = = ' { ' ) { for ( int j = start ; j < i ; j + + ) { c = chars [ j ] ; if ( " + * { | " . indexOf ( c ) ! = - 1 ) { Debug . out ( "regular expression " + str + " might be evil due to '" + str . substring ( start - 1 , i + 2 ) + "'" ) ; return ( true ) ; } } } } } } } return ( false ) ; }
void test4 ( ) throws Throwable { boolean boolean0 = RegExUtil . mightBeEvil ( " ] @O" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean mightBeEvil ( String str ) { / / http : / / en . wikipedia . org / wiki / ReDoS if ( ! str . contains ( " ) " ) ) { return ( false ) ; } char [ ] chars = str . toCharArray ( ) ; Stack < Integer > stack = new Stack < Integer > ( ) ; for ( int i = 0 ; i < chars . length ; i + + ) { char c = chars [ i ] ; if ( c = = ' ( ' ) { stack . push ( i + 1 ) ; } else if ( c = = ' ) ' ) { if ( stack . isEmpty ( ) ) { Debug . out ( "bracket un - matched in " + str + " - treating as evil" ) ; return ( true ) ; } else { int start = stack . pop ( ) ; if ( i < chars . length - 1 ) { char next = chars [ i + 1 ] ; if ( next = = ' * ' | | next = = ' + ' | | next = = ' { ' ) { for ( int j = start ; j < i ; j + + ) { c = chars [ j ] ; if ( " + * { | " . indexOf ( c ) ! = - 1 ) { Debug . out ( "regular expression " + str + " might be evil due to '" + str . substring ( start - 1 , i + 2 ) + "'" ) ; return ( true ) ; } } } } } } } return ( false ) ; }
void test5 ( ) throws Throwable { boolean boolean0 = RegExUtil . mightBeEvil ( "`\u00EF\u00BF\u00BD\"\u00EF\u00BF\u00BD$%^ & * ( ) - _ = + [ { ] } ; : '@#~ , < . > / ? '" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean mightBeEvil ( String str ) { / / http : / / en . wikipedia . org / wiki / ReDoS if ( ! str . contains ( " ) " ) ) { return ( false ) ; } char [ ] chars = str . toCharArray ( ) ; Stack < Integer > stack = new Stack < Integer > ( ) ; for ( int i = 0 ; i < chars . length ; i + + ) { char c = chars [ i ] ; if ( c = = ' ( ' ) { stack . push ( i + 1 ) ; } else if ( c = = ' ) ' ) { if ( stack . isEmpty ( ) ) { Debug . out ( "bracket un - matched in " + str + " - treating as evil" ) ; return ( true ) ; } else { int start = stack . pop ( ) ; if ( i < chars . length - 1 ) { char next = chars [ i + 1 ] ; if ( next = = ' * ' | | next = = ' + ' | | next = = ' { ' ) { for ( int j = start ; j < i ; j + + ) { c = chars [ j ] ; if ( " + * { | " . indexOf ( c ) ! = - 1 ) { Debug . out ( "regular expression " + str + " might be evil due to '" + str . substring ( start - 1 , i + 2 ) + "'" ) ; return ( true ) ; } } } } } } } return ( false ) ; }
void test6 ( ) throws Throwable { boolean boolean0 = RegExUtil . mightBeEvil ( " | Aein ( pr | - initaFi^atio ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean mightBeEvil ( String str ) { / / http : / / en . wikipedia . org / wiki / ReDoS if ( ! str . contains ( " ) " ) ) { return ( false ) ; } char [ ] chars = str . toCharArray ( ) ; Stack < Integer > stack = new Stack < Integer > ( ) ; for ( int i = 0 ; i < chars . length ; i + + ) { char c = chars [ i ] ; if ( c = = ' ( ' ) { stack . push ( i + 1 ) ; } else if ( c = = ' ) ' ) { if ( stack . isEmpty ( ) ) { Debug . out ( "bracket un - matched in " + str + " - treating as evil" ) ; return ( true ) ; } else { int start = stack . pop ( ) ; if ( i < chars . length - 1 ) { char next = chars [ i + 1 ] ; if ( next = = ' * ' | | next = = ' + ' | | next = = ' { ' ) { for ( int j = start ; j < i ; j + + ) { c = chars [ j ] ; if ( " + * { | " . indexOf ( c ) ! = - 1 ) { Debug . out ( "regular expression " + str + " might be evil due to '" + str . substring ( start - 1 , i + 2 ) + "'" ) ; return ( true ) ; } } } } } } } return ( false ) ; }
void test7 ( ) throws Throwable { boolean boolean0 = RegExUtil . mightBeEvil ( "ju ( bm { ) * { _UWm" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean mightBeEvil ( String str ) { / / http : / / en . wikipedia . org / wiki / ReDoS if ( ! str . contains ( " ) " ) ) { return ( false ) ; } char [ ] chars = str . toCharArray ( ) ; Stack < Integer > stack = new Stack < Integer > ( ) ; for ( int i = 0 ; i < chars . length ; i + + ) { char c = chars [ i ] ; if ( c = = ' ( ' ) { stack . push ( i + 1 ) ; } else if ( c = = ' ) ' ) { if ( stack . isEmpty ( ) ) { Debug . out ( "bracket un - matched in " + str + " - treating as evil" ) ; return ( true ) ; } else { int start = stack . pop ( ) ; if ( i < chars . length - 1 ) { char next = chars [ i + 1 ] ; if ( next = = ' * ' | | next = = ' + ' | | next = = ' { ' ) { for ( int j = start ; j < i ; j + + ) { c = chars [ j ] ; if ( " + * { | " . indexOf ( c ) ! = - 1 ) { Debug . out ( "regular expression " + str + " might be evil due to '" + str . substring ( start - 1 , i + 2 ) + "'" ) ; return ( true ) ; } } } } } } } return ( false ) ; }
void test8 ( ) throws Throwable { boolean boolean0 = RegExUtil . mightBeEvil ( "pju ( #l ] 0 ) { m" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean mightBeEvil ( String str ) { / / http : / / en . wikipedia . org / wiki / ReDoS if ( ! str . contains ( " ) " ) ) { return ( false ) ; } char [ ] chars = str . toCharArray ( ) ; Stack < Integer > stack = new Stack < Integer > ( ) ; for ( int i = 0 ; i < chars . length ; i + + ) { char c = chars [ i ] ; if ( c = = ' ( ' ) { stack . push ( i + 1 ) ; } else if ( c = = ' ) ' ) { if ( stack . isEmpty ( ) ) { Debug . out ( "bracket un - matched in " + str + " - treating as evil" ) ; return ( true ) ; } else { int start = stack . pop ( ) ; if ( i < chars . length - 1 ) { char next = chars [ i + 1 ] ; if ( next = = ' * ' | | next = = ' + ' | | next = = ' { ' ) { for ( int j = start ; j < i ; j + + ) { c = chars [ j ] ; if ( " + * { | " . indexOf ( c ) ! = - 1 ) { Debug . out ( "regular expression " + str + " might be evil due to '" + str . substring ( start - 1 , i + 2 ) + "'" ) ; return ( true ) ; } } } } } } } return ( false ) ; }
void test1 ( ) throws Throwable { MultiPartDecoder . FormField multiPartDecoder_FormField0 = new MultiPartDecoder . FormField ( " - ^ | p" , ( Map ) null ) ; String string0 = multiPartDecoder_FormField0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test2 ( ) throws Throwable { HashMap < Integer , Object > hashMap0 = new HashMap < Integer , Object > ( ) ; MultiPartDecoder . FormField multiPartDecoder_FormField0 = new MultiPartDecoder . FormField ( " & _ . uNXGaA < " , ( Map ) hashMap0 ) ; String string0 = multiPartDecoder_FormField0 . getAttribute ( " & _ . uNXGaA < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttribute ( String name ) ; void sync ( ) ; }
void test7 ( ) throws Throwable { HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; MultiPartDecoder . FormField multiPartDecoder_FormField0 = new MultiPartDecoder . FormField ( "\"" , ( Map ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test8 ( ) throws Throwable { HashMap < Integer , Object > hashMap0 = new HashMap < Integer , Object > ( ) ; MultiPartDecoder . FormField multiPartDecoder_FormField0 = new MultiPartDecoder . FormField ( " & _ . uNXGaA < " , ( Map ) hashMap0 ) ; String string0 = multiPartDecoder_FormField0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test9 ( ) throws Throwable { MultiPartDecoder . FormField multiPartDecoder_FormField0 = new MultiPartDecoder . FormField ( " - | p" , ( Map ) null ) ; multiPartDecoder_FormField0 . getInputStream ( ) ; multiPartDecoder_FormField0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test12 ( ) throws Throwable { HashMap < Integer , Object > hashMap0 = new HashMap < Integer , Object > ( ) ; MultiPartDecoder . FormField multiPartDecoder_FormField0 = new MultiPartDecoder . FormField ( " & _ . uNXGaA < " , ( Map ) hashMap0 ) ; multiPartDecoder_FormField0 . complete ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test1 ( ) throws Throwable { DNSUtils dNSUtils0 = new DNSUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { List < String > list0 = DNSUtils . getTXTRecords ( "t1m6v ! E ] ~ . h + ; ? Tj" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { List < String > list0 = DNSUtils . getTXTRecords ( "test3 . test . null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test0 ( ) throws Throwable { HTTPUtils hTTPUtils0 = new HTTPUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { boolean boolean0 = HTTPUtils . useCompressionForFileType ( "gziP = , 2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean useCompressionForFileType ( String file_type ) { return compression . contains ( file_type ) ; }
void test2 ( ) throws Throwable { String string0 = HTTPUtils . guessContentTypeFromFileType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String guessContentTypeFromFileType ( String file_type ) { if ( file_type ! = null ) { String type = ( String ) file_types . get ( file_type . toLowerCase ( Constants . LOCALE_ENGLISH ) ) ; if ( type ! = null ) { return ( type ) ; } } return ( default_type ) ; }
void test3 ( ) throws Throwable { String string0 = HTTPUtils . guessContentTypeFromFileType ( "gziP#~2A" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String guessContentTypeFromFileType ( String file_type ) { if ( file_type ! = null ) { String type = ( String ) file_types . get ( file_type . toLowerCase ( Constants . LOCALE_ENGLISH ) ) ; if ( type ! = null ) { return ( type ) ; } } return ( default_type ) ; }
void test4 ( ) throws Throwable { String string0 = HTTPUtils . guessContentTypeFromFileType ( "jpG" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String guessContentTypeFromFileType ( String file_type ) { if ( file_type ! = null ) { String type = ( String ) file_types . get ( file_type . toLowerCase ( Constants . LOCALE_ENGLISH ) ) ; if ( type ! = null ) { return ( type ) ; } } return ( default_type ) ; }
void test5 ( ) throws Throwable { boolean boolean0 = HTTPUtils . canGZIP ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canGZIP ( String accept_encoding ) { boolean gzip_reply = false ; if ( accept_encoding ! = null ) { accept_encoding = accept_encoding . toLowerCase ( Constants . LOCALE_ENGLISH ) ; int gzip_index = accept_encoding . indexOf ( "gzip" ) ; if ( gzip_index ! = - 1 ) { gzip_reply = true ; if ( accept_encoding . length ( ) - gzip_index > = 8 ) { / / gzip ; q = 0 / / look to see if there's a q = 0 ( or 0 . 0 ) disabling gzip char [ ] chars = accept_encoding . toCharArray ( ) ; boolean q_value = false ; for ( int i = gzip_index + 4 ; i < chars . length ; i + + ) { char c = chars [ i ] ; if ( c = = ' , ' ) { break ; } else if ( c = = ' = ' ) { q_value = true ; gzip_reply = false ; } else { if ( q_value ) { if ( c ! = ' ' & & c ! = '0' & & c ! = ' . ' ) { gzip_reply = true ; break ; } } } } } } } return ( gzip_reply ) ; }
void test6 ( ) throws Throwable { boolean boolean0 = HTTPUtils . canGZIP ( "gziP = , 2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canGZIP ( String accept_encoding ) { boolean gzip_reply = false ; if ( accept_encoding ! = null ) { accept_encoding = accept_encoding . toLowerCase ( Constants . LOCALE_ENGLISH ) ; int gzip_index = accept_encoding . indexOf ( "gzip" ) ; if ( gzip_index ! = - 1 ) { gzip_reply = true ; if ( accept_encoding . length ( ) - gzip_index > = 8 ) { / / gzip ; q = 0 / / look to see if there's a q = 0 ( or 0 . 0 ) disabling gzip char [ ] chars = accept_encoding . toCharArray ( ) ; boolean q_value = false ; for ( int i = gzip_index + 4 ; i < chars . length ; i + + ) { char c = chars [ i ] ; if ( c = = ' , ' ) { break ; } else if ( c = = ' = ' ) { q_value = true ; gzip_reply = false ; } else { if ( q_value ) { if ( c ! = ' ' & & c ! = '0' & & c ! = ' . ' ) { gzip_reply = true ; break ; } } } } } } } return ( gzip_reply ) ; }
void test7 ( ) throws Throwable { boolean boolean0 = HTTPUtils . canGZIP ( "\" ! M" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canGZIP ( String accept_encoding ) { boolean gzip_reply = false ; if ( accept_encoding ! = null ) { accept_encoding = accept_encoding . toLowerCase ( Constants . LOCALE_ENGLISH ) ; int gzip_index = accept_encoding . indexOf ( "gzip" ) ; if ( gzip_index ! = - 1 ) { gzip_reply = true ; if ( accept_encoding . length ( ) - gzip_index > = 8 ) { / / gzip ; q = 0 / / look to see if there's a q = 0 ( or 0 . 0 ) disabling gzip char [ ] chars = accept_encoding . toCharArray ( ) ; boolean q_value = false ; for ( int i = gzip_index + 4 ; i < chars . length ; i + + ) { char c = chars [ i ] ; if ( c = = ' , ' ) { break ; } else if ( c = = ' = ' ) { q_value = true ; gzip_reply = false ; } else { if ( q_value ) { if ( c ! = ' ' & & c ! = '0' & & c ! = ' . ' ) { gzip_reply = true ; break ; } } } } } } } return ( gzip_reply ) ; }
void test8 ( ) throws Throwable { boolean boolean0 = HTTPUtils . canGZIP ( "gzip" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canGZIP ( String accept_encoding ) { boolean gzip_reply = false ; if ( accept_encoding ! = null ) { accept_encoding = accept_encoding . toLowerCase ( Constants . LOCALE_ENGLISH ) ; int gzip_index = accept_encoding . indexOf ( "gzip" ) ; if ( gzip_index ! = - 1 ) { gzip_reply = true ; if ( accept_encoding . length ( ) - gzip_index > = 8 ) { / / gzip ; q = 0 / / look to see if there's a q = 0 ( or 0 . 0 ) disabling gzip char [ ] chars = accept_encoding . toCharArray ( ) ; boolean q_value = false ; for ( int i = gzip_index + 4 ; i < chars . length ; i + + ) { char c = chars [ i ] ; if ( c = = ' , ' ) { break ; } else if ( c = = ' = ' ) { q_value = true ; gzip_reply = false ; } else { if ( q_value ) { if ( c ! = ' ' & & c ! = '0' & & c ! = ' . ' ) { gzip_reply = true ; break ; } } } } } } } return ( gzip_reply ) ; }
void test9 ( ) throws Throwable { boolean boolean0 = HTTPUtils . canGZIP ( "gziP#~2A" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canGZIP ( String accept_encoding ) { boolean gzip_reply = false ; if ( accept_encoding ! = null ) { accept_encoding = accept_encoding . toLowerCase ( Constants . LOCALE_ENGLISH ) ; int gzip_index = accept_encoding . indexOf ( "gzip" ) ; if ( gzip_index ! = - 1 ) { gzip_reply = true ; if ( accept_encoding . length ( ) - gzip_index > = 8 ) { / / gzip ; q = 0 / / look to see if there's a q = 0 ( or 0 . 0 ) disabling gzip char [ ] chars = accept_encoding . toCharArray ( ) ; boolean q_value = false ; for ( int i = gzip_index + 4 ; i < chars . length ; i + + ) { char c = chars [ i ] ; if ( c = = ' , ' ) { break ; } else if ( c = = ' = ' ) { q_value = true ; gzip_reply = false ; } else { if ( q_value ) { if ( c ! = ' ' & & c ! = '0' & & c ! = ' . ' ) { gzip_reply = true ; break ; } } } } } } } return ( gzip_reply ) ; }
void test10 ( ) throws Throwable { boolean boolean0 = HTTPUtils . canGZIP ( "gziP# = 0 . A" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canGZIP ( String accept_encoding ) { boolean gzip_reply = false ; if ( accept_encoding ! = null ) { accept_encoding = accept_encoding . toLowerCase ( Constants . LOCALE_ENGLISH ) ; int gzip_index = accept_encoding . indexOf ( "gzip" ) ; if ( gzip_index ! = - 1 ) { gzip_reply = true ; if ( accept_encoding . length ( ) - gzip_index > = 8 ) { / / gzip ; q = 0 / / look to see if there's a q = 0 ( or 0 . 0 ) disabling gzip char [ ] chars = accept_encoding . toCharArray ( ) ; boolean q_value = false ; for ( int i = gzip_index + 4 ; i < chars . length ; i + + ) { char c = chars [ i ] ; if ( c = = ' , ' ) { break ; } else if ( c = = ' = ' ) { q_value = true ; gzip_reply = false ; } else { if ( q_value ) { if ( c ! = ' ' & & c ! = '0' & & c ! = ' . ' ) { gzip_reply = true ; break ; } } } } } } } return ( gzip_reply ) ; }
void test0 ( ) throws Throwable { NetUtils netUtils0 = new NetUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { List < NetworkInterface > list0 = NetUtils . getNetworkInterfaces ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test0 ( ) throws Throwable { ExponentialMovingAverage exponentialMovingAverage0 = new ExponentialMovingAverage ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test1 ( ) throws Throwable { ExponentialMovingAverage exponentialMovingAverage0 = new ExponentialMovingAverage ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test2 ( ) throws Throwable { ExponentialMovingAverage exponentialMovingAverage0 = new ExponentialMovingAverage ( ( - 1389 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test3 ( ) throws Throwable { ExponentialMovingAverage exponentialMovingAverage0 = new ExponentialMovingAverage ( 1105 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test4 ( ) throws Throwable { ExponentialMovingAverage exponentialMovingAverage0 = new ExponentialMovingAverage ( ( - 1938 . 6545F ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test5 ( ) throws Throwable { ExponentialMovingAverage exponentialMovingAverage0 = new ExponentialMovingAverage ( 77 . 69488F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test6 ( ) throws Throwable { ExponentialMovingAverage exponentialMovingAverage0 = new ExponentialMovingAverage ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test0 ( ) throws Throwable { MovingAverage movingAverage0 = new MovingAverage ( 913 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test1 ( ) throws Throwable { MovingAverage movingAverage0 = new MovingAverage ( 913 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test2 ( ) throws Throwable { MovingAverage movingAverage0 = new MovingAverage ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test0 ( ) throws Throwable { MovingImmediateAverage movingImmediateAverage0 = new MovingImmediateAverage ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSampleCount ( ) { return ( pos > periods ? periods : pos ) ; }
void test1 ( ) throws Throwable { MovingImmediateAverage movingImmediateAverage0 = new MovingImmediateAverage ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSampleCount ( ) { return ( pos > periods ? periods : pos ) ; }
void test2 ( ) throws Throwable { MovingImmediateAverage movingImmediateAverage0 = new MovingImmediateAverage ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test3 ( ) throws Throwable { MovingImmediateAverage movingImmediateAverage0 = new MovingImmediateAverage ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSampleCount ( ) { return ( pos > periods ? periods : pos ) ; }
void test4 ( ) throws Throwable { MovingImmediateAverage movingImmediateAverage0 = new MovingImmediateAverage ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSampleCount ( ) { return ( pos > periods ? periods : pos ) ; }
void test0 ( ) throws Throwable { MovingAverage movingAverage0 = AverageFactory . MovingAverage ( 404 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test1 ( ) throws Throwable { ExponentialMovingAverage exponentialMovingAverage0 = AverageFactory . ExponentialMovingAverage ( 404 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test2 ( ) throws Throwable { RunningAverage runningAverage0 = AverageFactory . RunningAverage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test3 ( ) throws Throwable { ExponentialMovingAverage exponentialMovingAverage0 = AverageFactory . ExponentialMovingAverage ( ( float ) 404 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test4 ( ) throws Throwable { MovingImmediateAverage movingImmediateAverage0 = AverageFactory . MovingImmediateAverage ( 404 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test0 ( ) throws Throwable { RunningAverage runningAverage0 = new RunningAverage ( ) ; runningAverage0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test1 ( ) throws Throwable { RunningAverage runningAverage0 = new RunningAverage ( ) ; runningAverage0 . update ( ( - 1444 . 9206778490184 ) ) ; double double0 = runningAverage0 . getAverage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test2 ( ) throws Throwable { RunningAverage runningAverage0 = new RunningAverage ( ) ; double double0 = runningAverage0 . getAverage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAverage ( ) ; / * * * sets back to start - of - day * * / void reset ( ) ; }
void test0 ( ) throws Throwable { BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = ( BloomFilterAddRemove8Bit ) BloomFilterFactory . createAddRemove8Bit ( 1954 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { BloomFilter bloomFilter0 = BloomFilterFactory . deserialiseFromMap ( ( Map < String , Object > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit ( 661 ) ; Map < String , Object > map0 = bloomFilterAddRemove8Bit0 . serialiseToMap ( ) ; BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly ( map0 ) ; BloomFilterRotator bloomFilterRotator0 = ( BloomFilterRotator ) BloomFilterFactory . createRotating ( ( BloomFilter ) bloomFilterAddOnly0 , 661 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test3 ( ) throws Throwable { BloomFilterFactory bloomFilterFactory0 = new BloomFilterFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = ( BloomFilterAddRemove4Bit ) BloomFilterFactory . createAddRemove4Bit ( 102 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test5 ( ) throws Throwable { BloomFilterAddOnly bloomFilterAddOnly0 = ( BloomFilterAddOnly ) BloomFilterFactory . createAddOnly ( 1954 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test0 ( ) throws Throwable { BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit ( 6 ) ; BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator ( ( BloomFilter ) bloomFilterAddRemove8Bit0 , 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test1 ( ) throws Throwable { BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit ( 1 ) ; BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator ( ( BloomFilter ) bloomFilterAddRemove8Bit0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test2 ( ) throws Throwable { BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit ( 37 ) ; BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator ( ( BloomFilter ) bloomFilterAddRemove4Bit0 , 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit ( 6 ) ; BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator ( ( BloomFilter ) bloomFilterAddRemove8Bit0 , 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test4 ( ) throws Throwable { BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit ( 1 ) ; BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator ( ( BloomFilter ) bloomFilterAddRemove8Bit0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test5 ( ) throws Throwable { BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit ( 37 ) ; BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator ( ( BloomFilter ) bloomFilterAddRemove4Bit0 , 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test6 ( ) throws Throwable { BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit ( 1 ) ; BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator ( ( BloomFilter ) bloomFilterAddRemove8Bit0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test7 ( ) throws Throwable { BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit ( 1 ) ; BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator ( ( BloomFilter ) bloomFilterAddRemove8Bit0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void add ( SkinView skinView ) { mon_skinViews . enter ( ) ; try { List < SkinView > list = mapSkinViews . get ( skinView ) ; if ( list = = null ) { list = new ArrayList < SkinView > ( 1 ) ; mapSkinViews . put ( skinView . getClass ( ) , list ) ; } list . add ( skinView ) ; } finally { mon_skinViews . exit ( ) ; } SWTSkinObject mainSkinObject = skinView . getMainSkinObject ( ) ; if ( mainSkinObject ! = null ) { skinIDs . put ( mainSkinObject . getSkinObjectID ( ) , skinView ) ; String viewID = mainSkinObject . getViewID ( ) ; if ( viewID ! = null & & viewID . length ( ) > 0 ) { skinViewIDs . put ( viewID , skinView ) ; } } triggerViewAddedListeners ( skinView ) ; }
void test8 ( ) throws Throwable { BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit ( 37 ) ; byte [ ] byteArray0 = new byte [ 5 ] ; bloomFilterAddRemove4Bit0 . add ( byteArray0 ) ; BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator ( ( BloomFilter ) bloomFilterAddRemove4Bit0 , 4 ) ; byte [ ] byteArray1 = new byte [ 10 ] ; bloomFilterRotator0 . add ( byteArray1 ) ; byteArray1 [ 8 ] = ( byte ) ( - 1 ) ; bloomFilterAddRemove4Bit0 . add ( byteArray1 ) ; byte [ ] byteArray2 = new byte [ 3 ] ; bloomFilterRotator0 . add ( byteArray2 ) ; byteArray2 [ 0 ] = ( byte ) ( - 1 ) ; int int0 = bloomFilterRotator0 . add ( byteArray2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEntryCount ( ) ; byte getDiversification ( ) ; String getString ( ) ; }
void test9 ( ) throws Throwable { BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit ( 6 ) ; BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator ( ( BloomFilter ) bloomFilterAddRemove8Bit0 , 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test0 ( ) throws Throwable { BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit ( 145 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test1 ( ) throws Throwable { BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit ( 1912 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test2 ( ) throws Throwable { BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit ( 1912 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( SkinView skinView ) { if ( skinView = = null ) { return ; } mon_skinViews . enter ( ) ; try { List < SkinView > list = mapSkinViews . get ( skinView . getClass ( ) ) ; if ( list ! = null ) { list . remove ( skinView ) ; if ( list . isEmpty ( ) ) { mapSkinViews . remove ( skinView . getClass ( ) ) ; } } } finally { mon_skinViews . exit ( ) ; } SWTSkinObject mainSkinObject = skinView . getMainSkinObject ( ) ; if ( mainSkinObject ! = null ) { skinIDs . remove ( mainSkinObject . getSkinObjectID ( ) ) ; skinViewIDs . remove ( mainSkinObject . getViewID ( ) ) ; } }
void test4 ( ) throws Throwable { BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int decValue ( int index ) { int original_value = getValue ( index ) ; if ( original_value < = 0 ) { return ( 0 ) ; } setValue ( index , ( byte ) ( original_value - 1 ) ) ; return ( original_value ) ; }
void test0 ( ) throws Throwable { BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly ( 0 ) ; byte [ ] byteArray0 = new byte [ 8 ] ; int int0 = bloomFilterAddOnly0 . remove ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxEntries ( ) { return ( max_entries ) ; }
void test1 ( ) throws Throwable { BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly ( ( - 3 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxEntries ( ) { return ( max_entries ) ; }
void test2 ( ) throws Throwable { BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxEntries ( ) { return ( max_entries ) ; }
void test3 ( ) throws Throwable { BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit ( 1 ) ; byte [ ] byteArray0 = new byte [ 4 ] ; bloomFilterAddRemove4Bit0 . add ( byteArray0 ) ; int int0 = bloomFilterAddRemove4Bit0 . add ( ( int ) ( byte ) 96 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEntryCount ( ) ; byte getDiversification ( ) ; String getString ( ) ; }
void test4 ( ) throws Throwable { BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly ( ( - 3 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxEntries ( ) { return ( max_entries ) ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; byte [ ] byteArray1 = BloomFilterImpl . getSerialization ( byteArray0 , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getSerialization ( ) { / / combine address and port bytes into one byte [ ] full_address = new byte [ address . length + 2 ] ; System . arraycopy ( address , 0 , full_address , 0 , address . length ) ; full_address [ address . length ] = ( byte ) ( tcp_port > > 8 ) ; full_address [ address . length + 1 ] = ( byte ) ( tcp_port & 0xff ) ; return full_address ; }
void test6 ( ) throws Throwable { BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly ( ( - 3 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxEntries ( ) { return ( max_entries ) ; }
void test7 ( ) throws Throwable { BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly ( 0 ) ; Map < String , Object > map0 = bloomFilterAddOnly0 . serialiseToMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test8 ( ) throws Throwable { BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; BloomFilter bloomFilter0 = BloomFilterImpl . deserialiseFromMap ( ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test10 ( ) throws Throwable { BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( SkinView skinView ) { if ( skinView = = null ) { return ; } mon_skinViews . enter ( ) ; try { List < SkinView > list = mapSkinViews . get ( skinView . getClass ( ) ) ; if ( list ! = null ) { list . remove ( skinView ) ; if ( list . isEmpty ( ) ) { mapSkinViews . remove ( skinView . getClass ( ) ) ; } } } finally { mon_skinViews . exit ( ) ; } SWTSkinObject mainSkinObject = skinView . getMainSkinObject ( ) ; if ( mainSkinObject ! = null ) { skinIDs . remove ( mainSkinObject . getSkinObjectID ( ) ) ; skinViewIDs . remove ( mainSkinObject . getViewID ( ) ) ; } }
void test11 ( ) throws Throwable { BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEntryCount ( ) ; byte getDiversification ( ) ; String getString ( ) ; }
void test12 ( ) throws Throwable { BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly ( ( - 3 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxEntries ( ) { return ( max_entries ) ; }
void test0 ( ) throws Throwable { BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit ( 0 ) ; Map < String , Object > map0 = bloomFilterAddRemove8Bit0 . serialiseToMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test1 ( ) throws Throwable { BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit ( 0 ) ; byte [ ] byteArray0 = new byte [ 8 ] ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . incValue ( 0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . incValue ( ( int ) ( byte ) 0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . incValue ( ( int ) ( byte ) 0 ) ; byte [ ] byteArray1 = new byte [ 10 ] ; bloomFilterAddRemove8Bit0 . add ( byteArray1 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray1 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; byte [ ] byteArray2 = new byte [ 4 ] ; bloomFilterAddRemove8Bit0 . add ( byteArray2 ) ; byte [ ] byteArray3 = new byte [ 10 ] ; bloomFilterAddRemove8Bit0 . add ( byteArray3 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray2 ) ; byte [ ] byteArray4 = new byte [ 7 ] ; bloomFilterAddRemove8Bit0 . add ( byteArray1 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray4 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray4 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray2 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray2 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray4 ) ; byte [ ] byteArray5 = new byte [ 1 ] ; bloomFilterAddRemove8Bit0 . add ( byteArray5 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray5 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray1 ) ; byte [ ] byteArray6 = new byte [ 4 ] ; bloomFilterAddRemove8Bit0 . add ( byteArray6 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray6 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray5 ) ; byte [ ] byteArray7 = new byte [ 21 ] ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . incValue ( 0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray7 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray5 ) ; bloomFilterAddRemove8Bit0 . incValue ( ( int ) ( byte ) 0 ) ; bloomFilterAddRemove8Bit0 . incValue ( ( int ) ( byte ) 0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray6 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray2 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray5 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray6 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray6 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray3 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray4 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray6 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray4 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray6 ) ; bloomFilterAddRemove8Bit0 . add ( byteArray5 ) ; int int0 = bloomFilterAddRemove8Bit0 . add ( byteArray6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test2 ( ) throws Throwable { BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit ( 0 ) ; BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit1 = ( BloomFilterAddRemove8Bit ) bloomFilterAddRemove8Bit0 . getReplica ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit ( 1506 ) ; byte [ ] byteArray0 = new byte [ 9 ] ; int int0 = bloomFilterAddRemove8Bit0 . remove ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( SkinView skinView ) { if ( skinView = = null ) { return ; } mon_skinViews . enter ( ) ; try { List < SkinView > list = mapSkinViews . get ( skinView . getClass ( ) ) ; if ( list ! = null ) { list . remove ( skinView ) ; if ( list . isEmpty ( ) ) { mapSkinViews . remove ( skinView . getClass ( ) ) ; } } } finally { mon_skinViews . exit ( ) ; } SWTSkinObject mainSkinObject = skinView . getMainSkinObject ( ) ; if ( mainSkinObject ! = null ) { skinIDs . remove ( mainSkinObject . getSkinObjectID ( ) ) ; skinViewIDs . remove ( mainSkinObject . getViewID ( ) ) ; } }
void test4 ( ) throws Throwable { BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit ( 0 ) ; int int0 = bloomFilterAddRemove8Bit0 . trimValue ( 1243 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int trimValue ( int value ) { if ( value < 0 ) { return ( 0 ) ; } else if ( value > 1 ) { return ( 1 ) ; } else { return ( value ) ; } }
void test5 ( ) throws Throwable { BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit ( 0 ) ; byte [ ] byteArray0 = new byte [ 8 ] ; bloomFilterAddRemove8Bit0 . add ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( SkinView skinView ) { if ( skinView = = null ) { return ; } mon_skinViews . enter ( ) ; try { List < SkinView > list = mapSkinViews . get ( skinView . getClass ( ) ) ; if ( list ! = null ) { list . remove ( skinView ) ; if ( list . isEmpty ( ) ) { mapSkinViews . remove ( skinView . getClass ( ) ) ; } } } finally { mon_skinViews . exit ( ) ; } SWTSkinObject mainSkinObject = skinView . getMainSkinObject ( ) ; if ( mainSkinObject ! = null ) { skinIDs . remove ( mainSkinObject . getSkinObjectID ( ) ) ; skinViewIDs . remove ( mainSkinObject . getViewID ( ) ) ; } }
void test0 ( ) throws Throwable { BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test1 ( ) throws Throwable { BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly ( 0 ) ; BloomFilterAddOnly bloomFilterAddOnly1 = ( BloomFilterAddOnly ) bloomFilterAddOnly0 . getReplica ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test2 ( ) throws Throwable { BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEntryCount ( ) ; byte getDiversification ( ) ; String getString ( ) ; }
void test3 ( ) throws Throwable { BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly ( 1912 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( SkinView skinView ) { if ( skinView = = null ) { return ; } mon_skinViews . enter ( ) ; try { List < SkinView > list = mapSkinViews . get ( skinView . getClass ( ) ) ; if ( list ! = null ) { list . remove ( skinView ) ; if ( list . isEmpty ( ) ) { mapSkinViews . remove ( skinView . getClass ( ) ) ; } } } finally { mon_skinViews . exit ( ) ; } SWTSkinObject mainSkinObject = skinView . getMainSkinObject ( ) ; if ( mainSkinObject ! = null ) { skinIDs . remove ( mainSkinObject . getSkinObjectID ( ) ) ; skinViewIDs . remove ( mainSkinObject . getViewID ( ) ) ; } }
void test4 ( ) throws Throwable { BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly ( 10000 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int trimValue ( int value ) { if ( value < 0 ) { return ( 0 ) ; } else if ( value > 1 ) { return ( 1 ) ; } else { return ( value ) ; } }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = PNG . getPNGBytesForWidth ( 1290 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getPNGBytesForWidth ( int width ) { return getPNGBytesForSize ( width , 1 ) ; }
void test1 ( ) throws Throwable { PNG pNG0 = new PNG ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { IDATChunk iDATChunk0 = new IDATChunk ( 1 , 1 ) ; byte [ ] byteArray0 = iDATChunk0 . getChunkPayload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getChunkPayload ( ) { byte [ ] contentPayload = getContentPayload ( ) ; int length = contentPayload . length ; ByteBuffer buffer = ByteBuffer . allocate ( length + 12 ) ; buffer . putInt ( length ) ; buffer . put ( type ) ; buffer . put ( contentPayload ) ; buffer . position ( 4 ) ; buffer . limit ( length + 8 ) ; long crc = crc ( buffer ) ; buffer . limit ( length + 12 ) ; buffer . putInt ( ( int ) crc ) ; buffer . position ( 0 ) ; return buffer . array ( ) ; }
void test0 ( ) throws Throwable { PngSignatureChunk pngSignatureChunk0 = new PngSignatureChunk ( ) ; byte [ ] byteArray0 = pngSignatureChunk0 . getChunkPayload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getChunkPayload ( ) { byte [ ] contentPayload = getContentPayload ( ) ; int length = contentPayload . length ; ByteBuffer buffer = ByteBuffer . allocate ( length + 12 ) ; buffer . putInt ( length ) ; buffer . put ( type ) ; buffer . put ( contentPayload ) ; buffer . position ( 4 ) ; buffer . limit ( length + 8 ) ; long crc = crc ( buffer ) ; buffer . limit ( length + 12 ) ; buffer . putInt ( ( int ) crc ) ; buffer . position ( 0 ) ; return buffer . array ( ) ; }
void test0 ( ) throws Throwable { IHDRChunk iHDRChunk0 = new IHDRChunk ( 0 , 0 ) ; byte [ ] byteArray0 = iHDRChunk0 . getChunkPayload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getChunkPayload ( ) { byte [ ] contentPayload = getContentPayload ( ) ; int length = contentPayload . length ; ByteBuffer buffer = ByteBuffer . allocate ( length + 12 ) ; buffer . putInt ( length ) ; buffer . put ( type ) ; buffer . put ( contentPayload ) ; buffer . position ( 4 ) ; buffer . limit ( length + 8 ) ; long crc = crc ( buffer ) ; buffer . limit ( length + 12 ) ; buffer . putInt ( ( int ) crc ) ; buffer . position ( 0 ) ; return buffer . array ( ) ; }
void test0 ( ) throws Throwable { IENDChunk iENDChunk0 = new IENDChunk ( ) ; byte [ ] byteArray0 = iENDChunk0 . getChunkPayload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getChunkPayload ( ) { byte [ ] contentPayload = getContentPayload ( ) ; int length = contentPayload . length ; ByteBuffer buffer = ByteBuffer . allocate ( length + 12 ) ; buffer . putInt ( length ) ; buffer . put ( type ) ; buffer . put ( contentPayload ) ; buffer . position ( 4 ) ; buffer . limit ( length + 8 ) ; long crc = crc ( buffer ) ; buffer . limit ( length + 12 ) ; buffer . putInt ( ( int ) crc ) ; buffer . position ( 0 ) ; return buffer . array ( ) ; }
void test0 ( ) throws Throwable { IENDChunk iENDChunk0 = new IENDChunk ( ) ; byte [ ] byteArray0 = iENDChunk0 . getContentPayload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getContentPayload ( ) ; / * Table of CRCs of all 8 - bit messages . * / long [ ] crc_table = new long [ 256 ] ; / * Flag : has the table been computed ? Initially false . * / boolean crc_table_computed = false ; / * Make the table for a fast CRC . * / void make_crc_table ( ) { long c ; int n , k ; for ( n = 0 ; n < 256 ; n + + ) { c = ( long ) n ; for ( k = 0 ; k < 8 ; k + + ) { if ( ( c & 1 ) ! = 0 ) c = 0x0edb88320L ^ ( ( c > > 1 ) & 0x0FFFFFFFF ) ; else c = c > > 1 ; c = c & 0x0FFFFFFFF ; } crc_table [ n ] = c ; } crc_table_computed = true ; }
void test0 ( ) throws Throwable { PIDLoopControler pIDLoopControler0 = new PIDLoopControler ( ( - 1 . 0 ) , 1713 . 0718877072056 , 1713 . 0718877072056 ) ; pIDLoopControler0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void reset ( ) { super . reset ( ) ; COConfigurationManager . removeParameter ( "NameColumn . showProgramIcon . " + getTableID ( ) ) ; }
void test1 ( ) throws Throwable { PIDLoopControler pIDLoopControler0 = new PIDLoopControler ( ( - 1 . 0 ) , 1713 . 0718877072056 , 1713 . 0718877072056 ) ; double double0 = pIDLoopControler0 . updateControler ( 9 . 661277687889908E9 , ( - 935 . 2433381186038 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double updateControler ( double error , double position ) ; void reset ( ) ; }
void test2 ( ) throws Throwable { PIDLoopControler pIDLoopControler0 = new PIDLoopControler ( ( - 1 . 0 ) , 1713 . 0718877072056 , 1713 . 0718877072056 ) ; pIDLoopControler0 . iMin = 5639739 . 621722799 ; double double0 = pIDLoopControler0 . updateControler ( ( - 1 . 0 ) , ( - 1 . 0 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double updateControler ( double error , double position ) ; void reset ( ) ; }
void test0 ( ) throws Throwable { CustomizationManagerImpl customizationManagerImpl0 = ( CustomizationManagerImpl ) CustomizationManagerFactory . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AzureusCore getSingleton ( ) throws AzureusCoreException { return ( AzureusCoreImpl . getSingleton ( ) ) ; }
void test1 ( ) throws Throwable { CustomizationManagerFactory customizationManagerFactory0 = new CustomizationManagerFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; CustomizationImpl customizationImpl0 = new CustomizationImpl ( ( CustomizationManagerImpl ) null , "" , "" , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test1 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; CustomizationImpl customizationImpl0 = new CustomizationImpl ( ( CustomizationManagerImpl ) null , "" , "" , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; CustomizationImpl customizationImpl0 = new CustomizationImpl ( ( CustomizationManagerImpl ) null , "" , "" , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; CustomizationImpl customizationImpl0 = new CustomizationImpl ( ( CustomizationManagerImpl ) null , "" , "" , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void exportToVuzeFile ( File target ) throws IOException ; VuzeFile exportToVuzeFile ( ) throws IOException ; / * * * Tests for sameness in terms of function ( ignores id , selection state etc ) * @param other * @return * / boolean sameLogicAs ( Engine other ) ; / * * * resets to initial state ( e . g . if the engine has state pertaining to what has / hasn't been downloaded * such as etags then this will be cleared ) * / void reset ( ) ; void delete ( ) ; String getString ( ) ; }
void test4 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; CustomizationImpl customizationImpl0 = new CustomizationImpl ( ( CustomizationManagerImpl ) null , "" , "" , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test5 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; CustomizationImpl customizationImpl0 = new CustomizationImpl ( ( CustomizationManagerImpl ) null , "" , "" , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test6 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; CustomizationImpl customizationImpl0 = new CustomizationImpl ( ( CustomizationManagerImpl ) null , "" , "" , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test7 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; CustomizationImpl customizationImpl0 = new CustomizationImpl ( ( CustomizationManagerImpl ) null , "" , "" , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { File file0 = new File ( "" , "" ) ; CustomizationImpl customizationImpl0 = new CustomizationImpl ( ( CustomizationManagerImpl ) null , "" , "" , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { CustomizationManagerImpl customizationManagerImpl0 = new CustomizationManagerImpl ( ) ; File file0 = new File ( "" , "" ) ; customizationManagerImpl0 . loadCustomizations ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean mkdirs ( File f ) { if ( Constants . isOSX ) { Pattern pat = Pattern . compile ( "^ ( / Volumes / [ ^ / ] + ) " ) ; Matcher matcher = pat . matcher ( f . getParent ( ) ) ; if ( matcher . find ( ) ) { String sVolume = matcher . group ( ) ; File fVolume = new File ( sVolume ) ; if ( ! fVolume . isDirectory ( ) ) { Logger . log ( new LogEvent ( LOGID , LogEvent . LT_WARNING , sVolume + " is not mounted or not available . " ) ) ; return false ; } } } return f . mkdirs ( ) ; }
void test1 ( ) throws Throwable { CustomizationManagerImpl customizationManagerImpl0 = ( CustomizationManagerImpl ) CustomizationManagerImpl . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AzureusCore getSingleton ( ) throws AzureusCoreException { return ( AzureusCoreImpl . getSingleton ( ) ) ; }
void test5 ( ) throws Throwable { CustomizationManagerImpl customizationManagerImpl0 = new CustomizationManagerImpl ( ) ; Customization customization0 = customizationManagerImpl0 . getActiveCustomization ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Customization getActiveCustomization ( ) ; Customization [ ] getCustomizations ( ) ; }
void test6 ( ) throws Throwable { CustomizationManagerImpl customizationManagerImpl0 = new CustomizationManagerImpl ( ) ; Customization [ ] customizationArray0 = customizationManagerImpl0 . getCustomizations ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Customization [ ] getCustomizations ( ) ; }
void test0 ( ) throws Throwable { ContentNetworkManagerImpl contentNetworkManagerImpl0 = ( ContentNetworkManagerImpl ) ContentNetworkManagerFactory . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AzureusCore getSingleton ( ) throws AzureusCoreException { return ( AzureusCoreImpl . getSingleton ( ) ) ; }
void test1 ( ) throws Throwable { ContentNetworkManagerFactory contentNetworkManagerFactory0 = new ContentNetworkManagerFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( Map < String , Object > ) hashMap0 ) ; Boolean boolean0 = ( Boolean ) contentNetworkVuzeGeneric0 . getProperty ( ( - 381 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getProperty ( String name ) ; }
void test1 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 13L , 13L , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) null , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test2 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( Map < String , Object > ) hashMap0 ) ; Set < Integer > set0 = contentNetworkVuzeGeneric0 . getServiceExclusions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Set < Integer > getServiceExclusions ( ) { return ( service_exclusions ) ; }
void test3 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServiceURL ( int service_type ) ; / * * * Generic parameterised service method * @param service_type * @param params * @return * / String getServiceURL ( int service_type , Object [ ] params ) ; / * * * search service helper method * @param query * @return * / String getSearchService ( String query ) ; String getXSearchService ( String query , boolean to_subscribe ) ; String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test4 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 1660L , 1660L , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , ( String ) null , ( String ) null , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( String ) null , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" ) ; HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric1 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 1660L , 1660L , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) hashSet0 , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "" , "" ) ; Integer integer0 = new Integer ( 36 ) ; hashSet0 . add ( integer0 ) ; contentNetworkVuzeGeneric1 . exportToBEncodedMap ( ( Map ) hashMap0 ) ; contentNetworkVuzeGeneric0 . importFromBEncodedMap ( ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test5 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test6 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getProperty ( String name ) ; }
void test7 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; Integer integer0 = new Integer ( 36 ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isServiceSupported ( int service_type ) ; / * * * Returns the base URL of the service . If not parameterised then this is sufficient to * invoke the service * @param service_type * @return * / String getServiceURL ( int service_type ) ; / * * * Generic parameterised service method * @param service_type * @param params * @return * / String getServiceURL ( int service_type , Object [ ] params ) ; / * * * search service helper method * @param query * @return * / String getSearchService ( String query ) ; String getXSearchService ( String query , boolean to_subscribe ) ; String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test8 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 1660L , 1660L , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , ( String ) null , ( String ) null , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( String ) null , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isServiceSupported ( int service_type ) ; / * * * Returns the base URL of the service . If not parameterised then this is sufficient to * invoke the service * @param service_type * @return * / String getServiceURL ( int service_type ) ; / * * * Generic parameterised service method * @param service_type * @param params * @return * / String getServiceURL ( int service_type , Object [ ] params ) ; / * * * search service helper method * @param query * @return * / String getSearchService ( String query ) ; String getXSearchService ( String query , boolean to_subscribe ) ; String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test9 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 1660L , 1660L , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) hashSet0 , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isServiceSupported ( int service_type ) ; / * * * Returns the base URL of the service . If not parameterised then this is sufficient to * invoke the service * @param service_type * @return * / String getServiceURL ( int service_type ) ; / * * * Generic parameterised service method * @param service_type * @param params * @return * / String getServiceURL ( int service_type , Object [ ] params ) ; / * * * search service helper method * @param query * @return * / String getSearchService ( String query ) ; String getXSearchService ( String query , boolean to_subscribe ) ; String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test10 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 1728L , 1728L , "" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isServiceSupported ( int service_type ) ; / * * * Returns the base URL of the service . If not parameterised then this is sufficient to * invoke the service * @param service_type * @return * / String getServiceURL ( int service_type ) ; / * * * Generic parameterised service method * @param service_type * @param params * @return * / String getServiceURL ( int service_type , Object [ ] params ) ; / * * * search service helper method * @param query * @return * / String getSearchService ( String query ) ; String getXSearchService ( String query , boolean to_subscribe ) ; String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test11 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; LinkedHashSet < Integer > linkedHashSet0 = new LinkedHashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( - 486L ) , 0L , " . 5\u0001" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) linkedHashSet0 , " . 5\u0001" , " . 5\u0001" , " . 5\u0001" , " . 5\u0001" , " . 5\u0001" , " . 5\u0001" , " . 5\u0001" , " . 5\u0001" , " . 5\u0001" , " . 5\u0001" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test12 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 1660L , 1660L , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) hashSet0 , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "" , "" ) ; Integer integer0 = new Integer ( 36 ) ; hashSet0 . add ( integer0 ) ; String string0 = contentNetworkVuzeGeneric0 . getServiceURL ( 36 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServiceURL ( int service_type ) ; / * * * Generic parameterised service method * @param service_type * @param params * @return * / String getServiceURL ( int service_type , Object [ ] params ) ; / * * * search service helper method * @param query * @return * / String getSearchService ( String query ) ; String getXSearchService ( String query , boolean to_subscribe ) ; String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test13 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 1660L , 1660L , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , ( String ) null , ( String ) null , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( String ) null , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" ) ; String string0 = contentNetworkVuzeGeneric0 . getFAQTopicService ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test14 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; Integer integer0 = new Integer ( 5 ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( long ) integer0 , ( long ) integer0 , " < D@3 ) Cy3A~ / r | 4\" = ( - " , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " ) ; String string0 = contentNetworkVuzeGeneric0 . getSearchService ( " < D@3 ) Cy3A~ / r | 4\" = ( - ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSearchService ( String query ) ; String getXSearchService ( String query , boolean to_subscribe ) ; String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test16 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServiceURL ( int service_type ) ; / * * * Generic parameterised service method * @param service_type * @param params * @return * / String getServiceURL ( int service_type , Object [ ] params ) ; / * * * search service helper method * @param query * @return * / String getSearchService ( String query ) ; String getXSearchService ( String query , boolean to_subscribe ) ; String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test17 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; Integer integer0 = new Integer ( 5 ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( long ) integer0 , ( long ) integer0 , " < D@3 ) Cy3A~ / r | 4\" = ( - " , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " , " < D@3 ) Cy3A~ / r | 4\" = ( - " ) ; String string0 = contentNetworkVuzeGeneric0 . getServiceURL ( ( int ) integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServiceURL ( int service_type ) ; / * * * Generic parameterised service method * @param service_type * @param params * @return * / String getServiceURL ( int service_type , Object [ ] params ) ; / * * * search service helper method * @param query * @return * / String getSearchService ( String query ) ; String getXSearchService ( String query , boolean to_subscribe ) ; String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test18 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 8080L , 8080L , "Er > 5ZKHPtI" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServiceURL ( int service_type ) ; / * * * Generic parameterised service method * @param service_type * @param params * @return * / String getServiceURL ( int service_type , Object [ ] params ) ; / * * * search service helper method * @param query * @return * / String getSearchService ( String query ) ; String getXSearchService ( String query , boolean to_subscribe ) ; String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test19 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 61433L , 8080L , "Er > 5ZKHPtI" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) null , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServiceURL ( int service_type ) ; / * * * Generic parameterised service method * @param service_type * @param params * @return * / String getServiceURL ( int service_type , Object [ ] params ) ; / * * * search service helper method * @param query * @return * / String getSearchService ( String query ) ; String getXSearchService ( String query , boolean to_subscribe ) ; String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test20 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test21 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 1660L , 1660L , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , ( String ) null , ( String ) null , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( String ) null , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test22 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 1728L , 1728L , "" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test23 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 1660L , 1660L , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , ( String ) null , ( String ) null , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( String ) null , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test24 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 61433L , 8080L , "Er > 5ZKHPtI" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) null , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServiceURL ( int service_type ) ; / * * * Generic parameterised service method * @param service_type * @param params * @return * / String getServiceURL ( int service_type , Object [ ] params ) ; / * * * search service helper method * @param query * @return * / String getSearchService ( String query ) ; String getXSearchService ( String query , boolean to_subscribe ) ; String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test25 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 1728L , 1728L , "" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test26 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 8080L , 8080L , "Er > 5ZKHPtI" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServiceURL ( int service_type ) ; / * * * Generic parameterised service method * @param service_type * @param params * @return * / String getServiceURL ( int service_type , Object [ ] params ) ; / * * * search service helper method * @param query * @return * / String getSearchService ( String query ) ; String getXSearchService ( String query , boolean to_subscribe ) ; String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test27 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test28 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServiceURL ( int service_type ) ; / * * * Generic parameterised service method * @param service_type * @param params * @return * / String getServiceURL ( int service_type , Object [ ] params ) ; / * * * search service helper method * @param query * @return * / String getSearchService ( String query ) ; String getXSearchService ( String query , boolean to_subscribe ) ; String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test29 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 8080L , 8080L , "Er > 5ZKHPtI" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test30 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test32 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 1660L , 1660L , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , ( String ) null , ( String ) null , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( String ) null , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getServiceURL ( int service_type ) ; / * * * Generic parameterised service method * @param service_type * @param params * @return * / String getServiceURL ( int service_type , Object [ ] params ) ; / * * * search service helper method * @param query * @return * / String getSearchService ( String query ) ; String getXSearchService ( String query , boolean to_subscribe ) ; String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test34 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 1660L , 1660L , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , ( String ) null , ( String ) null , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( String ) null , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test35 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 8080L , 8080L , "Er > 5ZKHPtI" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test36 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test37 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test38 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 13L , 13L , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) null , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" , " / comment / KeyGenerator . RC4 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rnd = 0 . 8370328683548498" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test39 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 1660L , 1660L , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) hashSet0 , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test40 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 8080L , 8080L , "Er > 5ZKHPtI" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" , "Er > 5ZKHPtI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test41 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( Map < String , Object > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test42 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 1660L , 1660L , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , ( String ) null , ( String ) null , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( String ) null , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" , ( String ) null , "com . aelitis . azureus . plugins . magnet . MagnetPlugin" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test1 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 0L , 0L , "Socks server is requesting authentication , please setup user and password in config" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) hashSet0 , "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesKey ( ) { return ( "cnetwork . net . " + id + " . props" ) ; }
void test2 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( - 202L ) , ( - 202L ) , "Z | 6 ) ! " , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , "Z | 6 ) ! " , "Z | 6 ) ! " , "Z | 6 ) ! " , "Z | 6 ) ! " , "Z | 6 ) ! " , "Z | 6 ) ! " , "Z | 6 ) ! " , "Z | 6 ) ! " , "Z | 6 ) ! " ) ; boolean boolean0 = contentNetworkVuzeGeneric0 . isStartupNetwork ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesKey ( ) { return ( "cnetwork . net . " + id + " . props" ) ; }
void test3 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 0L , 0L , "Socks server is requesting authentication , please setup user and password in config" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) hashSet0 , "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" ) ; String string0 = contentNetworkVuzeGeneric0 . getTorrentDownloadService ( "Socks server is requesting authentication , please setup user and password in config" , "Socks server is requesting authentication , please setup user and password in config" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test4 ( ) throws Throwable { HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 2000L , 2000L , "RkS1UX : z" , ( Map < String , Object > ) null , ( Set < Integer > ) hashSet0 , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" ) ; contentNetworkVuzeGeneric0 . addPersistentPropertyChangeListener ( ( ContentNetworkPropertyChangeListener ) null ) ; contentNetworkVuzeGeneric0 . setPersistentProperty ( "RkS1UX : z" , "RkS1UX : zdetails / RkS1UX : zsearch ? q = RkS1UX%3Az & azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rand = 0 . html ? azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & client_ref = RkS1UX%3Az" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesKey ( ) { return ( "cnetwork . net . " + id + " . props" ) ; }
void test5 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; LinkedHashSet < Integer > linkedHashSet0 = new LinkedHashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( - 2L ) , ( - 2L ) , "Bs ) ; DjPD~G" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) linkedHashSet0 , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" ) ; contentNetworkVuzeGeneric0 . setTransientProperty ( ( Object ) " { } " , ( Object ) " { } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test6 ( ) throws Throwable { HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 2000L , 2000L , "RkS1UX : z" , ( Map < String , Object > ) null , ( Set < Integer > ) hashSet0 , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" ) ; String string0 = contentNetworkVuzeGeneric0 . getExternalSiteRelativeURL ( "RkS1UX : z" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test7 ( ) throws Throwable { HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( - 1350L ) , ( - 1350L ) , ( String ) null , ( Map < String , Object > ) null , ( Set < Integer > ) hashSet0 , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null ) ; String string0 = contentNetworkVuzeGeneric0 . getAddFriendURL ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test8 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 0L , 0L , "KXs & g6 - 09" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) hashSet0 , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" ) ; Map < String , Object > map0 = contentNetworkVuzeGeneric0 . getPersistentPropertyDefaults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test9 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 0L , 0L , "KXs & g6 - 09" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) hashSet0 , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" ) ; boolean boolean0 = contentNetworkVuzeGeneric0 . isSameAs ( ( ContentNetworkImpl ) contentNetworkVuzeGeneric0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test10 ( ) throws Throwable { HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 2000L , 2000L , "RkS1UX : z" , ( Map < String , Object > ) null , ( Set < Integer > ) hashSet0 , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" ) ; String string0 = contentNetworkVuzeGeneric0 . getContentDetailsService ( "RkS1UX : zsearch ? q = RkS1UX%3Az & azid = D5FXK5A2S3I2CM6LMSPZPP5YRUT7T5NZ & azv = 4 . 7 . 2 . 1_CVS & locale = en & os . name = Linux & vzemb = 1 & rand = 0" , "RkS1UX : z" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test12 ( ) throws Throwable { HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 2000L , 2000L , "RkS1UX : z" , ( Map < String , Object > ) null , ( Set < Integer > ) hashSet0 , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" ) ; String string0 = contentNetworkVuzeGeneric0 . getSearchService ( "RkS1UX : z" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test13 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 0L , 0L , "KXs & g6 - 09" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) hashSet0 , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" ) ; VuzeFileImpl vuzeFileImpl0 = ( VuzeFileImpl ) contentNetworkVuzeGeneric0 . getVuzeFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test14 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; LinkedHashSet < Integer > linkedHashSet0 = new LinkedHashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 0L , 0L , "FrlsY Ez . \"kp8wxu" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) linkedHashSet0 , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" ) ; String string0 = contentNetworkVuzeGeneric0 . getLoginService ( "0 - FrlsY Ez . \"kp8wxu : version = 0 , site = FrlsY Ez . \"kp8wxu" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test15 ( ) throws Throwable { HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 2000L , 2000L , " < + bFh5GZf'AE0 < , DK" , ( Map < String , Object > ) null , ( Set < Integer > ) hashSet0 , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" ) ; contentNetworkVuzeGeneric0 . updateFrom ( ( ContentNetworkImpl ) contentNetworkVuzeGeneric0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test16 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; LinkedHashSet < Integer > linkedHashSet0 = new LinkedHashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 0L , 0L , "FrlsY Ez . \"kp8wxu" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) linkedHashSet0 , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test17 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; LinkedHashSet < Integer > linkedHashSet0 = new LinkedHashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 0L , 0L , "FrlsY Ez . \"kp8wxu" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) linkedHashSet0 , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" ) ; String string0 = contentNetworkVuzeGeneric0 . getCommentService ( "FrlsY Ez . \"kp8wxu" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test18 ( ) throws Throwable { HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 2000L , 2000L , "RkS1UX : z" , ( Map < String , Object > ) null , ( Set < Integer > ) hashSet0 , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" ) ; String string0 = contentNetworkVuzeGeneric0 . getFAQTopicService ( "RkS1UX : z" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test19 ( ) throws Throwable { HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 2000L , 2000L , "RkS1UX : z" , ( Map < String , Object > ) null , ( Set < Integer > ) hashSet0 , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" ) ; String string0 = contentNetworkVuzeGeneric0 . getSiteRelativeURL ( "RkS1UX : z" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test20 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; LinkedHashSet < Integer > linkedHashSet0 = new LinkedHashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( - 2L ) , ( - 2L ) , "Bs ) ; DjPD~G" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) linkedHashSet0 , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" ) ; contentNetworkVuzeGeneric0 . removePersistentPropertyChangeListener ( ( ContentNetworkPropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test21 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( - 202L ) , ( - 202L ) , "Z | 6 ) ! " , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , "Z | 6 ) ! " , "Z | 6 ) ! " , "Z | 6 ) ! " , "Z | 6 ) ! " , "Z | 6 ) ! " , "Z | 6 ) ! " , "Z | 6 ) ! " , "Z | 6 ) ! " , "Z | 6 ) ! " ) ; contentNetworkVuzeGeneric0 . getTransientProperty ( ( Object ) ( - 202L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesKey ( ) { return ( "cnetwork . net . " + id + " . props" ) ; }
void test22 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 0L , 0L , "KXs & g6 - 09" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) hashSet0 , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" ) ; String string0 = contentNetworkVuzeGeneric0 . getProfileService ( "KXs & g6 - 09" , "KXs & g6 - 09" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test23 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 0L , 0L , "KXs & g6 - 09" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) hashSet0 , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" , "KXs & g6 - 09" ) ; String string0 = contentNetworkVuzeGeneric0 . getSubscriptionURL ( "KXs & g6 - 09" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test25 ( ) throws Throwable { HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 2000L , 2000L , "RkS1UX : z" , ( Map < String , Object > ) null , ( Set < Integer > ) hashSet0 , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" , "RkS1UX : z" ) ; contentNetworkVuzeGeneric0 . setPersistentProperty ( "RkS1UX : z" , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test26 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; LinkedHashSet < Integer > linkedHashSet0 = new LinkedHashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( - 2L ) , ( - 2L ) , "Bs ) ; DjPD~G" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) linkedHashSet0 , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" , "Bs ) ; DjPD~G" ) ; contentNetworkVuzeGeneric0 . setStartupNetwork ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStartupNetwork ( ) ; void setStartupNetwork ( boolean is_startup ) ; / * * * Test if the network supports a particular service * @param service_type * @return * / boolean isServiceSupported ( int service_type ) ; / * * * Returns the base URL of the service . If not parameterised then this is sufficient to * invoke the service * @param service_type * @return * / String getServiceURL ( int service_type ) ; / * * * Generic parameterised service method * @param service_type * @param params * @return * / String getServiceURL ( int service_type , Object [ ] params ) ; / * * * search service helper method * @param query * @return * / String getSearchService ( String query ) ; String getXSearchService ( String query , boolean to_subscribe ) ; String getContentDetailsService ( String hash , String client_ref ) ; String getCommentService ( String hash ) ; String getProfileService ( String login_id , String client_ref ) ; String getTorrentDownloadService ( String hash , String client_ref ) ; / * * * @param topic The topic number or a pre - defined topic constant found in < code > FAQTopics < / code > * / String getFAQTopicService ( String topic ) ; String getLoginService ( String message ) ; String getSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getExternalSiteRelativeURL ( String relative_url , boolean append_suffix ) ; String getAddFriendURL ( String bg_colour ) ; String getSubscriptionURL ( String subs_id ) ; / * * * I'd rather this function we embedded into the ContentNetwork service getting logic , but for * the moment expose it for simplicity * @param url_in base URL onto which the suffix should be appended * @param for_post whether this is for an HTTP 'POST' operation , in which case the parameter * separator is always an ' & ' ( for 'GET' the first param uses a ' ? ' sep ) * @param include_azid whether or not we should include the azid in the suffix * @return * / String appendURLSuffix ( String url_in , boolean for_post , boolean include_azid ) ; / * * * export to vuze file * @return * / VuzeFile getVuzeFile ( ) ; / * * * Sets a locally persistent property . Name should be from the PP_ names above so keep track * of what attributes exist * * @param name PP_ constant * @param value must be bencodable ! * / void setPersistentProperty ( String name , Object value ) ; Object getPersistentProperty ( String name ) ; void addPersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; void removePersistentPropertyChangeListener ( ContentNetworkPropertyChangeListener listener ) ; / * * * Set a non - persistent property of the content network * @param key * @param value * / void setTransientProperty ( Object key , Object value ) ; Object getTransientProperty ( Object key ) ; void remove ( ) ; }
void test27 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; LinkedHashSet < Integer > linkedHashSet0 = new LinkedHashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 0L , 0L , "FrlsY Ez . \"kp8wxu" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) linkedHashSet0 , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" , "FrlsY Ez . \"kp8wxu" ) ; contentNetworkVuzeGeneric0 . getPersistentProperty ( "FrlsY Ez . \"kp8wxu" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test28 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; TreeSet < Integer > treeSet0 = new TreeSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( - 4L ) , ( - 4L ) , " * z_TQ ] R ( %k^`J" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) treeSet0 , " * z_TQ ] R ( %k^`J" , " * z_TQ ] R ( %k^`J" , " * z_TQ ] R ( %k^`J" , " * z_TQ ] R ( %k^`J" , " * z_TQ ] R ( %k^`J" , " * z_TQ ] R ( %k^`J" , " * z_TQ ] R ( %k^`J" , " * z_TQ ] R ( %k^`J" , " * z_TQ ] R ( %k^`J" ) ; contentNetworkVuzeGeneric0 . isStartupNetwork ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test29 ( ) throws Throwable { HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , ( - 1350L ) , ( - 1350L ) , ( String ) null , ( Map < String , Object > ) null , ( Set < Integer > ) hashSet0 , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null ) ; boolean boolean0 = contentNetworkVuzeGeneric0 . isStartupNetwork ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesKey ( ) { return ( "cnetwork . net . " + id + " . props" ) ; }
void test30 ( ) throws Throwable { HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( ( ContentNetworkManagerImpl ) null , 2000L , 2000L , " < + bFh5GZf'AE0 < , DK" , ( Map < String , Object > ) null , ( Set < Integer > ) hashSet0 , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" , " < + bFh5GZf'AE0 < , DK" ) ; boolean boolean0 = contentNetworkVuzeGeneric0 . isStartupNetwork ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ContentNetworkManagerImpl contentNetworkManagerImpl0 = new ContentNetworkManagerImpl ( ) ; contentNetworkManagerImpl0 . checkForUpdates ( ) ; contentNetworkManagerImpl0 . checkForUpdates ( ) ; contentNetworkManagerImpl0 . addContentNetwork ( 1607L ) ; contentNetworkManagerImpl0 . getStartupContentNetwork ( ) ; ContentNetworkManagerImpl contentNetworkManagerImpl1 = new ContentNetworkManagerImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ContentNetworkManagerImpl contentNetworkManagerImpl0 = new ContentNetworkManagerImpl ( ) ; contentNetworkManagerImpl0 . loadConfig ( ) ; ContentNetworkManagerImpl . preInitialise ( ) ; HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( contentNetworkManagerImpl0 , ( - 1831L ) , ( - 1831L ) , " , " , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) null , " , " , " ) E ] = S ? @P04 : `W" , " ) E ] = S ? @P04 : `W" , " , " , " ) E ] = S ? @P04 : `W" , " ) E ] = S ? @P04 : `W" , " ) E ] = S ? @P04 : `W" , " , " , " ) E ] = S ? @P04 : `W" , " , " ) ; contentNetworkManagerImpl0 . getContentNetworkForURL ( " , " ) ; contentNetworkManagerImpl0 . addContentNetwork ( ( - 1831L ) ) ; contentNetworkManagerImpl0 . removeNetwork ( ( ContentNetworkImpl ) contentNetworkVuzeGeneric0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ContentNetworkManagerImpl contentNetworkManagerImpl0 = new ContentNetworkManagerImpl ( ) ; HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; HashSet < Integer > hashSet0 = new HashSet < Integer > ( ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric ( contentNetworkManagerImpl0 , 1807L , 0L , "l4B & & `Sf } 4$r" , ( Map < String , Object > ) hashMap0 , ( Set < Integer > ) hashSet0 , "l4B & & `Sf } 4$r" , "l4B & & `Sf } 4$r" , "l4B & & `Sf } 4$r" , "l4B & & `Sf } 4$r" , "l4B & & `Sf } 4$r" , "" , "l4B & & `Sf } 4$r" , "" , "" ) ; ContentNetworkVuzeGeneric contentNetworkVuzeGeneric1 = ( ContentNetworkVuzeGeneric ) contentNetworkManagerImpl0 . addNetwork ( ( ContentNetworkImpl ) contentNetworkVuzeGeneric0 ) ; contentNetworkManagerImpl0 . addNetwork ( ( ContentNetworkImpl ) contentNetworkVuzeGeneric1 ) ; ContentNetworkManagerImpl contentNetworkManagerImpl1 = new ContentNetworkManagerImpl ( ) ; contentNetworkManagerImpl1 . loadConfig ( ) ; contentNetworkManagerImpl1 . checkForUpdates ( ) ; contentNetworkManagerImpl1 . addContentNetwork ( 1420L ) ; contentNetworkManagerImpl1 . addContentNetwork ( 1420L ) ; contentNetworkManagerImpl1 . getContentNetworks ( ) ; ContentNetworkManagerImpl contentNetworkManagerImpl2 = ( ContentNetworkManagerImpl ) ContentNetworkManagerImpl . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { ClientMessageServiceClient clientMessageServiceClient0 = new ClientMessageServiceClient ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return debug_string ; }
void test1 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return debug_string ; }
void test2 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; clientConnection0 . setDebugString ( "FFy%PL = HF ( " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean writeMessages ( ) throws IOException { int bytes_written = out_queue . deliverToTransport ( 1024 * 1024 , false ) ; if ( bytes_written > 0 ) last_activity_time = System . currentTimeMillis ( ) ; last_write_made_progress = bytes_written > 0 ; return out_queue . getTotalSize ( ) > 0 ; }
void test3 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return debug_string ; }
void test4 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) { Utils . execSWTThread ( new AERunnable ( ) { void runSupport ( ) { if ( shell ! = null & & ! shell . isDisposed ( ) ) { shell . dispose ( ) ; } } } ) ; }
void test5 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return debug_string ; }
void test6 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return debug_string ; }
void test7 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return debug_string ; }
void test8 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return debug_string ; }
void test9 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return debug_string ; }
void test10 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 33 ] [ 8 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , true , byteArray0 ) ; ClientConnection clientConnection0 = new ClientConnection ( tCPTransportImpl0 ) ; clientConnection0 . close ( ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) { Utils . execSWTThread ( new AERunnable ( ) { void runSupport ( ) { if ( shell ! = null & & ! shell . isDisposed ( ) ) { shell . dispose ( ) ; } } } ) ; }
void test11 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return debug_string ; }
void test12 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return debug_string ; }
void test13 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return debug_string ; }
void test14 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean writeMessages ( ) throws IOException { int bytes_written = out_queue . deliverToTransport ( 1024 * 1024 , false ) ; if ( bytes_written > 0 ) last_activity_time = System . currentTimeMillis ( ) ; last_write_made_progress = bytes_written > 0 ; return out_queue . getTotalSize ( ) > 0 ; }
void test15 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return debug_string ; }
void test16 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return debug_string ; }
void test17 ( ) throws Throwable { byte [ ] [ ] byteArray0 = new byte [ 33 ] [ 8 ] ; TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl ( ( ProtocolEndpointTCP ) null , true , true , byteArray0 ) ; ClientConnection clientConnection0 = new ClientConnection ( tCPTransportImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return debug_string ; }
void test18 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return debug_string ; }
void test19 ( ) throws Throwable { ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDebugString ( ) { return debug_string ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { NonBlockingReadWriteService nonBlockingReadWriteService0 = new NonBlockingReadWriteService ( "hJvvj7m7" , 25 , 25 , ( NonBlockingReadWriteService . ServiceListener ) null ) ; ClientConnection clientConnection0 = new ClientConnection ( ( SocketChannel ) null ) ; nonBlockingReadWriteService0 . addClientConnection ( clientConnection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { ClientMessage clientMessage0 = new ClientMessage ( "J^ * " , ( ClientConnection ) null , ( Map ) null , ( ClientMessageHandler ) null ) ; clientMessage0 . setHandler ( ( ClientMessageHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessageID ( ) { return messageID ; }
void test1 ( ) throws Throwable { HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( 1 , 1 ) ; ClientMessage clientMessage0 = new ClientMessage ( ( String ) null , ( ClientConnection ) null , ( Map ) hashMap0 , ( ClientMessageHandler ) null ) ; String string0 = clientMessage0 . getMessageID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessageID ( ) { return messageID ; }
void test2 ( ) throws Throwable { HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( 1 , 1 ) ; ClientMessage clientMessage0 = new ClientMessage ( ( String ) null , ( ClientConnection ) null , ( Map ) hashMap0 , ( ClientMessageHandler ) null ) ; Map < Object , Object > map0 = clientMessage0 . getPayload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test3 ( ) throws Throwable { HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( 1 , 1 ) ; ClientMessage clientMessage0 = new ClientMessage ( ( String ) null , ( ClientConnection ) null , ( Map ) hashMap0 , ( ClientMessageHandler ) null ) ; ClientConnection clientConnection0 = clientMessage0 . getClient ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClient ( ) { return client ; }
void test4 ( ) throws Throwable { HashMap < String , Integer > hashMap0 = new HashMap < String , Integer > ( 1 , 1 ) ; ClientMessage clientMessage0 = new ClientMessage ( ( String ) null , ( ClientConnection ) null , ( Map ) hashMap0 , ( ClientMessageHandler ) null ) ; ClientMessageHandler clientMessageHandler0 = clientMessage0 . getHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DHTUDPPacketHandler getHandler ( DHTTransportUDPImpl transport , DHTUDPRequestHandler request_handler ) throws DHTUDPPacketHandlerException { return ( singleton . getHandlerSupport ( transport , request_handler ) ) ; }
void test0 ( ) throws Throwable { SecureMessageServiceClientImpl secureMessageServiceClientImpl0 = ( SecureMessageServiceClientImpl ) SecureMessageServiceClientFactory . create ( "vCkq` } O7 > z0@" , 954 , 954 , ( RSAPublicKey ) null , ( SecureMessageServiceClientAdapter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MainWindow create ( AzureusCore core , Display display , IUIIntializer uiInitializer ) { if ( isImmediate ( ) ) { return ( new MainWindowImpl ( core , display , uiInitializer ) ) ; } else { return ( new MainWindowDelayStub ( core , display , uiInitializer ) ) ; } }
void test1 ( ) throws Throwable { SecureMessageServiceClientFactory secureMessageServiceClientFactory0 = new SecureMessageServiceClientFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { HashMap < Object , String > hashMap0 = new HashMap < Object , String > ( ) ; SecureMessageServiceClientMessageImpl secureMessageServiceClientMessageImpl0 = new SecureMessageServiceClientMessageImpl ( ( SecureMessageServiceClientImpl ) null , ( Map ) hashMap0 , ( Object ) null , ( String ) null ) ; Map < Object , Object > map0 = secureMessageServiceClientMessageImpl0 . getReply ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getReply ( ) { return ( reply ) ; }
void test2 ( ) throws Throwable { HashMap < Object , String > hashMap0 = new HashMap < Object , String > ( ) ; SecureMessageServiceClientMessageImpl secureMessageServiceClientMessageImpl0 = new SecureMessageServiceClientMessageImpl ( ( SecureMessageServiceClientImpl ) null , ( Map ) hashMap0 , ( Object ) null , ( String ) null ) ; Object object0 = secureMessageServiceClientMessageImpl0 . getClientData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getClientData ( InetSocketAddress originator , Map originator_data ) { Long type = ( Long ) originator_data . get ( "_travreas" ) ; if ( type ! = null ) { NATTraversalHandler handler ; ( handlers ) { handler = ( NATTraversalHandler ) handlers . get ( new Integer ( type . intValue ( ) ) ) ; } if ( handler ! = null ) { return ( handler . process ( originator , originator_data ) ) ; } } return ( null ) ; }
void test3 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; SecureMessageServiceClientMessageImpl secureMessageServiceClientMessageImpl0 = new SecureMessageServiceClientMessageImpl ( ( SecureMessageServiceClientImpl ) null , ( Map ) hashMap0 , ( Object ) null , "" ) ; String string0 = secureMessageServiceClientMessageImpl0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test4 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; SecureMessageServiceClientMessageImpl secureMessageServiceClientMessageImpl0 = new SecureMessageServiceClientMessageImpl ( ( SecureMessageServiceClientImpl ) null , ( Map ) hashMap0 , ( Object ) null , "" ) ; Map < Object , Object > map0 = secureMessageServiceClientMessageImpl0 . getRequest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test5 ( ) throws Throwable { HashMap < Object , String > hashMap0 = new HashMap < Object , String > ( ) ; SecureMessageServiceClientMessageImpl secureMessageServiceClientMessageImpl0 = new SecureMessageServiceClientMessageImpl ( ( SecureMessageServiceClientImpl ) null , ( Map ) hashMap0 , ( Object ) null , ( String ) null ) ; secureMessageServiceClientMessageImpl0 . setReply ( ( Map ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test1 ( ) throws Throwable { SecureMessageServiceClientImpl secureMessageServiceClientImpl0 = new SecureMessageServiceClientImpl ( " top activity : " , 120 , ( - 161 ) , ( RSAPublicKey ) null , ( SecureMessageServiceClientAdapter ) null ) ; SecureMessageServiceClientMessage [ ] secureMessageServiceClientMessageArray0 = secureMessageServiceClientImpl0 . getMessages ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SecureMessageServiceClientMessage [ ] getMessages ( ) ; void addListener ( SecureMessageServiceClientListener l ) ; void removeListener ( SecureMessageServiceClientListener l ) ; }
void test2 ( ) throws Throwable { SecureMessageServiceClientImpl secureMessageServiceClientImpl0 = new SecureMessageServiceClientImpl ( "VH_ : A7ZXfnoaf I%e < 6" , 0 , 0 , ( RSAPublicKey ) null , ( SecureMessageServiceClientAdapter ) null ) ; SecureMessageServiceClientMessageImpl secureMessageServiceClientMessageImpl0 = ( SecureMessageServiceClientMessageImpl ) secureMessageServiceClientImpl0 . sendMessage ( ( Map ) null , ( Object ) "1111111111111111111111111111111111111111111111111111111010100110" , "VH_ : A7ZXfnoaf I%e < 6" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { SBC_ActivityTableView sBC_ActivityTableView0 = new SBC_ActivityTableView ( ) ; VuzeActivitiesManager . addListener ( ( VuzeActivitiesListener ) sBC_ActivityTableView0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test5 ( ) throws Throwable { VuzeActivitiesEntry [ ] vuzeActivitiesEntryArray0 = VuzeActivitiesManager . getAllEntries ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VuzeActivitiesEntry [ ] getAllEntries ( ) { return allEntries . toArray ( new VuzeActivitiesEntry [ allEntries . size ( ) ] ) ; }
void test6 ( ) throws Throwable { int int0 = VuzeActivitiesManager . getNumEntries ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumEntries ( ) { return allEntries . size ( ) ; }
void test7 ( ) throws Throwable { VuzeActivitiesManager vuzeActivitiesManager0 = new VuzeActivitiesManager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCutoffTime ( ) { return SystemTime . getOffsetTime ( - MAX_LIFE_MS ) ; }
void test12 ( ) throws Throwable { VuzeActivitiesEntry [ ] vuzeActivitiesEntryArray0 = new VuzeActivitiesEntry [ 2 ] ; VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; vuzeActivitiesEntryArray0 [ 0 ] = vuzeActivitiesEntry0 ; vuzeActivitiesEntryArray0 [ 1 ] = vuzeActivitiesEntry0 ; VuzeActivitiesEntry [ ] vuzeActivitiesEntryArray1 = VuzeActivitiesManager . addEntries ( vuzeActivitiesEntryArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeActivitiesEntry [ ] vuzeActivitiesEntryArray0 = new VuzeActivitiesEntry [ 1 ] ; VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( 0L , "0" , "U" , "" , "" , "" ) ; vuzeActivitiesEntryArray0 [ 0 ] = vuzeActivitiesEntry0 ; VuzeActivitiesEntry [ ] vuzeActivitiesEntryArray1 = VuzeActivitiesManager . addEntries ( vuzeActivitiesEntryArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test17 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = VuzeActivitiesManager . getEntryByID ( "QRwp~kJu" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VuzeActivitiesEntry getEntryByID ( String id ) { try { allEntries_mon . enter ( ) ; for ( Iterator < VuzeActivitiesEntry > iter = allEntries . iterator ( ) ; iter . hasNext ( ) ; ) { VuzeActivitiesEntry entry = iter . next ( ) ; if ( entry = = null ) { continue ; } String entryID = entry . getID ( ) ; if ( entryID ! = null & & entryID . equals ( id ) ) { return entry ; } } } finally { allEntries_mon . exit ( ) ; } return null ; }
void test18 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = VuzeActivitiesManager . getEntryByID ( "'dr79 . 'a2Ch / U" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" VuzeActivitiesEntry getEntryByID ( String id ) { try { allEntries_mon . enter ( ) ; for ( Iterator < VuzeActivitiesEntry > iter = allEntries . iterator ( ) ; iter . hasNext ( ) ; ) { VuzeActivitiesEntry entry = iter . next ( ) ; if ( entry = = null ) { continue ; } String entryID = entry . getID ( ) ; if ( entryID ! = null & & entryID . equals ( id ) ) { return entry ; } } } finally { allEntries_mon . exit ( ) ; } return null ; }
void test21 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = VuzeActivitiesManager . createEntryFromMap ( ( Map < ? , ? > ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAssetHash ( ) { return ( ( String ) toJSONMap ( ) . get ( "h" ) ) ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( - 1346L ) , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" ) ; vuzeActivitiesEntry0 . setAssetImageURL ( "name" ) ; Map < String , Object > map0 = vuzeActivitiesEntry0 . toDeletedMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; vuzeActivitiesEntry0 . getTimestamp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowThumb ( ) { return showThumb ; }
void test2 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( 1L , " = t'c . ps" , " = t'c . ps" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTimestamp ( ) { return timestamp ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( - 11L ) , "Problem moving torrent to removed download directory" , "Problem moving torrent to removed download directory" , "Problem moving torrent to removed download directory" , "Problem moving torrent to removed download directory" , "Problem moving torrent to removed download directory" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( - 1346L ) , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" ) ; SelectedContentV3 selectedContentV3_0 = vuzeActivitiesEntry0 . createSelectedContentObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( - 1346L ) , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" ) ; Map < String , Object > map0 = vuzeActivitiesEntry0 . toDeletedMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( - 606L ) , "%_\"W" , "%_\"W" , "%_\"W" , "%_\"W" , "%_\"W" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test7 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; vuzeActivitiesEntry0 . getReadOn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowThumb ( ) { return showThumb ; }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( - 1346L ) , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" ) ; vuzeActivitiesEntry0 . getImageBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test9 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; vuzeActivitiesEntry0 . setTorrent ( ( TOTorrent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowThumb ( ) { return showThumb ; }
void test10 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; vuzeActivitiesEntry0 . getAssetImageURL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowThumb ( ) { return showThumb ; }
void test11 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( 286L , "887 } fz~R + Sq` { = | 7 ! t" , "887 } fz~R + Sq` { = | 7 ! t" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowThumb ( ) { return showThumb ; }
void test12 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( 540L , "cje#nVa" , "cje#nVa" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPlayable ( ) { / / our variable is an override if ( playable ) { return true ; } / / use torrent so we don't recurse return PlayUtils . canPlayDS ( DataSourceUtils . getTorrent ( this ) , - 1 ) ; }
void test13 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; vuzeActivitiesEntry0 . setPlayable ( true ) ; Map < String , Object > map0 = vuzeActivitiesEntry0 . toMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowThumb ( ) { return showThumb ; }
void test14 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( 540L , "cje#nVa" , "cje#nVa" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowThumb ( ) { return showThumb ; }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( - 1346L ) , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" ) ; vuzeActivitiesEntry0 . equals ( ( Object ) "name" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test16 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; boolean boolean0 = vuzeActivitiesEntry0 . equals ( ( Object ) vuzeActivitiesEntry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowThumb ( ) { return showThumb ; }
void test17 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; vuzeActivitiesEntry0 . setID ( "ttot10_ + w ! k" ) ; boolean boolean0 = vuzeActivitiesEntry0 . equals ( ( Object ) vuzeActivitiesEntry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowThumb ( ) { return showThumb ; }
void test18 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( 299973L , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTimestamp ( ) { return timestamp ; }
void test19 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( - 1L ) , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTimestamp ( ) { return timestamp ; }
void test20 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( - 1L ) , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowThumb ( ) { return showThumb ; }
void test21 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; VuzeActivitiesEntry vuzeActivitiesEntry1 = new VuzeActivitiesEntry ( ( - 133L ) , "Rk%Jh9w ) " , "Rk%Jh9w ) " , "Rk%Jh9w ) " , "Rk%Jh9w ) " , "Rk%Jh9w ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test22 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( - 1346L ) , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" ) ; vuzeActivitiesEntry0 . setAssetImageURL ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test23 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( long ) ( - 1662 ) , "httpW" , "httpW" , "httpW" , "httpW" , "httpW" ) ; vuzeActivitiesEntry0 . setAssetImageURL ( "httpW" ) ; vuzeActivitiesEntry0 . setAssetImageURL ( "httpW" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test24 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; byte [ ] byteArray0 = new byte [ 10 ] ; vuzeActivitiesEntry0 . setImageBytes ( byteArray0 ) ; Map < String , Object > map0 = vuzeActivitiesEntry0 . toMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test25 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( 540L , "cje#nVa" , "cje#nVa" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowThumb ( ) { return showThumb ; }
void test26 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( long ) ( - 1662 ) , "httpW" , "httpW" , "httpW" , "httpW" , "httpW" ) ; vuzeActivitiesEntry0 . setTimestamp ( 10000L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test27 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( 540L , "cje#nVa" , "cje#nVa" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIconID ( ) { return iconID ; }
void test28 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( long ) ( - 1662 ) , "httpW" , "httpW" , "httpW" , "httpW" , "httpW" ) ; ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo ( "httpW" ) ; vuzeActivitiesEntry0 . tableColumn = ( TableColumnCore ) columnTC_NameInfo0 ; vuzeActivitiesEntry0 . setTimestamp ( 10000L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test29 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( - 606L ) , "%_\"W" , "%_\"W" , "%_\"W" , "%_\"W" , "%_\"W" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test30 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( 286L , "887 } fz~R + Sq` { = | 7 ! t" , "887 } fz~R + Sq` { = | 7 ! t" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTimestamp ( ) { return timestamp ; }
void test31 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; boolean boolean0 = vuzeActivitiesEntry0 . isPlayable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowThumb ( ) { return showThumb ; }
void test32 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; vuzeActivitiesEntry0 . setPlayable ( true ) ; boolean boolean0 = vuzeActivitiesEntry0 . isPlayable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPlayable ( ) { / / our variable is an override if ( playable ) { return true ; } / / use torrent so we don't recurse return PlayUtils . canPlayDS ( DataSourceUtils . getTorrent ( this ) , - 1 ) ; }
void test33 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( - 1346L ) , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" ) ; vuzeActivitiesEntry0 . setReadOn ( 2028L ) ; boolean boolean0 = vuzeActivitiesEntry0 . canFlipRead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test34 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( - 1346L ) , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" , "httpDH7 , Q" ) ; vuzeActivitiesEntry0 . setRead ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test35 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; vuzeActivitiesEntry0 . setRead ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowThumb ( ) { return showThumb ; }
void test36 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ) ; boolean boolean0 = vuzeActivitiesEntry0 . isRead ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowThumb ( ) { return showThumb ; }
void test37 ( ) throws Throwable { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( 1L , " = t'c . ps" , " = t'c . ps" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getReadOn ( ) { return readOn ; }
void test38 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry ( ( - 606L ) , "%_\"W" , "%_\"W" , "%_\"W" , "%_\"W" , "%_\"W" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { ClientIDPlugin clientIDPlugin0 = new ClientIDPlugin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; ClientIDPlugin . doHTTPProperties ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { RunEverythingPlugin runEverythingPlugin0 = new RunEverythingPlugin ( ) ; RunEverythingPlugin . downloadData runEverythingPlugin_downloadData0 = runEverythingPlugin0 . new downloadData ( ( Download ) null ) ; Download download0 = runEverythingPlugin_downloadData0 . getDownload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Download getDownload ( ) throws DownloadException { throw ( new DownloadException ( "Not supported" ) ) ; }
void test0 ( ) throws Throwable { BuddyPluginBuddyMessage buddyPluginBuddyMessage0 = new BuddyPluginBuddyMessage ( ( BuddyPluginBuddyMessageHandler ) null , 1589 , ( - 371 ) , ( Map ) null , 1 , ( - 1731L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getReply ( ) { return ( reply ) ; }
void test1 ( ) throws Throwable { BuddyPluginBuddyMessage buddyPluginBuddyMessage0 = new BuddyPluginBuddyMessage ( ( BuddyPluginBuddyMessageHandler ) null , 0 , 3000 , ( Map ) null , ( - 1117 ) , ( - 1L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSubsystem ( ) { return ( subsystem ) ; }
void test2 ( ) throws Throwable { BuddyPluginBuddyMessage buddyPluginBuddyMessage0 = new BuddyPluginBuddyMessage ( ( BuddyPluginBuddyMessageHandler ) null , 0 , 0 , ( Map ) null , 0 , ( - 1142L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BuddyPluginBuddy getBuddy ( ) { return ( handler . getBuddy ( ) ) ; }
void test3 ( ) throws Throwable { BuddyPluginBuddyMessage buddyPluginBuddyMessage0 = new BuddyPluginBuddyMessage ( ( BuddyPluginBuddyMessageHandler ) null , 1589 , ( - 371 ) , ( Map ) null , 1 , ( - 1731L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test4 ( ) throws Throwable { BuddyPluginBuddyMessage buddyPluginBuddyMessage0 = new BuddyPluginBuddyMessage ( ( BuddyPluginBuddyMessageHandler ) null , 99 , ( - 465 ) , ( Map ) null , 0 , ( - 1L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test5 ( ) throws Throwable { BuddyPluginBuddyMessage buddyPluginBuddyMessage0 = new BuddyPluginBuddyMessage ( ( BuddyPluginBuddyMessageHandler ) null , 0 , ( - 742 ) , ( Map ) null , ( - 742 ) , 1565L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getRequest ( ) { return ( request ) ; }
void test6 ( ) throws Throwable { BuddyPluginBuddyMessage buddyPluginBuddyMessage0 = new BuddyPluginBuddyMessage ( ( BuddyPluginBuddyMessageHandler ) null , 0 , 0 , ( Map ) null , 0 , ( - 1142L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSubsystem ( ) { return ( subsystem ) ; }
void test7 ( ) throws Throwable { BuddyPluginBuddyMessage buddyPluginBuddyMessage0 = new BuddyPluginBuddyMessage ( ( BuddyPluginBuddyMessageHandler ) null , 0 , 0 , ( Map ) null , 0 , ( - 1142L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getID ( ) { return sID ; }
void test8 ( ) throws Throwable { BuddyPluginBuddyMessage buddyPluginBuddyMessage0 = new BuddyPluginBuddyMessage ( ( BuddyPluginBuddyMessageHandler ) null , 0 , 3000 , ( Map ) null , ( - 1117 ) , ( - 1L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void delete ( ) { if ( viewComposite ! = null & & ! viewComposite . isDisposed ( ) ) { viewComposite . dispose ( ) ; } if ( textFont1 ! = null & & ! textFont1 . isDisposed ( ) ) { textFont1 . dispose ( ) ; } if ( textFont2 ! = null & & ! textFont2 . isDisposed ( ) ) { textFont2 . dispose ( ) ; } }
void test0 ( ) throws Throwable { File file0 = new File ( "os_away" ) ; BuddyPluginBuddyMessageHandler buddyPluginBuddyMessageHandler0 = new BuddyPluginBuddyMessageHandler ( ( BuddyPluginBuddy ) null , file0 ) ; buddyPluginBuddyMessageHandler0 . destroy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageCount ( ) { ( this ) { return ( message_count - pending_deletes ) ; } }
void test9 ( ) throws Throwable { BuddyPluginBuddyMessageHandler buddyPluginBuddyMessageHandler0 = new BuddyPluginBuddyMessageHandler ( ( BuddyPluginBuddy ) null , ( File ) null ) ; buddyPluginBuddyMessageHandler0 . removeListener ( ( BuddyPluginBuddyMessageListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageCount ( ) { ( this ) { return ( message_count - pending_deletes ) ; } }
void test10 ( ) throws Throwable { File file0 = new File ( "L@$ * mBVN70yYTMX : " ) ; BuddyPluginBuddyMessageHandler buddyPluginBuddyMessageHandler0 = new BuddyPluginBuddyMessageHandler ( ( BuddyPluginBuddy ) null , file0 ) ; buddyPluginBuddyMessageHandler0 . addListener ( ( BuddyPluginBuddyMessageListener ) null ) ; buddyPluginBuddyMessageHandler0 . deleteMessage ( ( BuddyPluginBuddyMessage ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageCount ( ) { ( this ) { return ( message_count - pending_deletes ) ; } }
void test12 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; BuddyPluginBuddyMessageHandler buddyPluginBuddyMessageHandler0 = new BuddyPluginBuddyMessageHandler ( ( BuddyPluginBuddy ) null , file0 ) ; BuddyPluginBuddy buddyPluginBuddy0 = buddyPluginBuddyMessageHandler0 . getBuddy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BuddyPluginBuddy getBuddy ( ) { return ( handler . getBuddy ( ) ) ; }
void test13 ( ) throws Throwable { File file0 = new File ( " < waiter lost > " ) ; BuddyPluginBuddyMessageHandler buddyPluginBuddyMessageHandler0 = new BuddyPluginBuddyMessageHandler ( ( BuddyPluginBuddy ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageCount ( ) { ( this ) { return ( message_count - pending_deletes ) ; } }
void test14 ( ) throws Throwable { File file0 = new File ( "Failed to update 'preferIPv6Address'" ) ; BuddyPluginBuddyMessageHandler buddyPluginBuddyMessageHandler0 = new BuddyPluginBuddyMessageHandler ( ( BuddyPluginBuddy ) null , file0 ) ; buddyPluginBuddyMessageHandler0 . checkPersistentDispatch ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageCount ( ) { ( this ) { return ( message_count - pending_deletes ) ; } }
void test15 ( ) throws Throwable { BuddyPluginBuddyMessageHandler buddyPluginBuddyMessageHandler0 = new BuddyPluginBuddyMessageHandler ( ( BuddyPluginBuddy ) null , ( File ) null ) ; buddyPluginBuddyMessageHandler0 . persistentDispatch ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageCount ( ) { ( this ) { return ( message_count - pending_deletes ) ; } }
void test16 ( ) throws Throwable { BuddyPluginBuddyMessageHandler buddyPluginBuddyMessageHandler0 = new BuddyPluginBuddyMessageHandler ( ( BuddyPluginBuddy ) null , ( File ) null ) ; buddyPluginBuddyMessageHandler0 . reportFailed ( ( BuddyPluginBuddyMessage ) null , ( Throwable ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageCount ( ) { ( this ) { return ( message_count - pending_deletes ) ; } }
void test17 ( ) throws Throwable { File file0 = new File ( "L@$ * mBVN70yYTMX : " ) ; BuddyPluginBuddyMessageHandler buddyPluginBuddyMessageHandler0 = new BuddyPluginBuddyMessageHandler ( ( BuddyPluginBuddy ) null , file0 ) ; buddyPluginBuddyMessageHandler0 . deleteMessage ( ( BuddyPluginBuddyMessage ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageCount ( ) { ( this ) { return ( message_count - pending_deletes ) ; } }
void test21 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; BuddyPluginBuddyMessageHandler buddyPluginBuddyMessageHandler0 = new BuddyPluginBuddyMessageHandler ( ( BuddyPluginBuddy ) null , file0 ) ; buddyPluginBuddyMessageHandler0 . deleteRequest ( 493 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageCount ( ) { ( this ) { return ( message_count - pending_deletes ) ; } }
void test22 ( ) throws Throwable { File file0 = new File ( " , traces = " , " , traces = " ) ; BuddyPluginBuddyMessageHandler buddyPluginBuddyMessageHandler0 = new BuddyPluginBuddyMessageHandler ( ( BuddyPluginBuddy ) null , file0 ) ; buddyPluginBuddyMessageHandler0 . deleteReply ( 12 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMessageCount ( ) { ( this ) { return ( message_count - pending_deletes ) ; } }
void test23 ( ) throws Throwable { File file0 = new File ( "Failed to update 'preferIPv6Address'" ) ; BuddyPluginBuddyMessageHandler buddyPluginBuddyMessageHandler0 = new BuddyPluginBuddyMessageHandler ( ( BuddyPluginBuddy ) null , file0 ) ; List < BuddyPluginBuddyMessage > list0 = buddyPluginBuddyMessageHandler0 . retrieveExplicitMessages ( 758 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test0 ( ) throws Throwable { DHTPlugin dHTPlugin0 = new DHTPlugin ( ) ; dHTPlugin0 . changePort ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return ( ST_UNKNOWN ) ; }
void test1 ( ) throws Throwable { DHTPlugin dHTPlugin0 = new DHTPlugin ( ) ; BasicPluginViewModelImpl basicPluginViewModelImpl0 = new BasicPluginViewModelImpl ( ( UIManagerImpl ) null , "" ) ; UITextFieldImpl uITextFieldImpl0 = ( UITextFieldImpl ) basicPluginViewModelImpl0 . getStatus ( ) ; dHTPlugin0 . initComplete ( ( UITextField ) uITextFieldImpl0 , false , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return ( ST_UNKNOWN ) ; }
void test2 ( ) throws Throwable { DHTPlugin dHTPlugin0 = new DHTPlugin ( ) ; int int0 = dHTPlugin0 . getStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return ( ST_UNKNOWN ) ; }
void test5 ( ) throws Throwable { DHTPlugin dHTPlugin0 = new DHTPlugin ( ) ; dHTPlugin0 . isSleeping ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return ( ST_UNKNOWN ) ; }
void test6 ( ) throws Throwable { DHTPlugin dHTPlugin0 = new DHTPlugin ( ) ; dHTPlugin0 . removeListener ( ( DHTPluginListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return ( ST_UNKNOWN ) ; }
void test7 ( ) throws Throwable { DHTPlugin dHTPlugin0 = new DHTPlugin ( ) ; boolean boolean0 = dHTPlugin0 . peekEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return ( ST_UNKNOWN ) ; }
void test8 ( ) throws Throwable { DHTPlugin dHTPlugin0 = new DHTPlugin ( ) ; boolean boolean0 = dHTPlugin0 . isInitialising ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return ( ST_UNKNOWN ) ; }
void test9 ( ) throws Throwable { DHTPlugin dHTPlugin0 = new DHTPlugin ( ) ; boolean boolean0 = dHTPlugin0 . isExtendedUseAllowed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return ( ST_UNKNOWN ) ; }
void test22 ( ) throws Throwable { DHTPlugin dHTPlugin0 = new DHTPlugin ( ) ; DHT [ ] dHTArray0 = dHTPlugin0 . getDHTs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return ( ST_UNKNOWN ) ; }
void test23 ( ) throws Throwable { DHTPlugin dHTPlugin0 = new DHTPlugin ( ) ; dHTPlugin0 . getDHT ( ( - 505 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return ( ST_UNKNOWN ) ; }
void test24 ( ) throws Throwable { DHTPlugin dHTPlugin0 = new DHTPlugin ( ) ; long long0 = dHTPlugin0 . getClockSkew ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStatus ( ) { return ( ST_UNKNOWN ) ; }
void test0 ( ) throws Throwable { DHTPluginStorageManager . diversification dHTPluginStorageManager_diversification0 = new DHTPluginStorageManager . diversification ( ( DHTPluginStorageManager ) null , ( HashWrapper ) null , ( byte ) 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKey ( ) { return ( connection_key ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; int [ ] intArray0 = new int [ 7 ] ; DHTPluginStorageManager . diversification dHTPluginStorageManager_diversification0 = new DHTPluginStorageManager . diversification ( ( DHTPluginStorageManager ) null , hashWrapper0 , ( byte ) 1 , ( long ) ( byte ) 1 , intArray0 ) ; List < Object > list0 = dHTPluginStorageManager_diversification0 . getKeys ( false , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; DHTPluginStorageManager . keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager . keyBlock ( byteArray0 , byteArray0 , ( int ) ( byte ) ( - 38 ) , true ) ; byte [ ] byteArray1 = dHTPluginStorageManager_keyBlock0 . getKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKey ( ) { return ( connection_key ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 20 ] ; DHTPluginStorageManager . keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager . keyBlock ( byteArray0 , byteArray0 , ( - 932 ) , true ) ; dHTPluginStorageManager_keyBlock0 . getLogged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DHTPluginStorageManager ( int _network , DHTLogger _log , File _data_dir ) { network = _network ; log = _log ; data_dir = _data_dir ; if ( network = = DHT . NW_CVS ) { / / work around issue whereby puts to the CVS dht went out of control and / / diversified everything String key_ver = "dht . plugin . sm . hack . kill . div . 2 . v" ; String key = "dht . plugin . sm . hack . kill . div . 2" ; int HACK_VER = 6 ; long HACK_PERIOD = 3 * 24 * 60 * 60 * 1000L ; long suspend_ver = COConfigurationManager . getLongParameter ( key_ver , 0 ) ; long suspend_start ; if ( suspend_ver < HACK_VER ) { suspend_start = 0 ; COConfigurationManager . setParameter ( key_ver , HACK_VER ) ; } else { suspend_start = COConfigurationManager . getLongParameter ( key , 0 ) ; } long now = SystemTime . getCurrentTime ( ) ; if ( suspend_start = = 0 ) { suspend_start = now ; COConfigurationManager . setParameter ( key , suspend_start ) ; } suspend_divs_until = suspend_start + HACK_PERIOD ; if ( suspendDivs ( ) ) { writeMapToFile ( new HashMap ( ) , "diverse" ) ; } else { suspend_divs_until = 0 ; } } FileUtil . mkdirs ( data_dir ) ; readRecentAddresses ( ) ; readDiversifications ( ) ; readVersionData ( ) ; readKeyBlocks ( ) ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 20 ] ; DHTPluginStorageManager . keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager . keyBlock ( byteArray0 , byteArray0 , ( - 932 ) , true ) ; boolean boolean0 = dHTPluginStorageManager_keyBlock0 . isDirect ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DHTPluginStorageManager ( int _network , DHTLogger _log , File _data_dir ) { network = _network ; log = _log ; data_dir = _data_dir ; if ( network = = DHT . NW_CVS ) { / / work around issue whereby puts to the CVS dht went out of control and / / diversified everything String key_ver = "dht . plugin . sm . hack . kill . div . 2 . v" ; String key = "dht . plugin . sm . hack . kill . div . 2" ; int HACK_VER = 6 ; long HACK_PERIOD = 3 * 24 * 60 * 60 * 1000L ; long suspend_ver = COConfigurationManager . getLongParameter ( key_ver , 0 ) ; long suspend_start ; if ( suspend_ver < HACK_VER ) { suspend_start = 0 ; COConfigurationManager . setParameter ( key_ver , HACK_VER ) ; } else { suspend_start = COConfigurationManager . getLongParameter ( key , 0 ) ; } long now = SystemTime . getCurrentTime ( ) ; if ( suspend_start = = 0 ) { suspend_start = now ; COConfigurationManager . setParameter ( key , suspend_start ) ; } suspend_divs_until = suspend_start + HACK_PERIOD ; if ( suspendDivs ( ) ) { writeMapToFile ( new HashMap ( ) , "diverse" ) ; } else { suspend_divs_until = 0 ; } } FileUtil . mkdirs ( data_dir ) ; readRecentAddresses ( ) ; readDiversifications ( ) ; readVersionData ( ) ; readKeyBlocks ( ) ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; DHTPluginStorageManager . keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager . keyBlock ( byteArray0 , byteArray0 , ( int ) ( byte ) 0 , false ) ; int int0 = dHTPluginStorageManager_keyBlock0 . getReceived ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DHTPluginStorageManager ( int _network , DHTLogger _log , File _data_dir ) { network = _network ; log = _log ; data_dir = _data_dir ; if ( network = = DHT . NW_CVS ) { / / work around issue whereby puts to the CVS dht went out of control and / / diversified everything String key_ver = "dht . plugin . sm . hack . kill . div . 2 . v" ; String key = "dht . plugin . sm . hack . kill . div . 2" ; int HACK_VER = 6 ; long HACK_PERIOD = 3 * 24 * 60 * 60 * 1000L ; long suspend_ver = COConfigurationManager . getLongParameter ( key_ver , 0 ) ; long suspend_start ; if ( suspend_ver < HACK_VER ) { suspend_start = 0 ; COConfigurationManager . setParameter ( key_ver , HACK_VER ) ; } else { suspend_start = COConfigurationManager . getLongParameter ( key , 0 ) ; } long now = SystemTime . getCurrentTime ( ) ; if ( suspend_start = = 0 ) { suspend_start = now ; COConfigurationManager . setParameter ( key , suspend_start ) ; } suspend_divs_until = suspend_start + HACK_PERIOD ; if ( suspendDivs ( ) ) { writeMapToFile ( new HashMap ( ) , "diverse" ) ; } else { suspend_divs_until = 0 ; } } FileUtil . mkdirs ( data_dir ) ; readRecentAddresses ( ) ; readDiversifications ( ) ; readVersionData ( ) ; readKeyBlocks ( ) ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 22 ] ; DHTPluginStorageManager . keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager . keyBlock ( byteArray0 , byteArray0 , ( - 1147 ) , false ) ; dHTPluginStorageManager_keyBlock0 . setLogged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DHTPluginStorageManager ( int _network , DHTLogger _log , File _data_dir ) { network = _network ; log = _log ; data_dir = _data_dir ; if ( network = = DHT . NW_CVS ) { / / work around issue whereby puts to the CVS dht went out of control and / / diversified everything String key_ver = "dht . plugin . sm . hack . kill . div . 2 . v" ; String key = "dht . plugin . sm . hack . kill . div . 2" ; int HACK_VER = 6 ; long HACK_PERIOD = 3 * 24 * 60 * 60 * 1000L ; long suspend_ver = COConfigurationManager . getLongParameter ( key_ver , 0 ) ; long suspend_start ; if ( suspend_ver < HACK_VER ) { suspend_start = 0 ; COConfigurationManager . setParameter ( key_ver , HACK_VER ) ; } else { suspend_start = COConfigurationManager . getLongParameter ( key , 0 ) ; } long now = SystemTime . getCurrentTime ( ) ; if ( suspend_start = = 0 ) { suspend_start = now ; COConfigurationManager . setParameter ( key , suspend_start ) ; } suspend_divs_until = suspend_start + HACK_PERIOD ; if ( suspendDivs ( ) ) { writeMapToFile ( new HashMap ( ) , "diverse" ) ; } else { suspend_divs_until = 0 ; } } FileUtil . mkdirs ( data_dir ) ; readRecentAddresses ( ) ; readDiversifications ( ) ; readVersionData ( ) ; readKeyBlocks ( ) ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 20 ] ; DHTPluginStorageManager . keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager . keyBlock ( byteArray0 , byteArray0 , ( - 932 ) , true ) ; byte [ ] byteArray1 = dHTPluginStorageManager_keyBlock0 . getCertificate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getCertificate ( ) ; boolean hasBeenSentTo ( DHTTransportContact contact ) ; void sentTo ( DHTTransportContact contact ) ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; DHTPluginStorageManager . keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager . keyBlock ( byteArray0 , byteArray0 , ( int ) ( byte ) 0 , false ) ; byte [ ] byteArray1 = dHTPluginStorageManager_keyBlock0 . getRequest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getRequest ( ) { return ( request ) ; }
void test11 ( ) throws Throwable { DHTPluginStorageManager . storageKey dHTPluginStorageManager_storageKey0 = new DHTPluginStorageManager . storageKey ( ( DHTPluginStorageManager ) null , ( byte ) 0 , ( HashWrapper ) null ) ; int int0 = dHTPluginStorageManager_storageKey0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test14 ( ) throws Throwable { DHTPluginStorageManager . storageKey dHTPluginStorageManager_storageKey0 = new DHTPluginStorageManager . storageKey ( ( DHTPluginStorageManager ) null , ( byte ) 0 , ( HashWrapper ) null , ( long ) ( byte ) 0 ) ; dHTPluginStorageManager_storageKey0 . getReadsPerMinute ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getDiversificationType ( ) ; void serialiseStats ( DataOutputStream os ) throws IOException ; }
void test15 ( ) throws Throwable { DHTPluginStorageManager . storageKey dHTPluginStorageManager_storageKey0 = new DHTPluginStorageManager . storageKey ( ( DHTPluginStorageManager ) null , ( byte ) 0 , ( HashWrapper ) null ) ; long long0 = dHTPluginStorageManager_storageKey0 . getExpiry ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DHTPluginStorageManager ( int _network , DHTLogger _log , File _data_dir ) { network = _network ; log = _log ; data_dir = _data_dir ; if ( network = = DHT . NW_CVS ) { / / work around issue whereby puts to the CVS dht went out of control and / / diversified everything String key_ver = "dht . plugin . sm . hack . kill . div . 2 . v" ; String key = "dht . plugin . sm . hack . kill . div . 2" ; int HACK_VER = 6 ; long HACK_PERIOD = 3 * 24 * 60 * 60 * 1000L ; long suspend_ver = COConfigurationManager . getLongParameter ( key_ver , 0 ) ; long suspend_start ; if ( suspend_ver < HACK_VER ) { suspend_start = 0 ; COConfigurationManager . setParameter ( key_ver , HACK_VER ) ; } else { suspend_start = COConfigurationManager . getLongParameter ( key , 0 ) ; } long now = SystemTime . getCurrentTime ( ) ; if ( suspend_start = = 0 ) { suspend_start = now ; COConfigurationManager . setParameter ( key , suspend_start ) ; } suspend_divs_until = suspend_start + HACK_PERIOD ; if ( suspendDivs ( ) ) { writeMapToFile ( new HashMap ( ) , "diverse" ) ; } else { suspend_divs_until = 0 ; } } FileUtil . mkdirs ( data_dir ) ; readRecentAddresses ( ) ; readDiversifications ( ) ; readVersionData ( ) ; readKeyBlocks ( ) ; }
void test16 ( ) throws Throwable { DHTPluginStorageManager . storageKey dHTPluginStorageManager_storageKey0 = new DHTPluginStorageManager . storageKey ( ( DHTPluginStorageManager ) null , ( byte ) 0 , ( HashWrapper ) null , ( - 1822L ) ) ; int int0 = dHTPluginStorageManager_storageKey0 . getEntryCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getDiversificationType ( ) ; void serialiseStats ( DataOutputStream os ) throws IOException ; }
void test17 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test18 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test19 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( - 1787 ) , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean suspendDivs ( ) { return ( suspend_divs_until > 0 & & suspend_divs_until > SystemTime . getCurrentTime ( ) ) ; }
void test20 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { byte [ ] byteArray0 = new byte [ 6 ] ; File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( - 1787 ) , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test21 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( - 1787 ) , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test22 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test23 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test24 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { byte [ ] byteArray0 = new byte [ 20 ] ; File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test25 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test26 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test27 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { byte [ ] byteArray0 = new byte [ 20 ] ; File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test28 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 20 ] ; File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( 1382 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNetwork ( ) ; / / local value operations / * * * Create a new storage key for a given key * @return null if the key shouldn't be allocated ( e . g . out of space ) * / DHTStorageKey keyCreated ( HashWrapper key , boolean local ) ; void keyDeleted ( DHTStorageKey adapter_key ) ; void keyRead ( DHTStorageKey adapter_key , DHTTransportContact contact ) ; DHTStorageKeyStats deserialiseStats ( DataInputStream is ) throws IOException ; void valueAdded ( DHTStorageKey key , DHTTransportValue value ) ; void valueUpdated ( DHTStorageKey key , DHTTransportValue old_value , DHTTransportValue new_value ) ; void valueDeleted ( DHTStorageKey key , DHTTransportValue value ) ; / / local lookup / put operations boolean isDiversified ( byte [ ] key ) ; byte [ ] [ ] getExistingDiversification ( byte [ ] key , boolean put_operation , boolean exhaustive_get , int max_depth ) ; byte [ ] [ ] createNewDiversification ( String description , DHTTransportContact cause , byte [ ] key , boolean put_operation , byte diversification_type , boolean exhaustive_get , int max_depth ) ; int getNextValueVersions ( int num ) ; DHTStorageBlock keyBlockRequest ( DHTTransportContact direct_sender , byte [ ] request , byte [ ] signature ) ; DHTStorageBlock getKeyBlockDetails ( byte [ ] key ) ; DHTStorageBlock [ ] getDirectKeyBlocks ( ) ; byte [ ] getKeyForKeyBlock ( byte [ ] request ) ; void setStorageForKey ( String key , byte [ ] data ) ; byte [ ] getStorageForKey ( String key ) ; int getRemoteFreqDivCount ( ) ; int getRemoteSizeDivCount ( ) ; int getKeyCount ( ) ; }
void test29 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test30 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( - 1787 ) , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNetwork ( ) ; / / local value operations / * * * Create a new storage key for a given key * @return null if the key shouldn't be allocated ( e . g . out of space ) * / DHTStorageKey keyCreated ( HashWrapper key , boolean local ) ; void keyDeleted ( DHTStorageKey adapter_key ) ; void keyRead ( DHTStorageKey adapter_key , DHTTransportContact contact ) ; DHTStorageKeyStats deserialiseStats ( DataInputStream is ) throws IOException ; void valueAdded ( DHTStorageKey key , DHTTransportValue value ) ; void valueUpdated ( DHTStorageKey key , DHTTransportValue old_value , DHTTransportValue new_value ) ; void valueDeleted ( DHTStorageKey key , DHTTransportValue value ) ; / / local lookup / put operations boolean isDiversified ( byte [ ] key ) ; byte [ ] [ ] getExistingDiversification ( byte [ ] key , boolean put_operation , boolean exhaustive_get , int max_depth ) ; byte [ ] [ ] createNewDiversification ( String description , DHTTransportContact cause , byte [ ] key , boolean put_operation , byte diversification_type , boolean exhaustive_get , int max_depth ) ; int getNextValueVersions ( int num ) ; DHTStorageBlock keyBlockRequest ( DHTTransportContact direct_sender , byte [ ] request , byte [ ] signature ) ; DHTStorageBlock getKeyBlockDetails ( byte [ ] key ) ; DHTStorageBlock [ ] getDirectKeyBlocks ( ) ; byte [ ] getKeyForKeyBlock ( byte [ ] request ) ; void setStorageForKey ( String key , byte [ ] data ) ; byte [ ] getStorageForKey ( String key ) ; int getRemoteFreqDivCount ( ) ; int getRemoteSizeDivCount ( ) ; int getKeyCount ( ) ; }
void test31 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { byte [ ] byteArray0 = new byte [ 20 ] ; File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 , ( int ) ( byte ) 1 , ( int ) ( byte ) 0 ) ; dHTPluginStorageManager0 . createDiversification ( hashWrapper0 , ( byte ) ( - 116 ) ) ; dHTPluginStorageManager0 . followDivChain ( hashWrapper0 , true , true , ( int ) ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test32 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { byte [ ] byteArray0 = new byte [ 20 ] ; File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test33 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { byte [ ] byteArray0 = new byte [ 20 ] ; File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test34 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { byte [ ] byteArray0 = new byte [ 20 ] ; File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test35 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 20 ] ; File file0 = new File ( "" , "" ) ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 , ( int ) ( byte ) 1 , ( int ) ( byte ) 0 ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( 1382 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRemoteSizeDivCount ( ) ; int getKeyCount ( ) ; }
void test36 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { byte [ ] byteArray0 = new byte [ 20 ] ; File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test37 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 20 ] ; File file0 = new File ( "" , "" ) ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 , ( int ) ( byte ) 1 , ( int ) ( byte ) 0 ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( 1382 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRemoteSizeDivCount ( ) ; int getKeyCount ( ) ; }
void test38 ( ) throws Throwable { String string0 = DHTPluginStorageManager . formatExpiry ( ( - 1636L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatExpiry ( long l ) { long diff = l - SystemTime . getCurrentTime ( ) ; return ( ( diff < 0 ? " - " : "" ) + DisplayFormatters . formatTime ( Math . abs ( diff ) ) ) ; }
void test39 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test40 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 22 ] ; boolean boolean0 = DHTPluginStorageManager . verifyKeyBlock ( byteArray0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean verifyKeyBlock ( keyBlock kb , DHTTransportContact originator ) { byte [ ] id = originator = = null ? new byte [ 20 ] : originator . getID ( ) ; BloomFilter filter = kb_verify_fail_bloom ; long now = SystemTime . getCurrentTime ( ) ; if ( filter = = null | | kb_verify_fail_bloom_create_time > now | | now - kb_verify_fail_bloom_create_time > 30 * 60 * 1000 ) { kb_verify_fail_bloom_create_time = now ; filter = BloomFilterFactory . createAddOnly ( 4000 ) ; kb_verify_fail_bloom = filter ; } if ( filter . contains ( id ) ) { log . log ( "KB : request verify denied" ) ; return ( false ) ; } try { Signature verifier = Signature . getInstance ( "MD5withRSA" ) ; verifier . initVerify ( key_block_public_key ) ; verifier . update ( kb . getRequest ( ) ) ; if ( ! verifier . verify ( kb . getCertificate ( ) ) ) { log . log ( "KB : request verify failed for " + DHTLog . getString2 ( kb . getKey ( ) ) ) ; filter . add ( id ) ; return ( false ) ; } log . log ( "KB : request verify ok " + DHTLog . getString2 ( kb . getKey ( ) ) + " , add = " + kb . isAdd ( ) + " , direct = " + kb . isDirect ( ) ) ; return ( true ) ; } catch ( Throwable e ) { return ( false ) ; } }
void test41 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { byte [ ] byteArray0 = new byte [ 20 ] ; File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test42 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { byte [ ] byteArray0 = new byte [ 20 ] ; File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test43 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( - 1787 ) , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean suspendDivs ( ) { return ( suspend_divs_until > 0 & & suspend_divs_until > SystemTime . getCurrentTime ( ) ) ; }
void test44 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test45 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; DHTPluginStorageManager . keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager . keyBlock ( byteArray0 , byteArray0 , ( int ) ( byte ) 0 , false ) ; boolean boolean0 = dHTPluginStorageManager_keyBlock0 . isAdd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DHTPluginStorageManager ( int _network , DHTLogger _log , File _data_dir ) { network = _network ; log = _log ; data_dir = _data_dir ; if ( network = = DHT . NW_CVS ) { / / work around issue whereby puts to the CVS dht went out of control and / / diversified everything String key_ver = "dht . plugin . sm . hack . kill . div . 2 . v" ; String key = "dht . plugin . sm . hack . kill . div . 2" ; int HACK_VER = 6 ; long HACK_PERIOD = 3 * 24 * 60 * 60 * 1000L ; long suspend_ver = COConfigurationManager . getLongParameter ( key_ver , 0 ) ; long suspend_start ; if ( suspend_ver < HACK_VER ) { suspend_start = 0 ; COConfigurationManager . setParameter ( key_ver , HACK_VER ) ; } else { suspend_start = COConfigurationManager . getLongParameter ( key , 0 ) ; } long now = SystemTime . getCurrentTime ( ) ; if ( suspend_start = = 0 ) { suspend_start = now ; COConfigurationManager . setParameter ( key , suspend_start ) ; } suspend_divs_until = suspend_start + HACK_PERIOD ; if ( suspendDivs ( ) ) { writeMapToFile ( new HashMap ( ) , "diverse" ) ; } else { suspend_divs_until = 0 ; } } FileUtil . mkdirs ( data_dir ) ; readRecentAddresses ( ) ; readDiversifications ( ) ; readVersionData ( ) ; readKeyBlocks ( ) ; }
void test46 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 20 ] ; byteArray0 [ 0 ] = ( byte ) 1 ; DHTPluginStorageManager . keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager . keyBlock ( byteArray0 , byteArray0 , ( - 932 ) , true ) ; boolean boolean0 = dHTPluginStorageManager_keyBlock0 . isAdd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DHTPluginStorageManager ( int _network , DHTLogger _log , File _data_dir ) { network = _network ; log = _log ; data_dir = _data_dir ; if ( network = = DHT . NW_CVS ) { / / work around issue whereby puts to the CVS dht went out of control and / / diversified everything String key_ver = "dht . plugin . sm . hack . kill . div . 2 . v" ; String key = "dht . plugin . sm . hack . kill . div . 2" ; int HACK_VER = 6 ; long HACK_PERIOD = 3 * 24 * 60 * 60 * 1000L ; long suspend_ver = COConfigurationManager . getLongParameter ( key_ver , 0 ) ; long suspend_start ; if ( suspend_ver < HACK_VER ) { suspend_start = 0 ; COConfigurationManager . setParameter ( key_ver , HACK_VER ) ; } else { suspend_start = COConfigurationManager . getLongParameter ( key , 0 ) ; } long now = SystemTime . getCurrentTime ( ) ; if ( suspend_start = = 0 ) { suspend_start = now ; COConfigurationManager . setParameter ( key , suspend_start ) ; } suspend_divs_until = suspend_start + HACK_PERIOD ; if ( suspendDivs ( ) ) { writeMapToFile ( new HashMap ( ) , "diverse" ) ; } else { suspend_divs_until = 0 ; } } FileUtil . mkdirs ( data_dir ) ; readRecentAddresses ( ) ; readDiversifications ( ) ; readVersionData ( ) ; readKeyBlocks ( ) ; }
void test47 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; DHTPluginStorageManager . keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager . keyBlock ( byteArray0 , byteArray0 , ( int ) ( byte ) 0 , false ) ; DHTTransportLoopbackImpl dHTTransportLoopbackImpl0 = new DHTTransportLoopbackImpl ( ( int ) ( byte ) 1 ) ; DHTTransportLoopbackContactImpl dHTTransportLoopbackContactImpl0 = ( DHTTransportLoopbackContactImpl ) dHTTransportLoopbackImpl0 . getLocalContact ( ) ; dHTPluginStorageManager_keyBlock0 . sentTo ( ( DHTTransportContact ) dHTTransportLoopbackContactImpl0 ) ; boolean boolean0 = dHTPluginStorageManager_keyBlock0 . hasBeenSentTo ( ( DHTTransportContact ) dHTTransportLoopbackContactImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBeenSentTo ( DHTTransportContact contact ) ; void sentTo ( DHTTransportContact contact ) ; }
void test48 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; DHTPluginStorageManager . keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager . keyBlock ( byteArray0 , byteArray0 , ( int ) ( byte ) 0 , true ) ; DHTTransportLoopbackImpl dHTTransportLoopbackImpl0 = new DHTTransportLoopbackImpl ( ( int ) ( byte ) 0 ) ; DHTTransportLoopbackContactImpl dHTTransportLoopbackContactImpl0 = ( DHTTransportLoopbackContactImpl ) dHTTransportLoopbackImpl0 . getLocalContact ( ) ; boolean boolean0 = dHTPluginStorageManager_keyBlock0 . hasBeenSentTo ( ( DHTTransportContact ) dHTTransportLoopbackContactImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasBeenSentTo ( DHTTransportContact contact ) ; void sentTo ( DHTTransportContact contact ) ; }
void test49 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; DHTPluginStorageManager . keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager . keyBlock ( byteArray0 , byteArray0 , ( int ) ( byte ) 0 , false ) ; DHTTransportLoopbackImpl dHTTransportLoopbackImpl0 = new DHTTransportLoopbackImpl ( ( int ) ( byte ) 1 ) ; DHTTransportLoopbackContactImpl dHTTransportLoopbackContactImpl0 = ( DHTTransportLoopbackContactImpl ) dHTTransportLoopbackImpl0 . getLocalContact ( ) ; dHTPluginStorageManager_keyBlock0 . sentTo ( ( DHTTransportContact ) dHTTransportLoopbackContactImpl0 ) ; dHTPluginStorageManager_keyBlock0 . sentTo ( ( DHTTransportContact ) dHTTransportLoopbackContactImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void sentTo ( DHTTransportContact contact ) ; }
void test50 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { byte [ ] byteArray0 = new byte [ 20 ] ; byteArray0 [ 0 ] = ( byte ) 1 ; File file0 = new File ( "" , "" ) ; byteArray0 [ 1 ] = ( byte ) 1 ; String string0 = TorrentAttribute . TA_TRACKER_CLIENT_EXTENSIONS ; file0 . equals ( ( Object ) "TrackerClientExtensions" ) ; byteArray0 [ 3 ] = ( byte ) 1 ; byteArray0 [ 4 ] = ( byte ) 0 ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test51 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 ) ; int [ ] intArray0 = new int [ 5 ] ; DHTPluginStorageManager . diversification dHTPluginStorageManager_diversification0 = new DHTPluginStorageManager . diversification ( ( DHTPluginStorageManager ) null , hashWrapper0 , ( byte ) 0 , ( long ) ( byte ) 0 , intArray0 ) ; List < Object > list0 = dHTPluginStorageManager_diversification0 . getKeys ( true , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test52 ( ) throws Throwable { DHTPluginStorageManager . diversification dHTPluginStorageManager_diversification0 = new DHTPluginStorageManager . diversification ( ( DHTPluginStorageManager ) null , ( HashWrapper ) null , ( byte ) 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void getKeys ( ByteBuffer message ) throws CryptoManagerException ; void putKeys ( ByteBuffer message ) throws CryptoManagerException ; void getAuth ( ByteBuffer message ) throws CryptoManagerException ; void putAuth ( ByteBuffer message ) throws CryptoManagerException ; byte [ ] getSharedSecret ( ) throws CryptoManagerException ; byte [ ] getRemotePublicKey ( ) throws CryptoManagerException ; }
void test54 ( ) throws Throwable { DHTPluginStorageManager . storageKey dHTPluginStorageManager_storageKey0 = new DHTPluginStorageManager . storageKey ( ( DHTPluginStorageManager ) null , ( byte ) 0 , ( HashWrapper ) null ) ; DHTTransportLoopbackImpl dHTTransportLoopbackImpl0 = new DHTTransportLoopbackImpl ( ( int ) ( byte ) 0 ) ; DHTTransportLoopbackContactImpl dHTTransportLoopbackContactImpl0 = ( DHTTransportLoopbackContactImpl ) dHTTransportLoopbackImpl0 . getLocalContact ( ) ; dHTPluginStorageManager_storageKey0 . read ( ( DHTTransportContact ) dHTTransportLoopbackContactImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test57 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { byte [ ] byteArray0 = new byte [ 20 ] ; File file0 = new File ( "" , "" ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( ( int ) ( byte ) 1 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test58 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 20 ] ; File file0 = new File ( "" , "" ) ; HashWrapper hashWrapper0 = new HashWrapper ( byteArray0 , ( int ) ( byte ) 1 , ( int ) ( byte ) 0 ) ; DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager ( 1382 , ( DHTLogger ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKeyCount ( ) ; }
void test1 ( ) throws Throwable { ExternalSeedManualPeer externalSeedManualPeer0 = new ExternalSeedManualPeer ( ( ExternalSeedPeer ) null ) ; ExternalSeedPeer externalSeedPeer0 = externalSeedManualPeer0 . getDelegate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TOTorrent getDelegate ( ) { return ( lws . getTOTorrent ( true ) ) ; }
void test1 ( ) throws Throwable { UPnPFactory uPnPFactory0 = new UPnPFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { UPnPDeviceImageImpl uPnPDeviceImageImpl0 = new UPnPDeviceImageImpl ( 0 , 0 , "" , "" ) ; int int0 = uPnPDeviceImageImpl0 . getHeight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( FontData [ ] fd ) { if ( mFontData_GetHeightF ! = null ) { try { return ( ( Number ) mFontData_GetHeightF . invoke ( fd [ 0 ] , new Object [ ] { } ) ) . floatValue ( ) ; } catch ( Throwable e ) { } } return fd [ 0 ] . getHeight ( ) ; }
void test1 ( ) throws Throwable { UPnPDeviceImageImpl uPnPDeviceImageImpl0 = new UPnPDeviceImageImpl ( 1 , 367 , "B21g" , "B21g" ) ; String string0 = uPnPDeviceImageImpl0 . getLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( FontData [ ] fd ) { if ( mFontData_GetHeightF ! = null ) { try { return ( ( Number ) mFontData_GetHeightF . invoke ( fd [ 0 ] , new Object [ ] { } ) ) . floatValue ( ) ; } catch ( Throwable e ) { } } return fd [ 0 ] . getHeight ( ) ; }
void test2 ( ) throws Throwable { UPnPDeviceImageImpl uPnPDeviceImageImpl0 = new UPnPDeviceImageImpl ( 0 , 0 , "" , "" ) ; String string0 = uPnPDeviceImageImpl0 . getMime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getHeight ( FontData [ ] fd ) { if ( mFontData_GetHeightF ! = null ) { try { return ( ( Number ) mFontData_GetHeightF . invoke ( fd [ 0 ] , new Object [ ] { } ) ) . floatValue ( ) ; } catch ( Throwable e ) { } } return fd [ 0 ] . getHeight ( ) ; }
void test3 ( ) throws Throwable { UPnPDeviceImageImpl uPnPDeviceImageImpl0 = new UPnPDeviceImageImpl ( 0 , 0 , "" , "" ) ; int int0 = uPnPDeviceImageImpl0 . getWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWidth ( ) { return iWidth ; }
void test0 ( ) throws Throwable { UPnPSSOfflineDownloaderImpl uPnPSSOfflineDownloaderImpl0 = new UPnPSSOfflineDownloaderImpl ( ( UPnPServiceImpl ) null ) ; UPnPService uPnPService0 = uPnPSSOfflineDownloaderImpl0 . getGenericService ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UPnPService getGenericService ( ) { return ( service ) ; }
void test0 ( ) throws Throwable { UPnPSSWANIPConnectionImpl uPnPSSWANIPConnectionImpl0 = new UPnPSSWANIPConnectionImpl ( ( UPnPServiceImpl ) null ) ; String string0 = uPnPSSWANIPConnectionImpl0 . getConnectionType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConnectionType ( ) { return ( "PPP" ) ; }
void test0 ( ) throws Throwable { UPnPActionArgumentImpl uPnPActionArgumentImpl0 = new UPnPActionArgumentImpl ( "" , "" ) ; String string0 = uPnPActionArgumentImpl0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( String name , String [ ] params ) { return getValue ( name , params , true ) ; }
void test1 ( ) throws Throwable { UPnPActionArgumentImpl uPnPActionArgumentImpl0 = new UPnPActionArgumentImpl ( "" , "" ) ; String string0 = uPnPActionArgumentImpl0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test0 ( ) throws Throwable { UPnPSSWANPPPConnectionImpl uPnPSSWANPPPConnectionImpl0 = new UPnPSSWANPPPConnectionImpl ( ( UPnPServiceImpl ) null ) ; String string0 = uPnPSSWANPPPConnectionImpl0 . getConnectionType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConnectionType ( ) { return ( "PPP" ) ; }
void test0 ( ) throws Throwable { UPnPSSWANCommonInterfaceConfigImpl uPnPSSWANCommonInterfaceConfigImpl0 = new UPnPSSWANCommonInterfaceConfigImpl ( ( UPnPServiceImpl ) null ) ; UPnPService uPnPService0 = uPnPSSWANCommonInterfaceConfigImpl0 . getGenericService ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UPnPService getGenericService ( ) { return ( service ) ; }
void test0 ( ) throws Throwable { NatPMPDeviceFactory natPMPDeviceFactory0 = new NatPMPDeviceFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { NatPMPUPnPImpl natPMPUPnPImpl0 = new NatPMPUPnPImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; boolean boolean0 = natPMPUPnPImpl0 . isEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { if ( skinButton ! = null ) { return ! skinButton . isDisabled ( ) ; } return enabled ; }
void test0 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test1 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test2 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test3 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test4 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test5 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test6 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test7 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getExternalIPAddress ( ) throws UPnPException { UPnPAction act = service . getAction ( "GetExternalIPAddress" ) ; if ( act = = null ) { log ( "Action 'GetExternalIPAddress' not supported , binding not established" ) ; throw ( new UPnPException ( "GetExternalIPAddress not supported" ) ) ; } else { UPnPActionInvocation inv = act . getInvocation ( ) ; UPnPActionArgument [ ] args = inv . invoke ( ) ; String ip = null ; for ( int i = 0 ; i < args . length ; i + + ) { UPnPActionArgument arg = args [ i ] ; String name = arg . getName ( ) ; if ( name . equalsIgnoreCase ( "NewExternalIPAddress" ) ) { ip = arg . getValue ( ) ; } } return ( ip ) ; } }
void test9 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test10 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test11 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test12 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test13 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test14 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test15 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test16 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test17 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test18 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test19 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test20 ( ) throws Throwable { NatPMPUPnPRootDeviceImpl natPMPUPnPRootDeviceImpl0 = new NatPMPUPnPRootDeviceImpl ( ( UPnP ) null , ( NatPMPDevice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUSN ( ) ; URL getLocation ( ) ; InetAddress getLocalAddress ( ) ; NetworkInterface getNetworkInterface ( ) ; String getInfo ( ) ; UPnPDevice getDevice ( ) ; boolean isDestroyed ( ) ; Map getDiscoveryCache ( ) ; void addListener ( UPnPRootDeviceListener l ) ; void removeListener ( UPnPRootDeviceListener l ) ; }
void test0 ( ) throws Throwable { NatPMPImpl natPMPImpl0 = new NatPMPImpl ( ( NatPMPDevice ) null ) ; NatPMPImpl . portMapping natPMPImpl_portMapping0 = natPMPImpl0 . new portMapping ( 32767 , true , "zKMxJI > : 9E - tTC0" , "zKMxJI > : 9E - tTC0" ) ; String string0 = natPMPImpl_portMapping0 . getInternalHost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getExternalPort ( ) ; String getInternalHost ( ) ; String getDescription ( ) ; }
void test1 ( ) throws Throwable { NatPMPImpl natPMPImpl0 = new NatPMPImpl ( ( NatPMPDevice ) null ) ; NatPMPImpl . portMapping natPMPImpl_portMapping0 = natPMPImpl0 . new portMapping ( 1821 , false , " | " , " | " ) ; String string0 = natPMPImpl_portMapping0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test2 ( ) throws Throwable { NatPMPImpl natPMPImpl0 = new NatPMPImpl ( ( NatPMPDevice ) null ) ; UPnPWANConnectionPortMapping [ ] uPnPWANConnectionPortMappingArray0 = natPMPImpl0 . getPortMappings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UPnPWANConnectionPortMapping [ ] getPortMappings ( ) throws UPnPException { boolean ok = true ; try { / / UPnPStateVariable noe = service . getStateVariable ( "PortMappingNumberOfEntries" ) ; / / System . out . println ( "NOE = " + noe . getValue ( ) ) ; int entries = 0 ; / / Integer . parseInt ( noe . getValue ( ) ) ; / / some routers ( e . g . Gudy's ) return 0 here whatever ! / / In this case take mindless approach / / hmm , even for my router the state variable isn't accurate . . . UPnPAction act = service . getAction ( "GetGenericPortMappingEntry" ) ; if ( act = = null ) { log ( "Action 'GetGenericPortMappingEntry' not supported , can't enumerate bindings" ) ; return ( new UPnPWANConnectionPortMapping [ 0 ] ) ; } else { List res = new ArrayList ( ) ; / / I've also seen some routers loop here rather than failing when the index gets too large ( they / / seem to keep returning the last entry ) - check for a duplicate entry and exit if found portMapping prev_mapping = null ; for ( int i = 0 ; i < ( entries = = 0 ? 512 : entries ) ; i + + ) { UPnPActionInvocation inv = act . getInvocation ( ) ; inv . addArgument ( "NewPortMappingIndex" , "" + i ) ; try { UPnPActionArgument [ ] outs = inv . invoke ( ) ; int port = 0 ; boolean tcp = false ; String internal_host = null ; String description = "" ; for ( int j = 0 ; j < outs . length ; j + + ) { UPnPActionArgument out = outs [ j ] ; String out_name = out . getName ( ) ; if ( out_name . equalsIgnoreCase ( "NewExternalPort" ) ) { port = Integer . parseInt ( out . getValue ( ) ) ; } else if ( out_name . equalsIgnoreCase ( "NewProtocol" ) ) { tcp = out . getValue ( ) . equalsIgnoreCase ( "TCP" ) ; } else if ( out_name . equalsIgnoreCase ( "NewInternalClient" ) ) { internal_host = out . getValue ( ) ; } else if ( out_name . equalsIgnoreCase ( "NewPortMappingDescription" ) ) { description = out . getValue ( ) ; } } if ( prev_mapping ! = null ) { if ( prev_mapping . getExternalPort ( ) = = port & & prev_mapping . isTCP ( ) = = tcp ) { / / repeat , get out break ; } } prev_mapping = new portMapping ( port , tcp , internal_host , description ) ; res . add ( prev_mapping ) ; } catch ( UPnPException e ) { if ( entries = = 0 ) { break ; } ok = false ; throw ( e ) ; } } UPnPWANConnectionPortMapping [ ] res2 = new UPnPWANConnectionPortMapping [ res . size ( ) ] ; res . toArray ( res2 ) ; return ( res2 ) ; } } finally { for ( int i = 0 ; i < listeners . size ( ) ; i + + ) { UPnPWANConnectionListener listener = ( UPnPWANConnectionListener ) listeners . get ( i ) ; try { listener . mappingsReadResult ( this , ok ) ; } catch ( Throwable e ) { Debug . printStackTrace ( e ) ; } } } }
void test5 ( ) throws Throwable { NatPMPImpl natPMPImpl0 = new NatPMPImpl ( ( NatPMPDevice ) null ) ; NatPMPImpl . portMapping natPMPImpl_portMapping0 = natPMPImpl0 . new portMapping ( 32767 , true , "zKMxJI > : 9E - tTC0" , "zKMxJI > : 9E - tTC0" ) ; String string0 = natPMPImpl_portMapping0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTCP ( ) ; / * * * Get a textual description for this transport . * @return description * / String getDescription ( ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = NatPMPDeviceImpl . unsigned32ByteArrayToInt ( byteArray0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int unsigned32ByteArrayToInt ( byte [ ] b , int offset ) { int value = 0 ; for ( int i = 0 ; i < 4 ; i + + ) { int shift = ( 4 - 1 - i ) * 8 ; value + = ( ( int ) b [ i + offset ] & 0xFF ) < < shift ; } return value ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; int int0 = NatPMPDeviceImpl . unsigned16ByteArrayToInt ( byteArray0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int unsigned16ByteArrayToInt ( byte [ ] b , int offset ) { int value = 0 ; for ( int i = 0 ; i < 2 ; i + + ) { int shift = ( 2 - 1 - i ) * 8 ; value + = ( ( int ) b [ i + offset ] & 0xFF ) < < shift ; } return value ; }
void test0 ( ) throws Throwable { MagnetURIHandlerImpl magnetURIHandlerImpl0 = ( MagnetURIHandlerImpl ) MagnetURIHandler . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) ; String getTypeString ( ) ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , NetworkAdminProgressListener listener ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , boolean upnp_map , NetworkAdminProgressListener listener ) throws NetworkAdminException ; String getName ( ) ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 1781 ) ; magnetURIHandlerImpl0 . process ( " / magnet10 / default . js ? " , ( BufferedReader ) null , ( OutputStream ) byteArrayOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl ( ) ; magnetURIHandlerImpl0 . addInfo ( ( String ) null , 1781 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl ( ) ; String string0 = magnetURIHandlerImpl0 . getMessageText ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl ( ) ; String string0 = magnetURIHandlerImpl0 . getMessageText ( "L4BG mAUZ - G" , "L4BG mAUZ - G" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl ( ) ; int int0 = magnetURIHandlerImpl0 . getPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl ( ) ; magnetURIHandlerImpl0 . addListener ( ( MagnetURIHandlerListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl ( ) ; URL uRL0 = magnetURIHandlerImpl0 . registerResource ( ( MagnetURIHandler . ResourceProvider ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl ( ) ; PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; magnetURIHandlerImpl0 . process ( "L4BG mAUZ - G" , ( InputStream ) pipedInputStream0 , ( OutputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test8 ( ) throws Throwable { MagnetURIHandlerImpl magnetURIHandlerImpl0 = ( MagnetURIHandlerImpl ) MagnetURIHandlerImpl . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) ; String getTypeString ( ) ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , NetworkAdminProgressListener listener ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , boolean upnp_map , NetworkAdminProgressListener listener ) throws NetworkAdminException ; String getName ( ) ; }
void test1 ( ) throws Throwable { VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest ( ( - 929L ) ) ; String string0 = versionCheckClientUDPRequest0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransactionId ( ) { return ( transaction_id ) ; }
void test2 ( ) throws Throwable { VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest ( ( - 929L ) ) ; long long0 = versionCheckClientUDPRequest0 . getConnectionId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getConnectionId ( ) { return ( connection_id ) ; }
void test3 ( ) throws Throwable { HashMap < Integer , PRUDPPacketRequestDecoder > hashMap0 = new HashMap < Integer , PRUDPPacketRequestDecoder > ( ) ; Integer integer0 = new Integer ( 1703 ) ; hashMap0 . put ( integer0 , ( PRUDPPacketRequestDecoder ) null ) ; / / Undeclared exception ! try { PRUDPPacketRequest . registerDecoders ( ( Map ) hashMap0 ) ; fail ( "Expecting exception : NoClassDefFoundError" ) ; } catch ( NoClassDefFoundError e ) { / * * Could not initialize class org . gudy . azureus2 . core3 . util . Debug * / } "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getByName ( ( String ) null ) ; PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = ( PRUDPPacketHandlerImpl ) PRUDPPacketHandlerFactory . getHandler ( 799 , ( InetAddress ) inet4Address0 , ( PRUDPRequestHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) ; String getTypeString ( ) ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , NetworkAdminProgressListener listener ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , boolean upnp_map , NetworkAdminProgressListener listener ) throws NetworkAdminException ; String getName ( ) ; }
void test1 ( ) throws Throwable { PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = ( PRUDPPacketHandlerImpl ) PRUDPPacketHandlerFactory . getHandler ( 799 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) ; String getTypeString ( ) ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , NetworkAdminProgressListener listener ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , boolean upnp_map , NetworkAdminProgressListener listener ) throws NetworkAdminException ; String getName ( ) ; }
void test2 ( ) throws Throwable { PRUDPPacketHandlerFactory pRUDPPacketHandlerFactory0 = new PRUDPPacketHandlerFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { PRUDPReleasablePacketHandler pRUDPReleasablePacketHandler0 = PRUDPPacketHandlerFactory . getReleasableHandler ( 1356 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PRUDPReleasablePacketHandler getReleasableHandler ( int port ) { return ( PRUDPPacketHandlerFactoryImpl . getReleasableHandler ( port , null ) ) ; }
void test0 ( ) throws Throwable { VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply ( 7 ) ; String string0 = versionCheckClientUDPReply0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test1 ( ) throws Throwable { VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply ( 7 ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 0 ) ; DataOutputStream dataOutputStream0 = new DataOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; versionCheckClientUDPReply0 . serialise ( dataOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply ( 0 ) ; String string0 = versionCheckClientUDPReply0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test1 ( ) throws Throwable { VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply ( ( - 1873 ) ) ; int int0 = versionCheckClientUDPReply0 . getSerialisedSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test2 ( ) throws Throwable { VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply ( 1641 ) ; VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest ( ( long ) 1641 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest ( ( - 776L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test4 ( ) throws Throwable { VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest ( ( - 776L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test5 ( ) throws Throwable { VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply ( 1978 ) ; int int0 = versionCheckClientUDPReply0 . getAction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransactionId ( ) { return ( transaction_id ) ; }
void test6 ( ) throws Throwable { VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply ( 1641 ) ; versionCheckClientUDPReply0 . getAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test7 ( ) throws Throwable { VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply ( 1641 ) ; versionCheckClientUDPReply0 . setAddress ( ( InetSocketAddress ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test8 ( ) throws Throwable { VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply ( 0 ) ; versionCheckClientUDPReply0 . setSerialisedSize ( ( - 2019 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTransactionId ( ) { return ( transaction_id ) ; }
void test0 ( ) throws Throwable { PRUDPPacketHandlerStatsImpl pRUDPPacketHandlerStatsImpl0 = new PRUDPPacketHandlerStatsImpl ( ( PRUDPPacketHandlerImpl ) null ) ; long long0 = pRUDPPacketHandlerStatsImpl0 . getPacketsReceived ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getPacketsReceived ( ) ; long getRequestsTimedOut ( ) ; long getBytesSent ( ) ; long getBytesReceived ( ) ; DHTTransportStats snapshot ( ) ; long getSkewAverage ( ) ; / * * * - 1 if stats not yet available * @return * / int getRouteablePercentage ( ) ; String getString ( ) ; }
void test1 ( ) throws Throwable { PRUDPPacketHandlerStatsImpl pRUDPPacketHandlerStatsImpl0 = new PRUDPPacketHandlerStatsImpl ( ( PRUDPPacketHandlerImpl ) null ) ; pRUDPPacketHandlerStatsImpl0 . requestTimedOut ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRequestsTimedOut ( ) ; long getBytesSent ( ) ; long getBytesReceived ( ) ; DHTTransportStats snapshot ( ) ; long getSkewAverage ( ) ; / * * * - 1 if stats not yet available * @return * / int getRouteablePercentage ( ) ; String getString ( ) ; }
void test3 ( ) throws Throwable { PRUDPPacketHandlerStatsImpl pRUDPPacketHandlerStatsImpl0 = new PRUDPPacketHandlerStatsImpl ( ( PRUDPPacketHandlerImpl ) null ) ; PRUDPPacketHandlerStatsImpl pRUDPPacketHandlerStatsImpl1 = ( PRUDPPacketHandlerStatsImpl ) pRUDPPacketHandlerStatsImpl0 . snapshot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test5 ( ) throws Throwable { PRUDPPacketHandlerStatsImpl pRUDPPacketHandlerStatsImpl0 = new PRUDPPacketHandlerStatsImpl ( ( PRUDPPacketHandlerImpl ) null ) ; pRUDPPacketHandlerStatsImpl0 . packetReceived ( ( - 173 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBytesReceived ( ) ; DHTTransportStats snapshot ( ) ; long getSkewAverage ( ) ; / * * * - 1 if stats not yet available * @return * / int getRouteablePercentage ( ) ; String getString ( ) ; }
void test6 ( ) throws Throwable { PRUDPPacketHandlerStatsImpl pRUDPPacketHandlerStatsImpl0 = new PRUDPPacketHandlerStatsImpl ( ( PRUDPPacketHandlerImpl ) null ) ; pRUDPPacketHandlerStatsImpl0 . primordialPacketReceived ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getPacketsSent ( ) ; long getPacketsReceived ( ) ; long getRequestsTimedOut ( ) ; long getBytesSent ( ) ; long getBytesReceived ( ) ; DHTTransportStats snapshot ( ) ; long getSkewAverage ( ) ; / * * * - 1 if stats not yet available * @return * / int getRouteablePercentage ( ) ; String getString ( ) ; }
void test7 ( ) throws Throwable { PRUDPPacketHandlerStatsImpl pRUDPPacketHandlerStatsImpl0 = new PRUDPPacketHandlerStatsImpl ( ( PRUDPPacketHandlerImpl ) null ) ; long long0 = pRUDPPacketHandlerStatsImpl0 . getPacketsSent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getPacketsSent ( ) ; long getPacketsReceived ( ) ; long getRequestsTimedOut ( ) ; long getBytesSent ( ) ; long getBytesReceived ( ) ; DHTTransportStats snapshot ( ) ; long getSkewAverage ( ) ; / * * * - 1 if stats not yet available * @return * / int getRouteablePercentage ( ) ; String getString ( ) ; }
void test8 ( ) throws Throwable { PRUDPPacketHandlerStatsImpl pRUDPPacketHandlerStatsImpl0 = new PRUDPPacketHandlerStatsImpl ( ( PRUDPPacketHandlerImpl ) null ) ; long long0 = pRUDPPacketHandlerStatsImpl0 . getBytesSent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBytesSent ( ) ; long getBytesReceived ( ) ; DHTTransportStats snapshot ( ) ; long getSkewAverage ( ) ; / * * * - 1 if stats not yet available * @return * / int getRouteablePercentage ( ) ; String getString ( ) ; }
void test9 ( ) throws Throwable { PRUDPPacketHandlerStatsImpl pRUDPPacketHandlerStatsImpl0 = new PRUDPPacketHandlerStatsImpl ( ( PRUDPPacketHandlerImpl ) null ) ; long long0 = pRUDPPacketHandlerStatsImpl0 . getBytesReceived ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBytesReceived ( ) ; DHTTransportStats snapshot ( ) ; long getSkewAverage ( ) ; / * * * - 1 if stats not yet available * @return * / int getRouteablePercentage ( ) ; String getString ( ) ; }
void test10 ( ) throws Throwable { PRUDPPacketHandlerStatsImpl pRUDPPacketHandlerStatsImpl0 = new PRUDPPacketHandlerStatsImpl ( ( PRUDPPacketHandlerImpl ) null ) ; pRUDPPacketHandlerStatsImpl0 . packetSent ( 2010 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBytesSent ( ) ; long getBytesReceived ( ) ; DHTTransportStats snapshot ( ) ; long getSkewAverage ( ) ; / * * * - 1 if stats not yet available * @return * / int getRouteablePercentage ( ) ; String getString ( ) ; }
void test11 ( ) throws Throwable { PRUDPPacketHandlerStatsImpl pRUDPPacketHandlerStatsImpl0 = new PRUDPPacketHandlerStatsImpl ( ( PRUDPPacketHandlerImpl ) null ) ; long long0 = pRUDPPacketHandlerStatsImpl0 . getRequestsTimedOut ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRequestsTimedOut ( ) ; long getBytesSent ( ) ; long getBytesReceived ( ) ; DHTTransportStats snapshot ( ) ; long getSkewAverage ( ) ; / * * * - 1 if stats not yet available * @return * / int getRouteablePercentage ( ) ; String getString ( ) ; }
void test12 ( ) throws Throwable { PRUDPPacketHandlerStatsImpl pRUDPPacketHandlerStatsImpl0 = new PRUDPPacketHandlerStatsImpl ( ( PRUDPPacketHandlerImpl ) null ) ; pRUDPPacketHandlerStatsImpl0 . primordialPacketSent ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBytesReceived ( ) ; DHTTransportStats snapshot ( ) ; long getSkewAverage ( ) ; / * * * - 1 if stats not yet available * @return * / int getRouteablePercentage ( ) ; String getString ( ) ; }
void test0 ( ) throws Throwable { PRUDPPacketHandlerRequestImpl pRUDPPacketHandlerRequestImpl0 = new PRUDPPacketHandlerRequestImpl ( ( PRUDPPacketReceiver ) null , ( - 1L ) ) ; pRUDPPacketHandlerRequestImpl0 . sent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTimeout ( ) ; void setTimeout ( long millis ) ; DHTTransportContact importContact ( DataInputStream is ) throws IOException , DHTTransportException ; / * * * Set the handler for incoming requests * @param receiver * / void setRequestHandler ( DHTTransportRequestHandler receiver ) ; DHTTransportStats getStats ( ) ; / / direct contact - contact communication void registerTransferHandler ( byte [ ] handler_key , DHTTransportTransferHandler handler ) ; byte [ ] readTransfer ( DHTTransportProgressListener listener , DHTTransportContact target , byte [ ] handler_key , byte [ ] key , long timeout ) throws DHTTransportException ; void writeTransfer ( DHTTransportProgressListener listener , DHTTransportContact target , byte [ ] handler_key , byte [ ] key , byte [ ] data , long timeout ) throws DHTTransportException ; byte [ ] writeReadTransfer ( DHTTransportProgressListener listener , DHTTransportContact target , byte [ ] handler_key , byte [ ] data , long timeout ) throws DHTTransportException ; boolean supportsStorage ( ) ; boolean isReachable ( ) ; DHTTransportContact [ ] getReachableContacts ( ) ; DHTTransportContact [ ] getRecentContacts ( ) ; void addListener ( DHTTransportListener l ) ; void removeListener ( DHTTransportListener l ) ; }
void test1 ( ) throws Throwable { PRUDPPacketHandlerRequestImpl pRUDPPacketHandlerRequestImpl0 = new PRUDPPacketHandlerRequestImpl ( ( PRUDPPacketReceiver ) null , ( - 1L ) ) ; pRUDPPacketHandlerRequestImpl0 . setException ( ( PRUDPPacketHandlerException ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTimeout ( ) ; void setTimeout ( long millis ) ; DHTTransportContact importContact ( DataInputStream is ) throws IOException , DHTTransportException ; / * * * Set the handler for incoming requests * @param receiver * / void setRequestHandler ( DHTTransportRequestHandler receiver ) ; DHTTransportStats getStats ( ) ; / / direct contact - contact communication void registerTransferHandler ( byte [ ] handler_key , DHTTransportTransferHandler handler ) ; byte [ ] readTransfer ( DHTTransportProgressListener listener , DHTTransportContact target , byte [ ] handler_key , byte [ ] key , long timeout ) throws DHTTransportException ; void writeTransfer ( DHTTransportProgressListener listener , DHTTransportContact target , byte [ ] handler_key , byte [ ] key , byte [ ] data , long timeout ) throws DHTTransportException ; byte [ ] writeReadTransfer ( DHTTransportProgressListener listener , DHTTransportContact target , byte [ ] handler_key , byte [ ] data , long timeout ) throws DHTTransportException ; boolean supportsStorage ( ) ; boolean isReachable ( ) ; DHTTransportContact [ ] getReachableContacts ( ) ; DHTTransportContact [ ] getRecentContacts ( ) ; void addListener ( DHTTransportListener l ) ; void removeListener ( DHTTransportListener l ) ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; inet4Address0 . isAnyLocalAddress ( ) ; inet4Address0 . isSiteLocalAddress ( ) ; PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = new PRUDPPacketHandlerImpl ( 0 , ( InetAddress ) inet4Address0 , ( PRUDPPacketHandlerImpl . PacketTransformer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; byteArray0 [ 0 ] = ( byte ) ( - 1 ) ; byteArray0 [ 3 ] = ( byte ) 1 ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; byteArray0 [ 0 ] = ( byte ) ( - 1 ) ; byteArray0 [ 2 ] = ( byte ) 4 ; byteArray0 [ 3 ] = ( byte ) 1 ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getLocalHost ( ) ; inet4Address0 . getHostAddress ( ) ; InetAddress . getAllByName ( "" ) ; PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = new PRUDPPacketHandlerImpl ( 1 , ( InetAddress ) inet4Address0 , ( PRUDPPacketHandlerImpl . PacketTransformer ) null ) ; InetAddress . getByName ( "" ) ; AESemaphore aESemaphore0 = new AESemaphore ( "" , 66 ) ; pRUDPPacketHandlerImpl0 . receiveLoop ( aESemaphore0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = new PRUDPPacketHandlerImpl ( 586 , ( InetAddress ) null , ( PRUDPPacketHandlerImpl . PacketTransformer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = new PRUDPPacketHandlerImpl ( 586 , ( InetAddress ) null , ( PRUDPPacketHandlerImpl . PacketTransformer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = new PRUDPPacketHandlerImpl ( 1004 , ( InetAddress ) null , ( PRUDPPacketHandlerImpl . PacketTransformer ) null ) ; pRUDPPacketHandlerImpl0 . getRequestHandler ( ) ; pRUDPPacketHandlerImpl0 . setRequestHandler ( ( PRUDPRequestHandler ) null ) ; pRUDPPacketHandlerImpl0 . closeSession ( ) ; pRUDPPacketHandlerImpl0 . getRequestHandler ( ) ; pRUDPPacketHandlerImpl0 . setDelays ( 1004 , 1764 , 0 ) ; pRUDPPacketHandlerImpl0 . setDefaultBindAddress ( ( InetAddress ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = new PRUDPPacketHandlerImpl ( 0 , ( InetAddress ) null , ( PRUDPPacketHandlerImpl . PacketTransformer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test11 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { System . setCurrentTimeMillis ( ( - 985L ) ) ; Inet4Address inet4Address0 = ( Inet4Address ) InetAddress . getByName ( "" ) ; PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = new PRUDPPacketHandlerImpl ( ( - 290 ) , ( InetAddress ) inet4Address0 , ( PRUDPPacketHandlerImpl . PacketTransformer ) null ) ; pRUDPPacketHandlerImpl0 . removePrimordialHandler ( ( PRUDPPrimordialHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { PRUDPReleasablePacketHandler pRUDPReleasablePacketHandler0 = PRUDPPacketHandlerFactoryImpl . getReleasableHandler ( ( - 1131 ) , ( PRUDPRequestHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PRUDPReleasablePacketHandler getReleasableHandler ( int port ) { return ( PRUDPPacketHandlerFactoryImpl . getReleasableHandler ( port , null ) ) ; }
void test1 ( ) throws Throwable { PRUDPPacketHandlerFactoryImpl pRUDPPacketHandlerFactoryImpl0 = new PRUDPPacketHandlerFactoryImpl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = ( PRUDPPacketHandlerImpl ) PRUDPPacketHandlerFactoryImpl . getHandler ( ( - 1131 ) , ( InetAddress ) null , ( PRUDPRequestHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) ; String getTypeString ( ) ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , NetworkAdminProgressListener listener ) throws NetworkAdminException ; InetAddress test ( NetworkAdminNetworkInterfaceAddress address , boolean upnp_map , NetworkAdminProgressListener listener ) throws NetworkAdminException ; String getName ( ) ; }
void test1 ( ) throws Throwable { MCGroupFactory mCGroupFactory0 = new MCGroupFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { SSDPCore sSDPCore0 = SSDPCore . getSingleton ( ( UPnPSSDPAdapter ) null , "" , 1040 , 1040 , ( String [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getControlPort ( ) ; void search ( String [ ] STs ) ; void notify ( String NT , String NTS , String UUID , String url ) ; void addListener ( UPnPSSDPListener l ) ; void removeListener ( UPnPSSDPListener l ) ; }
void test0 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; DERSequenceGenerator dERSequenceGenerator0 = new DERSequenceGenerator ( ( OutputStream ) byteArrayOutputStream0 ) ; dERSequenceGenerator0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; DERSequenceGenerator dERSequenceGenerator0 = new DERSequenceGenerator ( ( OutputStream ) byteArrayOutputStream0 ) ; byte [ ] byteArray0 = new byte [ 7 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; dERSequenceGenerator0 . writeDEREncoded ( ( OutputStream ) byteArrayOutputStream0 , 1583 , ( InputStream ) byteArrayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { DERUTF8String dERUTF8String0 = new DERUTF8String ( "unknown object in getInstanceFromTagged" ) ; String string0 = dERUTF8String0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { DERUTF8String dERUTF8String0 = new DERUTF8String ( "S ; / z~$ < 5 : 1M1 < S" ) ; int int0 = dERUTF8String0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test2 ( ) throws Throwable { DERUTF8String dERUTF8String0 = new DERUTF8String ( "unknown object in getInstanceFromTagged" ) ; byte [ ] byteArray0 = dERUTF8String0 . getEncoded ( "mzw , ? " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test4 ( ) throws Throwable { DERUTF8String dERUTF8String0 = DERUTF8String . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { DERUTF8String dERUTF8String0 = new DERUTF8String ( "unknown object in getInstanceFromTagged" ) ; DERUTF8String dERUTF8String1 = DERUTF8String . getInstance ( ( Object ) dERUTF8String0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test6 ( ) throws Throwable { DERBoolean dERBoolean0 = new DERBoolean ( false ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DERObject ) dERBoolean0 ) ; DERUTF8String dERUTF8String0 = DERUTF8String . getInstance ( ( Object ) bERConstructedOctetString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test9 ( ) throws Throwable { DERUTF8String dERUTF8String0 = new DERUTF8String ( "S ; / z~$ < 5 : 1M1 < S" ) ; ASN1Encodable [ ] aSN1EncodableArray0 = new ASN1Encodable [ 1 ] ; DERSequence dERSequence0 = new DERSequence ( aSN1EncodableArray0 ) ; boolean boolean0 = dERUTF8String0 . asn1Equals ( ( DERObject ) dERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 23 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; BERInputStream bERInputStream0 = new BERInputStream ( ( InputStream ) byteArrayInputStream0 ) ; bERInputStream0 . readObject ( ) ; bERInputStream0 . readObject ( ) ; byteArray0 [ 5 ] = ( byte ) ( - 128 ) ; byteArray0 [ 6 ] = ( byte ) ( - 128 ) ; byteArray0 [ 8 ] = ( byte ) ( - 128 ) ; byteArray0 [ 10 ] = ( byte ) ( - 128 ) ; byteArray0 [ 12 ] = ( byte ) ( - 128 ) ; byteArray0 [ 14 ] = ( byte ) ( - 128 ) ; byteArray0 [ 16 ] = ( byte ) ( - 128 ) ; bERInputStream0 . read ( ) ; byteArray0 [ 17 ] = ( byte ) 36 ; byteArray0 [ 19 ] = ( byte ) 81 ; byteArray0 [ 21 ] = ( byte ) 81 ; bERInputStream0 . readObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int available ( ) throws IOException { return ( in . available ( ) ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 23 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; BERInputStream bERInputStream0 = new BERInputStream ( ( InputStream ) byteArrayInputStream0 ) ; byteArray0 [ 0 ] = ( byte ) ( - 128 ) ; byteArray0 [ 1 ] = ( byte ) ( - 128 ) ; bERInputStream0 . readObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int available ( ) throws IOException { return ( in . available ( ) ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 23 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; BERInputStream bERInputStream0 = new BERInputStream ( ( InputStream ) byteArrayInputStream0 ) ; byteArray0 [ 1 ] = ( byte ) ( - 128 ) ; byteArray0 [ 0 ] = ( byte ) 36 ; byteArray0 [ 2 ] = ( byte ) 36 ; / / Undeclared exception ! try { bERInputStream0 . readObject ( ) ; fail ( "Expecting exception : IllegalArgumentException" ) ; } catch ( IllegalArgumentException e ) { / * * org . bouncycastle . asn1 . DERUnknownTag found in input should only contain DEROctetString * / } "<AssertPlaceHolder>" ; } "<FocalMethod>" int available ( ) throws IOException { return ( in . available ( ) ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 23 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; BERInputStream bERInputStream0 = new BERInputStream ( ( InputStream ) byteArrayInputStream0 ) ; byteArray0 [ 1 ] = ( byte ) ( - 128 ) ; try { bERInputStream0 . readObject ( ) ; fail ( "Expecting exception : IOException" ) ; } catch ( IOException e ) { / * * unknown BER object encountered * / } "<AssertPlaceHolder>" ; } "<FocalMethod>" int available ( ) throws IOException { return ( in . available ( ) ) ; }
void test1 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ONE ; DEREnumerated dEREnumerated0 = new DEREnumerated ( bigInteger0 ) ; BERSet bERSet0 = new BERSet ( ( DEREncodable ) dEREnumerated0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( false , ( - 6 ) , ( DEREncodable ) bERSet0 ) ; byte [ ] byteArray0 = bERTaggedObject0 . getEncoded ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime ( byteArray0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 14 , ( DEREncodable ) dERGeneralizedTime0 ) ; byte [ ] byteArray1 = bERTaggedObject0 . getEncoded ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test3 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 1600 ) ; byte [ ] byteArray0 = bERTaggedObject0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getDEREncoded ( ) { try { return this . getEncoded ( DER ) ; } catch ( IOException e ) { return null ; } }
void test4 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 1600 ) ; bERTaggedObject0 . empty = true ; byte [ ] byteArray0 = bERTaggedObject0 . getEncoded ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; DEROctetString dEROctetString0 = new DEROctetString ( byteArray0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( false , ( - 6 ) , ( DEREncodable ) dEROctetString0 ) ; byte [ ] byteArray1 = bERTaggedObject0 . getEncoded ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test6 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 14 ) ; DERSequence dERSequence0 = new DERSequence ( ( DEREncodable ) dERTaggedObject0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( false , 14 , ( DEREncodable ) dERSequence0 ) ; byte [ ] byteArray0 = bERTaggedObject0 . getEncoded ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test0 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; DERSet dERSet0 = new DERSet ( dEREncodableVector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ) ; String string0 = bERSet0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { ASN1Set aSN1Set0 = ASN1Set . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { DERT61String dERT61String0 = new DERT61String ( " | " ) ; DERConstructedSet dERConstructedSet0 = new DERConstructedSet ( ( DEREncodable ) dERT61String0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test6 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 935 ) ; DERSet dERSet0 = ( DERSet ) ASN1Set . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test8 ( ) throws Throwable { DERT61String dERT61String0 = new DERT61String ( " | " ) ; DERConstructedSet dERConstructedSet0 = new DERConstructedSet ( ( DEREncodable ) dERT61String0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test10 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSet bERSet0 = new BERSet ( dEREncodableVector0 ) ; DERConstructedSet dERConstructedSet0 = new DERConstructedSet ( dEREncodableVector0 ) ; bERSet0 . addObject ( ( DEREncodable ) dERConstructedSet0 ) ; int int0 = bERSet0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test11 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ) ; byte [ ] byteArray0 = new byte [ 2 ] ; DERBoolean dERBoolean0 = new DERBoolean ( byteArray0 ) ; boolean boolean0 = bERSet0 . asn1Equals ( ( DERObject ) dERBoolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean asn1Equals ( DERObject o ) { if ( ! ( o instanceof DERApplicationSpecific ) ) { return false ; } DERApplicationSpecific other = ( DERApplicationSpecific ) o ; if ( tag ! = other . tag ) { return false ; } if ( octets . length ! = other . octets . length ) { return false ; } for ( int i = 0 ; i < octets . length ; i + + ) { if ( octets [ i ] ! = other . octets [ i ] ) { return false ; } } return true ; }
void test12 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSet bERSet0 = new BERSet ( dEREncodableVector0 ) ; DERConstructedSet dERConstructedSet0 = new DERConstructedSet ( dEREncodableVector0 ) ; DERConstructedSet dERConstructedSet1 = new DERConstructedSet ( ( DEREncodable ) bERSet0 ) ; bERSet0 . addObject ( ( DEREncodable ) dERConstructedSet0 ) ; boolean boolean0 = bERSet0 . asn1Equals ( ( DERObject ) dERConstructedSet1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test13 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( byteArray0 ) ; DERConstructedSet dERConstructedSet0 = new DERConstructedSet ( ( DEREncodable ) dERObjectIdentifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test14 ( ) throws Throwable { ASN1Encodable [ ] aSN1EncodableArray0 = new ASN1Encodable [ 10 ] ; BERNull bERNull0 = new BERNull ( ) ; aSN1EncodableArray0 [ 6 ] = ( ASN1Encodable ) bERNull0 ; DERSet dERSet0 = new DERSet ( aSN1EncodableArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test15 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; DERConstructedSet dERConstructedSet0 = new DERConstructedSet ( dEREncodableVector0 ) ; ASN1Encodable [ ] aSN1EncodableArray0 = new ASN1Encodable [ 10 ] ; aSN1EncodableArray0 [ 7 ] = ( ASN1Encodable ) bERConstructedSequence0 ; aSN1EncodableArray0 [ 8 ] = ( ASN1Encodable ) dERConstructedSet0 ; DERSet dERSet0 = new DERSet ( aSN1EncodableArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; ASN1SequenceParser aSN1SequenceParser0 = bERConstructedSequence0 . parser ( ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 0 , ( DEREncodable ) aSN1SequenceParser0 ) ; BERConstructedSequence bERConstructedSequence1 = ( BERConstructedSequence ) ASN1Sequence . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test2 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; String string0 = bERConstructedSequence0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; DERSet dERSet0 = new DERSet ( dEREncodableVector0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 99 ) , ( DEREncodable ) dERSet0 ) ; BERSequence bERSequence0 = ( BERSequence ) ASN1Sequence . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { ASN1Sequence aSN1Sequence0 = ASN1Sequence . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; BERConstructedSequence bERConstructedSequence1 = ( BERConstructedSequence ) ASN1Sequence . getInstance ( ( Object ) bERConstructedSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test9 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 0 , ( DEREncodable ) bERConstructedSequence0 ) ; DERSequence dERSequence0 = ( DERSequence ) ASN1Sequence . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test10 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 504 ) ; DERSequence dERSequence0 = ( DERSequence ) ASN1Sequence . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test11 ( ) throws Throwable { BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test12 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) bERConstructedSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test13 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; DERBMPString dERBMPString0 = new DERBMPString ( "u > Y" ) ; boolean boolean0 = bERConstructedSequence0 . asn1Equals ( ( DERObject ) dERBMPString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean asn1Equals ( DERObject o ) { if ( ! ( o instanceof DERApplicationSpecific ) ) { return false ; } DERApplicationSpecific other = ( DERApplicationSpecific ) o ; if ( tag ! = other . tag ) { return false ; } if ( octets . length ! = other . octets . length ) { return false ; } for ( int i = 0 ; i < octets . length ; i + + ) { if ( octets [ i ] ! = other . octets [ i ] ) { return false ; } } return true ; }
void test14 ( ) throws Throwable { DERConstructedSequence dERConstructedSequence0 = new DERConstructedSequence ( ) ; BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; bERConstructedSequence0 . addObject ( ( DEREncodable ) dERConstructedSequence0 ) ; BERConstructedSequence bERConstructedSequence1 = ( BERConstructedSequence ) bERConstructedSequence0 . toASN1Object ( ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) bERConstructedSequence1 ) ; boolean boolean0 = bERSequence0 . asn1Equals ( ( DERObject ) bERConstructedSequence1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test15 ( ) throws Throwable { DERConstructedSequence dERConstructedSequence0 = new DERConstructedSequence ( ) ; BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; bERConstructedSequence0 . addObject ( ( DEREncodable ) dERConstructedSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean asn1Equals ( DERObject o ) { if ( ! ( o instanceof DERApplicationSpecific ) ) { return false ; } DERApplicationSpecific other = ( DERApplicationSpecific ) o ; if ( tag ! = other . tag ) { return false ; } if ( octets . length ! = other . octets . length ) { return false ; } for ( int i = 0 ; i < octets . length ; i + + ) { if ( octets [ i ] ! = other . octets [ i ] ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { DERNumericString dERNumericString0 = new DERNumericString ( "yyyyMMddHHmmss . SSSS'Z'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { DERNumericString dERNumericString0 = new DERNumericString ( "" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test2 ( ) throws Throwable { DERNumericString dERNumericString0 = new DERNumericString ( "" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { DERNumericString dERNumericString0 = new DERNumericString ( "" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { DERNumericString dERNumericString0 = DERNumericString . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { LinkedList < ASN1OctetString > linkedList0 = new LinkedList < ASN1OctetString > ( ) ; Vector < ASN1OctetString > vector0 = new Vector < ASN1OctetString > ( ( Collection < ? extends ASN1OctetString > ) linkedList0 ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( vector0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 889 ) , ( DEREncodable ) bERConstructedOctetString0 ) ; DERNumericString dERNumericString0 = DERNumericString . getInstance ( ( Object ) bERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test7 ( ) throws Throwable { DERNumericString dERNumericString0 = new DERNumericString ( "yyyyMMddHHmmss . SSSS'Z'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; DERNumericString dERNumericString0 = new DERNumericString ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test10 ( ) throws Throwable { boolean boolean0 = DERNumericString . isNumericString ( "exception converting octets " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumericString ( String str ) { for ( int i = str . length ( ) - 1 ; i > = 0 ; i - - ) { char ch = str . charAt ( i ) ; if ( ch > 0x007f ) { return false ; } if ( ( '0' < = ch & & ch < = '9' ) | | ch = = ' ' ) { continue ; } return false ; } return true ; }
void test11 ( ) throws Throwable { boolean boolean0 = DERNumericString . isNumericString ( "lx = `T44V ] \"3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNumericString ( String str ) { for ( int i = str . length ( ) - 1 ; i > = 0 ; i - - ) { char ch = str . charAt ( i ) ; if ( ch > 0x007f ) { return false ; } if ( ( '0' < = ch & & ch < = '9' ) | | ch = = ' ' ) { continue ; } return false ; } return true ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 150 ] ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( byteArray0 ) ; BERConstructedOctetString bERConstructedOctetString1 = new BERConstructedOctetString ( ( DEREncodable ) bERConstructedOctetString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DERObject ) null ) ; byte [ ] byteArray0 = bERConstructedOctetString0 . getEncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 150 ] ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( byteArray0 ) ; int int0 = bERConstructedOctetString0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test3 ( ) throws Throwable { Vector < BEROutputStream > vector0 = new Vector < BEROutputStream > ( ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Enumeration getObjects ( ) { return seq . elements ( ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 150 ] ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( byteArray0 ) ; byteArray0 [ 17 ] = ( byte ) 17 ; Enumeration < Object > enumeration0 = bERConstructedOctetString0 . getObjects ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Enumeration getObjects ( ) { return seq . elements ( ) ; }
void test0 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; BERGenerator bERGenerator0 = new BERGenerator ( ( OutputStream ) byteArrayOutputStream0 , 0 , true ) ; ByteArrayOutputStream byteArrayOutputStream1 = ( ByteArrayOutputStream ) bERGenerator0 . getRawOutputStream ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; BERGenerator bERGenerator0 = new BERGenerator ( ( OutputStream ) byteArrayOutputStream0 , 3 , false ) ; bERGenerator0 . writeBERHeader ( 32 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test5 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; DataOutputStream dataOutputStream0 = new DataOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; BERGenerator bERGenerator0 = new BERGenerator ( ( OutputStream ) dataOutputStream0 , 1 , true ) ; byte [ ] byteArray0 = new byte [ 3 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; bERGenerator0 . writeBERBody ( ( InputStream ) byteArrayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test7 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; BERGenerator bERGenerator0 = new BERGenerator ( ( OutputStream ) byteArrayOutputStream0 , 0 , true ) ; bERGenerator0 . writeBEREnd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test8 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; BERGenerator bERGenerator0 = new BERGenerator ( ( OutputStream ) byteArrayOutputStream0 , 3 , false ) ; bERGenerator0 . writeBEREnd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; PushbackInputStream pushbackInputStream0 = new PushbackInputStream ( ( InputStream ) byteArrayInputStream0 ) ; IndefiniteLengthInputStream indefiniteLengthInputStream0 = new IndefiniteLengthInputStream ( ( InputStream ) pushbackInputStream0 ) ; indefiniteLengthInputStream0 . setEofOn00 ( false ) ; int int0 = indefiniteLengthInputStream0 . read ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; byteArray0 [ 1 ] = ( byte ) ( - 64 ) ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; IndefiniteLengthInputStream indefiniteLengthInputStream0 = new IndefiniteLengthInputStream ( ( InputStream ) byteArrayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long skip ( long n ) throws IOException { long res = in . skip ( n ) ; pos + = res ; return ( res ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; byteArray0 [ 1 ] = ( byte ) ( - 64 ) ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; IndefiniteLengthInputStream indefiniteLengthInputStream0 = new IndefiniteLengthInputStream ( ( InputStream ) byteArrayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkForEof ( ) { if ( _eofOn00 & & ( _b1 = = 0x00 & & _b2 = = 0x00 ) ) { _eofReached = true ; setParentEofDetect ( true ) ; } return _eofReached ; }
void test0 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 1267 ) ; BEROctetStringGenerator bEROctetStringGenerator0 = new BEROctetStringGenerator ( ( OutputStream ) byteArrayOutputStream0 ) ; OutputStream outputStream0 = bEROctetStringGenerator0 . getOctetOutputStream ( ) ; byteArrayOutputStream0 . writeTo ( outputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 1267 ) ; BEROctetStringGenerator bEROctetStringGenerator0 = new BEROctetStringGenerator ( ( OutputStream ) byteArrayOutputStream0 ) ; byte [ ] byteArray0 = new byte [ 2 ] ; OutputStream outputStream0 = bEROctetStringGenerator0 . getOctetOutputStream ( byteArray0 ) ; BEROctetStringGenerator bEROctetStringGenerator1 = new BEROctetStringGenerator ( outputStream0 , ( int ) ( byte ) 96 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test2 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 1267 ) ; BEROctetStringGenerator bEROctetStringGenerator0 = new BEROctetStringGenerator ( ( OutputStream ) byteArrayOutputStream0 ) ; byte [ ] byteArray0 = new byte [ 2 ] ; OutputStream outputStream0 = bEROctetStringGenerator0 . getOctetOutputStream ( byteArray0 ) ; byteArrayOutputStream0 . writeTo ( outputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; DERUnknownTag dERUnknownTag0 = new DERUnknownTag ( 48 , byteArray0 ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DERObject ) dERUnknownTag0 ) ; byte [ ] byteArray1 = bERConstructedOctetString0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { DERBMPString dERBMPString0 = new DERBMPString ( "" ) ; int int0 = dERBMPString0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; DERBMPString dERBMPString0 = new DERBMPString ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { DERBMPString dERBMPString0 = DERBMPString . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test3 ( ) throws Throwable { DERBMPString dERBMPString0 = new DERBMPString ( "NULL" ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( false , 60 , ( DEREncodable ) dERBMPString0 ) ; DERBMPString dERBMPString1 = DERBMPString . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . getInstance ( false ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DEREncodable ) dERBoolean0 ) ; DERBMPString dERBMPString0 = DERBMPString . getInstance ( ( Object ) bERConstructedOctetString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; DERBMPString dERBMPString0 = new DERBMPString ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test7 ( ) throws Throwable { DERBMPString dERBMPString0 = new DERBMPString ( "NULL" ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( false , 60 , ( DEREncodable ) dERBMPString0 ) ; boolean boolean0 = dERBMPString0 . equals ( ( Object ) bERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; DERSet dERSet0 = new DERSet ( dEREncodableVector0 ) ; byte [ ] byteArray0 = dERSet0 . getEncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test1 ( ) throws Throwable { DERSet dERSet0 = new DERSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ( DEREncodable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test3 ( ) throws Throwable { ASN1Encodable [ ] aSN1EncodableArray0 = new ASN1Encodable [ 1 ] ; DERSet dERSet0 = new DERSet ( aSN1EncodableArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; dEREncodableVector0 . add ( ( DEREncodable ) null ) ; BERSet bERSet0 = new BERSet ( dEREncodableVector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser ( byteArray0 ) ; ByteArrayInputStream byteArrayInputStream0 = ( ByteArrayInputStream ) aSN1StreamParser0 . getParentStream ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser ( byteArray0 ) ; ASN1StreamParser aSN1StreamParser1 = new ASN1StreamParser ( aSN1StreamParser0 . _in ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASN1StreamParser ( InputStream in ) { this ( in , Integer . MAX_VALUE ) ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; byteArray0 [ 2 ] = ( byte ) ( - 1 ) ; ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser ( byteArray0 ) ; BERTaggedObjectParser bERTaggedObjectParser0 = ( BERTaggedObjectParser ) aSN1StreamParser0 . readObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTagNo ( ) { return tagNo ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; byteArray0 [ 0 ] = ( byte ) ( - 67 ) ; ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser ( byteArray0 ) ; BERTaggedObjectParser bERTaggedObjectParser0 = ( BERTaggedObjectParser ) aSN1StreamParser0 . readObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTagNo ( ) { return tagNo ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; byteArray0 [ 0 ] = ( byte ) 6 ; ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser ( byteArray0 ) ; DERObjectIdentifier dERObjectIdentifier0 = ( DERObjectIdentifier ) aSN1StreamParser0 . readObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; byteArray0 [ 0 ] = ( byte ) 40 ; ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser ( byteArray0 ) ; BERTaggedObjectParser bERTaggedObjectParser0 = ( BERTaggedObjectParser ) aSN1StreamParser0 . readObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTagNo ( ) { return tagNo ; }
void test10 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; byteArray0 [ 0 ] = ( byte ) 16 ; ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser ( byteArray0 ) ; BERTaggedObjectParser bERTaggedObjectParser0 = ( BERTaggedObjectParser ) aSN1StreamParser0 . readObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DEREncodable readObject ( ) throws IOException ; }
void test1 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; int int0 = bERConstructedSequence0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test2 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; byte [ ] byteArray0 = bERConstructedSequence0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getDEREncoded ( ) { try { return this . getEncoded ( DER ) ; } catch ( IOException e ) { return null ; } }
void test1 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( 8 ) ; DERInputStream dERInputStream0 = new DERInputStream ( ( InputStream ) pipedInputStream0 ) ; byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 0 ] = ( byte ) 9 ; DERTaggedObject dERTaggedObject0 = ( DERTaggedObject ) dERInputStream0 . buildObject ( 1262 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; byteArray0 [ 1 ] = ( byte ) 1 ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; DERInputStream dERInputStream0 = new DERInputStream ( ( InputStream ) byteArrayInputStream0 ) ; dERInputStream0 . readObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test3 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( 8 ) ; DERInputStream dERInputStream0 = new DERInputStream ( ( InputStream ) pipedInputStream0 ) ; byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 3 ] = ( byte ) 58 ; DERTaggedObject dERTaggedObject0 = ( DERTaggedObject ) dERInputStream0 . buildObject ( 1262 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTagNo ( ) { return tagNo ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; byteArray0 [ 0 ] = ( byte ) 1 ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; DERInputStream dERInputStream0 = new DERInputStream ( ( InputStream ) byteArrayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DEREncodable readObject ( ) throws IOException ; }
void test5 ( ) throws Throwable { DERInputStream dERInputStream0 = new DERInputStream ( ( InputStream ) null ) ; byte [ ] byteArray0 = new byte [ 9 ] ; DERUnknownTag dERUnknownTag0 = ( DERUnknownTag ) dERInputStream0 . buildObject ( 5 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERObject buildObject ( int tag , int tagNo , int length ) throws IOException { if ( ( tag & APPLICATION ) ! = 0 ) { return new DERApplicationSpecific ( tagNo , readDefiniteLengthFully ( length ) ) ; } boolean isConstructed = ( tag & CONSTRUCTED ) ! = 0 ; if ( isConstructed ) { switch ( tag ) { case SEQUENCE | CONSTRUCTED : return new DERSequence ( buildDerEncodableVector ( length ) ) ; case SET | CONSTRUCTED : return new DERSet ( buildDerEncodableVector ( length ) , false ) ; case OCTET_STRING | CONSTRUCTED : return buildDerConstructedOctetString ( length ) ; default : { / / / / with tagged object tag number is bottom 5 bits / / if ( ( tag & TAGGED ) ! = 0 ) { if ( length = = 0 ) / / empty tag ! { return new DERTaggedObject ( false , tagNo , new DERSequence ( ) ) ; } ASN1EncodableVector v = buildDerEncodableVector ( length ) ; if ( v . size ( ) = = 1 ) { / / / / explicitly tagged ( probably ! ) - if it isn't we'd have to / / tell from the context / / return new DERTaggedObject ( tagNo , v . get ( 0 ) ) ; } return new DERTaggedObject ( false , tagNo , new DERSequence ( v ) ) ; } return new DERUnknownTag ( tag , readDefiniteLengthFully ( length ) ) ; } } } byte [ ] bytes = readDefiniteLengthFully ( length ) ; switch ( tag ) { case NULL : return DERNull . INSTANCE ; case BOOLEAN : return new DERBoolean ( bytes ) ; case INTEGER : return new DERInteger ( bytes ) ; case ENUMERATED : return new DEREnumerated ( bytes ) ; case OBJECT_IDENTIFIER : return new DERObjectIdentifier ( bytes ) ; case BIT_STRING : { int padBits = bytes [ 0 ] ; byte [ ] data = new byte [ bytes . length - 1 ] ; System . arraycopy ( bytes , 1 , data , 0 , bytes . length - 1 ) ; return new DERBitString ( data , padBits ) ; } case NUMERIC_STRING : return new DERNumericString ( bytes ) ; case UTF8_STRING : return new DERUTF8String ( bytes ) ; case PRINTABLE_STRING : return new DERPrintableString ( bytes ) ; case IA5_STRING : return new DERIA5String ( bytes ) ; case T61_STRING : return new DERT61String ( bytes ) ; case VISIBLE_STRING : return new DERVisibleString ( bytes ) ; case GENERAL_STRING : return new DERGeneralString ( bytes ) ; case UNIVERSAL_STRING : return new DERUniversalString ( bytes ) ; case BMP_STRING : return new DERBMPString ( bytes ) ; case OCTET_STRING : return new DEROctetString ( bytes ) ; case UTC_TIME : return new DERUTCTime ( bytes ) ; case GENERALIZED_TIME : return new DERGeneralizedTime ( bytes ) ; default : { / / / / with tagged object tag number is bottom 5 bits / / if ( ( tag & TAGGED ) ! = 0 ) { if ( bytes . length = = 0 ) / / empty tag ! { return new DERTaggedObject ( false , tagNo , DERNull . INSTANCE ) ; } / / / / simple type - implicit . . . return an octet string / / return new DERTaggedObject ( false , tagNo , new DEROctetString ( bytes ) ) ; } return new DERUnknownTag ( tag , bytes ) ; } } }
void test6 ( ) throws Throwable { DERInputStream dERInputStream0 = new DERInputStream ( ( InputStream ) null ) ; byte [ ] byteArray0 = new byte [ 10 ] ; DERUnknownTag dERUnknownTag0 = ( DERUnknownTag ) dERInputStream0 . buildObject ( 7 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTag ( ) { return tag ; }
void test7 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( 8 ) ; DERInputStream dERInputStream0 = new DERInputStream ( ( InputStream ) pipedInputStream0 ) ; byte [ ] byteArray0 = new byte [ 4 ] ; DERUnknownTag dERUnknownTag0 = ( DERUnknownTag ) dERInputStream0 . buildObject ( 8 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTag ( ) { return tag ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; DERInputStream dERInputStream0 = new DERInputStream ( ( InputStream ) byteArrayInputStream0 ) ; DERT61String dERT61String0 = ( DERT61String ) dERInputStream0 . buildObject ( ( int ) ( byte ) 20 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test10 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; byteArray0 [ 0 ] = ( byte ) 23 ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; DERInputStream dERInputStream0 = new DERInputStream ( ( InputStream ) byteArrayInputStream0 ) ; dERInputStream0 . readObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test11 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; DERInputStream dERInputStream0 = new DERInputStream ( ( InputStream ) byteArrayInputStream0 ) ; byteArray0 [ 0 ] = ( byte ) 29 ; dERInputStream0 . readObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test12 ( ) throws Throwable { FileDescriptor fileDescriptor0 = FileDescriptor . in ; FileInputStream fileInputStream0 = new FileInputStream ( fileDescriptor0 ) ; DERInputStream dERInputStream0 = new DERInputStream ( ( InputStream ) fileInputStream0 ) ; byte [ ] byteArray0 = new byte [ 9 ] ; DERUnknownTag dERUnknownTag0 = ( DERUnknownTag ) dERInputStream0 . buildObject ( ( int ) ( byte ) 41 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTag ( ) { return tag ; }
void test13 ( ) throws Throwable { FileDescriptor fileDescriptor0 = FileDescriptor . in ; FileInputStream fileInputStream0 = new FileInputStream ( fileDescriptor0 ) ; DERInputStream dERInputStream0 = new DERInputStream ( ( InputStream ) fileInputStream0 ) ; byte [ ] byteArray0 = new byte [ 9 ] ; DERUnknownTag dERUnknownTag0 = ( DERUnknownTag ) dERInputStream0 . buildObject ( 43 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTag ( ) { return tag ; }
void test17 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; PushbackInputStream pushbackInputStream0 = new PushbackInputStream ( ( InputStream ) byteArrayInputStream0 , 1348 ) ; DERInputStream dERInputStream0 = new DERInputStream ( ( InputStream ) pushbackInputStream0 ) ; byte [ ] byteArray1 = new byte [ 4 ] ; DERTaggedObject dERTaggedObject0 = ( DERTaggedObject ) dERInputStream0 . buildObject ( ( int ) ( byte ) ( - 105 ) , byteArray1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTagNo ( ) { return tagNo ; }
void test0 ( ) throws Throwable { OIDTokenizer oIDTokenizer0 = new OIDTokenizer ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreTokens ( ) { return ( index ! = - 1 ) ; }
void test1 ( ) throws Throwable { OIDTokenizer oIDTokenizer0 = new OIDTokenizer ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreTokens ( ) { return ( index ! = - 1 ) ; }
void test2 ( ) throws Throwable { OIDTokenizer oIDTokenizer0 = new OIDTokenizer ( "" ) ; oIDTokenizer0 . nextToken ( ) ; oIDTokenizer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreTokens ( ) { return ( index ! = - 1 ) ; }
void test3 ( ) throws Throwable { OIDTokenizer oIDTokenizer0 = new OIDTokenizer ( "^ ? } A4 . 0x~zL2IPZm - < < " ) ; String string0 = oIDTokenizer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreTokens ( ) { return ( index ! = - 1 ) ; }
void test0 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; DataOutputStream dataOutputStream0 = new DataOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; DERSequenceGenerator dERSequenceGenerator0 = new DERSequenceGenerator ( ( OutputStream ) dataOutputStream0 ) ; ByteArrayOutputStream byteArrayOutputStream1 = ( ByteArrayOutputStream ) dERSequenceGenerator0 . getRawOutputStream ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OutputStream getRawOutputStream ( ) { return _out ; }
void test1 ( ) throws Throwable { DERSequenceGenerator dERSequenceGenerator0 = new DERSequenceGenerator ( ( OutputStream ) null , ( - 991 ) , true ) ; DERConstructedSet dERConstructedSet0 = new DERConstructedSet ( ) ; dERSequenceGenerator0 . addObject ( ( DEREncodable ) dERConstructedSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test2 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; DERSequenceGenerator dERSequenceGenerator0 = new DERSequenceGenerator ( ( OutputStream ) byteArrayOutputStream0 ) ; dERSequenceGenerator0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { DERInteger dERInteger0 = new DERInteger ( ( - 1915 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; BigInteger bigInteger0 = new BigInteger ( byteArray0 ) ; DERInteger dERInteger0 = new DERInteger ( bigInteger0 ) ; String string0 = dERInteger0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { DERInteger dERInteger0 = DERInteger . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; BigInteger bigInteger0 = new BigInteger ( byteArray0 ) ; DERInteger dERInteger0 = new DERInteger ( bigInteger0 ) ; DERInteger dERInteger1 = DERInteger . getInstance ( ( Object ) dERInteger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; DEROctetString dEROctetString0 = new DEROctetString ( byteArray0 ) ; DERInteger dERInteger0 = DERInteger . getInstance ( ( Object ) dEROctetString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test6 ( ) throws Throwable { DERInteger dERInteger0 = new DERInteger ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test7 ( ) throws Throwable { DERInteger dERInteger0 = new DERInteger ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test8 ( ) throws Throwable { DERInteger dERInteger0 = new DERInteger ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test9 ( ) throws Throwable { DERInteger dERInteger0 = new DERInteger ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int intValue ( ) { int value = 0 ; for ( int i = 0 ; i ! = data . length & & i ! = 4 ; i + + ) { value | = ( data [ i ] & 0xff ) < < ( 8 * i ) ; } return value ; }
void test10 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; DERInteger dERInteger0 = new DERInteger ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSequence bERSequence0 = new BERSequence ( dEREncodableVector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test0 ( ) throws Throwable { Date date0 = new Date ( 0L ) ; DERUTCTime dERUTCTime0 = new DERUTCTime ( date0 ) ; byte [ ] byteArray0 = dERUTCTime0 . getEncoded ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 12 ] ; DERUTCTime dERUTCTime0 = new DERUTCTime ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; DERUTCTime dERUTCTime0 = new DERUTCTime ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test4 ( ) throws Throwable { Vector < Object > vector0 = new Vector < Object > ( ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( vector0 ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( ( - 788 ) , ( DEREncodable ) bERConstructedOctetString0 ) ; DERUTCTime dERUTCTime0 = DERUTCTime . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test5 ( ) throws Throwable { Date date0 = new Date ( 0L ) ; DERUTCTime dERUTCTime0 = new DERUTCTime ( date0 ) ; Date date1 = dERUTCTime0 . getAdjustedDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test6 ( ) throws Throwable { DERUTCTime dERUTCTime0 = DERUTCTime . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; DERUTCTime dERUTCTime0 = new DERUTCTime ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test11 ( ) throws Throwable { Date date0 = new Date ( ) ; DERUTCTime dERUTCTime0 = new DERUTCTime ( date0 ) ; String string0 = dERUTCTime0 . getAdjustedTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test12 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; DERUTCTime dERUTCTime0 = new DERUTCTime ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test13 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 12 ] ; DERUTCTime dERUTCTime0 = new DERUTCTime ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ZERO ; DEREnumerated dEREnumerated0 = new DEREnumerated ( bigInteger0 ) ; int int0 = dEREnumerated0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test1 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ZERO ; DEREnumerated dEREnumerated0 = new DEREnumerated ( bigInteger0 ) ; byte [ ] byteArray0 = dEREnumerated0 . getEncoded ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; DERApplicationSpecific dERApplicationSpecific0 = new DERApplicationSpecific ( 50 , byteArray0 ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DEREncodable ) dERApplicationSpecific0 ) ; DEREnumerated dEREnumerated0 = DEREnumerated . getInstance ( ( Object ) bERConstructedOctetString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test3 ( ) throws Throwable { DEREnumerated dEREnumerated0 = new DEREnumerated ( 14 ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 14 , ( DEREncodable ) dEREnumerated0 ) ; DEREnumerated dEREnumerated1 = DEREnumerated . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test4 ( ) throws Throwable { DEREnumerated dEREnumerated0 = DEREnumerated . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test6 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ZERO ; DEREnumerated dEREnumerated0 = new DEREnumerated ( bigInteger0 ) ; boolean boolean0 = dEREnumerated0 . asn1Equals ( ( DERObject ) dEREnumerated0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean asn1Equals ( DERObject o ) { if ( ! ( o instanceof DERApplicationSpecific ) ) { return false ; } DERApplicationSpecific other = ( DERApplicationSpecific ) o ; if ( tag ! = other . tag ) { return false ; } if ( octets . length ! = other . octets . length ) { return false ; } for ( int i = 0 ; i < octets . length ; i + + ) { if ( octets [ i ] ! = other . octets [ i ] ) { return false ; } } return true ; }
void test7 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ZERO ; DEREnumerated dEREnumerated0 = new DEREnumerated ( bigInteger0 ) ; DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSequence bERSequence0 = new BERSequence ( dEREncodableVector0 ) ; boolean boolean0 = dEREnumerated0 . asn1Equals ( ( DERObject ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean asn1Equals ( DERObject o ) { if ( ! ( o instanceof DERApplicationSpecific ) ) { return false ; } DERApplicationSpecific other = ( DERApplicationSpecific ) o ; if ( tag ! = other . tag ) { return false ; } if ( octets . length ! = other . octets . length ) { return false ; } for ( int i = 0 ; i < octets . length ; i + + ) { if ( octets [ i ] ! = other . octets [ i ] ) { return false ; } } return true ; }
void test8 ( ) throws Throwable { DEREnumerated dEREnumerated0 = new DEREnumerated ( ( - 1022 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean asn1Equals ( DERObject o ) { if ( ! ( o instanceof DERApplicationSpecific ) ) { return false ; } DERApplicationSpecific other = ( DERApplicationSpecific ) o ; if ( tag ! = other . tag ) { return false ; } if ( octets . length ! = other . octets . length ) { return false ; } for ( int i = 0 ; i < octets . length ; i + + ) { if ( octets [ i ] ! = other . octets [ i ] ) { return false ; } } return true ; }
void test9 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ZERO ; DEREnumerated dEREnumerated0 = new DEREnumerated ( bigInteger0 ) ; DEREnumerated dEREnumerated1 = new DEREnumerated ( 102 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test0 ( ) throws Throwable { BERSequence bERSequence0 = new BERSequence ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; BEROutputStream bEROutputStream0 = new BEROutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; bERSequence0 . encode ( ( DEROutputStream ) bEROutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSequence bERSequence0 = new BERSequence ( dEREncodableVector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { BERNull bERNull0 = new BERNull ( ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) bERNull0 ) ; byte [ ] byteArray0 = bERSequence0 . getEncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( byteArray0 ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) dERObjectIdentifier0 ) ; byte [ ] byteArray1 = bERSequence0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getDEREncoded ( ) { try { return this . getEncoded ( DER ) ; } catch ( IOException e ) { return null ; } }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; BufferedInputStream bufferedInputStream0 = new BufferedInputStream ( ( InputStream ) byteArrayInputStream0 ) ; BERTaggedObjectParser bERTaggedObjectParser0 = new BERTaggedObjectParser ( ( - 5 ) , ( - 5 ) , ( InputStream ) bufferedInputStream0 ) ; int int0 = bERTaggedObjectParser0 . getTagNo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConstructed ( ) { return ( tag & DERTags . CONSTRUCTED ) ! = 0 ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; BERTaggedObjectParser bERTaggedObjectParser0 = new BERTaggedObjectParser ( 19 , 19 , ( InputStream ) byteArrayInputStream0 ) ; bERTaggedObjectParser0 . getObjectParser ( ( int ) ( byte ) 0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTagNo ( ) { return tagNo ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; byteArray0 [ 1 ] = ( byte ) 1 ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; BufferedInputStream bufferedInputStream0 = new BufferedInputStream ( ( InputStream ) byteArrayInputStream0 ) ; BERTaggedObjectParser bERTaggedObjectParser0 = new BERTaggedObjectParser ( ( - 5 ) , ( - 5 ) , ( InputStream ) bufferedInputStream0 ) ; DERTaggedObject dERTaggedObject0 = ( DERTaggedObject ) bERTaggedObjectParser0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConstructed ( ) { return ( tag & DERTags . CONSTRUCTED ) ! = 0 ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( - 829 ) , ( int ) ( byte ) 0 ) ; BERTaggedObjectParser bERTaggedObjectParser0 = new BERTaggedObjectParser ( ( - 1623 ) , ( - 829 ) , ( InputStream ) byteArrayInputStream0 ) ; DERTaggedObject dERTaggedObject0 = ( DERTaggedObject ) bERTaggedObjectParser0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConstructed ( ) { return ( tag & DERTags . CONSTRUCTED ) ! = 0 ; }
void test0 ( ) throws Throwable { BERNull bERNull0 = new BERNull ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 12 ) ; BEROutputStream bEROutputStream0 = new BEROutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; bERNull0 . encode ( ( DEROutputStream ) bEROutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { BERNull bERNull0 = BERNull . INSTANCE ; byte [ ] byteArray0 = bERNull0 . getEncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test2 ( ) throws Throwable { BERNull bERNull0 = BERNull . INSTANCE ; byte [ ] byteArray0 = bERNull0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getDEREncoded ( ) { try { return this . getEncoded ( DER ) ; } catch ( IOException e ) { return null ; } }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 33 ] ; DERUnknownTag dERUnknownTag0 = new DERUnknownTag ( 33 , byteArray0 ) ; int int0 = dERUnknownTag0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; DERUnknownTag dERUnknownTag0 = new DERUnknownTag ( 251 , byteArray0 ) ; byte [ ] byteArray1 = dERUnknownTag0 . getEncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTag ( ) { return tag ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 33 ] ; DERUnknownTag dERUnknownTag0 = new DERUnknownTag ( 33 , byteArray0 ) ; boolean boolean0 = dERUnknownTag0 . equals ( ( Object ) dERUnknownTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 33 ] ; DERUnknownTag dERUnknownTag0 = new DERUnknownTag ( 33 , byteArray0 ) ; boolean boolean0 = dERUnknownTag0 . equals ( ( Object ) "XuW . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 33 ] ; DERUnknownTag dERUnknownTag0 = new DERUnknownTag ( 33 , byteArray0 ) ; DERUnknownTag dERUnknownTag1 = new DERUnknownTag ( ( int ) ( byte ) 0 , dERUnknownTag0 . data ) ; boolean boolean0 = dERUnknownTag0 . equals ( ( Object ) dERUnknownTag1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; DERUnknownTag dERUnknownTag0 = new DERUnknownTag ( 0 , byteArray0 ) ; DERConstructedSet dERConstructedSet0 = new DERConstructedSet ( ( DEREncodable ) dERUnknownTag0 ) ; int int0 = dERConstructedSet0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; DERUnknownTag dERUnknownTag0 = new DERUnknownTag ( 0 , byteArray0 ) ; DERConstructedSet dERConstructedSet0 = new DERConstructedSet ( ( DEREncodable ) dERUnknownTag0 ) ; DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; dEREncodableVector0 . add ( ( DEREncodable ) dERConstructedSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; DERUTCTime dERUTCTime0 = new DERUTCTime ( byteArray0 ) ; DERConstructedSet dERConstructedSet0 = new DERConstructedSet ( ( DEREncodable ) dERUTCTime0 ) ; byte [ ] byteArray1 = dERConstructedSet0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test1 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; DefiniteLengthInputStream definiteLengthInputStream0 = new DefiniteLengthInputStream ( ( InputStream ) pipedInputStream0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test4 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; DefiniteLengthInputStream definiteLengthInputStream0 = new DefiniteLengthInputStream ( ( InputStream ) pipedInputStream0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; DefiniteLengthInputStream definiteLengthInputStream0 = new DefiniteLengthInputStream ( ( InputStream ) byteArrayInputStream0 , 1 ) ; int int0 = definiteLengthInputStream0 . read ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int available ( ) throws IOException { return ( in . available ( ) ) ; }
void test7 ( ) throws Throwable { DefiniteLengthInputStream definiteLengthInputStream0 = new DefiniteLengthInputStream ( ( InputStream ) null , 0 ) ; byte [ ] byteArray0 = definiteLengthInputStream0 . toByteArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] toByteArray ( ) throws IOException { byte [ ] bytes = new byte [ _length ] ; if ( _length > 0 ) { int pos = 0 ; do { int read = _in . read ( bytes , pos , _length - pos ) ; if ( read < 0 ) { throw new EOFException ( ) ; } pos + = read ; } while ( pos < _length ) ; _length = 0 ; } setParentEofDetect ( true ) ; return bytes ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; DefiniteLengthInputStream definiteLengthInputStream0 = new DefiniteLengthInputStream ( ( InputStream ) byteArrayInputStream0 , 3 ) ; definiteLengthInputStream0 . toByteArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long read ( ByteBuffer [ ] buffers , int array_offset , int length ) throws IOException ; / * * * Set the transport to the given speed mode . * @param mode to change to * / void setTransportMode ( int mode ) ; / * * * Get the transport's speed mode . * @return current mode * / int getTransportMode ( ) ; / * * * Kick off an outbound connection * @param listener * / void connectOutbound ( ByteBuffer initial_data , ConnectListener listener , int priority ) ; / * * * Indicate that inbound connection is complete * / void connectedInbound ( ) ; / * * * Close the transport connection . * / void close ( String reason ) ; void bindConnection ( NetworkConnection connection ) ; void unbindConnection ( NetworkConnection connection ) ; void setTrace ( boolean on ) ; / * * * Listener for notification of connection establishment . * / interface ConnectListener { / * * * The connection establishment process has started , * i . e . the connection is actively being attempted . * @return modified timeout * / int connectAttemptStarted ( int default_connect_timeout ) ; / * * * The connection attempt succeeded . * The connection is now established . * / void connectSuccess ( Transport transport , ByteBuffer remaining_initial_data ) ; / * * * The connection attempt failed . * @param failure_msg failure reason * / void connectFailure ( Throwable failure_msg ) ; }
void test0 ( ) throws Throwable { BERNull bERNull0 = new BERNull ( ) ; byte [ ] byteArray0 = bERNull0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getDEREncoded ( ) { try { return this . getEncoded ( DER ) ; } catch ( IOException e ) { return null ; } }
void test0 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . FALSE ; int int0 = dERBoolean0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test2 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . FALSE ; byte [ ] byteArray0 = dERBoolean0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getDEREncoded ( ) { try { return this . getEncoded ( DER ) ; } catch ( IOException e ) { return null ; } }
void test3 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; DEROctetString dEROctetString0 = new DEROctetString ( ( DEREncodable ) bERConstructedSequence0 ) ; DERBoolean dERBoolean0 = DERBoolean . getInstance ( ( Object ) dEROctetString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test4 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . FALSE ; DERBoolean dERBoolean1 = DERBoolean . getInstance ( ( Object ) dERBoolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test7 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . getInstance ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test8 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . getInstance ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test9 ( ) throws Throwable { DERBoolean dERBoolean0 = new DERBoolean ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERBoolean ( byte [ ] value ) { this . value = value [ 0 ] ; }
void test10 ( ) throws Throwable { DERBoolean dERBoolean0 = new DERBoolean ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERBoolean ( byte [ ] value ) { this . value = value [ 0 ] ; }
void test11 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . FALSE ; boolean boolean0 = dERBoolean0 . isTrue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTrue ( ) { return ( value ! = 0 ) ; }
void test12 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . TRUE ; boolean boolean0 = dERBoolean0 . asn1Equals ( ( DERObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean asn1Equals ( DERObject o ) { if ( ! ( o instanceof DERApplicationSpecific ) ) { return false ; } DERApplicationSpecific other = ( DERApplicationSpecific ) o ; if ( tag ! = other . tag ) { return false ; } if ( octets . length ! = other . octets . length ) { return false ; } for ( int i = 0 ; i < octets . length ; i + + ) { if ( octets [ i ] ! = other . octets [ i ] ) { return false ; } } return true ; }
void test13 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . FALSE ; boolean boolean0 = dERBoolean0 . asn1Equals ( ( DERObject ) dERBoolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean asn1Equals ( DERObject o ) { if ( ! ( o instanceof DERApplicationSpecific ) ) { return false ; } DERApplicationSpecific other = ( DERApplicationSpecific ) o ; if ( tag ! = other . tag ) { return false ; } if ( octets . length ! = other . octets . length ) { return false ; } for ( int i = 0 ; i < octets . length ; i + + ) { if ( octets [ i ] ! = other . octets [ i ] ) { return false ; } } return true ; }
void test14 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . FALSE ; byte [ ] byteArray0 = new byte [ 4 ] ; DEREnumerated dEREnumerated0 = new DEREnumerated ( byteArray0 ) ; boolean boolean0 = dERBoolean0 . asn1Equals ( ( DERObject ) dEREnumerated0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean asn1Equals ( DERObject o ) { if ( ! ( o instanceof DERApplicationSpecific ) ) { return false ; } DERApplicationSpecific other = ( DERApplicationSpecific ) o ; if ( tag ! = other . tag ) { return false ; } if ( octets . length ! = other . octets . length ) { return false ; } for ( int i = 0 ; i < octets . length ; i + + ) { if ( octets [ i ] ! = other . octets [ i ] ) { return false ; } } return true ; }
void test15 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . FALSE ; String string0 = dERBoolean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; DERVisibleString dERVisibleString0 = new DERVisibleString ( byteArray0 ) ; DERBitString dERBitString0 = new DERBitString ( ( DEREncodable ) dERVisibleString0 ) ; DERBitString dERBitString1 = new DERBitString ( byteArray0 , ( - 1536 ) ) ; boolean boolean0 = dERBitString0 . equals ( ( Object ) dERBitString1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; DERBitString dERBitString0 = new DERBitString ( byteArray0 , ( int ) ( byte ) 0 ) ; int int0 = dERBitString0 . intValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; DERBitString dERBitString0 = new DERBitString ( byteArray0 , ( int ) ( byte ) 54 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 0 , ( DEREncodable ) dERBitString0 ) ; DERBitString dERBitString1 = DERBitString . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { DERBitString dERBitString0 = new DERBitString ( ( byte ) 1 , 0 ) ; int int0 = dERBitString0 . intValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; DERBitString dERBitString0 = new DERBitString ( byteArray0 ) ; String string0 = dERBitString0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test5 ( ) throws Throwable { int int0 = DERBitString . getPadBits ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPadBits ( int bitString ) { int val = 0 ; for ( int i = 3 ; i > = 0 ; i - - ) { / / / / this may look a little odd , but if it isn't done like this pre jdk1 . 2 / / JVM's break ! / / if ( i ! = 0 ) { if ( ( bitString > > ( i * 8 ) ) ! = 0 ) { val = ( bitString > > ( i * 8 ) ) & 0xFF ; break ; } } else { if ( bitString ! = 0 ) { val = bitString & 0xFF ; break ; } } } if ( val = = 0 ) { return 7 ; } int bits = 1 ; while ( ( ( val < < = 1 ) & 0xFF ) ! = 0 ) { bits + + ; } return 8 - bits ; }
void test6 ( ) throws Throwable { int int0 = DERBitString . getPadBits ( 1988 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPadBits ( int bitString ) { int val = 0 ; for ( int i = 3 ; i > = 0 ; i - - ) { / / / / this may look a little odd , but if it isn't done like this pre jdk1 . 2 / / JVM's break ! / / if ( i ! = 0 ) { if ( ( bitString > > ( i * 8 ) ) ! = 0 ) { val = ( bitString > > ( i * 8 ) ) & 0xFF ; break ; } } else { if ( bitString ! = 0 ) { val = bitString & 0xFF ; break ; } } } if ( val = = 0 ) { return 7 ; } int bits = 1 ; while ( ( ( val < < = 1 ) & 0xFF ) ! = 0 ) { bits + + ; } return 8 - bits ; }
void test7 ( ) throws Throwable { int int0 = DERBitString . getPadBits ( 55 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPadBits ( int bitString ) { int val = 0 ; for ( int i = 3 ; i > = 0 ; i - - ) { / / / / this may look a little odd , but if it isn't done like this pre jdk1 . 2 / / JVM's break ! / / if ( i ! = 0 ) { if ( ( bitString > > ( i * 8 ) ) ! = 0 ) { val = ( bitString > > ( i * 8 ) ) & 0xFF ; break ; } } else { if ( bitString ! = 0 ) { val = bitString & 0xFF ; break ; } } } if ( val = = 0 ) { return 7 ; } int bits = 1 ; while ( ( ( val < < = 1 ) & 0xFF ) ! = 0 ) { bits + + ; } return 8 - bits ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = DERBitString . getBytes ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getBytes ( ByteBuffer buffer , int max_size ) throws CryptoManagerException { int len = getInt ( buffer , max_size ) ; if ( len > max_size ) { throw ( new CryptoManagerException ( "Invalid length" ) ) ; } try { byte [ ] res = new byte [ len ] ; buffer . get ( res ) ; return ( res ) ; } catch ( Throwable e ) { throw ( new CryptoManagerException ( "Failed to get byte [ ] " , e ) ) ; } }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = DERBitString . getBytes ( ( int ) ( byte ) ( - 55 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getBytes ( ByteBuffer buffer , int max_size ) throws CryptoManagerException { int len = getInt ( buffer , max_size ) ; if ( len > max_size ) { throw ( new CryptoManagerException ( "Invalid length" ) ) ; } try { byte [ ] res = new byte [ len ] ; buffer . get ( res ) ; return ( res ) ; } catch ( Throwable e ) { throw ( new CryptoManagerException ( "Failed to get byte [ ] " , e ) ) ; } }
void test10 ( ) throws Throwable { DERBitString dERBitString0 = DERBitString . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test12 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( byteArray0 ) ; DERBitString dERBitString0 = DERBitString . getInstance ( ( Object ) bERConstructedOctetString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test13 ( ) throws Throwable { DERBitString dERBitString0 = new DERBitString ( ( byte ) 1 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test14 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; DERBitString dERBitString0 = new DERBitString ( byteArray0 ) ; DERBMPString dERBMPString0 = new DERBMPString ( "" ) ; boolean boolean0 = dERBitString0 . asn1Equals ( ( DERObject ) dERBMPString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test15 ( ) throws Throwable { DERBitString dERBitString0 = new DERBitString ( ( byte ) 124 , 0 ) ; DERBitString dERBitString1 = new DERBitString ( ( byte ) ( - 1 ) , ( byte ) ( - 1 ) ) ; boolean boolean0 = dERBitString1 . asn1Equals ( ( DERObject ) dERBitString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test16 ( ) throws Throwable { DERBitString dERBitString0 = new DERBitString ( ( byte ) 1 , 0 ) ; DERBitString dERBitString1 = new DERBitString ( ( byte ) 1 , ( byte ) 1 ) ; boolean boolean0 = dERBitString1 . asn1Equals ( ( DERObject ) dERBitString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; DERGeneralString dERGeneralString0 = new DERGeneralString ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; DERGeneralString dERGeneralString0 = new DERGeneralString ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test2 ( ) throws Throwable { DERGeneralString dERGeneralString0 = new DERGeneralString ( ( String ) null ) ; String string0 = dERGeneralString0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { DERGeneralString dERGeneralString0 = new DERGeneralString ( "lib" ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 18 , ( DEREncodable ) dERGeneralString0 ) ; DERGeneralString dERGeneralString1 = DERGeneralString . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { DERGeneralString dERGeneralString0 = DERGeneralString . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test6 ( ) throws Throwable { Vector < ASN1OctetString > vector0 = new Vector < ASN1OctetString > ( ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( vector0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( true , 7 , ( DEREncodable ) bERConstructedOctetString0 ) ; DERGeneralString dERGeneralString0 = DERGeneralString . getInstance ( ( Object ) bERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test7 ( ) throws Throwable { DERGeneralString dERGeneralString0 = new DERGeneralString ( "8O" ) ; boolean boolean0 = dERGeneralString0 . asn1Equals ( ( DERObject ) dERGeneralString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test8 ( ) throws Throwable { DERGeneralString dERGeneralString0 = new DERGeneralString ( ( String ) null ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 1453 ) ; boolean boolean0 = dERGeneralString0 . asn1Equals ( ( DERObject ) dERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean asn1Equals ( DERObject o ) { if ( ! ( o instanceof DERApplicationSpecific ) ) { return false ; } DERApplicationSpecific other = ( DERApplicationSpecific ) o ; if ( tag ! = other . tag ) { return false ; } if ( octets . length ! = other . octets . length ) { return false ; } for ( int i = 0 ; i < octets . length ; i + + ) { if ( octets [ i ] ! = other . octets [ i ] ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 0 ) ; byte [ ] byteArray0 = bERTaggedObject0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getDEREncoded ( ) { try { return this . getEncoded ( DER ) ; } catch ( IOException e ) { return null ; } }
void test1 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 286 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExplicit ( ) { return explicit ; }
void test2 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 1 ) ) ; bERTaggedObject0 . empty = true ; byte [ ] byteArray0 = bERTaggedObject0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getDEREncoded ( ) { try { return this . getEncoded ( DER ) ; } catch ( IOException e ) { return null ; } }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime ( byteArray0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 0 , ( DEREncodable ) dERGeneralizedTime0 ) ; byte [ ] byteArray1 = bERTaggedObject0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test4 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( false , 1 , ( DEREncodable ) null ) ; byte [ ] byteArray0 = dERTaggedObject0 . getEncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test0 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 16 ) ; BERConstructedOctetString bERConstructedOctetString0 = ( BERConstructedOctetString ) bERTaggedObject0 . getObjectParser ( 16 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { DERBoolean dERBoolean0 = new DERBoolean ( false ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 11 , ( DEREncodable ) dERBoolean0 ) ; DistributionPointName distributionPointName0 = new DistributionPointName ( ( ASN1TaggedObject ) bERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 19 ) ; boolean boolean0 = bERTaggedObject0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 19 ) ; String string0 = bERTaggedObject0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test6 ( ) throws Throwable { ASN1TaggedObject aSN1TaggedObject0 = ASN1TaggedObject . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test7 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 0 ) ; BERTaggedObject bERTaggedObject1 = ( BERTaggedObject ) ASN1TaggedObject . getInstance ( ( Object ) bERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTagNo ( ) { return tagNo ; }
void test9 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 0 ) ; boolean boolean0 = bERTaggedObject0 . asn1Equals ( ( DERObject ) bERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test10 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( ( - 410 ) ) ; BigInteger bigInteger0 = BigInteger . TEN ; DEREnumerated dEREnumerated0 = new DEREnumerated ( bigInteger0 ) ; boolean boolean0 = dERTaggedObject0 . asn1Equals ( ( DERObject ) dEREnumerated0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test11 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 0 ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( false , 22 , ( DEREncodable ) bERTaggedObject0 ) ; boolean boolean0 = bERTaggedObject0 . equals ( ( Object ) dERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test12 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 19 ) ; BERTaggedObject bERTaggedObject1 = new BERTaggedObject ( true , 19 , ( DEREncodable ) null ) ; boolean boolean0 = bERTaggedObject1 . asn1Equals ( ( DERObject ) bERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExplicit ( ) { return explicit ; }
void test13 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 19 ) ; BERTaggedObject bERTaggedObject1 = new BERTaggedObject ( false , 19 , ( DEREncodable ) null ) ; boolean boolean0 = bERTaggedObject1 . asn1Equals ( ( DERObject ) bERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test14 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( true , 19 , ( DEREncodable ) null ) ; boolean boolean0 = bERTaggedObject0 . asn1Equals ( ( DERObject ) bERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean asn1Equals ( DERObject o ) { if ( ! ( o instanceof DERApplicationSpecific ) ) { return false ; } DERApplicationSpecific other = ( DERApplicationSpecific ) o ; if ( tag ! = other . tag ) { return false ; } if ( octets . length ! = other . octets . length ) { return false ; } for ( int i = 0 ; i < octets . length ; i + + ) { if ( octets [ i ] ! = other . octets [ i ] ) { return false ; } } return true ; }
void test15 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 1026 ) ; GeneralName generalName0 = new GeneralName ( ( DERObject ) bERTaggedObject0 , 1026 ) ; boolean boolean0 = bERTaggedObject0 . equals ( ( Object ) generalName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test16 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( true , 19 , ( DEREncodable ) null ) ; int int0 = bERTaggedObject0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test17 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 0 ) ; int int0 = bERTaggedObject0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test18 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( true , 19 , ( DEREncodable ) null ) ; bERTaggedObject0 . getObjectParser ( 19 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test19 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 1640 ) ; BERConstructedOctetString bERConstructedOctetString0 = ( BERConstructedOctetString ) bERTaggedObject0 . getObjectParser ( 4 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test20 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( ( int ) ( byte ) 17 ) ; BERConstructedOctetString bERConstructedOctetString0 = ( BERConstructedOctetString ) dERTaggedObject0 . getObjectParser ( ( int ) ( byte ) 17 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { BERNull bERNull0 = BERNull . INSTANCE ; BERSet bERSet0 = new BERSet ( ( DEREncodable ) bERNull0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test1 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSet bERSet0 = new BERSet ( dEREncodableVector0 ) ; byte [ ] byteArray0 = bERSet0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getDEREncoded ( ) { try { return this . getEncoded ( DER ) ; } catch ( IOException e ) { return null ; } }
void test3 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; dEREncodableVector0 . add ( ( DEREncodable ) null ) ; BERSet bERSet0 = new BERSet ( dEREncodableVector0 , true ) ; byte [ ] byteArray0 = bERSet0 . getEncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test0 ( ) throws Throwable { Date date0 = new Date ( ) ; DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime ( date0 ) ; String string0 = dERGeneralizedTime0 . getTimeString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 17 ] ; DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTimeString ( ) { return time ; }
void test2 ( ) throws Throwable { Date date0 = new Date ( ) ; DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime ( date0 ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DEREncodable ) dERGeneralizedTime0 ) ; DERGeneralizedTime . getInstance ( ( Object ) bERConstructedOctetString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 17 ] ; DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test5 ( ) throws Throwable { DERGeneralizedTime dERGeneralizedTime0 = DERGeneralizedTime . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test8 ( ) throws Throwable { Date date0 = new Date ( ) ; DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime ( date0 ) ; String string0 = dERGeneralizedTime0 . getTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test11 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 7 ] = ( byte ) 45 ; DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test13 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test16 ( ) throws Throwable { Date date0 = new Date ( ) ; DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime ( date0 ) ; boolean boolean0 = dERGeneralizedTime0 . asn1Equals ( ( DERObject ) dERGeneralizedTime0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test17 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 17 ] ; DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTimeString ( ) { return time ; }
void test0 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; byte [ ] byteArray0 = bERConstructedSequence0 . getEncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test1 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; byte [ ] byteArray0 = bERConstructedSequence0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getDEREncoded ( ) { try { return this . getEncoded ( DER ) ; } catch ( IOException e ) { return null ; } }
void test0 ( ) throws Throwable { DERVisibleString dERVisibleString0 = new DERVisibleString ( "wQpE { BnWP ) Soo7W" ) ; byte [ ] byteArray0 = dERVisibleString0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test1 ( ) throws Throwable { DERVisibleString dERVisibleString0 = new DERVisibleString ( ( String ) null ) ; String string0 = dERVisibleString0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; DERVisibleString dERVisibleString0 = new DERVisibleString ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test3 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( false , ( int ) ( byte ) 0 , ( DEREncodable ) null ) ; DERVisibleString dERVisibleString0 = DERVisibleString . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; DERVisibleString dERVisibleString0 = new DERVisibleString ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test5 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 1 ) ; BERConstructedOctetString bERConstructedOctetString0 = ( BERConstructedOctetString ) ASN1OctetString . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , true ) ; DERVisibleString dERVisibleString0 = DERVisibleString . getInstance ( ( Object ) bERConstructedOctetString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test7 ( ) throws Throwable { DERVisibleString dERVisibleString0 = new DERVisibleString ( "wQpE { BnWP ) Soo7W" ) ; boolean boolean0 = dERVisibleString0 . asn1Equals ( ( DERObject ) dERVisibleString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; DERVisibleString dERVisibleString0 = new DERVisibleString ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { DERT61String dERT61String0 = new DERT61String ( "crash" ) ; String string0 = dERT61String0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { DERT61String dERT61String0 = new DERT61String ( "" ) ; boolean boolean0 = dERT61String0 . asn1Equals ( ( DERObject ) dERT61String0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { DERT61String dERT61String0 = new DERT61String ( "N" ) ; int int0 = dERT61String0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test4 ( ) throws Throwable { DERT61String dERT61String0 = DERT61String . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { DERT61String dERT61String0 = new DERT61String ( "v & _ * 5Kw24Q : 5BGPnW" ) ; DERT61String dERT61String1 = DERT61String . getInstance ( ( Object ) dERT61String0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test6 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 0 ) ; BERConstructedOctetString bERConstructedOctetString0 = ( BERConstructedOctetString ) ASN1OctetString . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , true ) ; DERT61String dERT61String0 = DERT61String . getInstance ( ( Object ) bERConstructedOctetString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; DERT61String dERT61String0 = new DERT61String ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test9 ( ) throws Throwable { DERT61String dERT61String0 = new DERT61String ( "N" ) ; byte [ ] byteArray0 = dERT61String0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test10 ( ) throws Throwable { DERT61String dERT61String0 = new DERT61String ( "N" ) ; boolean boolean0 = dERT61String0 . asn1Equals ( ( DERObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test0 ( ) throws Throwable { DERPrintableString dERPrintableString0 = new DERPrintableString ( "GqkA ) JW\" { 7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; DERPrintableString dERPrintableString0 = new DERPrintableString ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSequence bERSequence0 = new BERSequence ( dEREncodableVector0 ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DEREncodable ) bERSequence0 ) ; DERPrintableString dERPrintableString0 = DERPrintableString . getInstance ( ( Object ) bERConstructedOctetString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test4 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 1 , ( DEREncodable ) null ) ; DERPrintableString dERPrintableString0 = DERPrintableString . getInstance ( ( Object ) bERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSequence bERSequence0 = new BERSequence ( dEREncodableVector0 ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DEREncodable ) bERSequence0 ) ; DERPrintableString dERPrintableString0 = DERPrintableString . getInstance ( ( Object ) bERConstructedOctetString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test6 ( ) throws Throwable { DERPrintableString dERPrintableString0 = new DERPrintableString ( "unknown object in getInstanceFromTagge'" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test8 ( ) throws Throwable { DERPrintableString dERPrintableString0 = new DERPrintableString ( "GqkA ) JW\" { 7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; DERPrintableString dERPrintableString0 = new DERPrintableString ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test11 ( ) throws Throwable { boolean boolean0 = DERPrintableString . isPrintableString ( "GqkA ) JW\" { 7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPrintableString ( String str ) { for ( int i = str . length ( ) - 1 ; i > = 0 ; i - - ) { char ch = str . charAt ( i ) ; if ( ch > 0x007f ) { return false ; } if ( 'a' < = ch & & ch < = 'z' ) { continue ; } if ( 'A' < = ch & & ch < = 'Z' ) { continue ; } if ( '0' < = ch & & ch < = '9' ) { continue ; } switch ( ch ) { case ' ' : case '\'' : case ' ( ' : case ' ) ' : case ' + ' : case ' - ' : case ' . ' : case ' : ' : case ' = ' : case ' ? ' : case ' / ' : case ' , ' : continue ; } return false ; } return true ; }
void test13 ( ) throws Throwable { boolean boolean0 = DERPrintableString . isPrintableString ( "f : ] gOx\"GJ + 5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPrintableString ( String str ) { for ( int i = str . length ( ) - 1 ; i > = 0 ; i - - ) { char ch = str . charAt ( i ) ; if ( ch > 0x007f ) { return false ; } if ( 'a' < = ch & & ch < = 'z' ) { continue ; } if ( 'A' < = ch & & ch < = 'Z' ) { continue ; } if ( '0' < = ch & & ch < = '9' ) { continue ; } switch ( ch ) { case ' ' : case '\'' : case ' ( ' : case ' ) ' : case ' + ' : case ' - ' : case ' . ' : case ' : ' : case ' = ' : case ' ? ' : case ' / ' : case ' , ' : continue ; } return false ; } return true ; }
void test14 ( ) throws Throwable { boolean boolean0 = DERPrintableString . isPrintableString ( "rnV ( m#v" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPrintableString ( String str ) { for ( int i = str . length ( ) - 1 ; i > = 0 ; i - - ) { char ch = str . charAt ( i ) ; if ( ch > 0x007f ) { return false ; } if ( 'a' < = ch & & ch < = 'z' ) { continue ; } if ( 'A' < = ch & & ch < = 'Z' ) { continue ; } if ( '0' < = ch & & ch < = '9' ) { continue ; } switch ( ch ) { case ' ' : case '\'' : case ' ( ' : case ' ) ' : case ' + ' : case ' - ' : case ' . ' : case ' : ' : case ' = ' : case ' ? ' : case ' / ' : case ' , ' : continue ; } return false ; } return true ; }
void test15 ( ) throws Throwable { boolean boolean0 = DERPrintableString . isPrintableString ( "J`a68$t$42r ? t" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPrintableString ( String str ) { for ( int i = str . length ( ) - 1 ; i > = 0 ; i - - ) { char ch = str . charAt ( i ) ; if ( ch > 0x007f ) { return false ; } if ( 'a' < = ch & & ch < = 'z' ) { continue ; } if ( 'A' < = ch & & ch < = 'Z' ) { continue ; } if ( '0' < = ch & & ch < = '9' ) { continue ; } switch ( ch ) { case ' ' : case '\'' : case ' ( ' : case ' ) ' : case ' + ' : case ' - ' : case ' . ' : case ' : ' : case ' = ' : case ' ? ' : case ' / ' : case ' , ' : continue ; } return false ; } return true ; }
void test16 ( ) throws Throwable { boolean boolean0 = DERPrintableString . isPrintableString ( "37 : - %u" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPrintableString ( String str ) { for ( int i = str . length ( ) - 1 ; i > = 0 ; i - - ) { char ch = str . charAt ( i ) ; if ( ch > 0x007f ) { return false ; } if ( 'a' < = ch & & ch < = 'z' ) { continue ; } if ( 'A' < = ch & & ch < = 'Z' ) { continue ; } if ( '0' < = ch & & ch < = '9' ) { continue ; } switch ( ch ) { case ' ' : case '\'' : case ' ( ' : case ' ) ' : case ' + ' : case ' - ' : case ' . ' : case ' : ' : case ' = ' : case ' ? ' : case ' / ' : case ' , ' : continue ; } return false ; } return true ; }
void test17 ( ) throws Throwable { boolean boolean0 = DERPrintableString . isPrintableString ( "K & ( QX'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPrintableString ( String str ) { for ( int i = str . length ( ) - 1 ; i > = 0 ; i - - ) { char ch = str . charAt ( i ) ; if ( ch > 0x007f ) { return false ; } if ( 'a' < = ch & & ch < = 'z' ) { continue ; } if ( 'A' < = ch & & ch < = 'Z' ) { continue ; } if ( '0' < = ch & & ch < = '9' ) { continue ; } switch ( ch ) { case ' ' : case '\'' : case ' ( ' : case ' ) ' : case ' + ' : case ' - ' : case ' . ' : case ' : ' : case ' = ' : case ' ? ' : case ' / ' : case ' , ' : continue ; } return false ; } return true ; }
void test18 ( ) throws Throwable { DERPrintableString dERPrintableString0 = new DERPrintableString ( "gHSf0 , NOBiRwf . " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test19 ( ) throws Throwable { boolean boolean0 = DERPrintableString . isPrintableString ( "WM_ , : r%U - ` - wdj" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPrintableString ( String str ) { for ( int i = str . length ( ) - 1 ; i > = 0 ; i - - ) { char ch = str . charAt ( i ) ; if ( ch > 0x007f ) { return false ; } if ( 'a' < = ch & & ch < = 'z' ) { continue ; } if ( 'A' < = ch & & ch < = 'Z' ) { continue ; } if ( '0' < = ch & & ch < = '9' ) { continue ; } switch ( ch ) { case ' ' : case '\'' : case ' ( ' : case ' ) ' : case ' + ' : case ' - ' : case ' . ' : case ' : ' : case ' = ' : case ' ? ' : case ' / ' : case ' , ' : continue ; } return false ; } return true ; }
void test20 ( ) throws Throwable { boolean boolean0 = DERPrintableString . isPrintableString ( " > E / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPrintableString ( String str ) { for ( int i = str . length ( ) - 1 ; i > = 0 ; i - - ) { char ch = str . charAt ( i ) ; if ( ch > 0x007f ) { return false ; } if ( 'a' < = ch & & ch < = 'z' ) { continue ; } if ( 'A' < = ch & & ch < = 'Z' ) { continue ; } if ( '0' < = ch & & ch < = '9' ) { continue ; } switch ( ch ) { case ' ' : case '\'' : case ' ( ' : case ' ) ' : case ' + ' : case ' - ' : case ' . ' : case ' : ' : case ' = ' : case ' ? ' : case ' / ' : case ' , ' : continue ; } return false ; } return true ; }
void test21 ( ) throws Throwable { boolean boolean0 = DERPrintableString . isPrintableString ( "V = : v5v1B" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPrintableString ( String str ) { for ( int i = str . length ( ) - 1 ; i > = 0 ; i - - ) { char ch = str . charAt ( i ) ; if ( ch > 0x007f ) { return false ; } if ( 'a' < = ch & & ch < = 'z' ) { continue ; } if ( 'A' < = ch & & ch < = 'Z' ) { continue ; } if ( '0' < = ch & & ch < = '9' ) { continue ; } switch ( ch ) { case ' ' : case '\'' : case ' ( ' : case ' ) ' : case ' + ' : case ' - ' : case ' . ' : case ' : ' : case ' = ' : case ' ? ' : case ' / ' : case ' , ' : continue ; } return false ; } return true ; }
void test0 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; DEROutputStream dEROutputStream0 = new DEROutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; byte [ ] byteArray0 = new byte [ 136 ] ; dEROutputStream0 . writeEncoded ( 0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; DEROutputStream dEROutputStream0 = new DEROutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; byte [ ] byteArray0 = new byte [ 136 ] ; dEROutputStream0 . write ( byteArray0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; DEROutputStream dEROutputStream0 = new DEROutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; dEROutputStream0 . writeObject ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 0 ) ; BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; DEROutputStream dEROutputStream0 = new DEROutputStream ( ( OutputStream ) bufferedOutputStream0 ) ; DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; DERSequence dERSequence0 = new DERSequence ( dEREncodableVector0 ) ; ASN1SequenceParser aSN1SequenceParser0 = dERSequence0 . parser ( ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) aSN1SequenceParser0 ) ; dEROutputStream0 . writeObject ( ( Object ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; DEROctetString dEROctetString0 = new DEROctetString ( byteArray0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( true , 0 , ( DEREncodable ) dEROctetString0 ) ; DERObjectIdentifier dERObjectIdentifier0 = DERObjectIdentifier . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = DERObjectIdentifier . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 21 ] ; byteArray0 [ 7 ] = ( byte ) ( - 1 ) ; byteArray0 [ 8 ] = ( byte ) ( - 1 ) ; byteArray0 [ 9 ] = ( byte ) ( - 1 ) ; byteArray0 [ 10 ] = ( byte ) ( - 1 ) ; byteArray0 [ 11 ] = ( byte ) ( - 1 ) ; byteArray0 [ 12 ] = ( byte ) ( - 1 ) ; byteArray0 [ 13 ] = ( byte ) ( - 1 ) ; byteArray0 [ 14 ] = ( byte ) ( - 1 ) ; DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 11 ] ; byteArray0 [ 0 ] = ( byte ) 70 ; DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 21 ] ; byteArray0 [ 0 ] = ( byte ) ( - 1 ) ; DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 21 ] ; byteArray0 [ 7 ] = ( byte ) ( - 1 ) ; byteArray0 [ 8 ] = ( byte ) ( - 1 ) ; byteArray0 [ 9 ] = ( byte ) ( - 1 ) ; byteArray0 [ 10 ] = ( byte ) ( - 1 ) ; byteArray0 [ 11 ] = ( byte ) ( - 1 ) ; byteArray0 [ 12 ] = ( byte ) ( - 1 ) ; byteArray0 [ 13 ] = ( byte ) ( - 1 ) ; byteArray0 [ 14 ] = ( byte ) ( - 1 ) ; byteArray0 [ 15 ] = ( byte ) ( - 1 ) ; DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test10 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( "2 . 267616048 . 2097024 . 9856 . 43910082840225408 . 0 . 0 . 0 . 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test12 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; byteArray0 [ 1 ] = ( byte ) ( - 58 ) ; byteArray0 [ 2 ] = ( byte ) ( - 17 ) ; byteArray0 [ 3 ] = ( byte ) ( - 58 ) ; byteArray0 [ 4 ] = ( byte ) ( - 17 ) ; DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test13 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; byteArray0 [ 2 ] = ( byte ) ( - 62 ) ; byteArray0 [ 1 ] = ( byte ) ( - 62 ) ; byteArray0 [ 4 ] = ( byte ) ( - 62 ) ; byteArray0 [ 5 ] = ( byte ) ( - 62 ) ; byteArray0 [ 3 ] = ( byte ) ( - 62 ) ; DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test14 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( "2 . 267616048 . 2097024 . 1277824 . 562936426784384 . 0 . 0 . 0 . 0" ) ; byte [ ] byteArray0 = dERObjectIdentifier0 . getEncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test15 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test16 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 11 ] ; DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; BERSequenceGenerator bERSequenceGenerator0 = new BERSequenceGenerator ( ( OutputStream ) byteArrayOutputStream0 , 0 , true ) ; bERSequenceGenerator0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { DERIA5String dERIA5String0 = new DERIA5String ( "7PpA & . yeu { dy8 ] ) + + " ) ; int int0 = dERIA5String0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test1 ( ) throws Throwable { DERIA5String dERIA5String0 = new DERIA5String ( "7PpA & . yeu { dy8 ] ) + + " ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 506 , ( DEREncodable ) dERIA5String0 ) ; DERIA5String dERIA5String1 = DERIA5String . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test2 ( ) throws Throwable { DERIA5String dERIA5String0 = new DERIA5String ( "7PpA & . yeu { dy8 ] ) + + " ) ; byte [ ] byteArray0 = dERIA5String0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { DERIA5String dERIA5String0 = new DERIA5String ( "7PpA & . yeu { dy8 ] ) + + " ) ; String string0 = dERIA5String0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 1995 ) , ( DEREncodable ) null ) ; DERIA5String dERIA5String0 = DERIA5String . getInstance ( ( Object ) bERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; DEROctetString dEROctetString0 = new DEROctetString ( byteArray0 ) ; DERIA5String dERIA5String0 = DERIA5String . getInstance ( ( Object ) dEROctetString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test7 ( ) throws Throwable { DERIA5String dERIA5String0 = new DERIA5String ( "6` - ZWT6o6q~" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test9 ( ) throws Throwable { DERIA5String dERIA5String0 = new DERIA5String ( "7PpA & . yeu { dy8 ] ) + + " ) ; boolean boolean0 = dERIA5String0 . asn1Equals ( ( DERObject ) dERIA5String0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; DERApplicationSpecific dERApplicationSpecific0 = new DERApplicationSpecific ( ( - 1273 ) , byteArray0 ) ; int int0 = dERApplicationSpecific0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test1 ( ) throws Throwable { DERNull dERNull0 = new DERNull ( ) ; DERApplicationSpecific dERApplicationSpecific0 = new DERApplicationSpecific ( 11 , ( DEREncodable ) dERNull0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getApplicationTag ( ) { return tag ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; DERApplicationSpecific dERApplicationSpecific0 = new DERApplicationSpecific ( ( - 1273 ) , byteArray0 ) ; DERUnknownTag dERUnknownTag0 = ( DERUnknownTag ) dERApplicationSpecific0 . getObject ( ( - 1273 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getApplicationTag ( ) { return tag ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; DERApplicationSpecific dERApplicationSpecific0 = new DERApplicationSpecific ( ( - 1273 ) , byteArray0 ) ; DERObject dERObject0 = dERApplicationSpecific0 . getObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getApplicationTag ( ) { return tag ; }
void test5 ( ) throws Throwable { DERInteger dERInteger0 = new DERInteger ( 21 ) ; DERApplicationSpecific dERApplicationSpecific0 = new DERApplicationSpecific ( false , 21 , ( DEREncodable ) dERInteger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getApplicationTag ( ) { return tag ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; DERApplicationSpecific dERApplicationSpecific0 = new DERApplicationSpecific ( 46 , byteArray0 ) ; boolean boolean0 = dERApplicationSpecific0 . isConstructed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getApplicationTag ( ) { return tag ; }
void test7 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . getInstance ( true ) ; DERApplicationSpecific dERApplicationSpecific0 = new DERApplicationSpecific ( true , 16 , ( DEREncodable ) dERBoolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERObject getObject ( ) throws IOException { return new ASN1InputStream ( getContents ( ) ) . readObject ( ) ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; DERApplicationSpecific dERApplicationSpecific0 = new DERApplicationSpecific ( ( - 1389 ) , byteArray0 ) ; DERConstructedSequence dERConstructedSequence0 = new DERConstructedSequence ( ) ; boolean boolean0 = dERApplicationSpecific0 . asn1Equals ( ( DERObject ) dERConstructedSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getApplicationTag ( ) { return tag ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; DERApplicationSpecific dERApplicationSpecific0 = new DERApplicationSpecific ( ( - 1389 ) , byteArray0 ) ; DERApplicationSpecific dERApplicationSpecific1 = new DERApplicationSpecific ( false , ( int ) ( byte ) 0 , ( DEREncodable ) dERApplicationSpecific0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getApplicationTag ( ) { return tag ; }
void test10 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; DERApplicationSpecific dERApplicationSpecific0 = new DERApplicationSpecific ( ( - 1389 ) , byteArray0 ) ; byte [ ] byteArray1 = new byte [ 2 ] ; DERApplicationSpecific dERApplicationSpecific1 = new DERApplicationSpecific ( ( - 1389 ) , byteArray1 ) ; boolean boolean0 = dERApplicationSpecific1 . asn1Equals ( ( DERObject ) dERApplicationSpecific0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getApplicationTag ( ) { return tag ; }
void test0 ( ) throws Throwable { DERSequence dERSequence0 = new DERSequence ( ) ; DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; dEREncodableVector0 . add ( ( DEREncodable ) dERSequence0 ) ; DERSequence dERSequence1 = new DERSequence ( dEREncodableVector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { DERNull dERNull0 = new DERNull ( ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 638 ) , ( DEREncodable ) dERNull0 ) ; BERSequence bERSequence0 = ( BERSequence ) ASN1Sequence . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSequence bERSequence0 = new BERSequence ( dEREncodableVector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { ASN1Encodable [ ] aSN1EncodableArray0 = new ASN1Encodable [ 1 ] ; DERSequence dERSequence0 = new DERSequence ( aSN1EncodableArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; DERUniversalString dERUniversalString0 = new DERUniversalString ( byteArray0 ) ; String string0 = dERUniversalString0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; DERUniversalString dERUniversalString0 = new DERUniversalString ( byteArray0 ) ; int int0 = dERUniversalString0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; DERUniversalString dERUniversalString0 = new DERUniversalString ( byteArray0 ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 1 , ( DEREncodable ) dERUniversalString0 ) ; DERUniversalString dERUniversalString1 = DERUniversalString . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test3 ( ) throws Throwable { DERUniversalString dERUniversalString0 = DERUniversalString . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( byteArray0 ) ; DERUniversalString dERUniversalString0 = DERUniversalString . getInstance ( ( Object ) bERConstructedOctetString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; DERUniversalString dERUniversalString0 = new DERUniversalString ( byteArray0 ) ; boolean boolean0 = dERUniversalString0 . asn1Equals ( ( DERObject ) dERUniversalString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; DERUniversalString dERUniversalString0 = new DERUniversalString ( byteArray0 ) ; boolean boolean0 = dERUniversalString0 . asn1Equals ( ( DERObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean asn1Equals ( DERObject o ) { if ( ! ( o instanceof DERApplicationSpecific ) ) { return false ; } DERApplicationSpecific other = ( DERApplicationSpecific ) o ; if ( tag ! = other . tag ) { return false ; } if ( octets . length ! = other . octets . length ) { return false ; } for ( int i = 0 ; i < octets . length ; i + + ) { if ( octets [ i ] ! = other . octets [ i ] ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) bERConstructedSequence0 ) ; IetfAttrSyntax ietfAttrSyntax0 = new IetfAttrSyntax ( ( ASN1Sequence ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValueType ( ) { return valueChoice ; }
void test1 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) bERConstructedSequence0 ) ; IetfAttrSyntax ietfAttrSyntax0 = new IetfAttrSyntax ( ( ASN1Sequence ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValueType ( ) { return valueChoice ; }
void test5 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Name . INITIALS ; bERConstructedSequence0 . addObject ( ( DEREncodable ) dERObjectIdentifier0 ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) bERConstructedSequence0 ) ; IetfAttrSyntax ietfAttrSyntax0 = new IetfAttrSyntax ( ( ASN1Sequence ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValueType ( ) { return valueChoice ; }
void test6 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Name . INITIALS ; bERConstructedSequence0 . addObject ( ( DEREncodable ) dERObjectIdentifier0 ) ; bERConstructedSequence0 . addObject ( ( DEREncodable ) dERObjectIdentifier0 ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) bERConstructedSequence0 ) ; IetfAttrSyntax ietfAttrSyntax0 = new IetfAttrSyntax ( ( ASN1Sequence ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IetfAttrSyntax ( ASN1Sequence seq ) { int i = 0 ; if ( seq . getObjectAt ( 0 ) instanceof ASN1TaggedObject ) { policyAuthority = GeneralNames . getInstance ( ( ( ASN1TaggedObject ) seq . getObjectAt ( 0 ) ) , false ) ; i + + ; } else if ( seq . size ( ) = = 2 ) { / / VOMS fix policyAuthority = GeneralNames . getInstance ( seq . getObjectAt ( 0 ) ) ; i + + ; } if ( ! ( seq . getObjectAt ( i ) instanceof ASN1Sequence ) ) { throw new IllegalArgumentException ( "Non - IetfAttrSyntax encoding" ) ; } seq = ( ASN1Sequence ) seq . getObjectAt ( i ) ; for ( Enumeration e = seq . getObjects ( ) ; e . hasMoreElements ( ) ; ) { DERObject obj = ( DERObject ) e . nextElement ( ) ; int type ; if ( obj instanceof DERObjectIdentifier ) { type = VALUE_OID ; } else if ( obj instanceof DERUTF8String ) { type = VALUE_UTF8 ; } else if ( obj instanceof DEROctetString ) { type = VALUE_OCTETS ; } else { throw new IllegalArgumentException ( "Bad value type encoding IetfAttrSyntax" ) ; } if ( valueChoice < 0 ) { valueChoice = type ; } if ( type ! = valueChoice ) { throw new IllegalArgumentException ( "Mix of value types in IetfAttrSyntax" ) ; } values . addElement ( obj ) ; } }
void test7 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) bERConstructedSequence0 ) ; IetfAttrSyntax ietfAttrSyntax0 = new IetfAttrSyntax ( ( ASN1Sequence ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValueType ( ) { return valueChoice ; }
void test9 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Name . INITIALS ; bERConstructedSequence0 . addObject ( ( DEREncodable ) dERObjectIdentifier0 ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) bERConstructedSequence0 ) ; IetfAttrSyntax ietfAttrSyntax0 = new IetfAttrSyntax ( ( ASN1Sequence ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { Vector < GeneralSubtree > vector0 = new Vector < GeneralSubtree > ( ) ; NameConstraints nameConstraints0 = new NameConstraints ( vector0 , vector0 ) ; DERSequence dERSequence0 = ( DERSequence ) nameConstraints0 . getPermittedSubtrees ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test1 ( ) throws Throwable { BERSequence bERSequence0 = new BERSequence ( ) ; NameConstraints nameConstraints0 = new NameConstraints ( ( ASN1Sequence ) bERSequence0 ) ; ASN1Sequence aSN1Sequence0 = nameConstraints0 . getExcludedSubtrees ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASN1Sequence getExcludedSubtrees ( ) { return excluded ; }
void test2 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 336 ) ; DERSequence dERSequence0 = new DERSequence ( ( DEREncodable ) dERTaggedObject0 ) ; NameConstraints nameConstraints0 = new NameConstraints ( ( ASN1Sequence ) dERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NameConstraints ( ASN1Sequence seq ) { Enumeration e = seq . getObjects ( ) ; while ( e . hasMoreElements ( ) ) { ASN1TaggedObject o = ASN1TaggedObject . getInstance ( e . nextElement ( ) ) ; switch ( o . getTagNo ( ) ) { case 0 : permitted = ASN1Sequence . getInstance ( o , false ) ; break ; case 1 : excluded = ASN1Sequence . getInstance ( o , false ) ; break ; } } }
void test3 ( ) throws Throwable { ASN1Encodable [ ] aSN1EncodableArray0 = new ASN1Encodable [ 14 ] ; NameConstraints nameConstraints0 = new NameConstraints ( ( Vector ) null , ( Vector ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NameConstraints ( ASN1Sequence seq ) { Enumeration e = seq . getObjects ( ) ; while ( e . hasMoreElements ( ) ) { ASN1TaggedObject o = ASN1TaggedObject . getInstance ( e . nextElement ( ) ) ; switch ( o . getTagNo ( ) ) { case 0 : permitted = ASN1Sequence . getInstance ( o , false ) ; break ; case 1 : excluded = ASN1Sequence . getInstance ( o , false ) ; break ; } } }
void test4 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( true , 1 , ( DEREncodable ) null ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) dERTaggedObject0 ) ; NameConstraints nameConstraints0 = new NameConstraints ( ( ASN1Sequence ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NameConstraints ( ASN1Sequence seq ) { Enumeration e = seq . getObjects ( ) ; while ( e . hasMoreElements ( ) ) { ASN1TaggedObject o = ASN1TaggedObject . getInstance ( e . nextElement ( ) ) ; switch ( o . getTagNo ( ) ) { case 0 : permitted = ASN1Sequence . getInstance ( o , false ) ; break ; case 1 : excluded = ASN1Sequence . getInstance ( o , false ) ; break ; } } }
void test6 ( ) throws Throwable { Vector < GeneralSubtree > vector0 = new Vector < GeneralSubtree > ( ) ; NameConstraints nameConstraints0 = new NameConstraints ( vector0 , vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { DERSequence dERSequence0 = new DERSequence ( ) ; PolicyInformation policyInformation0 = new PolicyInformation ( ( DERObjectIdentifier ) null , ( ASN1Sequence ) dERSequence0 ) ; DERSequence dERSequence1 = ( DERSequence ) policyInformation0 . toASN1Object ( ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( true , 0 , ( DEREncodable ) dERSequence1 ) ; DERSequence dERSequence2 = ( DERSequence ) ASN1Sequence . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , true ) ; PolicyInformation policyInformation1 = new PolicyInformation ( ( ASN1Sequence ) dERSequence2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test1 ( ) throws Throwable { PolicyInformation policyInformation0 = new PolicyInformation ( ( DERObjectIdentifier ) null ) ; DERObjectIdentifier dERObjectIdentifier0 = policyInformation0 . getPolicyIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERObjectIdentifier getPolicyIdentifier ( ) { return policyIdentifier ; }
void test2 ( ) throws Throwable { DERSequence dERSequence0 = new DERSequence ( ( DEREncodable ) null ) ; PolicyInformation policyInformation0 = new PolicyInformation ( ( ASN1Sequence ) dERSequence0 ) ; ASN1Sequence aSN1Sequence0 = policyInformation0 . getPolicyQualifiers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASN1Sequence getPolicyQualifiers ( ) { return policyQualifiers ; }
void test5 ( ) throws Throwable { PolicyInformation policyInformation0 = PolicyInformation . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test6 ( ) throws Throwable { DERSequence dERSequence0 = new DERSequence ( ( DEREncodable ) null ) ; PolicyInformation policyInformation0 = new PolicyInformation ( ( ASN1Sequence ) dERSequence0 ) ; PolicyInformation policyInformation1 = PolicyInformation . getInstance ( ( Object ) policyInformation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test8 ( ) throws Throwable { DERSequence dERSequence0 = new DERSequence ( ( DEREncodable ) null ) ; PolicyInformation policyInformation0 = new PolicyInformation ( ( ASN1Sequence ) dERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { DERConstructedSequence dERConstructedSequence0 = new DERConstructedSequence ( ) ; PolicyMappings policyMappings0 = new PolicyMappings ( ( ASN1Sequence ) dERConstructedSequence0 ) ; DERConstructedSequence dERConstructedSequence1 = ( DERConstructedSequence ) policyMappings0 . toASN1Object ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERObject toASN1Object ( ) { return attr . toASN1Object ( ) ; }
void test1 ( ) throws Throwable { Hashtable < String , String > hashtable0 = new Hashtable < String , String > ( ) ; PolicyMappings policyMappings0 = new PolicyMappings ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PolicyMappings ( ASN1Sequence seq ) { this . seq = seq ; }
void test0 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; DERSequence dERSequence0 = new DERSequence ( dEREncodableVector0 ) ; NoticeReference noticeReference0 = new NoticeReference ( " = ? kti | ~" , ( ASN1Sequence ) dERSequence0 ) ; DERSequence dERSequence1 = ( DERSequence ) noticeReference0 . getNoticeNumbers ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASN1Sequence getNoticeNumbers ( ) { return noticeNumbers ; }
void test1 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; NoticeReference noticeReference0 = new NoticeReference ( 0 , "" , ( ASN1Sequence ) bERConstructedSequence0 ) ; byte [ ] byteArray0 = noticeReference0 . getEncoded ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test2 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; DERSequence dERSequence0 = new DERSequence ( dEREncodableVector0 ) ; NoticeReference noticeReference0 = new NoticeReference ( " = ? kti | ~" , ( ASN1Sequence ) dERSequence0 ) ; DisplayText displayText0 = noticeReference0 . getOrganization ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { Vector < NoticeReference > vector0 = new Vector < NoticeReference > ( ) ; DERSequence dERSequence0 = new DERSequence ( ) ; NoticeReference noticeReference0 = new NoticeReference ( " { `Rli`SF`5 ; C`D [ w1" , ( ASN1Sequence ) dERSequence0 ) ; vector0 . add ( noticeReference0 ) ; NoticeReference noticeReference1 = new NoticeReference ( " { `Rli`SF`5 ; C`D [ w1" , ( Vector ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test4 ( ) throws Throwable { Vector < Integer > vector0 = new Vector < Integer > ( ) ; Integer integer0 = new Integer ( 215 ) ; vector0 . add ( integer0 ) ; NoticeReference noticeReference0 = new NoticeReference ( "2'S < sM_ < + ^##TN ) " , ( Vector ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NoticeReference ( String orgName , Vector numbers ) { organization = new DisplayText ( orgName ) ; Object o = numbers . elementAt ( 0 ) ; ASN1EncodableVector av = new ASN1EncodableVector ( ) ; if ( o instanceof Integer ) { Enumeration it = numbers . elements ( ) ; while ( it . hasMoreElements ( ) ) { Integer nm = ( Integer ) it . nextElement ( ) ; DERInteger di = new DERInteger ( nm . intValue ( ) ) ; av . add ( di ) ; } } noticeNumbers = new DERSequence ( av ) ; }
void test7 ( ) throws Throwable { NoticeReference noticeReference0 = new NoticeReference ( "exception converting octets " , ( ASN1Sequence ) null ) ; NoticeReference noticeReference1 = NoticeReference . getInstance ( ( Object ) noticeReference0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test1 ( ) throws Throwable { GeneralNames generalNames0 = new GeneralNames ( ( GeneralName ) null ) ; BigInteger bigInteger0 = BigInteger . ZERO ; AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier ( generalNames0 , bigInteger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test2 ( ) throws Throwable { AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo ( algorithmIdentifier0 , ( DEREncodable ) null ) ; AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier ( subjectPublicKeyInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; GeneralNames generalNames0 = new GeneralNames ( ( GeneralName ) null ) ; BigInteger bigInteger0 = BigInteger . ONE ; AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier ( byteArray0 , generalNames0 , bigInteger0 ) ; String string0 = authorityKeyIdentifier0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier ( byteArray0 ) ; byte [ ] byteArray1 = authorityKeyIdentifier0 . getKeyIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getKeyIdentifier ( ) { return keyidentifier ; }
void test5 ( ) throws Throwable { DERSequence dERSequence0 = new DERSequence ( ) ; AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier ( ( ASN1Sequence ) dERSequence0 ) ; GeneralNames generalNames0 = authorityKeyIdentifier0 . getAuthorityCertIssuer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeneralNames getAuthorityCertIssuer ( ) { return certissuer ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 18 ] ; AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier ( byteArray0 ) ; AuthorityKeyIdentifier authorityKeyIdentifier1 = AuthorityKeyIdentifier . getInstance ( ( Object ) authorityKeyIdentifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test10 ( ) throws Throwable { GeneralNames generalNames0 = new GeneralNames ( ( GeneralName ) null ) ; BigInteger bigInteger0 = BigInteger . ZERO ; AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier ( generalNames0 , bigInteger0 ) ; byte [ ] byteArray0 = authorityKeyIdentifier0 . getKeyIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getKeyIdentifier ( ) { return keyidentifier ; }
void test11 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier ( byteArray0 ) ; BigInteger bigInteger0 = authorityKeyIdentifier0 . getAuthorityCertSerialNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigInteger getAuthorityCertSerialNumber ( ) { if ( certserno ! = null ) { return certserno . getValue ( ) ; } return null ; }
void test12 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; GeneralNames generalNames0 = new GeneralNames ( ( GeneralName ) null ) ; BigInteger bigInteger0 = BigInteger . ONE ; AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier ( byteArray0 , generalNames0 , bigInteger0 ) ; BigInteger bigInteger1 = authorityKeyIdentifier0 . getAuthorityCertSerialNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long longValue ( ) { return floor ( ) . longValue ( ) ; }
void test0 ( ) throws Throwable { GeneralNames generalNames0 = new GeneralNames ( ( GeneralName ) null ) ; byte [ ] byteArray0 = new byte [ 8 ] ; DERInteger dERInteger0 = new DERInteger ( byteArray0 ) ; IssuerSerial issuerSerial0 = new IssuerSerial ( generalNames0 , dERInteger0 ) ; DERBitString dERBitString0 = issuerSerial0 . getIssuerUID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERBitString getIssuerUID ( ) { return issuerUID ; }
void test1 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; GeneralNames generalNames0 = new GeneralNames ( ( ASN1Sequence ) bERConstructedSequence0 ) ; DERInteger dERInteger0 = new DERInteger ( ( - 1992 ) ) ; IssuerSerial issuerSerial0 = new IssuerSerial ( generalNames0 , dERInteger0 ) ; DERInteger dERInteger1 = issuerSerial0 . getSerial ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { ASN1Encodable [ ] aSN1EncodableArray0 = new ASN1Encodable [ 3 ] ; DERSequence dERSequence0 = new DERSequence ( aSN1EncodableArray0 ) ; IssuerSerial issuerSerial0 = new IssuerSerial ( ( ASN1Sequence ) dERSequence0 ) ; GeneralNames generalNames0 = issuerSerial0 . getIssuer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Principal [ ] getIssuer ( ) { if ( holder . getBaseCertificateID ( ) ! = null ) { return getPrincipals ( holder . getBaseCertificateID ( ) . getIssuer ( ) ) ; } return null ; }
void test3 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; GeneralNames generalNames0 = new GeneralNames ( ( ASN1Sequence ) bERConstructedSequence0 ) ; DERInteger dERInteger0 = new DERInteger ( 1876 ) ; IssuerSerial issuerSerial0 = new IssuerSerial ( generalNames0 , dERInteger0 ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( true , 1876 , ( DEREncodable ) issuerSerial0 ) ; IssuerSerial issuerSerial1 = IssuerSerial . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test4 ( ) throws Throwable { IssuerSerial issuerSerial0 = IssuerSerial . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { GeneralNames generalNames0 = new GeneralNames ( ( GeneralName ) null ) ; byte [ ] byteArray0 = new byte [ 8 ] ; DERInteger dERInteger0 = new DERInteger ( byteArray0 ) ; IssuerSerial issuerSerial0 = new IssuerSerial ( generalNames0 , dERInteger0 ) ; IssuerSerial issuerSerial1 = IssuerSerial . getInstance ( ( Object ) issuerSerial0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test8 ( ) throws Throwable { ASN1Encodable [ ] aSN1EncodableArray0 = new ASN1Encodable [ 3 ] ; DERSequence dERSequence0 = new DERSequence ( aSN1EncodableArray0 ) ; IssuerSerial issuerSerial0 = new IssuerSerial ( ( ASN1Sequence ) dERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test0 ( ) throws Throwable { SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo ( ( AlgorithmIdentifier ) null , ( DEREncodable ) null ) ; AlgorithmIdentifier algorithmIdentifier0 = subjectPublicKeyInfo0 . getAlgorithmId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AlgorithmIdentifier getAlgorithmId ( ) { return algId ; }
void test1 ( ) throws Throwable { AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null ) ; byte [ ] byteArray0 = new byte [ 7 ] ; SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo ( algorithmIdentifier0 , byteArray0 ) ; DERBitString dERBitString0 = subjectPublicKeyInfo0 . getPublicKeyData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int intValue ( ) { int value = 0 ; for ( int i = 0 ; i ! = data . length & & i ! = 4 ; i + + ) { value | = ( data [ i ] & 0xff ) < < ( 8 * i ) ; } return value ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo ( ( AlgorithmIdentifier ) null , byteArray0 ) ; DERSequence dERSequence0 = ( DERSequence ) subjectPublicKeyInfo0 . toASN1Object ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo ( ( AlgorithmIdentifier ) null , byteArray0 ) ; DERObject dERObject0 = subjectPublicKeyInfo0 . getPublicKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getPublicKey ( String reason ) throws CryptoManagerException ; byte [ ] getEncryptedPrivateKey ( String reason ) throws CryptoManagerException ; boolean verifyPublicKey ( byte [ ] encoded ) ; void recoverKeys ( byte [ ] public_key , byte [ ] encrypted_private_key ) throws CryptoManagerException ; void resetKeys ( String reason ) throws CryptoManagerException ; String exportKeys ( ) throws CryptoManagerException ; int getDefaultPasswordHandlerType ( ) ; void setDefaultPasswordHandlerType ( int new_type ) throws CryptoManagerException ; / * * * * @param str * @return true if an Azureus restart is required * @throws CryptoManagerException * / boolean importKeys ( String str ) throws CryptoManagerException ; }
void test4 ( ) throws Throwable { AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( ( - 1685 ) , ( DEREncodable ) algorithmIdentifier0 ) ; SubjectPublicKeyInfo subjectPublicKeyInfo0 = SubjectPublicKeyInfo . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo ( ( AlgorithmIdentifier ) null , byteArray0 ) ; SubjectPublicKeyInfo subjectPublicKeyInfo1 = SubjectPublicKeyInfo . getInstance ( ( Object ) subjectPublicKeyInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test0 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = X509Name . CN ; GeneralName generalName0 = new GeneralName ( 377 , ( ASN1Encodable ) dERObjectIdentifier0 ) ; AccessDescription accessDescription0 = new AccessDescription ( dERObjectIdentifier0 , generalName0 ) ; GeneralName generalName1 = accessDescription0 . getAccessLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = AccessDescription . id_ad_caIssuers ; GeneralName generalName0 = new GeneralName ( 36 , ( ASN1Encodable ) dERObjectIdentifier0 ) ; AccessDescription accessDescription0 = new AccessDescription ( dERObjectIdentifier0 , generalName0 ) ; DERSequence dERSequence0 = ( DERSequence ) accessDescription0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = AccessDescription . id_ad_caIssuers ; GeneralName generalName0 = new GeneralName ( 36 , ( ASN1Encodable ) dERObjectIdentifier0 ) ; AccessDescription accessDescription0 = new AccessDescription ( dERObjectIdentifier0 , generalName0 ) ; String string0 = accessDescription0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = X509Name . CN ; GeneralName generalName0 = new GeneralName ( 377 , ( ASN1Encodable ) dERObjectIdentifier0 ) ; AccessDescription accessDescription0 = new AccessDescription ( dERObjectIdentifier0 , generalName0 ) ; DERObjectIdentifier dERObjectIdentifier1 = accessDescription0 . getAccessMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test5 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = X509Name . E ; GeneralName generalName0 = new GeneralName ( ( DERObject ) dERObjectIdentifier0 , 0 ) ; AccessDescription accessDescription0 = new AccessDescription ( dERObjectIdentifier0 , generalName0 ) ; AccessDescription accessDescription1 = AccessDescription . getInstance ( ( Object ) accessDescription0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test7 ( ) throws Throwable { ASN1Encodable [ ] aSN1EncodableArray0 = new ASN1Encodable [ 2 ] ; DERSequence dERSequence0 = new DERSequence ( aSN1EncodableArray0 ) ; AccessDescription accessDescription0 = new AccessDescription ( ( ASN1Sequence ) dERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AccessDescription ( ASN1Sequence seq ) { if ( seq . size ( ) ! = 2 ) { throw new IllegalArgumentException ( "wrong number of elements in inner sequence" ) ; } accessMethod = DERObjectIdentifier . getInstance ( seq . getObjectAt ( 0 ) ) ; accessLocation = GeneralName . getInstance ( seq . getObjectAt ( 1 ) ) ; }
void test1 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( "1 . 2 . 840 . 113549 . 1 . 9 . 16 . 2 . 11" ) ; X509DefaultEntryConverter x509DefaultEntryConverter0 = new X509DefaultEntryConverter ( ) ; DERUTF8String dERUTF8String0 = ( DERUTF8String ) x509DefaultEntryConverter0 . getConvertedValue ( dERObjectIdentifier0 , "1 . 2 . 840 . 113549 . 1 . 9 . 16 . 2 . 11" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { X509DefaultEntryConverter x509DefaultEntryConverter0 = new X509DefaultEntryConverter ( ) ; DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( "2 . 5 . 4 . 5" ) ; DERPrintableString dERPrintableString0 = ( DERPrintableString ) x509DefaultEntryConverter0 . getConvertedValue ( dERObjectIdentifier0 , "2 . 5 . 4 . 5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test4 ( ) throws Throwable { X509DefaultEntryConverter x509DefaultEntryConverter0 = new X509DefaultEntryConverter ( ) ; DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier ( "2 . 5 . 4 . 46" ) ; DERPrintableString dERPrintableString0 = ( DERPrintableString ) x509DefaultEntryConverter0 . getConvertedValue ( dERObjectIdentifier0 , "2 . 5 . 4 . 46" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test0 ( ) throws Throwable { DistributionPointName distributionPointName0 = new DistributionPointName ( 0 , ( DEREncodable ) null ) ; distributionPointName0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test1 ( ) throws Throwable { DERInteger dERInteger0 = new DERInteger ( ( - 2038 ) ) ; DistributionPointName distributionPointName0 = new DistributionPointName ( 25 , ( ASN1Encodable ) dERInteger0 ) ; int int0 = distributionPointName0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; DERT61String dERT61String0 = new DERT61String ( byteArray0 ) ; DistributionPointName distributionPointName0 = new DistributionPointName ( 113 , ( ASN1Encodable ) dERT61String0 ) ; distributionPointName0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 1620 ) ) ; DistributionPointName distributionPointName0 = new DistributionPointName ( ( ASN1TaggedObject ) bERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { DistributionPointName distributionPointName0 = DistributionPointName . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { DERIA5String dERIA5String0 = new DERIA5String ( "f9bCrAp1E " , false ) ; DistributionPointName distributionPointName0 = new DistributionPointName ( 931 , ( DEREncodable ) dERIA5String0 ) ; DistributionPointName distributionPointName1 = DistributionPointName . getInstance ( ( Object ) distributionPointName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test0 ( ) throws Throwable { KeyUsage keyUsage0 = new KeyUsage ( ( int ) ( byte ) 0 ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DEREncodable ) keyUsage0 ) ; X509Extension x509Extension0 = new X509Extension ( true , ( ASN1OctetString ) bERConstructedOctetString0 ) ; KeyUsage keyUsage1 = ( KeyUsage ) KeyUsage . getInstance ( ( Object ) x509Extension0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; DERBitString dERBitString0 = new DERBitString ( byteArray0 , ( int ) ( byte ) 0 ) ; KeyUsage keyUsage0 = new KeyUsage ( dERBitString0 ) ; KeyUsage keyUsage1 = ( KeyUsage ) KeyUsage . getInstance ( ( Object ) keyUsage0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test3 ( ) throws Throwable { KeyUsage keyUsage0 = new KeyUsage ( ( - 600 ) ) ; String string0 = keyUsage0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { KeyUsage keyUsage0 = new KeyUsage ( ( int ) ( byte ) 0 ) ; String string0 = keyUsage0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { X509ExtensionsGenerator x509ExtensionsGenerator0 = new X509ExtensionsGenerator ( ) ; X509Extensions x509Extensions0 = x509ExtensionsGenerator0 . generate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void generate ( IndentWriter writer ) { writer . println ( "ImageLoader for " + skinProperties ) ; writer . indent ( ) ; long [ ] sizeCouldBeFree = { 0 } ; long [ ] totalSizeEstimate = { 0 } ; try { writer . indent ( ) ; try { writer . println ( "Non - Disposable : " ) ; writer . indent ( ) ; for ( String key : _mapImages . keySet ( ) ) { ImageLoaderRefInfo info = _mapImages . get ( key ) ; if ( ! info . isNonDisposable ( ) ) { continue ; } writeEvidenceLine ( writer , key , info , totalSizeEstimate , sizeCouldBeFree ) ; } writer . exdent ( ) ; writer . println ( "Disposable : " ) ; writer . indent ( ) ; for ( String key : _mapImages . keySet ( ) ) { ImageLoaderRefInfo info = _mapImages . get ( key ) ; if ( info . isNonDisposable ( ) ) { continue ; } writeEvidenceLine ( writer , key , info , totalSizeEstimate , sizeCouldBeFree ) ; } writer . exdent ( ) ; } finally { writer . exdent ( ) ; } if ( totalSizeEstimate [ 0 ] > 0 ) { writer . println ( ( totalSizeEstimate [ 0 ] / 1024 ) + "k estimated used for images" ) ; } if ( sizeCouldBeFree [ 0 ] > 0 ) { writer . println ( ( sizeCouldBeFree [ 0 ] / 1024 ) + "k could be freed" ) ; } } finally { writer . exdent ( ) ; } }
void test1 ( ) throws Throwable { X509ExtensionsGenerator x509ExtensionsGenerator0 = new X509ExtensionsGenerator ( ) ; x509ExtensionsGenerator0 . reset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test2 ( ) throws Throwable { X509ExtensionsGenerator x509ExtensionsGenerator0 = new X509ExtensionsGenerator ( ) ; boolean boolean0 = x509ExtensionsGenerator0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test0 ( ) throws Throwable { NoticeReference noticeReference0 = new NoticeReference ( "" , ( ASN1Sequence ) null ) ; UserNotice userNotice0 = new UserNotice ( noticeReference0 , "" ) ; NoticeReference noticeReference1 = userNotice0 . getNoticeRef ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NoticeReference getNoticeRef ( ) { return noticeRef ; }
void test1 ( ) throws Throwable { NoticeReference noticeReference0 = new NoticeReference ( "" , ( ASN1Sequence ) null ) ; UserNotice userNotice0 = new UserNotice ( noticeReference0 , "" ) ; DisplayText displayText0 = userNotice0 . getExplicitText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { NoticeReference noticeReference0 = new NoticeReference ( ( int ) ( byte ) 0 , "" , ( ASN1Sequence ) null ) ; DisplayText displayText0 = new DisplayText ( "D - x" ) ; UserNotice userNotice0 = new UserNotice ( noticeReference0 , displayText0 ) ; DERSequence dERSequence0 = ( DERSequence ) userNotice0 . getDERObject ( ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( ( int ) ( byte ) 0 , ( DEREncodable ) dERSequence0 ) ; DERSequence dERSequence1 = ( DERSequence ) ASN1Sequence . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , true ) ; UserNotice userNotice1 = new UserNotice ( ( ASN1Sequence ) dERSequence1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test6 ( ) throws Throwable { UserNotice userNotice0 = new UserNotice ( ( NoticeReference ) null , "pZOU`$l ? SQ = Bk } Y^bYG" ) ; DERSequence dERSequence0 = ( DERSequence ) userNotice0 . toASN1Object ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test7 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; NoticeReference noticeReference0 = new NoticeReference ( "illegal object in getInstance : " , ( ASN1Sequence ) bERConstructedSequence0 ) ; UserNotice userNotice0 = new UserNotice ( noticeReference0 , ( DisplayText ) null ) ; DERSequence dERSequence0 = ( DERSequence ) userNotice0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test0 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( true , 7 , ( DEREncodable ) null ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( true , 7 , ( DEREncodable ) bERTaggedObject0 ) ; GeneralName generalName0 = GeneralName . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTagNo ( ) { return tagNo ; }
void test1 ( ) throws Throwable { GeneralName generalName0 = new GeneralName ( 2 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { GeneralName generalName0 = new GeneralName ( ( X509Name ) null ) ; GeneralName generalName1 = GeneralName . getInstance ( ( Object ) generalName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTagNo ( ) { return tagNo ; }
void test3 ( ) throws Throwable { GeneralName generalName0 = new GeneralName ( 1 , "O > N fC7j #T , 8Rg3T7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test5 ( ) throws Throwable { GeneralName generalName0 = new GeneralName ( 6 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test9 ( ) throws Throwable { GeneralName generalName0 = new GeneralName ( 7 , "2 . 5 . 4 . 16" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test10 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 4 , ( DEREncodable ) null ) ; GeneralName generalName0 = GeneralName . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test14 ( ) throws Throwable { GeneralName generalName0 = new GeneralName ( 2 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test16 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( true , 6 , ( DEREncodable ) null ) ; GeneralName generalName0 = GeneralName . getInstance ( ( Object ) dERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test18 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 4 ) ; GeneralName generalName0 = new GeneralName ( ( - 1548 ) , ( ASN1Encodable ) bERTaggedObject0 ) ; String string0 = generalName0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test19 ( ) throws Throwable { GeneralName generalName0 = new GeneralName ( 2 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test20 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSet bERSet0 = new BERSet ( dEREncodableVector0 ) ; GeneralName generalName0 = new GeneralName ( 3 , ( ASN1Encodable ) bERSet0 ) ; String string0 = generalName0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test21 ( ) throws Throwable { Hashtable < Object , Object > hashtable0 = X509Name . RFC2253Symbols ; X509Name x509Name0 = new X509Name ( hashtable0 ) ; GeneralName generalName0 = new GeneralName ( x509Name0 ) ; String string0 = generalName0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test22 ( ) throws Throwable { GeneralName generalName0 = new GeneralName ( ( X509Name ) null ) ; generalName0 . getEncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTagNo ( ) { return tagNo ; }
void test0 ( ) throws Throwable { Target target0 = new Target ( 0 , ( GeneralName ) null ) ; GeneralName generalName0 = target0 . getTargetName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeneralName getTargetName ( ) { return targName ; }
void test1 ( ) throws Throwable { Vector < Target > vector0 = new Vector < Target > ( ) ; Hashtable < Object , Object > hashtable0 = X509Name . RFC2253Symbols ; X509Name x509Name0 = new X509Name ( ( Vector ) vector0 , ( Hashtable ) hashtable0 ) ; GeneralName generalName0 = new GeneralName ( x509Name0 ) ; Target target0 = new Target ( 0 , generalName0 ) ; GeneralName generalName1 = target0 . getTargetGroup ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeneralName getTargetGroup ( ) { return targGroup ; }
void test3 ( ) throws Throwable { Target target0 = new Target ( 0 , ( GeneralName ) null ) ; Target target1 = Target . getInstance ( ( Object ) target0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test6 ( ) throws Throwable { Target target0 = new Target ( 0 , ( GeneralName ) null ) ; DERTaggedObject dERTaggedObject0 = ( DERTaggedObject ) target0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTagNo ( ) { return tagNo ; }
void test7 ( ) throws Throwable { Vector < Target > vector0 = new Vector < Target > ( ) ; Hashtable < Object , Object > hashtable0 = X509Name . RFC2253Symbols ; X509Name x509Name0 = new X509Name ( ( Vector ) vector0 , ( Hashtable ) hashtable0 ) ; GeneralName generalName0 = new GeneralName ( x509Name0 ) ; Target target0 = new Target ( 0 , generalName0 ) ; DERTaggedObject dERTaggedObject0 = ( DERTaggedObject ) target0 . toASN1Object ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { X509DefaultEntryConverter x509DefaultEntryConverter0 = new X509DefaultEntryConverter ( ) ; boolean boolean0 = x509DefaultEntryConverter0 . canBePrintable ( "P9 [ xld2V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canBePrintable ( String str ) { return DERPrintableString . isPrintableString ( str ) ; }
void test0 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; CRLDistPoint cRLDistPoint0 = new CRLDistPoint ( ( ASN1Sequence ) bERConstructedSequence0 ) ; int int0 = cRLDistPoint0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test1 ( ) throws Throwable { DERNull dERNull0 = new DERNull ( ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 1674 ) , ( DEREncodable ) dERNull0 ) ; CRLDistPoint cRLDistPoint0 = CRLDistPoint . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test2 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; CRLDistPoint cRLDistPoint0 = new CRLDistPoint ( ( ASN1Sequence ) bERConstructedSequence0 ) ; CRLDistPoint cRLDistPoint1 = CRLDistPoint . getInstance ( ( Object ) cRLDistPoint0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test3 ( ) throws Throwable { CRLDistPoint cRLDistPoint0 = CRLDistPoint . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { DistributionPoint [ ] distributionPointArray0 = new DistributionPoint [ 1 ] ; CRLDistPoint cRLDistPoint0 = new CRLDistPoint ( distributionPointArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { Hashtable < Object , X509Extension > hashtable0 = new Hashtable < Object , X509Extension > ( ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Extensions . DeltaCRLIndicator ; X509Extensions x509Extensions0 = new X509Extensions ( hashtable0 ) ; X509Extension x509Extension0 = x509Extensions0 . getExtension ( dERObjectIdentifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" X509Extension getExtension ( DERObjectIdentifier oid ) { return ( X509Extension ) extensions . get ( oid ) ; }
void test1 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 1584 ) ; X509Extensions x509Extensions0 = X509Extensions . getInstance ( ( Object ) dERTaggedObject0 ) ; Enumeration < Object > enumeration0 = x509Extensions0 . oids ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Enumeration oids ( ) { return ordering . elements ( ) ; }
void test2 ( ) throws Throwable { X509Extensions x509Extensions0 = X509Extensions . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test3 ( ) throws Throwable { Vector < String > vector0 = new Vector < String > ( ) ; X509Extensions x509Extensions0 = new X509Extensions ( vector0 , vector0 ) ; X509Extensions x509Extensions1 = X509Extensions . getInstance ( ( Object ) x509Extensions0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test6 ( ) throws Throwable { Hashtable < Object , X509Extension > hashtable0 = new Hashtable < Object , X509Extension > ( ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Extensions . DeltaCRLIndicator ; byte [ ] byteArray0 = new byte [ 12 ] ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( byteArray0 ) ; X509Extension x509Extension0 = new X509Extension ( true , ( ASN1OctetString ) bERConstructedOctetString0 ) ; hashtable0 . put ( ( Object ) dERObjectIdentifier0 , x509Extension0 ) ; X509Extensions x509Extensions0 = new X509Extensions ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test8 ( ) throws Throwable { Vector < X509Extension > vector0 = new Vector < X509Extension > ( ) ; Hashtable < ASN1Sequence , DERObjectIdentifier > hashtable0 = new Hashtable < ASN1Sequence , DERObjectIdentifier > ( ) ; X509Extensions x509Extensions0 = new X509Extensions ( ( Vector ) vector0 , ( Hashtable ) hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" X509Extensions ( ASN1Sequence seq ) { Enumeration e = seq . getObjects ( ) ; while ( e . hasMoreElements ( ) ) { ASN1Sequence s = ASN1Sequence . getInstance ( e . nextElement ( ) ) ; if ( s . size ( ) = = 3 ) { extensions . put ( s . getObjectAt ( 0 ) , new X509Extension ( DERBoolean . getInstance ( s . getObjectAt ( 1 ) ) , ASN1OctetString . getInstance ( s . getObjectAt ( 2 ) ) ) ) ; } else if ( s . size ( ) = = 2 ) { extensions . put ( s . getObjectAt ( 0 ) , new X509Extension ( false , ASN1OctetString . getInstance ( s . getObjectAt ( 1 ) ) ) ) ; } else { throw new IllegalArgumentException ( "Bad sequence size : " + s . size ( ) ) ; } ordering . addElement ( s . getObjectAt ( 0 ) ) ; } }
void test10 ( ) throws Throwable { Hashtable < Object , X509Extension > hashtable0 = new Hashtable < Object , X509Extension > ( ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Extensions . DeltaCRLIndicator ; byte [ ] byteArray0 = new byte [ 12 ] ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( byteArray0 ) ; X509Extension x509Extension0 = new X509Extension ( true , ( ASN1OctetString ) bERConstructedOctetString0 ) ; hashtable0 . put ( ( Object ) dERObjectIdentifier0 , x509Extension0 ) ; X509Extensions x509Extensions0 = new X509Extensions ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equivalent ( X509Extensions other ) { if ( extensions . size ( ) ! = other . extensions . size ( ) ) { return false ; } Enumeration e1 = extensions . keys ( ) ; while ( e1 . hasMoreElements ( ) ) { Object key = e1 . nextElement ( ) ; if ( ! extensions . get ( key ) . equals ( other . extensions . get ( key ) ) ) { return false ; } } return true ; }
void test11 ( ) throws Throwable { Hashtable < Object , X509Extension > hashtable0 = new Hashtable < Object , X509Extension > ( ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Extensions . DeltaCRLIndicator ; byte [ ] byteArray0 = new byte [ 12 ] ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( byteArray0 ) ; X509Extension x509Extension0 = new X509Extension ( true , ( ASN1OctetString ) bERConstructedOctetString0 ) ; hashtable0 . put ( ( Object ) dERObjectIdentifier0 , x509Extension0 ) ; X509Extensions x509Extensions0 = new X509Extensions ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equivalent ( X509Extensions other ) { if ( extensions . size ( ) ! = other . extensions . size ( ) ) { return false ; } Enumeration e1 = extensions . keys ( ) ; while ( e1 . hasMoreElements ( ) ) { Object key = e1 . nextElement ( ) ; if ( ! extensions . get ( key ) . equals ( other . extensions . get ( key ) ) ) { return false ; } } return true ; }
void test0 ( ) throws Throwable { V3TBSCertificateGenerator v3TBSCertificateGenerator0 = new V3TBSCertificateGenerator ( ) ; Date date0 = new Date ( ) ; DERUTCTime dERUTCTime0 = new DERUTCTime ( date0 ) ; v3TBSCertificateGenerator0 . setStartDate ( dERUTCTime0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test0 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint ( ( ASN1Sequence ) bERConstructedSequence0 ) ; DistributionPointName distributionPointName0 = issuingDistributionPoint0 . getDistributionPoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DistributionPointName getDistributionPoint ( ) { return distributionPoint ; }
void test1 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint ( ( ASN1Sequence ) bERConstructedSequence0 ) ; boolean boolean0 = issuingDistributionPoint0 . onlyContainsAttributeCerts ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean onlyContainsAttributeCerts ( ) { return onlyContainsAttributeCerts ; }
void test2 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; ASN1SequenceParser aSN1SequenceParser0 = bERConstructedSequence0 . parser ( ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 1 ) , ( DEREncodable ) aSN1SequenceParser0 ) ; IssuingDistributionPoint issuingDistributionPoint0 = IssuingDistributionPoint . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , true ) ; ReasonFlags reasonFlags0 = issuingDistributionPoint0 . getOnlySomeReasons ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ReasonFlags getOnlySomeReasons ( ) { return onlySomeReasons ; }
void test3 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint ( ( ASN1Sequence ) bERConstructedSequence0 ) ; boolean boolean0 = issuingDistributionPoint0 . onlyContainsUserCerts ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean onlyContainsUserCerts ( ) { return onlyContainsUserCerts ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; DERBitString dERBitString0 = new DERBitString ( byteArray0 ) ; ReasonFlags reasonFlags0 = new ReasonFlags ( dERBitString0 ) ; IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint ( ( DistributionPointName ) null , true , true , reasonFlags0 , true , true ) ; String string0 = issuingDistributionPoint0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean onlyContainsCACerts ( ) { return onlyContainsCACerts ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; DERBitString dERBitString0 = new DERBitString ( byteArray0 ) ; ReasonFlags reasonFlags0 = new ReasonFlags ( dERBitString0 ) ; IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint ( ( DistributionPointName ) null , true , true , reasonFlags0 , true , true ) ; boolean boolean0 = issuingDistributionPoint0 . isIndirectCRL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean onlyContainsUserCerts ( ) { return onlyContainsUserCerts ; }
void test6 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint ( ( ASN1Sequence ) bERConstructedSequence0 ) ; boolean boolean0 = issuingDistributionPoint0 . onlyContainsCACerts ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean onlyContainsCACerts ( ) { return onlyContainsCACerts ; }
void test7 ( ) throws Throwable { IssuingDistributionPoint issuingDistributionPoint0 = IssuingDistributionPoint . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test9 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; DERPrintableString dERPrintableString0 = new DERPrintableString ( byteArray0 ) ; DistributionPointName distributionPointName0 = new DistributionPointName ( 1805 , ( ASN1Encodable ) dERPrintableString0 ) ; ReasonFlags reasonFlags0 = new ReasonFlags ( ( int ) ( byte ) ( - 19 ) ) ; IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint ( distributionPointName0 , false , true , reasonFlags0 , false , true ) ; String string0 = issuingDistributionPoint0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean onlyContainsAttributeCerts ( ) { return onlyContainsAttributeCerts ; }
void test10 ( ) throws Throwable { IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint ( ( DistributionPointName ) null , false , false , ( ReasonFlags ) null , false , false ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( int ) ( byte ) ( - 19 ) , ( DEREncodable ) issuingDistributionPoint0 ) ; DERSequence dERSequence0 = ( DERSequence ) ASN1Sequence . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , true ) ; IssuingDistributionPoint issuingDistributionPoint1 = new IssuingDistributionPoint ( ( ASN1Sequence ) dERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test14 ( ) throws Throwable { DERConstructedSequence dERConstructedSequence0 = new DERConstructedSequence ( ) ; IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint ( ( ASN1Sequence ) dERConstructedSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; ObjectDigestInfo objectDigestInfo0 = new ObjectDigestInfo ( ( int ) ( byte ) 72 , "" , ( AlgorithmIdentifier ) null , byteArray0 ) ; DEREnumerated dEREnumerated0 = objectDigestInfo0 . getDigestedObjectType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestedObjectType ( ) { if ( holder . getObjectDigestInfo ( ) ! = null ) { return holder . getObjectDigestInfo ( ) . getDigestedObjectType ( ) . getValue ( ) . intValue ( ) ; } return - 1 ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; ObjectDigestInfo objectDigestInfo0 = new ObjectDigestInfo ( ( int ) ( byte ) 72 , "" , ( AlgorithmIdentifier ) null , byteArray0 ) ; DERBitString dERBitString0 = objectDigestInfo0 . getObjectDigest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { ASN1Encodable [ ] aSN1EncodableArray0 = new ASN1Encodable [ 4 ] ; DERSequence dERSequence0 = new DERSequence ( aSN1EncodableArray0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( false , 7 , ( DEREncodable ) dERSequence0 ) ; ObjectDigestInfo objectDigestInfo0 = ObjectDigestInfo . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test3 ( ) throws Throwable { AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null ) ; byte [ ] byteArray0 = new byte [ 5 ] ; ObjectDigestInfo objectDigestInfo0 = new ObjectDigestInfo ( 1 , "" , algorithmIdentifier0 , byteArray0 ) ; AlgorithmIdentifier algorithmIdentifier1 = objectDigestInfo0 . getDigestAlgorithm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDigestAlgorithm ( ) { if ( holder . getObjectDigestInfo ( ) ! = null ) { holder . getObjectDigestInfo ( ) . getDigestAlgorithm ( ) . getObjectId ( ) . getId ( ) ; } return null ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; ObjectDigestInfo objectDigestInfo0 = new ObjectDigestInfo ( 1210 , "" , ( AlgorithmIdentifier ) null , byteArray0 ) ; DERObjectIdentifier dERObjectIdentifier0 = objectDigestInfo0 . getOtherObjectTypeID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOtherObjectTypeID ( ) { if ( holder . getObjectDigestInfo ( ) ! = null ) { holder . getObjectDigestInfo ( ) . getOtherObjectTypeID ( ) . getId ( ) ; } return null ; }
void test5 ( ) throws Throwable { ObjectDigestInfo objectDigestInfo0 = ObjectDigestInfo . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test6 ( ) throws Throwable { AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null ) ; byte [ ] byteArray0 = new byte [ 5 ] ; ObjectDigestInfo objectDigestInfo0 = new ObjectDigestInfo ( 1 , "" , algorithmIdentifier0 , byteArray0 ) ; ObjectDigestInfo objectDigestInfo1 = ObjectDigestInfo . getInstance ( ( Object ) objectDigestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test10 ( ) throws Throwable { AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null ) ; byte [ ] byteArray0 = new byte [ 5 ] ; ObjectDigestInfo objectDigestInfo0 = new ObjectDigestInfo ( 1 , "" , algorithmIdentifier0 , byteArray0 ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( true , ( - 1914 ) , ( DEREncodable ) objectDigestInfo0 ) ; ObjectDigestInfo objectDigestInfo1 = ObjectDigestInfo . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test2 ( ) throws Throwable { V1TBSCertificateGenerator v1TBSCertificateGenerator0 = new V1TBSCertificateGenerator ( ) ; Date date0 = new Date ( ) ; DERUTCTime dERUTCTime0 = new DERUTCTime ( date0 ) ; v1TBSCertificateGenerator0 . setEndDate ( dERUTCTime0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test10 ( ) throws Throwable { V1TBSCertificateGenerator v1TBSCertificateGenerator0 = new V1TBSCertificateGenerator ( ) ; BigInteger bigInteger0 = BigInteger . ZERO ; Vector < String > vector0 = new Vector < String > ( ) ; X509DefaultEntryConverter x509DefaultEntryConverter0 = new X509DefaultEntryConverter ( ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Name . UnstructuredAddress ; X509Name x509Name0 = new X509Name ( ( Vector ) vector0 , ( Vector ) vector0 , ( X509NameEntryConverter ) x509DefaultEntryConverter0 ) ; Date date0 = new Date ( ) ; SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo ( ( AlgorithmIdentifier ) null , ( DEREncodable ) null ) ; v1TBSCertificateGenerator0 . setSubjectPublicKeyInfo ( subjectPublicKeyInfo0 ) ; Time time0 = new Time ( date0 ) ; v1TBSCertificateGenerator0 . endDate = ( org . bouncycastle . asn1 . x509 . Time ) time0 ; v1TBSCertificateGenerator0 . setStartDate ( time0 ) ; v1TBSCertificateGenerator0 . setSubject ( x509Name0 ) ; v1TBSCertificateGenerator0 . setIssuer ( x509Name0 ) ; DERInteger dERInteger0 = new DERInteger ( bigInteger0 ) ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( dERObjectIdentifier0 ) ; v1TBSCertificateGenerator0 . setSignature ( algorithmIdentifier0 ) ; v1TBSCertificateGenerator0 . setSerialNumber ( dERInteger0 ) ; TBSCertificateStructure tBSCertificateStructure0 = v1TBSCertificateGenerator0 . generateTBSCertificate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { Date date0 = new Date ( ) ; Time time0 = new Time ( date0 ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( true , 5 , ( DEREncodable ) time0 ) ; Time . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { Date date0 = new Date ( 36028797018963970L ) ; Time time0 = new Time ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { Date date0 = new Date ( ) ; DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime ( date0 ) ; Time time0 = Time . getInstance ( ( Object ) dERGeneralizedTime0 ) ; time0 . getDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test4 ( ) throws Throwable { Date date0 = new Date ( 72057594037927936L ) ; Time time0 = new Time ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test6 ( ) throws Throwable { Date date0 = new Date ( 1L ) ; Time time0 = new Time ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test7 ( ) throws Throwable { Date date0 = new Date ( 1L ) ; Time time0 = new Time ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test0 ( ) throws Throwable { CertificatePair certificatePair0 = new CertificatePair ( ( X509CertificateStructure ) null , ( X509CertificateStructure ) null ) ; X509CertificateStructure x509CertificateStructure0 = certificatePair0 . getForward ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" X509CertificateStructure getForward ( ) { return forward ; }
void test1 ( ) throws Throwable { CertificatePair certificatePair0 = new CertificatePair ( ( X509CertificateStructure ) null , ( X509CertificateStructure ) null ) ; X509CertificateStructure x509CertificateStructure0 = certificatePair0 . getReverse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" X509CertificateStructure getReverse ( ) { return reverse ; }
void test2 ( ) throws Throwable { CertificatePair certificatePair0 = CertificatePair . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test4 ( ) throws Throwable { CertificatePair certificatePair0 = new CertificatePair ( ( X509CertificateStructure ) null , ( X509CertificateStructure ) null ) ; CertificatePair certificatePair1 = CertificatePair . getInstance ( ( Object ) certificatePair0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test9 ( ) throws Throwable { CertificatePair certificatePair0 = new CertificatePair ( ( X509CertificateStructure ) null , ( X509CertificateStructure ) null ) ; byte [ ] byteArray0 = certificatePair0 . getEncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test0 ( ) throws Throwable { AttCertValidityPeriod attCertValidityPeriod0 = new AttCertValidityPeriod ( ( DERGeneralizedTime ) null , ( DERGeneralizedTime ) null ) ; DERGeneralizedTime dERGeneralizedTime0 = attCertValidityPeriod0 . getNotBeforeTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERGeneralizedTime getNotBeforeTime ( ) { return notBeforeTime ; }
void test1 ( ) throws Throwable { Date date0 = new Date ( ) ; DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime ( date0 ) ; AttCertValidityPeriod attCertValidityPeriod0 = new AttCertValidityPeriod ( dERGeneralizedTime0 , dERGeneralizedTime0 ) ; attCertValidityPeriod0 . getNotAfterTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test2 ( ) throws Throwable { AttCertValidityPeriod attCertValidityPeriod0 = new AttCertValidityPeriod ( ( DERGeneralizedTime ) null , ( DERGeneralizedTime ) null ) ; byte [ ] byteArray0 = attCertValidityPeriod0 . getEncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test4 ( ) throws Throwable { Date date0 = new Date ( ) ; DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime ( date0 ) ; AttCertValidityPeriod attCertValidityPeriod0 = new AttCertValidityPeriod ( dERGeneralizedTime0 , dERGeneralizedTime0 ) ; AttCertValidityPeriod . getInstance ( ( Object ) attCertValidityPeriod0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test6 ( ) throws Throwable { ASN1Encodable [ ] aSN1EncodableArray0 = new ASN1Encodable [ 2 ] ; DERSequence dERSequence0 = new DERSequence ( aSN1EncodableArray0 ) ; AttCertValidityPeriod attCertValidityPeriod0 = new AttCertValidityPeriod ( ( ASN1Sequence ) dERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AttCertValidityPeriod ( ASN1Sequence seq ) { if ( seq . size ( ) ! = 2 ) { throw new IllegalArgumentException ( "Bad sequence size : " + seq . size ( ) ) ; } notBeforeTime = DERGeneralizedTime . getInstance ( seq . getObjectAt ( 0 ) ) ; notAfterTime = DERGeneralizedTime . getInstance ( seq . getObjectAt ( 1 ) ) ; }
void test0 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ZERO ; CRLNumber cRLNumber0 = new CRLNumber ( bigInteger0 ) ; String string0 = cRLNumber0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ONE ; RSAPublicKeyStructure rSAPublicKeyStructure0 = new RSAPublicKeyStructure ( bigInteger0 , bigInteger0 ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( ( - 1973 ) , ( DEREncodable ) rSAPublicKeyStructure0 ) ; RSAPublicKeyStructure rSAPublicKeyStructure1 = RSAPublicKeyStructure . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test1 ( ) throws Throwable { RSAPublicKeyStructure rSAPublicKeyStructure0 = RSAPublicKeyStructure . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test2 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ONE ; RSAPublicKeyStructure rSAPublicKeyStructure0 = new RSAPublicKeyStructure ( bigInteger0 , bigInteger0 ) ; RSAPublicKeyStructure rSAPublicKeyStructure1 = RSAPublicKeyStructure . getInstance ( ( Object ) rSAPublicKeyStructure0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test2 ( ) throws Throwable { V2TBSCertListGenerator v2TBSCertListGenerator0 = new V2TBSCertListGenerator ( ) ; Date date0 = new Date ( ) ; DERUTCTime dERUTCTime0 = new DERUTCTime ( date0 ) ; v2TBSCertListGenerator0 . setThisUpdate ( dERUTCTime0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test8 ( ) throws Throwable { V2TBSCertListGenerator v2TBSCertListGenerator0 = new V2TBSCertListGenerator ( ) ; Hashtable < Object , Object > hashtable0 = X509Name . OIDLookUp ; X509Name x509Name0 = new X509Name ( ( Vector ) null , ( Hashtable ) hashtable0 ) ; v2TBSCertListGenerator0 . setIssuer ( x509Name0 ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) null ) ; Date date0 = new Date ( ) ; Time time0 = new Time ( date0 ) ; v2TBSCertListGenerator0 . thisUpdate = ( org . bouncycastle . asn1 . x509 . Time ) time0 ; DERObjectIdentifier dERObjectIdentifier0 = X509Name . STREET ; v2TBSCertListGenerator0 . setNextUpdate ( time0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { KeyPurposeId keyPurposeId0 = KeyPurposeId . anyExtendedKeyUsage ; ExtendedKeyUsage extendedKeyUsage0 = new ExtendedKeyUsage ( keyPurposeId0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test1 ( ) throws Throwable { DERSequence dERSequence0 = new DERSequence ( ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 1761 , ( DEREncodable ) dERSequence0 ) ; ExtendedKeyUsage extendedKeyUsage0 = ExtendedKeyUsage . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test3 ( ) throws Throwable { KeyPurposeId keyPurposeId0 = KeyPurposeId . anyExtendedKeyUsage ; ExtendedKeyUsage extendedKeyUsage0 = new ExtendedKeyUsage ( keyPurposeId0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test6 ( ) throws Throwable { KeyPurposeId keyPurposeId0 = KeyPurposeId . anyExtendedKeyUsage ; ExtendedKeyUsage extendedKeyUsage0 = new ExtendedKeyUsage ( keyPurposeId0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test7 ( ) throws Throwable { Vector < ExtendedKeyUsage > vector0 = new Vector < ExtendedKeyUsage > ( ) ; ExtendedKeyUsage extendedKeyUsage0 = new ExtendedKeyUsage ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasKeyPurposeId ( KeyPurposeId keyPurposeId ) { return ( usageTable . get ( keyPurposeId ) ! = null ) ; }
void test8 ( ) throws Throwable { KeyPurposeId keyPurposeId0 = KeyPurposeId . id_kp_codeSigning ; ExtendedKeyUsage extendedKeyUsage0 = new ExtendedKeyUsage ( keyPurposeId0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasKeyPurposeId ( KeyPurposeId keyPurposeId ) { return ( usageTable . get ( keyPurposeId ) ! = null ) ; }
void test0 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSequence bERSequence0 = new BERSequence ( dEREncodableVector0 ) ; PrivateKeyUsagePeriod privateKeyUsagePeriod0 = PrivateKeyUsagePeriod . getInstance ( ( Object ) bERSequence0 ) ; DERGeneralizedTime dERGeneralizedTime0 = privateKeyUsagePeriod0 . getNotAfter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getNotAfter ( ) ; / * * * Return the holder of the certificate . * * @return the holder . * / AttributeCertificateHolder getHolder ( ) ; / * * * Return the issuer details for the certificate . * * @return the issuer details . * / AttributeCertificateIssuer getIssuer ( ) ; / * * * Return the attributes contained in the attribute block in the certificate . * * @return an array of attributes . * / X509Attribute [ ] getAttributes ( ) ; / * * * Return the attributes with the same type as the passed in oid . * * @param oid the object identifier we wish to match . * @return an array of matched attributes , null if there is no match . * / X509Attribute [ ] getAttributes ( String oid ) ; boolean [ ] getIssuerUniqueID ( ) ; void checkValidity ( ) throws CertificateExpiredException , CertificateNotYetValidException ; void checkValidity ( Date date ) throws CertificateExpiredException , CertificateNotYetValidException ; byte [ ] getSignature ( ) ; void verify ( PublicKey key , String provider ) throws CertificateException , NoSuchAlgorithmException , InvalidKeyException , NoSuchProviderException , SignatureException ; / * * * Return an ASN . 1 encoded byte array representing the attribute certificate . * * @return an ASN . 1 encoded byte array . * @throws IOException if the certificate cannot be encoded . * / byte [ ] getEncoded ( ) throws IOException ; }
void test1 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSequence bERSequence0 = new BERSequence ( dEREncodableVector0 ) ; PrivateKeyUsagePeriod privateKeyUsagePeriod0 = PrivateKeyUsagePeriod . getInstance ( ( Object ) bERSequence0 ) ; DERGeneralizedTime dERGeneralizedTime0 = privateKeyUsagePeriod0 . getNotBefore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getNotBefore ( ) ; / * * * Return the date after which the certificate is not valid . * * @return the "not valid afer" date . * / Date getNotAfter ( ) ; / * * * Return the holder of the certificate . * * @return the holder . * / AttributeCertificateHolder getHolder ( ) ; / * * * Return the issuer details for the certificate . * * @return the issuer details . * / AttributeCertificateIssuer getIssuer ( ) ; / * * * Return the attributes contained in the attribute block in the certificate . * * @return an array of attributes . * / X509Attribute [ ] getAttributes ( ) ; / * * * Return the attributes with the same type as the passed in oid . * * @param oid the object identifier we wish to match . * @return an array of matched attributes , null if there is no match . * / X509Attribute [ ] getAttributes ( String oid ) ; boolean [ ] getIssuerUniqueID ( ) ; void checkValidity ( ) throws CertificateExpiredException , CertificateNotYetValidException ; void checkValidity ( Date date ) throws CertificateExpiredException , CertificateNotYetValidException ; byte [ ] getSignature ( ) ; void verify ( PublicKey key , String provider ) throws CertificateException , NoSuchAlgorithmException , InvalidKeyException , NoSuchProviderException , SignatureException ; / * * * Return an ASN . 1 encoded byte array representing the attribute certificate . * * @return an ASN . 1 encoded byte array . * @throws IOException if the certificate cannot be encoded . * / byte [ ] getEncoded ( ) throws IOException ; }
void test3 ( ) throws Throwable { DERNull dERNull0 = DERNull . INSTANCE ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 1 ) , ( DEREncodable ) dERNull0 ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) bERTaggedObject0 ) ; PrivateKeyUsagePeriod privateKeyUsagePeriod0 = PrivateKeyUsagePeriod . getInstance ( ( Object ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test6 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSequence bERSequence0 = new BERSequence ( dEREncodableVector0 ) ; PrivateKeyUsagePeriod privateKeyUsagePeriod0 = PrivateKeyUsagePeriod . getInstance ( ( Object ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { DisplayText displayText0 = new DisplayText ( 3 , "cB { " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test1 ( ) throws Throwable { DisplayText displayText0 = new DisplayText ( 9 , " found in6input shDuld only contain DEROctetString" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test2 ( ) throws Throwable { DisplayText displayText0 = new DisplayText ( 0 , "unknown object n getnsQance" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test3 ( ) throws Throwable { DisplayText displayText0 = new DisplayText ( 1 , "unknown object n getnsQance" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test4 ( ) throws Throwable { DisplayText displayText0 = new DisplayText ( 2 , "CIkdlN'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test5 ( ) throws Throwable { DisplayText displayText0 = new DisplayText ( "CIkdlN'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; SubjectKeyIdentifier subjectKeyIdentifier0 = new SubjectKeyIdentifier ( byteArray0 ) ; byte [ ] byteArray1 = subjectKeyIdentifier0 . getKeyIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getKeyIdentifier ( ) { return keyidentifier ; }
void test1 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 107 ) ) ; SubjectKeyIdentifier subjectKeyIdentifier0 = SubjectKeyIdentifier . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; SubjectKeyIdentifier subjectKeyIdentifier0 = new SubjectKeyIdentifier ( byteArray0 ) ; int int0 = subjectKeyIdentifier0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; SubjectKeyIdentifier subjectKeyIdentifier0 = new SubjectKeyIdentifier ( byteArray0 ) ; SubjectKeyIdentifier subjectKeyIdentifier1 = SubjectKeyIdentifier . getInstance ( ( Object ) subjectKeyIdentifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test4 ( ) throws Throwable { SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo ( ( AlgorithmIdentifier ) null , ( DEREncodable ) null ) ; SubjectKeyIdentifier subjectKeyIdentifier0 = SubjectKeyIdentifier . getInstance ( ( Object ) subjectPublicKeyInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test0 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; GeneralNames generalNames0 = new GeneralNames ( ( ASN1Sequence ) bERConstructedSequence0 ) ; BERConstructedSequence bERConstructedSequence1 = ( BERConstructedSequence ) generalNames0 . toASN1Object ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test1 ( ) throws Throwable { Date date0 = new Date ( 102L ) ; DERUTCTime dERUTCTime0 = new DERUTCTime ( date0 ) ; GeneralName generalName0 = new GeneralName ( ( DERObject ) dERUTCTime0 , 1666 ) ; GeneralNames generalNames0 = new GeneralNames ( generalName0 ) ; String string0 = generalNames0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 0 ) ; GeneralNames generalNames0 = GeneralNames . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { GeneralNames generalNames0 = GeneralNames . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test4 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; GeneralNames generalNames0 = new GeneralNames ( ( ASN1Sequence ) bERConstructedSequence0 ) ; GeneralNames generalNames1 = GeneralNames . getInstance ( ( Object ) generalNames0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test0 ( ) throws Throwable { Holder holder0 = new Holder ( ( IssuerSerial ) null , 0 ) ; holder0 . getBaseCertificateID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test1 ( ) throws Throwable { Holder holder0 = new Holder ( ( IssuerSerial ) null , 0 ) ; holder0 . getEntityName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { Holder holder0 = new Holder ( ( GeneralNames ) null , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test3 ( ) throws Throwable { Holder holder0 = new Holder ( ( IssuerSerial ) null ) ; int int0 = holder0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test4 ( ) throws Throwable { Holder holder0 = new Holder ( ( IssuerSerial ) null , 0 ) ; holder0 . getObjectDigestInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test6 ( ) throws Throwable { Holder holder0 = new Holder ( ( IssuerSerial ) null , 0 ) ; Holder holder1 = Holder . getInstance ( ( Object ) holder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test7 ( ) throws Throwable { BERSequence bERSequence0 = new BERSequence ( ) ; Holder holder0 = Holder . getInstance ( ( Object ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test10 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 1 , ( DEREncodable ) null ) ; Holder holder0 = new Holder ( ( ASN1TaggedObject ) dERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test13 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; byteArray0 [ 0 ] = ( byte ) ( - 95 ) ; DERTaggedObject dERTaggedObject0 = ( DERTaggedObject ) ASN1Object . fromByteArray ( byteArray0 ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) dERTaggedObject0 ) ; Holder holder0 = new Holder ( ( ASN1Sequence ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test14 ( ) throws Throwable { Holder holder0 = new Holder ( ( IssuerSerial ) null , 0 ) ; int int0 = holder0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test15 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; ObjectDigestInfo objectDigestInfo0 = new ObjectDigestInfo ( 458 , "1EbN * & VkQr & mN^_" , ( AlgorithmIdentifier ) null , byteArray0 ) ; Holder holder0 = new Holder ( objectDigestInfo0 ) ; holder0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test16 ( ) throws Throwable { IssuerSerial issuerSerial0 = new IssuerSerial ( ( GeneralNames ) null , ( DERInteger ) null ) ; Holder holder0 = new Holder ( issuerSerial0 ) ; DERSequence dERSequence0 = ( DERSequence ) holder0 . toASN1Object ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test17 ( ) throws Throwable { BERSequence bERSequence0 = new BERSequence ( ) ; GeneralNames generalNames0 = new GeneralNames ( ( ASN1Sequence ) bERSequence0 ) ; Holder holder0 = new Holder ( generalNames0 ) ; DERSequence dERSequence0 = ( DERSequence ) holder0 . toASN1Object ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . TRUE ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DEREncodable ) dERBoolean0 ) ; X509Extension x509Extension0 = new X509Extension ( dERBoolean0 , ( ASN1OctetString ) bERConstructedOctetString0 ) ; boolean boolean0 = x509Extension0 . equals ( ( Object ) x509Extension0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCritical ( ) { return critical ; }
void test1 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . TRUE ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DERObject ) dERBoolean0 ) ; X509Extension x509Extension0 = new X509Extension ( dERBoolean0 , ( ASN1OctetString ) bERConstructedOctetString0 ) ; DERBoolean dERBoolean1 = ( DERBoolean ) X509Extension . convertValueToObject ( x509Extension0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCritical ( ) { return critical ; }
void test2 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . TRUE ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DERObject ) dERBoolean0 ) ; X509Extension x509Extension0 = new X509Extension ( false , ( ASN1OctetString ) bERConstructedOctetString0 ) ; int int0 = x509Extension0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test3 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . TRUE ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DERObject ) dERBoolean0 ) ; X509Extension x509Extension0 = new X509Extension ( dERBoolean0 , ( ASN1OctetString ) bERConstructedOctetString0 ) ; int int0 = x509Extension0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCritical ( ) { return critical ; }
void test4 ( ) throws Throwable { X509Extension x509Extension0 = new X509Extension ( true , ( ASN1OctetString ) null ) ; boolean boolean0 = x509Extension0 . equals ( ( Object ) "@f" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCritical ( ) { return critical ; }
void test6 ( ) throws Throwable { DERBoolean dERBoolean0 = DERBoolean . TRUE ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DERObject ) dERBoolean0 ) ; X509Extension x509Extension0 = new X509Extension ( dERBoolean0 , ( ASN1OctetString ) bERConstructedOctetString0 ) ; X509Extension x509Extension1 = new X509Extension ( false , ( ASN1OctetString ) bERConstructedOctetString0 ) ; boolean boolean0 = x509Extension1 . equals ( ( Object ) x509Extension0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test0 ( ) throws Throwable { Target [ ] targetArray0 = new Target [ 13 ] ; TargetInformation targetInformation0 = new TargetInformation ( targetArray0 ) ; int int0 = targetInformation0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test1 ( ) throws Throwable { DERConstructedSequence dERConstructedSequence0 = new DERConstructedSequence ( ) ; TargetInformation targetInformation0 = TargetInformation . getInstance ( ( Object ) dERConstructedSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test3 ( ) throws Throwable { Target [ ] targetArray0 = new Target [ 13 ] ; TargetInformation targetInformation0 = new TargetInformation ( targetArray0 ) ; Targets [ ] targetsArray0 = targetInformation0 . getTargetsObjects ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Targets [ ] getTargetsObjects ( ) { Targets [ ] copy = new Targets [ targets . size ( ) ] ; int count = 0 ; for ( Enumeration e = targets . getObjects ( ) ; e . hasMoreElements ( ) ; ) { copy [ count + + ] = Targets . getInstance ( e . nextElement ( ) ) ; } return copy ; }
void test0 ( ) throws Throwable { BasicConstraints basicConstraints0 = new BasicConstraints ( 0 ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 0 , ( DEREncodable ) basicConstraints0 ) ; BasicConstraints basicConstraints1 = BasicConstraints . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 452 ) , ( DEREncodable ) null ) ; BasicConstraints basicConstraints0 = BasicConstraints . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test2 ( ) throws Throwable { BasicConstraints basicConstraints0 = new BasicConstraints ( 5 ) ; BasicConstraints basicConstraints1 = BasicConstraints . getInstance ( ( Object ) basicConstraints0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 17 ) ; BasicConstraints basicConstraints0 = BasicConstraints . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCA ( ) { return ( cA ! = null ) & & cA . isTrue ( ) ; }
void test6 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 452 ) , ( DEREncodable ) null ) ; BERSequence bERSequence0 = ( BERSequence ) ASN1Sequence . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , false ) ; BasicConstraints basicConstraints0 = new BasicConstraints ( ( ASN1Sequence ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCA ( ) { return ( cA ! = null ) & & cA . isTrue ( ) ; }
void test7 ( ) throws Throwable { BasicConstraints basicConstraints0 = new BasicConstraints ( false ) ; String string0 = basicConstraints0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test8 ( ) throws Throwable { BasicConstraints basicConstraints0 = new BasicConstraints ( true ) ; basicConstraints0 . getPathLenConstraint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test9 ( ) throws Throwable { BasicConstraints basicConstraints0 = new BasicConstraints ( false , ( - 6 ) ) ; boolean boolean0 = basicConstraints0 . isCA ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCA ( ) { return ( cA ! = null ) & & cA . isTrue ( ) ; }
void test10 ( ) throws Throwable { BasicConstraints basicConstraints0 = new BasicConstraints ( 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test11 ( ) throws Throwable { BasicConstraints basicConstraints0 = new BasicConstraints ( 0 ) ; BigInteger bigInteger0 = basicConstraints0 . getPathLenConstraint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test12 ( ) throws Throwable { BasicConstraints basicConstraints0 = new BasicConstraints ( false , ( - 452 ) ) ; byte [ ] byteArray0 = basicConstraints0 . getEncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test13 ( ) throws Throwable { BasicConstraints basicConstraints0 = new BasicConstraints ( true ) ; String string0 = basicConstraints0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { Target [ ] targetArray0 = new Target [ 1 ] ; Targets targets0 = new Targets ( targetArray0 ) ; byte [ ] byteArray0 = targets0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getDEREncoded ( ) { try { return this . getEncoded ( DER ) ; } catch ( IOException e ) { return null ; } }
void test1 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; DERSequence dERSequence0 = new DERSequence ( dEREncodableVector0 ) ; Targets targets0 = Targets . getInstance ( ( Object ) dERSequence0 ) ; Target [ ] targetArray0 = targets0 . getTargets ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Target [ ] getTargets ( ) { Target [ ] targs = new Target [ targets . size ( ) ] ; int count = 0 ; for ( Enumeration e = targets . getObjects ( ) ; e . hasMoreElements ( ) ; ) { targs [ count + + ] = Target . getInstance ( e . nextElement ( ) ) ; } return targs ; }
void test2 ( ) throws Throwable { Target [ ] targetArray0 = new Target [ 1 ] ; Targets targets0 = new Targets ( targetArray0 ) ; Targets targets1 = Targets . getInstance ( ( Object ) targets0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test0 ( ) throws Throwable { AttributeCertificate attributeCertificate0 = new AttributeCertificate ( ( AttributeCertificateInfo ) null , ( AlgorithmIdentifier ) null , ( DERBitString ) null ) ; AlgorithmIdentifier algorithmIdentifier0 = attributeCertificate0 . getSignatureAlgorithm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AlgorithmIdentifier getSignatureAlgorithm ( ) { return sigAlgId ; }
void test1 ( ) throws Throwable { AttributeCertificate attributeCertificate0 = new AttributeCertificate ( ( AttributeCertificateInfo ) null , ( AlgorithmIdentifier ) null , ( DERBitString ) null ) ; DERBitString dERBitString0 = attributeCertificate0 . getSignatureValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERBitString getSignatureValue ( ) { return signatureValue ; }
void test2 ( ) throws Throwable { AttributeCertificate attributeCertificate0 = new AttributeCertificate ( ( AttributeCertificateInfo ) null , ( AlgorithmIdentifier ) null , ( DERBitString ) null ) ; AttributeCertificateInfo attributeCertificateInfo0 = attributeCertificate0 . getAcinfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AttributeCertificateInfo getAcinfo ( ) { return acinfo ; }
void test3 ( ) throws Throwable { AttributeCertificate attributeCertificate0 = new AttributeCertificate ( ( AttributeCertificateInfo ) null , ( AlgorithmIdentifier ) null , ( DERBitString ) null ) ; byte [ ] byteArray0 = attributeCertificate0 . getEncoded ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test5 ( ) throws Throwable { AttributeCertificate attributeCertificate0 = new AttributeCertificate ( ( AttributeCertificateInfo ) null , ( AlgorithmIdentifier ) null , ( DERBitString ) null ) ; AttributeCertificate attributeCertificate1 = AttributeCertificate . getInstance ( ( Object ) attributeCertificate0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test0 ( ) throws Throwable { CRLReason cRLReason0 = new CRLReason ( ( - 1 ) ) ; CRLReason cRLReason1 = new CRLReason ( ( DEREnumerated ) cRLReason0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { CRLReason cRLReason0 = new CRLReason ( ( - 1609 ) ) ; String string0 = cRLReason0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { CRLReason cRLReason0 = new CRLReason ( 0 ) ; String string0 = cRLReason0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { CRLReason cRLReason0 = new CRLReason ( 571 ) ; String string0 = cRLReason0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = X509Name . UnstructuredName ; DistributionPointName distributionPointName0 = new DistributionPointName ( ( - 16 ) , ( DEREncodable ) dERObjectIdentifier0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 16 ) , ( DEREncodable ) distributionPointName0 ) ; DistributionPoint distributionPoint0 = DistributionPoint . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , false ) ; ReasonFlags reasonFlags0 = distributionPoint0 . getReasons ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ReasonFlags getReasons ( ) { return reasons ; }
void test2 ( ) throws Throwable { DERSequence dERSequence0 = new DERSequence ( ) ; DistributionPoint distributionPoint0 = new DistributionPoint ( ( ASN1Sequence ) dERSequence0 ) ; DistributionPointName distributionPointName0 = distributionPoint0 . getDistributionPoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DistributionPointName getDistributionPoint ( ) { return distributionPoint ; }
void test3 ( ) throws Throwable { DERSequence dERSequence0 = new DERSequence ( ) ; DistributionPoint distributionPoint0 = new DistributionPoint ( ( ASN1Sequence ) dERSequence0 ) ; GeneralNames generalNames0 = distributionPoint0 . getCRLIssuer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeneralNames getCRLIssuer ( ) { return cRLIssuer ; }
void test4 ( ) throws Throwable { DistributionPoint distributionPoint0 = DistributionPoint . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 1570 ) ) ; DistributionPoint distributionPoint0 = DistributionPoint . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , false ) ; DistributionPoint distributionPoint1 = DistributionPoint . getInstance ( ( Object ) distributionPoint0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test9 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 1570 ) ) ; DistributionPoint distributionPoint0 = DistributionPoint . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test10 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = X509Name . SN ; DistributionPointName distributionPointName0 = new DistributionPointName ( ( - 10 ) , ( DEREncodable ) dERObjectIdentifier0 ) ; ReasonFlags reasonFlags0 = new ReasonFlags ( ( - 10 ) ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( ( - 10 ) , ( DEREncodable ) dERObjectIdentifier0 ) ; DERSequence dERSequence0 = ( DERSequence ) ASN1Sequence . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; GeneralNames generalNames0 = GeneralNames . getInstance ( ( Object ) dERSequence0 ) ; DistributionPoint distributionPoint0 = new DistributionPoint ( distributionPointName0 , reasonFlags0 , generalNames0 ) ; byte [ ] byteArray0 = distributionPoint0 . getDEREncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getDEREncoded ( ) { try { return this . getEncoded ( DER ) ; } catch ( IOException e ) { return null ; } }
void test11 ( ) throws Throwable { DERSequence dERSequence0 = new DERSequence ( ) ; DistributionPoint distributionPoint0 = new DistributionPoint ( ( ASN1Sequence ) dERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; DERConstructedSet dERConstructedSet0 = new DERConstructedSet ( dEREncodableVector0 ) ; Attribute attribute0 = new Attribute ( ( DERObjectIdentifier ) null , ( ASN1Set ) dERConstructedSet0 ) ; DERConstructedSet dERConstructedSet1 = ( DERConstructedSet ) attribute0 . getAttrValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test1 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ( DEREncodable ) null ) ; Attribute attribute0 = new Attribute ( ( DERObjectIdentifier ) null , ( ASN1Set ) bERSet0 ) ; DERSequence dERSequence0 = ( DERSequence ) attribute0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ) ; Attribute attribute0 = new Attribute ( ( DERObjectIdentifier ) null , ( ASN1Set ) bERSet0 ) ; DERObjectIdentifier dERObjectIdentifier0 = attribute0 . getAttrType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERObjectIdentifier getAttrType ( ) { return attrType ; }
void test3 ( ) throws Throwable { Attribute attribute0 = Attribute . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test4 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ( DEREncodable ) null ) ; Attribute attribute0 = new Attribute ( ( DERObjectIdentifier ) null , ( ASN1Set ) bERSet0 ) ; Attribute attribute1 = Attribute . getInstance ( ( Object ) attribute0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test7 ( ) throws Throwable { ASN1Encodable [ ] aSN1EncodableArray0 = new ASN1Encodable [ 2 ] ; DERSequence dERSequence0 = new DERSequence ( aSN1EncodableArray0 ) ; Attribute attribute0 = new Attribute ( ( ASN1Sequence ) dERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Attribute ( ASN1Sequence seq ) { if ( seq . size ( ) ! = 2 ) { throw new IllegalArgumentException ( "Bad sequence size : " + seq . size ( ) ) ; } attrType = DERObjectIdentifier . getInstance ( seq . getObjectAt ( 0 ) ) ; attrValues = ASN1Set . getInstance ( seq . getObjectAt ( 1 ) ) ; }
void test9 ( ) throws Throwable { V2AttributeCertificateInfoGenerator v2AttributeCertificateInfoGenerator0 = new V2AttributeCertificateInfoGenerator ( ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Extensions . CertificatePolicies ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( dERObjectIdentifier0 , dERObjectIdentifier0 ) ; BigInteger bigInteger0 = BigInteger . TEN ; DERInteger dERInteger0 = new DERInteger ( bigInteger0 ) ; DERConstructedSequence dERConstructedSequence0 = new DERConstructedSequence ( ) ; v2AttributeCertificateInfoGenerator0 . setSerialNumber ( dERInteger0 ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( ( - 973 ) , ( DEREncodable ) dERConstructedSequence0 ) ; Holder holder0 = new Holder ( ( ASN1Sequence ) dERConstructedSequence0 ) ; v2AttributeCertificateInfoGenerator0 . setHolder ( holder0 ) ; Date date0 = new Date ( ( long ) ( - 973 ) ) ; DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime ( date0 ) ; v2AttributeCertificateInfoGenerator0 . setEndDate ( dERGeneralizedTime0 ) ; v2AttributeCertificateInfoGenerator0 . setStartDate ( dERGeneralizedTime0 ) ; AttCertIssuer attCertIssuer0 = AttCertIssuer . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , true ) ; v2AttributeCertificateInfoGenerator0 . setSignature ( algorithmIdentifier0 ) ; v2AttributeCertificateInfoGenerator0 . setIssuer ( attCertIssuer0 ) ; AttributeCertificateInfo attributeCertificateInfo0 = v2AttributeCertificateInfoGenerator0 . generateAttributeCertificateInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AttributeCertificateInfo generateAttributeCertificateInfo ( ) { if ( ( serialNumber = = null ) | | ( signature = = null ) | | ( issuer = = null ) | | ( startDate = = null ) | | ( endDate = = null ) | | ( holder = = null ) | | ( attributes = = null ) ) { throw new IllegalStateException ( "not all mandatory fields set in V2 AttributeCertificateInfo generator" ) ; } ASN1EncodableVector v = new ASN1EncodableVector ( ) ; v . add ( version ) ; v . add ( holder ) ; v . add ( issuer ) ; v . add ( signature ) ; v . add ( serialNumber ) ; / / / / before and after dates = > AttCertValidityPeriod / / AttCertValidityPeriod validity = new AttCertValidityPeriod ( startDate , endDate ) ; v . add ( validity ) ; / / Attributes v . add ( new DERSequence ( attributes ) ) ; if ( issuerUniqueID ! = null ) { v . add ( issuerUniqueID ) ; } if ( extensions ! = null ) { v . add ( extensions ) ; } return new AttributeCertificateInfo ( new DERSequence ( v ) ) ; }
void test10 ( ) throws Throwable { V2AttributeCertificateInfoGenerator v2AttributeCertificateInfoGenerator0 = new V2AttributeCertificateInfoGenerator ( ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Extensions . CertificatePolicies ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( dERObjectIdentifier0 , dERObjectIdentifier0 ) ; BigInteger bigInteger0 = BigInteger . TEN ; DERInteger dERInteger0 = new DERInteger ( bigInteger0 ) ; DERConstructedSequence dERConstructedSequence0 = new DERConstructedSequence ( ) ; v2AttributeCertificateInfoGenerator0 . setSerialNumber ( dERInteger0 ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( ( - 973 ) , ( DEREncodable ) dERConstructedSequence0 ) ; Holder holder0 = new Holder ( ( ASN1Sequence ) dERConstructedSequence0 ) ; v2AttributeCertificateInfoGenerator0 . setHolder ( holder0 ) ; Date date0 = new Date ( ( long ) ( - 973 ) ) ; DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime ( date0 ) ; v2AttributeCertificateInfoGenerator0 . setEndDate ( dERGeneralizedTime0 ) ; v2AttributeCertificateInfoGenerator0 . setStartDate ( dERGeneralizedTime0 ) ; AttCertIssuer attCertIssuer0 = AttCertIssuer . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , true ) ; v2AttributeCertificateInfoGenerator0 . setSignature ( algorithmIdentifier0 ) ; v2AttributeCertificateInfoGenerator0 . setIssuer ( attCertIssuer0 ) ; Vector < Object > vector0 = new Vector < Object > ( ) ; X509Extensions x509Extensions0 = new X509Extensions ( vector0 , vector0 ) ; v2AttributeCertificateInfoGenerator0 . setExtensions ( x509Extensions0 ) ; AttributeCertificateInfo attributeCertificateInfo0 = v2AttributeCertificateInfoGenerator0 . generateAttributeCertificateInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AttributeCertificateInfo generateAttributeCertificateInfo ( ) { if ( ( serialNumber = = null ) | | ( signature = = null ) | | ( issuer = = null ) | | ( startDate = = null ) | | ( endDate = = null ) | | ( holder = = null ) | | ( attributes = = null ) ) { throw new IllegalStateException ( "not all mandatory fields set in V2 AttributeCertificateInfo generator" ) ; } ASN1EncodableVector v = new ASN1EncodableVector ( ) ; v . add ( version ) ; v . add ( holder ) ; v . add ( issuer ) ; v . add ( signature ) ; v . add ( serialNumber ) ; / / / / before and after dates = > AttCertValidityPeriod / / AttCertValidityPeriod validity = new AttCertValidityPeriod ( startDate , endDate ) ; v . add ( validity ) ; / / Attributes v . add ( new DERSequence ( attributes ) ) ; if ( issuerUniqueID ! = null ) { v . add ( issuerUniqueID ) ; } if ( extensions ! = null ) { v . add ( extensions ) ; } return new AttributeCertificateInfo ( new DERSequence ( v ) ) ; }
void test0 ( ) throws Throwable { PolicyQualifierInfo policyQualifierInfo0 = new PolicyQualifierInfo ( "EOF found inside tag value . " ) ; PolicyQualifierId policyQualifierId0 = ( PolicyQualifierId ) policyQualifierInfo0 . getPolicyQualifierId ( ) ; PolicyQualifierInfo policyQualifierInfo1 = new PolicyQualifierInfo ( ( DERObjectIdentifier ) policyQualifierId0 , ( DEREncodable ) policyQualifierId0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PolicyQualifierInfo ( DERObjectIdentifier policyQualifierId , DEREncodable qualifier ) { this . policyQualifierId = policyQualifierId ; this . qualifier = qualifier ; }
void test1 ( ) throws Throwable { PolicyQualifierInfo policyQualifierInfo0 = new PolicyQualifierInfo ( "" ) ; DERIA5String dERIA5String0 = ( DERIA5String ) policyQualifierInfo0 . getQualifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test2 ( ) throws Throwable { PolicyQualifierInfo policyQualifierInfo0 = new PolicyQualifierInfo ( "yyyyMMddHHmmss'Z'" ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( Integer . MAX_VALUE , ( DEREncodable ) policyQualifierInfo0 ) ; DERSequence dERSequence0 = ( DERSequence ) ASN1Sequence . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , true ) ; PolicyQualifierInfo policyQualifierInfo1 = new PolicyQualifierInfo ( ( ASN1Sequence ) dERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test4 ( ) throws Throwable { PolicyQualifierInfo policyQualifierInfo0 = new PolicyQualifierInfo ( "EOF found inside tag value . " ) ; PolicyQualifierInfo policyQualifierInfo1 = PolicyQualifierInfo . getInstance ( ( Object ) policyQualifierInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test0 ( ) throws Throwable { Vector < Integer > vector0 = new Vector < Integer > ( ) ; X509Name x509Name0 = new X509Name ( vector0 , vector0 ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Name . DATE_OF_BIRTH ; Vector < Object > vector1 = x509Name0 . getValues ( dERObjectIdentifier0 ) ; X509Name x509Name1 = new X509Name ( ( Vector ) vector1 , ( Hashtable ) x509Name0 . SymbolLookUp ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test1 ( ) throws Throwable { X509Name x509Name0 = X509Name . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test3 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( 48 ) ; DERSet dERSet0 = ( DERSet ) ASN1Set . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 48 , ( DEREncodable ) dERSet0 ) ; X509Name x509Name0 = X509Name . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test4 ( ) throws Throwable { Hashtable < String , DERObjectIdentifier > hashtable0 = new Hashtable < String , DERObjectIdentifier > ( ) ; X509Name x509Name0 = new X509Name ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test5 ( ) throws Throwable { Vector < DERString > vector0 = new Vector < DERString > ( ) ; DERT61String dERT61String0 = new DERT61String ( "OID . H5K" ) ; vector0 . add ( ( DERString ) dERT61String0 ) ; X509DefaultEntryConverter x509DefaultEntryConverter0 = new X509DefaultEntryConverter ( ) ; X509Name x509Name0 = new X509Name ( ( Vector ) vector0 , ( Vector ) vector0 , ( X509NameEntryConverter ) x509DefaultEntryConverter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test10 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSequence bERSequence0 = new BERSequence ( dEREncodableVector0 ) ; X509Name x509Name0 = X509Name . getInstance ( ( Object ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test11 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSequence bERSequence0 = new BERSequence ( dEREncodableVector0 ) ; X509Name x509Name0 = X509Name . getInstance ( ( Object ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test12 ( ) throws Throwable { Hashtable < String , DERObjectIdentifier > hashtable0 = new Hashtable < String , DERObjectIdentifier > ( ) ; X509Name x509Name0 = new X509Name ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test0 ( ) throws Throwable { AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; DEREncodable dEREncodable0 = algorithmIdentifier0 . getParameters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < ? , ? > getParameters ( ) { return parameters ; }
void test1 ( ) throws Throwable { BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) null ) ; AlgorithmIdentifier algorithmIdentifier0 = AlgorithmIdentifier . getInstance ( ( Object ) bERSequence0 ) ; DERObjectIdentifier dERObjectIdentifier0 = algorithmIdentifier0 . getObjectId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERObjectIdentifier getObjectId ( ) { return objectId ; }
void test2 ( ) throws Throwable { AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AlgorithmIdentifier ( DERObjectIdentifier objectId ) { this . objectId = objectId ; }
void test5 ( ) throws Throwable { AlgorithmIdentifier algorithmIdentifier0 = AlgorithmIdentifier . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test6 ( ) throws Throwable { AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; AlgorithmIdentifier algorithmIdentifier1 = AlgorithmIdentifier . getInstance ( ( Object ) algorithmIdentifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test9 ( ) throws Throwable { ASN1Encodable [ ] aSN1EncodableArray0 = new ASN1Encodable [ 2 ] ; DERSequence dERSequence0 = new DERSequence ( aSN1EncodableArray0 ) ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( ASN1Sequence ) dERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AlgorithmIdentifier ( DERObjectIdentifier objectId ) { this . objectId = objectId ; }
void test10 ( ) throws Throwable { BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) null ) ; AlgorithmIdentifier algorithmIdentifier0 = AlgorithmIdentifier . getInstance ( ( Object ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test11 ( ) throws Throwable { AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; byte [ ] byteArray0 = algorithmIdentifier0 . getEncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test0 ( ) throws Throwable { DERSequence dERSequence0 = new DERSequence ( ) ; SubjectDirectoryAttributes subjectDirectoryAttributes0 = SubjectDirectoryAttributes . getInstance ( ( Object ) dERSequence0 ) ; Vector < Object > vector0 = subjectDirectoryAttributes0 . getAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test1 ( ) throws Throwable { SubjectDirectoryAttributes subjectDirectoryAttributes0 = SubjectDirectoryAttributes . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test2 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSequence bERSequence0 = new BERSequence ( dEREncodableVector0 ) ; SubjectDirectoryAttributes subjectDirectoryAttributes0 = new SubjectDirectoryAttributes ( ( ASN1Sequence ) bERSequence0 ) ; SubjectDirectoryAttributes subjectDirectoryAttributes1 = SubjectDirectoryAttributes . getInstance ( ( Object ) subjectDirectoryAttributes0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test6 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSequence bERSequence0 = new BERSequence ( dEREncodableVector0 ) ; SubjectDirectoryAttributes subjectDirectoryAttributes0 = new SubjectDirectoryAttributes ( ( ASN1Sequence ) bERSequence0 ) ; byte [ ] byteArray0 = subjectDirectoryAttributes0 . getEncoded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; DigestInfo digestInfo0 = new DigestInfo ( algorithmIdentifier0 , byteArray0 ) ; DERSequence dERSequence0 = ( DERSequence ) digestInfo0 . toASN1Object ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; DigestInfo digestInfo0 = new DigestInfo ( ( AlgorithmIdentifier ) null , byteArray0 ) ; byte [ ] byteArray1 = digestInfo0 . getDigest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getDigest ( ) { return digest ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; DigestInfo digestInfo0 = new DigestInfo ( algorithmIdentifier0 , byteArray0 ) ; AlgorithmIdentifier algorithmIdentifier1 = digestInfo0 . getAlgorithmId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AlgorithmIdentifier getAlgorithmId ( ) { return algId ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; DigestInfo digestInfo0 = new DigestInfo ( algorithmIdentifier0 , byteArray0 ) ; DigestInfo digestInfo1 = DigestInfo . getInstance ( ( Object ) digestInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test0 ( ) throws Throwable { X509NameTokenizer x509NameTokenizer0 = new X509NameTokenizer ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreTokens ( ) { return ( index ! = - 1 ) ; }
void test1 ( ) throws Throwable { X509NameTokenizer x509NameTokenizer0 = new X509NameTokenizer ( "5 * wqmE = Y1" , '1' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreTokens ( ) { return ( index ! = - 1 ) ; }
void test2 ( ) throws Throwable { X509NameTokenizer x509NameTokenizer0 = new X509NameTokenizer ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreTokens ( ) { return ( index ! = - 1 ) ; }
void test3 ( ) throws Throwable { X509NameTokenizer x509NameTokenizer0 = new X509NameTokenizer ( "5 * wqmE = Y1" , '1' ) ; String string0 = x509NameTokenizer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreTokens ( ) { return ( index ! = - 1 ) ; }
void test4 ( ) throws Throwable { X509NameTokenizer x509NameTokenizer0 = new X509NameTokenizer ( " . 6Kz\"Ai0 , \"" , '1' ) ; x509NameTokenizer0 . nextToken ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMoreTokens ( ) { return ( index ! = - 1 ) ; }
void test0 ( ) throws Throwable { GeneralSubtree generalSubtree0 = new GeneralSubtree ( ( GeneralName ) null ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( false , ( - 10 ) , ( DEREncodable ) generalSubtree0 ) ; GeneralSubtree generalSubtree1 = GeneralSubtree . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test1 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ZERO ; GeneralSubtree generalSubtree0 = new GeneralSubtree ( ( GeneralName ) null , bigInteger0 , bigInteger0 ) ; GeneralName generalName0 = generalSubtree0 . getBase ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeneralName getBase ( ) { return base ; }
void test2 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ONE ; GeneralSubtree generalSubtree0 = new GeneralSubtree ( ( GeneralName ) null , bigInteger0 , bigInteger0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( false , ( - 10 ) , ( DEREncodable ) generalSubtree0 ) ; GeneralSubtree generalSubtree1 = GeneralSubtree . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test3 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ZERO ; GeneralSubtree generalSubtree0 = new GeneralSubtree ( ( GeneralName ) null , bigInteger0 , bigInteger0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 0 , ( DEREncodable ) generalSubtree0 ) ; GeneralSubtree generalSubtree1 = GeneralSubtree . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test4 ( ) throws Throwable { GeneralSubtree generalSubtree0 = new GeneralSubtree ( ( GeneralName ) null ) ; GeneralSubtree generalSubtree1 = GeneralSubtree . getInstance ( ( Object ) generalSubtree0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { GeneralSubtree generalSubtree0 = GeneralSubtree . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test7 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ONE ; GeneralSubtree generalSubtree0 = new GeneralSubtree ( ( GeneralName ) null , bigInteger0 , bigInteger0 ) ; BigInteger bigInteger1 = generalSubtree0 . getMinimum ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test8 ( ) throws Throwable { DERSequence dERSequence0 = new DERSequence ( ( DEREncodable ) null ) ; GeneralSubtree generalSubtree0 = new GeneralSubtree ( ( ASN1Sequence ) dERSequence0 ) ; BigInteger bigInteger0 = generalSubtree0 . getMinimum ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigInteger getMinimum ( ) { if ( minimum = = null ) { return ZERO ; } return minimum . getValue ( ) ; }
void test9 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ONE ; GeneralSubtree generalSubtree0 = new GeneralSubtree ( ( GeneralName ) null , bigInteger0 , bigInteger0 ) ; BigInteger bigInteger1 = generalSubtree0 . getMaximum ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int intValue ( ) { int value = 0 ; for ( int i = 0 ; i ! = data . length & & i ! = 4 ; i + + ) { value | = ( data [ i ] & 0xff ) < < ( 8 * i ) ; } return value ; }
void test10 ( ) throws Throwable { DERSequence dERSequence0 = new DERSequence ( ( DEREncodable ) null ) ; GeneralSubtree generalSubtree0 = new GeneralSubtree ( ( ASN1Sequence ) dERSequence0 ) ; BigInteger bigInteger0 = generalSubtree0 . getMaximum ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigInteger getMaximum ( ) { if ( maximum = = null ) { return null ; } return maximum . getValue ( ) ; }
void test0 ( ) throws Throwable { BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) null ) ; GeneralNames generalNames0 = new GeneralNames ( ( ASN1Sequence ) bERSequence0 ) ; AttCertIssuer attCertIssuer0 = AttCertIssuer . getInstance ( ( Object ) generalNames0 ) ; GeneralNames generalNames1 = ( GeneralNames ) attCertIssuer0 . getIssuer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 1 ) ; AttCertIssuer attCertIssuer0 = AttCertIssuer . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , true ) ; int int0 = attCertIssuer0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test2 ( ) throws Throwable { BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) null ) ; GeneralNames generalNames0 = new GeneralNames ( ( ASN1Sequence ) bERSequence0 ) ; V2Form v2Form0 = new V2Form ( generalNames0 ) ; AttCertIssuer attCertIssuer0 = AttCertIssuer . getInstance ( ( Object ) v2Form0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test3 ( ) throws Throwable { BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 1 ) ; AttCertIssuer attCertIssuer0 = AttCertIssuer . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , true ) ; AttCertIssuer attCertIssuer1 = AttCertIssuer . getInstance ( ( Object ) attCertIssuer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test1 ( ) throws Throwable { DERConstructedSequence dERConstructedSequence0 = new DERConstructedSequence ( ) ; AuthorityInformationAccess authorityInformationAccess0 = new AuthorityInformationAccess ( ( ASN1Sequence ) dERConstructedSequence0 ) ; AccessDescription [ ] accessDescriptionArray0 = authorityInformationAccess0 . getAccessDescriptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AccessDescription [ ] getAccessDescriptions ( ) { return descriptions ; }
void test2 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = X509Name . SERIALNUMBER ; GeneralName generalName0 = new GeneralName ( ( DERObject ) dERObjectIdentifier0 , 2030 ) ; AuthorityInformationAccess authorityInformationAccess0 = new AuthorityInformationAccess ( dERObjectIdentifier0 , generalName0 ) ; AuthorityInformationAccess authorityInformationAccess1 = AuthorityInformationAccess . getInstance ( ( Object ) authorityInformationAccess0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = X509Name . SERIALNUMBER ; GeneralName generalName0 = new GeneralName ( ( DERObject ) dERObjectIdentifier0 , 2030 ) ; AuthorityInformationAccess authorityInformationAccess0 = new AuthorityInformationAccess ( dERObjectIdentifier0 , generalName0 ) ; byte [ ] byteArray0 = authorityInformationAccess0 . getEncoded ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncoded ( ) throws IOException ; }
void test0 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = CertificatePolicies . anyPolicy ; CertificatePolicies certificatePolicies0 = new CertificatePolicies ( dERObjectIdentifier0 ) ; certificatePolicies0 . addPolicy ( "2 . 5 . 29 . 32 . 0" ) ; String string0 = certificatePolicies0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { CertificatePolicies certificatePolicies0 = new CertificatePolicies ( ( DERObjectIdentifier ) null ) ; String string0 = certificatePolicies0 . getPolicy ( 905 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPolicy ( int nr ) { if ( policies . size ( ) > nr ) { return ( ( DERObjectIdentifier ) policies . elementAt ( nr ) ) . getId ( ) ; } return null ; }
void test2 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = CertificatePolicies . anyPolicy ; CertificatePolicies certificatePolicies0 = new CertificatePolicies ( dERObjectIdentifier0 ) ; String string0 = certificatePolicies0 . getPolicy ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPolicy ( int nr ) { if ( policies . size ( ) > nr ) { return ( ( DERObjectIdentifier ) policies . elementAt ( nr ) ) . getId ( ) ; } return null ; }
void test3 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = CertificatePolicies . anyPolicy ; CertificatePolicies certificatePolicies0 = new CertificatePolicies ( dERObjectIdentifier0 ) ; String string0 = certificatePolicies0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ZERO ; ECPrivateKeyStructure eCPrivateKeyStructure0 = new ECPrivateKeyStructure ( bigInteger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ZERO ; ECPrivateKeyStructure eCPrivateKeyStructure0 = new ECPrivateKeyStructure ( bigInteger0 ) ; DERBitString dERBitString0 = eCPrivateKeyStructure0 . getPublicKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getPublicKey ( String reason ) throws CryptoManagerException ; byte [ ] getEncryptedPrivateKey ( String reason ) throws CryptoManagerException ; boolean verifyPublicKey ( byte [ ] encoded ) ; void recoverKeys ( byte [ ] public_key , byte [ ] encrypted_private_key ) throws CryptoManagerException ; void resetKeys ( String reason ) throws CryptoManagerException ; String exportKeys ( ) throws CryptoManagerException ; int getDefaultPasswordHandlerType ( ) ; void setDefaultPasswordHandlerType ( int new_type ) throws CryptoManagerException ; / * * * * @param str * @return true if an Azureus restart is required * @throws CryptoManagerException * / boolean importKeys ( String str ) throws CryptoManagerException ; }
void test3 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . TEN ; ECPrivateKeyStructure eCPrivateKeyStructure0 = new ECPrivateKeyStructure ( bigInteger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ECPrivateKeyStructure ( ASN1Sequence seq ) { this . seq = seq ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; byteArray0 [ 0 ] = ( byte ) 90 ; DERApplicationSpecific dERApplicationSpecific0 = ( DERApplicationSpecific ) ASN1Object . fromByteArray ( byteArray0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 0 , ( DEREncodable ) dERApplicationSpecific0 ) ; DERSequence dERSequence0 = new DERSequence ( ( DEREncodable ) bERTaggedObject0 ) ; ECPrivateKeyStructure eCPrivateKeyStructure0 = new ECPrivateKeyStructure ( ( ASN1Sequence ) dERSequence0 ) ; DERApplicationSpecific dERApplicationSpecific1 = ( DERApplicationSpecific ) eCPrivateKeyStructure0 . getParameters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConstructed ( ) { return ( tag & DERTags . CONSTRUCTED ) ! = 0 ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; byteArray0 [ 0 ] = ( byte ) 90 ; DERApplicationSpecific dERApplicationSpecific0 = ( DERApplicationSpecific ) ASN1Object . fromByteArray ( byteArray0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 0 , ( DEREncodable ) dERApplicationSpecific0 ) ; DERSequence dERSequence0 = new DERSequence ( ( DEREncodable ) bERTaggedObject0 ) ; ECPrivateKeyStructure eCPrivateKeyStructure0 = new ECPrivateKeyStructure ( ( ASN1Sequence ) dERSequence0 ) ; DERBitString dERBitString0 = eCPrivateKeyStructure0 . getPublicKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getPublicKey ( String reason ) throws CryptoManagerException ; byte [ ] getEncryptedPrivateKey ( String reason ) throws CryptoManagerException ; boolean verifyPublicKey ( byte [ ] encoded ) ; void recoverKeys ( byte [ ] public_key , byte [ ] encrypted_private_key ) throws CryptoManagerException ; void resetKeys ( String reason ) throws CryptoManagerException ; String exportKeys ( ) throws CryptoManagerException ; int getDefaultPasswordHandlerType ( ) ; void setDefaultPasswordHandlerType ( int new_type ) throws CryptoManagerException ; / * * * * @param str * @return true if an Azureus restart is required * @throws CryptoManagerException * / boolean importKeys ( String str ) throws CryptoManagerException ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; X9Curve x9Curve0 = new X9Curve ( ( ECCurve ) null , byteArray0 ) ; byte [ ] byteArray1 = x9Curve0 . getSeed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getSeed ( ) { return seed ; }
void test1 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . TEN ; ECCurve . F2m eCCurve_F2m0 = new ECCurve . F2m ( 1941 , 1941 , bigInteger0 , bigInteger0 ) ; X9Curve x9Curve0 = new X9Curve ( ( ECCurve ) eCCurve_F2m0 ) ; ECCurve . F2m eCCurve_F2m1 = ( ECCurve . F2m ) x9Curve0 . getCurve ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ECCurve getCurve ( ) { return curve ; }
void test4 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . TEN ; ECCurve . F2m eCCurve_F2m0 = new ECCurve . F2m ( 1941 , 1941 , bigInteger0 , bigInteger0 ) ; X9Curve x9Curve0 = new X9Curve ( ( ECCurve ) eCCurve_F2m0 ) ; DERSequence dERSequence0 = ( DERSequence ) x9Curve0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test5 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ONE ; ECCurve . F2m eCCurve_F2m0 = new ECCurve . F2m ( 36 , 36 , bigInteger0 , bigInteger0 ) ; byte [ ] byteArray0 = new byte [ 5 ] ; X9Curve x9Curve0 = new X9Curve ( ( ECCurve ) eCCurve_F2m0 , byteArray0 ) ; DERSequence dERSequence0 = ( DERSequence ) x9Curve0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { BigInteger bigInteger0 = ECConstants . FOUR ; ECFieldElement . F2m eCFieldElement_F2m0 = new ECFieldElement . F2m ( 0 , 0 , bigInteger0 ) ; X9FieldElement x9FieldElement0 = new X9FieldElement ( ( ECFieldElement ) eCFieldElement_F2m0 ) ; ECFieldElement . F2m eCFieldElement_F2m1 = ( ECFieldElement . F2m ) x9FieldElement0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( String name , String [ ] params ) { return getValue ( name , params , true ) ; }
void test1 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . TEN ; X9FieldID x9FieldID0 = new X9FieldID ( ( DERObjectIdentifier ) null , bigInteger0 ) ; DERSequence dERSequence0 = ( DERSequence ) x9FieldID0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = X9ObjectIdentifiers . prime192v1 ; BigInteger bigInteger0 = BigInteger . ONE ; X9FieldID x9FieldID0 = new X9FieldID ( dERObjectIdentifier0 , bigInteger0 ) ; DERObjectIdentifier dERObjectIdentifier1 = x9FieldID0 . getIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test3 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = X9ObjectIdentifiers . prime192v1 ; BigInteger bigInteger0 = BigInteger . ONE ; X9FieldID x9FieldID0 = new X9FieldID ( dERObjectIdentifier0 , bigInteger0 ) ; DERInteger dERInteger0 = ( DERInteger ) x9FieldID0 . getParameters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { X962NamedCurves x962NamedCurves0 = new X962NamedCurves ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = X9ObjectIdentifiers . prime192v2 ; String string0 = X962NamedCurves . getName ( dERObjectIdentifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test2 ( ) throws Throwable { Enumeration < Object > enumeration0 = X962NamedCurves . getNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] getNames ( GeneralName [ ] names ) { List l = new ArrayList ( names . length ) ; for ( int i = 0 ; i ! = names . length ; i + + ) { if ( names [ i ] . getTagNo ( ) = = GeneralName . directoryName ) { try { l . add ( new X500Principal ( ( ( ASN1Encodable ) names [ i ] . getName ( ) ) . getEncoded ( ) ) ) ; } catch ( IOException e ) { throw new RuntimeException ( "badly formed Name object" ) ; } } } return l . toArray ( new Object [ l . size ( ) ] ) ; }
void test4 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = X962NamedCurves . getOID ( "1 . 2 . 840 . 10046 . 2 . 1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOID ( ) { return attr . getAttrType ( ) . getId ( ) ; }
void test5 ( ) throws Throwable { X9ECParameters x9ECParameters0 = X962NamedCurves . getByName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" X9ECParameters getByName ( String name ) { DERObjectIdentifier oid = ( DERObjectIdentifier ) objIds . get ( name ) ; if ( oid ! = null ) { return ( X9ECParameters ) curves . get ( oid ) ; } return null ; }
void test6 ( ) throws Throwable { X9ECParameters x9ECParameters0 = X962NamedCurves . getByName ( "prime192v2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" X9ECParameters getByName ( String name ) { DERObjectIdentifier oid = ( DERObjectIdentifier ) objIds . get ( name ) ; if ( oid ! = null ) { return ( X9ECParameters ) curves . get ( oid ) ; } return null ; }
void test1 ( ) throws Throwable { X9IntegerConverter x9IntegerConverter0 = new X9IntegerConverter ( ) ; BigInteger bigInteger0 = ECConstants . ONE ; ECFieldElement . F2m eCFieldElement_F2m0 = new ECFieldElement . F2m ( 1 , 0 , bigInteger0 ) ; int int0 = x9IntegerConverter0 . getByteLength ( ( ECFieldElement ) eCFieldElement_F2m0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getByteLength ( ECCurve c ) { return ( c . getFieldSize ( ) + 7 ) / 8 ; }
void test2 ( ) throws Throwable { X9IntegerConverter x9IntegerConverter0 = new X9IntegerConverter ( ) ; BigInteger bigInteger0 = BigInteger . ZERO ; byte [ ] byteArray0 = x9IntegerConverter0 . integerToBytes ( bigInteger0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] integerToBytes ( BigInteger s , int qLength ) { byte [ ] bytes = s . toByteArray ( ) ; if ( qLength < bytes . length ) { byte [ ] tmp = new byte [ qLength ] ; System . arraycopy ( bytes , bytes . length - tmp . length , tmp , 0 , tmp . length ) ; return tmp ; } else if ( qLength > bytes . length ) { byte [ ] tmp = new byte [ qLength ] ; System . arraycopy ( bytes , 0 , tmp , tmp . length - bytes . length , bytes . length ) ; return tmp ; } return bytes ; }
void test3 ( ) throws Throwable { X9IntegerConverter x9IntegerConverter0 = new X9IntegerConverter ( ) ; byte [ ] byteArray0 = new byte [ 2 ] ; BigInteger bigInteger0 = new BigInteger ( byteArray0 ) ; byte [ ] byteArray1 = x9IntegerConverter0 . integerToBytes ( bigInteger0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test4 ( ) throws Throwable { X9IntegerConverter x9IntegerConverter0 = new X9IntegerConverter ( ) ; BigInteger bigInteger0 = BigInteger . ONE ; byte [ ] byteArray0 = x9IntegerConverter0 . integerToBytes ( bigInteger0 , 20 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] integerToBytes ( BigInteger s , int qLength ) { byte [ ] bytes = s . toByteArray ( ) ; if ( qLength < bytes . length ) { byte [ ] tmp = new byte [ qLength ] ; System . arraycopy ( bytes , bytes . length - tmp . length , tmp , 0 , tmp . length ) ; return tmp ; } else if ( qLength > bytes . length ) { byte [ ] tmp = new byte [ qLength ] ; System . arraycopy ( bytes , 0 , tmp , tmp . length - bytes . length , bytes . length ) ; return tmp ; } return bytes ; }
void test0 ( ) throws Throwable { OtherInfo otherInfo0 = new OtherInfo ( ( KeySpecificInfo ) null , ( ASN1OctetString ) null , ( ASN1OctetString ) null ) ; ASN1OctetString aSN1OctetString0 = otherInfo0 . getPartyAInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASN1OctetString getPartyAInfo ( ) { return partyAInfo ; }
void test1 ( ) throws Throwable { OtherInfo otherInfo0 = new OtherInfo ( ( KeySpecificInfo ) null , ( ASN1OctetString ) null , ( ASN1OctetString ) null ) ; KeySpecificInfo keySpecificInfo0 = otherInfo0 . getKeyInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" KeySpecificInfo getKeyInfo ( ) { return keyInfo ; }
void test2 ( ) throws Throwable { OtherInfo otherInfo0 = new OtherInfo ( ( KeySpecificInfo ) null , ( ASN1OctetString ) null , ( ASN1OctetString ) null ) ; ASN1OctetString aSN1OctetString0 = otherInfo0 . getSuppPubInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASN1OctetString getSuppPubInfo ( ) { return suppPubInfo ; }
void test3 ( ) throws Throwable { OtherInfo otherInfo0 = new OtherInfo ( ( KeySpecificInfo ) null , ( ASN1OctetString ) null , ( ASN1OctetString ) null ) ; DERSequence dERSequence0 = ( DERSequence ) otherInfo0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { DEROctetString dEROctetString0 = new DEROctetString ( ( DEREncodable ) null ) ; OtherInfo otherInfo0 = new OtherInfo ( ( KeySpecificInfo ) null , ( ASN1OctetString ) dEROctetString0 , ( ASN1OctetString ) dEROctetString0 ) ; DERSequence dERSequence0 = ( DERSequence ) otherInfo0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { BigInteger bigInteger0 = ECConstants . ONE ; ECCurve . F2m eCCurve_F2m0 = new ECCurve . F2m ( 51 , ( - 2020 ) , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 ) ; ECPoint . F2m eCPoint_F2m0 = new ECPoint . F2m ( ( ECCurve ) eCCurve_F2m0 ) ; X9ECPoint x9ECPoint0 = new X9ECPoint ( ( ECPoint ) eCPoint_F2m0 ) ; ECPoint . F2m eCPoint_F2m1 = ( ECPoint . F2m ) x9ECPoint0 . getPoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInfinity ( ) { return x = = null & & y = = null ; }
void test1 ( ) throws Throwable { DEREnumerated dEREnumerated0 = new DEREnumerated ( 0 ) ; X962Parameters x962Parameters0 = new X962Parameters ( ( DERObject ) dEREnumerated0 ) ; DEREnumerated dEREnumerated1 = ( DEREnumerated ) x962Parameters0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERObject getDERObject ( ) { return this . toASN1Object ( ) ; }
void test2 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = X9ObjectIdentifiers . prime256v1 ; X962Parameters x962Parameters0 = new X962Parameters ( dERObjectIdentifier0 ) ; boolean boolean0 = x962Parameters0 . isNamedCurve ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNamedCurve ( ) { return ( params instanceof DERObjectIdentifier ) ; }
void test3 ( ) throws Throwable { DEREnumerated dEREnumerated0 = new DEREnumerated ( 0 ) ; X962Parameters x962Parameters0 = new X962Parameters ( ( DERObject ) dEREnumerated0 ) ; DEREnumerated dEREnumerated1 = ( DEREnumerated ) x962Parameters0 . getParameters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < ? , ? > getParameters ( ) { return parameters ; }
void test0 ( ) throws Throwable { BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DERObject ) null ) ; KeySpecificInfo keySpecificInfo0 = new KeySpecificInfo ( ( DERObjectIdentifier ) null , ( ASN1OctetString ) bERConstructedOctetString0 ) ; BERConstructedOctetString bERConstructedOctetString1 = ( BERConstructedOctetString ) keySpecificInfo0 . getCounter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASN1OctetString getCounter ( ) { return counter ; }
void test1 ( ) throws Throwable { BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DERObject ) null ) ; KeySpecificInfo keySpecificInfo0 = new KeySpecificInfo ( ( DERObjectIdentifier ) null , ( ASN1OctetString ) bERConstructedOctetString0 ) ; DERSequence dERSequence0 = ( DERSequence ) keySpecificInfo0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { KeySpecificInfo keySpecificInfo0 = new KeySpecificInfo ( ( DERObjectIdentifier ) null , ( ASN1OctetString ) null ) ; DERObjectIdentifier dERObjectIdentifier0 = keySpecificInfo0 . getAlgorithm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERObjectIdentifier getAlgorithm ( ) { return algorithm ; }
void test0 ( ) throws Throwable { BigInteger bigInteger0 = ECConstants . ZERO ; BigInteger bigInteger1 = BigInteger . TEN ; ECCurve . Fp eCCurve_Fp0 = new ECCurve . Fp ( bigInteger1 , bigInteger0 , bigInteger0 ) ; ECPoint . Fp eCPoint_Fp0 = ( ECPoint . Fp ) eCCurve_Fp0 . getInfinity ( ) ; X9ECParameters x9ECParameters0 = new X9ECParameters ( ( ECCurve ) eCCurve_Fp0 , ( ECPoint ) eCPoint_Fp0 , bigInteger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float floatValue ( ) { return Float . valueOf ( toString ( ) ) . floatValue ( ) ; }
void test1 ( ) throws Throwable { BigInteger bigInteger0 = ECConstants . ZERO ; BigInteger bigInteger1 = BigInteger . TEN ; ECCurve . Fp eCCurve_Fp0 = new ECCurve . Fp ( bigInteger1 , bigInteger0 , bigInteger0 ) ; ECPoint . Fp eCPoint_Fp0 = ( ECPoint . Fp ) eCCurve_Fp0 . getInfinity ( ) ; X9ECParameters x9ECParameters0 = new X9ECParameters ( ( ECCurve ) eCCurve_Fp0 , ( ECPoint ) eCPoint_Fp0 , bigInteger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int signum ( long diff ) { if ( diff > 0 ) { return 1 ; } if ( diff < 0 ) { return - 1 ; } return 0 ; }
void test2 ( ) throws Throwable { BigInteger bigInteger0 = ECConstants . ZERO ; BigInteger bigInteger1 = BigInteger . TEN ; ECCurve . Fp eCCurve_Fp0 = new ECCurve . Fp ( bigInteger1 , bigInteger0 , bigInteger0 ) ; ECPoint . Fp eCPoint_Fp0 = ( ECPoint . Fp ) eCCurve_Fp0 . getInfinity ( ) ; X9ECParameters x9ECParameters0 = new X9ECParameters ( ( ECCurve ) eCCurve_Fp0 , ( ECPoint ) eCPoint_Fp0 , bigInteger0 ) ; byte [ ] byteArray0 = x9ECParameters0 . getSeed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getSeed ( ) { return seed ; }
void test3 ( ) throws Throwable { BigInteger bigInteger0 = ECConstants . ZERO ; BigInteger bigInteger1 = BigInteger . TEN ; ECCurve . Fp eCCurve_Fp0 = new ECCurve . Fp ( bigInteger1 , bigInteger0 , bigInteger0 ) ; ECPoint . Fp eCPoint_Fp0 = ( ECPoint . Fp ) eCCurve_Fp0 . getInfinity ( ) ; X9ECParameters x9ECParameters0 = new X9ECParameters ( ( ECCurve ) eCCurve_Fp0 , ( ECPoint ) eCPoint_Fp0 , bigInteger0 , bigInteger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test4 ( ) throws Throwable { BigInteger bigInteger0 = ECConstants . ZERO ; BigInteger bigInteger1 = BigInteger . TEN ; ECCurve . Fp eCCurve_Fp0 = new ECCurve . Fp ( bigInteger1 , bigInteger0 , bigInteger0 ) ; ECPoint . Fp eCPoint_Fp0 = ( ECPoint . Fp ) eCCurve_Fp0 . getInfinity ( ) ; X9ECParameters x9ECParameters0 = new X9ECParameters ( ( ECCurve ) eCCurve_Fp0 , ( ECPoint ) eCPoint_Fp0 , bigInteger0 ) ; ECPoint . Fp eCPoint_Fp1 = ( ECPoint . Fp ) x9ECParameters0 . getG ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInfinity ( ) { return x = = null & & y = = null ; }
void test5 ( ) throws Throwable { BigInteger bigInteger0 = ECConstants . ZERO ; BigInteger bigInteger1 = BigInteger . TEN ; ECCurve . Fp eCCurve_Fp0 = new ECCurve . Fp ( bigInteger1 , bigInteger0 , bigInteger0 ) ; ECPoint . Fp eCPoint_Fp0 = ( ECPoint . Fp ) eCCurve_Fp0 . getInfinity ( ) ; X9ECParameters x9ECParameters0 = new X9ECParameters ( ( ECCurve ) eCCurve_Fp0 , ( ECPoint ) eCPoint_Fp0 , bigInteger0 ) ; ECCurve . Fp eCCurve_Fp1 = ( ECCurve . Fp ) x9ECParameters0 . getCurve ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ECCurve getCurve ( ) { return curve ; }
void test10 ( ) throws Throwable { BigInteger bigInteger0 = ECConstants . ZERO ; BigInteger bigInteger1 = BigInteger . TEN ; ECCurve . Fp eCCurve_Fp0 = new ECCurve . Fp ( bigInteger1 , bigInteger0 , bigInteger0 ) ; ECPoint . Fp eCPoint_Fp0 = ( ECPoint . Fp ) eCCurve_Fp0 . getInfinity ( ) ; X9ECParameters x9ECParameters0 = new X9ECParameters ( ( ECCurve ) eCCurve_Fp0 , ( ECPoint ) eCPoint_Fp0 , bigInteger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test0 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = CMSObjectIdentifiers . encryptedData ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , dERObjectIdentifier0 ) ; DERObjectIdentifier dERObjectIdentifier1 = ( DERObjectIdentifier ) contentInfo0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getContent ( ) ; void setProcessed ( ) ; boolean isProcessed ( ) ; void setData ( Object key , Object value ) ; Object getData ( Object key ) ; }
void test1 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = CMSObjectIdentifiers . encryptedData ; DERSequence dERSequence0 = new DERSequence ( ( DEREncodable ) dERObjectIdentifier0 ) ; ContentInfo contentInfo0 = new ContentInfo ( ( ASN1Sequence ) dERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test3 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = CMSObjectIdentifiers . encryptedData ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , dERObjectIdentifier0 ) ; ContentInfo contentInfo1 = ContentInfo . getInstance ( ( Object ) contentInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test6 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = CMSObjectIdentifiers . encryptedData ; DERSequence dERSequence0 = new DERSequence ( ( DEREncodable ) dERObjectIdentifier0 ) ; ContentInfo contentInfo0 = new ContentInfo ( ( ASN1Sequence ) dERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test7 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = CMSObjectIdentifiers . encryptedData ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , dERObjectIdentifier0 ) ; int int0 = contentInfo0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; CAST5CBCParameters cAST5CBCParameters0 = new CAST5CBCParameters ( byteArray0 , ( int ) ( byte ) 0 ) ; DERSequence dERSequence0 = ( DERSequence ) cAST5CBCParameters0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 7 ] ; CAST5CBCParameters cAST5CBCParameters0 = new CAST5CBCParameters ( byteArray0 , ( int ) ( byte ) 0 ) ; byte [ ] byteArray1 = cAST5CBCParameters0 . getIV ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKeyLength ( ) { return keyLength . getValue ( ) . intValue ( ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; CAST5CBCParameters cAST5CBCParameters0 = new CAST5CBCParameters ( byteArray0 , ( int ) ( byte ) 0 ) ; int int0 = cAST5CBCParameters0 . getKeyLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKeyLength ( ) { return keyLength . getValue ( ) . intValue ( ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; CAST5CBCParameters cAST5CBCParameters0 = new CAST5CBCParameters ( byteArray0 , ( - 1834 ) ) ; CAST5CBCParameters cAST5CBCParameters1 = CAST5CBCParameters . getInstance ( ( Object ) cAST5CBCParameters0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKeyLength ( ) { return keyLength . getValue ( ) . intValue ( ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; IDEACBCPar iDEACBCPar0 = new IDEACBCPar ( byteArray0 ) ; IDEACBCPar iDEACBCPar1 = IDEACBCPar . getInstance ( ( Object ) iDEACBCPar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test3 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; IDEACBCPar iDEACBCPar0 = new IDEACBCPar ( ( ASN1Sequence ) bERConstructedSequence0 ) ; byte [ ] byteArray0 = iDEACBCPar0 . getIV ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getIV ( ) { return iv . getOctets ( ) ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; IDEACBCPar iDEACBCPar0 = new IDEACBCPar ( byteArray0 ) ; byte [ ] byteArray1 = iDEACBCPar0 . getIV ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getIV ( ) { return iv . getOctets ( ) ; }
void test5 ( ) throws Throwable { BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; IDEACBCPar iDEACBCPar0 = new IDEACBCPar ( ( ASN1Sequence ) bERConstructedSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; IDEACBCPar iDEACBCPar0 = new IDEACBCPar ( byteArray0 ) ; DERSequence dERSequence0 = ( DERSequence ) iDEACBCPar0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; DERIA5String dERIA5String0 = new DERIA5String ( byteArray0 ) ; NetscapeRevocationURL netscapeRevocationURL0 = new NetscapeRevocationURL ( dERIA5String0 ) ; String string0 = netscapeRevocationURL0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; DERIA5String dERIA5String0 = new DERIA5String ( byteArray0 ) ; VerisignCzagExtension verisignCzagExtension0 = new VerisignCzagExtension ( dERIA5String0 ) ; String string0 = verisignCzagExtension0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { NetscapeCertType netscapeCertType0 = new NetscapeCertType ( 1127 ) ; String string0 = netscapeCertType0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { NetscapeCertType netscapeCertType0 = new NetscapeCertType ( 1127 ) ; NetscapeCertType netscapeCertType1 = new NetscapeCertType ( ( DERBitString ) netscapeCertType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test0 ( ) throws Throwable { CertificationRequest certificationRequest0 = new CertificationRequest ( ) ; DERSequence dERSequence0 = ( DERSequence ) certificationRequest0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test1 ( ) throws Throwable { CertificationRequest certificationRequest0 = new CertificationRequest ( ) ; AlgorithmIdentifier algorithmIdentifier0 = certificationRequest0 . getSignatureAlgorithm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AlgorithmIdentifier getSignatureAlgorithm ( ) { return sigAlgId ; }
void test2 ( ) throws Throwable { CertificationRequest certificationRequest0 = new CertificationRequest ( ) ; DERBitString dERBitString0 = certificationRequest0 . getSignature ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Signature getSignature ( Key key ) throws CryptoManagerException { try { Signature ECCsig = Signature . getInstance ( "SHA1withECDSA" , "BC" ) ; if ( key instanceof ECPrivateKey ) { ECCsig . initSign ( ( ECPrivateKey ) key ) ; } else if ( key instanceof ECPublicKey ) { ECCsig . initVerify ( ( ECPublicKey ) key ) ; } else { throw new CryptoManagerException ( "Invalid Key Type , ECC keys required" ) ; } return ECCsig ; } catch ( CryptoManagerException e ) { throw ( e ) ; } catch ( Throwable e ) { throw ( new CryptoManagerException ( "Failed to create Signature" , e ) ) ; } }
void test3 ( ) throws Throwable { CertificationRequest certificationRequest0 = new CertificationRequest ( ) ; CertificationRequestInfo certificationRequestInfo0 = certificationRequest0 . getCertificationRequestInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CertificationRequestInfo getCertificationRequestInfo ( ) { return reqInfo ; }
void test4 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = X509Name . E ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( dERObjectIdentifier0 ) ; CertificationRequest certificationRequest0 = new CertificationRequest ( ( CertificationRequestInfo ) null , algorithmIdentifier0 , ( DERBitString ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CertificationRequest ( ) { }
void test0 ( ) throws Throwable { Vector < String > vector0 = new Vector < String > ( ) ; X509Name x509Name0 = new X509Name ( ( Vector ) vector0 , ( Hashtable ) null ) ; SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo ( ( AlgorithmIdentifier ) null , ( DEREncodable ) null ) ; DERSet dERSet0 = new DERSet ( ( DEREncodable ) null ) ; CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo ( x509Name0 , subjectPublicKeyInfo0 , ( ASN1Set ) dERSet0 ) ; X509Name x509Name1 = certificationRequestInfo0 . getSubject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" X509Name getSubject ( ) { return tbsCert . getSubject ( ) ; }
void test1 ( ) throws Throwable { Vector < String > vector0 = new Vector < String > ( ) ; X509Name x509Name0 = new X509Name ( ( Vector ) vector0 , ( Hashtable ) null ) ; SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo ( ( AlgorithmIdentifier ) null , ( DEREncodable ) null ) ; DERSet dERSet0 = new DERSet ( ( DEREncodable ) null ) ; CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo ( x509Name0 , subjectPublicKeyInfo0 , ( ASN1Set ) dERSet0 ) ; DERSet dERSet1 = ( DERSet ) certificationRequestInfo0 . getAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" X509Attribute [ ] getAttributes ( ) ; / * * * Return the attributes with the same type as the passed in oid . * * @param oid the object identifier we wish to match . * @return an array of matched attributes , null if there is no match . * / X509Attribute [ ] getAttributes ( String oid ) ; boolean [ ] getIssuerUniqueID ( ) ; void checkValidity ( ) throws CertificateExpiredException , CertificateNotYetValidException ; void checkValidity ( Date date ) throws CertificateExpiredException , CertificateNotYetValidException ; byte [ ] getSignature ( ) ; void verify ( PublicKey key , String provider ) throws CertificateException , NoSuchAlgorithmException , InvalidKeyException , NoSuchProviderException , SignatureException ; / * * * Return an ASN . 1 encoded byte array representing the attribute certificate . * * @return an ASN . 1 encoded byte array . * @throws IOException if the certificate cannot be encoded . * / byte [ ] getEncoded ( ) throws IOException ; }
void test2 ( ) throws Throwable { Vector < String > vector0 = new Vector < String > ( ) ; X509Name x509Name0 = new X509Name ( ( Vector ) vector0 , ( Hashtable ) null ) ; SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo ( ( AlgorithmIdentifier ) null , ( DEREncodable ) null ) ; DERSet dERSet0 = new DERSet ( ( DEREncodable ) null ) ; CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo ( x509Name0 , subjectPublicKeyInfo0 , ( ASN1Set ) dERSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { Vector < String > vector0 = new Vector < String > ( ) ; X509Name x509Name0 = new X509Name ( ( Vector ) vector0 , ( Hashtable ) null ) ; SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo ( ( AlgorithmIdentifier ) null , ( DEREncodable ) null ) ; DERSet dERSet0 = new DERSet ( ( DEREncodable ) null ) ; CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo ( x509Name0 , subjectPublicKeyInfo0 , ( ASN1Set ) dERSet0 ) ; SubjectPublicKeyInfo subjectPublicKeyInfo1 = certificationRequestInfo0 . getSubjectPublicKeyInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SubjectPublicKeyInfo getSubjectPublicKeyInfo ( ) { return tbsCert . getSubjectPublicKeyInfo ( ) ; }
void test8 ( ) throws Throwable { Vector < String > vector0 = new Vector < String > ( ) ; X509Name x509Name0 = new X509Name ( ( Vector ) vector0 , ( Hashtable ) null ) ; SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo ( ( AlgorithmIdentifier ) null , ( DEREncodable ) null ) ; CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo ( x509Name0 , subjectPublicKeyInfo0 , ( ASN1Set ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test9 ( ) throws Throwable { Vector < String > vector0 = new Vector < String > ( ) ; X509Name x509Name0 = new X509Name ( ( Vector ) vector0 , ( Hashtable ) null ) ; SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo ( ( AlgorithmIdentifier ) null , ( DEREncodable ) null ) ; DERSet dERSet0 = new DERSet ( ( DEREncodable ) null ) ; CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo ( x509Name0 , subjectPublicKeyInfo0 , ( ASN1Set ) dERSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test0 ( ) throws Throwable { Vector < DERInteger > vector0 = new Vector < DERInteger > ( ) ; X509Name x509Name0 = new X509Name ( vector0 , vector0 ) ; byte [ ] byteArray0 = new byte [ 10 ] ; DERInteger dERInteger0 = new DERInteger ( byteArray0 ) ; IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber ( x509Name0 , dERInteger0 ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Name . COUNTRY_OF_RESIDENCE ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( dERObjectIdentifier0 , ( DEREncodable ) dERInteger0 ) ; DERSet dERSet0 = new DERSet ( ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DEREncodable ) algorithmIdentifier0 ) ; SignerInfo signerInfo0 = new SignerInfo ( dERInteger0 , issuerAndSerialNumber0 , algorithmIdentifier0 , ( ASN1Set ) null , algorithmIdentifier0 , ( ASN1OctetString ) bERConstructedOctetString0 , ( ASN1Set ) dERSet0 ) ; IssuerAndSerialNumber issuerAndSerialNumber1 = signerInfo0 . getIssuerAndSerialNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IssuerAndSerialNumber getIssuerAndSerialNumber ( ) { return issuerAndSerialNumber ; }
void test1 ( ) throws Throwable { Vector < DERInteger > vector0 = new Vector < DERInteger > ( ) ; X509Name x509Name0 = new X509Name ( vector0 , vector0 ) ; byte [ ] byteArray0 = new byte [ 10 ] ; DERInteger dERInteger0 = new DERInteger ( byteArray0 ) ; IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber ( x509Name0 , dERInteger0 ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Name . COUNTRY_OF_RESIDENCE ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( dERObjectIdentifier0 , ( DEREncodable ) dERInteger0 ) ; DERSet dERSet0 = new DERSet ( ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DEREncodable ) algorithmIdentifier0 ) ; SignerInfo signerInfo0 = new SignerInfo ( dERInteger0 , issuerAndSerialNumber0 , algorithmIdentifier0 , ( ASN1Set ) dERSet0 , algorithmIdentifier0 , ( ASN1OctetString ) bERConstructedOctetString0 , ( ASN1Set ) dERSet0 ) ; AlgorithmIdentifier algorithmIdentifier1 = signerInfo0 . getDigestAlgorithm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDigestAlgorithm ( ) { if ( holder . getObjectDigestInfo ( ) ! = null ) { holder . getObjectDigestInfo ( ) . getDigestAlgorithm ( ) . getObjectId ( ) . getId ( ) ; } return null ; }
void test2 ( ) throws Throwable { Vector < DERInteger > vector0 = new Vector < DERInteger > ( ) ; X509Name x509Name0 = new X509Name ( vector0 , vector0 ) ; byte [ ] byteArray0 = new byte [ 10 ] ; DERInteger dERInteger0 = new DERInteger ( byteArray0 ) ; IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber ( x509Name0 , dERInteger0 ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Name . COUNTRY_OF_RESIDENCE ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( dERObjectIdentifier0 , ( DEREncodable ) dERInteger0 ) ; DERSet dERSet0 = new DERSet ( ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DEREncodable ) algorithmIdentifier0 ) ; SignerInfo signerInfo0 = new SignerInfo ( dERInteger0 , issuerAndSerialNumber0 , algorithmIdentifier0 , ( ASN1Set ) null , algorithmIdentifier0 , ( ASN1OctetString ) bERConstructedOctetString0 , ( ASN1Set ) dERSet0 ) ; BERConstructedOctetString bERConstructedOctetString1 = ( BERConstructedOctetString ) signerInfo0 . getEncryptedDigest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { Vector < DERInteger > vector0 = new Vector < DERInteger > ( ) ; X509Name x509Name0 = new X509Name ( vector0 , vector0 ) ; byte [ ] byteArray0 = new byte [ 10 ] ; DERInteger dERInteger0 = new DERInteger ( byteArray0 ) ; IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber ( x509Name0 , dERInteger0 ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Name . COUNTRY_OF_RESIDENCE ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( dERObjectIdentifier0 , ( DEREncodable ) dERInteger0 ) ; DERSet dERSet0 = new DERSet ( ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DEREncodable ) algorithmIdentifier0 ) ; SignerInfo signerInfo0 = new SignerInfo ( dERInteger0 , issuerAndSerialNumber0 , algorithmIdentifier0 , ( ASN1Set ) dERSet0 , algorithmIdentifier0 , ( ASN1OctetString ) bERConstructedOctetString0 , ( ASN1Set ) dERSet0 ) ; AlgorithmIdentifier algorithmIdentifier1 = signerInfo0 . getDigestEncryptionAlgorithm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AlgorithmIdentifier getDigestEncryptionAlgorithm ( ) { return digEncryptionAlgorithm ; }
void test4 ( ) throws Throwable { Vector < DERInteger > vector0 = new Vector < DERInteger > ( ) ; X509Name x509Name0 = new X509Name ( vector0 , vector0 ) ; byte [ ] byteArray0 = new byte [ 10 ] ; DERInteger dERInteger0 = new DERInteger ( byteArray0 ) ; IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber ( x509Name0 , dERInteger0 ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Name . COUNTRY_OF_RESIDENCE ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( dERObjectIdentifier0 , ( DEREncodable ) dERInteger0 ) ; DERSet dERSet0 = new DERSet ( ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DEREncodable ) algorithmIdentifier0 ) ; SignerInfo signerInfo0 = new SignerInfo ( dERInteger0 , issuerAndSerialNumber0 , algorithmIdentifier0 , ( ASN1Set ) dERSet0 , algorithmIdentifier0 , ( ASN1OctetString ) bERConstructedOctetString0 , ( ASN1Set ) dERSet0 ) ; DERSet dERSet1 = ( DERSet ) signerInfo0 . getUnauthenticatedAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASN1Set getUnauthenticatedAttributes ( ) { return unauthenticatedAttributes ; }
void test5 ( ) throws Throwable { Vector < DERInteger > vector0 = new Vector < DERInteger > ( ) ; X509Name x509Name0 = new X509Name ( vector0 , vector0 ) ; byte [ ] byteArray0 = new byte [ 10 ] ; DERInteger dERInteger0 = new DERInteger ( byteArray0 ) ; IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber ( x509Name0 , dERInteger0 ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Name . COUNTRY_OF_RESIDENCE ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( dERObjectIdentifier0 , ( DEREncodable ) dERInteger0 ) ; DERSet dERSet0 = new DERSet ( ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DEREncodable ) algorithmIdentifier0 ) ; SignerInfo signerInfo0 = new SignerInfo ( dERInteger0 , issuerAndSerialNumber0 , algorithmIdentifier0 , ( ASN1Set ) null , algorithmIdentifier0 , ( ASN1OctetString ) bERConstructedOctetString0 , ( ASN1Set ) dERSet0 ) ; DERSet dERSet1 = ( DERSet ) signerInfo0 . getAuthenticatedAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASN1Set getAuthenticatedAttributes ( ) { return authenticatedAttributes ; }
void test6 ( ) throws Throwable { Vector < DERInteger > vector0 = new Vector < DERInteger > ( ) ; X509Name x509Name0 = new X509Name ( vector0 , vector0 ) ; byte [ ] byteArray0 = new byte [ 10 ] ; DERInteger dERInteger0 = new DERInteger ( byteArray0 ) ; IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber ( x509Name0 , dERInteger0 ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Name . COUNTRY_OF_RESIDENCE ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( dERObjectIdentifier0 , ( DEREncodable ) dERInteger0 ) ; DERSet dERSet0 = new DERSet ( ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DEREncodable ) algorithmIdentifier0 ) ; SignerInfo signerInfo0 = new SignerInfo ( dERInteger0 , issuerAndSerialNumber0 , algorithmIdentifier0 , ( ASN1Set ) null , algorithmIdentifier0 , ( ASN1OctetString ) bERConstructedOctetString0 , ( ASN1Set ) dERSet0 ) ; DERInteger dERInteger1 = signerInfo0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test9 ( ) throws Throwable { Vector < DERInteger > vector0 = new Vector < DERInteger > ( ) ; X509Name x509Name0 = new X509Name ( vector0 , vector0 ) ; byte [ ] byteArray0 = new byte [ 10 ] ; DERInteger dERInteger0 = new DERInteger ( byteArray0 ) ; IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber ( x509Name0 , dERInteger0 ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Name . COUNTRY_OF_RESIDENCE ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( dERObjectIdentifier0 , ( DEREncodable ) dERInteger0 ) ; DERSet dERSet0 = new DERSet ( ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DEREncodable ) algorithmIdentifier0 ) ; SignerInfo signerInfo0 = new SignerInfo ( dERInteger0 , issuerAndSerialNumber0 , algorithmIdentifier0 , ( ASN1Set ) null , algorithmIdentifier0 , ( ASN1OctetString ) bERConstructedOctetString0 , ( ASN1Set ) dERSet0 ) ; DERSequence dERSequence0 = ( DERSequence ) signerInfo0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test10 ( ) throws Throwable { Vector < DERInteger > vector0 = new Vector < DERInteger > ( ) ; X509Name x509Name0 = new X509Name ( vector0 , vector0 ) ; byte [ ] byteArray0 = new byte [ 10 ] ; DERInteger dERInteger0 = new DERInteger ( byteArray0 ) ; IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber ( x509Name0 , dERInteger0 ) ; DERObjectIdentifier dERObjectIdentifier0 = X509Name . COUNTRY_OF_RESIDENCE ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( dERObjectIdentifier0 , ( DEREncodable ) dERInteger0 ) ; DERSet dERSet0 = new DERSet ( ) ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( ( DEREncodable ) algorithmIdentifier0 ) ; SignerInfo signerInfo0 = new SignerInfo ( dERInteger0 , issuerAndSerialNumber0 , algorithmIdentifier0 , ( ASN1Set ) dERSet0 , algorithmIdentifier0 , ( ASN1OctetString ) bERConstructedOctetString0 , ( ASN1Set ) dERSet0 ) ; DERSequence dERSequence0 = ( DERSequence ) signerInfo0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test0 ( ) throws Throwable { CertBag certBag0 = new CertBag ( ( DERObjectIdentifier ) null , ( DERObject ) null ) ; DERObject dERObject0 = certBag0 . getCertValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERObject getCertValue ( ) { return certValue ; }
void test2 ( ) throws Throwable { CertBag certBag0 = new CertBag ( ( DERObjectIdentifier ) null , ( DERObject ) null ) ; DERObjectIdentifier dERObjectIdentifier0 = certBag0 . getCertId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERObjectIdentifier getCertId ( ) { return certId ; }
void test3 ( ) throws Throwable { CertBag certBag0 = new CertBag ( ( DERObjectIdentifier ) null , ( DERObject ) null ) ; DERSequence dERSequence0 = ( DERSequence ) certBag0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { Vector < ASN1Sequence > vector0 = new Vector < ASN1Sequence > ( ) ; Hashtable < Object , Object > hashtable0 = X509Name . DefaultSymbols ; X509DefaultEntryConverter x509DefaultEntryConverter0 = new X509DefaultEntryConverter ( ) ; X509Name x509Name0 = new X509Name ( ( Vector ) vector0 , ( Hashtable ) hashtable0 , ( X509NameEntryConverter ) x509DefaultEntryConverter0 ) ; BigInteger bigInteger0 = BigInteger . ZERO ; IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber ( x509Name0 , bigInteger0 ) ; DERInteger dERInteger0 = issuerAndSerialNumber0 . getCertificateSerialNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { Vector < DERInteger > vector0 = new Vector < DERInteger > ( ) ; X509DefaultEntryConverter x509DefaultEntryConverter0 = new X509DefaultEntryConverter ( ) ; X509Name x509Name0 = new X509Name ( ( Vector ) vector0 , ( Vector ) vector0 , ( X509NameEntryConverter ) x509DefaultEntryConverter0 ) ; BigInteger bigInteger0 = BigInteger . TEN ; IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber ( x509Name0 , bigInteger0 ) ; X509Name x509Name1 = issuerAndSerialNumber0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test2 ( ) throws Throwable { Vector < DERInteger > vector0 = new Vector < DERInteger > ( ) ; X509DefaultEntryConverter x509DefaultEntryConverter0 = new X509DefaultEntryConverter ( ) ; X509Name x509Name0 = new X509Name ( ( Vector ) vector0 , ( Vector ) vector0 , ( X509NameEntryConverter ) x509DefaultEntryConverter0 ) ; BigInteger bigInteger0 = BigInteger . TEN ; IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber ( x509Name0 , bigInteger0 ) ; DERSequence dERSequence0 = ( DERSequence ) issuerAndSerialNumber0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test5 ( ) throws Throwable { Vector < DERInteger > vector0 = new Vector < DERInteger > ( ) ; X509Name x509Name0 = new X509Name ( vector0 , vector0 ) ; byte [ ] byteArray0 = new byte [ 5 ] ; DERInteger dERInteger0 = new DERInteger ( byteArray0 ) ; IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber ( x509Name0 , dERInteger0 ) ; IssuerAndSerialNumber issuerAndSerialNumber1 = IssuerAndSerialNumber . getInstance ( ( Object ) issuerAndSerialNumber0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test0 ( ) throws Throwable { AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; EncryptedData encryptedData0 = new EncryptedData ( ( DERObjectIdentifier ) null , algorithmIdentifier0 , ( DEREncodable ) null ) ; DERObjectIdentifier dERObjectIdentifier0 = encryptedData0 . getContentType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContentType ( ) ; void setContentType ( String contentType ) ; String getName ( ) ; long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test1 ( ) throws Throwable { AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; EncryptedData encryptedData0 = new EncryptedData ( ( DERObjectIdentifier ) null , algorithmIdentifier0 , ( DEREncodable ) null ) ; BERSequence bERSequence0 = ( BERSequence ) encryptedData0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; EncryptedData encryptedData0 = new EncryptedData ( ( DERObjectIdentifier ) null , algorithmIdentifier0 , ( DEREncodable ) null ) ; AlgorithmIdentifier algorithmIdentifier1 = encryptedData0 . getEncryptionAlgorithm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AlgorithmIdentifier getEncryptionAlgorithm ( ) { return algId ; }
void test7 ( ) throws Throwable { AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; EncryptedData encryptedData0 = new EncryptedData ( ( DERObjectIdentifier ) null , algorithmIdentifier0 , ( DEREncodable ) null ) ; BERSequence bERSequence0 = new BERSequence ( ) ; encryptedData0 . data = ( org . bouncycastle . asn1 . ASN1Sequence ) bERSequence0 ; ASN1OctetString aSN1OctetString0 = encryptedData0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getContent ( ) ; void setProcessed ( ) ; boolean isProcessed ( ) ; void setData ( Object key , Object value ) ; Object getData ( Object key ) ; }
void test8 ( ) throws Throwable { AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; EncryptedData encryptedData0 = new EncryptedData ( ( DERObjectIdentifier ) null , algorithmIdentifier0 , ( DEREncodable ) null ) ; ASN1OctetString aSN1OctetString0 = encryptedData0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getContent ( ) ; void setProcessed ( ) ; boolean isProcessed ( ) ; void setData ( Object key , Object value ) ; Object getData ( Object key ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; PKCS12PBEParams pKCS12PBEParams0 = new PKCS12PBEParams ( byteArray0 , ( - 1954 ) ) ; DERSequence dERSequence0 = ( DERSequence ) pKCS12PBEParams0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; PKCS12PBEParams pKCS12PBEParams0 = new PKCS12PBEParams ( byteArray0 , ( int ) ( byte ) ( - 38 ) ) ; byte [ ] byteArray1 = pKCS12PBEParams0 . getIV ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getIV ( ) { return iv . getOctets ( ) ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; PKCS12PBEParams pKCS12PBEParams0 = new PKCS12PBEParams ( byteArray0 , ( int ) ( byte ) ( - 38 ) ) ; BigInteger bigInteger0 = pKCS12PBEParams0 . getIterations ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; PKCS12PBEParams pKCS12PBEParams0 = new PKCS12PBEParams ( byteArray0 , ( - 1954 ) ) ; PKCS12PBEParams pKCS12PBEParams1 = PKCS12PBEParams . getInstance ( ( Object ) pKCS12PBEParams0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test0 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ONE ; DHParameter dHParameter0 = new DHParameter ( bigInteger0 , bigInteger0 , 313 ) ; BigInteger bigInteger1 = dHParameter0 . getP ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long longValue ( ) { return floor ( ) . longValue ( ) ; }
void test1 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ONE ; DHParameter dHParameter0 = new DHParameter ( bigInteger0 , bigInteger0 , 313 ) ; BigInteger bigInteger1 = dHParameter0 . getG ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float floatValue ( ) { return Float . valueOf ( toString ( ) ) . floatValue ( ) ; }
void test2 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ZERO ; DHParameter dHParameter0 = new DHParameter ( bigInteger0 , bigInteger0 , 0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 1752 ) , ( DEREncodable ) dHParameter0 ) ; DERSequence dERSequence0 = ( DERSequence ) ASN1Sequence . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . ZERO ; DHParameter dHParameter0 = new DHParameter ( bigInteger0 , bigInteger0 , ( - 1752 ) ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( ( - 1752 ) , ( DEREncodable ) dHParameter0 ) ; DERSequence dERSequence0 = ( DERSequence ) ASN1Sequence . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . pkcs_9_at_extendedCertificateAttributes ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( dERObjectIdentifier0 ) ; byte [ ] byteArray0 = new byte [ 10 ] ; EncryptedPrivateKeyInfo encryptedPrivateKeyInfo0 = new EncryptedPrivateKeyInfo ( algorithmIdentifier0 , byteArray0 ) ; AlgorithmIdentifier algorithmIdentifier1 = encryptedPrivateKeyInfo0 . getEncryptionAlgorithm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AlgorithmIdentifier getEncryptionAlgorithm ( ) { return algId ; }
void test1 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . preferSignedData ; AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier ( dERObjectIdentifier0 , dERObjectIdentifier0 ) ; byte [ ] byteArray0 = new byte [ 7 ] ; EncryptedPrivateKeyInfo encryptedPrivateKeyInfo0 = new EncryptedPrivateKeyInfo ( algorithmIdentifier0 , byteArray0 ) ; DERSequence dERSequence0 = ( DERSequence ) encryptedPrivateKeyInfo0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; EncryptedPrivateKeyInfo encryptedPrivateKeyInfo0 = new EncryptedPrivateKeyInfo ( ( AlgorithmIdentifier ) null , byteArray0 ) ; byte [ ] byteArray1 = encryptedPrivateKeyInfo0 . getEncryptedData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getEncryptedData ( ) { return data . getOctets ( ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; RC2CBCParameter rC2CBCParameter0 = new RC2CBCParameter ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RC2CBCParameter ( byte [ ] iv ) { this . version = null ; this . iv = new DEROctetString ( iv ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; RC2CBCParameter rC2CBCParameter0 = new RC2CBCParameter ( 1329 , byteArray0 ) ; byte [ ] byteArray1 = rC2CBCParameter0 . getIV ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getIV ( ) { return iv . getOctets ( ) ; }
void test4 ( ) throws Throwable { BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) null ) ; RC2CBCParameter rC2CBCParameter0 = new RC2CBCParameter ( ( ASN1Sequence ) bERSequence0 ) ; BigInteger bigInteger0 = rC2CBCParameter0 . getRC2ParameterVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigInteger getRC2ParameterVersion ( ) { if ( version = = null ) { return null ; } return version . getValue ( ) ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; RC2CBCParameter rC2CBCParameter0 = new RC2CBCParameter ( ( int ) ( byte ) 15 , byteArray0 ) ; BigInteger bigInteger0 = rC2CBCParameter0 . getRC2ParameterVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float floatValue ( ) { return Float . valueOf ( toString ( ) ) . floatValue ( ) ; }
void test6 ( ) throws Throwable { BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) null ) ; RC2CBCParameter rC2CBCParameter0 = new RC2CBCParameter ( ( ASN1Sequence ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; RC2CBCParameter rC2CBCParameter0 = new RC2CBCParameter ( 496 , byteArray0 ) ; DERSequence dERSequence0 = ( DERSequence ) rC2CBCParameter0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( ( - 637 ) , ( DEREncodable ) null ) ; AlgorithmIdentifier algorithmIdentifier0 = AlgorithmIdentifier . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; DERSet dERSet0 = new DERSet ( dEREncodableVector0 ) ; PrivateKeyInfo privateKeyInfo0 = new PrivateKeyInfo ( algorithmIdentifier0 , ( DERObject ) dERTaggedObject0 , ( ASN1Set ) dERSet0 ) ; DERTaggedObject dERTaggedObject1 = ( DERTaggedObject ) privateKeyInfo0 . getPrivateKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExplicit ( ) { return explicit ; }
void test1 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( ( - 637 ) , ( DEREncodable ) null ) ; AlgorithmIdentifier algorithmIdentifier0 = AlgorithmIdentifier . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; DERSet dERSet0 = new DERSet ( dEREncodableVector0 ) ; PrivateKeyInfo privateKeyInfo0 = new PrivateKeyInfo ( algorithmIdentifier0 , ( DERObject ) dERTaggedObject0 , ( ASN1Set ) dERSet0 ) ; DERSet dERSet1 = ( DERSet ) privateKeyInfo0 . getAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( ( - 637 ) , ( DEREncodable ) null ) ; AlgorithmIdentifier algorithmIdentifier0 = AlgorithmIdentifier . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; DERSet dERSet0 = new DERSet ( dEREncodableVector0 ) ; PrivateKeyInfo privateKeyInfo0 = new PrivateKeyInfo ( algorithmIdentifier0 , ( DERObject ) dERTaggedObject0 , ( ASN1Set ) dERSet0 ) ; AlgorithmIdentifier algorithmIdentifier1 = privateKeyInfo0 . getAlgorithmId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AlgorithmIdentifier getAlgorithmId ( ) { return algId ; }
void test5 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( ( - 637 ) , ( DEREncodable ) null ) ; AlgorithmIdentifier algorithmIdentifier0 = AlgorithmIdentifier . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; DERSet dERSet0 = new DERSet ( dEREncodableVector0 ) ; PrivateKeyInfo privateKeyInfo0 = new PrivateKeyInfo ( algorithmIdentifier0 , ( DERObject ) dERTaggedObject0 , ( ASN1Set ) dERSet0 ) ; PrivateKeyInfo privateKeyInfo1 = PrivateKeyInfo . getInstance ( ( Object ) privateKeyInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test7 ( ) throws Throwable { DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( ( - 637 ) , ( DEREncodable ) null ) ; AlgorithmIdentifier algorithmIdentifier0 = AlgorithmIdentifier . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; DERSet dERSet0 = new DERSet ( dEREncodableVector0 ) ; PrivateKeyInfo privateKeyInfo0 = new PrivateKeyInfo ( algorithmIdentifier0 , ( DERObject ) dERTaggedObject0 , ( ASN1Set ) dERSet0 ) ; int int0 = privateKeyInfo0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test0 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . TEN ; RSAPrivateKeyStructure rSAPrivateKeyStructure0 = new RSAPrivateKeyStructure ( bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 ) ; int int0 = rSAPrivateKeyStructure0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test1 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . TEN ; RSAPrivateKeyStructure rSAPrivateKeyStructure0 = new RSAPrivateKeyStructure ( bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( true , 0 , ( DEREncodable ) rSAPrivateKeyStructure0 ) ; RSAPrivateKeyStructure rSAPrivateKeyStructure1 = RSAPrivateKeyStructure . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test2 ( ) throws Throwable { BigInteger bigInteger0 = BigInteger . TEN ; RSAPrivateKeyStructure rSAPrivateKeyStructure0 = new RSAPrivateKeyStructure ( bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 ) ; RSAPrivateKeyStructure rSAPrivateKeyStructure1 = RSAPrivateKeyStructure . getInstance ( ( Object ) rSAPrivateKeyStructure0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test0 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . pkcs_9_at_extendedCertificateAttributes ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , dERObjectIdentifier0 ) ; Pfx pfx0 = new Pfx ( contentInfo0 , ( MacData ) null ) ; MacData macData0 = pfx0 . getMacData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MacData getMacData ( ) { return macData ; }
void test1 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . pkcs_9_at_unstructuredName ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , dERObjectIdentifier0 ) ; byte [ ] byteArray0 = new byte [ 17 ] ; DigestInfo digestInfo0 = new DigestInfo ( ( AlgorithmIdentifier ) null , byteArray0 ) ; MacData macData0 = new MacData ( digestInfo0 , byteArray0 , ( int ) ( byte ) 0 ) ; Pfx pfx0 = new Pfx ( contentInfo0 , macData0 ) ; ContentInfo contentInfo1 = pfx0 . getAuthSafe ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ContentInfo getAuthSafe ( ) { return contentInfo ; }
void test2 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . pkcs_9_at_extendedCertificateAttributes ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , dERObjectIdentifier0 ) ; Pfx pfx0 = new Pfx ( contentInfo0 , ( MacData ) null ) ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( false , ( - 1 ) , ( DEREncodable ) pfx0 ) ; BERSequence bERSequence0 = ( BERSequence ) ASN1Sequence . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; Pfx pfx1 = new Pfx ( ( ASN1Sequence ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test3 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . pkcs_9_at_unstructuredName ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , dERObjectIdentifier0 ) ; byte [ ] byteArray0 = new byte [ 17 ] ; DigestInfo digestInfo0 = new DigestInfo ( ( AlgorithmIdentifier ) null , byteArray0 ) ; MacData macData0 = new MacData ( digestInfo0 , byteArray0 , ( int ) ( byte ) 0 ) ; Pfx pfx0 = new Pfx ( contentInfo0 , macData0 ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( 0 , ( DEREncodable ) pfx0 ) ; BERSequence bERSequence0 = ( BERSequence ) ASN1Sequence . getInstance ( ( ASN1TaggedObject ) bERTaggedObject0 , true ) ; Pfx pfx1 = new Pfx ( ( ASN1Sequence ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test0 ( ) throws Throwable { ContentInfo [ ] contentInfoArray0 = new ContentInfo [ 1 ] ; AuthenticatedSafe authenticatedSafe0 = new AuthenticatedSafe ( contentInfoArray0 ) ; ContentInfo [ ] contentInfoArray1 = authenticatedSafe0 . getContentInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ContentInfo getContentInfo ( ) { return contentInfo ; }
void test1 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERSequence bERSequence0 = new BERSequence ( dEREncodableVector0 ) ; AuthenticatedSafe authenticatedSafe0 = new AuthenticatedSafe ( ( ASN1Sequence ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AuthenticatedSafe ( ASN1Sequence seq ) { info = new ContentInfo [ seq . size ( ) ] ; for ( int i = 0 ; i ! = info . length ; i + + ) { info [ i ] = ContentInfo . getInstance ( seq . getObjectAt ( i ) ) ; } }
void test3 ( ) throws Throwable { ContentInfo [ ] contentInfoArray0 = new ContentInfo [ 1 ] ; AuthenticatedSafe authenticatedSafe0 = new AuthenticatedSafe ( contentInfoArray0 ) ; BERSequence bERSequence0 = ( BERSequence ) authenticatedSafe0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ( DERObjectIdentifier ) null , ( ASN1Set ) null ) ; ASN1Set aSN1Set0 = attribute0 . getAttrValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASN1Set getAttrValues ( ) { return attrValues ; }
void test2 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ) ; Attribute attribute0 = new Attribute ( ( DERObjectIdentifier ) null , ( ASN1Set ) bERSet0 ) ; DERSequence dERSequence0 = ( DERSequence ) attribute0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ( DERObjectIdentifier ) null , ( ASN1Set ) null ) ; DERObjectIdentifier dERObjectIdentifier0 = attribute0 . getAttrType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERObjectIdentifier getAttrType ( ) { return attrType ; }
void test4 ( ) throws Throwable { Attribute attribute0 = Attribute . getInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { Attribute attribute0 = new Attribute ( ( DERObjectIdentifier ) null , ( ASN1Set ) null ) ; Attribute attribute1 = Attribute . getInstance ( ( Object ) attribute0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test0 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ( DEREncodable ) null ) ; DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . id_PBES2 ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , dERObjectIdentifier0 ) ; SignedData signedData0 = new SignedData ( ( DERInteger ) null , ( ASN1Set ) bERSet0 , contentInfo0 , ( ASN1Set ) bERSet0 , ( ASN1Set ) bERSet0 , ( ASN1Set ) bERSet0 ) ; DERInteger dERInteger0 = signedData0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte getVersion ( ) { return message . getVersion ( ) ; }
void test1 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ( DEREncodable ) null ) ; DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . sha384WithRSAEncryption ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , ( DEREncodable ) bERSet0 ) ; SignedData signedData0 = new SignedData ( ( DERInteger ) null , ( ASN1Set ) null , contentInfo0 , ( ASN1Set ) null , ( ASN1Set ) null , ( ASN1Set ) bERSet0 ) ; BERSet bERSet1 = ( BERSet ) signedData0 . getSignerInfos ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test2 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ( DEREncodable ) null ) ; DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . sha384WithRSAEncryption ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , ( DEREncodable ) bERSet0 ) ; SignedData signedData0 = new SignedData ( ( DERInteger ) null , ( ASN1Set ) null , contentInfo0 , ( ASN1Set ) null , ( ASN1Set ) null , ( ASN1Set ) bERSet0 ) ; ContentInfo contentInfo1 = signedData0 . getContentInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ContentInfo getContentInfo ( ) { return contentInfo ; }
void test3 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ( DEREncodable ) null ) ; DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . sha384WithRSAEncryption ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , ( DEREncodable ) bERSet0 ) ; SignedData signedData0 = new SignedData ( ( DERInteger ) null , ( ASN1Set ) null , contentInfo0 , ( ASN1Set ) null , ( ASN1Set ) null , ( ASN1Set ) bERSet0 ) ; BERSet bERSet1 = ( BERSet ) signedData0 . getDigestAlgorithms ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASN1Set getDigestAlgorithms ( ) { return digestAlgorithms ; }
void test4 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ( DEREncodable ) null ) ; DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . sha384WithRSAEncryption ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , ( DEREncodable ) bERSet0 ) ; SignedData signedData0 = new SignedData ( ( DERInteger ) null , ( ASN1Set ) null , contentInfo0 , ( ASN1Set ) null , ( ASN1Set ) null , ( ASN1Set ) bERSet0 ) ; BERSet bERSet1 = ( BERSet ) signedData0 . getCRLs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASN1Set getCRLs ( ) { return crls ; }
void test5 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ( DEREncodable ) null ) ; DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . id_PBES2 ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , dERObjectIdentifier0 ) ; SignedData signedData0 = new SignedData ( ( DERInteger ) null , ( ASN1Set ) bERSet0 , contentInfo0 , ( ASN1Set ) bERSet0 , ( ASN1Set ) bERSet0 , ( ASN1Set ) bERSet0 ) ; BERSet bERSet1 = ( BERSet ) signedData0 . getCertificates ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test7 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ( DEREncodable ) null ) ; DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . id_PBES2 ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , dERObjectIdentifier0 ) ; SignedData signedData0 = new SignedData ( ( DERInteger ) null , ( ASN1Set ) bERSet0 , contentInfo0 , ( ASN1Set ) bERSet0 , ( ASN1Set ) bERSet0 , ( ASN1Set ) bERSet0 ) ; SignedData signedData1 = SignedData . getInstance ( ( Object ) signedData0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test8 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ( DEREncodable ) null ) ; DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . id_PBES2 ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , dERObjectIdentifier0 ) ; SignedData signedData0 = new SignedData ( ( DERInteger ) null , ( ASN1Set ) bERSet0 , contentInfo0 , ( ASN1Set ) bERSet0 , ( ASN1Set ) bERSet0 , ( ASN1Set ) bERSet0 ) ; BERSequence bERSequence0 = ( BERSequence ) signedData0 . getDERObject ( ) ; SignedData signedData1 = SignedData . getInstance ( ( Object ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test9 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ( DEREncodable ) null ) ; DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . sha384WithRSAEncryption ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , ( DEREncodable ) bERSet0 ) ; SignedData signedData0 = new SignedData ( ( DERInteger ) null , ( ASN1Set ) null , contentInfo0 , ( ASN1Set ) null , ( ASN1Set ) null , ( ASN1Set ) bERSet0 ) ; BERSequence bERSequence0 = ( BERSequence ) signedData0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test0 ( ) throws Throwable { SafeBag safeBag0 = new SafeBag ( ( DERObjectIdentifier ) null , ( DERObject ) null ) ; DERObjectIdentifier dERObjectIdentifier0 = safeBag0 . getBagId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERObjectIdentifier getBagId ( ) { return bagId ; }
void test1 ( ) throws Throwable { DERSet dERSet0 = new DERSet ( ) ; SafeBag safeBag0 = new SafeBag ( ( DERObjectIdentifier ) null , ( DERObject ) null , ( ASN1Set ) dERSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SafeBag ( DERObjectIdentifier oid , DERObject obj ) { this . bagId = oid ; this . bagValue = obj ; this . bagAttributes = null ; }
void test2 ( ) throws Throwable { SafeBag safeBag0 = new SafeBag ( ( DERObjectIdentifier ) null , ( DERObject ) null ) ; DERObject dERObject0 = safeBag0 . getBagValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERObject getBagValue ( ) { return bagValue ; }
void test3 ( ) throws Throwable { SafeBag safeBag0 = new SafeBag ( ( DERObjectIdentifier ) null , ( DERObject ) null ) ; ASN1Set aSN1Set0 = safeBag0 . getBagAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ASN1Set getBagAttributes ( ) { return bagAttributes ; }
void test5 ( ) throws Throwable { SafeBag safeBag0 = new SafeBag ( ( DERObjectIdentifier ) null , ( DERObject ) null ) ; DERConstructedSet dERConstructedSet0 = new DERConstructedSet ( ( DEREncodable ) null ) ; safeBag0 . bagAttributes = ( org . bouncycastle . asn1 . ASN1Set ) dERConstructedSet0 ; DERTaggedObject dERTaggedObject0 = new DERTaggedObject ( false , 1973 , ( DEREncodable ) safeBag0 ) ; DERSequence dERSequence0 = ( DERSequence ) ASN1Sequence . getInstance ( ( ASN1TaggedObject ) dERTaggedObject0 , false ) ; SafeBag safeBag1 = new SafeBag ( ( ASN1Sequence ) dERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; MacData macData0 = new MacData ( ( DigestInfo ) null , byteArray0 , ( int ) ( byte ) 0 ) ; byte [ ] byteArray1 = macData0 . getSalt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getSalt ( ) { return salt ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; MacData macData0 = new MacData ( ( DigestInfo ) null , byteArray0 , ( int ) ( byte ) 0 ) ; BigInteger bigInteger0 = macData0 . getIterationCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float floatValue ( ) { return Float . valueOf ( toString ( ) ) . floatValue ( ) ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; MacData macData0 = new MacData ( ( DigestInfo ) null , byteArray0 , ( int ) ( byte ) 0 ) ; DERSequence dERSequence0 = ( DERSequence ) macData0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; MacData macData0 = new MacData ( ( DigestInfo ) null , byteArray0 , ( int ) ( byte ) 0 ) ; DigestInfo digestInfo0 = macData0 . getMac ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DigestInfo getMac ( ) { return digInfo ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 15 ] ; DigestInfo digestInfo0 = new DigestInfo ( ( AlgorithmIdentifier ) null , byteArray0 ) ; MacData macData0 = new MacData ( digestInfo0 , byteArray0 , ( int ) ( byte ) 0 ) ; MacData macData1 = MacData . getInstance ( ( Object ) macData0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test0 ( ) throws Throwable { ASN1Encodable [ ] aSN1EncodableArray0 = new ASN1Encodable [ 2 ] ; DERSequence dERSequence0 = new DERSequence ( aSN1EncodableArray0 ) ; EncryptionScheme encryptionScheme0 = new EncryptionScheme ( ( ASN1Sequence ) dERSequence0 ) ; DERSequence dERSequence1 = ( DERSequence ) encryptionScheme0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test1 ( ) throws Throwable { ASN1Encodable [ ] aSN1EncodableArray0 = new ASN1Encodable [ 2 ] ; DERSequence dERSequence0 = new DERSequence ( aSN1EncodableArray0 ) ; EncryptionScheme encryptionScheme0 = new EncryptionScheme ( ( ASN1Sequence ) dERSequence0 ) ; DERObject dERObject0 = encryptionScheme0 . getObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERObject getObject ( ) throws IOException { return new ASN1InputStream ( getContents ( ) ) . readObject ( ) ; }
void test0 ( ) throws Throwable { ContentInfo contentInfo0 = new ContentInfo ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; DERObjectIdentifier dERObjectIdentifier0 = contentInfo0 . getContentType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContentType ( ) ; void setContentType ( String contentType ) ; String getName ( ) ; long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test1 ( ) throws Throwable { ContentInfo contentInfo0 = new ContentInfo ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; DEREncodable dEREncodable0 = contentInfo0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getContent ( ) ; void setProcessed ( ) ; boolean isProcessed ( ) ; void setData ( Object key , Object value ) ; Object getData ( Object key ) ; }
void test3 ( ) throws Throwable { ContentInfo contentInfo0 = new ContentInfo ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; ContentInfo contentInfo1 = ContentInfo . getInstance ( ( Object ) contentInfo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISkinnableManagerSWT getInstance ( ) { return instance ; }
void test5 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . envelopedData ; DERSequence dERSequence0 = new DERSequence ( ( DEREncodable ) dERObjectIdentifier0 ) ; ContentInfo contentInfo0 = new ContentInfo ( ( ASN1Sequence ) dERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ContentInfo ( ASN1Sequence seq ) { Enumeration e = seq . getObjects ( ) ; contentType = ( DERObjectIdentifier ) e . nextElement ( ) ; if ( e . hasMoreElements ( ) ) { content = ( ( ASN1TaggedObject ) e . nextElement ( ) ) . getObject ( ) ; } }
void test7 ( ) throws Throwable { ContentInfo contentInfo0 = new ContentInfo ( ( DERObjectIdentifier ) null , ( DEREncodable ) null ) ; BERSequence bERSequence0 = ( BERSequence ) contentInfo0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test8 ( ) throws Throwable { DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers . envelopedData ; ContentInfo contentInfo0 = new ContentInfo ( dERObjectIdentifier0 , dERObjectIdentifier0 ) ; BERSequence bERSequence0 = ( BERSequence ) contentInfo0 . getDERObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { ASN1Dump aSN1Dump0 = new ASN1Dump ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { DERBMPString dERBMPString0 = new DERBMPString ( "CjNKkgI0`5 { Z" ) ; String string0 = ASN1Dump . _dumpAsString ( "CjNKkgI0`5 { Z" , ( DERObject ) dERBMPString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _dumpAsString ( String indent , DERObject obj ) { if ( obj instanceof ASN1Sequence ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Sequence ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERConstructedSequence ) { buf . append ( "BER ConstructedSequence" ) ; } else if ( obj instanceof DERConstructedSequence ) { buf . append ( "DER ConstructedSequence" ) ; } else if ( obj instanceof DERSequence ) { buf . append ( "DER Sequence" ) ; } else if ( obj instanceof BERSequence ) { buf . append ( "BER Sequence" ) ; } else { buf . append ( "Sequence" ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null | | o . equals ( new DERNull ( ) ) ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERTaggedObject ) { StringBuffer buf = new StringBuffer ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERTaggedObject ) { buf . append ( "BER Tagged [ " ) ; } else { buf . append ( "Tagged [ " ) ; } DERTaggedObject o = ( DERTaggedObject ) obj ; buf . append ( Integer . toString ( o . getTagNo ( ) ) ) ; buf . append ( " ] " ) ; if ( ! o . isExplicit ( ) ) { buf . append ( " IMPLICIT " ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; if ( o . isEmpty ( ) ) { buf . append ( tab ) ; buf . append ( "EMPTY" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else { buf . append ( _dumpAsString ( tab , o . getObject ( ) ) ) ; } return buf . toString ( ) ; } else if ( obj instanceof DERConstructedSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "ConstructedSet" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof BERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "BER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "DER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERObjectIdentifier ) { return indent + "ObjectIdentifier ( " + ( ( DERObjectIdentifier ) obj ) . getId ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBoolean ) { return indent + "Boolean ( " + ( ( DERBoolean ) obj ) . isTrue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERInteger ) { return indent + "Integer ( " + ( ( DERInteger ) obj ) . getValue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DEROctetString ) { return indent + obj . toString ( ) + " [ " + ( ( ASN1OctetString ) obj ) . getOctets ( ) . length + " ] " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERIA5String ) { return indent + "IA5String ( " + ( ( DERIA5String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERPrintableString ) { return indent + "PrintableString ( " + ( ( DERPrintableString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERVisibleString ) { return indent + "VisibleString ( " + ( ( DERVisibleString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBMPString ) { return indent + "BMPString ( " + ( ( DERBMPString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERT61String ) { return indent + "T61String ( " + ( ( DERT61String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUTCTime ) { return indent + "UTCTime ( " + ( ( DERUTCTime ) obj ) . getTime ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUnknownTag ) { return indent + "Unknown " + Integer . toString ( ( ( DERUnknownTag ) obj ) . getTag ( ) , 16 ) + " " + new String ( Hex . encode ( ( ( DERUnknownTag ) obj ) . getData ( ) ) ) + System . getProperty ( "line . separator" ) ; } else { return indent + obj . toString ( ) + System . getProperty ( "line . separator" ) ; } }
void test2 ( ) throws Throwable { BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) null ) ; String string0 = ASN1Dump . _dumpAsString ( "unknown object type DER" , ( DERObject ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _dumpAsString ( String indent , DERObject obj ) { if ( obj instanceof ASN1Sequence ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Sequence ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERConstructedSequence ) { buf . append ( "BER ConstructedSequence" ) ; } else if ( obj instanceof DERConstructedSequence ) { buf . append ( "DER ConstructedSequence" ) ; } else if ( obj instanceof DERSequence ) { buf . append ( "DER Sequence" ) ; } else if ( obj instanceof BERSequence ) { buf . append ( "BER Sequence" ) ; } else { buf . append ( "Sequence" ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null | | o . equals ( new DERNull ( ) ) ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERTaggedObject ) { StringBuffer buf = new StringBuffer ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERTaggedObject ) { buf . append ( "BER Tagged [ " ) ; } else { buf . append ( "Tagged [ " ) ; } DERTaggedObject o = ( DERTaggedObject ) obj ; buf . append ( Integer . toString ( o . getTagNo ( ) ) ) ; buf . append ( " ] " ) ; if ( ! o . isExplicit ( ) ) { buf . append ( " IMPLICIT " ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; if ( o . isEmpty ( ) ) { buf . append ( tab ) ; buf . append ( "EMPTY" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else { buf . append ( _dumpAsString ( tab , o . getObject ( ) ) ) ; } return buf . toString ( ) ; } else if ( obj instanceof DERConstructedSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "ConstructedSet" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof BERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "BER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "DER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERObjectIdentifier ) { return indent + "ObjectIdentifier ( " + ( ( DERObjectIdentifier ) obj ) . getId ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBoolean ) { return indent + "Boolean ( " + ( ( DERBoolean ) obj ) . isTrue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERInteger ) { return indent + "Integer ( " + ( ( DERInteger ) obj ) . getValue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DEROctetString ) { return indent + obj . toString ( ) + " [ " + ( ( ASN1OctetString ) obj ) . getOctets ( ) . length + " ] " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERIA5String ) { return indent + "IA5String ( " + ( ( DERIA5String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERPrintableString ) { return indent + "PrintableString ( " + ( ( DERPrintableString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERVisibleString ) { return indent + "VisibleString ( " + ( ( DERVisibleString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBMPString ) { return indent + "BMPString ( " + ( ( DERBMPString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERT61String ) { return indent + "T61String ( " + ( ( DERT61String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUTCTime ) { return indent + "UTCTime ( " + ( ( DERUTCTime ) obj ) . getTime ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUnknownTag ) { return indent + "Unknown " + Integer . toString ( ( ( DERUnknownTag ) obj ) . getTag ( ) , 16 ) + " " + new String ( Hex . encode ( ( ( DERUnknownTag ) obj ) . getData ( ) ) ) + System . getProperty ( "line . separator" ) ; } else { return indent + obj . toString ( ) + System . getProperty ( "line . separator" ) ; } }
void test3 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence ( ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) bERConstructedSequence0 ) ; ASN1SequenceParser aSN1SequenceParser0 = bERSequence0 . parser ( ) ; dEREncodableVector0 . add ( ( DEREncodable ) aSN1SequenceParser0 ) ; BERSet bERSet0 = new BERSet ( dEREncodableVector0 ) ; String string0 = ASN1Dump . dumpAsString ( ( Object ) bERSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpAsString ( DERObject obj ) { return _dumpAsString ( "" , obj ) ; }
void test4 ( ) throws Throwable { DERConstructedSequence dERConstructedSequence0 = new DERConstructedSequence ( ) ; BERTaggedObject bERTaggedObject0 = new BERTaggedObject ( true , 10 , ( DEREncodable ) dERConstructedSequence0 ) ; String string0 = ASN1Dump . _dumpAsString ( "U" , ( DERObject ) bERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _dumpAsString ( String indent , DERObject obj ) { if ( obj instanceof ASN1Sequence ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Sequence ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERConstructedSequence ) { buf . append ( "BER ConstructedSequence" ) ; } else if ( obj instanceof DERConstructedSequence ) { buf . append ( "DER ConstructedSequence" ) ; } else if ( obj instanceof DERSequence ) { buf . append ( "DER Sequence" ) ; } else if ( obj instanceof BERSequence ) { buf . append ( "BER Sequence" ) ; } else { buf . append ( "Sequence" ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null | | o . equals ( new DERNull ( ) ) ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERTaggedObject ) { StringBuffer buf = new StringBuffer ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERTaggedObject ) { buf . append ( "BER Tagged [ " ) ; } else { buf . append ( "Tagged [ " ) ; } DERTaggedObject o = ( DERTaggedObject ) obj ; buf . append ( Integer . toString ( o . getTagNo ( ) ) ) ; buf . append ( " ] " ) ; if ( ! o . isExplicit ( ) ) { buf . append ( " IMPLICIT " ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; if ( o . isEmpty ( ) ) { buf . append ( tab ) ; buf . append ( "EMPTY" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else { buf . append ( _dumpAsString ( tab , o . getObject ( ) ) ) ; } return buf . toString ( ) ; } else if ( obj instanceof DERConstructedSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "ConstructedSet" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof BERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "BER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "DER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERObjectIdentifier ) { return indent + "ObjectIdentifier ( " + ( ( DERObjectIdentifier ) obj ) . getId ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBoolean ) { return indent + "Boolean ( " + ( ( DERBoolean ) obj ) . isTrue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERInteger ) { return indent + "Integer ( " + ( ( DERInteger ) obj ) . getValue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DEROctetString ) { return indent + obj . toString ( ) + " [ " + ( ( ASN1OctetString ) obj ) . getOctets ( ) . length + " ] " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERIA5String ) { return indent + "IA5String ( " + ( ( DERIA5String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERPrintableString ) { return indent + "PrintableString ( " + ( ( DERPrintableString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERVisibleString ) { return indent + "VisibleString ( " + ( ( DERVisibleString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBMPString ) { return indent + "BMPString ( " + ( ( DERBMPString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERT61String ) { return indent + "T61String ( " + ( ( DERT61String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUTCTime ) { return indent + "UTCTime ( " + ( ( DERUTCTime ) obj ) . getTime ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUnknownTag ) { return indent + "Unknown " + Integer . toString ( ( ( DERUnknownTag ) obj ) . getTag ( ) , 16 ) + " " + new String ( Hex . encode ( ( ( DERUnknownTag ) obj ) . getData ( ) ) ) + System . getProperty ( "line . separator" ) ; } else { return indent + obj . toString ( ) + System . getProperty ( "line . separator" ) ; } }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; byteArray0 [ 0 ] = ( byte ) ( - 104 ) ; DERTaggedObject dERTaggedObject0 = ( DERTaggedObject ) ASN1Object . fromByteArray ( byteArray0 ) ; String string0 = ASN1Dump . dumpAsString ( ( Object ) dERTaggedObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpAsString ( DERObject obj ) { return _dumpAsString ( "" , obj ) ; }
void test6 ( ) throws Throwable { DERBoolean dERBoolean0 = new DERBoolean ( false ) ; DERConstructedSet dERConstructedSet0 = new DERConstructedSet ( ( DEREncodable ) dERBoolean0 ) ; String string0 = ASN1Dump . _dumpAsString ( "CjNKkgI0`5 { ZBMPString ( CjNKkgI0`5 { Z ) \n" , ( DERObject ) dERConstructedSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _dumpAsString ( String indent , DERObject obj ) { if ( obj instanceof ASN1Sequence ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Sequence ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERConstructedSequence ) { buf . append ( "BER ConstructedSequence" ) ; } else if ( obj instanceof DERConstructedSequence ) { buf . append ( "DER ConstructedSequence" ) ; } else if ( obj instanceof DERSequence ) { buf . append ( "DER Sequence" ) ; } else if ( obj instanceof BERSequence ) { buf . append ( "BER Sequence" ) ; } else { buf . append ( "Sequence" ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null | | o . equals ( new DERNull ( ) ) ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERTaggedObject ) { StringBuffer buf = new StringBuffer ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERTaggedObject ) { buf . append ( "BER Tagged [ " ) ; } else { buf . append ( "Tagged [ " ) ; } DERTaggedObject o = ( DERTaggedObject ) obj ; buf . append ( Integer . toString ( o . getTagNo ( ) ) ) ; buf . append ( " ] " ) ; if ( ! o . isExplicit ( ) ) { buf . append ( " IMPLICIT " ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; if ( o . isEmpty ( ) ) { buf . append ( tab ) ; buf . append ( "EMPTY" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else { buf . append ( _dumpAsString ( tab , o . getObject ( ) ) ) ; } return buf . toString ( ) ; } else if ( obj instanceof DERConstructedSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "ConstructedSet" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof BERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "BER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "DER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERObjectIdentifier ) { return indent + "ObjectIdentifier ( " + ( ( DERObjectIdentifier ) obj ) . getId ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBoolean ) { return indent + "Boolean ( " + ( ( DERBoolean ) obj ) . isTrue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERInteger ) { return indent + "Integer ( " + ( ( DERInteger ) obj ) . getValue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DEROctetString ) { return indent + obj . toString ( ) + " [ " + ( ( ASN1OctetString ) obj ) . getOctets ( ) . length + " ] " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERIA5String ) { return indent + "IA5String ( " + ( ( DERIA5String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERPrintableString ) { return indent + "PrintableString ( " + ( ( DERPrintableString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERVisibleString ) { return indent + "VisibleString ( " + ( ( DERVisibleString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBMPString ) { return indent + "BMPString ( " + ( ( DERBMPString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERT61String ) { return indent + "T61String ( " + ( ( DERT61String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUTCTime ) { return indent + "UTCTime ( " + ( ( DERUTCTime ) obj ) . getTime ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUnknownTag ) { return indent + "Unknown " + Integer . toString ( ( ( DERUnknownTag ) obj ) . getTag ( ) , 16 ) + " " + new String ( Hex . encode ( ( ( DERUnknownTag ) obj ) . getData ( ) ) ) + System . getProperty ( "line . separator" ) ; } else { return indent + obj . toString ( ) + System . getProperty ( "line . separator" ) ; } }
void test7 ( ) throws Throwable { BERSet bERSet0 = new BERSet ( ( DEREncodable ) null ) ; String string0 = ASN1Dump . dumpAsString ( ( Object ) bERSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpAsString ( DERObject obj ) { return _dumpAsString ( "" , obj ) ; }
void test8 ( ) throws Throwable { DEREncodableVector dEREncodableVector0 = new DEREncodableVector ( ) ; byte [ ] byteArray0 = new byte [ 3 ] ; DERGeneralString dERGeneralString0 = new DERGeneralString ( byteArray0 ) ; dEREncodableVector0 . add ( ( DEREncodable ) dERGeneralString0 ) ; BERSet bERSet0 = new BERSet ( dEREncodableVector0 ) ; String string0 = ASN1Dump . dumpAsString ( ( Object ) bERSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpAsString ( DERObject obj ) { return _dumpAsString ( "" , obj ) ; }
void test9 ( ) throws Throwable { DERSet dERSet0 = new DERSet ( ( DEREncodable ) null ) ; String string0 = ASN1Dump . _dumpAsString ( "" , ( DERObject ) dERSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _dumpAsString ( String indent , DERObject obj ) { if ( obj instanceof ASN1Sequence ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Sequence ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERConstructedSequence ) { buf . append ( "BER ConstructedSequence" ) ; } else if ( obj instanceof DERConstructedSequence ) { buf . append ( "DER ConstructedSequence" ) ; } else if ( obj instanceof DERSequence ) { buf . append ( "DER Sequence" ) ; } else if ( obj instanceof BERSequence ) { buf . append ( "BER Sequence" ) ; } else { buf . append ( "Sequence" ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null | | o . equals ( new DERNull ( ) ) ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERTaggedObject ) { StringBuffer buf = new StringBuffer ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERTaggedObject ) { buf . append ( "BER Tagged [ " ) ; } else { buf . append ( "Tagged [ " ) ; } DERTaggedObject o = ( DERTaggedObject ) obj ; buf . append ( Integer . toString ( o . getTagNo ( ) ) ) ; buf . append ( " ] " ) ; if ( ! o . isExplicit ( ) ) { buf . append ( " IMPLICIT " ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; if ( o . isEmpty ( ) ) { buf . append ( tab ) ; buf . append ( "EMPTY" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else { buf . append ( _dumpAsString ( tab , o . getObject ( ) ) ) ; } return buf . toString ( ) ; } else if ( obj instanceof DERConstructedSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "ConstructedSet" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof BERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "BER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "DER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERObjectIdentifier ) { return indent + "ObjectIdentifier ( " + ( ( DERObjectIdentifier ) obj ) . getId ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBoolean ) { return indent + "Boolean ( " + ( ( DERBoolean ) obj ) . isTrue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERInteger ) { return indent + "Integer ( " + ( ( DERInteger ) obj ) . getValue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DEROctetString ) { return indent + obj . toString ( ) + " [ " + ( ( ASN1OctetString ) obj ) . getOctets ( ) . length + " ] " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERIA5String ) { return indent + "IA5String ( " + ( ( DERIA5String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERPrintableString ) { return indent + "PrintableString ( " + ( ( DERPrintableString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERVisibleString ) { return indent + "VisibleString ( " + ( ( DERVisibleString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBMPString ) { return indent + "BMPString ( " + ( ( DERBMPString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERT61String ) { return indent + "T61String ( " + ( ( DERT61String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUTCTime ) { return indent + "UTCTime ( " + ( ( DERUTCTime ) obj ) . getTime ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUnknownTag ) { return indent + "Unknown " + Integer . toString ( ( ( DERUnknownTag ) obj ) . getTag ( ) , 16 ) + " " + new String ( Hex . encode ( ( ( DERUnknownTag ) obj ) . getData ( ) ) ) + System . getProperty ( "line . separator" ) ; } else { return indent + obj . toString ( ) + System . getProperty ( "line . separator" ) ; } }
void test10 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; DERGeneralString dERGeneralString0 = new DERGeneralString ( byteArray0 ) ; DERSet dERSet0 = new DERSet ( ( DEREncodable ) dERGeneralString0 ) ; String string0 = ASN1Dump . dumpAsString ( ( Object ) dERSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpAsString ( DERObject obj ) { return _dumpAsString ( "" , obj ) ; }
void test11 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; BigInteger bigInteger0 = new BigInteger ( byteArray0 ) ; DERInteger dERInteger0 = new DERInteger ( bigInteger0 ) ; String string0 = ASN1Dump . _dumpAsString ( "" , ( DERObject ) dERInteger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _dumpAsString ( String indent , DERObject obj ) { if ( obj instanceof ASN1Sequence ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Sequence ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERConstructedSequence ) { buf . append ( "BER ConstructedSequence" ) ; } else if ( obj instanceof DERConstructedSequence ) { buf . append ( "DER ConstructedSequence" ) ; } else if ( obj instanceof DERSequence ) { buf . append ( "DER Sequence" ) ; } else if ( obj instanceof BERSequence ) { buf . append ( "BER Sequence" ) ; } else { buf . append ( "Sequence" ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null | | o . equals ( new DERNull ( ) ) ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERTaggedObject ) { StringBuffer buf = new StringBuffer ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERTaggedObject ) { buf . append ( "BER Tagged [ " ) ; } else { buf . append ( "Tagged [ " ) ; } DERTaggedObject o = ( DERTaggedObject ) obj ; buf . append ( Integer . toString ( o . getTagNo ( ) ) ) ; buf . append ( " ] " ) ; if ( ! o . isExplicit ( ) ) { buf . append ( " IMPLICIT " ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; if ( o . isEmpty ( ) ) { buf . append ( tab ) ; buf . append ( "EMPTY" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else { buf . append ( _dumpAsString ( tab , o . getObject ( ) ) ) ; } return buf . toString ( ) ; } else if ( obj instanceof DERConstructedSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "ConstructedSet" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof BERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "BER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "DER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERObjectIdentifier ) { return indent + "ObjectIdentifier ( " + ( ( DERObjectIdentifier ) obj ) . getId ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBoolean ) { return indent + "Boolean ( " + ( ( DERBoolean ) obj ) . isTrue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERInteger ) { return indent + "Integer ( " + ( ( DERInteger ) obj ) . getValue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DEROctetString ) { return indent + obj . toString ( ) + " [ " + ( ( ASN1OctetString ) obj ) . getOctets ( ) . length + " ] " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERIA5String ) { return indent + "IA5String ( " + ( ( DERIA5String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERPrintableString ) { return indent + "PrintableString ( " + ( ( DERPrintableString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERVisibleString ) { return indent + "VisibleString ( " + ( ( DERVisibleString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBMPString ) { return indent + "BMPString ( " + ( ( DERBMPString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERT61String ) { return indent + "T61String ( " + ( ( DERT61String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUTCTime ) { return indent + "UTCTime ( " + ( ( DERUTCTime ) obj ) . getTime ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUnknownTag ) { return indent + "Unknown " + Integer . toString ( ( ( DERUnknownTag ) obj ) . getTag ( ) , 16 ) + " " + new String ( Hex . encode ( ( ( DERUnknownTag ) obj ) . getData ( ) ) ) + System . getProperty ( "line . separator" ) ; } else { return indent + obj . toString ( ) + System . getProperty ( "line . separator" ) ; } }
void test12 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString ( byteArray0 ) ; DERSequence dERSequence0 = new DERSequence ( ( DEREncodable ) bERConstructedOctetString0 ) ; BERSequence bERSequence0 = new BERSequence ( ( DEREncodable ) dERSequence0 ) ; String string0 = ASN1Dump . dumpAsString ( ( Object ) bERSequence0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpAsString ( DERObject obj ) { return _dumpAsString ( "" , obj ) ; }
void test13 ( ) throws Throwable { DERIA5String dERIA5String0 = new DERIA5String ( "" , true ) ; String string0 = ASN1Dump . dumpAsString ( ( Object ) dERIA5String0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpAsString ( DERObject obj ) { return _dumpAsString ( "" , obj ) ; }
void test14 ( ) throws Throwable { DERPrintableString dERPrintableString0 = new DERPrintableString ( "" ) ; String string0 = ASN1Dump . _dumpAsString ( "" , ( DERObject ) dERPrintableString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _dumpAsString ( String indent , DERObject obj ) { if ( obj instanceof ASN1Sequence ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Sequence ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERConstructedSequence ) { buf . append ( "BER ConstructedSequence" ) ; } else if ( obj instanceof DERConstructedSequence ) { buf . append ( "DER ConstructedSequence" ) ; } else if ( obj instanceof DERSequence ) { buf . append ( "DER Sequence" ) ; } else if ( obj instanceof BERSequence ) { buf . append ( "BER Sequence" ) ; } else { buf . append ( "Sequence" ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null | | o . equals ( new DERNull ( ) ) ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERTaggedObject ) { StringBuffer buf = new StringBuffer ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERTaggedObject ) { buf . append ( "BER Tagged [ " ) ; } else { buf . append ( "Tagged [ " ) ; } DERTaggedObject o = ( DERTaggedObject ) obj ; buf . append ( Integer . toString ( o . getTagNo ( ) ) ) ; buf . append ( " ] " ) ; if ( ! o . isExplicit ( ) ) { buf . append ( " IMPLICIT " ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; if ( o . isEmpty ( ) ) { buf . append ( tab ) ; buf . append ( "EMPTY" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else { buf . append ( _dumpAsString ( tab , o . getObject ( ) ) ) ; } return buf . toString ( ) ; } else if ( obj instanceof DERConstructedSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "ConstructedSet" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof BERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "BER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "DER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERObjectIdentifier ) { return indent + "ObjectIdentifier ( " + ( ( DERObjectIdentifier ) obj ) . getId ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBoolean ) { return indent + "Boolean ( " + ( ( DERBoolean ) obj ) . isTrue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERInteger ) { return indent + "Integer ( " + ( ( DERInteger ) obj ) . getValue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DEROctetString ) { return indent + obj . toString ( ) + " [ " + ( ( ASN1OctetString ) obj ) . getOctets ( ) . length + " ] " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERIA5String ) { return indent + "IA5String ( " + ( ( DERIA5String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERPrintableString ) { return indent + "PrintableString ( " + ( ( DERPrintableString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERVisibleString ) { return indent + "VisibleString ( " + ( ( DERVisibleString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBMPString ) { return indent + "BMPString ( " + ( ( DERBMPString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERT61String ) { return indent + "T61String ( " + ( ( DERT61String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUTCTime ) { return indent + "UTCTime ( " + ( ( DERUTCTime ) obj ) . getTime ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUnknownTag ) { return indent + "Unknown " + Integer . toString ( ( ( DERUnknownTag ) obj ) . getTag ( ) , 16 ) + " " + new String ( Hex . encode ( ( ( DERUnknownTag ) obj ) . getData ( ) ) ) + System . getProperty ( "line . separator" ) ; } else { return indent + obj . toString ( ) + System . getProperty ( "line . separator" ) ; } }
void test15 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; DERVisibleString dERVisibleString0 = new DERVisibleString ( byteArray0 ) ; String string0 = ASN1Dump . _dumpAsString ( "U" , ( DERObject ) dERVisibleString0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _dumpAsString ( String indent , DERObject obj ) { if ( obj instanceof ASN1Sequence ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Sequence ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERConstructedSequence ) { buf . append ( "BER ConstructedSequence" ) ; } else if ( obj instanceof DERConstructedSequence ) { buf . append ( "DER ConstructedSequence" ) ; } else if ( obj instanceof DERSequence ) { buf . append ( "DER Sequence" ) ; } else if ( obj instanceof BERSequence ) { buf . append ( "BER Sequence" ) ; } else { buf . append ( "Sequence" ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null | | o . equals ( new DERNull ( ) ) ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERTaggedObject ) { StringBuffer buf = new StringBuffer ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERTaggedObject ) { buf . append ( "BER Tagged [ " ) ; } else { buf . append ( "Tagged [ " ) ; } DERTaggedObject o = ( DERTaggedObject ) obj ; buf . append ( Integer . toString ( o . getTagNo ( ) ) ) ; buf . append ( " ] " ) ; if ( ! o . isExplicit ( ) ) { buf . append ( " IMPLICIT " ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; if ( o . isEmpty ( ) ) { buf . append ( tab ) ; buf . append ( "EMPTY" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else { buf . append ( _dumpAsString ( tab , o . getObject ( ) ) ) ; } return buf . toString ( ) ; } else if ( obj instanceof DERConstructedSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "ConstructedSet" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof BERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "BER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "DER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERObjectIdentifier ) { return indent + "ObjectIdentifier ( " + ( ( DERObjectIdentifier ) obj ) . getId ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBoolean ) { return indent + "Boolean ( " + ( ( DERBoolean ) obj ) . isTrue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERInteger ) { return indent + "Integer ( " + ( ( DERInteger ) obj ) . getValue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DEROctetString ) { return indent + obj . toString ( ) + " [ " + ( ( ASN1OctetString ) obj ) . getOctets ( ) . length + " ] " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERIA5String ) { return indent + "IA5String ( " + ( ( DERIA5String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERPrintableString ) { return indent + "PrintableString ( " + ( ( DERPrintableString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERVisibleString ) { return indent + "VisibleString ( " + ( ( DERVisibleString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBMPString ) { return indent + "BMPString ( " + ( ( DERBMPString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERT61String ) { return indent + "T61String ( " + ( ( DERT61String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUTCTime ) { return indent + "UTCTime ( " + ( ( DERUTCTime ) obj ) . getTime ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUnknownTag ) { return indent + "Unknown " + Integer . toString ( ( ( DERUnknownTag ) obj ) . getTag ( ) , 16 ) + " " + new String ( Hex . encode ( ( ( DERUnknownTag ) obj ) . getData ( ) ) ) + System . getProperty ( "line . separator" ) ; } else { return indent + obj . toString ( ) + System . getProperty ( "line . separator" ) ; } }
void test16 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; DERT61String dERT61String0 = new DERT61String ( byteArray0 ) ; String string0 = ASN1Dump . _dumpAsString ( "Tagged [ " , ( DERObject ) dERT61String0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _dumpAsString ( String indent , DERObject obj ) { if ( obj instanceof ASN1Sequence ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Sequence ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERConstructedSequence ) { buf . append ( "BER ConstructedSequence" ) ; } else if ( obj instanceof DERConstructedSequence ) { buf . append ( "DER ConstructedSequence" ) ; } else if ( obj instanceof DERSequence ) { buf . append ( "DER Sequence" ) ; } else if ( obj instanceof BERSequence ) { buf . append ( "BER Sequence" ) ; } else { buf . append ( "Sequence" ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null | | o . equals ( new DERNull ( ) ) ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERTaggedObject ) { StringBuffer buf = new StringBuffer ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERTaggedObject ) { buf . append ( "BER Tagged [ " ) ; } else { buf . append ( "Tagged [ " ) ; } DERTaggedObject o = ( DERTaggedObject ) obj ; buf . append ( Integer . toString ( o . getTagNo ( ) ) ) ; buf . append ( " ] " ) ; if ( ! o . isExplicit ( ) ) { buf . append ( " IMPLICIT " ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; if ( o . isEmpty ( ) ) { buf . append ( tab ) ; buf . append ( "EMPTY" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else { buf . append ( _dumpAsString ( tab , o . getObject ( ) ) ) ; } return buf . toString ( ) ; } else if ( obj instanceof DERConstructedSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "ConstructedSet" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof BERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "BER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "DER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERObjectIdentifier ) { return indent + "ObjectIdentifier ( " + ( ( DERObjectIdentifier ) obj ) . getId ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBoolean ) { return indent + "Boolean ( " + ( ( DERBoolean ) obj ) . isTrue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERInteger ) { return indent + "Integer ( " + ( ( DERInteger ) obj ) . getValue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DEROctetString ) { return indent + obj . toString ( ) + " [ " + ( ( ASN1OctetString ) obj ) . getOctets ( ) . length + " ] " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERIA5String ) { return indent + "IA5String ( " + ( ( DERIA5String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERPrintableString ) { return indent + "PrintableString ( " + ( ( DERPrintableString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERVisibleString ) { return indent + "VisibleString ( " + ( ( DERVisibleString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBMPString ) { return indent + "BMPString ( " + ( ( DERBMPString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERT61String ) { return indent + "T61String ( " + ( ( DERT61String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUTCTime ) { return indent + "UTCTime ( " + ( ( DERUTCTime ) obj ) . getTime ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUnknownTag ) { return indent + "Unknown " + Integer . toString ( ( ( DERUnknownTag ) obj ) . getTag ( ) , 16 ) + " " + new String ( Hex . encode ( ( ( DERUnknownTag ) obj ) . getData ( ) ) ) + System . getProperty ( "line . separator" ) ; } else { return indent + obj . toString ( ) + System . getProperty ( "line . separator" ) ; } }
void test17 ( ) throws Throwable { Date date0 = new Date ( ) ; DERUTCTime dERUTCTime0 = new DERUTCTime ( date0 ) ; ASN1Dump . dumpAsString ( ( Object ) dERUTCTime0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTime ( ) { / / / / standardise the format . / / if ( time . indexOf ( ' - ' ) < 0 & & time . indexOf ( ' + ' ) < 0 ) { if ( time . length ( ) = = 11 ) { return time . substring ( 0 , 10 ) + "00GMT + 00 : 00" ; } else { return time . substring ( 0 , 12 ) + "GMT + 00 : 00" ; } } else { int index = time . indexOf ( ' - ' ) ; if ( index < 0 ) { index = time . indexOf ( ' + ' ) ; } String d = time ; if ( index = = time . length ( ) - 3 ) { d + = "00" ; } if ( index = = 10 ) { return d . substring ( 0 , 10 ) + "00GMT" + d . substring ( 10 , 13 ) + " : " + d . substring ( 13 , 15 ) ; } else { return d . substring ( 0 , 12 ) + "GMT" + d . substring ( 12 , 15 ) + " : " + d . substring ( 15 , 17 ) ; } } }
void test18 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; DERUnknownTag dERUnknownTag0 = new DERUnknownTag ( ( - 1 ) , byteArray0 ) ; String string0 = ASN1Dump . _dumpAsString ( "xJwp^c ; . " , ( DERObject ) dERUnknownTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _dumpAsString ( String indent , DERObject obj ) { if ( obj instanceof ASN1Sequence ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Sequence ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERConstructedSequence ) { buf . append ( "BER ConstructedSequence" ) ; } else if ( obj instanceof DERConstructedSequence ) { buf . append ( "DER ConstructedSequence" ) ; } else if ( obj instanceof DERSequence ) { buf . append ( "DER Sequence" ) ; } else if ( obj instanceof BERSequence ) { buf . append ( "BER Sequence" ) ; } else { buf . append ( "Sequence" ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null | | o . equals ( new DERNull ( ) ) ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERTaggedObject ) { StringBuffer buf = new StringBuffer ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; if ( obj instanceof BERTaggedObject ) { buf . append ( "BER Tagged [ " ) ; } else { buf . append ( "Tagged [ " ) ; } DERTaggedObject o = ( DERTaggedObject ) obj ; buf . append ( Integer . toString ( o . getTagNo ( ) ) ) ; buf . append ( " ] " ) ; if ( ! o . isExplicit ( ) ) { buf . append ( " IMPLICIT " ) ; } buf . append ( System . getProperty ( "line . separator" ) ) ; if ( o . isEmpty ( ) ) { buf . append ( tab ) ; buf . append ( "EMPTY" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else { buf . append ( _dumpAsString ( tab , o . getObject ( ) ) ) ; } return buf . toString ( ) ; } else if ( obj instanceof DERConstructedSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "ConstructedSet" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof BERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "BER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERSet ) { StringBuffer buf = new StringBuffer ( ) ; Enumeration e = ( ( ASN1Set ) obj ) . getObjects ( ) ; String tab = indent + TAB ; buf . append ( indent ) ; buf . append ( "DER Set" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o = = null ) { buf . append ( tab ) ; buf . append ( "NULL" ) ; buf . append ( System . getProperty ( "line . separator" ) ) ; } else if ( o instanceof DERObject ) { buf . append ( _dumpAsString ( tab , ( DERObject ) o ) ) ; } else { buf . append ( _dumpAsString ( tab , ( ( DEREncodable ) o ) . getDERObject ( ) ) ) ; } } return buf . toString ( ) ; } else if ( obj instanceof DERObjectIdentifier ) { return indent + "ObjectIdentifier ( " + ( ( DERObjectIdentifier ) obj ) . getId ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBoolean ) { return indent + "Boolean ( " + ( ( DERBoolean ) obj ) . isTrue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERInteger ) { return indent + "Integer ( " + ( ( DERInteger ) obj ) . getValue ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DEROctetString ) { return indent + obj . toString ( ) + " [ " + ( ( ASN1OctetString ) obj ) . getOctets ( ) . length + " ] " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERIA5String ) { return indent + "IA5String ( " + ( ( DERIA5String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERPrintableString ) { return indent + "PrintableString ( " + ( ( DERPrintableString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERVisibleString ) { return indent + "VisibleString ( " + ( ( DERVisibleString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERBMPString ) { return indent + "BMPString ( " + ( ( DERBMPString ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERT61String ) { return indent + "T61String ( " + ( ( DERT61String ) obj ) . getString ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUTCTime ) { return indent + "UTCTime ( " + ( ( DERUTCTime ) obj ) . getTime ( ) + " ) " + System . getProperty ( "line . separator" ) ; } else if ( obj instanceof DERUnknownTag ) { return indent + "Unknown " + Integer . toString ( ( ( DERUnknownTag ) obj ) . getTag ( ) , 16 ) + " " + new String ( Hex . encode ( ( ( DERUnknownTag ) obj ) . getData ( ) ) ) + System . getProperty ( "line . separator" ) ; } else { return indent + obj . toString ( ) + System . getProperty ( "line . separator" ) ; } }
void test19 ( ) throws Throwable { String string0 = ASN1Dump . dumpAsString ( ( Object ) "DER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpAsString ( DERObject obj ) { return _dumpAsString ( "" , obj ) ; }
void test20 ( ) throws Throwable { DERConstructedSet dERConstructedSet0 = new DERConstructedSet ( ) ; ASN1SetParser aSN1SetParser0 = dERConstructedSet0 . parser ( ) ; String string0 = ASN1Dump . dumpAsString ( ( Object ) aSN1SetParser0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpAsString ( DERObject obj ) { return _dumpAsString ( "" , obj ) ; }
void test0 ( ) throws Throwable { BERNull bERNull0 = new BERNull ( ) ; String string0 = DERDump . dumpAsString ( ( DERObject ) bERNull0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpAsString ( DERObject obj ) { return _dumpAsString ( "" , obj ) ; }
void test1 ( ) throws Throwable { BERNull bERNull0 = new BERNull ( ) ; String string0 = DERDump . dumpAsString ( ( DEREncodable ) bERNull0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dumpAsString ( DERObject obj ) { return _dumpAsString ( "" , obj ) ; }
void test2 ( ) throws Throwable { DERDump dERDump0 = new DERDump ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { BufferedAsymmetricBlockCipher bufferedAsymmetricBlockCipher0 = new BufferedAsymmetricBlockCipher ( ( AsymmetricBlockCipher ) null ) ; AsymmetricBlockCipher asymmetricBlockCipher0 = bufferedAsymmetricBlockCipher0 . getUnderlyingCipher ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AsymmetricBlockCipher getUnderlyingCipher ( ) { return cipher ; }
void test1 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; BufferedAsymmetricBlockCipher bufferedAsymmetricBlockCipher0 = new BufferedAsymmetricBlockCipher ( ( AsymmetricBlockCipher ) rSAEngine0 ) ; BigInteger bigInteger0 = ECConstants . THREE ; RSAPrivateCrtKeyParameters rSAPrivateCrtKeyParameters0 = new RSAPrivateCrtKeyParameters ( bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 ) ; bufferedAsymmetricBlockCipher0 . init ( false , ( CipherParameters ) rSAPrivateCrtKeyParameters0 ) ; bufferedAsymmetricBlockCipher0 . processByte ( ( byte ) 12 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBufferPosition ( ) { return ( current_position ) ; }
void test3 ( ) throws Throwable { BufferedAsymmetricBlockCipher bufferedAsymmetricBlockCipher0 = new BufferedAsymmetricBlockCipher ( ( AsymmetricBlockCipher ) null ) ; int int0 = bufferedAsymmetricBlockCipher0 . getBufferPosition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBufferPosition ( ) { return ( current_position ) ; }
void test5 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; byte [ ] byteArray0 = new byte [ 7 ] ; BufferedAsymmetricBlockCipher bufferedAsymmetricBlockCipher0 = new BufferedAsymmetricBlockCipher ( ( AsymmetricBlockCipher ) rSAEngine0 ) ; bufferedAsymmetricBlockCipher0 . processBytes ( byteArray0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBufferPosition ( ) { return ( current_position ) ; }
void test7 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; BufferedAsymmetricBlockCipher bufferedAsymmetricBlockCipher0 = new BufferedAsymmetricBlockCipher ( ( AsymmetricBlockCipher ) rSAEngine0 ) ; BigInteger bigInteger0 = ECConstants . THREE ; RSAPrivateCrtKeyParameters rSAPrivateCrtKeyParameters0 = new RSAPrivateCrtKeyParameters ( bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 ) ; bufferedAsymmetricBlockCipher0 . init ( false , ( CipherParameters ) rSAPrivateCrtKeyParameters0 ) ; byte [ ] byteArray0 = new byte [ 2 ] ; bufferedAsymmetricBlockCipher0 . processBytes ( byteArray0 , ( int ) ( byte ) 0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBufferPosition ( ) { return ( current_position ) ; }
void test9 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; BufferedAsymmetricBlockCipher bufferedAsymmetricBlockCipher0 = new BufferedAsymmetricBlockCipher ( ( AsymmetricBlockCipher ) rSAEngine0 ) ; BigInteger bigInteger0 = ECConstants . THREE ; RSAPrivateCrtKeyParameters rSAPrivateCrtKeyParameters0 = new RSAPrivateCrtKeyParameters ( bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 ) ; bufferedAsymmetricBlockCipher0 . init ( false , ( CipherParameters ) rSAPrivateCrtKeyParameters0 ) ; byte [ ] byteArray0 = bufferedAsymmetricBlockCipher0 . doFinal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInputBlockSize ( ) { return cipher . getInputBlockSize ( ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 3 ] ; SecureRandom secureRandom0 = new SecureRandom ( byteArray0 ) ; KeyGenerationParameters keyGenerationParameters0 = new KeyGenerationParameters ( secureRandom0 , ( - 240 ) ) ; SecureRandom secureRandom1 = keyGenerationParameters0 . getRandom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float nextFloat ( ) { return RANDOM . nextFloat ( ) ; }
void test1 ( ) throws Throwable { KeyGenerationParameters keyGenerationParameters0 = new KeyGenerationParameters ( ( SecureRandom ) null , ( - 386 ) ) ; int int0 = keyGenerationParameters0 . getStrength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStrength ( ) { return strength ; }
void test0 ( ) throws Throwable { BufferedBlockCipher bufferedBlockCipher0 = new BufferedBlockCipher ( ) ; BlockCipher blockCipher0 = bufferedBlockCipher0 . getUnderlyingCipher ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AsymmetricBlockCipher getUnderlyingCipher ( ) { return cipher ; }
void test0 ( ) throws Throwable { MD2Digest mD2Digest0 = new MD2Digest ( ) ; PKCS5S1ParametersGenerator pKCS5S1ParametersGenerator0 = new PKCS5S1ParametersGenerator ( ( Digest ) mD2Digest0 ) ; int int0 = pKCS5S1ParametersGenerator0 . getIterationCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigInteger getIterationCount ( ) { return iterationCount ; }
void test1 ( ) throws Throwable { RIPEMD160Digest rIPEMD160Digest0 = new RIPEMD160Digest ( ) ; PKCS5S1ParametersGenerator pKCS5S1ParametersGenerator0 = new PKCS5S1ParametersGenerator ( ( Digest ) rIPEMD160Digest0 ) ; byte [ ] byteArray0 = pKCS5S1ParametersGenerator0 . getPassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" passwordDetails getPassword ( int handler_type , int action_type , boolean last_pw_incorrect , String reason ) ; void passwordOK ( int handler_type , passwordDetails details ) ; interface passwordDetails { char [ ] getPassword ( ) ; / * * * @return 0 - > don't persist , Integer . MAX_VALUE - > persist forever * < 0 - > current session ; other - > seconds to persist * / int getPersistForSeconds ( ) ; }
void test2 ( ) throws Throwable { OpenSSLPBEParametersGenerator openSSLPBEParametersGenerator0 = new OpenSSLPBEParametersGenerator ( ) ; byte [ ] byteArray0 = new byte [ 6 ] ; openSSLPBEParametersGenerator0 . init ( byteArray0 , byteArray0 , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BigInteger getIterationCount ( ) { return iterationCount ; }
void test3 ( ) throws Throwable { OpenSSLPBEParametersGenerator openSSLPBEParametersGenerator0 = new OpenSSLPBEParametersGenerator ( ) ; byte [ ] byteArray0 = openSSLPBEParametersGenerator0 . getSalt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getSalt ( ) { return salt ; }
void test4 ( ) throws Throwable { char [ ] charArray0 = new char [ 6 ] ; byte [ ] byteArray0 = PBEParametersGenerator . PKCS5PasswordToBytes ( charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] PKCS5PasswordToBytes ( char [ ] password ) { byte [ ] bytes = new byte [ password . length ] ; for ( int i = 0 ; i ! = bytes . length ; i + + ) { bytes [ i ] = ( byte ) password [ i ] ; } return bytes ; }
void test5 ( ) throws Throwable { char [ ] charArray0 = new char [ 25 ] ; byte [ ] byteArray0 = PBEParametersGenerator . PKCS12PasswordToBytes ( charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] PKCS12PasswordToBytes ( char [ ] password ) { if ( password . length > 0 ) { / / + 1 for extra 2 pad bytes . byte [ ] bytes = new byte [ ( password . length + 1 ) * 2 ] ; for ( int i = 0 ; i ! = password . length ; i + + ) { bytes [ i * 2 ] = ( byte ) ( password [ i ] > > > 8 ) ; bytes [ i * 2 + 1 ] = ( byte ) password [ i ] ; } return bytes ; } else { return new byte [ 0 ] ; } }
void test1 ( ) throws Throwable { CipherKeyGenerator cipherKeyGenerator0 = new CipherKeyGenerator ( ) ; KeyGenerationParameters keyGenerationParameters0 = new KeyGenerationParameters ( ( SecureRandom ) null , 0 ) ; cipherKeyGenerator0 . init ( keyGenerationParameters0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getStrength ( ) { return strength ; }
void test0 ( ) throws Throwable { BigInteger bigInteger0 = ECConstants . THREE ; ElGamalParameters elGamalParameters0 = new ElGamalParameters ( bigInteger0 , bigInteger0 ) ; AsymmetricCipherKeyPair asymmetricCipherKeyPair0 = new AsymmetricCipherKeyPair ( ( CipherParameters ) elGamalParameters0 , ( CipherParameters ) elGamalParameters0 ) ; ElGamalParameters elGamalParameters1 = ( ElGamalParameters ) asymmetricCipherKeyPair0 . getPublic ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" CipherParameters getPublic ( ) { return publicParam ; }
void test1 ( ) throws Throwable { BigInteger bigInteger0 = ECConstants . THREE ; ElGamalParameters elGamalParameters0 = new ElGamalParameters ( bigInteger0 , bigInteger0 ) ; AsymmetricCipherKeyPair asymmetricCipherKeyPair0 = new AsymmetricCipherKeyPair ( ( CipherParameters ) elGamalParameters0 , ( CipherParameters ) elGamalParameters0 ) ; ElGamalParameters elGamalParameters1 = ( ElGamalParameters ) asymmetricCipherKeyPair0 . getPrivate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPrivate ( ) { return ( false ) ; }
void test1 ( ) throws Throwable { MD4Digest mD4Digest0 = new MD4Digest ( ) ; MD4Digest mD4Digest1 = new MD4Digest ( mD4Digest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MD4Digest ( ) { reset ( ) ; }
void test2 ( ) throws Throwable { MD4Digest mD4Digest0 = new MD4Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test3 ( ) throws Throwable { MD4Digest mD4Digest0 = new MD4Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test5 ( ) throws Throwable { MD4Digest mD4Digest0 = new MD4Digest ( ) ; byte [ ] byteArray0 = new byte [ 7 ] ; byte [ ] byteArray1 = new byte [ 8 ] ; mD4Digest0 . processWord ( byteArray0 , 0 ) ; mD4Digest0 . processWord ( byteArray1 , 0 ) ; mD4Digest0 . processWord ( byteArray1 , ( int ) ( byte ) 0 ) ; mD4Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; mD4Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; mD4Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; mD4Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; mD4Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; mD4Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; mD4Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; mD4Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; mD4Digest0 . processWord ( byteArray0 , 0 ) ; mD4Digest0 . processWord ( byteArray1 , ( int ) ( byte ) 0 ) ; mD4Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; mD4Digest0 . finish ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test1 ( ) throws Throwable { MD5Digest mD5Digest0 = new MD5Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test2 ( ) throws Throwable { MD5Digest mD5Digest0 = new MD5Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test3 ( ) throws Throwable { MD5Digest mD5Digest0 = new MD5Digest ( ) ; MD5Digest mD5Digest1 = new MD5Digest ( mD5Digest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test0 ( ) throws Throwable { SHA512Digest sHA512Digest0 = new SHA512Digest ( ) ; SHA512Digest sHA512Digest1 = new SHA512Digest ( sHA512Digest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test2 ( ) throws Throwable { SHA512Digest sHA512Digest0 = new SHA512Digest ( ) ; byte [ ] byteArray0 = new byte [ 61 ] ; sHA512Digest0 . update ( byteArray0 , 0 , ( int ) ( byte ) 53 ) ; sHA512Digest0 . update ( byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 53 ) ; sHA512Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 53 ) ; sHA512Digest0 . finish ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test3 ( ) throws Throwable { SHA512Digest sHA512Digest0 = new SHA512Digest ( ) ; byte [ ] byteArray0 = new byte [ 61 ] ; sHA512Digest0 . update ( byteArray0 , 0 , ( int ) ( byte ) 53 ) ; sHA512Digest0 . update ( byteArray0 , 0 , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test1 ( ) throws Throwable { RIPEMD160Digest rIPEMD160Digest0 = new RIPEMD160Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test2 ( ) throws Throwable { RIPEMD160Digest rIPEMD160Digest0 = new RIPEMD160Digest ( ) ; RIPEMD160Digest rIPEMD160Digest1 = new RIPEMD160Digest ( rIPEMD160Digest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test3 ( ) throws Throwable { RIPEMD160Digest rIPEMD160Digest0 = new RIPEMD160Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test0 ( ) throws Throwable { RIPEMD256Digest rIPEMD256Digest0 = new RIPEMD256Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test2 ( ) throws Throwable { RIPEMD256Digest rIPEMD256Digest0 = new RIPEMD256Digest ( ) ; RIPEMD256Digest rIPEMD256Digest1 = new RIPEMD256Digest ( rIPEMD256Digest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test3 ( ) throws Throwable { RIPEMD256Digest rIPEMD256Digest0 = new RIPEMD256Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test1 ( ) throws Throwable { MD5Digest mD5Digest0 = new MD5Digest ( ) ; MD5Digest mD5Digest1 = new MD5Digest ( mD5Digest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MD5Digest ( ) { reset ( ) ; }
void test2 ( ) throws Throwable { RIPEMD256Digest rIPEMD256Digest0 = new RIPEMD256Digest ( ) ; rIPEMD256Digest0 . finish ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test3 ( ) throws Throwable { RIPEMD128Digest rIPEMD128Digest0 = new RIPEMD128Digest ( ) ; byte [ ] byteArray0 = new byte [ 9 ] ; rIPEMD128Digest0 . update ( ( byte ) ( - 110 ) ) ; rIPEMD128Digest0 . update ( byteArray0 , ( int ) ( byte ) 57 , ( - 481 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; RIPEMD256Digest rIPEMD256Digest0 = new RIPEMD256Digest ( ) ; rIPEMD256Digest0 . update ( byteArray0 , ( int ) ( byte ) 1 , ( int ) ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test1 ( ) throws Throwable { SHA256Digest sHA256Digest0 = new SHA256Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test2 ( ) throws Throwable { SHA256Digest sHA256Digest0 = new SHA256Digest ( ) ; SHA256Digest sHA256Digest1 = new SHA256Digest ( sHA256Digest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test3 ( ) throws Throwable { SHA256Digest sHA256Digest0 = new SHA256Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test0 ( ) throws Throwable { SHA384Digest sHA384Digest0 = new SHA384Digest ( ) ; String string0 = sHA384Digest0 . getAlgorithmName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test2 ( ) throws Throwable { SHA384Digest sHA384Digest0 = new SHA384Digest ( ) ; int int0 = sHA384Digest0 . getDigestSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test3 ( ) throws Throwable { SHA384Digest sHA384Digest0 = new SHA384Digest ( ) ; SHA384Digest sHA384Digest1 = new SHA384Digest ( sHA384Digest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test0 ( ) throws Throwable { TigerDigest tigerDigest0 = new TigerDigest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test2 ( ) throws Throwable { TigerDigest tigerDigest0 = new TigerDigest ( ) ; TigerDigest tigerDigest1 = new TigerDigest ( tigerDigest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TigerDigest ( ) { reset ( ) ; }
void test3 ( ) throws Throwable { TigerDigest tigerDigest0 = new TigerDigest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test5 ( ) throws Throwable { TigerDigest tigerDigest0 = new TigerDigest ( ) ; tigerDigest0 . update ( ( byte ) 61 ) ; byte [ ] byteArray0 = new byte [ 9 ] ; tigerDigest0 . update ( byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test0 ( ) throws Throwable { SHA1Digest sHA1Digest0 = new SHA1Digest ( ) ; byte [ ] byteArray0 = new byte [ 49 ] ; int int0 = sHA1Digest0 . doFinal ( byteArray0 , ( int ) ( byte ) 20 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] doFinal ( ) throws InvalidCipherTextException { byte [ ] out = cipher . processBlock ( buf , 0 , bufOff ) ; reset ( ) ; return out ; }
void test1 ( ) throws Throwable { SHA1Digest sHA1Digest0 = new SHA1Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test2 ( ) throws Throwable { SHA1Digest sHA1Digest0 = new SHA1Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test3 ( ) throws Throwable { SHA1Digest sHA1Digest0 = new SHA1Digest ( ) ; SHA1Digest sHA1Digest1 = new SHA1Digest ( sHA1Digest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test4 ( ) throws Throwable { SHA1Digest sHA1Digest0 = new SHA1Digest ( ) ; byte [ ] byteArray0 = new byte [ 49 ] ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 20 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 20 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 20 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 20 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; sHA1Digest0 . update ( byteArray0 , ( int ) ( byte ) 20 , ( int ) ( byte ) 20 ) ; sHA1Digest0 . update ( byteArray0 , 1 , ( int ) ( byte ) 20 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test5 ( ) throws Throwable { SHA1Digest sHA1Digest0 = new SHA1Digest ( ) ; byte [ ] byteArray0 = new byte [ 49 ] ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 20 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 20 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 20 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 20 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 20 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 20 ) ; sHA1Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 20 ) ; int int0 = sHA1Digest0 . doFinal ( byteArray0 , ( int ) ( byte ) 20 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] doFinal ( ) throws InvalidCipherTextException { byte [ ] out = cipher . processBlock ( buf , 0 , bufOff ) ; reset ( ) ; return out ; }
void test1 ( ) throws Throwable { RIPEMD320Digest rIPEMD320Digest0 = new RIPEMD320Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test2 ( ) throws Throwable { RIPEMD320Digest rIPEMD320Digest0 = new RIPEMD320Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test3 ( ) throws Throwable { RIPEMD320Digest rIPEMD320Digest0 = new RIPEMD320Digest ( ) ; RIPEMD320Digest rIPEMD320Digest1 = new RIPEMD320Digest ( rIPEMD320Digest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test4 ( ) throws Throwable { RIPEMD320Digest rIPEMD320Digest0 = new RIPEMD320Digest ( ) ; byte [ ] byteArray0 = new byte [ 35 ] ; rIPEMD320Digest0 . processWord ( byteArray0 , 14 ) ; rIPEMD320Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 17 ) ; rIPEMD320Digest0 . processWord ( byteArray0 , 14 ) ; rIPEMD320Digest0 . update ( byteArray0 , 14 , 14 ) ; rIPEMD320Digest0 . update ( byteArray0 , ( int ) ( byte ) 17 , 14 ) ; rIPEMD320Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; rIPEMD320Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 17 ) ; rIPEMD320Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; rIPEMD320Digest0 . processWord ( byteArray0 , ( int ) ( byte ) 0 ) ; rIPEMD320Digest0 . finish ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test0 ( ) throws Throwable { SHA512Digest sHA512Digest0 = new SHA512Digest ( ) ; int int0 = sHA512Digest0 . getDigestSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test1 ( ) throws Throwable { SHA512Digest sHA512Digest0 = new SHA512Digest ( ) ; String string0 = sHA512Digest0 . getAlgorithmName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test3 ( ) throws Throwable { SHA512Digest sHA512Digest0 = new SHA512Digest ( ) ; SHA512Digest sHA512Digest1 = new SHA512Digest ( sHA512Digest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test0 ( ) throws Throwable { MD2Digest mD2Digest0 = new MD2Digest ( ) ; MD2Digest mD2Digest1 = new MD2Digest ( mD2Digest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test1 ( ) throws Throwable { MD2Digest mD2Digest0 = new MD2Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test2 ( ) throws Throwable { MD2Digest mD2Digest0 = new MD2Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test5 ( ) throws Throwable { MD2Digest mD2Digest0 = new MD2Digest ( ) ; mD2Digest0 . update ( ( byte ) ( - 92 ) ) ; byte [ ] byteArray0 = new byte [ 2 ] ; mD2Digest0 . update ( byteArray0 , ( int ) ( byte ) ( - 92 ) , ( int ) ( byte ) ( - 92 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test6 ( ) throws Throwable { MD2Digest mD2Digest0 = new MD2Digest ( ) ; byte [ ] byteArray0 = new byte [ 3 ] ; mD2Digest0 . update ( byteArray0 , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test0 ( ) throws Throwable { RIPEMD128Digest rIPEMD128Digest0 = new RIPEMD128Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test2 ( ) throws Throwable { RIPEMD128Digest rIPEMD128Digest0 = new RIPEMD128Digest ( ) ; RIPEMD128Digest rIPEMD128Digest1 = new RIPEMD128Digest ( rIPEMD128Digest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test3 ( ) throws Throwable { RIPEMD128Digest rIPEMD128Digest0 = new RIPEMD128Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDigestSize ( ) ; / * * * update the message digest with a single byte . * * @param in the input byte to be entered . * / void update ( byte in ) ; / * * * update the message digest with a block of bytes . * * @param in the byte array containing the data . * @param inOff the offset into the byte array where the data starts . * @param len the length of the data . * / void update ( byte [ ] in , int inOff , int len ) ; / * * * close the digest , producing the digest value . The doFinal * call leaves the digest reset . * * @param out the array the digest is to be copied into . * @param outOff the offset into the out array the digest is to start at . * / int doFinal ( byte [ ] out , int outOff ) ; / * * * reset the digest back to it's initial state . * / void reset ( ) ; }
void test1 ( ) throws Throwable { RC4Engine rC4Engine0 = new RC4Engine ( ) ; String string0 = rC4Engine0 . getAlgorithmName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test4 ( ) throws Throwable { RC4Engine rC4Engine0 = new RC4Engine ( ) ; byte [ ] byteArray0 = new byte [ 8 ] ; DESedeParameters dESedeParameters0 = new DESedeParameters ( byteArray0 ) ; rC4Engine0 . init ( true , ( CipherParameters ) dESedeParameters0 ) ; rC4Engine0 . init ( true , ( CipherParameters ) dESedeParameters0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test5 ( ) throws Throwable { RC4Engine rC4Engine0 = new RC4Engine ( ) ; byte [ ] byteArray0 = new byte [ 5 ] ; rC4Engine0 . processBytes ( byteArray0 , ( int ) ( byte ) 46 , ( int ) ( byte ) ( - 99 ) , byteArray0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithmName ( ) ; / * * * encrypt / decrypt a single byte returning the result . * * @param in the byte to be processed . * @return the result of processing the input byte . * / byte returnByte ( byte in ) ; / * * * process a block of bytes from in putting the result into out . * * @param in the input byte array . * @param inOff the offset into the in array where the data to be processed starts . * @param len the number of bytes to be processed . * @param out the output buffer the processed bytes go into . * @param outOff the offset into the output byte array the processed data stars at . * @exception DataLengthException if the output buffer is too small . * / void processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException ; / * * * reset the cipher . This leaves it in the same state * it was at after the last init ( if there was one ) . * / void reset ( ) ; }
void test0 ( ) throws Throwable { ECDHBasicAgreement eCDHBasicAgreement0 = new ECDHBasicAgreement ( ) ; RIPEMD320Digest rIPEMD320Digest0 = new RIPEMD320Digest ( ) ; KDF2BytesGenerator kDF2BytesGenerator0 = new KDF2BytesGenerator ( ( Digest ) rIPEMD320Digest0 ) ; HMac hMac0 = new HMac ( ( Digest ) rIPEMD320Digest0 ) ; IESEngine iESEngine0 = new IESEngine ( ( BasicAgreement ) eCDHBasicAgreement0 , ( DerivationFunction ) kDF2BytesGenerator0 , ( Mac ) hMac0 , ( BufferedBlockCipher ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IESEngine ( BasicAgreement agree , DerivationFunction kdf , Mac mac ) { this . agree = agree ; this . kdf = kdf ; this . mac = mac ; this . macBuf = new byte [ mac . getMacSize ( ) ] ; this . cipher = null ; }
void test1 ( ) throws Throwable { ECDHBasicAgreement eCDHBasicAgreement0 = new ECDHBasicAgreement ( ) ; RIPEMD320Digest rIPEMD320Digest0 = new RIPEMD320Digest ( ) ; KDF2BytesGenerator kDF2BytesGenerator0 = new KDF2BytesGenerator ( ( Digest ) rIPEMD320Digest0 ) ; HMac hMac0 = new HMac ( ( Digest ) rIPEMD320Digest0 ) ; IESEngine iESEngine0 = new IESEngine ( ( BasicAgreement ) eCDHBasicAgreement0 , ( DerivationFunction ) kDF2BytesGenerator0 , ( Mac ) hMac0 ) ; iESEngine0 . init ( false , ( CipherParameters ) null , ( CipherParameters ) null , ( CipherParameters ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void init ( ) { if ( browser ! = null & & ! browser . isDisposed ( ) ) { return ; } try { browser = new BrowserWrapper ( cArea , Utils . getInitialBrowserStyle ( SWT . NONE ) ) ; browser . setLayoutData ( Utils . getFilledFormData ( ) ) ; browser . getParent ( ) . layout ( true ) ; } catch ( SWTError e ) { System . err . println ( "Browser : " + e . toString ( ) ) ; return ; } Control widgetIndicator = null ; String sIndicatorWidgetID = properties . getStringValue ( sConfigID + " . indicator" ) ; if ( sIndicatorWidgetID ! = null ) { SWTSkinObject skinObjectIndicator = skin . getSkinObjectByID ( sIndicatorWidgetID ) ; if ( skinObjectIndicator ! = null ) { widgetIndicator = skinObjectIndicator . getControl ( ) ; } } String browserID = properties . getStringValue ( sConfigID + " . view" ) ; if ( browserID = = null ) { browserID = sID ; } forceVisibleAfterLoad = properties . getBooleanValue ( sConfigID + " . forceVisibleAfterLoad" , true ) ; context = new BrowserContext ( browserID , browser , widgetIndicator , forceVisibleAfterLoad ) ; boolean noListeners = properties . getBooleanValue ( sConfigID + " . browser . nolisteners" , false ) ; if ( ! noListeners ) { context . addMessageListener ( new TorrentListener ( ) ) ; context . addMessageListener ( new VuzeListener ( ) ) ; context . addMessageListener ( new DisplayListener ( browser ) ) ; context . addMessageListener ( new ConfigListener ( browser ) ) ; } boolean popouts = properties . getBooleanValue ( sConfigID + " . browser . allowPopouts" , true ) ; context . setAllowPopups ( popouts ) ; context . addListener ( new loadingListener ( ) { void browserLoadingChanged ( boolean loading , String url ) { if ( loading & & browser . isVisible ( ) ) { / / hack so search results page doesn't clear cur selected if ( UrlFilter . getInstance ( ) . urlCanRPC ( url ) ) { SelectedContentManager . clearCurrentlySelectedContent ( ) ; } } } } ) ; String url = urlToUse ! = null ? urlToUse : sStartURL ! = null ? sStartURL : properties . getStringValue ( sConfigID + " . url" , ( String ) null ) ; if ( url ! = null ) { setURL ( url ) ; } }
void test0 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; BigInteger bigInteger0 = ECConstants . TWO ; RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters ( false , bigInteger0 , bigInteger0 ) ; rSAEngine0 . init ( false , ( CipherParameters ) rSAKeyParameters0 ) ; int int0 = rSAEngine0 . getOutputBlockSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOutputBlockSize ( ) { return cipher . getOutputBlockSize ( ) ; }
void test2 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; BigInteger bigInteger0 = ECConstants . TWO ; RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters ( true , bigInteger0 , bigInteger0 ) ; rSAEngine0 . init ( true , ( CipherParameters ) rSAKeyParameters0 ) ; byte [ ] byteArray0 = new byte [ 10 ] ; byte [ ] byteArray1 = rSAEngine0 . processBlock ( byteArray0 , 1 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOutputBlockSize ( ) { return cipher . getOutputBlockSize ( ) ; }
void test3 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; byte [ ] byteArray0 = new byte [ 3 ] ; BigInteger bigInteger0 = ECConstants . FOUR ; RSAPrivateCrtKeyParameters rSAPrivateCrtKeyParameters0 = new RSAPrivateCrtKeyParameters ( bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 , bigInteger0 ) ; rSAEngine0 . init ( false , ( CipherParameters ) rSAPrivateCrtKeyParameters0 ) ; byte [ ] byteArray1 = rSAEngine0 . processBlock ( byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInputBlockSize ( ) { return cipher . getInputBlockSize ( ) ; }
void test4 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; BigInteger bigInteger0 = ECConstants . TWO ; RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters ( true , bigInteger0 , bigInteger0 ) ; rSAEngine0 . init ( true , ( CipherParameters ) rSAKeyParameters0 ) ; byte [ ] byteArray0 = new byte [ 10 ] ; byteArray0 [ 0 ] = ( byte ) 111 ; byte [ ] byteArray1 = rSAEngine0 . processBlock ( byteArray0 , 0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInputBlockSize ( ) { return cipher . getInputBlockSize ( ) ; }
void test5 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; BigInteger bigInteger0 = ECConstants . TWO ; RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters ( false , bigInteger0 , bigInteger0 ) ; rSAEngine0 . init ( false , ( CipherParameters ) rSAKeyParameters0 ) ; byte [ ] byteArray0 = new byte [ 2 ] ; byteArray0 [ 1 ] = ( byte ) 89 ; byte [ ] byteArray1 = rSAEngine0 . processBlock ( byteArray0 , 0 , 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInputBlockSize ( ) { return cipher . getInputBlockSize ( ) ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 72 ] ; DESedeParameters dESedeParameters0 = new DESedeParameters ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DESedeParameters ( byte [ ] key ) { super ( key ) ; if ( isWeakKey ( key , 0 , 0 ) ) { throw new IllegalArgumentException ( "attempt to create weak DESede key" ) ; } }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; DESParameters . setOddParity ( byteArray0 ) ; boolean boolean0 = DESedeParameters . isWeakKey ( byteArray0 , ( int ) ( byte ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWeakKey ( byte [ ] key , int offset , int length ) { for ( int i = offset ; i < length ; i + = DES_KEY_LENGTH ) { if ( DESParameters . isWeakKey ( key , i ) ) { return true ; } } return false ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; DESParameters dESParameters0 = new DESParameters ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DESParameters ( byte [ ] key ) { super ( key ) ; if ( isWeakKey ( key , 0 ) ) { throw new IllegalArgumentException ( "attempt to create weak DES key" ) ; } }
void test0 ( ) throws Throwable { AsymmetricKeyParameter asymmetricKeyParameter0 = new AsymmetricKeyParameter ( false ) ; boolean boolean0 = asymmetricKeyParameter0 . isPrivate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test0 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; MD5Digest mD5Digest0 = new MD5Digest ( ) ; OAEPEncoding oAEPEncoding0 = new OAEPEncoding ( ( AsymmetricBlockCipher ) rSAEngine0 , ( Digest ) mD5Digest0 ) ; RSAEngine rSAEngine1 = ( RSAEngine ) oAEPEncoding0 . getUnderlyingCipher ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AsymmetricBlockCipher getUnderlyingCipher ( ) { return cipher ; }
void test1 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; MD5Digest mD5Digest0 = new MD5Digest ( ) ; OAEPEncoding oAEPEncoding0 = new OAEPEncoding ( ( AsymmetricBlockCipher ) rSAEngine0 , ( Digest ) mD5Digest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] encodeBlock ( byte [ ] in , int inOff , int inLen ) throws InvalidCipherTextException { byte [ ] block = new byte [ engine . getInputBlockSize ( ) ] ; if ( forPrivateKey ) { block [ 0 ] = 0x01 ; / / type code 1 for ( int i = 1 ; i ! = block . length - inLen - 1 ; i + + ) { block [ i ] = ( byte ) 0xFF ; } } else { random . nextBytes ( block ) ; / / random fill block [ 0 ] = 0x02 ; / / type code 2 / / / / a zero byte marks the end of the padding , so all / / the pad bytes must be non - zero . / / for ( int i = 1 ; i ! = block . length - inLen - 1 ; i + + ) { while ( block [ i ] = = 0 ) { block [ i ] = ( byte ) random . nextInt ( ) ; } } } block [ block . length - inLen - 1 ] = 0x00 ; / / mark the end of the padding System . arraycopy ( in , inOff , block , block . length - inLen , inLen ) ; return engine . processBlock ( block , 0 , block . length ) ; }
void test2 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; MD5Digest mD5Digest0 = new MD5Digest ( ) ; OAEPEncoding oAEPEncoding0 = new OAEPEncoding ( ( AsymmetricBlockCipher ) rSAEngine0 , ( Digest ) mD5Digest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOutputBlockSize ( ) { return cipher . getOutputBlockSize ( ) ; }
void test4 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; MD5Digest mD5Digest0 = new MD5Digest ( ) ; OAEPEncoding oAEPEncoding0 = new OAEPEncoding ( ( AsymmetricBlockCipher ) rSAEngine0 , ( Digest ) mD5Digest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int processBlock ( byte [ ] in , int inOff , byte [ ] out , int outOff ) throws DataLengthException , IllegalStateException ; / * * * Reset the cipher . After resetting the cipher is in the same state * as it was after the last init ( if there was one ) . * / void reset ( ) ; }
void test0 ( ) throws Throwable { ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding ( ( AsymmetricBlockCipher ) null ) ; int int0 = iSO9796d1Encoding0 . getPadBits ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPadBits ( int bitString ) { int val = 0 ; for ( int i = 3 ; i > = 0 ; i - - ) { / / / / this may look a little odd , but if it isn't done like this pre jdk1 . 2 / / JVM's break ! / / if ( i ! = 0 ) { if ( ( bitString > > ( i * 8 ) ) ! = 0 ) { val = ( bitString > > ( i * 8 ) ) & 0xFF ; break ; } } else { if ( bitString ! = 0 ) { val = bitString & 0xFF ; break ; } } } if ( val = = 0 ) { return 7 ; } int bits = 1 ; while ( ( ( val < < = 1 ) & 0xFF ) ! = 0 ) { bits + + ; } return 8 - bits ; }
void test1 ( ) throws Throwable { ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding ( ( AsymmetricBlockCipher ) null ) ; iSO9796d1Encoding0 . getUnderlyingCipher ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPadBits ( int bitString ) { int val = 0 ; for ( int i = 3 ; i > = 0 ; i - - ) { / / / / this may look a little odd , but if it isn't done like this pre jdk1 . 2 / / JVM's break ! / / if ( i ! = 0 ) { if ( ( bitString > > ( i * 8 ) ) ! = 0 ) { val = ( bitString > > ( i * 8 ) ) & 0xFF ; break ; } } else { if ( bitString ! = 0 ) { val = bitString & 0xFF ; break ; } } } if ( val = = 0 ) { return 7 ; } int bits = 1 ; while ( ( ( val < < = 1 ) & 0xFF ) ! = 0 ) { bits + + ; } return 8 - bits ; }
void test2 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding ( ( AsymmetricBlockCipher ) rSAEngine0 ) ; BigInteger bigInteger0 = ECConstants . ZERO ; RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters ( true , bigInteger0 , bigInteger0 ) ; iSO9796d1Encoding0 . init ( true , ( CipherParameters ) rSAKeyParameters0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPadBits ( int bitString ) { int val = 0 ; for ( int i = 3 ; i > = 0 ; i - - ) { / / / / this may look a little odd , but if it isn't done like this pre jdk1 . 2 / / JVM's break ! / / if ( i ! = 0 ) { if ( ( bitString > > ( i * 8 ) ) ! = 0 ) { val = ( bitString > > ( i * 8 ) ) & 0xFF ; break ; } } else { if ( bitString ! = 0 ) { val = bitString & 0xFF ; break ; } } } if ( val = = 0 ) { return 7 ; } int bits = 1 ; while ( ( ( val < < = 1 ) & 0xFF ) ! = 0 ) { bits + + ; } return 8 - bits ; }
void test4 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding ( ( AsymmetricBlockCipher ) rSAEngine0 ) ; BigInteger bigInteger0 = ECConstants . ZERO ; RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters ( true , bigInteger0 , bigInteger0 ) ; iSO9796d1Encoding0 . init ( true , ( CipherParameters ) rSAKeyParameters0 ) ; int int0 = iSO9796d1Encoding0 . getInputBlockSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOutputBlockSize ( ) { return cipher . getOutputBlockSize ( ) ; }
void test5 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding ( ( AsymmetricBlockCipher ) rSAEngine0 ) ; BigInteger bigInteger0 = ECConstants . ZERO ; RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters ( true , bigInteger0 , bigInteger0 ) ; iSO9796d1Encoding0 . init ( true , ( CipherParameters ) rSAKeyParameters0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPadBits ( int bitString ) { int val = 0 ; for ( int i = 3 ; i > = 0 ; i - - ) { / / / / this may look a little odd , but if it isn't done like this pre jdk1 . 2 / / JVM's break ! / / if ( i ! = 0 ) { if ( ( bitString > > ( i * 8 ) ) ! = 0 ) { val = ( bitString > > ( i * 8 ) ) & 0xFF ; break ; } } else { if ( bitString ! = 0 ) { val = bitString & 0xFF ; break ; } } } if ( val = = 0 ) { return 7 ; } int bits = 1 ; while ( ( ( val < < = 1 ) & 0xFF ) ! = 0 ) { bits + + ; } return 8 - bits ; }
void test6 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding ( ( AsymmetricBlockCipher ) rSAEngine0 ) ; BigInteger bigInteger0 = ECConstants . ZERO ; RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters ( true , bigInteger0 , bigInteger0 ) ; iSO9796d1Encoding0 . init ( true , ( CipherParameters ) rSAKeyParameters0 ) ; int int0 = iSO9796d1Encoding0 . getOutputBlockSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOutputBlockSize ( ) { return cipher . getOutputBlockSize ( ) ; }
void test7 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding ( ( AsymmetricBlockCipher ) rSAEngine0 ) ; iSO9796d1Encoding0 . setPadBits ( ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPadBits ( int bitString ) { int val = 0 ; for ( int i = 3 ; i > = 0 ; i - - ) { / / / / this may look a little odd , but if it isn't done like this pre jdk1 . 2 / / JVM's break ! / / if ( i ! = 0 ) { if ( ( bitString > > ( i * 8 ) ) ! = 0 ) { val = ( bitString > > ( i * 8 ) ) & 0xFF ; break ; } } else { if ( bitString ! = 0 ) { val = bitString & 0xFF ; break ; } } } if ( val = = 0 ) { return 7 ; } int bits = 1 ; while ( ( ( val < < = 1 ) & 0xFF ) ! = 0 ) { bits + + ; } return 8 - bits ; }
void test0 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; PKCS1Encoding pKCS1Encoding0 = new PKCS1Encoding ( ( AsymmetricBlockCipher ) rSAEngine0 ) ; RSAEngine rSAEngine1 = ( RSAEngine ) pKCS1Encoding0 . getUnderlyingCipher ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AsymmetricBlockCipher getUnderlyingCipher ( ) { return cipher ; }
void test1 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding ( ( AsymmetricBlockCipher ) rSAEngine0 ) ; PKCS1Encoding pKCS1Encoding0 = new PKCS1Encoding ( ( AsymmetricBlockCipher ) iSO9796d1Encoding0 ) ; BigInteger bigInteger0 = ECConstants . ONE ; RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters ( false , bigInteger0 , bigInteger0 ) ; pKCS1Encoding0 . init ( true , ( CipherParameters ) rSAKeyParameters0 ) ; int int0 = pKCS1Encoding0 . getOutputBlockSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOutputBlockSize ( ) { return cipher . getOutputBlockSize ( ) ; }
void test3 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; PKCS1Encoding pKCS1Encoding0 = new PKCS1Encoding ( ( AsymmetricBlockCipher ) rSAEngine0 ) ; BigInteger bigInteger0 = ECConstants . ONE ; RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters ( false , bigInteger0 , bigInteger0 ) ; PKCS1Encoding pKCS1Encoding1 = new PKCS1Encoding ( ( AsymmetricBlockCipher ) rSAEngine0 ) ; pKCS1Encoding1 . init ( true , ( CipherParameters ) rSAKeyParameters0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInputBlockSize ( ) { return cipher . getInputBlockSize ( ) ; }
void test4 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; PKCS1Encoding pKCS1Encoding0 = new PKCS1Encoding ( ( AsymmetricBlockCipher ) rSAEngine0 ) ; BigInteger bigInteger0 = ECConstants . ONE ; RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters ( true , bigInteger0 , bigInteger0 ) ; pKCS1Encoding0 . init ( true , ( CipherParameters ) rSAKeyParameters0 ) ; int int0 = pKCS1Encoding0 . getInputBlockSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInputBlockSize ( ) { return cipher . getInputBlockSize ( ) ; }
void test5 ( ) throws Throwable { RSAEngine rSAEngine0 = new RSAEngine ( ) ; ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding ( ( AsymmetricBlockCipher ) rSAEngine0 ) ; PKCS1Encoding pKCS1Encoding0 = new PKCS1Encoding ( ( AsymmetricBlockCipher ) rSAEngine0 ) ; BigInteger bigInteger0 = ECConstants . ONE ; RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters ( true , bigInteger0 , bigInteger0 ) ; PKCS1Encoding pKCS1Encoding1 = new PKCS1Encoding ( ( AsymmetricBlockCipher ) iSO9796d1Encoding0 ) ; byte [ ] byteArray0 = new byte [ 8 ] ; pKCS1Encoding1 . init ( true , ( CipherParameters ) rSAKeyParameters0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int processBlock ( byte [ ] in , int inOff , byte [ ] out , int outOff ) throws DataLengthException , IllegalStateException ; / * * * Reset the cipher . After resetting the cipher is in the same state * as it was after the last init ( if there was one ) . * / void reset ( ) ; }
void test0 ( ) throws Throwable { JSONValue jSONValue0 = new JSONValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ) ; JSONObject jSONObject1 = new JSONObject ( ( Map ) jSONObject0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test1 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( ( - 1010 ) , ( - 1010 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { JSONObject jSONObject0 = new JSONObject ( 1249 ) ; Object object0 = new Object ( ) ; jSONObject0 . put ( object0 , object0 ) ; String string0 = jSONObject0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test3 ( ) throws Throwable { String string0 = JSONObject . toString ( ( String ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { String string0 = JSONObject . toString ( " * ! 9v ? Foky\"A#" , " { \"java . lang . Object@3c71aedc\" : java . lang . Object@3c71aedc } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test5 ( ) throws Throwable { AbstractMap . SimpleImmutableEntry < Integer , String > abstractMap_SimpleImmutableEntry0 = new AbstractMap . SimpleImmutableEntry < Integer , String > ( ( Integer ) 0 , "55snvF / YI$P j ) ab\"qM" ) ; String string0 = JSONObject . toString ( "55snvF / YI$P j ) ab\"qM" , ( Object ) abstractMap_SimpleImmutableEntry0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; jSONArray0 . add ( ( Object ) "dDL" ) ; String string0 = jSONArray0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { JSONArray jSONArray0 = new JSONArray ( ) ; jSONArray0 . add ( ( Object ) "dDL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , 0 , 0 ) ; Yylex yylex0 = new Yylex ( ( InputStream ) byteArrayInputStream0 ) ; Yytoken yytoken0 = yylex0 . yylex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Yytoken yylex ( ) throws java . io . IOException { int yy_lookahead ; int yy_anchor = YY_NO_ANCHOR ; int yy_state = yy_state_dtrans [ yy_lexical_state ] ; int yy_next_state = YY_NO_STATE ; int yy_last_accept_state = YY_NO_STATE ; boolean yy_initial = true ; int yy_this_accept ; yy_mark_start ( ) ; yy_this_accept = yy_acpt [ yy_state ] ; if ( YY_NOT_ACCEPT ! = yy_this_accept ) { yy_last_accept_state = yy_state ; yy_mark_end ( ) ; } while ( true ) { if ( yy_initial & & yy_at_bol ) yy_lookahead = YY_BOL ; else yy_lookahead = yy_advance ( ) ; yy_next_state = YY_F ; yy_next_state = yy_nxt [ yy_rmap [ yy_state ] ] [ yy_cmap [ yy_lookahead ] ] ; if ( YY_EOF = = yy_lookahead & & true = = yy_initial ) { return null ; } if ( YY_F ! = yy_next_state ) { yy_state = yy_next_state ; yy_initial = false ; yy_this_accept = yy_acpt [ yy_state ] ; if ( YY_NOT_ACCEPT ! = yy_this_accept ) { yy_last_accept_state = yy_state ; yy_mark_end ( ) ; } } else { if ( YY_NO_STATE = = yy_last_accept_state ) { throw ( new Error ( "Lexical Error : Unmatched Input . " ) ) ; } else { yy_anchor = yy_acpt [ yy_last_accept_state ] ; if ( 0 ! = ( YY_END & yy_anchor ) ) { yy_move_end ( ) ; } yy_to_mark ( ) ; switch ( yy_last_accept_state ) { case 1 : case - 2 : break ; case 2 : { sb . delete ( 0 , sb . length ( ) ) ; yybegin ( STRING_BEGIN ) ; } case - 3 : break ; case 3 : { Long val = Long . valueOf ( yytext ( ) ) ; return new Yytoken ( Yytoken . TYPE_VALUE , val ) ; } case - 4 : break ; case 4 : { return new Yytoken ( Yytoken . TYPE_LEFT_BRACE , null ) ; } case - 5 : break ; case 5 : { return new Yytoken ( Yytoken . TYPE_RIGHT_BRACE , null ) ; } case - 6 : break ; case 6 : { return new Yytoken ( Yytoken . TYPE_LEFT_SQUARE , null ) ; } case - 7 : break ; case 7 : { return new Yytoken ( Yytoken . TYPE_RIGHT_SQUARE , null ) ; } case - 8 : break ; case 8 : { return new Yytoken ( Yytoken . TYPE_COMMA , null ) ; } case - 9 : break ; case 9 : { return new Yytoken ( Yytoken . TYPE_COLON , null ) ; } case - 10 : break ; case 10 : { } case - 11 : break ; case 11 : { Double val = Double . valueOf ( yytext ( ) ) ; return new Yytoken ( Yytoken . TYPE_VALUE , val ) ; } case - 12 : break ; case 12 : { return new Yytoken ( Yytoken . TYPE_VALUE , null ) ; } case - 13 : break ; case 13 : { Boolean val = Boolean . valueOf ( yytext ( ) ) ; return new Yytoken ( Yytoken . TYPE_VALUE , val ) ; } case - 14 : break ; case 14 : { sb . append ( yytext ( ) ) ; } case - 15 : break ; case 15 : { yybegin ( YYINITIAL ) ; return new Yytoken ( Yytoken . TYPE_VALUE , sb . toString ( ) ) ; } case - 16 : break ; case 16 : { sb . append ( '\\' ) ; } case - 17 : break ; case 17 : { sb . append ( '"' ) ; } case - 18 : break ; case 18 : { sb . append ( ' / ' ) ; } case - 19 : break ; case 19 : { sb . append ( '\b' ) ; } case - 20 : break ; case 20 : { sb . append ( '\f' ) ; } case - 21 : break ; case 21 : { sb . append ( '\n' ) ; } case - 22 : break ; case 22 : { sb . append ( '\r' ) ; } case - 23 : break ; case 23 : { sb . append ( '\t' ) ; } case - 24 : break ; case 24 : { int ch = Integer . parseInt ( yytext ( ) . substring ( 2 ) , 16 ) ; sb . append ( ( char ) ch ) ; } case - 25 : break ; case 26 : { Double val = Double . valueOf ( yytext ( ) ) ; return new Yytoken ( Yytoken . TYPE_VALUE , val ) ; } case - 26 : break ; case 27 : { sb . append ( yytext ( ) ) ; } case - 27 : break ; default : yy_error ( YY_E_INTERNAL , false ) ; case - 1 : } yy_initial = true ; yy_state = yy_state_dtrans [ yy_lexical_state ] ; yy_next_state = YY_NO_STATE ; yy_last_accept_state = YY_NO_STATE ; yy_mark_start ( ) ; yy_this_accept = yy_acpt [ yy_state ] ; if ( YY_NOT_ACCEPT ! = yy_this_accept ) { yy_last_accept_state = yy_state ; yy_mark_end ( ) ; } } } } }
void test0 ( ) throws Throwable { Object object0 = new Object ( ) ; Yytoken yytoken0 = new Yytoken ( 0 , object0 ) ; String string0 = yytoken0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { JSONParser jSONParser0 = new JSONParser ( ) ; StringReader stringReader0 = new StringReader ( " [ " ) ; jSONParser0 . parse ( ( Reader ) stringReader0 ) ; Object object0 = jSONParser0 . parse ( ( Reader ) stringReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object parse ( Reader in ) { try { JSONParser parser = new JSONParser ( ) ; return parser . parse ( in ) ; } catch ( Exception e ) { return null ; } }
void test0 ( ) throws Throwable { boolean boolean0 = StringPattern . match ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( Certificate cert ) { if ( ! ( cert instanceof X509Certificate ) ) { return false ; } X509Certificate x509Cert = ( X509Certificate ) cert ; try { if ( holder . getBaseCertificateID ( ) ! = null ) { return holder . getBaseCertificateID ( ) . getSerial ( ) . getValue ( ) . equals ( x509Cert . getSerialNumber ( ) ) & & matchesDN ( PrincipalUtil . getIssuerX509Principal ( x509Cert ) , holder . getBaseCertificateID ( ) . getIssuer ( ) ) ; } if ( holder . getEntityName ( ) ! = null ) { if ( matchesDN ( PrincipalUtil . getSubjectX509Principal ( x509Cert ) , holder . getEntityName ( ) ) ) { return true ; } } if ( holder . getObjectDigestInfo ( ) ! = null ) { MessageDigest md = null ; try { md = MessageDigest . getInstance ( getDigestAlgorithm ( ) , "BC" ) ; } catch ( Exception e ) { return false ; } switch ( getDigestedObjectType ( ) ) { case ObjectDigestInfo . publicKey : / / TODO : DSA Dss - parms md . update ( cert . getPublicKey ( ) . getEncoded ( ) ) ; break ; case ObjectDigestInfo . publicKeyCert : md . update ( cert . getEncoded ( ) ) ; break ; } if ( ! Arrays . areEqual ( md . digest ( ) , getObjectDigest ( ) ) ) { return false ; } } } catch ( CertificateEncodingException e ) { return false ; } return false ; }
void test1 ( ) throws Throwable { boolean boolean0 = StringPattern . matchIgnoreCase ( " > % * / ) < / NUo / p" , " > % * / ) < / NUo / p" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchIgnoreCase ( String probe , String pattern ) { StringPattern stringPattern = new StringPattern ( pattern , true ) ; return ( stringPattern . matches ( probe ) ) ; }
void test2 ( ) throws Throwable { StringPattern stringPattern0 = new StringPattern ( "N%'Y !  ? Z } I" ) ; String string0 = stringPattern0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasWildcard ( ) { if ( this . getPattern ( ) = = null ) return false ; if ( this . hasDigitWildcard ( ) ) { if ( this . getPattern ( ) . indexOf ( this . digitWildcardChar ( ) ) > = 0 ) return true ; } return ( this . getPattern ( ) . indexOf ( MULTI_WILDCARD ) > = 0 ) | | ( this . getPattern ( ) . indexOf ( SINGLECHAR_WILDCARD ) > = 0 ) ; }
void test3 ( ) throws Throwable { StringPattern stringPattern0 = new StringPattern ( "sYi ( g / s ] u$oxl ? g" , ' ( ' ) ; boolean boolean0 = stringPattern0 . hasWildcard ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char digitWildcardChar ( ) { if ( this . hasDigitWildcard ( ) ) return this . digitWildcard ( ) . charValue ( ) ; else return '\0' ; }
void test4 ( ) throws Throwable { boolean boolean0 = StringPattern . matchIgnoreCase ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchIgnoreCase ( String probe , String pattern ) { StringPattern stringPattern = new StringPattern ( pattern , true ) ; return ( stringPattern . matches ( probe ) ) ; }
void test5 ( ) throws Throwable { boolean boolean0 = StringPattern . matchIgnoreCase ( "K ? 1gD' | mC ] o\" > " , "K ? 1gD' | mC ] o\" > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchIgnoreCase ( String probe , String pattern ) { StringPattern stringPattern = new StringPattern ( pattern , true ) ; return ( stringPattern . matches ( probe ) ) ; }
void test6 ( ) throws Throwable { StringPattern stringPattern0 = new StringPattern ( "p & 8w : SVh_" ) ; StringExaminer stringExaminer0 = stringPattern0 . newExaminer ( "p & 8w : SVh_" ) ; boolean boolean0 = stringPattern0 . matchReverse ( "p & 8w : SVh_" , stringExaminer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIgnoreCase ( ) { return ignoreCase ; }
void test7 ( ) throws Throwable { StringExaminer stringExaminer0 = new StringExaminer ( " > % * / ) < / NUo / p" , true ) ; StringPattern stringPattern0 = new StringPattern ( " > % * / ) < / NUo / p" , true , ' * ' ) ; boolean boolean0 = stringPattern0 . matchReverse ( " > % * / ) < / NUo / p" , stringExaminer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasWildcard ( ) { if ( this . getPattern ( ) = = null ) return false ; if ( this . hasDigitWildcard ( ) ) { if ( this . getPattern ( ) . indexOf ( this . digitWildcardChar ( ) ) > = 0 ) return true ; } return ( this . getPattern ( ) . indexOf ( MULTI_WILDCARD ) > = 0 ) | | ( this . getPattern ( ) . indexOf ( SINGLECHAR_WILDCARD ) > = 0 ) ; }
void test8 ( ) throws Throwable { StringPattern stringPattern0 = new StringPattern ( "he { * > } ZX" , true , 'h' ) ; StringExaminer stringExaminer0 = new StringExaminer ( "he { * > } ZX" , true ) ; boolean boolean0 = stringPattern0 . matchReverse ( "he { * > } ZX" , stringExaminer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIgnoreCase ( ) { return ignoreCase ; }
void test9 ( ) throws Throwable { boolean boolean0 = StringPattern . match ( " . " , "5AO$^EHJO + + J" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( Certificate cert ) { if ( ! ( cert instanceof X509Certificate ) ) { return false ; } X509Certificate x509Cert = ( X509Certificate ) cert ; try { if ( holder . getBaseCertificateID ( ) ! = null ) { return holder . getBaseCertificateID ( ) . getSerial ( ) . getValue ( ) . equals ( x509Cert . getSerialNumber ( ) ) & & matchesDN ( PrincipalUtil . getIssuerX509Principal ( x509Cert ) , holder . getBaseCertificateID ( ) . getIssuer ( ) ) ; } if ( holder . getEntityName ( ) ! = null ) { if ( matchesDN ( PrincipalUtil . getSubjectX509Principal ( x509Cert ) , holder . getEntityName ( ) ) ) { return true ; } } if ( holder . getObjectDigestInfo ( ) ! = null ) { MessageDigest md = null ; try { md = MessageDigest . getInstance ( getDigestAlgorithm ( ) , "BC" ) ; } catch ( Exception e ) { return false ; } switch ( getDigestedObjectType ( ) ) { case ObjectDigestInfo . publicKey : / / TODO : DSA Dss - parms md . update ( cert . getPublicKey ( ) . getEncoded ( ) ) ; break ; case ObjectDigestInfo . publicKeyCert : md . update ( cert . getEncoded ( ) ) ; break ; } if ( ! Arrays . areEqual ( md . digest ( ) , getObjectDigest ( ) ) ) { return false ; } } } catch ( CertificateEncodingException e ) { return false ; } return false ; }
void test10 ( ) throws Throwable { boolean boolean0 = StringPattern . matchIgnoreCase ( "org . pf . text . StringPattern@38b01d43" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchIgnoreCase ( String probe , String pattern ) { StringPattern stringPattern = new StringPattern ( pattern , true ) ; return ( stringPattern . matches ( probe ) ) ; }
void test11 ( ) throws Throwable { StringPattern stringPattern0 = new StringPattern ( ( String ) null ) ; String string0 = stringPattern0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIgnoreCase ( ) { return ignoreCase ; }
void test12 ( ) throws Throwable { StringPattern stringPattern0 = new StringPattern ( "N%'Y !  ? Z } I" ) ; boolean boolean0 = stringPattern0 . hasWildcard ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIgnoreCase ( ) { return ignoreCase ; }
void test13 ( ) throws Throwable { StringPattern stringPattern0 = new StringPattern ( ( String ) null ) ; boolean boolean0 = stringPattern0 . hasWildcard ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIgnoreCase ( ) { return ignoreCase ; }
void test14 ( ) throws Throwable { StringPattern stringPattern0 = new StringPattern ( "ho" , '7' ) ; boolean boolean0 = stringPattern0 . hasWildcard ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIgnoreCase ( ) { return ignoreCase ; }
void test15 ( ) throws Throwable { StringPattern stringPattern0 = new StringPattern ( "he { * > } ZX" ) ; boolean boolean0 = stringPattern0 . hasWildcard ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasDigitWildcard ( ) { return this . digitWildcard ( ) ! = null ; }
void test16 ( ) throws Throwable { StringPattern stringPattern0 = new StringPattern ( "" , '\u0000' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasDigitWildcard ( ) { return this . digitWildcard ( ) ! = null ; }
void test17 ( ) throws Throwable { StringPattern stringPattern0 = new StringPattern ( ( String ) null ) ; char char0 = stringPattern0 . digitWildcardChar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIgnoreCase ( ) { return ignoreCase ; }
void test18 ( ) throws Throwable { StringPattern stringPattern0 = new StringPattern ( "K ? 1gD' | mC ] o\" > " , true , '6' ) ; StringExaminer stringExaminer0 = new StringExaminer ( "K ? 1gD' | mC ] o\" > " ) ; stringPattern0 . skipWildcards ( stringExaminer0 ) ; char char0 = stringPattern0 . skipWildcards ( stringExaminer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char digitWildcardChar ( ) { if ( this . hasDigitWildcard ( ) ) return this . digitWildcard ( ) . charValue ( ) ; else return '\0' ; }
void test19 ( ) throws Throwable { StringPattern stringPattern0 = new StringPattern ( ( String ) null ) ; boolean boolean0 = stringPattern0 . skipAfter ( ( StringExaminer ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIgnoreCase ( ) { return ignoreCase ; }
void test20 ( ) throws Throwable { StringPattern stringPattern0 = new StringPattern ( "" , false ) ; StringExaminer stringExaminer0 = stringPattern0 . newExaminer ( "" ) ; boolean boolean0 = stringPattern0 . skipAfter ( stringExaminer0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getIgnoreCase ( ) { return ignoreCase ; }
void test0 ( ) throws Throwable { StringScanner stringScanner0 = new StringScanner ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test1 ( ) throws Throwable { StringScanner stringScanner0 = new StringScanner ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { StringScanner stringScanner0 = new StringScanner ( " * gHKrZ [ 8 ) | gZR ? AJ > > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char nextChar ( ) { char next = this . peek ( ) ; if ( endNotReached ( next ) ) this . skip ( 1 ) ; return next ; }
void test3 ( ) throws Throwable { StringScanner stringScanner0 = new StringScanner ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long length ( ) throws IOException { return ( input . length ( ) ) ; }
void test4 ( ) throws Throwable { StringScanner stringScanner0 = new StringScanner ( " * gHKrZ [ 8 ) | gZR ? AJ > > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int peek ( int chunkSize ) ; }
void test5 ( ) throws Throwable { StringScanner stringScanner0 = new StringScanner ( " * gHKrZ [ 8 ) | gZR ? AJ > > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char nextChar ( ) { char next = this . peek ( ) ; if ( endNotReached ( next ) ) this . skip ( 1 ) ; return next ; }
void test6 ( ) throws Throwable { StringScanner stringScanner0 = new StringScanner ( " * gHKrZ [ 8 ) | gZR ? AJ > > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test7 ( ) throws Throwable { StringScanner stringScanner0 = new StringScanner ( "0Bz - Lu { Dvzm3MQUfWdT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test8 ( ) throws Throwable { StringScanner stringScanner0 = new StringScanner ( " Gns1w$SO ! g^` | S4Og" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test9 ( ) throws Throwable { StringScanner stringScanner0 = new StringScanner ( "0Bz - Lu { Dvzm3MQUfWdT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test10 ( ) throws Throwable { StringScanner stringScanner0 = new StringScanner ( " ? IbX@5 Yz > = 'z" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int peek ( int chunkSize ) ; }
void test0 ( ) throws Throwable { StringExaminer stringExaminer0 = new StringExaminer ( "" ) ; String string0 = stringExaminer0 . upToEnd ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ignoreCase ( ) { return ignoreCase ; }
void test1 ( ) throws Throwable { StringExaminer stringExaminer0 = new StringExaminer ( "5 > O" , true ) ; boolean boolean0 = stringExaminer0 . skipAfter ( "5 > O" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ignoreCase ( ) { return ignoreCase ; }
void test2 ( ) throws Throwable { StringExaminer stringExaminer0 = new StringExaminer ( "'m ? } | | ml4B & & `Sf } 4$" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String peekUpToEnd ( ) { return this . upToEnd ( true ) ; }
void test3 ( ) throws Throwable { StringExaminer stringExaminer0 = new StringExaminer ( "" ) ; stringExaminer0 . skipBefore ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ignoreCase ( ) { return ignoreCase ; }
void test4 ( ) throws Throwable { StringExaminer stringExaminer0 = new StringExaminer ( "" ) ; boolean boolean0 = stringExaminer0 . skipBefore ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ignoreCase ( ) { return ignoreCase ; }
void test5 ( ) throws Throwable { StringExaminer stringExaminer0 = new StringExaminer ( " + QsUH ? LJ + $U * ^^F7" ) ; stringExaminer0 . nextNoneWhitespaceChar ( ) ; boolean boolean0 = stringExaminer0 . skipBefore ( " + QsUH ? LJ + $U * ^^F7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String upToEnd ( ) { return this . upToEnd ( false ) ; }
void test6 ( ) throws Throwable { StringExaminer stringExaminer0 = new StringExaminer ( "'m ? } | | ml4B & & `Sf } 4$" , false ) ; boolean boolean0 = stringExaminer0 . skipBefore ( "'m ? } | | ml4B & & `Sf } 4$" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String peekUpToEnd ( ) { return this . upToEnd ( true ) ; }
void test7 ( ) throws Throwable { StringExaminer stringExaminer0 = new StringExaminer ( " . " , true ) ; boolean boolean0 = stringExaminer0 . charsAreEqual ( ' ! ' , '3' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ignoreCase ( ) { return ignoreCase ; }
void test0 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . suffix ( " ] 5j$` ( 'wd ( " , " ] 5j$` ( 'wd ( " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String suffix ( String str , String separator ) { return this . suffix ( str , separator , true ) ; }
void test2 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String string0 = stringUtil0 . prefix ( "" , "UG8ErbP@z { t ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String prefix ( String str , String separator ) { return this . prefix ( str , separator , true ) ; }
void test3 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = stringUtil0 . substrings ( " ; ) } eZ + " , " ; ) } eZ + " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] substrings ( String text , String separator ) { return this . substrings ( text , separator , false ) ; }
void test4 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String string0 = stringUtil0 . getDelimitedSubstring ( " & L# X - zbY%9H' = \r < " , " & L# X - zbY%9H' = \r < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDelimitedSubstring ( String text , String startDelimiter , String endDelimiter ) { int start ; int stop ; String subStr = "" ; if ( ( text ! = null ) & & ( startDelimiter ! = null ) & & ( endDelimiter ! = null ) ) { start = text . indexOf ( startDelimiter ) ; if ( start > = 0 ) { stop = text . indexOf ( endDelimiter , start + 1 ) ; if ( stop > start ) subStr = text . substring ( start + 1 , stop ) ; } } return subStr ; }
void test5 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = new String [ 6 ] ; String [ ] stringArray1 = stringUtil0 . remove ( stringArray0 , "\"9v" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( SkinView skinView ) { if ( skinView = = null ) { return ; } mon_skinViews . enter ( ) ; try { List < SkinView > list = mapSkinViews . get ( skinView . getClass ( ) ) ; if ( list ! = null ) { list . remove ( skinView ) ; if ( list . isEmpty ( ) ) { mapSkinViews . remove ( skinView . getClass ( ) ) ; } } } finally { mon_skinViews . exit ( ) ; } SWTSkinObject mainSkinObject = skinView . getMainSkinObject ( ) ; if ( mainSkinObject ! = null ) { skinIDs . remove ( mainSkinObject . getSkinObjectID ( ) ) ; skinViewIDs . remove ( mainSkinObject . getViewID ( ) ) ; } }
void test6 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String string0 = stringUtil0 . upTo ( "bCjU < b`OEnu@v ) @j < " , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String upTo ( String str , String separator ) { return this . prefix ( str , separator , false ) ; }
void test7 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String string0 = stringUtil0 . leftPad ( 3 , ( - 892 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String leftPad ( String str , int len ) { return this . leftPadCh ( str , len , CH_SPACE ) ; }
void test8 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String [ ] stringArray0 = stringUtil0 . allParts ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] appendIfNotThere ( String [ ] strings , String appendString ) { if ( this . contains ( strings , appendString ) ) return strings ; else return this . append ( strings , appendString ) ; }
void test9 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; Properties properties0 = stringUtil0 . asProperties ( ( String ) null ) ; Properties properties1 = stringUtil0 . toProperties ( ( String ) null , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Properties toProperties ( String str , Properties properties ) { Properties props = ( properties = = null ) ? new Properties ( ) : properties ; return ( Properties ) this . toMap ( str , null , null , props ) ; }
void test10 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; Map < Object , Object > map0 = stringUtil0 . asMap ( " } 5 / 9~D - ub3y5yf" , " } 5 / 9~D - ub3y5yf" , " } 5 / 9~D - ub3y5yf" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test11 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String string0 = stringUtil0 . startingFrom ( " } 5 / 9~D - ub3y5yf" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String startingFrom ( String str , String separator ) { return this . suffix ( str , separator , false ) ; }
void test12 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . rightPad ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String rightPad ( String str , int len ) { return this . rightPadCh ( str , len , CH_SPACE ) ; }
void test13 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; Map < Object , Object > map0 = stringUtil0 . asMap ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test14 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = stringUtil0 . words ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] words ( String text ) { return this . parts ( text , WORD_DELIM ) ; }
void test15 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = stringUtil0 . allSubstrings ( "lib" , "i" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] allSubstrings ( String text , String separator ) { return this . substrings ( text , separator , true ) ; }
void test16 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String string0 = stringUtil0 . center ( " : V * u = 1LWI" , 1643 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String center ( String str , int len ) { return this . centerCh ( str , len , CH_SPACE ) ; }
void test17 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = stringUtil0 . substrings ( ( String ) null , ( String ) null , false ) ; String string0 = stringUtil0 . asString ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String asString ( String [ ] strings , String separator ) { StringBuffer buffer = null ; buffer = new StringBuffer ( strings . length * 20 ) ; if ( strings . length > 0 ) { buffer . append ( strings [ 0 ] . toString ( ) ) ; for ( int i = 1 ; i < strings . length ; i + + ) { buffer . append ( separator ) ; if ( strings [ i ] ! = null ) buffer . append ( strings [ i ] ) ; } } return buffer . toString ( ) ; }
void test18 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . rightPad ( "v" , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String rightPad ( String str , int len ) { return this . rightPadCh ( str , len , CH_SPACE ) ; }
void test19 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String string0 = stringUtil0 . leftPad ( "z ( u^2# + xts6282\"q + > = " , 1471 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String leftPad ( String str , int len ) { return this . leftPadCh ( str , len , CH_SPACE ) ; }
void test20 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; Map < Object , Object > map0 = stringUtil0 . asMap ( " & L# X - zbY%9H' = \r < " , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test21 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; Properties properties0 = new Properties ( ) ; Map < Object , Object > map0 = stringUtil0 . toMap ( "EkUS@ , " , "EkUS@ , " , ( Map ) properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test22 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = stringUtil0 . appendIfNotThere ( ( String [ ] ) null , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] appendIfNotThere ( String [ ] strings , String appendString ) { if ( this . contains ( strings , appendString ) ) return strings ; else return this . append ( strings , appendString ) ; }
void test23 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String string0 = stringUtil0 . replaceAll ( "\"9v" , "\"9v" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replaceAll ( String str , String from_str , String replacement ) { StringBuffer res = null ; int pos = 0 ; while ( true ) { int p1 = str . indexOf ( from_str , pos ) ; if ( p1 = = - 1 ) { if ( res = = null ) { return ( str ) ; } res . append ( str . substring ( pos ) ) ; return ( res . toString ( ) ) ; } else { if ( res = = null ) { res = new StringBuffer ( str . length ( ) * 2 ) ; } if ( p1 > pos ) { res . append ( str . substring ( pos , p1 ) ) ; } res . append ( replacement ) ; pos = p1 + from_str . length ( ) ; } } }
void test24 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . replaceAll ( " * " , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replaceAll ( String str , String from_str , String replacement ) { StringBuffer res = null ; int pos = 0 ; while ( true ) { int p1 = str . indexOf ( from_str , pos ) ; if ( p1 = = - 1 ) { if ( res = = null ) { return ( str ) ; } res . append ( str . substring ( pos ) ) ; return ( res . toString ( ) ) ; } else { if ( res = = null ) { res = new StringBuffer ( str . length ( ) * 2 ) ; } if ( p1 > pos ) { res . append ( str . substring ( pos , p1 ) ) ; } res . append ( replacement ) ; pos = p1 + from_str . length ( ) ; } } }
void test25 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String string0 = stringUtil0 . replaceAll ( "log" , "5 > = T & b_Bna0\" ! %" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replaceAll ( String str , String from_str , String replacement ) { StringBuffer res = null ; int pos = 0 ; while ( true ) { int p1 = str . indexOf ( from_str , pos ) ; if ( p1 = = - 1 ) { if ( res = = null ) { return ( str ) ; } res . append ( str . substring ( pos ) ) ; return ( res . toString ( ) ) ; } else { if ( res = = null ) { res = new StringBuffer ( str . length ( ) * 2 ) ; } if ( p1 > pos ) { res . append ( str . substring ( pos , p1 ) ) ; } res . append ( replacement ) ; pos = p1 + from_str . length ( ) ; } } }
void test26 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . repeat ( 'W' , 'W' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String repeat ( char ch , int count ) { StringBuffer buffer = null ; buffer = new StringBuffer ( count ) ; for ( int i = 1 ; i < = count ; i + + ) { buffer . append ( ch ) ; } return ( buffer . toString ( ) ) ; }
void test27 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String string0 = stringUtil0 . getDelimitedSubstring ( ( String ) null , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDelimitedSubstring ( String text , String startDelimiter , String endDelimiter ) { int start ; int stop ; String subStr = "" ; if ( ( text ! = null ) & & ( startDelimiter ! = null ) & & ( endDelimiter ! = null ) ) { start = text . indexOf ( startDelimiter ) ; if ( start > = 0 ) { stop = text . indexOf ( endDelimiter , start + 1 ) ; if ( stop > start ) subStr = text . substring ( start + 1 , stop ) ; } } return subStr ; }
void test28 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String string0 = stringUtil0 . getDelimitedSubstring ( "0# ! yNv * x^" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDelimitedSubstring ( String text , String startDelimiter , String endDelimiter ) { int start ; int stop ; String subStr = "" ; if ( ( text ! = null ) & & ( startDelimiter ! = null ) & & ( endDelimiter ! = null ) ) { start = text . indexOf ( startDelimiter ) ; if ( start > = 0 ) { stop = text . indexOf ( endDelimiter , start + 1 ) ; if ( stop > start ) subStr = text . substring ( start + 1 , stop ) ; } } return subStr ; }
void test29 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . getDelimitedSubstring ( " ] 5J$` ( 'Wd ( " , " ; ) } eZ + " , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDelimitedSubstring ( String text , String startDelimiter , String endDelimiter ) { int start ; int stop ; String subStr = "" ; if ( ( text ! = null ) & & ( startDelimiter ! = null ) & & ( endDelimiter ! = null ) ) { start = text . indexOf ( startDelimiter ) ; if ( start > = 0 ) { stop = text . indexOf ( endDelimiter , start + 1 ) ; if ( stop > start ) subStr = text . substring ( start + 1 , stop ) ; } } return subStr ; }
void test30 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . getDelimitedSubstring ( " ] 5J$` ( 'Wd ( " , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDelimitedSubstring ( String text , String startDelimiter , String endDelimiter ) { int start ; int stop ; String subStr = "" ; if ( ( text ! = null ) & & ( startDelimiter ! = null ) & & ( endDelimiter ! = null ) ) { start = text . indexOf ( startDelimiter ) ; if ( start > = 0 ) { stop = text . indexOf ( endDelimiter , start + 1 ) ; if ( stop > start ) subStr = text . substring ( start + 1 , stop ) ; } } return subStr ; }
void test31 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . center ( "nEZs2vLuG + ; 2" , ( - 1188 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String center ( String str , int len ) { return this . centerCh ( str , len , CH_SPACE ) ; }
void test32 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = new String [ 2 ] ; String [ ] stringArray1 = stringUtil0 . append ( stringArray0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] append ( String [ ] strings , String string ) { String [ ] appStr = { string } ; return this . append ( strings , appStr ) ; }
void test33 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = new String [ 2 ] ; String [ ] stringArray1 = stringUtil0 . appendIfNotThere ( stringArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] appendIfNotThere ( String [ ] strings , String appendString ) { if ( this . contains ( strings , appendString ) ) return strings ; else return this . append ( strings , appendString ) ; }
void test34 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = stringUtil0 . remove ( ( String [ ] ) null , " & L# X - zbY%9H' = \r < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( SkinView skinView ) { if ( skinView = = null ) { return ; } mon_skinViews . enter ( ) ; try { List < SkinView > list = mapSkinViews . get ( skinView . getClass ( ) ) ; if ( list ! = null ) { list . remove ( skinView ) ; if ( list . isEmpty ( ) ) { mapSkinViews . remove ( skinView . getClass ( ) ) ; } } } finally { mon_skinViews . exit ( ) ; } SWTSkinObject mainSkinObject = skinView . getMainSkinObject ( ) ; if ( mainSkinObject ! = null ) { skinIDs . remove ( mainSkinObject . getSkinObjectID ( ) ) ; skinViewIDs . remove ( mainSkinObject . getViewID ( ) ) ; } }
void test35 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = stringUtil0 . substrings ( " & L# X - zbY%9H' = \r < " , " & L# X - zbY%9H' = \r < " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( SkinView skinView ) { if ( skinView = = null ) { return ; } mon_skinViews . enter ( ) ; try { List < SkinView > list = mapSkinViews . get ( skinView . getClass ( ) ) ; if ( list ! = null ) { list . remove ( skinView ) ; if ( list . isEmpty ( ) ) { mapSkinViews . remove ( skinView . getClass ( ) ) ; } } } finally { mon_skinViews . exit ( ) ; } SWTSkinObject mainSkinObject = skinView . getMainSkinObject ( ) ; if ( mainSkinObject ! = null ) { skinIDs . remove ( mainSkinObject . getSkinObjectID ( ) ) ; skinViewIDs . remove ( mainSkinObject . getViewID ( ) ) ; } }
void test36 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = stringUtil0 . removeNull ( ( String [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] removeNull ( String [ ] strings ) { if ( strings = = null ) return strings ; return this . removeFromStringArray ( strings , null ) ; }
void test37 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = "crash" ; stringArray0 [ 2 ] = " = Q ; " ; String string0 = stringUtil0 . asString ( stringArray0 , "d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String asString ( String [ ] strings , String separator ) { StringBuffer buffer = null ; buffer = new StringBuffer ( strings . length * 20 ) ; if ( strings . length > 0 ) { buffer . append ( strings [ 0 ] . toString ( ) ) ; for ( int i = 1 ; i < strings . length ; i + + ) { buffer . append ( separator ) ; if ( strings [ i ] ! = null ) buffer . append ( strings [ i ] ) ; } } return buffer . toString ( ) ; }
void test38 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; StringPattern stringPattern0 = new StringPattern ( ( String ) null , '5' ) ; boolean boolean0 = stringUtil0 . contains ( ( String [ ] ) null , stringPattern0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( T o ) { return ( set . contains ( o ) ) ; }
void test39 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String [ ] stringArray0 = stringUtil0 . parts ( "H" , "H" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( T o ) { return ( set . contains ( o ) ) ; }
void test40 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 2 ] = "xQ | zM\"^ = " ; StringPattern stringPattern0 = new StringPattern ( " + ^eD#'jv" , false ) ; int int0 = stringUtil0 . indexOf ( stringArray0 , stringPattern0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int indexOf ( MdiEntry entryLibrary ) { Object o = Utils . execSWTThreadWithObject ( "indexOf" , new AERunnableObject ( ) { Object runSupport ( ) { TreeItem treeItem = ( ( SideBarEntrySWT ) entryLibrary ) . getTreeItem ( ) ; if ( treeItem = = null ) { return - 1 ; } TreeItem parentItem = treeItem . getParentItem ( ) ; if ( parentItem ! = null ) { return parentItem . indexOf ( treeItem ) ; } return tree . indexOf ( treeItem ) ; } } , 500 ) ; if ( o instanceof Number ) { return ( ( Number ) o ) . intValue ( ) ; } return - 1 ; }
void test41 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String [ ] stringArray0 = new String [ 8 ] ; int int0 = stringUtil0 . indexOf ( stringArray0 , ( StringPattern ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int indexOf ( MdiEntry entryLibrary ) { Object o = Utils . execSWTThreadWithObject ( "indexOf" , new AERunnableObject ( ) { Object runSupport ( ) { TreeItem treeItem = ( ( SideBarEntrySWT ) entryLibrary ) . getTreeItem ( ) ; if ( treeItem = = null ) { return - 1 ; } TreeItem parentItem = treeItem . getParentItem ( ) ; if ( parentItem ! = null ) { return parentItem . indexOf ( treeItem ) ; } return tree . indexOf ( treeItem ) ; } } , 500 ) ; if ( o instanceof Number ) { return ( ( Number ) o ) . intValue ( ) ; } return - 1 ; }
void test42 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String [ ] stringArray0 = stringUtil0 . parts ( "" , ( String ) null , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int indexOf ( MdiEntry entryLibrary ) { Object o = Utils . execSWTThreadWithObject ( "indexOf" , new AERunnableObject ( ) { Object runSupport ( ) { TreeItem treeItem = ( ( SideBarEntrySWT ) entryLibrary ) . getTreeItem ( ) ; if ( treeItem = = null ) { return - 1 ; } TreeItem parentItem = treeItem . getParentItem ( ) ; if ( parentItem ! = null ) { return parentItem . indexOf ( treeItem ) ; } return tree . indexOf ( treeItem ) ; } } , 500 ) ; if ( o instanceof Number ) { return ( ( Number ) o ) . intValue ( ) ; } return - 1 ; }
void test43 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( T o ) { return ( set . contains ( o ) ) ; }
void test44 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = "`m% ) 55@ , h ; 't . 1 a" ; StringPattern stringPattern0 = new StringPattern ( "`m% ) 55@ , h ; 't . 1 a" , true , 'D' ) ; boolean boolean0 = stringUtil0 . contains ( stringArray0 , stringPattern0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( T o ) { return ( set . contains ( o ) ) ; }
void test45 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String [ ] stringArray0 = new String [ 8 ] ; boolean boolean0 = stringUtil0 . containsIgnoreCase ( stringArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsIgnoreCase ( String [ ] strArray , String searchStr ) { return ( this . indexOfIgnoreCase ( strArray , searchStr ) > = 0 ) ; }
void test46 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = new String [ 6 ] ; String [ ] stringArray1 = stringUtil0 . copyFrom ( stringArray0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] copyFrom ( String [ ] from , int start ) { if ( from = = null ) return null ; return this . copyFrom ( from , start , from . length - 1 ) ; }
void test47 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = stringUtil0 . copyFrom ( ( String [ ] ) null , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] copyFrom ( String [ ] from , int start ) { if ( from = = null ) return null ; return this . copyFrom ( from , start , from . length - 1 ) ; }
void test48 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = new String [ 6 ] ; String [ ] stringArray1 = stringUtil0 . copyFrom ( stringArray0 , 0 , 1874 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] copyFrom ( String [ ] from , int start ) { if ( from = = null ) return null ; return this . copyFrom ( from , start , from . length - 1 ) ; }
void test49 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = new String [ 15 ] ; String [ ] stringArray1 = stringUtil0 . copyFrom ( stringArray0 , 0 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test50 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . cutTail ( ( String ) null , " + ^ed#'jv" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String cutTail ( String text , String separator ) { int index ; if ( ( text = = null ) | | ( separator = = null ) ) return text ; index = text . lastIndexOf ( separator ) ; if ( index < 0 ) return text ; return text . substring ( 0 , index ) ; }
void test51 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String string0 = stringUtil0 . cutTail ( "UCx ] Tzi1W | " , "6cZh < < `wU^ / p" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String cutTail ( String text , String separator ) { int index ; if ( ( text = = null ) | | ( separator = = null ) ) return text ; index = text . lastIndexOf ( separator ) ; if ( index < 0 ) return text ; return text . substring ( 0 , index ) ; }
void test52 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . cutTail ( "8 : EhahAdNh~" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String cutTail ( String text , String separator ) { int index ; if ( ( text = = null ) | | ( separator = = null ) ) return text ; index = text . lastIndexOf ( separator ) ; if ( index < 0 ) return text ; return text . substring ( 0 , index ) ; }
void test53 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . cutTail ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String cutTail ( String text , String separator ) { int index ; if ( ( text = = null ) | | ( separator = = null ) ) return text ; index = text . lastIndexOf ( separator ) ; if ( index < 0 ) return text ; return text . substring ( 0 , index ) ; }
void test54 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . cutHead ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String cutHead ( String text , String separator ) { int index ; if ( ( text = = null ) | | ( separator = = null ) ) return text ; index = text . lastIndexOf ( separator ) ; if ( index < 0 ) return text ; return text . substring ( index + 1 ) ; }
void test55 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String string0 = stringUtil0 . cutHead ( "crash" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String cutHead ( String text , String separator ) { int index ; if ( ( text = = null ) | | ( separator = = null ) ) return text ; index = text . lastIndexOf ( separator ) ; if ( index < 0 ) return text ; return text . substring ( index + 1 ) ; }
void test56 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String string0 = stringUtil0 . cutHead ( " . , ^ : I | r [ \u0000" , " . , ^ : I | r [ \u0000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String cutHead ( String text , String separator ) { int index ; if ( ( text = = null ) | | ( separator = = null ) ) return text ; index = text . lastIndexOf ( separator ) ; if ( index < 0 ) return text ; return text . substring ( index + 1 ) ; }
void test57 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . cutHead ( "\ru / ; FNBaIq < - r9 * " , "~ri" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String cutHead ( String text , String separator ) { int index ; if ( ( text = = null ) | | ( separator = = null ) ) return text ; index = text . lastIndexOf ( separator ) ; if ( index < 0 ) return text ; return text . substring ( index + 1 ) ; }
void test58 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String [ ] stringArray0 = stringUtil0 . splitNameValue ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] splitNameValue ( String str , String separator ) { String [ ] result = { "" , "" } ; int index ; if ( str ! = null ) { index = str . indexOf ( separator ) ; if ( index > 0 ) { result [ 0 ] = str . substring ( 0 , index ) ; result [ 1 ] = str . substring ( index + separator . length ( ) ) ; } else { result [ 0 ] = str ; } } return result ; }
void test59 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String string0 = stringUtil0 . reverse ( " . torrnt" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String reverse ( String str ) { if ( str = = null ) return null ; char [ ] newStr = new char [ str . length ( ) ] ; StringCharacterIterator iterator = new StringCharacterIterator ( str ) ; int i = 0 ; for ( char ch = iterator . last ( ) ; ch ! = CharacterIterator . DONE ; ch = iterator . previous ( ) ) { newStr [ i ] = ch ; i + + ; } return new String ( newStr ) ; }
void test60 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . reverse ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String reverse ( String str ) { if ( str = = null ) return null ; char [ ] newStr = new char [ str . length ( ) ] ; StringCharacterIterator iterator = new StringCharacterIterator ( str ) ; int i = 0 ; for ( char ch = iterator . last ( ) ; ch ! = CharacterIterator . DONE ; ch = iterator . previous ( ) ) { newStr [ i ] = ch ; i + + ; } return new String ( newStr ) ; }
void test61 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; Map < Object , Object > map0 = stringUtil0 . asMap ( "" , "" , " ] 5j$` ( 'wd ( " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test62 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String [ ] stringArray0 = stringUtil0 . allParts ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] allParts ( String text , String delimiters ) { return this . parts ( text , delimiters , true ) ; }
void test63 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String [ ] stringArray0 = stringUtil0 . parts ( "O^' - 5 > 5A`" , "^' - 5 > 5A`" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] parts ( String text , String delimiters ) { return this . parts ( text , delimiters , false ) ; }
void test64 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = stringUtil0 . substrings ( "0# ! yNv * x^" , ( String ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] substrings ( String text , String separator ) { return this . substrings ( text , separator , false ) ; }
void test65 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String [ ] stringArray0 = stringUtil0 . substrings ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] substrings ( String text , String separator ) { return this . substrings ( text , separator , false ) ; }
void test66 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = stringUtil0 . substrings ( " & L# X - zbY%9H' = \r < " , " & L# X - zbY%9H' = \r < " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int indexOfIgnoreCase ( String [ ] strArray , String searchStr ) { return this . indexOfString ( strArray , searchStr , true ) ; }
void test67 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( T o ) { return ( set . contains ( o ) ) ; }
void test68 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . prefix ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String prefix ( String str , String separator ) { return this . prefix ( str , separator , true ) ; }
void test69 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . prefix ( "8 : EhahAdNh~" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String prefix ( String str , String separator ) { return this . prefix ( str , separator , true ) ; }
void test70 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . prefix ( "" , "" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String prefix ( String str , String separator ) { return this . prefix ( str , separator , true ) ; }
void test71 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . upTo ( "^' - 5 > 5A`" , "O^' - 5 > 5A`" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String upTo ( String str , String separator ) { return this . prefix ( str , separator , false ) ; }
void test72 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . suffix ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String suffix ( String str , String separator ) { return this . suffix ( str , separator , true ) ; }
void test73 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . suffix ( "uT4 ] " , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String suffix ( String str , String separator ) { return this . suffix ( str , separator , true ) ; }
void test74 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String string0 = stringUtil0 . suffix ( "" , " & L# X - zbY%9H' = \r < " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String suffix ( String str , String separator ) { return this . suffix ( str , separator , true ) ; }
void test75 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String string0 = stringUtil0 . suffix ( "t * ) X`1~A" , "gg = U4bK = > ? sQIP" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String suffix ( String str , String separator ) { return this . suffix ( str , separator , true ) ; }
void test76 ( ) throws Throwable { StringUtil stringUtil0 = new StringUtil ( ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 2 ] = " ] 5j$` ( 'wd ( " ; String [ ] stringArray1 = stringUtil0 . removeNull ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] removeNull ( String [ ] strings ) { if ( strings = = null ) return strings ; return this . removeFromStringArray ( strings , null ) ; }
void test77 ( ) throws Throwable { StringUtil stringUtil0 = StringUtil . current ( ) ; String [ ] stringArray0 = new String [ 6 ] ; String [ ] stringArray1 = stringUtil0 . remove ( stringArray0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( SkinView skinView ) { if ( skinView = = null ) { return ; } mon_skinViews . enter ( ) ; try { List < SkinView > list = mapSkinViews . get ( skinView . getClass ( ) ) ; if ( list ! = null ) { list . remove ( skinView ) ; if ( list . isEmpty ( ) ) { mapSkinViews . remove ( skinView . getClass ( ) ) ; } } } finally { mon_skinViews . exit ( ) ; } SWTSkinObject mainSkinObject = skinView . getMainSkinObject ( ) ; if ( mainSkinObject ! = null ) { skinIDs . remove ( mainSkinObject . getSkinObjectID ( ) ) ; skinViewIDs . remove ( mainSkinObject . getViewID ( ) ) ; } }
void test0 ( ) throws Throwable { FileUtil fileUtil0 = FileUtil . current ( ) ; StringReader stringReader0 = new StringReader ( "eU" ) ; StringWriter stringWriter0 = new StringWriter ( 775 ) ; fileUtil0 . copyText ( ( Reader ) stringReader0 , stringWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test2 ( ) throws Throwable { FileUtil fileUtil0 = FileUtil . current ( ) ; byte [ ] byteArray0 = new byte [ 4 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; BufferedInputStream bufferedInputStream0 = new BufferedInputStream ( ( InputStream ) byteArrayInputStream0 ) ; PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) pipedOutputStream0 , false ) ; fileUtil0 . copyStream ( ( InputStream ) bufferedInputStream0 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void copyStream ( InputStream inStream , OutputStream outStream ) throws IOException { this . copyStream ( inStream , outStream , DEFAULT_BUFFER_SIZE ) ; }
void test5 ( ) throws Throwable { FileUtil fileUtil0 = FileUtil . current ( ) ; StringWriter stringWriter0 = new StringWriter ( ) ; byte [ ] byteArray0 = new byte [ 7 ] ; byteArray0 [ 5 ] = ( byte ) 13 ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; fileUtil0 . copyText ( ( InputStream ) byteArrayInputStream0 , stringWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test11 ( ) throws Throwable { FileUtil fileUtil0 = FileUtil . current ( ) ; String string0 = fileUtil0 . standardize ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String standardize ( String filename ) { if ( filename = = null ) return null ; return this . standardizeFilename ( filename ) ; }
void test13 ( ) throws Throwable { FileUtil fileUtil0 = FileUtil . current ( ) ; String string0 = fileUtil0 . standardizeFilename ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String standardizeFilename ( String filename ) { String [ ] nameElements ; boolean hasDriveLetter ; boolean startedFromRoot ; boolean isAbsolute ; int index ; filename = this . javaFilename ( filename ) ; startedFromRoot = filename . startsWith ( " / " ) ; nameElements = this . str ( ) . parts ( filename , " / " ) ; if ( nameElements . length > 0 ) { hasDriveLetter = nameElements [ 0 ] . endsWith ( " : " ) ; if ( hasDriveLetter ) { nameElements [ 0 ] = nameElements [ 0 ] . toUpperCase ( ) ; } else { if ( startedFromRoot ) { nameElements = this . str ( ) . append ( new String [ ] { "" } , nameElements ) ; } } isAbsolute = hasDriveLetter | | startedFromRoot ; for ( int i = 0 ; i < nameElements . length ; i + + ) { if ( " . " . equals ( nameElements [ i ] ) ) { nameElements [ i ] = null ; } else { if ( " . . " . equals ( nameElements [ i ] ) ) { index = this . indexOfPreceedingNotNullElement ( nameElements , i - 1 ) ; if ( index > = 0 ) { if ( ( index > 0 ) | | ( ! isAbsolute ) ) { nameElements [ i ] = null ; nameElements [ index ] = null ; } } } } } nameElements = this . str ( ) . removeNull ( nameElements ) ; return this . str ( ) . asString ( nameElements , " / " ) ; } else { return "" ; } }
void test14 ( ) throws Throwable { FileUtil fileUtil0 = FileUtil . current ( ) ; String string0 = fileUtil0 . standardize ( "4 { d [ zUHyH`M# [ ) = e : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String standardize ( String filename ) { if ( filename = = null ) return null ; return this . standardizeFilename ( filename ) ; }
void test15 ( ) throws Throwable { FileUtil fileUtil0 = FileUtil . current ( ) ; String string0 = fileUtil0 . standardizeFilename ( " / 4 { d [ zUHyH`M# [ ) = eJ3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String standardizeFilename ( String filename ) { String [ ] nameElements ; boolean hasDriveLetter ; boolean startedFromRoot ; boolean isAbsolute ; int index ; filename = this . javaFilename ( filename ) ; startedFromRoot = filename . startsWith ( " / " ) ; nameElements = this . str ( ) . parts ( filename , " / " ) ; if ( nameElements . length > 0 ) { hasDriveLetter = nameElements [ 0 ] . endsWith ( " : " ) ; if ( hasDriveLetter ) { nameElements [ 0 ] = nameElements [ 0 ] . toUpperCase ( ) ; } else { if ( startedFromRoot ) { nameElements = this . str ( ) . append ( new String [ ] { "" } , nameElements ) ; } } isAbsolute = hasDriveLetter | | startedFromRoot ; for ( int i = 0 ; i < nameElements . length ; i + + ) { if ( " . " . equals ( nameElements [ i ] ) ) { nameElements [ i ] = null ; } else { if ( " . . " . equals ( nameElements [ i ] ) ) { index = this . indexOfPreceedingNotNullElement ( nameElements , i - 1 ) ; if ( index > = 0 ) { if ( ( index > 0 ) | | ( ! isAbsolute ) ) { nameElements [ i ] = null ; nameElements [ index ] = null ; } } } } } nameElements = this . str ( ) . removeNull ( nameElements ) ; return this . str ( ) . asString ( nameElements , " / " ) ; } else { return "" ; } }
void test16 ( ) throws Throwable { FileUtil fileUtil0 = FileUtil . current ( ) ; String string0 = fileUtil0 . standardizeFilename ( " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String standardizeFilename ( String filename ) { String [ ] nameElements ; boolean hasDriveLetter ; boolean startedFromRoot ; boolean isAbsolute ; int index ; filename = this . javaFilename ( filename ) ; startedFromRoot = filename . startsWith ( " / " ) ; nameElements = this . str ( ) . parts ( filename , " / " ) ; if ( nameElements . length > 0 ) { hasDriveLetter = nameElements [ 0 ] . endsWith ( " : " ) ; if ( hasDriveLetter ) { nameElements [ 0 ] = nameElements [ 0 ] . toUpperCase ( ) ; } else { if ( startedFromRoot ) { nameElements = this . str ( ) . append ( new String [ ] { "" } , nameElements ) ; } } isAbsolute = hasDriveLetter | | startedFromRoot ; for ( int i = 0 ; i < nameElements . length ; i + + ) { if ( " . " . equals ( nameElements [ i ] ) ) { nameElements [ i ] = null ; } else { if ( " . . " . equals ( nameElements [ i ] ) ) { index = this . indexOfPreceedingNotNullElement ( nameElements , i - 1 ) ; if ( index > = 0 ) { if ( ( index > 0 ) | | ( ! isAbsolute ) ) { nameElements [ i ] = null ; nameElements [ index ] = null ; } } } } } nameElements = this . str ( ) . removeNull ( nameElements ) ; return this . str ( ) . asString ( nameElements , " / " ) ; } else { return "" ; } }
void test17 ( ) throws Throwable { FileUtil fileUtil0 = FileUtil . current ( ) ; String string0 = fileUtil0 . standardizeFilename ( " . . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String standardizeFilename ( String filename ) { String [ ] nameElements ; boolean hasDriveLetter ; boolean startedFromRoot ; boolean isAbsolute ; int index ; filename = this . javaFilename ( filename ) ; startedFromRoot = filename . startsWith ( " / " ) ; nameElements = this . str ( ) . parts ( filename , " / " ) ; if ( nameElements . length > 0 ) { hasDriveLetter = nameElements [ 0 ] . endsWith ( " : " ) ; if ( hasDriveLetter ) { nameElements [ 0 ] = nameElements [ 0 ] . toUpperCase ( ) ; } else { if ( startedFromRoot ) { nameElements = this . str ( ) . append ( new String [ ] { "" } , nameElements ) ; } } isAbsolute = hasDriveLetter | | startedFromRoot ; for ( int i = 0 ; i < nameElements . length ; i + + ) { if ( " . " . equals ( nameElements [ i ] ) ) { nameElements [ i ] = null ; } else { if ( " . . " . equals ( nameElements [ i ] ) ) { index = this . indexOfPreceedingNotNullElement ( nameElements , i - 1 ) ; if ( index > = 0 ) { if ( ( index > 0 ) | | ( ! isAbsolute ) ) { nameElements [ i ] = null ; nameElements [ index ] = null ; } } } } } nameElements = this . str ( ) . removeNull ( nameElements ) ; return this . str ( ) . asString ( nameElements , " / " ) ; } else { return "" ; } }
void test18 ( ) throws Throwable { FileUtil fileUtil0 = FileUtil . current ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int indexOfPreceedingNotNullElement ( String [ ] elements , int start ) { for ( int i = start ; i > = 0 ; i - - ) { if ( elements [ i ] ! = null ) { if ( " . . " . equals ( elements [ i ] ) ) / / This is not a valid not null element { return - 1 ; } else { return i ; } } } return - 1 ; }
void test19 ( ) throws Throwable { FileUtil fileUtil0 = FileUtil . current ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int indexOfPreceedingNotNullElement ( String [ ] elements , int start ) { for ( int i = start ; i > = 0 ; i - - ) { if ( elements [ i ] ! = null ) { if ( " . . " . equals ( elements [ i ] ) ) / / This is not a valid not null element { return - 1 ; } else { return i ; } } } return - 1 ; }
void test20 ( ) throws Throwable { FileUtil fileUtil0 = FileUtil . current ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int indexOfPreceedingNotNullElement ( String [ ] elements , int start ) { for ( int i = start ; i > = 0 ; i - - ) { if ( elements [ i ] ! = null ) { if ( " . . " . equals ( elements [ i ] ) ) / / This is not a valid not null element { return - 1 ; } else { return i ; } } } return - 1 ; }
void test0 ( ) throws Throwable { FileWalker fileWalker0 = new FileWalker ( ( FileHandler ) null , 'F' ) ; long long0 = fileWalker0 . walkThrough ( "RY ) n ( 0 & " , "RY ) n ( 0 & " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getDigitWildcardChar ( ) { if ( this . hasDigitWildcard ( ) ) return this . getDigitWildcard ( ) . charValue ( ) ; else return '\0' ; }
void test1 ( ) throws Throwable { FileWalker fileWalker0 = new FileWalker ( ( FileHandler ) null ) ; long long0 = fileWalker0 . walkThrough ( "RY ) n ( 0 & " , "RY ) n ( 0 & " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasDigitWildcard ( ) { return this . digitWildcard ( ) ! = null ; }
void test2 ( ) throws Throwable { FileWalker fileWalker0 = new FileWalker ( ( FileHandler ) null ) ; boolean boolean0 = fileWalker0 . getGoOn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getGoOn ( ) { return goOn ; }
void test4 ( ) throws Throwable { FileWalker fileWalker0 = new FileWalker ( ( FileHandler ) null ) ; long long0 = fileWalker0 . walkThrough ( "RY ) n ( 0 & " , "RY ) n ( 0 & " , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getGoOn ( ) { return goOn ; }
void test5 ( ) throws Throwable { FileWalker fileWalker0 = new FileWalker ( ( FileHandler ) null ) ; fileWalker0 . setDigitWildcardChar ( '\u0000' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getGoOn ( ) { return goOn ; }
void test6 ( ) throws Throwable { FileWalker fileWalker0 = new FileWalker ( ( FileHandler ) null ) ; char char0 = fileWalker0 . getDigitWildcardChar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getGoOn ( ) { return goOn ; }
void test0 ( ) throws Throwable { FileLocator fileLocator0 = FileLocator . create ( "A" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExists ( ) { return exists ; }
void test1 ( ) throws Throwable { File file0 = new File ( "file : / / mnt / fastdata / ac1gf / SF110 / dist / 104_vuze / V" ) ; FileLocator fileLocator0 = FileLocator . create ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DiskManagerFileInfo getFile ( ) { return ( file ) ; }
void test2 ( ) throws Throwable { File file0 = new File ( "file : / / mnt / fastdata / ac1gf / SF110 / dist / 104_vuze / V" ) ; FileLocator fileLocator0 = FileLocator . create ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFile ( ) { try { if ( this . exists ( ) ) return this . isFileElement ( this . getFile ( ) ) ; else return false ; } catch ( Exception e ) { return false ; } }
void test3 ( ) throws Throwable { FileLocator fileLocator0 = FileLocator . create ( " = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStandardizedPath ( ) { return this . fileUtil ( ) . standardize ( this . getPath ( ) ) ; }
void test4 ( ) throws Throwable { FileLocator fileLocator0 = FileLocator . create ( "A" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exists ( ) ; void moveFile ( File new_file ) throws CacheFileManagerException ; void renameFile ( String new_name ) throws CacheFileManagerException ; void setAccessMode ( int mode ) throws CacheFileManagerException ; int getAccessMode ( ) ; void setStorageType ( int type ) throws CacheFileManagerException ; int getStorageType ( ) ; long getLength ( ) throws CacheFileManagerException ; long compareLength ( long compare_to ) throws CacheFileManagerException ; void setLength ( long length ) throws CacheFileManagerException ; void setPieceComplete ( int piece_number , DirectByteBuffer piece_data ) throws CacheFileManagerException ; void read ( DirectByteBuffer buffer , long offset , short policy ) throws CacheFileManagerException ; void read ( DirectByteBuffer [ ] buffers , long offset , short policy ) throws CacheFileManagerException ; void write ( DirectByteBuffer buffer , long position ) throws CacheFileManagerException ; void write ( DirectByteBuffer [ ] buffers , long position ) throws CacheFileManagerException ; / * * * writes the block to the cache and gives control of the buffer to the cache . * @param buffer * @param position * @throws CacheFileManagerException write failed and buffer * not * taken - i . e . caller must de - allocate * / void writeAndHandoverBuffer ( DirectByteBuffer buffer , long position ) throws CacheFileManagerException ; void writeAndHandoverBuffers ( DirectByteBuffer [ ] buffers , long position ) throws CacheFileManagerException ; / * * * flushes the cache to disk but retains entries * @throws CacheFileManagerException * / void flushCache ( ) throws CacheFileManagerException ; / * * * flushes the cache and discards entries * @throws CacheFileManagerException * / void clearCache ( ) throws CacheFileManagerException ; void close ( ) throws CacheFileManagerException ; boolean isOpen ( ) ; void delete ( ) throws CacheFileManagerException ; }
void test5 ( ) throws Throwable { FileLocator fileLocator0 = FileLocator . create ( "A" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirectory ( ) { try { if ( this . exists ( ) ) return ! this . isFileElement ( this . getFile ( ) ) ; else return false ; } catch ( Exception e ) { return false ; } }
void test6 ( ) throws Throwable { FileLocator fileLocator0 = FileLocator . create ( " = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exists ( ) ; void moveFile ( File new_file ) throws CacheFileManagerException ; void renameFile ( String new_name ) throws CacheFileManagerException ; void setAccessMode ( int mode ) throws CacheFileManagerException ; int getAccessMode ( ) ; void setStorageType ( int type ) throws CacheFileManagerException ; int getStorageType ( ) ; long getLength ( ) throws CacheFileManagerException ; long compareLength ( long compare_to ) throws CacheFileManagerException ; void setLength ( long length ) throws CacheFileManagerException ; void setPieceComplete ( int piece_number , DirectByteBuffer piece_data ) throws CacheFileManagerException ; void read ( DirectByteBuffer buffer , long offset , short policy ) throws CacheFileManagerException ; void read ( DirectByteBuffer [ ] buffers , long offset , short policy ) throws CacheFileManagerException ; void write ( DirectByteBuffer buffer , long position ) throws CacheFileManagerException ; void write ( DirectByteBuffer [ ] buffers , long position ) throws CacheFileManagerException ; / * * * writes the block to the cache and gives control of the buffer to the cache . * @param buffer * @param position * @throws CacheFileManagerException write failed and buffer * not * taken - i . e . caller must de - allocate * / void writeAndHandoverBuffer ( DirectByteBuffer buffer , long position ) throws CacheFileManagerException ; void writeAndHandoverBuffers ( DirectByteBuffer [ ] buffers , long position ) throws CacheFileManagerException ; / * * * flushes the cache to disk but retains entries * @throws CacheFileManagerException * / void flushCache ( ) throws CacheFileManagerException ; / * * * flushes the cache and discards entries * @throws CacheFileManagerException * / void clearCache ( ) throws CacheFileManagerException ; void close ( ) throws CacheFileManagerException ; boolean isOpen ( ) ; void delete ( ) throws CacheFileManagerException ; }
void test7 ( ) throws Throwable { FileLocator fileLocator0 = FileLocator . create ( " = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exists ( ) ; void moveFile ( File new_file ) throws CacheFileManagerException ; void renameFile ( String new_name ) throws CacheFileManagerException ; void setAccessMode ( int mode ) throws CacheFileManagerException ; int getAccessMode ( ) ; void setStorageType ( int type ) throws CacheFileManagerException ; int getStorageType ( ) ; long getLength ( ) throws CacheFileManagerException ; long compareLength ( long compare_to ) throws CacheFileManagerException ; void setLength ( long length ) throws CacheFileManagerException ; void setPieceComplete ( int piece_number , DirectByteBuffer piece_data ) throws CacheFileManagerException ; void read ( DirectByteBuffer buffer , long offset , short policy ) throws CacheFileManagerException ; void read ( DirectByteBuffer [ ] buffers , long offset , short policy ) throws CacheFileManagerException ; void write ( DirectByteBuffer buffer , long position ) throws CacheFileManagerException ; void write ( DirectByteBuffer [ ] buffers , long position ) throws CacheFileManagerException ; / * * * writes the block to the cache and gives control of the buffer to the cache . * @param buffer * @param position * @throws CacheFileManagerException write failed and buffer * not * taken - i . e . caller must de - allocate * / void writeAndHandoverBuffer ( DirectByteBuffer buffer , long position ) throws CacheFileManagerException ; void writeAndHandoverBuffers ( DirectByteBuffer [ ] buffers , long position ) throws CacheFileManagerException ; / * * * flushes the cache to disk but retains entries * @throws CacheFileManagerException * / void flushCache ( ) throws CacheFileManagerException ; / * * * flushes the cache and discards entries * @throws CacheFileManagerException * / void clearCache ( ) throws CacheFileManagerException ; void close ( ) throws CacheFileManagerException ; boolean isOpen ( ) ; void delete ( ) throws CacheFileManagerException ; }
void test8 ( ) throws Throwable { FileLocator fileLocator0 = FileLocator . create ( "crash" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirectory ( ) { try { if ( this . exists ( ) ) return ! this . isFileElement ( this . getFile ( ) ) ; else return false ; } catch ( Exception e ) { return false ; } }
void test9 ( ) throws Throwable { FileLocator fileLocator0 = FileLocator . create ( " = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exists ( ) ; void moveFile ( File new_file ) throws CacheFileManagerException ; void renameFile ( String new_name ) throws CacheFileManagerException ; void setAccessMode ( int mode ) throws CacheFileManagerException ; int getAccessMode ( ) ; void setStorageType ( int type ) throws CacheFileManagerException ; int getStorageType ( ) ; long getLength ( ) throws CacheFileManagerException ; long compareLength ( long compare_to ) throws CacheFileManagerException ; void setLength ( long length ) throws CacheFileManagerException ; void setPieceComplete ( int piece_number , DirectByteBuffer piece_data ) throws CacheFileManagerException ; void read ( DirectByteBuffer buffer , long offset , short policy ) throws CacheFileManagerException ; void read ( DirectByteBuffer [ ] buffers , long offset , short policy ) throws CacheFileManagerException ; void write ( DirectByteBuffer buffer , long position ) throws CacheFileManagerException ; void write ( DirectByteBuffer [ ] buffers , long position ) throws CacheFileManagerException ; / * * * writes the block to the cache and gives control of the buffer to the cache . * @param buffer * @param position * @throws CacheFileManagerException write failed and buffer * not * taken - i . e . caller must de - allocate * / void writeAndHandoverBuffer ( DirectByteBuffer buffer , long position ) throws CacheFileManagerException ; void writeAndHandoverBuffers ( DirectByteBuffer [ ] buffers , long position ) throws CacheFileManagerException ; / * * * flushes the cache to disk but retains entries * @throws CacheFileManagerException * / void flushCache ( ) throws CacheFileManagerException ; / * * * flushes the cache and discards entries * @throws CacheFileManagerException * / void clearCache ( ) throws CacheFileManagerException ; void close ( ) throws CacheFileManagerException ; boolean isOpen ( ) ; void delete ( ) throws CacheFileManagerException ; }
void test10 ( ) throws Throwable { FileLocator fileLocator0 = FileLocator . create ( " ! d ; ) + ) PrsTfx" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test11 ( ) throws Throwable { FileLocator fileLocator0 = FileLocator . create ( "A" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirectory ( ) { try { if ( this . exists ( ) ) return ! this . isFileElement ( this . getFile ( ) ) ; else return false ; } catch ( Exception e ) { return false ; } }
void test12 ( ) throws Throwable { File file0 = new File ( "file : / / mnt / fastdata / ac1gf / SF110 / dist / 104_vuze / V" ) ; FileLocator fileLocator0 = FileLocator . create ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long lastModified ( ) { ZipEntry entry ; try { if ( this . isInArchive ( ) ) { entry = this . archiveEntry ( ) ; return entry . getTime ( ) ; } else { return this . getFile ( ) . lastModified ( ) ; } } catch ( Exception ex ) { if ( DEBUG ) ex . printStackTrace ( ) ; return 0L ; } }
void test13 ( ) throws Throwable { File file0 = new File ( " [ * Feo3\" | JM > r" , " [ * Feo3\" | JM > r" ) ; FileLocator fileLocator0 = FileLocator . create ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream getInputStream ( ) throws Exception { ZipEntry entry ; if ( this . isInArchive ( ) ) { entry = this . archiveEntry ( ) ; return this . container ( ) . getInputStream ( entry ) ; } else { return new FileInputStream ( this . getFile ( ) ) ; } }
void test14 ( ) throws Throwable { FileLocator fileLocator0 = FileLocator . create ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream getInputStream ( ) throws Exception { ZipEntry entry ; if ( this . isInArchive ( ) ) { entry = this . archiveEntry ( ) ; return this . container ( ) . getInputStream ( entry ) ; } else { return new FileInputStream ( this . getFile ( ) ) ; } }
void test15 ( ) throws Throwable { FileLocator fileLocator0 = FileLocator . create ( " *  , DeD ( fVYRGe5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FileLocator initFromPath ( String [ ] parts , boolean startsFromRoot ) throws Exception { FileLocator locator = this ; File pathElement = null ; String [ ] rest = null ; boolean elementExists = false ; if ( startsFromRoot ) pathElement = new File ( File . separator ) ; for ( int i = 0 ; i < parts . length ; i + + ) { if ( pathElement = = null ) pathElement = new File ( parts [ i ] ) ; else pathElement = new File ( pathElement , parts [ i ] ) ; elementExists = this . doesElementExist ( pathElement ) ; if ( elementExists ) { this . setFile ( pathElement ) ; if ( this . isFileElement ( pathElement ) ) { if ( DEBUG ) System . out . println ( "Locator ( " + pathElement + " ) " ) ; if ( i < ( parts . length - 1 ) ) / / Is not last element ? { rest = str ( ) . copyFrom ( parts , i + 1 ) ; / / if ( DEBUG ) com . mdcs . joi . Inspector . inspect ( "SubLocator" , rest ) ; locator = FileLocator . newWith ( this , rest ) ; } break ; } } else { if ( this . isInArchive ( ) ) { if ( i < ( parts . length - 1 ) ) / / Is not last element ? { / / Directories are not always identifiable individually in zip archives . / / Therefore it must be accepted that they are not found . / / So in such case no exception will be thrown . } else { throw new Exception ( "\"" + pathElement . getPath ( ) + "\" does not exist" ) ; } } else { throw new Exception ( "\"" + pathElement . getPath ( ) + "\" does not exist" ) ; } } } return locator ; }
void test16 ( ) throws Throwable { FileLocator fileLocator0 = FileLocator . create ( " / e%# [ . 8 . n : U5E1~@1 = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAbsolutePath ( ) { return this . fullFilePath ( true ) . getPath ( ) ; }
void test17 ( ) throws Throwable { File file0 = new File ( "file : / / mnt / fastdata / ac1gf / SF110 / dist / 104_vuze / V" ) ; FileLocator fileLocator0 = FileLocator . create ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" URL toURL ( ) throws MalformedURLException { StringBuffer buffer = new StringBuffer ( 128 ) ; this . urlPath ( buffer ) ; return new URL ( buffer . toString ( ) ) ; }
void test18 ( ) throws Throwable { FileLocator fileLocator0 = FileLocator . create ( " = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExists ( ) { return exists ; }
void test0 ( ) throws Throwable { FileFinder fileFinder0 = new FileFinder ( ) ; boolean boolean0 = fileFinder0 . handleFile ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean handleFile ( File file ) ; / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - / * * * This method is called for whenever an exception occurs in walking through * the directories . < br > * The method must return true , if the FileWalker should continue . To stop the * calling FileWalker it can return false . * * @param ex The exception to handle * @param The file , currently found by the FileWalker instance * @return true to continue , false to terminate processing of files * / boolean handleException ( Exception ex , File file ) ; / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - / * * * This method is called for each directory , that a FileWalker finished to walk through . * It must return true , if the FileWalker should continue . To stop the * calling FileWalker it can return false . * * @param dir The directory , the FileWalker has finished to walk through * @return true to continue , false to terminate processing of files * / boolean directoryEnd ( File dir ) ; / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - / * * * This method is called for each directory , that a FileWalker starts to walk through . * It must return true , if the FileWalker should continue . To stop the * calling FileWalker it can return false . * * @param dir The directory , the FileWalker is starting to walk through * @param count The number of files and directories the FileWalker found in the directory * @return true to continue , false to terminate processing of files * / boolean directoryStart ( File dir , int count ) ; / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - } / / class FileHandler
void test1 ( ) throws Throwable { File [ ] fileArray0 = FileFinder . findFiles ( "RDQqv . | " , "RDQqv . | " , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File [ ] findFiles ( String dir , String pattern ) { return findFiles ( dir , pattern , true ) ; }
void test2 ( ) throws Throwable { FileFinder fileFinder0 = new FileFinder ( ) ; boolean boolean0 = fileFinder0 . handleException ( ( Exception ) null , ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean handleException ( Exception ex , File file ) ; / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - / * * * This method is called for each directory , that a FileWalker finished to walk through . * It must return true , if the FileWalker should continue . To stop the * calling FileWalker it can return false . * * @param dir The directory , the FileWalker has finished to walk through * @return true to continue , false to terminate processing of files * / boolean directoryEnd ( File dir ) ; / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - / * * * This method is called for each directory , that a FileWalker starts to walk through . * It must return true , if the FileWalker should continue . To stop the * calling FileWalker it can return false . * * @param dir The directory , the FileWalker is starting to walk through * @param count The number of files and directories the FileWalker found in the directory * @return true to continue , false to terminate processing of files * / boolean directoryStart ( File dir , int count ) ; / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - } / / class FileHandler
void test3 ( ) throws Throwable { FileFinder fileFinder0 = new FileFinder ( ) ; boolean boolean0 = fileFinder0 . directoryStart ( ( File ) null , 1210 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean directoryStart ( File dir , int count ) ; / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - } / / class FileHandler
void test4 ( ) throws Throwable { FileFinder fileFinder0 = new FileFinder ( ) ; File file0 = new File ( "" , "" ) ; boolean boolean0 = fileFinder0 . directoryEnd ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean directoryEnd ( File dir ) ; / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - / * * * This method is called for each directory , that a FileWalker starts to walk through . * It must return true , if the FileWalker should continue . To stop the * calling FileWalker it can return false . * * @param dir The directory , the FileWalker is starting to walk through * @param count The number of files and directories the FileWalker found in the directory * @return true to continue , false to terminate processing of files * / boolean directoryStart ( File dir , int count ) ; / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - } / / class FileHandler
void test6 ( ) throws Throwable { File file0 = FileFinder . findFile ( "fp - ile : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File findFile ( String filename ) { File aFile = null ; aFile = new File ( filename ) ; if ( fileExists ( aFile ) ) return aFile ; aFile = findFileOnClasspath ( filename ) ; return aFile ; }
void test7 ( ) throws Throwable { File file0 = FileFinder . findFile ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPath ( ) { return this . fullFilePath ( false ) . getPath ( ) ; }
void test9 ( ) throws Throwable { File [ ] fileArray0 = FileFinder . findFiles ( "" , "" , true , ' { ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File [ ] findFiles ( String dir , String pattern ) { return findFiles ( dir , pattern , true ) ; }
void test0 ( ) throws Throwable { ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter ( ) ; extendedFileFilter0 . addPattern ( "" , '4' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDirHandling ( ) { return dirHandling ; }
void test1 ( ) throws Throwable { ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter ( ) ; extendedFileFilter0 . checkNameOfDirectories ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDirHandling ( ) { return dirHandling ; }
void test2 ( ) throws Throwable { ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter ( ) ; extendedFileFilter0 . addPattern ( "6X > Pkb" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDirHandling ( ) { return dirHandling ; }
void test3 ( ) throws Throwable { ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter ( ) ; extendedFileFilter0 . addPattern ( "" , true ) ; boolean boolean0 = extendedFileFilter0 . checkAgainstPatterns ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDirHandling ( ) { return dirHandling ; }
void test4 ( ) throws Throwable { ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter ( ) ; File file0 = new File ( "" , "" ) ; boolean boolean0 = extendedFileFilter0 . accept ( file0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean mustExcludeDirectories ( ) { return ( this . getDirHandling ( ) = = DIR_EXCLUDE ) ; }
void test5 ( ) throws Throwable { ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter ( ) ; LinkedList < StringPattern > linkedList0 = new LinkedList < StringPattern > ( ) ; extendedFileFilter0 . setStringPatterns ( ( List ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDirHandling ( ) { return dirHandling ; }
void test6 ( ) throws Throwable { ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter ( ) ; extendedFileFilter0 . addPattern ( "" , true , ' > ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDirHandling ( ) { return dirHandling ; }
void test7 ( ) throws Throwable { ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter ( ) ; boolean boolean0 = extendedFileFilter0 . accept ( ( File ) null , "0p ! k2 = YPaf" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDirHandling ( ) { return dirHandling ; }
void test8 ( ) throws Throwable { ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter ( ) ; extendedFileFilter0 . alwaysIncludeDirectories ( ) ; File file0 = new File ( "" ) ; boolean boolean0 = extendedFileFilter0 . accept ( file0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDirHandling ( ) { return dirHandling ; }
void test9 ( ) throws Throwable { ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter ( ) ; extendedFileFilter0 . alwaysExcludeDirectories ( ) ; File file0 = new File ( "" , "" ) ; boolean boolean0 = extendedFileFilter0 . accept ( file0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDirHandling ( ) { return dirHandling ; }
void test10 ( ) throws Throwable { ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter ( ) ; extendedFileFilter0 . addPattern ( "0p ! k2 = YPaf" , false ) ; boolean boolean0 = extendedFileFilter0 . checkAgainstPatterns ( "0p ! k2 = YPaf" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDirHandling ( ) { return dirHandling ; }
void test0 ( ) throws Throwable { ImportTorrentWizardOutputPanel importTorrentWizardOutputPanel0 = new ImportTorrentWizardOutputPanel ( ( Wizard ) null , ( IWizardPanel ) null ) ; boolean boolean0 = importTorrentWizardOutputPanel0 . isFinishEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFinishEnabled ( ) { return ( file_valid ) ; }
void test2 ( ) throws Throwable { ImportTorrentWizardOutputPanel importTorrentWizardOutputPanel0 = new ImportTorrentWizardOutputPanel ( ( Wizard ) null , ( IWizardPanel ) null ) ; importTorrentWizardOutputPanel0 . getFinishPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFinishEnabled ( ) { return ( file_valid ) ; }
void test0 ( ) throws Throwable { ImportTorrentWizardFinishPanel importTorrentWizardFinishPanel0 = new ImportTorrentWizardFinishPanel ( ( Wizard ) null , ( IWizardPanel ) null ) ; boolean boolean0 = importTorrentWizardFinishPanel0 . isPreviousEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPreviousEnabled ( ) { return ( false ) ; }
void test1 ( ) throws Throwable { IPWModePanel iPWModePanel0 = new IPWModePanel ( ( Wizard ) null , ( IWizardPanel ) null ) ; ImportTorrentWizardInputPanel importTorrentWizardInputPanel0 = new ImportTorrentWizardInputPanel ( ( Wizard ) null , ( IWizardPanel ) iPWModePanel0 ) ; boolean boolean0 = importTorrentWizardInputPanel0 . isNextEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNextEnabled ( ) { return ( file_valid ) ; }
void test2 ( ) throws Throwable { IPWModePanel iPWModePanel0 = new IPWModePanel ( ( Wizard ) null , ( IWizardPanel ) null ) ; ImportTorrentWizardInputPanel importTorrentWizardInputPanel0 = new ImportTorrentWizardInputPanel ( ( Wizard ) null , ( IWizardPanel ) iPWModePanel0 ) ; importTorrentWizardInputPanel0 . getNextPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNextEnabled ( ) { return ( file_valid ) ; }
void test0 ( ) throws Throwable { UIPWListPanel uIPWListPanel0 = new UIPWListPanel ( ( Wizard ) null , ( IWizardPanel ) null ) ; IWizardPanel < Object > iWizardPanel0 = uIPWListPanel0 . getFinishPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPreviousEnabled ( ) { return ( false ) ; }
void test1 ( ) throws Throwable { UIPWListPanel uIPWListPanel0 = new UIPWListPanel ( ( Wizard ) null , ( IWizardPanel ) null ) ; uIPWListPanel0 . show ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPreviousEnabled ( ) { return ( false ) ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { String [ ] stringArray0 = new String [ 4 ] ; Start start0 = new Start ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test0 ( ) throws Throwable { SWTNetworkSelection sWTNetworkSelection0 = new SWTNetworkSelection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SWTNetworkSelection ( ) { AENetworkClassifier . addListener ( this ) ; }
void test0 ( ) throws Throwable { ChooseServicePanel chooseServicePanel0 = new ChooseServicePanel ( ( IpCheckerWizard ) null , ( IWizardPanel ) null ) ; boolean boolean0 = chooseServicePanel0 . isFinishEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFinishEnabled ( ) { return ( file_valid ) ; }
void test1 ( ) throws Throwable { ChooseServicePanel chooseServicePanel0 = new ChooseServicePanel ( ( IpCheckerWizard ) null , ( IWizardPanel ) null ) ; IWizardPanel < Object > iWizardPanel0 = chooseServicePanel0 . getFinishPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFinishSelectionOK ( ) { return ( ( ( ImportTorrentWizard ) wizard ) . performImport ( ) ) ; }
void test0 ( ) throws Throwable { DockPosition dockPosition0 = new DockPosition ( ) ; dockPosition0 . setPosition ( 328 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test1 ( ) throws Throwable { DockPosition dockPosition0 = new DockPosition ( ) ; int int0 = dockPosition0 . getPosition ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test2 ( ) throws Throwable { DockPosition dockPosition0 = new DockPosition ( ) ; Offset offset0 = dockPosition0 . getOffset ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test3 ( ) throws Throwable { DockPosition dockPosition0 = new DockPosition ( ( - 834 ) , ( Offset ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test4 ( ) throws Throwable { Offset offset0 = new Offset ( 0 , 0 ) ; DockPosition dockPosition0 = new DockPosition ( 3 , offset0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test5 ( ) throws Throwable { Offset offset0 = new Offset ( 2 , 0 ) ; DockPosition dockPosition0 = new DockPosition ( 2 , offset0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test6 ( ) throws Throwable { Offset offset0 = new Offset ( 3 , 1063 ) ; DockPosition dockPosition0 = new DockPosition ( 4 , offset0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test7 ( ) throws Throwable { DockPosition dockPosition0 = new DockPosition ( ) ; dockPosition0 . setOffset ( ( Offset ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test8 ( ) throws Throwable { DockPosition dockPosition0 = new DockPosition ( ) ; Offset offset0 = new Offset ( 1 , 0 ) ; dockPosition0 . setOffset ( offset0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosition ( ) { return iPosition ; }
void test1 ( ) throws Throwable { CoreWaiterSWT coreWaiterSWT0 = new CoreWaiterSWT ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { GCStringPrinter . URLInfo gCStringPrinter_URLInfo0 = new GCStringPrinter . URLInfo ( ) ; ProgressGraphItem progressGraphItem0 = new ProgressGraphItem ( ) ; List < Rectangle > list0 = progressGraphItem0 . getCellAddedListeners ( ) ; gCStringPrinter_URLInfo0 . hitAreas = list0 ; String string0 = gCStringPrinter_URLInfo0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test1 ( ) throws Throwable { GCStringPrinter gCStringPrinter0 = new GCStringPrinter ( ( GC ) null , ( String ) null , ( Rectangle ) null , 0 , 0 ) ; String string0 = gCStringPrinter0 . getText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return text ; }
void test2 ( ) throws Throwable { GCData gCData0 = new GCData ( ) ; GC gC0 = GC . carbon_new ( 0 , gCData0 ) ; GCStringPrinter gCStringPrinter0 = new GCStringPrinter ( gC0 , ( String ) null , ( Rectangle ) null , false , false , 1 ) ; Image [ ] imageArray0 = new Image [ 3 ] ; gCStringPrinter0 . setImages ( imageArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCutoff ( ) { return cutoff ; }
void test3 ( ) throws Throwable { GCStringPrinter gCStringPrinter0 = new GCStringPrinter ( ( GC ) null , ( String ) null , ( Rectangle ) null , 0 , 0 ) ; float [ ] floatArray0 = new float [ 5 ] ; gCStringPrinter0 . setImageScales ( floatArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasHitUrl ( ) { return listUrlInfo ! = null & & listUrlInfo . size ( ) > 0 ; }
void test4 ( ) throws Throwable { Rectangle rectangle0 = new Rectangle ( 0 , 0 , 0 , 0 ) ; GCStringPrinter gCStringPrinter0 = new GCStringPrinter ( ( GC ) null , "" , rectangle0 , 0 , 0 ) ; gCStringPrinter0 . printString ( ( GC ) null , rectangle0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWordCut ( ) { return isWordCut ; }
void test5 ( ) throws Throwable { GCData gCData0 = new GCData ( ) ; GC gC0 = GC . carbon_new ( 0 , gCData0 ) ; GCStringPrinter gCStringPrinter0 = new GCStringPrinter ( gC0 , ( String ) null , ( Rectangle ) null , false , false , 1 ) ; gCStringPrinter0 . calculateMetrics ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean printString ( GC gc , String string , Rectangle printArea ) { return printString ( gc , string , printArea , false , false ) ; }
void test6 ( ) throws Throwable { boolean boolean0 = GCStringPrinter . printString ( ( GC ) null , "ws9Qa ) 32Z > 8" , ( Rectangle ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean printString ( GC gc , String string , Rectangle printArea ) { return printString ( gc , string , printArea , false , false ) ; }
void test7 ( ) throws Throwable { GCData gCData0 = new GCData ( ) ; GC gC0 = GC . carbon_new ( 0 , gCData0 ) ; GCStringPrinter gCStringPrinter0 = new GCStringPrinter ( gC0 , ( String ) null , ( Rectangle ) null , false , false , 1 ) ; float [ ] floatArray0 = gCStringPrinter0 . getImageScales ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float [ ] getImageScales ( ) { return imageScales ; }
void test8 ( ) throws Throwable { GCStringPrinter gCStringPrinter0 = new GCStringPrinter ( ( GC ) null , ( String ) null , ( Rectangle ) null , 0 , 0 ) ; gCStringPrinter0 . setUrlColor ( ( Color ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWordCut ( ) { return isWordCut ; }
void test9 ( ) throws Throwable { GCStringPrinter gCStringPrinter0 = new GCStringPrinter ( ( GC ) null , "ws9Qa ) 32Z > 8" , ( Rectangle ) null , 0 , 0 ) ; boolean boolean0 = gCStringPrinter0 . isWordCut ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isWordCut ( ) { return isWordCut ; }
void test10 ( ) throws Throwable { GCStringPrinter gCStringPrinter0 = new GCStringPrinter ( ( GC ) null , "plugin . classes" , ( Rectangle ) null , true , true , 164 ) ; Point point0 = gCStringPrinter0 . getCalculatedSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test11 ( ) throws Throwable { GCStringPrinter gCStringPrinter0 = new GCStringPrinter ( ( GC ) null , "plugin . classes" , ( Rectangle ) null , true , true , 164 ) ; Color color0 = gCStringPrinter0 . getUrlColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getUrlColor ( ) { return urlColor ; }
void test12 ( ) throws Throwable { GCStringPrinter gCStringPrinter0 = new GCStringPrinter ( ( GC ) null , "plugin . classes" , ( Rectangle ) null , true , true , 164 ) ; boolean boolean0 = gCStringPrinter0 . isCutoff ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCutoff ( ) { return cutoff ; }
void test13 ( ) throws Throwable { GCStringPrinter . URLInfo gCStringPrinter_URLInfo0 = new GCStringPrinter . URLInfo ( ) ; String string0 = gCStringPrinter_URLInfo0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test14 ( ) throws Throwable { GCData gCData0 = new GCData ( ) ; GC gC0 = GC . carbon_new ( 0 , gCData0 ) ; GCStringPrinter gCStringPrinter0 = new GCStringPrinter ( gC0 , ( String ) null , ( Rectangle ) null , false , false , 1 ) ; GCStringPrinter . URLInfo gCStringPrinter_URLInfo0 = gCStringPrinter0 . getHitUrl ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" URLInfo getHitUrl ( int x , int y ) { if ( listUrlInfo = = null | | listUrlInfo . size ( ) = = 0 ) { return null ; } for ( URLInfo urlInfo : listUrlInfo ) { if ( urlInfo . hitAreas ! = null ) { for ( Rectangle r : urlInfo . hitAreas ) { if ( r . contains ( x , y ) ) { return urlInfo ; } } } } return null ; }
void test15 ( ) throws Throwable { GCStringPrinter gCStringPrinter0 = new GCStringPrinter ( ( GC ) null , "ws9Qa ) 32Z > 8" , ( Rectangle ) null , 0 , 0 ) ; GCStringPrinter . URLInfo [ ] gCStringPrinter_URLInfoArray0 = gCStringPrinter0 . getHitUrlInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" URLInfo [ ] getHitUrlInfo ( ) { if ( listUrlInfo = = null ) { return new URLInfo [ 0 ] ; } return ( URLInfo [ ] ) listUrlInfo . toArray ( new URLInfo [ 0 ] ) ; }
void test16 ( ) throws Throwable { GCStringPrinter gCStringPrinter0 = new GCStringPrinter ( ( GC ) null , "ws9Qa ) 32Z > 8" , ( Rectangle ) null , ( - 5 ) , ( - 5 ) ) ; boolean boolean0 = gCStringPrinter0 . hasHitUrl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasHitUrl ( ) { return listUrlInfo ! = null & & listUrlInfo . size ( ) > 0 ; }
void test2 ( ) throws Throwable { MessageSlideShell messageSlideShell0 = new MessageSlideShell ( ( Display ) null , ( - 1868 ) , " ( y" , " ( y" , " ( y" , ( - 1868 ) ) ; Color color0 = messageSlideShell0 . getUrlColor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Color getUrlColor ( ) { return urlColor ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; MessageSlideShell messageSlideShell0 = new MessageSlideShell ( ( Display ) null , 0 , ( String ) null , ( String ) null , stringArray0 , ( Object [ ] ) null , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MessageSlideShell ( Display display , int iconID , String keyPrefix , String details , String [ ] textParams , int timeoutSecs ) { this ( display , iconID , MessageText . getString ( keyPrefix + " . title" ) , MessageText . getString ( keyPrefix + " . text" , textParams ) , details , timeoutSecs ) ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; MessageSlideShell messageSlideShell0 = new MessageSlideShell ( ( Display ) null , ( - 744 ) , "`SIW59 < ^T & / l > ! ! OqUF" , "`SIW59 < ^T & / l > ! ! OqUF" , stringArray0 , 788 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MessageSlideShell ( Display display , int iconID , String keyPrefix , String details , String [ ] textParams , int timeoutSecs ) { this ( display , iconID , MessageText . getString ( keyPrefix + " . title" ) , MessageText . getString ( keyPrefix + " . text" , textParams ) , details , timeoutSecs ) ; }
void test0 ( ) throws Throwable { Offset offset0 = new Offset ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Offset ( int xOffset , int yOffset ) { this . xOffset = xOffset ; this . yOffset = yOffset ; }
void test33 ( ) throws Throwable { boolean boolean0 = MessageBoxShell . isOpen ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpen ( ) ; void delete ( ) throws CacheFileManagerException ; }
void test0 ( ) throws Throwable { BrowserShell browserShell0 = new BrowserShell ( "'" , "'" , 1578 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BrowserShell ( String title_resource , String url , int width , int height ) { MessageBoxShell boxShell = new MessageBoxShell ( MessageText . getString ( title_resource ) , "" , new String [ ] { / / MessageText . getString ( "Button . ok" ) } , 0 ) ; boxShell . setUrl ( url ) ; boxShell . setBrowserFollowLinks ( true ) ; boxShell . setSquish ( true ) ; boxShell . setSize ( width , height ) ; boxShell . open ( null ) ; }
void test0 ( ) throws Throwable { ProgressReportMessage progressReportMessage0 = new ProgressReportMessage ( "" , 0 ) ; int int0 = progressReportMessage0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( String name , String [ ] params ) { return getValue ( name , params , true ) ; }
void test1 ( ) throws Throwable { ProgressReportMessage progressReportMessage0 = new ProgressReportMessage ( "" , 0 ) ; String string0 = progressReportMessage0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test2 ( ) throws Throwable { ProgressReportMessage progressReportMessage0 = new ProgressReportMessage ( "iz3xvKmEVSx@" , 2 ) ; boolean boolean0 = progressReportMessage0 . isInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( String name , String [ ] params ) { return getValue ( name , params , true ) ; }
void test3 ( ) throws Throwable { ProgressReportMessage progressReportMessage0 = new ProgressReportMessage ( "" , 4 ) ; boolean boolean0 = progressReportMessage0 . isError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( String name , String [ ] params ) { return getValue ( name , params , true ) ; }
void test4 ( ) throws Throwable { ProgressReportMessage progressReportMessage0 = new ProgressReportMessage ( "" , 0 ) ; boolean boolean0 = progressReportMessage0 . isError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( String name , String [ ] params ) { return getValue ( name , params , true ) ; }
void test5 ( ) throws Throwable { ProgressReportMessage progressReportMessage0 = new ProgressReportMessage ( "" , 0 ) ; boolean boolean0 = progressReportMessage0 . isInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLog ( ) { return type = = MSG_TYPE_LOG ; }
void test6 ( ) throws Throwable { ProgressReportMessage progressReportMessage0 = new ProgressReportMessage ( "iz3xvKmEVSx@" , 2 ) ; boolean boolean0 = progressReportMessage0 . isLog ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInfo ( ) { return type = = MSG_TYPE_INFO ; }
void test7 ( ) throws Throwable { ProgressReportMessage progressReportMessage0 = new ProgressReportMessage ( "" , 0 ) ; boolean boolean0 = progressReportMessage0 . isLog ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( String name , String [ ] params ) { return getValue ( name , params , true ) ; }
void test0 ( ) throws Throwable { ProgressReportingManager progressReportingManager0 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter0 = ( ProgressReporter ) progressReportingManager0 . getNextActiveReporter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IProgressReporter getNextActiveReporter ( ) { return progressReporters . getNextActiveReporter ( ) ; }
void test2 ( ) throws Throwable { ProgressReportingManager progressReportingManager0 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter0 = new ProgressReporter ( progressReportingManager0 ) ; progressReporter0 . appendDetailMessage ( "" ) ; progressReporter0 . setMessage ( "" ) ; progressReportingManager0 . addReporter ( "" ) ; progressReporter0 . appendDetailMessage ( "" ) ; ProgressReportingManager progressReportingManager1 = ProgressReportingManager . getInstance ( ) ; progressReporter0 . setCancelAllowed ( true ) ; ProgressReporter progressReporter1 = new ProgressReporter ( progressReportingManager1 ) ; progressReporter0 . setRetryAllowed ( false ) ; progressReporter1 . setTitle ( "\"rN" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test3 ( ) throws Throwable { ProgressReportingManager progressReportingManager0 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter0 = new ProgressReporter ( progressReportingManager0 ) ; progressReporter0 . setIndeterminate ( false ) ; ProgressReportingManager progressReportingManager1 = ProgressReportingManager . getInstance ( ) ; progressReportingManager1 . hasMultipleActive ( ) ; ProgressReporter progressReporter1 = ( ProgressReporter ) progressReportingManager1 . addReporter ( "starts / games . start" ) ; ProgressReporter progressReporter2 = new ProgressReporter ( progressReportingManager1 ) ; progressReporter2 . dispose ( ) ; progressReportingManager0 . getReportersArray ( false ) ; progressReporter2 . appendDetailMessage ( " . debug" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test4 ( ) throws Throwable { ProgressReportingManager progressReportingManager0 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter0 = new ProgressReporter ( progressReportingManager0 ) ; progressReporter0 . setIndeterminate ( true ) ; progressReporter0 . cancel ( ) ; progressReportingManager0 . getReporters ( false ) ; progressReportingManager0 . remove ( ( IProgressReporter ) progressReporter0 ) ; progressReporter0 . setCancelAllowed ( true ) ; ProgressReporter progressReporter1 = ( ProgressReporter ) progressReportingManager0 . addReporter ( ) ; progressReporter0 . removeListener ( ( IProgressReporterListener ) null ) ; progressReporter0 . cancel ( ) ; ProgressReporter progressReporter2 = new ProgressReporter ( progressReportingManager0 , "^MB [ Sf " ) ; List < Object > list0 = progressReportingManager0 . getReporters ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test5 ( ) throws Throwable { ProgressReportingManager progressReportingManager0 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter0 = new ProgressReporter ( progressReportingManager0 ) ; progressReporter0 . setImage ( ( Image ) null ) ; progressReporter0 . setIndeterminate ( true ) ; progressReporter0 . setPercentage ( 1622 , "" ) ; progressReportingManager0 . getReporters ( true ) ; progressReportingManager0 . remove ( ( IProgressReporter ) progressReporter0 ) ; progressReporter0 . setCancelAllowed ( true ) ; progressReporter0 . cancel ( ) ; progressReporter0 . setImage ( ( Image ) null ) ; ProgressReporter progressReporter1 = new ProgressReporter ( progressReportingManager0 , "^MB [ Sf " ) ; List < Object > list0 = progressReportingManager0 . getReporters ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMultipleActive ( ) { return progressReporters . hasMultipleActive ( ) ; }
void test6 ( ) throws Throwable { ProgressReportingManager progressReportingManager0 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter0 = new ProgressReporter ( progressReportingManager0 ) ; progressReporter0 . hashCode ( ) ; String string0 = BTMessage . ID_BT_CANCEL ; progressReporter0 . equals ( ( Object ) "BT_CANCEL" ) ; ProgressReportingManager progressReportingManager1 = ProgressReportingManager . getInstance ( ) ; progressReporter0 . setSelection ( 1858 , ( String ) null ) ; int int0 = progressReporter0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test7 ( ) throws Throwable { ProgressReportingManager progressReportingManager0 = ProgressReportingManager . getInstance ( ) ; String string0 = BTMessage . ID_BT_CANCEL ; ProgressReportingManager progressReportingManager1 = ProgressReportingManager . getInstance ( ) ; String string1 = BTMessage . ID_BT_BITFIELD ; ProgressReporter progressReporter0 = ( ProgressReporter ) progressReportingManager0 . getCurrentReporter ( ) ; ProgressReporter progressReporter1 = new ProgressReporter ( progressReportingManager1 , " , retrans = " ) ; progressReporter1 . setPercentage ( 0 , " , retrans = " ) ; progressReporter1 . getProgressReport ( ) ; progressReporter1 . setSelection ( 0 , "BT_BITFIELD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test8 ( ) throws Throwable { ProgressReportingManager progressReportingManager0 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter0 = new ProgressReporter ( progressReportingManager0 , ( String ) null ) ; progressReporter0 . dispose ( ) ; progressReporter0 . setErrorMessage ( " | MEr ! " ) ; String string0 = DownloadManagerState . PARAM_MAX_UPLOADS_WHEN_SEEDING_ENABLED ; progressReporter0 . setObjectData ( ( Object ) "max . uploads . when . seeding . enabled" ) ; progressReporter0 . setMinimum ( 0 ) ; ProgressReportingManager progressReportingManager1 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter1 = new ProgressReporter ( progressReportingManager1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMultipleActive ( ) { return progressReporters . hasMultipleActive ( ) ; }
void test9 ( ) throws Throwable { ProgressReportingManager progressReportingManager0 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter0 = new ProgressReporter ( progressReportingManager0 , "fifc" ) ; progressReporter0 . retry ( ) ; ProgressReportingManager progressReportingManager1 = ProgressReportingManager . getInstance ( ) ; progressReportingManager1 . removeListener ( ( IProgressReportingListener ) null ) ; progressReporter0 . getMessageHistory ( ) ; ProgressReporter progressReporter1 = new ProgressReporter ( progressReportingManager1 , "" ) ; progressReporter1 . getMessageHistory ( ) ; progressReporter1 . setSelection ( ( - 1 ) , "" ) ; progressReporter1 . appendDetailMessage ( "" ) ; ProgressReporter progressReporter2 = ( ProgressReporter ) progressReportingManager1 . getCurrentReporter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test11 ( ) throws Throwable { ProgressReportingManager progressReportingManager0 = ProgressReportingManager . getInstance ( ) ; ProgressReportingManager progressReportingManager1 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter0 = new ProgressReporter ( progressReportingManager0 , "h4BeTG" ) ; ProgressReporter progressReporter1 = new ProgressReporter ( progressReportingManager0 , "h4BeTG" ) ; progressReporter1 . setPercentage ( ( - 1 ) , "Alg . Alias . Signature . SHA512WithRSAEncryption" ) ; ProgressReporter progressReporter2 = new ProgressReporter ( progressReportingManager1 , ( String ) null ) ; ProgressReporter progressReporter3 = new ProgressReporter ( progressReportingManager0 , ( String ) null ) ; progressReportingManager0 . addReporter ( ) ; progressReporter2 . addListener ( ( IProgressReporterListener ) null ) ; ProgressReporter progressReporter4 = new ProgressReporter ( progressReportingManager0 ) ; progressReporter4 . setReporterType ( "" ) ; progressReporter2 . setReporterType ( ( String ) null ) ; int int0 = progressReporter4 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return ( key . hashCode ( ) ) ; }
void test12 ( ) throws Throwable { ProgressReportingManager progressReportingManager0 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter0 = new ProgressReporter ( progressReportingManager0 , "" ) ; progressReporter0 . removeListener ( ( IProgressReporterListener ) null ) ; ProgressReportingManager progressReportingManager1 = ProgressReportingManager . getInstance ( ) ; ProgressReportingManager progressReportingManager2 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter1 = new ProgressReporter ( progressReportingManager2 ) ; progressReportingManager1 . remove ( ( IProgressReporter ) progressReporter1 ) ; ProgressReporter progressReporter2 = new ProgressReporter ( progressReportingManager1 , "_a%p } > L8 . W < g" ) ; progressReporter2 . cancel ( ) ; ProgressReportingManager progressReportingManager3 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter3 = new ProgressReporter ( progressReportingManager3 ) ; ProgressReportingManager . getInstance ( ) ; progressReportingManager3 . addReporter ( "1s & B & ] Y * ! [ Y" ) ; ProgressReporter . ProgressReport progressReporter_ProgressReport0 = ( ProgressReporter . ProgressReport ) progressReporter1 . getProgressReport ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test13 ( ) throws Throwable { ProgressReportingManager progressReportingManager0 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter0 = new ProgressReporter ( progressReportingManager0 , "KeyGenerator . HMACSHA1" ) ; progressReporter0 . setErrorMessage ( "KeyGenerator . HMACSHA1" ) ; ProgressReportingManager progressReportingManager1 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter1 = new ProgressReporter ( progressReportingManager1 ) ; progressReporter1 . setDone ( ) ; progressReportingManager1 . getReporters ( false ) ; ProgressReporter progressReporter2 = new ProgressReporter ( progressReportingManager1 ) ; progressReporter1 . setSelection ( ( - 932 ) , "" ) ; progressReporter1 . setMessage ( "x < Fs > badvUib" ) ; int int0 = progressReportingManager1 . getReporterCount ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasMultipleActive ( ) { return progressReporters . hasMultipleActive ( ) ; }
void test14 ( ) throws Throwable { ProgressReportingManager progressReportingManager0 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter0 = new ProgressReporter ( progressReportingManager0 , " [ " ) ; progressReporter0 . addListener ( ( IProgressReporterListener ) null ) ; progressReportingManager0 . getCurrentReporter ( ) ; ProgressReportingManager progressReportingManager1 = ProgressReportingManager . getInstance ( ) ; ProgressReporter progressReporter1 = new ProgressReporter ( progressReportingManager1 ) ; progressReportingManager1 . getCurrentReporter ( ) ; ProgressReportingManager . getInstance ( ) ; progressReportingManager1 . getCurrentReporter ( ) ; ProgressReporter . ProgressReport progressReporter_ProgressReport0 = ( ProgressReporter . ProgressReport ) progressReporter1 . getProgressReport ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj instanceof SWTSkinObject ) { SWTSkinObject skinObject = ( SWTSkinObject ) obj ; boolean bEquals = skinObject . getSkinObjectID ( ) . equals ( sID ) ; if ( parent ! = null ) { return bEquals & & parent . equals ( skinObject . getParent ( ) ) ; } return bEquals ; } return super . equals ( obj ) ; }
void test0 ( ) throws Throwable { ModePanel modePanel0 = new ModePanel ( ( NewTorrentWizard ) null , ( AbstractWizardPanel ) null ) ; boolean boolean0 = modePanel0 . isNextEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNextEnabled ( ) { return ( file_valid ) ; }
void test0 ( ) throws Throwable { DirectoryPanel directoryPanel0 = new DirectoryPanel ( ( NewTorrentWizard ) null , ( IWizardPanel < NewTorrentWizard > ) null ) ; IWizardPanel < NewTorrentWizard > iWizardPanel0 = directoryPanel0 . getNextPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFinishSelectionOK ( ) { return ( ( ( ImportTorrentWizard ) wizard ) . performImport ( ) ) ; }
void test0 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; CategoryImpl categoryImpl0 = new CategoryImpl ( "b | " , 0 , ( Map < String , String > ) null ) ; myTrackerView0 . categoryRemoved ( ( Category ) categoryImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test1 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; CategoryImpl categoryImpl0 = new CategoryImpl ( "b | " , 0 , ( Map < String , String > ) null ) ; myTrackerView0 . categoryAdded ( ( Category ) categoryImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test2 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; myTrackerView0 . tableViewInitialized ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test3 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; myTrackerView0 . mouseEnter ( ( TableRowCore ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test4 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; myTrackerView0 . torrentRemoved ( ( TRHostTorrent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test5 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; myTrackerView0 . categoryChanged ( ( Category ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test6 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; myTrackerView0 . addThisColumnSubMenu ( "Tracker Announcer is sending a stopped Request" , ( Menu ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test7 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; myTrackerView0 . torrentAdded ( ( TRHostTorrent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test8 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; myTrackerView0 . torrentChanged ( ( TRHostTorrent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test9 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; TableViewSWT < TRHostTorrent > tableViewSWT0 = myTrackerView0 . initYourTableView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test10 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; myTrackerView0 . tableViewDestroyed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test11 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; TableRowCore [ ] tableRowCoreArray0 = new TableRowCore [ 6 ] ; myTrackerView0 . defaultSelected ( tableRowCoreArray0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test12 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; myTrackerView0 . tableRefresh ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test13 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; HashMap < String , Long > hashMap0 = new HashMap < String , Long > ( ) ; myTrackerView0 . refreshToolBarItems ( ( Map < String , Long > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test14 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "" , "" ) ; boolean boolean0 = myTrackerView0 . toolBarItemActivated ( ( ToolBarItem ) toolBarItemSO0 , 0L , ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean toolBarItemActivated ( ToolBarItem item , long activationType , Object datasource ) { if ( item . getID ( ) . equals ( "remove" ) ) { MessageBoxShell mb = new MessageBoxShell ( MessageText . getString ( "message . confirm . delete . title" ) , MessageText . getString ( "message . confirm . delete . text" , new String [ ] { device . getName ( ) } ) , new String [ ] { MessageText . getString ( "Button . yes" ) , MessageText . getString ( "Button . no" ) } , 1 ) ; mb . open ( new UserPrompterResultListener ( ) { void prompterClosed ( int result ) { if ( result = = 0 ) { device . remove ( ) ; } } } ) ; return true ; } return false ; }
void test15 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; TableRowCore [ ] tableRowCoreArray0 = new TableRowCore [ 6 ] ; myTrackerView0 . deselected ( tableRowCoreArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test16 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; myTrackerView0 . focusChanged ( ( TableRowCore ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test17 ( ) throws Throwable { MyTrackerView myTrackerView0 = new MyTrackerView ( ) ; TableRowCore [ ] tableRowCoreArray0 = new TableRowCore [ 7 ] ; myTrackerView0 . selected ( tableRowCoreArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test0 ( ) throws Throwable { LoggerView loggerView0 = new LoggerView ( ( List < ? extends LogEvent > ) null ) ; loggerView0 . parameterChanged ( "Color * hrL8 : 5Eq $w" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPluginViewName ( ) { return "Console" ; }
void test1 ( ) throws Throwable { LoggerView loggerView0 = new LoggerView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitleID ( ) ; / * * * Called in order to set / update the title of this View . When the view * is being displayed in a tab , the full title is used for the tooltip . * * @return the full title for the view * / String getFullTitle ( ) ; / / < < From IView void setSkinObject ( PluginUISWTSkinObject so , Composite composite ) ; PluginUISWTSkinObject getSkinObject ( ) ; void setUseCoreDataSource ( boolean useCoreDataSource ) ; boolean useCoreDataSource ( ) ; UISWTViewEventListener getEventListener ( ) ; }
void test2 ( ) throws Throwable { LoggerView loggerView0 = new LoggerView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPluginViewName ( ) { return "Console" ; }
void test3 ( ) throws Throwable { ArrayList < LogEvent > arrayList0 = new ArrayList < LogEvent > ( ) ; LoggerView loggerView0 = new LoggerView ( ( List < ? extends LogEvent > ) arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPluginViewName ( ) { return "Console" ; }
void test4 ( ) throws Throwable { LoggerView loggerView0 = new LoggerView ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean eventOccurred ( UISWTViewEvent event ) { switch ( event . getType ( ) ) { case UISWTViewEvent . TYPE_CREATE : / / swtView = ( UISWTView ) event . getData ( ) ; break ; case UISWTViewEvent . TYPE_DESTROY : break ; case UISWTViewEvent . TYPE_INITIALIZE : initialize ( ( Composite ) event . getData ( ) ) ; break ; case UISWTViewEvent . TYPE_LANGUAGEUPDATE : Messages . updateLanguageForControl ( getComposite ( ) ) ; break ; case UISWTViewEvent . TYPE_DATASOURCE_CHANGED : break ; case UISWTViewEvent . TYPE_FOCUSGAINED : break ; case UISWTViewEvent . TYPE_REFRESH : break ; } return true ; }
void test6 ( ) throws Throwable { LoggerView loggerView0 = new LoggerView ( ) ; LogIDs logIDs0 = LogIDs . UI3 ; LogEvent logEvent0 = new LogEvent ( logIDs0 , "Console" ) ; loggerView0 . log ( logEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void log ( TableCell cell , String s ) { System . out . println ( ( ( TableRowCore ) cell . getTableRow ( ) ) . getIndex ( ) + " : " + System . currentTimeMillis ( ) + " : " + s ) ; }
void test7 ( ) throws Throwable { LoggerView loggerView0 = new LoggerView ( ( List < ? extends LogEvent > ) null ) ; loggerView0 . setEnabled ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPluginViewName ( ) { return "Console" ; }
void test8 ( ) throws Throwable { LoggerView loggerView0 = new LoggerView ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean eventOccurred ( UISWTViewEvent event ) { switch ( event . getType ( ) ) { case UISWTViewEvent . TYPE_CREATE : / / swtView = ( UISWTView ) event . getData ( ) ; break ; case UISWTViewEvent . TYPE_DESTROY : break ; case UISWTViewEvent . TYPE_INITIALIZE : initialize ( ( Composite ) event . getData ( ) ) ; break ; case UISWTViewEvent . TYPE_LANGUAGEUPDATE : Messages . updateLanguageForControl ( getComposite ( ) ) ; break ; case UISWTViewEvent . TYPE_DATASOURCE_CHANGED : break ; case UISWTViewEvent . TYPE_FOCUSGAINED : break ; case UISWTViewEvent . TYPE_REFRESH : break ; } return true ; }
void test9 ( ) throws Throwable { UISWTViewEventImpl uISWTViewEventImpl0 = new UISWTViewEventImpl ( ( UISWTView ) null , 1 , ( Object ) null ) ; LoggerView loggerView0 = new LoggerView ( ( List < ? extends LogEvent > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean eventOccurred ( UISWTViewEvent event ) { switch ( event . getType ( ) ) { case UISWTViewEvent . TYPE_CREATE : / / swtView = ( UISWTView ) event . getData ( ) ; break ; case UISWTViewEvent . TYPE_DESTROY : break ; case UISWTViewEvent . TYPE_INITIALIZE : initialize ( ( Composite ) event . getData ( ) ) ; break ; case UISWTViewEvent . TYPE_LANGUAGEUPDATE : Messages . updateLanguageForControl ( getComposite ( ) ) ; break ; case UISWTViewEvent . TYPE_DATASOURCE_CHANGED : break ; case UISWTViewEvent . TYPE_FOCUSGAINED : break ; case UISWTViewEvent . TYPE_REFRESH : break ; } return true ; }
void test10 ( ) throws Throwable { LoggerView loggerView0 = new LoggerView ( true ) ; loggerView0 . parameterChanged ( "blocks" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPluginViewName ( ) { return "Console" ; }
void test12 ( ) throws Throwable { LoggerView loggerView0 = new LoggerView ( ( List < ? extends LogEvent > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean eventOccurred ( UISWTViewEvent event ) { switch ( event . getType ( ) ) { case UISWTViewEvent . TYPE_CREATE : / / swtView = ( UISWTView ) event . getData ( ) ; break ; case UISWTViewEvent . TYPE_DESTROY : break ; case UISWTViewEvent . TYPE_INITIALIZE : initialize ( ( Composite ) event . getData ( ) ) ; break ; case UISWTViewEvent . TYPE_LANGUAGEUPDATE : Messages . updateLanguageForControl ( getComposite ( ) ) ; break ; case UISWTViewEvent . TYPE_DATASOURCE_CHANGED : break ; case UISWTViewEvent . TYPE_FOCUSGAINED : break ; case UISWTViewEvent . TYPE_REFRESH : break ; } return true ; }
void test13 ( ) throws Throwable { LoggerView loggerView0 = new LoggerView ( ( List < ? extends LogEvent > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test0 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; myTorrentsSuperView0 . updateLanguage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test1 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; MyTorrentsView myTorrentsView0 = myTorrentsSuperView0 . getTorrentview ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MyTorrentsView getTorrentview ( ) { return torrentview ; }
void test2 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; Menu menu0 = myTorrentsSuperView0 . getPrivateMenu ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Menu getPrivateMenu ( ) { return null ; }
void test3 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; TableColumnCore [ ] tableColumnCoreArray0 = myTorrentsSuperView0 . getCompleteColumns ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableColumnCore [ ] getCompleteColumns ( ) { return TableColumnCreator . createCompleteDM ( TableManager . TABLE_MYTORRENTS_COMPLETE ) ; }
void test4 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; myTorrentsSuperView0 . viewDeactivated ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test6 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; UISWTView uISWTView0 = myTorrentsSuperView0 . getSWTView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UISWTView getSWTView ( ) { return swtView ; }
void test7 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; myTorrentsSuperView0 . initializeDone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test8 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; TableColumnCore [ ] tableColumnCoreArray0 = myTorrentsSuperView0 . getIncompleteColumns ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableColumnCore [ ] getIncompleteColumns ( ) { return TableColumnCreator . createIncompleteDM ( TableManager . TABLE_MYTORRENTS_INCOMPLETE ) ; }
void test9 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; MyTorrentsView myTorrentsView0 = myTorrentsSuperView0 . getSeedingview ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MyTorrentsView getSeedingview ( ) { return seedingview ; }
void test10 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; String string0 = myTorrentsSuperView0 . getFullTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test12 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; HashMap < String , Long > hashMap0 = new HashMap < String , Long > ( ) ; myTorrentsSuperView0 . refreshToolBarItems ( ( Map < String , Long > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test13 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( ( ToolBarView ) null , "c6Jr * L . " , "c6Jr * L . " ) ; boolean boolean0 = myTorrentsSuperView0 . toolBarItemActivated ( ( ToolBarItem ) toolBarItemSO0 , ( long ) 127 , ( Object ) "AZ_STAT_REQ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean toolBarItemActivated ( ToolBarItem item , long activationType , Object datasource ) { if ( item . getID ( ) . equals ( "remove" ) ) { MessageBoxShell mb = new MessageBoxShell ( MessageText . getString ( "message . confirm . delete . title" ) , MessageText . getString ( "message . confirm . delete . text" , new String [ ] { device . getName ( ) } ) , new String [ ] { MessageText . getString ( "Button . yes" ) , MessageText . getString ( "Button . no" ) } , 1 ) ; mb . open ( new UserPrompterResultListener ( ) { void prompterClosed ( int result ) { if ( result = = 0 ) { device . remove ( ) ; } } } ) ; return true ; } return false ; }
void test14 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; DownloadManager [ ] downloadManagerArray0 = myTorrentsSuperView0 . getSelectedDownloads ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DownloadManager [ ] getSelectedDownloads ( ) { Object [ ] data_sources = tv . getSelectedDataSources ( ) . toArray ( ) ; List < DownloadManager > list = new ArrayList < DownloadManager > ( ) ; for ( Object ds : data_sources ) { if ( ds instanceof DownloadManager ) { list . add ( ( DownloadManager ) ds ) ; } } return list . toArray ( new DownloadManager [ 0 ] ) ; }
void test15 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; UISWTViewEventImpl uISWTViewEventImpl0 = new UISWTViewEventImpl ( ( UISWTView ) null , 3 , ( Object ) "BT_BITFIELD" ) ; boolean boolean0 = myTorrentsSuperView0 . eventOccurred ( ( UISWTViewEvent ) uISWTViewEventImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean eventOccurred ( UISWTViewEvent event ) { switch ( event . getType ( ) ) { case UISWTViewEvent . TYPE_CREATE : / / swtView = ( UISWTView ) event . getData ( ) ; break ; case UISWTViewEvent . TYPE_DESTROY : break ; case UISWTViewEvent . TYPE_INITIALIZE : initialize ( ( Composite ) event . getData ( ) ) ; break ; case UISWTViewEvent . TYPE_LANGUAGEUPDATE : Messages . updateLanguageForControl ( getComposite ( ) ) ; break ; case UISWTViewEvent . TYPE_DATASOURCE_CHANGED : break ; case UISWTViewEvent . TYPE_FOCUSGAINED : break ; case UISWTViewEvent . TYPE_REFRESH : break ; } return true ; }
void test16 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; UISWTViewEventImpl uISWTViewEventImpl0 = new UISWTViewEventImpl ( ( UISWTView ) null , 1 , ( Object ) "AZ_PEER_EXCHANGE" ) ; boolean boolean0 = myTorrentsSuperView0 . eventOccurred ( ( UISWTViewEvent ) uISWTViewEventImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean eventOccurred ( UISWTViewEvent event ) { switch ( event . getType ( ) ) { case UISWTViewEvent . TYPE_CREATE : / / swtView = ( UISWTView ) event . getData ( ) ; break ; case UISWTViewEvent . TYPE_DESTROY : break ; case UISWTViewEvent . TYPE_INITIALIZE : initialize ( ( Composite ) event . getData ( ) ) ; break ; case UISWTViewEvent . TYPE_LANGUAGEUPDATE : Messages . updateLanguageForControl ( getComposite ( ) ) ; break ; case UISWTViewEvent . TYPE_DATASOURCE_CHANGED : break ; case UISWTViewEvent . TYPE_FOCUSGAINED : break ; case UISWTViewEvent . TYPE_REFRESH : break ; } return true ; }
void test17 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; UISWTViewEventImpl uISWTViewEventImpl0 = new UISWTViewEventImpl ( ( UISWTView ) null , 9 , ( Object ) "AZ_STAT_REQ" ) ; boolean boolean0 = myTorrentsSuperView0 . eventOccurred ( ( UISWTViewEvent ) uISWTViewEventImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean eventOccurred ( UISWTViewEvent event ) { switch ( event . getType ( ) ) { case UISWTViewEvent . TYPE_CREATE : / / swtView = ( UISWTView ) event . getData ( ) ; break ; case UISWTViewEvent . TYPE_DESTROY : break ; case UISWTViewEvent . TYPE_INITIALIZE : initialize ( ( Composite ) event . getData ( ) ) ; break ; case UISWTViewEvent . TYPE_LANGUAGEUPDATE : Messages . updateLanguageForControl ( getComposite ( ) ) ; break ; case UISWTViewEvent . TYPE_DATASOURCE_CHANGED : break ; case UISWTViewEvent . TYPE_FOCUSGAINED : break ; case UISWTViewEvent . TYPE_REFRESH : break ; } return true ; }
void test18 ( ) throws Throwable { MyTorrentsSuperView myTorrentsSuperView0 = new MyTorrentsSuperView ( ( Text ) null , ( Composite ) null ) ; UISWTViewEventImpl uISWTViewEventImpl0 = new UISWTViewEventImpl ( ( UISWTView ) null , 3145728 , ( Object ) "Max Upload Speed KBs" ) ; boolean boolean0 = myTorrentsSuperView0 . eventOccurred ( ( UISWTViewEvent ) uISWTViewEventImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean eventOccurred ( UISWTViewEvent event ) { switch ( event . getType ( ) ) { case UISWTViewEvent . TYPE_CREATE : / / swtView = ( UISWTView ) event . getData ( ) ; break ; case UISWTViewEvent . TYPE_DESTROY : break ; case UISWTViewEvent . TYPE_INITIALIZE : initialize ( ( Composite ) event . getData ( ) ) ; break ; case UISWTViewEvent . TYPE_LANGUAGEUPDATE : Messages . updateLanguageForControl ( getComposite ( ) ) ; break ; case UISWTViewEvent . TYPE_DATASOURCE_CHANGED : break ; case UISWTViewEvent . TYPE_FOCUSGAINED : break ; case UISWTViewEvent . TYPE_REFRESH : break ; } return true ; }
void test0 ( ) throws Throwable { PeerSuperView peerSuperView0 = new PeerSuperView ( ) ; peerSuperView0 . destroyed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test1 ( ) throws Throwable { PeerSuperView peerSuperView0 = new PeerSuperView ( ) ; peerSuperView0 . tableViewDestroyed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test2 ( ) throws Throwable { PeerSuperView peerSuperView0 = new PeerSuperView ( ) ; peerSuperView0 . destroyInitiated ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test3 ( ) throws Throwable { PeerSuperView peerSuperView0 = new PeerSuperView ( ) ; peerSuperView0 . addThisColumnSubMenu ( "" , ( Menu ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test4 ( ) throws Throwable { PeerSuperView peerSuperView0 = new PeerSuperView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingleSelection ( ) ; void uiSelectionChanged ( TableRowCore [ ] newlySelectedRows , TableRowCore [ ] deselectedRows ) ; / / @see com . aelitis . azureus . ui . common . table . TableView#setSelectedRows ( com . aelitis . azureus . ui . common . table . TableRowCore [ ] ) void setSelectedRows ( TableRowCore [ ] rows ) { setSelectedRows ( rows , true ) ; }
void test7 ( ) throws Throwable { PeerSuperView peerSuperView0 = new PeerSuperView ( ) ; peerSuperView0 . peerManagerWillBeAdded ( ( PEPeerManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test8 ( ) throws Throwable { PeerSuperView peerSuperView0 = new PeerSuperView ( ) ; peerSuperView0 . peerManagerRemoved ( ( PEPeerManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test9 ( ) throws Throwable { PeerSuperView peerSuperView0 = new PeerSuperView ( ) ; peerSuperView0 . peerRemoved ( ( PEPeer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test10 ( ) throws Throwable { PeerSuperView peerSuperView0 = new PeerSuperView ( ) ; peerSuperView0 . peerAdded ( ( PEPeer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test11 ( ) throws Throwable { PeerSuperView peerSuperView0 = new PeerSuperView ( ) ; peerSuperView0 . peerManagerAdded ( ( PEPeerManager ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test13 ( ) throws Throwable { PeerSuperView peerSuperView0 = new PeerSuperView ( ) ; peerSuperView0 . seedingStatusChanged ( true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test1 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; mySharesView0 . tableViewDestroyed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test2 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSingleSelection ( ) ; void uiSelectionChanged ( TableRowCore [ ] newlySelectedRows , TableRowCore [ ] deselectedRows ) ; / / @see com . aelitis . azureus . ui . common . table . TableView#setSelectedRows ( com . aelitis . azureus . ui . common . table . TableRowCore [ ] ) void setSelectedRows ( TableRowCore [ ] rows ) { setSelectedRows ( rows , true ) ; }
void test3 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; mySharesView0 . resourceAdded ( ( ShareResource ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test4 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; mySharesView0 . resourceDeleted ( ( ShareResource ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test5 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; mySharesView0 . addThisColumnSubMenu ( " , socket : open = " , ( Menu ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MySharesView mySharesView0 = new MySharesView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test7 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; mySharesView0 . resourceModified ( ( ShareResource ) null , ( ShareResource ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test8 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; TableRowCore [ ] tableRowCoreArray0 = new TableRowCore [ 2 ] ; mySharesView0 . defaultSelected ( tableRowCoreArray0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test9 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; mySharesView0 . mouseEnter ( ( TableRowCore ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test10 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean toolBarItemActivated ( ToolBarItem item , long activationType , Object datasource ) { if ( item . getID ( ) . equals ( "remove" ) ) { MessageBoxShell mb = new MessageBoxShell ( MessageText . getString ( "message . confirm . delete . title" ) , MessageText . getString ( "message . confirm . delete . text" , new String [ ] { device . getName ( ) } ) , new String [ ] { MessageText . getString ( "Button . yes" ) , MessageText . getString ( "Button . no" ) } , 1 ) ; mb . open ( new UserPrompterResultListener ( ) { void prompterClosed ( int result ) { if ( result = = 0 ) { device . remove ( ) ; } } } ) ; return true ; } return false ; }
void test11 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; mySharesView0 . reportProgress ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test12 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; Object object0 = mySharesView0 . getTitleInfoProperty ( ( - 380 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getTitleInfoProperty ( int propertyID ) { if ( propertyID = = TITLE_INDICATOR_TEXT & & numNew > 0 ) { return "" + numNew ; } return null ; }
void test13 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; mySharesView0 . mouseExit ( ( TableRowCore ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test14 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; mySharesView0 . reportCurrentTask ( "s" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullTitle ( ) { return MessageText . getString ( "subscriptions . overview" ) ; }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { MySharesView mySharesView0 = new MySharesView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test16 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean share ( Object eventData ) { boolean shared = false ; if ( eventData instanceof String [ ] | | eventData instanceof String ) { String [ ] sourceNames = ( eventData instanceof String [ ] ) ? ( String [ ] ) eventData : new String [ ] { ( String ) eventData } ; if ( sourceNames = = null ) { return false ; } for ( int i = 0 ; ( i < sourceNames . length ) ; i + + ) { File source = new File ( sourceNames [ i ] ) ; String filename = source . getAbsolutePath ( ) ; try { if ( source . isFile ( ) & & ! TorrentUtils . isTorrentFile ( filename ) ) { ShareUtils . shareFile ( filename ) ; shared = true ; } else if ( source . isDirectory ( ) ) { ShareUtils . shareDir ( filename ) ; shared = true ; } } catch ( Exception e ) { } } } return shared ; }
void test17 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; mySharesView0 . tableRefresh ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test18 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test19 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean toolBarItemActivated ( ToolBarItem item , long activationType , Object datasource ) { if ( item . getID ( ) . equals ( "remove" ) ) { MessageBoxShell mb = new MessageBoxShell ( MessageText . getString ( "message . confirm . delete . title" ) , MessageText . getString ( "message . confirm . delete . text" , new String [ ] { device . getName ( ) } ) , new String [ ] { MessageText . getString ( "Button . yes" ) , MessageText . getString ( "Button . no" ) } , 1 ) ; mb . open ( new UserPrompterResultListener ( ) { void prompterClosed ( int result ) { if ( result = = 0 ) { device . remove ( ) ; } } } ) ; return true ; } return false ; }
void test20 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; TableRowCore [ ] tableRowCoreArray0 = new TableRowCore [ 3 ] ; mySharesView0 . deselected ( tableRowCoreArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test21 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; mySharesView0 . focusChanged ( ( TableRowCore ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test22 ( ) throws Throwable { MySharesView mySharesView0 = new MySharesView ( ) ; TableRowCore [ ] tableRowCoreArray0 = new TableRowCore [ 2 ] ; mySharesView0 . selected ( tableRowCoreArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPropertiesPrefix ( ) ; / * * * Get the row associated with a datasource * @param dataSource a reference to a core Datasource object * ( not a plugin datasource object ) * @return The row , or null * / TableRowCore getRow ( DATASOURCETYPE dataSource ) ; / * * Get all the rows for this table , in the order they are displayed * * @return a list of TableRowSWT objects in the order the user sees them * / TableRowCore [ ] getRows ( ) ; / * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @return an array containing the selected data sources * * @note May not necessarily return DATASOURCETYPE if table has subrows * / List < Object > getSelectedDataSources ( ) ; / * * * Returns an array of all selected Data Sources . Null data sources are * ommitted . * * @param bCoreDataSource * @return an array containing the selected data sources * / Object [ ] getSelectedDataSources ( boolean bCoreDataSource ) ; / * * * Returns an array of all selected TableRowSWT . Null data sources are * ommitted . * * @return an array containing the selected data sources * / TableRowCore [ ] getSelectedRows ( ) ; / * * * @return * / TableColumnCore getSortColumn ( ) ; / * * * @return * / boolean isDisposed ( ) ; / * * * Process the queue of datasources to be added and removed * * / void processDataSourceQueue ( ) ; / * * * @param bForceSort * / void refreshTable ( boolean bForceSort ) ; / * * * Remove all the data sources ( table rows ) from the table . * / void removeAllTableRows ( ) ; / * * * @param dataSource * / void removeDataSource ( DATASOURCETYPE dataSource ) ; / * * * @param l * / void removeTableDataSourceChangedListener ( TableDataSourceChangedListener l ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowRunner runner ) ; / * * For every row source , run the code provided by the specified * parameter . * * @param runner Code to run for each row / datasource * / void runForAllRows ( TableGroupRowVisibilityRunner runner ) ; / * * * @param runner * / void runForSelectedRows ( TableGroupRowRunner runner ) ; / * * * Does not fire off selection events * / void selectAll ( ) ; / * * * @param enableTabViews * / void setEnableTabViews ( boolean enableTabViews ) ; void setFocus ( ) ; / * * * @param newDataSource * / void setParentDataSource ( Object newDataSource ) ; Object getParentDataSource ( ) ; / * * * @param iHeight * / void setRowDefaultHeight ( int iHeight ) ; void setSelectedRows ( TableRowCore [ ] rows ) ; / * * * @param bIncludeQueue * @return * / int size ( boolean bIncludeQueue ) ; / * * * @return * / TableRowCore getFocusedRow ( ) ; / * * * @return * / String getTableID ( ) ; / * * * @param x * @param y * @return * / TableRowCore getRow ( int x , int y ) ; / * * * @param dataSource * @return * / boolean dataSourceExists ( DATASOURCETYPE dataSource ) ; / * * * @return * / TableColumnCore [ ] getVisibleColumns ( ) ; / * * * @param dataSources * / void removeDataSources ( DATASOURCETYPE [ ] dataSources ) ; / * * * @return * * @since 3 . 0 . 0 . 7 * / int getSelectedRowsSize ( ) ; / * * * @param row * @return * * @since 3 . 0 . 0 . 7 * / int indexOf ( TableRowCore row ) ; / * * * @param row * @return * * @since 3 . 0 . 4 . 3 * / boolean isRowVisible ( TableRowCore row ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / TableCellCore getTableCellWithCursor ( ) ; / * * * Retrieves the row that has the cursor over it * * @return null if mouse isn't over a row * * @since 3 . 0 . 4 . 3 * / TableRowCore getTableRowWithCursor ( ) ; / * * * @return * * @since 3 . 0 . 4 . 3 * / int getRowDefaultHeight ( ) ; boolean isColumnVisible ( TableColumn column ) ; / * * * @param position * @return * * @since 3 . 0 . 4 . 3 * / TableRowCore getRow ( int position ) ; / * * * @return * * @since 3 . 1 . 1 . 1 * / Class getDataSourceType ( ) ; / * * * @param columnName * @return * * @since 3 . 1 . 1 . 1 * / TableColumn getTableColumn ( String columnName ) ; void setEnabled ( boolean enable ) ; boolean canHaveSubItems ( ) ; / * * * @param tableRowImpl * @return * * @since 4 . 4 . 0 . 5 * / boolean isSelected ( TableRow row ) ; boolean isUnfilteredDataSourceAdded ( Object ds ) ; / * * * @param visible * * @since 4 . 6 . 0 . 5 * / void setHeaderVisible ( boolean visible ) ; / * * * @return * * @since 4 . 6 . 0 . 5 * / boolean getHeaderVisible ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / void processDataSourceQueueSync ( ) ; / * * * * * @since 4 . 6 . 0 . 5 * / int getMaxItemShown ( ) ; / * * * @param newIndex * * @since 4 . 6 . 0 . 5 * / void setMaxItemShown ( int newIndex ) ; int getRowCount ( ) ; void resetLastSortedOn ( ) ; TableColumnCore [ ] getAllColumns ( ) ; void removeCountChangeListener ( TableCountChangeListener l ) ; }
void test1 ( ) throws Throwable { String string0 = ManagerView . escapeAccelerators ( "T2% ? #2'3 - 83" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String escapeAccelerators ( String str ) { if ( str = = null ) { return ( str ) ; } return str . replaceAll ( " & " , " & & " ) ; }
void test2 ( ) throws Throwable { String string0 = ManagerView . escapeAccelerators ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String escapeAccelerators ( String str ) { if ( str = = null ) { return ( str ) ; } return str . replaceAll ( " & " , " & & " ) ; }
void test3 ( ) throws Throwable { GeneralView generalView0 = new GeneralView ( ) ; ToolBarView toolBarView0 = new ToolBarView ( ) ; ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO ( toolBarView0 , "qENMry`qBxgy" , true ) ; boolean boolean0 = generalView0 . toolBarItemActivated ( ( ToolBarItem ) toolBarItemSO0 , ( long ) 0 , ( Object ) "BT_HAVE piece #0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean toolBarItemActivated ( ToolBarItem item , long activationType , Object datasource ) { if ( item . getID ( ) . equals ( "remove" ) ) { MessageBoxShell mb = new MessageBoxShell ( MessageText . getString ( "message . confirm . delete . title" ) , MessageText . getString ( "message . confirm . delete . text" , new String [ ] { device . getName ( ) } ) , new String [ ] { MessageText . getString ( "Button . yes" ) , MessageText . getString ( "Button . no" ) } , 1 ) ; mb . open ( new UserPrompterResultListener ( ) { void prompterClosed ( int result ) { if ( result = = 0 ) { device . remove ( ) ; } } } ) ; return true ; } return false ; }
void test4 ( ) throws Throwable { GeneralView generalView0 = new GeneralView ( ) ; generalView0 . parameterChanged ( " = = > { u" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parameterChanged ( String parameterName ) { waitTimeMS = COConfigurationManager . getIntParameter ( CFG_REFRESH_INTERVAL ) ; inactiveFactor = COConfigurationManager . getIntParameter ( CFG_REFRESH_INACTIVE_FACTOR ) ; if ( inactiveFactor = = 0 ) { inactiveFactor = 1 ; } }
void test5 ( ) throws Throwable { GeneralView generalView0 = new GeneralView ( ) ; generalView0 . dataSourceChanged ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object dataSourceChanged ( SWTSkinObject skinObject , Object params ) { return null ; }
void test6 ( ) throws Throwable { GeneralView generalView0 = new GeneralView ( ) ; generalView0 . refresh ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void refresh ( TableCell cell ) { int nbResults = 0 ; Subscription sub = ( Subscription ) cell . getDataSource ( ) ; if ( sub ! = null ) { nbResults = sub . getHistory ( ) . getNumUnread ( ) + sub . getHistory ( ) . getNumRead ( ) ; } if ( ! cell . setSortValue ( nbResults ) & & cell . isValid ( ) ) { return ; } if ( ! cell . isShown ( ) ) { return ; } cell . setText ( "" + nbResults ) ; return ; }
void test7 ( ) throws Throwable { GeneralView generalView0 = new GeneralView ( ) ; generalView0 . delete ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void delete ( ) { if ( viewComposite ! = null & & ! viewComposite . isDisposed ( ) ) { viewComposite . dispose ( ) ; } if ( textFont1 ! = null & & ! textFont1 . isDisposed ( ) ) { textFont1 . dispose ( ) ; } if ( textFont2 ! = null & & ! textFont2 . isDisposed ( ) ) { textFont2 . dispose ( ) ; } }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { GeneralView generalView0 = new GeneralView ( ) ; UISWTViewImpl uISWTViewImpl0 = new UISWTViewImpl ( " = = > { u" , " = = > { u" , ( UISWTViewEventListener ) generalView0 , ( Object ) "Max Downloads" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
void test9 ( ) throws Throwable { GeneralView generalView0 = new GeneralView ( ) ; UISWTViewEventImpl uISWTViewEventImpl0 = new UISWTViewEventImpl ( ( UISWTView ) null , ( - 770 ) , ( Object ) "AZ_SESSION_BITFIELD" ) ; boolean boolean0 = generalView0 . eventOccurred ( ( UISWTViewEvent ) uISWTViewEventImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean eventOccurred ( UISWTViewEvent event ) { switch ( event . getType ( ) ) { case UISWTViewEvent . TYPE_CREATE : / / swtView = ( UISWTView ) event . getData ( ) ; break ; case UISWTViewEvent . TYPE_DESTROY : break ; case UISWTViewEvent . TYPE_INITIALIZE : initialize ( ( Composite ) event . getData ( ) ) ; break ; case UISWTViewEvent . TYPE_LANGUAGEUPDATE : Messages . updateLanguageForControl ( getComposite ( ) ) ; break ; case UISWTViewEvent . TYPE_DATASOURCE_CHANGED : break ; case UISWTViewEvent . TYPE_FOCUSGAINED : break ; case UISWTViewEvent . TYPE_REFRESH : break ; } return true ; }
void test0 ( ) throws Throwable { TableContextMenuManager tableContextMenuManager0 = TableContextMenuManager . getInstance ( ) ; TableContextMenuItem [ ] tableContextMenuItemArray0 = tableContextMenuManager0 . getAllAsArray ( "`" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableContextMenuItem [ ] getAllAsArray ( String sMenuID ) { Map local_menu_item_map = ( Map ) this . items . get ( sMenuID ) ; Map global_menu_item_map = ( Map ) this . items . get ( null ) ; if ( local_menu_item_map = = null & & global_menu_item_map = = null ) { return new TableContextMenuItem [ 0 ] ; } ArrayList l = new ArrayList ( ) ; if ( local_menu_item_map ! = null ) { l . addAll ( local_menu_item_map . values ( ) ) ; } if ( global_menu_item_map ! = null ) { l . addAll ( global_menu_item_map . values ( ) ) ; } return ( TableContextMenuItem [ ] ) l . toArray ( new TableContextMenuItem [ l . size ( ) ] ) ; }
void test1 ( ) throws Throwable { TableColumnCreator tableColumnCreator0 = new TableColumnCreator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { TableColumnCore [ ] tableColumnCoreArray0 = TableColumnCreator . createIncompleteDM ( "9 . v2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableColumnCore [ ] createIncompleteDM ( String tableID , boolean big ) { String [ ] defaultVisibleOrder = { ColumnThumbAndName . COLUMN_ID , ColumnStream . COLUMN_ID , SizeItem . COLUMN_ID , ColumnFileCount . COLUMN_ID , ColumnProgressETA . COLUMN_ID , SeedsItem . COLUMN_ID , PeersItem . COLUMN_ID , "azsubs . ui . column . subs" , } ; TableColumnManager tcManager = TableColumnManager . getInstance ( ) ; Map < String , TableColumnCore > mapTCs = tcManager . getTableColumnsAsMap ( DownloadTypeIncomplete . class , tableID ) ; tcManager . setDefaultColumnNames ( tableID , defaultVisibleOrder ) ; if ( ! tcManager . loadTableColumnSettings ( DownloadTypeIncomplete . class , tableID ) | | areNoneVisible ( mapTCs ) ) { setVisibility ( mapTCs , defaultVisibleOrder ) ; ColumnThumbAndName tc = ( ColumnThumbAndName ) mapTCs . get ( ColumnThumbAndName . COLUMN_ID ) ; if ( tc ! = null ) { tcManager . setDefaultSortColumnName ( tableID , ColumnThumbAndName . COLUMN_ID ) ; tc . setSortAscending ( true ) ; } } / / special changes StatusItem tcStatusItem = ( StatusItem ) mapTCs . get ( StatusItem . COLUMN_ID ) ; if ( tcStatusItem ! = null ) { tcStatusItem . setChangeRowFG ( false ) ; if ( big ) { tcStatusItem . setChangeCellFG ( false ) ; } } if ( big ) { ShareRatioItem tcShareRatioItem = ( ShareRatioItem ) mapTCs . get ( ShareRatioItem . COLUMN_ID ) ; if ( tcShareRatioItem ! = null ) { tcShareRatioItem . setChangeFG ( false ) ; tcShareRatioItem . setWidth ( 80 ) ; } } return mapTCs . values ( ) . toArray ( new TableColumnCore [ 0 ] ) ; }
void test3 ( ) throws Throwable { TableColumnCore [ ] tableColumnCoreArray0 = TableColumnCreator . createCompleteDM ( "9 . v2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableColumnCore [ ] createCompleteDM ( String tableID , boolean big ) { String [ ] defaultVisibleOrder = { ColumnUnopened . COLUMN_ID , ColumnThumbAndName . COLUMN_ID , "RatingColumn" , "azsubs . ui . column . subs" , SizeItem . COLUMN_ID , StatusItem . COLUMN_ID , ShareRatioItem . COLUMN_ID , DateCompletedItem . COLUMN_ID , } ; TableColumnManager tcManager = TableColumnManager . getInstance ( ) ; Map mapTCs = tcManager . getTableColumnsAsMap ( DownloadTypeComplete . class , tableID ) ; tcManager . setDefaultColumnNames ( tableID , defaultVisibleOrder ) ; if ( ! tcManager . loadTableColumnSettings ( DownloadTypeComplete . class , tableID ) | | areNoneVisible ( mapTCs ) ) { setVisibility ( mapTCs , defaultVisibleOrder ) ; DateCompletedItem tc = ( DateCompletedItem ) mapTCs . get ( DateCompletedItem . COLUMN_ID ) ; if ( tc ! = null ) { tcManager . setDefaultSortColumnName ( tableID , DateCompletedItem . COLUMN_ID ) ; tc . setSortAscending ( false ) ; } } / / special changes StatusItem tcStatusItem = ( StatusItem ) mapTCs . get ( StatusItem . COLUMN_ID ) ; if ( tcStatusItem ! = null ) { tcStatusItem . setChangeRowFG ( false ) ; if ( big ) { tcStatusItem . setChangeCellFG ( false ) ; } } if ( big ) { ShareRatioItem tcShareRatioItem = ( ShareRatioItem ) mapTCs . get ( ShareRatioItem . COLUMN_ID ) ; if ( tcShareRatioItem ! = null ) { tcShareRatioItem . setChangeFG ( false ) ; tcShareRatioItem . setWidth ( 80 ) ; } } return ( TableColumnCore [ ] ) mapTCs . values ( ) . toArray ( new TableColumnCore [ 0 ] ) ; }
void test0 ( ) throws Throwable { TableColumnSWTUtils tableColumnSWTUtils0 = new TableColumnSWTUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { int int0 = TableColumnSWTUtils . convertColumnAlignmentToSWT ( ( - 1771 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int convertColumnAlignmentToSWT ( int align ) { int swt = 0 ; int hAlign = align & 3 ; if ( hAlign = = TableColumn . ALIGN_CENTER ) { swt = SWT . CENTER ; } else if ( hAlign = = TableColumn . ALIGN_LEAD ) { swt = SWT . LEAD ; } else if ( hAlign = = TableColumn . ALIGN_TRAIL ) { swt = SWT . TRAIL ; } else { swt = SWT . LEAD ; } int vAlign = align & ~3 ; if ( vAlign = = TableColumn . ALIGN_TOP ) { swt | = SWT . TOP ; } else if ( vAlign = = TableColumn . ALIGN_BOTTOM ) { swt | = SWT . BOTTOM ; } return swt ; }
void test2 ( ) throws Throwable { int int0 = TableColumnSWTUtils . convertColumnAlignmentToSWT ( 11 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int convertColumnAlignmentToSWT ( int align ) { int swt = 0 ; int hAlign = align & 3 ; if ( hAlign = = TableColumn . ALIGN_CENTER ) { swt = SWT . CENTER ; } else if ( hAlign = = TableColumn . ALIGN_LEAD ) { swt = SWT . LEAD ; } else if ( hAlign = = TableColumn . ALIGN_TRAIL ) { swt = SWT . TRAIL ; } else { swt = SWT . LEAD ; } int vAlign = align & ~3 ; if ( vAlign = = TableColumn . ALIGN_TOP ) { swt | = SWT . TOP ; } else if ( vAlign = = TableColumn . ALIGN_BOTTOM ) { swt | = SWT . BOTTOM ; } return swt ; }
void test3 ( ) throws Throwable { int int0 = TableColumnSWTUtils . convertColumnAlignmentToSWT ( 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int convertColumnAlignmentToSWT ( int align ) { int swt = 0 ; int hAlign = align & 3 ; if ( hAlign = = TableColumn . ALIGN_CENTER ) { swt = SWT . CENTER ; } else if ( hAlign = = TableColumn . ALIGN_LEAD ) { swt = SWT . LEAD ; } else if ( hAlign = = TableColumn . ALIGN_TRAIL ) { swt = SWT . TRAIL ; } else { swt = SWT . LEAD ; } int vAlign = align & ~3 ; if ( vAlign = = TableColumn . ALIGN_TOP ) { swt | = SWT . TOP ; } else if ( vAlign = = TableColumn . ALIGN_BOTTOM ) { swt | = SWT . BOTTOM ; } return swt ; }
void test4 ( ) throws Throwable { int int0 = TableColumnSWTUtils . convertColumnAlignmentToSWT ( 131200 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int convertColumnAlignmentToSWT ( int align ) { int swt = 0 ; int hAlign = align & 3 ; if ( hAlign = = TableColumn . ALIGN_CENTER ) { swt = SWT . CENTER ; } else if ( hAlign = = TableColumn . ALIGN_LEAD ) { swt = SWT . LEAD ; } else if ( hAlign = = TableColumn . ALIGN_TRAIL ) { swt = SWT . TRAIL ; } else { swt = SWT . LEAD ; } int vAlign = align & ~3 ; if ( vAlign = = TableColumn . ALIGN_TOP ) { swt | = SWT . TOP ; } else if ( vAlign = = TableColumn . ALIGN_BOTTOM ) { swt | = SWT . BOTTOM ; } return swt ; }
void test1 ( ) throws Throwable { ClipboardCopy clipboardCopy0 = new ClipboardCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { LogAlert logAlert0 = new LogAlert ( ( Object ) "Views . plugins . " , false , "Views . plugins . " , ( Throwable ) null ) ; SystemWarningWindow systemWarningWindow0 = new SystemWarningWindow ( logAlert0 , ( Point ) null , ( Shell ) null , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SystemWarningWindow ( LogAlert logAlert , Point ptBottomRight , Shell parent , int historyPosition ) { this . logAlert = logAlert ; this . ptBottomRight = ptBottomRight ; this . parent = parent ; this . historyPosition = historyPosition ; String amb_key_suffix ; switch ( logAlert . entryType ) { case LogAlert . AT_ERROR : amb_key_suffix = "error" ; break ; case LogAlert . AT_INFORMATION : amb_key_suffix = "information" ; break ; case LogAlert . AT_WARNING : amb_key_suffix = "warning" ; break ; default : amb_key_suffix = null ; break ; } title = amb_key_suffix = = null ? Constants . APP_NAME : MessageText . getString ( "AlertMessageBox . " + amb_key_suffix ) ; if ( logAlert . text . startsWith ( " { " ) ) { text = MessageText . expandValue ( logAlert . text ) ; } else { text = logAlert . text ; } if ( logAlert . err ! = null ) { text + = "\n" + Debug . getExceptionMessage ( logAlert . err ) ; } if ( logAlert . details ! = null ) { text + = "\n < A HREF = \"details\" > " + MessageText . getString ( "v3 . MainWindow . button . viewdetails" ) + " < / A > " ; } Utils . execSWTThread ( new AERunnable ( ) { void runSupport ( ) { openWindow ( ) ; } } ) ; }
void test3 ( ) throws Throwable { LogAlert logAlert0 = new LogAlert ( false , ( - 21 ) , "ZL < / UJ" , ( Throwable ) null ) ; logAlert0 . details = "ZL < / UJ" ; SystemWarningWindow systemWarningWindow0 = new SystemWarningWindow ( logAlert0 , ( Point ) null , ( Shell ) null , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SystemWarningWindow ( LogAlert logAlert , Point ptBottomRight , Shell parent , int historyPosition ) { this . logAlert = logAlert ; this . ptBottomRight = ptBottomRight ; this . parent = parent ; this . historyPosition = historyPosition ; String amb_key_suffix ; switch ( logAlert . entryType ) { case LogAlert . AT_ERROR : amb_key_suffix = "error" ; break ; case LogAlert . AT_INFORMATION : amb_key_suffix = "information" ; break ; case LogAlert . AT_WARNING : amb_key_suffix = "warning" ; break ; default : amb_key_suffix = null ; break ; } title = amb_key_suffix = = null ? Constants . APP_NAME : MessageText . getString ( "AlertMessageBox . " + amb_key_suffix ) ; if ( logAlert . text . startsWith ( " { " ) ) { text = MessageText . expandValue ( logAlert . text ) ; } else { text = logAlert . text ; } if ( logAlert . err ! = null ) { text + = "\n" + Debug . getExceptionMessage ( logAlert . err ) ; } if ( logAlert . details ! = null ) { text + = "\n < A HREF = \"details\" > " + MessageText . getString ( "v3 . MainWindow . button . viewdetails" ) + " < / A > " ; } Utils . execSWTThread ( new AERunnable ( ) { void runSupport ( ) { openWindow ( ) ; } } ) ; }
void test0 ( ) throws Throwable { IPWInstallModePanel iPWInstallModePanel0 = new IPWInstallModePanel ( ( Wizard ) null , ( IWizardPanel ) null ) ; IPWModePanel iPWModePanel0 = new IPWModePanel ( ( Wizard ) null , ( IWizardPanel ) iPWInstallModePanel0 ) ; boolean boolean0 = iPWModePanel0 . isNextEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNextEnabled ( ) { return ( file_valid ) ; }
void test1 ( ) throws Throwable { IPWInstallModePanel iPWInstallModePanel0 = new IPWInstallModePanel ( ( Wizard ) null , ( IWizardPanel ) null ) ; IPWModePanel iPWModePanel0 = new IPWModePanel ( ( Wizard ) null , ( IWizardPanel ) iPWInstallModePanel0 ) ; IWizardPanel < Object > iWizardPanel0 = iPWModePanel0 . getNextPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFinishEnabled ( ) { return ( file_valid ) ; }
void test0 ( ) throws Throwable { IPWListPanel iPWListPanel0 = new IPWListPanel ( ( Wizard ) null , ( IWizardPanel ) null ) ; IWizardPanel < Object > iWizardPanel0 = iPWListPanel0 . getNextPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFinishEnabled ( ) { return ( file_valid ) ; }
void test0 ( ) throws Throwable { IPWInstallModePanel iPWInstallModePanel0 = new IPWInstallModePanel ( ( Wizard ) null , ( IWizardPanel ) null ) ; IWizardPanel < Object > iWizardPanel0 = iPWInstallModePanel0 . getFinishPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPreviousEnabled ( ) { return ( false ) ; }
void test1 ( ) throws Throwable { IPWInstallModePanel iPWInstallModePanel0 = new IPWInstallModePanel ( ( Wizard ) null , ( IWizardPanel ) null ) ; boolean boolean0 = iPWInstallModePanel0 . isFinishEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFinishEnabled ( ) { return ( file_valid ) ; }
void test0 ( ) throws Throwable { RPRequest rPRequest0 = new RPRequest ( ) ; RPObject rPObject0 = rPRequest0 . getObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DERObject getObject ( ) throws IOException { return new ASN1InputStream ( getContents ( ) ) . readObject ( ) ; }
void test1 ( ) throws Throwable { RPRequest rPRequest0 = new RPRequest ( ) ; Object [ ] objectArray0 = rPRequest0 . getParams ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ElGamalParameterSpec getParams ( ) ; }
void test2 ( ) throws Throwable { RPRequest rPRequest0 = new RPRequest ( ) ; PluginInterface pluginInterface0 = rPRequest0 . getPluginInterface ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PluginInterface getPluginInterface ( ) { return ( plugin_interface ) ; }
void test3 ( ) throws Throwable { RPRequest rPRequest0 = new RPRequest ( ) ; rPRequest0 . setRPLoggerChannel ( ( LoggerChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClientIP ( ) { return ( client_ip ) ; }
void test4 ( ) throws Throwable { RPRequest rPRequest0 = new RPRequest ( ) ; String string0 = rPRequest0 . getClientIP ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClientIP ( ) { return ( client_ip ) ; }
void test5 ( ) throws Throwable { RPRequest rPRequest0 = new RPRequest ( ) ; LoggerChannel loggerChannel0 = rPRequest0 . getRPLoggerChannel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LoggerChannel getRPLoggerChannel ( ) { return this . channel ; }
void test6 ( ) throws Throwable { RPRequest rPRequest0 = new RPRequest ( ) ; String string0 = rPRequest0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { String img_str = "" ; for ( Image i : images ) { String s ; if ( i = = null ) { s = "null" ; } else { s = i . toString ( ) + " , disp = " + i . isDisposed ( ) ; } img_str + = ( img_str . length ( ) = = 0 ? "" : " , " ) + s ; } return ( "rc = " + refcount + " , images = [ " + img_str + " ] " ) ; }
void test7 ( ) throws Throwable { RPRequest rPRequest0 = new RPRequest ( ) ; String string0 = rPRequest0 . getMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMethod ( ) { return ( method ) ; }
void test8 ( ) throws Throwable { RPRequest rPRequest0 = new RPRequest ( ) ; rPRequest0 . setPluginInterface ( ( PluginInterface ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClientIP ( ) { return ( client_ip ) ; }
void test10 ( ) throws Throwable { RPRequest rPRequest0 = new RPRequest ( ) ; long long0 = rPRequest0 . getRequestId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRequestId ( ) { return ( request_id ) ; }
void test11 ( ) throws Throwable { RPRequest rPRequest0 = new RPRequest ( ) ; rPRequest0 . setClientIP ( "Y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setClientIP ( String str ) { client_ip = str ; }
void test12 ( ) throws Throwable { RPRequest rPRequest0 = new RPRequest ( ) ; long long0 = rPRequest0 . getConnectionId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getConnectionId ( ) { return ( connection_id ) ; }
void test13 ( ) throws Throwable { RPRequest rPRequest0 = new RPRequest ( ( RPObject ) null , ( String ) null , ( Object [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RPRequest ( ) { }
void test12 ( ) throws Throwable { RPPluginInterface rPPluginInterface0 = new RPPluginInterface ( ( PluginInterface ) null ) ; String string0 = rPPluginInterface0 . getAzureusName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAzureusName ( ) { return ( azureus_name ) ; }
void test20 ( ) throws Throwable { RPPluginInterface rPPluginInterface0 = new RPPluginInterface ( ( PluginInterface ) null ) ; rPPluginInterface0 . getConfigSections ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long _getConectionId ( ) { return ( _connection_id ) ; }
void test27 ( ) throws Throwable { RPRequest rPRequest0 = new RPRequest ( ) ; RPPluginInterface rPPluginInterface0 = new RPPluginInterface ( ( PluginInterface ) null ) ; rPRequest0 . createRemotePluginInterface ( ( PluginInterface ) rPPluginInterface0 ) ; rPRequest0 . createRemotePluginInterface ( ( PluginInterface ) rPPluginInterface0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long _getConectionId ( ) { return ( _connection_id ) ; }
void test30 ( ) throws Throwable { RPPluginInterface rPPluginInterface0 = new RPPluginInterface ( ( PluginInterface ) null ) ; rPPluginInterface0 . getApplicationName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long _getConectionId ( ) { return ( _connection_id ) ; }
void test32 ( ) throws Throwable { RPPluginInterface rPPluginInterface0 = new RPPluginInterface ( ( PluginInterface ) null ) ; String string0 = rPPluginInterface0 . getAzureusVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAzureusVersion ( ) { return ( azureus_version ) ; }
void test33 ( ) throws Throwable { RPPluginInterface rPPluginInterface0 = new RPPluginInterface ( ( PluginInterface ) null ) ; long long0 = rPPluginInterface0 . _getNextRequestId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long _getNextRequestId ( ) { ( this ) { return ( request_id_next + + ) ; } }
void test40 ( ) throws Throwable { RPPluginInterface rPPluginInterface0 = new RPPluginInterface ( ( PluginInterface ) null ) ; long long0 = rPPluginInterface0 . _getConectionId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long _getConectionId ( ) { return ( _connection_id ) ; }
void test0 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long _getOID ( ) { return ( _object_id . longValue ( ) ) ; }
void test1 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "Q ( Ug < - Ij ! u" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getPluginColorParameter ( String key ) { notSupported ( ) ; return null ; }
void test2 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "getPluginIntParameter [ String , int ] " ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getPluginStringListParameter ( String key ) { notSupported ( ) ; return null ; }
void test3 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "no_xcode" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCoreFloatParameter ( String key , float value ) { notSupported ( ) ; }
void test4 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "DragTrackingHandler" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getCoreColorParameter ( String key ) { notSupported ( ) ; return null ; }
void test5 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUnsafeBooleanParameter ( String key , boolean default_value ) { notSupported ( ) ; return ( false ) ; }
void test6 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBooleanParameter ( String name ) { return ( false ) ; }
void test7 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setByteParameter ( String key , byte [ ] value ) { notSupported ( ) ; }
void test8 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "Y + gUOF ) " ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getUnsafeFloatParameter ( String key , float default_value ) { notSupported ( ) ; return ( 0 ) ; }
void test9 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "R > " ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getCoreFloatParameter ( String key ) { notSupported ( ) ; return 0 ; }
void test10 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "%0f7 > r ! VJmcVdy" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCoreLongParameter ( String key ) { notSupported ( ) ; return 0 ; }
void test11 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setUnsafeStringParameter ( String key , String value ) { notSupported ( ) ; }
void test12 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCoreStringParameter ( String key , String value ) { notSupported ( ) ; }
void test13 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , " = " ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasPluginParameter ( String x ) { notSupported ( ) ; return false ; }
void test14 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getFloatParameter ( String key ) { notSupported ( ) ; return ( 0 ) ; }
void test15 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "PEPeerTransportProtocol : Req" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCoreLongParameter ( String key , long value ) { notSupported ( ) ; }
void test16 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , " ! g [ m ; ^~" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setUnsafeByteParameter ( String key , byte [ ] value ) { notSupported ( ) ; }
void test17 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPluginParameter ( String key , int value ) { _dispatcher . dispatch ( new RPRequest ( this , "setPluginParameter [ String , int ] " , new Object [ ] { key , new Integer ( value ) } ) ) ; }
void test18 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removePluginParameter ( String x ) { notSupported ( ) ; return false ; }
void test19 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "R & | ( sbe_ , `nllg - w1U ( " ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getUnsafeByteParameter ( String key ) { notSupported ( ) ; return null ; }
void test20 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "Ai : 6lKG" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getCoreColorParameter ( String key ) { notSupported ( ) ; return null ; }
void test21 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getPluginMapParameter ( String key , Map default_value ) { notSupported ( ) ; return ( null ) ; }
void test22 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , " m~IlP" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPluginColorParameter ( String key , int [ ] value ) { notSupported ( ) ; }
void test23 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getPluginBooleanParameter ( String key ) { notSupported ( ) ; return ( false ) ; }
void test24 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "KfM [ F < r & & @gD | ? @" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setIntParameter ( String name , int value ) { }
void test25 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "@%1rZ0L" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setLongParameter ( String name , long value ) { }
void test26 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "object = " ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCoreByteParameter ( String key , byte [ ] value ) { notSupported ( ) ; }
void test27 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getCoreByteParameter ( String key , byte [ ] default_value ) { notSupported ( ) ; return null ; }
void test28 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "MyTorrentsView . filter . tooltip" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ConfigParameter getPluginParameter ( String key ) { notSupported ( ) ; return ( null ) ; }
void test29 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "US" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPluginIntParameter ( String key ) { notSupported ( ) ; return ( 0 ) ; }
void test30 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCoreIntParameter ( String key , int value ) { notSupported ( ) ; }
void test31 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , " [ eEfy : XqF@^8" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasParameter ( String x ) { notSupported ( ) ; return false ; }
void test32 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , " = / x3e" ) ; RPPluginConfig rPPluginConfig0 = ( RPPluginConfig ) RPPluginConfig . create ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RPPluginConfig ( PluginConfig _delegate ) { super ( _delegate ) ; }
void test33 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCoreBooleanParameter ( String key , boolean value ) { notSupported ( ) ; }
void test34 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "org . bouncycastle . jce . provider . BrokenJCEBlockCipher$BrokePBEWithSHA1AndDES" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPluginListParameter ( String key , List value ) { notSupported ( ) ; }
void test35 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "A" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getUnsafeColorParameter ( String key ) { notSupported ( ) ; return null ; }
void test36 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getCoreFloatParameter ( String key ) { notSupported ( ) ; return 0 ; }
void test37 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "getPluginIntParameter [ String , int ] " ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getPluginByteParameter ( String key , byte [ ] defaultValue ) { notSupported ( ) ; return ( null ) ; }
void test38 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "LOW" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPluginStringParameter ( String key ) { notSupported ( ) ; return ( null ) ; }
void test39 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStringParameter ( String key ) { notSupported ( ) ; return ( null ) ; }
void test40 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUnsafeStringParameter ( String key , String default_value ) { notSupported ( ) ; return ( null ) ; }
void test41 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , " / e / + GGz : IQc ? b7" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPluginParameter ( String key , int value ) { _dispatcher . dispatch ( new RPRequest ( this , "setPluginParameter [ String , int ] " , new Object [ ] { key , new Integer ( value ) } ) ) ; }
void test42 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "1 & HQdQ@9i7k } bT" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPluginParameter ( String key , int value ) { _dispatcher . dispatch ( new RPRequest ( this , "setPluginParameter [ String , int ] " , new Object [ ] { key , new Integer ( value ) } ) ) ; }
void test43 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , " = / x3e" ) ; RPPluginConfig rPPluginConfig0 = ( RPPluginConfig ) RPPluginConfig . create ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long _getOID ( ) { return ( _object_id . longValue ( ) ) ; }
void test44 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "Q ( U < - Ij ! u3" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getUnsafeColorParameter ( String key ) { notSupported ( ) ; return null ; }
void test45 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "write ( fc ) " ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getByteParameter ( String name , byte [ ] _default ) { notSupported ( ) ; return ( null ) ; }
void test46 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUnsafeStringParameter ( String key , String default_value ) { notSupported ( ) ; return ( null ) ; }
void test47 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "Ngb ] V } ZXvW > 1q" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getUnsafeByteParameter ( String key ) { notSupported ( ) ; return null ; }
void test48 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "M + mXf7 * $xZiV~S" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setFloatParameter ( String key , float value ) { notSupported ( ) ; }
void test49 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "GR~p#NK5_ t" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPluginParameter ( String key , int value ) { _dispatcher . dispatch ( new RPRequest ( this , "setPluginParameter [ String , int ] " , new Object [ ] { key , new Integer ( value ) } ) ) ; }
void test50 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , " ! * vI_ZxxQ < c" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCoreColorParameter ( String key , int [ ] value ) { notSupported ( ) ; }
void test51 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PluginConfigSource getPluginConfigSource ( ) { notSupported ( ) ; return null ; }
void test52 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getUnsafeLongParameter ( String key , long default_value ) { notSupported ( ) ; return ( 0 ) ; }
void test53 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setUnsafeIntParameter ( String key , int value ) { notSupported ( ) ; }
void test54 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getPluginColorParameter ( String key ) { notSupported ( ) ; return null ; }
void test55 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCoreIntParameter ( String key ) { notSupported ( ) ; return 0 ; }
void test56 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getPluginByteParameter ( String key , byte [ ] defaultValue ) { notSupported ( ) ; return ( null ) ; }
void test57 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "F" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPluginConfigKeyPrefix ( ) { notSupported ( ) ; return ( null ) ; }
void test58 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , " [ vc" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getUnsafeParameterList ( ) { notSupported ( ) ; return ( null ) ; }
void test59 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "lt_handshake" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCoreStringParameter ( String key ) { notSupported ( ) ; return null ; }
void test60 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getPluginFloatParameter ( String key ) { notSupported ( ) ; return 0 ; }
void test61 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getPluginColorParameter ( String key ) { notSupported ( ) ; return null ; }
void test62 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getPluginLongParameter ( String key ) { notSupported ( ) ; return 0 ; }
void test63 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "CORE_PARAM_BOOLEAN_FRIENDLY_HASH_CHECKING" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPluginParameter ( String key , int value ) { _dispatcher . dispatch ( new RPRequest ( this , "setPluginParameter [ String , int ] " , new Object [ ] { key , new Integer ( value ) } ) ) ; }
void test64 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPluginParameter ( String key , int value ) { _dispatcher . dispatch ( new RPRequest ( this , "setPluginParameter [ String , int ] " , new Object [ ] { key , new Integer ( value ) } ) ) ; }
void test65 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setStringParameter ( String key , String value ) { notSupported ( ) ; }
void test66 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , "" ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long _getOID ( ) { return ( _object_id . longValue ( ) ) ; }
void test67 ( ) throws Throwable { PluginConfigImpl pluginConfigImpl0 = new PluginConfigImpl ( ( PluginInterface ) null , ( String ) null ) ; RPPluginConfig rPPluginConfig0 = new RPPluginConfig ( ( PluginConfig ) pluginConfigImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RPReply _process ( RPRequest request ) { throw ( new RuntimeException ( "you've got to implement this - " + request ) ) ; }
void test0 ( ) throws Throwable { RPReply rPReply0 = new RPReply ( ( Object ) null ) ; Map < Object , Object > map0 = rPReply0 . getProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return ( match_buffers_cow . isEmpty ( ) ) ; }
void test3 ( ) throws Throwable { RPReply rPReply0 = new RPReply ( ( Object ) null ) ; Class < Object > class0 = rPReply0 . getResponseClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getResponseClass ( ) { return response_class ; }
void test4 ( ) throws Throwable { RPReply rPReply0 = new RPReply ( ( Object ) null ) ; Object object0 = rPReply0 . getResponse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < byte [ ] > getResponse ( ) { return ( response ) ; }
void test1 ( ) throws Throwable { RPFactory rPFactory0 = new RPFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { RPObject rPObject0 = new RPObject ( ) ; Object object0 = rPObject0 . _getDelegate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object _getDelegate ( ) { return ( __delegate ) ; }
void test5 ( ) throws Throwable { RPObject rPObject0 = RPObject . _lookupLocal ( ( Object ) "Object" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RPObject _lookupLocal ( Object key ) { ( object_registry ) { RPObject res = ( RPObject ) object_registry . get ( key ) ; if ( res ! = null ) { res . _setLocal ( ) ; } return ( res ) ; } }
void test7 ( ) throws Throwable { RPObject rPObject0 = new RPObject ( ) ; rPObject0 . _setRemote ( ( RPRequestDispatcher ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _getName ( ) { String str = this . getClass ( ) . getName ( ) ; int dp = str . lastIndexOf ( ' . ' ) ; if ( dp ! = - 1 ) { str = str . substring ( dp + 1 ) ; } if ( str . startsWith ( "RP" ) ) { str = str . substring ( 2 ) ; } return ( str ) ; }
void test9 ( ) throws Throwable { RPObject rPObject0 = RPObject . _lookupLocal ( ( Object ) "E$6Q : + = N ( 7WV" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RPObject _lookupLocal ( Object key ) { ( object_registry ) { RPObject res = ( RPObject ) object_registry . get ( key ) ; if ( res ! = null ) { res . _setLocal ( ) ; } return ( res ) ; } }
void test12 ( ) throws Throwable { RPObject rPObject0 = new RPObject ( ) ; String string0 = rPObject0 . _getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String _getName ( ) { String str = this . getClass ( ) . getName ( ) ; int dp = str . lastIndexOf ( ' . ' ) ; if ( dp ! = - 1 ) { str = str . substring ( dp + 1 ) ; } if ( str . startsWith ( "RP" ) ) { str = str . substring ( 2 ) ; } return ( str ) ; }
void test0 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; SEPublicKeyImpl sEPublicKeyImpl0 = new SEPublicKeyImpl ( ( - 1941 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; SEPublicKeyImpl sEPublicKeyImpl0 = new SEPublicKeyImpl ( 117 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test2 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; SEPublicKeyImpl sEPublicKeyImpl0 = ( SEPublicKeyImpl ) SEPublicKeyImpl . decode ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; SEPublicKeyImpl sEPublicKeyImpl0 = new SEPublicKeyImpl ( ( int ) ( byte ) 0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; SEPublicKeyImpl sEPublicKeyImpl0 = new SEPublicKeyImpl ( ( int ) ( byte ) 0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 1 ] ; SEPublicKeyImpl sEPublicKeyImpl0 = new SEPublicKeyImpl ( ( - 1914 ) , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 4 ] ; SEPublicKeyImpl sEPublicKeyImpl0 = new SEPublicKeyImpl ( 1515 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test0 ( ) throws Throwable { SESecurityManagerImpl sESecurityManagerImpl0 = new SESecurityManagerImpl ( ( AzureusCore ) null ) ; byte [ ] byteArray0 = new byte [ 7 ] ; SEPublicKeyImpl sEPublicKeyImpl0 = ( SEPublicKeyImpl ) sESecurityManagerImpl0 . decodePublicKey ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test0 ( ) throws Throwable { InetSocketAddress inetSocketAddress0 = new InetSocketAddress ( 0 ) ; SESTSConnectionImpl . rateLimit ( inetSocketAddress0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String s = "SWTSkinObjectBasic { " + sID ; if ( ! sID . equals ( sConfigID ) ) { s + = " / " + sConfigID ; } if ( sViewID ! = null ) { s + = " / v = " + sViewID ; } s + = " , " + type + " ; parent = " + ( ( parent = = null ) ? null : parent . getSkinObjectID ( ) + " } " ) ; return s ; }
void test4 ( ) throws Throwable { ResourceDownloaderDelayedImpl resourceDownloaderDelayedImpl0 = new ResourceDownloaderDelayedImpl ( ( ResourceDownloaderBaseImpl ) null , ( ResourceDownloaderDelayedFactory ) null ) ; ResourceDownloaderDelayedImpl resourceDownloaderDelayedImpl1 = ( ResourceDownloaderDelayedImpl ) resourceDownloaderDelayedImpl0 . getClone ( ( ResourceDownloaderBaseImpl ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResourceDownloaderBaseImpl getClone ( ResourceDownloaderBaseImpl parent ) { ResourceDownloaderMetaRefreshImpl c = new ResourceDownloaderMetaRefreshImpl ( parent , delegate . getClone ( this ) ) ; c . setSize ( size ) ; c . setProperties ( this ) ; return ( c ) ; }
void test8 ( ) throws Throwable { ResourceDownloaderDelayedImpl resourceDownloaderDelayedImpl0 = new ResourceDownloaderDelayedImpl ( ( ResourceDownloaderBaseImpl ) null , ( ResourceDownloaderDelayedFactory ) null ) ; String string0 = resourceDownloaderDelayedImpl0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test1 ( ) throws Throwable { ResourceDownloaderErrorImpl resourceDownloaderErrorImpl0 = new ResourceDownloaderErrorImpl ( ( ResourceDownloaderBaseImpl ) null , ( ResourceDownloaderException ) null ) ; resourceDownloaderErrorImpl0 . addListener ( ( ResourceDownloaderListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCancelled ( ) ; }
void test2 ( ) throws Throwable { ResourceDownloaderErrorImpl resourceDownloaderErrorImpl0 = new ResourceDownloaderErrorImpl ( ( ResourceDownloaderBaseImpl ) null , ( ResourceDownloaderException ) null ) ; resourceDownloaderErrorImpl0 . setSize ( ( - 429L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCancelled ( ) ; }
void test6 ( ) throws Throwable { ResourceDownloaderErrorImpl resourceDownloaderErrorImpl0 = new ResourceDownloaderErrorImpl ( ( ResourceDownloaderBaseImpl ) null , ( ResourceDownloaderException ) null ) ; resourceDownloaderErrorImpl0 . asyncDownload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCancelled ( ) ; }
void test7 ( ) throws Throwable { ResourceDownloaderErrorImpl resourceDownloaderErrorImpl0 = new ResourceDownloaderErrorImpl ( ( ResourceDownloaderBaseImpl ) null , ( ResourceDownloaderException ) null ) ; resourceDownloaderErrorImpl0 . reportActivity ( "E & b * Ysq3owl ] ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCancelled ( ) ; }
void test8 ( ) throws Throwable { ResourceDownloaderErrorImpl resourceDownloaderErrorImpl0 = new ResourceDownloaderErrorImpl ( ( ResourceDownloaderBaseImpl ) null , ( ResourceDownloaderException ) null ) ; ResourceDownloaderErrorImpl resourceDownloaderErrorImpl1 = ( ResourceDownloaderErrorImpl ) resourceDownloaderErrorImpl0 . getClone ( ( ResourceDownloaderBaseImpl ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResourceDownloaderBaseImpl getClone ( ResourceDownloaderBaseImpl parent ) { ResourceDownloaderMetaRefreshImpl c = new ResourceDownloaderMetaRefreshImpl ( parent , delegate . getClone ( this ) ) ; c . setSize ( size ) ; c . setProperties ( this ) ; return ( c ) ; }
void test9 ( ) throws Throwable { ResourceDownloaderErrorImpl resourceDownloaderErrorImpl0 = new ResourceDownloaderErrorImpl ( ( ResourceDownloaderBaseImpl ) null , ( ResourceDownloaderException ) null ) ; resourceDownloaderErrorImpl0 . cancel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCancelled ( ) ; }
void test2 ( ) throws Throwable { Handler handler0 = new Handler ( ) ; URL uRL0 = new URL ( "5aG" , "5aG" , 0 , "5aG" , ( URLStreamHandler ) handler0 ) ; ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl ( ( ResourceDownloaderBaseImpl ) null , uRL0 , "5aG" , false , "5aG" , "5aG" ) ; ResourceDownloaderTimeoutImpl resourceDownloaderTimeoutImpl0 = new ResourceDownloaderTimeoutImpl ( ( ResourceDownloaderBaseImpl ) resourceDownloaderURLImpl0 , ( ResourceDownloader ) resourceDownloaderURLImpl0 , ( - 1206 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test5 ( ) throws Throwable { ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = new ResourceDownloaderFileImpl ( ( ResourceDownloaderBaseImpl ) null , ( File ) null ) ; ResourceDownloaderRetryImpl resourceDownloaderRetryImpl0 = new ResourceDownloaderRetryImpl ( ( ResourceDownloaderBaseImpl ) null , ( ResourceDownloader ) resourceDownloaderFileImpl0 , 0 ) ; ResourceDownloaderTimeoutImpl resourceDownloaderTimeoutImpl0 = new ResourceDownloaderTimeoutImpl ( ( ResourceDownloaderBaseImpl ) null , ( ResourceDownloader ) resourceDownloaderRetryImpl0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test6 ( ) throws Throwable { ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = new ResourceDownloaderFileImpl ( ( ResourceDownloaderBaseImpl ) null , ( File ) null ) ; ResourceDownloaderRetryImpl resourceDownloaderRetryImpl0 = new ResourceDownloaderRetryImpl ( ( ResourceDownloaderBaseImpl ) null , ( ResourceDownloader ) resourceDownloaderFileImpl0 , 0 ) ; ResourceDownloaderTimeoutImpl resourceDownloaderTimeoutImpl0 = new ResourceDownloaderTimeoutImpl ( ( ResourceDownloaderBaseImpl ) null , ( ResourceDownloader ) resourceDownloaderRetryImpl0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void download ( Subscription subs , boolean is_auto ) throws SubscriptionException ; void downloadAsync ( Subscription subs , boolean is_auto ) throws SubscriptionException ; void download ( Subscription subs , boolean is_auto , SubscriptionDownloadListener listener ) throws SubscriptionException ; void download ( Subscription subs , SubscriptionResult result ) ; }
void test8 ( ) throws Throwable { ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = new ResourceDownloaderFileImpl ( ( ResourceDownloaderBaseImpl ) null , ( File ) null ) ; ResourceDownloaderRetryImpl resourceDownloaderRetryImpl0 = new ResourceDownloaderRetryImpl ( ( ResourceDownloaderBaseImpl ) null , ( ResourceDownloader ) resourceDownloaderFileImpl0 , 0 ) ; ResourceDownloaderTimeoutImpl resourceDownloaderTimeoutImpl0 = new ResourceDownloaderTimeoutImpl ( ( ResourceDownloaderBaseImpl ) null , ( ResourceDownloader ) resourceDownloaderRetryImpl0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test0 ( ) throws Throwable { File file0 = new File ( "W ) { | 1sr39`fAq@mekx" , "W ) { | 1sr39`fAq@mekx" ) ; ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = new ResourceDownloaderFileImpl ( ( ResourceDownloaderBaseImpl ) null , file0 ) ; ResourceDownloaderFileImpl resourceDownloaderFileImpl1 = ( ResourceDownloaderFileImpl ) resourceDownloaderFileImpl0 . getClone ( ( ResourceDownloaderBaseImpl ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResourceDownloaderBaseImpl getClone ( ResourceDownloaderBaseImpl parent ) { ResourceDownloaderMetaRefreshImpl c = new ResourceDownloaderMetaRefreshImpl ( parent , delegate . getClone ( this ) ) ; c . setSize ( size ) ; c . setProperties ( this ) ; return ( c ) ; }
void test1 ( ) throws Throwable { File file0 = new File ( "W ) { | 1sr39`fAq@mekx" , "W ) { | 1sr39`fAq@mekx" ) ; ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = new ResourceDownloaderFileImpl ( ( ResourceDownloaderBaseImpl ) null , file0 ) ; resourceDownloaderFileImpl0 . cancel ( ) ; resourceDownloaderFileImpl0 . asyncDownload ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCancelled ( ) ; }
void test2 ( ) throws Throwable { File file0 = new File ( "VY~f8aY6r" , "VY~f8aY6r" ) ; ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = new ResourceDownloaderFileImpl ( ( ResourceDownloaderBaseImpl ) null , file0 ) ; long long0 = resourceDownloaderFileImpl0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test3 ( ) throws Throwable { File file0 = new File ( ( File ) null , "$ } E_ fLYfk" ) ; ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = new ResourceDownloaderFileImpl ( ( ResourceDownloaderBaseImpl ) null , file0 ) ; resourceDownloaderFileImpl0 . failed ( ( ResourceDownloader ) null , ( ResourceDownloaderException ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCancelled ( ) ; }
void test4 ( ) throws Throwable { File file0 = new File ( "W ) { | 1sr39`fAq@mekx" , "W ) { | 1sr39`fAq@mekx" ) ; ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = new ResourceDownloaderFileImpl ( ( ResourceDownloaderBaseImpl ) null , file0 ) ; resourceDownloaderFileImpl0 . setSize ( 15L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test5 ( ) throws Throwable { File file0 = new File ( "http . p0roxoyUs8Per" , "http . p0roxoyUs8Per" ) ; ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = new ResourceDownloaderFileImpl ( ( ResourceDownloaderBaseImpl ) null , file0 ) ; long long0 = resourceDownloaderFileImpl0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test7 ( ) throws Throwable { File file0 = new File ( "Tracker Port Enable" ) ; File file1 = file0 . getAbsoluteFile ( ) ; File file2 = file1 . getParentFile ( ) ; ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = new ResourceDownloaderFileImpl ( ( ResourceDownloaderBaseImpl ) null , file2 ) ; resourceDownloaderFileImpl0 . download ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test8 ( ) throws Throwable { File file0 = new File ( "%MS . . PT7 & j" ) ; ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = new ResourceDownloaderFileImpl ( ( ResourceDownloaderBaseImpl ) null , file0 ) ; PipedInputStream pipedInputStream0 = new PipedInputStream ( 18 ) ; boolean boolean0 = resourceDownloaderFileImpl0 . completed ( ( ResourceDownloader ) null , ( InputStream ) pipedInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void completed ( ProgressEvent arg0 ) { getCookies ( ) ; }
void test0 ( ) throws Throwable { ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl ( ) ; ResourceDownloaderAlternateImpl resourceDownloaderAlternateImpl0 = ( ResourceDownloaderAlternateImpl ) resourceDownloaderFactoryImpl0 . getSourceforgeDownloader ( "3ou " , "3ou " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test1 ( ) throws Throwable { ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = ( ResourceDownloaderFactoryImpl ) ResourceDownloaderFactoryImpl . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AzureusCore getSingleton ( ) throws AzureusCoreException { return ( AzureusCoreImpl . getSingleton ( ) ) ; }
void test3 ( ) throws Throwable { ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl ( ) ; ResourceDownloaderDelayedImpl resourceDownloaderDelayedImpl0 = ( ResourceDownloaderDelayedImpl ) resourceDownloaderFactoryImpl0 . create ( ( ResourceDownloaderDelayedFactory ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test4 ( ) throws Throwable { ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl ( ) ; ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = ( ResourceDownloaderURLImpl ) resourceDownloaderFactoryImpl0 . create ( ( URL ) null , " } K# / " , " } K# / " ) ; ResourceDownloaderMetaRefreshImpl resourceDownloaderMetaRefreshImpl0 = ( ResourceDownloaderMetaRefreshImpl ) resourceDownloaderFactoryImpl0 . getMetaRefreshDownloader ( ( ResourceDownloader ) resourceDownloaderURLImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCancelled ( ) ; }
void test5 ( ) throws Throwable { ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl ( ) ; ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = ( ResourceDownloaderURLImpl ) resourceDownloaderFactoryImpl0 . create ( ( URL ) null , "wb - p5r [ < l" ) ; ResourceDownloaderURLImpl resourceDownloaderURLImpl1 = ( ResourceDownloaderURLImpl ) resourceDownloaderFactoryImpl0 . getSuffixBasedDownloader ( ( ResourceDownloader ) resourceDownloaderURLImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test9 ( ) throws Throwable { ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl ( ) ; ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = ( ResourceDownloaderFileImpl ) resourceDownloaderFactoryImpl0 . create ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCancelled ( ) ; }
void test10 ( ) throws Throwable { ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl ( ) ; ResourceDownloaderAlternateImpl resourceDownloaderAlternateImpl0 = ( ResourceDownloaderAlternateImpl ) resourceDownloaderFactoryImpl0 . getSourceforgeDownloader ( "3ou " , "3ou " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test11 ( ) throws Throwable { ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl ( ) ; File file0 = new File ( "" ) ; URI uRI0 = file0 . toURI ( ) ; URL uRL0 = uRI0 . toURL ( ) ; ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = ( ResourceDownloaderFileImpl ) resourceDownloaderFactoryImpl0 . create ( uRL0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCancelled ( ) ; }
void test12 ( ) throws Throwable { ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl ( ) ; Handler handler0 = new Handler ( ) ; URL uRL0 = new URL ( " / sourceforge / @ngxc8_sc0c | iqrr / @ngxc8_sc0c | iqrr . torrent" , " / sourceforge / @ngxc8_sc0c | iqrr / @ngxc8_sc0c | iqrr . torrent" , 0 , " / sourceforge / @ngxc8_sc0c | iqrr / @ngxc8_sc0c | iqrr . torrent" , ( URLStreamHandler ) handler0 ) ; ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = ( ResourceDownloaderURLImpl ) resourceDownloaderFactoryImpl0 . create ( uRL0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test13 ( ) throws Throwable { ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl ( ) ; ResourceDownloaderAlternateImpl resourceDownloaderAlternateImpl0 = ( ResourceDownloaderAlternateImpl ) resourceDownloaderFactoryImpl0 . getSourceforgeDownloader ( " } K# / " , " } K# / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test0 ( ) throws Throwable { Handler handler0 = new Handler ( ) ; URL uRL0 = new URL ( "AbFQ , : z" , "AbFQ , : z" , 82 , "AbFQ , : z" , ( URLStreamHandler ) handler0 ) ; ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl ( ( ResourceDownloaderBaseImpl ) null , uRL0 ) ; URL uRL1 = resourceDownloaderURLImpl0 . getURL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test4 ( ) throws Throwable { URL uRL0 = new URL ( "file" , "file" , 0 , "file" ) ; ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl ( ( ResourceDownloaderBaseImpl ) null , uRL0 , false , "file" , "file" ) ; resourceDownloaderURLImpl0 . setAuthenticationOutcome ( "file" , uRL0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test5 ( ) throws Throwable { Handler handler0 = new Handler ( ) ; URL uRL0 = new URL ( "vuze" , "vuze" , 661 , "vuze" , ( URLStreamHandler ) handler0 ) ; ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl ( ( ResourceDownloaderBaseImpl ) null , uRL0 , "vuze" , false , "vuze" , "vuze" ) ; resourceDownloaderURLImpl0 . clearPasswords ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test7 ( ) throws Throwable { URL uRL0 = new URL ( "ftp" , "ftp" , "ftp" ) ; ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl ( ( ResourceDownloaderBaseImpl ) null , uRL0 , true , "ftp" , "ftp" ) ; resourceDownloaderURLImpl0 . getSize ( ) ; long long0 = resourceDownloaderURLImpl0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test8 ( ) throws Throwable { URL uRL0 = new URL ( "dht" , "dht" , "dht" ) ; ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl ( ( ResourceDownloaderBaseImpl ) null , uRL0 , "dht" , false , "dht" , "dht" ) ; long long0 = resourceDownloaderURLImpl0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test9 ( ) throws Throwable { Handler handler0 = new Handler ( ) ; URL uRL0 = new URL ( "vuze" , "vuze" , 661 , "vuze" , ( URLStreamHandler ) handler0 ) ; ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl ( ( ResourceDownloaderBaseImpl ) null , uRL0 , "vuze" , false , "vuze" , "vuze" ) ; long long0 = resourceDownloaderURLImpl0 . getSizeSupport ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test13 ( ) throws Throwable { Handler handler0 = new Handler ( ) ; URL uRL0 = new URL ( "vuze" , "vuze" , 661 , "vuze" , ( URLStreamHandler ) handler0 ) ; ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl ( ( ResourceDownloaderBaseImpl ) null , uRL0 , "vuze" , false , "vuze" , "vuze" ) ; resourceDownloaderURLImpl0 . cancel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test14 ( ) throws Throwable { URL uRL0 = new URL ( "file" , "file" , 0 , "file" ) ; ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl ( ( ResourceDownloaderBaseImpl ) null , uRL0 , false , "file" , "file" ) ; URLConnection uRLConnection0 = uRL0 . openConnection ( ) ; resourceDownloaderURLImpl0 . setRequestProperties ( uRLConnection0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test15 ( ) throws Throwable { Handler handler0 = new Handler ( ) ; URL uRL0 = new URL ( "AbFQ , : z" , "AbFQ , : z" , 82 , "AbFQ , : z" , ( URLStreamHandler ) handler0 ) ; ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl ( ( ResourceDownloaderBaseImpl ) null , uRL0 ) ; resourceDownloaderURLImpl0 . getAuthentication ( "AbFQ , : z" , uRL0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test16 ( ) throws Throwable { Handler handler0 = new Handler ( ) ; URL uRL0 = new URL ( "AbFQ , : z" , "AbFQ , : z" , 82 , "AbFQ , : z" , ( URLStreamHandler ) handler0 ) ; ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl ( ( ResourceDownloaderBaseImpl ) null , uRL0 , true , "AbFQ , : z" , ( String ) null ) ; PasswordAuthentication passwordAuthentication0 = resourceDownloaderURLImpl0 . getAuthentication ( "AbFQ , : z" , uRL0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test17 ( ) throws Throwable { Handler handler0 = new Handler ( ) ; URL uRL0 = new URL ( "b ; K ( = } - = / jaqNCq ? " , "b ; K ( = } - = / jaqNCq ? " , 67 , "b ; K ( = } - = / jaqNCq ? " , ( URLStreamHandler ) handler0 ) ; ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl ( ( ResourceDownloaderBaseImpl ) null , uRL0 , true , "b ; K ( = } - = / jaqNCq ? " , "b ; K ( = } - = / jaqNCq ? " ) ; PasswordAuthentication passwordAuthentication0 = resourceDownloaderURLImpl0 . getAuthentication ( "b ; K ( = } - = / jaqNCq ? " , uRL0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSize ( ) ; int getNbPeers ( ) ; int getNbSeeds ( ) ; int getNbSuperSeeds ( ) ; int getComments ( ) ; int getVotes ( ) ; int getVotesDown ( ) ; boolean isPrivate ( ) ; String getDRMKey ( ) ; / / Links String getDownloadLink ( ) ; String getDownloadButtonLink ( ) ; String getCDPLink ( ) ; String getPlayLink ( ) ; float getAccuracy ( ) ; / / 0 . 0 - > 1 . 0 and - 1 if not supported String getSearchQuery ( ) ; String getUID ( ) ; String getHash ( ) ; Result ( Engine _engine ) { engine = _engine ; }
void test0 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "" ) ; SimpleXMLParserDocumentNodeImpl simpleXMLParserDocumentNodeImpl0 = new SimpleXMLParserDocumentNodeImpl ( ( SimpleXMLParserDocumentImpl ) null , ( Node ) iIOMetadataNode0 ) ; IIOMetadataNode iIOMetadataNode1 = ( IIOMetadataNode ) simpleXMLParserDocumentNodeImpl0 . getNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLength ( ) { return ( file . getLength ( ) ) ; }
void test1 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; SimpleXMLParserDocumentNodeImpl simpleXMLParserDocumentNodeImpl0 = new SimpleXMLParserDocumentNodeImpl ( ( SimpleXMLParserDocumentImpl ) null , ( Node ) iIOMetadataNode0 ) ; String string0 = simpleXMLParserDocumentNodeImpl0 . getNameSpaceURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNameSpaceURI ( ) { return ( root_node . getNameSpaceURI ( ) ) ; }
void test2 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "" ) ; SimpleXMLParserDocumentNodeImpl simpleXMLParserDocumentNodeImpl0 = new SimpleXMLParserDocumentNodeImpl ( ( SimpleXMLParserDocumentImpl ) null , ( Node ) iIOMetadataNode0 ) ; String string0 = simpleXMLParserDocumentNodeImpl0 . getFullName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullName ( ) { return ( root_node . getFullName ( ) ) ; }
void test4 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; SimpleXMLParserDocumentNodeImpl simpleXMLParserDocumentNodeImpl0 = new SimpleXMLParserDocumentNodeImpl ( ( SimpleXMLParserDocumentImpl ) null , ( Node ) iIOMetadataNode0 ) ; iIOMetadataNode0 . setAttribute ( "O" , "O" ) ; SimpleXMLParserDocumentAttributeImpl simpleXMLParserDocumentAttributeImpl0 = ( SimpleXMLParserDocumentAttributeImpl ) simpleXMLParserDocumentNodeImpl0 . getAttribute ( " [ F' ? 8Fkn" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttribute ( String name ) ; void sync ( ) ; }
void test5 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; SimpleXMLParserDocumentNodeImpl simpleXMLParserDocumentNodeImpl0 = new SimpleXMLParserDocumentNodeImpl ( ( SimpleXMLParserDocumentImpl ) null , ( Node ) iIOMetadataNode0 ) ; iIOMetadataNode0 . setAttribute ( "O" , "O" ) ; SimpleXMLParserDocumentAttributeImpl simpleXMLParserDocumentAttributeImpl0 = ( SimpleXMLParserDocumentAttributeImpl ) simpleXMLParserDocumentNodeImpl0 . getAttribute ( "O" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( String name , String [ ] params ) { return getValue ( name , params , true ) ; }
void test0 ( ) throws Throwable { SimpleXMLParserDocumentAttributeImpl simpleXMLParserDocumentAttributeImpl0 = new SimpleXMLParserDocumentAttributeImpl ( "" , "" ) ; String string0 = simpleXMLParserDocumentAttributeImpl0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( String name , String [ ] params ) { return getValue ( name , params , true ) ; }
void test1 ( ) throws Throwable { SimpleXMLParserDocumentAttributeImpl simpleXMLParserDocumentAttributeImpl0 = new SimpleXMLParserDocumentAttributeImpl ( "" , "" ) ; String string0 = simpleXMLParserDocumentAttributeImpl0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return sName ; }
void test0 ( ) throws Throwable { ResourceUploaderFactoryImpl resourceUploaderFactoryImpl0 = ( ResourceUploaderFactoryImpl ) ResourceUploaderFactoryImpl . getSingleton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AzureusCore getSingleton ( ) throws AzureusCoreException { return ( AzureusCoreImpl . getSingleton ( ) ) ; }
void test1 ( ) throws Throwable { ResourceUploaderFactoryImpl resourceUploaderFactoryImpl0 = new ResourceUploaderFactoryImpl ( ) ; byte [ ] byteArray0 = new byte [ 1 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( int ) ( byte ) 1 , 1921 ) ; PushbackInputStream pushbackInputStream0 = new PushbackInputStream ( ( InputStream ) byteArrayInputStream0 , 1921 ) ; ResourceUploaderURLImpl resourceUploaderURLImpl0 = ( ResourceUploaderURLImpl ) resourceUploaderFactoryImpl0 . create ( ( URL ) null , ( InputStream ) pushbackInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MainWindow create ( AzureusCore core , Display display , IUIIntializer uiInitializer ) { if ( isImmediate ( ) ) { return ( new MainWindowImpl ( core , display , uiInitializer ) ) ; } else { return ( new MainWindowDelayStub ( core , display , uiInitializer ) ) ; } }
void test0 ( ) throws Throwable { ResourceUploaderURLImpl resourceUploaderURLImpl0 = new ResourceUploaderURLImpl ( ( URL ) null , ( InputStream ) null , "URL_ } " , "URL_ } " ) ; Object object0 = resourceUploaderURLImpl0 . getProperty ( "URL_ } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getProperty ( String name ) ; }
void test8 ( ) throws Throwable { File file0 = new File ( "8zI = ywRQteX" , "8zI = ywRQteX" ) ; URI uRI0 = file0 . toURI ( ) ; URL uRL0 = uRI0 . toURL ( ) ; ResourceUploaderURLImpl resourceUploaderURLImpl0 = new ResourceUploaderURLImpl ( uRL0 , ( InputStream ) null , ( String ) null , ( String ) null ) ; PasswordAuthentication passwordAuthentication0 = resourceUploaderURLImpl0 . getAuthentication ( ( String ) null , uRL0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PasswordAuthentication getAuthentication ( String realm , URL tracker ) { return ( null ) ; }
void test9 ( ) throws Throwable { File file0 = new File ( ( String ) null , "8zI = ywRQteX" ) ; URI uRI0 = file0 . toURI ( ) ; URL uRL0 = uRI0 . toURL ( ) ; ResourceUploaderURLImpl resourceUploaderURLImpl0 = new ResourceUploaderURLImpl ( uRL0 , ( InputStream ) null , "8zI = ywRQteX" , ( String ) null ) ; PasswordAuthentication passwordAuthentication0 = resourceUploaderURLImpl0 . getAuthentication ( ( String ) null , uRL0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PasswordAuthentication getAuthentication ( String realm , URL tracker ) { return ( null ) ; }
void test10 ( ) throws Throwable { ResourceUploaderURLImpl resourceUploaderURLImpl0 = new ResourceUploaderURLImpl ( ( URL ) null , ( InputStream ) null , "URL_ } " , "URL_ } " ) ; PasswordAuthentication passwordAuthentication0 = resourceUploaderURLImpl0 . getAuthentication ( "URL_ } " , ( URL ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PasswordAuthentication getAuthentication ( String realm , URL tracker ) { return ( null ) ; }
void test0 ( ) throws Throwable { Main main0 = new Main ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Main ( String args [ ] ) { try { / / this should not be necessary , but since it's let's play safe if ( Launcher . checkAndLaunch ( Main . class , args ) ) return ; / / This * has * to be done first as it sets system properties that are read and cached by Java COConfigurationManager . preInitialise ( ) ; Constructor constructor = null ; try { Class az3Class = Class . forName ( "com . aelitis . azureus . ui . swt . Initializer" ) ; constructor = az3Class . getConstructor ( new Class [ ] { AzureusCore . class , StartServer . class , String [ ] . class } ) ; } catch ( ClassNotFoundException cnfe ) { System . err . println ( cnfe . toString ( ) + "\nDid you include the azureus3 module ? " ) ; return ; } catch ( Throwable t ) { t . printStackTrace ( ) ; return ; } String mi_str = System . getProperty ( PR_MULTI_INSTANCE ) ; boolean mi = mi_str ! = null & & mi_str . equalsIgnoreCase ( "true" ) ; startServer = new StartServer ( ) ; boolean debugGUI = Boolean . getBoolean ( "debug" ) ; if ( mi | | debugGUI ) { / / create a MainWindow regardless to the server state AzureusCore core = AzureusCoreFactory . create ( ) ; constructor . newInstance ( new Object [ ] { core , startServer , args } ) ; return ; } if ( processParams ( args , startServer ) ) { AzureusCore core = AzureusCoreFactory . create ( ) ; startServer . pollForConnections ( core ) ; constructor . newInstance ( new Object [ ] { core , startServer , args } ) ; } } catch ( AzureusCoreException e ) { Logger . log ( new LogEvent ( LOGID , "Start failed" , e ) ) ; } catch ( Throwable t ) { t . printStackTrace ( ) ; } }
void test0 ( ) throws Throwable { UpdaterUtils updaterUtils0 = new UpdaterUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUpdaterPluginVersion ( ) { try { PluginInterface pi = AzureusCoreFactory . getSingleton ( ) . getPluginManager ( ) . getPluginInterfaceByID ( AZUPDATER_PLUGIN_ID , false ) ; if ( pi ! = null ) { String version = pi . getPluginVersion ( ) ; if ( version ! = null ) { return version ; } } } catch ( Throwable t ) { } return "0" ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { boolean boolean0 = UpdaterUtils . ensurePluginPresent ( "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LightWeightSeed get ( HashWrapper hw ) { ( this ) { return ( ( LightWeightSeed ) lws_map . get ( hw ) ) ; } }
