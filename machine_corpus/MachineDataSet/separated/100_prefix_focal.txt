void test0 ( ) throws Throwable { guiDriver guiDriver0 = new guiDriver ( ) ; JProgressBar jProgressBar0 = new JProgressBar ( ) ; guiDriver . createEventSetDriver guiDriver_createEventSetDriver0 = guiDriver0 . createEventSetDriver ( " | } @gRa^m" , ( JTabbedPane ) null , jProgressBar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String t = new String ( ) ; for ( int i = 0 ; i < events . size ( ) ; i + + ) t + = events . elementAt ( i ) + " , " ; return t ; }
void test1 ( ) throws Throwable { JTabbedPane jTabbedPane0 = new JTabbedPane ( ) ; guiDriver guiDriver0 = new guiDriver ( ) ; JProgressBar jProgressBar0 = new JProgressBar ( ) ; guiDriver . runStatisticalAnalysisDriver guiDriver_runStatisticalAnalysisDriver0 = guiDriver0 . runStatisticalAnalysisDriver ( ( String ) null , jTabbedPane0 , jProgressBar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String t = new String ( ) ; for ( int i = 0 ; i < events . size ( ) ; i + + ) t + = events . elementAt ( i ) + " , " ; return t ; }
void test0 ( ) throws Throwable { CharacterEventSet characterEventSet0 = new CharacterEventSet ( ) ; Document document0 = new Document ( "Aut$hor : " ) ; DocumentSet documentSet0 = new DocumentSet ( document0 ) ; Character character0 = Character . valueOf ( 'a' ) ; document0 . procText . add ( character0 ) ; EventSet eventSet0 = characterEventSet0 . createEventSet ( documentSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String t = new String ( ) ; for ( int i = 0 ; i < events . size ( ) ; i + + ) t + = events . elementAt ( i ) + " , " ; return t ; }
void test0 ( ) throws Throwable { NormalizeWhitespace normalizeWhitespace0 = new NormalizeWhitespace ( ) ; Vector < Character > vector0 = new Vector < Character > ( ) ; Character character0 = new Character ( 'J' ) ; vector0 . add ( character0 ) ; Vector < Character > vector1 = normalizeWhitespace0 . process ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String t = new String ( ) ; for ( int i = 0 ; i < events . size ( ) ; i + + ) t + = events . elementAt ( i ) + " , " ; return t ; }
void test1 ( ) throws Throwable { NormalizeWhitespace normalizeWhitespace0 = new NormalizeWhitespace ( ) ; Vector < Character > vector0 = new Vector < Character > ( ) ; vector0 . add ( ( Character ) ' ' ) ; vector0 . add ( ( Character ) ' ' ) ; Vector < Character > vector1 = normalizeWhitespace0 . process ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return events . size ( ) ; }
void test1 ( ) throws Throwable { LinkedList < Event > linkedList0 = new LinkedList < Event > ( ) ; EventSet eventSet0 = new EventSet ( ( List < Event > ) linkedList0 ) ; int int0 = eventSet0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return events . size ( ) ; }
void test2 ( ) throws Throwable { LinkedList < Event > linkedList0 = new LinkedList < Event > ( ) ; EventSet eventSet0 = new EventSet ( ( List < Event > ) linkedList0 ) ; eventSet0 . setAuthor ( "fwsxSbK ? F" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String t = new String ( ) ; for ( int i = 0 ; i < events . size ( ) ; i + + ) t + = events . elementAt ( i ) + " , " ; return t ; }
void test4 ( ) throws Throwable { LinkedList < Event > linkedList0 = new LinkedList < Event > ( ) ; EventSet eventSet0 = new EventSet ( ( List < Event > ) linkedList0 ) ; String string0 = eventSet0 . getAuthor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthor ( ) { return author ; }
void test5 ( ) throws Throwable { Vector < Event > vector0 = new Vector < Event > ( ) ; Event event0 = new Event ( "" ) ; vector0 . add ( event0 ) ; EventSet eventSet0 = new EventSet ( ( List < Event > ) vector0 ) ; String string0 = eventSet0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String t = new String ( ) ; for ( int i = 0 ; i < events . size ( ) ; i + + ) t + = events . elementAt ( i ) + " , " ; return t ; }
void test0 ( ) throws Throwable { jgaap jgaap0 = new jgaap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Xent xent0 = new Xent ( ) ; EventSet eventSet0 = new EventSet ( ) ; double double0 = xent0 . process ( eventSet0 , eventSet0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Vector < Character > process ( Vector < Character > procText ) { Vector < Character > processed = new Vector < Character > ( ) ; boolean spaceflag = false ; for ( int i = 0 ; i < procText . size ( ) ; i + + ) { if ( Character . isWhitespace ( procText . elementAt ( i ) ) & & ! spaceflag ) { processed . add ( new Character ( ' ' ) ) ; spaceflag = true ; } else if ( ! Character . isWhitespace ( procText . elementAt ( i ) ) ) { processed . add ( procText . elementAt ( i ) ) ; spaceflag = false ; } } return processed ; }
void test0 ( ) throws Throwable { CrossEntropyDriver crossEntropyDriver0 = new CrossEntropyDriver ( ) ; EventSet eventSet0 = new EventSet ( ) ; Vector < EventSet > vector0 = new Vector < EventSet > ( ) ; vector0 . add ( eventSet0 ) ; String string0 = crossEntropyDriver0 . analyze ( eventSet0 , vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String analyze ( EventSet unknown , Vector < EventSet > known ) { double min_distance = Double . MAX_VALUE ; String auth = null ; Xent xent ; for ( int i = 0 ; i < known . size ( ) ; i + + ) { xent = new Xent ( ) ; double current = xent . process ( unknown , known . elementAt ( i ) , 200 ) ; if ( current < min_distance ) { current = min_distance ; auth = known . elementAt ( i ) . getAuthor ( ) ; } } return auth ; }
void test0 ( ) throws Throwable { UnifyCase unifyCase0 = new UnifyCase ( ) ; Vector < Character > vector0 = new Vector < Character > ( ) ; Character character0 = new Character ( 'k' ) ; vector0 . add ( character0 ) ; Vector < Character > vector1 = unifyCase0 . process ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String t = new String ( ) ; for ( int i = 0 ; i < events . size ( ) ; i + + ) t + = events . elementAt ( i ) + " , " ; return t ; }
void test0 ( ) throws Throwable { StripHTML stripHTML0 = new StripHTML ( ) ; LinkedList < Character > linkedList0 = new LinkedList < Character > ( ) ; Character character0 = new Character ( ' > ' ) ; linkedList0 . add ( character0 ) ; Vector < Character > vector0 = new Vector < Character > ( ( Collection < ? extends Character > ) linkedList0 ) ; Vector < Character > vector1 = stripHTML0 . process ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String t = new String ( ) ; for ( int i = 0 ; i < events . size ( ) ; i + + ) t + = events . elementAt ( i ) + " , " ; return t ; }
void test1 ( ) throws Throwable { StripHTML stripHTML0 = new StripHTML ( ) ; LinkedList < Character > linkedList0 = new LinkedList < Character > ( ) ; Character character0 = new Character ( ' > ' ) ; Vector < Character > vector0 = new Vector < Character > ( ( Collection < ? extends Character > ) linkedList0 ) ; vector0 . add ( ( Character ) ' < ' ) ; vector0 . add ( character0 ) ; Vector < Character > vector1 = stripHTML0 . process ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return events . size ( ) ; }
void test0 ( ) throws Throwable { Event event0 = new Event ( ) ; int int0 = event0 . compareTo ( ( Object ) event0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object o ) { return this . data . compareTo ( ( ( Event ) o ) . data ) ; }
void test1 ( ) throws Throwable { Character character0 = Character . valueOf ( 'J' ) ; Event event0 = new Event ( character0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String t = new String ( ) ; for ( int i = 0 ; i < events . size ( ) ; i + + ) t + = events . elementAt ( i ) + " , " ; return t ; }
void test3 ( ) throws Throwable { Event event0 = new Event ( ) ; int int0 = event0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return data . hashCode ( ) ; }
void test4 ( ) throws Throwable { Event event0 = new Event ( ) ; String string0 = event0 . getEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEvent ( ) { return data ; }
void test1 ( ) throws Throwable { Document document0 = new Document ( "1zgY8R6UjDM" ) ; DocumentSet documentSet0 = new DocumentSet ( document0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int documentCount ( ) { return documents . size ( ) ; }
void test2 ( ) throws Throwable { DocumentSet documentSet0 = new DocumentSet ( ) ; int int0 = documentSet0 . documentCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int documentCount ( ) { return documents . size ( ) ; }
void test3 ( ) throws Throwable { DocumentSet documentSet0 = new DocumentSet ( ) ; Document document0 = new Document ( "1zgY8R6UjDM" ) ; documentSet0 . register ( document0 ) ; documentSet0 . characterFrequency ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int documentCount ( ) { return documents . size ( ) ; }
void test4 ( ) throws Throwable { DocumentSet documentSet0 = new DocumentSet ( ) ; documentSet0 . characterFrequency ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int documentCount ( ) { return documents . size ( ) ; }
void test5 ( ) throws Throwable { DocumentSet documentSet0 = new DocumentSet ( ) ; Document document0 = new Document ( "1zgY8R6UjDM" ) ; document0 . procText . add ( ( Character ) 'c' ) ; documentSet0 . register ( document0 ) ; documentSet0 . wordFrequency ( ) ; documentSet0 . mostCommon ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int documentCount ( ) { return documents . size ( ) ; }
void test6 ( ) throws Throwable { DocumentSet documentSet0 = new DocumentSet ( ) ; Document document0 = new Document ( "1zgY8R6UjDM" ) ; document0 . procText . add ( ( Character ) 'c' ) ; documentSet0 . register ( document0 ) ; documentSet0 . register ( document0 ) ; documentSet0 . wordFrequency ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int documentCount ( ) { return documents . size ( ) ; }
void test0 ( ) throws Throwable { Document document0 = new Document ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String t = new String ( ) ; for ( int i = 0 ; i < events . size ( ) ; i + + ) t + = events . elementAt ( i ) + " , " ; return t ; }
void test1 ( ) throws Throwable { Document document0 = new Document ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthor ( ) { return author ; }
void test2 ( ) throws Throwable { Document document0 = new Document ( "" , "" ) ; String string0 = document0 . getAuthor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthor ( ) { return author ; }
void test3 ( ) throws Throwable { Document document0 = new Document ( "" , "" ) ; String string0 = document0 . getFilename ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFilename ( ) { return filename ; }
void test4 ( ) throws Throwable { Document document0 = new Document ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return size ; }
void test5 ( ) throws Throwable { Document document0 = new Document ( "" , "" ) ; Vector < Character > vector0 = document0 . getProcessedText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return events . size ( ) ; }
void test6 ( ) throws Throwable { Document document0 = new Document ( "" , "" ) ; document0 . setAuthor ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAuthor ( ) { return author ; }
void test7 ( ) throws Throwable { Document document0 = new Document ( "" , "" ) ; document0 . procText . add ( ( Character ) 's' ) ; document0 . print ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return size ; }
void test8 ( ) throws Throwable { Document document0 = new Document ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String stringify ( ) { String t = new String ( ) ; for ( int i = 0 ; i < procText . size ( ) ; i + + ) t + = ( char ) procText . elementAt ( i ) ; return t ; }
