void test0 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; String string0 = startupOptions0 . getServer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabaseURI ( ) { StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( "jdbc : mysql : / / " ) ; if ( server = = null ) { buffer . append ( "localhost" ) ; } else { buffer . append ( server ) ; } if ( port ! = null ) { buffer . append ( " : " ) ; buffer . append ( port ) ; } buffer . append ( " / " ) ; buffer . append ( databaseName ) ; return buffer . toString ( ) ; }
void test1 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; int int0 = startupOptions0 . getMaximumNumberOfConnections ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabaseURI ( ) { StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( "jdbc : mysql : / / " ) ; if ( server = = null ) { buffer . append ( "localhost" ) ; } else { buffer . append ( server ) ; } if ( port ! = null ) { buffer . append ( " : " ) ; buffer . append ( port ) ; } buffer . append ( " / " ) ; buffer . append ( databaseName ) ; return buffer . toString ( ) ; }
void test2 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDbDriverName ( ) { return dbDriverName ; }
void test3 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; startupOptions0 . setDbPassword ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean useDemo ( ) { return useDemo ; }
void test4 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; String string0 = startupOptions0 . getDatabaseName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabaseURI ( ) { StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( "jdbc : mysql : / / " ) ; if ( server = = null ) { buffer . append ( "localhost" ) ; } else { buffer . append ( server ) ; } if ( port ! = null ) { buffer . append ( " : " ) ; buffer . append ( port ) ; } buffer . append ( " / " ) ; buffer . append ( databaseName ) ; return buffer . toString ( ) ; }
void test5 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; startupOptions0 . getDbUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaximumNumberOfConnections ( ) { return maximumNumberOfConnections ; }
void test6 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean useDemo ( ) { return useDemo ; }
void test7 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; startupOptions0 . setDatabaseName ( "G . g$" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaximumNumberOfConnections ( ) { return maximumNumberOfConnections ; }
void test8 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; startupOptions0 . getDbPassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaximumNumberOfConnections ( ) { return maximumNumberOfConnections ; }
void test9 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; startupOptions0 . getPort ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDbDriverName ( ) { return dbDriverName ; }
void test10 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; boolean boolean0 = startupOptions0 . useDemo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaximumNumberOfConnections ( ) { return maximumNumberOfConnections ; }
void test11 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; String string0 = startupOptions0 . getDbDriverName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaximumNumberOfConnections ( ) { return maximumNumberOfConnections ; }
void test12 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; startupOptions0 . setDbUser ( "_Z ( , VKw . l .  * Y , lCb" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabaseURI ( ) { StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( "jdbc : mysql : / / " ) ; if ( server = = null ) { buffer . append ( "localhost" ) ; } else { buffer . append ( server ) ; } if ( port ! = null ) { buffer . append ( " : " ) ; buffer . append ( port ) ; } buffer . append ( " / " ) ; buffer . append ( databaseName ) ; return buffer . toString ( ) ; }
void test13 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaximumNumberOfConnections ( ) { return maximumNumberOfConnections ; }
void test14 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; String [ ] stringArray0 = new String [ 9 ] ; stringArray0 [ 0 ] = " - dbName" ; stringArray0 [ 1 ] = "65 = gVx" ; stringArray0 [ 2 ] = " - dbPort" ; stringArray0 [ 3 ] = " - dbServer" ; stringArray0 [ 4 ] = " - dbServer" ; stringArray0 [ 5 ] = " - production" ; stringArray0 [ 6 ] = "e" ; stringArray0 [ 7 ] = "" ; stringArray0 [ 8 ] = "Y$W4\"btqV$j * pB^8" ; startupOptions0 . processCommandLineArguments ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabaseName ( ) { return databaseName ; }
void test17 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; startupOptions0 . setServer ( ( String ) null ) ; String string0 = startupOptions0 . getDatabaseURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabaseURI ( ) { StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( "jdbc : mysql : / / " ) ; if ( server = = null ) { buffer . append ( "localhost" ) ; } else { buffer . append ( server ) ; } if ( port ! = null ) { buffer . append ( " : " ) ; buffer . append ( port ) ; } buffer . append ( " / " ) ; buffer . append ( databaseName ) ; return buffer . toString ( ) ; }
void test18 ( ) throws Throwable { StartupOptions startupOptions0 = new StartupOptions ( ) ; startupOptions0 . setPort ( "jdbc : mysql : / / localhost / macaw" ) ; String string0 = startupOptions0 . getDatabaseURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabaseURI ( ) { StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( "jdbc : mysql : / / " ) ; if ( server = = null ) { buffer . append ( "localhost" ) ; } else { buffer . append ( server ) ; } if ( port ! = null ) { buffer . append ( " : " ) ; buffer . append ( port ) ; } buffer . append ( " / " ) ; buffer . append ( databaseName ) ; return buffer . toString ( ) ; }
void test0 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; StartupOptions startupOptions0 = sessionProperties0 . getStartupOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatabaseURI ( ) { StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( "jdbc : mysql : / / " ) ; if ( server = = null ) { buffer . append ( "localhost" ) ; } else { buffer . append ( server ) ; } if ( port ! = null ) { buffer . append ( " : " ) ; buffer . append ( port ) ; } buffer . append ( " / " ) ; buffer . append ( databaseName ) ; return buffer . toString ( ) ; }
void test1 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; Log log0 = ( Log ) sessionProperties0 . getProperty ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getProperty ( String propertyName ) { return propertyFromName . get ( propertyName ) ; }
void test2 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; UserInterfaceFactory userInterfaceFactory0 = sessionProperties0 . getUserInterfaceFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" UserInterfaceFactory getUserInterfaceFactory ( ) { return userInterfaceFactory ; }
void test3 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; Log log0 = sessionProperties0 . getLog ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Log getLog ( ) { return log ; }
void test0 ( ) throws Throwable { MacawErrorType macawErrorType0 = MacawErrorType . UNABLE_TO_CREATE_TABLES ; MacawError macawError0 = new MacawError ( macawErrorType0 , ( String ) null ) ; String string0 = macawError0 . getMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( ) { return message ; }
void test1 ( ) throws Throwable { MacawErrorType macawErrorType0 = MacawErrorType . UNABLE_TO_CREATE_TABLES ; MacawError macawError0 = new MacawError ( macawErrorType0 , ( String ) null ) ; macawError0 . setErrorType ( macawErrorType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( ) { return message ; }
void test2 ( ) throws Throwable { MacawErrorType macawErrorType0 = MacawErrorType . UNABLE_TO_CREATE_TABLES ; MacawError macawError0 = new MacawError ( macawErrorType0 , ( String ) null ) ; MacawErrorType macawErrorType1 = macawError0 . getErrorType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MacawErrorType getErrorType ( ) { return errorType ; }
void test3 ( ) throws Throwable { MacawErrorType macawErrorType0 = MacawErrorType . UNABLE_TO_CREATE_TABLES ; MacawError macawError0 = new MacawError ( macawErrorType0 , ( String ) null ) ; macawError0 . setMessage ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( ) { return message ; }
void test1 ( ) throws Throwable { ChangeEventType changeEventType0 = ChangeEventType . ALIAS_FILE_PATH ; MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( changeEventType0 , "u" , "u" ) ; macawChangeEvent0 . setChangeMessage ( "u" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChangedObjectIdentifier ( ) { return changedObjectIdentifier ; }
void test2 ( ) throws Throwable { MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( ) ; ChangeEventType changeEventType0 = ChangeEventType . VARIABLE ; macawChangeEvent0 . setChangeType ( changeEventType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChangedObjectIdentifier ( ) { return changedObjectIdentifier ; }
void test3 ( ) throws Throwable { MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( ) ; String string0 = macawChangeEvent0 . getChangeMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getChangeMessage ( ) { return changeMessage ; }
void test4 ( ) throws Throwable { MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( ) ; macawChangeEvent0 . setUserID ( "LIST_CHOICE" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChangedObjectIdentifier ( ) { return changedObjectIdentifier ; }
void test5 ( ) throws Throwable { MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( ) ; macawChangeEvent0 . setChangedObjectIdentifier ( 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChangedObjectIdentifier ( ) { return changedObjectIdentifier ; }
void test6 ( ) throws Throwable { MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( ) ; int int0 = macawChangeEvent0 . getChangedObjectIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChangedObjectIdentifier ( ) { return changedObjectIdentifier ; }
void test7 ( ) throws Throwable { MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( ) ; Date date0 = new Date ( 94L ) ; macawChangeEvent0 . setDate ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDate ( Date date ) { this . date = date ; }
void test8 ( ) throws Throwable { MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( ) ; String string0 = macawChangeEvent0 . getUserID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserID ( ) { return userID ; }
void test9 ( ) throws Throwable { MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( ) ; ChangeEventType changeEventType0 = macawChangeEvent0 . getChangeType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ChangeEventType getChangeType ( ) { return changeType ; }
void test10 ( ) throws Throwable { MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( ) ; Date date0 = macawChangeEvent0 . getDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getDate ( ) { return date ; }
void test11 ( ) throws Throwable { MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( ) ; macawChangeEvent0 . setVariableOwnerID ( 360 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getChangeMessage ( ) { return changeMessage ; }
void test0 ( ) throws Throwable { User user0 = new User ( "" , "" ) ; ArrayList < MacawChangeEvent > arrayList0 = ChangeEventGenerator . addUserChange ( user0 , user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test1 ( ) throws Throwable { ChangeEventGenerator changeEventGenerator0 = new ChangeEventGenerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ChangeEventGenerator ( ) { }
void test2 ( ) throws Throwable { User user0 = new User ( ) ; SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; ArrayList < MacawChangeEvent > arrayList0 = ChangeEventGenerator . addSupportingDocumentChange ( user0 , supportingDocument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > addSupportingDocumentChange ( User user , SupportingDocument supportingDocument ) { String changeMessage = MacawMessages . getMessage ( "supportingDocument . saveChanges . newRecord" , supportingDocument . getDisplayName ( ) ) ; MacawChangeEvent changeEvent = new MacawChangeEvent ( ChangeEventType . SUPPORTING_DOCUMENT , changeMessage , user . getUserID ( ) ) ; changeEvent . setChangedObjectIdentifier ( supportingDocument . getIdentifier ( ) ) ; ArrayList < MacawChangeEvent > changeEvents = new ArrayList < MacawChangeEvent > ( ) ; changeEvents . add ( changeEvent ) ; return changeEvents ; }
void test3 ( ) throws Throwable { User user0 = new User ( "" , "" ) ; RawVariable rawVariable0 = new RawVariable ( ) ; ArrayList < SupportingDocument > arrayList0 = rawVariable0 . getSupportingDocuments ( ) ; ArrayList < MacawChangeEvent > arrayList1 = ChangeEventGenerator . deleteSupportingDocumentsChange ( user0 , arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > deleteSupportingDocumentsChange ( User user , ArrayList < SupportingDocument > supportingDocumentsToDelete ) { String userID = user . getUserID ( ) ; ArrayList < MacawChangeEvent > changeEvents = new ArrayList < MacawChangeEvent > ( ) ; for ( SupportingDocument supportingDocument : supportingDocumentsToDelete ) { String changeMessage = MacawMessages . getMessage ( "supportingDocument . saveChanges . deleteRecord" , supportingDocument . getDisplayName ( ) ) ; MacawChangeEvent changeEvent = new MacawChangeEvent ( ChangeEventType . SUPPORTING_DOCUMENT , changeMessage , userID ) ; changeEvent . setChangedObjectIdentifier ( supportingDocument . getIdentifier ( ) ) ; changeEvents . add ( changeEvent ) ; } return changeEvents ; }
void test4 ( ) throws Throwable { User user0 = new User ( ) ; RawVariable rawVariable0 = new RawVariable ( ) ; ArrayList < OntologyTerm > arrayList0 = rawVariable0 . getOntologyTerms ( ) ; ArrayList < MacawChangeEvent > arrayList1 = ChangeEventGenerator . deleteOntologyTermsChange ( user0 , arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > deleteOntologyTermsChange ( User user , ArrayList < OntologyTerm > ontologyTerms ) { ArrayList < MacawChangeEvent > changeEvents = new ArrayList < MacawChangeEvent > ( ) ; String userID = user . getUserID ( ) ; for ( OntologyTerm currentOntologyTerm : ontologyTerms ) { String changeMessage = MacawMessages . getMessage ( "ontologyTerm . saveChanges . deleteRecord" , currentOntologyTerm . getDisplayName ( ) ) ; MacawChangeEvent changeEvent = new MacawChangeEvent ( ChangeEventType . ONTOLOGY_TERM , changeMessage , userID ) ; changeEvents . add ( changeEvent ) ; } return changeEvents ; }
void test5 ( ) throws Throwable { User user0 = new User ( "" , "" ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; MacawChangeEvent macawChangeEvent0 = ChangeEventGenerator . deleteVariableChanges ( user0 , ( Variable ) derivedVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserID ( ) { return userID ; }
void test6 ( ) throws Throwable { User user0 = new User ( ) ; RawVariable rawVariable0 = new RawVariable ( ) ; MacawChangeEvent macawChangeEvent0 = ChangeEventGenerator . deleteVariableChanges ( user0 , ( Variable ) rawVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getChangeMessage ( ) { return changeMessage ; }
void test7 ( ) throws Throwable { User user0 = new User ( "" , "" ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; ArrayList < MacawChangeEvent > arrayList0 = ChangeEventGenerator . addVariableChange ( user0 , ( Variable ) derivedVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > addVariableChange ( User user , Variable variable ) { ArrayList < MacawChangeEvent > changeEvents = new ArrayList < MacawChangeEvent > ( ) ; if ( variable instanceof RawVariable ) { String changeMessage = MacawMessages . getMessage ( "rawVariable . saveChanges . newRecord" , variable . getDisplayName ( ) ) ; MacawChangeEvent changeEvent = new MacawChangeEvent ( ChangeEventType . VARIABLE , changeMessage , user . getUserID ( ) ) ; changeEvent . setChangedObjectIdentifier ( variable . getIdentifier ( ) ) ; changeEvent . setVariableOwnerID ( variable . getIdentifier ( ) ) ; changeEvents . add ( changeEvent ) ; } else { String changeMessage = MacawMessages . getMessage ( "derivedVariable . saveChanges . newRecord" , variable . getDisplayName ( ) ) ; MacawChangeEvent changeEvent = new MacawChangeEvent ( ChangeEventType . VARIABLE , changeMessage , user . getUserID ( ) ) ; changeEvent . setChangedObjectIdentifier ( variable . getIdentifier ( ) ) ; changeEvent . setVariableOwnerID ( variable . getIdentifier ( ) ) ; changeEvents . add ( changeEvent ) ; } return changeEvents ; }
void test8 ( ) throws Throwable { User user0 = new User ( ) ; RawVariable rawVariable0 = new RawVariable ( ) ; ArrayList < MacawChangeEvent > arrayList0 = ChangeEventGenerator . addVariableChange ( user0 , ( Variable ) rawVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test1 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; ArrayList < SupportingDocument > arrayList0 = inMemorySupportingDocumentsManager0 . getAllSupportingDocuments ( user0 ) ; inMemorySupportingDocumentsManager0 . deleteSupportingDocuments ( user0 , arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return password ; }
void test2 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; int int0 = inMemorySupportingDocumentsManager0 . getSupportingDocumentIdentifier ( supportingDocument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSupportingDocumentIdentifier ( User user , SupportingDocument supportingDocument ) throws MacawException { return supportingDocumentsManager . getSupportingDocumentIdentifier ( supportingDocument ) ; }
void test0 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; OntologyTerm ontologyTerm0 = new OntologyTerm ( ) ; ontologyTerm0 . setTerm ( "HF" ) ; inMemoryOntologyTermManager0 . addOntologyTerm ( ( User ) null , ontologyTerm0 ) ; User user0 = new User ( ) ; inMemoryOntologyTermManager0 . updateOntologyTerm ( user0 , ontologyTerm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test2 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; OntologyTerm ontologyTerm0 = new OntologyTerm ( ) ; ontologyTerm0 . setTerm ( "UyABLE_TO_VALIDATE_USER" ) ; inMemoryOntologyTermManager0 . addOntologyTerm ( ( User ) null , ontologyTerm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void deleteOntologyTerms ( User user , ArrayList < OntologyTerm > ontologyTerms ) throws MacawException { checkValidUser ( user ) ; ontologyTermManager . deleteOntologyTerms ( user , ontologyTerms ) ; variableManager . deleteOntologyTermReferences ( ontologyTerms ) ; }
void test3 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; OntologyTerm ontologyTerm0 = new OntologyTerm ( ) ; ontologyTerm0 . setTerm ( "UyABLE_TO_VALIDATE_USER" ) ; inMemoryOntologyTermManager0 . addOntologyTerm ( ( User ) null , ontologyTerm0 ) ; int int0 = inMemoryOntologyTermManager0 . getOntologyTermIdentifier ( ontologyTerm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewRecord ( ) { if ( editingOperationType = = EditingOperationType . NEW ) { return true ; } return false ; }
void test4 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; OntologyTerm ontologyTerm0 = new OntologyTerm ( ) ; ontologyTerm0 . setTerm ( "HF" ) ; inMemoryOntologyTermManager0 . addOntologyTerm ( ( User ) null , ontologyTerm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOntologyTermIdentifier ( User user , OntologyTerm ontologyTerm ) throws MacawException { checkValidUser ( user ) ; return ontologyTermManager . getOntologyTermIdentifier ( ontologyTerm ) ; }
void test1 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; ChangeEventType changeEventType0 = ChangeEventType . LIST_CHOICE ; MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( changeEventType0 , "z ; ID" , "z ; ID" ) ; inMemoryChangeEventManager0 . registerChangeEvent ( macawChangeEvent0 ) ; User user0 = new User ( "z ; ID" , "z ; ID" ) ; SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; ArrayList < MacawChangeEvent > arrayList0 = inMemoryChangeEventManager0 . getChangeHistoryForSupportingDocument ( user0 , supportingDocument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > getChangeHistoryForSupportingDocument ( User user , SupportingDocument supportingDocument ) throws MacawException { checkValidUser ( user ) ; return changeEventManager . getChangeHistoryForSupportingDocument ( user , supportingDocument ) ; }
void test2 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; ChangeEventType changeEventType0 = ChangeEventType . VARIABLE ; MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( changeEventType0 , "\"" , "\"" ) ; inMemoryChangeEventManager0 . registerChangeEvent ( macawChangeEvent0 ) ; RawVariable rawVariable0 = new RawVariable ( ) ; User user0 = new User ( ) ; ArrayList < MacawChangeEvent > arrayList0 = inMemoryChangeEventManager0 . getChangeHistoryForVariable ( user0 , ( Variable ) rawVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > getChangeHistoryForVariable ( User user , Variable variable ) throws MacawException { checkValidUser ( user ) ; return changeEventManager . getChangeHistoryForVariable ( user , variable ) ; }
void test3 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; ChangeEventType changeEventType0 = ChangeEventType . VARIABLE ; MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( changeEventType0 , "\"" , "\"" ) ; inMemoryChangeEventManager0 . registerChangeEvent ( macawChangeEvent0 ) ; macawChangeEvent0 . setVariableOwnerID ( 1 ) ; RawVariable rawVariable0 = new RawVariable ( ) ; User user0 = new User ( ) ; ArrayList < MacawChangeEvent > arrayList0 = inMemoryChangeEventManager0 . getChangeHistoryForVariable ( user0 , ( Variable ) rawVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test4 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; User user0 = new User ( ) ; RawVariable rawVariable0 = new RawVariable ( ) ; MacawChangeEvent macawChangeEvent0 = Variable . detectChangesInAlternativeVariable ( user0 , ( Variable ) rawVariable0 , ( Variable ) rawVariable0 ) ; inMemoryChangeEventManager0 . registerChangeEvent ( macawChangeEvent0 ) ; ArrayList < MacawChangeEvent > arrayList0 = inMemoryChangeEventManager0 . getChangeHistoryForVariable ( user0 , ( Variable ) rawVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test5 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; ChangeEventType changeEventType0 = ChangeEventType . SUPPORTING_DOCUMENT ; MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( changeEventType0 , "BuXUBVwzH" , "BuXUBVwzH" ) ; inMemoryChangeEventManager0 . registerChangeEvent ( macawChangeEvent0 ) ; User user0 = new User ( "BuXUBVwzH" , "BuXUBVwzH" ) ; SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; ArrayList < MacawChangeEvent > arrayList0 = inMemoryChangeEventManager0 . getChangeHistoryForSupportingDocument ( user0 , supportingDocument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > getChangeHistoryForSupportingDocument ( User user , SupportingDocument supportingDocument ) throws MacawException { checkValidUser ( user ) ; return changeEventManager . getChangeHistoryForSupportingDocument ( user , supportingDocument ) ; }
void test6 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; ChangeEventType changeEventType0 = ChangeEventType . SUPPORTING_DOCUMENT ; MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( changeEventType0 , "BuXUBVwzH" , "BuXUBVwzH" ) ; inMemoryChangeEventManager0 . registerChangeEvent ( macawChangeEvent0 ) ; User user0 = new User ( "BuXUBVwzH" , "BuXUBVwzH" ) ; SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; macawChangeEvent0 . setChangedObjectIdentifier ( 1408 ) ; ArrayList < MacawChangeEvent > arrayList0 = inMemoryChangeEventManager0 . getChangeHistoryForSupportingDocument ( user0 , supportingDocument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test7 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; ChangeEventType changeEventType0 = ChangeEventType . VARIABLE ; MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( changeEventType0 , "\"" , "\"" ) ; inMemoryChangeEventManager0 . registerChangeEvent ( macawChangeEvent0 ) ; macawChangeEvent0 . setVariableOwnerID ( 1 ) ; RawVariable rawVariable0 = new RawVariable ( ) ; ArrayList < MacawChangeEvent > arrayList0 = inMemoryChangeEventManager0 . getChangeHistoryForValueLabels ( ( User ) null , ( Variable ) rawVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > getChangeHistoryForValueLabels ( User user , Variable variable ) throws MacawException { checkValidUser ( user ) ; return changeEventManager . getChangeHistoryForValueLabels ( user , variable ) ; }
void test8 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; User user0 = new User ( ) ; RawVariable rawVariable0 = new RawVariable ( ) ; MacawChangeEvent macawChangeEvent0 = Variable . detectChangesInAlternativeVariable ( user0 , ( Variable ) rawVariable0 , ( Variable ) rawVariable0 ) ; inMemoryChangeEventManager0 . registerChangeEvent ( macawChangeEvent0 ) ; ArrayList < MacawChangeEvent > arrayList0 = inMemoryChangeEventManager0 . getChangeHistoryForValueLabels ( user0 , ( Variable ) rawVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > getChangeHistoryForValueLabels ( User user , Variable variable ) throws MacawException { checkValidUser ( user ) ; return changeEventManager . getChangeHistoryForValueLabels ( user , variable ) ; }
void test9 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; ChangeEventType changeEventType0 = ChangeEventType . VARIABLE ; MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( changeEventType0 , "\"" , "\"" ) ; inMemoryChangeEventManager0 . registerChangeEvent ( macawChangeEvent0 ) ; User user0 = new User ( ) ; ArrayList < MacawChangeEvent > arrayList0 = inMemoryChangeEventManager0 . getChangeHistoryByUser ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > getChangeHistoryByUser ( User user ) throws MacawException { checkValidUser ( user ) ; return changeEventManager . getChangeHistoryByUser ( user ) ; }
void test10 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; ChangeEventType changeEventType0 = ChangeEventType . LIST_CHOICE ; MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( changeEventType0 , "z ; ID" , "z ; ID" ) ; inMemoryChangeEventManager0 . registerChangeEvent ( macawChangeEvent0 ) ; ArrayList < MacawChangeEvent > arrayList0 = inMemoryChangeEventManager0 . getChangeHistoryForListChoices ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > getChangeHistoryForListChoices ( User user ) throws MacawException { checkValidUser ( user ) ; return changeEventManager . getChangeHistoryForListChoices ( ) ; }
void test11 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; ChangeEventType changeEventType0 = ChangeEventType . SUPPORTING_DOCUMENT ; MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( changeEventType0 , "BuXUBVwzH" , "BuXUBVwzH" ) ; inMemoryChangeEventManager0 . registerChangeEvent ( macawChangeEvent0 ) ; ArrayList < MacawChangeEvent > arrayList0 = inMemoryChangeEventManager0 . getChangeHistoryForListChoices ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > getChangeHistoryForListChoices ( User user ) throws MacawException { checkValidUser ( user ) ; return changeEventManager . getChangeHistoryForListChoices ( ) ; }
void test12 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; ArrayList < MacawChangeEvent > arrayList0 = inMemoryChangeEventManager0 . getAllChanges ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > getChangeHistoryByUser ( User user ) throws MacawException { checkValidUser ( user ) ; return changeEventManager . getChangeHistoryByUser ( user ) ; }
void test1 ( ) throws Throwable { InMemoryOntologyTermFilter inMemoryOntologyTermFilter0 = new InMemoryOntologyTermFilter ( ) ; ArrayList < OntologyTerm > arrayList0 = new ArrayList < OntologyTerm > ( ) ; inMemoryOntologyTermFilter0 . setOntologyTerms ( arrayList0 ) ; User user0 = new User ( "V * " , "V * " ) ; OntologyTerm ontologyTerm0 = new OntologyTerm ( ) ; arrayList0 . add ( ontologyTerm0 ) ; arrayList0 . add ( ontologyTerm0 ) ; ArrayList < OntologyTerm > arrayList1 = inMemoryOntologyTermFilter0 . filterOntologyTerms ( user0 , "" , "V * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test2 ( ) throws Throwable { InMemoryOntologyTermFilter inMemoryOntologyTermFilter0 = new InMemoryOntologyTermFilter ( ) ; ArrayList < OntologyTerm > arrayList0 = new ArrayList < OntologyTerm > ( ) ; inMemoryOntologyTermFilter0 . setOntologyTerms ( arrayList0 ) ; User user0 = new User ( "V * " , "V * " ) ; OntologyTerm ontologyTerm0 = new OntologyTerm ( ) ; arrayList0 . add ( ontologyTerm0 ) ; OntologyTerm ontologyTerm1 = new OntologyTerm ( ) ; arrayList0 . add ( ontologyTerm1 ) ; ontologyTerm1 . setOntologyName ( "V * " ) ; ArrayList < OntologyTerm > arrayList1 = inMemoryOntologyTermFilter0 . filterOntologyTerms ( user0 , "" , "V * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < OntologyTerm > filterOntologyTerms ( User user , String termFilter , String descriptionFilter ) throws MacawException { ArrayList < OntologyTerm > results = new ArrayList < OntologyTerm > ( ) ; checkValidUser ( user ) ; ArrayList < OntologyTerm > allOntologyTerms = ontologyTermManager . getAllOntologyTerms ( user ) ; ontologyTermFilter . setOntologyTerms ( allOntologyTerms ) ; return ontologyTermFilter . filterOntologyTerms ( user , termFilter , descriptionFilter ) ; }
void test3 ( ) throws Throwable { InMemoryOntologyTermFilter inMemoryOntologyTermFilter0 = new InMemoryOntologyTermFilter ( ) ; ArrayList < OntologyTerm > arrayList0 = new ArrayList < OntologyTerm > ( ) ; inMemoryOntologyTermFilter0 . setOntologyTerms ( arrayList0 ) ; User user0 = new User ( "V * " , "V * " ) ; OntologyTerm ontologyTerm0 = new OntologyTerm ( ) ; arrayList0 . add ( ontologyTerm0 ) ; ArrayList < OntologyTerm > arrayList1 = inMemoryOntologyTermFilter0 . filterOntologyTerms ( user0 , "V * " , "rS } = T36U . < nB ? v" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test4 ( ) throws Throwable { InMemoryOntologyTermFilter inMemoryOntologyTermFilter0 = new InMemoryOntologyTermFilter ( ) ; ArrayList < OntologyTerm > arrayList0 = new ArrayList < OntologyTerm > ( ) ; inMemoryOntologyTermFilter0 . setOntologyTerms ( arrayList0 ) ; User user0 = new User ( "V * " , "V * " ) ; OntologyTerm ontologyTerm0 = new OntologyTerm ( ) ; arrayList0 . add ( ontologyTerm0 ) ; ArrayList < OntologyTerm > arrayList1 = inMemoryOntologyTermFilter0 . filterOntologyTerms ( user0 , "rS } = T36U . < nB ? v" , "V * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < OntologyTerm > filterOntologyTerms ( User user , String termFilter , String descriptionFilter ) throws MacawException { ArrayList < OntologyTerm > results = new ArrayList < OntologyTerm > ( ) ; checkValidUser ( user ) ; ArrayList < OntologyTerm > allOntologyTerms = ontologyTermManager . getAllOntologyTerms ( user ) ; ontologyTermFilter . setOntologyTerms ( allOntologyTerms ) ; return ontologyTermFilter . filterOntologyTerms ( user , termFilter , descriptionFilter ) ; }
void test5 ( ) throws Throwable { InMemoryOntologyTermFilter inMemoryOntologyTermFilter0 = new InMemoryOntologyTermFilter ( ) ; User user0 = new User ( ) ; ArrayList < OntologyTerm > arrayList0 = inMemoryOntologyTermFilter0 . filterOntologyTerms ( user0 , "X ; " , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test1 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; User user0 = new User ( ( String ) null , ( String ) null ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; ArrayList < MacawChangeEvent > arrayList0 = inMemoryChangeEventManager0 . getChangeHistoryForVariable ( user0 , ( Variable ) derivedVariable0 ) ; inMemoryListChoiceManager0 . registerChangeEvents ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test2 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager ( inMemoryChangeEventManager0 , inMemoryListChoiceManager0 , inMemoryOntologyTermManager0 , inMemorySupportingDocumentsManager0 ) ; ChangeEventType changeEventType0 = ChangeEventType . ALIAS_FILE_PATH ; MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( changeEventType0 , ( String ) null , "" ) ; inMemoryVariableManager0 . registerChangeEvent ( macawChangeEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ChangeEventType getChangeType ( ) { return changeType ; }
void test0 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( false ) ; User user0 = new User ( ) ; String string0 = demonstrationCurationService0 . getFilePathFromAlias ( user0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFilePathFromAlias ( User user , String currentAlias ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getFilePathFromAlias ( currentAlias ) ; }
void test1 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < SupportingDocument > getAllSupportingDocuments ( User user ) throws MacawException { checkValidUser ( user ) ; ArrayList < SupportingDocument > allSupportingDocuments = supportingDocumentsManager . getAllSupportingDocuments ( user ) ; return allSupportingDocuments ; }
void test4 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( true ) ; User user0 = new User ( ) ; ArrayList < OntologyTerm > arrayList0 = demonstrationCurationService0 . filterOntologyTerms ( user0 , "8" , "8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < OntologyTerm > filterOntologyTerms ( User user , String termFilter , String descriptionFilter ) throws MacawException { ArrayList < OntologyTerm > results = new ArrayList < OntologyTerm > ( ) ; checkValidUser ( user ) ; ArrayList < OntologyTerm > allOntologyTerms = ontologyTermManager . getAllOntologyTerms ( user ) ; ontologyTermFilter . setOntologyTerms ( allOntologyTerms ) ; return ontologyTermFilter . filterOntologyTerms ( user , termFilter , descriptionFilter ) ; }
void test6 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValueLabelIdentifier ( User user , Variable variable , ValueLabel valueLabel ) { return valueLabelManager . getValueLabelIdentifier ( variable , valueLabel ) ; }
void test9 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( true ) ; User user0 = new User ( ) ; ArrayList < AvailabilityState > arrayList0 = demonstrationCurationService0 . getAvailabilityStates ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test10 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test11 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( false ) ; User user0 = new User ( ) ; RawVariable rawVariable0 = new RawVariable ( ) ; ArrayList < MacawChangeEvent > arrayList0 = demonstrationCurationService0 . getChangeHistoryForVariable ( user0 , ( Variable ) rawVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > getChangeHistoryForVariable ( User user , Variable variable ) throws MacawException { checkValidUser ( user ) ; return changeEventManager . getChangeHistoryForVariable ( user , variable ) ; }
void test12 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test13 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( false ) ; User user0 = new User ( ) ; ArrayList < SupportingDocument > arrayList0 = demonstrationCurationService0 . filterSupportingDocuments ( user0 , "variable . year . label" , "variable . year . label" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < SupportingDocument > filterSupportingDocuments ( User user , String documentTitleFilter , String documentCodeFilter ) throws MacawException { checkValidUser ( user ) ; ArrayList < SupportingDocument > allSupportingDocuments = supportingDocumentsManager . getAllSupportingDocuments ( user ) ; supportingDocumentFilter . setSupportingDocuments ( allSupportingDocuments ) ; return supportingDocumentFilter . filterSupportingDocuments ( user , documentTitleFilter , documentCodeFilter ) ; }
void test21 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test22 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test26 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( false ) ; User user0 = new User ( ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; Variable variable0 = demonstrationCurationService0 . getOriginalVariable ( user0 , ( Variable ) derivedVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Variable getOriginalVariable ( User user , Variable variable ) throws MacawException { checkValidUser ( user ) ; return variableManager . getOriginalVariable ( variable ) ; }
void test27 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( false ) ; User user0 = new User ( ) ; ArrayList < MacawChangeEvent > arrayList0 = demonstrationCurationService0 . getChangeHistoryByUser ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > getChangeHistoryByUser ( User user ) throws MacawException { checkValidUser ( user ) ; return changeEventManager . getChangeHistoryByUser ( user ) ; }
void test32 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test37 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < VariableSummary > getSummaryDataForAllVariables ( User user ) throws MacawException { checkValidUser ( user ) ; return variableManager . getSummaryDataForAllVariables ( user ) ; }
void test38 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( true ) ; User user0 = new User ( ) ; ArrayList < Category > arrayList0 = demonstrationCurationService0 . getCategories ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < Category > getCategories ( User user ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getCategories ( user ) ; }
void test40 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( false ) ; User user0 = new User ( ( String ) null , "" ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; ArrayList < MacawChangeEvent > arrayList0 = demonstrationCurationService0 . getChangeHistoryForValueLabels ( user0 , ( Variable ) derivedVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > getChangeHistoryForValueLabels ( User user , Variable variable ) throws MacawException { checkValidUser ( user ) ; return changeEventManager . getChangeHistoryForValueLabels ( user , variable ) ; }
void test42 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDerivedVariableIdentifier ( User user , DerivedVariable derivedVariable ) throws MacawException { checkValidUser ( user ) ; return variableManager . getDerivedVariableIdentifier ( user , derivedVariable ) ; }
void test44 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( ) ; User user0 = new User ( "" , "" ) ; Variable variable0 = demonstrationCurationService0 . getVariable ( user0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Variable getVariable ( User user , String variableName ) throws MacawException { checkValidUser ( user ) ; return variableManager . getVariable ( user , variableName ) ; }
void test1 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; Log log0 = new Log ( ) ; User user0 = new User ( ) ; InMemoryUserManager inMemoryUserManager0 = new InMemoryUserManager ( inMemoryChangeEventManager0 , log0 , user0 ) ; inMemoryUserManager0 . validateUser ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPostCode ( ) { return postCode ; }
void test2 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; Log log0 = new Log ( ) ; User user0 = new User ( ) ; InMemoryUserManager inMemoryUserManager0 = new InMemoryUserManager ( inMemoryChangeEventManager0 , log0 , user0 ) ; ArrayList < User > arrayList0 = inMemoryUserManager0 . getUnverifiedUsers ( user0 ) ; inMemoryUserManager0 . deleteUsers ( user0 , arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserID ( ) { return userID ; }
void test4 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; Log log0 = new Log ( ) ; User user0 = new User ( "i28 { ao\u0001RUm ? ^#MP" , ( String ) null ) ; InMemoryUserManager inMemoryUserManager0 = new InMemoryUserManager ( inMemoryChangeEventManager0 , log0 , user0 ) ; ArrayList < User > arrayList0 = inMemoryUserManager0 . getUsers ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < User > getUsers ( User admin ) throws MacawException { return userManager . getUsers ( admin ) ; }
void test5 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; Log log0 = new Log ( ) ; User user0 = new User ( "i28 { ao\u0001RUm ? ^#MP" , ( String ) null ) ; InMemoryUserManager inMemoryUserManager0 = new InMemoryUserManager ( inMemoryChangeEventManager0 , log0 , user0 ) ; int int0 = inMemoryUserManager0 . getUserIdentifier ( ( User ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUserIdentifier ( User admin , User user ) throws MacawException { return userManager . getUserIdentifier ( user ) ; }
void test6 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; Log log0 = new Log ( ) ; User user0 = new User ( "i28 { ao\u0001RUm ? ^#MP" , ( String ) null ) ; InMemoryUserManager inMemoryUserManager0 = new InMemoryUserManager ( inMemoryChangeEventManager0 , log0 , user0 ) ; User user1 = inMemoryUserManager0 . getUserFromID ( user0 , "UNABLE_TO_CHECK_ONTOLOGY_TERM_DUPLICATES" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" User getUserFromID ( User user , String userID ) throws MacawException { User . checkValidUserIDField ( userID ) ; ArrayList < User > users = new ArrayList < User > ( ) ; users . addAll ( userFromIdentifier . values ( ) ) ; for ( User currentUser : users ) { String currentUserID = currentUser . getUserID ( ) ; if ( currentUserID . equals ( userID ) = = true ) { return currentUser ; } } return null ; }
void test0 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( "" , "" ) ; AliasFilePath aliasFilePath0 = new AliasFilePath ( ) ; inMemoryListChoiceManager0 . addAliasFilePath ( user0 , aliasFilePath0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < AliasFilePath > getAliasFilePaths ( User user ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getAliasFilePaths ( user ) ; }
void test5 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; Category category0 = new Category ( "lGQ , 3 . 6tjTB'H#@s } f" ) ; inMemoryListChoiceManager0 . addCategory ( user0 , category0 ) ; Category category1 = inMemoryListChoiceManager0 . getCategory ( "lGQ , 3 . 6tjTB'H#@s } f" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test6 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; Category category0 = new Category ( "lGQ , 36tjTB'H#@sQ } f" ) ; inMemoryListChoiceManager0 . addCategory ( user0 , category0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test7 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; Category category0 = inMemoryListChoiceManager0 . getCategory ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Category getCategory ( String categoryName ) throws MacawException { if ( ValidationUtility . isEmptyValue ( categoryName ) = = true ) { return null ; } SearchUtility searchUtility = new SearchUtility ( categoryName ) ; for ( Category currentCategory : categories ) { String currentCategoryName = currentCategory . getName ( ) ; if ( searchUtility . valueExactlyMatches ( currentCategoryName ) = = true ) { Category result = ( Category ) currentCategory . clone ( ) ; return result ; } } return null ; }
void test8 ( ) throws Throwable { InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( ( InMemoryChangeEventManager ) null ) ; Category category0 = inMemoryListChoiceManager0 . getCategory ( "$Q } 2p < '@ + 9e9" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Category getCategory ( String categoryName ) throws MacawException { if ( ValidationUtility . isEmptyValue ( categoryName ) = = true ) { return null ; } SearchUtility searchUtility = new SearchUtility ( categoryName ) ; for ( Category currentCategory : categories ) { String currentCategoryName = currentCategory . getName ( ) ; if ( searchUtility . valueExactlyMatches ( currentCategoryName ) = = true ) { Category result = ( Category ) currentCategory . clone ( ) ; return result ; } } return null ; }
void test10 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; Category category0 = new Category ( ( String ) null ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; int int0 = inMemoryListChoiceManager0 . getCategoryIdentifier ( category0 , ( Variable ) derivedVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCategoryIdentifier ( User user , Variable variable , Category category ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getCategoryIdentifier ( category , variable ) ; }
void test11 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; Category category0 = new Category ( "N : i7 ] gyRh" ) ; inMemoryListChoiceManager0 . addCategory ( user0 , category0 ) ; int int0 = inMemoryListChoiceManager0 . getCategoryIdentifier ( category0 , ( Variable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCategoryIdentifier ( User user , Variable variable , Category category ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getCategoryIdentifier ( category , variable ) ; }
void test12 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; CleaningState cleaningState0 = new CleaningState ( ( - 1155 ) , "lGQ , 36tjTB'H#@sQ } f" ) ; inMemoryListChoiceManager0 . addCleaningState ( user0 , cleaningState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test14 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; CleaningState cleaningState0 = new CleaningState ( ( - 1155 ) , "lGQ , 36tjTB'H#@sQ } f" ) ; inMemoryListChoiceManager0 . addCleaningState ( user0 , cleaningState0 ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; int int0 = inMemoryListChoiceManager0 . getCleaningStateIdentifier ( cleaningState0 , ( Variable ) derivedVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCleaningStateIdentifier ( User user , Variable variable , CleaningState cleaningState ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getCleaningStateIdentifier ( cleaningState , variable ) ; }
void test16 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; AvailabilityState availabilityState0 = new AvailabilityState ( "user . password . saveChanges" ) ; inMemoryListChoiceManager0 . addAvailabilityState ( user0 , availabilityState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < AvailabilityState > getAvailabilityStates ( User user ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getAvailabilityStates ( user ) ; }
void test18 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; AvailabilityState availabilityState0 = new AvailabilityState ( "user . password . saveChanges" ) ; inMemoryListChoiceManager0 . addAvailabilityState ( user0 , availabilityState0 ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; int int0 = inMemoryListChoiceManager0 . getAvailabilityStateIdentifier ( availabilityState0 , ( Variable ) derivedVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAvailabilityStateIdentifier ( User user , Variable variable , AvailabilityState availabilityState ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getAvailabilityStateIdentifier ( availabilityState , variable ) ; }
void test20 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( "" , "" ) ; ArrayList < AliasFilePath > arrayList0 = inMemoryListChoiceManager0 . getAliasFilePaths ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < AliasFilePath > getAliasFilePaths ( User user ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getAliasFilePaths ( user ) ; }
void test21 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( "W@3 + + o & a" , "W@3 + + o & a" ) ; AliasFilePath aliasFilePath0 = new AliasFilePath ( "W@3 + + o & a" , "W@3 + + o & a" ) ; inMemoryListChoiceManager0 . addAliasFilePath ( user0 , aliasFilePath0 ) ; AliasFilePath aliasFilePath1 = inMemoryListChoiceManager0 . getAliasFilePath ( user0 , "W@3 + + o & a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AliasFilePath getAliasFilePath ( User user , String alias ) throws MacawException { SearchUtility searchUtility = new SearchUtility ( alias ) ; for ( AliasFilePath originalAliasFilePath : aliasFilePaths ) { String currentAliasName = originalAliasFilePath . getAlias ( ) ; if ( searchUtility . valueExactlyMatches ( currentAliasName ) = = true ) { return ( ( AliasFilePath ) originalAliasFilePath . clone ( ) ) ; } } return null ; }
void test22 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; AliasFilePath aliasFilePath0 = new AliasFilePath ( ) ; inMemoryListChoiceManager0 . addAliasFilePath ( user0 , aliasFilePath0 ) ; AliasFilePath aliasFilePath1 = inMemoryListChoiceManager0 . getAliasFilePath ( user0 , "lGQ , 36tjTB'H#@sQ } f" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AliasFilePath getAliasFilePath ( User user , String alias ) throws MacawException { SearchUtility searchUtility = new SearchUtility ( alias ) ; for ( AliasFilePath originalAliasFilePath : aliasFilePaths ) { String currentAliasName = originalAliasFilePath . getAlias ( ) ; if ( searchUtility . valueExactlyMatches ( currentAliasName ) = = true ) { return ( ( AliasFilePath ) originalAliasFilePath . clone ( ) ) ; } } return null ; }
void test23 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; AliasFilePath aliasFilePath0 = new AliasFilePath ( "N : i7 ] gyRh" , "N : i7 ] gyRh" ) ; inMemoryListChoiceManager0 . addAliasFilePath ( user0 , aliasFilePath0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < AliasFilePath > getAliasFilePathsMatchingName ( User user , String aliasExpression ) throws MacawException { SearchUtility searchUtility = new SearchUtility ( ) ; searchUtility . setDefaultSearchPattern ( aliasExpression ) ; ArrayList < AliasFilePath > results = new ArrayList < AliasFilePath > ( ) ; for ( AliasFilePath originalAliasFilePath : aliasFilePaths ) { String currentAliasName = originalAliasFilePath . getAlias ( ) ; if ( searchUtility . valueContainsPattern ( currentAliasName ) = = true ) { AliasFilePath result = ( AliasFilePath ) originalAliasFilePath . clone ( ) ; results . add ( result ) ; } } return results ; }
void test25 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; AliasFilePath aliasFilePath0 = new AliasFilePath ( "N : i7 ] gyRh" , "N : i7 ] gyRh" ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; inMemoryListChoiceManager0 . addAliasFilePath ( user0 , aliasFilePath0 ) ; int int0 = inMemoryListChoiceManager0 . getAliasFilePathIdentifier ( aliasFilePath0 , ( Variable ) derivedVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getAliasFilePathIdentifier ( User user , Variable variable , AliasFilePath aliasFilePath ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getAliasFilePathIdentifier ( aliasFilePath , variable ) ; }
void test26 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( "" , "" ) ; AliasFilePath aliasFilePath0 = new AliasFilePath ( ) ; inMemoryListChoiceManager0 . addAliasFilePath ( user0 , aliasFilePath0 ) ; String string0 = inMemoryListChoiceManager0 . getFilePathFromAlias ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFilePathFromAlias ( User user , String currentAlias ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getFilePathFromAlias ( currentAlias ) ; }
void test27 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( " & u#94 [ S#yc , `H\"" , " & u#94 [ S#yc , `H\"" ) ; AliasFilePath aliasFilePath0 = new AliasFilePath ( ) ; inMemoryListChoiceManager0 . addAliasFilePath ( user0 , aliasFilePath0 ) ; String string0 = inMemoryListChoiceManager0 . getFilePathFromAlias ( " & u#94 [ S#yc , `H\"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFilePathFromAlias ( User user , String currentAlias ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getFilePathFromAlias ( currentAlias ) ; }
void test29 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; CleaningState cleaningState0 = new CleaningState ( ( - 808 ) , "66gBPoow" ) ; inMemoryListChoiceManager0 . addCleaningState ( user0 , cleaningState0 ) ; CleaningState cleaningState1 = new CleaningState ( ( - 808 ) , "Xin" ) ; inMemoryListChoiceManager0 . addCleaningState ( user0 , cleaningState1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test1 ( ) throws Throwable { InMemorySupportingDocumentFilter inMemorySupportingDocumentFilter0 = new InMemorySupportingDocumentFilter ( ) ; User user0 = new User ( "HU8p^V } W" , "HU8p^V } W" ) ; ArrayList < SupportingDocument > arrayList0 = new ArrayList < SupportingDocument > ( ) ; SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; arrayList0 . add ( supportingDocument0 ) ; inMemorySupportingDocumentFilter0 . setSupportingDocuments ( arrayList0 ) ; arrayList0 . add ( supportingDocument0 ) ; ArrayList < SupportingDocument > arrayList1 = inMemorySupportingDocumentFilter0 . filterSupportingDocuments ( user0 , " - vCAysP1 & | " , " - vCAysP1 & | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < SupportingDocument > filterSupportingDocuments ( User user , String documentTitleFilter , String documentCodeFilter ) throws MacawException { checkValidUser ( user ) ; ArrayList < SupportingDocument > allSupportingDocuments = supportingDocumentsManager . getAllSupportingDocuments ( user ) ; supportingDocumentFilter . setSupportingDocuments ( allSupportingDocuments ) ; return supportingDocumentFilter . filterSupportingDocuments ( user , documentTitleFilter , documentCodeFilter ) ; }
void test2 ( ) throws Throwable { InMemorySupportingDocumentFilter inMemorySupportingDocumentFilter0 = new InMemorySupportingDocumentFilter ( ) ; User user0 = new User ( "HU8p^V } W" , "HU8p^V } W" ) ; ArrayList < SupportingDocument > arrayList0 = new ArrayList < SupportingDocument > ( ) ; SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; arrayList0 . add ( supportingDocument0 ) ; inMemorySupportingDocumentFilter0 . setSupportingDocuments ( arrayList0 ) ; ArrayList < SupportingDocument > arrayList1 = inMemorySupportingDocumentFilter0 . filterSupportingDocuments ( user0 , "HU8p^V } W" , "HU8p^V } W" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < SupportingDocument > filterSupportingDocuments ( User user , String documentTitleFilter , String documentCodeFilter ) throws MacawException { checkValidUser ( user ) ; ArrayList < SupportingDocument > allSupportingDocuments = supportingDocumentsManager . getAllSupportingDocuments ( user ) ; supportingDocumentFilter . setSupportingDocuments ( allSupportingDocuments ) ; return supportingDocumentFilter . filterSupportingDocuments ( user , documentTitleFilter , documentCodeFilter ) ; }
void test3 ( ) throws Throwable { InMemorySupportingDocumentFilter inMemorySupportingDocumentFilter0 = new InMemorySupportingDocumentFilter ( ) ; User user0 = new User ( "HU8p^V } W" , "HU8p^V } W" ) ; ArrayList < SupportingDocument > arrayList0 = inMemorySupportingDocumentFilter0 . filterSupportingDocuments ( user0 , " - vCAysP1 & | " , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < SupportingDocument > filterSupportingDocuments ( User user , String documentTitleFilter , String documentCodeFilter ) throws MacawException { checkValidUser ( user ) ; ArrayList < SupportingDocument > allSupportingDocuments = supportingDocumentsManager . getAllSupportingDocuments ( user ) ; supportingDocumentFilter . setSupportingDocuments ( allSupportingDocuments ) ; return supportingDocumentFilter . filterSupportingDocuments ( user , documentTitleFilter , documentCodeFilter ) ; }
void test4 ( ) throws Throwable { InMemorySupportingDocumentFilter inMemorySupportingDocumentFilter0 = new InMemorySupportingDocumentFilter ( ) ; User user0 = new User ( "HU8p^V } W" , "HU8p^V } W" ) ; ArrayList < SupportingDocument > arrayList0 = new ArrayList < SupportingDocument > ( ) ; SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; arrayList0 . add ( supportingDocument0 ) ; inMemorySupportingDocumentFilter0 . setSupportingDocuments ( arrayList0 ) ; ArrayList < SupportingDocument > arrayList1 = inMemorySupportingDocumentFilter0 . filterSupportingDocuments ( user0 , ( String ) null , "HU8p^V } W" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test0 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryValueLabelManager inMemoryValueLabelManager0 = new InMemoryValueLabelManager ( inMemoryChangeEventManager0 ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; User user0 = new User ( ) ; ArrayList < ValueLabel > arrayList0 = new ArrayList < ValueLabel > ( ) ; ValueLabel valueLabel0 = new ValueLabel ( ) ; arrayList0 . add ( valueLabel0 ) ; inMemoryValueLabelManager0 . addValueLabels ( user0 , ( Variable ) derivedVariable0 , arrayList0 ) ; inMemoryValueLabelManager0 . deleteValueLabels ( user0 , ( Variable ) derivedVariable0 , arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void deleteValueLabels ( User user , Variable variable , ArrayList < ValueLabel > valueLabels ) throws MacawException { checkValidUser ( user ) ; checkVariableExists ( variable ) ; Variable originalVariable = variableManager . getOriginalVariable ( variable ) ; valueLabelManager . deleteValueLabels ( user , originalVariable , valueLabels ) ; }
void test2 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryValueLabelManager inMemoryValueLabelManager0 = new InMemoryValueLabelManager ( inMemoryChangeEventManager0 ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; User user0 = new User ( ) ; ArrayList < ValueLabel > arrayList0 = new ArrayList < ValueLabel > ( ) ; ValueLabel valueLabel0 = new ValueLabel ( ) ; arrayList0 . add ( valueLabel0 ) ; inMemoryValueLabelManager0 . addValueLabels ( user0 , ( Variable ) derivedVariable0 , arrayList0 ) ; ArrayList < ValueLabel > arrayList1 = inMemoryValueLabelManager0 . getValueLabels ( user0 , ( Variable ) derivedVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < ValueLabel > getValueLabels ( User user , Variable variable ) throws MacawException { checkValidUser ( user ) ; Variable originalVariable = variableManager . getOriginalVariable ( variable ) ; return valueLabelManager . getValueLabels ( user , originalVariable ) ; }
void test4 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryValueLabelManager inMemoryValueLabelManager0 = new InMemoryValueLabelManager ( inMemoryChangeEventManager0 ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; User user0 = new User ( ) ; ArrayList < ValueLabel > arrayList0 = new ArrayList < ValueLabel > ( ) ; ValueLabel valueLabel0 = new ValueLabel ( ) ; arrayList0 . add ( valueLabel0 ) ; inMemoryValueLabelManager0 . addValueLabels ( user0 , ( Variable ) derivedVariable0 , arrayList0 ) ; inMemoryValueLabelManager0 . updateValueLabels ( user0 , ( Variable ) derivedVariable0 , arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCoded ( ) { return isCoded ; }
void test5 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryValueLabelManager inMemoryValueLabelManager0 = new InMemoryValueLabelManager ( inMemoryChangeEventManager0 ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; ValueLabel valueLabel0 = new ValueLabel ( ) ; int int0 = inMemoryValueLabelManager0 . getValueLabelIdentifier ( ( Variable ) derivedVariable0 , valueLabel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getValueLabelIdentifier ( User user , Variable variable , ValueLabel valueLabel ) { return valueLabelManager . getValueLabelIdentifier ( variable , valueLabel ) ; }
void test6 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryValueLabelManager inMemoryValueLabelManager0 = new InMemoryValueLabelManager ( inMemoryChangeEventManager0 ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; User user0 = new User ( ) ; ArrayList < ValueLabel > arrayList0 = new ArrayList < ValueLabel > ( ) ; ValueLabel valueLabel0 = new ValueLabel ( ) ; arrayList0 . add ( valueLabel0 ) ; inMemoryValueLabelManager0 . addValueLabels ( user0 , ( Variable ) derivedVariable0 , arrayList0 ) ; int int0 = inMemoryValueLabelManager0 . getValueLabelIdentifier ( ( Variable ) derivedVariable0 , valueLabel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEditingExistingRecord ( ) { if ( editingOperationType = = EditingOperationType . EDIT ) { return true ; } return false ; }
void test0 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 ) ; User user0 = new User ( " ( hTAOt4 [ Q" , " ( hTAOt4 [ Q" ) ; ArrayList < AvailabilityState > arrayList0 = demonstrationRetrievalService0 . getAvailabilityStates ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test3 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 ) ; ArrayList < User > arrayList0 = demonstrationRetrievalService0 . getUsers ( ( User ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < User > getUsers ( User admin ) throws MacawException { return userManager . getUsers ( admin ) ; }
void test4 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 ) ; User user0 = new User ( ) ; User user1 = demonstrationRetrievalService0 . getUserFromID ( user0 , "_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" User getUserFromID ( User user , String userID ) throws MacawException { User . checkValidUserIDField ( userID ) ; ArrayList < User > users = new ArrayList < User > ( ) ; users . addAll ( userFromIdentifier . values ( ) ) ; for ( User currentUser : users ) { String currentUserID = currentUser . getUserID ( ) ; if ( currentUserID . equals ( userID ) = = true ) { return currentUser ; } } return null ; }
void test7 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 ) ; User user0 = new User ( " / NUo / p4" , " / NUo / p4" ) ; ArrayList < Category > arrayList0 = demonstrationRetrievalService0 . getCategories ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < Category > getCategories ( User user ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getCategories ( user ) ; }
void test8 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 ) ; ArrayList < AliasFilePath > arrayList0 = demonstrationRetrievalService0 . getAliasFilePaths ( ( User ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < AliasFilePath > getAliasFilePaths ( User user ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getAliasFilePaths ( user ) ; }
void test9 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 ) ; User user0 = new User ( ) ; User user1 = demonstrationRetrievalService0 . getUserFromEmail ( user0 , "_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" User getUserFromEmail ( User user , String email ) throws MacawException { User . checkValidEmail ( email ) ; SearchUtility searchUtility = new SearchUtility ( email ) ; ArrayList < User > users = new ArrayList < User > ( ) ; users . addAll ( userFromIdentifier . values ( ) ) ; for ( User currentUser : users ) { String currentEmail = currentUser . getEmail ( ) ; if ( searchUtility . valueExactlyMatches ( currentEmail ) = = true ) { return currentUser ; } } return null ; }
void test10 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 ) ; String [ ] stringArray0 = demonstrationRetrievalService0 . getVariableNames ( ( User ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getVariableNames ( User user ) throws MacawException { ArrayList < String > variableNames = new ArrayList < String > ( ) ; for ( Variable currentVariable : variables ) { variableNames . add ( currentVariable . getName ( ) ) ; } String [ ] results = variableNames . toArray ( new String [ 0 ] ) ; return results ; }
void test11 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 ) ; User user0 = new User ( ) ; ArrayList < AliasFilePath > arrayList0 = demonstrationRetrievalService0 . getAliasFilePathsMatchingName ( user0 , " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test12 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 ) ; Variable variable0 = demonstrationRetrievalService0 . getVariable ( ( User ) null , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Variable getVariable ( User user , String variableName ) throws MacawException { checkValidUser ( user ) ; return variableManager . getVariable ( user , variableName ) ; }
void test13 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 ) ; User user0 = new User ( " / NUo / p4" , " / NUo / p4" ) ; ArrayList < VariableSummary > arrayList0 = demonstrationRetrievalService0 . getVariableSummariesForCategory ( user0 , " / NUo / p4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < VariableSummary > getVariableSummariesForCategory ( User user , String categoryName ) throws MacawException { SearchUtility searchUtility = new SearchUtility ( categoryName ) ; ArrayList < VariableSummary > variableSummaries = new ArrayList < VariableSummary > ( ) ; for ( Variable currentVariable : variables ) { String currentVariableCategory = currentVariable . getCategory ( ) ; if ( searchUtility . valueExactlyMatches ( currentVariableCategory ) = = true ) { variableSummaries . add ( currentVariable . createVariableSummary ( ) ) ; } } return variableSummaries ; }
void test14 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 ) ; User user0 = new User ( ) ; ArrayList < Category > arrayList0 = demonstrationRetrievalService0 . getCategoriesForVariable ( user0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < Category > getCategoriesForVariable ( User user , String variableName ) throws MacawException { ArrayList < Category > categories = new ArrayList < Category > ( ) ; Variable variable = getVariable ( user , variableName ) ; if ( variable ! = null ) { String categoryName = variable . getCategory ( ) ; Category category = listChoiceManager . getCategory ( categoryName ) ; if ( category ! = null ) { categories . add ( category ) ; } } return categories ; }
void test16 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 ) ; User user0 = new User ( ) ; ArrayList < CleaningState > arrayList0 = demonstrationRetrievalService0 . getCleaningStates ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test0 ( ) throws Throwable { InMemoryVariableFilter inMemoryVariableFilter0 = new InMemoryVariableFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < VariableSummary > filterVariableSummaries ( User user , String searchText , String year , String category , VariableTypeFilter variableTypeFilter ) throws MacawException { checkValidUser ( user ) ; InMemoryVariableFilter inMemoryVariableFilter = new InMemoryVariableFilter ( ) ; ArrayList < Variable > variables = variableManager . getOriginalVariables ( user ) ; inMemoryVariableFilter . setVariables ( variables ) ; ArrayList < VariableSummary > results = inMemoryVariableFilter . filterVariableSummaries ( user , searchText , year , category , variableTypeFilter ) ; return results ; }
void test1 ( ) throws Throwable { InMemoryVariableFilter inMemoryVariableFilter0 = new InMemoryVariableFilter ( ) ; User user0 = new User ( ) ; VariableTypeFilter variableTypeFilter0 = VariableTypeFilter . RAW_AND_DERIVED ; ArrayList < VariableSummary > arrayList0 = inMemoryVariableFilter0 . filterVariableSummaries ( user0 , "All" , "All" , "All" , variableTypeFilter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < VariableSummary > filterVariableSummaries ( User user , String searchText , String year , String category , VariableTypeFilter variableTypeFilter ) throws MacawException { checkValidUser ( user ) ; InMemoryVariableFilter inMemoryVariableFilter = new InMemoryVariableFilter ( ) ; ArrayList < Variable > variables = variableManager . getOriginalVariables ( user ) ; inMemoryVariableFilter . setVariables ( variables ) ; ArrayList < VariableSummary > results = inMemoryVariableFilter . filterVariableSummaries ( user , searchText , year , category , variableTypeFilter ) ; return results ; }
void test2 ( ) throws Throwable { InMemoryVariableFilter inMemoryVariableFilter0 = new InMemoryVariableFilter ( ) ; ArrayList < Variable > arrayList0 = new ArrayList < Variable > ( ) ; inMemoryVariableFilter0 . setVariables ( arrayList0 ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; arrayList0 . add ( ( Variable ) derivedVariable0 ) ; User user0 = new User ( ) ; VariableTypeFilter variableTypeFilter0 = VariableTypeFilter . RAW ; ArrayList < VariableSummary > arrayList1 = inMemoryVariableFilter0 . filterVariableSummaries ( user0 , "^4H" , "^4H" , "^4H" , variableTypeFilter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < VariableSummary > filterVariableSummaries ( User user , String searchText , String year , String category , VariableTypeFilter variableTypeFilter ) throws MacawException { checkValidUser ( user ) ; InMemoryVariableFilter inMemoryVariableFilter = new InMemoryVariableFilter ( ) ; ArrayList < Variable > variables = variableManager . getOriginalVariables ( user ) ; inMemoryVariableFilter . setVariables ( variables ) ; ArrayList < VariableSummary > results = inMemoryVariableFilter . filterVariableSummaries ( user , searchText , year , category , variableTypeFilter ) ; return results ; }
void test3 ( ) throws Throwable { InMemoryVariableFilter inMemoryVariableFilter0 = new InMemoryVariableFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < VariableSummary > filterVariableSummaries ( User user , String searchText , String year , String category , VariableTypeFilter variableTypeFilter ) throws MacawException { checkValidUser ( user ) ; InMemoryVariableFilter inMemoryVariableFilter = new InMemoryVariableFilter ( ) ; ArrayList < Variable > variables = variableManager . getOriginalVariables ( user ) ; inMemoryVariableFilter . setVariables ( variables ) ; ArrayList < VariableSummary > results = inMemoryVariableFilter . filterVariableSummaries ( user , searchText , year , category , variableTypeFilter ) ; return results ; }
void test4 ( ) throws Throwable { InMemoryVariableFilter inMemoryVariableFilter0 = new InMemoryVariableFilter ( ) ; ArrayList < Variable > arrayList0 = new ArrayList < Variable > ( ) ; inMemoryVariableFilter0 . setVariables ( arrayList0 ) ; RawVariable rawVariable0 = new RawVariable ( ) ; arrayList0 . add ( ( Variable ) rawVariable0 ) ; User user0 = new User ( ) ; VariableTypeFilter variableTypeFilter0 = VariableTypeFilter . DERIVED ; ArrayList < VariableSummary > arrayList1 = inMemoryVariableFilter0 . filterVariableSummaries ( user0 , "^4H" , "" , "" , variableTypeFilter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test5 ( ) throws Throwable { InMemoryVariableFilter inMemoryVariableFilter0 = new InMemoryVariableFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test6 ( ) throws Throwable { InMemoryVariableFilter inMemoryVariableFilter0 = new InMemoryVariableFilter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < VariableSummary > filterVariableSummaries ( User user , String searchText , String year , String category , VariableTypeFilter variableTypeFilter ) throws MacawException { checkValidUser ( user ) ; InMemoryVariableFilter inMemoryVariableFilter = new InMemoryVariableFilter ( ) ; ArrayList < Variable > variables = variableManager . getOriginalVariables ( user ) ; inMemoryVariableFilter . setVariables ( variables ) ; ArrayList < VariableSummary > results = inMemoryVariableFilter . filterVariableSummaries ( user , searchText , year , category , variableTypeFilter ) ; return results ; }
void test0 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager ( inMemoryChangeEventManager0 , inMemoryListChoiceManager0 , inMemoryOntologyTermManager0 , inMemorySupportingDocumentsManager0 ) ; ArrayList < Variable > arrayList0 = inMemoryVariableManager0 . getOriginalVariables ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < Variable > getVariables ( User user ) throws MacawException { ArrayList < Variable > cloneVariables = new ArrayList < Variable > ( ) ; for ( Variable currentVariable : variables ) { Variable cloneVariable = ( Variable ) currentVariable . clone ( ) ; cloneVariables . add ( cloneVariable ) ; } return cloneVariables ; }
void test4 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager ( inMemoryChangeEventManager0 , inMemoryListChoiceManager0 , inMemoryOntologyTermManager0 , inMemorySupportingDocumentsManager0 ) ; ArrayList < Variable > arrayList0 = inMemoryVariableManager0 . getVariables ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < Variable > getVariables ( User user ) throws MacawException { ArrayList < Variable > cloneVariables = new ArrayList < Variable > ( ) ; for ( Variable currentVariable : variables ) { Variable cloneVariable = ( Variable ) currentVariable . clone ( ) ; cloneVariables . add ( cloneVariable ) ; } return cloneVariables ; }
void test5 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager ( inMemoryChangeEventManager0 , inMemoryListChoiceManager0 , inMemoryOntologyTermManager0 , inMemorySupportingDocumentsManager0 ) ; ArrayList < RawVariable > arrayList0 = new ArrayList < RawVariable > ( ) ; inMemoryVariableManager0 . deleteRawVariables ( user0 , arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test6 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager ( inMemoryChangeEventManager0 , inMemoryListChoiceManager0 , inMemoryOntologyTermManager0 , inMemorySupportingDocumentsManager0 ) ; ArrayList < Variable > arrayList0 = inMemoryVariableManager0 . getOriginalVariables ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < VariableSummary > getSummaryDataForAllVariables ( User user ) throws MacawException { checkValidUser ( user ) ; return variableManager . getSummaryDataForAllVariables ( user ) ; }
void test8 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager ( inMemoryChangeEventManager0 , inMemoryListChoiceManager0 , inMemoryOntologyTermManager0 , inMemorySupportingDocumentsManager0 ) ; User user0 = new User ( ( String ) null , ( String ) null ) ; ArrayList < Category > arrayList0 = inMemoryVariableManager0 . getCategoriesForVariable ( user0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < Category > getCategoriesForVariable ( User user , String variableName ) throws MacawException { ArrayList < Category > categories = new ArrayList < Category > ( ) ; Variable variable = getVariable ( user , variableName ) ; if ( variable ! = null ) { String categoryName = variable . getCategory ( ) ; Category category = listChoiceManager . getCategory ( categoryName ) ; if ( category ! = null ) { categories . add ( category ) ; } } return categories ; }
void test9 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager ( inMemoryChangeEventManager0 , inMemoryListChoiceManager0 , inMemoryOntologyTermManager0 , inMemorySupportingDocumentsManager0 ) ; ArrayList < Variable > arrayList0 = inMemoryVariableManager0 . getOriginalVariables ( user0 ) ; RawVariable rawVariable0 = new RawVariable ( ) ; arrayList0 . add ( ( Variable ) rawVariable0 ) ; RawVariable rawVariable1 = ( RawVariable ) inMemoryVariableManager0 . getVariable ( user0 , "L4~ < nZ@IT - DL < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Variable getVariable ( User user , String variableName ) throws MacawException { checkValidUser ( user ) ; return variableManager . getVariable ( user , variableName ) ; }
void test10 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager ( inMemoryChangeEventManager0 , inMemoryListChoiceManager0 , inMemoryOntologyTermManager0 , inMemorySupportingDocumentsManager0 ) ; ArrayList < Variable > arrayList0 = inMemoryVariableManager0 . getOriginalVariables ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test11 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager ( inMemoryChangeEventManager0 , inMemoryListChoiceManager0 , inMemoryOntologyTermManager0 , inMemorySupportingDocumentsManager0 ) ; ArrayList < Variable > arrayList0 = inMemoryVariableManager0 . getOriginalVariables ( user0 ) ; RawVariable rawVariable0 = new RawVariable ( ) ; arrayList0 . add ( ( Variable ) rawVariable0 ) ; String [ ] stringArray0 = inMemoryVariableManager0 . getStudyYears ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getStudyYears ( User user ) throws MacawException { checkValidUser ( user ) ; return variableManager . getStudyYears ( user ) ; }
void test12 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager ( inMemoryChangeEventManager0 , inMemoryListChoiceManager0 , inMemoryOntologyTermManager0 , inMemorySupportingDocumentsManager0 ) ; ArrayList < Variable > arrayList0 = inMemoryVariableManager0 . getOriginalVariables ( user0 ) ; RawVariable rawVariable0 = new RawVariable ( ) ; arrayList0 . add ( ( Variable ) rawVariable0 ) ; String [ ] stringArray0 = inMemoryVariableManager0 . getVariableNames ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getVariableNames ( User user ) throws MacawException { ArrayList < String > variableNames = new ArrayList < String > ( ) ; for ( Variable currentVariable : variables ) { variableNames . add ( currentVariable . getName ( ) ) ; } String [ ] results = variableNames . toArray ( new String [ 0 ] ) ; return results ; }
void test13 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager ( inMemoryChangeEventManager0 , inMemoryListChoiceManager0 , inMemoryOntologyTermManager0 , inMemorySupportingDocumentsManager0 ) ; ArrayList < Variable > arrayList0 = inMemoryVariableManager0 . getOriginalVariables ( user0 ) ; RawVariable rawVariable0 = new RawVariable ( ) ; arrayList0 . add ( ( Variable ) rawVariable0 ) ; OntologyTerm ontologyTerm0 = new OntologyTerm ( ) ; inMemoryVariableManager0 . updateOntologyTermReferences ( ontologyTerm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateOntologyTermReferences ( OntologyTerm targetOntologyTerm ) { int targetIdentifier = targetOntologyTerm . getIdentifier ( ) ; for ( Variable currentVariable : variables ) { ArrayList < OntologyTerm > ontologyTerms = currentVariable . getOntologyTerms ( ) ; int numberOfOntologyTerms = ontologyTerms . size ( ) ; int foundIndex = - 1 ; for ( int i = 0 ; i < numberOfOntologyTerms ; i + + ) { int currentIdentifier = ontologyTerms . get ( i ) . getIdentifier ( ) ; if ( currentIdentifier = = targetIdentifier ) { foundIndex = i ; break ; } } if ( foundIndex ! = - 1 ) { / / item was found ontologyTerms . remove ( foundIndex ) ; if ( foundIndex = = numberOfOntologyTerms - 1 ) { / / item was found at the end ontologyTerms . add ( targetOntologyTerm ) ; } else { ontologyTerms . add ( foundIndex , targetOntologyTerm ) ; } } } }
void test14 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager ( inMemoryChangeEventManager0 , inMemoryListChoiceManager0 , inMemoryOntologyTermManager0 , inMemorySupportingDocumentsManager0 ) ; ArrayList < Variable > arrayList0 = inMemoryVariableManager0 . getOriginalVariables ( user0 ) ; RawVariable rawVariable0 = new RawVariable ( ) ; arrayList0 . add ( ( Variable ) rawVariable0 ) ; OntologyTerm ontologyTerm0 = new OntologyTerm ( ) ; rawVariable0 . addOntologyTerm ( ontologyTerm0 ) ; inMemoryVariableManager0 . updateOntologyTermReferences ( ontologyTerm0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayName ( ) { / * * StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( firstName ) ; buffer . append ( " " ) ; buffer . append ( lastName ) ; return buffer . toString ( ) ; * / return userID ; }
void test15 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager ( inMemoryChangeEventManager0 , inMemoryListChoiceManager0 , inMemoryOntologyTermManager0 , inMemorySupportingDocumentsManager0 ) ; User user0 = new User ( "variable . notes . label" , "variable . notes . label" ) ; RawVariable rawVariable0 = new RawVariable ( ) ; int int0 = inMemoryVariableManager0 . getRawVariableIdentifier ( user0 , rawVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRawVariableIdentifier ( User user , RawVariable rawVariable ) throws MacawException { checkValidUser ( user ) ; return variableManager . getRawVariableIdentifier ( user , rawVariable ) ; }
void test16 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager ( inMemoryChangeEventManager0 , inMemoryListChoiceManager0 , inMemoryOntologyTermManager0 , inMemorySupportingDocumentsManager0 ) ; ArrayList < Variable > arrayList0 = inMemoryVariableManager0 . getOriginalVariables ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRawVariableIdentifier ( User user , RawVariable rawVariable ) throws MacawException { checkValidUser ( user ) ; return variableManager . getRawVariableIdentifier ( user , rawVariable ) ; }
void test17 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager ( inMemoryChangeEventManager0 , inMemoryListChoiceManager0 , inMemoryOntologyTermManager0 , inMemorySupportingDocumentsManager0 ) ; ArrayList < Variable > arrayList0 = inMemoryVariableManager0 . getOriginalVariables ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDerivedVariableIdentifier ( User user , DerivedVariable derivedVariable ) throws MacawException { checkValidUser ( user ) ; return variableManager . getDerivedVariableIdentifier ( user , derivedVariable ) ; }
void test18 ( ) throws Throwable { InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager ( ) ; InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager ( inMemoryChangeEventManager0 ) ; InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager ( inMemoryChangeEventManager0 ) ; User user0 = new User ( ) ; InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager ( inMemoryChangeEventManager0 ) ; InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager ( inMemoryChangeEventManager0 , inMemoryListChoiceManager0 , inMemoryOntologyTermManager0 , inMemorySupportingDocumentsManager0 ) ; ArrayList < Variable > arrayList0 = inMemoryVariableManager0 . getOriginalVariables ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDerivedVariableIdentifier ( User user , DerivedVariable derivedVariable ) throws MacawException { checkValidUser ( user ) ; return variableManager . getDerivedVariableIdentifier ( user , derivedVariable ) ; }
void test33 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionCurationService productionCurationService0 = new ProductionCurationService ( sessionProperties0 ) ; int int0 = productionCurationService0 . getNumberOfConnections ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfConnections ( ) { return sqlConnectionManager . getNumberOfConnections ( ) ; }
void test0 ( ) throws Throwable { SQLUtilities sQLUtilities0 = new SQLUtilities ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { ResultSet resultSet0 = new ResultSet ( ( - 25L ) , ( - 25L ) , ( Connection ) null , ( Statement ) null ) ; SQLUtilities . closeStatementsWithCatch ( ( java . sql . Statement ) null , ( java . sql . ResultSet ) resultSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void closeStatementsWithCatch ( Statement statement , ResultSet resultSet ) throws MacawException { try { SQLUtilities . closeStatementsWithoutCatch ( statement , resultSet ) ; } catch ( SQLException exception ) { String errorMessage = MacawMessages . getMessage ( "sql . error . unableToCloseConnection" ) ; MacawException macawException = new MacawException ( MacawErrorType . UNABLE_TO_CLOSE_CONNECTION , errorMessage ) ; throw macawException ; } }
void test1 ( ) throws Throwable { SQLCurationConceptManager sQLCurationConceptManager0 = new SQLCurationConceptManager ( ( SQLChangeEventManager ) null ) ; User user0 = new User ( "" , "" ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; ArrayList < MacawChangeEvent > arrayList0 = DerivedVariable . detectFieldChanges ( user0 , derivedVariable0 , derivedVariable0 ) ; sQLCurationConceptManager0 . registerChangeEvents ( ( Connection ) null , arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void registerChangeEvents ( ArrayList < MacawChangeEvent > changeEvents ) throws MacawException { changeEventManager . registerChangeEvents ( changeEvents ) ; }
void test3 ( ) throws Throwable { SQLCurationConceptManager sQLCurationConceptManager0 = new SQLCurationConceptManager ( ( SQLChangeEventManager ) null ) ; MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent ( ) ; sQLCurationConceptManager0 . registerChangeEvent ( ( Connection ) null , macawChangeEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUserID ( ) { return userID ; }
void test9 ( ) throws Throwable { Log log0 = new Log ( ) ; SQLChangeEventManager sQLChangeEventManager0 = new SQLChangeEventManager ( log0 ) ; SQLListChoiceManager sQLListChoiceManager0 = new SQLListChoiceManager ( sQLChangeEventManager0 ) ; SQLOntologyTermManager sQLOntologyTermManager0 = new SQLOntologyTermManager ( sQLChangeEventManager0 ) ; SQLVariableManager sQLVariableManager0 = new SQLVariableManager ( sQLChangeEventManager0 , sQLListChoiceManager0 , sQLOntologyTermManager0 , ( SQLSupportingDocumentsManager ) null ) ; User user0 = new User ( ) ; ArrayList < DerivedVariable > arrayList0 = new ArrayList < DerivedVariable > ( ) ; sQLVariableManager0 . deleteDerivedVariables ( ( Connection ) null , user0 , arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayName ( ) { / * * StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( firstName ) ; buffer . append ( " " ) ; buffer . append ( lastName ) ; return buffer . toString ( ) ; * / return userID ; }
void test8 ( ) throws Throwable { SQLListChoiceManager sQLListChoiceManager0 = new SQLListChoiceManager ( ( SQLChangeEventManager ) null ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; String string0 = sQLListChoiceManager0 . getAliasFilePathName ( ( Connection ) null , ( Variable ) derivedVariable0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAliasFilePathName ( Connection connection , Variable variable , int dataLibraryID ) throws MacawException { StringBuilder query = new StringBuilder ( ) ; query . append ( "SELECT alias " ) ; query . append ( "FROM alias_file_paths " ) ; query . append ( "WHERE deleted_at IS NULL AND " ) ; query . append ( "identifier = ? ; " ) ; try { return getMacawListChoice ( connection , variable , ListChoiceType . ALIAS_FILE_PATH , dataLibraryID , query . toString ( ) ) ; } catch ( SQLException exception ) { String errorMessage = MacawMessages . getMessage ( "sql . error . unableToGetAliasFilePathName" ) ; MacawException macawException = new MacawException ( MacawErrorType . UNABLE_TO_GET_ALIAS_FILE_PATH_NAME , errorMessage ) ; throw macawException ; } }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; User user0 = new User ( ) ; ArrayList < Category > arrayList0 = productionRetrievalService0 . getCategoriesForVariable ( user0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; User user0 = new User ( ) ; ArrayList < User > arrayList0 = productionRetrievalService0 . getUnverifiedUsers ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; User user0 = new User ( ) ; ArrayList < AvailabilityState > arrayList0 = productionRetrievalService0 . getAvailabilityStates ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < AvailabilityState > getAvailabilityStates ( User user ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getAvailabilityStates ( user ) ; }
void test3 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; ArrayList < User > arrayList0 = productionRetrievalService0 . getUsers ( ( User ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; User user0 = productionRetrievalService0 . getUserFromEmail ( ( User ) null , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" User getUserFromEmail ( User user , String email ) throws MacawException { User . checkValidEmail ( email ) ; SearchUtility searchUtility = new SearchUtility ( email ) ; ArrayList < User > users = new ArrayList < User > ( ) ; users . addAll ( userFromIdentifier . values ( ) ) ; for ( User currentUser : users ) { String currentEmail = currentUser . getEmail ( ) ; if ( searchUtility . valueExactlyMatches ( currentEmail ) = = true ) { return currentUser ; } } return null ; }
void test5 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; User user0 = new User ( ) ; AliasFilePath aliasFilePath0 = productionRetrievalService0 . getAliasFilePath ( user0 , "k * ? ! $%\"3Sr Z ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AliasFilePath getAliasFilePath ( User user , String alias ) throws MacawException { SearchUtility searchUtility = new SearchUtility ( alias ) ; for ( AliasFilePath originalAliasFilePath : aliasFilePaths ) { String currentAliasName = originalAliasFilePath . getAlias ( ) ; if ( searchUtility . valueExactlyMatches ( currentAliasName ) = = true ) { return ( ( AliasFilePath ) originalAliasFilePath . clone ( ) ) ; } } return null ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; ArrayList < Category > arrayList0 = productionRetrievalService0 . getCategories ( ( User ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < Category > getCategories ( User user ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getCategories ( user ) ; }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; User user0 = new User ( ) ; Variable variable0 = productionRetrievalService0 . getVariable ( user0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Variable getVariable ( User user , String variableName ) throws MacawException { checkValidUser ( user ) ; return variableManager . getVariable ( user , variableName ) ; }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; User user0 = new User ( ) ; ArrayList < VariableSummary > arrayList0 = productionRetrievalService0 . getVariableSummariesForCategory ( user0 , " > Yrq32OY ) 3V1gN9 > HA" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < VariableSummary > getVariableSummariesForCategory ( User user , String categoryName ) throws MacawException { SearchUtility searchUtility = new SearchUtility ( categoryName ) ; ArrayList < VariableSummary > variableSummaries = new ArrayList < VariableSummary > ( ) ; for ( Variable currentVariable : variables ) { String currentVariableCategory = currentVariable . getCategory ( ) ; if ( searchUtility . valueExactlyMatches ( currentVariableCategory ) = = true ) { variableSummaries . add ( currentVariable . createVariableSummary ( ) ) ; } } return variableSummaries ; }
void test9 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; ArrayList < ValueLabel > arrayList0 = productionRetrievalService0 . getValueLabels ( ( User ) null , "k * ? ! $%\"3Sr Z ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < ValueLabel > getValueLabels ( User user , Variable variable ) throws MacawException { checkValidUser ( user ) ; Variable originalVariable = variableManager . getOriginalVariable ( variable ) ; return valueLabelManager . getValueLabels ( user , originalVariable ) ; }
void test10 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; User user0 = new User ( ) ; ArrayList < SupportingDocument > arrayList0 = productionRetrievalService0 . getSupportingDocuments ( user0 , " + g%^A > ! H" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < SupportingDocument > getSupportingDocuments ( User user , Variable variable ) throws MacawException { checkValidUser ( user ) ; checkVariableExists ( variable ) ; ArrayList < SupportingDocument > results = variableManager . getSupportingDocuments ( user , variable ) ; return results ; }
void test11 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; ArrayList < AliasFilePath > arrayList0 = productionRetrievalService0 . getAliasFilePaths ( ( User ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < AliasFilePath > getAliasFilePaths ( User user ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getAliasFilePaths ( user ) ; }
void test12 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; User user0 = new User ( ) ; ArrayList < AliasFilePath > arrayList0 = productionRetrievalService0 . getAliasFilePathsMatchingName ( user0 , "cL ; g" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < AliasFilePath > getAliasFilePathsMatchingName ( User user , String aliasExpression ) throws MacawException { SearchUtility searchUtility = new SearchUtility ( ) ; searchUtility . setDefaultSearchPattern ( aliasExpression ) ; ArrayList < AliasFilePath > results = new ArrayList < AliasFilePath > ( ) ; for ( AliasFilePath originalAliasFilePath : aliasFilePaths ) { String currentAliasName = originalAliasFilePath . getAlias ( ) ; if ( searchUtility . valueContainsPattern ( currentAliasName ) = = true ) { AliasFilePath result = ( AliasFilePath ) originalAliasFilePath . clone ( ) ; results . add ( result ) ; } } return results ; }
void test13 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; ArrayList < OntologyTerm > arrayList0 = productionRetrievalService0 . getOntologyTerms ( ( User ) null , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < OntologyTerm > getOntologyTerms ( User user , Variable variable ) throws MacawException { checkValidUser ( user ) ; return variableManager . getAssociatedOntologyTerms ( user , variable ) ; }
void test14 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; User user0 = productionRetrievalService0 . getUserFromID ( ( User ) null , "sql . error . unableToCheckVariableExists" ) ; String [ ] stringArray0 = productionRetrievalService0 . getVariableNames ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getVariableNames ( User user ) throws MacawException { ArrayList < String > variableNames = new ArrayList < String > ( ) ; for ( Variable currentVariable : variables ) { variableNames . add ( currentVariable . getName ( ) ) ; } String [ ] results = variableNames . toArray ( new String [ 0 ] ) ; return results ; }
void test15 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; User user0 = new User ( "QLJ8K | 0y3uP ) ^ ( \" / * " , "QLJ8K | 0y3uP ) ^ ( \" / * " ) ; ArrayList < CleaningState > arrayList0 = productionRetrievalService0 . getCleaningStates ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < CleaningState > getCleaningStates ( User user ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getCleaningStates ( user ) ; }
void test16 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService ( sessionProperties0 ) ; User user0 = new User ( ) ; ArrayList < OntologyTerm > arrayList0 = productionRetrievalService0 . getOntologyTerms ( user0 , ( Variable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < OntologyTerm > getOntologyTerms ( User user , Variable variable ) throws MacawException { checkValidUser ( user ) ; return variableManager . getAssociatedOntologyTerms ( user , variable ) ; }
void test0 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; SQLConnectionManager sQLConnectionManager0 = new SQLConnectionManager ( sessionProperties0 ) ; int int0 = sQLConnectionManager0 . getNumberOfConnections ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfConnections ( ) { return sqlConnectionManager . getNumberOfConnections ( ) ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; SQLConnectionManager sQLConnectionManager0 = new SQLConnectionManager ( sessionProperties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Connection getConnection ( ) throws MacawException { String errorMessage = MacawMessages . getMessage ( "sql . error . noConnectionsAvailable" ) ; MacawException macawException = new MacawException ( MacawErrorType . UNABLE_TO_GET_CONNECTION , errorMessage ) ; try { Connection connection = sqlConnectionManager . getSQLConnection ( ) ; if ( connection = = null ) { throw macawException ; } return connection ; } catch ( Exception sqlException ) { throw macawException ; } }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; SQLConnectionManager sQLConnectionManager0 = new SQLConnectionManager ( sessionProperties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Connection getSQLConnection ( ) throws Exception { if ( availableConnections . size ( ) = = maximumConnections ) { return null ; } if ( availableConnections . size ( ) > 0 ) { Connection connection = availableConnections . get ( 0 ) ; availableConnections . remove ( connection ) ; return connection ; } else { / / create a new one Class . forName ( databaseDriverClassName ) . newInstance ( ) ; if ( dbUser = = null ) { Connection connection = DriverManager . getConnection ( databaseURL ) ; availableConnections . add ( connection ) ; return connection ; } else { Connection connection = DriverManager . getConnection ( databaseURL , dbUser , dbPassword ) ; availableConnections . add ( connection ) ; return connection ; } } }
void test3 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; SQLConnectionManager sQLConnectionManager0 = new SQLConnectionManager ( sessionProperties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumberOfConnections ( ) { return sqlConnectionManager . getNumberOfConnections ( ) ; }
void test0 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( true ) ; VariableLabelTableModel variableLabelTableModel0 = new VariableLabelTableModel ( ( MacawCurationAPI ) demonstrationCurationService0 , true ) ; variableLabelTableModel0 . findColumn ( "wmXL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return 3 ; }
void test1 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 , false ) ; VariableLabelTableModel variableLabelTableModel0 = new VariableLabelTableModel ( ( MacawCurationAPI ) demonstrationRetrievalService0 , false ) ; ValueLabel valueLabel0 = new ValueLabel ( ) ; variableLabelTableModel0 . addValueLabel ( 0 , valueLabel0 ) ; ValueLabel . EditingOperationType valueLabel_EditingOperationType0 = ValueLabel . EditingOperationType . DELETE ; valueLabel0 . setEditingOperationType ( valueLabel_EditingOperationType0 ) ; variableLabelTableModel0 . setValueAt ( ( Object ) "" , 0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test2 ( ) throws Throwable { VariableLabelTableModel variableLabelTableModel0 = new VariableLabelTableModel ( ( MacawCurationAPI ) null , true ) ; int int0 = variableLabelTableModel0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test4 ( ) throws Throwable { VariableLabelTableModel variableLabelTableModel0 = new VariableLabelTableModel ( ( MacawCurationAPI ) null , false ) ; boolean boolean0 = variableLabelTableModel0 . isCellEditable ( ( - 273 ) , ( - 273 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int row , int column ) { return allowWriteAccess ; }
void test8 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( true ) ; VariableLabelTableModel variableLabelTableModel0 = new VariableLabelTableModel ( ( MacawCurationAPI ) demonstrationCurationService0 , true ) ; Class < Object > class0 = variableLabelTableModel0 . getColumnClass ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getColumnClass ( int column ) { if ( column = = VALUE_COLUMN ) { return String . class ; } else if ( column = = LABEL_COLUMN ) { return String . class ; } else { / / helps ensure that JTable will render this column with a / / check box return Boolean . class ; } }
void test9 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( true ) ; VariableLabelTableModel variableLabelTableModel0 = new VariableLabelTableModel ( ( MacawCurationAPI ) demonstrationCurationService0 , true ) ; Class < Object > class0 = variableLabelTableModel0 . getColumnClass ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getColumnClass ( int column ) { if ( column = = VALUE_COLUMN ) { return String . class ; } else if ( column = = LABEL_COLUMN ) { return String . class ; } else { / / helps ensure that JTable will render this column with a / / check box return Boolean . class ; } }
void test10 ( ) throws Throwable { VariableLabelTableModel variableLabelTableModel0 = new VariableLabelTableModel ( ( MacawCurationAPI ) null , true ) ; Class < Object > class0 = variableLabelTableModel0 . getColumnClass ( 342 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getColumnClass ( int column ) { if ( column = = VALUE_COLUMN ) { return String . class ; } else if ( column = = LABEL_COLUMN ) { return String . class ; } else { / / helps ensure that JTable will render this column with a / / check box return Boolean . class ; } }
void test11 ( ) throws Throwable { VariableLabelTableModel variableLabelTableModel0 = new VariableLabelTableModel ( ( MacawCurationAPI ) null , false ) ; ValueLabel valueLabel0 = new ValueLabel ( ) ; variableLabelTableModel0 . addValueLabel ( 0 , valueLabel0 ) ; String string0 = ( String ) variableLabelTableModel0 . getValueAt ( 0 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test12 ( ) throws Throwable { VariableLabelTableModel variableLabelTableModel0 = new VariableLabelTableModel ( ( MacawCurationAPI ) null , true ) ; ValueLabel valueLabel0 = new ValueLabel ( ) ; variableLabelTableModel0 . addValueLabel ( 0 , valueLabel0 ) ; String string0 = ( String ) variableLabelTableModel0 . getValueAt ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test13 ( ) throws Throwable { VariableLabelTableModel variableLabelTableModel0 = new VariableLabelTableModel ( ( MacawCurationAPI ) null , false ) ; ValueLabel valueLabel0 = new ValueLabel ( ) ; variableLabelTableModel0 . addValueLabel ( 0 , valueLabel0 ) ; Boolean boolean0 = ( Boolean ) variableLabelTableModel0 . getValueAt ( 0 , ( - 273 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test14 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 , false ) ; VariableLabelTableModel variableLabelTableModel0 = new VariableLabelTableModel ( ( MacawCurationAPI ) demonstrationRetrievalService0 , false ) ; ValueLabel valueLabel0 = new ValueLabel ( ) ; variableLabelTableModel0 . addValueLabel ( 0 , valueLabel0 ) ; variableLabelTableModel0 . setValueAt ( ( Object ) "OptionPaneUI" , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test15 ( ) throws Throwable { VariableLabelTableModel variableLabelTableModel0 = new VariableLabelTableModel ( ( MacawCurationAPI ) null , true ) ; ValueLabel valueLabel0 = new ValueLabel ( ) ; variableLabelTableModel0 . addValueLabel ( 0 , valueLabel0 ) ; variableLabelTableModel0 . setValueAt ( ( Object ) "" , 0 , 342 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test16 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 , false ) ; VariableLabelTableModel variableLabelTableModel0 = new VariableLabelTableModel ( ( MacawCurationAPI ) demonstrationRetrievalService0 , false ) ; ValueLabel valueLabel0 = new ValueLabel ( ) ; variableLabelTableModel0 . addValueLabel ( 0 , valueLabel0 ) ; ValueLabel . EditingOperationType valueLabel_EditingOperationType0 = ValueLabel . EditingOperationType . DELETE ; valueLabel0 . setEditingOperationType ( valueLabel_EditingOperationType0 ) ; variableLabelTableModel0 . setValueAt ( ( Object ) "" , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test17 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 , true ) ; VariableLabelTableModel variableLabelTableModel0 = new VariableLabelTableModel ( ( MacawCurationAPI ) demonstrationRetrievalService0 , true ) ; ValueLabel valueLabel0 = new ValueLabel ( ) ; variableLabelTableModel0 . addValueLabel ( 0 , valueLabel0 ) ; ValueLabel . EditingOperationType valueLabel_EditingOperationType0 = ValueLabel . EditingOperationType . CANCEL ; valueLabel0 . setEditingOperationType ( valueLabel_EditingOperationType0 ) ; variableLabelTableModel0 . setValueAt ( ( Object ) "Redo" , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test18 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 , true ) ; VariableLabelTableModel variableLabelTableModel0 = new VariableLabelTableModel ( ( MacawCurationAPI ) demonstrationRetrievalService0 , true ) ; ValueLabel valueLabel0 = new ValueLabel ( ) ; variableLabelTableModel0 . addValueLabel ( 0 , valueLabel0 ) ; ValueLabel . EditingOperationType valueLabel_EditingOperationType0 = ValueLabel . EditingOperationType . CANCEL ; valueLabel0 . setEditingOperationType ( valueLabel_EditingOperationType0 ) ; variableLabelTableModel0 . setValueAt ( ( Object ) "Redo" , 0 , 578 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test0 ( ) throws Throwable { SupportingDocumentSearchTableModel supportingDocumentSearchTableModel0 = new SupportingDocumentSearchTableModel ( ( MacawCurationAPI ) null ) ; int int0 = supportingDocumentSearchTableModel0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test1 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( ) ; SupportingDocumentSearchTableModel supportingDocumentSearchTableModel0 = new SupportingDocumentSearchTableModel ( ( MacawCurationAPI ) demonstrationCurationService0 ) ; boolean boolean0 = supportingDocumentSearchTableModel0 . isCellEditable ( ( - 5 ) , ( - 5 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int row , int column ) { return allowWriteAccess ; }
void test3 ( ) throws Throwable { SupportingDocumentSearchTableModel supportingDocumentSearchTableModel0 = new SupportingDocumentSearchTableModel ( ( MacawCurationAPI ) null ) ; String string0 = supportingDocumentSearchTableModel0 . getColumnName ( 2012 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int column ) { if ( column = = VALUE_COLUMN ) { String valueLabelText = MacawMessages . getMessage ( "variableLabelValueEditor . value" ) ; return valueLabelText ; } else if ( column = = LABEL_COLUMN ) { String labelLabelText = MacawMessages . getMessage ( "variableLabelValueEditor . label" ) ; return labelLabelText ; } else { String isMissingValueLabelText = MacawMessages . getMessage ( "variableLabelValueEditor . isMissingValue" ) ; return isMissingValueLabelText ; } }
void test4 ( ) throws Throwable { SupportingDocumentSearchTableModel supportingDocumentSearchTableModel0 = new SupportingDocumentSearchTableModel ( ( MacawCurationAPI ) null ) ; JTable jTable0 = new JTable ( ( TableModel ) supportingDocumentSearchTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return 3 ; }
void test0 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 ) ; VariableLabelTable variableLabelTable0 = new VariableLabelTable ( ( MacawCurationAPI ) demonstrationRetrievalService0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void save ( ) throws MacawException { / / perform validation for ( ValueLabel valueLabel : valueLabelsCurrentList ) { ValueLabel . validateFields ( valueLabel ) ; } / / note that some of these methods may not be terribly efficient / / but we don't expect that a variable will have a lot of entries . ArrayList < ValueLabel > addedValueLabelItems = new ArrayList < ValueLabel > ( ) ; ArrayList < ValueLabel > editedValueLabelItems = new ArrayList < ValueLabel > ( ) ; ArrayList < ValueLabel > deletedValueLabelItems = new ArrayList < ValueLabel > ( ) ; / / identify items that have been added for ( ValueLabel copyValueLabel : valueLabelsCurrentList ) { if ( copyValueLabel . isNewRecord ( ) = = true ) { addedValueLabelItems . add ( copyValueLabel ) ; } } / / Identify items that have been deleted or edited . . . for ( ValueLabel originalValueLabel : valueLabelsOriginalList ) { ValueLabel copyValueLabel = findCopy ( originalValueLabel ) ; if ( copyValueLabel = = null ) { / / this means we must have deleted it deletedValueLabelItems . add ( originalValueLabel ) ; } else { / / don't worry if nobody has touched the values , / / the api implementation is intended to make a quick / / return if there are no differences editedValueLabelItems . add ( copyValueLabel ) ; } } / / make commits to database database . addValueLabels ( currentUser , currentVariable , addedValueLabelItems ) ; database . updateValueLabels ( currentUser , currentVariable , editedValueLabelItems ) ; database . deleteValueLabels ( currentUser , currentVariable , deletedValueLabelItems ) ; }
void test1 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionCurationService productionCurationService0 = new ProductionCurationService ( sessionProperties0 ) ; VariableLabelTable variableLabelTable0 = new VariableLabelTable ( ( MacawCurationAPI ) productionCurationService0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return 3 ; }
void test2 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 ) ; VariableLabelTable variableLabelTable0 = new VariableLabelTable ( ( MacawCurationAPI ) demonstrationRetrievalService0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void deleteValueLabel ( int row ) { valueLabelsCurrentList . remove ( row ) ; fireTableRowsDeleted ( row , row ) ; }
void test3 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 ) ; VariableLabelTable variableLabelTable0 = new VariableLabelTable ( ( MacawCurationAPI ) demonstrationRetrievalService0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return 3 ; }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ProductionCurationService productionCurationService0 = new ProductionCurationService ( sessionProperties0 ) ; VariableLabelTable variableLabelTable0 = new VariableLabelTable ( ( MacawCurationAPI ) productionCurationService0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setData ( User currentUser , Variable currentVariable ) throws MacawException { this . currentUser = currentUser ; this . currentVariable = currentVariable ; this . valueLabelsOriginalList = database . getValueLabels ( currentUser , currentVariable ) ; valueLabelsCurrentList . clear ( ) ; for ( ValueLabel valueLabel : valueLabelsOriginalList ) { ValueLabel cloneValueLabel = ( ValueLabel ) valueLabel . clone ( ) ; valueLabelsCurrentList . add ( cloneValueLabel ) ; } fireTableDataChanged ( ) ; }
void test0 ( ) throws Throwable { ChangeHistoryTableModel changeHistoryTableModel0 = new ChangeHistoryTableModel ( ) ; boolean boolean0 = changeHistoryTableModel0 . isCellEditable ( 33 , 33 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int row , int column ) { return allowWriteAccess ; }
void test1 ( ) throws Throwable { ChangeHistoryTableModel changeHistoryTableModel0 = new ChangeHistoryTableModel ( ) ; ArrayList < MacawChangeEvent > arrayList0 = new ArrayList < MacawChangeEvent > ( ) ; changeHistoryTableModel0 . setChangeEvents ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setChangeEvents ( ArrayList < MacawChangeEvent > changeEvents ) { this . changeEvents = changeEvents ; }
void test2 ( ) throws Throwable { ChangeHistoryTableModel changeHistoryTableModel0 = new ChangeHistoryTableModel ( ) ; int int0 = changeHistoryTableModel0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test3 ( ) throws Throwable { ChangeHistoryTableModel changeHistoryTableModel0 = new ChangeHistoryTableModel ( ) ; changeHistoryTableModel0 . findColumn ( "8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return 3 ; }
void test4 ( ) throws Throwable { ChangeHistoryTableModel changeHistoryTableModel0 = new ChangeHistoryTableModel ( ) ; String string0 = changeHistoryTableModel0 . getColumnName ( ( - 162 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int column ) { if ( column = = VALUE_COLUMN ) { String valueLabelText = MacawMessages . getMessage ( "variableLabelValueEditor . value" ) ; return valueLabelText ; } else if ( column = = LABEL_COLUMN ) { String labelLabelText = MacawMessages . getMessage ( "variableLabelValueEditor . label" ) ; return labelLabelText ; } else { String isMissingValueLabelText = MacawMessages . getMessage ( "variableLabelValueEditor . isMissingValue" ) ; return isMissingValueLabelText ; } }
void test0 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 , false ) ; VariableSearchTableModel variableSearchTableModel0 = new VariableSearchTableModel ( ( MacawCurationAPI ) demonstrationRetrievalService0 ) ; User user0 = new User ( ) ; variableSearchTableModel0 . filterVariables ( user0 , " : " , " : " , " : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return password ; }
void test1 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 , true ) ; VariableSearchTableModel variableSearchTableModel0 = new VariableSearchTableModel ( ( MacawCurationAPI ) demonstrationRetrievalService0 ) ; User user0 = new User ( ( String ) null , ( String ) null ) ; variableSearchTableModel0 . showAllVariableSummaries ( user0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStatus ( ) { return status ; }
void test2 ( ) throws Throwable { VariableSearchTableModel variableSearchTableModel0 = new VariableSearchTableModel ( ( MacawCurationAPI ) null ) ; int int0 = variableSearchTableModel0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test3 ( ) throws Throwable { VariableSearchTableModel variableSearchTableModel0 = new VariableSearchTableModel ( ( MacawCurationAPI ) null ) ; variableSearchTableModel0 . findColumn ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return 3 ; }
void test4 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 , false ) ; VariableSearchTableModel variableSearchTableModel0 = new VariableSearchTableModel ( ( MacawCurationAPI ) demonstrationRetrievalService0 ) ; boolean boolean0 = variableSearchTableModel0 . isCellEditable ( 20 , 20 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int row , int column ) { return allowWriteAccess ; }
void test5 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( ) ; VariableSearchTableModel variableSearchTableModel0 = new VariableSearchTableModel ( ( MacawCurationAPI ) demonstrationCurationService0 ) ; variableSearchTableModel0 . refreshList ( ) ; VariableSummary variableSummary0 = variableSearchTableModel0 . getVariableSummary ( 0 ) ; int int0 = variableSearchTableModel0 . getRow ( variableSummary0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test6 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( ) ; VariableSearchTableModel variableSearchTableModel0 = new VariableSearchTableModel ( ( MacawCurationAPI ) demonstrationCurationService0 ) ; VariableSummary variableSummary0 = new VariableSummary ( ) ; variableSearchTableModel0 . refreshList ( ) ; int int0 = variableSearchTableModel0 . getRow ( variableSummary0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test7 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService ( sessionProperties0 , false ) ; VariableSearchTableModel variableSearchTableModel0 = new VariableSearchTableModel ( ( MacawCurationAPI ) demonstrationRetrievalService0 ) ; User user0 = new User ( ) ; variableSearchTableModel0 . filterVariables ( user0 , " : " , " : " , " : " , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEmail ( ) { return email ; }
void test9 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( ) ; VariableSearchTableModel variableSearchTableModel0 = new VariableSearchTableModel ( ( MacawCurationAPI ) demonstrationCurationService0 ) ; variableSearchTableModel0 . refreshList ( ) ; variableSearchTableModel0 . getValueAt ( 1 , 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test10 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( ) ; VariableSearchTableModel variableSearchTableModel0 = new VariableSearchTableModel ( ( MacawCurationAPI ) demonstrationCurationService0 ) ; variableSearchTableModel0 . refreshList ( ) ; String string0 = ( String ) variableSearchTableModel0 . getValueAt ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test11 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( ) ; VariableSearchTableModel variableSearchTableModel0 = new VariableSearchTableModel ( ( MacawCurationAPI ) demonstrationCurationService0 ) ; variableSearchTableModel0 . refreshList ( ) ; String string0 = ( String ) variableSearchTableModel0 . getValueAt ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test12 ( ) throws Throwable { DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService ( ) ; VariableSearchTableModel variableSearchTableModel0 = new VariableSearchTableModel ( ( MacawCurationAPI ) demonstrationCurationService0 ) ; variableSearchTableModel0 . refreshList ( ) ; String string0 = ( String ) variableSearchTableModel0 . getValueAt ( 1 , 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return valueLabelsCurrentList . size ( ) ; }
void test0 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; AlternativeVariableSelectionPanel alternativeVariableSelectionPanel0 = new AlternativeVariableSelectionPanel ( sessionProperties0 ) ; Variable variable0 = alternativeVariableSelectionPanel0 . getAlternativeVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Variable getAlternativeVariable ( User user , Variable targetVariable ) throws MacawException { return variableManager . getAlternativeVariable ( targetVariable ) ; }
void test1 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; AlternativeVariableSelectionPanel alternativeVariableSelectionPanel0 = new AlternativeVariableSelectionPanel ( sessionProperties0 ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; alternativeVariableSelectionPanel0 . setData ( ( Variable ) derivedVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCodeBookNumber ( ) { return codeBookNumber ; }
void test2 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; AlternativeVariableSelectionPanel alternativeVariableSelectionPanel0 = new AlternativeVariableSelectionPanel ( sessionProperties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JPanel getPanel ( ) { return panel ; }
void test3 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; AlternativeVariableSelectionPanel alternativeVariableSelectionPanel0 = new AlternativeVariableSelectionPanel ( sessionProperties0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "" , 1 , "" ) ; alternativeVariableSelectionPanel0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent event ) { Object button = event . getSource ( ) ; if ( button = = ok ) { ok ( ) ; } else if ( button = = cancel ) { cancel ( ) ; } }
void test4 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; RawVariable rawVariable0 = new RawVariable ( ) ; AlternativeVariableSelectionPanel alternativeVariableSelectionPanel0 = new AlternativeVariableSelectionPanel ( sessionProperties0 ) ; rawVariable0 . setAlternativeVariable ( ( Variable ) rawVariable0 ) ; alternativeVariableSelectionPanel0 . setData ( ( Variable ) rawVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test0 ( ) throws Throwable { ImportValueLabels importValueLabels0 = new ImportValueLabels ( ) ; ArrayList < Object > arrayList0 = importValueLabels0 . getValueLabels ( " OpZVrL" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < ValueLabel > getValueLabels ( User user , Variable variable ) throws MacawException { checkValidUser ( user ) ; Variable originalVariable = variableManager . getOriginalVariable ( variable ) ; return valueLabelManager . getValueLabels ( user , originalVariable ) ; }
void test0 ( ) throws Throwable { ImportCategoryStates importCategoryStates0 = new ImportCategoryStates ( ) ; ArrayList < Category > arrayList0 = importCategoryStates0 . getCategories ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < Category > getCategories ( User user ) throws MacawException { checkValidUser ( user ) ; return listChoiceManager . getCategories ( user ) ; }
void test0 ( ) throws Throwable { SessionProperties sessionProperties0 = new SessionProperties ( ) ; ExportVariablesToMacawXML exportVariablesToMacawXML0 = new ExportVariablesToMacawXML ( sessionProperties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExportVariablesToMacawXML ( SessionProperties sessionProperties ) { this . sessionProperties = sessionProperties ; currentUser = ( User ) sessionProperties . getProperty ( SessionProperties . CURRENT_USER ) ; macawRetrievalAPI = ( MacawRetrievalAPI ) sessionProperties . getProperty ( SessionProperties . RETRIEVAL_SERVICE ) ; }
void test0 ( ) throws Throwable { SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; SupportingDocument supportingDocument1 = ( SupportingDocument ) supportingDocument0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test1 ( ) throws Throwable { SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; boolean boolean0 = supportingDocument0 . isNewRecord ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test2 ( ) throws Throwable { SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; String string0 = supportingDocument0 . getDisplayItemIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewRecord ( ) { if ( editingOperationType = = EditingOperationType . NEW ) { return true ; } return false ; }
void test3 ( ) throws Throwable { SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewRecord ( ) { if ( editingOperationType = = EditingOperationType . NEW ) { return true ; } return false ; }
void test4 ( ) throws Throwable { SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; User user0 = new User ( ( String ) null , ( String ) null ) ; SupportingDocument supportingDocument1 = new SupportingDocument ( ) ; supportingDocument0 . setFilePath ( "%^ & FCBeO ! 1 } > " ) ; ArrayList < MacawChangeEvent > arrayList0 = SupportingDocument . detectFieldChanges ( user0 , supportingDocument1 , supportingDocument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test5 ( ) throws Throwable { SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; String string0 = supportingDocument0 . getDisplayName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test8 ( ) throws Throwable { SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; supportingDocument0 . setDocumentCode ( "%^ & FCBeO ! 1 } > " ) ; supportingDocument0 . setFileName ( "%^ & FCBeO ! 1 } > " ) ; supportingDocument0 . setTitle ( "%^ & FCBeO ! 1 } > " ) ; SupportingDocument . validateFields ( supportingDocument0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test9 ( ) throws Throwable { SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; SupportingDocument supportingDocument1 = new SupportingDocument ( ) ; supportingDocument1 . setTitle ( " . D [ xz5jZL < / U" ) ; User user0 = new User ( ) ; ArrayList < MacawChangeEvent > arrayList0 = SupportingDocument . detectFieldChanges ( user0 , supportingDocument0 , supportingDocument1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test10 ( ) throws Throwable { SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; SupportingDocument supportingDocument1 = new SupportingDocument ( ) ; User user0 = new User ( ) ; supportingDocument1 . setDocumentCode ( "Tdn" ) ; ArrayList < MacawChangeEvent > arrayList0 = SupportingDocument . detectFieldChanges ( user0 , supportingDocument0 , supportingDocument1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewRecord ( ) { if ( editingOperationType = = EditingOperationType . NEW ) { return true ; } return false ; }
void test11 ( ) throws Throwable { SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; SupportingDocument supportingDocument1 = new SupportingDocument ( ) ; supportingDocument0 . setDescription ( " . D [ xz5jZL < / U" ) ; User user0 = new User ( ) ; ArrayList < MacawChangeEvent > arrayList0 = SupportingDocument . detectFieldChanges ( user0 , supportingDocument0 , supportingDocument1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test12 ( ) throws Throwable { SupportingDocument supportingDocument0 = new SupportingDocument ( ) ; supportingDocument0 . setFileName ( "Tdn" ) ; SupportingDocument supportingDocument1 = new SupportingDocument ( ) ; User user0 = new User ( ) ; ArrayList < MacawChangeEvent > arrayList0 = SupportingDocument . detectFieldChanges ( user0 , supportingDocument0 , supportingDocument1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test0 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; ValueLabel . EditingOperationType valueLabel_EditingOperationType0 = ValueLabel . EditingOperationType . CANCEL ; valueLabel0 . setEditingOperationType ( valueLabel_EditingOperationType0 ) ; boolean boolean0 = valueLabel0 . isDeletedNewRecord ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeletedNewRecord ( ) { if ( editingOperationType = = EditingOperationType . CANCEL ) { return true ; } return false ; }
void test1 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; String string0 = valueLabel0 . getDisplayItemIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMissingValue ( ) { return isMissingValue ; }
void test2 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; ValueLabel valueLabel1 = new ValueLabel ( ) ; valueLabel0 . setMissingValue ( true ) ; User user0 = new User ( " - " , " - " ) ; RawVariable rawVariable0 = new RawVariable ( ) ; boolean boolean0 = ValueLabel . differencesExist ( user0 , ( Variable ) rawVariable0 , valueLabel0 , valueLabel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMissingValue ( ) { return isMissingValue ; }
void test3 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; ValueLabel valueLabel1 = ( ValueLabel ) valueLabel0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test4 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; valueLabel0 . getEditingOperationType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test5 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewRecord ( ) { if ( editingOperationType = = EditingOperationType . NEW ) { return true ; } return false ; }
void test6 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; boolean boolean0 = valueLabel0 . isNewRecord ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test7 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; boolean boolean0 = valueLabel0 . isEditingExistingRecord ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test8 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; ValueLabel . EditingOperationType valueLabel_EditingOperationType0 = ValueLabel . EditingOperationType . EDIT ; valueLabel0 . setEditingOperationType ( valueLabel_EditingOperationType0 ) ; boolean boolean0 = valueLabel0 . isEditingExistingRecord ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEditingExistingRecord ( ) { if ( editingOperationType = = EditingOperationType . EDIT ) { return true ; } return false ; }
void test9 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; boolean boolean0 = valueLabel0 . isDeletedNewRecord ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test10 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; boolean boolean0 = valueLabel0 . isDeletedRecord ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test11 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; ValueLabel . EditingOperationType valueLabel_EditingOperationType0 = ValueLabel . EditingOperationType . DELETE ; valueLabel0 . setEditingOperationType ( valueLabel_EditingOperationType0 ) ; boolean boolean0 = valueLabel0 . isDeletedRecord ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeletedRecord ( ) { if ( editingOperationType = = EditingOperationType . DELETE ) { return true ; } return false ; }
void test12 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasSameDisplayName ( User user ) { if ( getDisplayName ( ) . equals ( user . getDisplayName ( ) ) = = true ) { return true ; } return false ; }
void test13 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; boolean boolean0 = valueLabel0 . hasSameDisplayName ( valueLabel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewRecord ( ) { if ( editingOperationType = = EditingOperationType . NEW ) { return true ; } return false ; }
void test14 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; ValueLabel . validateFields ( valueLabel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test15 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; User user0 = new User ( ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; boolean boolean0 = ValueLabel . differencesExist ( user0 , ( Variable ) derivedVariable0 , valueLabel0 , valueLabel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test16 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; valueLabel0 . setValue ( "p . c_ ; = VsHg * : Z^" ) ; ValueLabel valueLabel1 = new ValueLabel ( ) ; User user0 = new User ( ) ; DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; boolean boolean0 = ValueLabel . differencesExist ( user0 , ( Variable ) derivedVariable0 , valueLabel0 , valueLabel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayName ( ) { / * * StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( firstName ) ; buffer . append ( " " ) ; buffer . append ( lastName ) ; return buffer . toString ( ) ; * / return userID ; }
void test17 ( ) throws Throwable { ValueLabel valueLabel0 = new ValueLabel ( ) ; ValueLabel valueLabel1 = new ValueLabel ( ) ; valueLabel1 . setLabel ( " - " ) ; User user0 = new User ( " - " , " - " ) ; RawVariable rawVariable0 = new RawVariable ( ) ; boolean boolean0 = ValueLabel . differencesExist ( user0 , ( Variable ) rawVariable0 , valueLabel0 , valueLabel1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayName ( ) { / * * StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( firstName ) ; buffer . append ( " " ) ; buffer . append ( lastName ) ; return buffer . toString ( ) ; * / return userID ; }
void test0 ( ) throws Throwable { VariableSummary variableSummary0 = new VariableSummary ( ) ; VariableSummary variableSummary1 = ( VariableSummary ) variableSummary0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test1 ( ) throws Throwable { VariableSummary variableSummary0 = new VariableSummary ( ) ; boolean boolean0 = variableSummary0 . isDerived ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test2 ( ) throws Throwable { VariableSummary variableSummary0 = new VariableSummary ( ) ; int int0 = variableSummary0 . getIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDerived ( ) { return isDerived ; }
void test3 ( ) throws Throwable { VariableSummary variableSummary0 = new VariableSummary ( ) ; String string0 = variableSummary0 . getYear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test4 ( ) throws Throwable { VariableSummary variableSummary0 = new VariableSummary ( ) ; String string0 = variableSummary0 . getLabel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test5 ( ) throws Throwable { VariableSummary variableSummary0 = new VariableSummary ( ) ; String string0 = variableSummary0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test6 ( ) throws Throwable { VariableSummary variableSummary0 = new VariableSummary ( ) ; variableSummary0 . setDerived ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test7 ( ) throws Throwable { VariableSummary variableSummary0 = new VariableSummary ( ) ; boolean boolean0 = variableSummary0 . hasSameDisplayName ( variableSummary0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test8 ( ) throws Throwable { VariableSummary variableSummary0 = new VariableSummary ( ) ; String string0 = variableSummary0 . getDisplayItemIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDerived ( ) { return isDerived ; }
void test9 ( ) throws Throwable { VariableSummary variableSummary0 = new VariableSummary ( ) ; VariableSummary variableSummary1 = new VariableSummary ( ) ; variableSummary0 . setName ( "Z } 1O@" ) ; boolean boolean0 = variableSummary0 . hasSameDisplayName ( variableSummary1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test0 ( ) throws Throwable { AvailabilityState availabilityState0 = new AvailabilityState ( "" ) ; ArrayList < MacawChangeEvent > arrayList0 = AvailabilityState . detectFieldChanges ( ( User ) null , availabilityState0 , availabilityState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > detectFieldChanges ( User user , Category originalCategory , Category revisedCategory ) { return MacawListChoice . detectFieldChanges ( user , "category . saveChanges . changedValue" , originalCategory , revisedCategory ) ; }
void test1 ( ) throws Throwable { AvailabilityState availabilityState0 = new AvailabilityState ( ( - 1454 ) , "sm~ , w~ - " ) ; AvailabilityState availabilityState1 = ( AvailabilityState ) availabilityState0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { AvailabilityState availabilityState0 = new AvailabilityState ( 1 , "" ) ; availabilityState0 . setName ( " { 5lDVV' ? 7 = : 5RQq" ) ; AvailabilityState . validateFields ( availabilityState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test0 ( ) throws Throwable { CleaningState cleaningState0 = new CleaningState ( "" ) ; ArrayList < MacawChangeEvent > arrayList0 = CleaningState . detectFieldChanges ( ( User ) null , cleaningState0 , cleaningState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test1 ( ) throws Throwable { CleaningState cleaningState0 = new CleaningState ( ( - 1454 ) , "sm~ , w~ - " ) ; CleaningState cleaningState1 = ( CleaningState ) cleaningState0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test2 ( ) throws Throwable { CleaningState cleaningState0 = new CleaningState ( 1 , "" ) ; cleaningState0 . setName ( " { 5lDVV' ? 7 = : 5RQq" ) ; CleaningState . validateFields ( cleaningState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayName ( ) { / * * StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( firstName ) ; buffer . append ( " " ) ; buffer . append ( lastName ) ; return buffer . toString ( ) ; * / return userID ; }
void test0 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; DerivedVariable derivedVariable1 = ( DerivedVariable ) derivedVariable0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object clone ( ) { Category cloneCategory = new Category ( ) ; super . cloneAttributes ( cloneCategory ) ; return cloneCategory ; }
void test1 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; derivedVariable0 . addSourceVariable ( ( Variable ) derivedVariable0 ) ; boolean boolean0 = derivedVariable0 . containsSourceVariable ( ( Variable ) derivedVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsSourceVariable ( Variable targetVariable ) { int targetIdentifier = targetVariable . getIdentifier ( ) ; for ( Variable sourceVariable : sourceVariables ) { int currentIdentifier = sourceVariable . getIdentifier ( ) ; if ( targetIdentifier = = currentIdentifier ) { return true ; } } return false ; }
void test2 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; ArrayList < Variable > arrayList0 = derivedVariable0 . getSourceVariables ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test3 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; User user0 = new User ( "UNABLE_TO_CHECK_VALUE_LABEL_DUPLICATES" , "UNABLE_TO_CHECK_VALUE_LABEL_DUPLICATES" ) ; ArrayList < MacawChangeEvent > arrayList0 = DerivedVariable . detectFieldChanges ( user0 , derivedVariable0 , derivedVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test4 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; derivedVariable0 . removeSourceVariable ( ( Variable ) derivedVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCleaningDescription ( ) { return oldCleaningDescription ; }
void test5 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; DerivedVariable derivedVariable1 = new DerivedVariable ( ) ; derivedVariable0 . addSourceVariable ( ( Variable ) derivedVariable1 ) ; derivedVariable1 . setIdentifier ( 1053 ) ; boolean boolean0 = derivedVariable0 . containsSourceVariable ( ( Variable ) derivedVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsSourceVariable ( Variable targetVariable ) { int targetIdentifier = targetVariable . getIdentifier ( ) ; for ( Variable sourceVariable : sourceVariables ) { int currentIdentifier = sourceVariable . getIdentifier ( ) ; if ( targetIdentifier = = currentIdentifier ) { return true ; } } return false ; }
void test6 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; RawVariable rawVariable0 = new RawVariable ( ) ; derivedVariable0 . setName ( " type = " ) ; boolean boolean0 = derivedVariable0 . hasSameDisplayName ( ( Variable ) rawVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasSameDisplayName ( User user ) { if ( getDisplayName ( ) . equals ( user . getDisplayName ( ) ) = = true ) { return true ; } return false ; }
void test7 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; RawVariable rawVariable0 = new RawVariable ( ) ; boolean boolean0 = derivedVariable0 . hasSameDisplayName ( ( Variable ) rawVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasSameDisplayName ( User user ) { if ( getDisplayName ( ) . equals ( user . getDisplayName ( ) ) = = true ) { return true ; } return false ; }
void test8 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; boolean boolean0 = derivedVariable0 . hasSameDisplayName ( ( Variable ) derivedVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasSameDisplayName ( User user ) { if ( getDisplayName ( ) . equals ( user . getDisplayName ( ) ) = = true ) { return true ; } return false ; }
void test9 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; derivedVariable0 . setName ( " type = " ) ; DerivedVariable . validateFields ( derivedVariable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCleaningDescription ( ) { return oldCleaningDescription ; }
void test0 ( ) throws Throwable { ArrayList < Category > arrayList0 = new ArrayList < Category > ( ) ; Category category0 = new Category ( ) ; arrayList0 . add ( category0 ) ; String [ ] stringArray0 = ConstantConverter . getCategoryChoices ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < Displayable > getCategoryChoices ( ) { ArrayList < Displayable > results = new ArrayList < Displayable > ( ) ; try { ArrayList < Category > categories = database . getCategories ( currentUser ) ; for ( Category currentCategory : categories ) { results . add ( ( Displayable ) currentCategory ) ; } } catch ( MacawException exception ) { Log log = sessionProperties . getLog ( ) ; log . displayErrorDialog ( exception ) ; } return results ; }
void test1 ( ) throws Throwable { ArrayList < AvailabilityState > arrayList0 = new ArrayList < AvailabilityState > ( ) ; AvailabilityState availabilityState0 = new AvailabilityState ( ) ; arrayList0 . add ( availabilityState0 ) ; String [ ] stringArray0 = ConstantConverter . getAvailabilityStatusChoices ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < Displayable > getAvailabilityStatusChoices ( ) { ArrayList < Displayable > results = new ArrayList < Displayable > ( ) ; try { ArrayList < AvailabilityState > availabilityStates = database . getAvailabilityStates ( currentUser ) ; for ( AvailabilityState currentCleaningState : availabilityStates ) { results . add ( ( Displayable ) currentCleaningState ) ; } } catch ( MacawException exception ) { Log log = sessionProperties . getLog ( ) ; log . displayErrorDialog ( exception ) ; } return results ; }
void test2 ( ) throws Throwable { ArrayList < ValueLabel > arrayList0 = new ArrayList < ValueLabel > ( ) ; ValueLabel valueLabel0 = new ValueLabel ( ) ; arrayList0 . add ( valueLabel0 ) ; String [ ] stringArray0 = ConstantConverter . getValueLabels ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < ValueLabel > getValueLabels ( User user , Variable variable ) throws MacawException { checkValidUser ( user ) ; Variable originalVariable = variableManager . getOriginalVariable ( variable ) ; return valueLabelManager . getValueLabels ( user , originalVariable ) ; }
void test0 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCleaned ( ) { return isCleaned . isSelected ( ) ; }
void test1 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test2 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test3 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCoded ( ) { return isCoded ; }
void test4 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCoded ( ) { return isCoded ; }
void test5 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getChangeMessage ( ) { return changeMessage ; }
void test6 ( ) throws Throwable { RawVariable rawVariable0 = new RawVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test7 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCleaned ( ) { return isCleaned . isSelected ( ) ; }
void test8 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addOntologyTerms ( ) { try { / / get selected items int [ ] selectedRowIndices = searchOntologyTermTable . getSelectedRows ( ) ; ArrayList < OntologyTerm > supportingTermsToAssociate = new ArrayList < OntologyTerm > ( ) ; for ( int i = 0 ; i < selectedRowIndices . length ; i + + ) { OntologyTerm ontologyTerm = ontologyTermTableModel . getRow ( selectedRowIndices [ i ] ) ; supportingTermsToAssociate . add ( ontologyTerm ) ; } / / associate documents database . associateOntologyTermsWithVariable ( currentUser , variable , supportingTermsToAssociate ) ; updateList ( ) ; dialog . setVisible ( false ) ; } catch ( MacawException exception ) { Log log = sessionProperties . getLog ( ) ; log . displayErrorDialog ( exception ) ; } }
void test9 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCoded ( ) { return isCoded ; }
void test10 ( ) throws Throwable { RawVariable rawVariable0 = new RawVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCleaned ( ) { return isCleaned . isSelected ( ) ; }
void test11 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCleaned ( ) { return isCleaned . isSelected ( ) ; }
void test12 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test13 ( ) throws Throwable { RawVariable rawVariable0 = new RawVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCleaned ( ) { return isCleaned . isSelected ( ) ; }
void test14 ( ) throws Throwable { RawVariable rawVariable0 = new RawVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test15 ( ) throws Throwable { RawVariable rawVariable0 = new RawVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCleaned ( ) { return isCleaned . isSelected ( ) ; }
void test16 ( ) throws Throwable { RawVariable rawVariable0 = new RawVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCleaned ( ) { return isCleaned . isSelected ( ) ; }
void test17 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test18 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCleaned ( ) { return isCleaned . isSelected ( ) ; }
void test19 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCleaned ( ) { return isCleaned . isSelected ( ) ; }
void test20 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test21 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCleaned ( ) { return isCleaned . isSelected ( ) ; }
void test22 ( ) throws Throwable { RawVariable rawVariable0 = new RawVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test23 ( ) throws Throwable { RawVariable rawVariable0 = new RawVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCleaned ( ) { return isCleaned . isSelected ( ) ; }
void test24 ( ) throws Throwable { RawVariable rawVariable0 = new RawVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test25 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCleaned ( ) { return isCleaned . isSelected ( ) ; }
void test26 ( ) throws Throwable { RawVariable rawVariable0 = new RawVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCleaned ( ) { return isCleaned . isSelected ( ) ; }
void test27 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCoded ( ) { return isCoded ; }
void test28 ( ) throws Throwable { RawVariable rawVariable0 = new RawVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCoded ( ) { return isCoded ; }
void test29 ( ) throws Throwable { User user0 = new User ( "\"" , "\"" ) ; RawVariable rawVariable0 = new RawVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test30 ( ) throws Throwable { RawVariable rawVariable0 = new RawVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCoded ( ) { return isCoded ; }
void test31 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test32 ( ) throws Throwable { RawVariable rawVariable0 = new RawVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCoded ( ) { return isCoded ; }
void test33 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test34 ( ) throws Throwable { DerivedVariable derivedVariable0 = new DerivedVariable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test0 ( ) throws Throwable { AliasFilePath aliasFilePath0 = new AliasFilePath ( ) ; aliasFilePath0 . setIdentifier ( 1155 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test1 ( ) throws Throwable { AliasFilePath aliasFilePath0 = new AliasFilePath ( ) ; String string0 = aliasFilePath0 . getDisplayItemIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test2 ( ) throws Throwable { AliasFilePath aliasFilePath0 = new AliasFilePath ( "dAe ? + nL~ + b * " , "dAe ? + nL~ + b * " ) ; AliasFilePath . validateFields ( aliasFilePath0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test3 ( ) throws Throwable { AliasFilePath aliasFilePath0 = new AliasFilePath ( " ) D821c } = * 2IHC" , " ) D821c } = * 2IHC" ) ; AliasFilePath aliasFilePath1 = ( AliasFilePath ) aliasFilePath0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlias ( ) { return alias ; }
void test4 ( ) throws Throwable { AliasFilePath aliasFilePath0 = new AliasFilePath ( " ) D821c } = * 2IHC" , " ) D821c } = * 2IHC" ) ; String string0 = aliasFilePath0 . getDisplayName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test5 ( ) throws Throwable { AliasFilePath aliasFilePath0 = new AliasFilePath ( " ) D821c } = * 2IHC" , " ) D821c } = * 2IHC" ) ; aliasFilePath0 . setNewRecord ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test6 ( ) throws Throwable { AliasFilePath aliasFilePath0 = new AliasFilePath ( ) ; User user0 = new User ( "0" , "0" ) ; ArrayList < MacawChangeEvent > arrayList0 = AliasFilePath . detectFieldChanges ( user0 , aliasFilePath0 , aliasFilePath0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test7 ( ) throws Throwable { User user0 = new User ( ) ; AliasFilePath aliasFilePath0 = new AliasFilePath ( " ? D . < " , " ? D . < " ) ; AliasFilePath aliasFilePath1 = new AliasFilePath ( ) ; ArrayList < MacawChangeEvent > arrayList0 = AliasFilePath . detectFieldChanges ( user0 , aliasFilePath0 , aliasFilePath1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test8 ( ) throws Throwable { AliasFilePath aliasFilePath0 = new AliasFilePath ( ) ; AliasFilePath . validateFields ( aliasFilePath0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test0 ( ) throws Throwable { Category category0 = new Category ( ( - 1454 ) , "sm~ , w~ - " ) ; Category category1 = ( Category ) category0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test1 ( ) throws Throwable { Category category0 = new Category ( "" ) ; ArrayList < MacawChangeEvent > arrayList0 = Category . detectFieldChanges ( ( User ) null , category0 , category0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < MacawChangeEvent > detectFieldChanges ( User user , Category originalCategory , Category revisedCategory ) { return MacawListChoice . detectFieldChanges ( user , "category . saveChanges . changedValue" , originalCategory , revisedCategory ) ; }
void test2 ( ) throws Throwable { Category category0 = new Category ( 1 , "" ) ; category0 . setName ( " { 5lDVV' ? 7 = : 5RQq" ) ; Category . validateFields ( category0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayName ( ) { / * * StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( firstName ) ; buffer . append ( " " ) ; buffer . append ( lastName ) ; return buffer . toString ( ) ; * / return userID ; }
void test0 ( ) throws Throwable { User user0 = new User ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test1 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENIFIER" , "UNABLE_TO_GET_VARIABLE_IDENIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test2 ( ) throws Throwable { User user0 = new User ( " > @w" , " > @w" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test3 ( ) throws Throwable { User user0 = new User ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test4 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENTIFIER" , "UNABLE_TO_GET_VARIABLE_IDENTIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test5 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENTIFIER" , "UNABLE_TO_GET_VARIABLE_IDENTIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test6 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENTIFIER" , "UNABLE_TO_GET_VARIABLE_IDENTIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test7 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_S9c > CE_VARIABLES" , "UNABLE_TO_GET_S9c > CE_VARIABLES" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test8 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_S9c > CE_VARIABLES" , "UNABLE_TO_GET_S9c > CE_VARIABLES" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test9 ( ) throws Throwable { User user0 = new User ( " > @w" , " > @w" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test10 ( ) throws Throwable { User user0 = new User ( " > @w" , " > @w" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test11 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENTIFIER" , "UNABLE_TO_GET_VARIABLE_IDENTIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test12 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENTIFIER" , "UNABLE_TO_GET_VARIABLE_IDENTIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test13 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENTIFIER" , "UNABLE_TO_GET_VARIABLE_IDENTIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test14 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENIFIER" , "UNABLE_TO_GET_VARIABLE_IDENIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test15 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENTIFIER" , "UNABLE_TO_GET_VARIABLE_IDENTIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test20 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENIFIER" , "UNABLE_TO_GET_VARIABLE_IDENIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test21 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENTIFIER" , "UNABLE_TO_GET_VARIABLE_IDENTIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test22 ( ) throws Throwable { User user0 = new User ( " = 1xiuyl" , " = 1xiuyl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test23 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENIFIER" , "UNABLE_TO_GET_VARIABLE_IDENIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test24 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENTIFIER" , "UNABLE_TO_GET_VARIABLE_IDENTIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test25 ( ) throws Throwable { User user0 = new User ( " > @w" , " > @w" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test26 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENIFIER" , "UNABLE_TO_GET_VARIABLE_IDENIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test27 ( ) throws Throwable { User user0 = new User ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test28 ( ) throws Throwable { User user0 = new User ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test29 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENIFIER" , "UNABLE_TO_GET_VARIABLE_IDENIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test30 ( ) throws Throwable { User user0 = new User ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test31 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENIFIER" , "UNABLE_TO_GET_VARIABLE_IDENIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test32 ( ) throws Throwable { User user0 = new User ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test33 ( ) throws Throwable { User user0 = new User ( " > @w" , " > @w" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test34 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENIFIER" , "UNABLE_TO_GET_VARIABLE_IDENIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test35 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENIFIER" , "UNABLE_TO_GET_VARIABLE_IDENIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test36 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENTIFIER" , "UNABLE_TO_GET_VARIABLE_IDENTIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test37 ( ) throws Throwable { User user0 = new User ( " = 1xiuyl" , " = 1xiuyl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test38 ( ) throws Throwable { User user0 = new User ( "UNABLE_TO_GET_VARIABLE_IDENTIFIER" , "UNABLE_TO_GET_VARIABLE_IDENTIFIER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test39 ( ) throws Throwable { User user0 = new User ( " , xhe , / hN9QMd" , " , xhe , / hN9QMd" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void validateFields ( Category category ) throws MacawException { ArrayList < String > errorMessages = MacawListChoice . validateFields ( category ) ; if ( errorMessages . size ( ) > 0 ) { MacawException exception = new MacawException ( ) ; for ( String errorMessage : errorMessages ) { exception . addErrorMessage ( MacawErrorType . INVALID_CATEGORY , errorMessage ) ; } throw exception ; } }
void test0 ( ) throws Throwable { AvailabilityState availabilityState0 = new AvailabilityState ( ) ; boolean boolean0 = availabilityState0 . isNewRecord ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewRecord ( ) { if ( editingOperationType = = EditingOperationType . NEW ) { return true ; } return false ; }
void test1 ( ) throws Throwable { Category category0 = new Category ( 0 , "" ) ; int int0 = category0 . getIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIdentifier ( ) { return identifier ; }
void test2 ( ) throws Throwable { AvailabilityState availabilityState0 = new AvailabilityState ( "user . addressLine2 . saveChanges" ) ; String string0 = availabilityState0 . getDisplayItemIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewRecord ( ) { if ( editingOperationType = = EditingOperationType . NEW ) { return true ; } return false ; }
void test3 ( ) throws Throwable { AvailabilityState availabilityState0 = new AvailabilityState ( "user . addressLine2 . saveChanges" ) ; String string0 = availabilityState0 . getDisplayName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewRecord ( ) { if ( editingOperationType = = EditingOperationType . NEW ) { return true ; } return false ; }
void test4 ( ) throws Throwable { AvailabilityState availabilityState0 = new AvailabilityState ( "user . addressLine2 . saveChanges" ) ; AvailabilityState . validateFields ( availabilityState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewRecord ( ) { if ( editingOperationType = = EditingOperationType . NEW ) { return true ; } return false ; }
void test5 ( ) throws Throwable { Category category0 = new Category ( 0 , "" ) ; Category category1 = ( Category ) category0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplayItemIdentifier ( ) { return String . valueOf ( identifier ) ; }
void test7 ( ) throws Throwable { AvailabilityState availabilityState0 = new AvailabilityState ( "user . addressLine2 . saveChanges" ) ; CleaningState cleaningState0 = new CleaningState ( "user . addressLine2 . saveChanges" ) ; User user0 = new User ( ) ; ArrayList < MacawChangeEvent > arrayList0 = MacawListChoice . detectFieldChanges ( user0 , "user . firstName . label" , ( MacawListChoice ) availabilityState0 , ( MacawListChoice ) cleaningState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewRecord ( ) { if ( editingOperationType = = EditingOperationType . NEW ) { return true ; } return false ; }
void test8 ( ) throws Throwable { AvailabilityState availabilityState0 = new AvailabilityState ( ) ; User user0 = new User ( ) ; AvailabilityState availabilityState1 = new AvailabilityState ( " , * NhS ( " ) ; ArrayList < MacawChangeEvent > arrayList0 = AvailabilityState . detectFieldChanges ( user0 , availabilityState1 , availabilityState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test9 ( ) throws Throwable { AvailabilityState availabilityState0 = new AvailabilityState ( ) ; CleaningState cleaningState0 = new CleaningState ( " < 7a4Z" ) ; boolean boolean0 = availabilityState0 . hasSameDisplayName ( ( MacawListChoice ) cleaningState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewRecord ( ) { if ( editingOperationType = = EditingOperationType . NEW ) { return true ; } return false ; }
void test10 ( ) throws Throwable { AvailabilityState availabilityState0 = new AvailabilityState ( ) ; CleaningState cleaningState0 = new CleaningState ( "" ) ; boolean boolean0 = availabilityState0 . hasSameDisplayName ( ( MacawListChoice ) cleaningState0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewRecord ( ) { if ( editingOperationType = = EditingOperationType . NEW ) { return true ; } return false ; }
void test1 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DefaultEditorKit . BeepAction defaultEditorKit_BeepAction0 = new DefaultEditorKit . BeepAction ( ) ; OKClosePanel oKClosePanel0 = new OKClosePanel ( userInterfaceFactory0 , ( ActionListener ) defaultEditorKit_BeepAction0 ) ; JPanel jPanel0 = oKClosePanel0 . getPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JPanel getPanel ( ) { return panel ; }
void test2 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; StyledEditorKit . ItalicAction styledEditorKit_ItalicAction0 = new StyledEditorKit . ItalicAction ( ) ; OKClosePanel oKClosePanel0 = new OKClosePanel ( userInterfaceFactory0 , ( ActionListener ) styledEditorKit_ItalicAction0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JButton getSaveButton ( ) { return ok ; }
void test4 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; OKClosePanel oKClosePanel0 = new OKClosePanel ( userInterfaceFactory0 , ( ActionListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JButton getCloseButton ( ) { return close ; }
void test0 ( ) throws Throwable { SearchUtility searchUtility0 = new SearchUtility ( "@y6HSX } " ) ; boolean boolean0 = searchUtility0 . valueExactlyMatches ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean valueExactlyMatches ( String value ) { if ( value = = null ) return false ; return filterValue . equals ( value . toUpperCase ( ) ) ; }
void test1 ( ) throws Throwable { SearchUtility searchUtility0 = new SearchUtility ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean valueExactlyMatches ( String value ) { if ( value = = null ) return false ; return filterValue . equals ( value . toUpperCase ( ) ) ; }
void test2 ( ) throws Throwable { SearchUtility searchUtility0 = new SearchUtility ( "@y6HSX } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean valueContainsPattern ( String value ) { if ( value = = null ) return false ; Matcher matcher = pattern . matcher ( value . toUpperCase ( ) ) ; return matcher . matches ( ) ; }
void test3 ( ) throws Throwable { SearchUtility searchUtility0 = new SearchUtility ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean valueContainsPattern ( String value ) { if ( value = = null ) return false ; Matcher matcher = pattern . matcher ( value . toUpperCase ( ) ) ; return matcher . matches ( ) ; }
void test1 ( ) throws Throwable { WindowSizeListener windowSizeListener0 = new WindowSizeListener ( ) ; DefaultEditorKit . DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit . DefaultKeyTypedAction ( ) ; JToggleButton jToggleButton0 = new JToggleButton ( ( Action ) defaultEditorKit_DefaultKeyTypedAction0 ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) jToggleButton0 , 1 , ( - 1L ) , 0 , 1 , 1 , 1 , 1 , 1 , false , 1 ) ; windowSizeListener0 . componentMoved ( ( ComponentEvent ) mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void componentMoved ( ComponentEvent event ) { }
void test2 ( ) throws Throwable { WindowSizeListener windowSizeListener0 = new WindowSizeListener ( ) ; DefaultEditorKit . DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit . DefaultKeyTypedAction ( ) ; JToggleButton jToggleButton0 = new JToggleButton ( ( Action ) defaultEditorKit_DefaultKeyTypedAction0 ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) jToggleButton0 , 1 , ( - 1L ) , 0 , 1 , 1 , 1 , 1 , 1 , false , 1 ) ; windowSizeListener0 . componentHidden ( ( ComponentEvent ) mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void componentHidden ( ComponentEvent event ) { }
void test3 ( ) throws Throwable { WindowSizeListener windowSizeListener0 = new WindowSizeListener ( ) ; DefaultEditorKit . DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit . DefaultKeyTypedAction ( ) ; JToggleButton jToggleButton0 = new JToggleButton ( ( Action ) defaultEditorKit_DefaultKeyTypedAction0 ) ; FocusEvent focusEvent0 = new FocusEvent ( ( Component ) jToggleButton0 , 1 , false , ( Component ) jToggleButton0 ) ; windowSizeListener0 . componentResized ( ( ComponentEvent ) focusEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void componentResized ( ComponentEvent event ) { / / this is the only method we really care about . / / used to help find the best fixed size of windows / / during prototyping Component component = event . getComponent ( ) ; }
void test0 ( ) throws Throwable { boolean boolean0 = ValidationUtility . isValidEmail ( " 0 - , \u0000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValidEmail ( String value ) { / / allows whitespace , a - zA - Z_0 - 9 , and the characters - and , String emailExpression = "^ [ \\w\\ - \\ + \\ & \\ * ] + ( ? : \\ . [ \\w\\ - \\_\\ + \\ & \\ * ] + ) * @ ( ? : [ \\w - ] + \\ . ) + [ a - zA - Z ] { 2 , 7 } $" ; Pattern pattern = Pattern . compile ( emailExpression ) ; Matcher matcher = pattern . matcher ( value ) ; return matcher . matches ( ) ; }
void test1 ( ) throws Throwable { boolean boolean0 = ValidationUtility . isUnknown ( " 0 - , \u0000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isUnknown ( String value ) { String unknownMessage = MacawMessages . getMessage ( "general . fieldValue . unknown" ) ; return unknownMessage . equals ( value ) ; }
void test2 ( ) throws Throwable { boolean boolean0 = ValidationUtility . isBlank ( " 0 - , \u0000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBlank ( String value ) { return ( value . equals ( "" ) ) ; }
void test3 ( ) throws Throwable { String string0 = ValidationUtility . convertEmptyValueToBlank ( "tmnRr" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertEmptyValueToBlank ( String value ) { if ( value . equals ( "" ) = = true ) { return MacawMessages . getMessage ( "general . fieldValue . blank" ) ; } else { return value ; } }
void test4 ( ) throws Throwable { String string0 = ValidationUtility . convertEmptyValueToBlank ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String convertEmptyValueToBlank ( String value ) { if ( value . equals ( "" ) = = true ) { return MacawMessages . getMessage ( "general . fieldValue . blank" ) ; } else { return value ; } }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; boolean boolean0 = ValidationUtility . duplicateNameExists ( "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean duplicateNameExists ( String candidateName , String [ ] duplicateNames ) { for ( int i = 0 ; i < duplicateNames . length ; i + + ) { if ( candidateName . equals ( duplicateNames [ i ] ) = = true ) { return true ; } } return false ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "" ; boolean boolean0 = ValidationUtility . duplicateNameExists ( "" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean duplicateNameExists ( String candidateName , String [ ] duplicateNames ) { for ( int i = 0 ; i < duplicateNames . length ; i + + ) { if ( candidateName . equals ( duplicateNames [ i ] ) = = true ) { return true ; } } return false ; }
void test7 ( ) throws Throwable { String string0 = ValidationUtility . removeNullStrings ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeNullStrings ( String value ) { if ( value = = null ) { return "" ; } else { return value ; } }
void test8 ( ) throws Throwable { String string0 = ValidationUtility . removeNullStrings ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeNullStrings ( String value ) { if ( value = = null ) { return "" ; } else { return value ; } }
void test9 ( ) throws Throwable { boolean boolean0 = ValidationUtility . promotesSecurityRisk ( " 0 - , \u0000" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promotesSecurityRisk ( String value ) { / / allows whitespace , a - zA - Z_0 - 9 , and the characters - and , Pattern pattern = Pattern . compile ( " [ \\s\\w - , . ] * " ) ; Matcher matcher = pattern . matcher ( value ) ; return ! matcher . matches ( ) ; }
void test10 ( ) throws Throwable { boolean boolean0 = ValidationUtility . promotesSecurityRisk ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promotesSecurityRisk ( String value ) { / / allows whitespace , a - zA - Z_0 - 9 , and the characters - and , Pattern pattern = Pattern . compile ( " [ \\s\\w - , . ] * " ) ; Matcher matcher = pattern . matcher ( value ) ; return ! matcher . matches ( ) ; }
void test11 ( ) throws Throwable { boolean boolean0 = ValidationUtility . isEmptyValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmptyValue ( String value ) { if ( value = = null ) { return true ; } if ( value . equals ( "" ) = = true ) { return true ; } return false ; }
void test12 ( ) throws Throwable { boolean boolean0 = ValidationUtility . isEmptyValue ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmptyValue ( String value ) { if ( value = = null ) { return true ; } if ( value . equals ( "" ) = = true ) { return true ; } return false ; }
void test13 ( ) throws Throwable { boolean boolean0 = ValidationUtility . isEmptyValue ( "e * [ Tr { lxu4%0tV9" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmptyValue ( String value ) { if ( value = = null ) { return true ; } if ( value . equals ( "" ) = = true ) { return true ; } return false ; }
void test0 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test1 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; JScrollPane jScrollPane0 = displayableList0 . getListScrollPane ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JScrollPane getListScrollPane ( ) { return scrollPane ; }
void test2 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; boolean boolean0 = displayableList0 . containsDisplayName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsDisplayName ( String displayName ) { return listData . contains ( displayName ) ; }
void test3 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test4 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; ArrayList < Displayable > arrayList0 = new ArrayList < Displayable > ( ) ; User user0 = new User ( "UNABLE_TO_GET_CHANGES_FOR_VARIABLE" , "UNABLE_TO_GET_CHANGES_FOR_VARIABLE" ) ; arrayList0 . add ( ( Displayable ) user0 ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 , arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test5 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test6 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean itemsAreSelected ( ) { if ( isEmpty ( ) = = true ) { return false ; } Object [ ] selectedDisplayNames = ( Object [ ] ) list . getSelectedValues ( ) ; if ( selectedDisplayNames . length = = 0 ) { return false ; } else { return true ; } }
void test7 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean itemsAreSelected ( ) { if ( isEmpty ( ) = = true ) { return false ; } Object [ ] selectedDisplayNames = ( Object [ ] ) list . getSelectedValues ( ) ; if ( selectedDisplayNames . length = = 0 ) { return false ; } else { return true ; } }
void test8 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test9 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; ArrayList < Displayable > arrayList0 = displayableList0 . getAllItems ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < Displayable > getAllItems ( ) { ArrayList < Displayable > allItems = new ArrayList < Displayable > ( ) ; Enumeration elements = listData . elements ( ) ; while ( elements . hasMoreElements ( ) ) { String currentDisplayName = ( String ) elements . nextElement ( ) ; Displayable selectedItem = ( Displayable ) itemFromDisplayName . get ( currentDisplayName ) ; allItems . add ( selectedItem ) ; } return allItems ; }
void test10 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean itemsAreSelected ( ) { if ( isEmpty ( ) = = true ) { return false ; } Object [ ] selectedDisplayNames = ( Object [ ] ) list . getSelectedValues ( ) ; if ( selectedDisplayNames . length = = 0 ) { return false ; } else { return true ; } }
void test11 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; Displayable displayable0 = displayableList0 . getSelectedItem ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Displayable getSelectedItem ( ) { String selectedDisplayName = ( String ) list . getSelectedValue ( ) ; if ( selectedDisplayName = = null ) { return null ; } Displayable selectedItem = ( Displayable ) itemFromDisplayName . get ( selectedDisplayName ) ; return selectedItem ; }
void test12 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean itemsAreSelected ( ) { if ( isEmpty ( ) = = true ) { return false ; } Object [ ] selectedDisplayNames = ( Object [ ] ) list . getSelectedValues ( ) ; if ( selectedDisplayNames . length = = 0 ) { return false ; } else { return true ; } }
void test13 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test14 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test15 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean itemsAreSelected ( ) { if ( isEmpty ( ) = = true ) { return false ; } Object [ ] selectedDisplayNames = ( Object [ ] ) list . getSelectedValues ( ) ; if ( selectedDisplayNames . length = = 0 ) { return false ; } else { return true ; } }
void test16 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test17 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
void test18 ( ) throws Throwable { UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory ( ) ; DisplayableList displayableList0 = new DisplayableList ( userInterfaceFactory0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { if ( listData . size ( ) = = 0 ) { return true ; } else { return false ; } }
