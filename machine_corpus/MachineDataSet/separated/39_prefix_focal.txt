void test0 ( ) throws Throwable { RelativeString relativeString0 = StringIncrementor . diff ( "1p ? ^D2nyAYgC`" , "1p ? ^D2nyAYgC`1p ? ^D2nyAYgC`" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int linksCount ( ) { return links . size ( ) ; }
void test1 ( ) throws Throwable { RelativeString relativeString0 = StringIncrementor . diff ( "1p ? ^D2nyAYgC`" , "1p ? ^D2nyAYgC`" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int linksCount ( ) { return links . size ( ) ; }
void test2 ( ) throws Throwable { StringIncrementor stringIncrementor0 = new StringIncrementor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { RelativeString relativeString0 = StringIncrementor . diff ( "k@xWQ i17 : 2 ) qZyrbx" , "Q . x6sb\" = OXSvoDx" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int linksCount ( ) { return links . size ( ) ; }
void test5 ( ) throws Throwable { RelativeString relativeString0 = StringIncrementor . diff ( "k@xWQ i17 : 2 ) qZyrbx" , "k@xWQ i17 : 2 ) qZyrbx" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAbsolute ( ) { return absolute ; }
void test8 ( ) throws Throwable { RelativeString relativeString0 = StringIncrementor . diff ( "1p ? ^D2nyAYgC`" , "1p ? ^D2nyAYgC`" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAbsolute ( ) { return absolute ; }
void test0 ( ) throws Throwable { RelativeString relativeString0 = new RelativeString ( ) ; relativeString0 . setAbsolute ( "K ( 'sAomq [ P ) & M7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLength ( ) { int result = absolute . length ( ) ; for ( int i = 0 ; i < links . size ( ) ; i + + ) { result + = ( links . elementAt ( i ) . getLen ( ) ) ; } return result ; }
void test2 ( ) throws Throwable { RelativeString relativeString0 = new RelativeString ( ) ; String string0 = relativeString0 . getAbsolute ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAbsolute ( ) { return absolute ; }
void test4 ( ) throws Throwable { RelativeString relativeString0 = new RelativeString ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 389 ) ; relativeString0 . bytesToStream ( ( OutputStream ) byteArrayOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return linksCount ( ) + " links , " + absolute . length ( ) + " absolute chars ( " + ( 8 + absolute . length ( ) + linksCount ( ) * 12 ) + " Bytes ^ = - " + bytessaved ( ) + "Bytes ) " ; }
void test0 ( ) throws Throwable { StringLink stringLink0 = new StringLink ( 739 , 0 , 0 ) ; int int0 = stringLink0 . getLen ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return linksCount ( ) + " links , " + absolute . length ( ) + " absolute chars ( " + ( 8 + absolute . length ( ) + linksCount ( ) * 12 ) + " Bytes ^ = - " + bytessaved ( ) + "Bytes ) " ; }
void test1 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; StringLink stringLink0 = new StringLink ( byteArray0 ) ; int int0 = stringLink0 . getPosOrig ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosOrig ( ) { return posOrig ; }
void test2 ( ) throws Throwable { StringLink stringLink0 = new StringLink ( 739 , 0 , 0 ) ; String string0 = stringLink0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return linksCount ( ) + " links , " + absolute . length ( ) + " absolute chars ( " + ( 8 + absolute . length ( ) + linksCount ( ) * 12 ) + " Bytes ^ = - " + bytessaved ( ) + "Bytes ) " ; }
void test3 ( ) throws Throwable { StringLink stringLink0 = new StringLink ( 739 , 0 , 0 ) ; byte [ ] byteArray0 = stringLink0 . toBytes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return linksCount ( ) + " links , " + absolute . length ( ) + " absolute chars ( " + ( 8 + absolute . length ( ) + linksCount ( ) * 12 ) + " Bytes ^ = - " + bytessaved ( ) + "Bytes ) " ; }
void test4 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 6 ] ; StringLink stringLink0 = new StringLink ( byteArray0 ) ; int int0 = stringLink0 . getPosNew ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPosNew ( ) { return posNew ; }
void test0 ( ) throws Throwable { ExtBoolArray extBoolArray0 = new ExtBoolArray ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int left ( ) { int result = 0 ; for ( int i = 0 ; i < werte . length ; i + + ) { if ( ! werte [ i ] ) { result + + ; } } return result ; }
void test1 ( ) throws Throwable { ExtBoolArray extBoolArray0 = new ExtBoolArray ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int left ( ) { int result = 0 ; for ( int i = 0 ; i < werte . length ; i + + ) { if ( ! werte [ i ] ) { result + + ; } } return result ; }
void test2 ( ) throws Throwable { ExtBoolArray extBoolArray0 = new ExtBoolArray ( 200 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int left ( ) { int result = 0 ; for ( int i = 0 ; i < werte . length ; i + + ) { if ( ! werte [ i ] ) { result + + ; } } return result ; }
void test3 ( ) throws Throwable { ExtBoolArray extBoolArray0 = new ExtBoolArray ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int left ( ) { int result = 0 ; for ( int i = 0 ; i < werte . length ; i + + ) { if ( ! werte [ i ] ) { result + + ; } } return result ; }
void test0 ( ) throws Throwable { IndexedString indexedString0 = new IndexedString ( "y { - R | j3u% . xN^ } " ) ; char [ ] charArray0 = new char [ 7 ] ; charArray0 [ 0 ] = ' } ' ; int int0 = indexedString0 . indexOf ( charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int indexOf ( char [ ] target ) { char first = target [ 0 ] ; int tl = target . length ; int max = values . length - tl ; int [ ] idxa = index [ first ] ; int idxl = idxa . length ; int j ; int end ; for ( int idx = 0 ; idx < idxl ; idx + + ) { / * Look for first character . * / int i = idxa [ idx ] ; / * Found first character , now look at the rest of v2 * / if ( i < = max ) { j = i + 1 ; end = i + tl ; for ( int k = 1 ; j < end & & values [ j ] = = target [ k ] ; j + + , k + + ) { ; } if ( j = = end ) { / * Found whole string . * / return i ; } } } return - 1 ; }
void test1 ( ) throws Throwable { IndexedString indexedString0 = new IndexedString ( "DemV#s^J0vqQL0b" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int indexOf ( char [ ] target ) { char first = target [ 0 ] ; int tl = target . length ; int max = values . length - tl ; int [ ] idxa = index [ first ] ; int idxl = idxa . length ; int j ; int end ; for ( int idx = 0 ; idx < idxl ; idx + + ) { / * Look for first character . * / int i = idxa [ idx ] ; / * Found first character , now look at the rest of v2 * / if ( i < = max ) { j = i + 1 ; end = i + tl ; for ( int k = 1 ; j < end & & values [ j ] = = target [ k ] ; j + + , k + + ) { ; } if ( j = = end ) { / * Found whole string . * / return i ; } } } return - 1 ; }
void test2 ( ) throws Throwable { IndexedString indexedString0 = new IndexedString ( " } 7 * x4 = Yl# : St^QuQuX" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int indexOf ( char [ ] target ) { char first = target [ 0 ] ; int tl = target . length ; int max = values . length - tl ; int [ ] idxa = index [ first ] ; int idxl = idxa . length ; int j ; int end ; for ( int idx = 0 ; idx < idxl ; idx + + ) { / * Look for first character . * / int i = idxa [ idx ] ; / * Found first character , now look at the rest of v2 * / if ( i < = max ) { j = i + 1 ; end = i + tl ; for ( int k = 1 ; j < end & & values [ j ] = = target [ k ] ; j + + , k + + ) { ; } if ( j = = end ) { / * Found whole string . * / return i ; } } } return - 1 ; }
void test0 ( ) throws Throwable { StringFromFile stringFromFile0 = new StringFromFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Option option0 = new Option ( "" , " - " ) ; String string0 = option0 . getBeschriebung ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultv ( ) { return mdefaultv ; }
void test1 ( ) throws Throwable { Option option0 = new Option ( "" , " - " ) ; String string0 = option0 . getDefaultv ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHasArg ( ) { return mhasArg ; }
void test2 ( ) throws Throwable { Option option0 = new Option ( "" , " - " ) ; boolean boolean0 = option0 . isIsSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return mname ; }
void test3 ( ) throws Throwable { Option option0 = new Option ( "" , "#LSg = " , true , "" , "" ) ; boolean boolean0 = option0 . isHasArg ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultv ( ) { return mdefaultv ; }
void test4 ( ) throws Throwable { Option option0 = new Option ( "h$ * hrL8 : 5Eq $wCg#k" , "h$ * hrL8 : 5Eq $wCg#k" ) ; String string0 = option0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHasArg ( ) { return mhasArg ; }
void test5 ( ) throws Throwable { Option option0 = new Option ( "" , " - " ) ; String string0 = option0 . getDelim ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return mname ; }
void test8 ( ) throws Throwable { Option option0 = new Option ( "" , true , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHasArg ( ) { return mhasArg ; }
void test9 ( ) throws Throwable { Option option0 = new Option ( "'P ? * % ) ( " ) ; boolean boolean0 = option0 . is ( "XGFy" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHasArg ( ) { return mhasArg ; }
void test10 ( ) throws Throwable { Option option0 = new Option ( "" , "#LSg = " , true , "" , "" ) ; boolean boolean0 = option0 . is ( "#LSg = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultv ( ) { return mdefaultv ; }
void test11 ( ) throws Throwable { Option option0 = new Option ( "" , " - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isIsSet ( ) { return misSet ; }
void test12 ( ) throws Throwable { Option option0 = new Option ( "4T^fj + H ; 0 ) RS" , true , "4T^fj + H ; 0 ) RS" , "4T^fj + H ; 0 ) RS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void parse ( String [ ] args ) { argloop : for ( String s : args ) { for ( Option o : options ) { if ( o . is ( s ) ) { o . parse ( s ) ; continue argloop ; } } } }
void test0 ( ) throws Throwable { Option [ ] optionArray0 = new Option [ 5 ] ; Option option0 = new Option ( "wl & `z9X . " ) ; CommandLine commandLine0 = new CommandLine ( optionArray0 ) ; commandLine0 . addOption ( option0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultv ( ) { return mdefaultv ; }
void test1 ( ) throws Throwable { FileDiffPatch fileDiffPatch0 = new FileDiffPatch ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
