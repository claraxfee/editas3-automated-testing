void test0 ( ) throws Throwable { Address address0 = new Address ( ) ; String string0 = address0 . getZip ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getZip ( ) { return zip ; }
void test1 ( ) throws Throwable { Address address0 = new Address ( ) ; String string0 = address0 . getCity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCity ( ) { return city ; }
void test2 ( ) throws Throwable { Address address0 = new Address ( ) ; String string0 = address0 . getStreet2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStreet2 ( ) { return street2 ; }
void test3 ( ) throws Throwable { Address address0 = new Address ( ) ; String string0 = address0 . getState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) { return state ; }
void test4 ( ) throws Throwable { Address address0 = new Address ( ) ; address0 . setStreet2 ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) { return state ; }
void test5 ( ) throws Throwable { Address address0 = new Address ( ) ; String string0 = address0 . getStreet1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStreet1 ( ) { return street1 ; }
void test6 ( ) throws Throwable { Address address0 = new Address ( ) ; address0 . setCity ( "eyB^3 = v'zQ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getZip ( ) { return zip ; }
void test7 ( ) throws Throwable { Address address0 = new Address ( ) ; address0 . setState ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStreet1 ( ) { return street1 ; }
void test8 ( ) throws Throwable { Address address0 = new Address ( ) ; address0 . setStreet1 ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getZip ( ) { return zip ; }
void test9 ( ) throws Throwable { Address address0 = new Address ( ) ; address0 . setZip ( "PVMDHw + n 7C" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getZip ( ) { return zip ; }
void test2 ( ) throws Throwable { LuceneSearcher luceneSearcher0 = new LuceneSearcher ( ) ; LuceneDocumentFactory luceneDocumentFactory0 = luceneSearcher0 . getLuceneDocumentFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LuceneDocumentFactory getLuceneDocumentFactory ( ) { return luceneDocumentFactory ; }
void test0 ( ) throws Throwable { OfflineLuceneIndexer offlineLuceneIndexer0 = new OfflineLuceneIndexer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { AddPet addPet0 = new AddPet ( ) ; addPet0 . addFieldError ( "" , "" ) ; String string0 = addPet0 . execute ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String execute ( ) { if ( ua . authenticate ( username , password ) ) { ActionContext . getContext ( ) . getSession ( ) . put ( LoginFilter . LOGIN_KEY , username ) ; return SUCCESS ; } else { addFieldError ( "username" , "Invalid username or password - please retry . " ) ; return ERROR ; } }
void test0 ( ) throws Throwable { MoneyConverter moneyConverter0 = new MoneyConverter ( ) ; HashMap < Integer , BigDecimal > hashMap0 = new HashMap < Integer , BigDecimal > ( ) ; Class < ? > class0 = MoneyConverter . class ; Object object0 = moneyConverter0 . convertValue ( ( Map ) hashMap0 , ( Object ) "precision = 0 roundingMode = HALF_UP" , ( Member ) null , "UP" , ( Object ) " - 900 . 5749482720567584692616946995258331298828125" , ( Class ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convertValue ( Map context , Object object , Class toType ) { DecimalFormat format = new DecimalFormat ( "$#0 . 00" ) ; if ( toType = = String . class ) { BigDecimal d = ( BigDecimal ) object ; if ( d = = null ) { d = new BigDecimal ( 0 ) ; } return format . format ( d . doubleValue ( ) ) ; } else if ( toType = = BigDecimal . class ) { String s = ( ( String [ ] ) object ) [ 0 ] ; try { return new BigDecimal ( format . parse ( s ) . doubleValue ( ) ) ; } catch ( ParseException e ) { DecimalFormat backup = new DecimalFormat ( "#0 . 00" ) ; try { return new BigDecimal ( backup . parse ( s ) . doubleValue ( ) ) ; } catch ( ParseException e1 ) { } } } return null ; }
void test1 ( ) throws Throwable { MoneyConverter moneyConverter0 = new MoneyConverter ( ) ; HashMap < Object , Integer > hashMap0 = new HashMap < Object , Integer > ( ) ; BigDecimal bigDecimal0 = BigDecimal . ZERO ; Class < ? > class0 = String . class ; String string0 = ( String ) moneyConverter0 . convertValue ( ( Map ) hashMap0 , ( Object ) bigDecimal0 , ( Class ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convertValue ( Map context , Object object , Class toType ) { DecimalFormat format = new DecimalFormat ( "$#0 . 00" ) ; if ( toType = = String . class ) { BigDecimal d = ( BigDecimal ) object ; if ( d = = null ) { d = new BigDecimal ( 0 ) ; } return format . format ( d . doubleValue ( ) ) ; } else if ( toType = = BigDecimal . class ) { String s = ( ( String [ ] ) object ) [ 0 ] ; try { return new BigDecimal ( format . parse ( s ) . doubleValue ( ) ) ; } catch ( ParseException e ) { DecimalFormat backup = new DecimalFormat ( "#0 . 00" ) ; try { return new BigDecimal ( backup . parse ( s ) . doubleValue ( ) ) ; } catch ( ParseException e1 ) { } } } return null ; }
void test2 ( ) throws Throwable { MoneyConverter moneyConverter0 = new MoneyConverter ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; Class < ? > class0 = String . class ; String string0 = ( String ) moneyConverter0 . convertValue ( ( Map ) hashMap0 , ( Object ) null , ( Class ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convertValue ( Map context , Object object , Class toType ) { DecimalFormat format = new DecimalFormat ( "$#0 . 00" ) ; if ( toType = = String . class ) { BigDecimal d = ( BigDecimal ) object ; if ( d = = null ) { d = new BigDecimal ( 0 ) ; } return format . format ( d . doubleValue ( ) ) ; } else if ( toType = = BigDecimal . class ) { String s = ( ( String [ ] ) object ) [ 0 ] ; try { return new BigDecimal ( format . parse ( s ) . doubleValue ( ) ) ; } catch ( ParseException e ) { DecimalFormat backup = new DecimalFormat ( "#0 . 00" ) ; try { return new BigDecimal ( backup . parse ( s ) . doubleValue ( ) ) ; } catch ( ParseException e1 ) { } } } return null ; }
