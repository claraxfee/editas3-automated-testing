void test1 ( ) throws Throwable { Suspender suspender0 = new Suspender ( ) ; Suspender suspender1 = new Suspender ( ( Callback ) suspender0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return myData . equals ( o ) ; }
void test0 ( ) throws Throwable { Object [ ] objectArray0 = ExceptionUtil . toData ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] toData ( Object o ) { return new Object [ ] { o } ; }
void test1 ( ) throws Throwable { Object [ ] objectArray0 = ExceptionUtil . toData ( ( Object ) null , ( Object ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] toData ( Object o ) { return new Object [ ] { o } ; }
void test2 ( ) throws Throwable { ExceptionUtil exceptionUtil0 = new ExceptionUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { Object [ ] objectArray0 = ExceptionUtil . toData ( ( Object ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] toData ( Object o ) { return new Object [ ] { o } ; }
void test6 ( ) throws Throwable { Object [ ] objectArray0 = ExceptionUtil . toData ( ( Object ) null , ( Object ) null , ( Object ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] toData ( Object o ) { return new Object [ ] { o } ; }
void test0 ( ) throws Throwable { DateTimeField dateTimeField0 = new DateTimeField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test1 ( ) throws Throwable { DateTimeField dateTimeField0 = new DateTimeField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test2 ( ) throws Throwable { DateTimeField dateTimeField0 = new DateTimeField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test3 ( ) throws Throwable { DateTimeField dateTimeField0 = new DateTimeField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test0 ( ) throws Throwable { CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; XmlObjectOutputStream xmlObjectOutputStream0 = new XmlObjectOutputStream ( ( Writer ) charArrayWriter0 ) ; xmlObjectOutputStream0 . write ( 649L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { ByteTag byteTag0 = XmlSerializer . BYTE_TAG ; XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; StringWriter stringWriter0 = new StringWriter ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( Writer ) stringWriter0 ) ; byteTag0 . printSimpleValue ( xmlSerializer0 , indentingPrintWriter0 , " } : 9~~J1F" , " } : 9~~J1F" , " } : 9~~J1F" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { IntegerTag integerTag0 = new IntegerTag ( ) ; XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( Writer ) charArrayWriter0 ) ; integerTag0 . write ( xmlSerializer0 , indentingPrintWriter0 , "j } c > Ik + J" , ( Object ) "null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test7 ( ) throws Throwable { ShortTag shortTag0 = XmlSerializer . SHORT_TAG ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) byteArrayOutputStream0 ) ; shortTag0 . printClosingElement ( indentingPrintWriter0 , "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test8 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; String string0 = xmlSerializer0 . STRING_SERIALIZED_TAG . escapeCharacters ( " < R , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String escapeCharacters ( String s ) { String result = s ; if ( - 1 ! = s . indexOf ( ' < ' ) | | - 1 ! = s . indexOf ( ' & ' ) ) { StringBuffer sb = new StringBuffer ( ) ; char [ ] ca = s . toCharArray ( ) ; for ( int i = 0 ; i < ca . length ; i + + ) { if ( ' < ' = = ca [ i ] ) sb . append ( " & lt ; " ) ; else if ( ' & ' = = ca [ i ] ) sb . append ( " & amp ; " ) ; else sb . append ( ca [ i ] ) ; } result = sb . toString ( ) ; } return result ; }
void test9 ( ) throws Throwable { IntegerTag integerTag0 = new IntegerTag ( ) ; String string0 = integerTag0 . escapeCharacters ( "lRImKq'`Yt | , w3I / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String escapeCharacters ( String s ) { String result = s ; if ( - 1 ! = s . indexOf ( ' < ' ) | | - 1 ! = s . indexOf ( ' & ' ) ) { StringBuffer sb = new StringBuffer ( ) ; char [ ] ca = s . toCharArray ( ) ; for ( int i = 0 ; i < ca . length ; i + + ) { if ( ' < ' = = ca [ i ] ) sb . append ( " & lt ; " ) ; else if ( ' & ' = = ca [ i ] ) sb . append ( " & amp ; " ) ; else sb . append ( ca [ i ] ) ; } result = sb . toString ( ) ; } return result ; }
void test10 ( ) throws Throwable { ArrayTag arrayTag0 = new ArrayTag ( ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "" ) ; String string0 = arrayTag0 . stringChildValue ( ( Element ) iIOMetadataNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String stringChildValue ( Element el ) { NodeList nlist = el . getChildNodes ( ) ; String value = "" ; for ( int i = 0 ; i < nlist . getLength ( ) ; i + + ) { Node n = nlist . item ( i ) ; if ( n . getNodeType ( ) = = Node . TEXT_NODE ) { value = n . getNodeValue ( ) ; break ; } } return value ; }
void test11 ( ) throws Throwable { ArrayTag arrayTag0 = new ArrayTag ( ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "" ) ; String string0 = arrayTag0 . getValueOrText ( ( Element ) iIOMetadataNode0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValueOrText ( Element node , boolean exceptionIfEmpty ) throws LTSException { String value = node . getAttribute ( STR_ATTR_VALUE ) ; if ( null = = value | | "" . equals ( value ) ) value = XMLUtils . getChildText ( node ) ; if ( exceptionIfEmpty & & ( null = = value | | "" . equals ( value ) ) ) { throw new LTSException ( "Empty or null value for " + node . getNodeName ( ) ) ; } return value ; }
void test3 ( ) throws Throwable { XmlObjectInputStream xmlObjectInputStream0 = new XmlObjectInputStream ( ) ; xmlObjectInputStream0 . setForgiving ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean forgiving ( ) { return myForgiving ; }
void test6 ( ) throws Throwable { XmlObjectInputStream xmlObjectInputStream0 = new XmlObjectInputStream ( ) ; boolean boolean0 = xmlObjectInputStream0 . forgiving ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean forgiving ( ) { return myForgiving ; }
void test8 ( ) throws Throwable { XmlObjectInputStream xmlObjectInputStream0 = new XmlObjectInputStream ( ) ; xmlObjectInputStream0 . setDocument ( ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { if ( null = = myIndex ) myIndex = new Integer ( 0 ) ; return myIndex . intValue ( ) ; }
void test13 ( ) throws Throwable { XmlObjectInputStream xmlObjectInputStream0 = new XmlObjectInputStream ( ) ; XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; xmlObjectInputStream0 . validateGraph ( xmlSerializer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { if ( null = = myIndex ) myIndex = new Integer ( 0 ) ; return myIndex . intValue ( ) ; }
void test16 ( ) throws Throwable { XmlObjectInputStream xmlObjectInputStream0 = new XmlObjectInputStream ( ) ; xmlObjectInputStream0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { if ( null = = myIndex ) myIndex = new Integer ( 0 ) ; return myIndex . intValue ( ) ; }
void test0 ( ) throws Throwable { IdentifierCounter identifierCounter0 = new IdentifierCounter ( ) ; int int0 = identifierCounter0 . currentID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nextID ( ) { myCurrentID + + ; return myCurrentID ; }
void test1 ( ) throws Throwable { IdentifierCounter identifierCounter0 = new IdentifierCounter ( ) ; int int0 = identifierCounter0 . nextID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nextID ( ) { myCurrentID + + ; return myCurrentID ; }
void test0 ( ) throws Throwable { Fixup fixup0 = new Fixup ( ) ; Object object0 = fixup0 . getDestination ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getDestination ( ) { return destination ; }
void test0 ( ) throws Throwable { Class < ? > class0 = XmlSerializer . class ; AbstractTag abstractTag0 = XmlSerializer . specialClassToTag ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AbstractTag specialClassToTag ( Class c ) { return ( AbstractTag ) ourSpecialClassToTagMap . get ( c ) ; }
void test1 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; Class < ? > class0 = XmlSerializer . class ; boolean boolean0 = xmlSerializer0 . isStringSerialized ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean forgiving ( ) { return myForgiving ; }
void test2 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; StringWriter stringWriter0 = new StringWriter ( ) ; PrintWriter printWriter0 = new PrintWriter ( ( Writer ) stringWriter0 ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( Writer ) printWriter0 ) ; xmlSerializer0 . printAttribute ( indentingPrintWriter0 , "UQu~k' : o#IhXk@Gzfs" , "UQu~k' : o#IhXk@Gzfs" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 1397 ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) byteArrayOutputStream0 ) ; xmlSerializer0 . printObject ( indentingPrintWriter0 , ( Object ) "class" , "not impelemented" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSerializeNulls ( ) { return mySerializeNulls ; }
void test6 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; boolean boolean0 = xmlSerializer0 . serializeNulls ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean forgiving ( ) { return myForgiving ; }
void test8 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; Integer integer0 = new Integer ( ( - 1479 ) ) ; xmlSerializer0 . idToObject ( integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSerializeNulls ( ) { return mySerializeNulls ; }
void test9 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; xmlSerializer0 . setForgiving ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean serializeNulls ( ) { return mySerializeNulls ; }
void test10 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter ( ( OutputStream ) byteArrayOutputStream0 ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( Writer ) outputStreamWriter0 ) ; xmlSerializer0 . printWhatever ( indentingPrintWriter0 , ( Object ) null , "9iNub`O < 2tmX" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test11 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; boolean boolean0 = xmlSerializer0 . getStringSerializePrimitives ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean serializeNulls ( ) { return mySerializeNulls ; }
void test12 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) pipedOutputStream0 ) ; xmlSerializer0 . printClosingElement ( indentingPrintWriter0 , "Mq@ [ 38W9 = ( P6p%uC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void printClosingElement ( IndentingPrintWriter out , String name , boolean printNewline ) { out . print ( " < / " ) ; out . print ( name ) ; out . print ( ' > ' ) ; if ( printNewline ) out . println ( ) ; }
void test13 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getStringSerializePrimitives ( ) { return myStringSerializePrimitives ; }
void test14 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; Fixup fixup0 = new Fixup ( ) ; xmlSerializer0 . addDeferredFixup ( fixup0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean stringSerializePrimitives ( ) { return myStringSerializePrimitives ; }
void test15 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; boolean boolean0 = xmlSerializer0 . getSerializeNulls ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean forgiving ( ) { return myForgiving ; }
void test16 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter ( ( OutputStream ) byteArrayOutputStream0 ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( Writer ) outputStreamWriter0 ) ; xmlSerializer0 . printClosingElement ( indentingPrintWriter0 , "null" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test17 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) pipedOutputStream0 ) ; HashMap < Byte , Timestamp > hashMap0 = new HashMap < Byte , Timestamp > ( ) ; xmlSerializer0 . printValue ( indentingPrintWriter0 , ( Object ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void printValue ( IndentingPrintWriter out , Object value ) throws LTSException { AbstractTag t = tagForObject ( value ) ; t . write ( this , out , t . getTagName ( value ) , value ) ; }
void test18 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; StringWriter stringWriter0 = new StringWriter ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( Writer ) stringWriter0 ) ; xmlSerializer0 . printValue ( indentingPrintWriter0 , ( Object ) xmlSerializer0 . BYTE_TAG , "true" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test19 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 428 ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) byteArrayOutputStream0 ) ; xmlSerializer0 . printValue ( indentingPrintWriter0 , ( Object ) null , "id" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test22 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "null" ) ; xmlSerializer0 . readObject ( ( Element ) iIOMetadataNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getStringSerializePrimitives ( ) { return myStringSerializePrimitives ; }
void test23 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; Class < ? > class0 = XmlSerializer . class ; xmlSerializer0 . findResolveMethod ( class0 ) ; xmlSerializer0 . findResolveMethod ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getStringSerializePrimitives ( ) { return myStringSerializePrimitives ; }
void test24 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; DateTag dateTag0 = new DateTag ( ) ; xmlSerializer0 . invokeResolve ( ( Object ) dateTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSerializeNulls ( ) { return mySerializeNulls ; }
void test26 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; Integer integer0 = new Integer ( ( - 1359 ) ) ; LinkedList < Double > linkedList0 = new LinkedList < Double > ( ) ; xmlSerializer0 . addObject ( integer0 , ( Object ) linkedList0 ) ; xmlSerializer0 . validateGraph ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean forgiving ( ) { return myForgiving ; }
void test27 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; xmlSerializer0 . validateGraph ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean stringSerializePrimitives ( ) { return myStringSerializePrimitives ; }
void test28 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; List < Object > list0 = xmlSerializer0 . getDeferredFixups ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean stringSerializePrimitives ( ) { return myStringSerializePrimitives ; }
void test29 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; xmlSerializer0 . performFixups ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean stringSerializePrimitives ( ) { return myStringSerializePrimitives ; }
void test0 ( ) throws Throwable { NullTag nullTag0 = new NullTag ( ) ; String string0 = nullTag0 . getTagName ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test1 ( ) throws Throwable { NullTag nullTag0 = new NullTag ( ) ; XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; Object object0 = nullTag0 . read ( xmlSerializer0 , ( Element ) iIOMetadataNode0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object read ( XmlSerializer xser , Element node , boolean forgiving ) throws LTSException ; String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test2 ( ) throws Throwable { NullTag nullTag0 = new NullTag ( ) ; XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream ( ( OutputStream ) null ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) bufferedOutputStream0 ) ; nullTag0 . write ( xmlSerializer0 , indentingPrintWriter0 , " > X * w0X | ck" , ( Object ) "ref" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean needToPrintPrefix ( ) { return ! myPrefixPrinted ; }
void test4 ( ) throws Throwable { NullTag nullTag0 = new NullTag ( ) ; String string0 = nullTag0 . getTagClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagClassName ( ) { return Short . class . getName ( ) ; }
void test0 ( ) throws Throwable { ShortTag shortTag0 = new ShortTag ( ) ; String string0 = shortTag0 . getTagName ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test2 ( ) throws Throwable { ShortTag shortTag0 = new ShortTag ( ) ; String string0 = shortTag0 . getTagClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagClassName ( ) { return Short . class . getName ( ) ; }
void test0 ( ) throws Throwable { ArrayTag arrayTag0 = new ArrayTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { ArrayTag arrayTag0 = XmlSerializer . ARRAY_TAG ; String string0 = arrayTag0 . getTagName ( ( Object ) arrayTag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test0 ( ) throws Throwable { BooleanTag booleanTag0 = new BooleanTag ( ) ; Boolean boolean0 = ( Boolean ) booleanTag0 . toValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { BooleanTag booleanTag0 = XmlSerializer . BOOLEAN_TAG ; XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; PipedWriter pipedWriter0 = new PipedWriter ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( Writer ) pipedWriter0 ) ; booleanTag0 . write ( xmlSerializer0 , indentingPrintWriter0 , "" , ( Object ) "java . lang . Float" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagClassName ( ) { return Short . class . getName ( ) ; }
void test2 ( ) throws Throwable { BooleanTag booleanTag0 = new BooleanTag ( ) ; String string0 = booleanTag0 . getTagName ( ( Object ) "double" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test1 ( ) throws Throwable { MapTag mapTag0 = XmlSerializer . MAP_TAG ; String string0 = mapTag0 . getTagName ( ( Object ) "`rb } 0 / iIa_A" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test2 ( ) throws Throwable { MapTag mapTag0 = XmlSerializer . MAP_TAG ; XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 12 ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) byteArrayOutputStream0 ) ; mapTag0 . writeMapping ( xmlSerializer0 , indentingPrintWriter0 , ( Object ) "value" , ( Object ) "value" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test0 ( ) throws Throwable { LongTag longTag0 = new LongTag ( ) ; String string0 = longTag0 . getTagName ( ( Object ) "replicate" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test1 ( ) throws Throwable { LongTag longTag0 = new LongTag ( ) ; String string0 = longTag0 . getTagClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagClassName ( ) { return Short . class . getName ( ) ; }
void test2 ( ) throws Throwable { DateTag dateTag0 = new DateTag ( ) ; String string0 = dateTag0 . getTagName ( ( Object ) "id" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test0 ( ) throws Throwable { StringTag stringTag0 = new StringTag ( ) ; XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; Object object0 = stringTag0 . read ( xmlSerializer0 , ( Element ) iIOMetadataNode0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object read ( XmlSerializer xser , Element node , boolean forgiving ) throws LTSException ; String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test1 ( ) throws Throwable { StringTag stringTag0 = new StringTag ( ) ; String string0 = stringTag0 . getTagName ( ( Object ) "class" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test2 ( ) throws Throwable { StringTag stringTag0 = new StringTag ( ) ; XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) pipedOutputStream0 ) ; stringTag0 . write ( xmlSerializer0 , indentingPrintWriter0 , " , in tag " , ( Object ) "null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean suppressPrefix ( ) { return mySuppressPrefix ; }
void test3 ( ) throws Throwable { StringTag stringTag0 = XmlSerializer . STRING_TAG ; XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; StringWriter stringWriter0 = new StringWriter ( 0 ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( Writer ) stringWriter0 ) ; stringTag0 . write ( xmlSerializer0 , indentingPrintWriter0 , "" , ( Object ) "array" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean needToPrintPrefix ( ) { return ! myPrefixPrinted ; }
void test0 ( ) throws Throwable { CharTag charTag0 = new CharTag ( ) ; Character character0 = ( Character ) charTag0 . toValue ( "b6 * xcyBfa0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object toValue ( String value ) { return new Long ( value ) ; }
void test1 ( ) throws Throwable { CharTag charTag0 = XmlSerializer . CHAR_TAG ; String string0 = charTag0 . getTagName ( ( Object ) "value" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test2 ( ) throws Throwable { CharTag charTag0 = XmlSerializer . CHAR_TAG ; String string0 = charTag0 . getTagClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagClassName ( ) { return Short . class . getName ( ) ; }
void test1 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; String string0 = xmlSerializer0 . DOUBLE_TAG . getTagClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagClassName ( ) { return Short . class . getName ( ) ; }
void test2 ( ) throws Throwable { DoubleTag doubleTag0 = new DoubleTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagClassName ( ) { return Short . class . getName ( ) ; }
void test3 ( ) throws Throwable { DoubleTag doubleTag0 = XmlSerializer . DOUBLE_TAG ; String string0 = doubleTag0 . getTagName ( ( Object ) "value" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test0 ( ) throws Throwable { FloatTag floatTag0 = XmlSerializer . FLOAT_TAG ; String string0 = floatTag0 . getTagClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagClassName ( ) { return Short . class . getName ( ) ; }
void test1 ( ) throws Throwable { FloatTag floatTag0 = new FloatTag ( ) ; String string0 = floatTag0 . getTagName ( ( Object ) "replicate" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test0 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; String string0 = xmlSerializer0 . REFERENCE_TAG . getTagName ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test0 ( ) throws Throwable { ObjectTag objectTag0 = XmlSerializer . OBJECT_TAG ; XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) byteArrayOutputStream0 ) ; objectTag0 . write ( xmlSerializer0 , indentingPrintWriter0 , "java . lang . String" , ( Object ) "java . lang . String" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { ObjectTag objectTag0 = new ObjectTag ( ) ; String string0 = objectTag0 . getTagName ( ( Object ) "value" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test2 ( ) throws Throwable { ShortTag shortTag0 = XmlSerializer . SHORT_TAG ; XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) pipedOutputStream0 ) ; shortTag0 . write ( xmlSerializer0 , indentingPrintWriter0 , "gw1^`tGnoNx ? " , ( Object ) "id" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test0 ( ) throws Throwable { ByteTag byteTag0 = XmlSerializer . BYTE_TAG ; String string0 = byteTag0 . getTagName ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test2 ( ) throws Throwable { ByteTag byteTag0 = XmlSerializer . BYTE_TAG ; String string0 = byteTag0 . getTagClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagClassName ( ) { return Short . class . getName ( ) ; }
void test0 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; String string0 = xmlSerializer0 . COLLECTION_TAG . getTagName ( ( Object ) iIOMetadataNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test1 ( ) throws Throwable { CollectionTag collectionTag0 = new CollectionTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { IntegerTag integerTag0 = new IntegerTag ( ) ; String string0 = integerTag0 . getTagName ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test2 ( ) throws Throwable { int int0 = SimpleTag . stringToType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int stringToType ( String s ) { return ourStringToType . stringToInt ( s ) ; }
void test3 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; String string0 = xmlSerializer0 . SIMPLE_TAG . getTagName ( ( Object ) xmlSerializer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test0 ( ) throws Throwable { ReferenceFixup referenceFixup0 = new ReferenceFixup ( ) ; ReferenceFixup referenceFixup1 = new ReferenceFixup ( referenceFixup0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return myData . equals ( o ) ; }
void test1 ( ) throws Throwable { ReferenceFixup referenceFixup0 = new ReferenceFixup ( ( Object ) "value" , ( Integer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ReferenceFixup ( Object destination , Integer refID ) { super ( destination ) ; id = refID ; }
void test0 ( ) throws Throwable { XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; List < Object > list0 = xmlSerializer0 . getDeferredFixups ( ) ; CollectionFixup collectionFixup0 = new CollectionFixup ( ( Collection ) list0 , xmlSerializer0 . SPEC_STRING_SERIALIZED_CLASSES ) ; boolean boolean0 = collectionFixup0 . fixupSuccessful ( xmlSerializer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test0 ( ) throws Throwable { ArrayFixup arrayFixup0 = new ArrayFixup ( ) ; ArrayFixup arrayFixup1 = new ArrayFixup ( ( ReferenceFixup ) arrayFixup0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayFixup ( Object destination , Integer objectID , int index ) { super ( destination , objectID ) ; myIndex = index ; }
void test1 ( ) throws Throwable { ArrayFixup arrayFixup0 = new ArrayFixup ( ( Object ) false , ( Integer ) 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayFixup ( Object destination , Integer objectID , int index ) { super ( destination , objectID ) ; myIndex = index ; }
void test2 ( ) throws Throwable { ArrayFixup arrayFixup0 = new ArrayFixup ( ) ; XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; boolean boolean0 = arrayFixup0 . fixupSuccessful ( xmlSerializer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean fixupSuccessful ( XmlSerializer xser ) throws LTSException { throw new LTSException ( "not impelemented" ) ; }
void test0 ( ) throws Throwable { FieldFixup fieldFixup0 = new FieldFixup ( ) ; XmlSerializer xmlSerializer0 = new XmlSerializer ( ) ; boolean boolean0 = fieldFixup0 . fixupSuccessful ( xmlSerializer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean fixupSuccessful ( XmlSerializer xser ) throws LTSException { throw new LTSException ( "not impelemented" ) ; }
void test0 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; ListPanel . ListReturnKeyListener listPanel_ListReturnKeyListener0 = listPanel0 . new ListReturnKeyListener ( ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) listPanel0 , 1172 , ( long ) 1172 , 1172 , 1172 , 'i' ) ; listPanel_ListReturnKeyListener0 . keyTyped ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyTyped ( KeyEvent kevent ) { if ( '\n' = = kevent . getKeyChar ( ) ) performAction ( kevent . getSource ( ) ) ; }
void test0 ( ) throws Throwable { JButton jButton0 = new JButton ( ( Icon ) null ) ; SimpleKeyListenerHelper simpleKeyListenerHelper0 = new SimpleKeyListenerHelper ( ( Component ) jButton0 ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) jButton0 , 0 , ( long ) 0 , 0 , 0 , 'D' ) ; simpleKeyListenerHelper0 . keyTyped ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyTyped ( KeyEvent kevent ) { if ( '\n' = = kevent . getKeyChar ( ) ) performAction ( kevent . getSource ( ) ) ; }
void test1 ( ) throws Throwable { JToolBar jToolBar0 = new JToolBar ( ) ; SimpleKeyListenerHelper simpleKeyListenerHelper0 = new SimpleKeyListenerHelper ( ( Component ) jToolBar0 ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) jToolBar0 , 383 , ( long ) 383 , 383 , 383 , 'b' ) ; simpleKeyListenerHelper0 . keyReleased ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyReleased ( KeyEvent arg0 ) { }
void test6 ( ) throws Throwable { JToolBar jToolBar0 = new JToolBar ( ) ; SimpleKeyListenerHelper simpleKeyListenerHelper0 = new SimpleKeyListenerHelper ( ( Component ) jToolBar0 ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) jToolBar0 , ( int ) '\u0080' , ( long ) ( - 611 ) , 2 , ( int ) '\u0080' , '\u0080' , 1 ) ; simpleKeyListenerHelper0 . keyPressed ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyPressed ( KeyEvent event ) { switch ( event . getKeyCode ( ) ) { case KeyEvent . VK_ENTER : case KeyEvent . VK_INSERT : case KeyEvent . VK_DELETE : case KeyEvent . VK_TAB : this . fire ( event . getKeyCode ( ) ) ; break ; } }
void test0 ( ) throws Throwable { LTSMouseAdapter lTSMouseAdapter0 = new LTSMouseAdapter ( ) ; JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) jRadioButtonMenuItem0 , ( - 1 ) , 1L , ( - 1 ) , ( - 1 ) , ( - 1 ) , 937 , false ) ; lTSMouseAdapter0 . mousePressed ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test3 ( ) throws Throwable { LTSMouseAdapter lTSMouseAdapter0 = new LTSMouseAdapter ( ) ; JToggleButton jToggleButton0 = new JToggleButton ( ( Icon ) null , false ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jToggleButton0 , 534 , ( long ) 534 , 534 , 534 , 534 , ( - 1 ) , false , ( - 1 ) , 534 , 534 ) ; lTSMouseAdapter0 . mouseClicked ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent e ) { myEvent = e ; Object source = e . getSource ( ) ; if ( e . isPopupTrigger ( ) ) maybeShowPopup ( e ) ; else if ( e . getClickCount ( ) < 2 ) singleClick ( source ) ; else doubleClick ( source ) ; }
void test4 ( ) throws Throwable { LTSMouseAdapter lTSMouseAdapter0 = new LTSMouseAdapter ( ) ; JToggleButton jToggleButton0 = new JToggleButton ( ( Icon ) null , false ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jToggleButton0 , 534 , ( long ) 534 , 534 , 16 , 534 , 16 , false , 534 , 534 , 16 ) ; lTSMouseAdapter0 . mouseClicked ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent e ) { myEvent = e ; Object source = e . getSource ( ) ; if ( e . isPopupTrigger ( ) ) maybeShowPopup ( e ) ; else if ( e . getClickCount ( ) < 2 ) singleClick ( source ) ; else doubleClick ( source ) ; }
void test5 ( ) throws Throwable { LTSMouseAdapter lTSMouseAdapter0 = new LTSMouseAdapter ( ) ; JPopupMenu jPopupMenu0 = lTSMouseAdapter0 . getPopupMenu ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JPopupMenu getPopupMenu ( ) { return myPopupMenu ; }
void test6 ( ) throws Throwable { LTSMouseAdapter lTSMouseAdapter0 = new LTSMouseAdapter ( ) ; MouseEvent mouseEvent0 = lTSMouseAdapter0 . getEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MouseEvent getEvent ( ) { return myEvent ; }
void test7 ( ) throws Throwable { LTSMouseAdapter lTSMouseAdapter0 = new LTSMouseAdapter ( ) ; Box box0 = Box . createVerticalBox ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) box0 , 10 , ( long ) 10 , 10 , 0 , ( - 635 ) , 12 , true , 0 ) ; lTSMouseAdapter0 . mousePressed ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mousePressed ( MouseEvent e ) { myEvent = e ; maybeShowPopup ( e ) ; }
void test8 ( ) throws Throwable { LTSMouseAdapter lTSMouseAdapter0 = new LTSMouseAdapter ( ) ; Box box0 = Box . createVerticalBox ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) box0 , 10 , ( long ) 10 , 10 , 0 , ( - 635 ) , 12 , true , 0 ) ; lTSMouseAdapter0 . mouseClicked ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JButton getButton ( ) { return myButton ; }
void test1 ( ) throws Throwable { CallbackListenerHelper callbackListenerHelper0 = new CallbackListenerHelper ( ) ; Set < Object > set0 = callbackListenerHelper0 . getListeners ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test7 ( ) throws Throwable { JobStateReasons jobStateReasons0 = new JobStateReasons ( ) ; WindowClosedHelper windowClosedHelper0 = new WindowClosedHelper ( ) ; windowClosedHelper0 . setListeners ( ( Set ) jobStateReasons0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test9 ( ) throws Throwable { ActionListenerHelper actionListenerHelper0 = new ActionListenerHelper ( ) ; boolean boolean0 = actionListenerHelper0 . removeListener ( ( Object ) "LongDescription" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeListener ( Object o ) { if ( null = = o ) return false ; else return this . listeners . remove ( o ) ; }
void test10 ( ) throws Throwable { ActionListenerHelper actionListenerHelper0 = new ActionListenerHelper ( ) ; boolean boolean0 = actionListenerHelper0 . removeListener ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeListener ( Object o ) { if ( null = = o ) return false ; else return this . listeners . remove ( o ) ; }
void test1 ( ) throws Throwable { ThreadPoolExecutor threadPoolExecutor0 = ( ThreadPoolExecutor ) SimpleThreadedAction . getExecutor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Executor getExecutor ( ) { if ( null = = ourExecutor ) initializeExecutor ( ) ; return ourExecutor ; }
void test0 ( ) throws Throwable { SystemErrLogger systemErrLogger0 = new SystemErrLogger ( ) ; systemErrLogger0 . info ( "fQorced" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test1 ( ) throws Throwable { SystemErrLogger systemErrLogger0 = new SystemErrLogger ( ) ; systemErrLogger0 . logDebug ( " , mxiumYze : " , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test2 ( ) throws Throwable { SystemErrLogger systemErrLogger0 = new SystemErrLogger ( ) ; systemErrLogger0 . logCritical ( "fQorced" , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test3 ( ) throws Throwable { int int0 = AbstractLogger . stringToSeverity ( "fQorced" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int stringToSeverity ( String s ) { return ourStringSeverityMap . stringToInt ( s ) ; }
void test4 ( ) throws Throwable { SystemErrLogger systemErrLogger0 = new SystemErrLogger ( ) ; systemErrLogger0 . debug ( "fQorced" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test5 ( ) throws Throwable { SystemErrLogger systemErrLogger0 = new SystemErrLogger ( ) ; systemErrLogger0 . force ( " , mxiumYze : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test6 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( ) ; nullLogger0 . logError ( "fQorced" , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test7 ( ) throws Throwable { SystemErrLogger systemErrLogger0 = new SystemErrLogger ( ) ; systemErrLogger0 . forceLog ( "fQorced" , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test8 ( ) throws Throwable { SystemErrLogger systemErrLogger0 = new SystemErrLogger ( ) ; systemErrLogger0 . logInfo ( " , mxiumYze : " , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test9 ( ) throws Throwable { InMemoryLogger inMemoryLogger0 = new InMemoryLogger ( ) ; int int0 = inMemoryLogger0 . getLoggingSeverity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test10 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( ) ; nullLogger0 . critical ( "fQorced" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test11 ( ) throws Throwable { InMemoryLogger inMemoryLogger0 = new InMemoryLogger ( ) ; inMemoryLogger0 . warning ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String acknowledgeBuffer ( ) { / / / / The user has seen everything if the user index and the current / / index are pointing to the same buffer , and the current buffer / / has not been written to ( i . e . , size 0 ) . / / if ( myCurrentIndex = = myUserIndex & & myWriter . getSize ( ) = = 0 ) return null ; / / / / Show the user the next buffer and blank it out . / / String s = myBuffers [ myUserIndex ] . toString ( ) ; myBuffers [ myUserIndex ] = new SizeStringWriter ( myBufferSize , myBufferSize ) ; / / / / If we are going to show the user some buffer other than the one / / that we are currently writing to , advance to the next buffer . / / if ( myCurrentIndex ! = myUserIndex ) myUserIndex = nextBufferIndex ( myUserIndex ) ; return s ; }
void test12 ( ) throws Throwable { SystemErrLogger systemErrLogger0 = new SystemErrLogger ( ) ; systemErrLogger0 . logWarning ( "fQorced" , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test13 ( ) throws Throwable { SystemErrLogger systemErrLogger0 = new SystemErrLogger ( ) ; systemErrLogger0 . setLoggingSeverity ( 1617 ) ; systemErrLogger0 . error ( " , mxiumYze : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test14 ( ) throws Throwable { InMemoryLogger inMemoryLogger0 = new InMemoryLogger ( ) ; inMemoryLogger0 . setLoggingSeverity ( ( - 842 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test0 ( ) throws Throwable { InMemoryLogger inMemoryLogger0 = new InMemoryLogger ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String acknowledgeBuffer ( ) { / / / / The user has seen everything if the user index and the current / / index are pointing to the same buffer , and the current buffer / / has not been written to ( i . e . , size 0 ) . / / if ( myCurrentIndex = = myUserIndex & & myWriter . getSize ( ) = = 0 ) return null ; / / / / Show the user the next buffer and blank it out . / / String s = myBuffers [ myUserIndex ] . toString ( ) ; myBuffers [ myUserIndex ] = new SizeStringWriter ( myBufferSize , myBufferSize ) ; / / / / If we are going to show the user some buffer other than the one / / that we are currently writing to , advance to the next buffer . / / if ( myCurrentIndex ! = myUserIndex ) myUserIndex = nextBufferIndex ( myUserIndex ) ; return s ; }
void test1 ( ) throws Throwable { InMemoryLogger inMemoryLogger0 = new InMemoryLogger ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String acknowledgeBuffer ( ) { / / / / The user has seen everything if the user index and the current / / index are pointing to the same buffer , and the current buffer / / has not been written to ( i . e . , size 0 ) . / / if ( myCurrentIndex = = myUserIndex & & myWriter . getSize ( ) = = 0 ) return null ; / / / / Show the user the next buffer and blank it out . / / String s = myBuffers [ myUserIndex ] . toString ( ) ; myBuffers [ myUserIndex ] = new SizeStringWriter ( myBufferSize , myBufferSize ) ; / / / / If we are going to show the user some buffer other than the one / / that we are currently writing to , advance to the next buffer . / / if ( myCurrentIndex ! = myUserIndex ) myUserIndex = nextBufferIndex ( myUserIndex ) ; return s ; }
void test3 ( ) throws Throwable { InMemoryLogger inMemoryLogger0 = new InMemoryLogger ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String acknowledgeBuffer ( ) { / / / / The user has seen everything if the user index and the current / / index are pointing to the same buffer , and the current buffer / / has not been written to ( i . e . , size 0 ) . / / if ( myCurrentIndex = = myUserIndex & & myWriter . getSize ( ) = = 0 ) return null ; / / / / Show the user the next buffer and blank it out . / / String s = myBuffers [ myUserIndex ] . toString ( ) ; myBuffers [ myUserIndex ] = new SizeStringWriter ( myBufferSize , myBufferSize ) ; / / / / If we are going to show the user some buffer other than the one / / that we are currently writing to , advance to the next buffer . / / if ( myCurrentIndex ! = myUserIndex ) myUserIndex = nextBufferIndex ( myUserIndex ) ; return s ; }
void test4 ( ) throws Throwable { InMemoryLogger inMemoryLogger0 = new InMemoryLogger ( ) ; String string0 = inMemoryLogger0 . acknowledgeBuffer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String acknowledgeBuffer ( ) { / / / / The user has seen everything if the user index and the current / / index are pointing to the same buffer , and the current buffer / / has not been written to ( i . e . , size 0 ) . / / if ( myCurrentIndex = = myUserIndex & & myWriter . getSize ( ) = = 0 ) return null ; / / / / Show the user the next buffer and blank it out . / / String s = myBuffers [ myUserIndex ] . toString ( ) ; myBuffers [ myUserIndex ] = new SizeStringWriter ( myBufferSize , myBufferSize ) ; / / / / If we are going to show the user some buffer other than the one / / that we are currently writing to , advance to the next buffer . / / if ( myCurrentIndex ! = myUserIndex ) myUserIndex = nextBufferIndex ( myUserIndex ) ; return s ; }
void test0 ( ) throws Throwable { LoggerFactory loggerFactory0 = LoggerFactory . getInstance ( ) ; SystemErrLogger systemErrLogger0 = ( SystemErrLogger ) loggerFactory0 . getLogger ( 145 ) ; loggerFactory0 . setLogger ( ( Logger ) systemErrLogger0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test1 ( ) throws Throwable { LoggerFactory loggerFactory0 = new LoggerFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LoggerFactory ( ) { initialize ( ) ; }
void test2 ( ) throws Throwable { LoggerFactory loggerFactory0 = LoggerFactory . getInstance ( ) ; SystemErrLogger systemErrLogger0 = ( SystemErrLogger ) loggerFactory0 . getLogger ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test3 ( ) throws Throwable { LoggerFactory loggerFactory0 = LoggerFactory . getInstance ( ) ; SystemErrLogger systemErrLogger0 = ( SystemErrLogger ) loggerFactory0 . getLogger ( ( - 1454 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Logger getLogger ( int minSeverity , boolean returnNull ) { if ( minSeverity > = ourLogger . getLoggingSeverity ( ) ) return ourLogger ; if ( returnNull ) return null ; else return ourNullLogger ; }
void test4 ( ) throws Throwable { LoggerFactory loggerFactory0 = LoggerFactory . getInstance ( ) ; NullLogger nullLogger0 = ( NullLogger ) loggerFactory0 . getLogger ( ( - 197 ) , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test0 ( ) throws Throwable { SystemErrLogger systemErrLogger0 = new SystemErrLogger ( ) ; systemErrLogger0 . warning ( "GqOAE | V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test0 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( ) ; int int0 = nullLogger0 . getLoggingSeverity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test1 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( ) ; nullLogger0 . basicLog ( "error" , 0 , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test2 ( ) throws Throwable { NullLogger nullLogger0 = new NullLogger ( ) ; nullLogger0 . info ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLoggingSeverity ( ) { return myLoggingSeverity ; }
void test0 ( ) throws Throwable { ListChannel listChannel0 = new ListChannel ( ) ; ListChannelListenerAdaptor listChannelListenerAdaptor0 = new ListChannelListenerAdaptor ( ) ; boolean boolean0 = listChannel0 . removeListener ( ( ListChannelListener ) listChannelListenerAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeListener ( Object o ) { if ( null = = o ) return false ; else return this . listeners . remove ( o ) ; }
void test2 ( ) throws Throwable { ListChannel listChannel0 = new ListChannel ( ) ; List < Object > list0 = listChannel0 . getList ( ) ; listChannel0 . setList ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test1 ( ) throws Throwable { ListChannelHelper listChannelHelper0 = new ListChannelHelper ( ) ; ListChannel listChannel0 = new ListChannel ( ) ; ListChannelListenerAdaptor listChannelListenerAdaptor0 = new ListChannelListenerAdaptor ( ) ; ListChannelEvent listChannelEvent0 = new ListChannelEvent ( 1 , listChannel0 ) ; listChannelHelper0 . notifyListener ( ( Object ) listChannelListenerAdaptor0 , 1 , ( Object ) listChannelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventType ( ) { return myEventType ; }
void test2 ( ) throws Throwable { ListChannelHelper listChannelHelper0 = new ListChannelHelper ( ) ; ListChannelListenerAdaptor listChannelListenerAdaptor0 = new ListChannelListenerAdaptor ( ) ; ListChannel listChannel0 = new ListChannel ( ) ; ListChannelEvent listChannelEvent0 = new ListChannelEvent ( 3 , listChannel0 ) ; listChannelHelper0 . notifyListener ( ( Object ) listChannelListenerAdaptor0 , 3 , ( Object ) listChannelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOldIndex ( ) { return myOldIndex ; }
void test0 ( ) throws Throwable { ListChannel listChannel0 = new ListChannel ( ) ; ListChannelEvent listChannelEvent0 = new ListChannelEvent ( 0 , listChannel0 ) ; int int0 = listChannelEvent0 . getEventType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { ListChannel listChannel0 = new ListChannel ( ) ; ListChannelEvent listChannelEvent0 = new ListChannelEvent ( ( - 1235 ) , listChannel0 , ( - 1235 ) ) ; ListChannel listChannel1 = listChannelEvent0 . getList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { ListChannel listChannel0 = new ListChannel ( ) ; ListChannelEvent listChannelEvent0 = new ListChannelEvent ( ( - 1235 ) , listChannel0 , ( - 1235 ) ) ; String string0 = listChannelEvent0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventType ( ) { return myEventType ; }
void test3 ( ) throws Throwable { ListChannel listChannel0 = new ListChannel ( ) ; ListChannelEvent listChannelEvent0 = new ListChannelEvent ( 0 , listChannel0 ) ; int int0 = listChannelEvent0 . getNewIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { ListChannelEvent listChannelEvent0 = new ListChannelEvent ( 1425 , ( ListChannel ) null , 1425 , 430 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventType ( ) { return myEventType ; }
void test5 ( ) throws Throwable { ListChannel listChannel0 = new ListChannel ( ) ; ListChannelEvent listChannelEvent0 = new ListChannelEvent ( 0 , listChannel0 ) ; int int0 = listChannelEvent0 . getOldIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test6 ( ) throws Throwable { ListChannel listChannel0 = new ListChannel ( ) ; ListChannelEvent listChannelEvent0 = new ListChannelEvent ( 0 , listChannel0 ) ; String string0 = listChannelEvent0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test7 ( ) throws Throwable { ListChannel listChannel0 = new ListChannel ( ) ; ListChannelEvent listChannelEvent0 = new ListChannelEvent ( 1 , listChannel0 ) ; String string0 = listChannelEvent0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test8 ( ) throws Throwable { ListChannel listChannel0 = new ListChannel ( ) ; ListChannelEvent listChannelEvent0 = new ListChannelEvent ( 2 , listChannel0 , 2 ) ; String string0 = listChannelEvent0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test9 ( ) throws Throwable { String string0 = ListChannelEvent . eventTypeToString ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String eventTypeToString ( int event ) { String s = "unknown" ; switch ( event ) { case EVENT_ADD : s = "Add" ; break ; case EVENT_REMOVE : s = "Remove" ; break ; case EVENT_MOVE : s = "Move" ; break ; case EVENT_ALL_CHANGED : s = "All Changed" ; break ; } return s ; }
void test0 ( ) throws Throwable { TableModelListenerHelper tableModelListenerHelper0 = new TableModelListenerHelper ( ) ; Object [ ] [ ] objectArray0 = new Object [ 3 ] [ 8 ] ; Object [ ] objectArray1 = new Object [ 8 ] ; objectArray1 [ 0 ] = ( Object ) tableModelListenerHelper0 ; objectArray1 [ 1 ] = ( Object ) tableModelListenerHelper0 ; objectArray1 [ 2 ] = ( Object ) tableModelListenerHelper0 ; objectArray1 [ 3 ] = ( Object ) tableModelListenerHelper0 ; objectArray1 [ 4 ] = ( Object ) tableModelListenerHelper0 ; objectArray1 [ 5 ] = ( Object ) tableModelListenerHelper0 ; objectArray1 [ 6 ] = ( Object ) tableModelListenerHelper0 ; objectArray1 [ 7 ] = ( Object ) tableModelListenerHelper0 ; objectArray0 [ 0 ] = objectArray1 ; objectArray0 [ 1 ] = objectArray0 [ 0 ] ; objectArray0 [ 2 ] = objectArray0 [ 1 ] ; JTable jTable0 = new JTable ( objectArray0 , objectArray0 [ 2 ] ) ; TableModel tableModel0 = jTable0 . getModel ( ) ; tableModelListenerHelper0 . fireAllChanged ( tableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test1 ( ) throws Throwable { TableModelListenerHelper tableModelListenerHelper0 = new TableModelListenerHelper ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( 957 , 957 ) ; tableModelListenerHelper0 . fireValueChanged ( ( TableModel ) defaultTableModel0 , 1518 , 1518 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test3 ( ) throws Throwable { TableModelListenerHelper tableModelListenerHelper0 = new TableModelListenerHelper ( ) ; Object [ ] objectArray0 = new Object [ 4 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , 42 ) ; tableModelListenerHelper0 . fireRowDeleted ( ( TableModel ) defaultTableModel0 , ( - 1027 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test4 ( ) throws Throwable { TableModelListenerHelper tableModelListenerHelper0 = new TableModelListenerHelper ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( 957 , 957 ) ; tableModelListenerHelper0 . fireRowChanged ( ( TableModel ) defaultTableModel0 , ( - 364 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test0 ( ) throws Throwable { DefaultExceptionHandler defaultExceptionHandler0 = new DefaultExceptionHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { DefaultExceptionHandler defaultExceptionHandler0 = ( DefaultExceptionHandler ) ExceptionHandler . getHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ExceptionHandler getHandler ( ) { if ( null = = ourFactory ) initializeFactory ( ) ; return ourFactory . getExceptionHandler ( ) ; }
void test3 ( ) throws Throwable { DefaultExceptionHandlerFactory defaultExceptionHandlerFactory0 = ( DefaultExceptionHandlerFactory ) ExceptionHandler . getFactory ( ) ; ExceptionHandler . setFactory ( ( ExceptionHandlerFactory ) defaultExceptionHandlerFactory0 ) ; ExceptionHandler . setFactory ( ( ExceptionHandlerFactory ) defaultExceptionHandlerFactory0 ) ; DefaultExceptionHandlerFactory defaultExceptionHandlerFactory1 = new DefaultExceptionHandlerFactory ( ) ; defaultExceptionHandlerFactory1 . getExceptionHandler ( ) ; DefaultExceptionHandlerFactory defaultExceptionHandlerFactory2 = ( DefaultExceptionHandlerFactory ) ExceptionHandler . getFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return myData . equals ( o ) ; }
void test1 ( ) throws Throwable { XMLPropertyUtil xMLPropertyUtil0 = XMLPropertyUtil . getInstance ( ) ; Class < ? > class0 = String . class ; Method method0 = xMLPropertyUtil0 . getWriteMethod ( ( Class ) class0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Method getWriteMethod ( Class clazz , String name ) throws LTSException { Map map = ( Map ) myClassToPropertyMap . get ( clazz ) ; if ( null = = map ) { map = buildPropertyMap ( clazz ) ; } Method method = ( Method ) map . get ( name ) ; return method ; }
void test5 ( ) throws Throwable { XMLPropertyUtil xMLPropertyUtil0 = new XMLPropertyUtil ( ) ; Class < ? > class0 = Short . class ; Object object0 = xMLPropertyUtil0 . convertValue ( ( Class ) class0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convertValue ( Class clazz , String value ) throws LTSException { try { if ( null = = value ) return null ; Object result ; / / / / Go through the types we know how to convert / / if ( clazz = = String . class ) result = value ; else if ( clazz = = Integer . class | | clazz = = Integer . TYPE ) result = new Integer ( value ) ; else if ( clazz = = Short . class | | clazz = = Short . TYPE ) result = new Short ( value ) ; else if ( clazz = = Long . class | | clazz = = Long . TYPE ) result = new Long ( value ) ; else if ( clazz = = Double . class | | clazz = = Double . TYPE ) result = new Double ( value ) ; else if ( clazz = = Float . class | | clazz = = Float . TYPE ) result = new Float ( value ) ; else if ( clazz = = Byte . class | | clazz = = Byte . TYPE ) result = new Byte ( value ) ; else if ( clazz = = Boolean . class | | clazz = = Boolean . TYPE ) result = new Boolean ( value ) ; else if ( clazz = = Character . class | | clazz = = Character . TYPE ) result = new Character ( value . charAt ( 0 ) ) ; else { String msg = "Unsupported type : " + clazz . getName ( ) ; throw new LTSException ( msg ) ; } return result ; } catch ( NumberFormatException e ) { String msg = "Error converting the value , " + value + " to an instance of " + clazz . getName ( ) ; throw new LTSException ( msg , e ) ; } }
void test6 ( ) throws Throwable { XMLPropertyUtil xMLPropertyUtil0 = XMLPropertyUtil . getInstance ( ) ; Class < ? > class0 = String . class ; String string0 = ( String ) xMLPropertyUtil0 . convertValue ( ( Class ) class0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convertValue ( Class clazz , String value ) throws LTSException { try { if ( null = = value ) return null ; Object result ; / / / / Go through the types we know how to convert / / if ( clazz = = String . class ) result = value ; else if ( clazz = = Integer . class | | clazz = = Integer . TYPE ) result = new Integer ( value ) ; else if ( clazz = = Short . class | | clazz = = Short . TYPE ) result = new Short ( value ) ; else if ( clazz = = Long . class | | clazz = = Long . TYPE ) result = new Long ( value ) ; else if ( clazz = = Double . class | | clazz = = Double . TYPE ) result = new Double ( value ) ; else if ( clazz = = Float . class | | clazz = = Float . TYPE ) result = new Float ( value ) ; else if ( clazz = = Byte . class | | clazz = = Byte . TYPE ) result = new Byte ( value ) ; else if ( clazz = = Boolean . class | | clazz = = Boolean . TYPE ) result = new Boolean ( value ) ; else if ( clazz = = Character . class | | clazz = = Character . TYPE ) result = new Character ( value . charAt ( 0 ) ) ; else { String msg = "Unsupported type : " + clazz . getName ( ) ; throw new LTSException ( msg ) ; } return result ; } catch ( NumberFormatException e ) { String msg = "Error converting the value , " + value + " to an instance of " + clazz . getName ( ) ; throw new LTSException ( msg , e ) ; } }
void test9 ( ) throws Throwable { XMLPropertyUtil xMLPropertyUtil0 = new XMLPropertyUtil ( ) ; Class < ? > class0 = Boolean . class ; Boolean boolean0 = ( Boolean ) xMLPropertyUtil0 . convertValue ( ( Class ) class0 , "fjhmX : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object convertValue ( Class clazz , String value ) throws LTSException { try { if ( null = = value ) return null ; Object result ; / / / / Go through the types we know how to convert / / if ( clazz = = String . class ) result = value ; else if ( clazz = = Integer . class | | clazz = = Integer . TYPE ) result = new Integer ( value ) ; else if ( clazz = = Short . class | | clazz = = Short . TYPE ) result = new Short ( value ) ; else if ( clazz = = Long . class | | clazz = = Long . TYPE ) result = new Long ( value ) ; else if ( clazz = = Double . class | | clazz = = Double . TYPE ) result = new Double ( value ) ; else if ( clazz = = Float . class | | clazz = = Float . TYPE ) result = new Float ( value ) ; else if ( clazz = = Byte . class | | clazz = = Byte . TYPE ) result = new Byte ( value ) ; else if ( clazz = = Boolean . class | | clazz = = Boolean . TYPE ) result = new Boolean ( value ) ; else if ( clazz = = Character . class | | clazz = = Character . TYPE ) result = new Character ( value . charAt ( 0 ) ) ; else { String msg = "Unsupported type : " + clazz . getName ( ) ; throw new LTSException ( msg ) ; } return result ; } catch ( NumberFormatException e ) { String msg = "Error converting the value , " + value + " to an instance of " + clazz . getName ( ) ; throw new LTSException ( msg , e ) ; } }
void test13 ( ) throws Throwable { XMLPropertyUtil xMLPropertyUtil0 = new XMLPropertyUtil ( ) ; Class < ? > class0 = Character . class ; Character character0 = ( Character ) xMLPropertyUtil0 . convertValue ( ( Class ) class0 , "1662" ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; xMLPropertyUtil0 . setProperties ( ( Object ) character0 , ( Element ) iIOMetadataNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setProperties ( Object o , Element element ) throws LTSException { Map map = XMLUtils . getAttributes ( element ) ; for ( Iterator i = map . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) { String key = ( String ) i . next ( ) ; String value = ( String ) map . get ( key ) ; setProperty ( false , o , key , value ) ; } }
void test16 ( ) throws Throwable { XMLPropertyUtil xMLPropertyUtil0 = new XMLPropertyUtil ( ) ; Integer integer0 = new Integer ( ( - 1753 ) ) ; xMLPropertyUtil0 . setProperty ( false , ( Object ) integer0 , "Y" , "Y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setProperty ( boolean throwException , Object o , String name , String value ) throws LTSException { if ( null = = o ) return ; Class clazz = o . getClass ( ) ; PropertyDescriptor prop = getProperty ( clazz , name ) ; if ( null = = prop ) { if ( ! throwException ) return ; String msg = "The class , " + clazz . getName ( ) + " , does not have a property " + "named " + name ; throw new LTSException ( msg ) ; } Method method = prop . getWriteMethod ( ) ; if ( null = = method ) { if ( ! throwException ) return ; String msg = "Property " + name + " is not writeable for class " + clazz . getName ( ) ; throw new LTSException ( msg ) ; } try { Object pvalue = convertValue ( prop . getPropertyType ( ) , value ) ; writeProperty ( throwException , o , method , pvalue ) ; } catch ( LTSException e ) { if ( ! throwException ) return ; throw e ; } }
void test0 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test1 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttrOrChild ( Element element , String attrName , String childTag ) { String value = getAttrValue ( element , attrName ) ; if ( null ! = value & & ! "" . equals ( value ) ) return value ; List list = getChildElements ( element , childTag ) ; if ( list . size ( ) < 1 ) return null ; Element child = ( Element ) list . get ( 0 ) ; value = getChildText ( child ) ; value = StringUtils . trim ( value ) ; return value ; }
void test3 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; XMLUtils . createAttr ( ( Element ) iIOMetadataNode0 , "N7UCffH" , 824 ) ; Integer integer0 = XMLUtils . getIntegerAttr ( ( Node ) iIOMetadataNode0 , "N7UCffH" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Integer getIntegerAttr ( Node n , String name ) { String s = getAttrValue ( n , name ) ; if ( null = = s ) return null ; else return new Integer ( s ) ; }
void test6 ( ) throws Throwable { XMLUtils xMLUtils0 = new XMLUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test7 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAbsolutePath ( Element parent ) { StringBuffer sb = new StringBuffer ( ) ; buildPath ( sb , parent ) ; return sb . toString ( ) ; }
void test8 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAbsolutePath ( Element parent ) { StringBuffer sb = new StringBuffer ( ) ; buildPath ( sb , parent ) ; return sb . toString ( ) ; }
void test11 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Element createChild ( Element parent , String name , String value ) { Element child = parent . getOwnerDocument ( ) . createElement ( name ) ; child . setNodeValue ( value ) ; parent . appendChild ( child ) ; return child ; }
void test13 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttrOrChild ( Element element , String attrName , String childTag ) { String value = getAttrValue ( element , attrName ) ; if ( null ! = value & & ! "" . equals ( value ) ) return value ; List list = getChildElements ( element , childTag ) ; if ( list . size ( ) < 1 ) return null ; Element child = ( Element ) list . get ( 0 ) ; value = getChildText ( child ) ; value = StringUtils . trim ( value ) ; return value ; }
void test14 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getChildTime ( Element parent , String name , String [ ] patterns ) { Long time = null ; String text = XMLUtils . getChildText ( parent , name ) ; while ( null = = time ) { for ( int i = 0 ; i < patterns . length ; i + + ) { time = parseTime ( text , patterns [ i ] ) ; } } return time ; }
void test16 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean getBooleanAttr ( Node n , String name ) { String s = getAttrValue ( n , name ) ; if ( null = = s ) return null ; else if ( "true" . equalsIgnoreCase ( s ) ) return new Boolean ( true ) ; else return new Boolean ( false ) ; }
void test18 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Element getChild ( String s , Element parent ) { NodeList nlist = parent . getChildNodes ( ) ; int count = nlist . getLength ( ) ; int i = 0 ; Element child = null ; while ( null = = child & & i < count ) { Node n = nlist . item ( i ) ; if ( n . getNodeType ( ) = = Node . ELEMENT_NODE & & n . getNodeName ( ) . equals ( s ) ) { child = ( Element ) n ; } i + + ; } return child ; }
void test19 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test20 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; ElementImpl elementImpl0 = ( ElementImpl ) XMLUtils . createElement ( ( Document ) documentImpl0 , "S" , "S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long getChildTime ( Element parent , String name , String [ ] patterns ) { Long time = null ; String text = XMLUtils . getChildText ( parent , name ) ; while ( null = = time ) { for ( int i = 0 ; i < patterns . length ; i + + ) { time = parseTime ( text , patterns [ i ] ) ; } } return time ; }
void test21 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getChildLong ( Element parent , String name ) { String text = getChildText ( parent , name ) ; Long lval = new Long ( text ) ; return lval ; }
void test22 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test23 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Element getChild ( String s , Element parent ) { NodeList nlist = parent . getChildNodes ( ) ; int count = nlist . getLength ( ) ; int i = 0 ; Element child = null ; while ( null = = child & & i < count ) { Node n = nlist . item ( i ) ; if ( n . getNodeType ( ) = = Node . ELEMENT_NODE & & n . getNodeName ( ) . equals ( s ) ) { child = ( Element ) n ; } i + + ; } return child ; }
void test24 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test25 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getChildLong ( Element parent , String name ) { String text = getChildText ( parent , name ) ; Long lval = new Long ( text ) ; return lval ; }
void test26 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAttrOrChild ( Element element , String attrName , String childTag ) { String value = getAttrValue ( element , attrName ) ; if ( null ! = value & & ! "" . equals ( value ) ) return value ; List list = getChildElements ( element , childTag ) ; if ( list . size ( ) < 1 ) return null ; Element child = ( Element ) list . get ( 0 ) ; value = getChildText ( child ) ; value = StringUtils . trim ( value ) ; return value ; }
void test27 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( Element element ) { NodeList nodeList = element . getChildNodes ( ) ; for ( int i = 0 ; i < nodeList . getLength ( ) ; i + + ) { Node child = nodeList . item ( i ) ; if ( child . getNodeType ( ) ! = Node . TEXT_NODE ) continue ; Text text = ( Text ) child ; return text . getNodeValue ( ) ; } return null ; }
void test28 ( ) throws Throwable { DocumentImpl documentImpl0 = ( DocumentImpl ) XMLUtils . createDocument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( Element element ) { NodeList nodeList = element . getChildNodes ( ) ; for ( int i = 0 ; i < nodeList . getLength ( ) ; i + + ) { Node child = nodeList . item ( i ) ; if ( child . getNodeType ( ) ! = Node . TEXT_NODE ) continue ; Text text = ( Text ) child ; return text . getNodeValue ( ) ; } return null ; }
void test29 ( ) throws Throwable { String string0 = XMLUtils . getAbsolutePath ( ( Element ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAbsolutePath ( Element parent ) { StringBuffer sb = new StringBuffer ( ) ; buildPath ( sb , parent ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { TimeFormatter timeFormatter0 = new TimeFormatter ( ) ; Date date0 = timeFormatter0 . parse ( "'e\"~ ? Cv + jB ; 4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Document parse ( String fname ) throws LTSException { try { Document document = getBuilder ( ) . parse ( fname ) ; return document ; } catch ( RuntimeException e ) { throw e ; } catch ( LTSException e ) { throw e ; } catch ( Exception e ) { throw new LTSException ( "Error parsing file : " + fname , e ) ; } }
void test2 ( ) throws Throwable { TimeFormatter timeFormatter0 = new TimeFormatter ( ) ; String string0 = timeFormatter0 . format ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String format ( String message , int severity , Throwable ex , boolean printNewline ) { StringWriter sw = new StringWriter ( ) ; PrintWriter out = new PrintWriter ( sw ) ; Date d = new Date ( ) ; out . print ( ' | ' ) ; out . print ( ourSDF . format ( d ) ) ; out . print ( ' | ' ) ; out . print ( severityToString ( severity ) ) ; out . print ( ' | ' ) ; out . print ( message ) ; out . print ( ' | ' ) ; if ( null ! = ex ) { out . println ( ) ; ex . printStackTrace ( out ) ; } if ( printNewline ) out . println ( ) ; out . close ( ) ; return sw . toString ( ) ; }
void test1 ( ) throws Throwable { SimpleElementConverter simpleElementConverter0 = new SimpleElementConverter ( ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "_3z6" ) ; SimpleElement simpleElement0 = simpleElementConverter0 . toSimpleElement ( ( Element ) iIOMetadataNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { SimpleElementConverter simpleElementConverter0 = new SimpleElementConverter ( ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; iIOMetadataNode0 . setAttributeNS ( "_3z6" , "_3z6" , "_3z6" ) ; SimpleElement simpleElement0 = simpleElementConverter0 . toSimpleElement ( ( Element ) iIOMetadataNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { SimpleElementParser simpleElementParser0 = new SimpleElementParser ( ) ; SimpleElement simpleElement0 = simpleElementParser0 . getRoot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleElement getRoot ( ) { return myRoot ; }
void test2 ( ) throws Throwable { SimpleElementParser simpleElementParser0 = new SimpleElementParser ( ) ; SimpleElement simpleElement0 = new SimpleElement ( "background" , 27 . 829407905095884 ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "background" ) ; iIOMetadataNode0 . setAttributeNS ( "background" , "background" , "background" ) ; NodeList nodeList0 = iIOMetadataNode0 . getElementsByTagNameNS ( "background" , "background" ) ; simpleElementParser0 . addChildren ( simpleElement0 , nodeList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDoubleValue ( ) { String s = getValue ( ) ; if ( null = = s ) return 0 ; else { return Double . parseDouble ( s ) ; } }
void test0 ( ) throws Throwable { Budget budget0 = new Budget ( ) ; SimpleElement simpleElement0 = budget0 . createSerializationElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; SimpleElement simpleElement0 = foodList0 . createSerializationElement ( ) ; SimpleElement simpleElement1 = simpleElement0 . createChild ( "#Xr ] 7%FH & ? D^ ( t d" , ( - 965 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; SimpleElement simpleElement0 = foodList0 . createSerializationElement ( ) ; SimpleElement simpleElement1 = simpleElement0 . createChild ( "8kGO . RiHzc < EH8GU" , ( - 740L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; SimpleElement simpleElement0 = foodList0 . createSerializationElement ( ) ; simpleElement0 . getParent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test5 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( ( String ) null ) ; SimpleElement simpleElement1 = simpleElement0 . createChild ( ( String ) null , 21L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLongValueOfChild ( String name ) { SimpleElement child = nameToChild ( name ) ; if ( null = = child ) return - 1 ; else return child . getLongValue ( ) ; }
void test6 ( ) throws Throwable { String string0 = SimpleElement . toDateTimeValue ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toDateTimeValue ( long time ) { return ourFormat . format ( time ) ; }
void test7 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( ( String ) null , ( String ) null ) ; ReallyCaselessMap < String > reallyCaselessMap0 = simpleElement0 . getAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test8 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( ) ; int int0 = simpleElement0 . getIntValueOfChild ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntValueOfChild ( String name ) { SimpleElement child = nameToChild ( name ) ; if ( null = = child ) return - 1 ; else return child . getIntValue ( ) ; }
void test9 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( "description" , "description" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test10 ( ) throws Throwable { String string0 = SimpleElement . stringOrNull ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String stringOrNull ( String s ) { if ( null = = s ) return " < null > " ; else return s ; }
void test11 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( "description" , "description" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test12 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntValue ( ) { String s = getValue ( ) ; if ( null = = s ) return - 1 ; else return Integer . parseInt ( s ) ; }
void test13 ( ) throws Throwable { Budget budget0 = new Budget ( ) ; SimpleElement simpleElement0 = budget0 . createSerializationElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test14 ( ) throws Throwable { Budget budget0 = new Budget ( ) ; SimpleElement simpleElement0 = budget0 . createSerializationElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getCaloriesPerHour ( ) { return myCaloriesPerHour ; }
void test15 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; SimpleElement simpleElement0 = foodList0 . createSerializationElement ( ) ; long long0 = simpleElement0 . getLongValue ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test16 ( ) throws Throwable { Budget budget0 = new Budget ( ) ; TimeOfDay timeOfDay0 = budget0 . getEndOfDay ( ) ; SimpleElement simpleElement0 = timeOfDay0 . createSerializationElement ( ) ; long long0 = simpleElement0 . getLongValue ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long toTime ( ) { Calendar cal = Calendar . getInstance ( ) ; cal . set ( Calendar . HOUR_OF_DAY , getHour ( ) ) ; cal . set ( Calendar . MINUTE , getMinute ( ) ) ; return cal . getTimeInMillis ( ) ; }
void test17 ( ) throws Throwable { Budget budget0 = new Budget ( ) ; TimeOfDay timeOfDay0 = budget0 . getEndOfDay ( ) ; SimpleElement simpleElement0 = timeOfDay0 . createSerializationElement ( ) ; simpleElement0 . getValueOfChild ( "1 ( ub" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long toTime ( ) { Calendar cal = Calendar . getInstance ( ) ; cal . set ( Calendar . HOUR_OF_DAY , getHour ( ) ) ; cal . set ( Calendar . MINUTE , getMinute ( ) ) ; return cal . getTimeInMillis ( ) ; }
void test18 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDoubleValue ( ) { String s = getValue ( ) ; if ( null = = s ) return 0 ; else { return Double . parseDouble ( s ) ; } }
void test19 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( "" , ( double ) 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDoubleValueOfChild ( String name ) { SimpleElement child = nameToChild ( name ) ; if ( null = = child ) { return 0 ; } else { return child . getDoubleValue ( ) ; } }
void test20 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDoubleValueOfChild ( String name ) { SimpleElement child = nameToChild ( name ) ; if ( null = = child ) { return 0 ; } else { return child . getDoubleValue ( ) ; } }
void test21 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( " %b : 3vLmq" , " %b : 3vLmq" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntValueOfChild ( String name ) { SimpleElement child = nameToChild ( name ) ; if ( null = = child ) return - 1 ; else return child . getIntValue ( ) ; }
void test22 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( "description" , "description" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test23 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( ) ; String string0 = simpleElement0 . getValueOfChild ( "" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValueOfChild ( String name ) { SimpleElement child = nameToChild ( name ) ; if ( null = = child ) return null ; else return child . getValue ( ) ; }
void test24 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( ) ; SimpleElement simpleElement1 = simpleElement0 . createChild ( "" , ( - 1520 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValueOfChild ( String name ) { SimpleElement child = nameToChild ( name ) ; if ( null = = child ) return null ; else return child . getValue ( ) ; }
void test26 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( ) ; long long0 = simpleElement0 . getTimeValueOfChild ( "" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTimeValueOfChild ( String name ) { SimpleElement child = nameToChild ( name ) ; if ( null = = child ) return - 1 ; else return child . getTimeValue ( ) ; }
void test27 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; SimpleElement simpleElement0 = foodList0 . createSerializationElement ( ) ; SimpleElement simpleElement1 = simpleElement0 . createChild ( "8kGO . RiHzc < EH8GU" , ( - 740L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test28 ( ) throws Throwable { Budget budget0 = new Budget ( ) ; SimpleElement simpleElement0 = budget0 . createSerializationElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test29 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( "description" , "description" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test30 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( ) ; SimpleElement simpleElement1 = simpleElement0 . createChild ( "min" , "Description" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test31 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( ( String ) null , ( String ) null ) ; simpleElement0 . removeChild ( ( SimpleElement ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getDoubleValue ( ) { String s = getValue ( ) ; if ( null = = s ) return 0 ; else { return Double . parseDouble ( s ) ; } }
void test1 ( ) throws Throwable { ImprovedFile improvedFile0 = new ImprovedFile ( "" ) ; ArchiveScanner archiveScanner0 = new ArchiveScanner ( improvedFile0 ) ; String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; archiveScanner0 . setIncludes ( stringArray0 ) ; File file0 = improvedFile0 . getCanonicalFile ( ) ; archiveScanner0 . setBasedir ( file0 ) ; archiveScanner0 . scan ( ) ; String [ ] stringArray1 = archiveScanner0 . getNotIncludedDirectories ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getNotIncludedDirectories ( ) throws LTSException { slowScan ( ) ; int count = dirsNotIncluded . size ( ) ; String [ ] directories = new String [ count ] ; for ( int i = 0 ; i < count ; i + + ) { directories [ i ] = ( String ) dirsNotIncluded . elementAt ( i ) ; } return directories ; }
void test0 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; Tokenizer tokenizer0 = new Tokenizer ( ( InputStream ) pipedInputStream0 ) ; InputStreamReader inputStreamReader0 = ( InputStreamReader ) tokenizer0 . getReader ( ) ; Tokenizer tokenizer1 = new Tokenizer ( ( Reader ) inputStreamReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Tokenizer ( InputStream istream ) { initialize ( istream ) ; }
void test17 ( ) throws Throwable { ImprovedFile improvedFile0 = new ImprovedFile ( "" , "" ) ; File file0 = ImprovedFile . createTempFileName ( "" , "" , ( File ) improvedFile0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File createTempFileName ( String prefix , String suffix , File dir ) { long name = System . currentTimeMillis ( ) % 1000000 ; File f = buildName ( prefix , name , suffix , dir ) ; while ( f . exists ( ) ) { name + + ; f = buildName ( prefix , name , suffix , dir ) ; } return f ; }
void test21 ( ) throws Throwable { ImprovedFile improvedFile0 = new ImprovedFile ( " [ " , " [ " ) ; improvedFile0 . deleteAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void deleteAll ( ) throws FileException , IOException { if ( ! exists ( ) ) return ; if ( isFile ( ) ) { if ( ! delete ( ) ) { String msg = "Could not remove file , " + toString ( ) ; throw new FileException ( Reason . DELETE_FAILED , msg ) ; } } else { deleteDirectory ( ) ; } }
void test22 ( ) throws Throwable { ImprovedFile improvedFile0 = new ImprovedFile ( "Attempt 8o cop a directory , " ) ; String string0 = ImprovedFile . getLastPathComponent ( ( File ) improvedFile0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLastPathComponent ( File f ) { String s = f . toString ( ) ; String parent = f . getParent ( ) ; if ( null = = parent | | parent . length ( ) < = 0 ) return s ; else return s . substring ( parent . length ( ) ) ; }
void test23 ( ) throws Throwable { ImprovedFile improvedFile0 = new ImprovedFile ( "M - a3Jos } Y / 7 | i~c" ) ; String string0 = ImprovedFile . getLastPathComponent ( ( File ) improvedFile0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLastPathComponent ( File f ) { String s = f . toString ( ) ; String parent = f . getParent ( ) ; if ( null = = parent | | parent . length ( ) < = 0 ) return s ; else return s . substring ( parent . length ( ) ) ; }
void test24 ( ) throws Throwable { File file0 = new File ( " ; lJVpr + MN09zY + [ c * TX" , " ; lJVpr + MN09zY + [ c * TX" ) ; ImprovedFile . copyFromToDir ( file0 , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void copyFromToDir ( File source , File dest ) throws IOException { if ( source . isDirectory ( ) ) { if ( ! dest . mkdirs ( ) ) { String message = "Could not create directory " + dest ; throw new IOException ( message ) ; } } File [ ] files = source . listFiles ( ) ; if ( null = = files | | files . length < = 0 ) return ; for ( int i = 0 ; i < files . length ; i + + ) { File newfile = new File ( dest , getLastPathComponent ( files [ i ] ) ) ; if ( ! files [ i ] . isDirectory ( ) ) { copyFromToFile ( files [ i ] , newfile ) ; } else { if ( ! newfile . mkdirs ( ) ) { throw new IOException ( "Error copying directory , could not create directory " + newfile ) ; } copyFromToDir ( files [ i ] , newfile ) ; } } }
void test27 ( ) throws Throwable { ImprovedFile improvedFile0 = new ImprovedFile ( "root should have null as its paent . " ) ; improvedFile0 . basicMakeDirectories ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void basicMakeDirectories ( File file ) throws FileException { if ( null = = file ) return ; File parent = file . getParentFile ( ) ; if ( ! parent . isDirectory ( ) ) basicMakeDirectories ( parent ) ; if ( file . isDirectory ( ) ) return ; if ( file . exists ( ) ) { throw new FileException ( Reason . FILE_EXISTS , file . toString ( ) ) ; } else if ( ! file . mkdir ( ) ) { throw new FileException ( Reason . MKDIR_FAILED , file . toString ( ) ) ; } }
void test28 ( ) throws Throwable { ImprovedFile improvedFile0 = new ImprovedFile ( "" ) ; File file0 = improvedFile0 . getAbsoluteFile ( ) ; improvedFile0 . basicMakeDirectories ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPath ( ) { StringBuffer sb = new StringBuffer ( 128 ) ; basicGetPath ( sb ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { SizeStringWriter sizeStringWriter0 = new SizeStringWriter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return mySize ; }
void test1 ( ) throws Throwable { SizeStringWriter sizeStringWriter0 = new SizeStringWriter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMaxSize ( ) { return myMaxSize ; }
void test2 ( ) throws Throwable { SizeStringWriter sizeStringWriter0 = new SizeStringWriter ( 1 , ( - 2027 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return mySize ; }
void test3 ( ) throws Throwable { SizeStringWriter sizeStringWriter0 = new SizeStringWriter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return mySize ; }
void test4 ( ) throws Throwable { SizeStringWriter sizeStringWriter0 = new SizeStringWriter ( 1 , ( - 2027 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return mySize ; }
void test5 ( ) throws Throwable { SizeStringWriter sizeStringWriter0 = new SizeStringWriter ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMaxSize ( ) { return myMaxSize ; }
void test6 ( ) throws Throwable { SizeStringWriter sizeStringWriter0 = new SizeStringWriter ( 80 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return mySize ; }
void test7 ( ) throws Throwable { SizeStringWriter sizeStringWriter0 = new SizeStringWriter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test8 ( ) throws Throwable { SizeStringWriter sizeStringWriter0 = new SizeStringWriter ( 1 , ( - 2027 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test9 ( ) throws Throwable { SizeStringWriter sizeStringWriter0 = new SizeStringWriter ( 128 , 128 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return mySize ; }
void test0 ( ) throws Throwable { DirectoryScanner directoryScanner0 = new DirectoryScanner ( ) ; File file0 = directoryScanner0 . getBasedir ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getBasedir ( ) { return basedir ; }
void test1 ( ) throws Throwable { boolean boolean0 = DirectoryScanner . matchPatternStart ( "# < o . r1 [ `5C@I = & * ki" , "# < o . r1 [ `5C@I = & * ki" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchPatternStart ( String pattern , String str ) { / / When str starts with a File . separator , pattern has to start with a / / File . separator . / / When pattern starts with a File . separator , str has to start with a / / File . separator . if ( str . startsWith ( File . separator ) ! = pattern . startsWith ( File . separator ) ) { return false ; } Vector patDirs = new Vector ( ) ; StringTokenizer st = new StringTokenizer ( pattern , File . separator ) ; while ( st . hasMoreTokens ( ) ) { patDirs . addElement ( st . nextToken ( ) ) ; } Vector strDirs = new Vector ( ) ; st = new StringTokenizer ( str , File . separator ) ; while ( st . hasMoreTokens ( ) ) { strDirs . addElement ( st . nextToken ( ) ) ; } int patIdxStart = 0 ; int patIdxEnd = patDirs . size ( ) - 1 ; int strIdxStart = 0 ; int strIdxEnd = strDirs . size ( ) - 1 ; / / up to first ' * * ' while ( patIdxStart < = patIdxEnd & & strIdxStart < = strIdxEnd ) { String patDir = ( String ) patDirs . elementAt ( patIdxStart ) ; if ( patDir . equals ( " * * " ) ) { break ; } if ( ! match ( patDir , ( String ) strDirs . elementAt ( strIdxStart ) ) ) { return false ; } patIdxStart + + ; strIdxStart + + ; } if ( strIdxStart > strIdxEnd ) { / / String is exhausted return true ; } else if ( patIdxStart > patIdxEnd ) { / / String not exhausted , but pattern is . Failure . return false ; } else { / / pattern now holds * * while string is not exhausted / / this will generate false positives but we can live with that . return true ; } }
void test2 ( ) throws Throwable { DirectoryScanner directoryScanner0 = new DirectoryScanner ( ) ; String [ ] stringArray0 = new String [ 5 ] ; stringArray0 [ 0 ] = "C8S" ; stringArray0 [ 1 ] = "9m * H3YALH2" ; stringArray0 [ 2 ] = "d ( [ 6nW" ; stringArray0 [ 3 ] = " / YSaUrYkF P ! & / Np~" ; stringArray0 [ 4 ] = "" ; directoryScanner0 . setIncludes ( stringArray0 ) ; boolean boolean0 = directoryScanner0 . couldHoldIncluded ( "R'7Q\" ; lj2 [ M~Y Mf , ] k" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean couldHoldIncluded ( String name ) { for ( int i = 0 ; i < includes . length ; i + + ) { if ( matchPatternStart ( includes [ i ] , name ) ) { return true ; } } return false ; }
void test3 ( ) throws Throwable { DirectoryScanner directoryScanner0 = new DirectoryScanner ( ) ; String [ ] stringArray0 = new String [ 5 ] ; stringArray0 [ 0 ] = "C8S" ; stringArray0 [ 1 ] = "9m * H3YALH2" ; stringArray0 [ 2 ] = "d ( [ 6nW" ; stringArray0 [ 3 ] = " / YSaUrYkF P ! & / Np~" ; stringArray0 [ 4 ] = "" ; directoryScanner0 . setIncludes ( stringArray0 ) ; boolean boolean0 = directoryScanner0 . couldHoldIncluded ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean couldHoldIncluded ( String name ) { for ( int i = 0 ; i < includes . length ; i + + ) { if ( matchPatternStart ( includes [ i ] , name ) ) { return true ; } } return false ; }
void test4 ( ) throws Throwable { boolean boolean0 = DirectoryScanner . matchPatternStart ( " * * / * ~ / " , " * * / * ~ / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchPatternStart ( String pattern , String str ) { / / When str starts with a File . separator , pattern has to start with a / / File . separator . / / When pattern starts with a File . separator , str has to start with a / / File . separator . if ( str . startsWith ( File . separator ) ! = pattern . startsWith ( File . separator ) ) { return false ; } Vector patDirs = new Vector ( ) ; StringTokenizer st = new StringTokenizer ( pattern , File . separator ) ; while ( st . hasMoreTokens ( ) ) { patDirs . addElement ( st . nextToken ( ) ) ; } Vector strDirs = new Vector ( ) ; st = new StringTokenizer ( str , File . separator ) ; while ( st . hasMoreTokens ( ) ) { strDirs . addElement ( st . nextToken ( ) ) ; } int patIdxStart = 0 ; int patIdxEnd = patDirs . size ( ) - 1 ; int strIdxStart = 0 ; int strIdxEnd = strDirs . size ( ) - 1 ; / / up to first ' * * ' while ( patIdxStart < = patIdxEnd & & strIdxStart < = strIdxEnd ) { String patDir = ( String ) patDirs . elementAt ( patIdxStart ) ; if ( patDir . equals ( " * * " ) ) { break ; } if ( ! match ( patDir , ( String ) strDirs . elementAt ( strIdxStart ) ) ) { return false ; } patIdxStart + + ; strIdxStart + + ; } if ( strIdxStart > strIdxEnd ) { / / String is exhausted return true ; } else if ( patIdxStart > patIdxEnd ) { / / String not exhausted , but pattern is . Failure . return false ; } else { / / pattern now holds * * while string is not exhausted / / this will generate false positives but we can live with that . return true ; } }
void test6 ( ) throws Throwable { boolean boolean0 = DirectoryScanner . matchPath ( " * * / * ~" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchPath ( String pattern , String str ) { / / When str starts with a File . separator , pattern has to start with a / / File . separator . / / When pattern starts with a File . separator , str has to start with a / / File . separator . if ( str . startsWith ( File . separator ) ! = pattern . startsWith ( File . separator ) ) { return false ; } Vector patDirs = new Vector ( ) ; StringTokenizer st = new StringTokenizer ( pattern , File . separator ) ; while ( st . hasMoreTokens ( ) ) { patDirs . addElement ( st . nextToken ( ) ) ; } Vector strDirs = new Vector ( ) ; st = new StringTokenizer ( str , File . separator ) ; while ( st . hasMoreTokens ( ) ) { strDirs . addElement ( st . nextToken ( ) ) ; } int patIdxStart = 0 ; int patIdxEnd = patDirs . size ( ) - 1 ; int strIdxStart = 0 ; int strIdxEnd = strDirs . size ( ) - 1 ; / / up to first ' * * ' while ( patIdxStart < = patIdxEnd & & strIdxStart < = strIdxEnd ) { String patDir = ( String ) patDirs . elementAt ( patIdxStart ) ; if ( patDir . equals ( " * * " ) ) { break ; } if ( ! match ( patDir , ( String ) strDirs . elementAt ( strIdxStart ) ) ) { return false ; } patIdxStart + + ; strIdxStart + + ; } if ( strIdxStart > strIdxEnd ) { / / String is exhausted for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( ! patDirs . elementAt ( i ) . equals ( " * * " ) ) { return false ; } } return true ; } else { if ( patIdxStart > patIdxEnd ) { / / String not exhausted , but pattern is . Failure . return false ; } } / / up to last ' * * ' while ( patIdxStart < = patIdxEnd & & strIdxStart < = strIdxEnd ) { String patDir = ( String ) patDirs . elementAt ( patIdxEnd ) ; if ( patDir . equals ( " * * " ) ) { break ; } if ( ! match ( patDir , ( String ) strDirs . elementAt ( strIdxEnd ) ) ) { return false ; } patIdxEnd - - ; strIdxEnd - - ; } if ( strIdxStart > strIdxEnd ) { / / String is exhausted for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( ! patDirs . elementAt ( i ) . equals ( " * * " ) ) { return false ; } } return true ; } while ( patIdxStart ! = patIdxEnd & & strIdxStart < = strIdxEnd ) { int patIdxTmp = - 1 ; for ( int i = patIdxStart + 1 ; i < = patIdxEnd ; i + + ) { if ( patDirs . elementAt ( i ) . equals ( " * * " ) ) { patIdxTmp = i ; break ; } } if ( patIdxTmp = = patIdxStart + 1 ) { / / ' * * / * * ' situation , so skip one patIdxStart + + ; continue ; } / / Find the pattern between padIdxStart & padIdxTmp in str between / / strIdxStart & strIdxEnd int patLength = ( patIdxTmp - patIdxStart - 1 ) ; int strLength = ( strIdxEnd - strIdxStart + 1 ) ; int foundIdx = - 1 ; strLoop : for ( int i = 0 ; i < = strLength - patLength ; i + + ) { for ( int j = 0 ; j < patLength ; j + + ) { String subPat = ( String ) patDirs . elementAt ( patIdxStart + j + 1 ) ; String subStr = ( String ) strDirs . elementAt ( strIdxStart + i + j ) ; if ( ! match ( subPat , subStr ) ) { continue strLoop ; } } foundIdx = strIdxStart + i ; break ; } if ( foundIdx = = - 1 ) { return false ; } patIdxStart = patIdxTmp ; strIdxStart = foundIdx + patLength ; } for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( ! patDirs . elementAt ( i ) . equals ( " * * " ) ) { return false ; } } return true ; }
void test7 ( ) throws Throwable { boolean boolean0 = DirectoryScanner . matchPath ( " = \"w~3 } ( , " , " = \"w~3 } ( , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchPath ( String pattern , String str ) { / / When str starts with a File . separator , pattern has to start with a / / File . separator . / / When pattern starts with a File . separator , str has to start with a / / File . separator . if ( str . startsWith ( File . separator ) ! = pattern . startsWith ( File . separator ) ) { return false ; } Vector patDirs = new Vector ( ) ; StringTokenizer st = new StringTokenizer ( pattern , File . separator ) ; while ( st . hasMoreTokens ( ) ) { patDirs . addElement ( st . nextToken ( ) ) ; } Vector strDirs = new Vector ( ) ; st = new StringTokenizer ( str , File . separator ) ; while ( st . hasMoreTokens ( ) ) { strDirs . addElement ( st . nextToken ( ) ) ; } int patIdxStart = 0 ; int patIdxEnd = patDirs . size ( ) - 1 ; int strIdxStart = 0 ; int strIdxEnd = strDirs . size ( ) - 1 ; / / up to first ' * * ' while ( patIdxStart < = patIdxEnd & & strIdxStart < = strIdxEnd ) { String patDir = ( String ) patDirs . elementAt ( patIdxStart ) ; if ( patDir . equals ( " * * " ) ) { break ; } if ( ! match ( patDir , ( String ) strDirs . elementAt ( strIdxStart ) ) ) { return false ; } patIdxStart + + ; strIdxStart + + ; } if ( strIdxStart > strIdxEnd ) { / / String is exhausted for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( ! patDirs . elementAt ( i ) . equals ( " * * " ) ) { return false ; } } return true ; } else { if ( patIdxStart > patIdxEnd ) { / / String not exhausted , but pattern is . Failure . return false ; } } / / up to last ' * * ' while ( patIdxStart < = patIdxEnd & & strIdxStart < = strIdxEnd ) { String patDir = ( String ) patDirs . elementAt ( patIdxEnd ) ; if ( patDir . equals ( " * * " ) ) { break ; } if ( ! match ( patDir , ( String ) strDirs . elementAt ( strIdxEnd ) ) ) { return false ; } patIdxEnd - - ; strIdxEnd - - ; } if ( strIdxStart > strIdxEnd ) { / / String is exhausted for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( ! patDirs . elementAt ( i ) . equals ( " * * " ) ) { return false ; } } return true ; } while ( patIdxStart ! = patIdxEnd & & strIdxStart < = strIdxEnd ) { int patIdxTmp = - 1 ; for ( int i = patIdxStart + 1 ; i < = patIdxEnd ; i + + ) { if ( patDirs . elementAt ( i ) . equals ( " * * " ) ) { patIdxTmp = i ; break ; } } if ( patIdxTmp = = patIdxStart + 1 ) { / / ' * * / * * ' situation , so skip one patIdxStart + + ; continue ; } / / Find the pattern between padIdxStart & padIdxTmp in str between / / strIdxStart & strIdxEnd int patLength = ( patIdxTmp - patIdxStart - 1 ) ; int strLength = ( strIdxEnd - strIdxStart + 1 ) ; int foundIdx = - 1 ; strLoop : for ( int i = 0 ; i < = strLength - patLength ; i + + ) { for ( int j = 0 ; j < patLength ; j + + ) { String subPat = ( String ) patDirs . elementAt ( patIdxStart + j + 1 ) ; String subStr = ( String ) strDirs . elementAt ( strIdxStart + i + j ) ; if ( ! match ( subPat , subStr ) ) { continue strLoop ; } } foundIdx = strIdxStart + i ; break ; } if ( foundIdx = = - 1 ) { return false ; } patIdxStart = patIdxTmp ; strIdxStart = foundIdx + patLength ; } for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( ! patDirs . elementAt ( i ) . equals ( " * * " ) ) { return false ; } } return true ; }
void test8 ( ) throws Throwable { boolean boolean0 = DirectoryScanner . matchPath ( " / * * / CVS" , " / * * / CVS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchPath ( String pattern , String str ) { / / When str starts with a File . separator , pattern has to start with a / / File . separator . / / When pattern starts with a File . separator , str has to start with a / / File . separator . if ( str . startsWith ( File . separator ) ! = pattern . startsWith ( File . separator ) ) { return false ; } Vector patDirs = new Vector ( ) ; StringTokenizer st = new StringTokenizer ( pattern , File . separator ) ; while ( st . hasMoreTokens ( ) ) { patDirs . addElement ( st . nextToken ( ) ) ; } Vector strDirs = new Vector ( ) ; st = new StringTokenizer ( str , File . separator ) ; while ( st . hasMoreTokens ( ) ) { strDirs . addElement ( st . nextToken ( ) ) ; } int patIdxStart = 0 ; int patIdxEnd = patDirs . size ( ) - 1 ; int strIdxStart = 0 ; int strIdxEnd = strDirs . size ( ) - 1 ; / / up to first ' * * ' while ( patIdxStart < = patIdxEnd & & strIdxStart < = strIdxEnd ) { String patDir = ( String ) patDirs . elementAt ( patIdxStart ) ; if ( patDir . equals ( " * * " ) ) { break ; } if ( ! match ( patDir , ( String ) strDirs . elementAt ( strIdxStart ) ) ) { return false ; } patIdxStart + + ; strIdxStart + + ; } if ( strIdxStart > strIdxEnd ) { / / String is exhausted for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( ! patDirs . elementAt ( i ) . equals ( " * * " ) ) { return false ; } } return true ; } else { if ( patIdxStart > patIdxEnd ) { / / String not exhausted , but pattern is . Failure . return false ; } } / / up to last ' * * ' while ( patIdxStart < = patIdxEnd & & strIdxStart < = strIdxEnd ) { String patDir = ( String ) patDirs . elementAt ( patIdxEnd ) ; if ( patDir . equals ( " * * " ) ) { break ; } if ( ! match ( patDir , ( String ) strDirs . elementAt ( strIdxEnd ) ) ) { return false ; } patIdxEnd - - ; strIdxEnd - - ; } if ( strIdxStart > strIdxEnd ) { / / String is exhausted for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( ! patDirs . elementAt ( i ) . equals ( " * * " ) ) { return false ; } } return true ; } while ( patIdxStart ! = patIdxEnd & & strIdxStart < = strIdxEnd ) { int patIdxTmp = - 1 ; for ( int i = patIdxStart + 1 ; i < = patIdxEnd ; i + + ) { if ( patDirs . elementAt ( i ) . equals ( " * * " ) ) { patIdxTmp = i ; break ; } } if ( patIdxTmp = = patIdxStart + 1 ) { / / ' * * / * * ' situation , so skip one patIdxStart + + ; continue ; } / / Find the pattern between padIdxStart & padIdxTmp in str between / / strIdxStart & strIdxEnd int patLength = ( patIdxTmp - patIdxStart - 1 ) ; int strLength = ( strIdxEnd - strIdxStart + 1 ) ; int foundIdx = - 1 ; strLoop : for ( int i = 0 ; i < = strLength - patLength ; i + + ) { for ( int j = 0 ; j < patLength ; j + + ) { String subPat = ( String ) patDirs . elementAt ( patIdxStart + j + 1 ) ; String subStr = ( String ) strDirs . elementAt ( strIdxStart + i + j ) ; if ( ! match ( subPat , subStr ) ) { continue strLoop ; } } foundIdx = strIdxStart + i ; break ; } if ( foundIdx = = - 1 ) { return false ; } patIdxStart = patIdxTmp ; strIdxStart = foundIdx + patLength ; } for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( ! patDirs . elementAt ( i ) . equals ( " * * " ) ) { return false ; } } return true ; }
void test9 ( ) throws Throwable { DirectoryScanner directoryScanner0 = new DirectoryScanner ( ) ; directoryScanner0 . addDefaultExcludes ( ) ; boolean boolean0 = directoryScanner0 . isExcluded ( "srQe3nQUoV ( " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExcluded ( String name ) { for ( int i = 0 ; i < excludes . length ; i + + ) { if ( matchPath ( excludes [ i ] , name ) ) { return true ; } } return false ; }
void test10 ( ) throws Throwable { boolean boolean0 = DirectoryScanner . match ( " . + ? LN < a5M4ZV & m" , " . + ? LN < a5M4ZV & m" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( String pattern , String str ) { char [ ] patArr = pattern . toCharArray ( ) ; char [ ] strArr = str . toCharArray ( ) ; int patIdxStart = 0 ; int patIdxEnd = patArr . length - 1 ; int strIdxStart = 0 ; int strIdxEnd = strArr . length - 1 ; char ch ; boolean containsStar = false ; for ( int i = 0 ; i < patArr . length ; i + + ) { if ( patArr [ i ] = = ' * ' ) { containsStar = true ; break ; } } if ( ! containsStar ) { / / No ' * 's , so we make a shortcut if ( patIdxEnd ! = strIdxEnd ) { return false ; / / Pattern and string do not have the same size } for ( int i = 0 ; i < = patIdxEnd ; i + + ) { ch = patArr [ i ] ; if ( ch ! = ' ? ' & & ch ! = strArr [ i ] ) { return false ; / / Character mismatch } } return true ; / / String matches against pattern } if ( patIdxEnd = = 0 ) { return true ; / / Pattern contains only ' * ' , which matches anything } / / Process characters before first star while ( ( ch = patArr [ patIdxStart ] ) ! = ' * ' & & strIdxStart < = strIdxEnd ) { if ( ch ! = ' ? ' & & ch ! = strArr [ strIdxStart ] ) { return false ; } patIdxStart + + ; strIdxStart + + ; } if ( strIdxStart > strIdxEnd ) { / / All characters in the string are used . Check if only ' * 's are / / left in the pattern . If so , we succeeded . Otherwise failure . for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( patArr [ i ] ! = ' * ' ) { return false ; } } return true ; } / / Process characters after last star while ( ( ch = patArr [ patIdxEnd ] ) ! = ' * ' & & strIdxStart < = strIdxEnd ) { if ( ch ! = ' ? ' & & ch ! = strArr [ strIdxEnd ] ) { return false ; } patIdxEnd - - ; strIdxEnd - - ; } if ( strIdxStart > strIdxEnd ) { / / All characters in the string are used . Check if only ' * 's are / / left in the pattern . If so , we succeeded . Otherwise failure . for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( patArr [ i ] ! = ' * ' ) { return false ; } } return true ; } / / process pattern between stars . padIdxStart and patIdxEnd point / / always to a ' * ' . while ( patIdxStart ! = patIdxEnd & & strIdxStart < = strIdxEnd ) { int patIdxTmp = - 1 ; for ( int i = patIdxStart + 1 ; i < = patIdxEnd ; i + + ) { if ( patArr [ i ] = = ' * ' ) { patIdxTmp = i ; break ; } } if ( patIdxTmp = = patIdxStart + 1 ) { / / Two stars next to each other , skip the first one . patIdxStart + + ; continue ; } / / Find the pattern between padIdxStart & padIdxTmp in str between / / strIdxStart & strIdxEnd int patLength = ( patIdxTmp - patIdxStart - 1 ) ; int strLength = ( strIdxEnd - strIdxStart + 1 ) ; int foundIdx = - 1 ; strLoop : for ( int i = 0 ; i < = strLength - patLength ; i + + ) { for ( int j = 0 ; j < patLength ; j + + ) { ch = patArr [ patIdxStart + j + 1 ] ; if ( ch ! = ' ? ' & & ch ! = strArr [ strIdxStart + i + j ] ) { continue strLoop ; } } foundIdx = strIdxStart + i ; break ; } if ( foundIdx = = - 1 ) { return false ; } patIdxStart = patIdxTmp ; strIdxStart = foundIdx + patLength ; } / / All characters in the string are used . Check if only ' * 's are left / / in the pattern . If so , we succeeded . Otherwise failure . for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( patArr [ i ] ! = ' * ' ) { return false ; } } return true ; }
void test11 ( ) throws Throwable { DirectoryScanner directoryScanner0 = new DirectoryScanner ( ) ; String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = "C " ; stringArray0 [ 1 ] = " 5Vjch . 7wJ#BA } * c" ; stringArray0 [ 2 ] = " / T ! pWRa OFCZ3c\"" ; stringArray0 [ 3 ] = "0" ; stringArray0 [ 4 ] = " * ~ * " ; stringArray0 [ 5 ] = "" ; stringArray0 [ 6 ] = " * * / * ~" ; directoryScanner0 . setExcludes ( stringArray0 ) ; boolean boolean0 = directoryScanner0 . isExcluded ( " } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isExcluded ( String name ) { for ( int i = 0 ; i < excludes . length ; i + + ) { if ( matchPath ( excludes [ i ] , name ) ) { return true ; } } return false ; }
void test12 ( ) throws Throwable { boolean boolean0 = DirectoryScanner . matchPatternStart ( " * / V" , " * / V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchPatternStart ( String pattern , String str ) { / / When str starts with a File . separator , pattern has to start with a / / File . separator . / / When pattern starts with a File . separator , str has to start with a / / File . separator . if ( str . startsWith ( File . separator ) ! = pattern . startsWith ( File . separator ) ) { return false ; } Vector patDirs = new Vector ( ) ; StringTokenizer st = new StringTokenizer ( pattern , File . separator ) ; while ( st . hasMoreTokens ( ) ) { patDirs . addElement ( st . nextToken ( ) ) ; } Vector strDirs = new Vector ( ) ; st = new StringTokenizer ( str , File . separator ) ; while ( st . hasMoreTokens ( ) ) { strDirs . addElement ( st . nextToken ( ) ) ; } int patIdxStart = 0 ; int patIdxEnd = patDirs . size ( ) - 1 ; int strIdxStart = 0 ; int strIdxEnd = strDirs . size ( ) - 1 ; / / up to first ' * * ' while ( patIdxStart < = patIdxEnd & & strIdxStart < = strIdxEnd ) { String patDir = ( String ) patDirs . elementAt ( patIdxStart ) ; if ( patDir . equals ( " * * " ) ) { break ; } if ( ! match ( patDir , ( String ) strDirs . elementAt ( strIdxStart ) ) ) { return false ; } patIdxStart + + ; strIdxStart + + ; } if ( strIdxStart > strIdxEnd ) { / / String is exhausted return true ; } else if ( patIdxStart > patIdxEnd ) { / / String not exhausted , but pattern is . Failure . return false ; } else { / / pattern now holds * * while string is not exhausted / / this will generate false positives but we can live with that . return true ; } }
void test13 ( ) throws Throwable { boolean boolean0 = DirectoryScanner . match ( "^GbS9 + * SmA2'Q7n" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( String pattern , String str ) { char [ ] patArr = pattern . toCharArray ( ) ; char [ ] strArr = str . toCharArray ( ) ; int patIdxStart = 0 ; int patIdxEnd = patArr . length - 1 ; int strIdxStart = 0 ; int strIdxEnd = strArr . length - 1 ; char ch ; boolean containsStar = false ; for ( int i = 0 ; i < patArr . length ; i + + ) { if ( patArr [ i ] = = ' * ' ) { containsStar = true ; break ; } } if ( ! containsStar ) { / / No ' * 's , so we make a shortcut if ( patIdxEnd ! = strIdxEnd ) { return false ; / / Pattern and string do not have the same size } for ( int i = 0 ; i < = patIdxEnd ; i + + ) { ch = patArr [ i ] ; if ( ch ! = ' ? ' & & ch ! = strArr [ i ] ) { return false ; / / Character mismatch } } return true ; / / String matches against pattern } if ( patIdxEnd = = 0 ) { return true ; / / Pattern contains only ' * ' , which matches anything } / / Process characters before first star while ( ( ch = patArr [ patIdxStart ] ) ! = ' * ' & & strIdxStart < = strIdxEnd ) { if ( ch ! = ' ? ' & & ch ! = strArr [ strIdxStart ] ) { return false ; } patIdxStart + + ; strIdxStart + + ; } if ( strIdxStart > strIdxEnd ) { / / All characters in the string are used . Check if only ' * 's are / / left in the pattern . If so , we succeeded . Otherwise failure . for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( patArr [ i ] ! = ' * ' ) { return false ; } } return true ; } / / Process characters after last star while ( ( ch = patArr [ patIdxEnd ] ) ! = ' * ' & & strIdxStart < = strIdxEnd ) { if ( ch ! = ' ? ' & & ch ! = strArr [ strIdxEnd ] ) { return false ; } patIdxEnd - - ; strIdxEnd - - ; } if ( strIdxStart > strIdxEnd ) { / / All characters in the string are used . Check if only ' * 's are / / left in the pattern . If so , we succeeded . Otherwise failure . for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( patArr [ i ] ! = ' * ' ) { return false ; } } return true ; } / / process pattern between stars . padIdxStart and patIdxEnd point / / always to a ' * ' . while ( patIdxStart ! = patIdxEnd & & strIdxStart < = strIdxEnd ) { int patIdxTmp = - 1 ; for ( int i = patIdxStart + 1 ; i < = patIdxEnd ; i + + ) { if ( patArr [ i ] = = ' * ' ) { patIdxTmp = i ; break ; } } if ( patIdxTmp = = patIdxStart + 1 ) { / / Two stars next to each other , skip the first one . patIdxStart + + ; continue ; } / / Find the pattern between padIdxStart & padIdxTmp in str between / / strIdxStart & strIdxEnd int patLength = ( patIdxTmp - patIdxStart - 1 ) ; int strLength = ( strIdxEnd - strIdxStart + 1 ) ; int foundIdx = - 1 ; strLoop : for ( int i = 0 ; i < = strLength - patLength ; i + + ) { for ( int j = 0 ; j < patLength ; j + + ) { ch = patArr [ patIdxStart + j + 1 ] ; if ( ch ! = ' ? ' & & ch ! = strArr [ strIdxStart + i + j ] ) { continue strLoop ; } } foundIdx = strIdxStart + i ; break ; } if ( foundIdx = = - 1 ) { return false ; } patIdxStart = patIdxTmp ; strIdxStart = foundIdx + patLength ; } / / All characters in the string are used . Check if only ' * 's are left / / in the pattern . If so , we succeeded . Otherwise failure . for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( patArr [ i ] ! = ' * ' ) { return false ; } } return true ; }
void test14 ( ) throws Throwable { boolean boolean0 = DirectoryScanner . match ( " * * # * #" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( String pattern , String str ) { char [ ] patArr = pattern . toCharArray ( ) ; char [ ] strArr = str . toCharArray ( ) ; int patIdxStart = 0 ; int patIdxEnd = patArr . length - 1 ; int strIdxStart = 0 ; int strIdxEnd = strArr . length - 1 ; char ch ; boolean containsStar = false ; for ( int i = 0 ; i < patArr . length ; i + + ) { if ( patArr [ i ] = = ' * ' ) { containsStar = true ; break ; } } if ( ! containsStar ) { / / No ' * 's , so we make a shortcut if ( patIdxEnd ! = strIdxEnd ) { return false ; / / Pattern and string do not have the same size } for ( int i = 0 ; i < = patIdxEnd ; i + + ) { ch = patArr [ i ] ; if ( ch ! = ' ? ' & & ch ! = strArr [ i ] ) { return false ; / / Character mismatch } } return true ; / / String matches against pattern } if ( patIdxEnd = = 0 ) { return true ; / / Pattern contains only ' * ' , which matches anything } / / Process characters before first star while ( ( ch = patArr [ patIdxStart ] ) ! = ' * ' & & strIdxStart < = strIdxEnd ) { if ( ch ! = ' ? ' & & ch ! = strArr [ strIdxStart ] ) { return false ; } patIdxStart + + ; strIdxStart + + ; } if ( strIdxStart > strIdxEnd ) { / / All characters in the string are used . Check if only ' * 's are / / left in the pattern . If so , we succeeded . Otherwise failure . for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( patArr [ i ] ! = ' * ' ) { return false ; } } return true ; } / / Process characters after last star while ( ( ch = patArr [ patIdxEnd ] ) ! = ' * ' & & strIdxStart < = strIdxEnd ) { if ( ch ! = ' ? ' & & ch ! = strArr [ strIdxEnd ] ) { return false ; } patIdxEnd - - ; strIdxEnd - - ; } if ( strIdxStart > strIdxEnd ) { / / All characters in the string are used . Check if only ' * 's are / / left in the pattern . If so , we succeeded . Otherwise failure . for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( patArr [ i ] ! = ' * ' ) { return false ; } } return true ; } / / process pattern between stars . padIdxStart and patIdxEnd point / / always to a ' * ' . while ( patIdxStart ! = patIdxEnd & & strIdxStart < = strIdxEnd ) { int patIdxTmp = - 1 ; for ( int i = patIdxStart + 1 ; i < = patIdxEnd ; i + + ) { if ( patArr [ i ] = = ' * ' ) { patIdxTmp = i ; break ; } } if ( patIdxTmp = = patIdxStart + 1 ) { / / Two stars next to each other , skip the first one . patIdxStart + + ; continue ; } / / Find the pattern between padIdxStart & padIdxTmp in str between / / strIdxStart & strIdxEnd int patLength = ( patIdxTmp - patIdxStart - 1 ) ; int strLength = ( strIdxEnd - strIdxStart + 1 ) ; int foundIdx = - 1 ; strLoop : for ( int i = 0 ; i < = strLength - patLength ; i + + ) { for ( int j = 0 ; j < patLength ; j + + ) { ch = patArr [ patIdxStart + j + 1 ] ; if ( ch ! = ' ? ' & & ch ! = strArr [ strIdxStart + i + j ] ) { continue strLoop ; } } foundIdx = strIdxStart + i ; break ; } if ( foundIdx = = - 1 ) { return false ; } patIdxStart = patIdxTmp ; strIdxStart = foundIdx + patLength ; } / / All characters in the string are used . Check if only ' * 's are left / / in the pattern . If so , we succeeded . Otherwise failure . for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( patArr [ i ] ! = ' * ' ) { return false ; } } return true ; }
void test15 ( ) throws Throwable { boolean boolean0 = DirectoryScanner . match ( " * * / * ~ / " , " * * / * ~ / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean match ( String pattern , String str ) { char [ ] patArr = pattern . toCharArray ( ) ; char [ ] strArr = str . toCharArray ( ) ; int patIdxStart = 0 ; int patIdxEnd = patArr . length - 1 ; int strIdxStart = 0 ; int strIdxEnd = strArr . length - 1 ; char ch ; boolean containsStar = false ; for ( int i = 0 ; i < patArr . length ; i + + ) { if ( patArr [ i ] = = ' * ' ) { containsStar = true ; break ; } } if ( ! containsStar ) { / / No ' * 's , so we make a shortcut if ( patIdxEnd ! = strIdxEnd ) { return false ; / / Pattern and string do not have the same size } for ( int i = 0 ; i < = patIdxEnd ; i + + ) { ch = patArr [ i ] ; if ( ch ! = ' ? ' & & ch ! = strArr [ i ] ) { return false ; / / Character mismatch } } return true ; / / String matches against pattern } if ( patIdxEnd = = 0 ) { return true ; / / Pattern contains only ' * ' , which matches anything } / / Process characters before first star while ( ( ch = patArr [ patIdxStart ] ) ! = ' * ' & & strIdxStart < = strIdxEnd ) { if ( ch ! = ' ? ' & & ch ! = strArr [ strIdxStart ] ) { return false ; } patIdxStart + + ; strIdxStart + + ; } if ( strIdxStart > strIdxEnd ) { / / All characters in the string are used . Check if only ' * 's are / / left in the pattern . If so , we succeeded . Otherwise failure . for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( patArr [ i ] ! = ' * ' ) { return false ; } } return true ; } / / Process characters after last star while ( ( ch = patArr [ patIdxEnd ] ) ! = ' * ' & & strIdxStart < = strIdxEnd ) { if ( ch ! = ' ? ' & & ch ! = strArr [ strIdxEnd ] ) { return false ; } patIdxEnd - - ; strIdxEnd - - ; } if ( strIdxStart > strIdxEnd ) { / / All characters in the string are used . Check if only ' * 's are / / left in the pattern . If so , we succeeded . Otherwise failure . for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( patArr [ i ] ! = ' * ' ) { return false ; } } return true ; } / / process pattern between stars . padIdxStart and patIdxEnd point / / always to a ' * ' . while ( patIdxStart ! = patIdxEnd & & strIdxStart < = strIdxEnd ) { int patIdxTmp = - 1 ; for ( int i = patIdxStart + 1 ; i < = patIdxEnd ; i + + ) { if ( patArr [ i ] = = ' * ' ) { patIdxTmp = i ; break ; } } if ( patIdxTmp = = patIdxStart + 1 ) { / / Two stars next to each other , skip the first one . patIdxStart + + ; continue ; } / / Find the pattern between padIdxStart & padIdxTmp in str between / / strIdxStart & strIdxEnd int patLength = ( patIdxTmp - patIdxStart - 1 ) ; int strLength = ( strIdxEnd - strIdxStart + 1 ) ; int foundIdx = - 1 ; strLoop : for ( int i = 0 ; i < = strLength - patLength ; i + + ) { for ( int j = 0 ; j < patLength ; j + + ) { ch = patArr [ patIdxStart + j + 1 ] ; if ( ch ! = ' ? ' & & ch ! = strArr [ strIdxStart + i + j ] ) { continue strLoop ; } } foundIdx = strIdxStart + i ; break ; } if ( foundIdx = = - 1 ) { return false ; } patIdxStart = patIdxTmp ; strIdxStart = foundIdx + patLength ; } / / All characters in the string are used . Check if only ' * 's are left / / in the pattern . If so , we succeeded . Otherwise failure . for ( int i = patIdxStart ; i < = patIdxEnd ; i + + ) { if ( patArr [ i ] ! = ' * ' ) { return false ; } } return true ; }
void test20 ( ) throws Throwable { DirectoryScanner directoryScanner0 = new DirectoryScanner ( ) ; File file0 = new File ( " + 0" ) ; File file1 = file0 . getCanonicalFile ( ) ; File file2 = file1 . getParentFile ( ) ; directoryScanner0 . setBasedir ( file2 ) ; directoryScanner0 . scan ( ) ; String [ ] stringArray0 = directoryScanner0 . getExcludedFiles ( ) ; String [ ] stringArray1 = directoryScanner0 . getNotIncludedDirectories ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getNotIncludedDirectories ( ) throws LTSException { slowScan ( ) ; int count = dirsNotIncluded . size ( ) ; String [ ] directories = new String [ count ] ; for ( int i = 0 ; i < count ; i + + ) { directories [ i ] = ( String ) dirsNotIncluded . elementAt ( i ) ; } return directories ; }
void test21 ( ) throws Throwable { DirectoryScanner directoryScanner0 = new DirectoryScanner ( ) ; String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; stringArray0 [ 3 ] = "^" ; stringArray0 [ 4 ] = "" ; stringArray0 [ 6 ] = "^" ; stringArray0 [ 0 ] = "" ; stringArray0 [ 5 ] = "^" ; stringArray0 [ 7 ] = "" ; stringArray0 [ 8 ] = "" ; stringArray0 [ 9 ] = "X6 ] ~5Xl / p ? It" ; directoryScanner0 . setIncludes ( stringArray0 ) ; File file0 = new File ( "^" ) ; File file1 = file0 . getAbsoluteFile ( ) ; File file2 = file1 . getParentFile ( ) ; directoryScanner0 . setBasedir ( file2 ) ; directoryScanner0 . scan ( ) ; String [ ] stringArray1 = directoryScanner0 . getNotIncludedDirectories ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getNotIncludedDirectories ( ) throws LTSException { slowScan ( ) ; int count = dirsNotIncluded . size ( ) ; String [ ] directories = new String [ count ] ; for ( int i = 0 ; i < count ; i + + ) { directories [ i ] = ( String ) dirsNotIncluded . elementAt ( i ) ; } return directories ; }
void test23 ( ) throws Throwable { DirectoryScanner directoryScanner0 = new DirectoryScanner ( ) ; File file0 = new File ( " + 0" ) ; File file1 = file0 . getAbsoluteFile ( ) ; File file2 = file1 . getParentFile ( ) ; directoryScanner0 . setBasedir ( file2 ) ; directoryScanner0 . scan ( ) ; directoryScanner0 . scandir ( file2 , "" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void scandir ( File dir , String vpath , boolean fast ) throws LTSException { String [ ] newfiles = dir . list ( ) ; if ( newfiles = = null ) { / * * two reasons are mentioned in the API docs for File . list * ( 1 ) dir is not a directory . This is impossible as * we wouldn't get here in this case . * ( 2 ) an IO error occurred ( why doesn't it throw an exception * then ? ? ? ) * / throw new LTSException ( "IO error scanning directory " + dir . getAbsolutePath ( ) ) ; } for ( int i = 0 ; i < newfiles . length ; i + + ) { String name = vpath + newfiles [ i ] ; File file = new File ( dir , newfiles [ i ] ) ; if ( file . isDirectory ( ) ) { if ( isIncluded ( name ) ) { if ( ! isExcluded ( name ) ) { dirsIncluded . addElement ( name ) ; if ( fast ) { scandir ( file , name + File . separator , fast ) ; } } else { dirsExcluded . addElement ( name ) ; } } else { dirsNotIncluded . addElement ( name ) ; if ( fast & & couldHoldIncluded ( name ) ) { scandir ( file , name + File . separator , fast ) ; } } if ( ! fast ) { scandir ( file , name + File . separator , fast ) ; } } else if ( file . isFile ( ) ) { if ( isIncluded ( name ) ) { if ( ! isExcluded ( name ) ) { filesIncluded . addElement ( name ) ; } else { filesExcluded . addElement ( name ) ; } } else { filesNotIncluded . addElement ( name ) ; } } } }
void test24 ( ) throws Throwable { DirectoryScanner directoryScanner0 = new DirectoryScanner ( ) ; File file0 = new File ( " + 0" ) ; File file1 = file0 . getAbsoluteFile ( ) ; File file2 = file1 . getParentFile ( ) ; directoryScanner0 . setBasedir ( file2 ) ; directoryScanner0 . scan ( ) ; String [ ] stringArray0 = directoryScanner0 . getIncludedFiles ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getIncludedFiles ( ) { int count = filesIncluded . size ( ) ; String [ ] files = new String [ count ] ; for ( int i = 0 ; i < count ; i + + ) { files [ i ] = ( String ) filesIncluded . elementAt ( i ) ; } return files ; }
void test25 ( ) throws Throwable { DirectoryScanner directoryScanner0 = new DirectoryScanner ( ) ; String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "ck > ? Y | gV@ > jrpr ) 91LO" ; stringArray0 [ 2 ] = "ck > ? Y | gV@ > jrpr ) 91LO" ; stringArray0 [ 3 ] = "7A - JOl^El Ptk" ; File file0 = new File ( "7A - JOl^El Ptk" ) ; File file1 = file0 . getAbsoluteFile ( ) ; File file2 = file1 . getParentFile ( ) ; directoryScanner0 . setBasedir ( file2 ) ; directoryScanner0 . setIncludes ( stringArray0 ) ; directoryScanner0 . scan ( ) ; String [ ] stringArray1 = directoryScanner0 . getNotIncludedFiles ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getNotIncludedFiles ( ) throws LTSException { slowScan ( ) ; int count = filesNotIncluded . size ( ) ; String [ ] files = new String [ count ] ; for ( int i = 0 ; i < count ; i + + ) { files [ i ] = ( String ) filesNotIncluded . elementAt ( i ) ; } return files ; }
void test26 ( ) throws Throwable { DirectoryScanner directoryScanner0 = new DirectoryScanner ( ) ; File file0 = new File ( " + 0" ) ; File file1 = file0 . getCanonicalFile ( ) ; File file2 = file1 . getParentFile ( ) ; directoryScanner0 . setBasedir ( file2 ) ; directoryScanner0 . scan ( ) ; String [ ] stringArray0 = directoryScanner0 . getIncludedDirectories ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getIncludedDirectories ( ) { int count = dirsIncluded . size ( ) ; String [ ] directories = new String [ count ] ; for ( int i = 0 ; i < count ; i + + ) { directories [ i ] = ( String ) dirsIncluded . elementAt ( i ) ; } return directories ; }
void test3 ( ) throws Throwable { StringWriter stringWriter0 = new StringWriter ( ) ; IOUtilities . close ( ( Writer ) stringWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test5 ( ) throws Throwable { IOUtilities iOUtilities0 = new IOUtilities ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test7 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 10 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( int ) ( byte ) 28 , ( int ) ( byte ) 28 ) ; IOUtilities . closeNoExceptions ( ( InputStream ) byteArrayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object read ( XmlSerializer xser , Element node , boolean forgiving ) throws LTSException ; String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test8 ( ) throws Throwable { PipedReader pipedReader0 = new PipedReader ( ) ; IOUtilities . close ( ( Reader ) pipedReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) { }
void test10 ( ) throws Throwable { PipedReader pipedReader0 = new PipedReader ( ) ; LineNumberReader lineNumberReader0 = new LineNumberReader ( ( Reader ) pipedReader0 ) ; IOUtilities . closeNoExceptions ( ( BufferedReader ) lineNumberReader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void closeNoExceptions ( OutputStream ostream ) { if ( null = = ostream ) return ; try { ostream . close ( ) ; } catch ( IOException e ) { } }
void test13 ( ) throws Throwable { File file0 = new File ( "np0j ) ; } j" , "np0j ) ; } j" ) ; ImprovedFile improvedFile0 = new ImprovedFile ( file0 , "np0j ) ; } j" ) ; ImprovedFile improvedFile1 = IOUtilities . toImprovedFile ( ( File ) improvedFile0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ImprovedFile toImprovedFile ( File f ) { if ( f instanceof ImprovedFile ) return ( ImprovedFile ) f ; else return new ImprovedFile ( f ) ; }
void test14 ( ) throws Throwable { File file0 = IOUtilities . backup ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File backup ( File file ) throws IOException { if ( null = = file | | ! file . exists ( ) ) return null ; String fname = file . toString ( ) ; int index = fname . lastIndexOf ( ' . ' ) ; if ( - 1 ! = index ) fname = fname . substring ( 0 , index ) ; fname = fname + " . bak" ; File backupFile = new File ( fname ) ; copyFile ( file , backupFile ) ; return backupFile ; }
void test15 ( ) throws Throwable { File file0 = new File ( "np0j ) ; } j" , "np0j ) ; } j" ) ; File file1 = IOUtilities . backup ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File backup ( File file ) throws IOException { if ( null = = file | | ! file . exists ( ) ) return null ; String fname = file . toString ( ) ; int index = fname . lastIndexOf ( ' . ' ) ; if ( - 1 ! = index ) fname = fname . substring ( 0 , index ) ; fname = fname + " . bak" ; File backupFile = new File ( fname ) ; copyFile ( file , backupFile ) ; return backupFile ; }
void test17 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 2 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) byteArrayOutputStream0 , true ) ; IOUtilities . copyStream ( ( InputStream ) byteArrayInputStream0 , printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { char [ ] charArray0 = new char [ 18 ] ; charArray0 [ 0 ] = 'U' ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; LineNumberReader lineNumberReader0 = new LineNumberReader ( ( Reader ) charArrayReader0 ) ; PushbackReader pushbackReader0 = new PushbackReader ( ( Reader ) lineNumberReader0 ) ; ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer ( ( Reader ) pushbackReader0 ) ; String string0 = improvedStreamTokenizer0 . nextWord ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String nextWord ( ) throws IOException { String s = null ; nextToken ( ) ; switch ( ttype ) { case TT_EOF : s = null ; break ; case TT_WORD : case QUOTE_CHAR : s = sval ; break ; default : throw new IOException ( "non - string" ) ; } return s ; }
void test5 ( ) throws Throwable { char [ ] charArray0 = new char [ 7 ] ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; LineNumberReader lineNumberReader0 = new LineNumberReader ( ( Reader ) charArrayReader0 ) ; PushbackReader pushbackReader0 = new PushbackReader ( ( Reader ) lineNumberReader0 ) ; ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer ( ( Reader ) pushbackReader0 ) ; charArrayReader0 . read ( charArray0 ) ; String string0 = improvedStreamTokenizer0 . nextWord ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String nextWord ( ) throws IOException { String s = null ; nextToken ( ) ; switch ( ttype ) { case TT_EOF : s = null ; break ; case TT_WORD : case QUOTE_CHAR : s = sval ; break ; default : throw new IOException ( "non - string" ) ; } return s ; }
void test12 ( ) throws Throwable { byte byte0 = ImprovedStreamTokenizer . charToHex ( ' & ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte charToHex ( char c ) { int temp = ( int ) c ; if ( c > = '0' & & c < = '9' ) temp = c - '0' ; else { temp = c - 'A' ; temp = temp + 10 ; } return ( byte ) temp ; }
void test13 ( ) throws Throwable { byte byte0 = ImprovedStreamTokenizer . charToHex ( '3' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte charToHex ( char c ) { int temp = ( int ) c ; if ( c > = '0' & & c < = '9' ) temp = c - '0' ; else { temp = c - 'A' ; temp = temp + 10 ; } return ( byte ) temp ; }
void test14 ( ) throws Throwable { byte byte0 = ImprovedStreamTokenizer . charToHex ( 'X' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte charToHex ( char c ) { int temp = ( int ) c ; if ( c > = '0' & & c < = '9' ) temp = c - '0' ; else { temp = c - 'A' ; temp = temp + 10 ; } return ( byte ) temp ; }
void test0 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) pipedOutputStream0 ) ; indentingPrintWriter0 . println ( ( float ) 'A' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndentSize ( ) { return myIndentSize ; }
void test1 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) pipedOutputStream0 ) ; indentingPrintWriter0 . println ( 876L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean suppressPrefix ( ) { return mySuppressPrefix ; }
void test2 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) byteArrayOutputStream0 ) ; indentingPrintWriter0 . println ( ( int ) 'D' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test3 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) byteArrayOutputStream0 ) ; char [ ] charArray0 = new char [ 1 ] ; indentingPrintWriter0 . println ( charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) byteArrayOutputStream0 ) ; indentingPrintWriter0 . println ( ( double ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean needToPrintPrefix ( ) { return ! myPrefixPrinted ; }
void test5 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) byteArrayOutputStream0 ) ; boolean boolean0 = indentingPrintWriter0 . getSuppressPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndentSize ( ) { return myIndentSize ; }
void test6 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) pipedOutputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean suppressPrefix ( ) { return mySuppressPrefix ; }
void test7 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) pipedOutputStream0 ) ; indentingPrintWriter0 . decreaseIndent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndentSize ( ) { return myIndentSize ; }
void test8 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) byteArrayOutputStream0 ) ; indentingPrintWriter0 . print ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean needToPrintPrefix ( ) { return ! myPrefixPrinted ; }
void test9 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) byteArrayOutputStream0 ) ; indentingPrintWriter0 . println ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test10 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) pipedOutputStream0 ) ; indentingPrintWriter0 . println ( '\n' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndentSize ( ) { return myIndentSize ; }
void test11 ( ) throws Throwable { CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( Writer ) charArrayWriter0 ) ; indentingPrintWriter0 . setPrefix ( ( String ) null ) ; indentingPrintWriter0 . println ( "n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test12 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) pipedOutputStream0 ) ; indentingPrintWriter0 . increaseIndent ( ) ; indentingPrintWriter0 . increaseIndent ( ) ; indentingPrintWriter0 . decreaseIndent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( ) { if ( null = = myPrefix ) myPrefix = "" ; return myPrefix ; }
void test13 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( OutputStream ) pipedOutputStream0 ) ; indentingPrintWriter0 . print ( ( Object ) "\u671D\u9C9C\u6587" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndentSize ( ) { return myIndentSize ; }
void test1 ( ) throws Throwable { ImprovedFile improvedFile0 = new ImprovedFile ( " ] k ] + OR6t" , " ] k ] + OR6t" ) ; ZipArchive zipArchive0 = new ZipArchive ( ( File ) improvedFile0 ) ; URL uRL0 = zipArchive0 . entryToURL ( "K ] Z24B_x , ! jLZ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPath ( ) { StringBuffer sb = new StringBuffer ( 128 ) ; basicGetPath ( sb ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( "sR > @T`A7j4~ & 6 : %SJ" ) ; zipArchive0 . finalize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCreateBackups ( ) { return myCreateBackups ; }
void test13 ( ) throws Throwable { ImprovedFile improvedFile0 = new ImprovedFile ( " ] k ] + OR6t" , " ] k ] + OR6t" ) ; ZipArchive zipArchive0 = new ZipArchive ( ( File ) improvedFile0 ) ; BufferedInputStream bufferedInputStream0 = new BufferedInputStream ( ( InputStream ) null ) ; DataInputStream dataInputStream0 = new DataInputStream ( ( InputStream ) bufferedInputStream0 ) ; zipArchive0 . closeNoExceptions ( ( InputStream ) dataInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test14 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 1821 ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) byteArrayOutputStream0 , true ) ; zipArchive0 . closeNoExceptions ( ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean archiveHasBeenExtracted ( ) { return myArchiveHasBeenExtracted ; }
void test15 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( ) ; Properties properties0 = new Properties ( ) ; Enumeration < Object > enumeration0 = properties0 . keys ( ) ; List < Object > list0 = zipArchive0 . enumToList ( enumeration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test16 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( "dwpO#^gTA1bf / `3o8T" ) ; StringTokenizer stringTokenizer0 = new StringTokenizer ( "dwpO#^gTA1bf / `3o8T" ) ; / / Undeclared exception ! List < Object > list0 = null ; try { list0 = zipArchive0 . enumToList ( ( Enumeration ) stringTokenizer0 ) ; fail ( "Expecting exception : ClassCastException" ) ; } catch ( ClassCastException e ) { / * * java . lang . String cannot be cast to java . util . zip . ZipEntry * / } "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { File file0 = new File ( "" ) ; ZipArchive zipArchive0 = new ZipArchive ( file0 ) ; ArchiveTreeNode archiveTreeNode0 = new ArchiveTreeNode ( ( Archive ) zipArchive0 , "" ) ; ZipArchive zipArchive1 = ( ZipArchive ) archiveTreeNode0 . getArchive ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAbsoluteEntry ( ) { StringBuffer sb = new StringBuffer ( ) ; buildAbsoluteEntry ( sb ) ; String s = sb . toString ( ) ; return s ; }
void test1 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( ) ; ArchiveTreeNode archiveTreeNode0 = new ArchiveTreeNode ( ( Archive ) zipArchive0 , "" , ( - 13 ) ) ; String string0 = archiveTreeNode0 . getAbsoluteEntry ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNodeType ( ) { return myNodeType ; }
void test3 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( ) ; ArchiveTreeNode archiveTreeNode0 = new ArchiveTreeNode ( ( Archive ) zipArchive0 , "d5ihGY . 8 ) * = " ) ; int int0 = archiveTreeNode0 . getNodeType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAbsoluteEntry ( ) { StringBuffer sb = new StringBuffer ( ) ; buildAbsoluteEntry ( sb ) ; String s = sb . toString ( ) ; return s ; }
void test4 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( ) ; ArchiveTreeNode archiveTreeNode0 = new ArchiveTreeNode ( ( Archive ) zipArchive0 , "" , ( - 13 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAbsoluteEntry ( ) { StringBuffer sb = new StringBuffer ( ) ; buildAbsoluteEntry ( sb ) ; String s = sb . toString ( ) ; return s ; }
void test0 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( ) ; zipArchive0 . commit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean archiveHasBeenExtracted ( ) { return myArchiveHasBeenExtracted ; }
void test1 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ZipArchive zipArchive0 = new ZipArchive ( " < m8^ [ 2X$ * + 9rR < : 5W4G" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream get ( String name ) throws LTSException , IOException { InputStream istream ; if ( ! entryExists ( name ) ) return null ; if ( ! archiveHasBeenExtracted ( ) ) istream = basicGet ( name ) ; else { File f = new File ( getTempDir ( ) , name ) ; try { istream = new FileInputStream ( f ) ; } catch ( FileNotFoundException e ) { istream = null ; } } return istream ; }
void test4 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCreateBackups ( ) { return myCreateBackups ; }
void test7 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List list ( ) throws LTSException , IOException { return getFileList ( ) ; }
void test8 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List list ( ) throws LTSException , IOException { return getFileList ( ) ; }
void test9 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( "`uQ5 ? R + kCLCf#$ = uD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object deepCopy ( ) throws DeepCopyException { return DeepCopyUtil . deepCopy ( this , false ) ; }
void test10 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( "d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DeepCopier continueDeepCopy ( Map map , boolean copyTransients ) throws DeepCopyException { return ( DeepCopier ) DeepCopyUtil . continueDeepCopy ( this , map , copyTransients ) ; }
void test13 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( ) ; zipArchive0 . setFileList ( ( List ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCreateBackups ( ) { return myCreateBackups ; }
void test14 ( ) throws Throwable { ImprovedFile improvedFile0 = new ImprovedFile ( "nntn . b' ] " ) ; ZipArchive zipArchive0 = new ZipArchive ( ( File ) improvedFile0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void commitTo ( File ofile ) throws LTSException { ImprovedFile outfile ; if ( ofile instanceof ImprovedFile ) outfile = ( ImprovedFile ) ofile ; else outfile = new ImprovedFile ( ofile ) ; try { if ( outfile . exists ( ) & & createBackups ( ) ) outfile . backup ( true ) ; } catch ( FileException e ) { String msg = "Error trying to backup file , " + outfile + " . Reason : " + e . getReason ( ) ; throw new LTSException ( msg , e ) ; } try { if ( archiveHasBeenExtracted ( ) ) { writeArchiveFromTo ( getTempDir ( ) , outfile ) ; } else { getArchiveFile ( ) . copyTo ( outfile ) ; } } catch ( FileNotFoundException e ) { throw new LTSException ( "Error trying to create output file , " + outfile , e ) ; } catch ( IOException e ) { throw new LTSException ( "Error trying to write data to output file" + outfile , e ) ; } }
void test15 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( "Error trying to write data to output file" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void saveProperties ( String name , Properties p ) throws LTSException , IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; p . store ( baos , null ) ; baos . close ( ) ; byte [ ] buf = baos . toByteArray ( ) ; ByteArrayInputStream bais = new ByteArrayInputStream ( buf ) ; add ( name , bais ) ; bais . close ( ) ; }
void test16 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ZipArchive zipArchive0 = new ZipArchive ( "d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream get ( String name ) throws LTSException , IOException { InputStream istream ; if ( ! entryExists ( name ) ) return null ; if ( ! archiveHasBeenExtracted ( ) ) istream = basicGet ( name ) ; else { File f = new File ( getTempDir ( ) , name ) ; try { istream = new FileInputStream ( f ) ; } catch ( FileNotFoundException e ) { istream = null ; } } return istream ; }
void test17 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { File file0 = new File ( "" , "" ) ; ZipArchive zipArchive0 = new ZipArchive ( file0 , file0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream get ( String name ) throws LTSException , IOException { InputStream istream ; if ( ! entryExists ( name ) ) return null ; if ( ! archiveHasBeenExtracted ( ) ) istream = basicGet ( name ) ; else { File f = new File ( getTempDir ( ) , name ) ; try { istream = new FileInputStream ( f ) ; } catch ( FileNotFoundException e ) { istream = null ; } } return istream ; }
void test19 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( ) ; byte [ ] byteArray0 = new byte [ 5 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 ) ; zipArchive0 . copyFromTo ( ( InputStream ) byteArrayInputStream0 , ( OutputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void copyFromTo ( InputStream istream , OutputStream ostream ) throws IOException { byte [ ] buf = new byte [ 8192 ] ; int count = 0 ; do { count = istream . read ( buf ) ; if ( count > 0 ) ostream . write ( buf , 0 , count ) ; } while ( count > 0 ) ; }
void test20 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void copyFromTo ( InputStream istream , OutputStream ostream ) throws IOException { byte [ ] buf = new byte [ 8192 ] ; int count = 0 ; do { count = istream . read ( buf ) ; if ( count > 0 ) ostream . write ( buf , 0 , count ) ; } while ( count > 0 ) ; }
void test21 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( ) ; File file0 = new File ( "_ - qO4Z . fc`~ , L + G" ) ; File file1 = file0 . getCanonicalFile ( ) ; zipArchive0 . createParentDirectories ( file1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void createParentDirectories ( File f ) { File parent = f . getParentFile ( ) ; if ( ! parent . exists ( ) ) { parent . mkdirs ( ) ; } }
void test22 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { ZipArchive zipArchive0 = new ZipArchive ( "zarchive" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream get ( String name ) throws LTSException , IOException { InputStream istream ; if ( ! entryExists ( name ) ) return null ; if ( ! archiveHasBeenExtracted ( ) ) istream = basicGet ( name ) ; else { File f = new File ( getTempDir ( ) , name ) ; try { istream = new FileInputStream ( f ) ; } catch ( FileNotFoundException e ) { istream = null ; } } return istream ; }
void test23 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( "d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCreateBackups ( ) { return myCreateBackups ; }
void test25 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( ) ; zipArchive0 . rollback ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test26 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void commitTo ( File ofile ) throws LTSException { ImprovedFile outfile ; if ( ofile instanceof ImprovedFile ) outfile = ( ImprovedFile ) ofile ; else outfile = new ImprovedFile ( ofile ) ; try { if ( outfile . exists ( ) & & createBackups ( ) ) outfile . backup ( true ) ; } catch ( FileException e ) { String msg = "Error trying to backup file , " + outfile + " . Reason : " + e . getReason ( ) ; throw new LTSException ( msg , e ) ; } try { if ( archiveHasBeenExtracted ( ) ) { writeArchiveFromTo ( getTempDir ( ) , outfile ) ; } else { getArchiveFile ( ) . copyTo ( outfile ) ; } } catch ( FileNotFoundException e ) { throw new LTSException ( "Error trying to create output file , " + outfile , e ) ; } catch ( IOException e ) { throw new LTSException ( "Error trying to write data to output file" + outfile , e ) ; } }
void test28 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( "d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCreateBackups ( ) { return myCreateBackups ; }
void test30 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( "d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean createBackups ( ) { return getCreateBackups ( ) ; }
void test31 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( "d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean createBackups ( ) { return getCreateBackups ( ) ; }
void test32 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCreateBackups ( ) { return myCreateBackups ; }
void test33 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCreateBackups ( ) { return myCreateBackups ; }
void test34 ( ) throws Throwable { ZipArchive zipArchive0 = new ZipArchive ( ) ; String string0 = zipArchive0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { boolean boolean0 = ReflectionUtils . isSimpleType ( ( Class ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimpleType ( Class c ) { return getSimpleTypes ( ) . contains ( c ) ; }
void test4 ( ) throws Throwable { int int0 = ReflectionUtils . shortNameToType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int shortNameToType ( String s ) { return ourSimpleShortNameMap . stringToInt ( s ) ; }
void test5 ( ) throws Throwable { ReflectionUtils reflectionUtils0 = new ReflectionUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test7 ( ) throws Throwable { String string0 = ReflectionUtils . typeToLongName ( ( int ) ' . ' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String typeToLongName ( int type ) { return ourSimpleLongNameMap . intToString ( type ) ; }
void test12 ( ) throws Throwable { Class < ? > class0 = Boolean . class ; Method method0 = ReflectionUtils . findMethod ( ( Class ) class0 , "Double" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Method findMethod ( Class c , String name , Class [ ] formalParams ) { Method m = null ; while ( null = = m & & null ! = c & & Object . class ! = c ) { try { m = c . getDeclaredMethod ( name , formalParams ) ; } catch ( NoSuchMethodException e ) { } c = c . getSuperclass ( ) ; } return m ; }
void test13 ( ) throws Throwable { int int0 = ReflectionUtils . longNameToType ( " = [ A ) t } j * ) l [ C . BzyA" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int longNameToType ( String s ) { return ourSimpleLongNameMap . stringToInt ( s ) ; }
void test17 ( ) throws Throwable { Class < ? > class0 = Boolean . class ; Field [ ] fieldArray0 = ReflectionUtils . getAllFields ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Field [ ] getAllFields ( Class c ) { List l = new ArrayList ( ) ; addDeclaredFields ( l , c ) ; Field [ ] fields = new Field [ l . size ( ) ] ; fields = ( Field [ ] ) l . toArray ( fields ) ; return fields ; }
void test19 ( ) throws Throwable { String string0 = ReflectionUtils . typeToShortName ( 11 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String typeToShortName ( int type ) { return ourSimpleShortNameMap . intToString ( type ) ; }
void test20 ( ) throws Throwable { int int0 = ReflectionUtils . classToPrimitiveCode ( ( Class ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int classToPrimitiveCode ( Class c ) { int code = - 1 ; if ( null ! = c ) { Integer i = ( Integer ) ourClassToPrimitiveCodeMap . get ( c ) ; if ( null ! = i ) code = i . intValue ( ) ; } return code ; }
void test21 ( ) throws Throwable { Class < ? > class0 = Boolean . class ; boolean boolean0 = ReflectionUtils . isDefaultValue ( ( Class ) class0 , ( Object ) " - 1 . 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultValue ( Class c , Object value ) { / / / / For references , the default value is null / / if ( null = = value ) return true ; boolean isDefault = false ; switch ( classToPrimitiveCode ( c ) ) { case PRIMITIVE_BOOLEAN : { Boolean b = ( Boolean ) value ; isDefault = ! b . booleanValue ( ) ; break ; } case PRIMITIVE_BYTE : { Byte b = ( Byte ) value ; isDefault = ( 0 = = b . byteValue ( ) ) ; break ; } case PRIMITIVE_CHAR : { Character theChar = ( Character ) value ; isDefault = ( 0 = = theChar . charValue ( ) ) ; break ; } case PRIMITIVE_DOUBLE : { Double d = ( Double ) value ; isDefault = ( 0 . 0 = = d . doubleValue ( ) ) ; break ; } case PRIMITIVE_FLOAT : { Float f = ( Float ) value ; isDefault = ( 0 . 0 = = f . floatValue ( ) ) ; break ; } case PRIMITIVE_INT : { Integer i = ( Integer ) value ; isDefault = ( 0 = = i . intValue ( ) ) ; break ; } case PRIMITIVE_LONG : { Long l = ( Long ) value ; isDefault = ( 0 = = l . longValue ( ) ) ; break ; } case PRIMITIVE_SHORT : { Short s = ( Short ) value ; isDefault = ( 0 = = s . shortValue ( ) ) ; break ; } / / / / If this is a non - null reference , then it does not have the / / default value . / / default : isDefault = false ; break ; } return isDefault ; }
void test22 ( ) throws Throwable { Class < ? > class0 = Double . class ; boolean boolean0 = ReflectionUtils . isDefaultValue ( ( Class ) class0 , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDefaultValue ( Class c , Object value ) { / / / / For references , the default value is null / / if ( null = = value ) return true ; boolean isDefault = false ; switch ( classToPrimitiveCode ( c ) ) { case PRIMITIVE_BOOLEAN : { Boolean b = ( Boolean ) value ; isDefault = ! b . booleanValue ( ) ; break ; } case PRIMITIVE_BYTE : { Byte b = ( Byte ) value ; isDefault = ( 0 = = b . byteValue ( ) ) ; break ; } case PRIMITIVE_CHAR : { Character theChar = ( Character ) value ; isDefault = ( 0 = = theChar . charValue ( ) ) ; break ; } case PRIMITIVE_DOUBLE : { Double d = ( Double ) value ; isDefault = ( 0 . 0 = = d . doubleValue ( ) ) ; break ; } case PRIMITIVE_FLOAT : { Float f = ( Float ) value ; isDefault = ( 0 . 0 = = f . floatValue ( ) ) ; break ; } case PRIMITIVE_INT : { Integer i = ( Integer ) value ; isDefault = ( 0 = = i . intValue ( ) ) ; break ; } case PRIMITIVE_LONG : { Long l = ( Long ) value ; isDefault = ( 0 = = l . longValue ( ) ) ; break ; } case PRIMITIVE_SHORT : { Short s = ( Short ) value ; isDefault = ( 0 = = s . shortValue ( ) ) ; break ; } / / / / If this is a non - null reference , then it does not have the / / default value . / / default : isDefault = false ; break ; } return isDefault ; }
void test23 ( ) throws Throwable { Class < ? > class0 = Boolean . class ; int int0 = ReflectionUtils . classToSimpleType ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int classToSimpleType ( Class c ) { Integer i = ( Integer ) ourClassSimpleMap . get ( c ) ; if ( null = = i ) return - 1 ; else return i . intValue ( ) ; }
void test24 ( ) throws Throwable { Class < ? > class0 = ReflectionUtils . class ; int int0 = ReflectionUtils . classToSimpleType ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int classToSimpleType ( Class c ) { Integer i = ( Integer ) ourClassSimpleMap . get ( c ) ; if ( null = = i ) return - 1 ; else return i . intValue ( ) ; }
void test25 ( ) throws Throwable { Class < ? > class0 = ReflectionUtils . class ; Class < Object > class1 = ReflectionUtils . getBasicArrayType ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDimensions ( Object o ) { int dimensions = 0 ; for ( Class c = o . getClass ( ) ; c . isArray ( ) ; c = c . getComponentType ( ) ) { dimensions + + ; } return dimensions ; }
void test26 ( ) throws Throwable { Class < Object > class0 = ReflectionUtils . getComponentClass ( ( Object ) "6a8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getComponentClass ( Object array ) { Class c = array . getClass ( ) ; while ( c . isArray ( ) ) { c = c . getComponentType ( ) ; } return c ; }
void test28 ( ) throws Throwable { Class < ? > class0 = Long . class ; Method [ ] methodArray0 = ReflectionUtils . getAllMethods ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Method [ ] getAllMethods ( Class c ) { List l = new ArrayList ( ) ; while ( null ! = c ) { Method [ ] methods = c . getDeclaredMethods ( ) ; for ( int index = 0 ; index < methods . length ; index + + ) { l . add ( methods [ index ] ) ; } c = c . getSuperclass ( ) ; } Method [ ] methods = new Method [ l . size ( ) ] ; Iterator i = l . iterator ( ) ; int index = 0 ; while ( i . hasNext ( ) ) { Method m = ( Method ) i . next ( ) ; methods [ index ] = m ; index + + ; } return methods ; }
void test29 ( ) throws Throwable { Class < ? > class0 = ReflectionUtils . class ; Class < ? > [ ] classArray0 = ( Class < ? > [ ] ) Array . newInstance ( Class . class , 4 ) ; Method method0 = ReflectionUtils . getMethod ( ( Class ) class0 , " - YOc + oL" , ( Class [ ] ) classArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Method getMethod ( Class c , String name , Class [ ] formalParams ) { Method m = null ; while ( null = = m & & null ! = c ) { try { m = c . getDeclaredMethod ( name , formalParams ) ; } catch ( NoSuchMethodException e ) { } c = c . getSuperclass ( ) ; } return m ; }
void test31 ( ) throws Throwable { Class < ? > class0 = CharSequence . class ; Class < ? > [ ] classArray0 = ( Class < ? > [ ] ) Array . newInstance ( Class . class , 1 ) ; boolean boolean0 = ReflectionUtils . definesCustom ( ( Class ) class0 , "" , ( Class [ ] ) classArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean definesCustom ( Class c , String methodName , Class [ ] formalParams ) { Method m = null ; while ( null = = m & & null ! = c & & Object . class ! = c ) { try { m = c . getDeclaredMethod ( methodName , formalParams ) ; } catch ( NoSuchMethodException e ) { } c = c . getSuperclass ( ) ; } return null ! = m ; }
void test32 ( ) throws Throwable { Class < ? > [ ] classArray0 = ( Class < ? > [ ] ) Array . newInstance ( Class . class , 1 ) ; Class < ? > class0 = ReflectionUtils . class ; boolean boolean0 = ReflectionUtils . definesCustom ( ( Class ) class0 , "1777777777777777777777" , ( Class [ ] ) classArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean definesCustom ( Class c , String methodName , Class [ ] formalParams ) { Method m = null ; while ( null = = m & & null ! = c & & Object . class ! = c ) { try { m = c . getDeclaredMethod ( methodName , formalParams ) ; } catch ( NoSuchMethodException e ) { } c = c . getSuperclass ( ) ; } return null ! = m ; }
void test33 ( ) throws Throwable { Class < ? > class0 = CharSequence . class ; Method method0 = ReflectionUtils . findMethod ( ( Class ) class0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Method findMethod ( Class c , String name , Class [ ] formalParams ) { Method m = null ; while ( null = = m & & null ! = c & & Object . class ! = c ) { try { m = c . getDeclaredMethod ( name , formalParams ) ; } catch ( NoSuchMethodException e ) { } c = c . getSuperclass ( ) ; } return m ; }
void test34 ( ) throws Throwable { String string0 = ReflectionUtils . toSimpleName ( "k3P" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toSimpleName ( String longName ) { String shortName = longName ; int index = longName . lastIndexOf ( ' . ' ) ; if ( - 1 ! = index ) { shortName = shortName . substring ( 1 + index ) ; } return shortName ; }
void test35 ( ) throws Throwable { String string0 = ReflectionUtils . toSimpleName ( " = [ A ) t } j * ) l [ C . BzyA" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toSimpleName ( String longName ) { String shortName = longName ; int index = longName . lastIndexOf ( ' . ' ) ; if ( - 1 ! = index ) { shortName = shortName . substring ( 1 + index ) ; } return shortName ; }
void test36 ( ) throws Throwable { Class < ? > class0 = ReflectionUtils . class ; int int0 = ReflectionUtils . getDimensions ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDimensions ( Object o ) { int dimensions = 0 ; for ( Class c = o . getClass ( ) ; c . isArray ( ) ; c = c . getComponentType ( ) ) { dimensions + + ; } return dimensions ; }
void test0 ( ) throws Throwable { ClassRepositoryFactory classRepositoryFactory0 = new ClassRepositoryFactory ( ) ; ImprovedFile improvedFile0 = new ImprovedFile ( "" ) ; File file0 = improvedFile0 . getCanonicalFile ( ) ; ZipArchive zipArchive0 = new ZipArchive ( file0 , file0 , true ) ; List < Object > list0 = zipArchive0 . listFilesInDirectory ( file0 ) ; List < Object > list1 = classRepositoryFactory0 . createRepositoryList ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test1 ( ) throws Throwable { ClassRepositoryFactory classRepositoryFactory0 = new ClassRepositoryFactory ( ) ; ArchiveClassRepository archiveClassRepository0 = ( ArchiveClassRepository ) classRepositoryFactory0 . toClassFileRepository ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClassRepository toClassFileRepository ( Object o ) { ClassRepository cfr = null ; if ( o instanceof File ) cfr = createRepository ( ( File ) o ) ; else if ( o instanceof ClassRepository ) return cfr = ( ClassRepository ) o ; else if ( o instanceof String ) { String fname = ( String ) o ; File f = new File ( fname ) ; cfr = createRepository ( f ) ; } return cfr ; }
void test2 ( ) throws Throwable { ClassRepositoryFactory classRepositoryFactory0 = new ClassRepositoryFactory ( ) ; ImprovedFile improvedFile0 = new ImprovedFile ( "" ) ; File file0 = improvedFile0 . getCanonicalFile ( ) ; DirectoryClassRepository directoryClassRepository0 = ( DirectoryClassRepository ) classRepositoryFactory0 . toClassFileRepository ( ( Object ) file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { ClassRepositoryFactory classRepositoryFactory0 = new ClassRepositoryFactory ( ) ; DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ) ; DirectoryClassRepository directoryClassRepository1 = ( DirectoryClassRepository ) classRepositoryFactory0 . toClassFileRepository ( ( Object ) directoryClassRepository0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClassRepository toClassFileRepository ( Object o ) { ClassRepository cfr = null ; if ( o instanceof File ) cfr = createRepository ( ( File ) o ) ; else if ( o instanceof ClassRepository ) return cfr = ( ClassRepository ) o ; else if ( o instanceof String ) { String fname = ( String ) o ; File f = new File ( fname ) ; cfr = createRepository ( f ) ; } return cfr ; }
void test4 ( ) throws Throwable { ClassRepositoryFactory classRepositoryFactory0 = new ClassRepositoryFactory ( ) ; ImprovedFile improvedFile0 = new ImprovedFile ( "" ) ; DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ( File ) improvedFile0 ) ; Vector < Object > vector0 = directoryClassRepository0 . findResources ( "" ) ; List < Object > list0 = classRepositoryFactory0 . createRepositoryList ( ( List ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "" ; PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PrintStream printStream0 = new PrintStream ( ( OutputStream ) pipedOutputStream0 ) ; DebugClassLoader . debugClass ( "com . sun . M\"" , stringArray0 , printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void debugClass ( String className , String [ ] repositoryFileNames , String logfileName ) throws IOException { PrintWriter out = openLogfile ( logfileName , true ) ; try { debugClass ( className , repositoryFileNames , out ) ; } finally { out . close ( ) ; } }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = "0F n" ; stringArray0 [ 1 ] = "0F n" ; stringArray0 [ 2 ] = "0F n" ; stringArray0 [ 3 ] = "0F n" ; CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( Writer ) charArrayWriter0 ) ; ClassLoader classLoader0 = ClassLoader . getSystemClassLoader ( ) ; DebugClassLoader debugClassLoader0 = new DebugClassLoader ( stringArray0 , ( PrintWriter ) indentingPrintWriter0 , classLoader0 ) ; debugClassLoader0 . getRepositoryFiles ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = "0F n" ; stringArray0 [ 1 ] = "0F n" ; stringArray0 [ 2 ] = "0F n" ; stringArray0 [ 3 ] = "0F n" ; CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( Writer ) charArrayWriter0 ) ; ClassLoader classLoader0 = ClassLoader . getSystemClassLoader ( ) ; DebugClassLoader debugClassLoader0 = new DebugClassLoader ( stringArray0 , ( PrintWriter ) indentingPrintWriter0 , classLoader0 ) ; String [ ] stringArray1 = new String [ 9 ] ; debugClassLoader0 . setRepositoryFiles ( stringArray1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; stringArray0 [ 1 ] = "coLTz . " ; stringArray0 [ 2 ] = "coLTz . " ; CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; stringArray0 [ 0 ] = " / " ; PrintWriter printWriter0 = new PrintWriter ( ( Writer ) charArrayWriter0 ) ; DebugClassLoader . debugClass ( "coLTz . " , stringArray0 , printWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = "0F n" ; stringArray0 [ 1 ] = "0F n" ; stringArray0 [ 2 ] = "0F n" ; stringArray0 [ 3 ] = "0F n" ; CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter ( ( Writer ) charArrayWriter0 ) ; Object [ ] objectArray0 = new Object [ 7 ] ; ClassLoader classLoader0 = ClassLoader . getSystemClassLoader ( ) ; DebugClassLoader debugClassLoader0 = new DebugClassLoader ( stringArray0 , ( PrintWriter ) indentingPrintWriter0 , classLoader0 ) ; debugClassLoader0 . logEvent ( ( - 1 ) , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test0 ( ) throws Throwable { BasicClassLoader basicClassLoader0 = new BasicClassLoader ( ) ; BasicClassLoader basicClassLoader1 = new BasicClassLoader ( ( ClassLoader ) basicClassLoader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BasicClassLoader ( ) { super ( ) ; }
void test1 ( ) throws Throwable { BasicClassLoader basicClassLoader0 = new BasicClassLoader ( ) ; DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ) ; Vector < Object > vector0 = directoryClassRepository0 . findResources ( " > 8" ) ; basicClassLoader0 . setRepositories ( ( List ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test3 ( ) throws Throwable { BasicClassLoader basicClassLoader0 = new BasicClassLoader ( ) ; DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ) ; boolean boolean0 = basicClassLoader0 . removeRepository ( ( ClassRepository ) directoryClassRepository0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeRepository ( ClassRepository repos ) { return getRepositories ( ) . remove ( repos ) ; }
void test6 ( ) throws Throwable { BasicClassLoader basicClassLoader0 = new BasicClassLoader ( ) ; ImprovedFile improvedFile0 = new ImprovedFile ( "" ) ; DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ( File ) improvedFile0 ) ; basicClassLoader0 . logFoundClass ( "" , ( ClassRepository ) directoryClassRepository0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test8 ( ) throws Throwable { BasicClassLoader basicClassLoader0 = new BasicClassLoader ( ) ; Map < Object , Object > map0 = basicClassLoader0 . getClassCache ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test11 ( ) throws Throwable { BasicClassLoader basicClassLoader0 = new BasicClassLoader ( ) ; DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ) ; basicClassLoader0 . addRepository ( ( ClassRepository ) directoryClassRepository0 ) ; Enumeration < Object > enumeration0 = basicClassLoader0 . findResources ( " > 8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Vector findResources ( String name ) throws LTSException { Vector v = new Vector ( ) ; URL u = findResource ( name ) ; if ( null ! = u ) v . addElement ( u ) ; return v ; }
void test12 ( ) throws Throwable { BasicClassLoader basicClassLoader0 = new BasicClassLoader ( ) ; ImprovedFile improvedFile0 = new ImprovedFile ( "" ) ; DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ( File ) improvedFile0 ) ; basicClassLoader0 . addRepository ( ( ClassRepository ) directoryClassRepository0 ) ; ByteArrayInputStream byteArrayInputStream0 = ( ByteArrayInputStream ) basicClassLoader0 . getResourceAsStream ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addRepository ( ClassRepository repos ) { getRepositories ( ) . add ( repos ) ; }
void test13 ( ) throws Throwable { BasicClassLoader basicClassLoader0 = new BasicClassLoader ( ) ; InputStream inputStream0 = basicClassLoader0 . getResourceAsStream ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BasicClassLoader ( ) { super ( ) ; }
void test1 ( ) throws Throwable { DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ) ; File file0 = directoryClassRepository0 . getRepositoryFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getRepositoryFile ( ) { return getFile ( ) ; }
void test2 ( ) throws Throwable { DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ) ; byte [ ] byteArray0 = directoryClassRepository0 . getClassData ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getClassData ( String className ) throws LTSException { FileInputStream fis = null ; try { File f = classNameToFile ( className ) ; if ( ! f . exists ( ) ) return null ; byte [ ] data = new byte [ ( int ) f . length ( ) ] ; fis = new FileInputStream ( f ) ; DataInputStream dis = new DataInputStream ( fis ) ; dis . readFully ( data ) ; dis . close ( ) ; return data ; } catch ( IOException e ) { throw new LTSException ( "Error trying to load class data for class " + className + " , from directory " + getFile ( ) , e ) ; } finally { IOUtilities . closeNoExceptions ( fis ) ; } }
void test3 ( ) throws Throwable { DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ) ; ImprovedFile improvedFile0 = new ImprovedFile ( "" ) ; File file0 = improvedFile0 . getCanonicalFile ( ) ; directoryClassRepository0 . initialize ( file0 ) ; List < Object > list0 = directoryClassRepository0 . getClassNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test0 ( ) throws Throwable { RepositoryFactory repositoryFactory0 = new RepositoryFactory ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . add ( " . zip" ) ; repositoryFactory0 . fileNamesToRepositories ( ( List ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test1 ( ) throws Throwable { File file0 = new File ( " . class" ) ; boolean boolean0 = RepositoryFactory . isArchiveFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isArchiveFile ( File f ) { String s = f . toString ( ) ; int index = s . lastIndexOf ( ' . ' ) ; if ( - 1 = = index ) return false ; s = s . substring ( 1 + index ) ; int i = 0 ; while ( i < REPOSITORY_FILE_TYPES . length & & ! s . equalsIgnoreCase ( REPOSITORY_FILE_TYPES [ i ] ) ) { i + + ; } return ( i < REPOSITORY_FILE_TYPES . length ) ; }
void test2 ( ) throws Throwable { RepositoryFactory repositoryFactory0 = new RepositoryFactory ( ) ; File file0 = new File ( "" , "" ) ; DirectoryClassRepository directoryClassRepository0 = ( DirectoryClassRepository ) repositoryFactory0 . createRepository ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ) ; String string0 = directoryClassRepository0 . getFileNameFor ( " / K55#7GRS : ^9 / y : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileNameFor ( String className ) { File f = classNameToFile ( className ) ; return f . toString ( ) ; }
void test2 ( ) throws Throwable { DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ) ; File file0 = directoryClassRepository0 . toFile ( " / * @ | ~gm6$'kl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ) ; InputStream inputStream0 = directoryClassRepository0 . getStreamForClass ( " / * @ | ~gm6$'kl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream getStreamForClass ( String className ) throws LTSException { String fname = null ; try { InputStream istream = null ; File f = classNameToFile ( className ) ; if ( f . exists ( ) ) { istream = new FileInputStream ( f ) ; } return istream ; } catch ( FileNotFoundException e ) { throw new LTSException ( "Error trying to open class file for class " + className + " , in repository " + getFile ( ) + " , under name " + fname , e ) ; } }
void test4 ( ) throws Throwable { DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ) ; long long0 = directoryClassRepository0 . getEntrySize ( " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getEntrySize ( String entry ) throws LTSException ; / * * * A cached version of the files in the archive . * / List myFileList ; / * * * The archive file that this object represents . * / ImprovedFile myArchiveFile ; / * * * The directory where the archive stores its image . * * < P > * This directory is generated by calling java . io . File . createTempFile , * so the name is somewhat random . * / ImprovedFile myTempDir ; / * * * The time when the underlying archive file was last written . * * < P > * If the time of last change represented here is different from the time * of last change on the archive , then someone has modified the archive * out from under us . * / Date myLastArchiveWrite ; / * * * Whether the archive has been extracted to the temp directory . * * < P > * If the value of this attribute is true , then the contents of the archvie * has been extracted to the directory specified by the TempDirectory * property . * / boolean myArchiveHasBeenExtracted ; boolean myCreateBackups ; boolean getCreateBackups ( ) { return myCreateBackups ; }
void test5 ( ) throws Throwable { DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ) ; byte [ ] byteArray0 = directoryClassRepository0 . getClassData ( " / * @ | ~gm6$'kl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getClassData ( String className ) throws LTSException { FileInputStream fis = null ; try { File f = classNameToFile ( className ) ; if ( ! f . exists ( ) ) return null ; byte [ ] data = new byte [ ( int ) f . length ( ) ] ; fis = new FileInputStream ( f ) ; DataInputStream dis = new DataInputStream ( fis ) ; dis . readFully ( data ) ; dis . close ( ) ; return data ; } catch ( IOException e ) { throw new LTSException ( "Error trying to load class data for class " + className + " , from directory " + getFile ( ) , e ) ; } finally { IOUtilities . closeNoExceptions ( fis ) ; } }
void test6 ( ) throws Throwable { DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ) ; Vector < Object > vector0 = directoryClassRepository0 . findResources ( " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test7 ( ) throws Throwable { DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository ( ) ; Vector < Object > vector0 = directoryClassRepository0 . findResources ( " / K55#7GRS : ^9 / y : . class" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test0 ( ) throws Throwable { File file0 = new File ( " * `tTuj" , " * `tTuj" ) ; String [ ] stringArray0 = SimpleFileFilter . fileOrFiles ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] fileOrFiles ( File f ) { if ( f = = null ) return null ; File parent = new File ( f . getParent ( ) ) ; String fname = f . getName ( ) ; String [ ] files ; if ( fname . charAt ( 0 ) = = ' * ' ) { String filter = fname . substring ( 1 , fname . length ( ) ) ; files = parent . list ( new SimpleFileFilter ( filter ) ) ; return files ; } else { files = new String [ 1 ] ; files [ 0 ] = f . getPath ( ) ; / / was : fname ; return files ; } }
void test1 ( ) throws Throwable { SimpleFileFilter simpleFileFilter0 = new SimpleFileFilter ( " < J" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File dir , String _name ) { String name = _name . toLowerCase ( ) ; for ( int i = 0 ; i < extensions . length ; i + + ) { if ( name . endsWith ( extensions [ i ] ) ) return true ; } return false ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 0 ] = "u5f31Ojt`O + NO ! rw" ; stringArray0 [ 1 ] = "u5f31Ojt`O + NO ! rw" ; stringArray0 [ 2 ] = "u5f31Ojt`O + NO ! rw" ; stringArray0 [ 3 ] = "u5f31Ojt`O + NO ! rw" ; stringArray0 [ 4 ] = "u5f31Ojt`O + NO ! rw" ; stringArray0 [ 5 ] = "u5f31Ojt`O + NO ! rw" ; stringArray0 [ 6 ] = "u5f31Ojt`O + NO ! rw" ; stringArray0 [ 7 ] = "u5f31Ojt`O + NO ! rw" ; stringArray0 [ 8 ] = "u5f31Ojt`O + NO ! rw" ; stringArray0 [ 9 ] = "u5f31Ojt`O + NO ! rw" ; SimpleFileFilter simpleFileFilter0 = new SimpleFileFilter ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean accept ( File dir , String _name ) { String name = _name . toLowerCase ( ) ; for ( int i = 0 ; i < extensions . length ; i + + ) { if ( name . endsWith ( extensions [ i ] ) ) return true ; } return false ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = SimpleFileFilter . fileOrFiles ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] fileOrFiles ( File f ) { if ( f = = null ) return null ; File parent = new File ( f . getParent ( ) ) ; String fname = f . getName ( ) ; String [ ] files ; if ( fname . charAt ( 0 ) = = ' * ' ) { String filter = fname . substring ( 1 , fname . length ( ) ) ; files = parent . list ( new SimpleFileFilter ( filter ) ) ; return files ; } else { files = new String [ 1 ] ; files [ 0 ] = f . getPath ( ) ; / / was : fname ; return files ; } }
void test4 ( ) throws Throwable { File file0 = new File ( "u5f31Ojt`O + NO ! rw" , "u5f31Ojt`O + NO ! rw" ) ; String [ ] stringArray0 = SimpleFileFilter . fileOrFiles ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] fileOrFiles ( File f ) { if ( f = = null ) return null ; File parent = new File ( f . getParent ( ) ) ; String fname = f . getName ( ) ; String [ ] files ; if ( fname . charAt ( 0 ) = = ' * ' ) { String filter = fname . substring ( 1 , fname . length ( ) ) ; files = parent . list ( new SimpleFileFilter ( filter ) ) ; return files ; } else { files = new String [ 1 ] ; files [ 0 ] = f . getPath ( ) ; / / was : fname ; return files ; } }
void test0 ( ) throws Throwable { File file0 = new File ( "yz#s - { - _1kc" , "yz#s - { - _1kc" ) ; ArchiveClassRepository archiveClassRepository0 = new ArchiveClassRepository ( file0 ) ; String string0 = archiveClassRepository0 . getFileNameFor ( "yz#s - { - _1kc" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileNameFor ( String className ) { File f = classNameToFile ( className ) ; return f . toString ( ) ; }
void test1 ( ) throws Throwable { File file0 = new File ( "yz#s - { - _1kc" , "yz#s - { - _1kc" ) ; ArchiveClassRepository archiveClassRepository0 = new ArchiveClassRepository ( file0 ) ; byte [ ] byteArray0 = archiveClassRepository0 . getClassData ( "yz#s - { - _1kc" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] getClassData ( String className ) throws LTSException { FileInputStream fis = null ; try { File f = classNameToFile ( className ) ; if ( ! f . exists ( ) ) return null ; byte [ ] data = new byte [ ( int ) f . length ( ) ] ; fis = new FileInputStream ( f ) ; DataInputStream dis = new DataInputStream ( fis ) ; dis . readFully ( data ) ; dis . close ( ) ; return data ; } catch ( IOException e ) { throw new LTSException ( "Error trying to load class data for class " + className + " , from directory " + getFile ( ) , e ) ; } finally { IOUtilities . closeNoExceptions ( fis ) ; } }
void test2 ( ) throws Throwable { ArchiveClassRepository archiveClassRepository0 = new ArchiveClassRepository ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArchiveClassRepository ( ) { }
void test3 ( ) throws Throwable { File file0 = new File ( "yz#s - { - _1kc" , "yz#s - { - _1kc" ) ; ArchiveClassRepository archiveClassRepository0 = new ArchiveClassRepository ( file0 ) ; Vector < Object > vector0 = archiveClassRepository0 . findResources ( "yz#s - { - _1kc" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { SchedulerEvent schedulerEvent0 = new SchedulerEvent ( ( - 1229L ) , ( Object ) null ) ; String string0 = schedulerEvent0 . toRelativeString ( 1343L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toRelativeString ( long point ) { long delta = this . scheduledTime - point ; return Long . toString ( delta ) ; }
void test1 ( ) throws Throwable { Object object0 = new Object ( ) ; SchedulerEvent schedulerEvent0 = new SchedulerEvent ( 1L , object0 ) ; String string0 = schedulerEvent0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { SchedulerEvent schedulerEvent0 = new SchedulerEvent ( ( - 1229L ) , ( Object ) null ) ; int int0 = schedulerEvent0 . compareTo ( ( Object ) schedulerEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object o ) { if ( ! ( o instanceof SchedulerEvent ) ) throw new RuntimeException ( ) ; SchedulerEvent other = ( SchedulerEvent ) o ; if ( this . scheduledTime < other . scheduledTime ) return - 1 ; else if ( this . scheduledTime > other . scheduledTime ) return 1 ; else return 0 ; }
void test4 ( ) throws Throwable { SchedulerEvent schedulerEvent0 = new SchedulerEvent ( ( - 63L ) , ( Object ) "" ) ; SchedulerEvent schedulerEvent1 = new SchedulerEvent ( 0L , ( Object ) schedulerEvent0 ) ; SchedulerEvent schedulerEvent2 = new SchedulerEvent ( ( - 1126L ) , ( Object ) schedulerEvent1 ) ; SchedulerEvent schedulerEvent3 = ( SchedulerEvent ) schedulerEvent1 . data ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object o ) { if ( ! ( o instanceof SchedulerEvent ) ) throw new RuntimeException ( ) ; SchedulerEvent other = ( SchedulerEvent ) o ; if ( this . scheduledTime < other . scheduledTime ) return - 1 ; else if ( this . scheduledTime > other . scheduledTime ) return 1 ; else return 0 ; }
void test5 ( ) throws Throwable { SchedulerEvent schedulerEvent0 = new SchedulerEvent ( 1655L , ( Object ) null ) ; SchedulerEvent schedulerEvent1 = new SchedulerEvent ( ( - 290L ) , ( Object ) null ) ; int int0 = schedulerEvent0 . compareTo ( ( Object ) schedulerEvent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object o ) { if ( ! ( o instanceof SchedulerEvent ) ) throw new RuntimeException ( ) ; SchedulerEvent other = ( SchedulerEvent ) o ; if ( this . scheduledTime < other . scheduledTime ) return - 1 ; else if ( this . scheduledTime > other . scheduledTime ) return 1 ; else return 0 ; }
void test0 ( ) throws Throwable { SchedulerQueue schedulerQueue0 = new SchedulerQueue ( ) ; SchedulerEvent schedulerEvent0 = schedulerQueue0 . takeIfAvailable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SchedulerEvent takeIfAvailable ( ) { if ( this . list . size ( ) < = 0 ) return null ; SchedulerEvent result = ( SchedulerEvent ) this . list . remove ( 0 ) ; this . contentSet . remove ( result ) ; return result ; }
void test0 ( ) throws Throwable { InternalScheduledEvent internalScheduledEvent0 = new InternalScheduledEvent ( ( ScheduledEventListener ) null , 1L ) ; ScheduledEventListener scheduledEventListener0 = internalScheduledEvent0 . getListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ScheduledEventListener getListener ( ) { return this . listener ; }
void test1 ( ) throws Throwable { InternalScheduledEvent internalScheduledEvent0 = new InternalScheduledEvent ( ( ScheduledEventListener ) null , 1L , ( Object ) "event ( 1 ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { SQLUtils sQLUtils0 = new SQLUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { PropertyWriter propertyWriter0 = new PropertyWriter ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 565 ) ; Properties properties0 = new Properties ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; propertyWriter0 . store ( ( OutputStream ) byteArrayOutputStream0 , ( String ) null , ( List < String > ) linkedList0 , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 8 ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . add ( "k : @ ) _ : Y#6 / ; 4 ! " ) ; PropertyWriter propertyWriter0 = new PropertyWriter ( ) ; Properties properties0 = new Properties ( ) ; properties0 . put ( ( Object ) "k : @ ) _ : Y#6 / ; 4 ! " , ( Object ) "French ( Canada ) " ) ; propertyWriter0 . store ( ( OutputStream ) byteArrayOutputStream0 , "k : @ ) _ : Y#6 / ; 4 ! " , ( List < String > ) linkedList0 , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test0 ( ) throws Throwable { ExcpetionUtil excpetionUtil0 = new ExcpetionUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = ExcpetionUtil . objectToString ( ( Object ) "null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String objectToString ( Object o ) { if ( null = = o ) return "null" ; String msg ; try { msg = o . toString ( ) ; } catch ( Exception e ) { msg = " < exception trying to print object > " ; } return msg ; }
void test2 ( ) throws Throwable { String string0 = ExcpetionUtil . objectToString ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String objectToString ( Object o ) { if ( null = = o ) return "null" ; String msg ; try { msg = o . toString ( ) ; } catch ( Exception e ) { msg = " < exception trying to print object > " ; } return msg ; }
void test0 ( ) throws Throwable { ClassLoader classLoader0 = ClassLoader . getSystemClassLoader ( ) ; ResourceClassLoader resourceClassLoader0 = new ResourceClassLoader ( classLoader0 ) ; ResourceClassLoader resourceClassLoader1 = new ResourceClassLoader ( ( ClassLoader ) resourceClassLoader0 ) ; URL uRL0 = resourceClassLoader1 . getResource ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" URL getResource ( String name ) { URL url = super . getResource ( name ) ; if ( null = = url ) url = getClass ( ) . getResource ( name ) ; return url ; }
void test1 ( ) throws Throwable { ClassLoader classLoader0 = ClassLoader . getSystemClassLoader ( ) ; ResourceClassLoader resourceClassLoader0 = new ResourceClassLoader ( classLoader0 ) ; URL uRL0 = resourceClassLoader0 . getResource ( "" ) ; resourceClassLoader0 . readURL ( uRL0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void readURL ( URL url ) { InputStream istream = null ; InputStreamReader isr = null ; BufferedReader in = null ; try { istream = url . openStream ( ) ; isr = new InputStreamReader ( istream ) ; in = new BufferedReader ( isr ) ; String line = in . readLine ( ) ; while ( null ! = line ) { System . out . println ( line ) ; line = in . readLine ( ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { IOUtilities . close ( in ) ; IOUtilities . close ( isr ) ; IOUtilities . close ( istream ) ; } }
void test0 ( ) throws Throwable { DeleteFileCallback deleteFileCallback0 = new DeleteFileCallback ( ) ; ImprovedFile improvedFile0 = new ImprovedFile ( " & HnJfrhRPwB$" , " & HnJfrhRPwB$" ) ; deleteFileCallback0 . addFile ( ( File ) improvedFile0 ) ; deleteFileCallback0 . addFile ( ( File ) improvedFile0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addFile ( File f ) { if ( null = = f ) return ; if ( null = = this . fileset ) this . fileset = new HashSet < ImprovedFile > ( ) ; ImprovedFile ifile ; if ( f instanceof ImprovedFile ) ifile = ( ImprovedFile ) f ; else ifile = new ImprovedFile ( f ) ; this . fileset . add ( ifile ) ; }
void test2 ( ) throws Throwable { DeleteFileCallback deleteFileCallback0 = new DeleteFileCallback ( ) ; ImprovedFile improvedFile0 = new ImprovedFile ( " & HnJfrhRPwB$" , " & HnJfrhRPwB$" ) ; File file0 = improvedFile0 . getAbsoluteFile ( ) ; deleteFileCallback0 . addFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addFile ( File f ) { if ( null = = f ) return ; if ( null = = this . fileset ) this . fileset = new HashSet < ImprovedFile > ( ) ; ImprovedFile ifile ; if ( f instanceof ImprovedFile ) ifile = ( ImprovedFile ) f ; else ifile = new ImprovedFile ( f ) ; this . fileset . add ( ifile ) ; }
void test3 ( ) throws Throwable { DeleteFileCallback deleteFileCallback0 = new DeleteFileCallback ( ) ; File file0 = new File ( "lvI_d1KS" , "lvI_d1KS" ) ; boolean boolean0 = deleteFileCallback0 . removeFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeFile ( File f ) { if ( null = = f ) return false ; else if ( null = = this . fileset ) return false ; else return this . fileset . remove ( f ) ; }
void test4 ( ) throws Throwable { DeleteFileCallback deleteFileCallback0 = new DeleteFileCallback ( ) ; boolean boolean0 = deleteFileCallback0 . removeFile ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeFile ( File f ) { if ( null = = f ) return false ; else if ( null = = this . fileset ) return false ; else return this . fileset . remove ( f ) ; }
void test5 ( ) throws Throwable { DeleteFileCallback deleteFileCallback0 = new DeleteFileCallback ( ) ; ImprovedFile improvedFile0 = new ImprovedFile ( "Q1p ? ^D2nyAYgC`5VE4" ) ; deleteFileCallback0 . addFile ( ( File ) improvedFile0 ) ; boolean boolean0 = deleteFileCallback0 . removeFile ( ( File ) improvedFile0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeFile ( File f ) { if ( null = = f ) return false ; else if ( null = = this . fileset ) return false ; else return this . fileset . remove ( f ) ; }
void test5 ( ) throws Throwable { ApplicationResources applicationResources0 = new ApplicationResources ( ) ; ResourceBundle resourceBundle0 = applicationResources0 . loadBundleClassLoader ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResourceBundle loadBundleClassLoader ( String name ) { ResourceBundle bundle ; try { Locale locale = Locale . getDefault ( ) ; ResourceClassLoader loader = new ResourceClassLoader ( getClass ( ) . getClassLoader ( ) ) ; bundle = ResourceBundle . getBundle ( name , locale , loader ) ; } catch ( MissingResourceException e ) { bundle = null ; } return bundle ; }
void test6 ( ) throws Throwable { ApplicationResources applicationResources0 = new ApplicationResources ( ) ; ResourceBundle resourceBundle0 = applicationResources0 . loadBundle ( "XD5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResourceBundle loadBundle ( String name ) { ResourceBundle bundle ; try { bundle = ResourceBundle . getBundle ( name ) ; } catch ( MissingResourceException e ) { bundle = null ; } return bundle ; }
void test1 ( ) throws Throwable { CalorieCount calorieCount0 = ( CalorieCount ) Pest . getApp ( ) ; calorieCount0 . resetApplication ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean dataIsDirty ( ) throws ApplicationException { ApplicationData data = getApplicationData ( ) ; return ( null ! = data & & data . isDirty ( ) ) ; }
void test2 ( ) throws Throwable { CalorieCount calorieCount0 = ( CalorieCount ) Application . getInstance ( ) ; calorieCount0 . removeRepositoryListener ( ( RepositoryListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean deleteTempFiles ( ) { return myRemoveTempFiles ; }
void test3 ( ) throws Throwable { CalorieCount calorieCount0 = ( CalorieCount ) Pest . getApp ( ) ; RepositoryListenerAdapter repositoryListenerAdapter0 = new RepositoryListenerAdapter ( ) ; calorieCount0 . addRepositoryListener ( ( RepositoryListener ) repositoryListenerAdapter0 ) ; System . setCurrentTimeMillis ( 276L ) ; CalorieCount calorieCount1 = ( CalorieCount ) Pest . getApp ( ) ; DefaultEditorKit . CopyAction defaultEditorKit_CopyAction0 = new DefaultEditorKit . CopyAction ( ) ; calorieCount1 . wrapListener ( ( ActionListener ) defaultEditorKit_CopyAction0 ) ; calorieCount1 . findFile ( " ? FXE ! A" ) ; Suspender suspender0 = new Suspender ( ) ; System . setCurrentTimeMillis ( 0L ) ; Suspender suspender1 = new Suspender ( ( Callback ) suspender0 ) ; calorieCount1 . addShutdownCallback ( ( Callback ) suspender1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean dataIsDirty ( ) throws ApplicationException { ApplicationData data = getApplicationData ( ) ; return ( null ! = data & & data . isDirty ( ) ) ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { CalorieCount calorieCount0 = ( CalorieCount ) Pest . getApp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream get ( String name ) throws LTSException , IOException { InputStream istream ; if ( ! entryExists ( name ) ) return null ; if ( ! archiveHasBeenExtracted ( ) ) istream = basicGet ( name ) ; else { File f = new File ( getTempDir ( ) , name ) ; try { istream = new FileInputStream ( f ) ; } catch ( FileNotFoundException e ) { istream = null ; } } return istream ; }
void test7 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; Vector < String > vector0 = new Vector < String > ( ) ; calorieCount0 . setStandardDirectories ( ( List ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTempFileSuffix ( ) { return this . tempFileSuffix ; }
void test8 ( ) throws Throwable { String string0 = Application . getAppProperty ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAppProperty ( String name ) { return getInstance ( ) . getProperty ( name ) ; }
void test9 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; boolean boolean0 = calorieCount0 . lafSetLookAndFeel ( "^P" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean deleteTempFiles ( ) { return myRemoveTempFiles ; }
void test13 ( ) throws Throwable { int int0 = Application . shortStrToArg ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int shortStrToArg ( String s ) { return ourShortStrToArgMap . stringToInt ( s ) ; }
void test19 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; calorieCount0 . getDeleteFileCallback ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTempFilePrefix ( ) { return this . tempFilePrefix ; }
void test20 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; calorieCount0 . setTempFileSuffix ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTempFileSuffix ( ) { return this . tempFileSuffix ; }
void test23 ( ) throws Throwable { CalorieCount calorieCount0 = ( CalorieCount ) Pest . getApp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTempFilePrefix ( ) { return this . tempFilePrefix ; }
void test26 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; String string0 = calorieCount0 . getSaveBeforeExitMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTempFilePrefix ( ) { return this . tempFilePrefix ; }
void test27 ( ) throws Throwable { CalorieCount calorieCount0 = ( CalorieCount ) Pest . getApp ( ) ; File file0 = calorieCount0 . findFile ( " ? FXE ! A" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File findFile ( File directory , String [ ] fileNames ) { File f = null ; int i = 0 ; while ( null = = f & & i < fileNames . length ) { File temp = new File ( directory , fileNames [ i ] ) ; if ( temp . exists ( ) ) f = temp ; i + + ; } return f ; }
void test29 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; boolean boolean0 = calorieCount0 . deleteTempFiles ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTempFilePrefix ( ) { return this . tempFilePrefix ; }
void test30 ( ) throws Throwable { CalorieCount calorieCount0 = ( CalorieCount ) Pest . getApp ( ) ; Application . setInstance ( ( Application ) calorieCount0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getApplicationName ( ) ; Application ourApplication ; / * * * Indicates that the application's data consists of a simple properties * file , suitable for loading via Properties . load * * < P / > * Return this value from the getAppDataType method to have the startup * and shutdown methods treat the applications data as a property file . * * < P / > * This is the default application data type . The application properties * file is the file that this property indicates . * * < P / > * Applications that use this approach cannot load and stored data via * the getInputStream and getOutputStream methods . * / int APP_DATA_PROPERTIES_FILE = 0 ; / * * * Indicates that the application's data is stored in a system of * directories . * * < P / > * Return this value from the getAppDataType method to have the startup * and shutdown methods use the application directory approach . The * primary affect is that the class will try to get the application * properties file from the application directory . * / int APP_DATA_DIRECTORY = 1 ; / * * * Indicates that the application's data is stored in a zip file . * * < P / > * Return this value from the getAppDataType method to have the startup * and shutdown methods use the archive rather than a properties file . * * < P / > * If the application signals that it wants to use an archive , then * the class will try to locate the application properties file in * the archive . * / int APP_DATA_ARCHIVE = 2 ; String STR_ARG_APPLICATION_DIRECTORY = "applicationDirectory" ; String STR_SHORT_ARG_APPLICATION_DIRECTORY = "d" ; String STR_ARG_INIT_FILE = "initializationFile" ; String STR_SHORT_ARG_INIT_FILE = "i" ; String STR_ARG_REPOSITORY = "repository" ; String STR_SHORT_ARG_REPOSITORY = "r" ; int ARG_APPLICATION_DIRECTORY = 0 ; int ARG_INIT_FILE = 1 ; int ARG_REPOSITORY = 2 ; Object [ ] SPEC_STRING_TO_ARGUMENT = { STR_ARG_APPLICATION_DIRECTORY , new Integer ( ARG_APPLICATION_DIRECTORY ) , STR_ARG_INIT_FILE , new Integer ( ARG_INIT_FILE ) , STR_ARG_REPOSITORY , new Integer ( ARG_REPOSITORY ) }
void test32 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; calorieCount0 . setLastFile ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTempFileSuffix ( ) { return this . tempFileSuffix ; }
void test33 ( ) throws Throwable { CalorieCount calorieCount0 = ( CalorieCount ) Pest . getApp ( ) ; calorieCount0 . initializeResourceBundles ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isQuestioning ( ) { return this . isQuestioning ; }
void test34 ( ) throws Throwable { CalorieCount calorieCount0 = ( CalorieCount ) Pest . getApp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortPropertyFileName ( ) { return myShortPropertyFileName ; }
void test35 ( ) throws Throwable { String string0 = Application . intToArg ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String intToArg ( int arg ) { return ourStrToArgMap . intToString ( arg ) ; }
void test37 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; calorieCount0 . processRepositoryArgument ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTempFileSuffix ( ) { return this . tempFileSuffix ; }
void test38 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; calorieCount0 . getPropertyFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTempFileSuffix ( ) { return this . tempFileSuffix ; }
void test39 ( ) throws Throwable { String string0 = Application . codeToKey ( ( - 1481 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String codeToKey ( int code ) { if ( null = = ourCodeToKeyMap ) return null ; else return ourCodeToKeyMap . intToString ( code ) ; }
void test41 ( ) throws Throwable { CalorieCount calorieCount0 = ( CalorieCount ) Application . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTempFilePrefix ( ) { return this . tempFilePrefix ; }
void test42 ( ) throws Throwable { CalorieCount calorieCount0 = ( CalorieCount ) Pest . getApp ( ) ; Suspender suspender0 = new Suspender ( ( Callback ) null ) ; calorieCount0 . removeShutdownCallback ( ( Callback ) suspender0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAlwaysOnTop ( ) { return ! debugDialogs ; }
void test43 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; calorieCount0 . initDeleteOnShutdown ( ) ; File file0 = calorieCount0 . getDefaultPropertyFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortPropertyFileName ( ) { return myShortPropertyFileName ; }
void test44 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; Object [ ] objectArray0 = new Object [ 10 ] ; String string0 = calorieCount0 . getLookupFailureMessage ( "q~RqAfi ( ~11i9\"" , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTempFileSuffix ( ) { return this . tempFileSuffix ; }
void test45 ( ) throws Throwable { CalorieCount calorieCount0 = ( CalorieCount ) Pest . getApp ( ) ; calorieCount0 . removeTempFiles ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTempFilePrefix ( ) { return this . tempFilePrefix ; }
void test46 ( ) throws Throwable { CalorieCount calorieCount0 = ( CalorieCount ) Pest . getApp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean saveData ( ) { try { ApplicationData data = getApplicationData ( ) ; if ( null = = data ) return true ; ApplicationRepository repos = getRepository ( ) ; if ( null = = repos ) { repos = browseSaveRepository ( ) ; } if ( null = = repos ) return false ; File f = repos . getRepositoryFile ( ) ; saveDataAs ( f , repos , data ) ; return true ; } catch ( ApplicationException e ) { showException ( e ) ; return false ; } }
void test47 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; calorieCount0 . saveDataAs ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTempFileSuffix ( ) { return this . tempFileSuffix ; }
void test48 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; File file0 = calorieCount0 . findPropertiesFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTempFilePrefix ( ) { return this . tempFilePrefix ; }
void test49 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; File file0 = calorieCount0 . findFile ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean keepTempFiles ( ) { return ! myRemoveTempFiles ; }
void test50 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { try { CalorieCount calorieCount0 = ( CalorieCount ) Pest . getApp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream get ( String name ) throws LTSException , IOException { InputStream istream ; if ( ! entryExists ( name ) ) return null ; if ( ! archiveHasBeenExtracted ( ) ) istream = basicGet ( name ) ; else { File f = new File ( getTempDir ( ) , name ) ; try { istream = new FileInputStream ( f ) ; } catch ( FileNotFoundException e ) { istream = null ; } } return istream ; }
void test51 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; boolean boolean0 = calorieCount0 . loadRepository ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean keepTempFiles ( ) { return ! myRemoveTempFiles ; }
void test0 ( ) throws Throwable { SimpleExceptionHandler simpleExceptionHandler0 = new SimpleExceptionHandler ( ) ; int int0 = simpleExceptionHandler0 . showAndAsk ( "" , ( Throwable ) null , 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int showAndAsk ( String message , Throwable throwable , int mode ) { return ourExceptionHandler . showAndAsk ( message , throwable , mode ) ; }
void test0 ( ) throws Throwable { ApplicationProperties . NameValue applicationProperties_NameValue0 = new ApplicationProperties . NameValue ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { ApplicationProperties applicationProperties0 = new ApplicationProperties ( ) ; ApplicationProperties applicationProperties1 = applicationProperties0 . filterProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test2 ( ) throws Throwable { ApplicationProperties applicationProperties0 = new ApplicationProperties ( ) ; LinkedList < PropertyElement > linkedList0 = new LinkedList < PropertyElement > ( ) ; Properties properties0 = applicationProperties0 . buildPropertiesFromElements ( "" , ( List < PropertyElement > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test3 ( ) throws Throwable { ApplicationProperties applicationProperties0 = new ApplicationProperties ( ) ; LinkedList < ApplicationProperties . NameValue > linkedList0 = new LinkedList < ApplicationProperties . NameValue > ( ) ; Properties properties0 = applicationProperties0 . buildProperties ( " , ^RP" , ( List < ApplicationProperties . NameValue > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test4 ( ) throws Throwable { ApplicationProperties applicationProperties0 = new ApplicationProperties ( ) ; LinkedList < ApplicationProperties . NameValue > linkedList0 = new LinkedList < ApplicationProperties . NameValue > ( ) ; Properties properties0 = applicationProperties0 . buildPropertiesFromList ( " , ^RP" , ( List ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test0 ( ) throws Throwable { PropertyElement . NameComparator propertyElement_NameComparator0 = new PropertyElement . NameComparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PropertyElement ( String theprefix , int theindex , String thesuffix , String thevalue ) { this . prefix = theprefix ; this . index = theindex ; this . suffix = thesuffix ; this . value = thevalue ; }
void test2 ( ) throws Throwable { PropertyElement propertyElement0 = new PropertyElement ( "f } WmCE" , ( - 31 ) , "f } WmCE" , "f } WmCE" ) ; String string0 = propertyElement0 . getFullName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullName ( ) { return this . prefix + " . " + this . index + " . " + this . suffix ; }
void test3 ( ) throws Throwable { PropertyElement . IndexComparator propertyElement_IndexComparator0 = new PropertyElement . IndexComparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PropertyElement ( String theprefix , int theindex , String thesuffix , String thevalue ) { this . prefix = theprefix ; this . index = theindex ; this . suffix = thesuffix ; this . value = thevalue ; }
void test4 ( ) throws Throwable { PropertyElement . IndexNameComparator propertyElement_IndexNameComparator0 = new PropertyElement . IndexNameComparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PropertyElement ( String theprefix , int theindex , String thesuffix , String thevalue ) { this . prefix = theprefix ; this . index = theindex ; this . suffix = thesuffix ; this . value = thevalue ; }
void test0 ( ) throws Throwable { DefaultCommandLinePolicy defaultCommandLinePolicy0 = new DefaultCommandLinePolicy ( ) ; Properties properties0 = new Properties ( ) ; String [ ] stringArray0 = new String [ 9 ] ; int int0 = defaultCommandLinePolicy0 . processSwitch ( properties0 , 401 , stringArray0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int processSwitch ( Properties p , int index , String [ ] argv , String arg ) throws ApplicationException { char [ ] ca = arg . toCharArray ( ) ; int next = 1 + index ; for ( int i = 0 ; i < ca . length ; i + + ) { char c = ca [ i ] ; boolean foundMatch = false ; int j = 0 ; while ( ! foundMatch & & j < this . arguments . length ) { if ( arguments [ j ] . matches ( c ) ) { arguments [ j ] . process ( p , argv , index , c ) ; foundMatch = true ; } } if ( ! foundMatch ) { Object [ ] data = new Object [ ] { new Character ( c ) } ; String key = ApplicationMessages . ERROR_UNRECOGNIZED_SWITCH ; throw new ApplicationException ( key , data ) ; } if ( arguments [ j ] . requiresArgument ( ) ) { if ( ( 1 + i ) = = ca . length ) next + + ; else { Object [ ] data = new Object [ ] { new Character ( c ) } ; String key = ApplicationMessages . ERROR_OPTION_SWITCH_NOT_AT_END ; throw new ApplicationException ( key , data ) ; } } } return next ; }
void test2 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; boolean boolean0 = propertyDescriptor0 . matches ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( char c ) { char [ ] ca = getSwitchValues ( ) ; if ( null = = ca ) return false ; for ( int i = 0 ; i < ca . length ; i + + ) { if ( ca [ i ] = = c ) return true ; } return false ; }
void test3 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; String string0 = propertyDescriptor0 . getDefaultValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultValue ( ) { return defaultValue ; }
void test4 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; propertyDescriptor0 . setRequiresArgument ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean requiresArgument ( ) { return this . requiresArgument ; }
void test5 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; propertyDescriptor0 . setName ( "Child and parent are the same object : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDefaultValue ( ) { return defaultValue ; }
void test6 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; boolean boolean0 = propertyDescriptor0 . getRequiresArgument ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getRequiresArgument ( ) { return requiresArgument ( ) ; }
void test7 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; propertyDescriptor0 . setDefaultValue ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test8 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; boolean boolean0 = propertyDescriptor0 . matches ( 'h' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( char c ) { char [ ] ca = getSwitchValues ( ) ; if ( null = = ca ) return false ; for ( int i = 0 ; i < ca . length ; i + + ) { if ( ca [ i ] = = c ) return true ; } return false ; }
void test9 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; char [ ] charArray0 = new char [ 5 ] ; propertyDescriptor0 . setSwitchValues ( charArray0 ) ; boolean boolean0 = propertyDescriptor0 . matches ( 'h' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( char c ) { char [ ] ca = getSwitchValues ( ) ; if ( null = = ca ) return false ; for ( int i = 0 ; i < ca . length ; i + + ) { if ( ca [ i ] = = c ) return true ; } return false ; }
void test10 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; propertyDescriptor0 . setValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean requiresArgument ( ) { return this . requiresArgument ; }
void test11 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; char [ ] charArray0 = new char [ 2 ] ; charArray0 [ 0 ] = 'u' ; propertyDescriptor0 . setSwitchValues ( charArray0 ) ; boolean boolean0 = propertyDescriptor0 . matches ( 'u' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( char c ) { char [ ] ca = getSwitchValues ( ) ; if ( null = = ca ) return false ; for ( int i = 0 ; i < ca . length ; i + + ) { if ( ca [ i ] = = c ) return true ; } return false ; }
void test12 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = "Child and parent are the same object : " ; stringArray0 [ 1 ] = "Child and parent are the same object : " ; stringArray0 [ 2 ] = "Child and parent are the same object : " ; stringArray0 [ 3 ] = "Child and parent are the same object : " ; propertyDescriptor0 . setLongNames ( stringArray0 ) ; boolean boolean0 = propertyDescriptor0 . matches ( "5 / YN4hg ] ~ & pk : ~ , O" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( char c ) { char [ ] ca = getSwitchValues ( ) ; if ( null = = ca ) return false ; for ( int i = 0 ; i < ca . length ; i + + ) { if ( ca [ i ] = = c ) return true ; } return false ; }
void test13 ( ) throws Throwable { PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor ( ) ; String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 0 ] = "" ; propertyDescriptor0 . setLongNames ( stringArray0 ) ; boolean boolean0 = propertyDescriptor0 . matches ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matches ( char c ) { char [ ] ca = getSwitchValues ( ) ; if ( null = = ca ) return false ; for ( int i = 0 ; i < ca . length ; i + + ) { if ( ca [ i ] = = c ) return true ; } return false ; }
void test0 ( ) throws Throwable { AppDataHelper appDataHelper0 = new AppDataHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { File file0 = new File ( "HV ; / d { ) huNd\"b0d" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; List < Object > list0 = AppDataHelper . loadTextList ( ( ApplicationRepository ) directoryRepository0 , "HV ; / d { ) huNd\"b0d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test3 ( ) throws Throwable { File file0 = new File ( "HV ; / d { ) huNd\"b0d" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; AppDataHelper . storeProperties ( ( ApplicationRepository ) directoryRepository0 , "HV ; / d { ) huNd\"b0d" , ( Properties ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTempRepository ( ) { return this . tempRepository ; }
void test4 ( ) throws Throwable { File file0 = new File ( "HV ; / d { ) huNd\"b0d" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; Properties properties0 = AppDataHelper . loadProperties ( ( ApplicationRepository ) directoryRepository0 , "HV ; / d { ) huNd\"b0d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Properties loadProperties ( String name ) throws LTSException , IOException { InputStream istream = null ; Properties p = new Properties ( ) ; try { istream = get ( name ) ; if ( null = = istream ) return null ; p . load ( istream ) ; } finally { if ( null ! = istream ) istream . close ( ) ; } return p ; }
void test2 ( ) throws Throwable { File file0 = new File ( "The drec | ory , f" , "The drec | ory , f" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; List < String > list0 = directoryRepository0 . listEntries ( "The drec | ory , f" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test4 ( ) throws Throwable { File file0 = new File ( "gnXk" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; boolean boolean0 = directoryRepository0 . repositoryUsesDirectories ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean repositoryUsesDirectories ( ) ; }
void test5 ( ) throws Throwable { File file0 = new File ( "f } prY# ] eT0" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; ImprovedFile improvedFile0 = ( ImprovedFile ) directoryRepository0 . getRepositoryFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getRepositoryFile ( ) { return getFile ( ) ; }
void test6 ( ) throws Throwable { File file0 = new File ( "The drec | ory , f" , "The drec | ory , f" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; directoryRepository0 . delete ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTempRepository ( ) { return isTempRepository ( ) ; }
void test7 ( ) throws Throwable { File file0 = new File ( "" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; directoryRepository0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTempRepository ( ) { return this . tempRepository ; }
void test10 ( ) throws Throwable { File file0 = new File ( "" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; ApplicationData applicationData0 = directoryRepository0 . getApplicationData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ApplicationData getApplicationData ( ) { return myApplicationData ; }
void test11 ( ) throws Throwable { File file0 = new File ( "The drec | ory , f" , "The drec | ory , f" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; Object object0 = directoryRepository0 . loadXml ( "The drec | ory , f" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object loadXml ( String entry ) throws ApplicationException { XmlObjectInputStream xois = null ; try { xois = getXmlInputStream ( entry ) ; if ( null = = xois ) return null ; else return xois . readObject ( ) ; } catch ( ApplicationException e ) { throw e ; } catch ( LTSException e ) { String msg = "Error trying to load entry " + entry + " , from " + myDirectory ; throw new ApplicationException ( msg , e ) ; } finally { if ( null ! = xois ) xois . close ( ) ; } }
void test14 ( ) throws Throwable { File file0 = new File ( "The drec | ory , f" , "The drec | ory , f" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; boolean boolean0 = directoryRepository0 . removeEntry ( "The drec | ory , f" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeEntry ( String entry ) throws ApplicationException ; / * * * Create or append to an entry and return an output stream to it . * * < P > * Note that calling this method with append set to false will replace any * entry that currently exists with the same name . If no data is written to * the output stream , this will result in a zero - length entry . * * < P > * Data written to the output stream will be saved if the stream is closed * and { @link #commit ( ) }
void test0 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; boolean boolean0 = directoryRepository0 . getTempRepository ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTempRepository ( ) { return isTempRepository ( ) ; }
void test1 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; directoryRepository0 . setTempRepository ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isTempRepository ( ) { return this . tempRepository ; }
void test0 ( ) throws Throwable { ActionMenuBuilder actionMenuBuilder0 = new ActionMenuBuilder ( ) ; Object [ ] [ ] [ ] objectArray0 = new Object [ 8 ] [ 7 ] [ 3 ] ; JMenuBar jMenuBar0 = actionMenuBuilder0 . buildMenuBar ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test1 ( ) throws Throwable { ActionMenuBuilder actionMenuBuilder0 = new ActionMenuBuilder ( ) ; Object [ ] [ ] objectArray0 = new Object [ 8 ] [ 8 ] ; Object [ ] objectArray1 = new Object [ 1 ] ; objectArray1 [ 0 ] = ( Object ) "select - paragraph" ; objectArray0 [ 0 ] = objectArray1 ; JMenu jMenu0 = new JMenu ( ) ; actionMenuBuilder0 . buildMenu ( jMenu0 , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void buildMenu ( JMenu menu , Object [ ] [ ] spec ) { for ( int i = 0 ; i < spec . length ; i + + ) { if ( isSeparator ( spec [ i ] ) ) menu . addSeparator ( ) ; else if ( isTitle ( spec [ i ] ) ) { String name = ( String ) spec [ i ] [ 0 ] ; menu . setName ( name ) ; menu . setText ( name ) ; } else { JMenuItem item = buildMenuItem ( spec [ i ] ) ; menu . add ( item ) ; } } }
void test3 ( ) throws Throwable { ActionMenuBuilder actionMenuBuilder0 = new ActionMenuBuilder ( ) ; Object [ ] [ ] objectArray0 = new Object [ 8 ] [ 8 ] ; Object [ ] objectArray1 = new Object [ 1 ] ; objectArray1 [ 0 ] = ( Object ) "select - paragraph" ; objectArray0 [ 0 ] = objectArray1 ; JPopupMenu jPopupMenu0 = actionMenuBuilder0 . buildPopup ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test4 ( ) throws Throwable { ActionMenuBuilder actionMenuBuilder0 = new ActionMenuBuilder ( ) ; JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem ( ) ; JMenu jMenu0 = new JMenu ( ( Action ) null ) ; Object [ ] objectArray0 = new Object [ 12 ] ; objectArray0 [ 2 ] = ( Object ) jMenu0 ; actionMenuBuilder0 . addMenuItem ( objectArray0 [ 2 ] , ( JMenuItem ) jRadioButtonMenuItem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return myTextArea . getText ( ) ; }
void test7 ( ) throws Throwable { ActionMenuBuilder actionMenuBuilder0 = new ActionMenuBuilder ( ) ; JMenu jMenu0 = new JMenu ( "^gJap < * , ~g ? 4" , false ) ; actionMenuBuilder0 . addSeparator ( ( Object ) jMenu0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addSeparator ( Object menuObject ) { if ( menuObject instanceof JMenu ) { JMenu menu = ( JMenu ) menuObject ; menu . addSeparator ( ) ; } else if ( menuObject instanceof JPopupMenu ) { JPopupMenu menu = ( JPopupMenu ) menuObject ; menu . addSeparator ( ) ; } else { String msg = "Unrecognized menu class : " + menuObject . getClass ( ) . getName ( ) ; throw new RuntimeException ( msg ) ; } }
void test8 ( ) throws Throwable { ActionMenuBuilder actionMenuBuilder0 = new ActionMenuBuilder ( ) ; JPopupMenu jPopupMenu0 = new JPopupMenu ( "BDSMSo > s" ) ; actionMenuBuilder0 . addSeparator ( ( Object ) jPopupMenu0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test9 ( ) throws Throwable { ActionMenuBuilder actionMenuBuilder0 = new ActionMenuBuilder ( ) ; JMenu jMenu0 = new JMenu ( ( Action ) null ) ; actionMenuBuilder0 . setMenuTitle ( ( Object ) jMenu0 , "Avy5 ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMenuTitle ( Object menuObject , String title ) { if ( menuObject instanceof JMenu ) { JMenu menu = ( JMenu ) menuObject ; menu . setText ( title ) ; menu . setName ( title ) ; } else if ( menuObject instanceof JPopupMenu ) { ; / / silently ignore } else { String msg = "Unrecognized menu class : " + menuObject . getClass ( ) . getName ( ) ; throw new RuntimeException ( msg ) ; } }
void test0 ( ) throws Throwable { FormatError formatError0 = new FormatError ( ( Throwable ) null , 1577 , " ( ~4mAw9 { %AKQg * " , ( ResourceBundle ) null , " ( ~4mAw9 { %AKQg * " ) ; formatError0 . setTemplate ( " ( ~4mAw9 { %AKQg * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorCode ( ) { return myErrorCode ; }
void test1 ( ) throws Throwable { FormatError formatError0 = new FormatError ( ( Throwable ) null , ( - 1693 ) , "aR" , ( ResourceBundle ) null , "aR" ) ; formatError0 . setKey ( "aR" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorCode ( ) { return myErrorCode ; }
void test2 ( ) throws Throwable { FormatError formatError0 = new FormatError ( ( Throwable ) null , ( - 1693 ) , "aR" , ( ResourceBundle ) null , "aR" ) ; formatError0 . setErrorCode ( ( - 1693 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorCode ( ) { return myErrorCode ; }
void test3 ( ) throws Throwable { FormatError formatError0 = new FormatError ( ( Throwable ) null , ( - 1693 ) , "aR" , ( ResourceBundle ) null , "aR" ) ; formatError0 . setException ( ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorCode ( ) { return myErrorCode ; }
void test4 ( ) throws Throwable { FormatError formatError0 = new FormatError ( ( Throwable ) null , ( - 1693 ) , "aR" , ( ResourceBundle ) null , "aR" ) ; String string0 = formatError0 . getTemplate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorCode ( ) { return myErrorCode ; }
void test5 ( ) throws Throwable { FormatError formatError0 = new FormatError ( ( Throwable ) null , 1577 , " ( ~4mAw9 { %AKQg * " , ( ResourceBundle ) null , " ( ~4mAw9 { %AKQg * " ) ; String string0 = formatError0 . getKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorCode ( ) { return myErrorCode ; }
void test6 ( ) throws Throwable { FormatError formatError0 = new FormatError ( ( Throwable ) null , ( - 1693 ) , "aR" , ( ResourceBundle ) null , "aR" ) ; formatError0 . setResourceBundle ( ( ResourceBundle ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorCode ( ) { return myErrorCode ; }
void test7 ( ) throws Throwable { FormatError formatError0 = new FormatError ( ( Throwable ) null , ( - 1693 ) , "aR" , ( ResourceBundle ) null , "aR" ) ; formatError0 . getResourceBundle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorCode ( ) { return myErrorCode ; }
void test8 ( ) throws Throwable { FormatError formatError0 = new FormatError ( ( Throwable ) null , ( - 1693 ) , "aR" , ( ResourceBundle ) null , "aR" ) ; int int0 = formatError0 . getErrorCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getErrorCode ( ) { return myErrorCode ; }
void test1 ( ) throws Throwable { BundleUtils bundleUtils0 = new BundleUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { StringTokenizer stringTokenizer0 = new StringTokenizer ( "IzWx ] ltyY . G : tvY : " , "IzWx ] ltyY . G : tvY : " , true ) ; List < Object > list0 = BundleUtils . toList ( ( Enumeration ) stringTokenizer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test5 ( ) throws Throwable { Class < ? > class0 = File . class ; Properties properties0 = BundleUtils . getStaticStrings ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test6 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle ( ( InputStream ) byteArrayInputStream0 ) ; Properties properties0 = BundleUtils . toProperties ( ( ResourceBundle ) propertyResourceBundle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test7 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; properties0 . put ( ( Object ) "Japanese" , ( Object ) "Japanese" ) ; Class < ? > class0 = IdTreeNode . class ; BundleUtils . printUndefinedMessages ( ( PrintWriter ) null , ( Class ) class0 , ( Map ) properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test8 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 9 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle ( ( InputStream ) byteArrayInputStream0 ) ; Properties properties0 = BundleUtils . toProperties ( ( ResourceBundle ) propertyResourceBundle0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void printUndefinedMessages ( PrintWriter out , Class clazz , Map map ) throws LTSException { Map fields = getStaticStrings ( clazz ) ; Set undefined = new HashSet ( fields . keySet ( ) ) ; undefined . removeAll ( map . keySet ( ) ) ; for ( Iterator i = map . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) { String key = ( String ) i . next ( ) ; String value = ( String ) map . get ( key ) ; if ( null = = value | | "" . equals ( value ) ) undefined . add ( key ) ; } List list = new ArrayList ( undefined ) ; Collections . sort ( list ) ; for ( Iterator i = list . iterator ( ) ; i . hasNext ( ) ; ) { String fieldName = ( String ) i . next ( ) ; String fieldValue = ( String ) fields . get ( fieldName ) ; out . println ( fieldName + " , " + fieldValue ) ; } }
void test10 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; properties0 . put ( ( Object ) "Japanese" , ( Object ) "Japanese" ) ; BundleUtils . printMissing ( ( PrintWriter ) null , properties0 , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test11 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; properties0 . put ( ( Object ) "Japanese" , ( Object ) "Japanese" ) ; Properties properties1 = BundleUtils . invertKeysAndValues ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { File file0 = new File ( "" , "" ) ; CheckPoint checkPoint0 = new CheckPoint ( file0 ) ; File file1 = checkPoint0 . getFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getFile ( ) { return myArchiveFile ; }
void test1 ( ) throws Throwable { File file0 = new File ( "" ) ; URI uRI0 = file0 . toURI ( ) ; File file1 = new File ( uRI0 ) ; CheckPoint checkPoint0 = new CheckPoint ( file1 ) ; String string0 = checkPoint0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { CheckPointService checkPointService0 = new CheckPointService ( ) ; String string0 = checkPointService0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getPauseTime ( ) { return myPauseTime ; }
void test1 ( ) throws Throwable { CheckPointService checkPointService0 = new CheckPointService ( ) ; long long0 = checkPointService0 . getMaxPauseTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getPauseTime ( ) { return myPauseTime ; }
void test0 ( ) throws Throwable { AppDataHelper appDataHelper0 = new AppDataHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { File file0 = new File ( "HV ; / d { ) huNd\"b0d" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; List < Object > list0 = AppDataHelper . loadTextList ( ( ApplicationRepository ) directoryRepository0 , "HV ; / d { ) huNd\"b0d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test3 ( ) throws Throwable { File file0 = new File ( "HV ; / d { ) huNd\"b0d" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; AppDataHelper . storeProperties ( ( ApplicationRepository ) directoryRepository0 , "HV ; / d { ) huNd\"b0d" , ( Properties ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean repositoryUsesDirectories ( ) ; }
void test4 ( ) throws Throwable { File file0 = new File ( "HV ; / d { ) huNd\"b0d" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; Properties properties0 = AppDataHelper . loadProperties ( ( ApplicationRepository ) directoryRepository0 , "HV ; / d { ) huNd\"b0d" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Properties loadProperties ( String name ) throws LTSException , IOException { InputStream istream = null ; Properties p = new Properties ( ) ; try { istream = get ( name ) ; if ( null = = istream ) return null ; p . load ( istream ) ; } finally { if ( null ! = istream ) istream . close ( ) ; } return p ; }
void test0 ( ) throws Throwable { Adjustment adjustment0 = new Adjustment ( ) ; Adjustment adjustment1 = ( Adjustment ) adjustment0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { long time = myDateField . getDateInMillis ( ) ; time = DateUtil . clearTime ( time ) ; Calendar cal = Calendar . getInstance ( ) ; cal . setTimeInMillis ( time ) ; String s = myTimeField . getText ( ) ; long timeOfDay = DateUtil . parseTimeString ( s ) ; Calendar timeCal = Calendar . getInstance ( ) ; timeCal . setTimeInMillis ( timeOfDay ) ; cal . set ( cal . get ( Calendar . YEAR ) , cal . get ( Calendar . MONTH ) , cal . get ( Calendar . DAY_OF_MONTH ) , timeCal . get ( Calendar . HOUR_OF_DAY ) , timeCal . get ( Calendar . MINUTE ) , timeCal . get ( Calendar . SECOND ) ) ; long timeAndDate = cal . getTimeInMillis ( ) ; return timeAndDate ; }
void test1 ( ) throws Throwable { Adjustment adjustment0 = new Adjustment ( ) ; Adjustment adjustment1 = ( Adjustment ) adjustment0 . deepCopy ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test2 ( ) throws Throwable { Budget budget0 = new Budget ( ) ; String string0 = budget0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test3 ( ) throws Throwable { Adjustment adjustment0 = new Adjustment ( ) ; CalorieCountData calorieCountData0 = new CalorieCountData ( ) ; Adjustment adjustment1 = ( Adjustment ) adjustment0 . continueDeepCopy ( ( Map ) calorieCountData0 . myElements , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test4 ( ) throws Throwable { Adjustment adjustment0 = new Adjustment ( ) ; adjustment0 . toSimpleElement ( "j | iDE9OxWf0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return myId ; }
void test0 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return myId ; }
void test1 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; mealList0 . baiscReplaceWith ( ( List < Meal > ) mealList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test2 ( ) throws Throwable { FrequentFoodList frequentFoodList0 = new FrequentFoodList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return myId ; }
void test4 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; mealList0 . postDeserialize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEntryName ( ) { return "myData" ; }
void test5 ( ) throws Throwable { FrequentFoodList frequentFoodList0 = new FrequentFoodList ( ) ; FrequentFood frequentFood0 = frequentFoodList0 . idToElement ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" E idToElement ( int id ) { return myIdToElement . get ( id ) ; }
void test6 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test7 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test8 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test9 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void add ( Object element ) { if ( myList . contains ( element ) ) return ; myList . add ( element ) ; int index = myList . indexOf ( element ) ; ListChannelEvent event = new ListChannelEvent ( ListChannelEvent . EVENT_ADD , this , index ) ; getHelper ( ) . fire ( event ) ; }
void test10 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeAll ( Collection < ? > c ) { return myData . removeAll ( c ) ; }
void test11 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; foodList0 . removeFood ( ( Food ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { CalorieCountData calorieCountData0 = new CalorieCountData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test2 ( ) throws Throwable { CalorieCountData calorieCountData0 = new CalorieCountData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test3 ( ) throws Throwable { CalorieCountData calorieCountData0 = new CalorieCountData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test4 ( ) throws Throwable { CalorieCountData calorieCountData0 = new CalorieCountData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test5 ( ) throws Throwable { CalorieCountData calorieCountData0 = new CalorieCountData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDirty ( ) throws ApplicationException { return isDirty ( ) ; }
void test6 ( ) throws Throwable { CalorieCountData calorieCountData0 = new CalorieCountData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test7 ( ) throws Throwable { ADCAdaptor aDCAdaptor0 = new ADCAdaptor ( ) ; boolean boolean0 = aDCAdaptor0 . isDirty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test8 ( ) throws Throwable { ADCAdaptor aDCAdaptor0 = new ADCAdaptor ( ) ; LinkedList < ApplicationData > linkedList0 = new LinkedList < ApplicationData > ( ) ; aDCAdaptor0 . initialize ( ( Collection < ApplicationData > ) linkedList0 ) ; linkedList0 . add ( ( ApplicationData ) aDCAdaptor0 ) ; boolean boolean0 = aDCAdaptor0 . containsAll ( ( Collection < ? > ) aDCAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test9 ( ) throws Throwable { ADCAdaptor aDCAdaptor0 = new ADCAdaptor ( ) ; LinkedList < ApplicationData > linkedList0 = new LinkedList < ApplicationData > ( ) ; aDCAdaptor0 . initialize ( ( Collection < ApplicationData > ) linkedList0 ) ; aDCAdaptor0 . postDeserialize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test11 ( ) throws Throwable { ADCAdaptor aDCAdaptor0 = new ADCAdaptor ( ) ; LinkedList < ApplicationData > linkedList0 = new LinkedList < ApplicationData > ( ) ; aDCAdaptor0 . initialize ( ( Collection < ApplicationData > ) linkedList0 ) ; aDCAdaptor0 . setDirty ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test12 ( ) throws Throwable { ADCAdaptor aDCAdaptor0 = new ADCAdaptor ( ) ; LinkedList < ApplicationData > linkedList0 = new LinkedList < ApplicationData > ( ) ; aDCAdaptor0 . initialize ( ( Collection < ApplicationData > ) linkedList0 ) ; ADCAdaptor aDCAdaptor1 = ( ADCAdaptor ) aDCAdaptor0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test13 ( ) throws Throwable { ADCAdaptor aDCAdaptor0 = new ADCAdaptor ( ) ; LinkedList < ADCAdaptor > linkedList0 = new LinkedList < ADCAdaptor > ( ) ; linkedList0 . add ( aDCAdaptor0 ) ; linkedList0 . add ( aDCAdaptor0 ) ; LinkedList < ApplicationData > linkedList1 = new LinkedList < ApplicationData > ( ) ; aDCAdaptor0 . initialize ( ( Collection < ApplicationData > ) linkedList1 ) ; boolean boolean0 = aDCAdaptor0 . addAll ( ( Collection < ? extends ApplicationData > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test14 ( ) throws Throwable { ADCAdaptor aDCAdaptor0 = new ADCAdaptor ( ) ; LinkedList < ApplicationData > linkedList0 = new LinkedList < ApplicationData > ( ) ; aDCAdaptor0 . initialize ( ( Collection < ApplicationData > ) linkedList0 ) ; aDCAdaptor0 . remove ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test15 ( ) throws Throwable { ADCAdaptor aDCAdaptor0 = new ADCAdaptor ( ) ; LinkedList < ApplicationData > linkedList0 = new LinkedList < ApplicationData > ( ) ; aDCAdaptor0 . initialize ( ( Collection < ApplicationData > ) linkedList0 ) ; linkedList0 . add ( ( ApplicationData ) aDCAdaptor0 ) ; aDCAdaptor0 . add ( ( ApplicationData ) aDCAdaptor0 ) ; boolean boolean0 = aDCAdaptor0 . removeAll ( ( Collection < ? > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test16 ( ) throws Throwable { LinkedList < ApplicationData > linkedList0 = new LinkedList < ApplicationData > ( ) ; ADCAdaptor aDCAdaptor0 = new ADCAdaptor ( ) ; linkedList0 . offerFirst ( ( ApplicationData ) aDCAdaptor0 ) ; aDCAdaptor0 . initialize ( ( Collection < ApplicationData > ) linkedList0 ) ; linkedList0 . add ( ( ApplicationData ) aDCAdaptor0 ) ; LinkedList < DeepCopier > linkedList1 = new LinkedList < DeepCopier > ( ) ; boolean boolean0 = aDCAdaptor0 . retainAll ( ( Collection < ? > ) linkedList1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test17 ( ) throws Throwable { LinkedList < ApplicationData > linkedList0 = new LinkedList < ApplicationData > ( ) ; ADCAdaptor aDCAdaptor0 = new ADCAdaptor ( ) ; linkedList0 . offerFirst ( ( ApplicationData ) aDCAdaptor0 ) ; aDCAdaptor0 . initialize ( ( Collection < ApplicationData > ) linkedList0 ) ; boolean boolean0 = aDCAdaptor0 . retainAll ( ( Collection < ? > ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test0 ( ) throws Throwable { ApplicationDataListEvent . EventType applicationDataListEvent_EventType0 = ApplicationDataListEvent . EventType . Delete ; ApplicationDataListEvent applicationDataListEvent0 = new ApplicationDataListEvent ( applicationDataListEvent_EventType0 , ( - 697 ) , ( ApplicationDataList ) null ) ; int int0 = applicationDataListEvent0 . getIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { if ( null = = myIndex ) myIndex = new Integer ( 0 ) ; return myIndex . intValue ( ) ; }
void test1 ( ) throws Throwable { ApplicationDataListEvent . EventType applicationDataListEvent_EventType0 = ApplicationDataListEvent . EventType . Create ; ApplicationDataListEvent applicationDataListEvent0 = new ApplicationDataListEvent ( applicationDataListEvent_EventType0 , 0 , ( ApplicationDataList ) null ) ; applicationDataListEvent0 . getSource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { ApplicationDataListEvent . EventType applicationDataListEvent_EventType0 = ApplicationDataListEvent . EventType . Create ; ApplicationDataListEvent applicationDataListEvent0 = new ApplicationDataListEvent ( applicationDataListEvent_EventType0 , 0 , ( ApplicationDataList ) null ) ; applicationDataListEvent0 . getEventType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { if ( null = = myIndex ) myIndex = new Integer ( 0 ) ; return myIndex . intValue ( ) ; }
void test3 ( ) throws Throwable { ApplicationDataListEvent . EventType applicationDataListEvent_EventType0 = ApplicationDataListEvent . EventType . AllChanged ; ApplicationDataListEvent applicationDataListEvent0 = new ApplicationDataListEvent ( applicationDataListEvent_EventType0 , ( - 296 ) , ( ApplicationDataList ) null ) ; String string0 = applicationDataListEvent0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { if ( null = = myIndex ) myIndex = new Integer ( 0 ) ; return myIndex . intValue ( ) ; }
void test4 ( ) throws Throwable { ApplicationDataListEvent . EventType applicationDataListEvent_EventType0 = ApplicationDataListEvent . EventType . Create ; ApplicationDataListEvent applicationDataListEvent0 = new ApplicationDataListEvent ( applicationDataListEvent_EventType0 , 0 , ( ApplicationDataList ) null ) ; String string0 = applicationDataListEvent0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { ApplicationDataListHelper applicationDataListHelper0 = new ApplicationDataListHelper ( ) ; ADCAdaptor aDCAdaptor0 = new ADCAdaptor ( ) ; applicationDataListHelper0 . fireDelete ( ( ApplicationData ) aDCAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test0 ( ) throws Throwable { XmlStorageMethod xmlStorageMethod0 = new XmlStorageMethod ( ) ; File file0 = new File ( " = < \t^CQDC" ) ; DirectoryRepository directoryRepository0 = new DirectoryRepository ( file0 , file0 ) ; Object object0 = xmlStorageMethod0 . readData ( ( ApplicationRepository ) directoryRepository0 , " = < \t^CQDC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object readData ( ApplicationRepository repository , String entry ) throws ApplicationException ; Object read ( InputStream istream ) throws ApplicationException ; void write ( OutputStream ostream , Object data ) throws ApplicationException ; }
void test4 ( ) throws Throwable { XmlStorageMethod xmlStorageMethod0 = new XmlStorageMethod ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; xmlStorageMethod0 . write ( ( OutputStream ) byteArrayOutputStream0 , ( Object ) "\u4E2D\u6587 ( \u53F0\u7063 ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { ApplicationTextPane applicationTextPane0 = new ApplicationTextPane ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { int int0 = ErrorPanel . showAndAsk ( "qm5^uQ5MJo%7 ? " , ( Throwable ) null , 84 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int showAndAsk ( String message , Throwable throwable , int mode ) { return ourExceptionHandler . showAndAsk ( message , throwable , mode ) ; }
void test0 ( ) throws Throwable { SimpleCommandLineProcessor simpleCommandLineProcessor0 = new SimpleCommandLineProcessor ( ) ; String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = " , [ " ; stringArray0 [ 1 ] = " , [ " ; Properties properties0 = simpleCommandLineProcessor0 . processArguments ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { MessageFormatter . LoadBundleError messageFormatter_LoadBundleError0 = new MessageFormatter . LoadBundleError ( "B & hq + " , ( Throwable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { MessageFormatter messageFormatter0 = new MessageFormatter ( ) ; ClassLoader classLoader0 = ClassLoader . getSystemClassLoader ( ) ; List < Object > list0 = messageFormatter0 . listResources ( "" , classLoader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test2 ( ) throws Throwable { MessageFormatter messageFormatter0 = new MessageFormatter ( ) ; List < Object > list0 = messageFormatter0 . loadCriticalBundles ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test10 ( ) throws Throwable { List < Object > list0 = MessageFormatter . buildList ( ( Object [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test11 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 4 ] ; List < Object > list0 = MessageFormatter . buildList ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test14 ( ) throws Throwable { MessageFormatter messageFormatter0 = new MessageFormatter ( ) ; String string0 = messageFormatter0 . listToString ( ( List < String > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String listToString ( List < String > list ) { if ( null = = list ) return "null" ; StringBuffer sb = new StringBuffer ( ) ; boolean first = true ; for ( String s : list ) { if ( first ) first = false ; else { sb . append ( " , " ) ; } sb . append ( s ) ; } return sb . toString ( ) ; }
void test0 ( ) throws Throwable { CriticalMessages criticalMessages0 = new CriticalMessages ( ) ; boolean boolean0 = criticalMessages0 . containsKey ( "GB ( = s$%tu" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { LTSInternationalizationSupport lTSInternationalizationSupport0 = new LTSInternationalizationSupport ( ) ; String string0 = lTSInternationalizationSupport0 . getResourceBundleErrorMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getResourceBundleErrorMessage ( ) { return DEFAULT_RESOURCE_BUNDLE_ERROR_MESSAGE ; }
void test2 ( ) throws Throwable { LTSInternationalizationSupport lTSInternationalizationSupport0 = new LTSInternationalizationSupport ( ) ; ResourceBundle resourceBundle0 = lTSInternationalizationSupport0 . getResourceBundle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResourceBundle getResourceBundle ( ) { return myResourceBundle ; }
void test0 ( ) throws Throwable { DefaultMessageFormatter defaultMessageFormatter0 = new DefaultMessageFormatter ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; defaultMessageFormatter0 . initializeResourceBundle ( ( List ) linkedList0 , ( List ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { StringComparator stringComparator0 = new StringComparator ( false , true ) ; int int0 = stringComparator0 . compare ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test1 ( ) throws Throwable { StringComparator stringComparator0 = new StringComparator ( true , false ) ; int int0 = stringComparator0 . compare ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test2 ( ) throws Throwable { IntegerCompareMethod integerCompareMethod0 = new IntegerCompareMethod ( ( - 708 ) ) ; Integer integer0 = Integer . getInteger ( "VSJ ] _n0UR2@DP_" , 1427 ) ; int int0 = integerCompareMethod0 . compare ( ( Object ) integer0 , ( Object ) integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ascending ( ) { return SORT_ASCENDING = = myMode ; }
void test3 ( ) throws Throwable { IntegerCompareMethod integerCompareMethod0 = new IntegerCompareMethod ( ( - 708 ) ) ; Integer integer0 = Integer . getInteger ( "VSJ ] _n0UR2@DP_" , 1427 ) ; Integer integer1 = new Integer ( 1 ) ; int int0 = integerCompareMethod0 . compare ( ( Object ) integer0 , ( Object ) integer1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test4 ( ) throws Throwable { IntegerCompareMethod integerCompareMethod0 = new IntegerCompareMethod ( ( - 708 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ascending ( ) { return SORT_ASCENDING = = myMode ; }
void test5 ( ) throws Throwable { IntegerCompareMethod integerCompareMethod0 = new IntegerCompareMethod ( ) ; Integer integer0 = new Integer ( ( - 3 ) ) ; Integer integer1 = new Integer ( 0 ) ; int int0 = integerCompareMethod0 . compare ( ( Object ) integer0 , ( Object ) integer1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test6 ( ) throws Throwable { IntegerCompareMethod integerCompareMethod0 = new IntegerCompareMethod ( 1 ) ; Integer integer0 = new Integer ( 973 ) ; Integer integer1 = new Integer ( 0 ) ; int int0 = integerCompareMethod0 . compare ( ( Object ) integer1 , ( Object ) integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test0 ( ) throws Throwable { ArrayUtils arrayUtils0 = new ArrayUtils ( ) ; Object [ ] objectArray0 = ArrayUtils . append ( ( Object [ ] ) null , ( Object ) arrayUtils0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void append ( Object data ) { int index = myList . size ( ) ; insert ( data , index ) ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; String [ ] stringArray1 = ArrayUtils . appendString ( stringArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] appendString ( String [ ] data , String s ) { if ( null = = data ) return null ; int size = 1 + data . length ; String [ ] newArray = new String [ size ] ; if ( null ! = data ) { for ( int i = 0 ; i < data . length ; i + + ) { newArray [ i ] = data [ i ] ; } } newArray [ newArray . length - 1 ] = s ; return newArray ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = ArrayUtils . appendString ( ( String [ ] ) null , "k9DcXwy | 6X ] SY ( " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] appendString ( String [ ] data , String s ) { if ( null = = data ) return null ; int size = 1 + data . length ; String [ ] newArray = new String [ size ] ; if ( null ! = data ) { for ( int i = 0 ; i < data . length ; i + + ) { newArray [ i ] = data [ i ] ; } } newArray [ newArray . length - 1 ] = s ; return newArray ; }
void test4 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 8 ] ; Object [ ] objectArray1 = ArrayUtils . append ( objectArray0 , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void append ( Object data ) { int index = myList . size ( ) ; insert ( data , index ) ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; List < Object > list0 = ArrayUtils . toList ( ( Object ) stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test7 ( ) throws Throwable { CharArrayWriter charArrayWriter0 = new CharArrayWriter ( ) ; PrintWriter printWriter0 = new PrintWriter ( ( Writer ) charArrayWriter0 ) ; char [ ] charArray0 = new char [ 2 ] ; ArrayUtils . print ( printWriter0 , charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test8 ( ) throws Throwable { StringBuffer stringBuffer0 = new StringBuffer ( "YQ3Lq" ) ; char [ ] charArray0 = new char [ 6 ] ; ArrayUtils . print ( stringBuffer0 , charArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test10 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; String [ ] stringArray1 = ArrayUtils . toStringArray ( ( String ) null , ( String ) null , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] toStringArray ( Properties p ) { Set keySet = p . keySet ( ) ; String [ ] out = new String [ keySet . size ( ) ] ; Iterator i = keySet . iterator ( ) ; int index = 0 ; while ( i . hasNext ( ) ) { String name = ( String ) i . next ( ) ; String value = p . getProperty ( name ) ; out [ index ] = name + " = " + value ; index + + ; } return out ; }
void test11 ( ) throws Throwable { String [ ] stringArray0 = ArrayUtils . toStringArray ( "k9DcXwy | 6X ] SY ( " , "k9DcXwy | 6X ] SY ( " , ( String [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] toStringArray ( Properties p ) { Set keySet = p . keySet ( ) ; String [ ] out = new String [ keySet . size ( ) ] ; Iterator i = keySet . iterator ( ) ; int index = 0 ; while ( i . hasNext ( ) ) { String name = ( String ) i . next ( ) ; String value = p . getProperty ( name ) ; out [ index ] = name + " = " + value ; index + + ; } return out ; }
void test12 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; String [ ] stringArray1 = ArrayUtils . appendStrings ( stringArray0 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] appendStrings ( String [ ] a1 , String [ ] a2 ) { String [ ] newArray = new String [ a1 . length + a2 . length ] ; if ( null = = a1 ) a1 = new String [ 0 ] ; if ( null = = a2 ) a2 = new String [ 0 ] ; int i ; for ( i = 0 ; i < a1 . length ; i + + ) { newArray [ i ] = a1 [ i ] ; } for ( i = 0 ; i < a2 . length ; i + + ) { newArray [ i + a1 . length ] = a2 [ i ] ; } return newArray ; }
void test13 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; Object [ ] objectArray0 = ArrayUtils . copy ( ( Object [ ] ) stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void copy ( InputStream istream , OutputStream ostream ) throws IOException { int buffSize = 2^13 ; byte [ ] buf = new byte [ buffSize ] ; int count = istream . read ( buf ) ; while ( count > 0 ) { ostream . write ( buf , 0 , count ) ; count = istream . read ( buf ) ; } istream . close ( ) ; ostream . close ( ) ; }
void test14 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; Object [ ] objectArray0 = ArrayUtils . copy ( ( Object [ ] ) stringArray0 , ( - 2 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void copy ( InputStream istream , OutputStream ostream ) throws IOException { int buffSize = 2^13 ; byte [ ] buf = new byte [ buffSize ] ; int count = istream . read ( buf ) ; while ( count > 0 ) { ostream . write ( buf , 0 , count ) ; count = istream . read ( buf ) ; } istream . close ( ) ; ostream . close ( ) ; }
void test21 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 12 ] ; Object object0 = new Object ( ) ; boolean boolean0 = ArrayUtils . arrayContains ( objectArray0 , object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < E > boolean arrayContains ( E [ ] array , E obj ) { for ( E element : array ) { if ( obj . equals ( element ) ) return true ; } return false ; }
void test22 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "" ; boolean boolean0 = ArrayUtils . arrayContains ( stringArray0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" < E > boolean arrayContains ( E [ ] array , E obj ) { for ( E element : array ) { if ( obj . equals ( element ) ) return true ; } return false ; }
void test0 ( ) throws Throwable { VectorSorter vectorSorter0 = new VectorSorter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { IntegerCompareMethod integerCompareMethod0 = new IntegerCompareMethod ( ) ; VectorSorter . sort ( ( Vector ) null , ( CompareMethod ) integerCompareMethod0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ascending ( ) { return SORT_ASCENDING = = myMode ; }
void test2 ( ) throws Throwable { Vector < Object > vector0 = new Vector < Object > ( ) ; StringCompareMethod stringCompareMethod0 = new StringCompareMethod ( ( - 1068 ) ) ; VectorSorter . sort ( ( Vector ) vector0 , ( CompareMethod ) stringCompareMethod0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test3 ( ) throws Throwable { Vector < Object > vector0 = new Vector < Object > ( ) ; vector0 . add ( ( Object ) " [ ] " ) ; vector0 . add ( ( Object ) " [ ] " ) ; vector0 . add ( ( Object ) "DQbIWE~sy@5p" ) ; vector0 . add ( ( Object ) " [ [ ] ] " ) ; StringCompareMethod stringCompareMethod0 = new StringCompareMethod ( ( - 1068 ) ) ; VectorSorter . sort ( ( Vector ) vector0 , ( CompareMethod ) stringCompareMethod0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ascending ( ) { return SORT_ASCENDING = = myMode ; }
void test1 ( ) throws Throwable { SleepHelper sleepHelper0 = new SleepHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { List < String > list0 = FileUtils . findDirectoriesContaining ( "evosuite . properties" , "evosuite . properties" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test1 ( ) throws Throwable { FileUtils fileUtils0 = new FileUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { String string0 = FileUtils . findFirstDirectoryContaining ( "ReallyCaselessMapEvoSuiteTest . java" , "lib" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String findFirstDirectoryContaining ( String name , String path ) { String sep = StandardProperties . PathSeparator . getValue ( ) ; String [ ] dirs = path . split ( sep ) ; List < String > list = findDirectoriesContaining ( name , dirs , true ) ; if ( list . size ( ) < 1 ) return null ; else return list . get ( 0 ) ; }
void test5 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; File file0 = new File ( "evosuite . properties" ) ; File file1 = file0 . getAbsoluteFile ( ) ; File file2 = file1 . getParentFile ( ) ; boolean boolean0 = FileUtils . appendDirectoriesToSearch ( ( List < String > ) linkedList0 , "evosuite . properties" , file2 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test6 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; File file0 = new File ( "evosuite . properties" ) ; File file1 = file0 . getAbsoluteFile ( ) ; File file2 = file1 . getParentFile ( ) ; boolean boolean0 = FileUtils . appendDirectoriesToSearch ( ( List < String > ) linkedList0 , "evosuite . properties" , file2 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 1 ] ; stringArray0 [ 0 ] = "SublistProxyEvoSuiteTest . java" ; String string0 = FileUtils . findFirstDirectoryContaining ( "SublistProxyEvoSuiteTest . java" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String findFirstDirectoryContaining ( String name , String path ) { String sep = StandardProperties . PathSeparator . getValue ( ) ; String [ ] dirs = path . split ( sep ) ; List < String > list = findDirectoriesContaining ( name , dirs , true ) ; if ( list . size ( ) < 1 ) return null ; else return list . get ( 0 ) ; }
void test0 ( ) throws Throwable { MapUtil mapUtil0 = new MapUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 6 ] ; Map < Object , Object > map0 = MapUtil . buildMap ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test3 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 47 ] [ 5 ] ; Map < Object , Object > map0 = MapUtil . buildMap ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test4 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 6 ] ; Map < Object , Object > map0 = MapUtil . buildReversedMap ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test0 ( ) throws Throwable { FairWaiter fairWaiter0 = new FairWaiter ( ) ; List < Object > list0 = fairWaiter0 . copyWaiters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean noWaiters ( ) { return getWaiters ( ) . size ( ) < = 0 ; }
void test1 ( ) throws Throwable { FairWaiter fairWaiter0 = new FairWaiter ( ) ; fairWaiter0 . setNextInLine ( ( Thread ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean noWaiters ( ) { return getWaiters ( ) . size ( ) < = 0 ; }
void test2 ( ) throws Throwable { FairWaiter fairWaiter0 = new FairWaiter ( ) ; fairWaiter0 . fairNotify ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean noWaiters ( ) { return getWaiters ( ) . size ( ) < = 0 ; }
void test0 ( ) throws Throwable { StringIntMap stringIntMap0 = new StringIntMap ( ) ; Map < Object , Object > map0 = stringIntMap0 . getStringToIntMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getStringToIntMap ( ) { return myStringToIntMap ; }
void test1 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 6 ] ; StringIntMap stringIntMap0 = new StringIntMap ( objectArray0 ) ; String string0 = stringIntMap0 . intToString ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String intToString ( int ivalue ) { Integer i = new Integer ( ivalue ) ; String s = ( String ) myIntToStringMap . get ( i ) ; return s ; }
void test2 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 6 ] ; StringIntMap stringIntMap0 = new StringIntMap ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test3 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 10 ] ; objectArray0 [ 8 ] = ( Object ) "" ; StringIntMap stringIntMap0 = new StringIntMap ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" StringIntMap ( ) { }
void test4 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 6 ] ; StringIntMap stringIntMap0 = new StringIntMap ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int stringToInt ( String s ) { Integer i = ( Integer ) myStringToIntMap . get ( s ) ; if ( null = = i ) return - 1 ; else return i . intValue ( ) ; }
void test5 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 6 ] ; StringIntMap stringIntMap0 = new StringIntMap ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int stringToInt ( String s ) { Integer i = ( Integer ) myStringToIntMap . get ( s ) ; if ( null = = i ) return - 1 ; else return i . intValue ( ) ; }
void test0 ( ) throws Throwable { MoreArrayUtils moreArrayUtils0 = new MoreArrayUtils ( ) ; Object [ ] objectArray0 = new Object [ 7 ] ; boolean boolean0 = MoreArrayUtils . contains ( ( Object ) moreArrayUtils0 , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( Object o ) { return this . contentSet . containsKey ( o ) ; }
void test1 ( ) throws Throwable { boolean boolean0 = MoreArrayUtils . contains ( ( Object ) null , ( Object [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( Object o ) { return this . contentSet . containsKey ( o ) ; }
void test2 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 7 ] ; boolean boolean0 = MoreArrayUtils . contains ( ( Object ) null , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( Object o ) { return this . contentSet . containsKey ( o ) ; }
void test0 ( ) throws Throwable { PropertyUtil propertyUtil0 = new PropertyUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; PropertyUtil . dump ( ( Map ) properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test3 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; properties0 . put ( ( Object ) "" , ( Object ) "" ) ; Properties properties1 = PropertyUtil . combine ( properties0 , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Properties combine ( Properties p1 , Properties p2 ) { Properties result = new Properties ( ) ; Enumeration enu = p1 . keys ( ) ; while ( enu . hasMoreElements ( ) ) { String theKey = ( String ) enu . nextElement ( ) ; String theValue = p1 . getProperty ( theKey ) ; result . setProperty ( theKey , theValue ) ; } enu = p2 . keys ( ) ; while ( enu . hasMoreElements ( ) ) { String theKey = ( String ) enu . nextElement ( ) ; String theValue = p2 . getProperty ( theKey ) ; result . setProperty ( theKey , theValue ) ; } return result ; }
void test4 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; properties0 . put ( ( Object ) "" , ( Object ) "" ) ; String [ ] [ ] stringArray0 = PropertyUtil . toSortedList ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] [ ] toSortedList ( Properties p ) { List list = new ArrayList ( p . keySet ( ) ) ; Collections . sort ( list ) ; String [ ] [ ] array = new String [ list . size ( ) ] [ ] ; for ( int i = 0 ; i < array . length ; i + + ) { String name = ( String ) list . get ( i ) ; String value = p . getProperty ( name ) ; array [ i ] = new String [ ] { name , value } ; } return array ; }
void test5 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; LinkedHashSet < String > linkedHashSet0 = new LinkedHashSet < String > ( ) ; properties0 . put ( ( Object ) "" , ( Object ) properties0 ) ; Properties properties1 = PropertyUtil . filter ( properties0 , ( Set ) linkedHashSet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test7 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; properties0 . put ( ( Object ) "" , ( Object ) "" ) ; Boolean boolean0 = PropertyUtil . getBoolean ( "" , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean getBoolean ( String name , Properties properties ) { try { String value = properties . getProperty ( name ) ; if ( null = = value ) return null ; else return new Boolean ( value ) ; } catch ( RuntimeException e ) { return null ; } }
void test1 ( ) throws Throwable { char [ ] charArray0 = new char [ 3 ] ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer ( ( Reader ) charArrayReader0 , "" ) ; improvedTokenizer0 . previousDelimiter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object read ( XmlSerializer xser , Element node , boolean forgiving ) throws LTSException ; String getTagName ( Object o ) ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value , boolean printClassName ) throws LTSException ; void write ( XmlSerializer xser , IndentingPrintWriter out , String name , Object value ) throws LTSException { write ( xser , out , name , value , false ) ; }
void test2 ( ) throws Throwable { ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer ( "" , "" ) ; improvedTokenizer0 . hasNext ( ) ; boolean boolean0 = improvedTokenizer0 . hasNext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) throws IOException { boolean thereIsAnotherToken = false ; / / / / if definitely know whether another token exists , then just return / / the result and be done with it / / switch ( myState ) { case STATE_START : case STATE_BEFORE_TOKEN : thereIsAnotherToken = advance ( ) ; break ; case STATE_AFTER_TOKEN : case STATE_MATCH_STOP : thereIsAnotherToken = true ; break ; case STATE_STOP : thereIsAnotherToken = false ; break ; } return thereIsAnotherToken ; }
void test4 ( ) throws Throwable { char [ ] charArray0 = new char [ 3 ] ; CharArrayReader charArrayReader0 = new CharArrayReader ( charArray0 ) ; ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer ( ( Reader ) charArrayReader0 , "" ) ; improvedTokenizer0 . hasNext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) throws IOException { boolean thereIsAnotherToken = false ; / / / / if definitely know whether another token exists , then just return / / the result and be done with it / / switch ( myState ) { case STATE_START : case STATE_BEFORE_TOKEN : thereIsAnotherToken = advance ( ) ; break ; case STATE_AFTER_TOKEN : case STATE_MATCH_STOP : thereIsAnotherToken = true ; break ; case STATE_STOP : thereIsAnotherToken = false ; break ; } return thereIsAnotherToken ; }
void test6 ( ) throws Throwable { ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer ( "Mg" , "Mg" ) ; boolean boolean0 = improvedTokenizer0 . keepParsing ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean keepParsing ( int state ) { return STATE_MATCHING_TOKEN = = state | | STATE_BEFORE_TOKEN = = state | | STATE_START = = state ; }
void test0 ( ) throws Throwable { ImprovedProperties improvedProperties0 = new ImprovedProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test1 ( ) throws Throwable { ImprovedProperties improvedProperties0 = new ImprovedProperties ( ( String [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = " / Delete" ; stringArray0 [ 1 ] = " / Delete" ; stringArray0 [ 2 ] = "" ; stringArray0 [ 3 ] = " / Delete" ; ImprovedProperties improvedProperties0 = new ImprovedProperties ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDescendentOf ( TreeNode other ) { if ( null = = other ) return false ; else if ( this = = other | | this . equals ( other ) ) return true ; for ( Object o : other . depthFirstList ( ) ) { if ( o = = other | | o . equals ( other ) ) return true ; } return false ; }
void test1 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void replaceChild ( TreeNode original , TreeNode replacement ) { int index = myChildren . indexOf ( original ) ; if ( - 1 = = index ) { String msg = "The node , " + original + " , is not one of the child nodes of " + this ; throw new IllegalArgumentException ( msg ) ; } myChildren . add ( index , replacement ) ; }
void test2 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; TreeNode treeNode1 = new TreeNode ( treeNode0 ) ; TreeNode treeNode2 = ( TreeNode ) treeNode1 . deepCopy ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object deepCopy ( ) throws DeepCopyException { return DeepCopyUtil . deepCopy ( this , false ) ; }
void test3 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; boolean boolean0 = treeNode0 . removeChild ( treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeChild ( SimpleElement node ) { if ( node = = null ) return ; getChildren ( ) . remove ( node ) ; }
void test4 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDescendentOf ( TreeNode other ) { if ( null = = other ) return false ; else if ( this = = other | | this . equals ( other ) ) return true ; for ( Object o : other . depthFirstList ( ) ) { if ( o = = other | | o . equals ( other ) ) return true ; } return false ; }
void test5 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; treeNode0 . updateFrom ( ( Object ) treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test6 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; Object object0 = treeNode0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] getData ( ) { return this . data ; }
void test7 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; TreeNode treeNode1 = new TreeNode ( treeNode0 , ( Collection ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TreeNode ( ) { initialize ( null , null , null ) ; }
void test8 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; int int0 = treeNode0 . getChildCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test9 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; TreeNode treeNode1 = ( TreeNode ) treeNode0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test10 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test11 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test12 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test13 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDescendentOf ( TreeNode other ) { if ( null = = other ) return false ; else if ( this = = other | | this . equals ( other ) ) return true ; for ( Object o : other . depthFirstList ( ) ) { if ( o = = other | | o . equals ( other ) ) return true ; } return false ; }
void test14 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDescendentOf ( TreeNode other ) { if ( null = = other ) return false ; else if ( this = = other | | this . equals ( other ) ) return true ; for ( Object o : other . depthFirstList ( ) ) { if ( o = = other | | o . equals ( other ) ) return true ; } return false ; }
void test0 ( ) throws Throwable { ListUtils listUtils0 = new ListUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; ListUtils . addAll ( ( List ) linkedList0 , ( Object [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test2 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; Object [ ] objectArray0 = new Object [ 3 ] ; ListUtils . addAll ( ( List ) linkedList0 , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; Object [ ] objectArray0 = linkedList0 . toArray ( ) ; ListUtils . addAll ( ( List ) linkedList0 , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test4 ( ) throws Throwable { LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; ListUtils . addAllStrings ( ( List ) linkedList0 , ( Object [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test5 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; Object [ ] objectArray0 = linkedList0 . toArray ( ) ; ListUtils . addAllStrings ( ( List ) linkedList0 , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test6 ( ) throws Throwable { LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; Object [ ] objectArray0 = new Object [ 3 ] ; Object object0 = new Object ( ) ; objectArray0 [ 0 ] = object0 ; objectArray0 [ 1 ] = object0 ; objectArray0 [ 2 ] = object0 ; ListUtils . addAllStrings ( ( List ) linkedList0 , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test0 ( ) throws Throwable { HashMapUtil hashMapUtil0 = new HashMapUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 6 ] ; Map < Object , Object > map0 = HashMapUtil . buildMap ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test0 ( ) throws Throwable { ImprovedRandom improvedRandom0 = new ImprovedRandom ( ) ; ImprovedRandom . getInstance ( ) ; int int0 = improvedRandom0 . nextInt ( 1417 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nextInt ( ) throws IOException { Integer i = nextInteger ( ) ; if ( null = = i ) throw new IOException ( "unexpected end of input" ) ; else return i . intValue ( ) ; }
void test1 ( ) throws Throwable { ImprovedRandom improvedRandom0 = new ImprovedRandom ( ( long ) 1417 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ImprovedRandom ( ) { super ( ) ; }
void test2 ( ) throws Throwable { ImprovedRandom improvedRandom0 = ImprovedRandom . getInstance ( ) ; ImprovedRandom improvedRandom1 = ImprovedRandom . getInstance ( ( - 328L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nextInt ( ) throws IOException { Integer i = nextInteger ( ) ; if ( null = = i ) throw new IOException ( "unexpected end of input" ) ; else return i . intValue ( ) ; }
void test3 ( ) throws Throwable { ImprovedRandom improvedRandom0 = ImprovedRandom . getInstance ( ( - 328L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean nextBoolean ( ) throws IOException { Boolean b = null ; nextToken ( ) ; switch ( ttype ) { case TT_EOF : b = null ; break ; case TT_WORD : b = new Boolean ( sval ) ; break ; case TT_NUMBER : { if ( 0 = = ( int ) nval ) b = new Boolean ( false ) ; else b = new Boolean ( true ) ; break ; } default : throw new IOException ( "non - boolean" ) ; } return b ; }
void test0 ( ) throws Throwable { long long0 = CalendarUtil . timeOfDay ( 1352L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long timeOfDay ( long dateTime ) { return ( dateTime % ( 24 * 60 * 60 * 1000 ) ) ; }
void test1 ( ) throws Throwable { Date date0 = CalendarUtil . yesterday ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long nextDay ( long time ) { Calendar cal = Calendar . getInstance ( ) ; cal . setTimeInMillis ( time ) ; cal . add ( Calendar . DAY_OF_YEAR , 1 ) ; return cal . getTimeInMillis ( ) ; }
void test2 ( ) throws Throwable { SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat ( ) ; String string0 = CalendarUtil . formatForToday ( simpleDateFormat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatForToday ( SimpleDateFormat sdf ) { Date today = today ( ) ; String str = sdf . format ( today ) ; return str ; }
void test3 ( ) throws Throwable { long long0 = CalendarUtil . todayMsec ( ( - 3600000L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long todayMsec ( ) { long now = System . currentTimeMillis ( ) ; return clearHourMinuteSecondMsec ( now ) ; }
void test4 ( ) throws Throwable { Date date0 = CalendarUtil . yesterday ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { long time = myDateField . getDateInMillis ( ) ; time = DateUtil . clearTime ( time ) ; Calendar cal = Calendar . getInstance ( ) ; cal . setTimeInMillis ( time ) ; String s = myTimeField . getText ( ) ; long timeOfDay = DateUtil . parseTimeString ( s ) ; Calendar timeCal = Calendar . getInstance ( ) ; timeCal . setTimeInMillis ( timeOfDay ) ; cal . set ( cal . get ( Calendar . YEAR ) , cal . get ( Calendar . MONTH ) , cal . get ( Calendar . DAY_OF_MONTH ) , timeCal . get ( Calendar . HOUR_OF_DAY ) , timeCal . get ( Calendar . MINUTE ) , timeCal . get ( Calendar . SECOND ) ) ; long timeAndDate = cal . getTimeInMillis ( ) ; return timeAndDate ; }
void test5 ( ) throws Throwable { long long0 = CalendarUtil . tomorrowMsec ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long tomorrowMsec ( long time ) { Calendar cal = calendar ( time ) ; clearHourMinuteSecondMsec ( cal ) ; cal . add ( Calendar . DAY_OF_YEAR , 1 ) ; return cal . getTimeInMillis ( ) ; }
void test6 ( ) throws Throwable { CalendarUtil calendarUtil0 = new CalendarUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long todayMsec ( ) { long now = System . currentTimeMillis ( ) ; return clearHourMinuteSecondMsec ( now ) ; }
void test7 ( ) throws Throwable { Date date0 = CalendarUtil . yesterday ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { long time = myDateField . getDateInMillis ( ) ; time = DateUtil . clearTime ( time ) ; Calendar cal = Calendar . getInstance ( ) ; cal . setTimeInMillis ( time ) ; String s = myTimeField . getText ( ) ; long timeOfDay = DateUtil . parseTimeString ( s ) ; Calendar timeCal = Calendar . getInstance ( ) ; timeCal . setTimeInMillis ( timeOfDay ) ; cal . set ( cal . get ( Calendar . YEAR ) , cal . get ( Calendar . MONTH ) , cal . get ( Calendar . DAY_OF_MONTH ) , timeCal . get ( Calendar . HOUR_OF_DAY ) , timeCal . get ( Calendar . MINUTE ) , timeCal . get ( Calendar . SECOND ) ) ; long timeAndDate = cal . getTimeInMillis ( ) ; return timeAndDate ; }
void test8 ( ) throws Throwable { long long0 = CalendarUtil . todayMsec ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long todayMsec ( ) { long now = System . currentTimeMillis ( ) ; return clearHourMinuteSecondMsec ( now ) ; }
void test9 ( ) throws Throwable { GregorianCalendar gregorianCalendar0 = ( GregorianCalendar ) CalendarUtil . calendarToday ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test10 ( ) throws Throwable { long long0 = CalendarUtil . yesterdayMsec ( 688L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long yesterdayMsec ( long time ) { return yesterday ( time ) . getTime ( ) ; }
void test0 ( ) throws Throwable { DoubleMap doubleMap0 = new DoubleMap ( ) ; Object object0 = new Object ( ) ; Object object1 = doubleMap0 . keyToValue ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object keyToValue ( Object key ) { return keyToValueMap . get ( key ) ; }
void test1 ( ) throws Throwable { DoubleMap doubleMap0 = new DoubleMap ( ) ; Object object0 = new Object ( ) ; Object object1 = doubleMap0 . get ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream get ( String name ) throws LTSException , IOException { InputStream istream ; if ( ! entryExists ( name ) ) return null ; if ( ! archiveHasBeenExtracted ( ) ) istream = basicGet ( name ) ; else { File f = new File ( getTempDir ( ) , name ) ; try { istream = new FileInputStream ( f ) ; } catch ( FileNotFoundException e ) { istream = null ; } } return istream ; }
void test2 ( ) throws Throwable { DoubleMap doubleMap0 = new DoubleMap ( ) ; Map < Object , Object > map0 = doubleMap0 . getValueToKeyMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test4 ( ) throws Throwable { DoubleMap doubleMap0 = new DoubleMap ( ) ; Object object0 = new Object ( ) ; Object object1 = doubleMap0 . valueToKey ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object valueToKey ( Object value ) { return valueToKeyMap . get ( value ) ; }
void test5 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 10 ] ; Object object0 = new Object ( ) ; objectArray0 [ 0 ] = object0 ; objectArray0 [ 2 ] = object0 ; objectArray0 [ 4 ] = objectArray0 [ 0 ] ; objectArray0 [ 6 ] = objectArray0 [ 0 ] ; objectArray0 [ 8 ] = objectArray0 [ 2 ] ; DoubleMap doubleMap0 = new DoubleMap ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DoubleMap ( ) { }
void test13 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 4 ] ; Object object0 = new Object ( ) ; objectArray0 [ 0 ] = object0 ; Object [ ] objectArray1 = new Object [ 2 ] ; objectArray1 [ 0 ] = object0 ; objectArray1 [ 1 ] = objectArray0 [ 0 ] ; Object [ ] objectArray2 = new Object [ 7 ] ; objectArray2 [ 0 ] = object0 ; objectArray2 [ 2 ] = objectArray0 [ 0 ] ; Object [ ] [ ] objectArray3 = new Object [ 7 ] [ 3 ] ; objectArray3 [ 0 ] = objectArray2 ; objectArray3 [ 1 ] = objectArray0 ; objectArray3 [ 2 ] = objectArray3 [ 0 ] ; objectArray3 [ 3 ] = objectArray2 ; objectArray3 [ 4 ] = objectArray1 ; objectArray3 [ 5 ] = objectArray1 ; objectArray3 [ 6 ] = objectArray1 ; DoubleMap doubleMap0 = new DoubleMap ( objectArray3 ) ; doubleMap0 . removeValue ( objectArray2 [ 2 ] ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeValue ( Object value ) { Object key = valueToKeyMap . get ( value ) ; valueToKeyMap . remove ( value ) ; if ( null ! = key ) keyToValueMap . remove ( key ) ; }
void test0 ( ) throws Throwable { CaselessStringMap caselessStringMap0 = new CaselessStringMap ( ) ; caselessStringMap0 . put ( "7p , { E" , " { } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { CaselessStringMap caselessStringMap0 = new CaselessStringMap ( ) ; Object object0 = caselessStringMap0 . get ( "7p , { E" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream get ( String name ) throws LTSException , IOException { InputStream istream ; if ( ! entryExists ( name ) ) return null ; if ( ! archiveHasBeenExtracted ( ) ) istream = basicGet ( name ) ; else { File f = new File ( getTempDir ( ) , name ) ; try { istream = new FileInputStream ( f ) ; } catch ( FileNotFoundException e ) { istream = null ; } } return istream ; }
void test2 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 8 ] ; CaselessStringMap caselessStringMap0 = new CaselessStringMap ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test0 ( ) throws Throwable { Object object0 = new Object ( ) ; TreeNode treeNode0 = new TreeNode ( object0 ) ; DepthFirstTreeIterator depthFirstTreeIterator0 = new DepthFirstTreeIterator ( treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) throws IOException { boolean thereIsAnotherToken = false ; / / / / if definitely know whether another token exists , then just return / / the result and be done with it / / switch ( myState ) { case STATE_START : case STATE_BEFORE_TOKEN : thereIsAnotherToken = advance ( ) ; break ; case STATE_AFTER_TOKEN : case STATE_MATCH_STOP : thereIsAnotherToken = true ; break ; case STATE_STOP : thereIsAnotherToken = false ; break ; } return thereIsAnotherToken ; }
void test1 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; DepthFirstTreeIterator depthFirstTreeIterator0 = new DepthFirstTreeIterator ( treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( Object element ) { if ( ! myList . contains ( element ) ) return ; int index = myList . indexOf ( element ) ; myList . remove ( index ) ; ListChannelEvent event = new ListChannelEvent ( ListChannelEvent . EVENT_REMOVE , this , index ) ; getHelper ( ) . fire ( event ) ; }
void test2 ( ) throws Throwable { Object object0 = new Object ( ) ; TreeNode treeNode0 = new TreeNode ( object0 ) ; DepthFirstTreeIterator depthFirstTreeIterator0 = new DepthFirstTreeIterator ( treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) throws IOException { boolean thereIsAnotherToken = false ; / / / / if definitely know whether another token exists , then just return / / the result and be done with it / / switch ( myState ) { case STATE_START : case STATE_BEFORE_TOKEN : thereIsAnotherToken = advance ( ) ; break ; case STATE_AFTER_TOKEN : case STATE_MATCH_STOP : thereIsAnotherToken = true ; break ; case STATE_STOP : thereIsAnotherToken = false ; break ; } return thereIsAnotherToken ; }
void test3 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; DepthFirstTreeIterator depthFirstTreeIterator0 = new DepthFirstTreeIterator ( treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String next ( ) throws LTSException , IOException { int state = STATE_START ; StringBuffer buf = new StringBuffer ( ) ; String tag = null ; int c = myReader . read ( ) ; while ( - 1 ! = c & & null = = tag ) { switch ( c ) { case CHAR_START : state = processStart ( state ) ; c = myReader . read ( ) ; break ; case CHAR_START2 : state = processStart2 ( state ) ; c = myReader . read ( ) ; break ; case CHAR_NEWLINE : processNewline ( state ) ; c = myReader . read ( ) ; break ; case CHAR_CARRIAGE_RETURN : processCarriageReturn ( state ) ; c = myReader . read ( ) ; break ; case CHAR_END : { TransResult result = processEnd ( state , buf ) ; tag = result . tag ; state = result . newstate ; c = result . nextchar ; break ; } default : processDefault ( state , c , buf ) ; c = myReader . read ( ) ; break ; } } return tag ; }
void test4 ( ) throws Throwable { Object object0 = new Object ( ) ; TreeNode treeNode0 = new TreeNode ( object0 ) ; List < Object > list0 = treeNode0 . depthFirstList ( ) ; TreeNode treeNode1 = new TreeNode ( treeNode0 , ( Collection ) list0 ) ; treeNode0 . addChild ( treeNode1 ) ; DepthFirstTreeIterator depthFirstTreeIterator0 = new DepthFirstTreeIterator ( treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) throws IOException { boolean thereIsAnotherToken = false ; / / / / if definitely know whether another token exists , then just return / / the result and be done with it / / switch ( myState ) { case STATE_START : case STATE_BEFORE_TOKEN : thereIsAnotherToken = advance ( ) ; break ; case STATE_AFTER_TOKEN : case STATE_MATCH_STOP : thereIsAnotherToken = true ; break ; case STATE_STOP : thereIsAnotherToken = false ; break ; } return thereIsAnotherToken ; }
void test0 ( ) throws Throwable { DefaultSharedQueue defaultSharedQueue0 = new DefaultSharedQueue ( ) ; defaultSharedQueue0 . put ( ( Object ) " = = = ] Shared Queue Report [ = = = \n\nQueue contents : \n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReport ( ) { StringWriter sw = new StringWriter ( ) ; PrintWriter out = new PrintWriter ( sw ) ; Iterator i ; out . println ( " = = = ] Shared Queue Report [ = = = " ) ; out . println ( ) ; out . println ( "Queue contents : " ) ; i = getQueue ( ) . iterator ( ) ; while ( i . hasNext ( ) ) { Object o = i . next ( ) ; out . println ( o ) ; } return sw . toString ( ) ; }
void test0 ( ) throws Throwable { DefaultSharedQueue defaultSharedQueue0 = new DefaultSharedQueue ( ) ; List < Object > list0 = defaultSharedQueue0 . copyContents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test1 ( ) throws Throwable { DefaultSharedQueue defaultSharedQueue0 = new DefaultSharedQueue ( ) ; defaultSharedQueue0 . put ( ( Object ) " = = = ] Shared Queue Report [ = = = \n\nQueue contents : \n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReport ( ) { StringWriter sw = new StringWriter ( ) ; PrintWriter out = new PrintWriter ( sw ) ; Iterator i ; out . println ( " = = = ] Shared Queue Report [ = = = " ) ; out . println ( ) ; out . println ( "Queue contents : " ) ; i = getQueue ( ) . iterator ( ) ; while ( i . hasNext ( ) ) { Object o = i . next ( ) ; out . println ( o ) ; } return sw . toString ( ) ; }
void test2 ( ) throws Throwable { DefaultSharedQueue defaultSharedQueue0 = new DefaultSharedQueue ( ) ; / / Undeclared exception ! try { defaultSharedQueue0 . clear ( ) ; fail ( "Expecting exception : NullPointerException" ) ; } catch ( NullPointerException e ) { } "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReport ( ) { StringWriter sw = new StringWriter ( ) ; PrintWriter out = new PrintWriter ( sw ) ; Iterator i ; out . println ( " = = = ] Shared Queue Report [ = = = " ) ; out . println ( ) ; out . println ( "Queue contents : " ) ; i = getQueue ( ) . iterator ( ) ; while ( i . hasNext ( ) ) { Object o = i . next ( ) ; out . println ( o ) ; } return sw . toString ( ) ; }
void test3 ( ) throws Throwable { DefaultSharedQueue defaultSharedQueue0 = new DefaultSharedQueue ( ) ; String string0 = defaultSharedQueue0 . getReport ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReport ( ) { StringWriter sw = new StringWriter ( ) ; PrintWriter out = new PrintWriter ( sw ) ; Iterator i ; out . println ( " = = = ] Shared Queue Report [ = = = " ) ; out . println ( ) ; out . println ( "Queue contents : " ) ; i = getQueue ( ) . iterator ( ) ; while ( i . hasNext ( ) ) { Object o = i . next ( ) ; out . println ( o ) ; } return sw . toString ( ) ; }
void test4 ( ) throws Throwable { DefaultSharedQueue defaultSharedQueue0 = new DefaultSharedQueue ( ) ; Object object0 = defaultSharedQueue0 . basicNext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object basicNext ( ) { List l = getQueue ( ) ; if ( l . size ( ) < 1 ) return null ; return l . remove ( 0 ) ; }
void test0 ( ) throws Throwable { ToStringComparator toStringComparator0 = new ToStringComparator ( false , false ) ; Object object0 = new Object ( ) ; int int0 = toStringComparator0 . compare ( object0 , object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test3 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; bag0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test4 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; boolean boolean0 = bag0 . containsAll ( ( Collection ) bag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsAll ( Collection < ? > c ) { return myData . containsAll ( c ) ; }
void test6 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; Object [ ] objectArray0 = new Object [ 1 ] ; Object [ ] objectArray1 = bag0 . toArray ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] toArray ( ) { return myData . toArray ( ) ; }
void test7 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; boolean boolean0 = bag0 . addAll ( ( Collection ) bag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean addAll ( Collection < ? extends E > c ) { return myData . addAll ( c ) ; }
void test8 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; bag0 . addElement ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test9 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; Vector < Object > vector0 = new Vector < Object > ( ) ; boolean boolean0 = bag0 . removeAll ( ( Collection ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeAll ( Collection < ? > c ) { return myData . removeAll ( c ) ; }
void test10 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; Enumeration < Object > enumeration0 = bag0 . elements ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Enumeration elements ( ) { return new BagEnumeration ( this ) ; }
void test11 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; Bag bag1 = new Bag ( ( Collection ) bag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test12 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; boolean boolean0 = bag0 . retainAll ( ( Collection ) bag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean retainAll ( Collection < ? > c ) { return myData . retainAll ( c ) ; }
void test14 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; Vector < Object > vector0 = bag0 . getElements ( ) ; boolean boolean0 = bag0 . removElement ( ( Object ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removElement ( Object o ) { return getElements ( ) . removeElement ( o ) ; }
void test15 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; Vector < Object > vector0 = new Vector < Object > ( ) ; boolean boolean0 = bag0 . remove ( ( Object ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( Object element ) { if ( ! myList . contains ( element ) ) return ; int index = myList . indexOf ( element ) ; myList . remove ( index ) ; ListChannelEvent event = new ListChannelEvent ( ListChannelEvent . EVENT_REMOVE , this , index ) ; getHelper ( ) . fire ( event ) ; }
void test16 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; int int0 = bag0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test17 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; Bag . BagEnumeration bag_BagEnumeration0 = bag0 . new BagEnumeration ( bag0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Bag ( ) { super ( ) ; }
void test18 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; Object object0 = new Object ( ) ; bag0 . add ( object0 ) ; Bag . BagEnumeration bag_BagEnumeration0 = bag0 . new BagEnumeration ( bag0 ) ; boolean boolean0 = bag_BagEnumeration0 . hasMoreElements ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test19 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; boolean boolean0 = bag0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test20 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; bag0 . add ( ( Object ) " [ ] " ) ; boolean boolean0 = bag0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test21 ( ) throws Throwable { Bag bag0 = new Bag ( ) ; Object object0 = new Object ( ) ; bag0 . add ( object0 ) ; Bag . BagIterator bag_BagIterator0 = new Bag . BagIterator ( bag0 ) ; boolean boolean0 = bag_BagIterator0 . hasNext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test0 ( ) throws Throwable { IdentityHashSet identityHashSet0 = new IdentityHashSet ( ) ; Object [ ] objectArray0 = new Object [ 3 ] ; Object [ ] objectArray1 = identityHashSet0 . toArray ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] toArray ( ) { return myData . toArray ( ) ; }
void test1 ( ) throws Throwable { IdentityHashSet identityHashSet0 = new IdentityHashSet ( ) ; Object object0 = new Object ( ) ; identityHashSet0 . add ( object0 ) ; boolean boolean0 = identityHashSet0 . add ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test2 ( ) throws Throwable { IdentityHashSet identityHashSet0 = new IdentityHashSet ( ) ; boolean boolean0 = identityHashSet0 . remove ( ( Object ) " [ ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( Object element ) { if ( ! myList . contains ( element ) ) return ; int index = myList . indexOf ( element ) ; myList . remove ( index ) ; ListChannelEvent event = new ListChannelEvent ( ListChannelEvent . EVENT_REMOVE , this , index ) ; getHelper ( ) . fire ( event ) ; }
void test3 ( ) throws Throwable { IdentityHashSet identityHashSet0 = new IdentityHashSet ( ) ; Object object0 = new Object ( ) ; identityHashSet0 . add ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( Object element ) { if ( ! myList . contains ( element ) ) return ; int index = myList . indexOf ( element ) ; myList . remove ( index ) ; ListChannelEvent event = new ListChannelEvent ( ListChannelEvent . EVENT_REMOVE , this , index ) ; getHelper ( ) . fire ( event ) ; }
void test0 ( ) throws Throwable { VectorUtils vectorUtils0 = new VectorUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 5 ] ; Vector < Object > vector0 = VectorUtils . arrayToVector ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties ( ) ; HierarchicalProperties hierarchicalProperties1 = hierarchicalProperties0 . getSubProperties ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSeparator ( ) { return mySeparator ; }
void test1 ( ) throws Throwable { HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties ( ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; stringArray0 [ 3 ] = "" ; stringArray0 [ 4 ] = "" ; stringArray0 [ 5 ] = "" ; HierarchicalProperties hierarchicalProperties1 = new HierarchicalProperties ( stringArray0 ) ; hierarchicalProperties0 . addProperties ( "" , ( Properties ) hierarchicalProperties1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSeparator ( ) { return mySeparator ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = "^I1dfn@j 1Wiv" ; stringArray0 [ 1 ] = "^I1dfn@j 1Wiv" ; stringArray0 [ 3 ] = "nV | 1" ; stringArray0 [ 2 ] = " . error . " ; HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties ( stringArray0 ) ; Set < Object > set0 = hierarchicalProperties0 . getImmediatePropertyNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "$" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "$" ; stringArray0 [ 3 ] = "" ; stringArray0 [ 4 ] = "c4Y . " ; stringArray0 [ 5 ] = "f / @cip$" ; HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties ( stringArray0 ) ; Set < Object > set0 = hierarchicalProperties0 . getImmediateParentNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = " < _l7" ; stringArray0 [ 2 ] = "" ; stringArray0 [ 3 ] = "z ) Zrs ! Yp" ; stringArray0 [ 4 ] = " + u8c : . 03KREd @" ; stringArray0 [ 5 ] = "" ; stringArray0 [ 6 ] = "x`dSp" ; stringArray0 [ 7 ] = "" ; stringArray0 [ 8 ] = "" ; stringArray0 [ 9 ] = "" ; HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties ( stringArray0 ) ; Set < Object > set0 = hierarchicalProperties0 . getImmediateLeafNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = " = + z5f . " ; stringArray0 [ 3 ] = "" ; stringArray0 [ 4 ] = "~ . " ; stringArray0 [ 5 ] = "" ; stringArray0 [ 6 ] = " , is inconsistent with parent , . " ; stringArray0 [ 7 ] = " = + z5f . " ; stringArray0 [ 8 ] = " = + z5f . " ; stringArray0 [ 9 ] = " , was not recognized . " ; HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties ( stringArray0 ) ; HierarchicalProperties hierarchicalProperties1 = hierarchicalProperties0 . getSubProperties ( "~ . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "$" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "$" ; stringArray0 [ 3 ] = "" ; stringArray0 [ 4 ] = "c4Y . " ; stringArray0 [ 5 ] = "f / @cip$" ; HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties ( stringArray0 ) ; HierarchicalProperties hierarchicalProperties1 = hierarchicalProperties0 . getSubProperties ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSeparator ( ) { return mySeparator ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = "^I1dfn@j 1Wiv" ; stringArray0 [ 1 ] = "^I1dfn@j 1Wiv" ; stringArray0 [ 2 ] = "nV | 1" ; stringArray0 [ 3 ] = "nV | 1" ; HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties ( stringArray0 ) ; HierarchicalProperties hierarchicalProperties1 = hierarchicalProperties0 . getSubProperties ( " / Create" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test8 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = "^I1dfn@j 1Wiv" ; stringArray0 [ 1 ] = "^I1dfn@j 1Wiv" ; stringArray0 [ 3 ] = "nV | 1" ; stringArray0 [ 2 ] = " . error . " ; HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties ( stringArray0 ) ; HierarchicalProperties hierarchicalProperties1 = hierarchicalProperties0 . getSubProperties ( " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { String string0 = StringUtils . strValue ( '8' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String strValue ( byte b ) { return Integer . toHexString ( b ) ; }
void test2 ( ) throws Throwable { String string0 = StringUtils . strValue ( ( - 268L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String strValue ( byte b ) { return Integer . toHexString ( b ) ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; String string0 = StringUtils . join ( stringArray0 , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String join ( String [ ] sa , int start , int end ) { StringBuffer sb = new StringBuffer ( ) ; for ( int i = start ; i < = end ; i + + ) { sb . append ( sa [ i ] ) ; } String s = sb . toString ( ) ; return s ; }
void test5 ( ) throws Throwable { String string0 = StringUtils . strValue ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String strValue ( byte b ) { return Integer . toHexString ( b ) ; }
void test6 ( ) throws Throwable { StringUtils stringUtils0 = new StringUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test7 ( ) throws Throwable { String string0 = StringUtils . toCamelCase ( "$EG\" = - i$ | _%V3` , oRSao" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toCamelCase ( String s , boolean capitalizeFirstChar ) { char [ ] inchars = s . toCharArray ( ) ; StringBuffer sb = new StringBuffer ( inchars . length ) ; boolean capNext = capitalizeFirstChar ; for ( int i = 0 ; i < inchars . length ; i + + ) { if ( inchars [ i ] = = '_' | | inchars [ i ] = = ' - ' ) { capNext = true ; } else if ( capNext ) { sb . append ( Character . toUpperCase ( inchars [ i ] ) ) ; capNext = false ; } else { sb . append ( Character . toLowerCase ( inchars [ i ] ) ) ; } } String temp = sb . toString ( ) ; return temp ; }
void test8 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; String string0 = StringUtils . join ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String join ( String [ ] sa , int start , int end ) { StringBuffer sb = new StringBuffer ( ) ; for ( int i = start ; i < = end ; i + + ) { sb . append ( sa [ i ] ) ; } String s = sb . toString ( ) ; return s ; }
void test9 ( ) throws Throwable { String string0 = StringUtils . strValue ( ( byte ) ( - 18 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String strValue ( byte b ) { return Integer . toHexString ( b ) ; }
void test10 ( ) throws Throwable { String string0 = StringUtils . byteToHexString ( ( byte ) ( - 111 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String byteToHexString ( byte b ) { int temp = b ; temp = b & 0x0F ; char c0 = ARRAY_HEX [ temp ] ; temp = b & 0xF0 ; temp = temp > > 4 ; char c1 = ARRAY_HEX [ temp ] ; StringBuffer sb = new StringBuffer ( 2 ) ; sb . append ( c1 ) ; sb . append ( c0 ) ; return sb . toString ( ) ; }
void test11 ( ) throws Throwable { String string0 = StringUtils . toHexString ( false , ( long ) '\uFFFF' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toHexString ( boolean zeroPad , long value , int bytes ) { char [ ] chars = new char [ 2 * bytes ] ; char padChar = ' ' ; if ( zeroPad ) padChar = '0' ; for ( int i = 0 ; i < chars . length ; i + + ) { chars [ i ] = padChar ; } for ( int i = 0 ; i < chars . length ; i + + ) { int index = ( int ) ( value & 0xFL ) ; value = value > > 4 ; chars [ chars . length - 1 - i ] = ARRAY_HEX [ index ] ; } String s = new String ( chars ) ; if ( ! zeroPad ) s = s . trim ( ) ; return s ; }
void test12 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . splitAndTrim ( " , e8jbd^ [ ) ] + ] ] P a@" , " , e8jbd^ [ ) ] + ] ] P a@" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] splitAndTrim ( String s , String delimiters ) { String [ ] sa = split ( s , delimiters ) ; trimStrings ( sa ) ; return sa ; }
void test13 ( ) throws Throwable { String string0 = StringUtils . strValue ( 1467 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String strValue ( byte b ) { return Integer . toHexString ( b ) ; }
void test14 ( ) throws Throwable { StringUtils . InverseStringComparator stringUtils_InverseStringComparator0 = new StringUtils . InverseStringComparator ( ) ; int int0 = stringUtils_InverseStringComparator0 . compare ( "8" , "8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test15 ( ) throws Throwable { StringUtils . StringComparator stringUtils_StringComparator0 = new StringUtils . StringComparator ( ) ; int int0 = stringUtils_StringComparator0 . compare ( " - 268" , "false" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test16 ( ) throws Throwable { List < Object > list0 = StringUtils . splitToList ( "01234A678^ABCDEK" , "91" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test18 ( ) throws Throwable { String string0 = StringUtils . trim ( "8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String trim ( String s ) { if ( null = = s ) return null ; s = s . trim ( ) ; if ( "" . equals ( s ) ) return null ; else return s ; }
void test19 ( ) throws Throwable { String string0 = StringUtils . trim ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String trim ( String s ) { if ( null = = s ) return null ; s = s . trim ( ) ; if ( "" . equals ( s ) ) return null ; else return s ; }
void test20 ( ) throws Throwable { String string0 = StringUtils . trim ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String trim ( String s ) { if ( null = = s ) return null ; s = s . trim ( ) ; if ( "" . equals ( s ) ) return null ; else return s ; }
void test21 ( ) throws Throwable { int int0 = StringUtils . parseString ( " - 268" , ( int ) ( byte ) 0 , "00" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int parseString ( String s , int index , String delim ) { int c = ( int ) s . charAt ( index ) ; while ( - 1 ! = delim . indexOf ( c ) ) { index + + ; c = ( int ) s . charAt ( index ) ; } return index ; }
void test23 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . splitInclude ( "K1f ] * v4 / c : & H | f$ / / " , "ffffffee" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] splitInclude ( String s , String delimiters ) { List l = new ArrayList ( ) ; StringBuffer sb = new StringBuffer ( ) ; int mode = MODE_START ; int i ; char [ ] ca = s . toCharArray ( ) ; for ( i = 0 ; i < ca . length ; i + + ) { switch ( mode ) { case MODE_START : if ( contains ( ca [ i ] , delimiters ) ) { mode = MODE_DELIMITER ; sb . append ( ca [ i ] ) ; } else { mode = MODE_TOKEN ; sb . append ( ca [ i ] ) ; } break ; case MODE_TOKEN : if ( contains ( ca [ i ] , delimiters ) ) { mode = MODE_DELIMITER ; l . add ( sb . toString ( ) ) ; sb = new StringBuffer ( ) ; sb . append ( ca [ i ] ) ; } else { sb . append ( ca [ i ] ) ; } break ; case MODE_DELIMITER : if ( ! contains ( ca [ i ] , delimiters ) ) { mode = MODE_TOKEN ; l . add ( sb . toString ( ) ) ; sb = new StringBuffer ( ) ; sb . append ( ca [ i ] ) ; } else { sb . append ( ca [ i ] ) ; } break ; } } l . add ( sb . toString ( ) ) ; String [ ] sa = new String [ l . size ( ) ] ; for ( i = 0 ; i < sa . length ; i + + ) { String temp = ( String ) l . get ( i ) ; sa [ i ] = temp ; } return sa ; }
void test24 ( ) throws Throwable { String [ ] stringArray0 = StringUtils . splitInclude ( " , e8jbd^ [ ) ] + ] ] P a@" , " , e8jbd^ [ ) ] + ] ] P a@" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] splitInclude ( String s , String delimiters ) { List l = new ArrayList ( ) ; StringBuffer sb = new StringBuffer ( ) ; int mode = MODE_START ; int i ; char [ ] ca = s . toCharArray ( ) ; for ( i = 0 ; i < ca . length ; i + + ) { switch ( mode ) { case MODE_START : if ( contains ( ca [ i ] , delimiters ) ) { mode = MODE_DELIMITER ; sb . append ( ca [ i ] ) ; } else { mode = MODE_TOKEN ; sb . append ( ca [ i ] ) ; } break ; case MODE_TOKEN : if ( contains ( ca [ i ] , delimiters ) ) { mode = MODE_DELIMITER ; l . add ( sb . toString ( ) ) ; sb = new StringBuffer ( ) ; sb . append ( ca [ i ] ) ; } else { sb . append ( ca [ i ] ) ; } break ; case MODE_DELIMITER : if ( ! contains ( ca [ i ] , delimiters ) ) { mode = MODE_TOKEN ; l . add ( sb . toString ( ) ) ; sb = new StringBuffer ( ) ; sb . append ( ca [ i ] ) ; } else { sb . append ( ca [ i ] ) ; } break ; } } l . add ( sb . toString ( ) ) ; String [ ] sa = new String [ l . size ( ) ] ; for ( i = 0 ; i < sa . length ; i + + ) { String temp = ( String ) l . get ( i ) ; sa [ i ] = temp ; } return sa ; }
void test25 ( ) throws Throwable { boolean boolean0 = StringUtils . containsCharacters ( "" , "S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsCharacters ( String s , String delims ) { char [ ] ca = delims . toCharArray ( ) ; for ( int i = 0 ; i < ca . length ; i + + ) { if ( - 1 ! = s . indexOf ( ca [ i ] ) ) return true ; } return false ; }
void test26 ( ) throws Throwable { boolean boolean0 = StringUtils . containsCharacters ( "8" , "8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsCharacters ( String s , String delims ) { char [ ] ca = delims . toCharArray ( ) ; for ( int i = 0 ; i < ca . length ; i + + ) { if ( - 1 ! = s . indexOf ( ca [ i ] ) ) return true ; } return false ; }
void test27 ( ) throws Throwable { char char0 = StringUtils . lastchar ( " - 286" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char lastchar ( String s ) { int len = s . length ( ) - 1 ; if ( len < 0 ) return ( char ) - 1 ; else return s . charAt ( len ) ; }
void test28 ( ) throws Throwable { char char0 = StringUtils . lastchar ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char lastchar ( String s ) { int len = s . length ( ) - 1 ; if ( len < 0 ) return ( char ) - 1 ; else return s . charAt ( len ) ; }
void test29 ( ) throws Throwable { String string0 = StringUtils . shortenString ( "QR" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String shortenString ( String s ) { int len = s . length ( ) - 1 ; if ( len < 0 ) s = "" ; else s = s . substring ( 0 , len ) ; return s ; }
void test30 ( ) throws Throwable { String string0 = StringUtils . shortenString ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String shortenString ( String s ) { int len = s . length ( ) - 1 ; if ( len < 0 ) s = "" ; else s = s . substring ( 0 , len ) ; return s ; }
void test31 ( ) throws Throwable { boolean boolean0 = StringUtils . stringsAreEqual ( " , e8jbd^ [ ) ] + ] ] P a@" , "1467" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean stringsAreEqual ( String s1 , String s2 ) { int result = compareStrings ( s1 , s2 ) ; return 0 = = result ; }
void test32 ( ) throws Throwable { boolean boolean0 = StringUtils . stringsAreEqual ( "false" , "false" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean stringsAreEqual ( String s1 , String s2 ) { int result = compareStrings ( s1 , s2 ) ; return 0 = = result ; }
void test33 ( ) throws Throwable { int int0 = StringUtils . compareStrings ( ( String ) null , "S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareStrings ( String s1 , String s2 ) { if ( s1 = = s2 ) return 0 ; else if ( null = = s1 ) return - 1 ; else if ( null = = s2 ) return 1 ; else return s1 . compareTo ( s2 ) ; }
void test34 ( ) throws Throwable { int int0 = StringUtils . compareStrings ( " - 286" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareStrings ( String s1 , String s2 ) { if ( s1 = = s2 ) return 0 ; else if ( null = = s1 ) return - 1 ; else if ( null = = s2 ) return 1 ; else return s1 . compareTo ( s2 ) ; }
void test35 ( ) throws Throwable { boolean boolean0 = StringUtils . nullEmpty ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean nullEmpty ( String s ) { if ( null = = s ) return true ; s = s . trim ( ) ; return "" . equals ( s ) ; }
void test36 ( ) throws Throwable { boolean boolean0 = StringUtils . nullEmpty ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean nullEmpty ( String s ) { if ( null = = s ) return true ; s = s . trim ( ) ; return "" . equals ( s ) ; }
void test37 ( ) throws Throwable { String string0 = StringUtils . toHexString ( true , ( long ) '\uFFFF' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toHexString ( boolean zeroPad , long value , int bytes ) { char [ ] chars = new char [ 2 * bytes ] ; char padChar = ' ' ; if ( zeroPad ) padChar = '0' ; for ( int i = 0 ; i < chars . length ; i + + ) { chars [ i ] = padChar ; } for ( int i = 0 ; i < chars . length ; i + + ) { int index = ( int ) ( value & 0xFL ) ; value = value > > 4 ; chars [ chars . length - 1 - i ] = ARRAY_HEX [ index ] ; } String s = new String ( chars ) ; if ( ! zeroPad ) s = s . trim ( ) ; return s ; }
void test38 ( ) throws Throwable { boolean boolean0 = StringUtils . different ( "01234A678^ABCDEK" , "91" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean different ( String s1 , String s2 ) { return ! equivalent ( s1 , s2 ) ; }
void test39 ( ) throws Throwable { boolean boolean0 = StringUtils . different ( " - 286" , " - 286" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean different ( String s1 , String s2 ) { return ! equivalent ( s1 , s2 ) ; }
void test40 ( ) throws Throwable { boolean boolean0 = StringUtils . different ( ( String ) null , "$eg\" = I$ | %v3` , orsao" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean different ( String s1 , String s2 ) { return ! equivalent ( s1 , s2 ) ; }
void test41 ( ) throws Throwable { boolean boolean0 = StringUtils . different ( "" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean different ( String s1 , String s2 ) { return ! equivalent ( s1 , s2 ) ; }
void test42 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 13 ] ; byteArray0 [ 5 ] = ( byte ) ( - 95 ) ; String string0 = StringUtils . toHexString ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toHexString ( boolean zeroPad , long value , int bytes ) { char [ ] chars = new char [ 2 * bytes ] ; char padChar = ' ' ; if ( zeroPad ) padChar = '0' ; for ( int i = 0 ; i < chars . length ; i + + ) { chars [ i ] = padChar ; } for ( int i = 0 ; i < chars . length ; i + + ) { int index = ( int ) ( value & 0xFL ) ; value = value > > 4 ; chars [ chars . length - 1 - i ] = ARRAY_HEX [ index ] ; } String s = new String ( chars ) ; if ( ! zeroPad ) s = s . trim ( ) ; return s ; }
void test43 ( ) throws Throwable { String string0 = StringUtils . toHexString ( false , ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toHexString ( boolean zeroPad , long value , int bytes ) { char [ ] chars = new char [ 2 * bytes ] ; char padChar = ' ' ; if ( zeroPad ) padChar = '0' ; for ( int i = 0 ; i < chars . length ; i + + ) { chars [ i ] = padChar ; } for ( int i = 0 ; i < chars . length ; i + + ) { int index = ( int ) ( value & 0xFL ) ; value = value > > 4 ; chars [ chars . length - 1 - i ] = ARRAY_HEX [ index ] ; } String s = new String ( chars ) ; if ( ! zeroPad ) s = s . trim ( ) ; return s ; }
void test1 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 12 ] ; MethodThread methodThread0 = new MethodThread ( ( Object ) null , ( Method ) null , objectArray0 ) ; String string0 = methodThread0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 5 ] ; SimpleSet simpleSet0 = new SimpleSet ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test0 ( ) throws Throwable { ArraySorter arraySorter0 = new ArraySorter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { StringCompareMethod stringCompareMethod0 = new StringCompareMethod ( ) ; ArraySorter . sort ( ( Object [ ] ) null , ( CompareMethod ) stringCompareMethod0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ascending ( ) { return SORT_ASCENDING = = myMode ; }
void test2 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 1 ] ; IntegerCompareMethod integerCompareMethod0 = new IntegerCompareMethod ( ) ; ArraySorter . sort ( objectArray0 , ( CompareMethod ) integerCompareMethod0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ascending ( ) { return SORT_ASCENDING = = myMode ; }
void test3 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 6 ] ; objectArray0 [ 2 ] = ( Object ) ( - 13 ) ; objectArray0 [ 3 ] = ( Object ) ( - 13 ) ; objectArray0 [ 0 ] = ( Object ) ( - 13 ) ; objectArray0 [ 1 ] = ( Object ) 1 ; objectArray0 [ 4 ] = ( Object ) 1 ; objectArray0 [ 5 ] = ( Object ) ( - 13 ) ; IntegerCompareMethod integerCompareMethod0 = new IntegerCompareMethod ( ) ; ArraySorter . sort ( objectArray0 , ( CompareMethod ) integerCompareMethod0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ascending ( ) { return SORT_ASCENDING = = myMode ; }
void test3 ( ) throws Throwable { Class < ? > class0 = CharBuffer . class ; Thread thread0 = ProcessUtils . thread ( "TA . R | & `u9 & 5j3JWf4\"N" , ( Class ) class0 , "TA . R | & `u9 & 5j3JWf4\"N" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return myId ; }
void test7 ( ) throws Throwable { ProcessUtils processUtils0 = new ProcessUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String minimalPath ( ) { String windir = System . getenv ( ENV_WIN32_WINDIR ) ; String path = windir + "\\" + ENV_WIN32_SYSTEM ; path = path + " ; " + windir ; String javaHome = System . getProperty ( "java . home" ) ; path = javaHome + "\\bin" + " ; " + path ; return path ; }
void test10 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; properties0 . setProperty ( "TA . R | & `u9 & 5j3JWf4\"N" , "TA . R | & `u9 & 5j3JWf4\"N" ) ; ProcessUtils . updateEnvironment ( ( Map ) properties0 , properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test2 ( ) throws Throwable { StringCompareMethod stringCompareMethod0 = new StringCompareMethod ( ) ; int int0 = stringCompareMethod0 . compare ( ( Object ) "M" , ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ascending ( ) { return SORT_ASCENDING = = myMode ; }
void test3 ( ) throws Throwable { StringCompareMethod stringCompareMethod0 = new StringCompareMethod ( 0 ) ; int int0 = stringCompareMethod0 . compare ( ( Object ) " > < = " , ( Object ) " > < = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ascending ( ) { return SORT_ASCENDING = = myMode ; }
void test4 ( ) throws Throwable { StringCompareMethod stringCompareMethod0 = new StringCompareMethod ( ( - 1 ) ) ; int int0 = stringCompareMethod0 . compare ( ( Object ) "M" , ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ascending ( ) { return SORT_ASCENDING = = myMode ; }
void test5 ( ) throws Throwable { StringCompareMethod stringCompareMethod0 = new StringCompareMethod ( 0 ) ; int int0 = stringCompareMethod0 . compare ( ( Object ) "" , ( Object ) "Yl } UH ( t^H } > xr" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ascending ( ) { return SORT_ASCENDING = = myMode ; }
void test6 ( ) throws Throwable { StringCompareMethod stringCompareMethod0 = new StringCompareMethod ( 4 ) ; int int0 = stringCompareMethod0 . compare ( ( Object ) "" , ( Object ) "Yl } UH ( t^H } > xr" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ascending ( ) { return SORT_ASCENDING = = myMode ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; HashMap < Object , Object > hashMap0 = CollectionUtils . toHashMap ( ( Object [ ] ) stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 7 ] ; HashSet < Object > hashSet0 = CollectionUtils . toHashSet ( ( Object [ ] ) stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test2 ( ) throws Throwable { CollectionUtils collectionUtils0 = new CollectionUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; ArrayList < Object > arrayList0 = CollectionUtils . toArrayList ( ( Object [ ] ) stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; IdentityHashSet identityHashSet0 = CollectionUtils . toIdentityHashSet ( ( Object [ ] ) stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void dump ( Map map , PrintWriter out ) { String [ ] [ ] values = toSortedList ( map ) ; for ( int i = 0 ; i < values . length ; i + + ) { out . println ( values [ i ] [ 0 ] + " = " + values [ i ] [ 1 ] ) ; } }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; Properties properties0 = CollectionUtils . buildProperties ( stringArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 0 ] = "null rot" ; stringArray0 [ 1 ] = "null rot" ; stringArray0 [ 2 ] = "null rot" ; stringArray0 [ 3 ] = "null rot" ; stringArray0 [ 4 ] = "null rot" ; stringArray0 [ 5 ] = "null rot" ; stringArray0 [ 7 ] = "G9 < ^ - / C" ; Properties properties0 = CollectionUtils . buildProperties ( stringArray0 , "G9 < ^ - / C" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "'bPDk\"" ; stringArray0 [ 1 ] = "'bPDk\"" ; Properties properties0 = CollectionUtils . buildProperties ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test8 ( ) throws Throwable { Properties properties0 = CollectionUtils . buildProperties ( ( String [ ] [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test9 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "'bPDk\"" ; stringArray0 [ 1 ] = "'bPDk\"" ; String [ ] [ ] stringArray1 = new String [ 10 ] [ 2 ] ; stringArray1 [ 0 ] = stringArray0 ; stringArray1 [ 1 ] = stringArray0 ; stringArray1 [ 2 ] = stringArray0 ; stringArray1 [ 3 ] = stringArray0 ; stringArray1 [ 4 ] = stringArray0 ; stringArray1 [ 5 ] = stringArray0 ; stringArray1 [ 6 ] = stringArray0 ; stringArray1 [ 7 ] = stringArray0 ; stringArray1 [ 8 ] = stringArray0 ; stringArray1 [ 9 ] = stringArray0 ; Properties properties0 = CollectionUtils . buildProperties ( stringArray1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test11 ( ) throws Throwable { Stack < String > stack0 = new Stack < String > ( ) ; String [ ] stringArray0 = new String [ 14 ] ; CollectionUtils . addAll ( ( List ) stack0 , stringArray0 ) ; String string0 = CollectionUtils . stackToString ( ( Stack ) stack0 , " ! Dd^O { f ! t" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String stackToString ( Stack stack , String separator , boolean endWithSeparator ) { StringBuffer sb = new StringBuffer ( ) ; if ( null = = separator ) separator = " , " ; int size = stack . size ( ) ; for ( int i = 0 ; i < size ; i + + ) { if ( i > 0 ) sb . append ( separator ) ; sb . append ( stack . get ( i ) ) ; } if ( size > 0 & & endWithSeparator ) sb . append ( separator ) ; return sb . toString ( ) ; }
void test12 ( ) throws Throwable { List < Object > list0 = CollectionUtils . buildPropertyNames ( ( String [ ] [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test13 ( ) throws Throwable { Stack < Integer > stack0 = new Stack < Integer > ( ) ; String string0 = CollectionUtils . stackToString ( ( Stack ) stack0 , ( String ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String stackToString ( Stack stack , String separator , boolean endWithSeparator ) { StringBuffer sb = new StringBuffer ( ) ; if ( null = = separator ) separator = " , " ; int size = stack . size ( ) ; for ( int i = 0 ; i < size ; i + + ) { if ( i > 0 ) sb . append ( separator ) ; sb . append ( stack . get ( i ) ) ; } if ( size > 0 & & endWithSeparator ) sb . append ( separator ) ; return sb . toString ( ) ; }
void test14 ( ) throws Throwable { Stack < String > stack0 = new Stack < String > ( ) ; stack0 . add ( "wE" ) ; String string0 = CollectionUtils . stackToString ( ( Stack ) stack0 , "wE" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String stackToString ( Stack stack , String separator , boolean endWithSeparator ) { StringBuffer sb = new StringBuffer ( ) ; if ( null = = separator ) separator = " , " ; int size = stack . size ( ) ; for ( int i = 0 ; i < size ; i + + ) { if ( i > 0 ) sb . append ( separator ) ; sb . append ( stack . get ( i ) ) ; } if ( size > 0 & & endWithSeparator ) sb . append ( separator ) ; return sb . toString ( ) ; }
void test15 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 24 ] [ 4 ] ; Map < Object , Object > map0 = CollectionUtils . buildMap ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test16 ( ) throws Throwable { Stack < String > stack0 = new Stack < String > ( ) ; CollectionUtils . dump ( ( Collection ) stack0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test18 ( ) throws Throwable { int int0 = CollectionUtils . compareInts ( 1369 , 1369 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareInts ( int i1 , int i2 ) { if ( i1 < i2 ) return - 1 ; else if ( i1 > i2 ) return 1 ; else return 0 ; }
void test19 ( ) throws Throwable { int int0 = CollectionUtils . compareInts ( ( - 15 ) , 846 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareInts ( int i1 , int i2 ) { if ( i1 < i2 ) return - 1 ; else if ( i1 > i2 ) return 1 ; else return 0 ; }
void test20 ( ) throws Throwable { int int0 = CollectionUtils . compareInts ( 15 , ( - 1082 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareInts ( int i1 , int i2 ) { if ( i1 < i2 ) return - 1 ; else if ( i1 > i2 ) return 1 ; else return 0 ; }
void test22 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; CollectionUtils . sortDescending ( ( List ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test24 ( ) throws Throwable { String [ ] [ ] stringArray0 = new String [ 2 ] [ 6 ] ; String [ ] stringArray1 = new String [ 3 ] ; stringArray1 [ 0 ] = " , is not one of the child nodes of " ; stringArray0 [ 0 ] = stringArray1 ; List < Object > list0 = CollectionUtils . buildPropertyNames ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void sortDescending ( List list ) { if ( list . size ( ) < 1 ) return ; Comparator comp = null ; Object o = list . get ( 0 ) ; if ( o instanceof Integer ) comp = INT_DESCENDING ; else if ( o instanceof String ) comp = STRING_DESCENDING ; else { String msg = "Unsupported type : " + o . getClass ( ) ; throw new LTSRuntimeException ( msg ) ; } Collections . sort ( list , comp ) ; }
void test0 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; DepthFirstTreeEnumeration depthFirstTreeEnumeration0 = new DepthFirstTreeEnumeration ( treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( Object element ) { if ( ! myList . contains ( element ) ) return ; int index = myList . indexOf ( element ) ; myList . remove ( index ) ; ListChannelEvent event = new ListChannelEvent ( ListChannelEvent . EVENT_REMOVE , this , index ) ; getHelper ( ) . fire ( event ) ; }
void test1 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; DepthFirstTreeEnumeration depthFirstTreeEnumeration0 = new DepthFirstTreeEnumeration ( treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String next ( ) throws LTSException , IOException { int state = STATE_START ; StringBuffer buf = new StringBuffer ( ) ; String tag = null ; int c = myReader . read ( ) ; while ( - 1 ! = c & & null = = tag ) { switch ( c ) { case CHAR_START : state = processStart ( state ) ; c = myReader . read ( ) ; break ; case CHAR_START2 : state = processStart2 ( state ) ; c = myReader . read ( ) ; break ; case CHAR_NEWLINE : processNewline ( state ) ; c = myReader . read ( ) ; break ; case CHAR_CARRIAGE_RETURN : processCarriageReturn ( state ) ; c = myReader . read ( ) ; break ; case CHAR_END : { TransResult result = processEnd ( state , buf ) ; tag = result . tag ; state = result . newstate ; c = result . nextchar ; break ; } default : processDefault ( state , c , buf ) ; c = myReader . read ( ) ; break ; } } return tag ; }
void test2 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; DepthFirstTreeEnumeration depthFirstTreeEnumeration0 = new DepthFirstTreeEnumeration ( treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) throws IOException { boolean thereIsAnotherToken = false ; / / / / if definitely know whether another token exists , then just return / / the result and be done with it / / switch ( myState ) { case STATE_START : case STATE_BEFORE_TOKEN : thereIsAnotherToken = advance ( ) ; break ; case STATE_AFTER_TOKEN : case STATE_MATCH_STOP : thereIsAnotherToken = true ; break ; case STATE_STOP : thereIsAnotherToken = false ; break ; } return thereIsAnotherToken ; }
void test3 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; DepthFirstTreeEnumeration depthFirstTreeEnumeration0 = new DepthFirstTreeEnumeration ( treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) throws IOException { boolean thereIsAnotherToken = false ; / / / / if definitely know whether another token exists , then just return / / the result and be done with it / / switch ( myState ) { case STATE_START : case STATE_BEFORE_TOKEN : thereIsAnotherToken = advance ( ) ; break ; case STATE_AFTER_TOKEN : case STATE_MATCH_STOP : thereIsAnotherToken = true ; break ; case STATE_STOP : thereIsAnotherToken = false ; break ; } return thereIsAnotherToken ; }
void test1 ( ) throws Throwable { String string0 = DateUtil . toTimeString ( 7200L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toTimeString ( long time , boolean relativeToToday ) { if ( relativeToToday ) time = timeToAbsolute ( time ) ; return ourTimeFormat . format ( time ) ; }
void test2 ( ) throws Throwable { long long0 = DateUtil . startOfYesterdayTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long startOfYesterdayTime ( ) { return startOfYesterday ( ) . getTime ( ) ; }
void test3 ( ) throws Throwable { long long0 = DateUtil . startOfTomorrow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long startOfTomorrow ( ) { long time = startOfTodayTime ( ) ; time = time + MSEC_DAY ; return time ; }
void test4 ( ) throws Throwable { long long0 = DateUtil . combineDateAndTime ( 1L , 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long combineDateAndTime ( long date , long time ) { Calendar dateCal = Calendar . getInstance ( ) ; dateCal . setTimeInMillis ( date ) ; Calendar timeCal = Calendar . getInstance ( ) ; timeCal . setTimeInMillis ( time ) ; dateCal . set ( Calendar . HOUR_OF_DAY , timeCal . get ( Calendar . HOUR_OF_DAY ) ) ; dateCal . set ( Calendar . MINUTE , timeCal . get ( Calendar . MINUTE ) ) ; dateCal . set ( Calendar . SECOND , timeCal . get ( Calendar . SECOND ) ) ; return dateCal . getTimeInMillis ( ) ; }
void test5 ( ) throws Throwable { long long0 = DateUtil . getToday ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getToday ( ) { return getStartOfToday ( ) ; }
void test6 ( ) throws Throwable { long long0 = DateUtil . getYesterday ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getYesterday ( ) { return getStartOfYesterday ( ) ; }
void test8 ( ) throws Throwable { DateUtil dateUtil0 = new DateUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long startOfTodayTime ( ) { return startOfToday ( ) . getTime ( ) ; }
void test9 ( ) throws Throwable { long long0 = DateUtil . clearDate ( 1054L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long clearDate ( long date ) { Calendar cal = Calendar . getInstance ( ) ; cal . setTimeInMillis ( date ) ; cal . set ( Calendar . YEAR , 0 ) ; cal . set ( Calendar . MONTH , 0 ) ; cal . set ( Calendar . DAY_OF_MONTH , 0 ) ; return cal . getTimeInMillis ( ) ; }
void test10 ( ) throws Throwable { long long0 = DateUtil . clearTime ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long clearTime ( long date ) { Calendar cal = Calendar . getInstance ( ) ; cal . setTimeInMillis ( date ) ; cal . set ( Calendar . HOUR_OF_DAY , 0 ) ; cal . set ( Calendar . MINUTE , 0 ) ; cal . set ( Calendar . SECOND , 0 ) ; cal . set ( Calendar . MILLISECOND , 0 ) ; return cal . getTimeInMillis ( ) ; }
void test11 ( ) throws Throwable { long long0 = DateUtil . setMidnight ( ( - 90000000L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setMidnight ( Date d ) { Calendar cal = Calendar . getInstance ( ) ; cal . setTime ( d ) ; cal . set ( Calendar . HOUR_OF_DAY , 0 ) ; cal . set ( Calendar . MINUTE , 0 ) ; cal . set ( Calendar . SECOND , 0 ) ; cal . set ( Calendar . MILLISECOND , 0 ) ; Date temp = cal . getTime ( ) ; d . setTime ( temp . getTime ( ) ) ; }
void test12 ( ) throws Throwable { long long0 = DateUtil . alignToPeriod ( ( - 1L ) , 172800L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long alignToPeriod ( long time , long period ) { long remainder = time % period ; time = time - remainder ; return time ; }
void test13 ( ) throws Throwable { long long0 = DateUtil . getTomorrow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTomorrow ( ) { return getStartOfTomorrow ( ) ; }
void test14 ( ) throws Throwable { long long0 = DateUtil . startOfNextDay ( ( long ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long startOfNextDay ( long date ) { long time = startOfDay ( date ) ; time = time + MSEC_DAY ; return time ; }
void test15 ( ) throws Throwable { String string0 = DateUtil . secondsToPeriodString ( ( - 12L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String secondsToPeriodString ( long msec ) { Calendar cal = GregorianCalendar . getInstance ( ) ; long temp = msec ; int millisec = ( int ) temp % 1000 ; cal . set ( Calendar . MILLISECOND , millisec ) ; temp = temp / 1000 ; int sec = ( int ) temp % 60 ; cal . set ( Calendar . SECOND , sec ) ; temp = temp / 60 ; int min = ( int ) temp % 60 ; cal . set ( Calendar . MINUTE , min ) ; temp = temp / 60 ; int hour = ( int ) temp % 24 ; cal . set ( Calendar . HOUR_OF_DAY , hour ) ; cal . set ( Calendar . YEAR , 0 ) ; cal . set ( Calendar . MONTH , 0 ) ; cal . set ( Calendar . DAY_OF_MONTH , 0 ) ; String s = UTC_TIME_ONLY_FORMAT . format ( cal . getTimeInMillis ( ) ) ; return s ; }
void test16 ( ) throws Throwable { long long0 = DateUtil . midnightMsec ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long midnightMsec ( ) { Date d = new Date ( ) ; setMidnight ( d ) ; return d . getTime ( ) ; }
void test21 ( ) throws Throwable { long long0 = DateUtil . parseTimeString ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long parseTimeString ( String s ) { if ( null = = s ) return - 1 ; long time = - 1 ; for ( SimpleDateFormat format : COMMON_TIME_FORMATS ) { try { time = format . parse ( s ) . getTime ( ) ; break ; } catch ( ParseException e ) { / / / / ignore exception and try next format / / } } return time ; }
void test22 ( ) throws Throwable { Long long0 = DateUtil . parseDelay ( " - 362 sec" , ( - 362L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long parseDelay ( String s , long defaultUnitsMsec ) { s = StringUtils . trim ( s ) ; if ( null = = s ) return null ; s = s . toLowerCase ( ) ; String [ ] fields = specialSplit ( s ) ; if ( fields . length < 1 ) return null ; String delayString = fields [ 0 ] ; if ( fields . length > 1 ) defaultUnitsMsec = parseUnits ( fields [ 1 ] ) ; TimeResults results = parseDelayTime ( delayString ) ; long time = 0 ; if ( results . ambiguous ) { time = results . minutes * defaultUnitsMsec ; } else { time = results . hours * SEC_PER_HOUR ; time = time + ( results . minutes * SEC_PER_MINUTE ) ; time = time + ( results . seconds * 1000 ) ; } return time ; }
void test25 ( ) throws Throwable { Long long0 = DateUtil . parseDelay ( "0" , ( - 2L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long parseDelay ( String s , long defaultUnitsMsec ) { s = StringUtils . trim ( s ) ; if ( null = = s ) return null ; s = s . toLowerCase ( ) ; String [ ] fields = specialSplit ( s ) ; if ( fields . length < 1 ) return null ; String delayString = fields [ 0 ] ; if ( fields . length > 1 ) defaultUnitsMsec = parseUnits ( fields [ 1 ] ) ; TimeResults results = parseDelayTime ( delayString ) ; long time = 0 ; if ( results . ambiguous ) { time = results . minutes * defaultUnitsMsec ; } else { time = results . hours * SEC_PER_HOUR ; time = time + ( results . minutes * SEC_PER_MINUTE ) ; time = time + ( results . seconds * 1000 ) ; } return time ; }
void test26 ( ) throws Throwable { Long long0 = DateUtil . parseDelay ( "0h" , 1324L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long parseDelay ( String s , long defaultUnitsMsec ) { s = StringUtils . trim ( s ) ; if ( null = = s ) return null ; s = s . toLowerCase ( ) ; String [ ] fields = specialSplit ( s ) ; if ( fields . length < 1 ) return null ; String delayString = fields [ 0 ] ; if ( fields . length > 1 ) defaultUnitsMsec = parseUnits ( fields [ 1 ] ) ; TimeResults results = parseDelayTime ( delayString ) ; long time = 0 ; if ( results . ambiguous ) { time = results . minutes * defaultUnitsMsec ; } else { time = results . hours * SEC_PER_HOUR ; time = time + ( results . minutes * SEC_PER_MINUTE ) ; time = time + ( results . seconds * 1000 ) ; } return time ; }
void test28 ( ) throws Throwable { Long long0 = DateUtil . parseDelay ( "79B3T > _ULXP } { fy" , 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Long parseDelay ( String s , long defaultUnitsMsec ) { s = StringUtils . trim ( s ) ; if ( null = = s ) return null ; s = s . toLowerCase ( ) ; String [ ] fields = specialSplit ( s ) ; if ( fields . length < 1 ) return null ; String delayString = fields [ 0 ] ; if ( fields . length > 1 ) defaultUnitsMsec = parseUnits ( fields [ 1 ] ) ; TimeResults results = parseDelayTime ( delayString ) ; long time = 0 ; if ( results . ambiguous ) { time = results . minutes * defaultUnitsMsec ; } else { time = results . hours * SEC_PER_HOUR ; time = time + ( results . minutes * SEC_PER_MINUTE ) ; time = time + ( results . seconds * 1000 ) ; } return time ; }
void test30 ( ) throws Throwable { String string0 = DateUtil . toDelayString ( ( - 362L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toDelayString ( long period ) { StringBuffer sb = new StringBuffer ( ) ; if ( period > SEC_PER_TWO_DAYS ) { int days = ( int ) ( period % SEC_PER_DAY ) ; sb . append ( days ) ; sb . append ( " days" ) ; } else if ( period > SEC_PER_TWO_HOURS ) { int hours = ( int ) ( period % SEC_PER_HOUR ) ; sb . append ( hours ) ; sb . append ( " hours" ) ; } else if ( period > SEC_PER_TWO_MINUTES ) { int minutes = ( int ) ( period % SEC_PER_TWO_MINUTES ) ; sb . append ( minutes ) ; sb . append ( " mins" ) ; } else { int sec = ( int ) ( period % 1000 ) ; sb . append ( sec ) ; sb . append ( " sec" ) ; } return sb . toString ( ) ; }
void test31 ( ) throws Throwable { String string0 = DateUtil . toDelayString ( 86400030L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toDelayString ( long period ) { StringBuffer sb = new StringBuffer ( ) ; if ( period > SEC_PER_TWO_DAYS ) { int days = ( int ) ( period % SEC_PER_DAY ) ; sb . append ( days ) ; sb . append ( " days" ) ; } else if ( period > SEC_PER_TWO_HOURS ) { int hours = ( int ) ( period % SEC_PER_HOUR ) ; sb . append ( hours ) ; sb . append ( " hours" ) ; } else if ( period > SEC_PER_TWO_MINUTES ) { int minutes = ( int ) ( period % SEC_PER_TWO_MINUTES ) ; sb . append ( minutes ) ; sb . append ( " mins" ) ; } else { int sec = ( int ) ( period % 1000 ) ; sb . append ( sec ) ; sb . append ( " sec" ) ; } return sb . toString ( ) ; }
void test32 ( ) throws Throwable { String string0 = DateUtil . toDelayString ( 7215L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toDelayString ( long period ) { StringBuffer sb = new StringBuffer ( ) ; if ( period > SEC_PER_TWO_DAYS ) { int days = ( int ) ( period % SEC_PER_DAY ) ; sb . append ( days ) ; sb . append ( " days" ) ; } else if ( period > SEC_PER_TWO_HOURS ) { int hours = ( int ) ( period % SEC_PER_HOUR ) ; sb . append ( hours ) ; sb . append ( " hours" ) ; } else if ( period > SEC_PER_TWO_MINUTES ) { int minutes = ( int ) ( period % SEC_PER_TWO_MINUTES ) ; sb . append ( minutes ) ; sb . append ( " mins" ) ; } else { int sec = ( int ) ( period % 1000 ) ; sb . append ( sec ) ; sb . append ( " sec" ) ; } return sb . toString ( ) ; }
void test33 ( ) throws Throwable { String string0 = DateUtil . toDelayString ( 788L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toDelayString ( long period ) { StringBuffer sb = new StringBuffer ( ) ; if ( period > SEC_PER_TWO_DAYS ) { int days = ( int ) ( period % SEC_PER_DAY ) ; sb . append ( days ) ; sb . append ( " days" ) ; } else if ( period > SEC_PER_TWO_HOURS ) { int hours = ( int ) ( period % SEC_PER_HOUR ) ; sb . append ( hours ) ; sb . append ( " hours" ) ; } else if ( period > SEC_PER_TWO_MINUTES ) { int minutes = ( int ) ( period % SEC_PER_TWO_MINUTES ) ; sb . append ( minutes ) ; sb . append ( " mins" ) ; } else { int sec = ( int ) ( period % 1000 ) ; sb . append ( sec ) ; sb . append ( " sec" ) ; } return sb . toString ( ) ; }
void test34 ( ) throws Throwable { String string0 = DateUtil . zeroPad ( 1739 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String zeroPad ( int value ) { StringBuilder sb = new StringBuilder ( ) ; if ( value < 10 ) sb . append ( "0" ) ; sb . append ( value ) ; return sb . toString ( ) ; }
void test35 ( ) throws Throwable { String string0 = DateUtil . zeroPad ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String zeroPad ( int value ) { StringBuilder sb = new StringBuilder ( ) ; if ( value < 10 ) sb . append ( "0" ) ; sb . append ( value ) ; return sb . toString ( ) ; }
void test36 ( ) throws Throwable { String string0 = DateUtil . toTimeString ( 0L , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toTimeString ( long time , boolean relativeToToday ) { if ( relativeToToday ) time = timeToAbsolute ( time ) ; return ourTimeFormat . format ( time ) ; }
void test37 ( ) throws Throwable { long long0 = DateUtil . timeStringToTime ( "`" , 7215L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long timeStringToTime ( String s , long relativeTime ) { s = StringUtils . trim ( s ) ; String [ ] fields = s . split ( " : " ) ; int seconds = 0 ; if ( fields . length > 2 ) { seconds = Integer . parseInt ( fields [ 2 ] ) ; } int minutes = 0 ; if ( fields . length > 1 ) { minutes = Integer . parseInt ( fields [ 1 ] ) ; } int hours = 0 ; if ( fields . length > 1 ) { hours = Integer . parseInt ( fields [ 0 ] ) ; } Calendar cal = Calendar . getInstance ( ) ; cal . setTimeInMillis ( relativeTime ) ; cal . set ( Calendar . HOUR_OF_DAY , hours ) ; cal . set ( Calendar . MINUTE , minutes ) ; cal . set ( Calendar . SECOND , seconds ) ; return cal . getTimeInMillis ( ) ; }
void test38 ( ) throws Throwable { long long0 = DateUtil . periodStringToSeconds ( " * hh : mmss aa" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long periodStringToSeconds ( String s ) { try { s = StringUtils . trim ( s ) ; if ( null = = s ) return - 1 ; long time = UTC_TIME_ONLY_FORMAT . parse ( s ) . getTime ( ) ; Calendar cal = Calendar . getInstance ( ) ; cal . setTimeInMillis ( time ) ; long val = 0 ; val + = cal . get ( Calendar . HOUR_OF_DAY ) ; val * = 60 ; val + = cal . get ( Calendar . MINUTE ) ; val * = 60 ; val + = cal . get ( Calendar . SECOND ) ; val * = 1000 ; val + = cal . get ( Calendar . MILLISECOND ) ; return val ; } catch ( ParseException e ) { return - 1 ; } }
void test39 ( ) throws Throwable { long long0 = DateUtil . periodStringToSeconds ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long periodStringToSeconds ( String s ) { try { s = StringUtils . trim ( s ) ; if ( null = = s ) return - 1 ; long time = UTC_TIME_ONLY_FORMAT . parse ( s ) . getTime ( ) ; Calendar cal = Calendar . getInstance ( ) ; cal . setTimeInMillis ( time ) ; long val = 0 ; val + = cal . get ( Calendar . HOUR_OF_DAY ) ; val * = 60 ; val + = cal . get ( Calendar . MINUTE ) ; val * = 60 ; val + = cal . get ( Calendar . SECOND ) ; val * = 1000 ; val + = cal . get ( Calendar . MILLISECOND ) ; return val ; } catch ( ParseException e ) { return - 1 ; } }
void test7 ( ) throws Throwable { String string0 = MultiResourceBundle . toSlashClassName ( "0$ ] 2_At ? D . Y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toSlashClassName ( String name ) { char [ ] nameChars = name . toCharArray ( ) ; StringBuffer sb = new StringBuffer ( nameChars . length ) ; for ( int i = 0 ; i < nameChars . length ; i + + ) { if ( ' . ' = = nameChars [ i ] ) sb . append ( ' / ' ) ; else sb . append ( nameChars [ i ] ) ; } return sb . toString ( ) ; }
void test9 ( ) throws Throwable { MultiResourceBundle multiResourceBundle0 = new MultiResourceBundle ( ) ; List < Object > list0 = multiResourceBundle0 . getKeysAsList ( ) ; multiResourceBundle0 . addAll ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test13 ( ) throws Throwable { MultiResourceBundle multiResourceBundle0 = new MultiResourceBundle ( ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; PrintWriter printWriter0 = new PrintWriter ( ( OutputStream ) byteArrayOutputStream0 ) ; multiResourceBundle0 . writeResourceList ( printWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { CaselessMap caselessMap0 = new CaselessMap ( ) ; Object object0 = caselessMap0 . remove ( ( Object ) "" ) ; caselessMap0 . put ( "" , object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { CaselessMap caselessMap0 = new CaselessMap ( ) ; Object object0 = caselessMap0 . get ( " . ] 7q ( #U`xdJ R~mU" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream get ( String name ) throws LTSException , IOException { InputStream istream ; if ( ! entryExists ( name ) ) return null ; if ( ! archiveHasBeenExtracted ( ) ) istream = basicGet ( name ) ; else { File f = new File ( getTempDir ( ) , name ) ; try { istream = new FileInputStream ( f ) ; } catch ( FileNotFoundException e ) { istream = null ; } } return istream ; }
void test2 ( ) throws Throwable { CaselessMap caselessMap0 = new CaselessMap ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test3 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 10 ] ; CaselessMap caselessMap0 = new CaselessMap ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test0 ( ) throws Throwable { CollectionHolder < Integer > collectionHolder0 = new CollectionHolder < Integer > ( ( Collection ) null ) ; collectionHolder0 . addListener ( ( CollectionListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test1 ( ) throws Throwable { CollectionHolder < String > collectionHolder0 = new CollectionHolder < String > ( ) ; CollectionHolder < Object > collectionHolder1 = new CollectionHolder < Object > ( ( Collection ) collectionHolder0 ) ; boolean boolean0 = collectionHolder1 . contains ( ( Object ) collectionHolder1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( Object o ) { return this . contentSet . containsKey ( o ) ; }
void test2 ( ) throws Throwable { CollectionHolder < NotifyingCollection < Integer > > collectionHolder0 = new CollectionHolder < NotifyingCollection < Integer > > ( ) ; boolean boolean0 = collectionHolder0 . containsAll ( ( Collection < ? > ) collectionHolder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsAll ( Collection < ? > c ) { return myData . containsAll ( c ) ; }
void test3 ( ) throws Throwable { CollectionHolder < NotifyingCollection < Integer > > collectionHolder0 = new CollectionHolder < NotifyingCollection < Integer > > ( ) ; collectionHolder0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test4 ( ) throws Throwable { CollectionHolder < NotifyingCollection < Integer > > collectionHolder0 = new CollectionHolder < NotifyingCollection < Integer > > ( ) ; CollectionHolder < Object > collectionHolder1 = new CollectionHolder < Object > ( ( Collection ) collectionHolder0 ) ; boolean boolean0 = collectionHolder1 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test5 ( ) throws Throwable { CollectionHolder < Integer > collectionHolder0 = new CollectionHolder < Integer > ( ( Collection ) null ) ; CollectionHolder < String > collectionHolder1 = new CollectionHolder < String > ( ( Collection ) collectionHolder0 ) ; String [ ] stringArray0 = new String [ 1 ] ; String [ ] stringArray1 = collectionHolder1 . toArray ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] toArray ( ) { return myData . toArray ( ) ; }
void test6 ( ) throws Throwable { CollectionHolder < String > collectionHolder0 = new CollectionHolder < String > ( ) ; Object [ ] objectArray0 = collectionHolder0 . toArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] toArray ( ) { return myData . toArray ( ) ; }
void test7 ( ) throws Throwable { CollectionHolder < Integer > collectionHolder0 = new CollectionHolder < Integer > ( ( Collection ) null ) ; boolean boolean0 = collectionHolder0 . removeListener ( ( CollectionListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeListener ( Object o ) { if ( null = = o ) return false ; else return this . listeners . remove ( o ) ; }
void test8 ( ) throws Throwable { CollectionHolder < NotifyingCollection < Integer > > collectionHolder0 = new CollectionHolder < NotifyingCollection < Integer > > ( ) ; CollectionHolder < Integer > collectionHolder1 = new CollectionHolder < Integer > ( ( Collection ) collectionHolder0 ) ; collectionHolder0 . add ( ( NotifyingCollection < Integer > ) collectionHolder1 ) ; CollectionHolder < Object > collectionHolder2 = new CollectionHolder < Object > ( ( Collection ) collectionHolder0 ) ; collectionHolder0 . add ( ( NotifyingCollection < Integer > ) collectionHolder1 ) ; collectionHolder2 . addAll ( ( Collection < ? > ) collectionHolder0 ) ; boolean boolean0 = collectionHolder2 . retainAll ( ( Collection < ? > ) collectionHolder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test9 ( ) throws Throwable { CollectionHolder < NotifyingCollection < Integer > > collectionHolder0 = new CollectionHolder < NotifyingCollection < Integer > > ( ) ; CollectionHolder < Integer > collectionHolder1 = new CollectionHolder < Integer > ( ( Collection ) collectionHolder0 ) ; collectionHolder0 . add ( ( NotifyingCollection < Integer > ) collectionHolder1 ) ; CollectionHolder < Object > collectionHolder2 = new CollectionHolder < Object > ( ( Collection ) collectionHolder0 ) ; boolean boolean0 = collectionHolder2 . retainAll ( ( Collection < ? > ) collectionHolder0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test10 ( ) throws Throwable { CollectionHolder < Object > collectionHolder0 = new CollectionHolder < Object > ( ) ; CollectionHolder < CollectionHolder < String > > collectionHolder1 = new CollectionHolder < CollectionHolder < String > > ( ( Collection ) collectionHolder0 ) ; CollectionHolder < String > collectionHolder2 = new CollectionHolder < String > ( ) ; CollectionHolder < NotifyingCollection < String > > collectionHolder3 = new CollectionHolder < NotifyingCollection < String > > ( ( Collection ) collectionHolder1 ) ; collectionHolder3 . add ( ( NotifyingCollection < String > ) collectionHolder2 ) ; boolean boolean0 = collectionHolder1 . removeAll ( ( Collection < ? > ) collectionHolder3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test11 ( ) throws Throwable { CollectionHolder < Object > collectionHolder0 = new CollectionHolder < Object > ( ) ; CollectionHolder < CollectionHolder < String > > collectionHolder1 = new CollectionHolder < CollectionHolder < String > > ( ( Collection ) collectionHolder0 ) ; CollectionHolder < String > collectionHolder2 = new CollectionHolder < String > ( ) ; collectionHolder1 . add ( collectionHolder2 ) ; collectionHolder1 . add ( collectionHolder2 ) ; CollectionHolder < NotifyingCollection < String > > collectionHolder3 = new CollectionHolder < NotifyingCollection < String > > ( ( Collection ) collectionHolder1 ) ; collectionHolder3 . addAll ( ( Collection < ? extends NotifyingCollection < String > > ) collectionHolder1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeAll ( Collection < ? > c ) { return myData . removeAll ( c ) ; }
void test1 ( ) throws Throwable { SystemUtils systemUtils0 = new SystemUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNativeLibrarySearchPath ( ) { return StandardProperties . JavaLibraryPath . getValue ( ) ; }
void test0 ( ) throws Throwable { HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; Properties properties0 = PropertiesUtil . build ( ( Map ) hashMap0 ) ; PropertiesUtil . resolveReferences ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test2 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; List < Object > list0 = PropertiesUtil . getPropertyNames ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test3 ( ) throws Throwable { HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; Properties properties0 = PropertiesUtil . toProperties ( ( Map ) hashMap0 ) ; List < Object > list0 = PropertiesUtil . toSortedKeys ( properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test4 ( ) throws Throwable { PropertiesUtil propertiesUtil0 = new PropertiesUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test5 ( ) throws Throwable { PropertiesUtil . PropertyRef propertiesUtil_PropertyRef0 = new PropertiesUtil . PropertyRef ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test6 ( ) throws Throwable { HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; hashMap0 . put ( "" , "" ) ; Properties properties0 = PropertiesUtil . toProperties ( ( Map ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test7 ( ) throws Throwable { PropertiesUtil . PropertyRef propertiesUtil_PropertyRef0 = PropertiesUtil . getRef ( "$ { " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PropertyRef getRef ( String str ) { PropertyRef ref = null ; int start = str . indexOf ( "$ { " ) ; int stop = str . indexOf ( " } " , start ) ; if ( - 1 ! = start & & - 1 ! = stop ) { ref = new PropertyRef ( ) ; ref . start = start ; ref . stop = stop ; ref . refstr = str . substring ( 2 + start , stop ) ; } return ref ; }
void test9 ( ) throws Throwable { HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; hashMap0 . put ( "" , "" ) ; Properties properties0 = PropertiesUtil . toProperties ( ( Map ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test10 ( ) throws Throwable { HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; hashMap0 . put ( "" , "" ) ; Properties properties0 = PropertiesUtil . toProperties ( ( Map ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test1 ( ) throws Throwable { SimpleZipFile simpleZipFile0 = new SimpleZipFile ( ( File ) null ) ; simpleZipFile0 . setUpdateImmediately ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean updateImmediately ( ) { return myUpdateImmediately ; }
void test2 ( ) throws Throwable { SimpleZipFile simpleZipFile0 = new SimpleZipFile ( "tempzipfile" ) ; simpleZipFile0 . addFile ( "tempzipfile" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean shouldCreateBackup ( ) { return myShouldCreateBackup ; }
void test4 ( ) throws Throwable { SimpleZipFile simpleZipFile0 = new SimpleZipFile ( "" ) ; File file0 = simpleZipFile0 . getFile ( ) ; File file1 = file0 . getAbsoluteFile ( ) ; simpleZipFile0 . addFile ( file1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean updateRequired ( ) { return myUpdateRequired ; }
void test6 ( ) throws Throwable { SimpleZipFile simpleZipFile0 = new SimpleZipFile ( ( File ) null ) ; simpleZipFile0 . setShouldCreateBackup ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean shouldCreateBackup ( ) { return myShouldCreateBackup ; }
void test7 ( ) throws Throwable { SimpleZipFile simpleZipFile0 = new SimpleZipFile ( "" ) ; simpleZipFile0 . setIgnoreMissingFiles ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ignoreMissingFiles ( ) { return myIgnoreMissingFiles ; }
void test8 ( ) throws Throwable { SimpleZipFile simpleZipFile0 = new SimpleZipFile ( "" ) ; LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; simpleZipFile0 . setFileList ( ( List ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test9 ( ) throws Throwable { SimpleZipFile simpleZipFile0 = new SimpleZipFile ( "tempzipfile" ) ; boolean boolean0 = simpleZipFile0 . updateRequired ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean updateRequired ( ) { return myUpdateRequired ; }
void test10 ( ) throws Throwable { SimpleZipFile simpleZipFile0 = new SimpleZipFile ( "tempzipfile" ) ; boolean boolean0 = simpleZipFile0 . ignoreMissingFiles ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ignoreMissingFiles ( ) { return myIgnoreMissingFiles ; }
void test11 ( ) throws Throwable { SimpleZipFile simpleZipFile0 = new SimpleZipFile ( ( File ) null ) ; simpleZipFile0 . basicAddFile ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean updateRequired ( ) { return myUpdateRequired ; }
void test0 ( ) throws Throwable { Comparator < Object > comparator0 = SimpleZipEntry . getComparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Comparator getComparator ( ) ; boolean myAllowDuplicates ; List < AbstractAppData > myList ; / * * * Add an element to the list . * * < P > * The method will insert the new element into the list at the sorted position , * as determined by { @link #getComparator ( ) }
void test1 ( ) throws Throwable { SimpleZipEntry simpleZipEntry0 = new SimpleZipEntry ( "#qSV4 ; 31#" , "#qSV4 ; 31#" ) ; File file0 = simpleZipEntry0 . getCompletePath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getCompletePath ( ) { File f ; if ( null = = myDirectoryName ) f = new File ( myFileName ) ; else f = new File ( myDirectoryName , myFileName ) ; return f ; }
void test2 ( ) throws Throwable { SimpleZipEntry simpleZipEntry0 = new SimpleZipEntry ( ( String ) null , "#qSV4 ; 31#" ) ; File file0 = simpleZipEntry0 . getCompletePath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAbsolutePath ( Element parent ) { StringBuffer sb = new StringBuffer ( ) ; buildPath ( sb , parent ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { NewScheduler newScheduler0 = NewScheduler . getInstance ( ) ; / / Undeclared exception ! try { newScheduler0 . suspend ( ) ; fail ( "Expecting exception : IllegalStateException" ) ; } catch ( IllegalStateException e ) { / * * suspend called while in state Stopped * / } "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test1 ( ) throws Throwable { NewScheduler newScheduler0 = NewScheduler . getInstance ( ) ; boolean boolean0 = newScheduler0 . threadKeepRunning ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean threadKeepRunning ( ) { return myState ! = ThreadStates . Stopped & & myState ! = ThreadStates . Stopping ; }
void test2 ( ) throws Throwable { NewScheduler newScheduler0 = NewScheduler . getInstance ( ) ; newScheduler0 . noMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean threadKeepRunning ( ) { return myState ! = ThreadStates . Stopped & & myState ! = ThreadStates . Stopping ; }
void test3 ( ) throws Throwable { NewScheduler newScheduler0 = NewScheduler . getInstance ( ) ; / / Undeclared exception ! try { newScheduler0 . start ( ) ; fail ( "Expecting exception : IllegalStateException" ) ; } catch ( IllegalStateException e ) { / * * start called while in state Stopped * / } "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean threadKeepRunning ( ) { return myState ! = ThreadStates . Stopped & & myState ! = ThreadStates . Stopping ; }
void test4 ( ) throws Throwable { NewScheduler newScheduler0 = NewScheduler . getInstance ( ) ; newScheduler0 . stop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test0 ( ) throws Throwable { CheckPointService checkPointService0 = CheckPointService . getInstance ( ) ; boolean boolean0 = checkPointService0 . processThenPause ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processThenPause ( ) { return getProcessThenPause ( ) ; }
void test1 ( ) throws Throwable { CheckPointService checkPointService0 = CheckPointService . getInstance ( ) ; long long0 = checkPointService0 . getPauseTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getPauseTime ( ) { return myPauseTime ; }
void test2 ( ) throws Throwable { CheckPointService checkPointService0 = CheckPointService . getInstance ( ) ; Throwable throwable0 = checkPointService0 . getLastException ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Throwable getLastException ( ) { return myLastException ; }
void test2 ( ) throws Throwable { NewScheduler newScheduler0 = NewScheduler . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNextSleepTime ( ) throws InterruptedException { ScheduledEvent event = null ; if ( myEvents . size ( ) > 0 ) event = myEvents . get ( 0 ) ; long now = System . currentTimeMillis ( ) ; long wakeTime = now + CYCLE_TIME ; if ( null ! = event & & event . scheduledTime < wakeTime ) wakeTime = event . scheduledTime ; long sleepTime = wakeTime - now ; return sleepTime ; }
void test0 ( ) throws Throwable { int int0 = ComparatorUtils . inverse ( ( - 1 ) , 1096 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int inverse ( long l1 , long l2 ) { return - 1 * compare ( l1 , l2 ) ; }
void test1 ( ) throws Throwable { int int0 = ComparatorUtils . inverse ( ( - 1406L ) , ( - 1406L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int inverse ( long l1 , long l2 ) { return - 1 * compare ( l1 , l2 ) ; }
void test2 ( ) throws Throwable { ComparatorUtils comparatorUtils0 = new ComparatorUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { int int0 = ComparatorUtils . compare ( ( long ) ( - 51 ) , ( - 2008L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test4 ( ) throws Throwable { int int0 = ComparatorUtils . compare ( ( long ) ( - 1457 ) , 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test5 ( ) throws Throwable { int int0 = ComparatorUtils . compare ( 1 , ( - 1769 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test6 ( ) throws Throwable { int int0 = ComparatorUtils . compare ( 1096 , 1096 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test0 ( ) throws Throwable { MultiComparator multiComparator0 = new MultiComparator ( ) ; MultiComparator multiComparator1 = new MultiComparator ( ( Comparator ) multiComparator0 , ( Comparator ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MultiComparator ( ) { initialize ( ) ; }
void test1 ( ) throws Throwable { MultiComparator multiComparator0 = new MultiComparator ( ) ; MultiComparator multiComparator1 = new MultiComparator ( ( Comparator ) multiComparator0 , ( Comparator ) multiComparator0 , ( Comparator ) multiComparator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test2 ( ) throws Throwable { MultiComparator multiComparator0 = new MultiComparator ( ) ; MultiComparator multiComparator1 = new MultiComparator ( ( Comparator ) multiComparator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MultiComparator ( ) { initialize ( ) ; }
void test3 ( ) throws Throwable { MultiComparator multiComparator0 = new MultiComparator ( ) ; MultiComparator multiComparator1 = new MultiComparator ( ( Comparator ) null , ( Comparator ) multiComparator0 , ( Comparator ) null , ( Comparator ) multiComparator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MultiComparator ( ) { initialize ( ) ; }
void test4 ( ) throws Throwable { Comparator < String > [ ] comparatorArray0 = ( Comparator < String > [ ] ) Array . newInstance ( Comparator . class , 6 ) ; MultiComparator multiComparator0 = new MultiComparator ( comparatorArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MultiComparator ( ) { initialize ( ) ; }
void test6 ( ) throws Throwable { MultiComparator multiComparator0 = new MultiComparator ( ) ; int int0 = multiComparator0 . compare ( ( Object ) multiComparator0 , ( Object ) multiComparator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test0 ( ) throws Throwable { OtherNotifyingListAdaptor < Object > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Object > ( ) ; EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; TableBridge < Object > tableBridge0 = new TableBridge < Object > ( ( NotifyingList < Object > ) otherNotifyingListAdaptor0 , ( RowModel ) entryRowModel0 ) ; ListEvent . EventType listEvent_EventType0 = ListEvent . EventType . AllChanged ; ListEvent listEvent0 = new ListEvent ( listEvent_EventType0 ) ; tableBridge0 . listEvent ( listEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test1 ( ) throws Throwable { NotifyingListAdaptor < Integer > notifyingListAdaptor0 = new NotifyingListAdaptor < Integer > ( ) ; FoodRowModel foodRowModel0 = new FoodRowModel ( ) ; TableBridge < Integer > tableBridge0 = new TableBridge < Integer > ( ( NotifyingList < Integer > ) notifyingListAdaptor0 , ( RowModel ) foodRowModel0 ) ; tableBridge0 . append ( ( Object ) "LOWER_RIGHT_CORNER" ) ; int [ ] intArray0 = new int [ 1 ] ; notifyingListAdaptor0 . removeAll ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { NotifyingListAdaptor < Integer > notifyingListAdaptor0 = new NotifyingListAdaptor < Integer > ( ) ; FoodRowModel foodRowModel0 = new FoodRowModel ( ) ; TableBridge < Integer > tableBridge0 = new TableBridge < Integer > ( ( NotifyingList < Integer > ) notifyingListAdaptor0 , ( RowModel ) foodRowModel0 ) ; ListEvent . EventType listEvent_EventType0 = ListEvent . EventType . Update ; ListEvent listEvent0 = new ListEvent ( listEvent_EventType0 ) ; tableBridge0 . listEvent ( listEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void listEvent ( ListEvent event ) ; }
void test0 ( ) throws Throwable { OtherNotifyingListAdaptor < Integer > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Integer > ( ) ; otherNotifyingListAdaptor0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test4 ( ) throws Throwable { OtherNotifyingListAdaptor < List < Integer > > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < List < Integer > > ( ) ; ListProxy < List < Integer > > listProxy0 = new ListProxy < List < Integer > > ( ( NotifyingList < List < Integer > > ) otherNotifyingListAdaptor0 ) ; Vector < Integer > vector0 = new Vector < Integer > ( ) ; otherNotifyingListAdaptor0 . add ( ( List < Integer > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeAll ( Collection < ? > c ) { return myData . removeAll ( c ) ; }
void test6 ( ) throws Throwable { OtherNotifyingListAdaptor < Object > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Object > ( ) ; ListIterator < Object > listIterator0 = otherNotifyingListAdaptor0 . listIterator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int previousIndex ( ) { if ( myIndex < 0 ) return - 1 ; else return myIndex ; }
void test7 ( ) throws Throwable { OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < String > ( ) ; ListProxy < String > listProxy0 = new ListProxy < String > ( ( NotifyingList < String > ) otherNotifyingListAdaptor0 ) ; boolean boolean0 = listProxy0 . addAll ( ( Collection < ? extends String > ) otherNotifyingListAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean addAll ( Collection < ? extends E > c ) { return myData . addAll ( c ) ; }
void test9 ( ) throws Throwable { OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < String > ( ) ; otherNotifyingListAdaptor0 . add ( "" ) ; OtherNotifyingListAdaptor < Object > otherNotifyingListAdaptor1 = new OtherNotifyingListAdaptor < Object > ( ) ; boolean boolean0 = otherNotifyingListAdaptor1 . addAll ( 0 , ( Collection < ? > ) otherNotifyingListAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test10 ( ) throws Throwable { OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < String > ( ) ; otherNotifyingListAdaptor0 . add ( "" ) ; OtherNotifyingListAdaptor < Object > otherNotifyingListAdaptor1 = new OtherNotifyingListAdaptor < Object > ( ) ; boolean boolean0 = otherNotifyingListAdaptor1 . containsAll ( ( Collection < ? > ) otherNotifyingListAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test11 ( ) throws Throwable { OtherNotifyingListAdaptor < Object > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Object > ( ) ; OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor1 = new OtherNotifyingListAdaptor < String > ( ) ; otherNotifyingListAdaptor1 . add ( "$ename" ) ; otherNotifyingListAdaptor0 . add ( ( Object ) "$ename" ) ; ListProxy < String > listProxy0 = new ListProxy < String > ( ( NotifyingList < String > ) otherNotifyingListAdaptor1 ) ; boolean boolean0 = listProxy0 . containsAll ( ( Collection < ? > ) otherNotifyingListAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test12 ( ) throws Throwable { OtherNotifyingListAdaptor < List < Object > > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < List < Object > > ( ) ; boolean boolean0 = otherNotifyingListAdaptor0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test13 ( ) throws Throwable { OtherNotifyingListAdaptor < Object > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Object > ( ) ; otherNotifyingListAdaptor0 . add ( ( Object ) "$ename" ) ; ListProxy < Object > listProxy0 = new ListProxy < Object > ( ( NotifyingList < Object > ) otherNotifyingListAdaptor0 ) ; boolean boolean0 = listProxy0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test14 ( ) throws Throwable { OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < String > ( ) ; otherNotifyingListAdaptor0 . add ( "" ) ; int int0 = otherNotifyingListAdaptor0 . lastIndexOf ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test15 ( ) throws Throwable { OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < String > ( ) ; otherNotifyingListAdaptor0 . add ( "" ) ; int int0 = otherNotifyingListAdaptor0 . lastIndexOf ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test16 ( ) throws Throwable { OtherNotifyingListAdaptor < Integer > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Integer > ( ) ; otherNotifyingListAdaptor0 . add ( ( Integer ) 2 ) ; OtherNotifyingListAdaptor < Object > otherNotifyingListAdaptor1 = new OtherNotifyingListAdaptor < Object > ( ) ; boolean boolean0 = otherNotifyingListAdaptor1 . removeAll ( ( Collection < ? > ) otherNotifyingListAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test17 ( ) throws Throwable { OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < String > ( ) ; String [ ] stringArray0 = new String [ 5 ] ; stringArray0 [ 0 ] = "" ; boolean boolean0 = otherNotifyingListAdaptor0 . removeAll ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeAll ( Collection < ? > c ) { return myData . removeAll ( c ) ; }
void test18 ( ) throws Throwable { OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < String > ( ) ; otherNotifyingListAdaptor0 . add ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeAll ( Collection < ? > c ) { return myData . removeAll ( c ) ; }
void test19 ( ) throws Throwable { OtherNotifyingListAdaptor < Object > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Object > ( ) ; otherNotifyingListAdaptor0 . add ( ( Object ) "572" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean retainAll ( Collection < ? > c ) { return myData . retainAll ( c ) ; }
void test20 ( ) throws Throwable { OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < String > ( ) ; otherNotifyingListAdaptor0 . add ( "" ) ; TreeNode treeNode0 = new TreeNode ( ( TreeNode ) null ) ; TreeNode treeNode1 = new TreeNode ( treeNode0 , ( Collection ) otherNotifyingListAdaptor0 ) ; List < Object > list0 = treeNode1 . getChildren ( ) ; boolean boolean0 = otherNotifyingListAdaptor0 . retainAll ( ( Collection < ? > ) list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test21 ( ) throws Throwable { OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < String > ( ) ; Object [ ] objectArray0 = new Object [ 24 ] ; Object [ ] objectArray1 = otherNotifyingListAdaptor0 . toArray ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] toArray ( ) { return myData . toArray ( ) ; }
void test0 ( ) throws Throwable { OtherNotifyingListAdaptor < NotifyingList < Integer > > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < NotifyingList < Integer > > ( ) ; boolean boolean0 = otherNotifyingListAdaptor0 . remove ( ( Object ) "notify - field - accept" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( Object element ) { if ( ! myList . contains ( element ) ) return ; int index = myList . indexOf ( element ) ; myList . remove ( index ) ; ListChannelEvent event = new ListChannelEvent ( ListChannelEvent . EVENT_REMOVE , this , index ) ; getHelper ( ) . fire ( event ) ; }
void test1 ( ) throws Throwable { OtherNotifyingListAdaptor < Object > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Object > ( ) ; otherNotifyingListAdaptor0 . add ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test2 ( ) throws Throwable { OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < String > ( ) ; Iterator < String > iterator0 = otherNotifyingListAdaptor0 . iterator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) throws IOException { boolean thereIsAnotherToken = false ; / / / / if definitely know whether another token exists , then just return / / the result and be done with it / / switch ( myState ) { case STATE_START : case STATE_BEFORE_TOKEN : thereIsAnotherToken = advance ( ) ; break ; case STATE_AFTER_TOKEN : case STATE_MATCH_STOP : thereIsAnotherToken = true ; break ; case STATE_STOP : thereIsAnotherToken = false ; break ; } return thereIsAnotherToken ; }
void test3 ( ) throws Throwable { OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < String > ( ) ; FrequentRowModel frequentRowModel0 = new FrequentRowModel ( ) ; TableBridge < String > tableBridge0 = new TableBridge < String > ( ( NotifyingList < String > ) otherNotifyingListAdaptor0 , ( RowModel ) frequentRowModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeListener ( Object o ) { if ( null = = o ) return false ; else return this . listeners . remove ( o ) ; }
void test5 ( ) throws Throwable { OtherNotifyingListAdaptor < NotifyingList < DefaultTableModel > > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < NotifyingList < DefaultTableModel > > ( ) ; otherNotifyingListAdaptor0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test0 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; ProxyIterator < Integer > proxyIterator0 = new ProxyIterator < Integer > ( ( List < Integer > ) linkedList0 , ( List < Integer > ) linkedList0 , 0 ) ; int int0 = proxyIterator0 . previousIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" E set ( int index , E element ) { E old = super . set ( index , element ) ; if ( null ! = old ) { myIdToListPosition . remove ( old . getId ( ) ) ; myIdToElement . remove ( old . getId ( ) ) ; } myIdToListPosition . put ( element . getId ( ) , index ) ; myIdToElement . put ( element . getId ( ) , element ) ; return old ; }
void test3 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; LinkedList < ListIterator < Object > > linkedList1 = new LinkedList < ListIterator < Object > > ( ) ; ProxyIterator < ListIterator < Object > > proxyIterator0 = new ProxyIterator < ListIterator < Object > > ( ( List < Integer > ) linkedList0 , ( List < ListIterator < Object > > ) linkedList1 , 0 ) ; int int0 = proxyIterator0 . nextIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nextIndex ( ) { return 1 + myIndex ; }
void test5 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; ProxyIterator < Integer > proxyIterator0 = new ProxyIterator < Integer > ( ( List < Integer > ) linkedList0 , ( List < Integer > ) linkedList0 , 0 ) ; boolean boolean0 = proxyIterator0 . hasNext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int previousIndex ( ) { if ( myIndex < 0 ) return - 1 ; else return myIndex ; }
void test6 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; LinkedList < Object > linkedList1 = new LinkedList < Object > ( ) ; ProxyIterator < Object > proxyIterator0 = new ProxyIterator < Object > ( ( List < Integer > ) linkedList0 , ( List < Object > ) linkedList1 , ( - 2031 ) ) ; boolean boolean0 = proxyIterator0 . hasNext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nextIndex ( ) { return 1 + myIndex ; }
void test7 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; LinkedList < ListIterator < Integer > > linkedList1 = new LinkedList < ListIterator < Integer > > ( ) ; ProxyIterator < ListIterator < Integer > > proxyIterator0 = new ProxyIterator < ListIterator < Integer > > ( ( List < Integer > ) linkedList0 , ( List < ListIterator < Integer > > ) linkedList1 , ( - 614 ) ) ; boolean boolean0 = proxyIterator0 . hasPrevious ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nextIndex ( ) { return 1 + myIndex ; }
void test8 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; Integer integer0 = new Integer ( 1 ) ; linkedList0 . add ( integer0 ) ; LinkedList < Object > linkedList1 = new LinkedList < Object > ( ) ; ProxyIterator < Object > proxyIterator0 = new ProxyIterator < Object > ( ( List < Integer > ) linkedList0 , ( List < Object > ) linkedList1 , 580 ) ; boolean boolean0 = proxyIterator0 . hasPrevious ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int previousIndex ( ) { if ( myIndex < 0 ) return - 1 ; else return myIndex ; }
void test9 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; Integer integer0 = new Integer ( 1 ) ; linkedList0 . add ( integer0 ) ; LinkedList < ListIterator < Integer > > linkedList1 = new LinkedList < ListIterator < Integer > > ( ) ; ProxyIterator < ListIterator < Integer > > proxyIterator0 = new ProxyIterator < ListIterator < Integer > > ( ( List < Integer > ) linkedList0 , ( List < ListIterator < Integer > > ) linkedList1 , ( - 941 ) ) ; boolean boolean0 = proxyIterator0 . hasPrevious ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nextIndex ( ) { return 1 + myIndex ; }
void test13 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; LinkedList < ListIterator < String > > linkedList1 = new LinkedList < ListIterator < String > > ( ) ; ProxyIterator < ListIterator < String > > proxyIterator0 = new ProxyIterator < ListIterator < String > > ( ( List < Integer > ) linkedList0 , ( List < ListIterator < String > > ) linkedList1 , 1 ) ; int int0 = proxyIterator0 . previousIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int previousIndex ( ) { if ( myIndex < 0 ) return - 1 ; else return myIndex ; }
void test0 ( ) throws Throwable { OtherNotifyingListAdaptor < Integer > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Integer > ( ) ; ListProxy < Integer > listProxy0 = new ListProxy < Integer > ( ( NotifyingList < Integer > ) otherNotifyingListAdaptor0 ) ; listProxy0 . add ( ( Integer ) ( - 30 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int kernelSize ( ) { return myActualList . size ( ) ; }
void test1 ( ) throws Throwable { OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < String > ( ) ; ListProxy < String > listProxy0 = new ListProxy < String > ( ( NotifyingList < String > ) otherNotifyingListAdaptor0 ) ; listProxy0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test3 ( ) throws Throwable { OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < String > ( ) ; ListProxy < String > listProxy0 = new ListProxy < String > ( ( NotifyingList < String > ) otherNotifyingListAdaptor0 ) ; ListProxy < String > listProxy1 = new ListProxy < String > ( ( NotifyingList < String > ) listProxy0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ListProxy ( ) { }
void test4 ( ) throws Throwable { OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < String > ( ) ; ListProxy < String > listProxy0 = new ListProxy < String > ( ( NotifyingList < String > ) otherNotifyingListAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test5 ( ) throws Throwable { ListProxy < NotifyingListListener > listProxy0 = new ListProxy < NotifyingListListener > ( ) ; boolean boolean0 = listProxy0 . removeListener ( ( NotifyingListListener ) listProxy0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeListener ( Object o ) { if ( null = = o ) return false ; else return this . listeners . remove ( o ) ; }
void test7 ( ) throws Throwable { OtherNotifyingListAdaptor < SimplifiedList < Integer > > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < SimplifiedList < Integer > > ( ) ; ListProxy < SimplifiedList < Integer > > listProxy0 = new ListProxy < SimplifiedList < Integer > > ( ( NotifyingList < SimplifiedList < Integer > > ) otherNotifyingListAdaptor0 ) ; ListEvent . EventType listEvent_EventType0 = ListEvent . EventType . Update ; ListEvent listEvent0 = new ListEvent ( listEvent_EventType0 ) ; listProxy0 . listEvent ( listEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test0 ( ) throws Throwable { ListAdator < Integer > listAdator0 = new ListAdator < Integer > ( ) ; ListAdator < Object > listAdator1 = new ListAdator < Object > ( ) ; boolean boolean0 = listAdator1 . retainAll ( ( Collection ) listAdator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean retainAll ( Collection < ? > c ) { return myData . retainAll ( c ) ; }
void test1 ( ) throws Throwable { ListAdator < Object > listAdator0 = new ListAdator < Object > ( ) ; Object object0 = listAdator0 . remove ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( Object element ) { if ( ! myList . contains ( element ) ) return ; int index = myList . indexOf ( element ) ; myList . remove ( index ) ; ListChannelEvent event = new ListChannelEvent ( ListChannelEvent . EVENT_REMOVE , this , index ) ; getHelper ( ) . fire ( event ) ; }
void test2 ( ) throws Throwable { ListAdator < List < Object > > listAdator0 = new ListAdator < List < Object > > ( ) ; boolean boolean0 = listAdator0 . remove ( ( Object ) " [ ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( Object element ) { if ( ! myList . contains ( element ) ) return ; int index = myList . indexOf ( element ) ; myList . remove ( index ) ; ListChannelEvent event = new ListChannelEvent ( ListChannelEvent . EVENT_REMOVE , this , index ) ; getHelper ( ) . fire ( event ) ; }
void test3 ( ) throws Throwable { ListAdator < Object > listAdator0 = new ListAdator < Object > ( ) ; LinkedList < List < Object > > linkedList0 = new LinkedList < List < Object > > ( ) ; int int0 = listAdator0 . indexOf ( ( Object ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int indexOf ( Object o ) { return myData . indexOf ( o ) ; }
void test4 ( ) throws Throwable { ListAdator < Object > listAdator0 = new ListAdator < Object > ( ) ; ListAdator < String > listAdator1 = new ListAdator < String > ( ) ; boolean boolean0 = listAdator0 . removeAll ( ( Collection ) listAdator1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeAll ( Collection < ? > c ) { return myData . removeAll ( c ) ; }
void test5 ( ) throws Throwable { ListAdator < Object > listAdator0 = new ListAdator < Object > ( ) ; ListAdator < List < String > > listAdator1 = new ListAdator < List < String > > ( ) ; boolean boolean0 = listAdator1 . addAll ( ( Collection ) listAdator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean addAll ( Collection < ? extends E > c ) { return myData . addAll ( c ) ; }
void test6 ( ) throws Throwable { ListAdator < Object > listAdator0 = new ListAdator < Object > ( ) ; boolean boolean0 = listAdator0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test7 ( ) throws Throwable { ListAdator < Integer > listAdator0 = new ListAdator < Integer > ( ) ; ListIterator < Object > listIterator0 = listAdator0 . listIterator ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ListIterator < E > listIterator ( ) { return myData . listIterator ( ) ; }
void test8 ( ) throws Throwable { ListAdator < List < Integer > > listAdator0 = new ListAdator < List < Integer > > ( ) ; ListAdator < Object > listAdator1 = new ListAdator < Object > ( ) ; listAdator0 . add ( ( - 685 ) , ( Object ) listAdator1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test9 ( ) throws Throwable { ListAdator < Object > listAdator0 = new ListAdator < Object > ( ) ; boolean boolean0 = listAdator0 . contains ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( Object o ) { return this . contentSet . containsKey ( o ) ; }
void test10 ( ) throws Throwable { ListAdator < Object > listAdator0 = new ListAdator < Object > ( ) ; ListAdator < String > listAdator1 = new ListAdator < String > ( ) ; Object object0 = listAdator0 . set ( ( - 1098 ) , ( Object ) listAdator1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" E set ( int index , E element ) { E old = super . set ( index , element ) ; if ( null ! = old ) { myIdToListPosition . remove ( old . getId ( ) ) ; myIdToElement . remove ( old . getId ( ) ) ; } myIdToListPosition . put ( element . getId ( ) , index ) ; myIdToElement . put ( element . getId ( ) , element ) ; return old ; }
void test11 ( ) throws Throwable { ListAdator < List < String > > listAdator0 = new ListAdator < List < String > > ( ) ; ListIterator < Object > listIterator0 = listAdator0 . listIterator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ListIterator < E > listIterator ( ) { return myData . listIterator ( ) ; }
void test12 ( ) throws Throwable { ListAdator < Object > listAdator0 = new ListAdator < Object > ( ) ; ListAdator < String > listAdator1 = new ListAdator < String > ( ) ; boolean boolean0 = listAdator0 . addAll ( ( - 236 ) , ( Collection ) listAdator1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean addAll ( Collection < ? extends E > c ) { return myData . addAll ( c ) ; }
void test13 ( ) throws Throwable { ListAdator < Integer > listAdator0 = new ListAdator < Integer > ( ) ; List < Object > list0 = listAdator0 . subList ( ( - 1 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < E > subList ( int fromIndex , int toIndex ) { return myData . subList ( fromIndex , toIndex ) ; }
void test14 ( ) throws Throwable { ListAdator < Object > listAdator0 = new ListAdator < Object > ( ) ; int int0 = listAdator0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test15 ( ) throws Throwable { LinkedList < List < Object > > linkedList0 = new LinkedList < List < Object > > ( ) ; ListAdator < String > listAdator0 = new ListAdator < String > ( ) ; boolean boolean0 = listAdator0 . containsAll ( ( Collection ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsAll ( Collection < ? > c ) { return myData . containsAll ( c ) ; }
void test16 ( ) throws Throwable { ListAdator < List < String > > listAdator0 = new ListAdator < List < String > > ( ) ; List < String > list0 = listAdator0 . get ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream get ( String name ) throws LTSException , IOException { InputStream istream ; if ( ! entryExists ( name ) ) return null ; if ( ! archiveHasBeenExtracted ( ) ) istream = basicGet ( name ) ; else { File f = new File ( getTempDir ( ) , name ) ; try { istream = new FileInputStream ( f ) ; } catch ( FileNotFoundException e ) { istream = null ; } } return istream ; }
void test17 ( ) throws Throwable { ListAdator < Integer > listAdator0 = new ListAdator < Integer > ( ) ; Iterator < Object > iterator0 = listAdator0 . iterator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Iterator < E > iterator ( ) { return myData . iterator ( ) ; }
void test18 ( ) throws Throwable { ListAdator < List < Integer > > listAdator0 = new ListAdator < List < Integer > > ( ) ; Object [ ] objectArray0 = listAdator0 . toArray ( ( Object [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] toArray ( ) { return myData . toArray ( ) ; }
void test19 ( ) throws Throwable { ListAdator < List < Object > > listAdator0 = new ListAdator < List < Object > > ( ) ; Object [ ] objectArray0 = listAdator0 . toArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] toArray ( ) { return myData . toArray ( ) ; }
void test20 ( ) throws Throwable { ListAdator < Integer > listAdator0 = new ListAdator < Integer > ( ) ; LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; boolean boolean0 = listAdator0 . add ( ( Object ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void add ( Object element ) { if ( myList . contains ( element ) ) return ; myList . add ( element ) ; int index = myList . indexOf ( element ) ; ListChannelEvent event = new ListChannelEvent ( ListChannelEvent . EVENT_ADD , this , index ) ; getHelper ( ) . fire ( event ) ; }
void test21 ( ) throws Throwable { ListAdator < String > listAdator0 = new ListAdator < String > ( ) ; int int0 = listAdator0 . lastIndexOf ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int lastIndexOf ( Object o ) { return myData . lastIndexOf ( o ) ; }
void test22 ( ) throws Throwable { ListAdator < Object > listAdator0 = new ListAdator < Object > ( ) ; listAdator0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test0 ( ) throws Throwable { NotifyingListListenerAdaptor notifyingListListenerAdaptor0 = new NotifyingListListenerAdaptor ( ) ; ListEvent . EventType listEvent_EventType0 = ListEvent . EventType . Insert ; ListEvent listEvent0 = new ListEvent ( listEvent_EventType0 ) ; notifyingListListenerAdaptor0 . listEvent ( listEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void listEvent ( ListEvent event ) ; }
void test1 ( ) throws Throwable { NotifyingListListenerAdaptor notifyingListListenerAdaptor0 = new NotifyingListListenerAdaptor ( ) ; ListEvent . EventType listEvent_EventType0 = ListEvent . EventType . Delete ; ListEvent listEvent0 = new ListEvent ( listEvent_EventType0 ) ; notifyingListListenerAdaptor0 . listEvent ( listEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void listEvent ( ListEvent event ) ; }
void test2 ( ) throws Throwable { NotifyingListListenerAdaptor notifyingListListenerAdaptor0 = new NotifyingListListenerAdaptor ( ) ; ListEvent . EventType listEvent_EventType0 = ListEvent . EventType . Update ; ListEvent listEvent0 = new ListEvent ( listEvent_EventType0 ) ; notifyingListListenerAdaptor0 . listEvent ( listEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void listEvent ( ListEvent event ) ; }
void test3 ( ) throws Throwable { NotifyingListListenerAdaptor notifyingListListenerAdaptor0 = new NotifyingListListenerAdaptor ( ) ; ListEvent . EventType listEvent_EventType0 = ListEvent . EventType . AllChanged ; ListEvent listEvent0 = new ListEvent ( listEvent_EventType0 ) ; notifyingListListenerAdaptor0 . listEvent ( listEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void listEvent ( ListEvent event ) ; }
void test0 ( ) throws Throwable { NotifyingListAdaptor < String > notifyingListAdaptor0 = new NotifyingListAdaptor < String > ( ) ; NotifyingListAdaptor < Object > notifyingListAdaptor1 = new NotifyingListAdaptor < Object > ( ) ; Object [ ] objectArray0 = notifyingListAdaptor1 . toArray ( ) ; Object [ ] objectArray1 = notifyingListAdaptor0 . toArray ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] toArray ( ) { return myData . toArray ( ) ; }
void test1 ( ) throws Throwable { NotifyingListAdaptor < Integer > notifyingListAdaptor0 = new NotifyingListAdaptor < Integer > ( ) ; boolean boolean0 = notifyingListAdaptor0 . isEmpty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test2 ( ) throws Throwable { NotifyingListAdaptor < StyleConstants > notifyingListAdaptor0 = new NotifyingListAdaptor < StyleConstants > ( ) ; int int0 = notifyingListAdaptor0 . lastIndexOf ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int lastIndexOf ( Object o ) { return myData . lastIndexOf ( o ) ; }
void test4 ( ) throws Throwable { NotifyingListAdaptor < Object > notifyingListAdaptor0 = new NotifyingListAdaptor < Object > ( ) ; boolean boolean0 = notifyingListAdaptor0 . equals ( ( Object ) "horizontalAlignment" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return myData . equals ( o ) ; }
void test5 ( ) throws Throwable { NotifyingListAdaptor < NotifyingList < Object > > notifyingListAdaptor0 = new NotifyingListAdaptor < NotifyingList < Object > > ( ) ; notifyingListAdaptor0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test6 ( ) throws Throwable { NotifyingListAdaptor < NotifyingList < Object > > notifyingListAdaptor0 = new NotifyingListAdaptor < NotifyingList < Object > > ( ) ; List < Object > list0 = notifyingListAdaptor0 . subList ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test7 ( ) throws Throwable { NotifyingListAdaptor < NotifyingList < StyleConstants > > notifyingListAdaptor0 = new NotifyingListAdaptor < NotifyingList < StyleConstants > > ( ) ; Vector < NotifyingList < StyleConstants > > vector0 = new Vector < NotifyingList < StyleConstants > > ( ) ; notifyingListAdaptor0 . replaceWith ( ( List < NotifyingList < StyleConstants > > ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test8 ( ) throws Throwable { NotifyingListAdaptor < Object > notifyingListAdaptor0 = new NotifyingListAdaptor < Object > ( ) ; ListProxy < Object > listProxy0 = new ListProxy < Object > ( ( NotifyingList < Object > ) notifyingListAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean addAll ( Collection < ? extends E > c ) { return myData . addAll ( c ) ; }
void test11 ( ) throws Throwable { NotifyingListAdaptor < String > notifyingListAdaptor0 = new NotifyingListAdaptor < String > ( ) ; boolean boolean0 = notifyingListAdaptor0 . contains ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( Object o ) { return this . contentSet . containsKey ( o ) ; }
void test12 ( ) throws Throwable { NotifyingListAdaptor < String > notifyingListAdaptor0 = new NotifyingListAdaptor < String > ( ) ; int int0 = notifyingListAdaptor0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return myData . hashCode ( ) ; }
void test13 ( ) throws Throwable { NotifyingListAdaptor < NotifyingList < String > > notifyingListAdaptor0 = new NotifyingListAdaptor < NotifyingList < String > > ( ) ; NotifyingListAdaptor < String > notifyingListAdaptor1 = new NotifyingListAdaptor < String > ( ( List < String > ) null ) ; boolean boolean0 = notifyingListAdaptor1 . containsAll ( ( Collection ) notifyingListAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean containsAll ( Collection < ? > c ) { return myData . containsAll ( c ) ; }
void test14 ( ) throws Throwable { NotifyingListAdaptor < Object > notifyingListAdaptor0 = new NotifyingListAdaptor < Object > ( ) ; NotifyingListListenerAdaptor notifyingListListenerAdaptor0 = new NotifyingListListenerAdaptor ( ) ; boolean boolean0 = notifyingListAdaptor0 . removeListener ( ( NotifyingListListener ) notifyingListListenerAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeListener ( Object o ) { if ( null = = o ) return false ; else return this . listeners . remove ( o ) ; }
void test15 ( ) throws Throwable { NotifyingListAdaptor < String > notifyingListAdaptor0 = new NotifyingListAdaptor < String > ( ) ; notifyingListAdaptor0 . add ( "" ) ; NotifyingListAdaptor < Object > notifyingListAdaptor1 = new NotifyingListAdaptor < Object > ( ) ; boolean boolean0 = notifyingListAdaptor1 . addAll ( ( Collection < ? > ) notifyingListAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test16 ( ) throws Throwable { NotifyingListAdaptor < Object > notifyingListAdaptor0 = new NotifyingListAdaptor < Object > ( ) ; NotifyingListAdaptor < NotifyingList < String > > notifyingListAdaptor1 = new NotifyingListAdaptor < NotifyingList < String > > ( ) ; boolean boolean0 = notifyingListAdaptor0 . addAll ( ( - 1449 ) , ( Collection < ? > ) notifyingListAdaptor1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean addAll ( Collection < ? extends E > c ) { return myData . addAll ( c ) ; }
void test17 ( ) throws Throwable { NotifyingListAdaptor < String > notifyingListAdaptor0 = new NotifyingListAdaptor < String > ( ) ; notifyingListAdaptor0 . add ( "x3Y\"xI\u0000 | ) q" ) ; NotifyingListAdaptor < NotifyingList < Object > > notifyingListAdaptor1 = new NotifyingListAdaptor < NotifyingList < Object > > ( ) ; boolean boolean0 = notifyingListAdaptor1 . removeAll ( ( Collection ) notifyingListAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test18 ( ) throws Throwable { NotifyingListAdaptor < String > notifyingListAdaptor0 = new NotifyingListAdaptor < String > ( ) ; notifyingListAdaptor0 . add ( "selection - end - line" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( Object element ) { if ( ! myList . contains ( element ) ) return ; int index = myList . indexOf ( element ) ; myList . remove ( index ) ; ListChannelEvent event = new ListChannelEvent ( ListChannelEvent . EVENT_REMOVE , this , index ) ; getHelper ( ) . fire ( event ) ; }
void test20 ( ) throws Throwable { NotifyingListAdaptor < Object > notifyingListAdaptor0 = new NotifyingListAdaptor < Object > ( ) ; NotifyingListAdaptor < StyleConstants > notifyingListAdaptor1 = new NotifyingListAdaptor < StyleConstants > ( ) ; boolean boolean0 = notifyingListAdaptor0 . removeAll ( ( Collection ) notifyingListAdaptor1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeAll ( Collection < ? > c ) { return myData . removeAll ( c ) ; }
void test21 ( ) throws Throwable { NotifyingListAdaptor < String > notifyingListAdaptor0 = new NotifyingListAdaptor < String > ( ) ; notifyingListAdaptor0 . add ( "x3Y\"xI\u0000 | ) q" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean retainAll ( Collection < ? > c ) { return myData . retainAll ( c ) ; }
void test22 ( ) throws Throwable { NotifyingListAdaptor < Object > notifyingListAdaptor0 = new NotifyingListAdaptor < Object > ( ) ; String string0 = notifyingListAdaptor0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { OtherNotifyingListAdaptor < Integer > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Integer > ( ) ; SublistProxy < Integer > sublistProxy0 = new SublistProxy < Integer > ( ( NotifyingList < Integer > ) otherNotifyingListAdaptor0 , ( SublistInclusionTest < Integer > ) null ) ; sublistProxy0 . initializeVirtualList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test4 ( ) throws Throwable { OtherNotifyingListAdaptor < Integer > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Integer > ( ) ; SublistProxy < Integer > sublistProxy0 = new SublistProxy < Integer > ( ( NotifyingList < Integer > ) otherNotifyingListAdaptor0 , ( SublistInclusionTest < Integer > ) null ) ; sublistProxy0 . refresh ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test5 ( ) throws Throwable { OtherNotifyingListAdaptor < Integer > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Integer > ( ) ; SublistProxy < Integer > sublistProxy0 = new SublistProxy < Integer > ( ( NotifyingList < Integer > ) otherNotifyingListAdaptor0 , ( SublistInclusionTest < Integer > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test6 ( ) throws Throwable { OtherNotifyingListAdaptor < Integer > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Integer > ( ) ; SublistProxy < Integer > sublistProxy0 = new SublistProxy < Integer > ( ( NotifyingList < Integer > ) otherNotifyingListAdaptor0 , ( SublistInclusionTest < Integer > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test7 ( ) throws Throwable { OtherNotifyingListAdaptor < Integer > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Integer > ( ) ; SublistProxy < Integer > sublistProxy0 = new SublistProxy < Integer > ( ( NotifyingList < Integer > ) otherNotifyingListAdaptor0 , ( SublistInclusionTest < Integer > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test8 ( ) throws Throwable { OtherNotifyingListAdaptor < Integer > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Integer > ( ) ; SublistProxy < Integer > sublistProxy0 = new SublistProxy < Integer > ( ( NotifyingList < Integer > ) otherNotifyingListAdaptor0 , ( SublistInclusionTest < Integer > ) null ) ; ListEvent . EventType listEvent_EventType0 = ListEvent . EventType . Delete ; ListEvent listEvent0 = new ListEvent ( listEvent_EventType0 , ( - 1773 ) , ( Object ) "ToolTipText" ) ; sublistProxy0 . listEventDelete ( listEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test9 ( ) throws Throwable { OtherNotifyingListAdaptor < Integer > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Integer > ( ) ; SublistProxy < Integer > sublistProxy0 = new SublistProxy < Integer > ( ( NotifyingList < Integer > ) otherNotifyingListAdaptor0 , ( SublistInclusionTest < Integer > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test10 ( ) throws Throwable { OtherNotifyingListAdaptor < Integer > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Integer > ( ) ; SublistProxy < Integer > sublistProxy0 = new SublistProxy < Integer > ( ( NotifyingList < Integer > ) otherNotifyingListAdaptor0 , ( SublistInclusionTest < Integer > ) null ) ; int int0 = sublistProxy0 . findClosestTo ( ( - 1773 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int findClosestTo ( int actual ) { if ( myActualList . size ( ) > 0 ) { for ( int index = 0 ; index < myVirtualToActual . size ( ) ; index + + ) { int current = myVirtualToActual . get ( index ) ; if ( current > actual ) return 1 + index ; } } return myVirtualToActual . size ( ) ; }
void test1 ( ) throws Throwable { IndirectComparator indirectComparator0 = new IndirectComparator ( ( Comparator ) null , ( List ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" IndirectComparator ( ) { }
void test0 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; IndirectListIterator < Integer > indirectListIterator0 = new IndirectListIterator < Integer > ( ( List < Integer > ) linkedList0 , ( List < Integer > ) linkedList0 ) ; int int0 = indirectListIterator0 . nextIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nextIndex ( ) { return 1 + myIndex ; }
void test2 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; IndirectListIterator < Integer > indirectListIterator0 = new IndirectListIterator < Integer > ( ( List < Integer > ) linkedList0 , ( List < Integer > ) linkedList0 ) ; linkedList0 . add ( ( Integer ) 0 ) ; indirectListIterator0 . next ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int previousIndex ( ) { if ( myIndex < 0 ) return - 1 ; else return myIndex ; }
void test5 ( ) throws Throwable { IndirectListIterator < Integer > indirectListIterator0 = new IndirectListIterator < Integer > ( ( - 1 ) , ( List < Integer > ) null , ( List < Integer > ) null ) ; int int0 = indirectListIterator0 . previousIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int previousIndex ( ) { if ( myIndex < 0 ) return - 1 ; else return myIndex ; }
void test6 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; IndirectListIterator < Object > indirectListIterator0 = new IndirectListIterator < Object > ( 147 , ( List < Integer > ) linkedList0 , ( List < Object > ) null ) ; boolean boolean0 = indirectListIterator0 . hasNext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) throws IOException { boolean thereIsAnotherToken = false ; / / / / if definitely know whether another token exists , then just return / / the result and be done with it / / switch ( myState ) { case STATE_START : case STATE_BEFORE_TOKEN : thereIsAnotherToken = advance ( ) ; break ; case STATE_AFTER_TOKEN : case STATE_MATCH_STOP : thereIsAnotherToken = true ; break ; case STATE_STOP : thereIsAnotherToken = false ; break ; } return thereIsAnotherToken ; }
void test7 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; IndirectListIterator < String > indirectListIterator0 = new IndirectListIterator < String > ( ( - 534 ) , ( List < Integer > ) linkedList0 , ( List < String > ) null ) ; boolean boolean0 = indirectListIterator0 . hasNext ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) throws IOException { boolean thereIsAnotherToken = false ; / / / / if definitely know whether another token exists , then just return / / the result and be done with it / / switch ( myState ) { case STATE_START : case STATE_BEFORE_TOKEN : thereIsAnotherToken = advance ( ) ; break ; case STATE_AFTER_TOKEN : case STATE_MATCH_STOP : thereIsAnotherToken = true ; break ; case STATE_STOP : thereIsAnotherToken = false ; break ; } return thereIsAnotherToken ; }
void test8 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; IndirectListIterator < Integer > indirectListIterator0 = new IndirectListIterator < Integer > ( ( List < Integer > ) linkedList0 , ( List < Integer > ) linkedList0 ) ; IndirectListIterator < Integer > indirectListIterator1 = new IndirectListIterator < Integer > ( 301 , indirectListIterator0 . myVirtualList , ( List < Integer > ) linkedList0 ) ; boolean boolean0 = indirectListIterator1 . hasPrevious ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasPrevious ( ) { int size = myVirtual . size ( ) ; return ( size > 0 ) & & ( myIndex > 0 ) ; }
void test9 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; IndirectListIterator < Integer > indirectListIterator0 = new IndirectListIterator < Integer > ( ( List < Integer > ) linkedList0 , ( List < Integer > ) linkedList0 ) ; boolean boolean0 = indirectListIterator0 . hasPrevious ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNext ( ) throws IOException { boolean thereIsAnotherToken = false ; / / / / if definitely know whether another token exists , then just return / / the result and be done with it / / switch ( myState ) { case STATE_START : case STATE_BEFORE_TOKEN : thereIsAnotherToken = advance ( ) ; break ; case STATE_AFTER_TOKEN : case STATE_MATCH_STOP : thereIsAnotherToken = true ; break ; case STATE_STOP : thereIsAnotherToken = false ; break ; } return thereIsAnotherToken ; }
void test1 ( ) throws Throwable { FoodRowModel foodRowModel0 = new FoodRowModel ( ) ; NotifyingListAdaptor < NotifyingList < Object > > notifyingListAdaptor0 = new NotifyingListAdaptor < NotifyingList < Object > > ( ) ; ListProxy < NotifyingList < Object > > listProxy0 = new ListProxy < NotifyingList < Object > > ( ( NotifyingList < NotifyingList < Object > > ) notifyingListAdaptor0 ) ; SortedListProxy < NotifyingList < Object > > sortedListProxy0 = new SortedListProxy < NotifyingList < Object > > ( ( Comparator ) null , ( NotifyingList < NotifyingList < Object > > ) listProxy0 ) ; sortedListProxy0 . remove ( ( Object ) foodRowModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test2 ( ) throws Throwable { MealRowModel mealRowModel0 = new MealRowModel ( ) ; Comparator < Object > comparator0 = mealRowModel0 . getComparator ( ) ; OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < String > ( ) ; NotifyingListAdaptor < String > notifyingListAdaptor0 = new NotifyingListAdaptor < String > ( ( List < String > ) otherNotifyingListAdaptor0 ) ; SortedListProxy < String > sortedListProxy0 = new SortedListProxy < String > ( ( Comparator ) null , ( NotifyingList < String > ) notifyingListAdaptor0 ) ; SortedListProxy < String > sortedListProxy1 = new SortedListProxy < String > ( ( Comparator ) comparator0 , ( NotifyingList < String > ) sortedListProxy0 ) ; sortedListProxy1 . kernelCreate ( 0 , "vi ( 4 ? bp7S53E#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean kernelDelete ( int index ) { E e = myActualList . remove ( index ) ; return null ! = e ; }
void test3 ( ) throws Throwable { NotifyingListAdaptor < Object > notifyingListAdaptor0 = new NotifyingListAdaptor < Object > ( ) ; SortedListProxy < Object > sortedListProxy0 = new SortedListProxy < Object > ( ( Comparator ) null , ( NotifyingList < Object > ) notifyingListAdaptor0 ) ; NotifyingListListener [ ] notifyingListListenerArray0 = new NotifyingListListener [ 8 ] ; NotifyingListListener [ ] notifyingListListenerArray1 = sortedListProxy0 . toArray ( notifyingListListenerArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test4 ( ) throws Throwable { IndirectComparator indirectComparator0 = new IndirectComparator ( ) ; NotifyingListAdaptor < NotifyingListListener > notifyingListAdaptor0 = new NotifyingListAdaptor < NotifyingListListener > ( ) ; SortedListProxy < NotifyingListListener > sortedListProxy0 = new SortedListProxy < NotifyingListListener > ( ( Comparator ) indirectComparator0 , ( NotifyingList < NotifyingListListener > ) notifyingListAdaptor0 ) ; ListEvent . EventType listEvent_EventType0 = ListEvent . EventType . AllChanged ; ListEvent listEvent0 = new ListEvent ( listEvent_EventType0 , ( - 946 ) , ( Object ) "Monospaced" ) ; notifyingListAdaptor0 . add ( ( NotifyingListListener ) sortedListProxy0 ) ; sortedListProxy0 . listEvent ( listEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int kernelSize ( ) { return myActualList . size ( ) ; }
void test0 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; TreeNode treeNode1 = ( TreeNode ) DeepCopyUtil . deepCopy ( ( DeepCopier ) treeNode0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object deepCopy ( ) throws DeepCopyException { return DeepCopyUtil . deepCopy ( this , false ) ; }
void test2 ( ) throws Throwable { DeepCopyUtil deepCopyUtil0 = new DeepCopyUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { Object object0 = DeepCopyUtil . createInstance ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object createInstance ( String strClass ) throws LTSException { try { Class c = Class . forName ( strClass ) ; return c . newInstance ( ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw new LTSException ( e ) ; } }
void test4 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; HashMap < DeepCopier , List < Method > > hashMap0 = new HashMap < DeepCopier , List < Method > > ( ) ; List < Object > list0 = DeepCopyUtil . copyList ( ( List ) linkedList0 , ( Map ) hashMap0 , true ) ; DeepCopyUtil . copyList ( ( List ) list0 , ( Map ) hashMap0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test6 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; treeNode0 . addChild ( treeNode0 ) ; TreeNode treeNode1 = ( TreeNode ) DeepCopyUtil . startDeepCopy ( ( DeepCopier ) treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test8 ( ) throws Throwable { LinkedList < Integer > linkedList0 = new LinkedList < Integer > ( ) ; HashMap < DeepCopier , List < Method > > hashMap0 = new HashMap < DeepCopier , List < Method > > ( ) ; List < Object > list0 = DeepCopyUtil . copyList ( ( List ) linkedList0 , ( Map ) hashMap0 , true ) ; HashMap < Integer , List < String > > hashMap1 = new HashMap < Integer , List < String > > ( ) ; DeepCopyUtil . copyList ( ( List ) list0 , ( Map ) hashMap1 , true ) ; DeepCopyUtil . deepCopyField ( ( Object ) list0 , ( Map ) hashMap1 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test9 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; IdentityHashMap < Method , Method > identityHashMap0 = new IdentityHashMap < Method , Method > ( ) ; TreeNode treeNode1 = ( TreeNode ) DeepCopyUtil . deepCopyField ( ( Object ) treeNode0 , ( Map ) identityHashMap0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test1 ( ) throws Throwable { DebugUtils debugUtils0 = new DebugUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { FoodSelectDragAndDrop foodSelectDragAndDrop0 = new FoodSelectDragAndDrop ( ( FoodList ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsOperation ( DragAndDropOperations operation ) { Boolean supported = mySupportedOperations . get ( operation ) ; if ( null = = supported ) return false ; else return supported ; }
void test4 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; FoodSelectDragAndDrop foodSelectDragAndDrop0 = new FoodSelectDragAndDrop ( foodList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsOperation ( DragAndDropOperations operation ) { Boolean supported = mySupportedOperations . get ( operation ) ; if ( null = = supported ) return false ; else return supported ; }
void test1 ( ) throws Throwable { Food food0 = new Food ( ( - 1100 ) ) ; FoodWindow . editDataNonBlocking ( food0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { CalorieCountData calorieCountData0 = new CalorieCountData ( ) ; FoodList foodList0 = calorieCountData0 . getFoods ( ) ; FoodSelectDragAndDrop foodSelectDragAndDrop0 = new FoodSelectDragAndDrop ( foodList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FoodSelectDragAndDrop ( FoodList list ) { initialize ( list ) ; }
void test1 ( ) throws Throwable { PropertyRowModel propertyRowModel0 = new PropertyRowModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isColumnEditable ( int col ) { return true ; }
void test3 ( ) throws Throwable { PropertyRowModel propertyRowModel0 = new PropertyRowModel ( ) ; Object object0 = propertyRowModel0 . getValueAt ( ( - 1314 ) , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValueAt ( int row , int column ) { Object value = null ; Food food = myFoodList . getFoodAt ( row ) ; switch ( column ) { case COLUMN_CALORIES : value = food . getCalories ( ) ; break ; case COLUMN_NAME : value = food . getName ( ) ; break ; default : throw new IllegalArgumentException ( "column " + column ) ; } return value ; }
void test6 ( ) throws Throwable { PropertyRowModel propertyRowModel0 = new PropertyRowModel ( ) ; KeyValue keyValue0 = new KeyValue ( "Name" , "Name" ) ; propertyRowModel0 . setValueAt ( ( - 1 ) , ( Object ) keyValue0 , ( - 1867 ) , ( Object ) keyValue0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test0 ( ) throws Throwable { PropertyNode propertyNode0 = new PropertyNode ( "Ts = : wE . p" ) ; PropertyNode propertyNode1 = propertyNode0 . nameToChild ( "Ts = : wE . p" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleElement nameToChild ( String name ) { SimpleElement child = null ; if ( null = = myNameToChild ) { myNameToChild = new ReallyCaselessMap < SimpleElement > ( ) ; for ( SimpleElement elem : myChildren ) { myNameToChild . put ( elem . getName ( ) , elem ) ; } } child = myNameToChild . get ( name ) ; return child ; }
void test1 ( ) throws Throwable { PropertyNode propertyNode0 = new PropertyNode ( "" ) ; String string0 = propertyNode0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test2 ( ) throws Throwable { PropertyNode propertyNode0 = new PropertyNode ( "Ts = : wE . p" ) ; propertyNode0 . addChild ( "Ts = : wE . p" , propertyNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test0 ( ) throws Throwable { KeyValue keyValue0 = new KeyValue ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" KeyValue ( String theKey , String theValue ) { key = theKey ; value = theValue ; }
void test0 ( ) throws Throwable { PropertyTreeBuilder propertyTreeBuilder0 = new PropertyTreeBuilder ( ) ; PropertyNode propertyNode0 = new PropertyNode ( "GL ( * Ry ( hN , KCC ; " ) ; propertyTreeBuilder0 . buildNodes ( propertyNode0 , "GL ( * Ry ( hN , KCC ; " , "GL ( * Ry ( hN , KCC ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test1 ( ) throws Throwable { PropertyTreeBuilder propertyTreeBuilder0 = new PropertyTreeBuilder ( ) ; PropertyNode propertyNode0 = new PropertyNode ( "GL ( * Ry ( hN , KCC ; " ) ; propertyNode0 . addChild ( "GL ( * Ry ( hN , KCC ; " , propertyNode0 ) ; propertyTreeBuilder0 . buildNodes ( propertyNode0 , "GL ( * Ry ( hN , KCC ; " , "GL ( * Ry ( hN , KCC ; " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test0 ( ) throws Throwable { MealRowModel mealRowModel0 = new MealRowModel ( ) ; String [ ] stringArray0 = mealRowModel0 . getColumnNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getColumnNames ( ) { return COLUMN_NAMES ; }
void test2 ( ) throws Throwable { MealRowModel mealRowModel0 = new MealRowModel ( ) ; int int0 = mealRowModel0 . compareRows ( ( Object ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareRows ( Object o1 , Object o2 ) { throw new NotImplementedException ( ) ; }
void test5 ( ) throws Throwable { MealRowModel mealRowModel0 = new MealRowModel ( ) ; Class < Object > class0 = mealRowModel0 . getColumnClass ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getColumnClass ( int column ) { return String . class ; }
void test6 ( ) throws Throwable { MealRowModel mealRowModel0 = new MealRowModel ( ) ; String string0 = mealRowModel0 . getColumnName ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int column ) { return COLUMN_NAMES [ column ] ; }
void test7 ( ) throws Throwable { MealRowModel mealRowModel0 = new MealRowModel ( ) ; boolean boolean0 = mealRowModel0 . isColumnEditable ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isColumnEditable ( int col ) { return true ; }
void test8 ( ) throws Throwable { MealRowModel mealRowModel0 = new MealRowModel ( ) ; int int0 = mealRowModel0 . getColumnCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test0 ( ) throws Throwable { DayViewInclusionTest dayViewInclusionTest0 = new DayViewInclusionTest ( 0L , ( - 1737L ) ) ; Food food0 = new Food ( ) ; Meal meal0 = new Meal ( ( - 3 ) , food0 , 1798L ) ; boolean boolean0 = dayViewInclusionTest0 . include ( ( Entry ) meal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean include ( E e ) { return myTest . include ( e ) ; }
void test1 ( ) throws Throwable { DayViewInclusionTest dayViewInclusionTest0 = new DayViewInclusionTest ( 1L , ( - 1032L ) ) ; Meal meal0 = new Meal ( ) ; boolean boolean0 = dayViewInclusionTest0 . include ( ( Entry ) meal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean include ( E e ) { return myTest . include ( e ) ; }
void test2 ( ) throws Throwable { DayViewInclusionTest dayViewInclusionTest0 = new DayViewInclusionTest ( 0L , 1L ) ; Adjustment adjustment0 = new Adjustment ( ) ; boolean boolean0 = dayViewInclusionTest0 . include ( ( Entry ) adjustment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean include ( E e ) { return myTest . include ( e ) ; }
void test0 ( ) throws Throwable { DefaultSharedQueue defaultSharedQueue0 = new DefaultSharedQueue ( ) ; GatherUIThread gatherUIThread0 = new GatherUIThread ( ( SharedQueue ) defaultSharedQueue0 ) ; gatherUIThread0 . gatherNow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getReport ( ) { StringWriter sw = new StringWriter ( ) ; PrintWriter out = new PrintWriter ( sw ) ; Iterator i ; out . println ( " = = = ] Shared Queue Report [ = = = " ) ; out . println ( ) ; out . println ( "Queue contents : " ) ; i = getQueue ( ) . iterator ( ) ; while ( i . hasNext ( ) ) { Object o = i . next ( ) ; out . println ( o ) ; } return sw . toString ( ) ; }
void test1 ( ) throws Throwable { GatherUIThread gatherUIThread0 = new GatherUIThread ( ( SharedQueue ) null ) ; gatherUIThread0 . start ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { DefaultSharedQueue defaultSharedQueue0 = new DefaultSharedQueue ( ) ; GatherUIThread gatherUIThread0 = new GatherUIThread ( ( SharedQueue ) defaultSharedQueue0 ) ; boolean boolean0 = gatherUIThread0 . applicationHasFocus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean applicationHasFocus ( ) { Window [ ] allWindows = Window . getWindows ( ) ; for ( Window win : allWindows ) { if ( win . hasFocus ( ) ) return true ; } return false ; }
void test1 ( ) throws Throwable { DefaultSharedQueue defaultSharedQueue0 = new DefaultSharedQueue ( ) ; CalorieCountGatherService calorieCountGatherService0 = new CalorieCountGatherService ( ( SharedQueue ) defaultSharedQueue0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMaxPauseTime ( ) { return 300000 ; }
void test2 ( ) throws Throwable { CalorieCountGatherService calorieCountGatherService0 = CalorieCountGatherService . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNextGatherTime ( ) { return myNextGatherTime ; }
void test3 ( ) throws Throwable { long long0 = CalorieCountGatherService . roundDown ( 475L , ( - 1049L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long roundDown ( long value , long modulus ) { long temp = value / modulus ; temp = temp * modulus ; return temp ; }
void test4 ( ) throws Throwable { CalorieCountGatherService calorieCountGatherService0 = CalorieCountGatherService . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNextGatherTime ( ) { return myNextGatherTime ; }
void test5 ( ) throws Throwable { CalorieCountGatherService calorieCountGatherService0 = CalorieCountGatherService . getInstance ( ) ; calorieCountGatherService0 . gatherNow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMaxPauseTime ( ) { return 300000 ; }
void test7 ( ) throws Throwable { DefaultSharedQueue defaultSharedQueue0 = new DefaultSharedQueue ( ) ; CalorieCountGatherService calorieCountGatherService0 = new CalorieCountGatherService ( ( SharedQueue ) defaultSharedQueue0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMaxPauseTime ( ) { return 300000 ; }
void test0 ( ) throws Throwable { FrequentFoodListAdaptor frequentFoodListAdaptor0 = new FrequentFoodListAdaptor ( ) ; FrequentFood frequentFood0 = frequentFoodListAdaptor0 . remove ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( Object element ) { if ( ! myList . contains ( element ) ) return ; int index = myList . indexOf ( element ) ; myList . remove ( index ) ; ListChannelEvent event = new ListChannelEvent ( ListChannelEvent . EVENT_REMOVE , this , index ) ; getHelper ( ) . fire ( event ) ; }
void test1 ( ) throws Throwable { FrequentFoodListAdaptor frequentFoodListAdaptor0 = new FrequentFoodListAdaptor ( ) ; int int0 = frequentFoodListAdaptor0 . indexOf ( ( Object ) "compression" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int indexOf ( Object o ) { return myData . indexOf ( o ) ; }
void test2 ( ) throws Throwable { FrequentFoodListAdaptor frequentFoodListAdaptor0 = new FrequentFoodListAdaptor ( ) ; boolean boolean0 = frequentFoodListAdaptor0 . add ( ( FrequentFood ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void add ( Object element ) { if ( myList . contains ( element ) ) return ; myList . add ( element ) ; int index = myList . indexOf ( element ) ; ListChannelEvent event = new ListChannelEvent ( ListChannelEvent . EVENT_ADD , this , index ) ; getHelper ( ) . fire ( event ) ; }
void test3 ( ) throws Throwable { FrequentFoodListAdaptor frequentFoodListAdaptor0 = new FrequentFoodListAdaptor ( ) ; FrequentFood frequentFood0 = frequentFoodListAdaptor0 . set ( ( - 1975 ) , ( FrequentFood ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" E set ( int index , E element ) { E old = super . set ( index , element ) ; if ( null ! = old ) { myIdToListPosition . remove ( old . getId ( ) ) ; myIdToElement . remove ( old . getId ( ) ) ; } myIdToListPosition . put ( element . getId ( ) , index ) ; myIdToElement . put ( element . getId ( ) , element ) ; return old ; }
void test4 ( ) throws Throwable { FrequentFoodListAdaptor frequentFoodListAdaptor0 = new FrequentFoodListAdaptor ( ) ; frequentFoodListAdaptor0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test5 ( ) throws Throwable { FrequentFoodListAdaptor frequentFoodListAdaptor0 = new FrequentFoodListAdaptor ( ) ; FrequentFood frequentFood0 = frequentFoodListAdaptor0 . get ( 11 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InputStream get ( String name ) throws LTSException , IOException { InputStream istream ; if ( ! entryExists ( name ) ) return null ; if ( ! archiveHasBeenExtracted ( ) ) istream = basicGet ( name ) ; else { File f = new File ( getTempDir ( ) , name ) ; try { istream = new FileInputStream ( f ) ; } catch ( FileNotFoundException e ) { istream = null ; } } return istream ; }
void test6 ( ) throws Throwable { FrequentFoodListAdaptor frequentFoodListAdaptor0 = new FrequentFoodListAdaptor ( ) ; boolean boolean0 = frequentFoodListAdaptor0 . contains ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean contains ( Object o ) { return this . contentSet . containsKey ( o ) ; }
void test0 ( ) throws Throwable { LTSCheckBox lTSCheckBox0 = new LTSCheckBox ( ) ; boolean boolean0 = lTSCheckBox0 . isChecked ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChecked ( ) { return myChecked ; }
void test1 ( ) throws Throwable { LTSCheckBox lTSCheckBox0 = new LTSCheckBox ( "_6ZS" ) ; lTSCheckBox0 . setChecked ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isChecked ( ) { return myChecked ; }
void test2 ( ) throws Throwable { LTSCheckBox lTSCheckBox0 = new LTSCheckBox ( ) ; lTSCheckBox0 . doClick ( ) ; lTSCheckBox0 . setChecked ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setChecked ( boolean value ) { myChecked = value ; setSelected ( value ) ; }
void test1 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; entryRowModel0 . setValueAt ( 0 , ( Object ) "AcceleratorKey" , 0 , ( Object ) "AcceleratorKey" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowTimeOnly ( ) { return myShowTimeOnly ; }
void test4 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; String string0 = entryRowModel0 . getColumnName ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int column ) { return COLUMN_NAMES [ column ] ; }
void test5 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; Class < Object > class0 = entryRowModel0 . getColumnClass ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getColumnClass ( int column ) { return String . class ; }
void test6 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; Comparator < Object > comparator0 = entryRowModel0 . getComparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Comparator getComparator ( ) ; boolean myAllowDuplicates ; List < AbstractAppData > myList ; / * * * Add an element to the list . * * < P > * The method will insert the new element into the list at the sorted position , * as determined by { @link #getComparator ( ) }
void test7 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; int int0 = entryRowModel0 . getColumnCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test8 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; boolean boolean0 = entryRowModel0 . isColumnEditable ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isColumnEditable ( int col ) { return true ; }
void test9 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; Object object0 = entryRowModel0 . getValueAt ( 3 , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValueAt ( int row , int column ) { Object value = null ; Food food = myFoodList . getFoodAt ( row ) ; switch ( column ) { case COLUMN_CALORIES : value = food . getCalories ( ) ; break ; case COLUMN_NAME : value = food . getName ( ) ; break ; default : throw new IllegalArgumentException ( "column " + column ) ; } return value ; }
void test0 ( ) throws Throwable { HelpAboutPanel helpAboutPanel0 = new HelpAboutPanel ( ) ; String string0 = helpAboutPanel0 . getViewName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getViewName ( ) { return "Timelord Check Points" ; }
void test1 ( ) throws Throwable { HelpAboutPanel helpAboutPanel0 = new HelpAboutPanel ( ) ; Dimension dimension0 = helpAboutPanel0 . getWindowSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { CalorieStatusPanel calorieStatusPanel0 = new CalorieStatusPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test0 ( ) throws Throwable { FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop ( ) ; JTable jTable0 = new JTable ( ( TableModel ) null ) ; frequentTableDragAndDrop0 . moveMarkData ( ( JComponent ) jTable0 ) ; frequentTableDragAndDrop0 . moveDeleteData ( ( JComponent ) jTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test1 ( ) throws Throwable { JTable jTable0 = new JTable ( ( TableModel ) null ) ; FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop ( ) ; Object object0 = frequentTableDragAndDrop0 . moveCopyData ( ( JComponent ) jTable0 ) ; StringSelection stringSelection0 = new StringSelection ( ( String ) null ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jTable0 , ( Transferable ) stringSelection0 ) ; frequentTableDragAndDrop0 . movePasteData ( transferHandler_TransferSupport0 , object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void movePasteData ( TransferSupport support , Object data ) { JTable table = ( JTable ) support . getComponent ( ) ; myMoveDestination = table . getSelectedRow ( ) ; paste ( support , data ) ; }
void test2 ( ) throws Throwable { JTable jTable0 = new JTable ( ( TableModel ) null ) ; FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop ( ) ; Object object0 = frequentTableDragAndDrop0 . moveCopyData ( ( JComponent ) jTable0 ) ; frequentTableDragAndDrop0 . delete ( ( JComponent ) jTable0 , object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void delete ( Object source ) ; void other ( Object source , int code ) ; }
void test0 ( ) throws Throwable { LTSTransferHandler lTSTransferHandler0 = new LTSTransferHandler ( ) ; JTextField jTextField0 = new JTextField ( "" , 127 ) ; Transferable transferable0 = lTSTransferHandler0 . createTransferable ( ( JComponent ) jTextField0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Transferable createTransferable ( JComponent c ) { / / TODO Auto - generated method stub return super . createTransferable ( c ) ; }
void test1 ( ) throws Throwable { LTSTransferHandler lTSTransferHandler0 = new LTSTransferHandler ( ) ; JTextField jTextField0 = new JTextField ( "" , 127 ) ; StringSelection stringSelection0 = new StringSelection ( "" ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jTextField0 , ( Transferable ) stringSelection0 ) ; boolean boolean0 = lTSTransferHandler0 . canImport ( transferHandler_TransferSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canImport ( TransferSupport support ) { / / TODO Auto - generated method stub return super . canImport ( support ) ; }
void test2 ( ) throws Throwable { LTSTransferHandler lTSTransferHandler0 = new LTSTransferHandler ( ) ; JTextField jTextField0 = new JTextField ( "" , 127 ) ; Clipboard clipboard0 = new Clipboard ( "" ) ; lTSTransferHandler0 . exportToClipboard ( ( JComponent ) jTextField0 , clipboard0 , ( - 535 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test3 ( ) throws Throwable { LTSTransferHandler lTSTransferHandler0 = new LTSTransferHandler ( ) ; DefaultComboBoxModel defaultComboBoxModel0 = new DefaultComboBoxModel ( ) ; JComboBox jComboBox0 = new JComboBox ( ( ComboBoxModel ) defaultComboBoxModel0 ) ; MenuElement [ ] menuElementArray0 = new MenuElement [ 1 ] ; MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager ( ) ; MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent ( ( Component ) jComboBox0 , 0 , 0L , 0 , 0 , 'I' , menuElementArray0 , menuSelectionManager0 ) ; lTSTransferHandler0 . exportAsDrag ( ( JComponent ) jComboBox0 , ( InputEvent ) menuKeyEvent0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test4 ( ) throws Throwable { LTSTransferHandler lTSTransferHandler0 = new LTSTransferHandler ( ) ; DefaultComboBoxModel defaultComboBoxModel0 = new DefaultComboBoxModel ( ) ; JComboBox jComboBox0 = new JComboBox ( ( ComboBoxModel ) defaultComboBoxModel0 ) ; StringSelection stringSelection0 = new StringSelection ( " * C" ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jComboBox0 , ( Transferable ) stringSelection0 ) ; boolean boolean0 = lTSTransferHandler0 . importData ( transferHandler_TransferSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean importData ( TransferSupport support ) { / / TODO Auto - generated method stub return super . importData ( support ) ; }
void test0 ( ) throws Throwable { LocalVMTransferable localVMTransferable0 = new LocalVMTransferable ( ( Object ) null ) ; boolean boolean0 = localVMTransferable0 . isDataFlavorSupported ( localVMTransferable0 . JVM_OBJECT_FLAVOR ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { return flavor . isMimeTypeEqual ( JVM_OBJECT_FLAVOR ) ; }
void test2 ( ) throws Throwable { LocalVMTransferable localVMTransferable0 = new LocalVMTransferable ( ( Object ) null ) ; DataFlavor [ ] dataFlavorArray0 = localVMTransferable0 . getTransferDataFlavors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataFlavor [ ] getTransferDataFlavors ( ) { return JVM_OBJECT_FLAVORS ; }
void test0 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ( List ) null ) ; FoodSelectDragAndDrop foodSelectDragAndDrop0 = new FoodSelectDragAndDrop ( foodList0 ) ; TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor ( ( DragAndDropHandler ) foodSelectDragAndDrop0 ) ; JTextField jTextField0 = new JTextField ( ) ; StringSelection stringSelection0 = new StringSelection ( "~8ldGZ#qL` ] P8@ ( " ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jTextField0 , ( Transferable ) stringSelection0 ) ; boolean boolean0 = transferHandlerAdaptor0 . canImport ( transferHandler_TransferSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canImport ( TransferSupport support ) { / / TODO Auto - generated method stub return super . canImport ( support ) ; }
void test1 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; FoodSelectDragAndDrop foodSelectDragAndDrop0 = new FoodSelectDragAndDrop ( foodList0 ) ; TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor ( ( DragAndDropHandler ) foodSelectDragAndDrop0 ) ; JFormattedTextField jFormattedTextField0 = new JFormattedTextField ( ) ; transferHandlerAdaptor0 . exportAsDrag ( ( JComponent ) jFormattedTextField0 , ( InputEvent ) null , ( int ) '\'' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void exportAsDrag ( JComponent comp , InputEvent e , int action ) { / / TODO Auto - generated method stub super . exportAsDrag ( comp , e , action ) ; }
void test2 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ( List ) null ) ; FoodSelectDragAndDrop foodSelectDragAndDrop0 = new FoodSelectDragAndDrop ( foodList0 ) ; TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor ( ( DragAndDropHandler ) foodSelectDragAndDrop0 ) ; JTextField jTextField0 = new JTextField ( ) ; StringSelection stringSelection0 = new StringSelection ( "~8ldGZ#qL` ] P8@ ( " ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jTextField0 , ( Transferable ) stringSelection0 ) ; transferHandlerAdaptor0 . importData ( transferHandler_TransferSupport0 ) ; transferHandlerAdaptor0 . exportDone ( ( JComponent ) jTextField0 , ( Transferable ) stringSelection0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void exportDone ( JComponent source , Transferable data , int action ) { / / TODO Auto - generated method stub super . exportDone ( source , data , action ) ; }
void test4 ( ) throws Throwable { FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop ( ) ; TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor ( ( DragAndDropHandler ) frequentTableDragAndDrop0 ) ; Action action0 = TransferHandler . getCopyAction ( ) ; JRadioButton jRadioButton0 = new JRadioButton ( action0 ) ; Clipboard clipboard0 = new Clipboard ( " ] w ; " ) ; transferHandlerAdaptor0 . exportToClipboard ( ( JComponent ) jRadioButton0 , clipboard0 , ( - 1612 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void exportToClipboard ( JComponent comp , Clipboard clip , int action ) throws IllegalStateException { / / TODO Auto - generated method stub super . exportToClipboard ( comp , clip , action ) ; }
void test5 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ( List ) null ) ; FoodSelectDragAndDrop foodSelectDragAndDrop0 = new FoodSelectDragAndDrop ( foodList0 ) ; TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor ( ( DragAndDropHandler ) foodSelectDragAndDrop0 ) ; JTextField jTextField0 = new JTextField ( ) ; StringSelection stringSelection0 = new StringSelection ( "~8ldGZ#qL` ] P8@ ( " ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jTextField0 , ( Transferable ) stringSelection0 ) ; transferHandlerAdaptor0 . importData ( transferHandler_TransferSupport0 ) ; boolean boolean0 = transferHandlerAdaptor0 . importData ( transferHandler_TransferSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean importData ( TransferSupport support ) { / / TODO Auto - generated method stub return super . importData ( support ) ; }
void test6 ( ) throws Throwable { FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop ( ) ; TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor ( ( DragAndDropHandler ) frequentTableDragAndDrop0 ) ; boolean boolean0 = transferHandlerAdaptor0 . importData ( ( TransferHandler . TransferSupport ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean importData ( TransferSupport support ) { / / TODO Auto - generated method stub return super . importData ( support ) ; }
void test7 ( ) throws Throwable { FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop ( ) ; TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor ( ( DragAndDropHandler ) frequentTableDragAndDrop0 ) ; Clipboard clipboard0 = new Clipboard ( "" ) ; transferHandlerAdaptor0 . exportToClipboard ( ( JComponent ) null , clipboard0 , 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test0 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test5 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test6 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test7 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test8 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test9 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test10 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test11 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test12 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDragAndDropHandler ( JTableDragAndDrop handler ) { myDragAndDropHandler = handler ; TransferHandlerAdaptor adapt = new TransferHandlerAdaptor ( handler ) ; setTransferHandler ( adapt ) ; setDragEnabled ( true ) ; }
void test13 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test14 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test15 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test16 ( ) throws Throwable { LTSTable lTSTable0 = new LTSTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { FrequentRowModel frequentRowModel0 = new FrequentRowModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareRows ( Object o1 , Object o2 ) { throw new NotImplementedException ( ) ; }
void test1 ( ) throws Throwable { FrequentRowModel frequentRowModel0 = new FrequentRowModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValueAt ( int rowIndex , Object data , int column , Object value ) { throw new RuntimeException ( "not implemented" ) ; }
void test2 ( ) throws Throwable { FrequentRowModel frequentRowModel0 = new FrequentRowModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValueAt ( int row , int column ) { Object value = null ; Food food = myFoodList . getFoodAt ( row ) ; switch ( column ) { case COLUMN_CALORIES : value = food . getCalories ( ) ; break ; case COLUMN_NAME : value = food . getName ( ) ; break ; default : throw new IllegalArgumentException ( "column " + column ) ; } return value ; }
void test3 ( ) throws Throwable { FrequentRowModel frequentRowModel0 = new FrequentRowModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValueAt ( int row , int column ) { Object value = null ; Food food = myFoodList . getFoodAt ( row ) ; switch ( column ) { case COLUMN_CALORIES : value = food . getCalories ( ) ; break ; case COLUMN_NAME : value = food . getName ( ) ; break ; default : throw new IllegalArgumentException ( "column " + column ) ; } return value ; }
void test4 ( ) throws Throwable { FrequentRowModel frequentRowModel0 = new FrequentRowModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValueAt ( int row , int column ) { Object value = null ; Food food = myFoodList . getFoodAt ( row ) ; switch ( column ) { case COLUMN_CALORIES : value = food . getCalories ( ) ; break ; case COLUMN_NAME : value = food . getName ( ) ; break ; default : throw new IllegalArgumentException ( "column " + column ) ; } return value ; }
void test2 ( ) throws Throwable { FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop ( ) ; DragAndDropHandler . DragAndDropOperations dragAndDropHandler_DragAndDropOperations0 = DragAndDropHandler . DragAndDropOperations . Copy ; boolean boolean0 = frequentTableDragAndDrop0 . supportsOperation ( dragAndDropHandler_DragAndDropOperations0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsOperation ( DragAndDropOperations operation ) { Boolean supported = mySupportedOperations . get ( operation ) ; if ( null = = supported ) return false ; else return supported ; }
void test3 ( ) throws Throwable { FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop ( ) ; DragAndDropHandler . DragAndDropOperations dragAndDropHandler_DragAndDropOperations0 = DragAndDropHandler . DragAndDropOperations . Cut ; boolean boolean0 = frequentTableDragAndDrop0 . supportsOperation ( dragAndDropHandler_DragAndDropOperations0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsOperation ( DragAndDropOperations operation ) { Boolean supported = mySupportedOperations . get ( operation ) ; if ( null = = supported ) return false ; else return supported ; }
void test4 ( ) throws Throwable { FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop ( ) ; DragAndDropHandler . DragAndDropOperations dragAndDropHandler_DragAndDropOperations0 = DragAndDropHandler . DragAndDropOperations . Move ; boolean boolean0 = frequentTableDragAndDrop0 . supportsOperation ( dragAndDropHandler_DragAndDropOperations0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsOperation ( DragAndDropOperations operation ) { Boolean supported = mySupportedOperations . get ( operation ) ; if ( null = = supported ) return false ; else return supported ; }
void test5 ( ) throws Throwable { FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop ( ) ; DragAndDropHandler . DragAndDropOperations dragAndDropHandler_DragAndDropOperations0 = DragAndDropHandler . DragAndDropOperations . Paste ; boolean boolean0 = frequentTableDragAndDrop0 . supportsOperation ( dragAndDropHandler_DragAndDropOperations0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsOperation ( DragAndDropOperations operation ) { Boolean supported = mySupportedOperations . get ( operation ) ; if ( null = = supported ) return false ; else return supported ; }
void test0 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; CalorieCountProperties calorieCountProperties0 = new CalorieCountProperties ( properties0 ) ; boolean boolean0 = calorieCountProperties0 . reloadWindows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean reloadWindows ( ) { return getBooleanProperty ( PROP_RELOAD_WINDOWS ) ; }
void test1 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; properties0 . put ( ( Object ) "app . lastDirectory" , ( Object ) "app . lastDirectory" ) ; CalorieCountProperties calorieCountProperties0 = new CalorieCountProperties ( properties0 ) ; File file0 = calorieCountProperties0 . getLastDirectory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getLastDirectory ( ) { String name = ApplicationProperties . PROP_LAST_DIRECTORY ; return getDirectoryProperty ( name ) ; }
void test2 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; CalorieCountProperties calorieCountProperties0 = new CalorieCountProperties ( properties0 ) ; File file0 = calorieCountProperties0 . getLastDirectory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File getLastDirectory ( ) { String name = ApplicationProperties . PROP_LAST_DIRECTORY ; return getDirectoryProperty ( name ) ; }
void test4 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; CalorieCountProperties calorieCountProperties0 = new CalorieCountProperties ( properties0 ) ; File file0 = new File ( "" , "" ) ; calorieCountProperties0 . setLastDirectory ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test6 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; CalorieCountProperties calorieCountProperties0 = new CalorieCountProperties ( properties0 ) ; calorieCountProperties0 . reloadWindows ( ) ; boolean boolean0 = calorieCountProperties0 . reloadWindows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean reloadWindows ( ) { return getBooleanProperty ( PROP_RELOAD_WINDOWS ) ; }
void test7 ( ) throws Throwable { CalorieCountProperties calorieCountProperties0 = new CalorieCountProperties ( ( Properties ) null ) ; calorieCountProperties0 . put ( ( Object ) "" , ( Object ) "" ) ; calorieCountProperties0 . getBooleanProperty ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean reloadWindows ( ) { return getBooleanProperty ( PROP_RELOAD_WINDOWS ) ; }
void test8 ( ) throws Throwable { CalorieCountProperties calorieCountProperties0 = new CalorieCountProperties ( ( Properties ) null ) ; boolean boolean0 = calorieCountProperties0 . getBooleanProperty ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean reloadWindows ( ) { return getBooleanProperty ( PROP_RELOAD_WINDOWS ) ; }
void test3 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; calorieCount0 . getUIThread ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTempFilePrefix ( ) { return this . tempFilePrefix ; }
void test5 ( ) throws Throwable { CalorieCountProperties calorieCountProperties0 = CalorieCount . getProps ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test6 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; calorieCount0 . setUIThread ( ( GatherUIThread ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getApplicationName ( ) ; Application ourApplication ; / * * * Indicates that the application's data consists of a simple properties * file , suitable for loading via Properties . load * * < P / > * Return this value from the getAppDataType method to have the startup * and shutdown methods treat the applications data as a property file . * * < P / > * This is the default application data type . The application properties * file is the file that this property indicates . * * < P / > * Applications that use this approach cannot load and stored data via * the getInputStream and getOutputStream methods . * / int APP_DATA_PROPERTIES_FILE = 0 ; / * * * Indicates that the application's data is stored in a system of * directories . * * < P / > * Return this value from the getAppDataType method to have the startup * and shutdown methods use the application directory approach . The * primary affect is that the class will try to get the application * properties file from the application directory . * / int APP_DATA_DIRECTORY = 1 ; / * * * Indicates that the application's data is stored in a zip file . * * < P / > * Return this value from the getAppDataType method to have the startup * and shutdown methods use the archive rather than a properties file . * * < P / > * If the application signals that it wants to use an archive , then * the class will try to locate the application properties file in * the archive . * / int APP_DATA_ARCHIVE = 2 ; String STR_ARG_APPLICATION_DIRECTORY = "applicationDirectory" ; String STR_SHORT_ARG_APPLICATION_DIRECTORY = "d" ; String STR_ARG_INIT_FILE = "initializationFile" ; String STR_SHORT_ARG_INIT_FILE = "i" ; String STR_ARG_REPOSITORY = "repository" ; String STR_SHORT_ARG_REPOSITORY = "r" ; int ARG_APPLICATION_DIRECTORY = 0 ; int ARG_INIT_FILE = 1 ; int ARG_REPOSITORY = 2 ; Object [ ] SPEC_STRING_TO_ARGUMENT = { STR_ARG_APPLICATION_DIRECTORY , new Integer ( ARG_APPLICATION_DIRECTORY ) , STR_ARG_INIT_FILE , new Integer ( ARG_INIT_FILE ) , STR_ARG_REPOSITORY , new Integer ( ARG_REPOSITORY ) }
void test8 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; CalorieCountData calorieCountData0 = ( CalorieCountData ) calorieCount0 . createApplicationData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getApplicationName ( ) ; Application ourApplication ; / * * * Indicates that the application's data consists of a simple properties * file , suitable for loading via Properties . load * * < P / > * Return this value from the getAppDataType method to have the startup * and shutdown methods treat the applications data as a property file . * * < P / > * This is the default application data type . The application properties * file is the file that this property indicates . * * < P / > * Applications that use this approach cannot load and stored data via * the getInputStream and getOutputStream methods . * / int APP_DATA_PROPERTIES_FILE = 0 ; / * * * Indicates that the application's data is stored in a system of * directories . * * < P / > * Return this value from the getAppDataType method to have the startup * and shutdown methods use the application directory approach . The * primary affect is that the class will try to get the application * properties file from the application directory . * / int APP_DATA_DIRECTORY = 1 ; / * * * Indicates that the application's data is stored in a zip file . * * < P / > * Return this value from the getAppDataType method to have the startup * and shutdown methods use the archive rather than a properties file . * * < P / > * If the application signals that it wants to use an archive , then * the class will try to locate the application properties file in * the archive . * / int APP_DATA_ARCHIVE = 2 ; String STR_ARG_APPLICATION_DIRECTORY = "applicationDirectory" ; String STR_SHORT_ARG_APPLICATION_DIRECTORY = "d" ; String STR_ARG_INIT_FILE = "initializationFile" ; String STR_SHORT_ARG_INIT_FILE = "i" ; String STR_ARG_REPOSITORY = "repository" ; String STR_SHORT_ARG_REPOSITORY = "r" ; int ARG_APPLICATION_DIRECTORY = 0 ; int ARG_INIT_FILE = 1 ; int ARG_REPOSITORY = 2 ; Object [ ] SPEC_STRING_TO_ARGUMENT = { STR_ARG_APPLICATION_DIRECTORY , new Integer ( ARG_APPLICATION_DIRECTORY ) , STR_ARG_INIT_FILE , new Integer ( ARG_INIT_FILE ) , STR_ARG_REPOSITORY , new Integer ( ARG_REPOSITORY ) }
void test9 ( ) throws Throwable { CalorieCount calorieCount0 = ( CalorieCount ) Pest . getApp ( ) ; calorieCount0 . wasRecording ( ) ; FrequentFoodList frequentFoodList0 = new FrequentFoodList ( ) ; calorieCount0 . loadApplicationProperties ( ) ; Food food0 = new Food ( 0 ) ; frequentFoodList0 . getEntryForFood ( food0 ) ; Pest . getApp ( ) ; calorieCount0 . dataIsDirty ( ) ; FrequentFood frequentFood0 = new FrequentFood ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return myId ; }
void test4 ( ) throws Throwable { Class < ? > class0 = ListSelectionListener . class ; Method method0 = CalorieCountSerdser . getPopulateMethod ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Method getPopulateMethod ( Class clazz ) { Method method = ourClassToPopulateMethod . get ( clazz ) ; if ( null = = method ) { method = ReflectionUtils . findMethod ( clazz , "populateFromElement" ) ; ourClassToPopulateMethod . put ( clazz , method ) ; } return method ; }
void test0 ( ) throws Throwable { Adjustment adjustment0 = new Adjustment ( ) ; String string0 = adjustment0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { Adjustment adjustment0 = new Adjustment ( ) ; String string0 = adjustment0 . getSerializationName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSerializationName ( ) ; boolean myDirty ; int myId ; int getId ( ) { return myId ; }
void test2 ( ) throws Throwable { Adjustment adjustment0 = new Adjustment ( ) ; SimpleElement simpleElement0 = adjustment0 . toSimpleElement ( "" ) ; adjustment0 . deserializeFrom ( simpleElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { CalorieCountData calorieCountData0 = new CalorieCountData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEntryName ( ) { return "myData" ; }
void test0 ( ) throws Throwable { Budget budget0 = new Budget ( ) ; int int0 = budget0 . getDailyAmount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDailyAmount ( ) { double hours = ( double ) myEndOfDay . getHour ( ) - myStartOfDay . getHour ( ) ; double minutes = ( double ) myEndOfDay . getMinute ( ) - myStartOfDay . getMinute ( ) ; hours = hours + minutes / 60 ; double amt = ( ( double ) myCaloriesPerHour ) * hours ; return ( int ) amt ; }
void test1 ( ) throws Throwable { Budget budget0 = new Budget ( ) ; TimeOfDay timeOfDay0 = new TimeOfDay ( ) ; SimpleElement simpleElement0 = timeOfDay0 . createSerializationElement ( ) ; budget0 . deserializeFrom ( simpleElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long toTime ( ) { Calendar cal = Calendar . getInstance ( ) ; cal . set ( Calendar . HOUR_OF_DAY , getHour ( ) ) ; cal . set ( Calendar . MINUTE , getMinute ( ) ) ; return cal . getTimeInMillis ( ) ; }
void test2 ( ) throws Throwable { Budget budget0 = new Budget ( ) ; String string0 = budget0 . getSerializationName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSerializationName ( ) ; boolean myDirty ; int myId ; int getId ( ) { return myId ; }
void test3 ( ) throws Throwable { Budget budget0 = new Budget ( ) ; int int0 = budget0 . getBudgetUpToNow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBudgetUpToNow ( ) { return getData ( ) . getBudget ( ) . getBudgetUpToNow ( ) ; }
void test4 ( ) throws Throwable { Budget budget0 = new Budget ( ) ; budget0 . copyFrom ( ( ApplicationDataElement ) budget0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getCaloriesPerHour ( ) { return myCaloriesPerHour ; }
void test5 ( ) throws Throwable { Budget budget0 = new Budget ( ) ; budget0 . setCaloriesPerHour ( ( double ) 1368L ) ; int int0 = budget0 . getBudgetUpToNow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getCaloriesPerHour ( ) { return myCaloriesPerHour ; }
void test6 ( ) throws Throwable { System . setCurrentTimeMillis ( 60021L ) ; Budget budget0 = new Budget ( ) ; budget0 . setCaloriesPerHour ( ( double ) 60021L ) ; int int0 = budget0 . getBudgetUpToNow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getCaloriesPerHour ( ) { return myCaloriesPerHour ; }
void test0 ( ) throws Throwable { TimeOfDay timeOfDay0 = new TimeOfDay ( ( - 171L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long toTime ( ) { Calendar cal = Calendar . getInstance ( ) ; cal . set ( Calendar . HOUR_OF_DAY , getHour ( ) ) ; cal . set ( Calendar . MINUTE , getMinute ( ) ) ; return cal . getTimeInMillis ( ) ; }
void test1 ( ) throws Throwable { TimeOfDay timeOfDay0 = new TimeOfDay ( 0 , 0 ) ; int int0 = timeOfDay0 . minutesSince ( timeOfDay0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long toTime ( ) { Calendar cal = Calendar . getInstance ( ) ; cal . set ( Calendar . HOUR_OF_DAY , getHour ( ) ) ; cal . set ( Calendar . MINUTE , getMinute ( ) ) ; return cal . getTimeInMillis ( ) ; }
void test3 ( ) throws Throwable { TimeOfDay timeOfDay0 = new TimeOfDay ( ( - 171L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long toTime ( ) { Calendar cal = Calendar . getInstance ( ) ; cal . set ( Calendar . HOUR_OF_DAY , getHour ( ) ) ; cal . set ( Calendar . MINUTE , getMinute ( ) ) ; return cal . getTimeInMillis ( ) ; }
void test4 ( ) throws Throwable { TimeOfDay timeOfDay0 = new TimeOfDay ( ) ; timeOfDay0 . setTime ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMinute ( ) { return myMinute ; }
void test5 ( ) throws Throwable { TimeOfDay timeOfDay0 = new TimeOfDay ( ) ; SimpleElement simpleElement0 = timeOfDay0 . createSerializationElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long toTime ( ) { Calendar cal = Calendar . getInstance ( ) ; cal . set ( Calendar . HOUR_OF_DAY , getHour ( ) ) ; cal . set ( Calendar . MINUTE , getMinute ( ) ) ; return cal . getTimeInMillis ( ) ; }
void test6 ( ) throws Throwable { TimeOfDay timeOfDay0 = new TimeOfDay ( 15 , 15 ) ; String string0 = timeOfDay0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long toTime ( ) { Calendar cal = Calendar . getInstance ( ) ; cal . set ( Calendar . HOUR_OF_DAY , getHour ( ) ) ; cal . set ( Calendar . MINUTE , getMinute ( ) ) ; return cal . getTimeInMillis ( ) ; }
void test7 ( ) throws Throwable { TimeOfDay timeOfDay0 = new TimeOfDay ( ( - 171L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long toTime ( ) { Calendar cal = Calendar . getInstance ( ) ; cal . set ( Calendar . HOUR_OF_DAY , getHour ( ) ) ; cal . set ( Calendar . MINUTE , getMinute ( ) ) ; return cal . getTimeInMillis ( ) ; }
void test8 ( ) throws Throwable { TimeOfDay timeOfDay0 = new TimeOfDay ( 1629L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long toTime ( ) { Calendar cal = Calendar . getInstance ( ) ; cal . set ( Calendar . HOUR_OF_DAY , getHour ( ) ) ; cal . set ( Calendar . MINUTE , getMinute ( ) ) ; return cal . getTimeInMillis ( ) ; }
void test0 ( ) throws Throwable { Meal meal0 = new Meal ( ) ; SimpleElement simpleElement0 = meal0 . createSerializationElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSerializationName ( ) ; boolean myDirty ; int myId ; int getId ( ) { return myId ; }
void test1 ( ) throws Throwable { Meal meal0 = new Meal ( ) ; String string0 = meal0 . getEntryName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEntryName ( ) { return "myData" ; }
void test2 ( ) throws Throwable { Food food0 = new Food ( 0 , "#AY" , 0 , "#AY" ) ; MealList mealList0 = new MealList ( ) ; Meal meal0 = mealList0 . createMeal ( food0 ) ; Meal meal1 = ( Meal ) meal0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFoodId ( ) { return myFoodId ; }
void test3 ( ) throws Throwable { Meal meal0 = new Meal ( ) ; meal0 . updateFrom ( meal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFoodId ( ) { return myFoodId ; }
void test6 ( ) throws Throwable { Meal meal0 = new Meal ( ) ; Food food0 = new Food ( ( - 12 ) , "meal" , ( - 12 ) , "meal" ) ; meal0 . setFood ( food0 ) ; String string0 = meal0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFoodId ( ) { return myFoodId ; }
void test7 ( ) throws Throwable { Food food0 = new Food ( 0 , "#AY" , 0 , "#AY" ) ; MealList mealList0 = new MealList ( ) ; mealList0 . createMeal ( food0 ) ; int int0 = mealList0 . total ( ( long ) 0 , 3607L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int total ( long start , long end ) { List list = getDataElements ( ) ; int size = list . size ( ) ; int index ; index = findAtOrAfter ( start , list ) ; int total = 0 ; if ( index > = 0 ) { long ctime = - 1 ; while ( index < size & & ctime < end ) { Meal meal = ( Meal ) list . get ( index ) ; index + + ; ctime = meal . getTime ( ) ; total = total + meal . getFood ( ) . getCalories ( ) ; } } return total ; }
void test8 ( ) throws Throwable { Meal meal0 = new Meal ( ) ; Meal . MealComparator meal_MealComparator0 = new Meal . MealComparator ( ) ; int int0 = meal_MealComparator0 . compare ( ( Object ) null , ( Object ) meal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test9 ( ) throws Throwable { Meal . MealComparator meal_MealComparator0 = new Meal . MealComparator ( ) ; int int0 = meal_MealComparator0 . compare ( ( Object ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test10 ( ) throws Throwable { Meal meal0 = new Meal ( ) ; Meal . MealComparator meal_MealComparator0 = new Meal . MealComparator ( ) ; int int0 = meal_MealComparator0 . compare ( ( Object ) meal0 , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test11 ( ) throws Throwable { Food food0 = new Food ( 0 , "#AY" , 0 , "#AY" ) ; MealList mealList0 = new MealList ( ) ; mealList0 . createMeal ( food0 ) ; int int0 = mealList0 . total ( 3607L , ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int total ( long start , long end ) { List list = getDataElements ( ) ; int size = list . size ( ) ; int index ; index = findAtOrAfter ( start , list ) ; int total = 0 ; if ( index > = 0 ) { long ctime = - 1 ; while ( index < size & & ctime < end ) { Meal meal = ( Meal ) list . get ( index ) ; index + + ; ctime = meal . getTime ( ) ; total = total + meal . getFood ( ) . getCalories ( ) ; } } return total ; }
void test12 ( ) throws Throwable { Food food0 = new Food ( 0 , "#AY" , 0 , "#AY" ) ; MealList mealList0 = new MealList ( ) ; mealList0 . createMeal ( food0 ) ; List < Meal > list0 = mealList0 . getEntriesFor ( ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test13 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; Food food0 = new Food ( 35 , "u" , 35 , "u" ) ; Meal meal0 = mealList0 . createMeal ( food0 ) ; SimpleElement simpleElement0 = meal0 . createSerializationElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test14 ( ) throws Throwable { Meal meal0 = new Meal ( ) ; String string0 = meal0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return myDescription ; }
void test0 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; List < Meal > list0 = mealList0 . getMeals ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test1 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; String string0 = mealList0 . getSerializationElementName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSerializationElementName ( ) ; E createListElement ( String name ) ; int myNextId ; / * * * A map from meal ID to the value that can be used with methods like { @link #get ( int ) }
void test2 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; Meal meal0 = ( Meal ) mealList0 . createListElement ( " > 'K\" ? \"# { u^q / " ) ; mealList0 . add ( 0 , meal0 ) ; int int0 = mealList0 . getFirstIndexAtOrAfter ( ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFirstIndexAtOrAfter ( long time ) { TimeComparator comp = new TimeComparator ( ) ; int index = Collections . binarySearch ( myList , time , comp ) ; if ( index < 0 ) { index = - 1 * index - 1 ; index + + ; } if ( index > = myList . size ( ) ) return - 1 ; else return index ; }
void test3 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; Food food0 = new Food ( 0 , "" , 0 , "" ) ; Meal meal0 = mealList0 . createMeal ( ( long ) 0 , food0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test4 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; int int0 = mealList0 . total ( 356L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int total ( long start , long end ) { List list = getDataElements ( ) ; int size = list . size ( ) ; int index ; index = findAtOrAfter ( start , list ) ; int total = 0 ; if ( index > = 0 ) { long ctime = - 1 ; while ( index < size & & ctime < end ) { Meal meal = ( Meal ) list . get ( index ) ; index + + ; ctime = meal . getTime ( ) ; total = total + meal . getFood ( ) . getCalories ( ) ; } } return total ; }
void test5 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; SimpleElement simpleElement0 = mealList0 . createSerializationElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test6 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; MealList mealList1 = new MealList ( ( IdApplicationDataList < Meal > ) mealList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MealList ( IdApplicationDataList < Meal > list ) { initialize ( list ) ; }
void test10 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; mealList0 . setMeals ( ( List ) mealList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSerializationElementName ( ) ; E createListElement ( String name ) ; int myNextId ; / * * * A map from meal ID to the value that can be used with methods like { @link #get ( int ) }
void test11 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; String string0 = mealList0 . getEntryName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEntryName ( ) { return "myData" ; }
void test12 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; List < Integer > list0 = mealList0 . getIndiciesFor ( ( - 1476L ) , ( long ) 0 ) ; FoodList foodList0 = new FoodList ( list0 ) ; mealList0 . rebuildTransients ( foodList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test14 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; FoodList foodList0 = new FoodList ( ) ; Food food0 = foodList0 . createFood ( " } " , 0 , " } " ) ; Meal meal0 = mealList0 . createMeal ( ( long ) 0 , food0 ) ; mealList0 . removeMeal ( meal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test15 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; Food food0 = new Food ( 0 , "" , 0 , "" ) ; mealList0 . createMeal ( ( long ) 0 , food0 ) ; int int0 = mealList0 . total ( ( long ) 0 , ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test16 ( ) throws Throwable { System . setCurrentTimeMillis ( ( - 1874L ) ) ; MealList mealList0 = new MealList ( ) ; Food food0 = new Food ( 1042 ) ; mealList0 . createMeal ( food0 ) ; int int0 = mealList0 . total ( ( - 1476L ) , ( - 1476L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test17 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; Food food0 = new Food ( 0 , "" , 0 , "" ) ; mealList0 . createMeal ( ( long ) 0 , food0 ) ; List < Meal > list0 = mealList0 . getEntriesFor ( ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test18 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; List < Integer > list0 = mealList0 . getIndiciesFor ( 0L , ( - 806L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test19 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; Meal meal0 = mealList0 . getFirstEntryAtOrAfter ( ( long ) 1042 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Meal getFirstEntryAtOrAfter ( long time ) { TimeComparator comp = new TimeComparator ( ) ; int index = Collections . binarySearch ( myList , time , comp ) ; if ( index < 0 ) { index = - 1 * index - 1 ; index + + ; } Meal meal = null ; if ( index < myList . size ( ) ) { meal = ( Meal ) myList . get ( index ) ; } return meal ; }
void test20 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; int int0 = mealList0 . getFirstIndexAtOrAfter ( 808L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFirstIndexAtOrAfter ( long time ) { TimeComparator comp = new TimeComparator ( ) ; int index = Collections . binarySearch ( myList , time , comp ) ; if ( index < 0 ) { index = - 1 * index - 1 ; index + + ; } if ( index > = myList . size ( ) ) return - 1 ; else return index ; }
void test21 ( ) throws Throwable { System . setCurrentTimeMillis ( ( - 1874L ) ) ; MealList mealList0 = new MealList ( ) ; Food food0 = new Food ( 1042 ) ; mealList0 . createMeal ( food0 ) ; List < Integer > list0 = mealList0 . getIndiciesFor ( ( - 1476L ) , ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test22 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; Food food0 = new Food ( 0 , "" , 0 , "" ) ; mealList0 . createMeal ( ( long ) 0 , food0 ) ; int int0 = mealList0 . findIndexAtOrBefore ( ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test23 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; Food food0 = new Food ( 0 , "" , 0 , "" ) ; mealList0 . createMeal ( ( long ) 0 , food0 ) ; int int0 = mealList0 . findIndexAtOrAfter ( ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test24 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; int int0 = mealList0 . findIndexAtOrAfter ( ( - 1651L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int findIndexAtOrAfter ( long time ) { int index = Collections . binarySearch ( myList , time , FinderComparator . COMPARATOR ) ; if ( index < 0 ) { index = ( - 1 * index ) - 1 ; if ( index > = myList . size ( ) ) index = myList . size ( ) - 1 ; } return index ; }
void test25 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; Meal meal0 = ( Meal ) mealList0 . createListElement ( "mealList" ) ; mealList0 . add ( meal0 ) ; mealList0 . update ( meal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test0 ( ) throws Throwable { BeanPropertyAccessor beanPropertyAccessor0 = new BeanPropertyAccessor ( ( PropertyDescriptor ) null ) ; Object object0 = new Object ( ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ( String ) null ) ; beanPropertyAccessor0 . populateProperty ( object0 , ( Element ) iIOMetadataNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void populateProperty ( Object bean , Element node ) { if ( null = = node ) return ; String value = XMLUtils . getValue ( node ) ; if ( null = = value ) return ; BeanUtils . setPrimitiveProperty ( bean , value , myDescriptor ) ; }
void test0 ( ) throws Throwable { NameValues nameValues0 = new NameValues ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" NameValues ( Map < String , Object > nameValues ) { initialize ( nameValues ) ; }
void test1 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; NameValues nameValues0 = new NameValues ( ( Map < String , Object > ) hashMap0 ) ; LinkedList < List < String > > linkedList0 = new LinkedList < List < String > > ( ) ; hashMap0 . put ( "" , ( Object ) linkedList0 ) ; String string0 = nameValues0 . getValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( Element element ) { NodeList nodeList = element . getChildNodes ( ) ; for ( int i = 0 ; i < nodeList . getLength ( ) ; i + + ) { Node child = nodeList . item ( i ) ; if ( child . getNodeType ( ) ! = Node . TEXT_NODE ) continue ; Text text = ( Text ) child ; return text . getNodeValue ( ) ; } return null ; }
void test2 ( ) throws Throwable { NameValues nameValues0 = new NameValues ( ) ; Collection < String > collection0 = nameValues0 . getNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test3 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; NameValues nameValues0 = new NameValues ( ( Map < String , Object > ) hashMap0 ) ; String string0 = nameValues0 . getValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( Element element ) { NodeList nodeList = element . getChildNodes ( ) ; for ( int i = 0 ; i < nodeList . getLength ( ) ; i + + ) { Node child = nodeList . item ( i ) ; if ( child . getNodeType ( ) ! = Node . TEXT_NODE ) continue ; Text text = ( Text ) child ; return text . getNodeValue ( ) ; } return null ; }
void test4 ( ) throws Throwable { NameValues nameValues0 = new NameValues ( ) ; nameValues0 . addValue ( "l" , "l" ) ; String string0 = nameValues0 . getValue ( "l" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( Element element ) { NodeList nodeList = element . getChildNodes ( ) ; for ( int i = 0 ; i < nodeList . getLength ( ) ; i + + ) { Node child = nodeList . item ( i ) ; if ( child . getNodeType ( ) ! = Node . TEXT_NODE ) continue ; Text text = ( Text ) child ; return text . getNodeValue ( ) ; } return null ; }
void test5 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; NameValues nameValues0 = new NameValues ( ( Map < String , Object > ) hashMap0 ) ; hashMap0 . put ( "" , ( Object ) hashMap0 ) ; nameValues0 . addValue ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test7 ( ) throws Throwable { HashMap < String , Object > hashMap0 = new HashMap < String , Object > ( ) ; NameValues nameValues0 = new NameValues ( ( Map < String , Object > ) hashMap0 ) ; LinkedList < List < String > > linkedList0 = new LinkedList < List < String > > ( ) ; hashMap0 . put ( "" , ( Object ) linkedList0 ) ; nameValues0 . addValue ( "" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { Class < ? > class0 = String . class ; BeanXml beanXml0 = new BeanXml ( ( String ) null , ( Class ) class0 ) ; String string0 = beanXml0 . getBeanName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBeanName ( ) { return myInfo . getBeanDescriptor ( ) . getName ( ) ; }
void test1 ( ) throws Throwable { Class < ? > class0 = Integer . class ; BeanXml beanXml0 = new BeanXml ( "z { `7Py'v" , ( Class ) class0 ) ; Class < Object > class1 = beanXml0 . getBeanClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getBeanClass ( ) { return myBeanClass ; }
void test2 ( ) throws Throwable { Class < ? > class0 = String . class ; BeanXml beanXml0 = new BeanXml ( ( String ) null , ( Class ) class0 ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ( String ) null ) ; iIOMetadataNode0 . appendChild ( ( Node ) iIOMetadataNode0 ) ; String string0 = ( String ) beanXml0 . createAndPopulate ( ( Element ) iIOMetadataNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object createAndPopulate ( Element beanElement ) throws LTSException { Object bean = BeanUtils . createInstance ( myConstructor , NO_ARGS ) ; populateBean ( bean , beanElement ) ; return bean ; }
void test2 ( ) throws Throwable { CalorieCountXml calorieCountXml0 = new CalorieCountXml ( ) ; IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "U" ) ; MealList mealList0 = new MealList ( ) ; calorieCountXml0 . populateList ( ( List ) mealList0 , ( Element ) iIOMetadataNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test3 ( ) throws Throwable { CalorieCountXml calorieCountXml0 = new CalorieCountXml ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void populateList ( List list , Element listElement ) throws LTSException { List < Element > elements = XMLUtils . getChildElements ( listElement ) ; for ( Element childElement : elements ) { Object o = elementToBean ( childElement ) ; list . add ( o ) ; } }
void test0 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; Food food0 = foodList0 . getFood ( 30 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Food getFood ( int row ) { return myFoodList . getFoodAt ( row ) ; }
void test1 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; List < Object > list0 = foodList0 . getDataElements ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test4 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; FoodList foodList0 = new FoodList ( ( List ) entryList0 ) ; Comparator < Object > comparator0 = foodList0 . getComparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Comparator getComparator ( ) ; boolean myAllowDuplicates ; List < AbstractAppData > myList ; / * * * Add an element to the list . * * < P > * The method will insert the new element into the list at the sorted position , * as determined by { @link #getComparator ( ) }
void test6 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; String string0 = foodList0 . getSerializationElementName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSerializationElementName ( ) ; E createListElement ( String name ) ; int myNextId ; / * * * A map from meal ID to the value that can be used with methods like { @link #get ( int ) }
void test7 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; FoodList foodList0 = new FoodList ( ( List ) entryList0 ) ; Food food0 = ( Food ) foodList0 . createListElement ( " ( OrEjEy * ] / ( 3k1Bj < | { " ) ; int int0 = foodList0 . findEquivalent ( food0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int findEquivalent ( Food food ) { int size = size ( ) ; for ( int index = 0 ; index < size ; index + + ) { Food f = getFoodAt ( index ) ; if ( food . equals ( f ) ) return index ; } return - 1 ; }
void test8 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; Food food0 = foodList0 . createFood ( "" , 872 , "" ) ; foodList0 . add ( food0 ) ; foodList0 . postDeserialize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test9 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; foodList0 . createFood ( "" , 872 , "" ) ; Food food0 = foodList0 . createFood ( "" , 3600000 , "" ) ; int int0 = foodList0 . findEquivalent ( food0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test0 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; Food food0 = foodList0 . createFood ( "" , ( - 1 ) , "" ) ; SimpleElement simpleElement0 = foodList0 . createSerializationElement ( ) ; food0 . deserializeFrom ( simpleElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCalories ( ) { return myCalories ; }
void test2 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; Food food0 = foodList0 . createFood ( "" , ( - 1 ) , "" ) ; food0 . copyFrom ( ( ApplicationDataElement ) food0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return myDescription ; }
void test4 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; Food food0 = foodList0 . createFood ( "" , ( - 1 ) , "" ) ; food0 . getEntryName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test5 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; Food food0 = foodList0 . createFood ( "" , ( - 1 ) , "" ) ; food0 . deepCopy ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test6 ( ) throws Throwable { Food food0 = new Food ( ( - 417 ) ) ; String string0 = food0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return myId ; }
void test7 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; foodList0 . createFood ( "" , ( - 1 ) , "" ) ; Food food0 = new Food ( ) ; int int0 = foodList0 . findEquivalent ( food0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test8 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; Food food0 = foodList0 . createFood ( "" , ( - 1 ) , "" ) ; foodList0 . removeFood ( food0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test9 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; foodList0 . createFood ( "" , ( - 1 ) , "" ) ; Food food0 = new Food ( 543 ) ; foodList0 . removeFood ( food0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return myId ; }
void test10 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; foodList0 . createFood ( "" , ( - 1 ) , "" ) ; Food food0 = new Food ( 543 ) ; food0 . setDescription ( "" ) ; foodList0 . removeFood ( food0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; int int0 = entryList0 . getTotalUpToNow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTotalUpToNow ( ) { long start = DateUtil . startOfTodayTime ( ) ; long end = DateUtil . startOfTomorrow ( ) - 1 ; return totalCalories ( start , end ) ; }
void test2 ( ) throws Throwable { boolean boolean0 = EntryList . EntryTypes . isValidName ( " ( t + ; ds ( ZN94 + * Dt" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { boolean boolean0 = EntryList . EntryTypes . isValidName ( "Adjustment" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; MealList mealList0 = new MealList ( ) ; Food food0 = new Food ( 1 ) ; Meal meal0 = mealList0 . createMeal ( ( long ) 1 , food0 ) ; SimpleElement simpleElement0 = meal0 . createSerializationElement ( ) ; entryList0 . deserializeFrom ( simpleElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test5 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; Meal meal0 = ( Meal ) entryList0 . createListElement ( "meal" ) ; entryList0 . add ( ( Entry ) meal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int totalCalories ( long start , long end ) { int total = 0 ; for ( Entry entry : this ) { if ( entry . getTime ( ) > = start & & entry . getTime ( ) < = end ) total + = entry . getCalories ( ) ; } return total ; }
void test6 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; Meal meal0 = new Meal ( ) ; SimpleElement simpleElement0 = meal0 . createSerializationElement ( ) ; Meal meal1 = ( Meal ) entryList0 . deserializeChildFrom ( simpleElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return myData . equals ( o ) ; }
void test8 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; Adjustment adjustment0 = new Adjustment ( ) ; entryList0 . add ( ( Entry ) adjustment0 ) ; SimpleElement simpleElement0 = entryList0 . createSerializationElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test9 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; SimpleElement simpleElement0 = entryList0 . createSerializationElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test10 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; Meal meal0 = new Meal ( ) ; SimpleElement simpleElement0 = meal0 . createSerializationElement ( ) ; Meal meal1 = ( Meal ) entryList0 . createChildElement ( simpleElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDirty ( ) throws ApplicationException { return isDirty ( ) ; }
void test12 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; Meal meal0 = ( Meal ) entryList0 . createListElement ( "29" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" E createListElement ( String name ) ; int myNextId ; / * * * A map from meal ID to the value that can be used with methods like { @link #get ( int ) }
void test13 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; Adjustment adjustment0 = ( Adjustment ) entryList0 . createListElement ( "Adjustment" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCalories ( ) { return myCalories ; }
void test14 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; Adjustment adjustment0 = new Adjustment ( ) ; entryList0 . add ( ( Entry ) adjustment0 ) ; boolean boolean0 = entryList0 . update ( adjustment0 , adjustment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void update ( Object data , int location ) { Object o = myList . get ( location ) ; myList . set ( location , data ) ; myHelper . fireUpdate ( location , o ) ; }
void test15 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; Adjustment adjustment0 = new Adjustment ( ) ; boolean boolean0 = entryList0 . update ( adjustment0 , adjustment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void update ( Object data , int location ) { Object o = myList . get ( location ) ; myList . set ( location , data ) ; myHelper . fireUpdate ( location , o ) ; }
void test16 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; Adjustment adjustment0 = new Adjustment ( ) ; entryList0 . add ( ( Entry ) adjustment0 ) ; int int0 = entryList0 . totalCalories ( ( - 756L ) , ( - 756L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int totalCalories ( long start , long end ) { int total = 0 ; for ( Entry entry : this ) { if ( entry . getTime ( ) > = start & & entry . getTime ( ) < = end ) total + = entry . getCalories ( ) ; } return total ; }
void test17 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; Adjustment adjustment0 = new Adjustment ( ) ; entryList0 . add ( ( Entry ) adjustment0 ) ; int int0 = entryList0 . totalCalories ( ( long ) 1 , ( long ) 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int totalCalories ( long start , long end ) { int total = 0 ; for ( Entry entry : this ) { if ( entry . getTime ( ) > = start & & entry . getTime ( ) < = end ) total + = entry . getCalories ( ) ; } return total ; }
void test18 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; Meal meal0 = new Meal ( ) ; entryList0 . add ( ( Entry ) meal0 ) ; boolean boolean0 = entryList0 . update ( meal0 , meal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test19 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; Meal meal0 = new Meal ( ) ; boolean boolean0 = entryList0 . update ( meal0 , meal0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test0 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; MealSublist mealSublist0 = new MealSublist ( entryList0 ) ; EntryList entryList1 = mealSublist0 . getEntryList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test1 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; Food food0 = new Food ( ( - 1102 ) , "" , 875 , "" ) ; Meal meal0 = new Meal ( ( - 1102 ) , food0 , 1513L ) ; entryList0 . add ( ( Entry ) meal0 ) ; MealSublist mealSublist0 = new MealSublist ( entryList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test2 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; Adjustment adjustment0 = new Adjustment ( ) ; entryList0 . add ( ( Entry ) adjustment0 ) ; MealSublist mealSublist0 = new MealSublist ( entryList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test1 ( ) throws Throwable { Adjustment adjustment0 = new Adjustment ( ) ; adjustment0 . copyFrom ( ( ApplicationDataElement ) adjustment0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return myDescription ; }
void test0 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( "B ) X" , 1226 ) ; SimpleElement simpleElement1 = ConvertOneDotTwoToOneDotThree . performConvert ( simpleElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleElement performConvert ( SimpleElement elem ) throws ApplicationException { ConvertOneDotOneToOneDotTwo con = new ConvertOneDotOneToOneDotTwo ( ) ; return con . convert ( elem ) ; }
void test0 ( ) throws Throwable { ConvertOneDotZeroToOneDotOne convertOneDotZeroToOneDotOne0 = new ConvertOneDotZeroToOneDotOne ( ) ; CalorieCountData calorieCountData0 = new CalorieCountData ( ) ; Budget budget0 = calorieCountData0 . getBudget ( ) ; TimeOfDay timeOfDay0 = budget0 . getEndOfDay ( ) ; SimpleElement simpleElement0 = timeOfDay0 . createSerializationElement ( ) ; convertOneDotZeroToOneDotOne0 . convert ( simpleElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long toTime ( ) { Calendar cal = Calendar . getInstance ( ) ; cal . set ( Calendar . HOUR_OF_DAY , getHour ( ) ) ; cal . set ( Calendar . MINUTE , getMinute ( ) ) ; return cal . getTimeInMillis ( ) ; }
void test0 ( ) throws Throwable { SimpleElement simpleElement0 = new SimpleElement ( "r - a0LmW' , a" , 522L ) ; SimpleElement simpleElement1 = ConvertOneDotOneToOneDotTwo . performConvert ( simpleElement0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIntValue ( ) { String s = getValue ( ) ; if ( null = = s ) return - 1 ; else return Integer . parseInt ( s ) ; }
void test0 ( ) throws Throwable { FrequentFood frequentFood0 = new FrequentFood ( ) ; SimpleElement simpleElement0 = frequentFood0 . createSerializationElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test1 ( ) throws Throwable { Food food0 = new Food ( ( - 38 ) , " = X" , ( - 38 ) , " = X" ) ; FrequentFood frequentFood0 = new FrequentFood ( ( - 38 ) , food0 ) ; String string0 = frequentFood0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFoodId ( ) { return myFoodId ; }
void test2 ( ) throws Throwable { FrequentFood frequentFood0 = new FrequentFood ( ) ; boolean boolean0 = frequentFood0 . isLocked ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocked ( ) { return locked ( ) ; }
void test3 ( ) throws Throwable { FrequentFood frequentFood0 = new FrequentFood ( ) ; String string0 = frequentFood0 . getSerializationName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSerializationName ( ) ; boolean myDirty ; int myId ; int getId ( ) { return myId ; }
void test4 ( ) throws Throwable { FrequentFood frequentFood0 = new FrequentFood ( ) ; frequentFood0 . setLocked ( true ) ; frequentFood0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocked ( ) { return locked ( ) ; }
void test5 ( ) throws Throwable { FrequentFood frequentFood0 = new FrequentFood ( ) ; String string0 = frequentFood0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { FrequentFoodList frequentFoodList0 = new FrequentFoodList ( ) ; Meal meal0 = new Meal ( ) ; SimpleElement simpleElement0 = meal0 . createSerializationElement ( ) ; frequentFoodList0 . deserializeFrom ( simpleElement0 ) ; frequentFoodList0 . postDeserialize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test1 ( ) throws Throwable { FrequentFoodList frequentFoodList0 = new FrequentFoodList ( ) ; String string0 = frequentFoodList0 . getSerializationElementName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSerializationElementName ( ) ; E createListElement ( String name ) ; int myNextId ; / * * * A map from meal ID to the value that can be used with methods like { @link #get ( int ) }
void test2 ( ) throws Throwable { FrequentFoodList frequentFoodList0 = new FrequentFoodList ( ) ; Food food0 = new Food ( 0 ) ; frequentFoodList0 . createFrequentFood ( food0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test3 ( ) throws Throwable { FrequentFoodList frequentFoodList0 = new FrequentFoodList ( ) ; frequentFoodList0 . setFrequentFoods ( ( List < FrequentFood > ) frequentFoodList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test6 ( ) throws Throwable { FrequentFoodList frequentFoodList0 = new FrequentFoodList ( ) ; Food food0 = new Food ( ) ; frequentFoodList0 . findOrCreate ( food0 ) ; frequentFoodList0 . removeEntry ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test8 ( ) throws Throwable { FrequentFoodList frequentFoodList0 = new FrequentFoodList ( ) ; Food food0 = new Food ( ) ; frequentFoodList0 . findOrCreate ( food0 ) ; frequentFoodList0 . postDeserialize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test10 ( ) throws Throwable { FrequentFoodList frequentFoodList0 = new FrequentFoodList ( ) ; Meal meal0 = new Meal ( ) ; SimpleElement simpleElement0 = meal0 . createSerializationElement ( ) ; frequentFoodList0 . deserializeFrom ( simpleElement0 ) ; frequentFoodList0 . resetAllCounts ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test11 ( ) throws Throwable { FrequentFoodList frequentFoodList0 = new FrequentFoodList ( ) ; Food food0 = new Food ( ) ; FrequentFood frequentFood0 = frequentFoodList0 . findOrCreate ( food0 ) ; FrequentFood frequentFood1 = frequentFoodList0 . findOrCreate ( food0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test0 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ) ; EntryList entryList0 = new EntryList ( ) ; foodList0 . copyFrom ( ( ApplicationDataElement ) entryList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test2 ( ) throws Throwable { FrequentFoodList frequentFoodList0 = new FrequentFoodList ( ) ; boolean boolean0 = frequentFoodList0 . isRectified ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRectified ( ) ; void setRectified ( boolean rectified ) ; boolean rectify ( CalorieCountData data ) ; }
void test3 ( ) throws Throwable { PropertyListAdaptor propertyListAdaptor0 = new PropertyListAdaptor ( ) ; propertyListAdaptor0 . add ( ( KeyValue ) null ) ; propertyListAdaptor0 . removeNulls ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test4 ( ) throws Throwable { PropertyListAdaptor propertyListAdaptor0 = new PropertyListAdaptor ( ) ; propertyListAdaptor0 . setRectified ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRectified ( ) ; void setRectified ( boolean rectified ) ; boolean rectify ( CalorieCountData data ) ; }
void test5 ( ) throws Throwable { PropertyListAdaptor propertyListAdaptor0 = new PropertyListAdaptor ( ) ; propertyListAdaptor0 . initialize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test6 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; boolean boolean0 = mealList0 . isDirty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test8 ( ) throws Throwable { MealList mealList0 = new MealList ( ) ; Food food0 = new Food ( ( - 871 ) ) ; mealList0 . createMeal ( food0 ) ; mealList0 . postDeserialize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test9 ( ) throws Throwable { EntryList entryList0 = new EntryList ( ) ; ReallyCaselessMap < DataList < Object > > reallyCaselessMap0 = new ReallyCaselessMap < DataList < Object > > ( ) ; entryList0 . continueDeepCopy ( ( Map ) reallyCaselessMap0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test0 ( ) throws Throwable { MethodCall methodCall0 = new MethodCall ( 14 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getShortClass ( ) { String s = getCaller ( ) . getClassName ( ) ; int index = s . lastIndexOf ( ' . ' ) ; if ( - 1 ! = index ) { s = s . substring ( index + 1 ) ; } return s ; }
void test1 ( ) throws Throwable { MethodCall methodCall0 = new MethodCall ( 15 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAncestorOf ( MethodCall call ) { return - 1 = = divergesFrom ( call ) ; }
void test2 ( ) throws Throwable { MethodCall methodCall0 = new MethodCall ( 14 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAncestorOf ( MethodCall call ) { return - 1 = = divergesFrom ( call ) ; }
void test3 ( ) throws Throwable { MethodCall methodCall0 = new MethodCall ( 15 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMethodName ( ) { return getCaller ( ) . getMethodName ( ) ; }
void test4 ( ) throws Throwable { EventLog eventLog0 = new EventLog ( ) ; String string0 = eventLog0 . getTranscript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTranscript ( ) { / / TODO Auto - generated method stub return null ; }
void test0 ( ) throws Throwable { Event event0 = new Event ( ) ; long long0 = event0 . getTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { long time = myDateField . getDateInMillis ( ) ; time = DateUtil . clearTime ( time ) ; Calendar cal = Calendar . getInstance ( ) ; cal . setTimeInMillis ( time ) ; String s = myTimeField . getText ( ) ; long timeOfDay = DateUtil . parseTimeString ( s ) ; Calendar timeCal = Calendar . getInstance ( ) ; timeCal . setTimeInMillis ( timeOfDay ) ; cal . set ( cal . get ( Calendar . YEAR ) , cal . get ( Calendar . MONTH ) , cal . get ( Calendar . DAY_OF_MONTH ) , timeCal . get ( Calendar . HOUR_OF_DAY ) , timeCal . get ( Calendar . MINUTE ) , timeCal . get ( Calendar . SECOND ) ) ; long timeAndDate = cal . getTimeInMillis ( ) ; return timeAndDate ; }
void test1 ( ) throws Throwable { Event event0 = new Event ( ) ; String string0 = event0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { Priority priority0 = new Priority ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { int int0 = Priority . stringToPriority ( "Lowest" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int stringToPriority ( String s ) { Integer i = ( Integer ) getMap ( ) . get ( s ) ; if ( null = = i ) { String msg = "Unrecognized priority string : " + s ; throw new IllegalArgumentException ( msg ) ; } return i . intValue ( ) ; }
void test3 ( ) throws Throwable { String string0 = Priority . priorityToString ( 39 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String priorityToString ( int priority ) { String s ; if ( priority > HIGHEST ) { String msg = "Priority code is greater than highest value . " + "Max value : " + HIGHEST + " , supplied value : " + priority ; throw new IllegalArgumentException ( msg ) ; } else if ( priority = = HIGHEST ) s = STR_HIGHEST ; else if ( priority > NORMAL ) s = STR_HIGH ; else if ( priority > LOW ) s = STR_NORMAL ; else if ( priority > LOWEST ) s = STR_LOW ; else if ( priority = = LOWEST ) s = STR_LOWEST ; else { String msg = "Priority code is less than minimum value . " + "Min value : " + LOWEST + " , supplied vlaue : " + priority ; throw new IllegalArgumentException ( msg ) ; } return s ; }
void test5 ( ) throws Throwable { String string0 = Priority . priorityToString ( 100 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String priorityToString ( int priority ) { String s ; if ( priority > HIGHEST ) { String msg = "Priority code is greater than highest value . " + "Max value : " + HIGHEST + " , supplied value : " + priority ; throw new IllegalArgumentException ( msg ) ; } else if ( priority = = HIGHEST ) s = STR_HIGHEST ; else if ( priority > NORMAL ) s = STR_HIGH ; else if ( priority > LOW ) s = STR_NORMAL ; else if ( priority > LOWEST ) s = STR_LOW ; else if ( priority = = LOWEST ) s = STR_LOWEST ; else { String msg = "Priority code is less than minimum value . " + "Min value : " + LOWEST + " , supplied vlaue : " + priority ; throw new IllegalArgumentException ( msg ) ; } return s ; }
void test6 ( ) throws Throwable { String string0 = Priority . priorityToString ( 52 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String priorityToString ( int priority ) { String s ; if ( priority > HIGHEST ) { String msg = "Priority code is greater than highest value . " + "Max value : " + HIGHEST + " , supplied value : " + priority ; throw new IllegalArgumentException ( msg ) ; } else if ( priority = = HIGHEST ) s = STR_HIGHEST ; else if ( priority > NORMAL ) s = STR_HIGH ; else if ( priority > LOW ) s = STR_NORMAL ; else if ( priority > LOWEST ) s = STR_LOW ; else if ( priority = = LOWEST ) s = STR_LOWEST ; else { String msg = "Priority code is less than minimum value . " + "Min value : " + LOWEST + " , supplied vlaue : " + priority ; throw new IllegalArgumentException ( msg ) ; } return s ; }
void test7 ( ) throws Throwable { String string0 = Priority . priorityToString ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String priorityToString ( int priority ) { String s ; if ( priority > HIGHEST ) { String msg = "Priority code is greater than highest value . " + "Max value : " + HIGHEST + " , supplied value : " + priority ; throw new IllegalArgumentException ( msg ) ; } else if ( priority = = HIGHEST ) s = STR_HIGHEST ; else if ( priority > NORMAL ) s = STR_HIGH ; else if ( priority > LOW ) s = STR_NORMAL ; else if ( priority > LOWEST ) s = STR_LOW ; else if ( priority = = LOWEST ) s = STR_LOWEST ; else { String msg = "Priority code is less than minimum value . " + "Min value : " + LOWEST + " , supplied vlaue : " + priority ; throw new IllegalArgumentException ( msg ) ; } return s ; }
void test8 ( ) throws Throwable { String string0 = Priority . priorityToString ( 15 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String priorityToString ( int priority ) { String s ; if ( priority > HIGHEST ) { String msg = "Priority code is greater than highest value . " + "Max value : " + HIGHEST + " , supplied value : " + priority ; throw new IllegalArgumentException ( msg ) ; } else if ( priority = = HIGHEST ) s = STR_HIGHEST ; else if ( priority > NORMAL ) s = STR_HIGH ; else if ( priority > LOW ) s = STR_NORMAL ; else if ( priority > LOWEST ) s = STR_LOW ; else if ( priority = = LOWEST ) s = STR_LOWEST ; else { String msg = "Priority code is less than minimum value . " + "Min value : " + LOWEST + " , supplied vlaue : " + priority ; throw new IllegalArgumentException ( msg ) ; } return s ; }
void test10 ( ) throws Throwable { int int0 = Priority . sortComparePriorities ( 52 , 1419 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int sortComparePriorities ( int p1 , int p2 ) { if ( p1 > p2 ) return - 1 ; else if ( p1 < p2 ) return 1 ; else return 0 ; }
void test11 ( ) throws Throwable { int int0 = Priority . sortComparePriorities ( 39 , 11 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int sortComparePriorities ( int p1 , int p2 ) { if ( p1 > p2 ) return - 1 ; else if ( p1 < p2 ) return 1 ; else return 0 ; }
void test12 ( ) throws Throwable { int int0 = Priority . sortComparePriorities ( 100 , 100 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int sortComparePriorities ( int p1 , int p2 ) { if ( p1 > p2 ) return - 1 ; else if ( p1 < p2 ) return 1 ; else return 0 ; }
void test1 ( ) throws Throwable { CalorieCount calorieCount0 = new CalorieCount ( ) ; boolean boolean0 = calorieCount0 . getQuestioning ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getQuestioning ( ) { return isQuestioning ( ) ; }
void test2 ( ) throws Throwable { CalorieCount calorieCount0 = ( CalorieCount ) Pest . getApp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isQuestioning ( ) { return this . isQuestioning ; }
void test3 ( ) throws Throwable { boolean boolean0 = Pest . getAlwaysOnTop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAlwaysOnTop ( ) { return ! debugDialogs ; }
void test5 ( ) throws Throwable { CalorieCount calorieCount0 = ( CalorieCount ) Pest . getApp ( ) ; calorieCount0 . processCheckPoints ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean dataIsDirty ( ) throws ApplicationException { ApplicationData data = getApplicationData ( ) ; return ( null ! = data & & data . isDirty ( ) ) ; }
void test6 ( ) throws Throwable { CalorieCount calorieCount0 = ( CalorieCount ) Pest . getApp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkPointPresent ( ) { ImprovedFile dir = getCheckPointDirectory ( ) ; if ( ! dir . exists ( ) ) return false ; String [ ] contents = dir . list ( ) ; return ( null ! = contents & & contents . length > 0 ) ; }
void test0 ( ) throws Throwable { TimeConstants timeConstants0 = new TimeConstants ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { Long long0 = TimeConstants . toDurationValue ( "2 hours" ) ; String string0 = TimeConstants . toDurationString ( ( long ) long0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toDurationString ( long duration ) { StringBuffer sb = new StringBuffer ( ) ; if ( duration < 1000 ) { sb . append ( duration ) ; sb . append ( " msec" ) ; } else if ( duration < MSEC_PER_MINUTE ) { long chronons = duration / 1000 ; sb . append ( chronons ) ; sb . append ( " sec" ) ; } else if ( duration < MSEC_PER_HOUR ) { long ticks = duration / MSEC_PER_MINUTE ; sb . append ( ticks ) ; sb . append ( " min" ) ; } else if ( duration < MSEC_PER_DAY ) { long ticks = duration / MSEC_PER_HOUR ; sb . append ( ticks ) ; if ( ticks > 1 ) sb . append ( " hours" ) ; else sb . append ( " hour" ) ; } else if ( duration < MSEC_PER_DAY ) { long ticks = duration / MSEC_PER_DAY ; if ( ticks > 1 ) sb . append ( "days" ) ; else sb . append ( "day" ) ; } else if ( duration < MSEC_PER_YEAR ) { long ticks = duration / MSEC_PER_DAY ; sb . append ( ticks ) ; if ( ticks > 1 ) sb . append ( " days" ) ; else sb . append ( " day" ) ; } else { sb . append ( duration ) ; sb . append ( "msec" ) ; } return sb . toString ( ) ; }
void test4 ( ) throws Throwable { String string0 = TimeConstants . toDurationString ( ( - 40L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toDurationString ( long duration ) { StringBuffer sb = new StringBuffer ( ) ; if ( duration < 1000 ) { sb . append ( duration ) ; sb . append ( " msec" ) ; } else if ( duration < MSEC_PER_MINUTE ) { long chronons = duration / 1000 ; sb . append ( chronons ) ; sb . append ( " sec" ) ; } else if ( duration < MSEC_PER_HOUR ) { long ticks = duration / MSEC_PER_MINUTE ; sb . append ( ticks ) ; sb . append ( " min" ) ; } else if ( duration < MSEC_PER_DAY ) { long ticks = duration / MSEC_PER_HOUR ; sb . append ( ticks ) ; if ( ticks > 1 ) sb . append ( " hours" ) ; else sb . append ( " hour" ) ; } else if ( duration < MSEC_PER_DAY ) { long ticks = duration / MSEC_PER_DAY ; if ( ticks > 1 ) sb . append ( "days" ) ; else sb . append ( "day" ) ; } else if ( duration < MSEC_PER_YEAR ) { long ticks = duration / MSEC_PER_DAY ; sb . append ( ticks ) ; if ( ticks > 1 ) sb . append ( " days" ) ; else sb . append ( " day" ) ; } else { sb . append ( duration ) ; sb . append ( "msec" ) ; } return sb . toString ( ) ; }
void test5 ( ) throws Throwable { String string0 = TimeConstants . toDurationString ( 1149L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toDurationString ( long duration ) { StringBuffer sb = new StringBuffer ( ) ; if ( duration < 1000 ) { sb . append ( duration ) ; sb . append ( " msec" ) ; } else if ( duration < MSEC_PER_MINUTE ) { long chronons = duration / 1000 ; sb . append ( chronons ) ; sb . append ( " sec" ) ; } else if ( duration < MSEC_PER_HOUR ) { long ticks = duration / MSEC_PER_MINUTE ; sb . append ( ticks ) ; sb . append ( " min" ) ; } else if ( duration < MSEC_PER_DAY ) { long ticks = duration / MSEC_PER_HOUR ; sb . append ( ticks ) ; if ( ticks > 1 ) sb . append ( " hours" ) ; else sb . append ( " hour" ) ; } else if ( duration < MSEC_PER_DAY ) { long ticks = duration / MSEC_PER_DAY ; if ( ticks > 1 ) sb . append ( "days" ) ; else sb . append ( "day" ) ; } else if ( duration < MSEC_PER_YEAR ) { long ticks = duration / MSEC_PER_DAY ; sb . append ( ticks ) ; if ( ticks > 1 ) sb . append ( " days" ) ; else sb . append ( " day" ) ; } else { sb . append ( duration ) ; sb . append ( "msec" ) ; } return sb . toString ( ) ; }
void test6 ( ) throws Throwable { String string0 = TimeConstants . toDurationString ( 60053L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toDurationString ( long duration ) { StringBuffer sb = new StringBuffer ( ) ; if ( duration < 1000 ) { sb . append ( duration ) ; sb . append ( " msec" ) ; } else if ( duration < MSEC_PER_MINUTE ) { long chronons = duration / 1000 ; sb . append ( chronons ) ; sb . append ( " sec" ) ; } else if ( duration < MSEC_PER_HOUR ) { long ticks = duration / MSEC_PER_MINUTE ; sb . append ( ticks ) ; sb . append ( " min" ) ; } else if ( duration < MSEC_PER_DAY ) { long ticks = duration / MSEC_PER_HOUR ; sb . append ( ticks ) ; if ( ticks > 1 ) sb . append ( " hours" ) ; else sb . append ( " hour" ) ; } else if ( duration < MSEC_PER_DAY ) { long ticks = duration / MSEC_PER_DAY ; if ( ticks > 1 ) sb . append ( "days" ) ; else sb . append ( "day" ) ; } else if ( duration < MSEC_PER_YEAR ) { long ticks = duration / MSEC_PER_DAY ; sb . append ( ticks ) ; if ( ticks > 1 ) sb . append ( " days" ) ; else sb . append ( " day" ) ; } else { sb . append ( duration ) ; sb . append ( "msec" ) ; } return sb . toString ( ) ; }
void test7 ( ) throws Throwable { String string0 = TimeConstants . toDurationString ( 31535999992L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toDurationString ( long duration ) { StringBuffer sb = new StringBuffer ( ) ; if ( duration < 1000 ) { sb . append ( duration ) ; sb . append ( " msec" ) ; } else if ( duration < MSEC_PER_MINUTE ) { long chronons = duration / 1000 ; sb . append ( chronons ) ; sb . append ( " sec" ) ; } else if ( duration < MSEC_PER_HOUR ) { long ticks = duration / MSEC_PER_MINUTE ; sb . append ( ticks ) ; sb . append ( " min" ) ; } else if ( duration < MSEC_PER_DAY ) { long ticks = duration / MSEC_PER_HOUR ; sb . append ( ticks ) ; if ( ticks > 1 ) sb . append ( " hours" ) ; else sb . append ( " hour" ) ; } else if ( duration < MSEC_PER_DAY ) { long ticks = duration / MSEC_PER_DAY ; if ( ticks > 1 ) sb . append ( "days" ) ; else sb . append ( "day" ) ; } else if ( duration < MSEC_PER_YEAR ) { long ticks = duration / MSEC_PER_DAY ; sb . append ( ticks ) ; if ( ticks > 1 ) sb . append ( " days" ) ; else sb . append ( " day" ) ; } else { sb . append ( duration ) ; sb . append ( "msec" ) ; } return sb . toString ( ) ; }
void test8 ( ) throws Throwable { String string0 = TimeConstants . toDurationString ( 3600013L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toDurationString ( long duration ) { StringBuffer sb = new StringBuffer ( ) ; if ( duration < 1000 ) { sb . append ( duration ) ; sb . append ( " msec" ) ; } else if ( duration < MSEC_PER_MINUTE ) { long chronons = duration / 1000 ; sb . append ( chronons ) ; sb . append ( " sec" ) ; } else if ( duration < MSEC_PER_HOUR ) { long ticks = duration / MSEC_PER_MINUTE ; sb . append ( ticks ) ; sb . append ( " min" ) ; } else if ( duration < MSEC_PER_DAY ) { long ticks = duration / MSEC_PER_HOUR ; sb . append ( ticks ) ; if ( ticks > 1 ) sb . append ( " hours" ) ; else sb . append ( " hour" ) ; } else if ( duration < MSEC_PER_DAY ) { long ticks = duration / MSEC_PER_DAY ; if ( ticks > 1 ) sb . append ( "days" ) ; else sb . append ( "day" ) ; } else if ( duration < MSEC_PER_YEAR ) { long ticks = duration / MSEC_PER_DAY ; sb . append ( ticks ) ; if ( ticks > 1 ) sb . append ( " days" ) ; else sb . append ( " day" ) ; } else { sb . append ( duration ) ; sb . append ( "msec" ) ; } return sb . toString ( ) ; }
void test9 ( ) throws Throwable { String string0 = TimeConstants . toDurationString ( 31536000006L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toDurationString ( long duration ) { StringBuffer sb = new StringBuffer ( ) ; if ( duration < 1000 ) { sb . append ( duration ) ; sb . append ( " msec" ) ; } else if ( duration < MSEC_PER_MINUTE ) { long chronons = duration / 1000 ; sb . append ( chronons ) ; sb . append ( " sec" ) ; } else if ( duration < MSEC_PER_HOUR ) { long ticks = duration / MSEC_PER_MINUTE ; sb . append ( ticks ) ; sb . append ( " min" ) ; } else if ( duration < MSEC_PER_DAY ) { long ticks = duration / MSEC_PER_HOUR ; sb . append ( ticks ) ; if ( ticks > 1 ) sb . append ( " hours" ) ; else sb . append ( " hour" ) ; } else if ( duration < MSEC_PER_DAY ) { long ticks = duration / MSEC_PER_DAY ; if ( ticks > 1 ) sb . append ( "days" ) ; else sb . append ( "day" ) ; } else if ( duration < MSEC_PER_YEAR ) { long ticks = duration / MSEC_PER_DAY ; sb . append ( ticks ) ; if ( ticks > 1 ) sb . append ( " days" ) ; else sb . append ( " day" ) ; } else { sb . append ( duration ) ; sb . append ( "msec" ) ; } return sb . toString ( ) ; }
void test10 ( ) throws Throwable { String string0 = TimeConstants . toDurationString ( 86400000L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toDurationString ( long duration ) { StringBuffer sb = new StringBuffer ( ) ; if ( duration < 1000 ) { sb . append ( duration ) ; sb . append ( " msec" ) ; } else if ( duration < MSEC_PER_MINUTE ) { long chronons = duration / 1000 ; sb . append ( chronons ) ; sb . append ( " sec" ) ; } else if ( duration < MSEC_PER_HOUR ) { long ticks = duration / MSEC_PER_MINUTE ; sb . append ( ticks ) ; sb . append ( " min" ) ; } else if ( duration < MSEC_PER_DAY ) { long ticks = duration / MSEC_PER_HOUR ; sb . append ( ticks ) ; if ( ticks > 1 ) sb . append ( " hours" ) ; else sb . append ( " hour" ) ; } else if ( duration < MSEC_PER_DAY ) { long ticks = duration / MSEC_PER_DAY ; if ( ticks > 1 ) sb . append ( "days" ) ; else sb . append ( "day" ) ; } else if ( duration < MSEC_PER_YEAR ) { long ticks = duration / MSEC_PER_DAY ; sb . append ( ticks ) ; if ( ticks > 1 ) sb . append ( " days" ) ; else sb . append ( " day" ) ; } else { sb . append ( duration ) ; sb . append ( "msec" ) ; } return sb . toString ( ) ; }
void test0 ( ) throws Throwable { Gatherer . LocalSchedulerData gatherer_LocalSchedulerData0 = new Gatherer . LocalSchedulerData ( 21599996L , 21599996L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Gatherer ( ) { }
void test1 ( ) throws Throwable { LinkedBlockingQueue < Integer > linkedBlockingQueue0 = new LinkedBlockingQueue < Integer > ( ) ; Gatherer . LocalListener gatherer_LocalListener0 = new Gatherer . LocalListener ( linkedBlockingQueue0 ) ; SchedulerEvent schedulerEvent0 = new SchedulerEvent ( 21599996L , ( Object ) gatherer_LocalListener0 ) ; gatherer_LocalListener0 . scheduledEvent ( schedulerEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { Gatherer gatherer0 = Gatherer . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LoggerFactory getInstance ( ) { return ourInstance ; }
void test3 ( ) throws Throwable { DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree ( ) ; boolean boolean0 = dirtyCleanTree0 . isDirty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test5 ( ) throws Throwable { DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree ( ) ; dirtyCleanTree0 . setDirty ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test11 ( ) throws Throwable { DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree ( ) ; DirtyCleanTree dirtyCleanTree1 = ( DirtyCleanTree ) dirtyCleanTree0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nextIntegerValue ( ) { int value = this . nextInt ; this . nextInt + + ; return value ; }
void test0 ( ) throws Throwable { Tree tree0 = new Tree ( ) ; HashMap < DeepCopier , TreeNode > hashMap0 = new HashMap < DeepCopier , TreeNode > ( ) ; tree0 . continueDeepCopy ( ( Map ) hashMap0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test2 ( ) throws Throwable { Tree tree0 = new Tree ( ) ; TreeNode treeNode0 = new TreeNode ( ) ; tree0 . changeNode ( treeNode0 , treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test3 ( ) throws Throwable { Tree tree0 = new Tree ( ( TreeNode ) null ) ; TreeNode treeNode0 = new TreeNode ( ( TreeNode ) null ) ; tree0 . addNodeTo ( treeNode0 , ( TreeNode ) null ) ; tree0 . addNodeTo ( treeNode0 , treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test4 ( ) throws Throwable { Tree tree0 = new Tree ( ) ; TreeNode treeNode0 = new TreeNode ( ) ; tree0 . removeNodeFrom ( treeNode0 , ( TreeNode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test5 ( ) throws Throwable { Tree tree0 = new Tree ( ) ; Tree tree1 = ( Tree ) tree0 . deepCopy ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object deepCopy ( ) throws DeepCopyException { return DeepCopyUtil . deepCopy ( this , false ) ; }
void test6 ( ) throws Throwable { Tree tree0 = new Tree ( ) ; TreeNode treeNode0 = tree0 . getRoot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleElement getRoot ( ) { return myRoot ; }
void test7 ( ) throws Throwable { Tree tree0 = new Tree ( ) ; Tree tree1 = ( Tree ) tree0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object deepCopy ( ) throws DeepCopyException { return DeepCopyUtil . deepCopy ( this , false ) ; }
void test5 ( ) throws Throwable { TreeListenerHelper treeListenerHelper0 = new TreeListenerHelper ( ) ; TreeNode treeNode0 = new TreeNode ( ) ; treeListenerHelper0 . addListener ( ( Object ) null ) ; treeListenerHelper0 . fire ( ( - 47 ) , ( Object ) treeNode0 , ( Object ) treeNode0 , ( Object ) treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test0 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; Tree tree0 = new Tree ( treeNode0 ) ; SimpleTreeListener simpleTreeListener0 = new SimpleTreeListener ( tree0 , ( EditTree ) null ) ; DefaultTreeModel defaultTreeModel0 = simpleTreeListener0 . getModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultTreeModel getModel ( ) { return model ; }
void test1 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; Tree tree0 = new Tree ( treeNode0 ) ; SimpleTreeListener simpleTreeListener0 = new SimpleTreeListener ( tree0 , ( EditTree ) null ) ; simpleTreeListener0 . requestRemoveNode ( treeNode0 , treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test3 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; Tree tree0 = new Tree ( treeNode0 ) ; SimpleTreeListener simpleTreeListener0 = new SimpleTreeListener ( tree0 , ( EditTree ) null ) ; simpleTreeListener0 . nodeChanged ( treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test5 ( ) throws Throwable { TreeNode treeNode0 = new TreeNode ( ) ; Tree tree0 = new Tree ( treeNode0 ) ; SimpleTreeListener simpleTreeListener0 = new SimpleTreeListener ( tree0 , ( EditTree ) null ) ; simpleTreeListener0 . nodeAdded ( treeNode0 , treeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test0 ( ) throws Throwable { GatherMetaDataEvent . EventTypes gatherMetaDataEvent_EventTypes0 = GatherMetaDataEvent . EventTypes . StartGathering ; GatherMetaDataEvent gatherMetaDataEvent0 = new GatherMetaDataEvent ( gatherMetaDataEvent_EventTypes0 , ( long ) 1402104267 ) ; gatherMetaDataEvent0 . getEventType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getPeriod ( ) { return myPeriod ; }
void test1 ( ) throws Throwable { GatherMetaDataEvent . EventTypes gatherMetaDataEvent_EventTypes0 = GatherMetaDataEvent . EventTypes . StartGathering ; GatherMetaDataEvent gatherMetaDataEvent0 = new GatherMetaDataEvent ( gatherMetaDataEvent_EventTypes0 , ( long ) 1402104267 ) ; gatherMetaDataEvent0 . setPeriod ( ( - 1L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getPeriod ( ) { return myPeriod ; }
void test2 ( ) throws Throwable { GatherMetaDataEvent . EventTypes gatherMetaDataEvent_EventTypes0 = GatherMetaDataEvent . EventTypes . StartGathering ; GatherMetaDataEvent gatherMetaDataEvent0 = new GatherMetaDataEvent ( gatherMetaDataEvent_EventTypes0 , ( long ) 1402104267 ) ; long long0 = gatherMetaDataEvent0 . getPeriod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getPeriod ( ) { return myPeriod ; }
void test3 ( ) throws Throwable { GatherMetaDataEvent . EventTypes gatherMetaDataEvent_EventTypes0 = GatherMetaDataEvent . EventTypes . StartGathering ; GatherMetaDataEvent gatherMetaDataEvent0 = new GatherMetaDataEvent ( gatherMetaDataEvent_EventTypes0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventType ( ) { return myEventType ; }
void test4 ( ) throws Throwable { GatherMetaDataEvent gatherMetaDataEvent0 = new GatherMetaDataEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getPeriod ( ) { return myPeriod ; }
void test5 ( ) throws Throwable { GatherMetaDataEvent . EventTypes gatherMetaDataEvent_EventTypes0 = GatherMetaDataEvent . EventTypes . StartGathering ; GatherMetaDataEvent gatherMetaDataEvent0 = new GatherMetaDataEvent ( gatherMetaDataEvent_EventTypes0 , ( long ) 1402104267 ) ; gatherMetaDataEvent0 . setEventType ( gatherMetaDataEvent_EventTypes0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getPeriod ( ) { return myPeriod ; }
void test0 ( ) throws Throwable { GatherMetaData gatherMetaData0 = new GatherMetaData ( ) ; GatherMetaData gatherMetaData1 = ( GatherMetaData ) gatherMetaData0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TimeOfDay getEndOfDay ( ) { return myEndOfDay ; }
void test1 ( ) throws Throwable { GatherMetaData gatherMetaData0 = new GatherMetaData ( ) ; gatherMetaData0 . addGatherMetaDataListener ( ( GatherMetaDataListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getGathering ( ) { return isGathering ( ) ; }
void test2 ( ) throws Throwable { GatherMetaData gatherMetaData0 = new GatherMetaData ( ) ; boolean boolean0 = gatherMetaData0 . getDirty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDirty ( ) throws ApplicationException { return isDirty ( ) ; }
void test3 ( ) throws Throwable { GatherMetaData gatherMetaData0 = new GatherMetaData ( ) ; gatherMetaData0 . setStartOfDay ( 241L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test4 ( ) throws Throwable { GatherMetaData gatherMetaData0 = new GatherMetaData ( ) ; gatherMetaData0 . removeGatherMetaDataListener ( ( GatherMetaDataListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test5 ( ) throws Throwable { GatherMetaData gatherMetaData0 = new GatherMetaData ( ) ; gatherMetaData0 . setPeriod ( 813L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGathering ( ) { return myGathering ; }
void test6 ( ) throws Throwable { GatherMetaData gatherMetaData0 = new GatherMetaData ( ) ; gatherMetaData0 . stopGathering ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGathering ( ) { return myGathering ; }
void test7 ( ) throws Throwable { GatherMetaData gatherMetaData0 = new GatherMetaData ( ) ; HashMap < GatherMetaData , GatherMetaData > hashMap0 = new HashMap < GatherMetaData , GatherMetaData > ( 873 ) ; gatherMetaData0 . continueDeepCopy ( ( Map ) hashMap0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test8 ( ) throws Throwable { GatherMetaData gatherMetaData0 = new GatherMetaData ( ) ; boolean boolean0 = gatherMetaData0 . getGathering ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getGathering ( ) { return isGathering ( ) ; }
void test9 ( ) throws Throwable { GatherMetaData gatherMetaData0 = new GatherMetaData ( ) ; gatherMetaData0 . startGathering ( 1718L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGathering ( ) { return myGathering ; }
void test11 ( ) throws Throwable { GatherMetaData gatherMetaData0 = new GatherMetaData ( ) ; GatherMetaDataListenerHelper gatherMetaDataListenerHelper0 = gatherMetaData0 . getHelper ( ) ; GatherMetaDataListenerHelper gatherMetaDataListenerHelper1 = gatherMetaData0 . getHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ListChannelHelper getHelper ( ) { if ( null = = myHelper ) myHelper = new ListChannelHelper ( ) ; return myHelper ; }
void test12 ( ) throws Throwable { long long0 = GatherMetaData . alignTime ( 1718L , 1718L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long alignTime ( long time , long period ) { if ( 0 ! = ( time % period ) ) { long temp = time % period ; time = time - temp + period ; } return time ; }
void test13 ( ) throws Throwable { long long0 = GatherMetaData . alignTime ( ( - 782L ) , 869L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long alignTime ( long time , long period ) { if ( 0 ! = ( time % period ) ) { long temp = time % period ; time = time - temp + period ; } return time ; }
void test14 ( ) throws Throwable { GatherMetaData gatherMetaData0 = new GatherMetaData ( ) ; gatherMetaData0 . getStartOfDay ( ) ; long long0 = gatherMetaData0 . getStartOfDay ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TimeOfDay getStartOfDay ( ) { return myStartOfDay ; }
void test15 ( ) throws Throwable { GatherMetaData gatherMetaData0 = new GatherMetaData ( ) ; gatherMetaData0 . setEndOfDay ( ( - 1412L ) ) ; long long0 = gatherMetaData0 . getEndOfDay ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getDirty ( ) throws ApplicationException { return isDirty ( ) ; }
void test16 ( ) throws Throwable { GatherMetaData gatherMetaData0 = new GatherMetaData ( ) ; long long0 = gatherMetaData0 . getEndOfDay ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TimeOfDay getEndOfDay ( ) { return myEndOfDay ; }
void test0 ( ) throws Throwable { Long long0 = Long . getLong ( "XGa } x" , 2045L ) ; int int0 = long0 . compareTo ( ( Long ) 2045L ) ; TimeAndPeriod timeAndPeriod0 = new TimeAndPeriod ( ( Long ) 2045L , ( Integer ) int0 ) ; String string0 = timeAndPeriod0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { Long long0 = Long . getLong ( "XGa } x" , 2045L ) ; int int0 = long0 . compareTo ( ( Long ) 2045L ) ; TimeAndPeriod timeAndPeriod0 = new TimeAndPeriod ( ( Long ) 2045L , ( Integer ) int0 ) ; TimeAndPeriod timeAndPeriod1 = timeAndPeriod0 . copy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void copy ( InputStream istream , OutputStream ostream ) throws IOException { int buffSize = 2^13 ; byte [ ] buf = new byte [ buffSize ] ; int count = istream . read ( buf ) ; while ( count > 0 ) { ostream . write ( buf , 0 , count ) ; count = istream . read ( buf ) ; } istream . close ( ) ; ostream . close ( ) ; }
void test3 ( ) throws Throwable { DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree ( ) ; int int0 = dirtyCleanTree0 . nextIntegerValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nextIntegerValue ( ) { int value = this . nextInt ; this . nextInt + + ; return value ; }
void test6 ( ) throws Throwable { DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree ( ) ; long long0 = dirtyCleanTree0 . nextLongValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long nextLongValue ( ) { long value = this . nextLong ; this . nextLong + + ; return value ; }
void test7 ( ) throws Throwable { DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree ( ) ; DirtyCleanTree dirtyCleanTree1 = ( DirtyCleanTree ) dirtyCleanTree0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nextIntegerValue ( ) { int value = this . nextInt ; this . nextInt + + ; return value ; }
void test0 ( ) throws Throwable { DataContainerAdaptor dataContainerAdaptor0 = new DataContainerAdaptor ( ) ; HashMap < DataContainerAdaptor , DataItem > hashMap0 = new HashMap < DataContainerAdaptor , DataItem > ( ) ; dataContainerAdaptor0 . continueDeepCopy ( ( Map ) hashMap0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test1 ( ) throws Throwable { DataContainerAdaptor dataContainerAdaptor0 = new DataContainerAdaptor ( ) ; boolean boolean0 = dataContainerAdaptor0 . removeDataChangeListener ( ( DataChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeDataChangeListener ( DataChangeListener listener ) { return false ; }
void test3 ( ) throws Throwable { DataContainerAdaptor dataContainerAdaptor0 = new DataContainerAdaptor ( ) ; boolean boolean0 = dataContainerAdaptor0 . removeComponent ( ( DataItem ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeComponent ( DataItem item ) { boolean wasPresent = this . components . remove ( item ) ; fireDataChanged ( ) ; return wasPresent ; }
void test4 ( ) throws Throwable { DataContainerAdaptor dataContainerAdaptor0 = new DataContainerAdaptor ( ) ; DataContainerAdaptor dataContainerAdaptor1 = ( DataContainerAdaptor ) dataContainerAdaptor0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test5 ( ) throws Throwable { DataContainerAdaptor dataContainerAdaptor0 = new DataContainerAdaptor ( ) ; dataContainerAdaptor0 . addDataChangeListener ( ( DataChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test6 ( ) throws Throwable { DataContainerAdaptor dataContainerAdaptor0 = new DataContainerAdaptor ( ) ; DataContainerAdaptor dataContainerAdaptor1 = ( DataContainerAdaptor ) dataContainerAdaptor0 . deepCopy ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return myData . equals ( o ) ; }
void test7 ( ) throws Throwable { DataContainerAdaptor dataContainerAdaptor0 = new DataContainerAdaptor ( ) ; DataItemAdapter dataItemAdapter0 = new DataItemAdapter ( ) ; dataContainerAdaptor0 . addComponent ( ( DataItem ) dataItemAdapter0 ) ; dataContainerAdaptor0 . addComponent ( ( DataItem ) dataItemAdapter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test8 ( ) throws Throwable { DataContainerAdaptor dataContainerAdaptor0 = new DataContainerAdaptor ( ) ; DataItemAdapter dataItemAdapter0 = new DataItemAdapter ( ) ; dataContainerAdaptor0 . addComponent ( ( DataItem ) dataItemAdapter0 ) ; boolean boolean0 = dataContainerAdaptor0 . isDirty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test9 ( ) throws Throwable { DataContainerAdaptor dataContainerAdaptor0 = new DataContainerAdaptor ( ) ; DataItemAdapter dataItemAdapter0 = new DataItemAdapter ( ) ; dataContainerAdaptor0 . addComponent ( ( DataItem ) dataItemAdapter0 ) ; dataContainerAdaptor0 . setDirty ( true ) ; boolean boolean0 = dataContainerAdaptor0 . isDirty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test0 ( ) throws Throwable { DataItemAdapter dataItemAdapter0 = new DataItemAdapter ( ) ; DataItemAdapter dataItemAdapter1 = ( DataItemAdapter ) dataItemAdapter0 . deepCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test1 ( ) throws Throwable { DataItemAdapter dataItemAdapter0 = new DataItemAdapter ( ) ; HashMap < DeepCopier , Integer > hashMap0 = new HashMap < DeepCopier , Integer > ( ) ; dataItemAdapter0 . continueDeepCopy ( ( Map ) hashMap0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test2 ( ) throws Throwable { DataItemAdapter dataItemAdapter0 = new DataItemAdapter ( ) ; boolean boolean0 = dataItemAdapter0 . isDirty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test3 ( ) throws Throwable { DataItemAdapter dataItemAdapter0 = new DataItemAdapter ( ) ; DataItemAdapter dataItemAdapter1 = ( DataItemAdapter ) dataItemAdapter0 . deepCopy ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test4 ( ) throws Throwable { DataItemAdapter dataItemAdapter0 = new DataItemAdapter ( ) ; dataItemAdapter0 . removeDataChangeListener ( ( DataChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test5 ( ) throws Throwable { DataItemAdapter dataItemAdapter0 = new DataItemAdapter ( ) ; dataItemAdapter0 . addDataChangeListener ( ( DataChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test6 ( ) throws Throwable { DataItemAdapter dataItemAdapter0 = new DataItemAdapter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test7 ( ) throws Throwable { DataItemAdapter dataItemAdapter0 = new DataItemAdapter ( ) ; DataChangeListenerHelper dataChangeListenerHelper0 = dataItemAdapter0 . getHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test0 ( ) throws Throwable { PestEvent pestEvent0 = new PestEvent ( 0L ) ; long long0 = pestEvent0 . getTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { long time = myDateField . getDateInMillis ( ) ; time = DateUtil . clearTime ( time ) ; Calendar cal = Calendar . getInstance ( ) ; cal . setTimeInMillis ( time ) ; String s = myTimeField . getText ( ) ; long timeOfDay = DateUtil . parseTimeString ( s ) ; Calendar timeCal = Calendar . getInstance ( ) ; timeCal . setTimeInMillis ( timeOfDay ) ; cal . set ( cal . get ( Calendar . YEAR ) , cal . get ( Calendar . MONTH ) , cal . get ( Calendar . DAY_OF_MONTH ) , timeCal . get ( Calendar . HOUR_OF_DAY ) , timeCal . get ( Calendar . MINUTE ) , timeCal . get ( Calendar . SECOND ) ) ; long timeAndDate = cal . getTimeInMillis ( ) ; return timeAndDate ; }
void test1 ( ) throws Throwable { PestEvent pestEvent0 = new PestEvent ( ) ; String string0 = pestEvent0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { PestEvent pestEvent0 = new PestEvent ( 0L ) ; pestEvent0 . setTime ( ( - 1388L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { PestEvent pestEvent0 = new PestEvent ( ( - 734L ) ) ; int int0 = pestEvent0 . compareTo ( ( Object ) pestEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { PestEvent pestEvent0 = new PestEvent ( ) ; PestEvent pestEvent1 = new PestEvent ( 27L ) ; int int0 = pestEvent1 . compareTo ( ( Object ) pestEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object o ) { if ( ! ( o instanceof SchedulerEvent ) ) throw new RuntimeException ( ) ; SchedulerEvent other = ( SchedulerEvent ) o ; if ( this . scheduledTime < other . scheduledTime ) return - 1 ; else if ( this . scheduledTime > other . scheduledTime ) return 1 ; else return 0 ; }
void test5 ( ) throws Throwable { PestEvent pestEvent0 = new PestEvent ( ( - 734L ) ) ; PestEvent pestEvent1 = new PestEvent ( 0L ) ; int int0 = pestEvent0 . compareTo ( ( Object ) pestEvent1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object o ) { if ( ! ( o instanceof SchedulerEvent ) ) throw new RuntimeException ( ) ; SchedulerEvent other = ( SchedulerEvent ) o ; if ( this . scheduledTime < other . scheduledTime ) return - 1 ; else if ( this . scheduledTime > other . scheduledTime ) return 1 ; else return 0 ; }
void test1 ( ) throws Throwable { DataChangeEvent dataChangeEvent0 = new DataChangeEvent ( ( Object ) "S } " ) ; String string0 = ( String ) dataChangeEvent0 . getSource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ApplicationDataList getSource ( ) { return mySource ; }
void test0 ( ) throws Throwable { ElementHolderEvent elementHolderEvent0 = new ElementHolderEvent ( ( - 1063 ) ) ; elementHolderEvent0 . setOriginalData ( ( Object ) "unknown" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventType ( ) { return myEventType ; }
void test1 ( ) throws Throwable { ElementHolderEvent elementHolderEvent0 = new ElementHolderEvent ( ) ; String string0 = elementHolderEvent0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventType ( ) { return myEventType ; }
void test2 ( ) throws Throwable { ElementHolderEvent elementHolderEvent0 = new ElementHolderEvent ( ) ; elementHolderEvent0 . setEventType ( ( - 68 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventType ( ) { return myEventType ; }
void test3 ( ) throws Throwable { ElementHolderEvent elementHolderEvent0 = new ElementHolderEvent ( ) ; elementHolderEvent0 . setData ( ( Object ) "unknown" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { ElementHolderEvent elementHolderEvent0 = new ElementHolderEvent ( 0 , ( Object ) "" , ( Object ) "" ) ; String string0 = elementHolderEvent0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test5 ( ) throws Throwable { String string0 = ElementHolderEvent . eventToString ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String eventToString ( int event ) { String s ; switch ( event ) { case EVENT_ALL_CHANGED : s = "all changed" ; break ; case EVENT_ELEMENT_ADDED : s = "element added" ; break ; case EVENT_ELEMENT_CHANGED : s = "element changed" ; break ; case EVENT_ELEMENT_REMOVED : s = "element removed" ; break ; case EVENT_POST_DESERIALIZATION : s = "post deserialization" ; break ; default : s = "unknown" ; break ; } return s ; }
void test6 ( ) throws Throwable { String string0 = ElementHolderEvent . eventToString ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String eventToString ( int event ) { String s ; switch ( event ) { case EVENT_ALL_CHANGED : s = "all changed" ; break ; case EVENT_ELEMENT_ADDED : s = "element added" ; break ; case EVENT_ELEMENT_CHANGED : s = "element changed" ; break ; case EVENT_ELEMENT_REMOVED : s = "element removed" ; break ; case EVENT_POST_DESERIALIZATION : s = "post deserialization" ; break ; default : s = "unknown" ; break ; } return s ; }
void test7 ( ) throws Throwable { String string0 = ElementHolderEvent . eventToString ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String eventToString ( int event ) { String s ; switch ( event ) { case EVENT_ALL_CHANGED : s = "all changed" ; break ; case EVENT_ELEMENT_ADDED : s = "element added" ; break ; case EVENT_ELEMENT_CHANGED : s = "element changed" ; break ; case EVENT_ELEMENT_REMOVED : s = "element removed" ; break ; case EVENT_POST_DESERIALIZATION : s = "post deserialization" ; break ; default : s = "unknown" ; break ; } return s ; }
void test8 ( ) throws Throwable { String string0 = ElementHolderEvent . eventToString ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String eventToString ( int event ) { String s ; switch ( event ) { case EVENT_ALL_CHANGED : s = "all changed" ; break ; case EVENT_ELEMENT_ADDED : s = "element added" ; break ; case EVENT_ELEMENT_CHANGED : s = "element changed" ; break ; case EVENT_ELEMENT_REMOVED : s = "element removed" ; break ; case EVENT_POST_DESERIALIZATION : s = "post deserialization" ; break ; default : s = "unknown" ; break ; } return s ; }
void test9 ( ) throws Throwable { String string0 = ElementHolderEvent . eventToString ( 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String eventToString ( int event ) { String s ; switch ( event ) { case EVENT_ALL_CHANGED : s = "all changed" ; break ; case EVENT_ELEMENT_ADDED : s = "element added" ; break ; case EVENT_ELEMENT_CHANGED : s = "element changed" ; break ; case EVENT_ELEMENT_REMOVED : s = "element removed" ; break ; case EVENT_POST_DESERIALIZATION : s = "post deserialization" ; break ; default : s = "unknown" ; break ; } return s ; }
void test0 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; Box box0 = Box . createVerticalBox ( ) ; lTSPanel0 . addSimple ( ( JComponent ) box0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test1 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; lTSPanel0 . nextRow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridy ( ) { return myGridy ; }
void test2 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer ( ) ; lTSPanel0 . alignCenter ( ( JComponent ) defaultListCellRenderer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test3 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; JToolTip jToolTip0 = new JToolTip ( ) ; lTSPanel0 . addVertical ( ( JComponent ) jToolTip0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridy ( ) { return myGridy ; }
void test4 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; Vector < String > vector0 = new Vector < String > ( ) ; JList jList0 = new JList ( vector0 ) ; lTSPanel0 . addFill ( ( JComponent ) jList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test5 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; JMenu jMenu0 = new JMenu ( ) ; JPopupMenu jPopupMenu0 = jMenu0 . getPopupMenu ( ) ; InsetsUIResource insetsUIResource0 = ( InsetsUIResource ) jMenu0 . getMargin ( ) ; lTSPanel0 . addVertical ( ( JComponent ) jPopupMenu0 , ( Insets ) insetsUIResource0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test6 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; Box box0 = Box . createHorizontalBox ( ) ; JToolTip jToolTip0 = box0 . createToolTip ( ) ; Vector < GridBagLayout > vector0 = new Vector < GridBagLayout > ( ) ; JList jList0 = new JList ( vector0 ) ; Insets insets0 = jList0 . getInsets ( ) ; lTSPanel0 . addFill ( ( JComponent ) jToolTip0 , insets0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test8 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; Box box0 = Box . createVerticalBox ( ) ; lTSPanel0 . addButton ( ( JComponent ) box0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test10 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; lTSPanel0 . setGridx ( 100 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test11 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; lTSPanel0 . setGridy ( ( - 1351 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridy ( ) { return myGridy ; }
void test12 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; JOptionPane jOptionPane0 = new JOptionPane ( ( Object ) "Name" ) ; SoftBevelBorder softBevelBorder0 = new SoftBevelBorder ( ( - 1 ) ) ; Insets insets0 = softBevelBorder0 . getBorderInsets ( ( Component ) jOptionPane0 ) ; lTSPanel0 . addHorizontal ( ( JComponent ) jOptionPane0 , insets0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test13 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; lTSPanel0 . setDefaultInsets ( 127 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridy ( ) { return myGridy ; }
void test15 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; DefaultEditorKit . DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit . DefaultKeyTypedAction ( ) ; JToggleButton jToggleButton0 = new JToggleButton ( ( Action ) defaultEditorKit_DefaultKeyTypedAction0 ) ; lTSPanel0 . alignLeft ( ( JComponent ) jToggleButton0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridy ( ) { return myGridy ; }
void test16 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; Box box0 = Box . createVerticalBox ( ) ; lTSPanel0 . setFillHorizontal ( ( JComponent ) box0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test17 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem ( ) ; lTSPanel0 . alignRight ( ( JComponent ) jRadioButtonMenuItem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test18 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; lTSPanel0 . alignTop ( ( JComponent ) lTSPanel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test19 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; LTSPanel lTSPanel1 = new LTSPanel ( ) ; GridBagLayout gridBagLayout0 = new GridBagLayout ( ) ; GridBagConstraints gridBagConstraints0 = gridBagLayout0 . getConstraints ( ( Component ) lTSPanel1 ) ; lTSPanel1 . addWithConstraint ( ( JComponent ) lTSPanel0 , gridBagConstraints0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void openWindow ( ) { getWindow ( ) . setVisible ( true ) ; }
void test20 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; lTSPanel0 . getDialog ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test21 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; JTree jTree0 = new JTree ( ) ; boolean boolean0 = lTSPanel0 . foundDialog ( ( Container ) jTree0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test22 ( ) throws Throwable { LTSPanel lTSPanel0 = new LTSPanel ( ) ; JTree jTree0 = new JTree ( ) ; lTSPanel0 . addTitle ( ( JComponent ) jTree0 ) ; boolean boolean0 = lTSPanel0 . foundDialog ( ( Container ) jTree0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test0 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 9 ] [ 3 ] ; Object [ ] objectArray1 = new Object [ 15 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , objectArray1 ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test1 ( ) throws Throwable { TableSorter tableSorter0 = new TableSorter ( ) ; JTable jTable0 = new JTable ( 0 , 0 ) ; tableSorter0 . addMouseListenerToHeaderInTable ( jTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addMouseListenerToHeaderInTable ( JTable table ) { TableSorter sorter = this ; JTable tableView = table ; tableView . setColumnSelectionAllowed ( false ) ; MouseAdapter listMouseListener = new MouseAdapter ( ) { void mouseClicked ( MouseEvent e ) { TableColumnModel columnModel = tableView . getColumnModel ( ) ; int viewColumn = columnModel . getColumnIndexAtX ( e . getX ( ) ) ; int column = tableView . convertColumnIndexToModel ( viewColumn ) ; if ( e . getClickCount ( ) = = 1 & & column ! = - 1 ) { / / System . out . println ( "Sorting . . . " ) ; int shiftPressed = e . getModifiers ( ) & InputEvent . SHIFT_MASK ; boolean ascending = ( shiftPressed = = 0 ) ; sorter . sortByColumn ( column , ascending ) ; } } } ; JTableHeader th = tableView . getTableHeader ( ) ; th . addMouseListener ( listMouseListener ) ; }
void test4 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 9 ] [ 2 ] ; Object [ ] objectArray1 = new Object [ 10 ] ; objectArray0 [ 0 ] = objectArray1 ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , objectArray0 [ 0 ] ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void sortByColumn ( int column ) { sortByColumn ( column , true ) ; }
void test5 ( ) throws Throwable { TableSorter tableSorter0 = new TableSorter ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( tableSorter0 . sortingColumns , tableSorter0 . sortingColumns ) ; tableSorter0 . setModel ( ( TableModel ) defaultTableModel0 ) ; tableSorter0 . sortByColumn ( 0 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test0 ( ) throws Throwable { SortedListModel sortedListModel0 = new SortedListModel ( ) ; sortedListModel0 . setOrder ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOrder ( ) { return myOrder ; }
void test1 ( ) throws Throwable { SortedListModel sortedListModel0 = new SortedListModel ( ) ; sortedListModel0 . append ( "" ) ; sortedListModel0 . append ( " . error . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return mySize ; }
void test0 ( ) throws Throwable { GridBagPanel gridBagPanel0 = new GridBagPanel ( ) ; JScrollPane jScrollPane0 = new JScrollPane ( ) ; gridBagPanel0 . addTitle ( ( Component ) jScrollPane0 , 2022 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test3 ( ) throws Throwable { GridBagPanel gridBagPanel0 = new GridBagPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getRow ( int index ) { return myList . get ( index ) ; }
void test4 ( ) throws Throwable { GridBagPanel gridBagPanel0 = new GridBagPanel ( ) ; JSpinner jSpinner0 = new JSpinner ( ) ; gridBagPanel0 . addHorizontal ( ( Component ) jSpinner0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumn ( ) { return myColumn ; }
void test5 ( ) throws Throwable { GridBagPanel gridBagPanel0 = new GridBagPanel ( ) ; DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer ( ) ; gridBagPanel0 . addButton ( ( Component ) defaultTableCellRenderer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumn ( ) { return myColumn ; }
void test8 ( ) throws Throwable { GridBagPanel gridBagPanel0 = new GridBagPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getRow ( int index ) { return myList . get ( index ) ; }
void test0 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList . LTSMouseListener lTSList_LTSMouseListener0 = lTSList0 . new LTSMouseListener ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) lTSList0 , ( int ) ( byte ) ( - 13 ) , 47L , ( int ) ( byte ) ( - 13 ) , 40 , ( int ) ( byte ) ( - 13 ) , ( int ) ( byte ) ( - 13 ) , false ) ; lTSList_LTSMouseListener0 . mouseClicked ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent e ) { myEvent = e ; Object source = e . getSource ( ) ; if ( e . isPopupTrigger ( ) ) maybeShowPopup ( e ) ; else if ( e . getClickCount ( ) < 2 ) singleClick ( source ) ; else doubleClick ( source ) ; }
void test1 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList . LTSMouseListener lTSList_LTSMouseListener0 = lTSList0 . new LTSMouseListener ( ) ; lTSList0 . setSelectionInterval ( 1258 , 1258 ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) lTSList0 , 2 , ( long ) 40 , 40 , 2 , 1258 , 1585 , ( - 1220 ) , 2 , true , 0 ) ; lTSList_LTSMouseListener0 . mouseClicked ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent e ) { myEvent = e ; Object source = e . getSource ( ) ; if ( e . isPopupTrigger ( ) ) maybeShowPopup ( e ) ; else if ( e . getClickCount ( ) < 2 ) singleClick ( source ) ; else doubleClick ( source ) ; }
void test2 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList . LTSMouseListener lTSList_LTSMouseListener0 = lTSList0 . new LTSMouseListener ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) lTSList0 , 2 , ( long ) ( - 1239 ) , ( - 1239 ) , 2 , ( - 1239 ) , ( - 1239 ) , ( - 1239 ) , 2 , true , 0 ) ; lTSList_LTSMouseListener0 . mousePressed ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mousePressed ( MouseEvent e ) { myEvent = e ; maybeShowPopup ( e ) ; }
void test3 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; lTSList0 . createEntry ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OutputStream createEntry ( String name ) throws LTSException { File outfile = null ; try { extractArchive ( ) ; outfile = new File ( getTempDir ( ) , name ) ; File parent = outfile . getParentFile ( ) ; if ( ! parent . isDirectory ( ) & & ! parent . mkdirs ( ) ) { throw new LTSException ( "Error trying to create temp directories , " + parent + " , for entry " + name + " , in archive " + getFile ( ) ) ; } FileOutputStream fos = new FileOutputStream ( outfile ) ; return fos ; } catch ( IOException e ) { throw new LTSException ( "Error trying to create temp file for entry " + name + " , to file " + outfile + " , for archive " + getFile ( ) , e ) ; } }
void test4 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList . LTSMouseListener lTSList_LTSMouseListener0 = lTSList0 . new LTSMouseListener ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) lTSList0 , ( - 1 ) , ( long ) ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , false , ( - 1 ) , 155 , ( - 1 ) ) ; lTSList_LTSMouseListener0 . mouseReleased ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test5 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList . LTSKeyAdapter lTSList_LTSKeyAdapter0 = lTSList0 . new LTSKeyAdapter ( ) ; JCheckBox jCheckBox0 = new JCheckBox ( ( Icon ) null , true ) ; MenuElement [ ] menuElementArray0 = new MenuElement [ 8 ] ; MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager ( ) ; MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent ( ( Component ) jCheckBox0 , 0 , ( long ) 0 , 0 , 0 , 'o' , menuElementArray0 , menuSelectionManager0 ) ; lTSList_LTSKeyAdapter0 . keyPressed ( ( KeyEvent ) menuKeyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyPressed ( KeyEvent event ) { switch ( event . getKeyCode ( ) ) { case KeyEvent . VK_ENTER : case KeyEvent . VK_INSERT : case KeyEvent . VK_DELETE : case KeyEvent . VK_TAB : this . fire ( event . getKeyCode ( ) ) ; break ; } }
void test6 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList . LTSMouseListener lTSList_LTSMouseListener0 = ( LTSList . LTSMouseListener ) lTSList0 . getMouseAdapter ( ) ; LTSList . LTSMouseListener lTSList_LTSMouseListener1 = ( LTSList . LTSMouseListener ) lTSList0 . getMouseAdapter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MouseAdapter getMouseAdapter ( ) { if ( null = = myMouseAdapter ) myMouseAdapter = new LTSMouseListener ( ) ; return myMouseAdapter ; }
void test7 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList . LTSKeyAdapter lTSList_LTSKeyAdapter0 = ( LTSList . LTSKeyAdapter ) lTSList0 . getKeyAdapter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" KeyAdapter getKeyAdapter ( ) { if ( null = = myKeyAdapter ) myKeyAdapter = new LTSKeyAdapter ( ) ; return myKeyAdapter ; }
void test8 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList . LTSMouseListener lTSList_LTSMouseListener0 = lTSList0 . new LTSMouseListener ( ) ; JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem ( "VaOz" , false ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jRadioButtonMenuItem0 , 40 , ( long ) ( - 378 ) , ( - 1 ) , ( int ) ( byte ) 0 , 40 , 105 , ( int ) ( byte ) ( - 13 ) , 40 , true , ( int ) ( byte ) ( - 13 ) , ( - 1 ) , 1 ) ; lTSList_LTSMouseListener0 . mouseClicked ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test9 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList . LTSMouseListener lTSList_LTSMouseListener0 = lTSList0 . new LTSMouseListener ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) lTSList0 , 2 , ( long ) ( - 1239 ) , ( - 1239 ) , 2 , ( - 1239 ) , ( - 1239 ) , ( - 1239 ) , 2 , true , 0 ) ; lTSList_LTSMouseListener0 . mouseClicked ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent e ) { myEvent = e ; Object source = e . getSource ( ) ; if ( e . isPopupTrigger ( ) ) maybeShowPopup ( e ) ; else if ( e . getClickCount ( ) < 2 ) singleClick ( source ) ; else doubleClick ( source ) ; }
void test11 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; lTSList0 . deleteEntry ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test0 ( ) throws Throwable { SimpleMouseAdapter simpleMouseAdapter0 = new SimpleMouseAdapter ( ) ; JOptionPane jOptionPane0 = new JOptionPane ( ( Object ) "page - up" , 1 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jOptionPane0 , 1 , ( - 1266L ) , 1466 , 0 , 1 , 1466 , ( - 208 ) , ( - 208 ) , false , 0 , 1466 , 40 ) ; simpleMouseAdapter0 . doubleClick ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void doubleClick ( Object source ) { }
void test1 ( ) throws Throwable { JTextArea jTextArea0 = new JTextArea ( "" , 0 , 0 ) ; SimpleMouseAdapter simpleMouseAdapter0 = new SimpleMouseAdapter ( ( JPopupMenu ) null ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jTextArea0 , 0 , ( - 515L ) , 0 , 0 , 127 , ( - 851 ) , true , 998 , 0 , 0 ) ; simpleMouseAdapter0 . mousePressed ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mousePressed ( MouseEvent e ) { myEvent = e ; maybeShowPopup ( e ) ; }
void test0 ( ) throws Throwable { String string0 = StandardFrame . trimString ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String trimString ( String s ) { if ( null = = s ) return null ; s = s . trim ( ) ; if ( "" . equals ( s ) ) return null ; else return s ; }
void test1 ( ) throws Throwable { String string0 = StandardFrame . trimString ( "'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String trimString ( String s ) { if ( null = = s ) return null ; s = s . trim ( ) ; if ( "" . equals ( s ) ) return null ; else return s ; }
void test0 ( ) throws Throwable { JPanel jPanel0 = new JPanel ( ( LayoutManager ) null ) ; SwingUtils . setBold ( ( JComponent ) jPanel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test1 ( ) throws Throwable { JPanel jPanel0 = new JPanel ( ( LayoutManager ) null ) ; InputKey inputKey0 = InputKey . DownArrow ; StyledEditorKit . AlignmentAction styledEditorKit_AlignmentAction0 = new StyledEditorKit . AlignmentAction ( "yXA ] \"Ul ) nhXxGU" , ( - 385 ) ) ; SwingUtils . mapKey ( inputKey0 , ( Action ) styledEditorKit_AlignmentAction0 , ( JComponent ) jPanel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { JMenuBar jMenuBar0 = new JMenuBar ( ) ; SwingUtils . setPreferredWidth ( ( JComponent ) jMenuBar0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPreferredWidth ( JComponent comp , int width ) { Dimension dim = comp . getPreferredSize ( ) ; dim . width = width ; comp . setPreferredSize ( dim ) ; }
void test3 ( ) throws Throwable { SwingUtils swingUtils0 = new SwingUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { StyledEditorKit . ItalicAction styledEditorKit_ItalicAction0 = new StyledEditorKit . ItalicAction ( ) ; JMenuItem jMenuItem0 = new JMenuItem ( ( String ) null , ( Icon ) null ) ; JToolTip jToolTip0 = jMenuItem0 . createToolTip ( ) ; SwingUtils . mapKeyAsDefault ( ( KeyStroke ) null , ( Action ) styledEditorKit_ItalicAction0 , ( JComponent ) jToolTip0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mapKeyAsDefault ( KeyStroke key , Action action , JComponent comp ) { int condition = JComponent . WHEN_ANCESTOR_OF_FOCUSED_COMPONENT ; InputMap imap = comp . getInputMap ( condition ) ; imap . put ( key , key ) ; ActionMap amap = comp . getActionMap ( ) ; amap . put ( key , action ) ; }
void test5 ( ) throws Throwable { JCheckBox jCheckBox0 = new JCheckBox ( ( String ) null , true ) ; Object [ ] objectArray0 = new Object [ 9 ] ; objectArray0 [ 0 ] = ( Object ) jCheckBox0 ; JList jList0 = new JList ( objectArray0 ) ; List < Object > list0 = SwingUtils . toModelData ( jList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test6 ( ) throws Throwable { JList jList0 = new JList ( ) ; List < Object > list0 = SwingUtils . toStringList ( jList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test0 ( ) throws Throwable { ActionAdapter actionAdapter0 = new ActionAdapter ( ) ; actionAdapter0 . putValue ( "Np < _Yff3lC" , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test1 ( ) throws Throwable { ActionAdapter actionAdapter0 = new ActionAdapter ( ) ; boolean boolean0 = actionAdapter0 . isEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test2 ( ) throws Throwable { ActionAdapter actionAdapter0 = new ActionAdapter ( ) ; actionAdapter0 . actionPerformed ( ( ActionEvent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test3 ( ) throws Throwable { ActionAdapter actionAdapter0 = new ActionAdapter ( ) ; actionAdapter0 . setEnabled ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test4 ( ) throws Throwable { ActionAdapter actionAdapter0 = new ActionAdapter ( ) ; actionAdapter0 . removePropertyChangeListener ( ( PropertyChangeListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test5 ( ) throws Throwable { ActionAdapter actionAdapter0 = new ActionAdapter ( ) ; PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy ( "TF238 * Xmj1gqyY" , ( PropertyChangeListener ) null ) ; actionAdapter0 . addPropertyChangeListener ( ( PropertyChangeListener ) propertyChangeListenerProxy0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addPropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void addPropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void addWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void addWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void addWindowStateListener ( WindowStateListener arg0 ) ; / * * * @param arg0 * / void applyComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void applyResourceBundle ( String arg0 ) ; / * * * @param arg0 * / void applyResourceBundle ( ResourceBundle arg0 ) ; / * * * @param arg0 * @return * / boolean areFocusTraversalKeysSet ( int arg0 ) ; / * * * @return * / Rectangle bounds ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / int checkImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / int checkImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean contains ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / boolean contains ( Point arg0 ) ; / * * * @return * / int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test6 ( ) throws Throwable { ActionAdapter actionAdapter0 = new ActionAdapter ( ) ; Object object0 = actionAdapter0 . getValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( Element element ) { NodeList nodeList = element . getChildNodes ( ) ; for ( int i = 0 ; i < nodeList . getLength ( ) ; i + + ) { Node child = nodeList . item ( i ) ; if ( child . getNodeType ( ) ! = Node . TEXT_NODE ) continue ; Text text = ( Text ) child ; return text . getNodeValue ( ) ; } return null ; }
void test2 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( ) { if ( null = = myMessage ) myMessage = buildMessage ( ) ; return myMessage ; }
void test3 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( ) ; String string0 = textContentPanel0 . getMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( ) { if ( null = = myMessage ) myMessage = buildMessage ( ) ; return myMessage ; }
void test0 ( ) throws Throwable { SimpleListModel simpleListModel0 = new SimpleListModel ( ( List ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { SimpleListModel simpleListModel0 = new SimpleListModel ( ) ; List < Object > list0 = simpleListModel0 . asList ( ) ; simpleListModel0 . setElements ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test2 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 4 ] ; SimpleListModel simpleListModel0 = new SimpleListModel ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { SimpleListModel simpleListModel0 = new SimpleListModel ( ) ; List < Object > list0 = simpleListModel0 . copyToFileList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test6 ( ) throws Throwable { SimpleListModel simpleListModel0 = new SimpleListModel ( ) ; simpleListModel0 . add ( 0 , ( Object ) "SwingLargeIconKey" ) ; List < Object > list0 = simpleListModel0 . copyToList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test7 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 4 ] ; SimpleListModel simpleListModel0 = new SimpleListModel ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return mySize ; }
void test9 ( ) throws Throwable { SimpleListModel simpleListModel0 = new SimpleListModel ( ) ; simpleListModel0 . moveElementUp ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test10 ( ) throws Throwable { SimpleListModel simpleListModel0 = new SimpleListModel ( ) ; simpleListModel0 . moveElementDown ( 516 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return mySize ; }
void test11 ( ) throws Throwable { SimpleListModel simpleListModel0 = new SimpleListModel ( ( List ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return mySize ; }
void test0 ( ) throws Throwable { TableMap tableMap0 = new TableMap ( ) ; TableModelEvent tableModelEvent0 = new TableModelEvent ( ( TableModel ) tableMap0 , 1664 ) ; tableMap0 . tableChanged ( tableModelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test1 ( ) throws Throwable { TableMap tableMap0 = new TableMap ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ( Vector ) null , ( Vector ) null ) ; tableMap0 . setModel ( ( TableModel ) defaultTableModel0 ) ; int int0 = tableMap0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test5 ( ) throws Throwable { TableMap tableMap0 = new TableMap ( ) ; TableModel tableModel0 = tableMap0 . getModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultTreeModel getModel ( ) { return model ; }
void test8 ( ) throws Throwable { TableMap tableMap0 = new TableMap ( ) ; int int0 = tableMap0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test9 ( ) throws Throwable { TableMap tableMap0 = new TableMap ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ( Vector ) null , ( Vector ) null ) ; tableMap0 . setModel ( ( TableModel ) defaultTableModel0 ) ; int int0 = tableMap0 . getColumnCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test10 ( ) throws Throwable { TableMap tableMap0 = new TableMap ( ) ; tableMap0 . findColumn ( "6" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test0 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = SimpleGridBagConstraint . horizontalConstraint ( ( - 1 ) , 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGridBagConstraint horizontalConstraint ( int gridx , int gridy , Insets insets ) { return new SimpleGridBagConstraint ( gridx , gridy , 1 , 1 , 1 . 0 , 0 . 0 , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , insets , 0 , 0 ) ; }
void test1 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = new SimpleGridBagConstraint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHeight ( ) { return myHeight ; }
void test2 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = SimpleGridBagConstraint . fillConstraint ( 0 , 0 , ( - 686 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGridBagConstraint fillConstraint ( int gridx , int gridy , Insets insets ) { return new SimpleGridBagConstraint ( gridx , gridy , 1 , 1 , 1 . 0 , 1 . 0 , GridBagConstraints . CENTER , GridBagConstraints . BOTH , insets , 0 , 0 ) ; }
void test3 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = SimpleGridBagConstraint . verticalConstraint ( 0 , 0 , 1653 ) ; GridBagConstraints gridBagConstraints0 = simpleGridBagConstraint0 . createButton ( 1781 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridX ( ) { return myGridX ; }
void test4 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = SimpleGridBagConstraint . verticalConstraint ( ( - 844 ) , ( - 844 ) , ( Insets ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGridBagConstraint verticalConstraint ( int gridx , int gridy , int horizontalInset , int verticalInset ) { Insets i = new Insets ( verticalInset , / / top horizontalInset , / / left verticalInset , / / bottom horizontalInset / / right ) ; return new SimpleGridBagConstraint ( gridx , gridy , 1 , 1 , 0 . 0 , 1 . 0 , GridBagConstraints . CENTER , GridBagConstraints . VERTICAL , i , 0 , 0 ) ; }
void test5 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = SimpleGridBagConstraint . buttonConstraint ( 400 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGridBagConstraint buttonConstraint ( int gridx , int gridy , Insets insets ) { return new SimpleGridBagConstraint ( gridx , gridy , 1 , / / width 1 , / / height 0 . 0 , / / horizontal weight 0 . 0 , / / vertical weight GridBagConstraints . CENTER , / / anchor GridBagConstraints . NONE , / / do not expand to fill the component's location insets , / / insets 0 , / / no horizontal padding 0 / / no vertical padding ) ; }
void test6 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = SimpleGridBagConstraint . labelConstraint ( 0 , ( - 1808 ) , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGridBagConstraint labelConstraint ( int gridx , int gridy , int horizontalInset , int verticalInset ) { Insets insets = new Insets ( verticalInset , / / top horizontalInset , / / left verticalInset , / / bottom horizontalInset / / right ) ; return labelConstraint ( gridx , gridy , insets ) ; }
void test7 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = SimpleGridBagConstraint . horizontalConstraint ( 441 , ( - 1107 ) , ( - 1808 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGridBagConstraint horizontalConstraint ( int gridx , int gridy , Insets insets ) { return new SimpleGridBagConstraint ( gridx , gridy , 1 , 1 , 1 . 0 , 0 . 0 , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , insets , 0 , 0 ) ; }
void test8 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = SimpleGridBagConstraint . fillConstraint ( ( - 1808 ) , ( - 1808 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGridBagConstraint fillConstraint ( int gridx , int gridy , Insets insets ) { return new SimpleGridBagConstraint ( gridx , gridy , 1 , 1 , 1 . 0 , 1 . 0 , GridBagConstraints . CENTER , GridBagConstraints . BOTH , insets , 0 , 0 ) ; }
void test9 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = SimpleGridBagConstraint . titleConstraint ( 0 , 262 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGridBagConstraint titleConstraint ( int gridx , int gridy , int inset ) { return new SimpleGridBagConstraint ( gridx , gridy , 1 , 1 , 0 . 0 , 0 . 0 , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( inset , inset , inset , inset ) , 0 , 0 ) ; }
void test10 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = SimpleGridBagConstraint . titleConstraint ( 0 , ( - 187 ) , 0 ) ; GridBagConstraints gridBagConstraints0 = simpleGridBagConstraint0 . createButton ( 0 , ( - 1 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridY ( ) { return myGridY ; }
void test11 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = SimpleGridBagConstraint . labelConstraint ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGridBagConstraint labelConstraint ( int gridx , int gridy , int horizontalInset , int verticalInset ) { Insets insets = new Insets ( verticalInset , / / top horizontalInset , / / left verticalInset , / / bottom horizontalInset / / right ) ; return labelConstraint ( gridx , gridy , insets ) ; }
void test12 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = SimpleGridBagConstraint . comboBoxConstraint ( 0 , 0 , 233 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGridBagConstraint comboBoxConstraint ( int gridx , int gridy , int horizontalInset , int verticalInset ) { Insets i = new Insets ( verticalInset , / / top horizontalInset , / / left verticalInset , / / bottom horizontalInset / / right ) ; return new SimpleGridBagConstraint ( gridx , gridy , 1 , / / width 1 , / / height 0 . 0 , / / horizontal weight 0 . 0 , / / vertical weight GridBagConstraints . WEST , / / anchor GridBagConstraints . NONE , / / do not expand to fill the component's location i , / / insets 0 , / / no horizontal padding 0 / / no vertical padding ) ; }
void test13 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = SimpleGridBagConstraint . verticalConstraint ( ( - 1619 ) , ( - 1619 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGridBagConstraint verticalConstraint ( int gridx , int gridy , int horizontalInset , int verticalInset ) { Insets i = new Insets ( verticalInset , / / top horizontalInset , / / left verticalInset , / / bottom horizontalInset / / right ) ; return new SimpleGridBagConstraint ( gridx , gridy , 1 , 1 , 0 . 0 , 1 . 0 , GridBagConstraints . CENTER , GridBagConstraints . VERTICAL , i , 0 , 0 ) ; }
void test14 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = SimpleGridBagConstraint . comboBoxConstraint ( 0 , 1318 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGridBagConstraint comboBoxConstraint ( int gridx , int gridy , int horizontalInset , int verticalInset ) { Insets i = new Insets ( verticalInset , / / top horizontalInset , / / left verticalInset , / / bottom horizontalInset / / right ) ; return new SimpleGridBagConstraint ( gridx , gridy , 1 , / / width 1 , / / height 0 . 0 , / / horizontal weight 0 . 0 , / / vertical weight GridBagConstraints . WEST , / / anchor GridBagConstraints . NONE , / / do not expand to fill the component's location i , / / insets 0 , / / no horizontal padding 0 / / no vertical padding ) ; }
void test15 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = SimpleGridBagConstraint . insetConstraint ( 0 , 0 , 10 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGridBagConstraint insetConstraint ( int gridx , int gridy , int inset ) { return buttonConstraint ( gridx , gridy , inset ) ; }
void test16 ( ) throws Throwable { SimpleGridBagConstraint simpleGridBagConstraint0 = SimpleGridBagConstraint . labelConstraint ( ( - 686 ) , ( - 611 ) , ( Insets ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGridBagConstraint labelConstraint ( int gridx , int gridy , int horizontalInset , int verticalInset ) { Insets insets = new Insets ( verticalInset , / / top horizontalInset , / / left verticalInset , / / bottom horizontalInset / / right ) ; return labelConstraint ( gridx , gridy , insets ) ; }
void test0 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 6 ] [ 6 ] ; String [ ] stringArray0 = new String [ 9 ] ; ReadonlyDefaultTableModel readonlyDefaultTableModel0 = new ReadonlyDefaultTableModel ( objectArray0 , stringArray0 ) ; boolean boolean0 = readonlyDefaultTableModel0 . isCellEditable ( 1907 , ( - 1626 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int rowIndex , int columnIndex ) { return false ; }
void test0 ( ) throws Throwable { SimpleMouseListener simpleMouseListener0 = new SimpleMouseListener ( ) ; JCheckBox jCheckBox0 = new JCheckBox ( "$Jz2 | _xHz" ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jCheckBox0 , ( - 399 ) , ( long ) ( - 399 ) , 0 , 1596 , 1 , ( - 399 ) , false , 1596 , 12 , ( - 399 ) ) ; simpleMouseListener0 . mouseReleased ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseReleased ( MouseEvent e ) { myEvent = e ; maybeShowPopup ( e ) ; }
void test1 ( ) throws Throwable { SimpleMouseListener simpleMouseListener0 = new SimpleMouseListener ( ) ; JRadioButton jRadioButton0 = new JRadioButton ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jRadioButton0 , 0 , ( long ) 0 , 0 , 0 , 0 , 0 , 0 , 0 , true , 0 , 0 , 0 ) ; simpleMouseListener0 . mouseReleased ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseReleased ( MouseEvent e ) { myEvent = e ; maybeShowPopup ( e ) ; }
void test3 ( ) throws Throwable { SimpleMouseListener simpleMouseListener0 = new SimpleMouseListener ( ) ; JToggleButton jToggleButton0 = new JToggleButton ( ( Icon ) null ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jToggleButton0 , 1788 , ( long ) 1788 , ( - 791 ) , 1788 , 148 , 0 , false , 148 , 1788 , 0 ) ; simpleMouseListener0 . mousePressed ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mousePressed ( MouseEvent e ) { myEvent = e ; maybeShowPopup ( e ) ; }
void test4 ( ) throws Throwable { SimpleMouseListener simpleMouseListener0 = new SimpleMouseListener ( ) ; JTextArea jTextArea0 = new JTextArea ( "" ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jTextArea0 , 443 , 0L , 443 , 0 , 0 , 443 , 1211 , 7 , true , 0 , 7 , 0 ) ; simpleMouseListener0 . singleClick ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void singleClick ( Object source ) { }
void test6 ( ) throws Throwable { SimpleMouseListener simpleMouseListener0 = new SimpleMouseListener ( ) ; JMenu jMenu0 = new JMenu ( "Q1ILwCqtG : 8" , false ) ; MenuElement [ ] menuElementArray0 = new MenuElement [ 1 ] ; MenuSelectionManager menuSelectionManager0 = MenuSelectionManager . defaultManager ( ) ; MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent ( ( Component ) jMenu0 , ( - 1685 ) , ( - 1829L ) , ( - 1 ) , ( - 1864 ) , ( - 1685 ) , 46 , 0 , 432 , false , menuElementArray0 , menuSelectionManager0 ) ; simpleMouseListener0 . mouseReleased ( ( MouseEvent ) menuDragMouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseReleased ( MouseEvent e ) { myEvent = e ; maybeShowPopup ( e ) ; }
void test7 ( ) throws Throwable { SimpleMouseListener simpleMouseListener0 = new SimpleMouseListener ( ) ; JMenuItem jMenuItem0 = new JMenuItem ( ( String ) null , 1122 ) ; MenuElement [ ] menuElementArray0 = new MenuElement [ 5 ] ; MenuSelectionManager menuSelectionManager0 = MenuSelectionManager . defaultManager ( ) ; MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent ( ( Component ) jMenuItem0 , 1699 , ( long ) 1122 , ( - 509 ) , ( - 1 ) , 1122 , ( - 1252 ) , 0 , 341 , false , menuElementArray0 , menuSelectionManager0 ) ; simpleMouseListener0 . mousePressed ( ( MouseEvent ) menuDragMouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mousePressed ( MouseEvent e ) { myEvent = e ; maybeShowPopup ( e ) ; }
void test2 ( ) throws Throwable { String [ ] [ ] stringArray0 = new String [ 8 ] [ 5 ] ; StringTableModel stringTableModel0 = new StringTableModel ( stringArray0 ) ; int int0 = stringTableModel0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test4 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( 10 , 40 ) ; Vector < Object > vector0 = defaultTableModel0 . getDataVector ( ) ; StringTableModel stringTableModel0 = new StringTableModel ( vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test0 ( ) throws Throwable { SimpleChangeableListModel simpleChangeableListModel0 = new SimpleChangeableListModel ( ( List ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test1 ( ) throws Throwable { SimpleChangeableListModel simpleChangeableListModel0 = new SimpleChangeableListModel ( ) ; simpleChangeableListModel0 . removeAll ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; WindowHelper . StandardRKL windowHelper_StandardRKL0 = windowHelper0 . new StandardRKL ( ) ; windowHelper_StandardRKL0 . performAction ( ( Object ) "notify - field - accept" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promptBeforeExit ( ) { return myPromptBeforeExit ; }
void test5 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; windowHelper0 . doubleClick ( ( Object ) "showsRootHandles" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test9 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; JPanel jPanel0 = windowHelper0 . createBottomPanel ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test14 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; JMenuItem jMenuItem0 = new JMenuItem ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jMenuItem0 , 0 , 0L , 1101 , 0 , 0 , ( - 746 ) , true , ( - 1157 ) , ( - 1558 ) , ( - 1157 ) ) ; windowHelper0 . singleMouseClick ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promptBeforeExit ( ) { return myPromptBeforeExit ; }
void test16 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; JPanel jPanel0 = windowHelper0 . createCenterPanel ( ) ; windowHelper0 . addCancelButton ( jPanel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test17 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; LTSPanel lTSPanel0 = new LTSPanel ( ) ; windowHelper0 . createOkClosePanel ( ( JPanel ) lTSPanel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test18 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; SimpleGridBagConstraint simpleGridBagConstraint0 = ( SimpleGridBagConstraint ) windowHelper0 . topPanelConstraints ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promptBeforeExit ( ) { return myPromptBeforeExit ; }
void test19 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; EyeDropperColorChooserPanel eyeDropperColorChooserPanel0 = new EyeDropperColorChooserPanel ( ) ; windowHelper0 . createApplyCancel ( ( JPanel ) eyeDropperColorChooserPanel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test23 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; windowHelper0 . getWindowTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test24 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; SimpleGridBagConstraint simpleGridBagConstraint0 = ( SimpleGridBagConstraint ) windowHelper0 . bottomPanelConstraints ( 884 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promptBeforeExit ( ) { return myPromptBeforeExit ; }
void test25 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; SimpleGridBagConstraint simpleGridBagConstraint0 = ( SimpleGridBagConstraint ) windowHelper0 . centerPanelConstraints ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test29 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; windowHelper0 . createPopupMenu ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test30 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; windowHelper0 . setPopupMenu ( ( JPopupMenu ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promptBeforeExit ( ) { return myPromptBeforeExit ; }
void test32 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; JMenuItem jMenuItem0 = new JMenuItem ( ) ; WindowHelper . LTSMouseListener windowHelper_LTSMouseListener0 = windowHelper0 . new LTSMouseListener ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jMenuItem0 , 0 , 0L , 1101 , 0 , 0 , ( - 746 ) , true , ( - 1157 ) , ( - 1558 ) , ( - 1157 ) ) ; windowHelper_LTSMouseListener0 . mouseReleased ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promptBeforeExit ( ) { return myPromptBeforeExit ; }
void test33 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; windowHelper0 . changesAccepted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promptBeforeExit ( ) { return myPromptBeforeExit ; }
void test34 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; windowHelper0 . getWindow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promptBeforeExit ( ) { return myPromptBeforeExit ; }
void test36 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; windowHelper0 . createMenuBar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promptBeforeExit ( ) { return myPromptBeforeExit ; }
void test41 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; WindowHelper . LocalListSelectionListener windowHelper_LocalListSelectionListener0 = windowHelper0 . new LocalListSelectionListener ( ) ; ListSelectionEvent listSelectionEvent0 = new ListSelectionEvent ( ( Object ) "model" , 0 , 0 , true ) ; windowHelper_LocalListSelectionListener0 . valueChanged ( listSelectionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promptBeforeExit ( ) { return myPromptBeforeExit ; }
void test46 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; WindowHelper . StandardRKL windowHelper_StandardRKL0 = ( WindowHelper . StandardRKL ) windowHelper0 . getReturnKeyListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test47 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; boolean boolean0 = windowHelper0 . promptBeforeExit ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test48 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test49 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; windowHelper0 . deleteKeyPressed ( ( Object ) "ROW_HEADER" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test51 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; JPanel jPanel0 = windowHelper0 . createTopPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promptBeforeExit ( ) { return myPromptBeforeExit ; }
void test53 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; JMenuItem jMenuItem0 = new JMenuItem ( ) ; WindowHelper . LTSMouseListener windowHelper_LTSMouseListener0 = windowHelper0 . new LTSMouseListener ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jMenuItem0 , 0 , 0L , 1101 , 0 , 0 , ( - 746 ) , true , ( - 1157 ) , ( - 1558 ) , ( - 1157 ) ) ; windowHelper_LTSMouseListener0 . mousePressed ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promptBeforeExit ( ) { return myPromptBeforeExit ; }
void test54 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; WindowHelper . LTSWindow windowHelper_LTSWindow0 = windowHelper0 . new LTSWindow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promptBeforeExit ( ) { return myPromptBeforeExit ; }
void test55 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; WindowHelper . StandardKeyListener windowHelper_StandardKeyListener0 = ( WindowHelper . StandardKeyListener ) windowHelper0 . getKeyListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test56 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; windowHelper0 . performAction ( ( Object ) "ControlButtonsAreShownChangedProperty" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promptBeforeExit ( ) { return myPromptBeforeExit ; }
void test57 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; LTSPanel lTSPanel0 = ( LTSPanel ) windowHelper0 . createBottomPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promptBeforeExit ( ) { return myPromptBeforeExit ; }
void test59 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; WindowHelper . LTSMouseListener windowHelper_LTSMouseListener0 = windowHelper0 . new LTSMouseListener ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( 0 , 0 ) ; JTable jTable0 = new JTable ( ( TableModel ) defaultTableModel0 , ( TableColumnModel ) null ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) jTable0 , 0 , ( - 16L ) , 0 , ( - 2017 ) , 0 , ( - 2017 ) , false ) ; windowHelper_LTSMouseListener0 . maybeShowPopup ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test60 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; WindowHelper . LTSMouseListener windowHelper_LTSMouseListener0 = ( WindowHelper . LTSMouseListener ) windowHelper0 . getMouseAdapter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test61 ( ) throws Throwable { String string0 = WindowHelper . trimString ( "Quit Application ? " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String trimString ( String s ) { if ( null = = s ) return null ; s = s . trim ( ) ; if ( "" . equals ( s ) ) return null ; else return s ; }
void test62 ( ) throws Throwable { String string0 = WindowHelper . trimString ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String trimString ( String s ) { if ( null = = s ) return null ; s = s . trim ( ) ; if ( "" . equals ( s ) ) return null ; else return s ; }
void test63 ( ) throws Throwable { WindowHelper windowHelper0 = new WindowHelper ( ( SwingWindow ) null ) ; WindowHelper . LocalListSelectionListener windowHelper_LocalListSelectionListener0 = ( WindowHelper . LocalListSelectionListener ) windowHelper0 . getListSelectionListener ( ) ; WindowHelper . LocalListSelectionListener windowHelper_LocalListSelectionListener1 = ( WindowHelper . LocalListSelectionListener ) windowHelper0 . getListSelectionListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean promptBeforeExit ( ) { return myPromptBeforeExit ; }
void test0 ( ) throws Throwable { JDialogUtil jDialogUtil0 = new JDialogUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { SimpleGBC simpleGBC0 = SimpleGBC . title ( ( - 736 ) , ( - 736 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGBC title ( int x , int y , int inset , int width ) { return new SimpleGBC ( x , y , width , 1 , 0 . 0 , 0 . 0 , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( inset , inset , inset , inset ) , 0 , 0 ) ; }
void test1 ( ) throws Throwable { SimpleGBC simpleGBC0 = SimpleGBC . title ( 0 , 0 , ( - 1329 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGBC title ( int x , int y , int inset , int width ) { return new SimpleGBC ( x , y , width , 1 , 0 . 0 , 0 . 0 , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( inset , inset , inset , inset ) , 0 , 0 ) ; }
void test2 ( ) throws Throwable { SimpleGBC simpleGBC0 = SimpleGBC . label ( 0 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGBC label ( int row , int col , int horizontalInset , int verticalInset ) { Insets i = new Insets ( verticalInset , / / top horizontalInset , / / left verticalInset , / / bottom horizontalInset / / right ) ; return new SimpleGBC ( row , col , 1 , / / width 1 , / / height 0 . 0 , / / horizontal weight 0 . 0 , / / vertical weight GridBagConstraints . WEST , / / anchor GridBagConstraints . NONE , / / do not expand to fill the component's location i , / / insets 0 , / / no horizontal padding 0 / / no vertical padding ) ; }
void test3 ( ) throws Throwable { SimpleGBC simpleGBC0 = SimpleGBC . fill ( ( - 1548 ) , ( - 1548 ) , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGBC fill ( int row , int col , int inset , int width ) { Insets i = new Insets ( inset , / / top inset , / / left inset , / / bottom inset / / right ) ; return new SimpleGBC ( row , col , width , 1 , 1 . 0 , 1 . 0 , GridBagConstraints . CENTER , GridBagConstraints . BOTH , i , 0 , 0 ) ; }
void test4 ( ) throws Throwable { SimpleGBC simpleGBC0 = SimpleGBC . button ( ( - 736 ) , ( - 736 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGBC button ( int row , int col , int insets ) { Insets i = new Insets ( insets , / / top insets , / / left insets , / / bottom insets / / right ) ; return new SimpleGBC ( row , col , 1 , / / width 1 , / / height 0 . 0 , / / horizontal weight 0 . 0 , / / vertical weight GridBagConstraints . CENTER , / / anchor GridBagConstraints . NONE , / / do not expand to fill the component's location i , / / insets 0 , / / no horizontal padding 0 / / no vertical padding ) ; }
void test5 ( ) throws Throwable { SimpleGBC simpleGBC0 = SimpleGBC . comboBoxConstraint ( ( - 543 ) , ( - 1729 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGridBagConstraint comboBoxConstraint ( int gridx , int gridy , int horizontalInset , int verticalInset ) { Insets i = new Insets ( verticalInset , / / top horizontalInset , / / left verticalInset , / / bottom horizontalInset / / right ) ; return new SimpleGridBagConstraint ( gridx , gridy , 1 , / / width 1 , / / height 0 . 0 , / / horizontal weight 0 . 0 , / / vertical weight GridBagConstraints . WEST , / / anchor GridBagConstraints . NONE , / / do not expand to fill the component's location i , / / insets 0 , / / no horizontal padding 0 / / no vertical padding ) ; }
void test6 ( ) throws Throwable { SimpleGBC simpleGBC0 = SimpleGBC . comboBox ( ( - 1914 ) , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGBC comboBox ( int row , int col , int horizontalInset , int verticalInset ) { Insets i = new Insets ( verticalInset , / / top horizontalInset , / / left verticalInset , / / bottom horizontalInset / / right ) ; return new SimpleGBC ( row , col , 1 , / / width 1 , / / height 0 . 0 , / / horizontal weight 0 . 0 , / / vertical weight GridBagConstraints . WEST , / / anchor GridBagConstraints . NONE , / / do not expand to fill the component's location i , / / insets 0 , / / no horizontal padding 0 / / no vertical padding ) ; }
void test7 ( ) throws Throwable { SimpleGBC simpleGBC0 = SimpleGBC . insetConstraint ( ( - 1522 ) , 1 , 195 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGridBagConstraint insetConstraint ( int gridx , int gridy , int inset ) { return buttonConstraint ( gridx , gridy , inset ) ; }
void test8 ( ) throws Throwable { SimpleGBC simpleGBC0 = SimpleGBC . horizontal ( ( - 1589 ) , ( - 1589 ) , ( - 65 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGBC horizontal ( int row , int col , int horizontalInset , int verticalInset ) { Insets i = new Insets ( verticalInset , / / top horizontalInset , / / left verticalInset , / / bottom horizontalInset / / right ) ; return new SimpleGBC ( row , col , 1 , 1 , 1 . 0 , 0 . 0 , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , i , 0 , 0 ) ; }
void test9 ( ) throws Throwable { SimpleGBC simpleGBC0 = SimpleGBC . fill ( 0 , 17 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGBC fill ( int row , int col , int inset , int width ) { Insets i = new Insets ( inset , / / top inset , / / left inset , / / bottom inset / / right ) ; return new SimpleGBC ( row , col , width , 1 , 1 . 0 , 1 . 0 , GridBagConstraints . CENTER , GridBagConstraints . BOTH , i , 0 , 0 ) ; }
void test10 ( ) throws Throwable { SimpleGBC simpleGBC0 = SimpleGBC . horizontal ( ( - 1779 ) , ( - 1779 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGBC horizontal ( int row , int col , int horizontalInset , int verticalInset ) { Insets i = new Insets ( verticalInset , / / top horizontalInset , / / left verticalInset , / / bottom horizontalInset / / right ) ; return new SimpleGBC ( row , col , 1 , 1 , 1 . 0 , 0 . 0 , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , i , 0 , 0 ) ; }
void test11 ( ) throws Throwable { SimpleGBC simpleGBC0 = SimpleGBC . none ( 1 , ( - 1600 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleGBC none ( int row , int col , int inset ) { Insets i = new Insets ( inset , / / top inset , / / left inset , / / bottom inset / / right ) ; return new SimpleGBC ( row , col , 1 , / / width 1 , / / height 0 . 0 , / / horizontal weight 0 . 0 , / / vertical weight GridBagConstraints . CENTER , / / anchor GridBagConstraints . NONE , / / do not expand to fill the component's location i , / / insets 0 , / / no horizontal padding 0 / / no vertical padding ) ; }
void test0 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; LTSPanel lTSPanel0 = ( LTSPanel ) listPanel0 . createButtonPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddButtonText ( ) { return myAddButtonText ; }
void test1 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; ListPanel . ListReturnKeyListener listPanel_ListReturnKeyListener0 = listPanel0 . new ListReturnKeyListener ( ) ; listPanel_ListReturnKeyListener0 . performAction ( ( Object ) "x - java - file - list" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowButtons ( ) { return myShowButtons ; }
void test2 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; ListPanel . ListPanelButtonListener listPanel_ListPanelButtonListener0 = listPanel0 . getListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUpButtonText ( ) { return myUpButtonText ; }
void test3 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; ListPanel . ListMouseListener listPanel_ListMouseListener0 = listPanel0 . getMouseListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void maybeShowPopup ( MouseEvent e ) { if ( e . isPopupTrigger ( ) ) { myEvent = e ; Object source = e . getSource ( ) ; showPopup ( source , e . getX ( ) , e . getY ( ) ) ; } }
void test4 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; ListPanel . ListMouseListener listPanel_ListMouseListener0 = listPanel0 . getMouseListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean showButtons ( ) { return getShowButtons ( ) ; }
void test5 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; boolean boolean0 = listPanel0 . showButtons ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDownButtonText ( ) { return myDownButtonText ; }
void test7 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . setDownButtonText ( "p" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUpButtonText ( ) { return myUpButtonText ; }
void test10 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean editOnDoubleClick ( ) { return myEditOnDoubleClick ; }
void test11 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . setShowButtons ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getButtonOrientation ( ) { return myButtonOrientation ; }
void test12 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . setAddButtonCallback ( ( Callback ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEditButtonText ( ) { return myEditButtonText ; }
void test13 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . setAddButtonText ( " < _" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getButtonOrientation ( ) { return myButtonOrientation ; }
void test14 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; ListPanel . ListMouseListener listPanel_ListMouseListener0 = listPanel0 . new ListMouseListener ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) listPanel0 , 0 , ( long ) 'v' , 0 , 0 , 5 , ( - 1132 ) , true , 0 ) ; listPanel_ListMouseListener0 . mouseClicked ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddButtonText ( ) { return myAddButtonText ; }
void test15 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . setDeleteButtonCallback ( ( Callback ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowButtons ( ) { return myShowButtons ; }
void test16 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . setDoubleClickCallback ( ( Callback ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getEditOnDoubleClick ( ) { return editOnDoubleClick ( ) ; }
void test17 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; String string0 = listPanel0 . getEditButtonText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getShowButtons ( ) { return myShowButtons ; }
void test19 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDeleteButtonText ( ) { return myDeleteButtonText ; }
void test20 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . setButtonPanelMode ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDownButtonText ( ) { return myDownButtonText ; }
void test21 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . setButtonOrientation ( 386 ) ; listPanel0 . addButtonToPanel ( ( JButton ) null , ( LTSPanel ) listPanel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getButtonOrientation ( ) { return myButtonOrientation ; }
void test22 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . setDeleteButtonText ( "p" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDeleteButtonText ( ) { return myDeleteButtonText ; }
void test23 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . setEditCallback ( ( Callback ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEditButtonText ( ) { return myEditButtonText ; }
void test24 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . setDisplayButton ( 1842 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDeleteButtonText ( ) { return myDeleteButtonText ; }
void test25 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . getDoubleClickCallback ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean showButtons ( ) { return getShowButtons ( ) ; }
void test26 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . editElement ( ( Object ) "rolloverIcon" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean editOnDoubleClick ( ) { return myEditOnDoubleClick ; }
void test27 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . setList ( ( JList ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDeleteButtonText ( ) { return myDeleteButtonText ; }
void test28 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; boolean boolean0 = listPanel0 . confirmDelete ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean showButtons ( ) { return getShowButtons ( ) ; }
void test29 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; boolean boolean0 = listPanel0 . getEditOnDoubleClick ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getButtonOrientation ( ) { return myButtonOrientation ; }
void test30 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . setEditButtonText ( " . label . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean editOnDoubleClick ( ) { return myEditOnDoubleClick ; }
void test31 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddButtonText ( ) { return myAddButtonText ; }
void test32 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . setDownButtonCallback ( ( Callback ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEditButtonText ( ) { return myEditButtonText ; }
void test33 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . setEditButton ( ( JButton ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getEditOnDoubleClick ( ) { return editOnDoubleClick ( ) ; }
void test34 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . setUpButtonCallback ( ( Callback ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean editOnDoubleClick ( ) { return myEditOnDoubleClick ; }
void test35 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; Suspender suspender0 = new Suspender ( ) ; listPanel0 . setEditButtonCallback ( ( Callback ) suspender0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean editOnDoubleClick ( ) { return myEditOnDoubleClick ; }
void test37 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; SimpleChangeableListModel simpleChangeableListModel0 = new SimpleChangeableListModel ( ) ; List < Object > list0 = simpleChangeableListModel0 . asList ( ) ; listPanel0 . addAll ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getEditOnDoubleClick ( ) { return editOnDoubleClick ( ) ; }
void test38 ( ) throws Throwable { ListPanel listPanel0 = new ListPanel ( ) ; listPanel0 . addAll ( ( List ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getResponseToEnter ( ) { return myResponseToEnter ; }
void test0 ( ) throws Throwable { LTSDatePicker lTSDatePicker0 = new LTSDatePicker ( ) ; lTSDatePicker0 . initializePreferredSize ( ) ; Dimension dimension0 = lTSDatePicker0 . getPreferredSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test0 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList . LTSMouseListener lTSList_LTSMouseListener0 = lTSList0 . new LTSMouseListener ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) lTSList0 , 20 , ( long ) 20 , 20 , 20 , 20 , 20 , true , 20 , 20 , 20 ) ; lTSList_LTSMouseListener0 . mousePressed ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test1 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList . LTSKeyAdapter lTSList_LTSKeyAdapter0 = lTSList0 . new LTSKeyAdapter ( lTSList0 ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) lTSList0 , 10 , ( long ) 10 , 10 , 10 , 'l' ) ; lTSList_LTSKeyAdapter0 . keyPressed ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyPressed ( KeyEvent event ) { switch ( event . getKeyCode ( ) ) { case KeyEvent . VK_ENTER : case KeyEvent . VK_INSERT : case KeyEvent . VK_DELETE : case KeyEvent . VK_TAB : this . fire ( event . getKeyCode ( ) ) ; break ; } }
void test2 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList . LTSMouseListener lTSList_LTSMouseListener0 = lTSList0 . new LTSMouseListener ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) lTSList0 , ( - 16 ) , ( - 27L ) , ( - 16 ) , ( - 16 ) , ( - 16 ) , ( - 16 ) , true , ( - 16 ) , ( - 16 ) , 0 ) ; lTSList_LTSMouseListener0 . mouseClicked ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent e ) { myEvent = e ; Object source = e . getSource ( ) ; if ( e . isPopupTrigger ( ) ) maybeShowPopup ( e ) ; else if ( e . getClickCount ( ) < 2 ) singleClick ( source ) ; else doubleClick ( source ) ; }
void test3 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; ListListenerAdaptor listListenerAdaptor0 = new ListListenerAdaptor ( lTSList0 ) ; lTSList0 . removeListListener ( ( ListListener ) listListenerAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeListListener ( ListListener listener ) { getListenerHelper ( ) . removeListener ( listener ) ; }
void test4 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList . LTSKeyAdapter lTSList_LTSKeyAdapter0 = lTSList0 . new LTSKeyAdapter ( lTSList0 ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) lTSList0 , 12 , ( long ) 12 , 12 , 155 , 'l' ) ; lTSList_LTSKeyAdapter0 . keyPressed ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyPressed ( KeyEvent event ) { switch ( event . getKeyCode ( ) ) { case KeyEvent . VK_ENTER : case KeyEvent . VK_INSERT : case KeyEvent . VK_DELETE : case KeyEvent . VK_TAB : this . fire ( event . getKeyCode ( ) ) ; break ; } }
void test5 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; lTSList0 . addSelectionInterval ( 1059 , 1 ) ; LTSList . LTSMouseListener lTSList_LTSMouseListener0 = lTSList0 . new LTSMouseListener ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) lTSList0 , 10 , ( long ) 10 , 10 , 10 , 0 , 0 , 1 , 10 , false , 10 , 10 , 0 ) ; lTSList_LTSMouseListener0 . mouseClicked ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent e ) { myEvent = e ; Object source = e . getSource ( ) ; if ( e . isPopupTrigger ( ) ) maybeShowPopup ( e ) ; else if ( e . getClickCount ( ) < 2 ) singleClick ( source ) ; else doubleClick ( source ) ; }
void test6 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; lTSList0 . deleteEntry ( ( - 1525 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void deleteEntry ( ) { int [ ] selections = myTable . getSelectedRows ( ) ; if ( null = = selections | | selections . length < 1 ) { return ; } String msg = "Delete entry ( ies ) ? " ; int result = JOptionPane . showConfirmDialog ( this , msg ) ; if ( result = = JOptionPane . OK_OPTION ) { myBuilder . myModel . remove ( selections ) ; } }
void test7 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList . LTSMouseListener lTSList_LTSMouseListener0 = lTSList0 . new LTSMouseListener ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) lTSList0 , ( - 16 ) , ( - 27L ) , ( - 16 ) , ( - 16 ) , ( - 16 ) , ( - 16 ) , true , ( - 16 ) , ( - 16 ) , 0 ) ; lTSList_LTSMouseListener0 . mouseReleased ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test8 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList . LTSMouseListener lTSList_LTSMouseListener0 = lTSList0 . new LTSMouseListener ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) lTSList0 , 1 , ( long ) 1 , 1 , 1 , 1 , 1059 , false , 1 ) ; lTSList_LTSMouseListener0 . mouseReleased ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseReleased ( MouseEvent e ) { myEvent = e ; maybeShowPopup ( e ) ; }
void test9 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList . LTSKeyAdapter lTSList_LTSKeyAdapter0 = lTSList0 . new LTSKeyAdapter ( lTSList0 ) ; KeyEvent keyEvent0 = new KeyEvent ( ( Component ) lTSList0 , ( - 952 ) , 1675L , ( - 952 ) , ( - 952 ) , ' - ' , 0 ) ; lTSList_LTSKeyAdapter0 . keyPressed ( keyEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void keyPressed ( KeyEvent event ) { switch ( event . getKeyCode ( ) ) { case KeyEvent . VK_ENTER : case KeyEvent . VK_INSERT : case KeyEvent . VK_DELETE : case KeyEvent . VK_TAB : this . fire ( event . getKeyCode ( ) ) ; break ; } }
void test10 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; lTSList0 . initialize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void initialize ( ) { createFields ( ) ; configureFields ( ) ; }
void test11 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; LTSList lTSList1 = new LTSList ( ) ; LTSList . LTSMouseListener lTSList_LTSMouseListener0 = lTSList1 . new LTSMouseListener ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) lTSList0 , 293 , ( long ) 293 , 293 , 293 , 293 , 293 , false , 293 , 293 , 293 ) ; lTSList_LTSMouseListener0 . mouseClicked ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent e ) { myEvent = e ; Object source = e . getSource ( ) ; if ( e . isPopupTrigger ( ) ) maybeShowPopup ( e ) ; else if ( e . getClickCount ( ) < 2 ) singleClick ( source ) ; else doubleClick ( source ) ; }
void test12 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) lTSList0 , 194 , ( long ) 194 , 194 , 194 , 194 , 194 , 194 , 194 , true , 194 , 194 , 194 ) ; lTSList0 . doubleMouseClick ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void doubleMouseClick ( MouseEvent e ) { if ( e . getSource ( ) ! = this ) return ; Object o = getSelectedValue ( ) ; if ( null = = o ) return ; doubleClickEntry ( o ) ; }
void test0 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; ListListenerAdaptor listListenerAdaptor0 = new ListListenerAdaptor ( lTSList0 ) ; LTSList lTSList1 = listListenerAdaptor0 . getList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test1 ( ) throws Throwable { LTSList lTSList0 = new LTSList ( ) ; ListListenerAdaptor listListenerAdaptor0 = new ListListenerAdaptor ( lTSList0 ) ; listListenerAdaptor0 . showPopup ( ( Component ) lTSList0 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getHeight ( ) { return myHeight ; }
void test0 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . AllButtons ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test1 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . None ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test2 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . JustDelete ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test3 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . MinusAdd ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void update ( Object data , int location ) { Object o = myList . get ( location ) ; myList . set ( location , data ) ; myHelper . fireUpdate ( location , o ) ; }
void test4 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . MovementButtons ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test5 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . EditButtons ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test6 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . EditButtons ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test7 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . EditButtons ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridy ( ) { return myGridy ; }
void test8 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . None ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridy ( ) { return myGridy ; }
void test9 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . EditButtons ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test10 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . None ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void initialize ( ) { createFields ( ) ; configureFields ( ) ; }
void test11 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . AllButtons ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test12 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . AllButtons ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void processKey ( InputKey key ) { switch ( key ) { case Delete : processDelete ( ) ; break ; case Insert : processCreate ( ) ; break ; default : String message = "Unrecognized key code : " + key ; throw new IllegalArgumentException ( message ) ; } }
void test13 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . EditButtons ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void processKey ( InputKey key ) { switch ( key ) { case Delete : processDelete ( ) ; break ; case Insert : processCreate ( ) ; break ; default : String message = "Unrecognized key code : " + key ; throw new IllegalArgumentException ( message ) ; } }
void test14 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . EditButtons ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test15 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . AllButtons ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test16 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . AllButtons ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test17 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . MinusAdd ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test18 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . EditButtons ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test19 ( ) throws Throwable { SimpleCrudListPanel . PanelMode simpleCrudListPanel_PanelMode0 = SimpleCrudListPanel . PanelMode . JustDelete ; SimpleCrudListPanel simpleCrudListPanel0 = new SimpleCrudListPanel ( simpleCrudListPanel_PanelMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridy ( ) { return myGridy ; }
void test0 ( ) throws Throwable { JList jList0 = new JList ( ( Vector < ? > ) null ) ; JListUtils . removeSelected ( jList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test1 ( ) throws Throwable { JListUtils jListUtils0 = new JListUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { JList jList0 = new JList ( ( Vector < ? > ) null ) ; int [ ] intArray0 = new int [ 1 ] ; JListUtils . removeIndicies ( jList0 , intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test3 ( ) throws Throwable { JList jList0 = new JList ( ( Vector < ? > ) null ) ; List < Object > list0 = JListUtils . getSelectedList ( jList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test1 ( ) throws Throwable { int int0 = FormBuilder . stringToFillOption ( "vwaK { > \"m" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int stringToFillOption ( String str ) { return ourFillOptionMap . stringToInt ( str ) ; }
void test2 ( ) throws Throwable { String string0 = FormBuilder . fillOptionToString ( 53 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String fillOptionToString ( int option ) { return ourFillOptionMap . intToString ( option ) ; }
void test6 ( ) throws Throwable { DefaultTableTreeModel defaultTableTreeModel0 = new DefaultTableTreeModel ( ) ; PrinterStateReasons printerStateReasons0 = new PrinterStateReasons ( ) ; defaultTableTreeModel0 . setNodeToRowMap ( ( Map ) printerStateReasons0 ) ; int int0 = defaultTableTreeModel0 . nodeToRow ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nodeToRow ( Object node ) { Integer i = ( Integer ) myNodeToRowMap . get ( node ) ; if ( null = = i ) return - 1 ; else return i . intValue ( ) ; }
void test19 ( ) throws Throwable { DefaultTableTreeModel defaultTableTreeModel0 = new DefaultTableTreeModel ( ) ; Class < Object > class0 = defaultTableTreeModel0 . getColumnClass ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSimpleName ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( myTrace [ 0 ] . getClassName ( ) ) ; sb . append ( ' . ' ) ; sb . append ( myTrace [ 0 ] . getMethodName ( ) ) ; sb . append ( ' : ' ) ; sb . append ( myTrace [ 0 ] . getLineNumber ( ) ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor ( ) ; Object object0 = abstractCellEditor0 . getCellEditorValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getCellEditorValue ( ) { return null ; }
void test1 ( ) throws Throwable { AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor ( ) ; boolean boolean0 = abstractCellEditor0 . shouldSelectCell ( ( EventObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean shouldSelectCell ( EventObject anEvent ) { return false ; }
void test2 ( ) throws Throwable { AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor ( ) ; boolean boolean0 = abstractCellEditor0 . stopCellEditing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean stopCellEditing ( ) { return true ; }
void test3 ( ) throws Throwable { AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor ( ) ; abstractCellEditor0 . cancelCellEditing ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean stopCellEditing ( ) { return true ; }
void test4 ( ) throws Throwable { AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor ( ) ; boolean boolean0 = abstractCellEditor0 . isCellEditable ( ( EventObject ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int rowIndex , int columnIndex ) { return false ; }
void test5 ( ) throws Throwable { AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; Vector < Object > vector0 = defaultTableModel0 . getDataVector ( ) ; JTable jTable0 = new JTable ( vector0 , vector0 ) ; abstractCellEditor0 . removeCellEditorListener ( ( CellEditorListener ) jTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeCellEditorListener ( CellEditorListener l ) { listenerList . remove ( CellEditorListener . class , l ) ; }
void test6 ( ) throws Throwable { AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; Vector < Object > vector0 = defaultTableModel0 . getDataVector ( ) ; JTable jTable0 = new JTable ( vector0 , vector0 ) ; abstractCellEditor0 . addCellEditorListener ( ( CellEditorListener ) jTable0 ) ; abstractCellEditor0 . fireEditingCanceled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean stopCellEditing ( ) { return true ; }
void test7 ( ) throws Throwable { AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor ( ) ; JTable jTable0 = new JTable ( ) ; abstractCellEditor0 . addCellEditorListener ( ( CellEditorListener ) jTable0 ) ; abstractCellEditor0 . fireEditingStopped ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean stopCellEditing ( ) { return true ; }
void test8 ( ) throws Throwable { AbstractCellEditor abstractCellEditor0 = new AbstractCellEditor ( ) ; abstractCellEditor0 . fireEditingCanceled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean stopCellEditing ( ) { return true ; }
void test0 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; JTree jTree0 = new JTree ( ( TreeModel ) defaultTreeTableModel0 ) ; TreeTableModelAdapter treeTableModelAdapter0 = new TreeTableModelAdapter ( ( TreeTableModel ) defaultTreeTableModel0 , jTree0 ) ; int int0 = treeTableModelAdapter0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test1 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; JTree jTree0 = new JTree ( ) ; TreeTableModelAdapter treeTableModelAdapter0 = new TreeTableModelAdapter ( ( TreeTableModel ) defaultTreeTableModel0 , jTree0 ) ; treeTableModelAdapter0 . tree . fireTreeCollapsed ( ( TreePath ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test3 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; JTree jTree0 = new JTree ( ) ; TreeTableModelAdapter treeTableModelAdapter0 = new TreeTableModelAdapter ( ( TreeTableModel ) defaultTreeTableModel0 , jTree0 ) ; treeTableModelAdapter0 . delayedFireTableDataChanged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test4 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; JTree jTree0 = new JTree ( ) ; TreeTableModelAdapter treeTableModelAdapter0 = new TreeTableModelAdapter ( ( TreeTableModel ) defaultTreeTableModel0 , jTree0 ) ; JTable jTable0 = new JTable ( ( TableModel ) treeTableModelAdapter0 , ( TableColumnModel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test5 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; JTree jTree0 = new JTree ( ) ; TreeTableModelAdapter treeTableModelAdapter0 = new TreeTableModelAdapter ( ( TreeTableModel ) defaultTreeTableModel0 , jTree0 ) ; Class < Object > class0 = treeTableModelAdapter0 . getColumnClass ( ( - 808 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getColumnClass ( int column ) { return String . class ; }
void test6 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; JTree jTree0 = new JTree ( ( TreeModel ) defaultTreeTableModel0 ) ; TreeTableModelAdapter treeTableModelAdapter0 = new TreeTableModelAdapter ( ( TreeTableModel ) defaultTreeTableModel0 , jTree0 ) ; String string0 = treeTableModelAdapter0 . getColumnName ( ( - 6 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int column ) { return COLUMN_NAMES [ column ] ; }
void test7 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; JTree jTree0 = new JTree ( ) ; TreeTableModelAdapter treeTableModelAdapter0 = new TreeTableModelAdapter ( ( TreeTableModel ) defaultTreeTableModel0 , jTree0 ) ; JTree jTree1 = treeTableModelAdapter0 . getTree ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test0 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; TreeTable treeTable0 = new TreeTable ( ( TreeTableModel ) defaultTreeTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; TreeTable treeTable0 = new TreeTable ( ( TreeTableModel ) defaultTreeTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeNode ( DefaultMutableTreeNode node ) ; / * * * This method moves a node from one parent to another . * < P > * This method initiates the appropriate request to move the designated node * from its current parent to a new partent node . * < P > * The method does not directly interact with the tree model . Instead it requests * that a particular action take place and then the tree listens for changes . * * @param node The node to move . * @param destination The new parent for the node . * / void moveNode ( DefaultMutableTreeNode node , DefaultMutableTreeNode destination ) ; Application app ; DefaultMutableTreeNode [ ] myCutNodes ; EditTree ( DefaultTreeModel model ) throws ApplicationException { super ( model ) ; initialize ( ) ; }
void test2 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; TreeTable treeTable0 = new TreeTable ( ( TreeTableModel ) defaultTreeTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void print ( float f ) { printPrefix ( ) ; super . print ( f ) ; }
void test3 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; TreeTable treeTable0 = new TreeTable ( ( TreeTableModel ) defaultTreeTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWidth ( ) { return myWidth ; }
void test4 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; TreeTable treeTable0 = new TreeTable ( ( TreeTableModel ) defaultTreeTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultMutableTreeNode getSelectedNode ( ) { TreePath path = getSelectionPath ( ) ; if ( null = = path ) return null ; return ( DefaultMutableTreeNode ) path . getLastPathComponent ( ) ; }
void test5 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; TreeTable treeTable0 = new TreeTable ( ( TreeTableModel ) defaultTreeTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test6 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; TreeTable treeTable0 = new TreeTable ( ( TreeTableModel ) defaultTreeTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test7 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; TreeTable treeTable0 = new TreeTable ( ( TreeTableModel ) defaultTreeTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test8 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; TreeTable treeTable0 = new TreeTable ( ( TreeTableModel ) defaultTreeTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test9 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; TreeTable treeTable0 = new TreeTable ( ( TreeTableModel ) defaultTreeTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test10 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; TreeTable treeTable0 = new TreeTable ( ( TreeTableModel ) defaultTreeTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test11 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; TreeTable treeTable0 = new TreeTable ( ( TreeTableModel ) defaultTreeTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test12 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; TreeTable treeTable0 = new TreeTable ( ( TreeTableModel ) defaultTreeTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test13 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; TreeTable treeTable0 = new TreeTable ( ( TreeTableModel ) defaultTreeTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test0 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode ( ) ; defaultTreeTableModel0 . unmapNodeToRow ( ( TreeNode ) defaultMutableTreeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( Object node ) { return getTreeModel ( ) . isLeaf ( node ) ; }
void test4 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; DefaultMutableTreeNode defaultMutableTreeNode0 = ( DefaultMutableTreeNode ) defaultTreeTableModel0 . getRoot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int rowIndex , int columnIndex ) { return false ; }
void test6 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; BasicTreeUI basicTreeUI0 = new BasicTreeUI ( ) ; BasicTreeUI . TreeModelHandler basicTreeUI_TreeModelHandler0 = basicTreeUI0 . new TreeModelHandler ( ) ; defaultTreeTableModel0 . addTreeModelListener ( ( TreeModelListener ) basicTreeUI_TreeModelHandler0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test7 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; defaultTreeTableModel0 . setTreeModel ( ( TreeModel ) defaultTreeTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test8 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; defaultTreeTableModel0 . mapNodeToRow ( ( TreeNode ) null , 0 ) ; int int0 = defaultTreeTableModel0 . nodeToRow ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int nodeToRow ( Object node ) { Integer i = ( Integer ) myNodeToRowMap . get ( node ) ; if ( null = = i ) return - 1 ; else return i . intValue ( ) ; }
void test9 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; MetalTreeUI metalTreeUI0 = new MetalTreeUI ( ) ; BasicTreeUI . TreeModelHandler basicTreeUI_TreeModelHandler0 = metalTreeUI0 . new TreeModelHandler ( ) ; defaultTreeTableModel0 . removeTreeModelListener ( ( TreeModelListener ) basicTreeUI_TreeModelHandler0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test11 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; String string0 = defaultTreeTableModel0 . getColumnName ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int column ) { return COLUMN_NAMES [ column ] ; }
void test13 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; Properties properties0 = new Properties ( ) ; defaultTreeTableModel0 . setNodeToRowMap ( ( Map ) properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test16 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; int int0 = defaultTreeTableModel0 . getColumnCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test17 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; Class < Object > class0 = defaultTreeTableModel0 . getColumnClass ( ( - 1608 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test18 ( ) throws Throwable { DefaultTreeTableModel defaultTreeTableModel0 = new DefaultTreeTableModel ( ) ; Class < Object > class0 = defaultTreeTableModel0 . getColumnClass ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getColumnClass ( int column ) { return String . class ; }
void test0 ( ) throws Throwable { TestTableTreeModel testTableTreeModel0 = new TestTableTreeModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test1 ( ) throws Throwable { TestTableTreeModel testTableTreeModel0 = new TestTableTreeModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test2 ( ) throws Throwable { TestTableTreeModel testTableTreeModel0 = new TestTableTreeModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test0 ( ) throws Throwable { WizardPanel wizardPanel0 = new WizardPanel ( ) ; LTSPanel lTSPanel0 = ( LTSPanel ) wizardPanel0 . createBottomPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test3 ( ) throws Throwable { WizardPanel wizardPanel0 = new WizardPanel ( ) ; wizardPanel0 . reset ( ( WizardSession ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test0 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; JTable jTable0 = new JTable ( ) ; JTableHeader jTableHeader0 = jTable0 . getTableHeader ( ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 , jTableHeader0 ) ; Object [ ] objectArray0 = new Object [ 8 ] ; tableSorter0 . setSortingStatus ( 530 , 20 ) ; defaultTableModel0 . addColumn ( ( Object ) null , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test1 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValueAt ( int row , int column ) { Object value = null ; Food food = myFoodList . getFoodAt ( row ) ; switch ( column ) { case COLUMN_CALORIES : value = food . getCalories ( ) ; break ; case COLUMN_NAME : value = food . getName ( ) ; break ; default : throw new IllegalArgumentException ( "column " + column ) ; } return value ; }
void test2 ( ) throws Throwable { TableSorter tableSorter0 = new TableSorter ( ) ; TableModel tableModel0 = tableSorter0 . getTableModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableModel getTableModel ( ) { return myTableModel ; }
void test3 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; JTable jTable0 = new JTable ( ) ; JTableHeader jTableHeader0 = jTable0 . getTableHeader ( ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 , jTableHeader0 ) ; JTableHeader jTableHeader1 = tableSorter0 . getTableHeader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JTableHeader getTableHeader ( ) { return tableHeader ; }
void test4 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; JTable jTable0 = new JTable ( ) ; JTableHeader jTableHeader0 = jTable0 . getTableHeader ( ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 , jTableHeader0 ) ; tableSorter0 . setSortingStatus ( 530 , 20 ) ; defaultTableModel0 . fireTableCellUpdated ( ( - 1128 ) , 127 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test6 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; JTable jTable0 = new JTable ( ) ; JTableHeader jTableHeader0 = jTable0 . getTableHeader ( ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 , jTableHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int column ) { return COLUMN_NAMES [ column ] ; }
void test7 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; JTable jTable0 = new JTable ( ) ; JTableHeader jTableHeader0 = jTable0 . getTableHeader ( ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 , jTableHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSorting ( ) { return sortingColumns . size ( ) ! = 0 ; }
void test8 ( ) throws Throwable { TableSorter tableSorter0 = new TableSorter ( ) ; TableSorter tableSorter1 = new TableSorter ( ( TableModel ) tableSorter0 ) ; tableSorter1 . setTableModel ( ( TableModel ) tableSorter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return myData . equals ( o ) ; }
void test9 ( ) throws Throwable { JTable jTable0 = new JTable ( ) ; JTableHeader jTableHeader0 = jTable0 . getTableHeader ( ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) null , jTableHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSorting ( ) { return sortingColumns . size ( ) ! = 0 ; }
void test10 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; JTable jTable0 = new JTable ( ) ; JTableHeader jTableHeader0 = jTable0 . getTableHeader ( ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 , jTableHeader0 ) ; tableSorter0 . setTableHeader ( jTableHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test11 ( ) throws Throwable { TableSorter tableSorter0 = new TableSorter ( ) ; TableSorter tableSorter1 = new TableSorter ( ( TableModel ) tableSorter0 , ( JTableHeader ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return myData . equals ( o ) ; }
void test12 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSorting ( ) { return sortingColumns . size ( ) ! = 0 ; }
void test13 ( ) throws Throwable { Vector < DefaultTableColumnModel > vector0 = new Vector < DefaultTableColumnModel > ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( vector0 , vector0 ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSorting ( ) { return sortingColumns . size ( ) ! = 0 ; }
void test14 ( ) throws Throwable { Vector < Comparator < Object > > vector0 = new Vector < Comparator < Object > > ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( vector0 , vector0 ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 ) ; Icon icon0 = tableSorter0 . getHeaderRendererIcon ( 1578 , 1578 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Icon getHeaderRendererIcon ( int column , int size ) { Directive directive = getDirective ( column ) ; if ( directive = = EMPTY_DIRECTIVE ) { return null ; } return new Arrow ( directive . direction = = DESCENDING , size , sortingColumns . indexOf ( directive ) ) ; }
void test15 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; JTable jTable0 = new JTable ( ) ; JTableHeader jTableHeader0 = jTable0 . getTableHeader ( ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 , jTableHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSorting ( ) { return sortingColumns . size ( ) ! = 0 ; }
void test16 ( ) throws Throwable { Vector < DefaultTableColumnModel > vector0 = new Vector < DefaultTableColumnModel > ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( vector0 , vector0 ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 ) ; Class < ? > class0 = TreeModel . class ; Comparator < Object > comparator0 = tableSorter0 . getComparator ( 0 ) ; tableSorter0 . setColumnComparator ( ( Class ) class0 , ( Comparator ) comparator0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test17 ( ) throws Throwable { TableSorter tableSorter0 = new TableSorter ( ) ; Class < ? > class0 = ICC_Profile . class ; tableSorter0 . setColumnComparator ( ( Class ) class0 , ( Comparator ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSorting ( ) { return sortingColumns . size ( ) ! = 0 ; }
void test18 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 1 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , 942 ) ; DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel ( ) ; JTableHeader jTableHeader0 = new JTableHeader ( ( TableColumnModel ) defaultTableColumnModel0 ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 , jTableHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValueAt ( int rowIndex , Object data , int column , Object value ) { throw new RuntimeException ( "not implemented" ) ; }
void test19 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 ) ; int int0 = tableSorter0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test20 ( ) throws Throwable { TableSorter tableSorter0 = new TableSorter ( ) ; int int0 = tableSorter0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test21 ( ) throws Throwable { TableSorter tableSorter0 = new TableSorter ( ) ; TableSorter tableSorter1 = new TableSorter ( ( TableModel ) tableSorter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test22 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; JTable jTable0 = new JTable ( ) ; JTableHeader jTableHeader0 = jTable0 . getTableHeader ( ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 , jTableHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int rowIndex , int columnIndex ) { return false ; }
void test23 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; JTable jTable0 = new JTable ( ) ; JTableHeader jTableHeader0 = jTable0 . getTableHeader ( ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 , jTableHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSorting ( ) { return sortingColumns . size ( ) ! = 0 ; }
void test24 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; JTable jTable0 = new JTable ( ) ; JTableHeader jTableHeader0 = jTable0 . getTableHeader ( ) ; TableSorter tableSorter0 = new TableSorter ( ( TableModel ) defaultTableModel0 , jTableHeader0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSorting ( ) { return sortingColumns . size ( ) ! = 0 ; }
void test0 ( ) throws Throwable { RowComparator rowComparator0 = new RowComparator ( ) ; rowComparator0 . setSortOrder ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSortOrder ( ) { return sortOrder ; }
void test1 ( ) throws Throwable { RowComparator rowComparator0 = new RowComparator ( ) ; int int0 = rowComparator0 . getSortOrder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSortOrder ( ) { return sortOrder ; }
void test2 ( ) throws Throwable { RowComparator rowComparator0 = new RowComparator ( ) ; int int0 = rowComparator0 . getSortColumn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSortColumn ( ) { return sortColumn ; }
void test3 ( ) throws Throwable { RowComparator rowComparator0 = new RowComparator ( ) ; rowComparator0 . setSortColumn ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSortColumn ( ) { return sortColumn ; }
void test4 ( ) throws Throwable { RowComparator rowComparator0 = new RowComparator ( ) ; int int0 = rowComparator0 . compare ( ( Object ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test0 ( ) throws Throwable { JTableUtils jTableUtils0 = new JTableUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 4 ] [ 8 ] ; Object [ ] objectArray1 = new Object [ 9 ] ; Object object0 = RenderingHints . VALUE_INTERPOLATION_BICUBIC ; objectArray1 [ 0 ] = object0 ; objectArray1 [ 1 ] = object0 ; Object [ ] objectArray2 = new Object [ 3 ] ; objectArray2 [ 0 ] = objectArray1 [ 0 ] ; objectArray2 [ 1 ] = object0 ; objectArray2 [ 2 ] = objectArray1 [ 1 ] ; JTable jTable0 = new JTable ( objectArray0 , objectArray2 ) ; JTableUtils . setSelectedRow ( jTable0 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setSelectedRow ( JTable table , int row ) { setSelectedRows ( table , row , row ) ; }
void test3 ( ) throws Throwable { JTable jTable0 = new JTable ( ) ; JTableUtils . setupDoubleClick ( jTable0 , ( ActionListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setupDoubleClick ( ) { SimpleThreadedAction action = new SimpleThreadedAction ( ) { @Override void action ( ) throws Exception { editFood ( ) ; } } ; JTableUtils . setupDoubleClick ( myTable , action ) ; }
void test4 ( ) throws Throwable { JTable jTable0 = new JTable ( ) ; JTableUtils . scrollToRow ( jTable0 , ( - 325 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void scrollToRow ( JTable table , int row ) { Rectangle rect = table . getCellRect ( row , 0 , true ) ; table . scrollRectToVisible ( rect ) ; }
void test7 ( ) throws Throwable { JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem ( "xf & ? vD ) I < + cNzY$ ]  ] " , ( Icon ) null ) ; JTableUtils . DoubleClickListener jTableUtils_DoubleClickListener0 = new JTableUtils . DoubleClickListener ( ( ActionListener ) null ) ; jTableUtils_DoubleClickListener0 . showPopup ( ( Component ) jRadioButtonMenuItem0 , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void showPopup ( Object source , int x , int y ) { if ( null ! = myPopupMenu ) { Component src = ( Component ) source ; myPopupMenu . show ( src , x , y ) ; } }
void test9 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( 0 , 3 ) ; JTable jTable0 = new JTable ( ( TableModel ) defaultTableModel0 ) ; JTableUtils . centerColumn ( 1 , jTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void centerColumn ( int column , JTable table ) { TableColumn tcol = table . getColumnModel ( ) . getColumn ( column ) ; TableCellRenderer tcr = tcol . getCellRenderer ( ) ; if ( null = = tcr ) { tcr = new DefaultTableCellRenderer ( ) ; tcol . setCellRenderer ( tcr ) ; } if ( ! ( tcr instanceof DefaultTableCellRenderer ) ) throw new IllegalArgumentException ( ) ; DefaultTableCellRenderer dtcr = ( DefaultTableCellRenderer ) tcr ; dtcr . setHorizontalAlignment ( DefaultTableCellRenderer . CENTER ) ; }
void test10 ( ) throws Throwable { JTable jTable0 = new JTable ( 0 , 0 ) ; JTableUtils . scrollToCell ( jTable0 , 0 , 13 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test11 ( ) throws Throwable { Vector < JViewport > vector0 = new Vector < JViewport > ( ) ; JTable jTable0 = new JTable ( vector0 , vector0 ) ; JScrollPane jScrollPane0 = new JScrollPane ( ( Component ) jTable0 ) ; JTableUtils . scrollToCell ( jTable0 , ( - 549 ) , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test12 ( ) throws Throwable { JTable jTable0 = new JTable ( ) ; List < Object > list0 = JTableUtils . getSelectedColumns ( jTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test14 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 1 ] [ 8 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , objectArray0 [ 0 ] ) ; Vector < Object > vector0 = defaultTableModel0 . getDataVector ( ) ; JTable jTable0 = new JTable ( vector0 , vector0 ) ; double [ ] doubleArray0 = new double [ 1 ] ; JTableUtils . setPreferredColumnPercents2 ( jTable0 , doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPreferredColumnPercents2 ( JTable table , double [ ] percentages ) { Dimension tableDim = table . getPreferredSize ( ) ; double total = 0 ; for ( int i = 0 ; i < table . getColumnModel ( ) . getColumnCount ( ) ; i + + ) total + = percentages [ i ] ; for ( int i = 0 ; i < table . getColumnModel ( ) . getColumnCount ( ) ; i + + ) { TableColumn column = table . getColumnModel ( ) . getColumn ( i ) ; column . setPreferredWidth ( ( int ) ( tableDim . width * ( percentages [ i ] / total ) ) ) ; } }
void test15 ( ) throws Throwable { Vector < JViewport > vector0 = new Vector < JViewport > ( ) ; JTable jTable0 = new JTable ( vector0 , vector0 ) ; double [ ] doubleArray0 = new double [ 10 ] ; JTableUtils . setPreferredColumnPercents ( jTable0 , doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test16 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 12 ] [ 8 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , objectArray0 [ 0 ] ) ; Vector < Object > vector0 = defaultTableModel0 . getDataVector ( ) ; JTable jTable0 = new JTable ( vector0 , vector0 ) ; double [ ] doubleArray0 = new double [ 7 ] ; doubleArray0 [ 0 ] = ( double ) 1 ; doubleArray0 [ 2 ] = ( double ) 1 ; doubleArray0 [ 3 ] = ( double ) 1 ; doubleArray0 [ 4 ] = ( double ) 1 ; doubleArray0 [ 6 ] = ( double ) 1 ; JTableUtils . setPreferredColumnPercents ( jTable0 , doubleArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPreferredColumnPercents ( JTable table , double [ ] percentages ) { / / / / Figure out the total amount that the user provided , excluding any unspecified / / columns / / int count = 0 ; int tableColumns = table . getColumnModel ( ) . getColumnCount ( ) ; double total = 0 ; for ( int i = 0 ; i < percentages . length ; i + + ) { if ( percentages [ i ] > 0 ) { total + = percentages [ i ] ; count + + ; } } / / / / any unspecified or leftover columns ? / / double standardAmount = 1 . 0 / ( ( double ) tableColumns ) ; if ( count < tableColumns ) { total + = ( ( double ) ( tableColumns - count ) ) * standardAmount ; } / / / / the normalization factor is that amount such that / / tableWidth = total * normalizationFactor / / Dimension tableDim = table . getPreferredSize ( ) ; int tableWidth = tableDim . width ; double factor = ( ( double ) tableWidth ) / ( ( double ) total ) ; / / / / come up with the percents with all the columns , including missing or / / negative values , factored in . / / int [ ] allColumnPercentages = new int [ tableColumns ] ; for ( int i = 0 ; i < allColumnPercentages . length ; i + + ) { if ( i < percentages . length & & percentages [ i ] > 0 ) allColumnPercentages [ i ] = ( int ) ( percentages [ i ] * factor ) ; else allColumnPercentages [ i ] = ( int ) ( standardAmount * factor ) ; } / / / / now calculate the amount of space for each column / / for ( int i = 0 ; i < tableColumns ; i + + ) { TableColumn col = table . getColumnModel ( ) . getColumn ( i ) ; int minSize = col . getMinWidth ( ) ; if ( allColumnPercentages [ i ] < minSize ) allColumnPercentages [ i ] = minSize ; col . setPreferredWidth ( allColumnPercentages [ i ] ) ; } }
void test1 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 8 ] [ 10 ] ; String [ ] stringArray0 = new String [ 13 ] ; SimpleTableModel simpleTableModel0 = new SimpleTableModel ( stringArray0 , objectArray0 ) ; int int0 = simpleTableModel0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 15 ] ; TableRowSorter < DefaultTableModel > tableRowSorter0 = new TableRowSorter < DefaultTableModel > ( ) ; List < ? > list0 = tableRowSorter0 . getSortKeys ( ) ; SimpleTableModel simpleTableModel0 = new SimpleTableModel ( stringArray0 , ( List ) list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; String [ ] [ ] stringArray1 = new String [ 26 ] [ 9 ] ; SimpleTableModel simpleTableModel0 = new SimpleTableModel ( stringArray0 , stringArray1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; SimpleTableModel simpleTableModel0 = new SimpleTableModel ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test6 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 8 ] [ 10 ] ; String [ ] stringArray0 = new String [ 13 ] ; SimpleTableModel simpleTableModel0 = new SimpleTableModel ( stringArray0 , objectArray0 ) ; simpleTableModel0 . setData ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test8 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; SimpleTableModel simpleTableModel0 = new SimpleTableModel ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test9 ( ) throws Throwable { SimpleTableModel . SimpleColumnSpec simpleTableModel_SimpleColumnSpec0 = new SimpleTableModel . SimpleColumnSpec ( ( String ) null , ( Class ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleTableModel ( ) { }
void test10 ( ) throws Throwable { SimpleTableModel simpleTableModel0 = new SimpleTableModel ( ) ; Object [ ] [ ] objectArray0 = simpleTableModel0 . buildData ( 0 , 0 ) ; simpleTableModel0 . initialize ( objectArray0 , ( Object [ ] [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test11 ( ) throws Throwable { String [ ] stringArray0 = new String [ 16 ] ; SpinnerListModel spinnerListModel0 = new SpinnerListModel ( ( Object [ ] ) stringArray0 ) ; List < ? > list0 = spinnerListModel0 . getList ( ) ; SimpleTableModel simpleTableModel0 = new SimpleTableModel ( stringArray0 , ( List ) list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test12 ( ) throws Throwable { String [ ] stringArray0 = new String [ 19 ] ; Object [ ] [ ] objectArray0 = new Object [ 9 ] [ 1 ] ; SimpleTableModel simpleTableModel0 = new SimpleTableModel ( stringArray0 , objectArray0 ) ; Object [ ] objectArray1 = simpleTableModel0 . toRowData ( ( Object ) stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] toRowData ( Object o ) { Object [ ] row ; / / / / This is a "scalar" value like "hello world" or Integer ( 7 ) : just / / a single - element array containing the value . / / if ( ! o . getClass ( ) . isArray ( ) ) { row = new Object [ ] { o } ; } else { / / / / If it's an array of objects , we can just copy it over / / if ( ! o . getClass ( ) . getComponentType ( ) . isPrimitive ( ) ) row = ( Object [ ] ) o ; / / / / Otherwise , convert the array of primitives to objects / / else { / / / / TODO : implement this ! / / throw new RuntimeException ( "not implemented" ) ; } } return row ; }
void test14 ( ) throws Throwable { SimpleTableModel simpleTableModel0 = new SimpleTableModel ( ) ; int int0 = simpleTableModel0 . getPopulatedCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPopulatedCount ( ) { int count = 0 ; if ( null ! = myData ) { while ( count < myData . length & & null ! = this . getValueAt ( count , 0 ) ) count + + ; if ( count > myData . length ) count = myData . length ; } return count ; }
void test15 ( ) throws Throwable { SimpleTableModel simpleTableModel0 = new SimpleTableModel ( ) ; String [ ] stringArray0 = new String [ 2 ] ; LinkedList < Boolean > linkedList0 = new LinkedList < Boolean > ( ) ; stringArray0 [ 0 ] = " ? teeB } | n2ES [ 1" ; Object [ ] [ ] objectArray0 = simpleTableModel0 . buildData ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPopulatedCount ( ) { int count = 0 ; if ( null ! = myData ) { while ( count < myData . length & & null ! = this . getValueAt ( count , 0 ) ) count + + ; if ( count > myData . length ) count = myData . length ; } return count ; }
void test16 ( ) throws Throwable { SimpleTableModel simpleTableModel0 = new SimpleTableModel ( ) ; String [ ] stringArray0 = new String [ 2 ] ; LinkedList < Boolean > linkedList0 = new LinkedList < Boolean > ( ) ; stringArray0 [ 0 ] = " ? teeB } | n2ES [ 1" ; Boolean boolean0 = Boolean . FALSE ; linkedList0 . add ( boolean0 ) ; Object [ ] [ ] objectArray0 = simpleTableModel0 . buildData ( 0 , 0 ) ; Object [ ] [ ] objectArray1 = new Object [ 2 ] [ 6 ] ; objectArray1 [ 0 ] = ( Object [ ] ) stringArray0 ; objectArray1 [ 1 ] = ( Object [ ] ) stringArray0 ; simpleTableModel0 . initialize ( objectArray0 , objectArray1 ) ; simpleTableModel0 . addAll ( ( List ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPopulatedCount ( ) { int count = 0 ; if ( null ! = myData ) { while ( count < myData . length & & null ! = this . getValueAt ( count , 0 ) ) count + + ; if ( count > myData . length ) count = myData . length ; } return count ; }
void test17 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; SimpleTableModel simpleTableModel0 = new SimpleTableModel ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void initialize ( ) { createFields ( ) ; configureFields ( ) ; }
void test18 ( ) throws Throwable { SimpleTableModel simpleTableModel0 = new SimpleTableModel ( ) ; LinkedList < Boolean > linkedList0 = new LinkedList < Boolean > ( ) ; Boolean boolean0 = Boolean . FALSE ; linkedList0 . add ( boolean0 ) ; simpleTableModel0 . setColumns ( ( List ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test0 ( ) throws Throwable { KeyHelper . Mapping keyHelper_Mapping0 = KeyHelper . Mapping . Enter ; StyledEditorKit . FontFamilyAction styledEditorKit_FontFamilyAction0 = new StyledEditorKit . FontFamilyAction ( "Enter" , "Enter" ) ; JMenu jMenu0 = new JMenu ( ( Action ) styledEditorKit_FontFamilyAction0 ) ; KeyHelper . mapKey ( keyHelper_Mapping0 , ( JComponent ) jMenu0 , ( Action ) styledEditorKit_FontFamilyAction0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mapKey ( int key , String symbol , Action action ) { KeyStroke keyStroke = KeyStroke . getKeyStroke ( key , 0 ) ; getInputMap ( ) . put ( keyStroke , symbol ) ; getActionMap ( ) . put ( symbol , action ) ; }
void test1 ( ) throws Throwable { KeyHelper keyHelper0 = new KeyHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; GrowableJTable growableJTable0 = new GrowableJTable ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GrowableJTable ( String [ ] columnNames , int numberOfRows ) { initialize ( columnNames , numberOfRows ) ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 5 ] ; GrowableJTable growableJTable0 = new GrowableJTable ( stringArray0 , ( - 1577 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GrowableJTable ( String [ ] columnNames , int numberOfRows ) { initialize ( columnNames , numberOfRows ) ; }
void test0 ( ) throws Throwable { String [ ] [ ] stringArray0 = new String [ 7 ] [ 8 ] ; StringTableModel stringTableModel0 = new StringTableModel ( stringArray0 , stringArray0 [ 0 ] ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; StringTableModel stringTableModel0 = new StringTableModel ( stringArray0 , 3 ) ; Vector < Object > vector0 = stringTableModel0 . getDataVector ( ) ; stringTableModel0 . addRow ( vector0 ) ; stringTableModel0 . setValueAt ( ( Object ) null , 3 , 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test2 ( ) throws Throwable { StringTableModel stringTableModel0 = new StringTableModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; StringTableModel stringTableModel0 = new StringTableModel ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test1 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 10 ] [ 5 ] ; Object [ ] objectArray1 = new Object [ 2 ] ; objectArray1 [ 0 ] = ( Object ) "" ; objectArray0 [ 2 ] = objectArray1 ; objectArray0 [ 6 ] = objectArray0 [ 2 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , objectArray0 [ 0 ] ) ; SortedTableView sortedTableView0 = new SortedTableView ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSortingColumn ( ) { return this . sortingColumn ; }
void test2 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 9 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , 0 ) ; SortedTableView sortedTableView0 = new SortedTableView ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSortAscending ( ) { return this . sortAscending ; }
void test3 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 6 ] [ 6 ] ; Object [ ] objectArray1 = new Object [ 1 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , objectArray1 ) ; SortedTableView sortedTableView0 = new SortedTableView ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSortAscending ( ) { return this . sortAscending ; }
void test4 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; SortedTableView sortedTableView0 = new SortedTableView ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setValueAt ( int rowIndex , Object data , int column , Object value ) { throw new RuntimeException ( "not implemented" ) ; }
void test5 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( 7 , 7 ) ; SortedTableView sortedTableView0 = new SortedTableView ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSortAscending ( ) { return this . sortAscending ; }
void test6 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; SortedTableView sortedTableView0 = new SortedTableView ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int rowIndex , int columnIndex ) { return false ; }
void test7 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 6 ] [ 6 ] ; Object [ ] objectArray1 = new Object [ 1 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , objectArray1 ) ; SortedTableView sortedTableView0 = new SortedTableView ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SortedTableView ( TableModel model ) { initialize ( model ) ; }
void test8 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( 7 , 7 ) ; SortedTableView sortedTableView0 = new SortedTableView ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSortingColumn ( ) { return this . sortingColumn ; }
void test9 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; SortedTableView sortedTableView0 = new SortedTableView ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSortingColumn ( ) { return this . sortingColumn ; }
void test10 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 10 ] [ 5 ] ; Object object0 = Image . UndefinedProperty ; Object [ ] objectArray1 = new Object [ 5 ] ; objectArray1 [ 0 ] = object0 ; objectArray0 [ 6 ] = objectArray1 ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , objectArray0 [ 0 ] ) ; SortedTableView sortedTableView0 = new SortedTableView ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getSortAscending ( ) { return this . sortAscending ; }
void test0 ( ) throws Throwable { DynamicTableModel dynamicTableModel0 = new DynamicTableModel ( ) ; dynamicTableModel0 . getColumnClass ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test3 ( ) throws Throwable { DynamicTableModel dynamicTableModel0 = new DynamicTableModel ( ) ; dynamicTableModel0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test4 ( ) throws Throwable { DynamicTableModel dynamicTableModel0 = new DynamicTableModel ( ) ; boolean [ ] booleanArray0 = new boolean [ 9 ] ; dynamicTableModel0 . setColumnsEditable ( booleanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test7 ( ) throws Throwable { DynamicTableModel dynamicTableModel0 = new DynamicTableModel ( ) ; Class < ? > [ ] classArray0 = ( Class < ? > [ ] ) Array . newInstance ( Class . class , 4 ) ; dynamicTableModel0 . setColumnClasses ( classArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test10 ( ) throws Throwable { DynamicTableModel dynamicTableModel0 = new DynamicTableModel ( ) ; JTable jTable0 = new JTable ( ) ; dynamicTableModel0 . removeTableModelListener ( ( TableModelListener ) jTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test11 ( ) throws Throwable { DynamicTableModel dynamicTableModel0 = new DynamicTableModel ( ) ; dynamicTableModel0 . setData ( ( List < Object [ ] > ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test12 ( ) throws Throwable { DynamicTableModel dynamicTableModel0 = new DynamicTableModel ( ) ; dynamicTableModel0 . addTableModelListener ( ( TableModelListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test13 ( ) throws Throwable { DynamicTableModel dynamicTableModel0 = new DynamicTableModel ( ) ; int int0 = dynamicTableModel0 . getColumnCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test15 ( ) throws Throwable { DynamicTableModel dynamicTableModel0 = new DynamicTableModel ( ) ; dynamicTableModel0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test17 ( ) throws Throwable { DynamicTableModel dynamicTableModel0 = new DynamicTableModel ( ) ; Object [ ] objectArray0 = new Object [ 1 ] ; dynamicTableModel0 . addRow ( ( - 1 ) , objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test18 ( ) throws Throwable { DynamicTableModel dynamicTableModel0 = new DynamicTableModel ( ) ; String [ ] stringArray0 = new String [ 7 ] ; dynamicTableModel0 . setColumnNames ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test19 ( ) throws Throwable { DynamicTableModel dynamicTableModel0 = new DynamicTableModel ( ) ; Object [ ] [ ] objectArray0 = new Object [ 10 ] [ 10 ] ; dynamicTableModel0 . setData ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test1 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; JTable jTable0 = new JTable ( ) ; SortingTableModel sortingTableModel0 = new SortingTableModel ( jTable0 , ( TableModel ) defaultTableModel0 ) ; Class < ? > class0 = sortingTableModel0 . getColumnClass ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getColumnClass ( int column ) { return String . class ; }
void test3 ( ) throws Throwable { Vector < Integer > vector0 = new Vector < Integer > ( ) ; JTable jTable0 = new JTable ( vector0 , vector0 ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( vector0 , vector0 ) ; SortingTableModel sortingTableModel0 = new SortingTableModel ( jTable0 , ( TableModel ) defaultTableModel0 ) ; int int0 = sortingTableModel0 . getColumnCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test5 ( ) throws Throwable { Vector < Object > vector0 = new Vector < Object > ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( vector0 , vector0 ) ; JTable jTable0 = new JTable ( ) ; SortingTableModel sortingTableModel0 = new SortingTableModel ( jTable0 , ( TableModel ) defaultTableModel0 ) ; int int0 = sortingTableModel0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test6 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; JTable jTable0 = new JTable ( ) ; SortingTableModel sortingTableModel0 = new SortingTableModel ( jTable0 , ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int column ) { return COLUMN_NAMES [ column ] ; }
void test7 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; JTable jTable0 = new JTable ( ) ; SortingTableModel sortingTableModel0 = new SortingTableModel ( jTable0 , ( TableModel ) defaultTableModel0 ) ; sortingTableModel0 . removeTableModelListener ( ( TableModelListener ) jTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test1 ( ) throws Throwable { Vector < Integer > vector0 = new Vector < Integer > ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( vector0 , vector0 ) ; TableModelHelper tableModelHelper0 = new TableModelHelper ( ( TableModel ) defaultTableModel0 ) ; tableModelHelper0 . setSource ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test2 ( ) throws Throwable { LTSTableModel lTSTableModel0 = new LTSTableModel ( ) ; Class < ? > class0 = lTSTableModel0 . getColumnClass ( ( - 94 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test4 ( ) throws Throwable { LTSTableModel lTSTableModel0 = new LTSTableModel ( ) ; int int0 = lTSTableModel0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test5 ( ) throws Throwable { LTSTableModel lTSTableModel0 = new LTSTableModel ( ) ; String [ ] stringArray0 = lTSTableModel0 . getColumnNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getColumnNames ( ) { return COLUMN_NAMES ; }
void test7 ( ) throws Throwable { LTSTableModel lTSTableModel0 = new LTSTableModel ( ) ; String [ ] stringArray0 = new String [ 4 ] ; lTSTableModel0 . setColumnNames ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test9 ( ) throws Throwable { LTSTableModel lTSTableModel0 = new LTSTableModel ( ) ; boolean boolean0 = lTSTableModel0 . isCellEditable ( 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int rowIndex , int columnIndex ) { return false ; }
void test13 ( ) throws Throwable { LTSTableModel lTSTableModel0 = new LTSTableModel ( ) ; Object [ ] [ ] objectArray0 = new Object [ 7 ] [ 3 ] ; Object [ ] objectArray1 = new Object [ 6 ] ; objectArray1 [ 0 ] = ( Object ) lTSTableModel0 ; objectArray1 [ 1 ] = ( Object ) lTSTableModel0 ; objectArray1 [ 2 ] = ( Object ) 1 ; objectArray1 [ 3 ] = ( Object ) 1 ; objectArray1 [ 4 ] = ( Object ) 1 ; objectArray1 [ 5 ] = ( Object ) 1 ; objectArray0 [ 0 ] = objectArray1 ; objectArray0 [ 2 ] = objectArray0 [ 0 ] ; JTable jTable0 = new JTable ( objectArray0 , objectArray0 [ 2 ] ) ; lTSTableModel0 . removeTableModelListener ( ( TableModelListener ) jTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test0 ( ) throws Throwable { TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor ( ) ; JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem ( "@N887 } fz~R + S" , true ) ; transferHandlerAdaptor0 . remove ( ( JComponent ) jCheckBoxMenuItem0 , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( Object element ) { if ( ! myList . contains ( element ) ) return ; int index = myList . indexOf ( element ) ; myList . remove ( index ) ; ListChannelEvent event = new ListChannelEvent ( ListChannelEvent . EVENT_REMOVE , this , index ) ; getHelper ( ) . fire ( event ) ; }
void test1 ( ) throws Throwable { TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor ( ) ; Object object0 = transferHandlerAdaptor0 . copy ( ( JComponent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void copy ( InputStream istream , OutputStream ostream ) throws IOException { int buffSize = 2^13 ; byte [ ] buf = new byte [ buffSize ] ; int count = istream . read ( buf ) ; while ( count > 0 ) { ostream . write ( buf , 0 , count ) ; count = istream . read ( buf ) ; } istream . close ( ) ; ostream . close ( ) ; }
void test2 ( ) throws Throwable { TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor ( ) ; boolean boolean0 = transferHandlerAdaptor0 . supportsCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsCopy ( ) ; / * * * Does this class support pasting data from the clipboard ? * * @return true if it does , false otherwise . * / boolean supportsPaste ( ) ; / * * * Does this class support moving data via drag and drop ? * * @return true if it does , false otherwise . * / boolean supportsMove ( ) ; / * * * Paste some data to a component . * * < P > * Note that neither a clipboard nor the action that is being performed are * specified by this call . The instance of this interface merely needs to * paste the data to the component . * < / P > * * @param comp The destination JComponent . * @param data The data to paste . * @return true if the paste was successful , false otherwise . * / boolean paste ( Component comp , Object data ) ; / * * * Copy some data from a component . * * < P > * This method should copy the "selected" data from the source component and * return it . The mechanism whereby the data to copy is identified , and the * class for the data is left to the implementor . * < / P > * * @param comp The source for the data . * @return The copied data . * / Object copy ( JComponent comp ) ; / * * * Remove some data from a component , as a result of a cut or drag - move operation . * * < P > * This method should remove the data specified by the data argument from the * source JComponent . The mechanism whereby the data to be removed is * identified , along with whether it is removed at all , is left up to the * implementation of this interface . * < / P > * * @param comp The component that the data should be removed from . * @param data The data to remove . * / void remove ( JComponent comp , Object data ) ; }
void test3 ( ) throws Throwable { TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor ( ) ; boolean boolean0 = transferHandlerAdaptor0 . supportsCut ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsCut ( ) ; / * * * Does this class support copying data to the clipboard ? * * @return true if it does , false otherwise . * / boolean supportsCopy ( ) ; / * * * Does this class support pasting data from the clipboard ? * * @return true if it does , false otherwise . * / boolean supportsPaste ( ) ; / * * * Does this class support moving data via drag and drop ? * * @return true if it does , false otherwise . * / boolean supportsMove ( ) ; / * * * Paste some data to a component . * * < P > * Note that neither a clipboard nor the action that is being performed are * specified by this call . The instance of this interface merely needs to * paste the data to the component . * < / P > * * @param comp The destination JComponent . * @param data The data to paste . * @return true if the paste was successful , false otherwise . * / boolean paste ( Component comp , Object data ) ; / * * * Copy some data from a component . * * < P > * This method should copy the "selected" data from the source component and * return it . The mechanism whereby the data to copy is identified , and the * class for the data is left to the implementor . * < / P > * * @param comp The source for the data . * @return The copied data . * / Object copy ( JComponent comp ) ; / * * * Remove some data from a component , as a result of a cut or drag - move operation . * * < P > * This method should remove the data specified by the data argument from the * source JComponent . The mechanism whereby the data to be removed is * identified , along with whether it is removed at all , is left up to the * implementation of this interface . * < / P > * * @param comp The component that the data should be removed from . * @param data The data to remove . * / void remove ( JComponent comp , Object data ) ; }
void test4 ( ) throws Throwable { TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor ( ) ; boolean boolean0 = transferHandlerAdaptor0 . paste ( ( Component ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void paste ( TransferSupport support , Object data ) { Object [ ] rowData = ( Object [ ] ) data ; JTable table = ( JTable ) support . getComponent ( ) ; int index = table . getSelectedRow ( ) ; for ( int i = 0 ; i < rowData . length ; i + + ) { int dest = index + i ; pasteRow ( table , dest , rowData [ i ] ) ; } }
void test5 ( ) throws Throwable { TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor ( ) ; boolean boolean0 = transferHandlerAdaptor0 . supportsPaste ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsPaste ( ) ; / * * * Does this class support moving data via drag and drop ? * * @return true if it does , false otherwise . * / boolean supportsMove ( ) ; / * * * Paste some data to a component . * * < P > * Note that neither a clipboard nor the action that is being performed are * specified by this call . The instance of this interface merely needs to * paste the data to the component . * < / P > * * @param comp The destination JComponent . * @param data The data to paste . * @return true if the paste was successful , false otherwise . * / boolean paste ( Component comp , Object data ) ; / * * * Copy some data from a component . * * < P > * This method should copy the "selected" data from the source component and * return it . The mechanism whereby the data to copy is identified , and the * class for the data is left to the implementor . * < / P > * * @param comp The source for the data . * @return The copied data . * / Object copy ( JComponent comp ) ; / * * * Remove some data from a component , as a result of a cut or drag - move operation . * * < P > * This method should remove the data specified by the data argument from the * source JComponent . The mechanism whereby the data to be removed is * identified , along with whether it is removed at all , is left up to the * implementation of this interface . * < / P > * * @param comp The component that the data should be removed from . * @param data The data to remove . * / void remove ( JComponent comp , Object data ) ; }
void test6 ( ) throws Throwable { TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor ( ) ; boolean boolean0 = transferHandlerAdaptor0 . supportsMove ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsMove ( ) ; / * * * Paste some data to a component . * * < P > * Note that neither a clipboard nor the action that is being performed are * specified by this call . The instance of this interface merely needs to * paste the data to the component . * < / P > * * @param comp The destination JComponent . * @param data The data to paste . * @return true if the paste was successful , false otherwise . * / boolean paste ( Component comp , Object data ) ; / * * * Copy some data from a component . * * < P > * This method should copy the "selected" data from the source component and * return it . The mechanism whereby the data to copy is identified , and the * class for the data is left to the implementor . * < / P > * * @param comp The source for the data . * @return The copied data . * / Object copy ( JComponent comp ) ; / * * * Remove some data from a component , as a result of a cut or drag - move operation . * * < P > * This method should remove the data specified by the data argument from the * source JComponent . The mechanism whereby the data to be removed is * identified , along with whether it is removed at all , is left up to the * implementation of this interface . * < / P > * * @param comp The component that the data should be removed from . * @param data The data to remove . * / void remove ( JComponent comp , Object data ) ; }
void test0 ( ) throws Throwable { ExampleModel exampleModel0 = new ExampleModel ( ) ; JTable jTable0 = new JTable ( ( TableModel ) exampleModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWidth ( ) { return myWidth ; }
void test1 ( ) throws Throwable { ExampleModel exampleModel0 = new ExampleModel ( ) ; JTable jTable0 = new JTable ( ) ; exampleModel0 . removeTableModelListener ( ( TableModelListener ) jTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test2 ( ) throws Throwable { ExampleModel exampleModel0 = new ExampleModel ( ) ; Class < ? > [ ] classArray0 = ( Class < ? > [ ] ) Array . newInstance ( Class . class , 10 ) ; exampleModel0 . setColumnClasses ( classArray0 ) ; Class < ? > class0 = exampleModel0 . getColumnClass ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getColumnClass ( int column ) { return String . class ; }
void test3 ( ) throws Throwable { ExampleModel exampleModel0 = new ExampleModel ( ) ; String [ ] stringArray0 = new String [ 10 ] ; exampleModel0 . setColumnNames ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test5 ( ) throws Throwable { ExampleModel exampleModel0 = new ExampleModel ( ) ; Class < ? > class0 = exampleModel0 . getColumnClass ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getColumnClass ( int column ) { return String . class ; }
void test6 ( ) throws Throwable { ExampleModel exampleModel0 = new ExampleModel ( ) ; boolean boolean0 = exampleModel0 . isCellEditable ( 866 , 613 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int rowIndex , int columnIndex ) { return false ; }
void test1 ( ) throws Throwable { LTSTransferableFactory lTSTransferableFactory0 = new LTSTransferableFactory ( ) ; JToggleButton jToggleButton0 = new JToggleButton ( ( String ) null , true ) ; LTSTransferable lTSTransferable0 = ( LTSTransferable ) lTSTransferableFactory0 . createTransferable ( ( JComponent ) jToggleButton0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Transferable createTransferable ( JComponent c ) { / / TODO Auto - generated method stub return super . createTransferable ( c ) ; }
void test0 ( ) throws Throwable { JTable jTable0 = new JTable ( ) ; int [ ] intArray0 = new int [ 6 ] ; SimpleTransferData simpleTransferData0 = new SimpleTransferData ( jTable0 , intArray0 ) ; int int0 = simpleTransferData0 . getDestinationRow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDestinationRow ( ) { return myDestinationRow ; }
void test1 ( ) throws Throwable { int [ ] intArray0 = new int [ 22 ] ; SimpleTransferData simpleTransferData0 = new SimpleTransferData ( ( JTable ) null , intArray0 ) ; DataFlavor [ ] dataFlavorArray0 = simpleTransferData0 . getTransferDataFlavors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataFlavor [ ] getTransferDataFlavors ( ) { return JVM_OBJECT_FLAVORS ; }
void test2 ( ) throws Throwable { JTable jTable0 = new JTable ( ) ; int [ ] intArray0 = new int [ 6 ] ; SimpleTransferData simpleTransferData0 = new SimpleTransferData ( jTable0 , intArray0 ) ; JTable jTable1 = simpleTransferData0 . getTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test3 ( ) throws Throwable { int [ ] intArray0 = new int [ 22 ] ; SimpleTransferData simpleTransferData0 = new SimpleTransferData ( ( JTable ) null , intArray0 ) ; simpleTransferData0 . setDestinationRow ( ( - 19 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDestinationRow ( ) { return myDestinationRow ; }
void test4 ( ) throws Throwable { JTable jTable0 = new JTable ( 100 , 100 ) ; int [ ] intArray0 = new int [ 2 ] ; SimpleTransferData simpleTransferData0 = new SimpleTransferData ( jTable0 , intArray0 ) ; int [ ] intArray1 = simpleTransferData0 . getRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getRows ( ) { return myRows ; }
void test5 ( ) throws Throwable { JTable jTable0 = new JTable ( ) ; int [ ] intArray0 = new int [ 7 ] ; SimpleTransferData simpleTransferData0 = new SimpleTransferData ( jTable0 , intArray0 ) ; DataFlavor dataFlavor0 = SimpleTransferData . getFlavor ( ) ; SimpleTransferData simpleTransferData1 = ( SimpleTransferData ) simpleTransferData0 . getTransferData ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getTransferData ( Transferable transferable ) throws UnsupportedFlavorException , IOException { return transferable . getTransferData ( LocalVMTransferable . JVM_OBJECT_FLAVOR ) ; }
void test7 ( ) throws Throwable { JTable jTable0 = new JTable ( ) ; int [ ] intArray0 = new int [ 6 ] ; SimpleTransferData simpleTransferData0 = new SimpleTransferData ( jTable0 , intArray0 ) ; DataFlavor dataFlavor0 = DataFlavor . getTextPlainUnicodeFlavor ( ) ; boolean boolean0 = simpleTransferData0 . isDataFlavorSupported ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { return flavor . isMimeTypeEqual ( JVM_OBJECT_FLAVOR ) ; }
void test8 ( ) throws Throwable { JTable jTable0 = new JTable ( ) ; int [ ] intArray0 = new int [ 7 ] ; SimpleTransferData simpleTransferData0 = new SimpleTransferData ( jTable0 , intArray0 ) ; DataFlavor dataFlavor0 = SimpleTransferData . getFlavor ( ) ; boolean boolean0 = simpleTransferData0 . isDataFlavorSupported ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { return flavor . isMimeTypeEqual ( JVM_OBJECT_FLAVOR ) ; }
void test0 ( ) throws Throwable { LTSTransferable lTSTransferable0 = new LTSTransferable ( ( Object ) null ) ; Object object0 = lTSTransferable0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] getData ( ) { return this . data ; }
void test2 ( ) throws Throwable { LTSTransferable lTSTransferable0 = new LTSTransferable ( ( Object ) null ) ; DataFlavor dataFlavor0 = DataFlavor . javaFileListFlavor ; Object object0 = lTSTransferable0 . getTransferData ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getTransferData ( Transferable transferable ) throws UnsupportedFlavorException , IOException { return transferable . getTransferData ( LocalVMTransferable . JVM_OBJECT_FLAVOR ) ; }
void test3 ( ) throws Throwable { LTSTransferable lTSTransferable0 = new LTSTransferable ( ( Object ) "LongDescription" ) ; DataFlavor [ ] dataFlavorArray0 = lTSTransferable0 . getTransferDataFlavors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataFlavor [ ] getTransferDataFlavors ( ) { return JVM_OBJECT_FLAVORS ; }
void test0 ( ) throws Throwable { SimplifiedTransferHandlerAdaptor simplifiedTransferHandlerAdaptor0 = new SimplifiedTransferHandlerAdaptor ( ) ; DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer ( ) ; simplifiedTransferHandlerAdaptor0 . remove ( ( JComponent ) defaultTreeCellRenderer0 , ( Object ) "selected" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void remove ( Object element ) { if ( ! myList . contains ( element ) ) return ; int index = myList . indexOf ( element ) ; myList . remove ( index ) ; ListChannelEvent event = new ListChannelEvent ( ListChannelEvent . EVENT_REMOVE , this , index ) ; getHelper ( ) . fire ( event ) ; }
void test1 ( ) throws Throwable { SimplifiedTransferHandlerAdaptor simplifiedTransferHandlerAdaptor0 = new SimplifiedTransferHandlerAdaptor ( ) ; simplifiedTransferHandlerAdaptor0 . initialize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsPaste ( ) ; / * * * Does this class support moving data via drag and drop ? * * @return true if it does , false otherwise . * / boolean supportsMove ( ) ; / * * * Paste some data to a component . * * < P > * Note that neither a clipboard nor the action that is being performed are * specified by this call . The instance of this interface merely needs to * paste the data to the component . * < / P > * * @param comp The destination JComponent . * @param data The data to paste . * @return true if the paste was successful , false otherwise . * / boolean paste ( Component comp , Object data ) ; / * * * Copy some data from a component . * * < P > * This method should copy the "selected" data from the source component and * return it . The mechanism whereby the data to copy is identified , and the * class for the data is left to the implementor . * < / P > * * @param comp The source for the data . * @return The copied data . * / Object copy ( JComponent comp ) ; / * * * Remove some data from a component , as a result of a cut or drag - move operation . * * < P > * This method should remove the data specified by the data argument from the * source JComponent . The mechanism whereby the data to be removed is * identified , along with whether it is removed at all , is left up to the * implementation of this interface . * < / P > * * @param comp The component that the data should be removed from . * @param data The data to remove . * / void remove ( JComponent comp , Object data ) ; }
void test2 ( ) throws Throwable { SimplifiedTransferHandlerAdaptor simplifiedTransferHandlerAdaptor0 = new SimplifiedTransferHandlerAdaptor ( ) ; boolean boolean0 = simplifiedTransferHandlerAdaptor0 . supportsCut ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsCut ( ) ; / * * * Does this class support copying data to the clipboard ? * * @return true if it does , false otherwise . * / boolean supportsCopy ( ) ; / * * * Does this class support pasting data from the clipboard ? * * @return true if it does , false otherwise . * / boolean supportsPaste ( ) ; / * * * Does this class support moving data via drag and drop ? * * @return true if it does , false otherwise . * / boolean supportsMove ( ) ; / * * * Paste some data to a component . * * < P > * Note that neither a clipboard nor the action that is being performed are * specified by this call . The instance of this interface merely needs to * paste the data to the component . * < / P > * * @param comp The destination JComponent . * @param data The data to paste . * @return true if the paste was successful , false otherwise . * / boolean paste ( Component comp , Object data ) ; / * * * Copy some data from a component . * * < P > * This method should copy the "selected" data from the source component and * return it . The mechanism whereby the data to copy is identified , and the * class for the data is left to the implementor . * < / P > * * @param comp The source for the data . * @return The copied data . * / Object copy ( JComponent comp ) ; / * * * Remove some data from a component , as a result of a cut or drag - move operation . * * < P > * This method should remove the data specified by the data argument from the * source JComponent . The mechanism whereby the data to be removed is * identified , along with whether it is removed at all , is left up to the * implementation of this interface . * < / P > * * @param comp The component that the data should be removed from . * @param data The data to remove . * / void remove ( JComponent comp , Object data ) ; }
void test3 ( ) throws Throwable { SimplifiedTransferHandlerAdaptor simplifiedTransferHandlerAdaptor0 = new SimplifiedTransferHandlerAdaptor ( ) ; boolean boolean0 = simplifiedTransferHandlerAdaptor0 . supportsCopy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsCopy ( ) ; / * * * Does this class support pasting data from the clipboard ? * * @return true if it does , false otherwise . * / boolean supportsPaste ( ) ; / * * * Does this class support moving data via drag and drop ? * * @return true if it does , false otherwise . * / boolean supportsMove ( ) ; / * * * Paste some data to a component . * * < P > * Note that neither a clipboard nor the action that is being performed are * specified by this call . The instance of this interface merely needs to * paste the data to the component . * < / P > * * @param comp The destination JComponent . * @param data The data to paste . * @return true if the paste was successful , false otherwise . * / boolean paste ( Component comp , Object data ) ; / * * * Copy some data from a component . * * < P > * This method should copy the "selected" data from the source component and * return it . The mechanism whereby the data to copy is identified , and the * class for the data is left to the implementor . * < / P > * * @param comp The source for the data . * @return The copied data . * / Object copy ( JComponent comp ) ; / * * * Remove some data from a component , as a result of a cut or drag - move operation . * * < P > * This method should remove the data specified by the data argument from the * source JComponent . The mechanism whereby the data to be removed is * identified , along with whether it is removed at all , is left up to the * implementation of this interface . * < / P > * * @param comp The component that the data should be removed from . * @param data The data to remove . * / void remove ( JComponent comp , Object data ) ; }
void test4 ( ) throws Throwable { SimplifiedTransferHandlerAdaptor simplifiedTransferHandlerAdaptor0 = new SimplifiedTransferHandlerAdaptor ( ) ; boolean boolean0 = simplifiedTransferHandlerAdaptor0 . paste ( ( Component ) null , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void paste ( TransferSupport support , Object data ) { Object [ ] rowData = ( Object [ ] ) data ; JTable table = ( JTable ) support . getComponent ( ) ; int index = table . getSelectedRow ( ) ; for ( int i = 0 ; i < rowData . length ; i + + ) { int dest = index + i ; pasteRow ( table , dest , rowData [ i ] ) ; } }
void test5 ( ) throws Throwable { SimplifiedTransferHandlerAdaptor simplifiedTransferHandlerAdaptor0 = new SimplifiedTransferHandlerAdaptor ( ) ; boolean boolean0 = simplifiedTransferHandlerAdaptor0 . supportsPaste ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsPaste ( ) ; / * * * Does this class support moving data via drag and drop ? * * @return true if it does , false otherwise . * / boolean supportsMove ( ) ; / * * * Paste some data to a component . * * < P > * Note that neither a clipboard nor the action that is being performed are * specified by this call . The instance of this interface merely needs to * paste the data to the component . * < / P > * * @param comp The destination JComponent . * @param data The data to paste . * @return true if the paste was successful , false otherwise . * / boolean paste ( Component comp , Object data ) ; / * * * Copy some data from a component . * * < P > * This method should copy the "selected" data from the source component and * return it . The mechanism whereby the data to copy is identified , and the * class for the data is left to the implementor . * < / P > * * @param comp The source for the data . * @return The copied data . * / Object copy ( JComponent comp ) ; / * * * Remove some data from a component , as a result of a cut or drag - move operation . * * < P > * This method should remove the data specified by the data argument from the * source JComponent . The mechanism whereby the data to be removed is * identified , along with whether it is removed at all , is left up to the * implementation of this interface . * < / P > * * @param comp The component that the data should be removed from . * @param data The data to remove . * / void remove ( JComponent comp , Object data ) ; }
void test6 ( ) throws Throwable { SimplifiedTransferHandlerAdaptor simplifiedTransferHandlerAdaptor0 = new SimplifiedTransferHandlerAdaptor ( ) ; boolean boolean0 = simplifiedTransferHandlerAdaptor0 . supportsMove ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsMove ( ) ; / * * * Paste some data to a component . * * < P > * Note that neither a clipboard nor the action that is being performed are * specified by this call . The instance of this interface merely needs to * paste the data to the component . * < / P > * * @param comp The destination JComponent . * @param data The data to paste . * @return true if the paste was successful , false otherwise . * / boolean paste ( Component comp , Object data ) ; / * * * Copy some data from a component . * * < P > * This method should copy the "selected" data from the source component and * return it . The mechanism whereby the data to copy is identified , and the * class for the data is left to the implementor . * < / P > * * @param comp The source for the data . * @return The copied data . * / Object copy ( JComponent comp ) ; / * * * Remove some data from a component , as a result of a cut or drag - move operation . * * < P > * This method should remove the data specified by the data argument from the * source JComponent . The mechanism whereby the data to be removed is * identified , along with whether it is removed at all , is left up to the * implementation of this interface . * < / P > * * @param comp The component that the data should be removed from . * @param data The data to remove . * / void remove ( JComponent comp , Object data ) ; }
void test7 ( ) throws Throwable { SimplifiedTransferHandlerAdaptor simplifiedTransferHandlerAdaptor0 = new SimplifiedTransferHandlerAdaptor ( ) ; DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer ( ) ; Object object0 = simplifiedTransferHandlerAdaptor0 . copy ( ( JComponent ) defaultTreeCellRenderer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void copy ( InputStream istream , OutputStream ostream ) throws IOException { int buffSize = 2^13 ; byte [ ] buf = new byte [ buffSize ] ; int count = istream . read ( buf ) ; while ( count > 0 ) { ostream . write ( buf , 0 , count ) ; count = istream . read ( buf ) ; } istream . close ( ) ; ostream . close ( ) ; }
void test4 ( ) throws Throwable { NewTransferHandler newTransferHandler0 = new NewTransferHandler ( ( SimplifiedTransferHandler ) null ) ; Clipboard clipboard0 = new Clipboard ( "H = krUpJ" ) ; newTransferHandler0 . exportToClipboard ( ( JComponent ) null , clipboard0 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test0 ( ) throws Throwable { CallGraphLog callGraphLog0 = new CallGraphLog ( ) ; boolean boolean0 = callGraphLog0 . isDirty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test1 ( ) throws Throwable { CallGraphLog callGraphLog0 = new CallGraphLog ( ) ; CallGraphNode callGraphNode0 = callGraphLog0 . getRoot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test2 ( ) throws Throwable { CallGraphLog callGraphLog0 = new CallGraphLog ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test3 ( ) throws Throwable { CallGraphLog callGraphLog0 = new CallGraphLog ( ) ; callGraphLog0 . enterMethod ( ) ; callGraphLog0 . enterMethod ( ) ; callGraphLog0 . leaveMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test4 ( ) throws Throwable { CallGraphLog callGraphLog0 = new CallGraphLog ( ) ; callGraphLog0 . leaveMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test5 ( ) throws Throwable { CallGraphLog callGraphLog0 = new CallGraphLog ( ) ; callGraphLog0 . enterMethod ( ) ; callGraphLog0 . leaveMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test0 ( ) throws Throwable { JToolBar jToolBar0 = new JToolBar ( ) ; StringSelection stringSelection0 = new StringSelection ( "Z" ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jToolBar0 , ( Transferable ) stringSelection0 ) ; ImportDataCalled importDataCalled0 = new ImportDataCalled ( transferHandler_TransferSupport0 ) ; StringBuffer stringBuffer0 = new StringBuffer ( ) ; importDataCalled0 . appendSubclassToString ( stringBuffer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { CallgraphTranscriber callgraphTranscriber0 = new CallgraphTranscriber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = EventLog . transcript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String transcript ( ) { return getInstance ( ) . getTranscript ( ) ; }
void test0 ( ) throws Throwable { TestTransferHandler testTransferHandler0 = new TestTransferHandler ( ) ; JInternalFrame jInternalFrame0 = new JInternalFrame ( ) ; DummyTransferable dummyTransferable0 = ( DummyTransferable ) testTransferHandler0 . createTransferable ( ( JComponent ) jInternalFrame0 ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jInternalFrame0 , ( Transferable ) dummyTransferable0 ) ; boolean boolean0 = testTransferHandler0 . canImport ( transferHandler_TransferSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canImport ( TransferSupport support ) { / / TODO Auto - generated method stub return super . canImport ( support ) ; }
void test1 ( ) throws Throwable { TestTransferHandler testTransferHandler0 = new TestTransferHandler ( ) ; JInternalFrame jInternalFrame0 = new JInternalFrame ( ) ; JLayeredPane jLayeredPane0 = jInternalFrame0 . getLayeredPane ( ) ; int int0 = testTransferHandler0 . getSourceActions ( ( JComponent ) jLayeredPane0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSourceActions ( JComponent c ) { / / TODO Auto - generated method stub return super . getSourceActions ( c ) ; }
void test0 ( ) throws Throwable { ProxyTransferHandler proxyTransferHandler0 = new ProxyTransferHandler ( ) ; Icon icon0 = proxyTransferHandler0 . getVisualRepresentation ( ( Transferable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" javax . swing . Icon getVisualRepresentation ( java . awt . datatransfer . Transferable arg0 ) { try { EventLog . getInstance ( ) . enterMethod ( ) ; return super . getVisualRepresentation ( arg0 ) ; } finally { EventLog . getInstance ( ) . leaveMethod ( ) ; } }
void test1 ( ) throws Throwable { ProxyTransferHandler proxyTransferHandler0 = new ProxyTransferHandler ( ) ; JTextField jTextField0 = new JTextField ( "s ; BS4 = } N ] RAa yG ; S" , 0 ) ; StringSelection stringSelection0 = new StringSelection ( "s ; BS4 = } N ] RAa yG ; S" ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jTextField0 , ( Transferable ) stringSelection0 ) ; boolean boolean0 = proxyTransferHandler0 . canImport ( transferHandler_TransferSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canImport ( TransferSupport support ) { / / TODO Auto - generated method stub return super . canImport ( support ) ; }
void test2 ( ) throws Throwable { ProxyTransferHandler proxyTransferHandler0 = new ProxyTransferHandler ( ) ; JTextField jTextField0 = new JTextField ( "s ; BS4 = } N ] RAa yG ; S" , 0 ) ; StringSelection stringSelection0 = new StringSelection ( "s ; BS4 = } N ] RAa yG ; S" ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jTextField0 , ( Transferable ) stringSelection0 ) ; boolean boolean0 = proxyTransferHandler0 . importData ( transferHandler_TransferSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean importData ( TransferSupport support ) { / / TODO Auto - generated method stub return super . importData ( support ) ; }
void test3 ( ) throws Throwable { ProxyTransferHandler proxyTransferHandler0 = new ProxyTransferHandler ( ) ; String string0 = proxyTransferHandler0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { ProxyTransferHandler proxyTransferHandler0 = new ProxyTransferHandler ( ) ; boolean boolean0 = proxyTransferHandler0 . equals ( ( Object ) proxyTransferHandler0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return myData . equals ( o ) ; }
void test5 ( ) throws Throwable { ProxyTransferHandler proxyTransferHandler0 = new ProxyTransferHandler ( ) ; Box box0 = Box . createVerticalBox ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) box0 , ( - 1 ) , ( long ) ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , true , ( - 1 ) , ( - 1 ) , ( - 1 ) ) ; proxyTransferHandler0 . exportAsDrag ( ( JComponent ) null , ( InputEvent ) mouseWheelEvent0 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void exportAsDrag ( JComponent comp , InputEvent e , int action ) { / / TODO Auto - generated method stub super . exportAsDrag ( comp , e , action ) ; }
void test6 ( ) throws Throwable { ProxyTransferHandler proxyTransferHandler0 = new ProxyTransferHandler ( ) ; Clipboard clipboard0 = new Clipboard ( "SIcUg [ " ) ; proxyTransferHandler0 . exportToClipboard ( ( JComponent ) null , clipboard0 , 887 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test7 ( ) throws Throwable { ProxyTransferHandler proxyTransferHandler0 = new ProxyTransferHandler ( ) ; Transferable transferable0 = proxyTransferHandler0 . createTransferable ( ( JComponent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Transferable createTransferable ( JComponent c ) { / / TODO Auto - generated method stub return super . createTransferable ( c ) ; }
void test0 ( ) throws Throwable { CallEnterEvent callEnterEvent0 = new CallEnterEvent ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { CallGraphLog callGraphLog0 = ( CallGraphLog ) EventLog . getInstance ( ) ; RecordingTransferable recordingTransferable0 = new RecordingTransferable ( ( EventLog ) callGraphLog0 ) ; Class < ? > class0 = AncestorListener . class ; DataFlavor dataFlavor0 = new DataFlavor ( class0 , "" ) ; ByteArrayInputStream byteArrayInputStream0 = ( ByteArrayInputStream ) recordingTransferable0 . getTransferData ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getTransferData ( Transferable transferable ) throws UnsupportedFlavorException , IOException { return transferable . getTransferData ( LocalVMTransferable . JVM_OBJECT_FLAVOR ) ; }
void test2 ( ) throws Throwable { CallGraphLog callGraphLog0 = ( CallGraphLog ) EventLog . getInstance ( ) ; RecordingTransferable recordingTransferable0 = new RecordingTransferable ( ( EventLog ) callGraphLog0 ) ; DataFlavor dataFlavor0 = DataFlavor . stringFlavor ; boolean boolean0 = recordingTransferable0 . isDataFlavorSupported ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { return flavor . isMimeTypeEqual ( JVM_OBJECT_FLAVOR ) ; }
void test3 ( ) throws Throwable { CallGraphLog callGraphLog0 = ( CallGraphLog ) EventLog . getInstance ( ) ; RecordingTransferable recordingTransferable0 = new RecordingTransferable ( ( EventLog ) callGraphLog0 ) ; DataFlavor [ ] dataFlavorArray0 = recordingTransferable0 . getTransferDataFlavors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompatible ( DataFlavor [ ] flavors ) { for ( DataFlavor flavor : flavors ) { if ( isCompatible ( flavor ) ) return true ; } return false ; }
void test4 ( ) throws Throwable { CallGraphLog callGraphLog0 = ( CallGraphLog ) EventLog . getInstance ( ) ; RecordingTransferable recordingTransferable0 = new RecordingTransferable ( ( EventLog ) callGraphLog0 ) ; DataFlavor [ ] dataFlavorArray0 = new DataFlavor [ 2 ] ; boolean boolean0 = recordingTransferable0 . isCompatible ( dataFlavorArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCompatible ( DataFlavor [ ] flavors ) { for ( DataFlavor flavor : flavors ) { if ( isCompatible ( flavor ) ) return true ; } return false ; }
void test0 ( ) throws Throwable { StackTraceEvent stackTraceEvent0 = new StackTraceEvent ( ) ; String string0 = stackTraceEvent0 . getSimpleName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSimpleName ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( myTrace [ 0 ] . getClassName ( ) ) ; sb . append ( ' . ' ) ; sb . append ( myTrace [ 0 ] . getMethodName ( ) ) ; sb . append ( ' : ' ) ; sb . append ( myTrace [ 0 ] . getLineNumber ( ) ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { StackTraceEvent stackTraceEvent0 = new StackTraceEvent ( ) ; stackTraceEvent0 . getElement ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSimpleName ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( myTrace [ 0 ] . getClassName ( ) ) ; sb . append ( ' . ' ) ; sb . append ( myTrace [ 0 ] . getMethodName ( ) ) ; sb . append ( ' : ' ) ; sb . append ( myTrace [ 0 ] . getLineNumber ( ) ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { StackTraceEvent stackTraceEvent0 = new StackTraceEvent ( ) ; StackTraceElement [ ] stackTraceElementArray0 = stackTraceEvent0 . getTrace ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" StackTraceElement [ ] copySubtrace ( int start , StackTraceElement [ ] trace ) { int length = trace . length - start ; StackTraceElement [ ] result = new StackTraceElement [ length ] ; for ( int i = start ; i < length ; i + + ) { result [ i - start ] = trace [ i ] ; } return result ; }
void test3 ( ) throws Throwable { StackTraceEvent stackTraceEvent0 = new StackTraceEvent ( ) ; boolean boolean0 = stackTraceEvent0 . equals ( stackTraceEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSimpleName ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( myTrace [ 0 ] . getClassName ( ) ) ; sb . append ( ' . ' ) ; sb . append ( myTrace [ 0 ] . getMethodName ( ) ) ; sb . append ( ' : ' ) ; sb . append ( myTrace [ 0 ] . getLineNumber ( ) ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { StackTraceEvent stackTraceEvent0 = new StackTraceEvent ( ) ; boolean boolean0 = stackTraceEvent0 . isAncestorOf ( stackTraceEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSimpleName ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( myTrace [ 0 ] . getClassName ( ) ) ; sb . append ( ' . ' ) ; sb . append ( myTrace [ 0 ] . getMethodName ( ) ) ; sb . append ( ' : ' ) ; sb . append ( myTrace [ 0 ] . getLineNumber ( ) ) ; return sb . toString ( ) ; }
void test5 ( ) throws Throwable { StackTraceEvent stackTraceEvent0 = new StackTraceEvent ( ) ; boolean boolean0 = stackTraceEvent0 . isParentOf ( stackTraceEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSimpleName ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( myTrace [ 0 ] . getClassName ( ) ) ; sb . append ( ' . ' ) ; sb . append ( myTrace [ 0 ] . getMethodName ( ) ) ; sb . append ( ' : ' ) ; sb . append ( myTrace [ 0 ] . getLineNumber ( ) ) ; return sb . toString ( ) ; }
void test6 ( ) throws Throwable { StackTraceEvent stackTraceEvent0 = new StackTraceEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSimpleName ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( myTrace [ 0 ] . getClassName ( ) ) ; sb . append ( ' . ' ) ; sb . append ( myTrace [ 0 ] . getMethodName ( ) ) ; sb . append ( ' : ' ) ; sb . append ( myTrace [ 0 ] . getLineNumber ( ) ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { CallGraphLogFactory callGraphLogFactory0 = new CallGraphLogFactory ( ) ; CallGraphLog callGraphLog0 = ( CallGraphLog ) callGraphLogFactory0 . createEventLog ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String transcript ( ) { return getInstance ( ) . getTranscript ( ) ; }
void test1 ( ) throws Throwable { CallGraphLogFactory callGraphLogFactory0 = new CallGraphLogFactory ( ) ; EventLog eventLog0 = callGraphLogFactory0 . createEventLog ( ( EventLog . LogTypes ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String transcript ( ) { return getInstance ( ) . getTranscript ( ) ; }
void test2 ( ) throws Throwable { CallGraphLogFactory callGraphLogFactory0 = new CallGraphLogFactory ( ) ; EventLog . LogTypes eventLog_LogTypes0 = EventLog . LogTypes . Default ; EventLog eventLog0 = callGraphLogFactory0 . createEventLog ( eventLog_LogTypes0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String transcript ( ) { return getInstance ( ) . getTranscript ( ) ; }
void test0 ( ) throws Throwable { CallLeaveEvent callLeaveEvent0 = new CallLeaveEvent ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { LogTranscriber logTranscriber0 = new LogTranscriber ( ) ; CallGraphLog callGraphLog0 = ( CallGraphLog ) EventLog . getInstance ( ) ; String string0 = logTranscriber0 . transcribe ( ( EventLog ) callGraphLog0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String transcribe ( EventLog log ) { StringWriter writer = new StringWriter ( ) ; PrintWriter out = new PrintWriter ( writer ) ; Object [ ] events = log . getEvents ( ) ; for ( Object o : events ) { out . println ( o ) ; } out . close ( ) ; return writer . toString ( ) ; }
void test0 ( ) throws Throwable { CallGraphNode callGraphNode0 = new CallGraphNode ( ) ; StackTraceEvent stackTraceEvent0 = callGraphNode0 . getEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MouseEvent getEvent ( ) { return myEvent ; }
void test1 ( ) throws Throwable { StackTraceEvent stackTraceEvent0 = new StackTraceEvent ( ) ; CallGraphNode callGraphNode0 = new CallGraphNode ( stackTraceEvent0 ) ; callGraphNode0 . isAncestorOf ( stackTraceEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { StackTraceEvent stackTraceEvent0 = new StackTraceEvent ( ) ; CallGraphNode callGraphNode0 = new CallGraphNode ( stackTraceEvent0 ) ; callGraphNode0 . isParentOf ( stackTraceEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { StackTraceEvent stackTraceEvent0 = new StackTraceEvent ( ) ; CallGraphNode callGraphNode0 = new CallGraphNode ( stackTraceEvent0 ) ; boolean boolean0 = callGraphNode0 . isRoot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRoot ( ) { return null = = myEvent ; }
void test4 ( ) throws Throwable { CallGraphNode callGraphNode0 = new CallGraphNode ( ) ; boolean boolean0 = callGraphNode0 . isRoot ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRoot ( ) { return null = = myEvent ; }
void test5 ( ) throws Throwable { StackTraceEvent stackTraceEvent0 = new StackTraceEvent ( ) ; CallGraphNode callGraphNode0 = new CallGraphNode ( stackTraceEvent0 ) ; String string0 = callGraphNode0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test6 ( ) throws Throwable { CallGraphNode callGraphNode0 = new CallGraphNode ( ) ; String string0 = callGraphNode0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { DummyTransferable dummyTransferable0 = new DummyTransferable ( ) ; boolean boolean0 = dummyTransferable0 . isDataFlavorSupported ( ( DataFlavor ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { return flavor . isMimeTypeEqual ( JVM_OBJECT_FLAVOR ) ; }
void test1 ( ) throws Throwable { DummyTransferable dummyTransferable0 = new DummyTransferable ( ) ; DataFlavor dataFlavor0 = DataFlavor . imageFlavor ; DummyTransferable dummyTransferable1 = ( DummyTransferable ) dummyTransferable0 . getTransferData ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getTransferData ( Transferable transferable ) throws UnsupportedFlavorException , IOException { return transferable . getTransferData ( LocalVMTransferable . JVM_OBJECT_FLAVOR ) ; }
void test2 ( ) throws Throwable { DummyTransferable dummyTransferable0 = new DummyTransferable ( ) ; DataFlavor [ ] dataFlavorArray0 = dummyTransferable0 . getTransferDataFlavors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataFlavor [ ] getTransferDataFlavors ( ) { return JVM_OBJECT_FLAVORS ; }
void test1 ( ) throws Throwable { EventLog eventLog0 = new EventLog ( ) ; eventLog0 . enterMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String transcript ( ) { return getInstance ( ) . getTranscript ( ) ; }
void test2 ( ) throws Throwable { EventLog eventLog0 = new EventLog ( ) ; LogTranscriber logTranscriber0 = new LogTranscriber ( ) ; eventLog0 . setTranscriber ( logTranscriber0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTranscript ( ) { / / TODO Auto - generated method stub return null ; }
void test3 ( ) throws Throwable { String string0 = EventLog . transcript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String transcript ( ) { return getInstance ( ) . getTranscript ( ) ; }
void test4 ( ) throws Throwable { EventLog eventLog0 = new EventLog ( ) ; eventLog0 . leaveMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String transcript ( ) { return getInstance ( ) . getTranscript ( ) ; }
void test0 ( ) throws Throwable { RecordingEvent recordingEvent0 = new RecordingEvent ( ) ; String string0 = recordingEvent0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNanoTime ( ) { return myPreciseTime ; }
void test1 ( ) throws Throwable { RecordingEvent recordingEvent0 = new RecordingEvent ( ) ; int int0 = recordingEvent0 . getSequence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNanoTime ( ) { return myPreciseTime ; }
void test2 ( ) throws Throwable { RecordingEvent recordingEvent0 = new RecordingEvent ( ) ; String string0 = recordingEvent0 . buildString ( "RecordingEvent { copy - or - move } " , 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNanoTime ( ) { return myPreciseTime ; }
void test4 ( ) throws Throwable { RecordingEvent recordingEvent0 = new RecordingEvent ( ) ; String string0 = recordingEvent0 . buildNameActionTimestamp ( ( - 170 ) , ( - 170 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNanoTime ( ) { return myPreciseTime ; }
void test5 ( ) throws Throwable { RecordingEvent recordingEvent0 = new RecordingEvent ( ) ; recordingEvent0 . setSequence ( ( - 170 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSequence ( ) { return mySequence ; }
void test6 ( ) throws Throwable { RecordingEvent recordingEvent0 = new RecordingEvent ( ) ; String string0 = recordingEvent0 . buildNameAction ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNanoTime ( ) { return myPreciseTime ; }
void test7 ( ) throws Throwable { RecordingEvent recordingEvent0 = new RecordingEvent ( ) ; long long0 = recordingEvent0 . getNanoTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNanoTime ( ) { return myPreciseTime ; }
void test8 ( ) throws Throwable { RecordingEvent recordingEvent0 = new RecordingEvent ( ) ; String string0 = recordingEvent0 . actionToString ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNanoTime ( ) { return myPreciseTime ; }
void test9 ( ) throws Throwable { RecordingEvent recordingEvent0 = new RecordingEvent ( ) ; String string0 = recordingEvent0 . actionToString ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNanoTime ( ) { return myPreciseTime ; }
void test10 ( ) throws Throwable { RecordingEvent recordingEvent0 = new RecordingEvent ( ) ; DataFlavor [ ] dataFlavorArray0 = new DataFlavor [ 2 ] ; DataFlavor dataFlavor0 = DataFlavor . javaFileListFlavor ; dataFlavorArray0 [ 0 ] = dataFlavor0 ; dataFlavorArray0 [ 1 ] = dataFlavorArray0 [ 0 ] ; String string0 = recordingEvent0 . buildNameFlavorString ( dataFlavorArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getNanoTime ( ) { return myPreciseTime ; }
void test0 ( ) throws Throwable { Box box0 = Box . createHorizontalBox ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) box0 , 0 , ( long ) 0 , 0 , 0 , 0 , 0 , false , 0 ) ; ExportAsDragCalled exportAsDragCalled0 = new ExportAsDragCalled ( ( InputEvent ) mouseEvent0 , 0 ) ; StringWriter stringWriter0 = new StringWriter ( 0 ) ; StringBuffer stringBuffer0 = stringWriter0 . getBuffer ( ) ; exportAsDragCalled0 . appendSubclassToString ( stringBuffer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { RecordingTransferHandler recordingTransferHandler0 = new RecordingTransferHandler ( ) ; Clipboard clipboard0 = new Clipboard ( ( String ) null ) ; recordingTransferHandler0 . exportToClipboard ( ( JComponent ) null , clipboard0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test1 ( ) throws Throwable { RecordingTransferHandler recordingTransferHandler0 = new RecordingTransferHandler ( ) ; Object [ ] objectArray0 = recordingTransferHandler0 . getEvents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] getEvents ( ) { return myLog . toArray ( ) ; }
void test2 ( ) throws Throwable { RecordingTransferHandler recordingTransferHandler0 = new RecordingTransferHandler ( ) ; JLabel jLabel0 = new JLabel ( " | ? dwo1DdhSfPX4P7zu" ) ; recordingTransferHandler0 . exportAsDrag ( ( JComponent ) jLabel0 , ( InputEvent ) null , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWidth ( ) { return myWidth ; }
void test3 ( ) throws Throwable { RecordingTransferHandler recordingTransferHandler0 = new RecordingTransferHandler ( ) ; DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer ( ) ; StringSelection stringSelection0 = new StringSelection ( ( String ) null ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) defaultTreeCellRenderer0 , ( Transferable ) stringSelection0 ) ; boolean boolean0 = recordingTransferHandler0 . canImport ( transferHandler_TransferSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean canImport ( TransferSupport support ) { / / TODO Auto - generated method stub return super . canImport ( support ) ; }
void test4 ( ) throws Throwable { RecordingTransferHandler recordingTransferHandler0 = new RecordingTransferHandler ( ) ; JLabel jLabel0 = new JLabel ( " | ? dwo1DdhSfPX4P7zu" ) ; StringSelection stringSelection0 = new StringSelection ( " | ? dwo1DdhSfPX4P7zu" ) ; TransferHandler . TransferSupport transferHandler_TransferSupport0 = new TransferHandler . TransferSupport ( ( Component ) jLabel0 , ( Transferable ) stringSelection0 ) ; boolean boolean0 = recordingTransferHandler0 . importData ( transferHandler_TransferSupport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean importData ( TransferSupport support ) { / / TODO Auto - generated method stub return super . importData ( support ) ; }
void test6 ( ) throws Throwable { RecordingTransferHandler recordingTransferHandler0 = new RecordingTransferHandler ( ) ; int int0 = recordingTransferHandler0 . getSourceActions ( ( JComponent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSourceActions ( JComponent c ) { / / TODO Auto - generated method stub return super . getSourceActions ( c ) ; }
void test7 ( ) throws Throwable { RecordingTransferHandler recordingTransferHandler0 = new RecordingTransferHandler ( ) ; JPasswordField jPasswordField0 = new JPasswordField ( "" ) ; Transferable transferable0 = recordingTransferHandler0 . createTransferable ( ( JComponent ) jPasswordField0 ) ; recordingTransferHandler0 . exportDone ( ( JComponent ) jPasswordField0 , transferable0 , 1535 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test8 ( ) throws Throwable { RecordingTransferHandler recordingTransferHandler0 = new RecordingTransferHandler ( ) ; Transferable transferable0 = recordingTransferHandler0 . createTransferable ( ( JComponent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Transferable createTransferable ( JComponent c ) { / / TODO Auto - generated method stub return super . createTransferable ( c ) ; }
void test0 ( ) throws Throwable { ArrayUtils arrayUtils0 = new ArrayUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { ExampleModel exampleModel0 = new ExampleModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test1 ( ) throws Throwable { ExampleModel exampleModel0 = new ExampleModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test2 ( ) throws Throwable { ExampleModel exampleModel0 = new ExampleModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test6 ( ) throws Throwable { ExampleModel exampleModel0 = new ExampleModel ( ) ; int int0 = exampleModel0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test0 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( 240 , 240 ) ; BridgeAdaptor bridgeAdaptor0 = new BridgeAdaptor ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test1 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; BridgeAdaptor bridgeAdaptor0 = new BridgeAdaptor ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int column ) { return COLUMN_NAMES [ column ] ; }
void test3 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; BridgeAdaptor bridgeAdaptor0 = new BridgeAdaptor ( ( TableModel ) defaultTableModel0 ) ; JTable jTable0 = new JTable ( ) ; bridgeAdaptor0 . addTableModelListener ( ( TableModelListener ) jTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addTableModelListener ( TableModelListener listener ) { super . addTableModelListener ( listener ) ; }
void test4 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( 0 , 0 ) ; BridgeAdaptor bridgeAdaptor0 = new BridgeAdaptor ( ( TableModel ) defaultTableModel0 ) ; Object [ ] [ ] objectArray0 = new Object [ 1 ] [ 10 ] ; Object [ ] objectArray1 = new Object [ 10 ] ; objectArray1 [ 0 ] = ( Object ) defaultTableModel0 ; objectArray1 [ 1 ] = ( Object ) 0 ; objectArray1 [ 2 ] = ( Object ) 0 ; objectArray1 [ 3 ] = ( Object ) 0 ; objectArray1 [ 4 ] = ( Object ) defaultTableModel0 ; objectArray1 [ 5 ] = ( Object ) defaultTableModel0 ; objectArray1 [ 6 ] = ( Object ) defaultTableModel0 ; objectArray1 [ 7 ] = ( Object ) 0 ; objectArray1 [ 8 ] = ( Object ) defaultTableModel0 ; objectArray1 [ 9 ] = ( Object ) defaultTableModel0 ; objectArray0 [ 0 ] = objectArray1 ; JTable jTable0 = new JTable ( objectArray0 , objectArray0 [ 0 ] ) ; bridgeAdaptor0 . removeTableModelListener ( ( TableModelListener ) jTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test5 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; BridgeAdaptor bridgeAdaptor0 = new BridgeAdaptor ( ( TableModel ) defaultTableModel0 ) ; Class < ? > class0 = bridgeAdaptor0 . getColumnClass ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getColumnClass ( int column ) { return String . class ; }
void test7 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( 0 , 0 ) ; BridgeAdaptor bridgeAdaptor0 = new BridgeAdaptor ( ( TableModel ) defaultTableModel0 ) ; int int0 = bridgeAdaptor0 . getColumnCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test8 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; BridgeAdaptor bridgeAdaptor0 = new BridgeAdaptor ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int rowIndex , int columnIndex ) { return false ; }
void test0 ( ) throws Throwable { CalorieCountData calorieCountData0 = new CalorieCountData ( ) ; EntryList entryList0 = calorieCountData0 . getMeals ( ) ; FrequentRowModel frequentRowModel0 = new FrequentRowModel ( ) ; RowModelDataListBridge rowModelDataListBridge0 = new RowModelDataListBridge ( ( DataList ) entryList0 , ( RowModel ) frequentRowModel0 ) ; boolean boolean0 = rowModelDataListBridge0 . isCellEditable ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int rowIndex , int columnIndex ) { return false ; }
void test1 ( ) throws Throwable { FrequentFoodList frequentFoodList0 = new FrequentFoodList ( ) ; FrequentRowModel frequentRowModel0 = new FrequentRowModel ( ) ; RowModelDataListBridge rowModelDataListBridge0 = new RowModelDataListBridge ( ( DataList ) frequentFoodList0 , ( RowModel ) frequentRowModel0 ) ; rowModelDataListBridge0 . setRowModel ( ( RowModel ) frequentRowModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test3 ( ) throws Throwable { CalorieCountData calorieCountData0 = new CalorieCountData ( ) ; EntryList entryList0 = calorieCountData0 . getMeals ( ) ; FrequentRowModel frequentRowModel0 = new FrequentRowModel ( ) ; RowModelDataListBridge rowModelDataListBridge0 = new RowModelDataListBridge ( ( DataList ) entryList0 , ( RowModel ) frequentRowModel0 ) ; JTable jTable0 = new JTable ( ( TableModel ) rowModelDataListBridge0 , ( TableColumnModel ) null , ( ListSelectionModel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test5 ( ) throws Throwable { CalorieCountData calorieCountData0 = new CalorieCountData ( ) ; EntryList entryList0 = calorieCountData0 . getMeals ( ) ; FrequentRowModel frequentRowModel0 = new FrequentRowModel ( ) ; RowModelDataListBridge rowModelDataListBridge0 = new RowModelDataListBridge ( ( DataList ) entryList0 , ( RowModel ) frequentRowModel0 ) ; FrequentRowModel frequentRowModel1 = ( FrequentRowModel ) rowModelDataListBridge0 . getRowModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RowModel getRowModel ( ) { return myRowModel ; }
void test0 ( ) throws Throwable { TableEvent . Events tableEvent_Events0 = TableEvent . Events . SingleClick ; TableEvent tableEvent0 = new TableEvent ( tableEvent_Events0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableEvent ( Events theEvent ) { event = theEvent ; }
void test1 ( ) throws Throwable { TableEvent . Events tableEvent_Events0 = TableEvent . Events . SingleClick ; TableEvent tableEvent0 = new TableEvent ( tableEvent_Events0 , 1831516892 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableEvent ( Events theEvent ) { event = theEvent ; }
void test2 ( ) throws Throwable { TableEvent . Events tableEvent_Events0 = TableEvent . Events . SingleClick ; int [ ] intArray0 = new int [ 2 ] ; TableEvent tableEvent0 = new TableEvent ( tableEvent_Events0 , intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableEvent ( Events theEvent ) { event = theEvent ; }
void test1 ( ) throws Throwable { FoodRowModel foodRowModel0 = new FoodRowModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int column ) { return COLUMN_NAMES [ column ] ; }
void test2 ( ) throws Throwable { FrequentRowModel frequentRowModel0 = new FrequentRowModel ( ) ; int int0 = frequentRowModel0 . getColumnCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test4 ( ) throws Throwable { FoodRowModel foodRowModel0 = new FoodRowModel ( ) ; Comparator < Object > comparator0 = foodRowModel0 . getComparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Comparator getComparator ( ) ; boolean myAllowDuplicates ; List < AbstractAppData > myList ; / * * * Add an element to the list . * * < P > * The method will insert the new element into the list at the sorted position , * as determined by { @link #getComparator ( ) }
void test7 ( ) throws Throwable { FoodRowModel foodRowModel0 = new FoodRowModel ( ) ; String [ ] stringArray0 = foodRowModel0 . getColumnNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getColumnNames ( ) { return COLUMN_NAMES ; }
void test2 ( ) throws Throwable { JTableEventBridge jTableEventBridge0 = new JTableEventBridge ( ) ; JTable jTable0 = jTableEventBridge0 . getTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] [ ] getTable ( ) { return myTable ; }
void test3 ( ) throws Throwable { JTable jTable0 = new JTable ( ) ; JTableEventBridge jTableEventBridge0 = new JTableEventBridge ( jTable0 ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) jTable0 , 1155 , ( long ) 1155 , 1155 , 1155 , 1155 , 1155 , false ) ; jTableEventBridge0 . birdgeDoubleClick ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void birdgeDoubleClick ( MouseEvent mouseEvent ) { int [ ] selectedRows = myTable . getSelectedRows ( ) ; TableEvent . Events theEvent = TableEvent . Events . DoubleClick ; TableEvent event = new TableEvent ( theEvent , selectedRows ) ; myHelper . fireEvent ( event ) ; }
void test7 ( ) throws Throwable { JTable jTable0 = new JTable ( ) ; JTableEventBridge jTableEventBridge0 = new JTableEventBridge ( jTable0 ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) jTable0 , 1155 , ( long ) 1155 , 1155 , 1155 , 1155 , 1155 , false ) ; jTableEventBridge0 . bridgeSingleClick ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void bridgeSingleClick ( MouseEvent mouseEvent ) { }
void test8 ( ) throws Throwable { JTableEventBridge jTableEventBridge0 = new JTableEventBridge ( ) ; Object [ ] [ ] objectArray0 = new Object [ 7 ] [ 10 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , objectArray0 [ 0 ] ) ; DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel ( ) ; JTable jTable0 = new JTable ( ( TableModel ) defaultTableModel0 , ( TableColumnModel ) defaultTableColumnModel0 , ( ListSelectionModel ) null ) ; jTableEventBridge0 . setTable ( jTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test10 ( ) throws Throwable { JTableEventBridge jTableEventBridge0 = new JTableEventBridge ( ) ; Object [ ] [ ] objectArray0 = new Object [ 7 ] [ 10 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , objectArray0 [ 0 ] ) ; DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel ( ) ; JTable jTable0 = new JTable ( ( TableModel ) defaultTableModel0 , ( TableColumnModel ) defaultTableColumnModel0 , ( ListSelectionModel ) null ) ; jTableEventBridge0 . initialize ( jTable0 ) ; jTableEventBridge0 . initialize ( ( JTable ) null ) ; jTableEventBridge0 . setTable ( jTable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEditingRow ( ) { return ( getColumnClass ( editingColumn ) = = TreeTableModel . class ) ? - 1 : editingRow ; }
void test1 ( ) throws Throwable { TableModelListenerAdaptor tableModelListenerAdaptor0 = new TableModelListenerAdaptor ( ) ; Object [ ] objectArray0 = new Object [ 9 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( objectArray0 , 0 ) ; TableModelEvent tableModelEvent0 = new TableModelEvent ( ( TableModel ) defaultTableModel0 , 0 , 0 , 0 , ( - 1 ) ) ; tableModelListenerAdaptor0 . tableChanged ( tableModelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void tableChanged ( TableModelEvent e ) { / / System . out . println ( "Sorter : tableChanged" ) ; reallocateIndexes ( ) ; super . tableChanged ( e ) ; }
void test2 ( ) throws Throwable { TableModelListenerAdaptor tableModelListenerAdaptor0 = new TableModelListenerAdaptor ( ) ; JTable jTable0 = new JTable ( ) ; DefaultTableModel defaultTableModel0 = ( DefaultTableModel ) jTable0 . getModel ( ) ; TableModelEvent tableModelEvent0 = new TableModelEvent ( ( TableModel ) defaultTableModel0 , 1 , 1 , 1 , 1 ) ; tableModelListenerAdaptor0 . tableChanged ( tableModelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void tableChanged ( TableModelEvent e ) { / / System . out . println ( "Sorter : tableChanged" ) ; reallocateIndexes ( ) ; super . tableChanged ( e ) ; }
void test3 ( ) throws Throwable { TableModelListenerAdaptor tableModelListenerAdaptor0 = new TableModelListenerAdaptor ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( 1725 , 1725 ) ; TableModelEvent tableModelEvent0 = new TableModelEvent ( ( TableModel ) defaultTableModel0 , Integer . MIN_VALUE , 1829 , 1829 ) ; tableModelListenerAdaptor0 . tableChanged ( tableModelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void tableChanged ( TableModelEvent e ) { / / System . out . println ( "Sorter : tableChanged" ) ; reallocateIndexes ( ) ; super . tableChanged ( e ) ; }
void test4 ( ) throws Throwable { TableModelListenerAdaptor tableModelListenerAdaptor0 = new TableModelListenerAdaptor ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; TableModelEvent tableModelEvent0 = new TableModelEvent ( ( TableModel ) defaultTableModel0 , 66 , 66 , 66 , 66 ) ; tableModelListenerAdaptor0 . tableChanged ( tableModelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void tableChanged ( TableModelEvent e ) { / / System . out . println ( "Sorter : tableChanged" ) ; reallocateIndexes ( ) ; super . tableChanged ( e ) ; }
void test5 ( ) throws Throwable { TableModelListenerAdaptor tableModelListenerAdaptor0 = new TableModelListenerAdaptor ( ) ; JTable jTable0 = new JTable ( ) ; DefaultTableModel defaultTableModel0 = ( DefaultTableModel ) jTable0 . getModel ( ) ; TableModelEvent tableModelEvent0 = new TableModelEvent ( ( TableModel ) defaultTableModel0 ) ; tableModelListenerAdaptor0 . tableChanged ( tableModelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void tableChanged ( TableModelEvent e ) { / / System . out . println ( "Sorter : tableChanged" ) ; reallocateIndexes ( ) ; super . tableChanged ( e ) ; }
void test0 ( ) throws Throwable { RowModelDataListBridge rowModelDataListBridge0 = new RowModelDataListBridge ( ) ; ListEvent . EventType listEvent_EventType0 = ListEvent . EventType . Update ; ListEvent listEvent0 = new ListEvent ( listEvent_EventType0 ) ; rowModelDataListBridge0 . listEvent ( listEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void listEvent ( ListEvent event ) ; }
void test2 ( ) throws Throwable { FoodList foodList0 = new FoodList ( ( List ) null ) ; FoodRowModel foodRowModel0 = new FoodRowModel ( ) ; RowModelDataListBridge rowModelDataListBridge0 = new RowModelDataListBridge ( ( DataList ) foodList0 , ( RowModel ) foodRowModel0 ) ; Food food0 = new Food ( 0 , "it8kT ! - ^V" , 0 , "it8kT ! - ^V" ) ; Food food1 = foodList0 . createFood ( food0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDirty ( ) { return myDirty ; }
void test3 ( ) throws Throwable { RowModelDataListBridge rowModelDataListBridge0 = new RowModelDataListBridge ( ) ; ListEvent . EventType listEvent_EventType0 = ListEvent . EventType . AllChanged ; ListEvent listEvent0 = new ListEvent ( listEvent_EventType0 , 512 , ( Object ) 512 ) ; rowModelDataListBridge0 . listEvent ( listEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void listEvent ( ListEvent event ) ; }
void test5 ( ) throws Throwable { RowModelDataListBridge rowModelDataListBridge0 = new RowModelDataListBridge ( ) ; ListEvent . EventType listEvent_EventType0 = ListEvent . EventType . Delete ; ListEvent listEvent0 = new ListEvent ( listEvent_EventType0 , ( - 1755 ) , ( Object ) listEvent_EventType0 ) ; rowModelDataListBridge0 . listEvent ( listEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void listEvent ( ListEvent event ) ; }
void test0 ( ) throws Throwable { NotifyingListAdaptor < String > notifyingListAdaptor0 = new NotifyingListAdaptor < String > ( ) ; MealRowModel mealRowModel0 = new MealRowModel ( ) ; TableBridge < String > tableBridge0 = new TableBridge < String > ( ( NotifyingList < String > ) notifyingListAdaptor0 , ( RowModel ) mealRowModel0 ) ; JTable jTable0 = new JTable ( ( TableModel ) tableBridge0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test2 ( ) throws Throwable { NotifyingListAdaptor < String > notifyingListAdaptor0 = new NotifyingListAdaptor < String > ( ) ; MealRowModel mealRowModel0 = new MealRowModel ( ) ; TableBridge < String > tableBridge0 = new TableBridge < String > ( ( NotifyingList < String > ) notifyingListAdaptor0 , ( RowModel ) mealRowModel0 ) ; boolean boolean0 = tableBridge0 . isCellEditable ( 0 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int rowIndex , int columnIndex ) { return false ; }
void test5 ( ) throws Throwable { OtherNotifyingListAdaptor < String > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < String > ( ) ; EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; TableBridge < String > tableBridge0 = new TableBridge < String > ( ( NotifyingList < String > ) otherNotifyingListAdaptor0 , ( RowModel ) entryRowModel0 ) ; tableBridge0 . append ( ( Object ) "section" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test6 ( ) throws Throwable { NotifyingListAdaptor < Integer > notifyingListAdaptor0 = new NotifyingListAdaptor < Integer > ( ) ; Integer integer0 = JLayeredPane . FRAME_CONTENT_LAYER ; notifyingListAdaptor0 . add ( integer0 ) ; ListProxy < Integer > listProxy0 = new ListProxy < Integer > ( ( NotifyingList < Integer > ) notifyingListAdaptor0 ) ; EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; TableBridge < Integer > tableBridge0 = new TableBridge < Integer > ( ( NotifyingList < Integer > ) listProxy0 , ( RowModel ) entryRowModel0 ) ; int [ ] intArray0 = new int [ 1 ] ; tableBridge0 . remove ( intArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { ApplicationDataListRowModel applicationDataListRowModel0 = new ApplicationDataListRowModel ( ( ApplicationDataList ) null , ( RowModel ) null ) ; ApplicationDataListRowModel . ADLListener applicationDataListRowModel_ADLListener0 = applicationDataListRowModel0 . new ADLListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ApplicationDataListRowModel ( ApplicationDataList list , RowModel rowModel ) { initialize ( list , rowModel ) ; }
void test1 ( ) throws Throwable { FoodRowModel foodRowModel0 = new FoodRowModel ( ) ; NotifyingListAdaptor < Object > notifyingListAdaptor0 = new NotifyingListAdaptor < Object > ( ) ; ListTableBridge listTableBridge0 = new ListTableBridge ( ( NotifyingList ) notifyingListAdaptor0 , ( RowModel ) foodRowModel0 ) ; int int0 = listTableBridge0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test2 ( ) throws Throwable { NotifyingListAdaptor < Object > notifyingListAdaptor0 = new NotifyingListAdaptor < Object > ( ) ; EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; ListTableBridge listTableBridge0 = new ListTableBridge ( ( NotifyingList ) notifyingListAdaptor0 , ( RowModel ) entryRowModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test4 ( ) throws Throwable { OtherNotifyingListAdaptor < Integer > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Integer > ( ) ; FoodRowModel foodRowModel0 = new FoodRowModel ( ) ; ListTableBridge listTableBridge0 = new ListTableBridge ( ( NotifyingList ) otherNotifyingListAdaptor0 , ( RowModel ) foodRowModel0 ) ; ListEvent . EventType listEvent_EventType0 = ListEvent . EventType . Delete ; ListEvent listEvent0 = new ListEvent ( listEvent_EventType0 , ( - 642 ) , ( Object ) "ShortDescription" ) ; listTableBridge0 . listEvent ( listEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void listEvent ( ListEvent event ) ; }
void test6 ( ) throws Throwable { NotifyingListAdaptor < String > notifyingListAdaptor0 = new NotifyingListAdaptor < String > ( ( List < String > ) null ) ; EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; ListTableBridge listTableBridge0 = new ListTableBridge ( ( NotifyingList ) notifyingListAdaptor0 , ( RowModel ) entryRowModel0 ) ; ListEvent . EventType listEvent_EventType0 = ListEvent . EventType . AllChanged ; ListEvent listEvent0 = new ListEvent ( listEvent_EventType0 , 0 , ( Object ) "javax . swing . Box [ , 0 , 0 , 0x0 , invalid , layout = javax . swing . BoxLayout , alignmentX = 0 . 0 , alignmentY = 0 . 0 , border = , flags = 0 , maximumSize = , minimumSize = , preferredSize = ] " ) ; listTableBridge0 . listEvent ( listEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test7 ( ) throws Throwable { NotifyingListAdaptor < String > notifyingListAdaptor0 = new NotifyingListAdaptor < String > ( ) ; EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; ListTableBridge listTableBridge0 = new ListTableBridge ( ( NotifyingList ) notifyingListAdaptor0 , ( RowModel ) entryRowModel0 ) ; boolean boolean0 = notifyingListAdaptor0 . add ( " & u * TM4UPi13 ? / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void add ( Object element ) { if ( myList . contains ( element ) ) return ; myList . add ( element ) ; int index = myList . indexOf ( element ) ; ListChannelEvent event = new ListChannelEvent ( ListChannelEvent . EVENT_ADD , this , index ) ; getHelper ( ) . fire ( event ) ; }
void test9 ( ) throws Throwable { OtherNotifyingListAdaptor < ListTableBridge > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < ListTableBridge > ( ) ; FoodRowModel foodRowModel0 = new FoodRowModel ( ) ; ListTableBridge listTableBridge0 = new ListTableBridge ( ( NotifyingList ) otherNotifyingListAdaptor0 , ( RowModel ) foodRowModel0 ) ; ListEvent . EventType listEvent_EventType0 = ListEvent . EventType . Update ; ListEvent listEvent0 = new ListEvent ( listEvent_EventType0 ) ; listTableBridge0 . listEvent ( listEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return myList . size ( ) ; }
void test0 ( ) throws Throwable { RowTableTransferHandler rowTableTransferHandler0 = new RowTableTransferHandler ( ) ; JTable jTable0 = new JTable ( ) ; StringSelection stringSelection0 = new StringSelection ( ( String ) null ) ; boolean boolean0 = rowTableTransferHandler0 . importData ( ( JComponent ) jTable0 , ( Transferable ) stringSelection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean importData ( TransferSupport support ) { / / TODO Auto - generated method stub return super . importData ( support ) ; }
void test3 ( ) throws Throwable { RowTableTransferHandler rowTableTransferHandler0 = new RowTableTransferHandler ( ) ; JTextPane jTextPane0 = new JTextPane ( ) ; JToolTip jToolTip0 = jTextPane0 . createToolTip ( ) ; int int0 = rowTableTransferHandler0 . getSourceActions ( ( JComponent ) jToolTip0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSourceActions ( JComponent c ) { / / TODO Auto - generated method stub return super . getSourceActions ( c ) ; }
void test4 ( ) throws Throwable { RowTableTransferHandler rowTableTransferHandler0 = new RowTableTransferHandler ( ) ; Object [ ] [ ] objectArray0 = new Object [ 4 ] [ 3 ] ; Object [ ] objectArray1 = new Object [ 1 ] ; objectArray1 [ 0 ] = ( Object ) rowTableTransferHandler0 ; objectArray0 [ 0 ] = objectArray1 ; JTable jTable0 = new JTable ( objectArray0 , objectArray0 [ 0 ] ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jTable0 , 1 , ( long ) 1 , 1758 , ( - 1211 ) , ( - 1211 ) , ( - 1211 ) , true , ( - 1211 ) , ( - 572 ) , ( - 3 ) ) ; rowTableTransferHandler0 . exportAsDrag ( ( JComponent ) jTable0 , ( InputEvent ) mouseWheelEvent0 , ( - 572 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void exportAsDrag ( JComponent comp , InputEvent e , int action ) { / / TODO Auto - generated method stub super . exportAsDrag ( comp , e , action ) ; }
void test5 ( ) throws Throwable { RowTableTransferHandler rowTableTransferHandler0 = new RowTableTransferHandler ( ) ; JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem ( "HHmm" ) ; StringSelection stringSelection0 = new StringSelection ( "HHmm" ) ; boolean boolean0 = rowTableTransferHandler0 . importData ( ( JComponent ) jCheckBoxMenuItem0 , ( Transferable ) stringSelection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean importData ( TransferSupport support ) { / / TODO Auto - generated method stub return super . importData ( support ) ; }
void test6 ( ) throws Throwable { RowTableTransferHandler rowTableTransferHandler0 = new RowTableTransferHandler ( ) ; FoodRowModel foodRowModel0 = new FoodRowModel ( ) ; ApplicationDataListRowModel applicationDataListRowModel0 = new ApplicationDataListRowModel ( ( ApplicationDataList ) null , ( RowModel ) foodRowModel0 ) ; Object [ ] [ ] objectArray0 = new Object [ 4 ] [ 7 ] ; Object [ ] objectArray1 = new Object [ 5 ] ; objectArray1 [ 0 ] = ( Object ) rowTableTransferHandler0 ; objectArray1 [ 1 ] = ( Object ) applicationDataListRowModel0 ; objectArray1 [ 2 ] = ( Object ) rowTableTransferHandler0 ; objectArray1 [ 3 ] = ( Object ) foodRowModel0 ; objectArray1 [ 4 ] = ( Object ) 291 ; JTable jTable0 = new JTable ( objectArray0 , objectArray1 ) ; JTable jTable1 = new JTable ( ( TableModel ) applicationDataListRowModel0 ) ; RowTableTransferable rowTableTransferable0 = new RowTableTransferable ( jTable1 ) ; boolean boolean0 = rowTableTransferHandler0 . sameTable ( jTable0 , rowTableTransferable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sameTable ( JTable table , RowTableTransferable trans ) { return table . getModel ( ) = = trans . getSourceTableModel ( ) ; }
void test0 ( ) throws Throwable { int [ ] intArray0 = new int [ 6 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; TableTransferable tableTransferable0 = new TableTransferable ( intArray0 , ( TableModel ) defaultTableModel0 ) ; DataFlavor [ ] dataFlavorArray0 = tableTransferable0 . getTransferDataFlavors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataFlavor [ ] getTransferDataFlavors ( ) { return JVM_OBJECT_FLAVORS ; }
void test1 ( ) throws Throwable { int [ ] intArray0 = new int [ 6 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; TableTransferable tableTransferable0 = new TableTransferable ( intArray0 , ( TableModel ) defaultTableModel0 ) ; TableTransferData tableTransferData0 = tableTransferable0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] getData ( ) { return this . data ; }
void test2 ( ) throws Throwable { int [ ] intArray0 = new int [ 6 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; TableTransferable tableTransferable0 = new TableTransferable ( intArray0 , ( TableModel ) defaultTableModel0 ) ; DataFlavor dataFlavor0 = TableTransferable . getFlavor ( ) ; TableTransferData tableTransferData0 = ( TableTransferData ) tableTransferable0 . getTransferData ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getTransferData ( Transferable transferable ) throws UnsupportedFlavorException , IOException { return transferable . getTransferData ( LocalVMTransferable . JVM_OBJECT_FLAVOR ) ; }
void test4 ( ) throws Throwable { int [ ] intArray0 = new int [ 6 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; TableTransferable tableTransferable0 = new TableTransferable ( intArray0 , ( TableModel ) defaultTableModel0 ) ; DataFlavor dataFlavor0 = DataFlavor . imageFlavor ; boolean boolean0 = tableTransferable0 . isDataFlavorSupported ( dataFlavor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { return flavor . isMimeTypeEqual ( JVM_OBJECT_FLAVOR ) ; }
void test5 ( ) throws Throwable { int [ ] intArray0 = new int [ 6 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; TableTransferable tableTransferable0 = new TableTransferable ( intArray0 , ( TableModel ) defaultTableModel0 ) ; DataFlavor dataFlavor0 = TableTransferable . getFlavor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { return flavor . isMimeTypeEqual ( JVM_OBJECT_FLAVOR ) ; }
void test0 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; ApplicationDataListRowModel applicationDataListRowModel0 = new ApplicationDataListRowModel ( ( ApplicationDataList ) null , ( RowModel ) entryRowModel0 ) ; DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel ( ) ; JTable jTable0 = new JTable ( ( TableModel ) applicationDataListRowModel0 , ( TableColumnModel ) defaultTableColumnModel0 ) ; RowTableTransferable rowTableTransferable0 = new RowTableTransferable ( jTable0 ) ; Object [ ] objectArray0 = rowTableTransferable0 . getData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object [ ] getData ( ) { return this . data ; }
void test1 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; ApplicationDataListRowModel applicationDataListRowModel0 = new ApplicationDataListRowModel ( ( ApplicationDataList ) null , ( RowModel ) entryRowModel0 ) ; DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel ( ) ; JTable jTable0 = new JTable ( ( TableModel ) applicationDataListRowModel0 , ( TableColumnModel ) defaultTableColumnModel0 ) ; RowTableTransferable rowTableTransferable0 = new RowTableTransferable ( jTable0 ) ; int [ ] intArray0 = rowTableTransferable0 . getSourceRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getSourceRows ( ) { return myRows ; }
void test2 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; ApplicationDataListRowModel applicationDataListRowModel0 = new ApplicationDataListRowModel ( ( ApplicationDataList ) null , ( RowModel ) entryRowModel0 ) ; DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel ( ) ; JTable jTable0 = new JTable ( ( TableModel ) applicationDataListRowModel0 , ( TableColumnModel ) defaultTableColumnModel0 ) ; RowTableTransferable rowTableTransferable0 = new RowTableTransferable ( jTable0 ) ; RowTableTransferable rowTableTransferable1 = ( RowTableTransferable ) rowTableTransferable0 . getTransferData ( ( DataFlavor ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getTransferData ( Transferable transferable ) throws UnsupportedFlavorException , IOException { return transferable . getTransferData ( LocalVMTransferable . JVM_OBJECT_FLAVOR ) ; }
void test3 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; ApplicationDataListRowModel applicationDataListRowModel0 = new ApplicationDataListRowModel ( ( ApplicationDataList ) null , ( RowModel ) entryRowModel0 ) ; DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel ( ) ; JTable jTable0 = new JTable ( ( TableModel ) applicationDataListRowModel0 , ( TableColumnModel ) defaultTableColumnModel0 ) ; RowTableTransferable rowTableTransferable0 = new RowTableTransferable ( jTable0 ) ; boolean boolean0 = rowTableTransferable0 . isDataFlavorSupported ( ( DataFlavor ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDataFlavorSupported ( DataFlavor flavor ) { return flavor . isMimeTypeEqual ( JVM_OBJECT_FLAVOR ) ; }
void test4 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; ApplicationDataListRowModel applicationDataListRowModel0 = new ApplicationDataListRowModel ( ( ApplicationDataList ) null , ( RowModel ) entryRowModel0 ) ; DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel ( ) ; JTable jTable0 = new JTable ( ( TableModel ) applicationDataListRowModel0 , ( TableColumnModel ) defaultTableColumnModel0 ) ; RowTableTransferable rowTableTransferable0 = new RowTableTransferable ( jTable0 ) ; int [ ] intArray0 = rowTableTransferable0 . getRows ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int [ ] getRows ( ) { return myRows ; }
void test5 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; ApplicationDataListRowModel applicationDataListRowModel0 = new ApplicationDataListRowModel ( ( ApplicationDataList ) null , ( RowModel ) entryRowModel0 ) ; DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel ( ) ; JTable jTable0 = new JTable ( ( TableModel ) applicationDataListRowModel0 , ( TableColumnModel ) defaultTableColumnModel0 ) ; RowTableTransferable rowTableTransferable0 = new RowTableTransferable ( jTable0 ) ; ApplicationDataListRowModel applicationDataListRowModel1 = ( ApplicationDataListRowModel ) rowTableTransferable0 . getSourceTableModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleRowModelTableModel getSourceTableModel ( ) { return myModel ; }
void test6 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; ApplicationDataListRowModel applicationDataListRowModel0 = new ApplicationDataListRowModel ( ( ApplicationDataList ) null , ( RowModel ) entryRowModel0 ) ; DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel ( ) ; JTable jTable0 = new JTable ( ( TableModel ) applicationDataListRowModel0 , ( TableColumnModel ) defaultTableColumnModel0 ) ; RowTableTransferable rowTableTransferable0 = new RowTableTransferable ( jTable0 ) ; JTable jTable1 = rowTableTransferable0 . getTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWidth ( ) { return myWidth ; }
void test7 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; ApplicationDataListRowModel applicationDataListRowModel0 = new ApplicationDataListRowModel ( ( ApplicationDataList ) null , ( RowModel ) entryRowModel0 ) ; DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel ( ) ; JTable jTable0 = new JTable ( ( TableModel ) applicationDataListRowModel0 , ( TableColumnModel ) defaultTableColumnModel0 ) ; RowTableTransferable rowTableTransferable0 = new RowTableTransferable ( jTable0 ) ; DataFlavor [ ] dataFlavorArray0 = rowTableTransferable0 . getTransferDataFlavors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DataFlavor [ ] getTransferDataFlavors ( ) { return JVM_OBJECT_FLAVORS ; }
void test0 ( ) throws Throwable { int [ ] intArray0 = new int [ 3 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ( Vector ) null , 317 ) ; TableTransferData tableTransferData0 = new TableTransferData ( intArray0 , ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TableTransferData ( int [ ] theSelected , TableModel theModel ) { selectedRows = theSelected ; model = theModel ; }
void test0 ( ) throws Throwable { PropertyRowModel propertyRowModel0 = new PropertyRowModel ( ) ; ApplicationDataListRowModel applicationDataListRowModel0 = new ApplicationDataListRowModel ( ( ApplicationDataList ) null , ( RowModel ) propertyRowModel0 ) ; JTable jTable0 = new JTable ( ( TableModel ) applicationDataListRowModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test5 ( ) throws Throwable { FrequentRowModel frequentRowModel0 = new FrequentRowModel ( ) ; ApplicationDataListRowModel applicationDataListRowModel0 = new ApplicationDataListRowModel ( ( ApplicationDataList ) null , ( RowModel ) frequentRowModel0 ) ; FrequentRowModel frequentRowModel1 = ( FrequentRowModel ) applicationDataListRowModel0 . getRowModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RowModel getRowModel ( ) { return myRowModel ; }
void test7 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; ApplicationDataListRowModel applicationDataListRowModel0 = new ApplicationDataListRowModel ( ( ApplicationDataList ) null , ( RowModel ) entryRowModel0 ) ; applicationDataListRowModel0 . initializeRowModel ( ( RowModel ) entryRowModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test0 ( ) throws Throwable { RowModelTableModelEvent . EventType rowModelTableModelEvent_EventType0 = RowModelTableModelEvent . EventType . allChanged ; RowModelTableModelEvent rowModelTableModelEvent0 = new RowModelTableModelEvent ( rowModelTableModelEvent_EventType0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RowModelTableModelEvent ( EventType etype , int row ) { myEventType = etype ; myRowIndex = row ; }
void test1 ( ) throws Throwable { FoodRowModel foodRowModel0 = new FoodRowModel ( ) ; OtherNotifyingListAdaptor < Integer > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Integer > ( ) ; RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor ( ( RowModel ) foodRowModel0 , ( NotifyingList ) otherNotifyingListAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { FoodRowModel foodRowModel0 = new FoodRowModel ( ) ; NotifyingListAdaptor < String > notifyingListAdaptor0 = new NotifyingListAdaptor < String > ( ) ; RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor ( ( RowModel ) foodRowModel0 , ( NotifyingList ) notifyingListAdaptor0 ) ; boolean boolean0 = rowModelTableModelAdaptor0 . isCellEditable ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCellEditable ( int rowIndex , int columnIndex ) { return false ; }
void test6 ( ) throws Throwable { FoodRowModel foodRowModel0 = new FoodRowModel ( ) ; NotifyingListAdaptor < String > notifyingListAdaptor0 = new NotifyingListAdaptor < String > ( ) ; RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor ( ( RowModel ) foodRowModel0 , ( NotifyingList ) notifyingListAdaptor0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int column ) { return COLUMN_NAMES [ column ] ; }
void test10 ( ) throws Throwable { EntryRowModel entryRowModel0 = new EntryRowModel ( ) ; LinkedList < Object > linkedList0 = new LinkedList < Object > ( ) ; NotifyingListAdaptor < Object > notifyingListAdaptor0 = new NotifyingListAdaptor < Object > ( ( List < Object > ) linkedList0 ) ; RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor ( ( RowModel ) entryRowModel0 , ( NotifyingList ) notifyingListAdaptor0 ) ; rowModelTableModelAdaptor0 . setRowModel ( ( RowModel ) entryRowModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return COLUMN_NAMES . length ; }
void test11 ( ) throws Throwable { RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor ( ) ; RowModel rowModel0 = rowModelTableModelAdaptor0 . getRowModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" RowModel getRowModel ( ) { return myRowModel ; }
void test14 ( ) throws Throwable { FoodRowModel foodRowModel0 = new FoodRowModel ( ) ; OtherNotifyingListAdaptor < Integer > otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor < Integer > ( ) ; RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor ( ( RowModel ) foodRowModel0 , ( NotifyingList ) otherNotifyingListAdaptor0 ) ; otherNotifyingListAdaptor0 . clear ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( ) { return myData . isEmpty ( ) ; }
void test0 ( ) throws Throwable { RootPaneJApplet rootPaneJApplet0 = new RootPaneJApplet ( ( JApplet ) null ) ; boolean boolean0 = rootPaneJApplet0 . supportsWindowListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsWindowListener ( ) { return true ; }
void test9 ( ) throws Throwable { RootPaneJApplet rootPaneJApplet0 = new RootPaneJApplet ( ( JApplet ) null ) ; boolean boolean0 = rootPaneJApplet0 . supportsAlwaysOnTop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsAlwaysOnTop ( ) { return true ; }
void test11 ( ) throws Throwable { RootPaneJApplet rootPaneJApplet0 = new RootPaneJApplet ( ( JApplet ) null ) ; boolean boolean0 = rootPaneJApplet0 . supportsModal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsModal ( ) { return true ; }
void test12 ( ) throws Throwable { RootPaneJApplet rootPaneJApplet0 = new RootPaneJApplet ( ( JApplet ) null ) ; boolean boolean0 = rootPaneJApplet0 . supportsMenuBar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsMenuBar ( ) { return false ; }
void test13 ( ) throws Throwable { RootPaneJApplet rootPaneJApplet0 = new RootPaneJApplet ( ( JApplet ) null ) ; JApplet jApplet0 = rootPaneJApplet0 . getJApplet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JApplet getJApplet ( ) { return ( JApplet ) myComponent ; }
void test14 ( ) throws Throwable { RootPaneJApplet rootPaneJApplet0 = new RootPaneJApplet ( ( JApplet ) null ) ; boolean boolean0 = rootPaneJApplet0 . supportsCloseAction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsCloseAction ( ) { return true ; }
void test20 ( ) throws Throwable { RootPaneJApplet rootPaneJApplet0 = new RootPaneJApplet ( ( JApplet ) null ) ; boolean boolean0 = rootPaneJApplet0 . supportsTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsTitle ( ) { return true ; }
void test2 ( ) throws Throwable { RootPaneJFrame rootPaneJFrame0 = new RootPaneJFrame ( ( JFrame ) null ) ; boolean boolean0 = rootPaneJFrame0 . supportsMenuBar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsMenuBar ( ) { return false ; }
void test3 ( ) throws Throwable { RootPaneJFrame rootPaneJFrame0 = new RootPaneJFrame ( ( JFrame ) null ) ; boolean boolean0 = rootPaneJFrame0 . supportsAlwaysOnTop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsAlwaysOnTop ( ) { return true ; }
void test7 ( ) throws Throwable { RootPaneJFrame rootPaneJFrame0 = new RootPaneJFrame ( ( JFrame ) null ) ; boolean boolean0 = rootPaneJFrame0 . supportsWindowListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsWindowListener ( ) { return true ; }
void test9 ( ) throws Throwable { RootPaneJFrame rootPaneJFrame0 = new RootPaneJFrame ( ( JFrame ) null ) ; Window window0 = rootPaneJFrame0 . getWindow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Window getWindow ( ) { Container container = getParent ( ) ; while ( null ! = container & & container ! = container . getParent ( ) & & null ! = container . getParent ( ) ) { container = container . getParent ( ) ; } Window window = ( Window ) container ; return window ; }
void test11 ( ) throws Throwable { RootPaneJFrame rootPaneJFrame0 = new RootPaneJFrame ( ( JFrame ) null ) ; boolean boolean0 = rootPaneJFrame0 . supportsTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsTitle ( ) { return true ; }
void test13 ( ) throws Throwable { RootPaneJFrame rootPaneJFrame0 = new RootPaneJFrame ( ( JFrame ) null ) ; boolean boolean0 = rootPaneJFrame0 . supportsCloseAction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsCloseAction ( ) { return true ; }
void test14 ( ) throws Throwable { RootPaneJFrame rootPaneJFrame0 = new RootPaneJFrame ( ( JFrame ) null ) ; boolean boolean0 = rootPaneJFrame0 . supportsModal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsModal ( ) { return true ; }
void test6 ( ) throws Throwable { RootPaneJDialog rootPaneJDialog0 = new RootPaneJDialog ( ( JDialog ) null ) ; boolean boolean0 = rootPaneJDialog0 . supportsCloseAction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsCloseAction ( ) { return true ; }
void test7 ( ) throws Throwable { RootPaneJDialog rootPaneJDialog0 = new RootPaneJDialog ( ( JDialog ) null ) ; Window window0 = rootPaneJDialog0 . getWindow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Window getWindow ( ) { Container container = getParent ( ) ; while ( null ! = container & & container ! = container . getParent ( ) & & null ! = container . getParent ( ) ) { container = container . getParent ( ) ; } Window window = ( Window ) container ; return window ; }
void test8 ( ) throws Throwable { RootPaneJDialog rootPaneJDialog0 = new RootPaneJDialog ( ( JDialog ) null ) ; boolean boolean0 = rootPaneJDialog0 . supportsAlwaysOnTop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsAlwaysOnTop ( ) { return true ; }
void test13 ( ) throws Throwable { RootPaneJDialog rootPaneJDialog0 = new RootPaneJDialog ( ( JDialog ) null ) ; boolean boolean0 = rootPaneJDialog0 . supportsMenuBar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsMenuBar ( ) { return false ; }
void test17 ( ) throws Throwable { RootPaneJDialog rootPaneJDialog0 = new RootPaneJDialog ( ( JDialog ) null ) ; boolean boolean0 = rootPaneJDialog0 . supportsWindowListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsWindowListener ( ) { return true ; }
void test18 ( ) throws Throwable { RootPaneJDialog rootPaneJDialog0 = new RootPaneJDialog ( ( JDialog ) null ) ; boolean boolean0 = rootPaneJDialog0 . supportsTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsTitle ( ) { return true ; }
void test19 ( ) throws Throwable { RootPaneJDialog rootPaneJDialog0 = new RootPaneJDialog ( ( JDialog ) null ) ; boolean boolean0 = rootPaneJDialog0 . supportsModal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsModal ( ) { return true ; }
void test0 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( "6 ] Z~g_7 | = } xD" , true , true ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; boolean boolean0 = rootPaneJInternalFrame0 . supportsSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsSize ( ) { return true ; }
void test2 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( "@Bi2 [ x , Z\"1dH@C'" , true , false , false , false ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; boolean boolean0 = rootPaneJInternalFrame0 . supportsAlwaysOnTop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsAlwaysOnTop ( ) { return true ; }
void test3 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; boolean boolean0 = rootPaneJInternalFrame0 . supportsModal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsModal ( ) { return true ; }
void test4 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; String string0 = rootPaneJInternalFrame0 . getTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test5 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; boolean boolean0 = rootPaneJInternalFrame0 . supportsCloseAction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsCloseAction ( ) { return true ; }
void test6 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( "" , true , false , true , false ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; rootPaneJInternalFrame0 . setMenuBar ( ( JMenuBar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsLocation ( ) { return true ; }
void test7 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; boolean boolean0 = rootPaneJInternalFrame0 . supportsWindowListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsWindowListener ( ) { return true ; }
void test8 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; JPanel jPanel0 = ( JPanel ) rootPaneJInternalFrame0 . getContentPane ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test9 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( "" , true , false , true , false ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; JMenuBar jMenuBar0 = rootPaneJInternalFrame0 . getMenuBar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JMenuBar getMenuBar ( ) { throw new NotImplementedException ( ) ; }
void test12 ( ) throws Throwable { RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( ( JInternalFrame ) null ) ; boolean boolean0 = rootPaneJInternalFrame0 . supportsTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsTitle ( ) { return true ; }
void test13 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( "" , true , false , true , false ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; Integer integer0 = JLayeredPane . POPUP_LAYER ; rootPaneJInternalFrame0 . setCloseAction ( integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test15 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( " ? rz'8kI ! 0" ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; rootPaneJInternalFrame0 . setTitle ( " ? rz'8kI ! 0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getVisible ( ) { return isVisible ( ) ; }
void test18 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( "" , true , false , true , false ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; Integer integer0 = rootPaneJInternalFrame0 . getCloseAction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Integer getCloseAction ( ) { return new Integer ( getDialog ( ) . getDefaultCloseOperation ( ) ) ; }
void test19 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( "" , true , false , true , false ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; boolean boolean0 = rootPaneJInternalFrame0 . supportsLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsLocation ( ) { return true ; }
void test20 ( ) throws Throwable { RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( ( JInternalFrame ) null ) ; boolean boolean0 = rootPaneJInternalFrame0 . supportsMenuBar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsMenuBar ( ) { return false ; }
void test0 ( ) throws Throwable { RootPaneJWindow rootPaneJWindow0 = new RootPaneJWindow ( ( JWindow ) null ) ; Window window0 = rootPaneJWindow0 . getWindow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Window getWindow ( ) { Container container = getParent ( ) ; while ( null ! = container & & container ! = container . getParent ( ) & & null ! = container . getParent ( ) ) { container = container . getParent ( ) ; } Window window = ( Window ) container ; return window ; }
void test1 ( ) throws Throwable { RootPaneJWindow rootPaneJWindow0 = new RootPaneJWindow ( ( JWindow ) null ) ; boolean boolean0 = rootPaneJWindow0 . supportsTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsTitle ( ) { return true ; }
void test4 ( ) throws Throwable { RootPaneJWindow rootPaneJWindow0 = new RootPaneJWindow ( ( JWindow ) null ) ; boolean boolean0 = rootPaneJWindow0 . supportsCloseAction ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsCloseAction ( ) { return true ; }
void test6 ( ) throws Throwable { RootPaneJWindow rootPaneJWindow0 = new RootPaneJWindow ( ( JWindow ) null ) ; boolean boolean0 = rootPaneJWindow0 . supportsWindowListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsWindowListener ( ) { return true ; }
void test10 ( ) throws Throwable { RootPaneJWindow rootPaneJWindow0 = new RootPaneJWindow ( ( JWindow ) null ) ; boolean boolean0 = rootPaneJWindow0 . supportsMenuBar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsMenuBar ( ) { return false ; }
void test13 ( ) throws Throwable { RootPaneJWindow rootPaneJWindow0 = new RootPaneJWindow ( ( JWindow ) null ) ; boolean boolean0 = rootPaneJWindow0 . supportsModal ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsModal ( ) { return true ; }
void test16 ( ) throws Throwable { RootPaneJWindow rootPaneJWindow0 = new RootPaneJWindow ( ( JWindow ) null ) ; boolean boolean0 = rootPaneJWindow0 . supportsAlwaysOnTop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsAlwaysOnTop ( ) { return true ; }
void test0 ( ) throws Throwable { DefaultRootPaneFactory defaultRootPaneFactory0 = new DefaultRootPaneFactory ( ) ; JInternalFrame jInternalFrame0 = new JInternalFrame ( "4" , false , false , false ) ; boolean boolean0 = defaultRootPaneFactory0 . objectSupported ( ( Container ) jInternalFrame0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean objectSupported ( Container container ) ; }
void test1 ( ) throws Throwable { DefaultRootPaneFactory defaultRootPaneFactory0 = new DefaultRootPaneFactory ( ) ; RootPaneJApplet rootPaneJApplet0 = ( RootPaneJApplet ) defaultRootPaneFactory0 . buildRootPane ( ( Container ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LTSRootPane buildRootPane ( Container container ) ; boolean objectSupported ( Container container ) ; }
void test2 ( ) throws Throwable { DefaultRootPaneFactory defaultRootPaneFactory0 = new DefaultRootPaneFactory ( ) ; JInternalFrame jInternalFrame0 = new JInternalFrame ( "4" , false , false , false ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = ( RootPaneJInternalFrame ) defaultRootPaneFactory0 . buildRootPane ( ( Container ) jInternalFrame0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsSize ( ) { return true ; }
void test0 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( "child , " , true ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; JInternalFrame jInternalFrame1 = ( JInternalFrame ) rootPaneJInternalFrame0 . getComponent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test1 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( "child , " , true ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; boolean boolean0 = rootPaneJInternalFrame0 . getVisible ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getVisible ( ) { return isVisible ( ) ; }
void test2 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; Window window0 = rootPaneJInternalFrame0 . getWindow ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Window getWindow ( ) { Container container = getParent ( ) ; while ( null ! = container & & container ! = container . getParent ( ) & & null ! = container . getParent ( ) ) { container = container . getParent ( ) ; } Window window = ( Window ) container ; return window ; }
void test3 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( "child , " , true ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; rootPaneJInternalFrame0 . setVisible ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test0 ( ) throws Throwable { String [ ] [ ] stringArray0 = new String [ 1 ] [ 5 ] ; DefaultComboBoxModel defaultComboBoxModel0 = ( DefaultComboBoxModel ) ComboBoxUtils . createModel ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return mySize ; }
void test1 ( ) throws Throwable { Vector < Integer > vector0 = new Vector < Integer > ( 127 , 127 ) ; JComboBox jComboBox0 = new JComboBox ( vector0 ) ; boolean boolean0 = ComboBoxUtils . setSelectedCaseless ( ( String ) null , jComboBox0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean setSelectedCaseless ( String s , JComboBox cbox ) { ComboBoxModel model = cbox . getModel ( ) ; int count = model . getSize ( ) ; for ( int i = 0 ; i < count ; i + + ) { Object o = model . getElementAt ( i ) ; if ( s . equalsIgnoreCase ( o . toString ( ) ) ) { model . setSelectedItem ( o ) ; return true ; } } return false ; }
void test2 ( ) throws Throwable { ComboBoxUtils comboBoxUtils0 = new ComboBoxUtils ( ) ; Object [ ] objectArray0 = new Object [ 7 ] ; objectArray0 [ 0 ] = ( Object ) comboBoxUtils0 ; objectArray0 [ 1 ] = objectArray0 [ 0 ] ; objectArray0 [ 2 ] = ( Object ) comboBoxUtils0 ; objectArray0 [ 3 ] = ( Object ) "createAction" ; JComboBox jComboBox0 = new JComboBox ( objectArray0 ) ; boolean boolean0 = ComboBoxUtils . setSelectedCaseless ( "createAction" , jComboBox0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSelectedIndex ( ) { return myList . getSelectedIndex ( ) ; }
void test0 ( ) throws Throwable { SimpleComboBoxModel simpleComboBoxModel0 = new SimpleComboBoxModel ( ) ; SimpleComboBox simpleComboBox0 = new SimpleComboBox ( simpleComboBoxModel0 ) ; simpleComboBox0 . setSelectedValue ( ( Object ) "model" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test2 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 3 ] [ 6 ] ; SimpleComboBoxModel simpleComboBoxModel0 = new SimpleComboBoxModel ( objectArray0 ) ; SimpleComboBox simpleComboBox0 = new SimpleComboBox ( simpleComboBoxModel0 ) ; int int0 = simpleComboBox0 . getSelectedInt ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSelectedInt ( ) { Object o = getSelectedValue ( ) ; if ( null = = o ) return - 1 ; else if ( o instanceof Integer ) { Integer ival = ( Integer ) o ; return ival . intValue ( ) ; } else if ( o instanceof Long ) { Long lval = ( Long ) o ; return lval . intValue ( ) ; } else if ( o instanceof Short ) { Short sval = ( Short ) o ; return sval . intValue ( ) ; } else if ( o instanceof Byte ) { Byte bval = ( Byte ) o ; return bval . intValue ( ) ; } else { throw new IllegalArgumentException ( ) ; } }
void test5 ( ) throws Throwable { SimpleComboBoxModel simpleComboBoxModel0 = new SimpleComboBoxModel ( ) ; SimpleComboBox simpleComboBox0 = new SimpleComboBox ( simpleComboBoxModel0 ) ; long long0 = simpleComboBox0 . getSelectedLong ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSelectedLong ( ) { Object o = getSelectedValue ( ) ; if ( null = = o ) return - 1 ; else if ( o instanceof Integer ) { Integer ival = ( Integer ) o ; return ival . longValue ( ) ; } else if ( o instanceof Long ) { Long lval = ( Long ) o ; return lval . longValue ( ) ; } else if ( o instanceof Short ) { Short sval = ( Short ) o ; return sval . longValue ( ) ; } else if ( o instanceof Byte ) { Byte bval = ( Byte ) o ; return bval . longValue ( ) ; } else { throw new IllegalArgumentException ( ) ; } }
void test0 ( ) throws Throwable { SimpleComboBoxModel simpleComboBoxModel0 = new SimpleComboBoxModel ( ) ; int int0 = simpleComboBoxModel0 . getSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return mySize ; }
void test3 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 5 ] [ 9 ] ; SimpleComboBoxModel simpleComboBoxModel0 = new SimpleComboBoxModel ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return mySize ; }
void test4 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 5 ] [ 9 ] ; SimpleComboBoxModel simpleComboBoxModel0 = new SimpleComboBoxModel ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return mySize ; }
void test5 ( ) throws Throwable { SimpleComboBoxModel simpleComboBoxModel0 = new SimpleComboBoxModel ( ) ; Object object0 = simpleComboBoxModel0 . displayToValue ( ( Object ) "none" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object displayToValue ( Object key ) { return this . displayToValue . get ( key ) ; }
void test6 ( ) throws Throwable { SimpleComboBoxModel simpleComboBoxModel0 = new SimpleComboBoxModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return mySize ; }
void test7 ( ) throws Throwable { SimpleComboBoxModel simpleComboBoxModel0 = new SimpleComboBoxModel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSize ( ) { return mySize ; }
void test0 ( ) throws Throwable { GridBagConstraints gridBagConstraints0 = GridBagUtils . createFill ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GridBagConstraints createFill ( ) { Insets insets = new Insets ( 0 , 0 , 0 , 0 ) ; GridBagConstraints gbc = new GridBagConstraints ( 0 , 0 , 1 , 1 , 1 . 0 , 1 . 0 , GridBagConstraints . CENTER , GridBagConstraints . BOTH , insets , 0 , 0 ) ; return gbc ; }
void test1 ( ) throws Throwable { GridBagUtils gridBagUtils0 = new GridBagUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { int int0 = WindowUtils . labelWidth ( 1530 , " , was not recognized . " , ( Font ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int labelWidth ( String msg , Font font ) { JLabel label = new JLabel ( msg ) ; label . setFont ( font ) ; return label . getSize ( ) . width ; }
void test3 ( ) throws Throwable { WindowUtils windowUtils0 = new WindowUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test5 ( ) throws Throwable { Font font0 = new Font ( "" , 0 , 0 ) ; int int0 = WindowUtils . labelWidth ( "" , font0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int labelWidth ( String msg , Font font ) { JLabel label = new JLabel ( msg ) ; label . setFont ( font ) ; return label . getSize ( ) . width ; }
void test0 ( ) throws Throwable { BlockingThread . HideCallback blockingThread_HideCallback0 = new BlockingThread . HideCallback ( ( Object ) "mnemonic" ) ; JSlider jSlider0 = new JSlider ( 0 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jSlider0 , 0 , 209L , ( - 1250 ) , 0 , ( - 1 ) , 0 , false , ( - 1250 ) , ( - 1 ) , ( - 1392 ) ) ; blockingThread_HideCallback0 . componentHidden ( ( ComponentEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void componentHidden ( ComponentEvent e ) { windowClosingOrHidden ( e ) ; windowComponentEvent ( e ) ; }
void test8 ( ) throws Throwable { BlockingThread blockingThread0 = BlockingThread . getCurrentBlockingThread ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BlockingThread getCurrentBlockingThread ( ) { if ( null = = ourThreadToBlock ) ourThreadToBlock = new HashMap < Thread , BlockingThread > ( ) ; Thread thread = Thread . currentThread ( ) ; return ourThreadToBlock . get ( thread ) ; }
void test3 ( ) throws Throwable { JCheckBox jCheckBox0 = new JCheckBox ( "" ) ; BlockThread blockThread0 = new BlockThread ( ( Component ) jCheckBox0 ) ; JInternalFrame jInternalFrame0 = new JInternalFrame ( "" , false , true , false ) ; ContainerEvent containerEvent0 = new ContainerEvent ( ( Component ) jInternalFrame0 , ( - 1 ) , ( Component ) jInternalFrame0 ) ; blockThread0 . componentHidden ( ( ComponentEvent ) containerEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void componentHidden ( ComponentEvent e ) { windowClosingOrHidden ( e ) ; windowComponentEvent ( e ) ; }
void test4 ( ) throws Throwable { JTextArea jTextArea0 = new JTextArea ( "Rl / P_i " , 649 , 649 ) ; BlockThread blockThread0 = new BlockThread ( ( Component ) jTextArea0 ) ; blockThread0 . display ( ( Component ) jTextArea0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void display ( Component component ) { setComponent ( component ) ; display ( ) ; }
void test1 ( ) throws Throwable { GapContent gapContent0 = new GapContent ( ) ; StyleContext styleContext0 = StyleContext . getDefaultStyleContext ( ) ; DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument ( ( AbstractDocument . Content ) gapContent0 , styleContext0 ) ; AttributeSet attributeSet0 = SimpleAttributeSet . EMPTY ; Font font0 = defaultStyledDocument0 . getFont ( attributeSet0 ) ; Map < ? , ? > map0 = font0 . getAttributes ( ) ; JMenuBar jMenuBar0 = new JMenuBar ( ) ; MenuListener menuListener0 = new MenuListener ( ( Object ) defaultStyledDocument0 , ( Map ) map0 , jMenuBar0 ) ; JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem ( "Monospaced" , true ) ; menuListener0 . registerWith ( ( JMenuItem ) jRadioButtonMenuItem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test2 ( ) throws Throwable { JPasswordField jPasswordField0 = new JPasswordField ( "MnemonicKey" ) ; FontUIResource fontUIResource0 = ( FontUIResource ) jPasswordField0 . getFont ( ) ; Map < ? , ? > map0 = fontUIResource0 . getAttributes ( ) ; JMenu jMenu0 = new JMenu ( ( Action ) null ) ; JPopupMenu jPopupMenu0 = jMenu0 . getPopupMenu ( ) ; MenuListener menuListener0 = new MenuListener ( ( Object ) "MnemonicKey" , ( Map ) map0 , jPopupMenu0 ) ; menuListener0 . registerWith ( ( JMenuItem ) jMenu0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test3 ( ) throws Throwable { GapContent gapContent0 = new GapContent ( ) ; StyleContext styleContext0 = StyleContext . getDefaultStyleContext ( ) ; DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument ( ( AbstractDocument . Content ) gapContent0 , styleContext0 ) ; AttributeSet attributeSet0 = SimpleAttributeSet . EMPTY ; Font font0 = defaultStyledDocument0 . getFont ( attributeSet0 ) ; Map < ? , ? > map0 = font0 . getAttributes ( ) ; JMenuBar jMenuBar0 = new JMenuBar ( ) ; MenuListener menuListener0 = new MenuListener ( ( Object ) defaultStyledDocument0 , ( Map ) map0 , jMenuBar0 ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) gapContent0 , 0 , "Monospaced" , 0 ) ; menuListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { try { action ( ) ; } catch ( Exception ex ) { Application . showException ( ex ) ; } }
void test0 ( ) throws Throwable { JComboBox jComboBox0 = new JComboBox ( ) ; PopupMouseListener popupMouseListener0 = new PopupMouseListener ( ( JPopupMenu ) null ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jComboBox0 , ( - 1424 ) , ( - 1917L ) , ( - 83 ) , 0 , ( - 1424 ) , 3 , 0 , ( - 83 ) , false , 3 , 1520 , 7 ) ; popupMouseListener0 . mousePressed ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JButton getButton ( ) { return myButton ; }
void test1 ( ) throws Throwable { Object object0 = Image . UndefinedProperty ; PrinterStateReasons printerStateReasons0 = new PrinterStateReasons ( ) ; LTSMenuListener lTSMenuListener0 = new LTSMenuListener ( object0 , ( Map ) printerStateReasons0 ) ; ActionEvent actionEvent0 = new ActionEvent ( object0 , 18 , "A" , ( long ) 18 , 18 ) ; lTSMenuListener0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent e ) { try { action ( ) ; } catch ( Exception ex ) { Application . showException ( ex ) ; } }
void test1 ( ) throws Throwable { NewMenuNode newMenuNode0 = new NewMenuNode ( ) ; String string0 = newMenuNode0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test2 ( ) throws Throwable { Action action0 = TransferHandler . getCutAction ( ) ; NewMenuNode newMenuNode0 = new NewMenuNode ( " / Edit" , ( ActionListener ) action0 ) ; newMenuNode0 . setCallback ( ( ActionListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return myName ; }
void test4 ( ) throws Throwable { NewMenuNode newMenuNode0 = new NewMenuNode ( ( Object ) " / " , " / " , ( ActionListener ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test6 ( ) throws Throwable { NewMenuNode newMenuNode0 = new NewMenuNode ( "The node , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test7 ( ) throws Throwable { NewMenuNode newMenuNode0 = new NewMenuNode ( ) ; ActionListener actionListener0 = newMenuNode0 . getCallback ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ActionListener getCallback ( ) { return callback ; }
void test0 ( ) throws Throwable { MenuNode menuNode0 = new MenuNode ( "" , 1 ) ; menuNode0 . addChild ( ( TreeNode ) menuNode0 ) ; MenuNode menuNode1 = menuNode0 . getChildNamed ( "Wo ( @" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPath ( ) { StringBuffer sb = new StringBuffer ( 128 ) ; basicGetPath ( sb ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { MenuNode menuNode0 = new MenuNode ( 1656 ) ; int int0 = menuNode0 . getNodeType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNodeType ( ) { return myNodeType ; }
void test2 ( ) throws Throwable { MenuNode menuNode0 = new MenuNode ( "" , 1 ) ; menuNode0 . setMethod ( ( Method ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNodeType ( ) { return myNodeType ; }
void test4 ( ) throws Throwable { MenuNode menuNode0 = new MenuNode ( " : / tS7hy > \" ( ec" , 1 ) ; String string0 = menuNode0 . getPath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNodeType ( ) { return myNodeType ; }
void test6 ( ) throws Throwable { MenuNode menuNode0 = new MenuNode ( "" , 1 ) ; menuNode0 . getMethod ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNodeType ( ) { return myNodeType ; }
void test7 ( ) throws Throwable { MenuNode menuNode0 = new MenuNode ( " < " , 0 ) ; List < Object > list0 = menuNode0 . getChildren ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPath ( ) { StringBuffer sb = new StringBuffer ( 128 ) ; basicGetPath ( sb ) ; return sb . toString ( ) ; }
void test8 ( ) throws Throwable { MenuNode menuNode0 = new MenuNode ( 1 ) ; menuNode0 . addChild ( ( TreeNode ) menuNode0 ) ; menuNode0 . getChildNamed ( "bgk~X9P ) GyLa * H" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNodeType ( ) { return myNodeType ; }
void test9 ( ) throws Throwable { MenuNode menuNode0 = new MenuNode ( "" , 1 ) ; MenuNode menuNode1 = new MenuNode ( "Wo ( @" , 1364 ) ; menuNode0 . addChild ( ( TreeNode ) menuNode1 ) ; MenuNode menuNode2 = menuNode0 . getChildNamed ( "Wo ( @" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNodeType ( ) { return myNodeType ; }
void test1 ( ) throws Throwable { DefaultEditorKit . InsertTabAction defaultEditorKit_InsertTabAction0 = new DefaultEditorKit . InsertTabAction ( ) ; JMenu jMenu0 = new JMenu ( ( Action ) defaultEditorKit_InsertTabAction0 ) ; JPopupMenu jPopupMenu0 = jMenu0 . getPopupMenu ( ) ; MenuWrapper menuWrapper0 = new MenuWrapper ( jPopupMenu0 ) ; menuWrapper0 . addMenuItem ( ( JMenuItem ) jMenu0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test2 ( ) throws Throwable { DefaultEditorKit . DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit . DefaultKeyTypedAction ( ) ; JMenu jMenu0 = new JMenu ( ( Action ) defaultEditorKit_DefaultKeyTypedAction0 ) ; MenuWrapper menuWrapper0 = new MenuWrapper ( jMenu0 ) ; menuWrapper0 . addSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addSeparator ( Object menuObject ) { if ( menuObject instanceof JMenu ) { JMenu menu = ( JMenu ) menuObject ; menu . addSeparator ( ) ; } else if ( menuObject instanceof JPopupMenu ) { JPopupMenu menu = ( JPopupMenu ) menuObject ; menu . addSeparator ( ) ; } else { String msg = "Unrecognized menu class : " + menuObject . getClass ( ) . getName ( ) ; throw new RuntimeException ( msg ) ; } }
void test3 ( ) throws Throwable { JMenu jMenu0 = new JMenu ( ( String ) null , true ) ; MenuWrapper menuWrapper0 = new MenuWrapper ( jMenu0 ) ; menuWrapper0 . addMenuItem ( ( JMenuItem ) jMenu0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addMenuItem ( Object menuObject , JMenuItem item ) { if ( menuObject instanceof JMenu ) { JMenu menu = ( JMenu ) menuObject ; menu . add ( item ) ; } else if ( menuObject instanceof JPopupMenu ) { JPopupMenu menu = ( JPopupMenu ) menuObject ; menu . add ( item ) ; } else { String msg = "Unrecognized menu class : " + menuObject . getClass ( ) . getName ( ) ; throw new RuntimeException ( msg ) ; } }
void test4 ( ) throws Throwable { DefaultEditorKit . InsertTabAction defaultEditorKit_InsertTabAction0 = new DefaultEditorKit . InsertTabAction ( ) ; JMenu jMenu0 = new JMenu ( ( Action ) defaultEditorKit_InsertTabAction0 ) ; JPopupMenu jPopupMenu0 = jMenu0 . getPopupMenu ( ) ; MenuWrapper menuWrapper0 = new MenuWrapper ( jPopupMenu0 ) ; menuWrapper0 . addSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test4 ( ) throws Throwable { DefaultMenuBuilder defaultMenuBuilder0 = new DefaultMenuBuilder ( ) ; JMenu jMenu0 = new JMenu ( "piBHPGwfJun" , false ) ; MenuWrapper menuWrapper0 = new MenuWrapper ( jMenu0 ) ; NewMenuNode newMenuNode0 = new NewMenuNode ( "piBHPGwfJun" ) ; defaultMenuBuilder0 . populateMenu ( menuWrapper0 , newMenuNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { MenuMapping menuMapping0 = new MenuMapping ( "" , ( Method ) null ) ; String string0 = menuMapping0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { TreeUtils treeUtils0 = new TreeUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "TWe < noe , " ; stringArray0 [ 1 ] = "TWe < noe , " ; DefaultMutableTreeNode defaultMutableTreeNode0 = TreeUtils . buildTree ( stringArray0 , "TWe < noe , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( Object node ) { return getTreeModel ( ) . isLeaf ( node ) ; }
void test2 ( ) throws Throwable { Vector < DefaultMutableTreeNode > vector0 = new Vector < DefaultMutableTreeNode > ( ) ; DefaultMutableTreeNode defaultMutableTreeNode0 = TreeUtils . buildTree ( ( List ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLeaf ( Object node ) { return getTreeModel ( ) . isLeaf ( node ) ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 2 ] ; stringArray0 [ 0 ] = "TWe < noe , " ; stringArray0 [ 1 ] = "TWe < noe , " ; DefaultMutableTreeNode defaultMutableTreeNode0 = TreeUtils . buildTree ( stringArray0 , "TWe < noe , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test5 ( ) throws Throwable { JTree jTree0 = new JTree ( ) ; int [ ] intArray0 = new int [ 5 ] ; jTree0 . addSelectionRows ( intArray0 ) ; DefaultMutableTreeNode defaultMutableTreeNode0 = ( DefaultMutableTreeNode ) TreeUtils . getSelectedNode ( jTree0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRoot ( ) { return null = = myEvent ; }
void test6 ( ) throws Throwable { JTree jTree0 = new JTree ( ) ; Object object0 = TreeUtils . getSelectedNode ( jTree0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DefaultMutableTreeNode getSelectedNode ( ) { TreePath path = getSelectionPath ( ) ; if ( null = = path ) return null ; return ( DefaultMutableTreeNode ) path . getLastPathComponent ( ) ; }
void test0 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 4 ] ; int [ ] intArray0 = new int [ 10 ] ; DeferredTreeModelEvent deferredTreeModelEvent0 = new DeferredTreeModelEvent ( ( - 1354 ) , ( Object ) "c . , * NhS ( } @4z\" ; < 1" , objectArray0 , intArray0 , objectArray0 ) ; int int0 = deferredTreeModelEvent0 . getEventType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getEventType ( ) { return myEventType ; }
void test1 ( ) throws Throwable { DelegatedTreeModel delegatedTreeModel0 = new DelegatedTreeModel ( ( ApplicationTree ) null ) ; DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode ( ) ; delegatedTreeModel0 . addToMap ( ( ApplicationNode ) null , defaultMutableTreeNode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getChildCount ( ) { return getChildren ( ) . size ( ) ; }
void test0 ( ) throws Throwable { JMenuBar jMenuBar0 = new JMenuBar ( ) ; InputKey inputKey0 = InputKey . Delete ; KeyStrokeAction . mapInputKey ( inputKey0 , ( KeyStrokeAction ) null , ( JComponent ) jMenuBar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test1 ( ) throws Throwable { JMenuBar jMenuBar0 = new JMenuBar ( ) ; InputKey inputKey0 = InputKey . Delete ; KeyStrokeAction . mapDefaultKey ( inputKey0 , ( KeyStrokeAction ) null , ( JComponent ) jMenuBar0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mapDefaultKey ( InputKey key , KeyStrokeAction action , JComponent comp ) { InputMap imap = comp . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) ; imap . put ( key . getKeyStroke ( ) , action ) ; ActionMap amap = comp . getActionMap ( ) ; amap . put ( key , action ) ; }
void test0 ( ) throws Throwable { InputKey inputKey0 = InputKey . Enter ; KeyStroke keyStroke0 = inputKey0 . getKeyStroke ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { InputKey inputKey0 = InputKey . DownArrow ; KeyStroke keyStroke0 = inputKey0 . getKeyStroke ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { InputKey inputKey0 = InputKey . UpArrow ; KeyStroke keyStroke0 = inputKey0 . getKeyStroke ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { InputKey inputKey0 = InputKey . RightArrow ; KeyStroke keyStroke0 = inputKey0 . getKeyStroke ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { InputKey inputKey0 = InputKey . LeftArrow ; KeyStroke keyStroke0 = inputKey0 . getKeyStroke ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test5 ( ) throws Throwable { InputKey inputKey0 = InputKey . Delete ; KeyStroke keyStroke0 = inputKey0 . getKeyStroke ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test6 ( ) throws Throwable { InputKey inputKey0 = InputKey . Insert ; KeyStroke keyStroke0 = inputKey0 . getKeyStroke ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { RootPaneContentPanel rootPaneContentPanel0 = new RootPaneContentPanel ( ) ; rootPaneContentPanel0 . evaluateResultCancel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test2 ( ) throws Throwable { RootPaneContentPanel rootPaneContentPanel0 = new RootPaneContentPanel ( ) ; rootPaneContentPanel0 . evaluateResult ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void evaluateResult ( ) { switch ( getResult ( ) ) { case RESULT_CANCEL : evaluateResultCancel ( ) ; break ; case RESULT_NO : evaluateResultNo ( ) ; break ; case RESULT_OK : evaluateResultOK ( ) ; break ; case RESULT_YES : evaluateResultYes ( ) ; break ; default : String msg = "Unrecognized result code : " + getResult ( ) ; throw new IllegalStateException ( msg ) ; } }
void test4 ( ) throws Throwable { RootPaneContentPanel rootPaneContentPanel0 = new RootPaneContentPanel ( ) ; JInternalFrame jInternalFrame0 = new JInternalFrame ( ( String ) null , true ) ; RootPaneJInternalFrame rootPaneJInternalFrame0 = new RootPaneJInternalFrame ( jInternalFrame0 ) ; rootPaneContentPanel0 . setLTSRootPane ( ( LTSRootPane ) rootPaneJInternalFrame0 ) ; rootPaneContentPanel0 . setWindowTitle ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setWindowTitle ( String title ) { myWindowTitle = title ; }
void test5 ( ) throws Throwable { RootPaneContentPanel rootPaneContentPanel0 = new RootPaneContentPanel ( ) ; rootPaneContentPanel0 . noButtonPressed ( ) ; rootPaneContentPanel0 . evaluateResult ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test7 ( ) throws Throwable { RootPaneContentPanel rootPaneContentPanel0 = new RootPaneContentPanel ( ) ; rootPaneContentPanel0 . evaluateResultYes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void evaluateResultYes ( ) { }
void test12 ( ) throws Throwable { RootPaneContentPanel rootPaneContentPanel0 = new RootPaneContentPanel ( ) ; rootPaneContentPanel0 . setWindowTitle ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWindowTitle ( ) { return myWindowTitle ; }
void test13 ( ) throws Throwable { RootPaneContentPanel rootPaneContentPanel0 = new RootPaneContentPanel ( ) ; rootPaneContentPanel0 . initializeMenuBar ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void initializeMenuBar ( ) throws LTSException { JMenuBar menuBar = buildMenuBar ( ) ; if ( null = = menuBar ) return ; LTSRootPane lrp = getLTSRootPane ( ) ; lrp . setMenuBar ( menuBar ) ; }
void test0 ( ) throws Throwable { DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer ( ) ; JToolTip jToolTip0 = defaultListCellRenderer0 . createToolTip ( ) ; TitleDecorator titleDecorator0 = new TitleDecorator ( ( Container ) defaultListCellRenderer0 , "9" ) ; JToolTip jToolTip1 = ( JToolTip ) defaultListCellRenderer0 . add ( ( Component ) jToolTip0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test3 ( ) throws Throwable { JInternalFrame jInternalFrame0 = new JInternalFrame ( "Q" ) ; TitleDecorator titleDecorator0 = new TitleDecorator ( ( Container ) jInternalFrame0 , "Q" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getWidth ( ) { return myWidth ; }
void test3 ( ) throws Throwable { RootContainers rootContainers0 = RootContainers . JWINDOW ; JPanel jPanel0 = new JPanel ( true ) ; ContainerEvent containerEvent0 = new ContainerEvent ( ( Component ) jPanel0 , 1 , ( Component ) jPanel0 ) ; rootContainers0 . componentAdded ( containerEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void componentAdded ( ContainerEvent e ) { removeThisListener ( ) ; myContainer = e . getContainer ( ) ; addThisListener ( ) ; setTitle ( ) ; }
void test4 ( ) throws Throwable { RootContainers rootContainers0 = RootContainers . JWINDOW ; rootContainers0 . basicSetTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void basicSetTitle ( ) { }
void test5 ( ) throws Throwable { RootContainers rootContainers0 = RootContainers . JWINDOW ; JPanel jPanel0 = new JPanel ( true ) ; ContainerEvent containerEvent0 = new ContainerEvent ( ( Component ) jPanel0 , 1 , ( Component ) jPanel0 ) ; containerEvent0 . setSource ( ( Object ) true ) ; rootContainers0 . componentAdded ( containerEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void componentAdded ( ContainerEvent e ) { removeThisListener ( ) ; myContainer = e . getContainer ( ) ; addThisListener ( ) ; setTitle ( ) ; }
void test6 ( ) throws Throwable { RootContainers rootContainers0 = RootContainers . JWINDOW ; JPanel jPanel0 = new JPanel ( true ) ; ContainerEvent containerEvent0 = new ContainerEvent ( ( Component ) jPanel0 , 1 , ( Component ) jPanel0 ) ; containerEvent0 . setSource ( ( Object ) true ) ; rootContainers0 . componentRemoved ( containerEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test7 ( ) throws Throwable { RootContainers rootContainers0 = RootContainers . JWINDOW ; JPanel jPanel0 = new JPanel ( true ) ; ContainerEvent containerEvent0 = new ContainerEvent ( ( Component ) jPanel0 , 1 , ( Component ) jPanel0 ) ; rootContainers0 . componentRemoved ( containerEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void componentRemoved ( ContainerEvent e ) { Container container = e . getContainer ( ) ; if ( null ! = container ) container . removeContainerListener ( this ) ; }
void test0 ( ) throws Throwable { FileFieldPanel fileFieldPanel0 = new FileFieldPanel ( ) ; LTSPanel lTSPanel0 = ( LTSPanel ) fileFieldPanel0 . createTopPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test1 ( ) throws Throwable { FileFieldPanel fileFieldPanel0 = new FileFieldPanel ( ) ; String string0 = fileFieldPanel0 . getHeading ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHeading ( ) { return "" ; }
void test3 ( ) throws Throwable { FileFieldPanel fileFieldPanel0 = new FileFieldPanel ( ) ; JLabel jLabel0 = fileFieldPanel0 . getHeadingLabel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JLabel getHeadingLabel ( ) { return myHeadingLabel ; }
void test4 ( ) throws Throwable { FileFieldPanel fileFieldPanel0 = new FileFieldPanel ( ) ; fileFieldPanel0 . createBottomPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBottomPanelMode ( ) { return ContentPanel . BOTTOM_PANEL_OK_CANCEL ; }
void test5 ( ) throws Throwable { FileFieldPanel fileFieldPanel0 = new FileFieldPanel ( ) ; FileField fileField0 = fileFieldPanel0 . getFileField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FileField getFileField ( ) { return myFileField ; }
void test6 ( ) throws Throwable { FileFieldPanel fileFieldPanel0 = new FileFieldPanel ( ) ; JLabel jLabel0 = fileFieldPanel0 . getFieldLabel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JLabel getFieldLabel ( ) { return myFieldLabel ; }
void test7 ( ) throws Throwable { FileFieldPanel fileFieldPanel0 = new FileFieldPanel ( ) ; fileFieldPanel0 . okButtonPressed ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test8 ( ) throws Throwable { FileFieldPanel fileFieldPanel0 = new FileFieldPanel ( ) ; LTSPanel lTSPanel0 = ( LTSPanel ) fileFieldPanel0 . createCenterPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test9 ( ) throws Throwable { FileFieldPanel fileFieldPanel0 = new FileFieldPanel ( ) ; fileFieldPanel0 . setHeading ( "#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHeading ( ) { return "" ; }
void test0 ( ) throws Throwable { FileField fileField0 = new FileField ( ) ; File file0 = new File ( "jYXkpK [ . > qR\"~ | CvI" , "jYXkpK [ . > qR\"~ | CvI" ) ; fileField0 . setFile ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test1 ( ) throws Throwable { FileField fileField0 = new FileField ( ) ; int int0 = fileField0 . getBrowseMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test2 ( ) throws Throwable { FileField fileField0 = new FileField ( ) ; fileField0 . setFileChooser ( ( JFileChooser ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test3 ( ) throws Throwable { FileField fileField0 = new FileField ( ) ; File file0 = fileField0 . getFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test4 ( ) throws Throwable { FileField fileField0 = new FileField ( ) ; JButton jButton0 = fileField0 . getButton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getText ( ) { return myTextArea . getText ( ) ; }
void test5 ( ) throws Throwable { FileField fileField0 = new FileField ( ) ; fileField0 . setBrowseMode ( ( - 29 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBrowseMode ( ) { return myBrowseMode ; }
void test0 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "Ntn , Rc" , 3 , "Ntn , Rc" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWindowTitle ( ) { return myWindowTitle ; }
void test1 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void noButtonPressed ( ) { myResult = RESULT_NO ; getRootPane ( ) . getParent ( ) . setVisible ( false ) ; }
void test2 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHeadingString ( ) { return "Application Error" ; }
void test3 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "B`vnB | ] , Z . 5v , _cWSA" , 0 , "B`vnB | ] , Z . 5v , _cWSA" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test4 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "MRu7u , # | & { " , ( - 806 ) , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Dimension toPercentOfScreen ( double percent ) { Toolkit tk = Toolkit . getDefaultToolkit ( ) ; Dimension dim = tk . getScreenSize ( ) ; int width = ( int ) ( dim . width * percent ) ; int height = ( int ) ( dim . height * percent ) ; return new Dimension ( width , height ) ; }
void test5 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWindowTitle ( ) { return myWindowTitle ; }
void test6 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "a" , 1603 , "e~k & \u0006E | ( , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test7 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "V - 4t6Xh5 . `" , ( - 1509 ) , "V - 4t6Xh5 . `" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void compact ( ) { Dimension dim ; if ( null ! = getTopPanel ( ) ) { dim = getTopPanel ( ) . getPreferredSize ( ) ; getTopPanel ( ) . invalidate ( ) ; } if ( null ! = getCenterPanel ( ) ) { dim = getCenterPanel ( ) . getPreferredSize ( ) ; getCenterPanel ( ) . setMinimumSize ( dim ) ; } if ( null ! = getBottomPanel ( ) ) { dim = getBottomPanel ( ) . getPreferredSize ( ) ; getBottomPanel ( ) . setMinimumSize ( dim ) ; } getWindow ( ) . validate ( ) ; dim = getWindow ( ) . getPreferredSize ( ) ; getWindow ( ) . setSize ( dim ) ; }
void test8 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "V - 4t6Xh5 . `" , ( - 1509 ) , "V - 4t6Xh5 . `" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHeadingString ( ) { return "Application Error" ; }
void test9 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "a" , 1603 , "e~k & \u0006E | ( , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void initialize ( ) { createFields ( ) ; configureFields ( ) ; }
void test10 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "P1so ] " , 0 , "sT0k' | AFfa ( uD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test11 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "P1so ] " , 0 , "sT0k' | AFfa ( uD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void okButtonPressed ( ) { myResult = RESULT_OK ; getRootPane ( ) . getParent ( ) . setVisible ( false ) ; }
void test12 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "r$$FF^ < Z8Ftt : j" , 2 , "r$$FF^ < Z8Ftt : j" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void selectButtonPressed ( ) { myResult = RESULT_OK ; closeWindow ( ) ; }
void test13 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "o < Z7p ? > " , ( - 1873 ) , "o < Z7p ? > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void notImplemented ( ) { JOptionPane . showMessageDialog ( this , "This feature has not been implemented" ) ; }
void test14 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , ( - 1870 ) , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWindowTitle ( ) { return myWindowTitle ; }
void test15 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "Window must be an instance of JFrame or JDialog . Window class : " , 469 , "IpX_RG' , gRoJYLc3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void cancelButtonPressed ( WizardPanel currentPanel ) { WizardPanel nextPanel = getCancelPanel ( currentPanel ) ; displayPanel ( currentPanel , nextPanel ) ; }
void test16 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "I#0w9 ? g" , 49 , "I#0w9 ? g" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHeadingString ( ) { return "Application Error" ; }
void test17 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , ( - 1051 ) , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void initializeWindow ( Window window ) throws LTSException { super . initializeWindow ( window ) ; centerWindow ( ) ; }
void test18 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "Window must be an instance of JFrame or JDialog . Window class : " , 469 , "IpX_RG' , gRoJYLc3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBottomPanelMode ( ) { return ContentPanel . BOTTOM_PANEL_OK_CANCEL ; }
void test19 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 1 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test20 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( ( String ) null , 0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test21 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 1 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWindowTitle ( ) { return myWindowTitle ; }
void test22 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , ( - 90 ) , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void waitForClose ( Window window ) { CloseWaiter cwaiter = new CloseWaiter ( ) ; cwaiter . waitFor ( window ) ; }
void test23 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 9 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test24 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 1 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWindowTitle ( ) { return myWindowTitle ; }
void test25 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "OV$ [ w - `Zl * s4Q ] Bz" , ( - 74 ) , "OV$ [ w - `Zl * s4Q ] Bz" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWindowTitle ( ) { return myWindowTitle ; }
void test26 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , ( - 402 ) , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JMenuBar basicBuildMenuBar ( ) throws LTSException { / / / / method suspended until this mess is dealt with / / throw new NotImplementedException ( ) ; }
void test27 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , ( - 90 ) , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHeadingString ( ) { return "Application Error" ; }
void test28 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "B`vnB | ] , Z . 5v , _cWSA" , 0 , "B`vnB | ] , Z . 5v , _cWSA" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void yesButtonPressed ( ) { myResult = RESULT_YES ; getRootPane ( ) . getParent ( ) . setVisible ( false ) ; }
void test29 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( ( String ) null , 1 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void makeOkDefaultFor ( String keyString , String actionName ) { KeyStroke ks = KeyStroke . getKeyStroke ( keyString ) ; InputMap imap = myOkButton . getInputMap ( JComponent . WHEN_IN_FOCUSED_WINDOW ) ; imap . put ( ks , actionName ) ; Action action = new AbstractAction ( ) { void actionPerformed ( ActionEvent e ) { okButtonPressed ( ) ; } } ; myOkButton . getActionMap ( ) . put ( actionName , action ) ; }
void test30 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "r$$FF^ < Z8Ftt : j" , 2 , "r$$FF^ < Z8Ftt : j" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWindowTitle ( ) { return myWindowTitle ; }
void test31 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 1 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test32 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "I#0w9 ? g" , 49 , "I#0w9 ? g" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void closeButtonPressed ( ContentPanel panel ) ; }
void test33 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHeadingString ( ) { return "Application Error" ; }
void test34 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "V - 4t6Xh5 . `" , ( - 1519 ) , "V - 4t6Xh5 . `" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBottomPanelMode ( ) { return ContentPanel . BOTTOM_PANEL_OK_CANCEL ; }
void test35 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "P1so ] " , 0 , "sT0k' | AFfa ( uD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWindowTitle ( ) { return myWindowTitle ; }
void test36 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "OV$ [ w - `Zl * s4Q ] Bz" , ( - 74 ) , "OV$ [ w - `Zl * s4Q ] Bz" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHeadingString ( ) { return "Application Error" ; }
void test37 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( ( String ) null , 1 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBottomPanelMode ( ) { return ContentPanel . BOTTOM_PANEL_OK_CANCEL ; }
void test38 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 9 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBottomPanelMode ( ) { return ContentPanel . BOTTOM_PANEL_OK_CANCEL ; }
void test39 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 10 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int countComponents ( ) ; / * * * @param arg0 * / void createBufferStrategy ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @throws java . awt . AWTException * / void createBufferStrategy ( int arg0 , BufferCapabilities arg1 ) throws AWTException ; / * * * @param arg0 * @param arg1 * @return * / Image createImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Image createImage ( ImageProducer arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / VolatileImage createVolatileImage ( int arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return @throws * java . awt . AWTException * / VolatileImage createVolatileImage ( int arg0 , int arg1 , ImageCapabilities arg2 ) throws AWTException ; / * * * @param arg0 * / void deliverEvent ( Event arg0 ) ; / * * * * / void disable ( ) ; / * * * @param arg0 * / void dispatchEvent ( AWTEvent arg0 ) ; / * * * * / void dispose ( ) ; / * * * * / void doLayout ( ) ; / * * * * / void enable ( ) ; / * * * @param arg0 * / void enable ( boolean arg0 ) ; / * * * @param arg0 * / void enableInputMethods ( boolean arg0 ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#equals ( java . lang . Object ) * / boolean equals ( Object arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component findComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component findComponentAt ( Point arg0 ) ; / * * * @return * / AccessibleContext getAccessibleContext ( ) ; / * * * @return * / float getAlignmentX ( ) ; / * * * @return * / float getAlignmentY ( ) ; / * * * @return * / Color getBackground ( ) ; / * * * @return * / Rectangle getBounds ( ) ; / * * * @param arg0 * @return * / Rectangle getBounds ( Rectangle arg0 ) ; / * * * @return * / BufferStrategy getBufferStrategy ( ) ; / * * * @return * / ColorModel getColorModel ( ) ; / * * * @param arg0 * @return * / Component getComponent ( int arg0 ) ; / * * * @param arg0 * @param arg1 * @return * / Component getComponentAt ( int arg0 , int arg1 ) ; / * * * @param arg0 * @return * / Component getComponentAt ( Point arg0 ) ; / * * * @return * / int getComponentCount ( ) ; / * * * @return * / ComponentListener [ ] getComponentListeners ( ) ; / * * * @return * / ComponentOrientation getComponentOrientation ( ) ; / * * * @return * / Component [ ] getComponents ( ) ; / * * * @return * / ContainerListener [ ] getContainerListeners ( ) ; / * * * @return * / Container getContentPane ( ) ; / * * * @return * / Cursor getCursor ( ) ; / * * * @return * / int getDefaultCloseOperation ( ) ; / * * * @return * / DropTarget getDropTarget ( ) ; / * * * @return * / boolean getFocusableWindowState ( ) ; / * * * @return * / Container getFocusCycleRootAncestor ( ) ; / * * * @return * / FocusListener [ ] getFocusListeners ( ) ; / * * * @return * / Component getFocusOwner ( ) ; / * * * @param arg0 * @return * / Set getFocusTraversalKeys ( int arg0 ) ; / * * * @return * / boolean getFocusTraversalKeysEnabled ( ) ; / * * * @return * / FocusTraversalPolicy getFocusTraversalPolicy ( ) ; / * * * @return * / Font getFont ( ) ; / * * * @param arg0 * @return * / FontMetrics getFontMetrics ( Font arg0 ) ; / * * * @return * / Color getForeground ( ) ; / * * * @return * / Component getGlassPane ( ) ; / * * * @return * / Graphics getGraphics ( ) ; / * * * @return * / GraphicsConfiguration getGraphicsConfiguration ( ) ; / * * * @return * / int getHeight ( ) ; / * * * @return * / HierarchyBoundsListener [ ] getHierarchyBoundsListeners ( ) ; / * * * @return * / HierarchyListener [ ] getHierarchyListeners ( ) ; / * * * @return * / boolean getIgnoreRepaint ( ) ; / * * * @return * / InputContext getInputContext ( ) ; / * * * @return * / InputMethodListener [ ] getInputMethodListeners ( ) ; / * * * @return * / InputMethodRequests getInputMethodRequests ( ) ; / * * * @return * / Insets getInsets ( ) ; / * * * @return * / JMenuBar getJMenuBar ( ) ; / * * * @return * / KeyListener [ ] getKeyListeners ( ) ; / * * * @return * / JLayeredPane getLayeredPane ( ) ; / * * * @return * / LayoutManager getLayout ( ) ; / * * * @param arg0 * @return * / / / EventListener [ ] getListeners ( Class T ) ; < T extends EventListener > T [ ] getListeners ( Class < T > listenerType ) ; / * * * @return * / Locale getLocale ( ) ; / * * * @return * / Point getLocation ( ) ; / * * * @param arg0 * @return * / Point getLocation ( Point arg0 ) ; / * * * @return * / Point getLocationOnScreen ( ) ; / * * * @return * / Dimension getMaximumSize ( ) ; / * * * @return * / Dimension getMinimumSize ( ) ; / * * * @return * / Component getMostRecentFocusOwner ( ) ; / * * * @return * / MouseListener [ ] getMouseListeners ( ) ; / * * * @return * / MouseMotionListener [ ] getMouseMotionListeners ( ) ; / * * * @return * / MouseWheelListener [ ] getMouseWheelListeners ( ) ; / * * * @return * / String getName ( ) ; / * * * @return * / Window [ ] getOwnedWindows ( ) ; / * * * @return * / Window getOwner ( ) ; / * * * @return * / Container getParent ( ) ; / * * * @return * / ComponentPeer getPeer ( ) ; / * * * @return * / Dimension getPreferredSize ( ) ; / * * * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( ) ; / * * * @param arg0 * @return * / PropertyChangeListener [ ] getPropertyChangeListeners ( String arg0 ) ; / * * * @return * / JRootPane getRootPane ( ) ; / * * * @return * / Dimension getSize ( ) ; / * * * @param arg0 * @return * / Dimension getSize ( Dimension arg0 ) ; / * * * @return * / String getTitle ( ) ; / * * * @return * / Toolkit getToolkit ( ) ; / * * * @return * / Object getTreeLock ( ) ; / * * * @return * / String getWarningString ( ) ; / * * * @return * / int getWidth ( ) ; / * * * @return * / WindowFocusListener [ ] getWindowFocusListeners ( ) ; / * * * @return * / WindowListener [ ] getWindowListeners ( ) ; / * * * @return * / WindowStateListener [ ] getWindowStateListeners ( ) ; / * * * @return * / int getX ( ) ; / * * * @return * / int getY ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean gotFocus ( Event arg0 , Object arg1 ) ; / * * * @param arg0 * @return * / boolean handleEvent ( Event arg0 ) ; / * * * @return * / boolean hasFocus ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#hashCode ( ) * / int hashCode ( ) ; / * * * * / void hide ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * @param arg5 * @return * / boolean imageUpdate ( Image arg0 , int arg1 , int arg2 , int arg3 , int arg4 , int arg5 ) ; / * * * @return * / Insets insets ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean inside ( int arg0 , int arg1 ) ; / * * * * / void invalidate ( ) ; / * * * @return * / boolean isActive ( ) ; / * * * @param arg0 * @return * / boolean isAncestorOf ( Component arg0 ) ; / * * * @return * / boolean isBackgroundSet ( ) ; / * * * @return * / boolean isCursorSet ( ) ; / * * * @return * / boolean isDisplayable ( ) ; / * * * @return * / boolean isDoubleBuffered ( ) ; / * * * @return * / boolean isEnabled ( ) ; / * * * @return * / boolean isFocusable ( ) ; / * * * @return * / boolean isFocusableWindow ( ) ; / * * * @return * / boolean isFocusCycleRoot ( ) ; / * * * @param arg0 * @return * / boolean isFocusCycleRoot ( Container arg0 ) ; / * * * @return * / boolean isFocused ( ) ; / * * * @return * / boolean isFocusOwner ( ) ; / * * * @return * / boolean isFocusTraversable ( ) ; / * * * @return * / boolean isFocusTraversalPolicySet ( ) ; / * * * @return * / boolean isFontSet ( ) ; / * * * @return * / boolean isForegroundSet ( ) ; / * * * @return * / boolean isLightweight ( ) ; / * * * @return * / boolean isOpaque ( ) ; / * * * @return * / boolean isResizable ( ) ; / * * * @return * / boolean isShowing ( ) ; / * * * @return * / boolean isUndecorated ( ) ; / * * * @return * / boolean isValid ( ) ; / * * * @return * / boolean isVisible ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyDown ( Event arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean keyUp ( Event arg0 , int arg1 ) ; / * * * * / void layout ( ) ; / * * * * / void list ( ) ; / * * * @param arg0 * / void list ( PrintStream arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintStream arg0 , int arg1 ) ; / * * * @param arg0 * / void list ( PrintWriter arg0 ) ; / * * * @param arg0 * @param arg1 * / void list ( PrintWriter arg0 , int arg1 ) ; / * * * @param arg0 * @param arg1 * @return * / Component locate ( int arg0 , int arg1 ) ; / * * * @return * / Point location ( ) ; / * * * @param arg0 * @param arg1 * @return * / boolean lostFocus ( Event arg0 , Object arg1 ) ; / * * * @return * / Dimension minimumSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDown ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseDrag ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseEnter ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseExit ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseMove ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @return * / boolean mouseUp ( Event arg0 , int arg1 , int arg2 ) ; / * * * @param arg0 * @param arg1 * / void move ( int arg0 , int arg1 ) ; / * * * * / void nextFocus ( ) ; / * * * * / void pack ( ) ; / * * * @param arg0 * / void paint ( Graphics arg0 ) ; / * * * @param arg0 * / void paintAll ( Graphics arg0 ) ; / * * * @param arg0 * / void paintComponents ( Graphics arg0 ) ; / * * * @param arg0 * @return * / boolean postEvent ( Event arg0 ) ; / * * * @return * / Dimension preferredSize ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @return * / boolean prepareImage ( Image arg0 , int arg1 , int arg2 , ImageObserver arg3 ) ; / * * * @param arg0 * @param arg1 * @return * / boolean prepareImage ( Image arg0 , ImageObserver arg1 ) ; / * * * @param arg0 * / void print ( Graphics arg0 ) ; / * * * @param arg0 * / void printAll ( Graphics arg0 ) ; / * * * @param arg0 * / void printComponents ( Graphics arg0 ) ; / * * * @param arg0 * / void remove ( int arg0 ) ; / * * * @param arg0 * / void remove ( Component arg0 ) ; / * * * @param arg0 * / void remove ( MenuComponent arg0 ) ; / * * * * / void removeAll ( ) ; / * * * @param arg0 * / void removeComponentListener ( ComponentListener arg0 ) ; / * * * @param arg0 * / void removeContainerListener ( ContainerListener arg0 ) ; / * * * @param arg0 * / void removeFocusListener ( FocusListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyBoundsListener ( HierarchyBoundsListener arg0 ) ; / * * * @param arg0 * / void removeHierarchyListener ( HierarchyListener arg0 ) ; / * * * @param arg0 * / void removeInputMethodListener ( InputMethodListener arg0 ) ; / * * * @param arg0 * / void removeKeyListener ( KeyListener arg0 ) ; / * * * @param arg0 * / void removeMouseListener ( MouseListener arg0 ) ; / * * * @param arg0 * / void removeMouseMotionListener ( MouseMotionListener arg0 ) ; / * * * @param arg0 * / void removeMouseWheelListener ( MouseWheelListener arg0 ) ; / * * * * / void removeNotify ( ) ; / * * * @param arg0 * / void removePropertyChangeListener ( PropertyChangeListener arg0 ) ; / * * * @param arg0 * @param arg1 * / void removePropertyChangeListener ( String arg0 , PropertyChangeListener arg1 ) ; / * * * @param arg0 * / void removeWindowFocusListener ( WindowFocusListener arg0 ) ; / * * * @param arg0 * / void removeWindowListener ( WindowListener arg0 ) ; / * * * @param arg0 * / void removeWindowStateListener ( WindowStateListener arg0 ) ; / * * * * / void repaint ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void repaint ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void repaint ( long arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * @param arg4 * / void repaint ( long arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) ; / * * * * / void requestFocus ( ) ; / * * * @return * / boolean requestFocusInWindow ( ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void reshape ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * @param arg1 * / void resize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void resize ( Dimension arg0 ) ; / * * * @param arg0 * / void setBackground ( Color arg0 ) ; / * * * @param arg0 * @param arg1 * @param arg2 * @param arg3 * / void setBounds ( int arg0 , int arg1 , int arg2 , int arg3 ) ; / * * * @param arg0 * / void setBounds ( Rectangle arg0 ) ; / * * * @param arg0 * / void setComponentOrientation ( ComponentOrientation arg0 ) ; / * * * @param arg0 * / void setContentPane ( Container arg0 ) ; / * * * @param arg0 * / void setCursor ( Cursor arg0 ) ; / * * * @param arg0 * / void setDefaultCloseOperation ( int arg0 ) ; / * * * @param arg0 * / void setDropTarget ( DropTarget arg0 ) ; / * * * @param arg0 * / void setEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusable ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusableWindowState ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusCycleRoot ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setFocusTraversalKeys ( int arg0 , Set < ? extends AWTKeyStroke > arg1 ) ; / * * * @param arg0 * / void setFocusTraversalKeysEnabled ( boolean arg0 ) ; / * * * @param arg0 * / void setFocusTraversalPolicy ( FocusTraversalPolicy arg0 ) ; / * * * @param arg0 * / void setFont ( Font arg0 ) ; / * * * @param arg0 * / void setForeground ( Color arg0 ) ; / * * * @param arg0 * / void setGlassPane ( Component arg0 ) ; / * * * @param arg0 * / void setIgnoreRepaint ( boolean arg0 ) ; / * * * @param arg0 * / void setJMenuBar ( JMenuBar arg0 ) ; / * * * @param arg0 * / void setLayeredPane ( JLayeredPane arg0 ) ; / * * * @param arg0 * / void setLayout ( LayoutManager arg0 ) ; / * * * @param arg0 * / void setLocale ( Locale arg0 ) ; / * * * @param arg0 * @param arg1 * / void setLocation ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setLocation ( Point arg0 ) ; / * * * @param arg0 * / void setLocationRelativeTo ( Component arg0 ) ; / * * * @param arg0 * / void setName ( String arg0 ) ; / * * * @param arg0 * / void setResizable ( boolean arg0 ) ; / * * * @param arg0 * @param arg1 * / void setSize ( int arg0 , int arg1 ) ; / * * * @param arg0 * / void setSize ( Dimension arg0 ) ; / * * * @param arg0 * / void setTitle ( String arg0 ) ; / * * * @param arg0 * / void setUndecorated ( boolean arg0 ) ; / * * * @param arg0 * / void setVisible ( boolean arg0 ) ; / * * * * / void show ( ) ; / * * * @param arg0 * / void show ( boolean arg0 ) ; / * * * @return * / Dimension size ( ) ; / * * * * / void toBack ( ) ; / * * * * / void toFront ( ) ; / * * ( non - Javadoc ) * * @see java . lang . Object#toString ( ) * / String toString ( ) ; / * * * * / void transferFocus ( ) ; / * * * * / void transferFocusBackward ( ) ; / * * * * / void transferFocusDownCycle ( ) ; / * * * * / void transferFocusUpCycle ( ) ; / * * * @param arg0 * / void update ( Graphics arg0 ) ; / * * * * / void validate ( ) ; }
void test40 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "r$$FF^ < Z8Ftt : j" , 2 , "r$$FF^ < Z8Ftt : j" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWindowTitle ( ) { return myWindowTitle ; }
void test41 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "I#0w9 ? g" , 49 , "I#0w9 ? g" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test42 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "V - 4t6Xh5 . `" , ( - 1519 ) , "V - 4t6Xh5 . `" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWindowTitle ( ) { return myWindowTitle ; }
void test43 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "o < Z7p ? > " , ( - 1873 ) , "o < Z7p ? > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getWindowTitle ( ) { return myWindowTitle ; }
void test44 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBottomPanelMode ( ) { return ContentPanel . BOTTOM_PANEL_OK_CANCEL ; }
void test45 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridy ( ) { return myGridy ; }
void test46 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , ( - 212 ) , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JPanel createControlPanel ( ) { LTSPanel panel = new LTSPanel ( ) ; JButton button = new JButton ( "Create" ) ; SimpleAction action = new SimpleAction ( ) { void action ( ) { createProperty ( ) ; } } ; button . addActionListener ( action ) ; panel . addButton ( button , 5 ) ; button = new JButton ( "Delete" ) ; action = new SimpleAction ( ) { void action ( ) { deleteProperty ( ) ; } } ; button . addActionListener ( action ) ; panel . addButton ( button , 5 ) ; return panel ; }
void test47 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( " / @OJj\"nU" , 14 , " / @OJj\"nU" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void makeContentFor ( LTSRootPane theRootPane ) { Container contentPane = theRootPane . getContentPane ( ) ; LayoutManager layoutManager = new GridBagLayout ( ) ; SimpleGridBagConstraint constraint = SimpleGridBagConstraint . fillConstraint ( 0 , 0 ) ; contentPane . removeAll ( ) ; contentPane . setLayout ( layoutManager ) ; contentPane . add ( this , constraint ) ; theRootPane . setTitle ( getWindowTitle ( ) ) ; theRootPane . addWindowListener ( this ) ; }
void test48 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 1659 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void initializeWindow ( Window window ) throws LTSException { super . initializeWindow ( window ) ; centerWindow ( ) ; }
void test49 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( ( String ) null , 0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test50 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "V - 4t6Xh5 . `" , ( - 1519 ) , "V - 4t6Xh5 . `" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void compact ( ) { Dimension dim ; if ( null ! = getTopPanel ( ) ) { dim = getTopPanel ( ) . getPreferredSize ( ) ; getTopPanel ( ) . invalidate ( ) ; } if ( null ! = getCenterPanel ( ) ) { dim = getCenterPanel ( ) . getPreferredSize ( ) ; getCenterPanel ( ) . setMinimumSize ( dim ) ; } if ( null ! = getBottomPanel ( ) ) { dim = getBottomPanel ( ) . getPreferredSize ( ) ; getBottomPanel ( ) . setMinimumSize ( dim ) ; } getWindow ( ) . validate ( ) ; dim = getWindow ( ) . getPreferredSize ( ) ; getWindow ( ) . setSize ( dim ) ; }
void test51 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , ( - 402 ) , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean exitOnClose ( ) { return myExitOnClose ; }
void test0 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "# nHNfP@YNwOH8b" , ( - 1664 ) , "# nHNfP@YNwOH8b" ) ; CPMouseListener cPMouseListener0 = new CPMouseListener ( ( SimpleMouseListener ) textContentPanel0 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) textContentPanel0 , 687 , ( long ) 687 , ( - 1664 ) , 687 , ( - 1664 ) , ( - 1664 ) , 687 , ( - 1664 ) , false , ( - 1664 ) , ( - 1664 ) , 0 ) ; cPMouseListener0 . mousePressed ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "`@ ( Uz / o874~ydTC } * E" , ( - 1658 ) , "`@ ( Uz / o874~ydTC } * E" ) ; CPMouseListener cPMouseListener0 = textContentPanel0 . getMouseListener ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) textContentPanel0 , ( - 1 ) , 0L , ( - 1 ) , ( - 1 ) , ( - 943 ) , ( - 943 ) , ( - 943 ) , ( - 943 ) , false , ( - 580 ) , ( - 943 ) , 1997 ) ; cPMouseListener0 . mouseClicked ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent e ) { myEvent = e ; Object source = e . getSource ( ) ; if ( e . isPopupTrigger ( ) ) maybeShowPopup ( e ) ; else if ( e . getClickCount ( ) < 2 ) singleClick ( source ) ; else doubleClick ( source ) ; }
void test2 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 0 , "" ) ; CPMouseListener cPMouseListener0 = new CPMouseListener ( ( SimpleMouseListener ) textContentPanel0 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) textContentPanel0 , 0 , 577L , 0 , 1 , 0 , ( - 1259 ) , true , 0 , 0 , 0 ) ; cPMouseListener0 . mouseReleased ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JButton getButton ( ) { return myButton ; }
void test3 ( ) throws Throwable { TextContentPanel textContentPanel0 = new TextContentPanel ( "" , 1211 , "" ) ; CPMouseListener cPMouseListener0 = textContentPanel0 . getMouseListener ( ) ; MouseEvent mouseEvent0 = new MouseEvent ( ( Component ) textContentPanel0 , ( - 1454 ) , ( long ) ( - 1454 ) , 1211 , 1211 , 1500 , 700 , 700 , 700 , false , 0 ) ; cPMouseListener0 . mouseClicked ( mouseEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent e ) { myEvent = e ; Object source = e . getSource ( ) ; if ( e . isPopupTrigger ( ) ) maybeShowPopup ( e ) ; else if ( e . getClickCount ( ) < 2 ) singleClick ( source ) ; else doubleClick ( source ) ; }
void test0 ( ) throws Throwable { Vector < String > vector0 = new Vector < String > ( ) ; EditListPanel editListPanel0 = new EditListPanel ( ( List ) vector0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getButtonPosition ( ) { return myButtonPosition ; }
void test1 ( ) throws Throwable { EditListPanel editListPanel0 = new EditListPanel ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getGridx ( ) { return myGridx ; }
void test2 ( ) throws Throwable { EditListPanel editListPanel0 = new EditListPanel ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getButtonPosition ( ) { return myButtonPosition ; }
void test3 ( ) throws Throwable { EditListPanel editListPanel0 = new EditListPanel ( "deleteAction" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getButtonPosition ( ) { return myButtonPosition ; }
void test4 ( ) throws Throwable { EditListPanel editListPanel0 = new EditListPanel ( ( - 9 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getButtonPosition ( ) { return myButtonPosition ; }
void test5 ( ) throws Throwable { EditListPanel editListPanel0 = new EditListPanel ( ( List ) null , 1274 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object userEditElement ( Object current ) { String s = ( String ) current ; if ( null = = s ) s = "" ; s = JOptionPane . showInputDialog ( this , "Edit value" , s ) ; s = StringUtils . trim ( s ) ; return s ; }
void test6 ( ) throws Throwable { EditListPanel editListPanel0 = new EditListPanel ( 15 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void deleteButtonAction ( ActionEvent event ) { if ( confirmDeletes ( ) & & ! userConfirmedDelete ( ) ) return ; int index = getList ( ) . getSelectedIndex ( ) ; SimpleListModel model = ( SimpleListModel ) getList ( ) . getModel ( ) ; model . remove ( index ) ; }
void test7 ( ) throws Throwable { EditListPanel editListPanel0 = new EditListPanel ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getButtonPosition ( ) { return myButtonPosition ; }
void test8 ( ) throws Throwable { EditListPanel editListPanel0 = new EditListPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getButtonPosition ( ) { return myButtonPosition ; }
void test9 ( ) throws Throwable { EditListPanel editListPanel0 = new EditListPanel ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addButtonAction ( ActionEvent event ) { Object [ ] values = userAddElements ( ) ; if ( null ! = values & & values . length > 0 ) { SimpleListModel model ; model = ( SimpleListModel ) getList ( ) . getModel ( ) ; for ( int i = 0 ; i < values . length ; i + + ) model . addElement ( values [ i ] ) ; } }
void test10 ( ) throws Throwable { EditListPanel editListPanel0 = new EditListPanel ( "deleteAction" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getButtonPosition ( ) { return myButtonPosition ; }
void test11 ( ) throws Throwable { EditListPanel editListPanel0 = new EditListPanel ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object userEditElement ( Object current ) { String s = ( String ) current ; if ( null = = s ) s = "" ; s = JOptionPane . showInputDialog ( this , "Edit value" , s ) ; s = StringUtils . trim ( s ) ; return s ; }
void test12 ( ) throws Throwable { EditListPanel editListPanel0 = new EditListPanel ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getButtonPosition ( ) { return myButtonPosition ; }
void test13 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 4 ] ; Object object0 = RenderingHints . VALUE_INTERPOLATION_BICUBIC ; objectArray0 [ 1 ] = object0 ; objectArray0 [ 3 ] = objectArray0 [ 1 ] ; SimpleListModel simpleListModel0 = new SimpleListModel ( objectArray0 ) ; List < Object > list0 = simpleListModel0 . asList ( ) ; EditListPanel editListPanel0 = new EditListPanel ( ( List ) list0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getButtonPosition ( ) { return myButtonPosition ; }
void test14 ( ) throws Throwable { EditListPanel editListPanel0 = new EditListPanel ( ( - 9 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getButtonPosition ( ) { return myButtonPosition ; }
void test15 ( ) throws Throwable { EditListPanel editListPanel0 = new EditListPanel ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getButtonPosition ( ) { return myButtonPosition ; }
void test0 ( ) throws Throwable { File file0 = BeanUtils . classNameToClassFile ( ( File ) null , "6a08X ) U~c5 | ' , AqUlV" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { String string0 = BeanUtils . toSetterName ( "getJ3 ) dka7C & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toSetterName ( String name ) { String uname = toCapName ( name ) ; return "set" + uname ; }
void test7 ( ) throws Throwable { Class < ? > class0 = BeanInfo . class ; String string0 = BeanUtils . buildAbsolutePropertyName ( ( Class ) class0 , "8 . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String buildAbsolutePropertyName ( Class beanClass , String name ) { return beanClass . getName ( ) + " . " + name ; }
void test9 ( ) throws Throwable { String string0 = BeanUtils . toGetterName ( "j3 ) dka7C & " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toGetterName ( String name ) { String uname = toCapName ( name ) ; return "get" + uname ; }
void test11 ( ) throws Throwable { String string0 = BeanUtils . uscoreToClassName ( "S4_d ; I6crv / ( 6" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String uscoreToClassName ( String uscore ) { String pname = uscoreToPropertyName ( uscore ) ; pname = toCapName ( pname ) ; return pname ; }
void test12 ( ) throws Throwable { String string0 = BeanUtils . toLowerName ( " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLowerName ( String name ) { char [ ] ca = name . toCharArray ( ) ; ca [ 0 ] = Character . toLowerCase ( ca [ 0 ] ) ; return String . valueOf ( ca ) ; }
void test13 ( ) throws Throwable { Class < ? > class0 = CharSequence . class ; String string0 = BeanUtils . getSimpleName ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSimpleName ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( myTrace [ 0 ] . getClassName ( ) ) ; sb . append ( ' . ' ) ; sb . append ( myTrace [ 0 ] . getMethodName ( ) ) ; sb . append ( ' : ' ) ; sb . append ( myTrace [ 0 ] . getLineNumber ( ) ) ; return sb . toString ( ) ; }
void test14 ( ) throws Throwable { Class < ? > class0 = BeanUtils . class ; BeanUtils beanUtils0 = ( BeanUtils ) BeanUtils . createInstance ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object createInstance ( String strClass ) throws LTSException { try { Class c = Class . forName ( strClass ) ; return c . newInstance ( ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw new LTSException ( e ) ; } }
void test15 ( ) throws Throwable { File file0 = new File ( "4v" , " . " ) ; File file1 = BeanUtils . classNameToJavaFile ( file0 , "4v" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File classNameToJavaFile ( File parentDir , String cname ) { return classNameToFile ( parentDir , cname , " . java" ) ; }
void test16 ( ) throws Throwable { Boolean boolean0 = Boolean . valueOf ( true ) ; BeanUtils . setValue ( ( Object ) " . " , ( Object ) boolean0 , " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
void test17 ( ) throws Throwable { String string0 = BeanUtils . dotsToPathSeparatots ( "Kzgnl - CM . P , - F * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String dotsToPathSeparatots ( String str ) { StringBuffer sb = new StringBuffer ( ) ; StringTokenizer st = new StringTokenizer ( str , " . " ) ; boolean first = true ; while ( st . hasMoreTokens ( ) ) { if ( first ) first = false ; else sb . append ( File . pathSeparator ) ; String s = st . nextToken ( ) ; sb . append ( s ) ; } String fname = sb . toString ( ) ; return fname ; }
void test18 ( ) throws Throwable { String string0 = BeanUtils . classNameToSlashName ( "4v" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String classNameToSlashName ( String cname ) { StringBuffer sb = new StringBuffer ( ) ; StringTokenizer st = new StringTokenizer ( " . " , cname ) ; boolean first = true ; while ( st . hasMoreTokens ( ) ) { if ( first ) first = false ; else sb . append ( " / " ) ; sb . append ( st . nextToken ( ) ) ; } return sb . toString ( ) ; }
void test19 ( ) throws Throwable { File file0 = new File ( "" ) ; File file1 = BeanUtils . classNameToFile ( file0 , "" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" File classNameToFile ( String className ) { String fname = classNameToFileName ( className ) ; File f = new File ( getFile ( ) , fname ) ; return f ; }
void test21 ( ) throws Throwable { String string0 = BeanUtils . getPackageName ( "8 . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPackageName ( Class cl ) { String s = cl . getName ( ) ; int i = s . lastIndexOf ( ' [ ' ) ; if ( i > = 0 ) { s = s . substring ( i + 2 ) ; } i = s . lastIndexOf ( ' . ' ) ; return ( i > = 0 ) ? s . substring ( 0 , i ) : "" ; }
void test22 ( ) throws Throwable { String string0 = BeanUtils . getPackageName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPackageName ( Class cl ) { String s = cl . getName ( ) ; int i = s . lastIndexOf ( ' [ ' ) ; if ( i > = 0 ) { s = s . substring ( i + 2 ) ; } i = s . lastIndexOf ( ' . ' ) ; return ( i > = 0 ) ? s . substring ( 0 , i ) : "" ; }
void test24 ( ) throws Throwable { Class < ? > class0 = String . class ; Boolean boolean0 = ( Boolean ) BeanUtils . toPrimitiveValue ( ( Class ) class0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object toPrimitiveValue ( Class clazz , String s ) { Object value = null ; if ( Boolean . TYPE = = clazz ) value = new Boolean ( s ) ; else if ( Character . TYPE = = clazz ) { char c = s . charAt ( 0 ) ; value = new Character ( c ) ; } else if ( Byte . TYPE = = clazz ) value = new Byte ( s ) ; else if ( Short . TYPE = = clazz ) value = new Short ( s ) ; else if ( Integer . TYPE = = clazz ) value = new Integer ( s ) ; else if ( Long . TYPE = = clazz ) value = new Long ( s ) ; else if ( Float . TYPE = = clazz ) value = new Float ( s ) ; else if ( Double . TYPE = = clazz ) value = new Double ( s ) ; else if ( String . class = = clazz ) value = s ; else { throw new IllegalArgumentException ( clazz . toString ( ) ) ; } return value ; }
void test25 ( ) throws Throwable { Class < ? > class0 = Float . class ; Constructor < Object > constructor0 = BeanUtils . getDefaultConstructor ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Constructor getDefaultConstructor ( Class clazz ) { Constructor [ ] constructors = clazz . getConstructors ( ) ; for ( Constructor cons : constructors ) { Class [ ] formalParams = cons . getParameterTypes ( ) ; if ( null = = formalParams | | formalParams . length < 1 ) return cons ; } return null ; }
void test26 ( ) throws Throwable { Class < ? > class0 = BeanUtils . class ; Constructor < Object > constructor0 = BeanUtils . getDefaultConstructor ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Constructor getDefaultConstructor ( Class clazz ) { Constructor [ ] constructors = clazz . getConstructors ( ) ; for ( Constructor cons : constructors ) { Class [ ] formalParams = cons . getParameterTypes ( ) ; if ( null = = formalParams | | formalParams . length < 1 ) return cons ; } return null ; }
void test27 ( ) throws Throwable { Class < ? > class0 = Float . class ; boolean boolean0 = BeanUtils . isSimpleType ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimpleType ( Class c ) { return getSimpleTypes ( ) . contains ( c ) ; }
void test28 ( ) throws Throwable { Class < ? > class0 = Byte . class ; boolean boolean0 = BeanUtils . isSimpleType ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimpleType ( Class c ) { return getSimpleTypes ( ) . contains ( c ) ; }
void test29 ( ) throws Throwable { Class < ? > class0 = Character . class ; boolean boolean0 = BeanUtils . isSimpleType ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimpleType ( Class c ) { return getSimpleTypes ( ) . contains ( c ) ; }
void test30 ( ) throws Throwable { Class < ? > class0 = Double . class ; boolean boolean0 = BeanUtils . isSimpleType ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimpleType ( Class c ) { return getSimpleTypes ( ) . contains ( c ) ; }
void test31 ( ) throws Throwable { Class < ? > class0 = Short . class ; boolean boolean0 = BeanUtils . isSimpleType ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimpleType ( Class c ) { return getSimpleTypes ( ) . contains ( c ) ; }
void test32 ( ) throws Throwable { Class < ? > class0 = Integer . class ; boolean boolean0 = BeanUtils . isSimpleType ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimpleType ( Class c ) { return getSimpleTypes ( ) . contains ( c ) ; }
void test33 ( ) throws Throwable { Class < ? > class0 = Long . class ; boolean boolean0 = BeanUtils . isSimpleType ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimpleType ( Class c ) { return getSimpleTypes ( ) . contains ( c ) ; }
void test34 ( ) throws Throwable { Class < ? > class0 = String . class ; boolean boolean0 = BeanUtils . isSimpleType ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimpleType ( Class c ) { return getSimpleTypes ( ) . contains ( c ) ; }
void test35 ( ) throws Throwable { Class < ? > class0 = CharSequence . class ; boolean boolean0 = BeanUtils . isSimpleType ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimpleType ( Class c ) { return getSimpleTypes ( ) . contains ( c ) ; }
void test37 ( ) throws Throwable { Class < ? > class0 = BeanUtils . class ; String string0 = ( String ) BeanUtils . toSimpleValue ( ( Class ) class0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object toSimpleValue ( Class clazz , String s ) { Object value = null ; if ( clazz = = Byte . class | | clazz = = Byte . TYPE ) value = new Byte ( s ) ; else if ( clazz = = Short . class | | clazz = = Short . TYPE ) value = new Short ( s ) ; else if ( clazz = = Integer . class | | clazz = = Integer . TYPE ) value = new Integer ( s ) ; else if ( clazz = = Long . class | | clazz = = Long . TYPE ) value = new Long ( s ) ; else if ( clazz = = Float . class | | clazz = = Float . TYPE ) value = new Float ( s ) ; else if ( clazz = = Double . class | | clazz = = Double . TYPE ) value = new Double ( s ) ; else if ( clazz = = Character . class | | clazz = = Character . TYPE ) value = new Character ( s . charAt ( 0 ) ) ; else value = s ; return value ; }
void test43 ( ) throws Throwable { Class < ? > class0 = Character . class ; Character character0 = ( Character ) BeanUtils . toSimpleValue ( ( Class ) class0 , "o" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object toSimpleValue ( Class clazz , String s ) { Object value = null ; if ( clazz = = Byte . class | | clazz = = Byte . TYPE ) value = new Byte ( s ) ; else if ( clazz = = Short . class | | clazz = = Short . TYPE ) value = new Short ( s ) ; else if ( clazz = = Integer . class | | clazz = = Integer . TYPE ) value = new Integer ( s ) ; else if ( clazz = = Long . class | | clazz = = Long . TYPE ) value = new Long ( s ) ; else if ( clazz = = Float . class | | clazz = = Float . TYPE ) value = new Float ( s ) ; else if ( clazz = = Double . class | | clazz = = Double . TYPE ) value = new Double ( s ) ; else if ( clazz = = Character . class | | clazz = = Character . TYPE ) value = new Character ( s . charAt ( 0 ) ) ; else value = s ; return value ; }
void test44 ( ) throws Throwable { String string0 = BeanUtils . getSimpleName ( "4v" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSimpleName ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( myTrace [ 0 ] . getClassName ( ) ) ; sb . append ( ' . ' ) ; sb . append ( myTrace [ 0 ] . getMethodName ( ) ) ; sb . append ( ' : ' ) ; sb . append ( myTrace [ 0 ] . getLineNumber ( ) ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { IntrospectorUtils introspectorUtils0 = new IntrospectorUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Class < ? > class0 = String . class ; SimpleType simpleType0 = SimpleType . toSimpleType ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SimpleType toSimpleType ( Class clazz ) { return ourClassToSimpleType . get ( clazz ) ; }
void test1 ( ) throws Throwable { Class < ? > class0 = SimpleType . class ; boolean boolean0 = SimpleType . isSimpleType ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimpleType ( Class c ) { return getSimpleTypes ( ) . contains ( c ) ; }
void test2 ( ) throws Throwable { Class < ? > class0 = String . class ; boolean boolean0 = SimpleType . isSimpleType ( class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimpleType ( Class c ) { return getSimpleTypes ( ) . contains ( c ) ; }
void test0 ( ) throws Throwable { FormalParameterFactory formalParameterFactory0 = new FormalParameterFactory ( ) ; String [ ] stringArray0 = new String [ 4 ] ; stringArray0 [ 0 ] = "uRbwbTG ( L : m | $X" ; stringArray0 [ 1 ] = "argument" ; BasicFormalParameter basicFormalParameter0 = ( BasicFormalParameter ) formalParameterFactory0 . toFormalParameter ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FormalParameter toFormalParameter ( String [ ] spec ) throws CommandLineException { FormalParameter form = null ; String err = CommandLineMessages . INVALID_FORMAL_SPEC ; if ( spec . length < 4 ) { String data0 = "Specifications should have at least 4 fields" ; throw new CommandLineException ( err , data0 ) ; } String name = spec [ 0 ] ; if ( null = = name ) { String data0 = "Null property name" ; throw new CommandLineException ( err , data0 ) ; } String formalType = spec [ 1 ] ; if ( null = = formalType ) { String data0 = "null specification type" ; throw new CommandLineException ( err , data0 ) ; } if ( TYPE_SWITCH . equals ( formalType ) ) form = processSwitch ( name , formalType , spec ) ; else if ( TYPE_SWITCH_ARG . equals ( formalType ) ) form = processSwitchArg ( name , formalType , spec ) ; else if ( TYPE_ARGUMENT . equals ( formalType ) ) form = processArgument ( name , formalType , spec ) ; else { String data0 = "unrecognized specification type : " + formalType ; throw new CommandLineException ( err , data0 ) ; } return form ; }
void test1 ( ) throws Throwable { FormalParameterFactory formalParameterFactory0 = new FormalParameterFactory ( ) ; String [ ] stringArray0 = new String [ 8 ] ; stringArray0 [ 0 ] = "switch - arg" ; stringArray0 [ 1 ] = "switch - arg" ; BasicFormalParameter basicFormalParameter0 = ( BasicFormalParameter ) formalParameterFactory0 . toFormalParameter ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FormalParameter toFormalParameter ( String [ ] spec ) throws CommandLineException { FormalParameter form = null ; String err = CommandLineMessages . INVALID_FORMAL_SPEC ; if ( spec . length < 4 ) { String data0 = "Specifications should have at least 4 fields" ; throw new CommandLineException ( err , data0 ) ; } String name = spec [ 0 ] ; if ( null = = name ) { String data0 = "Null property name" ; throw new CommandLineException ( err , data0 ) ; } String formalType = spec [ 1 ] ; if ( null = = formalType ) { String data0 = "null specification type" ; throw new CommandLineException ( err , data0 ) ; } if ( TYPE_SWITCH . equals ( formalType ) ) form = processSwitch ( name , formalType , spec ) ; else if ( TYPE_SWITCH_ARG . equals ( formalType ) ) form = processSwitchArg ( name , formalType , spec ) ; else if ( TYPE_ARGUMENT . equals ( formalType ) ) form = processArgument ( name , formalType , spec ) ; else { String data0 = "unrecognized specification type : " + formalType ; throw new CommandLineException ( err , data0 ) ; } return form ; }
void test5 ( ) throws Throwable { FormalParameterFactory formalParameterFactory0 = new FormalParameterFactory ( ) ; String [ ] stringArray0 = new String [ 6 ] ; stringArray0 [ 0 ] = "^eQ < q$Lck | ; : $E" ; stringArray0 [ 1 ] = "switch" ; BasicFormalParameter basicFormalParameter0 = ( BasicFormalParameter ) formalParameterFactory0 . toFormalParameter ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FormalParameter toFormalParameter ( String [ ] spec ) throws CommandLineException { FormalParameter form = null ; String err = CommandLineMessages . INVALID_FORMAL_SPEC ; if ( spec . length < 4 ) { String data0 = "Specifications should have at least 4 fields" ; throw new CommandLineException ( err , data0 ) ; } String name = spec [ 0 ] ; if ( null = = name ) { String data0 = "Null property name" ; throw new CommandLineException ( err , data0 ) ; } String formalType = spec [ 1 ] ; if ( null = = formalType ) { String data0 = "null specification type" ; throw new CommandLineException ( err , data0 ) ; } if ( TYPE_SWITCH . equals ( formalType ) ) form = processSwitch ( name , formalType , spec ) ; else if ( TYPE_SWITCH_ARG . equals ( formalType ) ) form = processSwitchArg ( name , formalType , spec ) ; else if ( TYPE_ARGUMENT . equals ( formalType ) ) form = processArgument ( name , formalType , spec ) ; else { String data0 = "unrecognized specification type : " + formalType ; throw new CommandLineException ( err , data0 ) ; } return form ; }
void test0 ( ) throws Throwable { Boolean boolean0 = Boolean . TRUE ; Argspec argspec0 = new Argspec ( ( String ) null , ( String ) null , boolean0 , boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Argspec ( String literalName , String virtualName , Boolean acceptsArgument , Boolean requiresArgument ) { init ( ) ; myLiteralName = literalName ; myVirtualName = myLiteralName ; if ( null ! = virtualName ) myLiteralName = virtualName ; if ( null ! = acceptsArgument ) myAcceptsArgument = acceptsArgument . booleanValue ( ) ; if ( null ! = requiresArgument ) myRequiresArgument = requiresArgument . booleanValue ( ) ; }
void test1 ( ) throws Throwable { Argspec argspec0 = new Argspec ( "" , "" , ( Boolean ) null , ( Boolean ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Argspec ( String literalName , String virtualName , Boolean acceptsArgument , Boolean requiresArgument ) { init ( ) ; myLiteralName = literalName ; myVirtualName = myLiteralName ; if ( null ! = virtualName ) myLiteralName = virtualName ; if ( null ! = acceptsArgument ) myAcceptsArgument = acceptsArgument . booleanValue ( ) ; if ( null ! = requiresArgument ) myRequiresArgument = requiresArgument . booleanValue ( ) ; }
void test0 ( ) throws Throwable { BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BasicFormalParameter ( ) { initialize ( ) ; }
void test1 ( ) throws Throwable { BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter ( ( String ) null , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BasicFormalParameter ( ) { initialize ( ) ; }
void test2 ( ) throws Throwable { BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter ( ) ; basicFormalParameter0 . initialize ( " & _3 & \"fUR3" , " & _3 & \"fUR3" , " & _3 & \"fUR3" ) ; boolean boolean0 = basicFormalParameter0 . longFormMatches ( " & _3 & \"fUR3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean longFormMatches ( String actual ) throws CommandLineException ; / * * * Does the formal parameter match the short option specified by the character * argument ? * * @param c The short option character . * @return true if this formal parameter can process the switch , false * otherwise . * @throws Exception * / boolean shortFormMatches ( char c ) throws CommandLineException ; / * * * Process the actual parameter ( s ) , mapping the value ( s ) to properties . * * < P > * For example , if the application has a property called "quietMode" and * the user has specified this with the actual params , then calling this * method would cause the properties object to contain "quietMode = true" . * * @param props The properties object to use . * @param actual The actual parameter that the formal parameter is expected * to process . * * @param argv The entire command line . * @param index The index of the actual parameter in argv . * @return The new value for the index - - - position of the next actual * parameter . * * @throws Exception * / int processSwitch ( Properties props , String actual , String [ ] argv , int index ) throws CommandLineException ; / * * * Can this formal parameter process the argument ? * * @param actual The option passed on the command line . * @return true if the formal can process it , false otherwise . * @throws Exception * / boolean matchesArgument ( String actual ) throws CommandLineException ; / * * * Process an argument . * * @param actual The string passed on the command line . * @param props The properties object where the data should be placed . * @param start The index of the argument on the command line . * @param argv The command line . * @return The index of the next parameter . * @throws Exception * / int processArgument ( String actual , Properties props , int start , String [ ] argv ) throws CommandLineException ; }
void test3 ( ) throws Throwable { BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter ( "X ] eON%$" , "X ] eON%$" , "X ] eON%$" , true ) ; boolean boolean0 = basicFormalParameter0 . shortFormMatches ( 'h' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean shortFormMatches ( char c ) throws CommandLineException ; / * * * Process the actual parameter ( s ) , mapping the value ( s ) to properties . * * < P > * For example , if the application has a property called "quietMode" and * the user has specified this with the actual params , then calling this * method would cause the properties object to contain "quietMode = true" . * * @param props The properties object to use . * @param actual The actual parameter that the formal parameter is expected * to process . * * @param argv The entire command line . * @param index The index of the actual parameter in argv . * @return The new value for the index - - - position of the next actual * parameter . * * @throws Exception * / int processSwitch ( Properties props , String actual , String [ ] argv , int index ) throws CommandLineException ; / * * * Can this formal parameter process the argument ? * * @param actual The option passed on the command line . * @return true if the formal can process it , false otherwise . * @throws Exception * / boolean matchesArgument ( String actual ) throws CommandLineException ; / * * * Process an argument . * * @param actual The string passed on the command line . * @param props The properties object where the data should be placed . * @param start The index of the argument on the command line . * @param argv The command line . * @return The index of the next parameter . * @throws Exception * / int processArgument ( String actual , Properties props , int start , String [ ] argv ) throws CommandLineException ; }
void test4 ( ) throws Throwable { BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter ( ( String ) null , ( String ) null , ( String ) null , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BasicFormalParameter ( ) { initialize ( ) ; }
void test5 ( ) throws Throwable { BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter ( ) ; boolean boolean0 = basicFormalParameter0 . longFormMatches ( "2M1DH8 ) ] . ] 3kV [ U3O9" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean longFormMatches ( String actual ) throws CommandLineException ; / * * * Does the formal parameter match the short option specified by the character * argument ? * * @param c The short option character . * @return true if this formal parameter can process the switch , false * otherwise . * @throws Exception * / boolean shortFormMatches ( char c ) throws CommandLineException ; / * * * Process the actual parameter ( s ) , mapping the value ( s ) to properties . * * < P > * For example , if the application has a property called "quietMode" and * the user has specified this with the actual params , then calling this * method would cause the properties object to contain "quietMode = true" . * * @param props The properties object to use . * @param actual The actual parameter that the formal parameter is expected * to process . * * @param argv The entire command line . * @param index The index of the actual parameter in argv . * @return The new value for the index - - - position of the next actual * parameter . * * @throws Exception * / int processSwitch ( Properties props , String actual , String [ ] argv , int index ) throws CommandLineException ; / * * * Can this formal parameter process the argument ? * * @param actual The option passed on the command line . * @return true if the formal can process it , false otherwise . * @throws Exception * / boolean matchesArgument ( String actual ) throws CommandLineException ; / * * * Process an argument . * * @param actual The string passed on the command line . * @param props The properties object where the data should be placed . * @param start The index of the argument on the command line . * @param argv The command line . * @return The index of the next parameter . * @throws Exception * / int processArgument ( String actual , Properties props , int start , String [ ] argv ) throws CommandLineException ; }
void test6 ( ) throws Throwable { BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter ( ) ; boolean boolean0 = basicFormalParameter0 . shortFormMatches ( 'k' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean shortFormMatches ( char c ) throws CommandLineException ; / * * * Process the actual parameter ( s ) , mapping the value ( s ) to properties . * * < P > * For example , if the application has a property called "quietMode" and * the user has specified this with the actual params , then calling this * method would cause the properties object to contain "quietMode = true" . * * @param props The properties object to use . * @param actual The actual parameter that the formal parameter is expected * to process . * * @param argv The entire command line . * @param index The index of the actual parameter in argv . * @return The new value for the index - - - position of the next actual * parameter . * * @throws Exception * / int processSwitch ( Properties props , String actual , String [ ] argv , int index ) throws CommandLineException ; / * * * Can this formal parameter process the argument ? * * @param actual The option passed on the command line . * @return true if the formal can process it , false otherwise . * @throws Exception * / boolean matchesArgument ( String actual ) throws CommandLineException ; / * * * Process an argument . * * @param actual The string passed on the command line . * @param props The properties object where the data should be placed . * @param start The index of the argument on the command line . * @param argv The command line . * @return The index of the next parameter . * @throws Exception * / int processArgument ( String actual , Properties props , int start , String [ ] argv ) throws CommandLineException ; }
void test7 ( ) throws Throwable { BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter ( "j / : { 4n~7J z" , "j / : { 4n~7J z" , "j / : { 4n~7J z" , false ) ; boolean boolean0 = basicFormalParameter0 . shortFormMatches ( 'j' ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean shortFormMatches ( char c ) throws CommandLineException ; / * * * Process the actual parameter ( s ) , mapping the value ( s ) to properties . * * < P > * For example , if the application has a property called "quietMode" and * the user has specified this with the actual params , then calling this * method would cause the properties object to contain "quietMode = true" . * * @param props The properties object to use . * @param actual The actual parameter that the formal parameter is expected * to process . * * @param argv The entire command line . * @param index The index of the actual parameter in argv . * @return The new value for the index - - - position of the next actual * parameter . * * @throws Exception * / int processSwitch ( Properties props , String actual , String [ ] argv , int index ) throws CommandLineException ; / * * * Can this formal parameter process the argument ? * * @param actual The option passed on the command line . * @return true if the formal can process it , false otherwise . * @throws Exception * / boolean matchesArgument ( String actual ) throws CommandLineException ; / * * * Process an argument . * * @param actual The string passed on the command line . * @param props The properties object where the data should be placed . * @param start The index of the argument on the command line . * @param argv The command line . * @return The index of the next parameter . * @throws Exception * / int processArgument ( String actual , Properties props , int start , String [ ] argv ) throws CommandLineException ; }
void test8 ( ) throws Throwable { BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter ( ) ; boolean boolean0 = basicFormalParameter0 . argumentMatches ( "h . A4MP / 4Yy" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean argumentMatches ( String actual ) throws CommandLineException { return this . acceptsArgument & & this . keepAcceptingArguments ; }
void test9 ( ) throws Throwable { BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter ( "X ] eON%$" , "X ] eON%$" , "X ] eON%$" , true ) ; boolean boolean0 = basicFormalParameter0 . argumentMatches ( "X ] eON%$" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean argumentMatches ( String actual ) throws CommandLineException { return this . acceptsArgument & & this . keepAcceptingArguments ; }
void test10 ( ) throws Throwable { BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter ( ) ; basicFormalParameter0 . initialize ( " & _3 & \"fUR3" ) ; boolean boolean0 = basicFormalParameter0 . argumentMatches ( " & _3 & \"fUR3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean argumentMatches ( String actual ) throws CommandLineException { return this . acceptsArgument & & this . keepAcceptingArguments ; }
void test11 ( ) throws Throwable { BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter ( ) ; basicFormalParameter0 . initialize ( " & _3 & \"fUR3" , " & _3 & \"fUR3" , " & _3 & \"fUR3" ) ; Properties properties0 = new Properties ( ) ; String [ ] stringArray0 = new String [ 12 ] ; int int0 = basicFormalParameter0 . processSwitch ( properties0 , " & _3 & \"fUR3" , stringArray0 , ( - 1896 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test14 ( ) throws Throwable { BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter ( ) ; boolean boolean0 = basicFormalParameter0 . matchesArgument ( "h . A4MP / 4Yy" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchesArgument ( String actual ) throws CommandLineException ; / * * * Process an argument . * * @param actual The string passed on the command line . * @param props The properties object where the data should be placed . * @param start The index of the argument on the command line . * @param argv The command line . * @return The index of the next parameter . * @throws Exception * / int processArgument ( String actual , Properties props , int start , String [ ] argv ) throws CommandLineException ; }
void test15 ( ) throws Throwable { BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter ( ) ; basicFormalParameter0 . initialize ( " & _3 & \"fUR3" ) ; boolean boolean0 = basicFormalParameter0 . matchesArgument ( " & _3 & \"fUR3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchesArgument ( String actual ) throws CommandLineException ; / * * * Process an argument . * * @param actual The string passed on the command line . * @param props The properties object where the data should be placed . * @param start The index of the argument on the command line . * @param argv The command line . * @return The index of the next parameter . * @throws Exception * / int processArgument ( String actual , Properties props , int start , String [ ] argv ) throws CommandLineException ; }
void test16 ( ) throws Throwable { BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter ( ) ; basicFormalParameter0 . initialize ( "h . A4MP / 4Yy" , "h . A4MP / 4Yy" , "h . A4MP / 4Yy" , false ) ; boolean boolean0 = basicFormalParameter0 . matchesArgument ( "h . A4MP / 4Yy" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean matchesArgument ( String actual ) throws CommandLineException ; / * * * Process an argument . * * @param actual The string passed on the command line . * @param props The properties object where the data should be placed . * @param start The index of the argument on the command line . * @param argv The command line . * @return The index of the next parameter . * @throws Exception * / int processArgument ( String actual , Properties props , int start , String [ ] argv ) throws CommandLineException ; }
void test17 ( ) throws Throwable { BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter ( "j / : { 4n~7J z" , "j / : { 4n~7J z" , "j / : { 4n~7J z" , false ) ; Properties properties0 = new Properties ( ) ; String [ ] stringArray0 = new String [ 18 ] ; basicFormalParameter0 . processArgument ( "j / : { 4n~7J z" , properties0 , 1195 , stringArray0 ) ; int int0 = basicFormalParameter0 . processArgument ( "j / : { 4n~7J z" , properties0 , 1195 , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test2 ( ) throws Throwable { CmdlineUtil cmdlineUtil0 = new CmdlineUtil ( ) ; LinkedList < Argspec > linkedList0 = new LinkedList < Argspec > ( ) ; String [ ] stringArray0 = new String [ 7 ] ; stringArray0 [ 0 ] = "" ; stringArray0 [ 1 ] = "" ; stringArray0 [ 2 ] = "" ; stringArray0 [ 3 ] = "" ; stringArray0 [ 4 ] = "" ; stringArray0 [ 5 ] = "" ; stringArray0 [ 6 ] = " + " ; Properties properties0 = new Properties ( ) ; cmdlineUtil0 . processArgv ( ( List ) linkedList0 , stringArray0 , ( Map ) properties0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return myData . size ( ) ; }
void test0 ( ) throws Throwable { IntComparator intComparator0 = new IntComparator ( ) ; Integer integer0 = new Integer ( ( - 1735 ) ) ; int int0 = intComparator0 . compare ( ( Object ) integer0 , ( Object ) integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test3 ( ) throws Throwable { IntComparator intComparator0 = new IntComparator ( ) ; Integer integer0 = new Integer ( 0 ) ; Integer integer1 = new Integer ( ( - 546 ) ) ; int int0 = intComparator0 . compare ( ( Object ) integer0 , ( Object ) integer1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test4 ( ) throws Throwable { IntComparator intComparator0 = new IntComparator ( ) ; Integer integer0 = new Integer ( 0 ) ; Integer integer1 = new Integer ( 1 ) ; int int0 = intComparator0 . compare ( ( Object ) integer0 , ( Object ) integer1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( Object o1 , Object o2 ) { return myRowModel . getComparator ( ) . compare ( o1 , o2 ) ; }
void test0 ( ) throws Throwable { Object object0 = new Object ( ) ; ArrayCompareRecord arrayCompareRecord0 = new ArrayCompareRecord ( 0 , object0 , object0 ) ; String string0 = arrayCompareRecord0 . toLinkString ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLinkString ( boolean first ) { return " [ " + myIndex + " ] " ; }
void test1 ( ) throws Throwable { Object object0 = new Object ( ) ; ArrayCompareRecord arrayCompareRecord0 = new ArrayCompareRecord ( 0 , object0 , object0 ) ; int int0 = arrayCompareRecord0 . getIndex ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getIndex ( ) { if ( null = = myIndex ) myIndex = new Integer ( 0 ) ; return myIndex . intValue ( ) ; }
void test0 ( ) throws Throwable { CompareRecord compareRecord0 = new CompareRecord ( ( Object ) null , ( Object ) null ) ; int int0 = compareRecord0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return myData . hashCode ( ) ; }
void test1 ( ) throws Throwable { Object object0 = new Object ( ) ; CompareRecord compareRecord0 = new CompareRecord ( object0 , object0 ) ; int int0 = compareRecord0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { return myData . hashCode ( ) ; }
void test2 ( ) throws Throwable { CompareRecord compareRecord0 = new CompareRecord ( ( Object ) null , ( Object ) null ) ; boolean boolean0 = compareRecord0 . equals ( ( Object ) compareRecord0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return myData . equals ( o ) ; }
void test3 ( ) throws Throwable { CompareRecord compareRecord0 = new CompareRecord ( ( Object ) null , ( Object ) null ) ; boolean boolean0 = compareRecord0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return myData . equals ( o ) ; }
void test4 ( ) throws Throwable { Object object0 = new Object ( ) ; CompareRecord compareRecord0 = new CompareRecord ( object0 , object0 ) ; boolean boolean0 = compareRecord0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassString ( ) { if ( null = = object1 ) return "null" ; else return object1 . getClass ( ) . getName ( ) ; }
void test5 ( ) throws Throwable { CompareRecord compareRecord0 = new CompareRecord ( ( Object ) null , ( Object ) null ) ; CompareRecord compareRecord1 = new CompareRecord ( ( Object ) compareRecord0 , ( Object ) null ) ; CompareRecord compareRecord2 = new CompareRecord ( ( Object ) null , ( Object ) compareRecord0 ) ; boolean boolean0 = compareRecord1 . equals ( ( Object ) compareRecord2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return myData . equals ( o ) ; }
void test6 ( ) throws Throwable { Object object0 = new Object ( ) ; CompareRecord compareRecord0 = new CompareRecord ( object0 , object0 ) ; CompareRecord compareRecord1 = new CompareRecord ( ( Object ) " ( %d } oBVp0Ga" , ( Object ) compareRecord0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return myData . equals ( o ) ; }
void test7 ( ) throws Throwable { CompareRecord compareRecord0 = new CompareRecord ( ( Object ) null , ( Object ) null ) ; CompareRecord compareRecord1 = new CompareRecord ( ( Object ) compareRecord0 , ( Object ) null ) ; boolean boolean0 = compareRecord1 . equals ( ( Object ) compareRecord0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return myData . equals ( o ) ; }
void test8 ( ) throws Throwable { Object object0 = new Object ( ) ; CompareRecord compareRecord0 = new CompareRecord ( object0 , object0 ) ; String string0 = compareRecord0 . getClassString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassString ( ) { if ( null = = object1 ) return "null" ; else return object1 . getClass ( ) . getName ( ) ; }
void test9 ( ) throws Throwable { CompareRecord compareRecord0 = new CompareRecord ( ( Object ) null , ( Object ) null ) ; String string0 = compareRecord0 . getClassString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClassString ( ) { if ( null = = object1 ) return "null" ; else return object1 . getClass ( ) . getName ( ) ; }
void test10 ( ) throws Throwable { Object object0 = new Object ( ) ; CompareRecord compareRecord0 = new CompareRecord ( object0 , object0 ) ; String string0 = compareRecord0 . toLinkString ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLinkString ( boolean first ) { return " [ " + myIndex + " ] " ; }
void test11 ( ) throws Throwable { CompareRecord compareRecord0 = new CompareRecord ( ( Object ) null , ( Object ) null ) ; String string0 = compareRecord0 . toLinkString ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toLinkString ( boolean first ) { return " [ " + myIndex + " ] " ; }
void test0 ( ) throws Throwable { Locale locale0 = Locale . CANADA_FRENCH ; ObjectPrinter . printObject ( ( Object ) locale0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void printObject ( IndentingPrintWriter out , Object value , String tagname ) throws LTSException { printComment ( out , value ) ; AbstractTag t = OBJECT_TAG ; if ( null = = tagname ) tagname = t . getTagName ( value ) ; t . write ( this , out , tagname , value ) ; }
void test1 ( ) throws Throwable { ObjectPrinter objectPrinter0 = new ObjectPrinter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { StringWriter stringWriter0 = new StringWriter ( 277 ) ; ObjectPrinter . printObject ( ( Object ) stringWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( eventTypeToString ( myEventType ) ) ; sb . append ( " , " ) ; sb . append ( myOldIndex ) ; sb . append ( " , " ) ; sb . append ( myNewIndex ) ; return sb . toString ( ) ; }
