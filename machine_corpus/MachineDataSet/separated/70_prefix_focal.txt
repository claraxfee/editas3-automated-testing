void test0 ( ) throws Throwable { TestDspace2HubPackager testDspace2HubPackager0 = new TestDspace2HubPackager ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { PackageDissemination packageDissemination0 = new PackageDissemination ( ( Logger ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PackageDissemination ( ) { logger = Logger . getLogger ( "console" ) ; }
void test0 ( ) throws Throwable { FlexibleLayout flexibleLayout0 = new FlexibleLayout ( ) ; flexibleLayout0 . activateOptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void activateOptions ( ) { / / TODO Auto - generated method stub }
void test1 ( ) throws Throwable { FlexibleLayout flexibleLayout0 = new FlexibleLayout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ignoresThrowable ( ) { return false ; }
void test0 ( ) throws Throwable { ConsoleAuthenticator consoleAuthenticator0 = new ConsoleAuthenticator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ConsoleAuthenticator ( ) { un = null ; pass = null ; }
void test1 ( ) throws Throwable { SWORDUtils sWORDUtils0 = new SWORDUtils ( ) ; StringBuffer stringBuffer0 = new StringBuffer ( "3bn * - f" ) ; Integer integer0 = JLayeredPane . PALETTE_LAYER ; sWORDUtils0 . addTableRow ( stringBuffer0 , "Name" , ( Object ) integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { SWORDUtils sWORDUtils0 = new SWORDUtils ( ) ; DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument ( ) ; JTextPane jTextPane0 = new JTextPane ( ( StyledDocument ) defaultStyledDocument0 ) ; sWORDUtils0 . showCollection ( ( Collection ) null , ( JEditorPane ) jTextPane0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { SWORDUtils sWORDUtils0 = new SWORDUtils ( ) ; JEditorPane jEditorPane0 = new JEditorPane ( " ) A ; D0n ! m / " , " ) A ; D0n ! m / " ) ; sWORDUtils0 . showEntry ( ( SWORDEntry ) null , jEditorPane0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { JTextPane jTextPane0 = new JTextPane ( ) ; JTextPaneAppender jTextPaneAppender0 = new JTextPaneAppender ( jTextPane0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean requiresLayout ( ) { return false ; }
void test1 ( ) throws Throwable { JTextPane jTextPane0 = new JTextPane ( ) ; JTextPaneAppender jTextPaneAppender0 = new JTextPaneAppender ( jTextPane0 ) ; jTextPaneAppender0 . finalize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean requiresLayout ( ) { return false ; }
void test0 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; Iterator < Object > iterator0 = haSNamespaceContext0 . getPrefixes ( "rel" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Iterator getPrefixes ( String namespaceURI ) { / / TODO Auto - generated method stub return null ; }
void test1 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; String string0 = haSNamespaceContext0 . getNamespaceURI ( "rel" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNamespaceURI ( String prefix ) { if ( prefix . equals ( "mets" ) ) return "http : / / www . loc . gov / METS / " ; else if ( prefix . equals ( "xlink" ) ) return "http : / / www . w3 . org / 1999 / xlink" ; else if ( prefix . equals ( "mods" ) ) return "http : / / www . loc . gov / mods / v3" ; else if ( prefix . equals ( "premis" ) ) return "http : / / www . loc . gov / standards / premis / v1" ; else if ( prefix . equals ( "fedora" ) ) return "http : / / www . fedora . info / definitions / 1 / 0 / types / " ; else if ( prefix . equals ( "xml" ) ) return "http : / / www . w3 . org / XML / 1998 / namespace" ; else if ( prefix . equals ( "rel" ) ) return "info : fedora / fedora - system : def / relations - external#" ; else return XMLConstants . NULL_NS_URI ; }
void test2 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; String string0 = haSNamespaceContext0 . getNamespaceURI ( "mets" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNamespaceURI ( String prefix ) { if ( prefix . equals ( "mets" ) ) return "http : / / www . loc . gov / METS / " ; else if ( prefix . equals ( "xlink" ) ) return "http : / / www . w3 . org / 1999 / xlink" ; else if ( prefix . equals ( "mods" ) ) return "http : / / www . loc . gov / mods / v3" ; else if ( prefix . equals ( "premis" ) ) return "http : / / www . loc . gov / standards / premis / v1" ; else if ( prefix . equals ( "fedora" ) ) return "http : / / www . fedora . info / definitions / 1 / 0 / types / " ; else if ( prefix . equals ( "xml" ) ) return "http : / / www . w3 . org / XML / 1998 / namespace" ; else if ( prefix . equals ( "rel" ) ) return "info : fedora / fedora - system : def / relations - external#" ; else return XMLConstants . NULL_NS_URI ; }
void test3 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; String string0 = haSNamespaceContext0 . getNamespaceURI ( "xlink" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNamespaceURI ( String prefix ) { if ( prefix . equals ( "mets" ) ) return "http : / / www . loc . gov / METS / " ; else if ( prefix . equals ( "xlink" ) ) return "http : / / www . w3 . org / 1999 / xlink" ; else if ( prefix . equals ( "mods" ) ) return "http : / / www . loc . gov / mods / v3" ; else if ( prefix . equals ( "premis" ) ) return "http : / / www . loc . gov / standards / premis / v1" ; else if ( prefix . equals ( "fedora" ) ) return "http : / / www . fedora . info / definitions / 1 / 0 / types / " ; else if ( prefix . equals ( "xml" ) ) return "http : / / www . w3 . org / XML / 1998 / namespace" ; else if ( prefix . equals ( "rel" ) ) return "info : fedora / fedora - system : def / relations - external#" ; else return XMLConstants . NULL_NS_URI ; }
void test4 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; String string0 = haSNamespaceContext0 . getNamespaceURI ( "mods" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNamespaceURI ( String prefix ) { if ( prefix . equals ( "mets" ) ) return "http : / / www . loc . gov / METS / " ; else if ( prefix . equals ( "xlink" ) ) return "http : / / www . w3 . org / 1999 / xlink" ; else if ( prefix . equals ( "mods" ) ) return "http : / / www . loc . gov / mods / v3" ; else if ( prefix . equals ( "premis" ) ) return "http : / / www . loc . gov / standards / premis / v1" ; else if ( prefix . equals ( "fedora" ) ) return "http : / / www . fedora . info / definitions / 1 / 0 / types / " ; else if ( prefix . equals ( "xml" ) ) return "http : / / www . w3 . org / XML / 1998 / namespace" ; else if ( prefix . equals ( "rel" ) ) return "info : fedora / fedora - system : def / relations - external#" ; else return XMLConstants . NULL_NS_URI ; }
void test5 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; String string0 = haSNamespaceContext0 . getNamespaceURI ( "premis" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNamespaceURI ( String prefix ) { if ( prefix . equals ( "mets" ) ) return "http : / / www . loc . gov / METS / " ; else if ( prefix . equals ( "xlink" ) ) return "http : / / www . w3 . org / 1999 / xlink" ; else if ( prefix . equals ( "mods" ) ) return "http : / / www . loc . gov / mods / v3" ; else if ( prefix . equals ( "premis" ) ) return "http : / / www . loc . gov / standards / premis / v1" ; else if ( prefix . equals ( "fedora" ) ) return "http : / / www . fedora . info / definitions / 1 / 0 / types / " ; else if ( prefix . equals ( "xml" ) ) return "http : / / www . w3 . org / XML / 1998 / namespace" ; else if ( prefix . equals ( "rel" ) ) return "info : fedora / fedora - system : def / relations - external#" ; else return XMLConstants . NULL_NS_URI ; }
void test6 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; String string0 = haSNamespaceContext0 . getNamespaceURI ( "fedora" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNamespaceURI ( String prefix ) { if ( prefix . equals ( "mets" ) ) return "http : / / www . loc . gov / METS / " ; else if ( prefix . equals ( "xlink" ) ) return "http : / / www . w3 . org / 1999 / xlink" ; else if ( prefix . equals ( "mods" ) ) return "http : / / www . loc . gov / mods / v3" ; else if ( prefix . equals ( "premis" ) ) return "http : / / www . loc . gov / standards / premis / v1" ; else if ( prefix . equals ( "fedora" ) ) return "http : / / www . fedora . info / definitions / 1 / 0 / types / " ; else if ( prefix . equals ( "xml" ) ) return "http : / / www . w3 . org / XML / 1998 / namespace" ; else if ( prefix . equals ( "rel" ) ) return "info : fedora / fedora - system : def / relations - external#" ; else return XMLConstants . NULL_NS_URI ; }
void test7 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; String string0 = haSNamespaceContext0 . getNamespaceURI ( "xml" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNamespaceURI ( String prefix ) { if ( prefix . equals ( "mets" ) ) return "http : / / www . loc . gov / METS / " ; else if ( prefix . equals ( "xlink" ) ) return "http : / / www . w3 . org / 1999 / xlink" ; else if ( prefix . equals ( "mods" ) ) return "http : / / www . loc . gov / mods / v3" ; else if ( prefix . equals ( "premis" ) ) return "http : / / www . loc . gov / standards / premis / v1" ; else if ( prefix . equals ( "fedora" ) ) return "http : / / www . fedora . info / definitions / 1 / 0 / types / " ; else if ( prefix . equals ( "xml" ) ) return "http : / / www . w3 . org / XML / 1998 / namespace" ; else if ( prefix . equals ( "rel" ) ) return "info : fedora / fedora - system : def / relations - external#" ; else return XMLConstants . NULL_NS_URI ; }
void test8 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; String string0 = haSNamespaceContext0 . getNamespaceURI ( "F { w" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNamespaceURI ( String prefix ) { if ( prefix . equals ( "mets" ) ) return "http : / / www . loc . gov / METS / " ; else if ( prefix . equals ( "xlink" ) ) return "http : / / www . w3 . org / 1999 / xlink" ; else if ( prefix . equals ( "mods" ) ) return "http : / / www . loc . gov / mods / v3" ; else if ( prefix . equals ( "premis" ) ) return "http : / / www . loc . gov / standards / premis / v1" ; else if ( prefix . equals ( "fedora" ) ) return "http : / / www . fedora . info / definitions / 1 / 0 / types / " ; else if ( prefix . equals ( "xml" ) ) return "http : / / www . w3 . org / XML / 1998 / namespace" ; else if ( prefix . equals ( "rel" ) ) return "info : fedora / fedora - system : def / relations - external#" ; else return XMLConstants . NULL_NS_URI ; }
void test9 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; String string0 = haSNamespaceContext0 . getPrefix ( "U } o`4AX2^4 { XV$ > Zj" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( String namespaceURI ) { if ( namespaceURI . equals ( "http : / / www . loc . gov / METS / " ) ) return "mets" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / 1999 / xlink" ) ) return "xlink" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / mods / v3" ) ) return "mods" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / standards / premis / v1" ) ) return "premis" ; else if ( namespaceURI . equals ( "http : / / www . fedora . info / definitions / 1 / 0 / types / " ) ) return "fedora" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / XML / 1998 / namespace" ) ) return "xml" ; else if ( namespaceURI . equals ( "info : fedora / fedora - system : def / relations - external#" ) ) return "rel" ; else return null ; }
void test10 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; String string0 = haSNamespaceContext0 . getPrefix ( "http : / / www . loc . gov / METS / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( String namespaceURI ) { if ( namespaceURI . equals ( "http : / / www . loc . gov / METS / " ) ) return "mets" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / 1999 / xlink" ) ) return "xlink" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / mods / v3" ) ) return "mods" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / standards / premis / v1" ) ) return "premis" ; else if ( namespaceURI . equals ( "http : / / www . fedora . info / definitions / 1 / 0 / types / " ) ) return "fedora" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / XML / 1998 / namespace" ) ) return "xml" ; else if ( namespaceURI . equals ( "info : fedora / fedora - system : def / relations - external#" ) ) return "rel" ; else return null ; }
void test11 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; String string0 = haSNamespaceContext0 . getPrefix ( "http : / / www . w3 . org / 1999 / xlink" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( String namespaceURI ) { if ( namespaceURI . equals ( "http : / / www . loc . gov / METS / " ) ) return "mets" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / 1999 / xlink" ) ) return "xlink" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / mods / v3" ) ) return "mods" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / standards / premis / v1" ) ) return "premis" ; else if ( namespaceURI . equals ( "http : / / www . fedora . info / definitions / 1 / 0 / types / " ) ) return "fedora" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / XML / 1998 / namespace" ) ) return "xml" ; else if ( namespaceURI . equals ( "info : fedora / fedora - system : def / relations - external#" ) ) return "rel" ; else return null ; }
void test12 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; String string0 = haSNamespaceContext0 . getPrefix ( "http : / / www . loc . gov / mods / v3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( String namespaceURI ) { if ( namespaceURI . equals ( "http : / / www . loc . gov / METS / " ) ) return "mets" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / 1999 / xlink" ) ) return "xlink" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / mods / v3" ) ) return "mods" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / standards / premis / v1" ) ) return "premis" ; else if ( namespaceURI . equals ( "http : / / www . fedora . info / definitions / 1 / 0 / types / " ) ) return "fedora" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / XML / 1998 / namespace" ) ) return "xml" ; else if ( namespaceURI . equals ( "info : fedora / fedora - system : def / relations - external#" ) ) return "rel" ; else return null ; }
void test13 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; String string0 = haSNamespaceContext0 . getPrefix ( "http : / / www . loc . gov / standards / premis / v1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( String namespaceURI ) { if ( namespaceURI . equals ( "http : / / www . loc . gov / METS / " ) ) return "mets" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / 1999 / xlink" ) ) return "xlink" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / mods / v3" ) ) return "mods" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / standards / premis / v1" ) ) return "premis" ; else if ( namespaceURI . equals ( "http : / / www . fedora . info / definitions / 1 / 0 / types / " ) ) return "fedora" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / XML / 1998 / namespace" ) ) return "xml" ; else if ( namespaceURI . equals ( "info : fedora / fedora - system : def / relations - external#" ) ) return "rel" ; else return null ; }
void test14 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; String string0 = haSNamespaceContext0 . getPrefix ( "http : / / www . fedora . info / definitions / 1 / 0 / types / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( String namespaceURI ) { if ( namespaceURI . equals ( "http : / / www . loc . gov / METS / " ) ) return "mets" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / 1999 / xlink" ) ) return "xlink" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / mods / v3" ) ) return "mods" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / standards / premis / v1" ) ) return "premis" ; else if ( namespaceURI . equals ( "http : / / www . fedora . info / definitions / 1 / 0 / types / " ) ) return "fedora" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / XML / 1998 / namespace" ) ) return "xml" ; else if ( namespaceURI . equals ( "info : fedora / fedora - system : def / relations - external#" ) ) return "rel" ; else return null ; }
void test15 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; String string0 = haSNamespaceContext0 . getPrefix ( "http : / / www . w3 . org / XML / 1998 / namespace" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( String namespaceURI ) { if ( namespaceURI . equals ( "http : / / www . loc . gov / METS / " ) ) return "mets" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / 1999 / xlink" ) ) return "xlink" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / mods / v3" ) ) return "mods" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / standards / premis / v1" ) ) return "premis" ; else if ( namespaceURI . equals ( "http : / / www . fedora . info / definitions / 1 / 0 / types / " ) ) return "fedora" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / XML / 1998 / namespace" ) ) return "xml" ; else if ( namespaceURI . equals ( "info : fedora / fedora - system : def / relations - external#" ) ) return "rel" ; else return null ; }
void test16 ( ) throws Throwable { HaSNamespaceContext haSNamespaceContext0 = new HaSNamespaceContext ( ) ; String string0 = haSNamespaceContext0 . getPrefix ( "info : fedora / fedora - system : def / relations - external#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( String namespaceURI ) { if ( namespaceURI . equals ( "http : / / www . loc . gov / METS / " ) ) return "mets" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / 1999 / xlink" ) ) return "xlink" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / mods / v3" ) ) return "mods" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / standards / premis / v1" ) ) return "premis" ; else if ( namespaceURI . equals ( "http : / / www . fedora . info / definitions / 1 / 0 / types / " ) ) return "fedora" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / XML / 1998 / namespace" ) ) return "xml" ; else if ( namespaceURI . equals ( "info : fedora / fedora - system : def / relations - external#" ) ) return "rel" ; else return null ; }
void test0 ( ) throws Throwable { HaSFileUtils haSFileUtils0 = new HaSFileUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { File file0 = new File ( "Q" ) ; boolean boolean0 = HaSFileUtils . deleteDirectory ( file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean deleteDirectory ( File path ) { boolean success = false ; if ( path . exists ( ) ) { File [ ] files = path . listFiles ( ) ; for ( int i = 0 ; i < files . length ; i + + ) { if ( files [ i ] . isDirectory ( ) ) { deleteDirectory ( files [ i ] ) ; } files [ i ] . delete ( ) ; } success = path . delete ( ) ; } return ( success ) ; }
void test5 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 8 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; HaSFileUtils . getBase64MD5 ( ( InputStream ) byteArrayInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBase64MD5 ( File f ) throws IOException { HaSChecksummer summer = new HaSChecksummer ( ) ; CheckedInputStream is = new CheckedInputStream ( new FileInputStream ( f ) , summer ) ; byte [ ] buf = new byte [ ( int ) f . length ( ) ] ; while ( is . read ( buf ) ! = - 1 ) { / / do nothing - - just read } is . close ( ) ; return summer . getBase64EncodedMD5 ( ) ; }
void test1 ( ) throws Throwable { HaSZipUtils haSZipUtils0 = new HaSZipUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; SequenceInputStream sequenceInputStream0 = new SequenceInputStream ( ( InputStream ) pipedInputStream0 , ( InputStream ) pipedInputStream0 ) ; ZipInputStream zipInputStream0 = new ZipInputStream ( ( InputStream ) sequenceInputStream0 ) ; ZipInputStream zipInputStream1 = new ZipInputStream ( ( InputStream ) zipInputStream0 ) ; File file0 = HaSZipUtils . unzip ( zipInputStream1 , " / . . / " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
void test0 ( ) throws Throwable { Date date0 = new Date ( 0L ) ; String string0 = HaSDateFormatter . formatDateForHTTP ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatDateForHTTP ( Date d ) { SimpleDateFormat sdf = new SimpleDateFormat ( ) ; sdf . setTimeZone ( TimeZone . getTimeZone ( "GMT" ) ) ; sdf . applyPattern ( "EEE , dd MMM yyyy kk : mm : ss zzz" ) ; return sdf . format ( d ) ; }
void test0 ( ) throws Throwable { HaSChecksummer haSChecksummer0 = new HaSChecksummer ( ) ; MessageDigest messageDigest0 = haSChecksummer0 . getSha1Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
void test1 ( ) throws Throwable { HaSChecksummer haSChecksummer0 = new HaSChecksummer ( ) ; MessageDigest messageDigest0 = haSChecksummer0 . getMd5Digest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MessageDigest getMd5Digest ( ) { return md5 ; }
void test2 ( ) throws Throwable { HaSChecksummer haSChecksummer0 = new HaSChecksummer ( ) ; CRC32 cRC32_0 = haSChecksummer0 . getCRC32 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getValue ( ) { return crc32 . getValue ( ) ; }
void test3 ( ) throws Throwable { HaSChecksummer haSChecksummer0 = new HaSChecksummer ( ) ; long long0 = haSChecksummer0 . getLongCRC32 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLongCRC32 ( ) { return crc32 . getValue ( ) ; }
void test4 ( ) throws Throwable { HaSChecksummer haSChecksummer0 = new HaSChecksummer ( ) ; long long0 = haSChecksummer0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getValue ( ) { return crc32 . getValue ( ) ; }
void test5 ( ) throws Throwable { HaSChecksummer haSChecksummer0 = new HaSChecksummer ( ) ; haSChecksummer0 . update ( ( - 56 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getValue ( ) { return crc32 . getValue ( ) ; }
void test6 ( ) throws Throwable { HaSChecksummer haSChecksummer0 = new HaSChecksummer ( ) ; haSChecksummer0 . update ( 1808 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLongCRC32 ( ) { return crc32 . getValue ( ) ; }
void test7 ( ) throws Throwable { HaSChecksummer haSChecksummer0 = new HaSChecksummer ( ) ; byte [ ] byteArray0 = new byte [ 9 ] ; haSChecksummer0 . update ( byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBase64EncodedSHA1 ( ) { String value = null ; if ( sha1 ! = null ) { value = new String ( Base64 . encodeBase64 ( sha1 . digest ( ) ) ) ; } return value ; }
void test8 ( ) throws Throwable { HaSChecksummer haSChecksummer0 = new HaSChecksummer ( ) ; byte [ ] byteArray0 = new byte [ 2 ] ; haSChecksummer0 . update ( byteArray0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLongCRC32 ( ) { return crc32 . getValue ( ) ; }
void test9 ( ) throws Throwable { HaSChecksummer haSChecksummer0 = new HaSChecksummer ( ) ; String string0 = haSChecksummer0 . getBase64EncodedSHA1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBase64EncodedSHA1 ( ) { String value = null ; if ( sha1 ! = null ) { value = new String ( Base64 . encodeBase64 ( sha1 . digest ( ) ) ) ; } return value ; }
void test10 ( ) throws Throwable { HaSChecksummer haSChecksummer0 = new HaSChecksummer ( ) ; String string0 = haSChecksummer0 . getHexEncodedMD5 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHexEncodedMD5 ( ) { String value = null ; if ( md5 ! = null ) { value = new String ( Hex . encodeHex ( md5 . digest ( ) ) ) ; } return value ; }
void test11 ( ) throws Throwable { HaSChecksummer haSChecksummer0 = new HaSChecksummer ( ) ; String string0 = haSChecksummer0 . getHexEncodedSHA1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHexEncodedSHA1 ( ) { String value = null ; if ( sha1 ! = null ) { value = new String ( Hex . encodeHex ( sha1 . digest ( ) ) ) ; } return value ; }
void test12 ( ) throws Throwable { HaSChecksummer haSChecksummer0 = new HaSChecksummer ( ) ; String string0 = haSChecksummer0 . getBase64EncodedMD5 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBase64EncodedMD5 ( ) { String value = null ; if ( md5 ! = null ) { value = new String ( Base64 . encodeBase64 ( md5 . digest ( ) ) ) ; } return value ; }
void test0 ( ) throws Throwable { WAVSpecificApplicator wAVSpecificApplicator0 = new WAVSpecificApplicator ( ) ; Mdtype mdtype0 = wAVSpecificApplicator0 . specificMetadataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
void test1 ( ) throws Throwable { WAVSpecificApplicator wAVSpecificApplicator0 = new WAVSpecificApplicator ( ) ; String string0 = wAVSpecificApplicator0 . XSLName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String XSLName ( ) { return "utf8 - to - textmd . xsl" ; }
void test2 ( ) throws Throwable { WAVSpecificApplicator wAVSpecificApplicator0 = new WAVSpecificApplicator ( ) ; String string0 = wAVSpecificApplicator0 . specificMetadataOtherMDType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String specificMetadataOtherMDType ( ) { return "TEXTMD" ; }
void test0 ( ) throws Throwable { AIFFSpecificApplicator aIFFSpecificApplicator0 = new AIFFSpecificApplicator ( ) ; String string0 = aIFFSpecificApplicator0 . XSLName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String XSLName ( ) { return "utf8 - to - textmd . xsl" ; }
void test1 ( ) throws Throwable { AIFFSpecificApplicator aIFFSpecificApplicator0 = new AIFFSpecificApplicator ( ) ; Mdtype mdtype0 = aIFFSpecificApplicator0 . specificMetadataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
void test2 ( ) throws Throwable { AIFFSpecificApplicator aIFFSpecificApplicator0 = new AIFFSpecificApplicator ( ) ; String string0 = aIFFSpecificApplicator0 . specificMetadataOtherMDType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String specificMetadataOtherMDType ( ) { return "TEXTMD" ; }
void test0 ( ) throws Throwable { XMLSpecificApplicator xMLSpecificApplicator0 = new XMLSpecificApplicator ( ) ; Mdtype mdtype0 = xMLSpecificApplicator0 . specificMetadataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
void test1 ( ) throws Throwable { XMLSpecificApplicator xMLSpecificApplicator0 = new XMLSpecificApplicator ( ) ; String string0 = xMLSpecificApplicator0 . XSLName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String XSLName ( ) { return "utf8 - to - textmd . xsl" ; }
void test2 ( ) throws Throwable { XMLSpecificApplicator xMLSpecificApplicator0 = new XMLSpecificApplicator ( ) ; String string0 = xMLSpecificApplicator0 . specificMetadataOtherMDType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String specificMetadataOtherMDType ( ) { return "TEXTMD" ; }
void test0 ( ) throws Throwable { UTFSpecificApplicator uTFSpecificApplicator0 = new UTFSpecificApplicator ( ) ; String string0 = uTFSpecificApplicator0 . specificMetadataOtherMDType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String specificMetadataOtherMDType ( ) { return "TEXTMD" ; }
void test1 ( ) throws Throwable { UTFSpecificApplicator uTFSpecificApplicator0 = new UTFSpecificApplicator ( ) ; Mdtype mdtype0 = uTFSpecificApplicator0 . specificMetadataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
void test2 ( ) throws Throwable { UTFSpecificApplicator uTFSpecificApplicator0 = new UTFSpecificApplicator ( ) ; String string0 = uTFSpecificApplicator0 . XSLName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String XSLName ( ) { return "utf8 - to - textmd . xsl" ; }
void test0 ( ) throws Throwable { ASCIISpecificApplicator aSCIISpecificApplicator0 = new ASCIISpecificApplicator ( ) ; String string0 = aSCIISpecificApplicator0 . XSLName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String XSLName ( ) { return "utf8 - to - textmd . xsl" ; }
void test1 ( ) throws Throwable { ASCIISpecificApplicator aSCIISpecificApplicator0 = new ASCIISpecificApplicator ( ) ; Mdtype mdtype0 = aSCIISpecificApplicator0 . specificMetadataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
void test2 ( ) throws Throwable { ASCIISpecificApplicator aSCIISpecificApplicator0 = new ASCIISpecificApplicator ( ) ; String string0 = aSCIISpecificApplicator0 . specificMetadataOtherMDType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String specificMetadataOtherMDType ( ) { return "TEXTMD" ; }
void test0 ( ) throws Throwable { TechMDInvestigator techMDInvestigator0 = new TechMDInvestigator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl ( ) ; String string0 = TechMDInvestigator . determineModule ( ( Node ) hTMLDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String determineModule ( Node jhoveInput ) throws XPathExpressionException { XPath xpath = XPathFactory . newInstance ( ) . newXPath ( ) ; xpath . setNamespaceContext ( JhoveNamespaceContext . getInstance ( ) ) ; String mime = xpath . evaluate ( " / jhove : jhove / jhove : repInfo / jhove : mimeType" , jhoveInput ) ; return mime ; }
void test2 ( ) throws Throwable { XSLTTraceListener xSLTTraceListener0 = new XSLTTraceListener ( ) ; PrintStream printStream0 = xSLTTraceListener0 . getOutputDestination ( ) ; TechMDInvestigator . XMLToStream ( ( Node ) null , printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void XMLToStream ( Node n , PrintStream stream ) throws Exception { if ( n ! = null ) { TransformerFactory tf = TransformerFactory . newInstance ( ) ; Transformer t = tf . newTransformer ( ) ; t . setOutputProperty ( OutputKeys . INDENT , "yes" ) ; Source s = new DOMSource ( n ) ; t . transform ( s , new StreamResult ( stream ) ) ; stream . println ( "\n" ) ; } }
void test3 ( ) throws Throwable { HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl ( ) ; XSLTTraceListener xSLTTraceListener0 = new XSLTTraceListener ( ) ; PrintStream printStream0 = xSLTTraceListener0 . getOutputDestination ( ) ; TechMDInvestigator . XMLToStream ( ( Node ) hTMLDocumentImpl0 , printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void XMLToStream ( Node n , PrintStream stream ) throws Exception { if ( n ! = null ) { TransformerFactory tf = TransformerFactory . newInstance ( ) ; Transformer t = tf . newTransformer ( ) ; t . setOutputProperty ( OutputKeys . INDENT , "yes" ) ; Source s = new DOMSource ( n ) ; t . transform ( s , new StreamResult ( stream ) ) ; stream . println ( "\n" ) ; } }
void test0 ( ) throws Throwable { TIFFSpecificApplicator tIFFSpecificApplicator0 = new TIFFSpecificApplicator ( ) ; Mdtype mdtype0 = tIFFSpecificApplicator0 . specificMetadataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
void test1 ( ) throws Throwable { TIFFSpecificApplicator tIFFSpecificApplicator0 = new TIFFSpecificApplicator ( ) ; String string0 = tIFFSpecificApplicator0 . specificMetadataOtherMDType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String specificMetadataOtherMDType ( ) { return "TEXTMD" ; }
void test2 ( ) throws Throwable { TIFFSpecificApplicator tIFFSpecificApplicator0 = new TIFFSpecificApplicator ( ) ; String string0 = tIFFSpecificApplicator0 . XSLName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String XSLName ( ) { return "utf8 - to - textmd . xsl" ; }
void test1 ( ) throws Throwable { PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl ( ) ; JPGSpecificApplicator jPGSpecificApplicator0 = new JPGSpecificApplicator ( ) ; PSVIDocumentImpl pSVIDocumentImpl1 = ( PSVIDocumentImpl ) jPGSpecificApplicator0 . postProcess ( ( Node ) pSVIDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Node postProcess ( Node n ) { return n ; }
void test1 ( ) throws Throwable { JhoveNamespaceContext jhoveNamespaceContext0 = JhoveNamespaceContext . getInstance ( ) ; String string0 = jhoveNamespaceContext0 . getNamespaceURI ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNamespaceURI ( String prefix ) { if ( prefix . equals ( "mets" ) ) return "http : / / www . loc . gov / METS / " ; else if ( prefix . equals ( "xlink" ) ) return "http : / / www . w3 . org / 1999 / xlink" ; else if ( prefix . equals ( "mods" ) ) return "http : / / www . loc . gov / mods / v3" ; else if ( prefix . equals ( "premis" ) ) return "http : / / www . loc . gov / standards / premis / v1" ; else if ( prefix . equals ( "fedora" ) ) return "http : / / www . fedora . info / definitions / 1 / 0 / types / " ; else if ( prefix . equals ( "xml" ) ) return "http : / / www . w3 . org / XML / 1998 / namespace" ; else if ( prefix . equals ( "rel" ) ) return "info : fedora / fedora - system : def / relations - external#" ; else return XMLConstants . NULL_NS_URI ; }
void test2 ( ) throws Throwable { JhoveNamespaceContext jhoveNamespaceContext0 = JhoveNamespaceContext . getInstance ( ) ; String string0 = jhoveNamespaceContext0 . getPrefix ( "http : / / hul . harvard . edu / ois / xml / ns / jhove" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( String namespaceURI ) { if ( namespaceURI . equals ( "http : / / www . loc . gov / METS / " ) ) return "mets" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / 1999 / xlink" ) ) return "xlink" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / mods / v3" ) ) return "mods" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / standards / premis / v1" ) ) return "premis" ; else if ( namespaceURI . equals ( "http : / / www . fedora . info / definitions / 1 / 0 / types / " ) ) return "fedora" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / XML / 1998 / namespace" ) ) return "xml" ; else if ( namespaceURI . equals ( "info : fedora / fedora - system : def / relations - external#" ) ) return "rel" ; else return null ; }
void test3 ( ) throws Throwable { JhoveNamespaceContext jhoveNamespaceContext0 = JhoveNamespaceContext . getInstance ( ) ; String string0 = jhoveNamespaceContext0 . getPrefix ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( String namespaceURI ) { if ( namespaceURI . equals ( "http : / / www . loc . gov / METS / " ) ) return "mets" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / 1999 / xlink" ) ) return "xlink" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / mods / v3" ) ) return "mods" ; else if ( namespaceURI . equals ( "http : / / www . loc . gov / standards / premis / v1" ) ) return "premis" ; else if ( namespaceURI . equals ( "http : / / www . fedora . info / definitions / 1 / 0 / types / " ) ) return "fedora" ; else if ( namespaceURI . equals ( "http : / / www . w3 . org / XML / 1998 / namespace" ) ) return "xml" ; else if ( namespaceURI . equals ( "info : fedora / fedora - system : def / relations - external#" ) ) return "rel" ; else return null ; }
void test4 ( ) throws Throwable { JhoveNamespaceContext jhoveNamespaceContext0 = JhoveNamespaceContext . getInstance ( ) ; Iterator < Object > iterator0 = jhoveNamespaceContext0 . getPrefixes ( "http : / / hul . harvard . edu / ois / xml / ns / jhove" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Iterator getPrefixes ( String namespaceURI ) { / / TODO Auto - generated method stub return null ; }
void test5 ( ) throws Throwable { JhoveNamespaceContext jhoveNamespaceContext0 = JhoveNamespaceContext . getInstance ( ) ; Iterator < Object > iterator0 = jhoveNamespaceContext0 . getPrefixes ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Iterator getPrefixes ( String namespaceURI ) { / / TODO Auto - generated method stub return null ; }
void test0 ( ) throws Throwable { TrivialPremisIDGenerator trivialPremisIDGenerator0 = new TrivialPremisIDGenerator ( ) ; File file0 = new File ( ) ; String string0 = trivialPremisIDGenerator0 . idValue ( ( String ) null , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String idValue ( String filePath , File file ) ; }
void test1 ( ) throws Throwable { TrivialPremisIDGenerator trivialPremisIDGenerator0 = new TrivialPremisIDGenerator ( ) ; File file0 = new File ( ) ; String string0 = trivialPremisIDGenerator0 . idType ( "" , file0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String idType ( String filePath , File file ) ; / * * * * @param filePath - path to the file * @param file - Harvard METS API File object from the METS file * @return - PREMIS id value * / String idValue ( String filePath , File file ) ; }
void test0 ( ) throws Throwable { HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl ( ) ; String string0 = JhoveValidator . determineChecksum ( ( Node ) hTMLDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String determineChecksum ( Node jhoveInput ) throws XPathExpressionException { XPath xpath = XPathFactory . newInstance ( ) . newXPath ( ) ; xpath . setNamespaceContext ( JhoveNamespaceContext . getInstance ( ) ) ; return xpath . evaluate ( " / jhove : jhove / jhove : repInfo / jhove : checksums / jhove : checksum [ @type = 'MD5' ] " , jhoveInput ) ; }
void test2 ( ) throws Throwable { JhoveValidator jhoveValidator0 = new JhoveValidator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { JhoveResult jhoveResult0 = new JhoveResult ( ) ; Mdtype mdtype0 = jhoveResult0 . getSpecificMetadataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Mdtype getSpecificMetadataType ( ) { return specificMetadataType ; }
void test2 ( ) throws Throwable { HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl ( ) ; DocumentTypeImpl documentTypeImpl0 = ( DocumentTypeImpl ) hTMLDocumentImpl0 . createDocumentType ( "" , "" , " ( On ? eP3 , SNaIf ) Tk" ) ; JhoveResult jhoveResult0 = new JhoveResult ( ( Node ) documentTypeImpl0 , ( Node ) documentTypeImpl0 , ( Node ) hTMLDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSpecificMetadataOtherMDType ( ) { return specificMetadataOtherMDType ; }
void test3 ( ) throws Throwable { JhoveResult jhoveResult0 = new JhoveResult ( ) ; String string0 = jhoveResult0 . getSpecificMetadataOtherMDType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSpecificMetadataOtherMDType ( ) { return specificMetadataOtherMDType ; }
void test4 ( ) throws Throwable { HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl ( ) ; JhoveResult jhoveResult0 = new JhoveResult ( ) ; HTMLTableCaptionElementImpl hTMLTableCaptionElementImpl0 = new HTMLTableCaptionElementImpl ( hTMLDocumentImpl0 , "N\"xxLBWS" ) ; jhoveResult0 . setJhoveMetadata ( ( Node ) hTMLTableCaptionElementImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setJhoveMetadata ( Node jhoveMetadata ) { this . jhoveMetadata = jhoveMetadata ; }
void test5 ( ) throws Throwable { JhoveResult jhoveResult0 = new JhoveResult ( ) ; Node node0 = jhoveResult0 . getBaseMetadata ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Node getBaseMetadata ( ) { return baseMetadata ; }
void test6 ( ) throws Throwable { JhoveResult jhoveResult0 = new JhoveResult ( ) ; Node node0 = jhoveResult0 . getJhoveMetadata ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Node getJhoveMetadata ( ) { return jhoveMetadata ; }
void test7 ( ) throws Throwable { JhoveResult jhoveResult0 = new JhoveResult ( ) ; jhoveResult0 . setBaseMetadata ( ( Node ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSpecificMetadataOtherMDType ( ) { return specificMetadataOtherMDType ; }
void test8 ( ) throws Throwable { JhoveResult jhoveResult0 = new JhoveResult ( ) ; jhoveResult0 . setSpecificMetadataOtherMDType ( " ( On ? eP3 , SNaIf ) Tk" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSpecificMetadataOtherMDType ( ) { return specificMetadataOtherMDType ; }
void test9 ( ) throws Throwable { JhoveResult jhoveResult0 = new JhoveResult ( ) ; jhoveResult0 . setSpecificMetadata ( ( Node ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSpecificMetadataOtherMDType ( ) { return specificMetadataOtherMDType ; }
void test10 ( ) throws Throwable { JhoveResult jhoveResult0 = new JhoveResult ( ) ; Node node0 = jhoveResult0 . getSpecificMetadata ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Node getSpecificMetadata ( ) { return specificMetadata ; }
void test1 ( ) throws Throwable { JhoveGenerator jhoveGenerator0 = new JhoveGenerator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { JhoveTransformerFactory jhoveTransformerFactory0 = new JhoveTransformerFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test3 ( ) throws Throwable { Class < Object > class0 = JhoveTransformerFactory . getTransformerClass ( " : jJng'6f / V7 [ ; fil" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getTransformerClass ( String mimetype ) { if ( dispatchTable = = null ) { initializeDispatchTable ( ) ; } if ( dispatchTable . containsKey ( mimetype ) ) { return dispatchTable . get ( mimetype ) ; } String mimebase = mimetype . substring ( 0 , mimetype . indexOf ( " ; " ) ) ; if ( dispatchTable . containsKey ( mimebase ) ) { return dispatchTable . get ( mimebase ) ; } return null ; }
void test0 ( ) throws Throwable { JPGSpecificApplicator jPGSpecificApplicator0 = new JPGSpecificApplicator ( ) ; String string0 = jPGSpecificApplicator0 . specificMetadataOtherMDType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String specificMetadataOtherMDType ( ) { return "TEXTMD" ; }
void test1 ( ) throws Throwable { JPGSpecificApplicator jPGSpecificApplicator0 = new JPGSpecificApplicator ( ) ; String string0 = jPGSpecificApplicator0 . XSLName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String XSLName ( ) { return "utf8 - to - textmd . xsl" ; }
void test2 ( ) throws Throwable { JPGSpecificApplicator jPGSpecificApplicator0 = new JPGSpecificApplicator ( ) ; Mdtype mdtype0 = jPGSpecificApplicator0 . specificMetadataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
void test0 ( ) throws Throwable { GIFSpecificApplicator gIFSpecificApplicator0 = new GIFSpecificApplicator ( ) ; Mdtype mdtype0 = gIFSpecificApplicator0 . specificMetadataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
void test1 ( ) throws Throwable { GIFSpecificApplicator gIFSpecificApplicator0 = new GIFSpecificApplicator ( ) ; String string0 = gIFSpecificApplicator0 . specificMetadataOtherMDType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String specificMetadataOtherMDType ( ) { return "TEXTMD" ; }
void test2 ( ) throws Throwable { GIFSpecificApplicator gIFSpecificApplicator0 = new GIFSpecificApplicator ( ) ; String string0 = gIFSpecificApplicator0 . XSLName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String XSLName ( ) { return "utf8 - to - textmd . xsl" ; }
void test0 ( ) throws Throwable { HTMLSpecificApplicator hTMLSpecificApplicator0 = new HTMLSpecificApplicator ( ) ; String string0 = hTMLSpecificApplicator0 . specificMetadataOtherMDType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String specificMetadataOtherMDType ( ) { return "TEXTMD" ; }
void test1 ( ) throws Throwable { HTMLSpecificApplicator hTMLSpecificApplicator0 = new HTMLSpecificApplicator ( ) ; String string0 = hTMLSpecificApplicator0 . XSLName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String XSLName ( ) { return "utf8 - to - textmd . xsl" ; }
void test2 ( ) throws Throwable { HTMLSpecificApplicator hTMLSpecificApplicator0 = new HTMLSpecificApplicator ( ) ; Mdtype mdtype0 = hTMLSpecificApplicator0 . specificMetadataType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
void test0 ( ) throws Throwable { XmlErrorRenderer xmlErrorRenderer0 = new XmlErrorRenderer ( ) ; String string0 = xmlErrorRenderer0 . doRender ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String doRender ( Object arg0 ) { if ( arg0 instanceof XmlError ) { XmlError xerr = ( XmlError ) arg0 ; return xerr . toString ( ) ; } else { return arg0 . toString ( ) ; } }
void test1 ( ) throws Throwable { XmlErrorRenderer xmlErrorRenderer0 = new XmlErrorRenderer ( ) ; XmlError xmlError0 = XmlError . forMessage ( "" ) ; String string0 = xmlErrorRenderer0 . doRender ( ( Object ) xmlError0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String doRender ( Object arg0 ) { if ( arg0 instanceof XmlError ) { XmlError xerr = ( XmlError ) arg0 ; return xerr . toString ( ) ; } else { return arg0 . toString ( ) ; } }
void test0 ( ) throws Throwable { TestHaSMETSProfile testHaSMETSProfile0 = new TestHaSMETSProfile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { TestHaSMETSWebProfile testHaSMETSWebProfile0 = new TestHaSMETSWebProfile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { METSProfile . AMD_SECTION mETSProfile_AMD_SECTION0 = METSProfile . AMD_SECTION . DIGIPROVMD ; String string0 = mETSProfile_AMD_SECTION0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
void test1 ( ) throws Throwable { METSProfile . AMD_SECTION mETSProfile_AMD_SECTION0 = METSProfile . AMD_SECTION . TECHMD ; String string0 = mETSProfile_AMD_SECTION0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
void test2 ( ) throws Throwable { METSProfile . AMD_SECTION mETSProfile_AMD_SECTION0 = METSProfile . AMD_SECTION . RIGHTSMD ; String string0 = mETSProfile_AMD_SECTION0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
void test3 ( ) throws Throwable { METSProfile . AMD_SECTION mETSProfile_AMD_SECTION0 = METSProfile . AMD_SECTION . SOURCEMD ; String string0 = mETSProfile_AMD_SECTION0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
void test0 ( ) throws Throwable { HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender ( "M" ) ; boolean boolean0 = haSMETSAppender0 . hasEvents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasEvents ( ) { return ! events . isEmpty ( ) ; }
void test1 ( ) throws Throwable { HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender ( ) ; boolean boolean0 = haSMETSAppender0 . requiresLayout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean requiresLayout ( ) { return false ; }
void test2 ( ) throws Throwable { HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender ( ) ; haSMETSAppender0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void close ( ) { / / TODO Auto - generated method stub }
void test4 ( ) throws Throwable { HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender ( ) ; ArrayList < LoggingEvent > arrayList0 = haSMETSAppender0 . getEvents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < LoggingEvent > getEvents ( ) { return events ; }
void test5 ( ) throws Throwable { HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender ( ) ; haSMETSAppender0 . clearEvents ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clearEvents ( ) { events . clear ( ) ; }
void test6 ( ) throws Throwable { HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender ( ) ; String string0 = haSMETSAppender0 . getAllEventsAsXmlText ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAllEventsAsXmlText ( ) { String ret = " < log4j : eventSet xmlns : log4j = 'http : / / jakarta . apache . org / log4j / ' version = '1 . 2' includesLocationInfo = 'false' > \n" ; for ( int i = 0 ; i < events . size ( ) ; i + + ) { ret = ret . concat ( this . layout . format ( events . get ( i ) ) . concat ( "\n" ) ) ; } return ret . concat ( " < / log4j : eventSet > \n" ) ; }
void test7 ( ) throws Throwable { HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasEvents ( ) { return ! events . isEmpty ( ) ; }
void test8 ( ) throws Throwable { HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender ( "M" ) ; boolean boolean0 = haSMETSAppender0 . hasErrors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasErrors ( ) { for ( int i = 0 ; i < events . size ( ) ; i + + ) { if ( events . get ( i ) . getLevel ( ) . equals ( Level . ERROR ) ) return true ; } return false ; }
void test5 ( ) throws Throwable { HaSMETSWebProfile . ArcFileDecomposition haSMETSWebProfile_ArcFileDecomposition0 = HaSMETSWebProfile . ArcFileDecomposition . ARC_URL_RECORD ; String string0 = haSMETSWebProfile_ArcFileDecomposition0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
void test6 ( ) throws Throwable { HaSMETSWebProfile . ArcFileDecomposition haSMETSWebProfile_ArcFileDecomposition0 = HaSMETSWebProfile . ArcFileDecomposition . ARC ; String string0 = haSMETSWebProfile_ArcFileDecomposition0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { if ( name = = null | | name . trim ( ) . equals ( "" ) ) { return "Unspecified" ; } return name ; }
