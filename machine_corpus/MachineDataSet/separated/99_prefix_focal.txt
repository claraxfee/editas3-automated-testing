void test0 ( ) throws Throwable { DirectoryFilter directoryFilter0 = new DirectoryFilter ( ) ; String string0 = directoryFilter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return "Directories" ; }
void test0 ( ) throws Throwable { AboutPanel aboutPanel0 = new AboutPanel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AboutPanel ( ) { this . setLayout ( new GridLayout ( 3 , 1 ) ) ; String info = new String ( "Newzgrabber Application 1 . 1\n" + "Author : Jeffee Kiser\n" + "June 2003" ) ; this . add ( new MultiLineLabel ( info ) ) ; this . setVisible ( false ) ; }
void test0 ( ) throws Throwable { Ini ini0 = new Ini ( " , A^7" , " , A^7" ) ; String string0 = ini0 . getProperty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProperty ( ) { return Property ; }
void test1 ( ) throws Throwable { Ini ini0 = new Ini ( " , A^7" , " , A^7" ) ; ini0 . setProperty ( " , A^7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProperty ( ) { return Property ; }
void test0 ( ) throws Throwable { NewsFile newsFile0 = new NewsFile ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = NewsFile . renameFile ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renameFile ( String Filename ) { try { File original = new File ( Filename ) ; String directory = original . getParent ( ) ; String name = original . getName ( ) ; String subname = getName ( name ) ; String extension = getExtension ( name ) ; boolean ChangedFile = false ; File f = new File ( directory , name ) ; int appender = 1 ; while ( f . exists ( ) ) { ChangedFile = true ; StringBuffer newname = new StringBuffer ( subname ) ; newname . append ( "_" + appender ) ; if ( extension ! = null ) newname . append ( " . " + extension ) ; f = new File ( directory , newname . toString ( ) ) ; appender + + ; } if ( ChangedFile ) System . out . println ( "Changed " + Filename + " to " + f . getAbsolutePath ( ) ) ; return f . getAbsolutePath ( ) ; } catch ( Exception e ) { return Filename ; } }
void test2 ( ) throws Throwable { String string0 = NewsFile . renameFile ( " / mnt / fastdata / ac1gf / SF110 / dist / 99_newzgrabber" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renameFile ( String Filename ) { try { File original = new File ( Filename ) ; String directory = original . getParent ( ) ; String name = original . getName ( ) ; String subname = getName ( name ) ; String extension = getExtension ( name ) ; boolean ChangedFile = false ; File f = new File ( directory , name ) ; int appender = 1 ; while ( f . exists ( ) ) { ChangedFile = true ; StringBuffer newname = new StringBuffer ( subname ) ; newname . append ( "_" + appender ) ; if ( extension ! = null ) newname . append ( " . " + extension ) ; f = new File ( directory , newname . toString ( ) ) ; appender + + ; } if ( ChangedFile ) System . out . println ( "Changed " + Filename + " to " + f . getAbsolutePath ( ) ) ; return f . getAbsolutePath ( ) ; } catch ( Exception e ) { return Filename ; } }
void test3 ( ) throws Throwable { String string0 = NewsFile . renameFile ( " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String renameFile ( String Filename ) { try { File original = new File ( Filename ) ; String directory = original . getParent ( ) ; String name = original . getName ( ) ; String subname = getName ( name ) ; String extension = getExtension ( name ) ; boolean ChangedFile = false ; File f = new File ( directory , name ) ; int appender = 1 ; while ( f . exists ( ) ) { ChangedFile = true ; StringBuffer newname = new StringBuffer ( subname ) ; newname . append ( "_" + appender ) ; if ( extension ! = null ) newname . append ( " . " + extension ) ; f = new File ( directory , newname . toString ( ) ) ; appender + + ; } if ( ChangedFile ) System . out . println ( "Changed " + Filename + " to " + f . getAbsolutePath ( ) ) ; return f . getAbsolutePath ( ) ; } catch ( Exception e ) { return Filename ; } }
void test0 ( ) throws Throwable { Vector < Object > vector0 = IniUtility . getProperties ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Vector getProperties ( String prop , String fn ) { try { BufferedReader br = new BufferedReader ( new FileReader ( fn ) ) ; String NextLine = null ; boolean inprop = false ; Vector v = new Vector ( ) ; while ( ( NextLine = br . readLine ( ) ) ! = null ) { String TrimLine = NextLine . trim ( ) ; if ( TrimLine . toLowerCase ( ) . equals ( " [ " + prop . toLowerCase ( ) + " ] " ) ) { inprop = true ; continue ; } if ( inprop ) { if ( TrimLine . startsWith ( " [ " ) ) break ; try { StringTokenizer st = new StringTokenizer ( TrimLine , " = " ) ; String key = st . nextToken ( ) ; String value = st . nextToken ( ) ; Object [ ] oa = new Object [ 2 ] ; oa [ 0 ] = key ; oa [ 1 ] = value ; v . add ( oa ) ; } catch ( Exception e ) { continue ; } } } br . close ( ) ; return v ; } catch ( Exception ve ) { return null ; } }
void test1 ( ) throws Throwable { IniUtility iniUtility0 = new IniUtility ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream ( ( InputStream ) null , 136 , false ) ; ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( ) ; Base64Decoder base64Decoder0 = new Base64Decoder ( bufferedCustomInputStream0 , ( OutputStream ) byteArrayOutputStream0 ) ; base64Decoder0 . decodeStream ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLineCount ( ) { return LineCount ; }
void test0 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { BatchJob batchJob0 = new BatchJob ( "nNNVV\"hK = ! " , "nNNVV\"hK = ! " , "nNNVV\"hK = ! " , ( - 1311 ) , ( - 1311 ) ) ; String string0 = batchJob0 . getGroup ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFirstid ( ) { return firstid ; }
void test1 ( ) throws Throwable { BatchJob batchJob0 = new BatchJob ( " . " , " . " , " . " , ( - 20 ) , ( - 20 ) ) ; batchJob0 . getPassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLastid ( ) { return lastid ; }
void test2 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { BatchJob batchJob0 = new BatchJob ( "nNNVV\"hK = ! " , "nNNVV\"hK = ! " , "nNNVV\"hK = ! " , ( - 1311 ) , ( - 1311 ) ) ; batchJob0 . setPassword ( "nNNVV\"hK = ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getLastid ( ) { return lastid ; }
void test3 ( ) throws Throwable { BatchJob batchJob0 = new BatchJob ( " . " , " . " , " . " , ( - 20 ) , ( - 20 ) ) ; batchJob0 . setUsername ( " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFirstid ( ) { return firstid ; }
void test4 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { BatchJob batchJob0 = new BatchJob ( "nNNVV\"hK = ! " , "nNNVV\"hK = ! " , "nNNVV\"hK = ! " , ( - 1311 ) , ( - 1311 ) ) ; String string0 = batchJob0 . getServer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFirstid ( ) { return firstid ; }
void test5 ( ) throws Throwable { BatchJob batchJob0 = new BatchJob ( " . " , " . " , " . " , ( - 20 ) , ( - 20 ) ) ; String string0 = batchJob0 . getDirectory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFirstid ( ) { return firstid ; }
void test6 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { BatchJob batchJob0 = new BatchJob ( "nNNVV\"hK = ! " , "nNNVV\"hK = ! " , "nNNVV\"hK = ! " , ( - 1311 ) , ( - 1311 ) ) ; int int0 = batchJob0 . getLastid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getFirstid ( ) { return firstid ; }
void test7 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { BatchJob batchJob0 = new BatchJob ( "nNNVV\"hK = ! " , "nNNVV\"hK = ! " , "nNNVV\"hK = ! " , ( - 1311 ) , ( - 1311 ) ) ; int int0 = batchJob0 . getFirstid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean createDirectory ( ) { try { File dir = new File ( directory ) ; if ( dir . isDirectory ( ) ) SetupOK = true ; SetupOK = dir . mkdirs ( ) ; } catch ( Exception createE ) { if ( Newzgrabber . verbose ) System . out . println ( "Could not create directory for " + directory ) ; SetupOK = false ; } return SetupOK ; }
void test8 ( ) throws Throwable { Future < ? > future = executor . submit ( new Runnable ( ) { void run ( ) { BatchJob batchJob0 = new BatchJob ( "nNNVV\"hK = ! " , "nNNVV\"hK = ! " , "nNNVV\"hK = ! " , ( - 1311 ) , ( - 1311 ) ) ; batchJob0 . getUsername ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean createDirectory ( ) { try { File dir = new File ( directory ) ; if ( dir . isDirectory ( ) ) SetupOK = true ; SetupOK = dir . mkdirs ( ) ; } catch ( Exception createE ) { if ( Newzgrabber . verbose ) System . out . println ( "Could not create directory for " + directory ) ; SetupOK = false ; } return SetupOK ; }
void test0 ( ) throws Throwable { Status status0 = new Status ( "gel" ) ; int int0 = status0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCode ( ) { return CODE ; }
void test1 ( ) throws Throwable { Status status0 = new Status ( "301" ) ; boolean boolean0 = status0 . statusOK ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCode ( ) { return CODE ; }
void test2 ( ) throws Throwable { Status status0 = new Status ( "gel" ) ; boolean boolean0 = status0 . statusOK ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getCode ( ) { return CODE ; }
void test0 ( ) throws Throwable { StringSorter stringSorter0 = new StringSorter ( ) ; stringSorter0 . addString ( "" ) ; stringSorter0 . getSortedArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getSortedArray ( ) { Set es = this . keySet ( ) ; Object [ ] oa = es . toArray ( ) ; String [ ] sorted = new String [ oa . length ] ; for ( int i = 0 ; i < oa . length ; i + + ) { sorted [ i ] = ( String ) this . get ( ( String ) oa [ i ] ) ; } return sorted ; }
void test1 ( ) throws Throwable { StringSorter stringSorter0 = new StringSorter ( true ) ; stringSorter0 . addString ( " { } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addString ( String s ) { if ( IgnoreCase ) { this . put ( s . toLowerCase ( ) , s ) ; } else { this . put ( s , s ) ; } }
void test2 ( ) throws Throwable { StringSorter stringSorter0 = new StringSorter ( ) ; String [ ] stringArray0 = stringSorter0 . getSortedArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getSortedArray ( ) { Set es = this . keySet ( ) ; Object [ ] oa = es . toArray ( ) ; String [ ] sorted = new String [ oa . length ] ; for ( int i = 0 ; i < oa . length ; i + + ) { sorted [ i ] = ( String ) this . get ( ( String ) oa [ i ] ) ; } return sorted ; }
void test2 ( ) throws Throwable { BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream ( ( InputStream ) null , 1 , true ) ; bufferedCustomInputStream0 . setRemoveCarriages ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setRemoveCarriages ( boolean b ) { REMOVE_CARRIAGES = b ; }
void test3 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream ( ( InputStream ) pipedInputStream0 ) ; bufferedCustomInputStream0 . closeTemp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void closeTemp ( ) throws IOException { if ( WRITE_TO_TEMP ) tmpfos . close ( ) ; }
void test4 ( ) throws Throwable { BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream ( ( InputStream ) null , 745 , true ) ; bufferedCustomInputStream0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String readLine ( ) { StringBuffer sb = new StringBuffer ( ) ; try { int CHECKCOUNT = 0 ; while ( true ) { int character = this . read ( ) ; if ( WRITE_TO_TEMP ) { tmpfos . write ( character ) ; } if ( character = = 10 ) break ; if ( character = = 13 ) { if ( REMOVE_CARRIAGES ) continue ; } char newchar = ( char ) character ; sb . append ( newchar ) ; } return sb . toString ( ) ; } catch ( Exception e ) { return null ; } }
void test5 ( ) throws Throwable { PipedInputStream pipedInputStream0 = new PipedInputStream ( ) ; BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream ( ( InputStream ) pipedInputStream0 ) ; boolean boolean0 = bufferedCustomInputStream0 . ready ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean ready ( ) { try { return ( this . available ( ) > 0 ) ; } catch ( Exception e ) { return false ; } }
void test0 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; SortFilterModel sortFilterModel0 = new SortFilterModel ( ( TableModel ) defaultTableModel0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( int c ) { return model . getColumnName ( c ) ; }
void test2 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; SortFilterModel sortFilterModel0 = new SortFilterModel ( ( TableModel ) defaultTableModel0 ) ; int int0 = sortFilterModel0 . getColumnCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return model . getColumnCount ( ) ; }
void test3 ( ) throws Throwable { Vector < Integer > vector0 = new Vector < Integer > ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( vector0 , vector0 ) ; SortFilterModel sortFilterModel0 = new SortFilterModel ( ( TableModel ) defaultTableModel0 ) ; sortFilterModel0 . mouseReleased ( ( MouseEvent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return model . getRowCount ( ) ; }
void test5 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; SortFilterModel sortFilterModel0 = new SortFilterModel ( ( TableModel ) defaultTableModel0 ) ; sortFilterModel0 . updateTable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return model . getColumnCount ( ) ; }
void test6 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; SortFilterModel sortFilterModel0 = new SortFilterModel ( ( TableModel ) defaultTableModel0 ) ; JTable jTable0 = new JTable ( ) ; sortFilterModel0 . setTable ( jTable0 ) ; sortFilterModel0 . sortTable ( ( - 1924 ) ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jTable0 , ( - 1696 ) , ( long ) 0 , ( - 7 ) , ( - 7 ) , ( - 7 ) , ( - 1924 ) , false , ( - 1924 ) , 0 , ( - 7 ) ) ; sortFilterModel0 . mouseClicked ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return model . getColumnCount ( ) ; }
void test7 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; SortFilterModel sortFilterModel0 = new SortFilterModel ( ( TableModel ) defaultTableModel0 ) ; int int0 = sortFilterModel0 . getRowCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return model . getRowCount ( ) ; }
void test8 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; SortFilterModel sortFilterModel0 = new SortFilterModel ( ( TableModel ) defaultTableModel0 ) ; sortFilterModel0 . mouseEntered ( ( MouseEvent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return model . getRowCount ( ) ; }
void test9 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; SortFilterModel sortFilterModel0 = new SortFilterModel ( ( TableModel ) defaultTableModel0 ) ; Object object0 = sortFilterModel0 . getValueAt ( ( - 1990 ) , ( - 563 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getValueAt ( int r , int c ) { Object o = null ; try { o = model . getValueAt ( rows [ r ] . index , c ) ; } catch ( Exception e ) { o = null ; } return o ; }
void test10 ( ) throws Throwable { Vector < Integer > vector0 = new Vector < Integer > ( ) ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( vector0 , vector0 ) ; SortFilterModel sortFilterModel0 = new SortFilterModel ( ( TableModel ) defaultTableModel0 ) ; Class < Object > class0 = sortFilterModel0 . getColumnClass ( 2043 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class getColumnClass ( int c ) { return model . getColumnClass ( c ) ; }
void test11 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; SortFilterModel sortFilterModel0 = new SortFilterModel ( ( TableModel ) defaultTableModel0 ) ; JTable jTable0 = new JTable ( ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jTable0 , ( - 1696 ) , ( long ) 0 , ( - 7 ) , ( - 7 ) , ( - 7 ) , ( - 1924 ) , false , ( - 1924 ) , 0 , ( - 7 ) ) ; sortFilterModel0 . mouseExited ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseExited ( MouseEvent me ) { }
void test12 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; SortFilterModel sortFilterModel0 = new SortFilterModel ( ( TableModel ) defaultTableModel0 ) ; sortFilterModel0 . mousePressed ( ( MouseEvent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return model . getRowCount ( ) ; }
void test13 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; SortFilterModel sortFilterModel0 = new SortFilterModel ( ( TableModel ) defaultTableModel0 ) ; sortFilterModel0 . sortTable ( ( - 1990 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return model . getRowCount ( ) ; }
void test14 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; SortFilterModel sortFilterModel0 = new SortFilterModel ( ( TableModel ) defaultTableModel0 ) ; sortFilterModel0 . mouseClicked ( ( MouseEvent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getRowCount ( ) { return model . getRowCount ( ) ; }
void test15 ( ) throws Throwable { DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; SortFilterModel sortFilterModel0 = new SortFilterModel ( ( TableModel ) defaultTableModel0 ) ; JTable jTable0 = new JTable ( ) ; sortFilterModel0 . setTable ( jTable0 ) ; MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent ( ( Component ) jTable0 , ( - 1696 ) , ( long ) 0 , ( - 7 ) , ( - 7 ) , ( - 7 ) , ( - 1924 ) , false , ( - 1924 ) , 0 , ( - 7 ) ) ; sortFilterModel0 . mouseClicked ( ( MouseEvent ) mouseWheelEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void mouseClicked ( MouseEvent event ) { if ( table ! = null ) { int tableColumn = 3 ; if ( FORCESORT ) { tableColumn = SORTCOLUMN ; } else { tableColumn = table . columnAtPoint ( event . getPoint ( ) ) ; } int modelColumn = table . convertColumnIndexToModel ( tableColumn ) ; this . setRowsColumns ( ) ; this . sort ( modelColumn ) ; AscSort = ! AscSort ; FORCESORT = false ; } }
void test18 ( ) throws Throwable { Object [ ] [ ] objectArray0 = new Object [ 10 ] [ 9 ] ; DefaultTableModel defaultTableModel0 = new DefaultTableModel ( ) ; defaultTableModel0 . addColumn ( ( Object ) "SwingSelectedKey" , objectArray0 [ 4 ] ) ; SortFilterModel sortFilterModel0 = new SortFilterModel ( ( TableModel ) defaultTableModel0 ) ; sortFilterModel0 . setSort ( false ) ; sortFilterModel0 . sort ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getColumnCount ( ) { return model . getColumnCount ( ) ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 9 ] ; LineData lineData0 = new LineData ( "L = By ] ^5i ( VP ? + P3d\"F~" , stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setFromPattern ( String f ) { FromPattern = f ; }
void test2 ( ) throws Throwable { long [ ] longArray0 = new long [ 4 ] ; long long0 = LineData . getTotalLines ( "Caught exception in LineData thread\n" , "Caught exception in LineData thread\n" , longArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTotalLines ( String g , long [ ] ids ) { try { long TotalLines = 0 ; Hashtable h = this . getGroupData ( g ) ; for ( int i = 0 ; i < ids . length ; i + + ) { Long key = new Long ( ids [ i ] ) ; if ( h . containsKey ( key ) = = false ) continue ; TotalLines + = ( ( Long ) h . get ( key ) ) . longValue ( ) ; } return TotalLines ; } catch ( Exception e ) { if ( Newzgrabber . verbose ) System . err . println ( e . getMessage ( ) ) ; e . printStackTrace ( ) ; return - 1 ; } }
void test0 ( ) throws Throwable { SongList songList0 = new SongList ( ( String [ ] ) null ) ; Hashtable < Object , Object > hashtable0 = songList0 . getSongs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Hashtable getSongs ( ) { return Songs ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 6 ] = "Current Downloads : " ; SongList songList0 = new SongList ( stringArray0 ) ; String [ ] stringArray1 = songList0 . getCompleteSongs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object b ) { return ( this . equals ( b ) ) ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 1 ] = "221 subject fields" ; SongList songList0 = new SongList ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SongList ( String [ ] Subjects ) { Songs = new Hashtable ( ) ; this . buildHash ( Subjects ) ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; stringArray0 [ 6 ] = "Current Downloads : " ; stringArray0 [ 7 ] = "Current Downloads : " ; SongList songList0 = new SongList ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SongList ( String [ ] Subjects ) { Songs = new Hashtable ( ) ; this . buildHash ( Subjects ) ; }
void test0 ( ) throws Throwable { Downloader downloader0 = new Downloader ( ) ; downloader0 . setGroup ( "Y ? " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTimeout ( ) { return TIMEOUT ; }
void test1 ( ) throws Throwable { Downloader downloader0 = new Downloader ( ) ; downloader0 . getGroup ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTimeout ( ) { return TIMEOUT ; }
void test2 ( ) throws Throwable { Downloader downloader0 = new Downloader ( ) ; downloader0 . setTitle ( "nW9'$oM^XT5 ( J\"5" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTimeout ( ) { return TIMEOUT ; }
void test3 ( ) throws Throwable { Downloader downloader0 = new Downloader ( ) ; int int0 = downloader0 . getTimeout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTimeout ( ) { return TIMEOUT ; }
void test4 ( ) throws Throwable { Downloader downloader0 = new Downloader ( ) ; downloader0 . setPassword ( "Y ? " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTimeout ( ) { return TIMEOUT ; }
void test5 ( ) throws Throwable { Downloader downloader0 = new Downloader ( ) ; downloader0 . setTimeout ( ( - 2040 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTimeout ( ) { return TIMEOUT ; }
void test6 ( ) throws Throwable { Downloader downloader0 = new Downloader ( ) ; downloader0 . setServer ( "Y ? " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTimeout ( ) { return TIMEOUT ; }
void test7 ( ) throws Throwable { Downloader downloader0 = new Downloader ( ) ; Object [ ] objectArray0 = new Object [ 9 ] ; downloader0 . setDownloadData ( objectArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTimeout ( ) { return TIMEOUT ; }
void test8 ( ) throws Throwable { Downloader downloader0 = new Downloader ( ) ; downloader0 . getTotalLines ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTimeout ( ) { return TIMEOUT ; }
void test9 ( ) throws Throwable { Downloader downloader0 = new Downloader ( ) ; downloader0 . setDownloadDirectory ( ( File ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTimeout ( ) { return TIMEOUT ; }
void test10 ( ) throws Throwable { Downloader downloader0 = new Downloader ( ) ; downloader0 . setTotalLines ( 354L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTimeout ( ) { return TIMEOUT ; }
void test11 ( ) throws Throwable { Downloader downloader0 = new Downloader ( ) ; long [ ] longArray0 = new long [ 1 ] ; downloader0 . setIds ( longArray0 ) ; long long0 = downloader0 . getBaseMessageId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBaseMessageId ( ) { if ( ids ! = null ) return ids [ 0 ] ; return - 1 ; }
void test12 ( ) throws Throwable { Downloader downloader0 = new Downloader ( ) ; downloader0 . setTableIndex ( ( - 1 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTimeout ( ) { return TIMEOUT ; }
void test13 ( ) throws Throwable { Downloader downloader0 = new Downloader ( ) ; downloader0 . setUsername ( "Y ? " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTimeout ( ) { return TIMEOUT ; }
void test14 ( ) throws Throwable { Downloader downloader0 = new Downloader ( ) ; long long0 = downloader0 . getBaseMessageId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTimeout ( ) { return TIMEOUT ; }
void test15 ( ) throws Throwable { Downloader downloader0 = new Downloader ( ) ; downloader0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getTimeout ( ) { return TIMEOUT ; }
void test0 ( ) throws Throwable { SongInfo songInfo0 = new SongInfo ( ( long ) 121 , 121 , 121 ) ; int int0 = songInfo0 . getUpperRange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getId ( ) { return MessageId ; }
void test1 ( ) throws Throwable { SongInfo songInfo0 = new SongInfo ( ( long ) 121 , 121 , 121 ) ; long long0 = songInfo0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getThisPart ( ) { return ThisPart ; }
void test2 ( ) throws Throwable { SongInfo songInfo0 = new SongInfo ( ( long ) 121 , 121 , 121 ) ; int int0 = songInfo0 . getThisPart ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUpperRange ( ) { return UpperRange ; }
void test3 ( ) throws Throwable { Hashtable < SongInfo , Object > hashtable0 = new Hashtable < SongInfo , Object > ( ) ; long [ ] longArray0 = SongInfo . getOrderedIds ( hashtable0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long [ ] getOrderedIds ( Hashtable info ) { try { Vector v = new Vector ( ) ; int max = ( ( Integer ) info . get ( "UPPERLIMIT" ) ) . intValue ( ) ; for ( int i = 0 ; i < = max ; i + + ) { if ( info . containsKey ( new Integer ( i ) ) ) { SongInfo si = ( SongInfo ) info . get ( new Integer ( i ) ) ; long id = si . getId ( ) ; v . add ( new Long ( id ) ) ; } } long [ ] ids = new long [ v . size ( ) ] ; for ( int j = 0 ; j < v . size ( ) ; j + + ) { ids [ j ] = ( ( Long ) v . elementAt ( j ) ) . longValue ( ) ; } return ids ; } catch ( Exception e ) { if ( Newzgrabber . verbose ) System . err . println ( e . getMessage ( ) ) ; return null ; } }
void test0 ( ) throws Throwable { PassEnc passEnc0 = new PassEnc ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = PassEnc . encodePassword ( "The decoded password is '" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String encodePassword ( String s ) { StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < s . length ( ) ; i + + ) { char c = s . charAt ( i ) ; char newchar = ( char ) ( ( int ) c + i + 2 ) ; sb . append ( newchar ) ; } return sb . toString ( ) ; }
void test2 ( ) throws Throwable { String string0 = PassEnc . decodePassword ( "The decoded password is '" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String decodePassword ( String s ) { StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < s . length ( ) ; i + + ) { char c = s . charAt ( i ) ; char newchar = ( char ) ( ( int ) c - i - 2 ) ; sb . append ( newchar ) ; } return sb . toString ( ) ; }
void test0 ( ) throws Throwable { BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream ( ( InputStream ) null , true ) ; yEncDecoder yEncDecoder0 = new yEncDecoder ( bufferedCustomInputStream0 ) ; yEncDecoder0 . decodeStream ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLineCount ( ) { return LineCount ; }
void test1 ( ) throws Throwable { BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream ( ( InputStream ) null , true ) ; PrintStream printStream0 = DebugGraphics . logStream ( ) ; yEncDecoder yEncDecoder0 = new yEncDecoder ( bufferedCustomInputStream0 , ( OutputStream ) printStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLineCount ( ) { return LineCount ; }
void test0 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( "" , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( String Filename ) { try { String name = Filename . substring ( 0 , Filename . lastIndexOf ( " . " ) ) ; return name ; } catch ( Exception e ) { return Filename ; } }
void test1 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( "~lz" , 1 , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( String Filename ) { try { String name = Filename . substring ( 0 , Filename . lastIndexOf ( " . " ) ) ; return name ; } catch ( Exception e ) { return Filename ; } }
void test2 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( "l" , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addNotify ( ) { super . addNotify ( ) ; measure ( ) ; }
void test3 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( "" , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMarginHeight ( ) { return margin_height ; }
void test4 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( "2" , ( - 8 ) , ( - 8 ) , ( - 8 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMarginHeight ( ) { return margin_height ; }
void test5 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( "E ] " , ( - 380 ) , ( - 380 ) , ( - 380 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( String Filename ) { try { String name = Filename . substring ( 0 , Filename . lastIndexOf ( " . " ) ) ; return name ; } catch ( Exception e ) { return Filename ; } }
void test6 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( "" , ( - 399 ) , ( - 399 ) , ( - 399 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( String Filename ) { try { String name = Filename . substring ( 0 , Filename . lastIndexOf ( " . " ) ) ; return name ; } catch ( Exception e ) { return Filename ; } }
void test7 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( " < ( ( C" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setLabel ( String label ) { newLabel ( label ) ; measure ( ) ; repaint ( ) ; }
void test8 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( "rX4o" , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMarginWidth ( ) { return margin_width ; }
void test9 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( "" , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( String Filename ) { try { String name = Filename . substring ( 0 , Filename . lastIndexOf ( " . " ) ) ; return name ; } catch ( Exception e ) { return Filename ; } }
void test10 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( " < ( ( C" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( String Filename ) { try { String name = Filename . substring ( 0 , Filename . lastIndexOf ( " . " ) ) ; return name ; } catch ( Exception e ) { return Filename ; } }
void test11 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( " < ( ( C" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( String Filename ) { try { String name = Filename . substring ( 0 , Filename . lastIndexOf ( " . " ) ) ; return name ; } catch ( Exception e ) { return Filename ; } }
void test12 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( "" , 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( String Filename ) { try { String name = Filename . substring ( 0 , Filename . lastIndexOf ( " . " ) ) ; return name ; } catch ( Exception e ) { return Filename ; } }
void test13 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( " < ( ( C" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( String Filename ) { try { String name = Filename . substring ( 0 , Filename . lastIndexOf ( " . " ) ) ; return name ; } catch ( Exception e ) { return Filename ; } }
void test14 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( "2" , ( - 8 ) , ( - 8 ) , ( - 8 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MultiLineLabel ( String label , int margin_width , int margin_height , int alignment ) { newLabel ( label ) ; this . margin_width = margin_width ; this . margin_height = margin_height ; this . alignment = alignment ; }
void test15 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( "rX4o" , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void paint ( Graphics g ) { int x , y ; Dimension d = this . getSize ( ) ; y = line_ascent + ( d . height - num_lines * line_height ) / 2 ; for ( int i = 0 ; i < num_lines ; i + + , y + = line_height ) { switch ( alignment ) { case LEFT : x = margin_width ; break ; case CENTER : default : x = ( d . width - line_widths [ i ] ) / 2 ; break ; case RIGHT : x = d . width - margin_width - line_widths [ i ] ; break ; } g . drawString ( lines [ i ] , x , y ) ; } }
void test16 ( ) throws Throwable { MultiLineLabel multiLineLabel0 = new MultiLineLabel ( "~lz" , 1 , 1 , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MultiLineLabel ( String label , int margin_width , int margin_height , int alignment ) { newLabel ( label ) ; this . margin_width = margin_width ; this . margin_height = margin_height ; this . alignment = alignment ; }
void test0 ( ) throws Throwable { SearchPanel searchPanel0 = new SearchPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void windowDeactivated ( WindowEvent e ) { }
void test1 ( ) throws Throwable { SearchPanel searchPanel0 = new SearchPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void windowClosed ( WindowEvent e ) { }
void test2 ( ) throws Throwable { SearchPanel searchPanel0 = new SearchPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void windowOpened ( WindowEvent e ) { }
void test3 ( ) throws Throwable { SearchPanel searchPanel0 = new SearchPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void windowDeiconified ( WindowEvent e ) { }
void test4 ( ) throws Throwable { SearchPanel searchPanel0 = new SearchPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void windowIconified ( WindowEvent e ) { }
void test5 ( ) throws Throwable { SearchPanel searchPanel0 = new SearchPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void windowActivated ( WindowEvent e ) { }
void test6 ( ) throws Throwable { SearchPanel searchPanel0 = new SearchPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent ae ) { if ( ae . getActionCommand ( ) . equals ( "OK" ) ) { this . setVisible ( false ) ; } }
void test7 ( ) throws Throwable { SearchPanel searchPanel0 = new SearchPanel ( ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void valueChanged ( ListSelectionEvent le ) { AbortButton . setEnabled ( ( downloadtable . getSelectedRowCount ( ) ! = 0 ) ) ; }
void test0 ( ) throws Throwable { OptionsPanel optionsPanel0 = new OptionsPanel ( ( Frame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean searchAll ( ) { return GetAll . isSelected ( ) ; }
void test1 ( ) throws Throwable { OptionsPanel optionsPanel0 = new OptionsPanel ( ( Frame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean searchAll ( ) { return GetAll . isSelected ( ) ; }
void test2 ( ) throws Throwable { OptionsPanel optionsPanel0 = new OptionsPanel ( ( Frame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean searchAll ( ) { return GetAll . isSelected ( ) ; }
void test3 ( ) throws Throwable { OptionsPanel optionsPanel0 = new OptionsPanel ( ( Frame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateIni ( ) { try { if ( Newzgrabber . debug ) System . out . println ( "There are " + Messageids . size ( ) + " ids to update" ) ; if ( Messageids . size ( ) < 1 ) return ; Ini ini = new Ini ( Newzgrabber . Newzdirectory + System . getProperty ( "file . separator" ) + OptionsFilename , "Messageids" ) ; LinkedList ll = new LinkedList ( ) ; Enumeration keys = Messageids . keys ( ) ; while ( keys . hasMoreElements ( ) ) { String nextkey = ( String ) keys . nextElement ( ) ; String nextvalue = String . valueOf ( ( ( Long ) Messageids . get ( nextkey ) ) . longValue ( ) ) ; String [ ] s = new String [ 2 ] ; s [ 0 ] = nextkey ; s [ 1 ] = nextvalue ; ll . add ( s ) ; } ini . writeIni ( ll ) ; } catch ( Exception e ) { if ( Newzgrabber . verbose | | Newzgrabber . debug ) { System . err . println ( "There was a problem updating INI for transfers" ) ; System . err . println ( e . getMessage ( ) ) ; e . printStackTrace ( ) ; } } }
void test4 ( ) throws Throwable { OptionsPanel optionsPanel0 = new OptionsPanel ( ( Frame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean searchAll ( ) { return GetAll . isSelected ( ) ; }
void test0 ( ) throws Throwable { SubjectParser subjectParser0 = new SubjectParser ( "OCN + T [ $% ] ( / ) NQ" ) ; long long0 = subjectParser0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUpperRange ( ) { return UpperRange ; }
void test1 ( ) throws Throwable { SubjectParser subjectParser0 = new SubjectParser ( " ! 5 ] 0z_ + A" ) ; int int0 = subjectParser0 . getUpperRange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { try { char tokentype ; String tmpSubject = Subject . substring ( Subject . indexOf ( " " ) + 1 , Subject . length ( ) ) ; StringBuffer sb = new StringBuffer ( ) ; int startindex = 0 ; boolean FoundRange = false ; MAINLOOP : for ( int i = tmpSubject . length ( ) - 1 ; i > = 0 ; i - - ) { char testchar = tmpSubject . charAt ( i ) ; if ( ( testchar = = ' ) ' | | testchar = = ' ] ' ) & & FoundRange = = false ) { StringBuffer tmpbuf = new StringBuffer ( ) ; tmpbuf . insert ( 0 , testchar ) ; tokentype = testchar ; startindex = i ; char endchar ; if ( testchar = = ' ) ' ) endchar = ' ( ' ; else endchar = ' [ ' ; char nextchar ; while ( ( nextchar = tmpSubject . charAt ( - - i ) ) ! = endchar ) { tmpbuf . insert ( 0 , nextchar ) ; if ( ( Character . isDigit ( nextchar ) = = false ) & & nextchar ! = ' / ' ) { / / System . out . print ( "'" + nextchar + "' failed the test" ) ; sb . insert ( 0 , tmpbuf . toString ( ) ) ; continue MAINLOOP ; } } int endindex = - 1 ; if ( tmpbuf . toString ( ) . indexOf ( " / " ) ! = - 1 ) { tmpbuf . insert ( 0 , endchar ) ; FoundRange = true ; RangeString = tmpbuf . toString ( ) ; } } else { sb . insert ( 0 , testchar ) ; } } / / System . out . println ( "Getting ready to return '" + sb . toString ( ) + / / "' from the getTitle ( ) " ) ; return sb . toString ( ) ; } catch ( Exception parseE ) { / / System . err . println ( "Caught exception in the getTitle ( ) " ) ; / / System . err . println ( parseE . getMessage ( ) ) ; parseE . printStackTrace ( ) ; return null ; } }
void test2 ( ) throws Throwable { SubjectParser subjectParser0 = new SubjectParser ( "D [ ] J" ) ; int int0 = subjectParser0 . getThisRange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUpperRange ( ) { return UpperRange ; }
void test3 ( ) throws Throwable { SubjectParser subjectParser0 = new SubjectParser ( "OCN + T [ $% ] ( / ) NQ" ) ; int int0 = subjectParser0 . getThisRange ( ) ; int int1 = subjectParser0 . getUpperRange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUpperRange ( ) { return UpperRange ; }
void test0 ( ) throws Throwable { Search search0 = new Search ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = Search . formatPattern ( " * [ Yy ] [ Hh ] [ Ww ] [ Ee ] \" [ Aa ] [ Gg ] [ Rr ] : * . * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatPattern ( String pattern ) { try { StringBuffer sb = new StringBuffer ( "" ) ; String tmpPat = pattern . trim ( ) ; if ( tmpPat . startsWith ( " * " ) = = false ) { sb . append ( " * " ) ; } for ( int i = 0 ; i < tmpPat . length ( ) ; i + + ) { char c = tmpPat . charAt ( i ) ; if ( Character . isLetter ( c ) ) { sb . append ( " [ " + Character . toUpperCase ( c ) + Character . toLowerCase ( c ) + " ] " ) ; } else if ( Character . isSpaceChar ( c ) ) { sb . append ( " * " ) ; } else { sb . append ( c ) ; } } if ( ( sb . charAt ( sb . length ( ) - 1 ) = = ' * ' ) = = false ) { sb . append ( " * " ) ; } return sb . toString ( ) ; } catch ( Exception e ) { return null ; } }
void test2 ( ) throws Throwable { String string0 = Search . formatPattern ( "YHwe\"AGR : . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String formatPattern ( String pattern ) { try { StringBuffer sb = new StringBuffer ( "" ) ; String tmpPat = pattern . trim ( ) ; if ( tmpPat . startsWith ( " * " ) = = false ) { sb . append ( " * " ) ; } for ( int i = 0 ; i < tmpPat . length ( ) ; i + + ) { char c = tmpPat . charAt ( i ) ; if ( Character . isLetter ( c ) ) { sb . append ( " [ " + Character . toUpperCase ( c ) + Character . toLowerCase ( c ) + " ] " ) ; } else if ( Character . isSpaceChar ( c ) ) { sb . append ( " * " ) ; } else { sb . append ( c ) ; } } if ( ( sb . charAt ( sb . length ( ) - 1 ) = = ' * ' ) = = false ) { sb . append ( " * " ) ; } return sb . toString ( ) ; } catch ( Exception e ) { return null ; } }
void test0 ( ) throws Throwable { Base64Decoder base64Decoder0 = new Base64Decoder ( ( BufferedCustomInputStream ) null , ( OutputStream ) null ) ; base64Decoder0 . getReader ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BufferedCustomInputStream getReader ( ) { if ( Newzgrabber . verbose ) System . out . println ( "Sending back reader " + br . toString ( ) ) ; return br ; }
void test1 ( ) throws Throwable { UUDecoder uUDecoder0 = new UUDecoder ( ( BufferedCustomInputStream ) null , ( OutputStream ) null ) ; uUDecoder0 . getOutputStream ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OutputStream getOutputStream ( ) { return os ; }
void test2 ( ) throws Throwable { Base64Decoder base64Decoder0 = new Base64Decoder ( ( BufferedCustomInputStream ) null , ( OutputStream ) null ) ; base64Decoder0 . setStatusObject ( ( Object ) "ShortDescription" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setStatusObject ( Object s ) { StatusObject = s ; }
void test4 ( ) throws Throwable { yEncDecoder yEncDecoder0 = new yEncDecoder ( ( BufferedCustomInputStream ) null ) ; yEncDecoder0 . setOutputStream ( ( OutputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setOutputStream ( OutputStream o ) { os = o ; }
void test5 ( ) throws Throwable { Base64Decoder base64Decoder0 = new Base64Decoder ( ( BufferedCustomInputStream ) null , ( OutputStream ) null ) ; base64Decoder0 . getLineCount ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLineCount ( ) { return LineCount ; }
void test6 ( ) throws Throwable { PrintStream printStream0 = DebugGraphics . logStream ( ) ; UUDecoder uUDecoder0 = new UUDecoder ( ( BufferedCustomInputStream ) null , ( OutputStream ) printStream0 ) ; uUDecoder0 . setStatusRow ( 1383 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setStatusRow ( int r ) { StatusRow = r ; }
void test7 ( ) throws Throwable { ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream ( 155 ) ; BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream ( ( OutputStream ) byteArrayOutputStream0 ) ; UUDecoder uUDecoder0 = new UUDecoder ( ( BufferedCustomInputStream ) null , ( OutputStream ) bufferedOutputStream0 ) ; uUDecoder0 . setReader ( ( InputStream ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setReader ( InputStream i ) { br = new BufferedCustomInputStream ( i ) ; }
void test8 ( ) throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; UUDecoder uUDecoder0 = new UUDecoder ( ( BufferedCustomInputStream ) null , ( OutputStream ) pipedOutputStream0 ) ; uUDecoder0 . setBegin ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setBegin ( boolean b ) { foundbegin = b ; }
void test9 ( ) throws Throwable { yEncDecoder yEncDecoder0 = new yEncDecoder ( ( BufferedCustomInputStream ) null ) ; yEncDecoder0 . setLineCount ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setLineCount ( long l ) { LineCount = l ; }
void test10 ( ) throws Throwable { yEncDecoder yEncDecoder0 = new yEncDecoder ( ( BufferedCustomInputStream ) null ) ; yEncDecoder0 . updateProgress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateProgress ( ) { if ( TotalLines > 0 ) { int PercentDone = ( int ) ( ( LineCount * 100 ) / TotalLines ) ; String status = String . valueOf ( PercentDone ) + "%" ; TransferPanel . downloading . setValueAt ( status , StatusRow , 1 ) ; } }
void test0 ( ) throws Throwable { GroupsPanel groupsPanel0 = new GroupsPanel ( ( Frame ) null ) ; String [ ] stringArray0 = groupsPanel0 . getActiveGroups ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getActiveGroups ( ) { try { String [ ] ActiveGroups = new String [ actdlm . size ( ) ] ; for ( int i = 0 ; i < actdlm . size ( ) ; i + + ) { ActiveGroups [ i ] = ( String ) actdlm . elementAt ( i ) ; } return ActiveGroups ; } catch ( Exception e ) { return null ; } }
void test1 ( ) throws Throwable { GroupsPanel groupsPanel0 = new GroupsPanel ( ( Frame ) null ) ; ListSelectionEvent listSelectionEvent0 = new ListSelectionEvent ( ( Object ) "model" , ( - 1757 ) , ( - 1757 ) , true ) ; groupsPanel0 . valueChanged ( listSelectionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void valueChanged ( ListSelectionEvent le ) { AbortButton . setEnabled ( ( downloadtable . getSelectedRowCount ( ) ! = 0 ) ) ; }
void test2 ( ) throws Throwable { GroupsPanel groupsPanel0 = new GroupsPanel ( ( Frame ) null ) ; ActionEvent actionEvent0 = new ActionEvent ( ( Object ) "model" , ( - 1757 ) , "model" , ( - 1757 ) ) ; groupsPanel0 . actionPerformed ( actionEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void actionPerformed ( ActionEvent ae ) { if ( ae . getActionCommand ( ) . equals ( "OK" ) ) { this . setVisible ( false ) ; } }
void test3 ( ) throws Throwable { GroupsPanel groupsPanel0 = new GroupsPanel ( ( Frame ) null ) ; groupsPanel0 . updateIni ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateIni ( ) { try { if ( Newzgrabber . debug ) System . out . println ( "There are " + Messageids . size ( ) + " ids to update" ) ; if ( Messageids . size ( ) < 1 ) return ; Ini ini = new Ini ( Newzgrabber . Newzdirectory + System . getProperty ( "file . separator" ) + OptionsFilename , "Messageids" ) ; LinkedList ll = new LinkedList ( ) ; Enumeration keys = Messageids . keys ( ) ; while ( keys . hasMoreElements ( ) ) { String nextkey = ( String ) keys . nextElement ( ) ; String nextvalue = String . valueOf ( ( ( Long ) Messageids . get ( nextkey ) ) . longValue ( ) ) ; String [ ] s = new String [ 2 ] ; s [ 0 ] = nextkey ; s [ 1 ] = nextvalue ; ll . add ( s ) ; } ini . writeIni ( ll ) ; } catch ( Exception e ) { if ( Newzgrabber . verbose | | Newzgrabber . debug ) { System . err . println ( "There was a problem updating INI for transfers" ) ; System . err . println ( e . getMessage ( ) ) ; e . printStackTrace ( ) ; } } }
