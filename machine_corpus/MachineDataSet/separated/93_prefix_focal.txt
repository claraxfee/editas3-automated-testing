void test1 ( ) throws Throwable { SecureStoreManager secureStoreManager0 = new SecureStoreManager ( ) ; SSLContext sSLContext0 = SSLContext . getDefault ( ) ; SSLSocketFactoryImpl sSLSocketFactoryImpl0 = ( SSLSocketFactoryImpl ) secureStoreManager0 . getSocketFactory ( sSLContext0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" SSLSocketFactory getSocketFactory ( SSLContext context ) { return context . getSocketFactory ( ) ; }
void test2 ( ) throws Throwable { SecureStoreManager secureStoreManager0 = new SecureStoreManager ( ) ; QuickServerConfig quickServerConfig0 = new QuickServerConfig ( ) ; KeyManager [ ] keyManagerArray0 = secureStoreManager0 . loadKeyManagers ( quickServerConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" KeyManager [ ] loadKeyManagers ( QuickServerConfig config ) throws GeneralSecurityException , IOException { Secure secure = config . getSecure ( ) ; SecureStore secureStore = secure . getSecureStore ( ) ; if ( secureStore = = null ) { logger . fine ( "SecureStore configuration not set ! " + "So returning null for KeyManager" ) ; return null ; } KeyStoreInfo keyStoreInfo = secureStore . getKeyStoreInfo ( ) ; if ( keyStoreInfo = = null ) { logger . fine ( "KeyStoreInfo configuration not set ! " + "So returning null for KeyManager" ) ; return null ; } logger . finest ( "Loading KeyManagers" ) ; KeyStore ks = getKeyStoreForKey ( secureStore . getType ( ) , secureStore . getProvider ( ) ) ; char storepass [ ] = null ; if ( keyStoreInfo . getStorePassword ( ) ! = null ) { logger . finest ( "KeyStore : Store password was present ! " ) ; storepass = keyStoreInfo . getStorePassword ( ) . toCharArray ( ) ; } else { logger . finest ( "KeyStore : Store password was not set . . so asking ! " ) ; if ( sensitiveInput = = null ) { sensitiveInput = new SensitiveInput ( config . getName ( ) + " - Input Prompt" ) ; } storepass = sensitiveInput . getInput ( "Store password for KeyStore" ) ; if ( storepass = = null ) { logger . finest ( "No password entered . . will pass null" ) ; } } InputStream keyStoreStream = null ; try { if ( keyStoreInfo . getStoreFile ( ) . equalsIgnoreCase ( "none" ) = = false ) { logger . finest ( "KeyStore location : " + ConfigReader . makeAbsoluteToConfig ( keyStoreInfo . getStoreFile ( ) , config ) ) ; keyStoreStream = new FileInputStream ( ConfigReader . makeAbsoluteToConfig ( keyStoreInfo . getStoreFile ( ) , config ) ) ; } ks . load ( keyStoreStream , storepass ) ; logger . finest ( "KeyStore loaded" ) ; } finally { if ( keyStoreStream ! = null ) { keyStoreStream . close ( ) ; keyStoreStream = null ; } } char keypass [ ] = null ; if ( keyStoreInfo . getKeyPassword ( ) ! = null ) { logger . finest ( "KeyStore : key password was present ! " ) ; keypass = keyStoreInfo . getKeyPassword ( ) . toCharArray ( ) ; } else { logger . finest ( "KeyStore : Key password was not set . . so asking ! " ) ; if ( sensitiveInput = = null ) { sensitiveInput = new SensitiveInput ( config . getName ( ) + " - Input Prompt" ) ; } keypass = sensitiveInput . getInput ( "Key password for KeyStore" ) ; if ( keypass = = null ) { logger . finest ( "No password entered . . will pass blank" ) ; keypass = "" . toCharArray ( ) ; } } KeyManagerFactory kmf = KeyManagerFactory . getInstance ( secureStore . getAlgorithm ( ) ) ; kmf . init ( ks , keypass ) ; storepass = " " . toCharArray ( ) ; storepass = null ; keypass = " " . toCharArray ( ) ; keypass = null ; return kmf . getKeyManagers ( ) ; }
void test3 ( ) throws Throwable { SecureStoreManager secureStoreManager0 = new SecureStoreManager ( ) ; QuickServerConfig quickServerConfig0 = new QuickServerConfig ( ) ; TrustManager [ ] trustManagerArray0 = secureStoreManager0 . loadTrustManagers ( quickServerConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TrustManager [ ] loadTrustManagers ( QuickServerConfig config ) throws GeneralSecurityException , IOException { Secure secure = config . getSecure ( ) ; SecureStore secureStore = secure . getSecureStore ( ) ; TrustStoreInfo trustStoreInfo = secureStore . getTrustStoreInfo ( ) ; if ( trustStoreInfo = = null ) { return null ; } logger . finest ( "Loading TrustManagers" ) ; String type = null ; if ( trustStoreInfo . getType ( ) ! = null & & trustStoreInfo . getType ( ) . trim ( ) . length ( ) ! = 0 ) type = trustStoreInfo . getType ( ) ; else type = secureStore . getType ( ) ; String provider = null ; if ( trustStoreInfo . getProvider ( ) ! = null & & trustStoreInfo . getProvider ( ) . trim ( ) . length ( ) ! = 0 ) provider = trustStoreInfo . getProvider ( ) ; else provider = secureStore . getProvider ( ) ; KeyStore ts = getKeyStoreForTrust ( type , provider ) ; char trustpass [ ] = null ; if ( trustStoreInfo . getStorePassword ( ) ! = null ) { logger . finest ( "TrustStore : Store password was present ! " ) ; trustpass = trustStoreInfo . getStorePassword ( ) . toCharArray ( ) ; } else { logger . finest ( "TrustStore : Store password was not set . . so asking ! " ) ; if ( sensitiveInput = = null ) { sensitiveInput = new SensitiveInput ( config . getName ( ) + " - Input Prompt" ) ; } trustpass = sensitiveInput . getInput ( "Store password for TrustStore" ) ; if ( trustpass = = null ) { logger . finest ( "No password entered . . will pass null" ) ; } } InputStream trustStoreStream = null ; try { if ( trustStoreInfo . getStoreFile ( ) . equalsIgnoreCase ( "none" ) = = false ) { logger . finest ( "TrustStore location : " + ConfigReader . makeAbsoluteToConfig ( trustStoreInfo . getStoreFile ( ) , config ) ) ; trustStoreStream = new FileInputStream ( ConfigReader . makeAbsoluteToConfig ( trustStoreInfo . getStoreFile ( ) , config ) ) ; } ts . load ( trustStoreStream , trustpass ) ; logger . finest ( "TrustStore loaded" ) ; } finally { if ( trustStoreStream ! = null ) { trustStoreStream . close ( ) ; trustStoreStream = null ; } } TrustManagerFactory tmf = TrustManagerFactory . getInstance ( secureStore . getAlgorithm ( ) ) ; tmf . init ( ts ) ; return tmf . getTrustManagers ( ) ; }
void test0 ( ) throws Throwable { DataType dataType0 = DataType . OUT ; String string0 = dataType0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test0 ( ) throws Throwable { GhostSocketReaper ghostSocketReaper0 = new GhostSocketReaper ( ) ; String string0 = ghostSocketReaper0 . info ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test1 ( ) throws Throwable { QuickServer quickServer0 = new QuickServer ( ) ; boolean boolean0 = quickServer0 . startService ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean startService ( ) ; / * * Stop the service * / boolean stopService ( ) ; / * * Suspend the service * / boolean suspendService ( ) ; / / Sets max_client = 0 ; / * * Resume the service * / boolean resumeService ( ) ; / / Set max_client back to its value / * * * Information about the service , recommended format given below . * < p > < code > * & lt ; & lt ; ServiceName & gt ; & gt ; v & lt ; & lt ; Version_No & gt ; & gt ; \n < br > * & lt ; & lt ; IP_ADDRESS & gt ; & gt ; & lt ; & lt ; PORT_NO & gt ; & gt ; \n < br > * & lt ; & lt ; ANY OTHET INFORMATION & gt ; & gt ; * < / code > < / p > * / String info ( ) ; / * * * Returns the state of the process * As any constant of { @link Service }
void test2 ( ) throws Throwable { GhostSocketReaper ghostSocketReaper0 = new GhostSocketReaper ( ) ; boolean boolean0 = ghostSocketReaper0 . handleEvent ( 202 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test0 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . getServer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test1 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . setMaxAuthTryMsg ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test2 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . getClientCommandHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test3 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . setClientExtendedEventHandler ( ( ClientExtendedEventHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test4 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . setSocketChannel ( ( SocketChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test5 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . getMaxConnectionMsg ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test6 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . getSocket ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test7 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . setTrusted ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrusted ( ) { return trusted ; }
void test8 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; int int0 = theClient0 . getMaxAuthTry ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrusted ( ) { return trusted ; }
void test9 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . setTimeout ( 1947 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrusted ( ) { return trusted ; }
void test10 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . getClientBinaryHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrusted ( ) { return trusted ; }
void test11 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; boolean boolean0 = theClient0 . getCommunicationLogging ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrusted ( ) { return trusted ; }
void test12 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . setTimeoutMsg ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test13 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . getClientExtendedEventHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test14 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . getClientData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrusted ( ) { return trusted ; }
void test15 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test16 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; int int0 = theClient0 . getTimeout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrusted ( ) { return trusted ; }
void test17 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . setClientWriteHandler ( ( ClientWriteHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrusted ( ) { return trusted ; }
void test18 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . setClientData ( ( ClientData ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test19 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; CommandHandler commandHandler0 = new CommandHandler ( ) ; theClient0 . setClientCommandHandler ( ( ClientCommandHandler ) commandHandler0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrusted ( ) { return trusted ; }
void test20 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . setServer ( ( QuickServer ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test21 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . setCommunicationLogging ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test22 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . getMaxAuthTryMsg ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test23 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . setMaxConnectionMsg ( "qc#N# + SFW4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test24 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . getClientWriteHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test25 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; ClientEvent clientEvent0 = theClient0 . getClientEvent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test26 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . getClientAuthenticationHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test27 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . getTimeoutMsg ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test28 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; boolean boolean0 = theClient0 . getTrusted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test29 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; CommandHandler commandHandler0 = new CommandHandler ( ) ; theClient0 . setClientEventHandler ( ( ClientEventHandler ) commandHandler0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrusted ( ) { return trusted ; }
void test30 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; Socket socket0 = new Socket ( ) ; theClient0 . setSocket ( socket0 ) ; String string0 = theClient0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test31 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . setClientAuthenticationHandler ( ( ClientAuthenticationHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test32 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . getSocketChannel ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test33 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . setClientBinaryHandler ( ( ClientBinaryHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test34 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . setClientObjectHandler ( ( ClientObjectHandler ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test35 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . getClientObjectHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getTrusted ( ) { return trusted ; }
void test36 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . setMaxAuthTry ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test37 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; theClient0 . getClientEventHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test38 ( ) throws Throwable { TheClient theClient0 = new TheClient ( ) ; String string0 = theClient0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getCommunicationLogging ( ) ; / * * * Returns the { @link DataMode }
void test0 ( ) throws Throwable { ClientEvent clientEvent0 = ClientEvent . MAX_CON_BLOCKING ; String string0 = clientEvent0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test0 ( ) throws Throwable { DataMode dataMode0 = DataMode . OBJECT ; String string0 = dataMode0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test0 ( ) throws Throwable { AuthStatus authStatus0 = AuthStatus . SUCCESS ; String string0 = authStatus0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test0 ( ) throws Throwable { RegisterChannelRequest registerChannelRequest0 = new RegisterChannelRequest ( ( SelectableChannel ) null , ( - 1142 ) , ( Object ) ( - 1142 ) ) ; boolean boolean0 = registerChannelRequest0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOps ( ) { return ops ; }
void test1 ( ) throws Throwable { RegisterChannelRequest registerChannelRequest0 = new RegisterChannelRequest ( ( SelectableChannel ) null , 14 , ( Object ) "ssQ7qlBz7g" ) ; registerChannelRequest0 . setOps ( 14 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOps ( ) { return ops ; }
void test2 ( ) throws Throwable { RegisterChannelRequest registerChannelRequest0 = new RegisterChannelRequest ( ( SelectableChannel ) null , 14 , ( Object ) "ssQ7qlBz7g" ) ; boolean boolean0 = registerChannelRequest0 . equals ( ( Object ) registerChannelRequest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOps ( ) { return ops ; }
void test3 ( ) throws Throwable { RegisterChannelRequest registerChannelRequest0 = new RegisterChannelRequest ( ( SelectableChannel ) null , 1578 , ( Object ) "" ) ; Object object0 = new Object ( ) ; registerChannelRequest0 . setAtt ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOps ( ) { return ops ; }
void test4 ( ) throws Throwable { RegisterChannelRequest registerChannelRequest0 = new RegisterChannelRequest ( ( SelectableChannel ) null , 1578 , ( Object ) "" ) ; registerChannelRequest0 . setChannel ( ( SelectableChannel ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOps ( ) { return ops ; }
void test6 ( ) throws Throwable { RegisterChannelRequest registerChannelRequest0 = new RegisterChannelRequest ( ( SelectableChannel ) null , 1578 , ( Object ) "" ) ; Object object0 = new Object ( ) ; RegisterChannelRequest registerChannelRequest1 = new RegisterChannelRequest ( ( SelectableChannel ) null , 1578 , object0 ) ; boolean boolean0 = registerChannelRequest0 . equals ( ( Object ) registerChannelRequest1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getOps ( ) { return ops ; }
void test0 ( ) throws Throwable { SyncClientIdentifier syncClientIdentifier0 = new SyncClientIdentifier ( ) ; ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( false ) ; BasicObjectPool . Config basicObjectPool_Config0 = new BasicObjectPool . Config ( ) ; BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ( PoolableObjectFactory ) clientHandlerObjectFactory0 , basicObjectPool_Config0 ) ; syncClientIdentifier0 . setClientHandlerPool ( ( QSObjectPool ) basicObjectPool0 ) ; basicObjectPool0 . borrowObject ( ) ; ClientHandler clientHandler0 = syncClientIdentifier0 . findFirstClientById ( "\t < byte - buffer - size > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClientHandler findFirstClientById ( String id ) ; Iterator findAllClientById ( String pattern ) ; ClientHandler findClientByKey ( String key ) ; Iterator findAllClientByKey ( String pattern ) ; }
void test1 ( ) throws Throwable { SyncClientIdentifier syncClientIdentifier0 = new SyncClientIdentifier ( ) ; ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( false ) ; BasicObjectPool . Config basicObjectPool_Config0 = new BasicObjectPool . Config ( ) ; BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ( PoolableObjectFactory ) clientHandlerObjectFactory0 , basicObjectPool_Config0 ) ; syncClientIdentifier0 . setClientHandlerPool ( ( QSObjectPool ) basicObjectPool0 ) ; NonBlockingClientHandler nonBlockingClientHandler0 = ( NonBlockingClientHandler ) basicObjectPool0 . borrowObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Iterator findAllClientById ( String pattern ) ; ClientHandler findClientByKey ( String key ) ; Iterator findAllClientByKey ( String pattern ) ; }
void test2 ( ) throws Throwable { SyncClientIdentifier syncClientIdentifier0 = new SyncClientIdentifier ( ) ; ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( false ) ; BasicObjectPool . Config basicObjectPool_Config0 = new BasicObjectPool . Config ( ) ; BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ( PoolableObjectFactory ) clientHandlerObjectFactory0 , basicObjectPool_Config0 ) ; syncClientIdentifier0 . setClientHandlerPool ( ( QSObjectPool ) basicObjectPool0 ) ; basicObjectPool0 . borrowObject ( ) ; ClientHandler clientHandler0 = syncClientIdentifier0 . findClientByKey ( "\t < byte - buffer - size > " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClientHandler findClientByKey ( String key ) ; Iterator findAllClientByKey ( String pattern ) ; }
void test3 ( ) throws Throwable { SyncClientIdentifier syncClientIdentifier0 = new SyncClientIdentifier ( ) ; ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( false ) ; BasicObjectPool . Config basicObjectPool_Config0 = new BasicObjectPool . Config ( ) ; BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ( PoolableObjectFactory ) clientHandlerObjectFactory0 , basicObjectPool_Config0 ) ; syncClientIdentifier0 . setClientHandlerPool ( ( QSObjectPool ) basicObjectPool0 ) ; NonBlockingClientHandler nonBlockingClientHandler0 = ( NonBlockingClientHandler ) basicObjectPool0 . borrowObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Iterator findAllClientByKey ( String pattern ) ; }
void test3 ( ) throws Throwable { DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler ( ) ; CommandHandler commandHandler0 = new CommandHandler ( ) ; defaultClientEventHandler0 . setClientCommandHandler ( ( ClientCommandHandler ) commandHandler0 ) ; BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler ( ( - 40 ) ) ; defaultClientEventHandler0 . lostConnection ( ( ClientHandler ) blockingClientHandler0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test0 ( ) throws Throwable { SyncClientIdentifier syncClientIdentifier0 = new SyncClientIdentifier ( ) ; BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ) ; syncClientIdentifier0 . setClientHandlerPool ( ( QSObjectPool ) basicObjectPool0 ) ; ClientHandler clientHandler0 = syncClientIdentifier0 . findFirstClientById ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClientHandler findFirstClientById ( String id ) ; Iterator findAllClientById ( String pattern ) ; ClientHandler findClientByKey ( String key ) ; Iterator findAllClientByKey ( String pattern ) ; }
void test2 ( ) throws Throwable { OptimisticClientIdentifier optimisticClientIdentifier0 = new OptimisticClientIdentifier ( ) ; NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler ( ) ; optimisticClientIdentifier0 . checkClientId ( ( ClientHandler ) nonBlockingClientHandler0 , "Error in BavicObjectPool . maiKtain : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; / * * * Returns the { @link java . io . ObjectInputStream }
void test3 ( ) throws Throwable { OptimisticClientIdentifier optimisticClientIdentifier0 = new OptimisticClientIdentifier ( ) ; Pattern pattern0 = Pattern . compile ( "Error in BavicObjectPool . maiKtain : " ) ; ClientHandler clientHandler0 = optimisticClientIdentifier0 . checkClientId ( ( ClientHandler ) null , pattern0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClientHandler checkClientId ( ClientHandler foundClientHandler , String id ) { ClientIdentifiable data = getClientIdentifiable ( foundClientHandler ) ; if ( data = = null ) return null ; String foundId = data . getClientId ( ) ; / / logger . finest ( "Found id : " + foundId + " , id : " + id ) ; if ( foundId = = null ) { / / throw new NullPointerException ( "Id returned by ClientData was null ! " ) ; logger . finest ( "Id returned by ClientData was null ! Client may not yet ready . . skipping" ) ; return null ; } if ( foundId . equals ( id ) = = false ) foundClientHandler = null ; return foundClientHandler ; }
void test4 ( ) throws Throwable { OptimisticClientIdentifier optimisticClientIdentifier0 = new OptimisticClientIdentifier ( ) ; ClientHandler clientHandler0 = optimisticClientIdentifier0 . checkClientKey ( ( ClientHandler ) null , "Error in BavicObjectPool . maiKtain : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClientHandler checkClientKey ( ClientHandler foundClientHandler , String key ) { ClientIdentifiable data = getClientIdentifiable ( foundClientHandler ) ; if ( data = = null ) return null ; String foundKey = data . getClientKey ( ) ; / / logger . finest ( "Found key : " + foundKey + " , key : " + key ) ; if ( foundKey = = null ) { / / throw new NullPointerException ( "Key returned by ClientData was null ! " ) ; logger . finest ( "Key returned by ClientData was null ! Client may not yet ready . . skipping" ) ; return null ; } if ( foundKey . equals ( key ) = = false ) foundClientHandler = null ; return foundClientHandler ; }
void test5 ( ) throws Throwable { SyncClientIdentifier syncClientIdentifier0 = new SyncClientIdentifier ( ) ; BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler ( 0 ) ; Pattern pattern0 = Pattern . compile ( " / object - pool / byte - buffer - object - pool / init - size" , 0 ) ; syncClientIdentifier0 . checkClientKey ( ( ClientHandler ) blockingClientHandler0 , pattern0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String info ( ) ; / * * * Returns the state of the process * As any constant of { @link Service }
void test0 ( ) throws Throwable { OptimisticClientIdentifier optimisticClientIdentifier0 = new OptimisticClientIdentifier ( ) ; BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ) ; ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( false ) ; optimisticClientIdentifier0 . setClientHandlerPool ( ( QSObjectPool ) basicObjectPool0 ) ; basicObjectPool0 . setFactory ( ( PoolableObjectFactory ) clientHandlerObjectFactory0 ) ; basicObjectPool0 . borrowObject ( ) ; ClientHandler clientHandler0 = optimisticClientIdentifier0 . findFirstClientById ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClientHandler findFirstClientById ( String id ) ; Iterator findAllClientById ( String pattern ) ; ClientHandler findClientByKey ( String key ) ; Iterator findAllClientByKey ( String pattern ) ; }
void test1 ( ) throws Throwable { OptimisticClientIdentifier optimisticClientIdentifier0 = new OptimisticClientIdentifier ( ) ; BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ) ; ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( false ) ; optimisticClientIdentifier0 . setClientHandlerPool ( ( QSObjectPool ) basicObjectPool0 ) ; basicObjectPool0 . setFactory ( ( PoolableObjectFactory ) clientHandlerObjectFactory0 ) ; NonBlockingClientHandler nonBlockingClientHandler0 = ( NonBlockingClientHandler ) basicObjectPool0 . borrowObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Iterator findAllClientById ( String pattern ) ; ClientHandler findClientByKey ( String key ) ; Iterator findAllClientByKey ( String pattern ) ; }
void test2 ( ) throws Throwable { OptimisticClientIdentifier optimisticClientIdentifier0 = new OptimisticClientIdentifier ( ) ; BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ) ; ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( false ) ; optimisticClientIdentifier0 . setClientHandlerPool ( ( QSObjectPool ) basicObjectPool0 ) ; basicObjectPool0 . setFactory ( ( PoolableObjectFactory ) clientHandlerObjectFactory0 ) ; basicObjectPool0 . borrowObject ( ) ; ClientHandler clientHandler0 = optimisticClientIdentifier0 . findClientByKey ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClientHandler findClientByKey ( String key ) ; Iterator findAllClientByKey ( String pattern ) ; }
void test3 ( ) throws Throwable { OptimisticClientIdentifier optimisticClientIdentifier0 = new OptimisticClientIdentifier ( ) ; BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ) ; ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( false ) ; optimisticClientIdentifier0 . setClientHandlerPool ( ( QSObjectPool ) basicObjectPool0 ) ; basicObjectPool0 . setFactory ( ( PoolableObjectFactory ) clientHandlerObjectFactory0 ) ; NonBlockingClientHandler nonBlockingClientHandler0 = ( NonBlockingClientHandler ) basicObjectPool0 . borrowObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Iterator findAllClientByKey ( String pattern ) ; }
void test0 ( ) throws Throwable { QuickServer quickServer0 = new QuickServer ( ) ; QSAdminShell qSAdminShell0 = QSAdminShell . getInstance ( quickServer0 , "Unknown DataTsNpe : " ) ; String string0 = qSAdminShell0 . getPromptName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test1 ( ) throws Throwable { QSAdminShell qSAdminShell0 = QSAdminShell . getInstance ( ( QuickServer ) null , "Asking " ) ; qSAdminShell0 . startSocketListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void startSocketListener ( ) { String pad = "" ; Thread t = new Thread ( ) { void run ( ) { String rec = "" ; while ( true ) { try { rec = s_br . readLine ( ) ; } catch ( IOException e ) { logger . info ( "Shell Closed ! " + e . getMessage ( ) ) ; break ; } if ( rec = = null ) { clientSocket = null ; break ; } if ( rec . equals ( " + OK info follows" ) ) multilineResponse = true ; println ( pad + rec ) ; if ( multilineResponse = = false ) gotResponse = true ; else { if ( rec . equals ( " . " ) ) { gotResponse = true ; multilineResponse = false ; } } } / / end of while try { clientSocket . close ( ) ; clientSocket = null ; } catch ( Exception e ) { logger . fine ( error + e . getMessage ( ) ) ; } } } ; t . setDaemon ( true ) ; t . setName ( "GUIAdminShell - SocketListener" ) ; t . start ( ) ; }
void test2 ( ) throws Throwable { QuickServer quickServer0 = new QuickServer ( ) ; QSAdminShell qSAdminShell0 = QSAdminShell . getInstance ( quickServer0 , "Unknown DataTsNpe : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void stopShell ( ) throws IOException { stop = true ; clientSocket . close ( ) ; }
void test3 ( ) throws Throwable { QSAdminShell qSAdminShell0 = QSAdminShell . getInstance ( ( QuickServer ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DummyTrustManager getInstance ( ) { return instance ; }
void test4 ( ) throws Throwable { QSAdminShell qSAdminShell0 = QSAdminShell . getInstance ( ( QuickServer ) null , "Asking " ) ; qSAdminShell0 . setPromptName ( "Asking " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; / * * * Returns the { @link java . io . ObjectInputStream }
void test5 ( ) throws Throwable { QSAdminShell qSAdminShell0 = QSAdminShell . getInstance ( ( QuickServer ) null , "Asking " ) ; qSAdminShell0 . setPromptName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test6 ( ) throws Throwable { QSAdminShell qSAdminShell0 = QSAdminShell . getInstance ( ( QuickServer ) null , "Asking " ) ; qSAdminShell0 . run ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test0 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; HeaderPanel headerPanel0 = new HeaderPanel ( qSAdminMain0 , ( JFrame ) null ) ; headerPanel0 . setStatus ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setStatus ( char status ) { this . status = status ; }
void test1 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; HeaderPanel headerPanel0 = new HeaderPanel ( qSAdminMain0 , ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getStatus ( ) { return status ; }
void test2 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; HeaderPanel headerPanel0 = new HeaderPanel ( qSAdminMain0 , ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getStatus ( ) { return status ; }
void test3 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; HeaderPanel headerPanel0 = new HeaderPanel ( qSAdminMain0 , ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" char getStatus ( ) { return status ; }
void test4 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; HeaderPanel headerPanel0 = new HeaderPanel ( qSAdminMain0 , ( JFrame ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void handleLoginLogout ( ) { if ( qsadminMain . isConnected ( ) = = false ) { if ( loginDialog = = null ) { loginDialog = new LoginDialog ( parentFrame ) ; } loginDialog . show ( ) ; if ( loginDialog . isOk ( ) = = true ) { Thread performer = new Thread ( new Runnable ( ) { void run ( ) { String r [ ] = loginDialog . getValues ( ) ; try { boolean flag = qsadminMain . doLogin ( r [ 0 ] , Integer . parseInt ( r [ 1 ] ) , r [ 2 ] , r [ 3 ] ) ; if ( flag = = true ) { setLogoutText ( ) ; } else { setLoginText ( ) ; / / recall the login dialog handleLoginLogout ( ) ; } } catch ( Exception ex ) { logger . warning ( "Error logging in : " + ex ) ; setLoginText ( ) ; } } } , "QsAdminGUI - LoginThread" ) ; performer . start ( ) ; } } else { Thread performer = new Thread ( new Runnable ( ) { void run ( ) { try { qsadminMain . doLogout ( ) ; setLoginText ( ) ; } catch ( Exception ex ) { logger . warning ( "Error logging in : " + ex ) ; } } } , "QsAdminGUI - LogoutThread" ) ; performer . start ( ) ; } }
void test0 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; MainCommandPanel mainCommandPanel0 = new MainCommandPanel ( qSAdminMain0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTarget ( ) { return target ; }
void test1 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; MainCommandPanel mainCommandPanel0 = new MainCommandPanel ( qSAdminMain0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTarget ( ) { return target ; }
void test0 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; qSAdminMain0 . startSocketListener ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAppendToConsole ( ) { return appendToConsole ; }
void test1 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; qSAdminMain0 . setGUI ( ( QSAdminGUI ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLoggedIn ( ) { return loggedIn ; }
void test2 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; String string0 = qSAdminMain0 . sendCommunicationNoEcho ( "StackTrace : \n" , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLoggedIn ( ) { return loggedIn ; }
void test3 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; boolean boolean0 = qSAdminMain0 . isLoggedIn ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) throws SocketException ; / * * * Checks if the client is still connected and if socket is open . This is same as isConnected ( ) * but does not throw SocketException . * @since 1 . 4 . 6 * / boolean isOpen ( ) ; / * * * Returns flag indicating if the client is connected in secure mode * ( SSL or TLS ) . * @return secure flag * @since 1 . 4 . 0 * / boolean isSecure ( ) ; / * * * Makes current Client connection to secure protocol based on the * secure configuration set to the server . This method will just call * < code > makeSecure ( false , false , true , null ) < / code > . * @throws IOException * @throws NoSuchAlgorithmException * @throws KeyManagementException * @since 1 . 4 . 0 * / void makeSecure ( ) throws IOException , NoSuchAlgorithmException , KeyManagementException ; / * * * Makes current Client connection to secure protocol . * @param useClientMode falg if the socket should start its first handshake in "client" mode . * @param needClientAuth flag if the clients must authenticate themselves . * @param autoClose close the underlying socket when this socket is closed * @param protocol the standard name of the requested protocol . If < code > null < / code > will use the protocol set in secure configuration of the server . * @throws IOException * @throws NoSuchAlgorithmException * @throws KeyManagementException * @since 1 . 4 . 0 * / void makeSecure ( boolean useClientMode , boolean needClientAuth , boolean autoClose , String protocol ) throws IOException , NoSuchAlgorithmException , KeyManagementException ; / * * * Makes current Client connection to secure protocol . * This method will just call < code > makeSecure ( false , false , true , protocol ) < / code > . * @throws IOException * @throws NoSuchAlgorithmException * @throws KeyManagementException * @since 1 . 4 . 0 * / void makeSecure ( String protocol ) throws IOException , NoSuchAlgorithmException , KeyManagementException ; / * * * Read the binary input . This will block till some data is * received from the stream . Allowed only when * < code > DataType . IN < / code > is in < code > DataMode . BINARY < / code > mode . * @return The data as a String * @since 1 . 4 * / byte [ ] readBinary ( ) throws IOException ; / * * * Read the byte input . This will block till some data is * received from the stream . Allowed only when * < code > DataType . IN < / code > is in < code > DataMode . BYTE < / code > mode . * @return The data as a String * @since 1 . 3 . 2 * / String readBytes ( ) throws IOException ; / * * * Register OP_READ with the SelectionKey associated with the channel . If SelectionKey is * not set then it registers the channel with the Selector . * @since 1 . 4 . 5 * / void registerForRead ( ) throws IOException , ClosedChannelException ; / * * * Register OP_WRITE with the SelectionKey associated with the channel . * @since 1 . 4 . 5 * / void registerForWrite ( ) throws IOException , ClosedChannelException ; void run ( ) ; / * * * Send a binary data to the connected client . * If client is not connected it will just return . * @since 1 . 4 * @exception IOException * if Socket IO Error or Socket was closed by the client . * / void sendClientBinary ( byte [ ] data ) throws IOException ; / * * * Send a binary data to the connected client . * If client is not connected it will just return . * @since 1 . 4 . 5 * @exception IOException * if Socket IO Error or Socket was closed by the client . * / void sendClientBinary ( byte [ ] data , int off , int len ) throws IOException ; / * * * Send a String message to the connected client as a string of bytes . * If client is not connected it will just return . * @since 1 . 3 . 1 * @exception IOException * if Socket IO Error or Socket was closed by the client . * / void sendClientBytes ( String msg ) throws IOException ; / * * * Send a String message to the connected client * it adds a new line { \r\n }
void test4 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; qSAdminMain0 . getGUI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLoggedIn ( ) { return loggedIn ; }
void test8 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; qSAdminMain0 . readResponse ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAppendToConsole ( ) { return appendToConsole ; }
void test9 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; String string0 = qSAdminMain0 . readResponse ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) throws SocketException ; / * * * Checks if the client is still connected and if socket is open . This is same as isConnected ( ) * but does not throw SocketException . * @since 1 . 4 . 6 * / boolean isOpen ( ) ; / * * * Returns flag indicating if the client is connected in secure mode * ( SSL or TLS ) . * @return secure flag * @since 1 . 4 . 0 * / boolean isSecure ( ) ; / * * * Makes current Client connection to secure protocol based on the * secure configuration set to the server . This method will just call * < code > makeSecure ( false , false , true , null ) < / code > . * @throws IOException * @throws NoSuchAlgorithmException * @throws KeyManagementException * @since 1 . 4 . 0 * / void makeSecure ( ) throws IOException , NoSuchAlgorithmException , KeyManagementException ; / * * * Makes current Client connection to secure protocol . * @param useClientMode falg if the socket should start its first handshake in "client" mode . * @param needClientAuth flag if the clients must authenticate themselves . * @param autoClose close the underlying socket when this socket is closed * @param protocol the standard name of the requested protocol . If < code > null < / code > will use the protocol set in secure configuration of the server . * @throws IOException * @throws NoSuchAlgorithmException * @throws KeyManagementException * @since 1 . 4 . 0 * / void makeSecure ( boolean useClientMode , boolean needClientAuth , boolean autoClose , String protocol ) throws IOException , NoSuchAlgorithmException , KeyManagementException ; / * * * Makes current Client connection to secure protocol . * This method will just call < code > makeSecure ( false , false , true , protocol ) < / code > . * @throws IOException * @throws NoSuchAlgorithmException * @throws KeyManagementException * @since 1 . 4 . 0 * / void makeSecure ( String protocol ) throws IOException , NoSuchAlgorithmException , KeyManagementException ; / * * * Read the binary input . This will block till some data is * received from the stream . Allowed only when * < code > DataType . IN < / code > is in < code > DataMode . BINARY < / code > mode . * @return The data as a String * @since 1 . 4 * / byte [ ] readBinary ( ) throws IOException ; / * * * Read the byte input . This will block till some data is * received from the stream . Allowed only when * < code > DataType . IN < / code > is in < code > DataMode . BYTE < / code > mode . * @return The data as a String * @since 1 . 3 . 2 * / String readBytes ( ) throws IOException ; / * * * Register OP_READ with the SelectionKey associated with the channel . If SelectionKey is * not set then it registers the channel with the Selector . * @since 1 . 4 . 5 * / void registerForRead ( ) throws IOException , ClosedChannelException ; / * * * Register OP_WRITE with the SelectionKey associated with the channel . * @since 1 . 4 . 5 * / void registerForWrite ( ) throws IOException , ClosedChannelException ; void run ( ) ; / * * * Send a binary data to the connected client . * If client is not connected it will just return . * @since 1 . 4 * @exception IOException * if Socket IO Error or Socket was closed by the client . * / void sendClientBinary ( byte [ ] data ) throws IOException ; / * * * Send a binary data to the connected client . * If client is not connected it will just return . * @since 1 . 4 . 5 * @exception IOException * if Socket IO Error or Socket was closed by the client . * / void sendClientBinary ( byte [ ] data , int off , int len ) throws IOException ; / * * * Send a String message to the connected client as a string of bytes . * If client is not connected it will just return . * @since 1 . 3 . 1 * @exception IOException * if Socket IO Error or Socket was closed by the client . * / void sendClientBytes ( String msg ) throws IOException ; / * * * Send a String message to the connected client * it adds a new line { \r\n }
void test11 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; String string0 = qSAdminMain0 . sendCommunicationSilent ( "StackTrace : \n" , true , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLoggedIn ( ) { return loggedIn ; }
void test12 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; String string0 = qSAdminMain0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAppendToConsole ( ) { return appendToConsole ; }
void test13 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; float float0 = qSAdminMain0 . getServerVersionNo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isConnected ( ) throws SocketException ; / * * * Checks if the client is still connected and if socket is open . This is same as isConnected ( ) * but does not throw SocketException . * @since 1 . 4 . 6 * / boolean isOpen ( ) ; / * * * Returns flag indicating if the client is connected in secure mode * ( SSL or TLS ) . * @return secure flag * @since 1 . 4 . 0 * / boolean isSecure ( ) ; / * * * Makes current Client connection to secure protocol based on the * secure configuration set to the server . This method will just call * < code > makeSecure ( false , false , true , null ) < / code > . * @throws IOException * @throws NoSuchAlgorithmException * @throws KeyManagementException * @since 1 . 4 . 0 * / void makeSecure ( ) throws IOException , NoSuchAlgorithmException , KeyManagementException ; / * * * Makes current Client connection to secure protocol . * @param useClientMode falg if the socket should start its first handshake in "client" mode . * @param needClientAuth flag if the clients must authenticate themselves . * @param autoClose close the underlying socket when this socket is closed * @param protocol the standard name of the requested protocol . If < code > null < / code > will use the protocol set in secure configuration of the server . * @throws IOException * @throws NoSuchAlgorithmException * @throws KeyManagementException * @since 1 . 4 . 0 * / void makeSecure ( boolean useClientMode , boolean needClientAuth , boolean autoClose , String protocol ) throws IOException , NoSuchAlgorithmException , KeyManagementException ; / * * * Makes current Client connection to secure protocol . * This method will just call < code > makeSecure ( false , false , true , protocol ) < / code > . * @throws IOException * @throws NoSuchAlgorithmException * @throws KeyManagementException * @since 1 . 4 . 0 * / void makeSecure ( String protocol ) throws IOException , NoSuchAlgorithmException , KeyManagementException ; / * * * Read the binary input . This will block till some data is * received from the stream . Allowed only when * < code > DataType . IN < / code > is in < code > DataMode . BINARY < / code > mode . * @return The data as a String * @since 1 . 4 * / byte [ ] readBinary ( ) throws IOException ; / * * * Read the byte input . This will block till some data is * received from the stream . Allowed only when * < code > DataType . IN < / code > is in < code > DataMode . BYTE < / code > mode . * @return The data as a String * @since 1 . 3 . 2 * / String readBytes ( ) throws IOException ; / * * * Register OP_READ with the SelectionKey associated with the channel . If SelectionKey is * not set then it registers the channel with the Selector . * @since 1 . 4 . 5 * / void registerForRead ( ) throws IOException , ClosedChannelException ; / * * * Register OP_WRITE with the SelectionKey associated with the channel . * @since 1 . 4 . 5 * / void registerForWrite ( ) throws IOException , ClosedChannelException ; void run ( ) ; / * * * Send a binary data to the connected client . * If client is not connected it will just return . * @since 1 . 4 * @exception IOException * if Socket IO Error or Socket was closed by the client . * / void sendClientBinary ( byte [ ] data ) throws IOException ; / * * * Send a binary data to the connected client . * If client is not connected it will just return . * @since 1 . 4 . 5 * @exception IOException * if Socket IO Error or Socket was closed by the client . * / void sendClientBinary ( byte [ ] data , int off , int len ) throws IOException ; / * * * Send a String message to the connected client as a string of bytes . * If client is not connected it will just return . * @since 1 . 3 . 1 * @exception IOException * if Socket IO Error or Socket was closed by the client . * / void sendClientBytes ( String msg ) throws IOException ; / * * * Send a String message to the connected client * it adds a new line { \r\n }
void test14 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; qSAdminMain0 . getIpAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getAppendToConsole ( ) { return appendToConsole ; }
void test0 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; PropertiePanel propertiePanel0 = new PropertiePanel ( qSAdminMain0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTarget ( ) { return target ; }
void test1 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; PropertiePanel propertiePanel0 = new PropertiePanel ( qSAdminMain0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTarget ( ) { return target ; }
void test0 ( ) throws Throwable { PropertieSet propertieSet0 = PropertieSet . getPropertieSet ( ) ; List < Object > list0 = propertieSet0 . getList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List getList ( ) { return list ; }
void test1 ( ) throws Throwable { PropertieSet propertieSet0 = PropertieSet . getPropertieSet ( ) ; Map < Object , Object > map0 = propertieSet0 . getMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getMap ( ) { return map ; }
void test0 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; String string0 = propertie0 . getTarget ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . getSaveButton ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTarget ( ) { return target ; }
void test2 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; String string0 = propertie0 . getTargetNeeded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGetCommand ( ) { if ( targetNeeded . equals ( "yes" ) ) return "get " + target + " " + command ; else return "get " + command ; }
void test3 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . getEditField ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTarget ( ) { return target ; }
void test4 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . getComboBox ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGet ( ) { return get ; }
void test5 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; String string0 = propertie0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test6 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGetCommand ( ) { if ( targetNeeded . equals ( "yes" ) ) return "get " + target + " " + command ; else return "get " + command ; }
void test7 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSetCommand ( String value ) { if ( targetNeeded . equals ( "yes" ) ) return "set " + target + " " + command + " " + value ; else return "set " + command + " " + value ; }
void test8 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; String string0 = propertie0 . getSetCommand ( "1 . 3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test9 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTargetNeeded ( ) { return targetNeeded ; }
void test10 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGet ( ) { return get ; }
void test11 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setTarget ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTarget ( ) { return target ; }
void test12 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setTarget ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getVersionNo ( ) { return getVersionNo ( VER ) ; }
void test13 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setCommand ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTarget ( ) { return target ; }
void test14 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setCommand ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test15 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setGet ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTarget ( ) { return target ; }
void test16 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setSet ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSet ( ) { return set ; }
void test17 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTarget ( ) { return target ; }
void test18 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test19 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setDesc ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test20 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setDesc ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGetCommand ( ) { if ( targetNeeded . equals ( "yes" ) ) return "get " + target + " " + command ; else return "get " + command ; }
void test21 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setSelect ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGetCommand ( ) { if ( targetNeeded . equals ( "yes" ) ) return "get " + target + " " + command ; else return "get " + command ; }
void test22 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setSelect ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSet ( ) { return set ; }
void test23 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setVersion ( "Message for excess clients" ) ; float float0 = propertie0 . getVersionNo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return VER ; }
void test24 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; float float0 = propertie0 . getVersionNo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTarget ( ) { return target ; }
void test25 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setVersion ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTarget ( ) { return target ; }
void test26 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGet ( ) { return get ; }
void test27 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSet ( ) { return set ; }
void test28 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setSelect ( "edit" ) ; String string0 = propertie0 . toXML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test29 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setDesc ( "edit" ) ; String string0 = propertie0 . toXML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test30 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test31 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" QuickServer load ( String xml ) throws AppException { QuickServer qs = new QuickServer ( ) ; Object config [ ] = new Object [ ] { xml } ; qs . initServer ( config ) ; qs . startServer ( ) ; if ( qs . getConfig ( ) . getQSAdminServerConfig ( ) ! = null ) { qs . startQSAdminServer ( ) ; } return qs ; }
void test32 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; propertie0 . setType ( "get server null" ) ; QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; PropertiePanel propertiePanel0 = new PropertiePanel ( qSAdminMain0 ) ; propertie0 . load ( propertiePanel0 , qSAdminMain0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" float getVersionNo ( ) { return getVersionNo ( VER ) ; }
void test33 ( ) throws Throwable { Propertie propertie0 = new Propertie ( ) ; JPasswordField jPasswordField0 = new JPasswordField ( ) ; GridBagConstraints gridBagConstraints0 = new GridBagConstraints ( ) ; QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; PropertiePanel propertiePanel0 = new PropertiePanel ( qSAdminMain0 ) ; propertie0 . addToPanel ( ( Container ) jPasswordField0 , gridBagConstraints0 , propertiePanel0 , qSAdminMain0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isGet ( ) { return get ; }
void test0 ( ) throws Throwable { SimpleCommandSet simpleCommandSet0 = SimpleCommandSet . getSimpleCommands ( ) ; Map < Object , Object > map0 = simpleCommandSet0 . getMap ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map getMap ( ) { return map ; }
void test1 ( ) throws Throwable { SimpleCommandSet simpleCommandSet0 = SimpleCommandSet . getSimpleCommands ( ) ; List < Object > list0 = simpleCommandSet0 . getList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List getList ( ) { return list ; }
void test2 ( ) throws Throwable { String string0 = QSAdminGUI . getPluginDir ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPluginDir ( ) { return pluginDir ; }
void test2 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; CmdConsole cmdConsole0 = new CmdConsole ( qSAdminMain0 ) ; cmdConsole0 . append ( " is " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void append ( String msg ) { setSendEdit ( qsadminMain . isConnected ( ) ) ; messagesField . append ( msg + NEW_LINE ) ; messagesField . setCaretPosition ( messagesField . getText ( ) . length ( ) ) ; }
void test3 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; CmdConsole cmdConsole0 = new CmdConsole ( qSAdminMain0 ) ; cmdConsole0 . updateConnectionStatus ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateConnectionStatus ( boolean connected ) { serverButton . setEnabled ( connected ) ; selfButton . setEnabled ( connected ) ; commandPanel . setEnabled ( connected ) ; }
void test6 ( ) throws Throwable { QSAdminMain qSAdminMain0 = new QSAdminMain ( ) ; CmdConsole cmdConsole0 = new CmdConsole ( qSAdminMain0 ) ; cmdConsole0 . updateConnectionStatus ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void updateConnectionStatus ( boolean connected ) { serverButton . setEnabled ( connected ) ; selfButton . setEnabled ( connected ) ; commandPanel . setEnabled ( connected ) ; }
void test0 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; float float0 = simpleCommand0 . getVersionNo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; simpleCommand0 . getCommand ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMultiLineResponse ( ) { return multiLineResponse ; }
void test2 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test3 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; simpleCommand0 . getDesc ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTarget ( ) { return target ; }
void test4 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; simpleCommand0 . setCommand ( " < simple - command > \n\t < name > null < / name > \n\t < command > null < / command > \n\t < multi - line - response > no < / multi - line - response > \n\t < version > 1 . 3 < / version > \n\t < target - needed > no < / target - needed > \n < / simple - command > \n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSimpleCommand ( ) { if ( targetNeeded . equals ( "yes" ) ) return command + " " + target ; else return command ; }
void test5 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; simpleCommand0 . setDesc ( "yes" ) ; String string0 = simpleCommand0 . toXML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test6 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; simpleCommand0 . setName ( " < simple - command > \n\t < name > null < / name > \n\t < command > null < / command > \n\t < multi - line - response > no < / multi - line - response > \n\t < version > 1 . 3 < / version > \n\t < target - needed > no < / target - needed > \n < / simple - command > \n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTargetNeeded ( ) { return targetNeeded ; }
void test7 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test8 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; String string0 = simpleCommand0 . getTargetNeeded ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMultiLineResponse ( ) { return multiLineResponse ; }
void test9 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; simpleCommand0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSimpleCommand ( ) { if ( targetNeeded . equals ( "yes" ) ) return command + " " + target ; else return command ; }
void test10 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTarget ( ) { return target ; }
void test11 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; String string0 = simpleCommand0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMultiLineResponse ( ) { return multiLineResponse ; }
void test12 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; String string0 = simpleCommand0 . getMultiLineResponse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test13 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; String string0 = simpleCommand0 . getTarget ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMultiLineResponse ( ) { return multiLineResponse ; }
void test14 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; String string0 = simpleCommand0 . getSimpleCommand ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMultiLineResponse ( ) { return multiLineResponse ; }
void test15 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; simpleCommand0 . setVersion ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTargetNeeded ( ) { return targetNeeded ; }
void test17 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; simpleCommand0 . setVersion ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return VER ; }
void test18 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; String string0 = simpleCommand0 . toXML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMultiLineResponse ( ) { return multiLineResponse ; }
void test19 ( ) throws Throwable { SimpleCommand simpleCommand0 = new SimpleCommand ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { EditFieldDocumentListener editFieldDocumentListener0 = new EditFieldDocumentListener ( ( JButton ) null ) ; StyleContext styleContext0 = StyleContext . getDefaultStyleContext ( ) ; DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument ( styleContext0 ) ; DocumentEvent . EventType documentEvent_EventType0 = DocumentEvent . EventType . INSERT ; AbstractDocument . DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = defaultStyledDocument0 . new DefaultDocumentEvent ( 13 , 13 , documentEvent_EventType0 ) ; editFieldDocumentListener0 . changedUpdate ( ( DocumentEvent ) abstractDocument_DefaultDocumentEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void changedUpdate ( DocumentEvent e ) { / / System . out . println ( " > > Change Update" ) ; / / if ( saveButton ! = null ) saveButton . setEnabled ( true ) ; }
void test1 ( ) throws Throwable { EditFieldDocumentListener editFieldDocumentListener0 = new EditFieldDocumentListener ( ( JButton ) null ) ; StyleContext styleContext0 = StyleContext . getDefaultStyleContext ( ) ; DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument ( styleContext0 ) ; DocumentEvent . EventType documentEvent_EventType0 = DocumentEvent . EventType . INSERT ; AbstractDocument . DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = defaultStyledDocument0 . new DefaultDocumentEvent ( 13 , 13 , documentEvent_EventType0 ) ; editFieldDocumentListener0 . insertUpdate ( ( DocumentEvent ) abstractDocument_DefaultDocumentEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test2 ( ) throws Throwable { StyleContext styleContext0 = StyleContext . getDefaultStyleContext ( ) ; DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument ( styleContext0 ) ; DocumentEvent . EventType documentEvent_EventType0 = DocumentEvent . EventType . INSERT ; AbstractDocument . DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = defaultStyledDocument0 . new DefaultDocumentEvent ( 13 , 13 , documentEvent_EventType0 ) ; DefaultEditorKit . CutAction defaultEditorKit_CutAction0 = new DefaultEditorKit . CutAction ( ) ; JButton jButton0 = new JButton ( ( Action ) defaultEditorKit_CutAction0 ) ; EditFieldDocumentListener editFieldDocumentListener0 = new EditFieldDocumentListener ( jButton0 ) ; editFieldDocumentListener0 . insertUpdate ( ( DocumentEvent ) abstractDocument_DefaultDocumentEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { return enabled ; }
void test3 ( ) throws Throwable { EditFieldDocumentListener editFieldDocumentListener0 = new EditFieldDocumentListener ( ( JButton ) null ) ; StyleContext styleContext0 = StyleContext . getDefaultStyleContext ( ) ; DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument ( styleContext0 ) ; DocumentEvent . EventType documentEvent_EventType0 = DocumentEvent . EventType . INSERT ; AbstractDocument . DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = defaultStyledDocument0 . new DefaultDocumentEvent ( 13 , 13 , documentEvent_EventType0 ) ; editFieldDocumentListener0 . removeUpdate ( ( DocumentEvent ) abstractDocument_DefaultDocumentEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void removeUpdate ( DocumentEvent e ) { if ( saveButton ! = null ) saveButton . setEnabled ( true ) ; }
void test4 ( ) throws Throwable { JButton jButton0 = new JButton ( " . jar" , ( Icon ) null ) ; EditFieldDocumentListener editFieldDocumentListener0 = new EditFieldDocumentListener ( jButton0 ) ; GapContent gapContent0 = new GapContent ( ( - 1685 ) ) ; PlainDocument plainDocument0 = new PlainDocument ( ( AbstractDocument . Content ) gapContent0 ) ; DocumentEvent . EventType documentEvent_EventType0 = DocumentEvent . EventType . INSERT ; AbstractDocument . DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0 . new DefaultDocumentEvent ( ( - 1685 ) , ( - 1685 ) , documentEvent_EventType0 ) ; editFieldDocumentListener0 . removeUpdate ( ( DocumentEvent ) abstractDocument_DefaultDocumentEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { return enabled ; }
void test0 ( ) throws Throwable { String string0 = MyString . removeAllHtmlSpChar ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String removeAllHtmlSpChar ( String source ) { String temp = source ; temp = replaceAll ( temp , " & nbsp ; " , " " ) ; temp = replaceAll ( temp , " & lt ; " , " < " ) ; temp = replaceAll ( temp , " & gt ; " , " > " ) ; temp = replaceAll ( temp , " & amp ; " , " & " ) ; temp = replaceAll ( temp , " & quot ; " , "\"" ) ; return temp ; }
void test1 ( ) throws Throwable { MyString myString0 = new MyString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { String string0 = MyString . replace ( "" , "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replace ( String source , String key , String with ) { if ( source = = null ) throw new NullPointerException ( "Parameter - > source was null" ) ; if ( key = = null ) throw new NullPointerException ( "Parameter - > key was null" ) ; if ( with = = null ) throw new NullPointerException ( "Parameter - > with was null" ) ; int start = 0 ; int end = 0 ; String result = "" ; start = source . indexOf ( key ) ; end = start + key . length ( ) ; if ( start = = - 1 ) return null ; result = source . substring ( 0 , start ) ; result + = with ; result + = source . substring ( end , source . length ( ) ) ; return result ; }
void test3 ( ) throws Throwable { String string0 = MyString . replaceAllTags ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String replaceAllTags ( String source , String with ) { if ( source = = null ) throw new NullPointerException ( "One of parameter - > source was null" ) ; if ( with = = null ) throw new NullPointerException ( "One of parameter - > with was null" ) ; String temp = "" ; while ( true ) { temp = "" ; temp = replaceTags ( source , with ) ; if ( temp = = null ) break ; else source = temp ; } return source ; }
void test4 ( ) throws Throwable { String string0 = MyString . getMemInfo ( 0 . 0F ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMemInfo ( float bytes ) { if ( bytes < 1024 ) { return doublePrcNum . format ( bytes ) + " B" ; } bytes = bytes / 1024 ; if ( bytes < 1024 ) { return doublePrcNum . format ( bytes ) + " KB" ; } bytes = bytes / 1024 ; if ( bytes < 1024 ) { return doublePrcNum . format ( bytes ) + " MB" ; } bytes = bytes / 1024 ; return doublePrcNum . format ( bytes ) + " GB" ; }
void test5 ( ) throws Throwable { String string0 = MyString . alignRight ( "p / * K'Vi" , 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String alignRight ( String data , int len ) { StringBuilder sb = new StringBuilder ( data ) ; while ( sb . length ( ) < len ) { sb . insert ( 0 , ' ' ) ; } return sb . toString ( ) ; }
void test6 ( ) throws Throwable { String string0 = MyString . alignLeft ( "" , ( - 794 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String alignLeft ( String data , int len ) { StringBuilder sb = new StringBuilder ( data ) ; while ( sb . length ( ) < len ) { sb . append ( ' ' ) ; } return sb . toString ( ) ; }
void test0 ( ) throws Throwable { Assertion assertion0 = new Assertion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { return enabled ; }
void test1 ( ) throws Throwable { boolean boolean0 = Assertion . isEnabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnabled ( ) { return enabled ; }
void test0 ( ) throws Throwable { ClassLoader classLoader0 = ClassUtil . getClassLoaderFromJar ( "U2B > ( GCtI { 5 ? cfX1ME" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map loadClass ( ClassLoader classLoader , String classNames [ ] ) throws Exception { Class classloded = null ; HashMap classHash = new HashMap ( ) ; for ( int i = 0 ; i < classNames . length ; i + + ) { try { classloded = classLoader . loadClass ( classNames [ i ] ) ; classHash . put ( classNames [ i ] , classloded ) ; } catch ( Exception e ) { logger . warning ( "Could not load classes : " + e ) ; } } return classHash ; }
void test1 ( ) throws Throwable { ClassUtil classUtil0 = new ClassUtil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test2 ( ) throws Throwable { ClassLoader classLoader0 = ClassUtil . getClassLoader ( " . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClassLoader getClassLoader ( ) { return classLoader ; }
void test3 ( ) throws Throwable { ClassLoader classLoader0 = ClassUtil . getClassLoader ( "U2B > ( GCtI { 5 ? cfX1ME" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClassLoader getClassLoader ( ) { return classLoader ; }
void test0 ( ) throws Throwable { SimpleConsoleFormatter simpleConsoleFormatter0 = new SimpleConsoleFormatter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String format ( LogRecord record ) { Date date = new Date ( ) ; date . setTime ( record . getMillis ( ) ) ; StringBuilder sb = new StringBuilder ( ) ; sb . append ( df . format ( date ) ) ; sb . append ( " [ " ) ; sb . append ( MyString . alignLeft ( record . getLevel ( ) . getLocalizedName ( ) , 7 ) ) ; sb . append ( " ] " ) ; if ( record . getSourceClassName ( ) ! = null ) { sb . append ( record . getSourceClassName ( ) ) ; } else { sb . append ( record . getLoggerName ( ) ) ; } if ( record . getSourceMethodName ( ) ! = null ) { sb . append ( ' . ' ) ; sb . append ( record . getSourceMethodName ( ) ) ; } sb . append ( " - " ) ; sb . append ( formatMessage ( record ) ) ; if ( record . getThrown ( ) ! = null ) { sb . append ( lineSeparator ) ; sb . append ( " [ Exception : " ) ; sb . append ( record . getThrown ( ) . toString ( ) ) ; sb . append ( ' ] ' ) ; } sb . append ( lineSeparator ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { SimpleConsoleFormatter simpleConsoleFormatter0 = new SimpleConsoleFormatter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String format ( LogRecord record ) { Date date = new Date ( ) ; date . setTime ( record . getMillis ( ) ) ; StringBuilder sb = new StringBuilder ( ) ; sb . append ( df . format ( date ) ) ; sb . append ( " [ " ) ; sb . append ( MyString . alignLeft ( record . getLevel ( ) . getLocalizedName ( ) , 7 ) ) ; sb . append ( " ] " ) ; if ( record . getSourceClassName ( ) ! = null ) { sb . append ( record . getSourceClassName ( ) ) ; } else { sb . append ( record . getLoggerName ( ) ) ; } if ( record . getSourceMethodName ( ) ! = null ) { sb . append ( ' . ' ) ; sb . append ( record . getSourceMethodName ( ) ) ; } sb . append ( " - " ) ; sb . append ( formatMessage ( record ) ) ; if ( record . getThrown ( ) ! = null ) { sb . append ( lineSeparator ) ; sb . append ( " [ Exception : " ) ; sb . append ( record . getThrown ( ) . toString ( ) ) ; sb . append ( ' ] ' ) ; } sb . append ( lineSeparator ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { SimpleTextFormatter simpleTextFormatter0 = new SimpleTextFormatter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String format ( LogRecord record ) { Date date = new Date ( ) ; date . setTime ( record . getMillis ( ) ) ; StringBuilder sb = new StringBuilder ( ) ; sb . append ( df . format ( date ) ) ; sb . append ( " [ " ) ; sb . append ( MyString . alignLeft ( record . getLevel ( ) . getLocalizedName ( ) , 7 ) ) ; sb . append ( " ] " ) ; if ( record . getSourceClassName ( ) ! = null ) { sb . append ( record . getSourceClassName ( ) ) ; } else { sb . append ( record . getLoggerName ( ) ) ; } if ( record . getSourceMethodName ( ) ! = null ) { sb . append ( ' . ' ) ; sb . append ( record . getSourceMethodName ( ) ) ; } sb . append ( " - " ) ; sb . append ( formatMessage ( record ) ) ; if ( record . getThrown ( ) ! = null ) { sb . append ( lineSeparator ) ; sb . append ( " [ Exception : " ) ; sb . append ( record . getThrown ( ) . toString ( ) ) ; sb . append ( ' ] ' ) ; } sb . append ( lineSeparator ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { SimpleTextFormatter simpleTextFormatter0 = new SimpleTextFormatter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String format ( LogRecord record ) { Date date = new Date ( ) ; date . setTime ( record . getMillis ( ) ) ; StringBuilder sb = new StringBuilder ( ) ; sb . append ( df . format ( date ) ) ; sb . append ( " [ " ) ; sb . append ( MyString . alignLeft ( record . getLevel ( ) . getLocalizedName ( ) , 7 ) ) ; sb . append ( " ] " ) ; if ( record . getSourceClassName ( ) ! = null ) { sb . append ( record . getSourceClassName ( ) ) ; } else { sb . append ( record . getLoggerName ( ) ) ; } if ( record . getSourceMethodName ( ) ! = null ) { sb . append ( ' . ' ) ; sb . append ( record . getSourceMethodName ( ) ) ; } sb . append ( " - " ) ; sb . append ( formatMessage ( record ) ) ; if ( record . getThrown ( ) ! = null ) { sb . append ( lineSeparator ) ; sb . append ( " [ Exception : " ) ; sb . append ( record . getThrown ( ) . toString ( ) ) ; sb . append ( ' ] ' ) ; } sb . append ( lineSeparator ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { SimpleTextFormatter simpleTextFormatter0 = new SimpleTextFormatter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String format ( LogRecord record ) { Date date = new Date ( ) ; date . setTime ( record . getMillis ( ) ) ; StringBuilder sb = new StringBuilder ( ) ; sb . append ( df . format ( date ) ) ; sb . append ( " [ " ) ; sb . append ( MyString . alignLeft ( record . getLevel ( ) . getLocalizedName ( ) , 7 ) ) ; sb . append ( " ] " ) ; if ( record . getSourceClassName ( ) ! = null ) { sb . append ( record . getSourceClassName ( ) ) ; } else { sb . append ( record . getLoggerName ( ) ) ; } if ( record . getSourceMethodName ( ) ! = null ) { sb . append ( ' . ' ) ; sb . append ( record . getSourceMethodName ( ) ) ; } sb . append ( " - " ) ; sb . append ( formatMessage ( record ) ) ; if ( record . getThrown ( ) ! = null ) { sb . append ( lineSeparator ) ; sb . append ( " [ Exception : " ) ; sb . append ( record . getThrown ( ) . toString ( ) ) ; sb . append ( ' ] ' ) ; } sb . append ( lineSeparator ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { SimpleConsoleWithThreadFormatter simpleConsoleWithThreadFormatter0 = new SimpleConsoleWithThreadFormatter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String format ( LogRecord record ) { Date date = new Date ( ) ; date . setTime ( record . getMillis ( ) ) ; StringBuilder sb = new StringBuilder ( ) ; sb . append ( df . format ( date ) ) ; sb . append ( " [ " ) ; sb . append ( MyString . alignLeft ( record . getLevel ( ) . getLocalizedName ( ) , 7 ) ) ; sb . append ( " ] " ) ; if ( record . getSourceClassName ( ) ! = null ) { sb . append ( record . getSourceClassName ( ) ) ; } else { sb . append ( record . getLoggerName ( ) ) ; } if ( record . getSourceMethodName ( ) ! = null ) { sb . append ( ' . ' ) ; sb . append ( record . getSourceMethodName ( ) ) ; } sb . append ( " - " ) ; sb . append ( formatMessage ( record ) ) ; if ( record . getThrown ( ) ! = null ) { sb . append ( lineSeparator ) ; sb . append ( " [ Exception : " ) ; sb . append ( record . getThrown ( ) . toString ( ) ) ; sb . append ( ' ] ' ) ; } sb . append ( lineSeparator ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { SimpleConsoleWithThreadFormatter simpleConsoleWithThreadFormatter0 = new SimpleConsoleWithThreadFormatter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String format ( LogRecord record ) { Date date = new Date ( ) ; date . setTime ( record . getMillis ( ) ) ; StringBuilder sb = new StringBuilder ( ) ; sb . append ( df . format ( date ) ) ; sb . append ( " [ " ) ; sb . append ( MyString . alignLeft ( record . getLevel ( ) . getLocalizedName ( ) , 7 ) ) ; sb . append ( " ] " ) ; if ( record . getSourceClassName ( ) ! = null ) { sb . append ( record . getSourceClassName ( ) ) ; } else { sb . append ( record . getLoggerName ( ) ) ; } if ( record . getSourceMethodName ( ) ! = null ) { sb . append ( ' . ' ) ; sb . append ( record . getSourceMethodName ( ) ) ; } sb . append ( " - " ) ; sb . append ( formatMessage ( record ) ) ; if ( record . getThrown ( ) ! = null ) { sb . append ( lineSeparator ) ; sb . append ( " [ Exception : " ) ; sb . append ( record . getThrown ( ) . toString ( ) ) ; sb . append ( ' ] ' ) ; } sb . append ( lineSeparator ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { SimpleJDKLoggingHook simpleJDKLoggingHook0 = new SimpleJDKLoggingHook ( ) ; String string0 = simpleJDKLoggingHook0 . info ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String info ( ) ; / * * * Returns the state of the process * As any constant of { @link Service }
void test0 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setDebugNonBlockingMode ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getClientSocketTcpNoDelay ( ) { return clientSocketTcpNoDelay ; }
void test1 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setPerformancePreferencesBandwidth ( 981 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPerformancePreferencesBandwidth ( ) { return performancePreferencesBandwidth ; }
void test2 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setPerformancePreferencesLatency ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getClientSocketTcpNoDelay ( ) { return clientSocketTcpNoDelay ; }
void test3 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test4 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setQSObjectPoolMaker ( "Sj , r5 } R" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test5 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClientIdentifier getClientIdentifier ( ) { return clientIdentifier ; }
void test6 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test7 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setClientSocketReceiveBufferSize ( 465 ) ; String string0 = advancedSettings0 . toXML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClientSocketReceiveBufferSize ( ) { return clientSocketReceiveBufferSize ; }
void test8 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setPerformancePreferencesConnectionTime ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSocketLinger ( ) { return socketLinger ; }
void test9 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setMaxThreadsForNioWrite ( 544 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSocketLinger ( ) { return socketLinger ; }
void test10 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setCharset ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPerformancePreferencesBandwidth ( ) { return performancePreferencesBandwidth ; }
void test11 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPerformancePreferencesConnectionTime ( ) { return performancePreferencesConnectionTime ; }
void test12 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setCharset ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSocketLinger ( ) { return socketLinger ; }
void test14 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setByteBufferSize ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getByteBufferSize ( ) { return byteBufferSize ; }
void test15 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setByteBufferSize ( 544 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getByteBufferSize ( ) { return byteBufferSize ; }
void test16 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setBacklog ( ( - 1127 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getBacklog ( ) { return backlog ; }
void test17 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setBacklog ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test18 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setClientIdentifier ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getByteBufferSize ( ) { return byteBufferSize ; }
void test19 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setClientIdentifier ( "ISO - 8859 - 1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClientIdentifier getClientIdentifier ( ) { return clientIdentifier ; }
void test20 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setClientIdentifier ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getSocketLinger ( ) { return socketLinger ; }
void test21 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; String string0 = advancedSettings0 . toXML ( "1kX6#TlvI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseDirectByteBuffer ( ) { return useDirectByteBuffer ; }
void test22 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setClientSocketTrafficClass ( "dVD^ & #" ) ; String string0 = advancedSettings0 . toXML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getUseDirectByteBuffer ( ) { return useDirectByteBuffer ; }
void test23 ( ) throws Throwable { AdvancedSettings advancedSettings0 = new AdvancedSettings ( ) ; advancedSettings0 . setClientSocketSendBufferSize ( 465 ) ; String string0 = advancedSettings0 . toXML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getClientSocketSendBufferSize ( ) { return clientSocketSendBufferSize ; }
void test0 ( ) throws Throwable { ApplicationConfiguration applicationConfiguration0 = new ApplicationConfiguration ( ) ; Property property0 = new Property ( ) ; applicationConfiguration0 . addProperty ( property0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPromptType ( ) { return promptType ; }
void test1 ( ) throws Throwable { ApplicationConfiguration applicationConfiguration0 = new ApplicationConfiguration ( ) ; applicationConfiguration0 . setPromptType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPromptType ( ) { return promptType ; }
void test2 ( ) throws Throwable { ApplicationConfiguration applicationConfiguration0 = new ApplicationConfiguration ( ) ; applicationConfiguration0 . setPromptType ( "gui" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setPromptType ( String promptType ) { if ( promptType ! = null & & promptType . equals ( "" ) = = false ) if ( promptType . equals ( "gui" ) | | promptType . equals ( "console" ) ) this . promptType = promptType ; }
void test3 ( ) throws Throwable { ApplicationConfiguration applicationConfiguration0 = new ApplicationConfiguration ( ) ; applicationConfiguration0 . setPromptType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPromptType ( ) { return promptType ; }
void test4 ( ) throws Throwable { ApplicationConfiguration applicationConfiguration0 = new ApplicationConfiguration ( ) ; applicationConfiguration0 . setPromptType ( "U" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPromptType ( ) { return promptType ; }
void test5 ( ) throws Throwable { ApplicationConfiguration applicationConfiguration0 = new ApplicationConfiguration ( ) ; applicationConfiguration0 . setPromptType ( "console" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPromptType ( ) { return promptType ; }
void test6 ( ) throws Throwable { ApplicationConfiguration applicationConfiguration0 = new ApplicationConfiguration ( ) ; Property property0 = applicationConfiguration0 . findProperty ( "b ? * g^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPromptType ( ) { return promptType ; }
void test7 ( ) throws Throwable { ApplicationConfiguration applicationConfiguration0 = new ApplicationConfiguration ( ) ; applicationConfiguration0 . put ( ( Object ) "" , ( Object ) " { } " ) ; Property property0 = applicationConfiguration0 . findProperty ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPromptType ( ) { return promptType ; }
void test8 ( ) throws Throwable { ApplicationConfiguration applicationConfiguration0 = new ApplicationConfiguration ( ) ; String string0 = applicationConfiguration0 . toXML ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test9 ( ) throws Throwable { ApplicationConfiguration applicationConfiguration0 = new ApplicationConfiguration ( ) ; String string0 = applicationConfiguration0 . toXML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { ThreadObjectPoolConfig threadObjectPoolConfig0 = new ThreadObjectPoolConfig ( ) ; ThreadObjectPoolConfig threadObjectPoolConfig1 = new ThreadObjectPoolConfig ( ( PoolConfig ) threadObjectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxActive ( ) { return maxActive ; }
void test1 ( ) throws Throwable { ThreadObjectPoolConfig threadObjectPoolConfig0 = new ThreadObjectPoolConfig ( ) ; String string0 = threadObjectPoolConfig0 . toXML ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { ThreadObjectPoolConfig threadObjectPoolConfig0 = new ThreadObjectPoolConfig ( ) ; String string0 = threadObjectPoolConfig0 . toXML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { ServerHooks serverHooks0 = new ServerHooks ( ) ; serverHooks0 . addClassName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addClassName ( String className ) { if ( className ! = null & & className . trim ( ) . length ( ) ! = 0 ) { add ( className . trim ( ) ) ; } }
void test1 ( ) throws Throwable { ServerHooks serverHooks0 = new ServerHooks ( ) ; serverHooks0 . addClassName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addClassName ( String className ) { if ( className ! = null & & className . trim ( ) . length ( ) ! = 0 ) { add ( className . trim ( ) ) ; } }
void test2 ( ) throws Throwable { ServerHooks serverHooks0 = new ServerHooks ( ) ; serverHooks0 . addClassName ( " | TU | : udQ & 5hw7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addClassName ( String className ) { if ( className ! = null & & className . trim ( ) . length ( ) ! = 0 ) { add ( className . trim ( ) ) ; } }
void test3 ( ) throws Throwable { ServerHooks serverHooks0 = new ServerHooks ( ) ; String string0 = serverHooks0 . toXML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { Secure secure0 = new Secure ( ) ; boolean boolean0 = secure0 . isClientAuthEnable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLoad ( ) { return load ; }
void test1 ( ) throws Throwable { Secure secure0 = new Secure ( ) ; boolean boolean0 = secure0 . isLoad ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getEnable ( ) { return enable ; }
void test2 ( ) throws Throwable { Secure secure0 = new Secure ( ) ; secure0 . setEnable ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { if ( isClosed ( ) = = false ) { return server . getLocalPort ( ) ; } if ( getSecure ( ) . isEnable ( ) = = false ) { return serverPort ; } else { int _port = getSecure ( ) . getPort ( ) ; if ( _port = = - 1 ) return serverPort ; else return _port ; } }
void test3 ( ) throws Throwable { Secure secure0 = new Secure ( ) ; boolean boolean0 = secure0 . isEnable ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getLoad ( ) { return load ; }
void test4 ( ) throws Throwable { Secure secure0 = new Secure ( ) ; secure0 . setClientAuthEnable ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLoad ( ) { return load ; }
void test5 ( ) throws Throwable { Secure secure0 = new Secure ( ) ; secure0 . setEnable ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getLoad ( ) { return load ; }
void test6 ( ) throws Throwable { Secure secure0 = new Secure ( ) ; secure0 . setPort ( ( - 1994 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { if ( isClosed ( ) = = false ) { return server . getLocalPort ( ) ; } if ( getSecure ( ) . isEnable ( ) = = false ) { return serverPort ; } else { int _port = getSecure ( ) . getPort ( ) ; if ( _port = = - 1 ) return serverPort ; else return _port ; } }
void test7 ( ) throws Throwable { Secure secure0 = new Secure ( ) ; secure0 . setPort ( 535 ) ; String string0 = secure0 . toXML ( "TLS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPort ( ) { if ( isClosed ( ) = = false ) { return server . getLocalPort ( ) ; } if ( getSecure ( ) . isEnable ( ) = = false ) { return serverPort ; } else { int _port = getSecure ( ) . getPort ( ) ; if ( _port = = - 1 ) return serverPort ; else return _port ; } }
void test8 ( ) throws Throwable { Secure secure0 = new Secure ( ) ; secure0 . setProtocol ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEnable ( ) { return enable ; }
void test9 ( ) throws Throwable { Secure secure0 = new Secure ( ) ; secure0 . setProtocol ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getEnable ( ) { return enable ; }
void test10 ( ) throws Throwable { Secure secure0 = new Secure ( ) ; secure0 . setProtocol ( "sBV - 4t6Xh38`V^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProtocol ( ) { return protocol ; }
void test11 ( ) throws Throwable { Secure secure0 = new Secure ( ) ; secure0 . setSecureStore ( ( SecureStore ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getLoad ( ) { return load ; }
void test12 ( ) throws Throwable { Secure secure0 = new Secure ( ) ; SecureStore secureStore0 = secure0 . getSecureStore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getLoad ( ) { return load ; }
void test13 ( ) throws Throwable { Secure secure0 = new Secure ( ) ; String string0 = secure0 . toXML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { AccessConstraintConfig accessConstraintConfig0 = new AccessConstraintConfig ( ) ; String string0 = accessConstraintConfig0 . toXML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test1 ( ) throws Throwable { AccessConstraintConfig accessConstraintConfig0 = new AccessConstraintConfig ( ) ; String string0 = accessConstraintConfig0 . toXML ( " < access - constraint > \n < / access - constraint > \n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test2 ( ) throws Throwable { AccessConstraintConfig accessConstraintConfig0 = new AccessConstraintConfig ( ) ; IpFilterConfig ipFilterConfig0 = new IpFilterConfig ( ) ; accessConstraintConfig0 . setIpFilterConfig ( ipFilterConfig0 ) ; String string0 = accessConstraintConfig0 . toXML ( " < access - constraint > \n < / access - constraint > \n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { AccessConstraintConfig accessConstraintConfig0 = new AccessConstraintConfig ( ) ; Socket socket0 = new Socket ( ) ; accessConstraintConfig0 . checkAccept ( socket0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void checkAccept ( String host , int port ) { / / throw new SecurityException ( "Accept denied from " + host + " : " + port ) ; }
void test5 ( ) throws Throwable { AccessConstraintConfig accessConstraintConfig0 = new AccessConstraintConfig ( ) ; Socket socket0 = new Socket ( ) ; IpFilterConfig ipFilterConfig0 = new IpFilterConfig ( ) ; accessConstraintConfig0 . setIpFilterConfig ( ipFilterConfig0 ) ; accessConstraintConfig0 . checkAccept ( socket0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void checkAccept ( String host , int port ) { / / throw new SecurityException ( "Accept denied from " + host + " : " + port ) ; }
void test0 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; secureStore0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithm ( ) { return algorithm ; }
void test1 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; secureStore0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithm ( ) { return algorithm ; }
void test2 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecureStoreManager ( ) { return secureStoreManager ; }
void test3 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; secureStore0 . setAlgorithm ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithm ( ) { return algorithm ; }
void test4 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; secureStore0 . setAlgorithm ( " { _dWSu0rBmFf" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test5 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; secureStore0 . setAlgorithm ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithm ( ) { return algorithm ; }
void test6 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; secureStore0 . setProvider ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecureStoreManager ( ) { return secureStoreManager ; }
void test7 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; secureStore0 . setProvider ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test8 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; secureStore0 . setProvider ( "X { cZa ] c_dRBp [ NW" ) ; String string0 = secureStore0 . toXML ( "gY7'90K | mcD@e" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecureStoreManager ( ) { return secureStoreManager ; }
void test9 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; secureStore0 . setKeyStoreInfo ( ( KeyStoreInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecureStoreManager ( ) { return secureStoreManager ; }
void test10 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; secureStore0 . setTrustStoreInfo ( ( TrustStoreInfo ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSecureStoreManager ( ) { return secureStoreManager ; }
void test11 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; TrustStoreInfo trustStoreInfo0 = new TrustStoreInfo ( ) ; secureStore0 . setTrustStoreInfo ( trustStoreInfo0 ) ; String string0 = secureStore0 . toXML ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test12 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; secureStore0 . setSecureStoreManager ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithm ( ) { return algorithm ; }
void test13 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; secureStore0 . setSecureStoreManager ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test14 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAlgorithm ( ) { return algorithm ; }
void test15 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; String string0 = secureStore0 . toXML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test16 ( ) throws Throwable { SecureStore secureStore0 = new SecureStore ( ) ; KeyStoreInfo keyStoreInfo0 = new KeyStoreInfo ( ) ; secureStore0 . setKeyStoreInfo ( keyStoreInfo0 ) ; String string0 = secureStore0 . toXML ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { ServerMode serverMode0 = new ServerMode ( ) ; String string0 = serverMode0 . toXML ( "Blocking" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBlocking ( ) { return blocking ; }
void test1 ( ) throws Throwable { ServerMode serverMode0 = new ServerMode ( ) ; String string0 = serverMode0 . toXML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBlocking ( ) { return blocking ; }
void test2 ( ) throws Throwable { ServerMode serverMode0 = new ServerMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test3 ( ) throws Throwable { ServerMode serverMode0 = new ServerMode ( ) ; String string0 = serverMode0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getBlocking ( ) { return blocking ; }
void test0 ( ) throws Throwable { TrustStoreInfo trustStoreInfo0 = new TrustStoreInfo ( ) ; trustStoreInfo0 . setStoreFile ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStoreFile ( ) { return storeFile ; }
void test1 ( ) throws Throwable { TrustStoreInfo trustStoreInfo0 = new TrustStoreInfo ( ) ; trustStoreInfo0 . setStoreFile ( "Slb% / l~ZW" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStoreFile ( ) { return storeFile ; }
void test2 ( ) throws Throwable { TrustStoreInfo trustStoreInfo0 = new TrustStoreInfo ( ) ; trustStoreInfo0 . setStoreFile ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStoreFile ( ) { return storeFile ; }
void test3 ( ) throws Throwable { TrustStoreInfo trustStoreInfo0 = new TrustStoreInfo ( ) ; trustStoreInfo0 . setStorePassword ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStoreFile ( ) { return storeFile ; }
void test4 ( ) throws Throwable { TrustStoreInfo trustStoreInfo0 = new TrustStoreInfo ( ) ; trustStoreInfo0 . setStorePassword ( "H'e\"~ ? " ) ; String string0 = trustStoreInfo0 . toXML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test5 ( ) throws Throwable { TrustStoreInfo trustStoreInfo0 = new TrustStoreInfo ( ) ; trustStoreInfo0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStoreFile ( ) { return storeFile ; }
void test6 ( ) throws Throwable { TrustStoreInfo trustStoreInfo0 = new TrustStoreInfo ( ) ; trustStoreInfo0 . setType ( " < / store - password > \n" ) ; String string0 = trustStoreInfo0 . toXML ( " < / store - password > \n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test7 ( ) throws Throwable { TrustStoreInfo trustStoreInfo0 = new TrustStoreInfo ( ) ; trustStoreInfo0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStoreFile ( ) { return storeFile ; }
void test8 ( ) throws Throwable { TrustStoreInfo trustStoreInfo0 = new TrustStoreInfo ( ) ; trustStoreInfo0 . setProvider ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStoreFile ( ) { return storeFile ; }
void test9 ( ) throws Throwable { TrustStoreInfo trustStoreInfo0 = new TrustStoreInfo ( ) ; trustStoreInfo0 . setProvider ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getStoreFile ( ) { return storeFile ; }
void test10 ( ) throws Throwable { TrustStoreInfo trustStoreInfo0 = new TrustStoreInfo ( ) ; String string0 = trustStoreInfo0 . toXML ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test11 ( ) throws Throwable { TrustStoreInfo trustStoreInfo0 = new TrustStoreInfo ( ) ; trustStoreInfo0 . setProvider ( " < / store - password > \n" ) ; String string0 = trustStoreInfo0 . toXML ( " < / store - password > \n" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( " < simple - command > \n" ) ; sb . append ( "\t < name > " ) . append ( name ) . append ( " < / name > \n" ) ; sb . append ( "\t < command > " ) . append ( command ) . append ( " < / command > \n" ) ; if ( multiLineResponse ! = null & & multiLineResponse . equals ( "yes" ) ) sb . append ( "\t < multi - line - response > yes < / multi - line - response > \n" ) ; else sb . append ( "\t < multi - line - response > no < / multi - line - response > \n" ) ; if ( desc ! = null ) sb . append ( "\t < desc > " ) . append ( desc ) . append ( " < / desc > \n" ) ; sb . append ( "\t < version > " ) . append ( version ) . append ( " < / version > \n" ) ; if ( targetNeeded ! = null & & targetNeeded . equals ( "yes" ) ) sb . append ( "\t < target - needed > yes < / target - needed > \n" ) ; else sb . append ( "\t < target - needed > no < / target - needed > \n" ) ; sb . append ( " < / simple - command > \n" ) ; return sb . toString ( ) ; }
void test0 ( ) throws Throwable { BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ) ; Object object0 = basicObjectPool0 . getObjectToSynchronize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObjectToSynchronize ( ) ; Iterator findAllClient ( ) ; ClientHandler findFirstClientById ( String id ) ; Iterator findAllClientById ( String pattern ) ; ClientHandler findClientByKey ( String key ) ; Iterator findAllClientByKey ( String pattern ) ; }
void test1 ( ) throws Throwable { BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ) ; Iterator < Object > iterator0 = basicObjectPool0 . getAllActiveObjects ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Iterator getAllActiveObjects ( ) { List _list = new LinkedList ( ) ; _list . addAll ( activeObjects ) ; return _list . iterator ( ) ; / / * / activeObjects . iterator ( ) ; }
void test2 ( ) throws Throwable { BasicObjectPool . Config basicObjectPool_Config0 = new BasicObjectPool . Config ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test3 ( ) throws Throwable { BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ) ; ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( false ) ; basicObjectPool0 . setFactory ( ( PoolableObjectFactory ) clientHandlerObjectFactory0 ) ; NonBlockingClientHandler nonBlockingClientHandler0 = ( NonBlockingClientHandler ) basicObjectPool0 . borrowObject ( ) ; NonBlockingClientHandler nonBlockingClientHandler1 = ( NonBlockingClientHandler ) basicObjectPool0 . borrowObject ( ) ; basicObjectPool0 . addObject ( ) ; basicObjectPool0 . addObject ( ) ; basicObjectPool0 . addObject ( ) ; basicObjectPool0 . addObject ( ) ; basicObjectPool0 . addObject ( ) ; basicObjectPool0 . addObject ( ) ; basicObjectPool0 . addObject ( ) ; basicObjectPool0 . addObject ( ) ; basicObjectPool0 . returnObject ( ( Object ) nonBlockingClientHandler1 ) ; basicObjectPool0 . addObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String info ( ) ; / * * * Returns the state of the process * As any constant of { @link Service }
void test4 ( ) throws Throwable { BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ( PoolableObjectFactory ) null , ( BasicObjectPool . Config ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumIdle ( ) { return idleObjects . size ( ) ; }
void test5 ( ) throws Throwable { ByteBufferObjectFactory byteBufferObjectFactory0 = new ByteBufferObjectFactory ( 13 , true ) ; BasicObjectPool . Config basicObjectPool_Config0 = new BasicObjectPool . Config ( ) ; BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ( PoolableObjectFactory ) byteBufferObjectFactory0 , basicObjectPool_Config0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumIdle ( ) { return idleObjects . size ( ) ; }
void test6 ( ) throws Throwable { BasicObjectPool . Config basicObjectPool_Config0 = new BasicObjectPool . Config ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object borrowObject ( ) throws Exception { if ( getNumIdle ( ) < = 0 & & ( config . maxActive = = - 1 | | config . maxActive > getNumActive ( ) ) ) { addObject ( ) ; } if ( getNumIdle ( ) < = 0 ) { throw new NoSuchElementException ( "No free objects ! MaxActive : " + config . maxActive + " , NumActive : " + getNumActive ( ) ) ; } Object obj = null ; ( this ) { obj = idleObjects . iterator ( ) . next ( ) ; idleObjects . remove ( obj ) ; factory . activateObject ( obj ) ; activeObjects . add ( obj ) ; } return obj ; }
void test7 ( ) throws Throwable { BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ) ; ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( false ) ; basicObjectPool0 . setFactory ( ( PoolableObjectFactory ) clientHandlerObjectFactory0 ) ; basicObjectPool0 . addObject ( ) ; NonBlockingClientHandler nonBlockingClientHandler0 = ( NonBlockingClientHandler ) basicObjectPool0 . borrowObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String info ( ) ; / * * * Returns the state of the process * As any constant of { @link Service }
void test8 ( ) throws Throwable { ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( false ) ; BasicObjectPool . Config basicObjectPool_Config0 = new BasicObjectPool . Config ( ) ; BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ( PoolableObjectFactory ) clientHandlerObjectFactory0 , basicObjectPool_Config0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object borrowObject ( ) throws Exception { if ( getNumIdle ( ) < = 0 & & ( config . maxActive = = - 1 | | config . maxActive > getNumActive ( ) ) ) { addObject ( ) ; } if ( getNumIdle ( ) < = 0 ) { throw new NoSuchElementException ( "No free objects ! MaxActive : " + config . maxActive + " , NumActive : " + getNumActive ( ) ) ; } Object obj = null ; ( this ) { obj = idleObjects . iterator ( ) . next ( ) ; idleObjects . remove ( obj ) ; factory . activateObject ( obj ) ; activeObjects . add ( obj ) ; } return obj ; }
void test9 ( ) throws Throwable { ByteBufferObjectFactory byteBufferObjectFactory0 = new ByteBufferObjectFactory ( 13 , true ) ; BasicObjectPool . Config basicObjectPool_Config0 = new BasicObjectPool . Config ( ) ; BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ( PoolableObjectFactory ) byteBufferObjectFactory0 , basicObjectPool_Config0 ) ; Object object0 = basicObjectPool0 . borrowObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumIdle ( ) { return idleObjects . size ( ) ; }
void test10 ( ) throws Throwable { ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( false ) ; BasicObjectPool . Config basicObjectPool_Config0 = new BasicObjectPool . Config ( ) ; BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ( PoolableObjectFactory ) clientHandlerObjectFactory0 , basicObjectPool_Config0 ) ; basicObjectPool0 . returnObject ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void returnObject ( Object obj ) throws Exception { activeObjects . remove ( obj ) ; if ( factory . validateObject ( obj ) = = false ) { logger . finer ( "Object not good for return : " + obj ) ; return ; } factory . passivateObject ( obj ) ; idleObjects . add ( obj ) ; if ( config . maxIdle ! = - 1 & & config . maxIdle < getNumIdle ( ) ) { maintain ( ) ; } }
void test2 ( ) throws Throwable { ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( false ) ; NonBlockingClientHandler nonBlockingClientHandler0 = ( NonBlockingClientHandler ) clientHandlerObjectFactory0 . makeObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; / * * * Returns the { @link java . io . ObjectInputStream }
void test3 ( ) throws Throwable { ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( true ) ; BlockingClientHandler blockingClientHandler0 = ( BlockingClientHandler ) clientHandlerObjectFactory0 . makeObject ( ) ; boolean boolean0 = clientHandlerObjectFactory0 . validateObject ( ( Object ) blockingClientHandler0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test5 ( ) throws Throwable { ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( false ) ; boolean boolean0 = clientHandlerObjectFactory0 . validateObject ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean validateObject ( Object obj ) { if ( obj = = null ) return false ; BasicClientHandler ch = ( BasicClientHandler ) obj ; if ( ch . getInstanceCount ( ) = = id ) return true ; else { return false ; } }
void test6 ( ) throws Throwable { ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( true ) ; BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler ( 1981 ) ; boolean boolean0 = clientHandlerObjectFactory0 . validateObject ( ( Object ) blockingClientHandler0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; / * * * Returns the { @link java . io . ObjectInputStream }
void test0 ( ) throws Throwable { PoolHelper poolHelper0 = new PoolHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { StackObjectPool stackObjectPool0 = new StackObjectPool ( ) ; boolean boolean0 = PoolHelper . isPoolOpen ( ( ObjectPool ) stackObjectPool0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPoolOpen ( ObjectPool pool ) { try { pool . getNumIdle ( ) ; } catch ( Exception e ) { return false ; } return true ; }
void test1 ( ) throws Throwable { ByteBufferObjectFactory byteBufferObjectFactory0 = new ByteBufferObjectFactory ( ( - 712 ) , true ) ; byteBufferObjectFactory0 . activateObject ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void activateObject ( Object obj ) { }
void test4 ( ) throws Throwable { ByteBufferObjectFactory byteBufferObjectFactory0 = new ByteBufferObjectFactory ( ( - 712 ) , true ) ; byteBufferObjectFactory0 . destroyObject ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void destroyObject ( Object obj ) { if ( obj = = null ) return ; passivateObject ( obj ) ; obj = null ; }
void test5 ( ) throws Throwable { ByteBufferObjectFactory byteBufferObjectFactory0 = new ByteBufferObjectFactory ( ( - 712 ) , true ) ; Object object0 = new Object ( ) ; boolean boolean0 = byteBufferObjectFactory0 . validateObject ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean validateObject ( Object obj ) { if ( obj = = null ) return false ; BasicClientHandler ch = ( BasicClientHandler ) obj ; if ( ch . getInstanceCount ( ) = = id ) return true ; else { return false ; } }
void test6 ( ) throws Throwable { ByteBufferObjectFactory byteBufferObjectFactory0 = new ByteBufferObjectFactory ( ( - 1021 ) , false ) ; boolean boolean0 = byteBufferObjectFactory0 . validateObject ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean validateObject ( Object obj ) { if ( obj = = null ) return false ; BasicClientHandler ch = ( BasicClientHandler ) obj ; if ( ch . getInstanceCount ( ) = = id ) return true ; else { return false ; } }
void test2 ( ) throws Throwable { ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( false ) ; SoftReferenceObjectPool softReferenceObjectPool0 = new SoftReferenceObjectPool ( ( PoolableObjectFactory ) clientHandlerObjectFactory0 ) ; MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ( ObjectPool ) softReferenceObjectPool0 ) ; makeQSObjectPool0 . borrowObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumActive ( ) { return activeObjects . size ( ) ; }
void test3 ( ) throws Throwable { StackObjectPool stackObjectPool0 = new StackObjectPool ( ) ; MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ( ObjectPool ) stackObjectPool0 ) ; makeQSObjectPool0 . setFactory ( ( PoolableObjectFactory ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumIdle ( ) { return idleObjects . size ( ) ; }
void test4 ( ) throws Throwable { ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory ( false ) ; SoftReferenceObjectPool softReferenceObjectPool0 = new SoftReferenceObjectPool ( ( PoolableObjectFactory ) clientHandlerObjectFactory0 ) ; MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ( ObjectPool ) softReferenceObjectPool0 ) ; makeQSObjectPool0 . close ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClosed ( ) ; / * * * Checks if the client is still connected . * @exception SocketException if Socket is not open . * @since 1 . 4 . 5 * / boolean isConnected ( ) throws SocketException ; / * * * Checks if the client is still connected and if socket is open . This is same as isConnected ( ) * but does not throw SocketException . * @since 1 . 4 . 6 * / boolean isOpen ( ) ; / * * * Returns flag indicating if the client is connected in secure mode * ( SSL or TLS ) . * @return secure flag * @since 1 . 4 . 0 * / boolean isSecure ( ) ; / * * * Makes current Client connection to secure protocol based on the * secure configuration set to the server . This method will just call * < code > makeSecure ( false , false , true , null ) < / code > . * @throws IOException * @throws NoSuchAlgorithmException * @throws KeyManagementException * @since 1 . 4 . 0 * / void makeSecure ( ) throws IOException , NoSuchAlgorithmException , KeyManagementException ; / * * * Makes current Client connection to secure protocol . * @param useClientMode falg if the socket should start its first handshake in "client" mode . * @param needClientAuth flag if the clients must authenticate themselves . * @param autoClose close the underlying socket when this socket is closed * @param protocol the standard name of the requested protocol . If < code > null < / code > will use the protocol set in secure configuration of the server . * @throws IOException * @throws NoSuchAlgorithmException * @throws KeyManagementException * @since 1 . 4 . 0 * / void makeSecure ( boolean useClientMode , boolean needClientAuth , boolean autoClose , String protocol ) throws IOException , NoSuchAlgorithmException , KeyManagementException ; / * * * Makes current Client connection to secure protocol . * This method will just call < code > makeSecure ( false , false , true , protocol ) < / code > . * @throws IOException * @throws NoSuchAlgorithmException * @throws KeyManagementException * @since 1 . 4 . 0 * / void makeSecure ( String protocol ) throws IOException , NoSuchAlgorithmException , KeyManagementException ; / * * * Read the binary input . This will block till some data is * received from the stream . Allowed only when * < code > DataType . IN < / code > is in < code > DataMode . BINARY < / code > mode . * @return The data as a String * @since 1 . 4 * / byte [ ] readBinary ( ) throws IOException ; / * * * Read the byte input . This will block till some data is * received from the stream . Allowed only when * < code > DataType . IN < / code > is in < code > DataMode . BYTE < / code > mode . * @return The data as a String * @since 1 . 3 . 2 * / String readBytes ( ) throws IOException ; / * * * Register OP_READ with the SelectionKey associated with the channel . If SelectionKey is * not set then it registers the channel with the Selector . * @since 1 . 4 . 5 * / void registerForRead ( ) throws IOException , ClosedChannelException ; / * * * Register OP_WRITE with the SelectionKey associated with the channel . * @since 1 . 4 . 5 * / void registerForWrite ( ) throws IOException , ClosedChannelException ; void run ( ) ; / * * * Send a binary data to the connected client . * If client is not connected it will just return . * @since 1 . 4 * @exception IOException * if Socket IO Error or Socket was closed by the client . * / void sendClientBinary ( byte [ ] data ) throws IOException ; / * * * Send a binary data to the connected client . * If client is not connected it will just return . * @since 1 . 4 . 5 * @exception IOException * if Socket IO Error or Socket was closed by the client . * / void sendClientBinary ( byte [ ] data , int off , int len ) throws IOException ; / * * * Send a String message to the connected client as a string of bytes . * If client is not connected it will just return . * @since 1 . 3 . 1 * @exception IOException * if Socket IO Error or Socket was closed by the client . * / void sendClientBytes ( String msg ) throws IOException ; / * * * Send a String message to the connected client * it adds a new line { \r\n }
void test5 ( ) throws Throwable { ByteBufferObjectFactory byteBufferObjectFactory0 = new ByteBufferObjectFactory ( 27 , true ) ; SoftReferenceObjectPool softReferenceObjectPool0 = new SoftReferenceObjectPool ( ( PoolableObjectFactory ) byteBufferObjectFactory0 ) ; MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ( ObjectPool ) softReferenceObjectPool0 ) ; makeQSObjectPool0 . addObject ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumIdle ( ) { return idleObjects . size ( ) ; }
void test7 ( ) throws Throwable { ByteBufferObjectFactory byteBufferObjectFactory0 = new ByteBufferObjectFactory ( 27 , true ) ; SoftReferenceObjectPool softReferenceObjectPool0 = new SoftReferenceObjectPool ( ( PoolableObjectFactory ) byteBufferObjectFactory0 ) ; MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ( ObjectPool ) softReferenceObjectPool0 ) ; int int0 = makeQSObjectPool0 . getNumIdle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumIdle ( ) { return idleObjects . size ( ) ; }
void test8 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; Object object0 = makeQSObjectPool0 . getObjectToSynchronize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Object getObjectToSynchronize ( ) ; Iterator findAllClient ( ) ; ClientHandler findFirstClientById ( String id ) ; Iterator findAllClientById ( String pattern ) ; ClientHandler findClientByKey ( String key ) ; Iterator findAllClientByKey ( String pattern ) ; }
void test9 ( ) throws Throwable { GenericObjectPool genericObjectPool0 = new GenericObjectPool ( ( PoolableObjectFactory ) null ) ; MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ( ObjectPool ) genericObjectPool0 ) ; Object object0 = new Object ( ) ; makeQSObjectPool0 . returnObject ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumActive ( ) { return activeObjects . size ( ) ; }
void test11 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; MakeQSObjectPool makeQSObjectPool1 = ( MakeQSObjectPool ) makeQSObjectPool0 . getQSObjectPool ( ( ObjectPool ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { if ( obj = = null ) return false ; RegisterChannelRequest req = ( RegisterChannelRequest ) obj ; boolean res = req . getChannel ( ) = = getChannel ( ) ; if ( res ) res = req . getAtt ( ) = = getAtt ( ) ; if ( res ) res = req . getOps ( ) = = getOps ( ) ; return res ; }
void test0 ( ) throws Throwable { ClientThread clientThread0 = new ClientThread ( ( ClientPool ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; / * * * Returns the { @link java . io . ObjectInputStream }
void test1 ( ) throws Throwable { ClientThread clientThread0 = new ClientThread ( ( ClientPool ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) ; / * * * Updates the InputStream and OutputStream for the ClientHandler for the * set Socket . * @since 1 . 4 . 0 * @see #setSocket * / void updateInputOutputStreams ( ) throws IOException ; / * * * Updates the last communication time for this client * @since 1 . 3 . 3 * / void updateLastCommunicationTime ( ) ; / * * * Returns the { @link java . sql . Connection }
void test2 ( ) throws Throwable { ClientThread clientThread0 = new ClientThread ( ( ClientPool ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test3 ( ) throws Throwable { ClientThread clientThread0 = new ClientThread ( ( ClientPool ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInstanceId ( ) { return id ; }
void test4 ( ) throws Throwable { ClientThread clientThread0 = new ClientThread ( ( ClientPool ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test0 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; QuickServerConfig quickServerConfig0 = new QuickServerConfig ( ) ; ObjectPoolConfig objectPoolConfig0 = quickServerConfig0 . getObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) objectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test1 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; QuickServerConfig quickServerConfig0 = new QuickServerConfig ( ) ; ObjectPoolConfig objectPoolConfig0 = quickServerConfig0 . getObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) objectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test2 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; QuickServerConfig quickServerConfig0 = new QuickServerConfig ( ) ; ObjectPoolConfig objectPoolConfig0 = quickServerConfig0 . getObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) objectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test3 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; QuickServerConfig quickServerConfig0 = new QuickServerConfig ( ) ; ObjectPoolConfig objectPoolConfig0 = quickServerConfig0 . getObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) objectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Iterator getAllClientThread ( ) { return ( ( QSObjectPool ) pool ) . getAllActiveObjects ( ) ; }
void test4 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; QuickServerConfig quickServerConfig0 = new QuickServerConfig ( ) ; ObjectPoolConfig objectPoolConfig0 = quickServerConfig0 . getObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) objectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test5 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; ClientDataObjectPoolConfig clientDataObjectPoolConfig0 = new ClientDataObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) clientDataObjectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumActive ( ) { return activeObjects . size ( ) ; }
void test6 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; ClientDataObjectPoolConfig clientDataObjectPoolConfig0 = new ClientDataObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) clientDataObjectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getNumIdle ( ) { return idleObjects . size ( ) ; }
void test7 ( ) throws Throwable { BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ) ; ObjectPoolConfig objectPoolConfig0 = new ObjectPoolConfig ( ) ; ByteBufferObjectPoolConfig byteBufferObjectPoolConfig0 = objectPoolConfig0 . getByteBufferObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) basicObjectPool0 , ( PoolConfig ) byteBufferObjectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean shouldNioWriteHappen ( ) { if ( maxThreadsForNioWrite < = 0 | | countNioWriteThreads < maxThreadsForNioWrite ) { return true ; } else { return false ; } }
void test8 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; QuickServerConfig quickServerConfig0 = new QuickServerConfig ( ) ; ObjectPoolConfig objectPoolConfig0 = quickServerConfig0 . getObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) objectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test9 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; QuickServerConfig quickServerConfig0 = new QuickServerConfig ( ) ; ObjectPoolConfig objectPoolConfig0 = quickServerConfig0 . getObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) objectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test10 ( ) throws Throwable { BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ) ; ObjectPoolConfig objectPoolConfig0 = new ObjectPoolConfig ( ) ; ByteBufferObjectPoolConfig byteBufferObjectPoolConfig0 = objectPoolConfig0 . getByteBufferObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) basicObjectPool0 , ( PoolConfig ) byteBufferObjectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void returnObject ( Object obj ) throws Exception { activeObjects . remove ( obj ) ; if ( factory . validateObject ( obj ) = = false ) { logger . finer ( "Object not good for return : " + obj ) ; return ; } factory . passivateObject ( obj ) ; idleObjects . add ( obj ) ; if ( config . maxIdle ! = - 1 & & config . maxIdle < getNumIdle ( ) ) { maintain ( ) ; } }
void test11 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; QuickServerConfig quickServerConfig0 = new QuickServerConfig ( ) ; ObjectPoolConfig objectPoolConfig0 = quickServerConfig0 . getObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) objectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void clear ( ) { listToMonitor . clear ( ) ; }
void test12 ( ) throws Throwable { GenericObjectPool genericObjectPool0 = new GenericObjectPool ( ( PoolableObjectFactory ) null , 0 , ( byte ) 0 , ( long ) 0 , ( int ) ( byte ) 0 , ( int ) ( byte ) 0 , true , true , ( long ) ( byte ) 0 , ( int ) ( byte ) 0 , ( long ) ( byte ) 0 , true , ( long ) ( byte ) 0 , true ) ; MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ( ObjectPool ) genericObjectPool0 ) ; PoolConfig poolConfig0 = new PoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , poolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addClient ( Runnable r ) throws NoSuchElementException { addClient ( r , false ) ; }
void test13 ( ) throws Throwable { StackObjectPool stackObjectPool0 = new StackObjectPool ( 12 ) ; MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ( ObjectPool ) stackObjectPool0 ) ; ClientHandlerObjectPoolConfig clientHandlerObjectPoolConfig0 = new ClientHandlerObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) clientHandlerObjectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addClient ( Runnable r ) throws NoSuchElementException { addClient ( r , false ) ; }
void test14 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; ClientDataObjectPoolConfig clientDataObjectPoolConfig0 = new ClientDataObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) clientDataObjectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test15 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; QuickServerConfig quickServerConfig0 = new QuickServerConfig ( ) ; ObjectPoolConfig objectPoolConfig0 = quickServerConfig0 . getObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) objectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isClientAvailable ( ) { if ( clients . isEmpty ( ) ) { return false ; } else { return true ; } }
void test16 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; QuickServerConfig quickServerConfig0 = new QuickServerConfig ( ) ; ObjectPoolConfig objectPoolConfig0 = quickServerConfig0 . getObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) objectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test17 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; QuickServerConfig quickServerConfig0 = new QuickServerConfig ( ) ; ObjectPoolConfig objectPoolConfig0 = quickServerConfig0 . getObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) objectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test18 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; ClientDataObjectPoolConfig clientDataObjectPoolConfig0 = new ClientDataObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) clientDataObjectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test19 ( ) throws Throwable { MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; QuickServerConfig quickServerConfig0 = new QuickServerConfig ( ) ; ObjectPoolConfig objectPoolConfig0 = quickServerConfig0 . getObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) objectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test20 ( ) throws Throwable { BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ) ; ObjectPoolConfig objectPoolConfig0 = new ObjectPoolConfig ( ) ; ByteBufferObjectPoolConfig byteBufferObjectPoolConfig0 = objectPoolConfig0 . getByteBufferObjectPoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) basicObjectPool0 , ( PoolConfig ) byteBufferObjectPoolConfig0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test0 ( ) throws Throwable { ThreadObjectFactory threadObjectFactory0 = new ThreadObjectFactory ( ) ; BasicObjectPool . Config basicObjectPool_Config0 = new BasicObjectPool . Config ( ) ; BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ( PoolableObjectFactory ) threadObjectFactory0 , basicObjectPool_Config0 ) ; PoolConfig poolConfig0 = new PoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) basicObjectPool0 , poolConfig0 ) ; threadObjectFactory0 . setClientPool ( clientPool0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMaxThreadsForNioWrite ( ) { return maxThreadsForNioWrite ; }
void test2 ( ) throws Throwable { ThreadObjectFactory threadObjectFactory0 = new ThreadObjectFactory ( ) ; ClientThread clientThread0 = ( ClientThread ) threadObjectFactory0 . makeObject ( ) ; threadObjectFactory0 . validateObject ( ( Object ) clientThread0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; / * * * Returns the { @link java . io . ObjectInputStream }
void test3 ( ) throws Throwable { ThreadObjectFactory threadObjectFactory0 = new ThreadObjectFactory ( ) ; BasicObjectPool basicObjectPool0 = new BasicObjectPool ( ) ; PoolConfig poolConfig0 = new PoolConfig ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) basicObjectPool0 , poolConfig0 ) ; ClientThread clientThread0 = new ClientThread ( clientPool0 ) ; threadObjectFactory0 . activateObject ( ( Object ) clientThread0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getInstanceId ( ) { return id ; }
void test4 ( ) throws Throwable { ThreadObjectFactory threadObjectFactory0 = new ThreadObjectFactory ( ) ; MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool ( ) ; ClientPool clientPool0 = new ClientPool ( ( QSObjectPool ) makeQSObjectPool0 , ( PoolConfig ) null ) ; ClientThread clientThread0 = new ClientThread ( clientPool0 ) ; threadObjectFactory0 . destroyObject ( ( Object ) clientThread0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; / * * * Returns the { @link java . io . ObjectInputStream }
void test6 ( ) throws Throwable { ThreadObjectFactory threadObjectFactory0 = new ThreadObjectFactory ( ) ; boolean boolean0 = threadObjectFactory0 . validateObject ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean validateObject ( Object obj ) { if ( obj = = null ) return false ; BasicClientHandler ch = ( BasicClientHandler ) obj ; if ( ch . getInstanceCount ( ) = = id ) return true ; else { return false ; } }
void test0 ( ) throws Throwable { NamedThreadFactory namedThreadFactory0 = new NamedThreadFactory ( "G / 85 + @ | nv [ - 2$nQ~u - " ) ; Thread thread0 = namedThreadFactory0 . newThread ( ( Runnable ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test0 ( ) throws Throwable { TimeUnit timeUnit0 = AppThreadPool . getDefaultTimeUnit ( ) ; AppThreadPool . setDefaultTimeUnit ( timeUnit0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDefaultTimeUnit ( TimeUnit aDefaultTimeUnit ) { defaultTimeUnit = aDefaultTimeUnit ; }
void test1 ( ) throws Throwable { int int0 = AppThreadPool . getDefaultKeepAliveTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultKeepAliveTime ( ) { return defaultKeepAliveTime ; }
void test2 ( ) throws Throwable { int int0 = AppThreadPool . getDefaultMaximumPoolSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultMaximumPoolSize ( ) { return defaultMaximumPoolSize ; }
void test3 ( ) throws Throwable { int int0 = AppThreadPool . getDefaultCorePoolSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultCorePoolSize ( ) { return defaultCorePoolSize ; }
void test4 ( ) throws Throwable { ThreadPoolExecutor threadPoolExecutor0 = AppThreadPool . getPool ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThreadPoolExecutor getPool ( String poolName ) { return ( ThreadPoolExecutor ) poolMap . get ( poolName ) ; }
void test5 ( ) throws Throwable { AppThreadPool appThreadPool0 = new AppThreadPool ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDefaultCorePoolSize ( ) { return defaultCorePoolSize ; }
void test3 ( ) throws Throwable { JFrameUtilities jFrameUtilities0 = new JFrameUtilities ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
