void test0 ( ) throws Throwable { TextProbe textProbe0 = new TextProbe ( ( byte ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TextProbe ( PFTest test , byte typeId , String name ) { super ( test , OutputType . TEXT , typeId , name ) ; }
void test1 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { IO iO0 = new IO ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { OutputType outputType0 = new OutputType ( ( - 1004 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OutputType ( int id ) { this . id = ( byte ) id ; }
void test0 ( ) throws Throwable { Precision precision0 = new Precision ( ( - 1004 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Precision ( int id ) { this . id = ( byte ) id ; }
void test0 ( ) throws Throwable { OutputBuilder outputBuilder0 = new OutputBuilder ( ) ; byte [ ] byteArray0 = outputBuilder0 . output1Msg ( ( int ) ( byte ) 0 , ( byte ) ( - 30 ) , "n$w" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] output1Msg ( int n , byte typeId , boolean value ) { byte [ ] msg = new byte [ OUTPUT1BASELENGTH + 1 ] ; int i = startOutput1 ( msg , n , typeId ) ; if ( value ) { msg [ i + + ] = 0x01 ; } else { msg [ i + + ] = 0x00 ; } setTime ( msg , i ) ; return msg ; }
void test1 ( ) throws Throwable { OutputBuilder outputBuilder0 = new OutputBuilder ( ) ; byte [ ] byteArray0 = outputBuilder0 . output1Msg ( ( - 927 ) , ( byte ) 9 , 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] output1Msg ( int n , byte typeId , boolean value ) { byte [ ] msg = new byte [ OUTPUT1BASELENGTH + 1 ] ; int i = startOutput1 ( msg , n , typeId ) ; if ( value ) { msg [ i + + ] = 0x01 ; } else { msg [ i + + ] = 0x00 ; } setTime ( msg , i ) ; return msg ; }
void test2 ( ) throws Throwable { OutputBuilder outputBuilder0 = new OutputBuilder ( ) ; byte [ ] byteArray0 = new byte [ 3 ] ; byte [ ] byteArray1 = outputBuilder0 . output1Msg ( ( - 927 ) , ( byte ) 0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Value value1 = ( Value ) o ; if ( precision ! = value1 . precision ) return false ; if ( bm ! = null ? ! bm . equals ( value1 . bm ) : value1 . bm ! = null ) return false ; if ( time ! = null ? ! time . equals ( value1 . time ) : value1 . time ! = null ) return false ; if ( value ! = null ? ! value . equals ( value1 . value ) : value1 . value ! = null ) return false ; if ( subscriptionId ! = value1 . subscriptionId ) return false ; return true ; }
void test3 ( ) throws Throwable { OutputBuilder outputBuilder0 = new OutputBuilder ( ) ; byte [ ] byteArray0 = outputBuilder0 . output1Msg ( ( - 1463 ) , ( byte ) 0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] output1Msg ( int n , byte typeId , boolean value ) { byte [ ] msg = new byte [ OUTPUT1BASELENGTH + 1 ] ; int i = startOutput1 ( msg , n , typeId ) ; if ( value ) { msg [ i + + ] = 0x01 ; } else { msg [ i + + ] = 0x00 ; } setTime ( msg , i ) ; return msg ; }
void test4 ( ) throws Throwable { OutputBuilder outputBuilder0 = new OutputBuilder ( ) ; byte [ ] byteArray0 = outputBuilder0 . output1Msg ( 17 , ( byte ) 73 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] output1Msg ( int n , byte typeId , boolean value ) { byte [ ] msg = new byte [ OUTPUT1BASELENGTH + 1 ] ; int i = startOutput1 ( msg , n , typeId ) ; if ( value ) { msg [ i + + ] = 0x01 ; } else { msg [ i + + ] = 0x00 ; } setTime ( msg , i ) ; return msg ; }
void test0 ( ) throws Throwable { OutputTypeBuilder outputTypeBuilder0 = new OutputTypeBuilder ( ) ; OutputType outputType0 = new OutputType ( ( - 429 ) ) ; byte [ ] byteArray0 = outputTypeBuilder0 . outputTypeMsg ( outputType0 , ( - 429 ) , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] outputTypeMsg ( OutputType type , int id , String name ) { / / + 1 for the byte to store name size int namelen = 1 + strlen ( name , 1 ) ; int len = 1 + 1 + namelen + 1 ; byte [ ] msg = new byte [ len ] ; int i = 0 ; msg [ i + + ] = 0x10 ; longToBytes ( id , msg , i , 1 ) ; i + + ; stringToBytes ( name , msg , i , 1 ) ; i + = namelen ; msg [ i ] = type . id ; return msg ; }
void test0 ( ) throws Throwable { InputBuilder inputBuilder0 = new InputBuilder ( ) ; byte [ ] byteArray0 = new byte [ 6 ] ; byte [ ] byteArray1 = inputBuilder0 . input1Msg ( 0 , byteArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Value value1 = ( Value ) o ; if ( precision ! = value1 . precision ) return false ; if ( bm ! = null ? ! bm . equals ( value1 . bm ) : value1 . bm ! = null ) return false ; if ( time ! = null ? ! time . equals ( value1 . time ) : value1 . time ! = null ) return false ; if ( value ! = null ? ! value . equals ( value1 . value ) : value1 . value ! = null ) return false ; if ( subscriptionId ! = value1 . subscriptionId ) return false ; return true ; }
void test1 ( ) throws Throwable { InputBuilder inputBuilder0 = new InputBuilder ( ) ; byte [ ] byteArray0 = inputBuilder0 . input1Msg ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] input1Msg ( int n , boolean value ) { byte [ ] msg = new byte [ INPUT1BASELENGTH + 1 ] ; int i = startInput1 ( msg , n , ( byte ) 0x01 ) ; if ( value ) { msg [ i + + ] = 0x01 ; } else { msg [ i + + ] = 0x00 ; } setTime ( msg , i ) ; return msg ; }
void test2 ( ) throws Throwable { InputBuilder inputBuilder0 = new InputBuilder ( ) ; byte [ ] byteArray0 = inputBuilder0 . input1Msg ( ( - 2015 ) , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] input1Msg ( int n , boolean value ) { byte [ ] msg = new byte [ INPUT1BASELENGTH + 1 ] ; int i = startInput1 ( msg , n , ( byte ) 0x01 ) ; if ( value ) { msg [ i + + ] = 0x01 ; } else { msg [ i + + ] = 0x00 ; } setTime ( msg , i ) ; return msg ; }
void test3 ( ) throws Throwable { InputBuilder inputBuilder0 = new InputBuilder ( ) ; byte [ ] byteArray0 = inputBuilder0 . input1Msg ( 0 , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] input1Msg ( int n , boolean value ) { byte [ ] msg = new byte [ INPUT1BASELENGTH + 1 ] ; int i = startInput1 ( msg , n , ( byte ) 0x01 ) ; if ( value ) { msg [ i + + ] = 0x01 ; } else { msg [ i + + ] = 0x00 ; } setTime ( msg , i ) ; return msg ; }
void test4 ( ) throws Throwable { InputBuilder inputBuilder0 = new InputBuilder ( ) ; byte [ ] byteArray0 = inputBuilder0 . input1Msg ( 1392 , true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] input1Msg ( int n , boolean value ) { byte [ ] msg = new byte [ INPUT1BASELENGTH + 1 ] ; int i = startInput1 ( msg , n , ( byte ) 0x01 ) ; if ( value ) { msg [ i + + ] = 0x01 ; } else { msg [ i + + ] = 0x00 ; } setTime ( msg , i ) ; return msg ; }
void test0 ( ) throws Throwable { StartBuilder startBuilder0 = new StartBuilder ( ) ; Precision precision0 = Precision . SECOND ; byte [ ] byteArray0 = startBuilder0 . startMsg ( "zL ) hmPh + qk^6FrfiE3z_" , precision0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" byte [ ] startMsg ( ) { / / + 1 for id + 1 for byte - order + 1 for protocol version / / + project name size ( 1 + number of characters ) / / + test description size ( 1 + number of characters ) / / + 1 for empty versionname / / + 1 for empty targetname / / + description size ( 1 + number of characters ) / / + 1 for time accuracy + 4 for starttime + 3 for packet id int projLen = strlen ( test . getProject ( ) ) + 1 ; / / this is project name int testLen = strlen ( test . getName ( ) ) + 1 ; / / test name int descLen = strlen ( test . getSuite ( ) ) + 1 ; / / suite is description is spec int versionLen = strlen ( test . getProjectVersion ( ) ) + 1 ; / / project version int targetLen = strlen ( test . getTestTarget ( ) ) + 1 ; / / test target / / + 1 for empty projectname + 1 for empty testcase number byte [ ] msg = new byte [ 1 + 1 + 1 + projLen + versionLen + testLen + targetLen + descLen + 1 + 4 + 3 ] ; int i = 0 ; / / ID for start binary message msg [ i + + ] = ( byte ) 0xFF ; / / big - endian byte order = FF msg [ i + + ] = ( byte ) 0xFF ; / / protocol version msg [ i + + ] = 2 ; / / project name stringToBytes ( test . getProject ( ) , msg , i , 1 ) ; i + = projLen ; / / project version stringToBytes ( test . getProjectVersion ( ) , msg , i , 1 ) ; i + = versionLen ; / / test case identifier stringToBytes ( test . getName ( ) , msg , i , 1 ) ; i + = testLen ; / / test target stringToBytes ( test . getTestTarget ( ) , msg , i , 1 ) ; i + = targetLen ; / / suite name ( test description ) stringToBytes ( test . getSuite ( ) , msg , i , 1 ) ; i + = descLen ; msg [ i + + ] = test . getAccuracy ( ) . id ; Calendar cal = Calendar . getInstance ( ) ; cal . set ( 2007 , Calendar . JANUARY , 1 , 0 , 0 , 0 ) ; long baseTime = cal . getTime ( ) . getTime ( ) ; long millis = test . startTime ( ) ; millis - = baseTime ; millis / = 1000 ; longToBytes ( millis , msg , i , 4 ) ; i + = 4 ; / / TODO for now only one connection from a VM is supported longToBytes ( test . getTestId ( ) , msg , i , 3 ) ; return msg ; }
void test2 ( ) throws Throwable { BaseBuilder baseBuilder0 = new BaseBuilder ( ) ; int int0 = baseBuilder0 . strlen ( "o ] v ! b@FY$ ? p" , 2041 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int strlen ( String testDescription ) { if ( testDescription = = null ) { return 0 ; } int descLen = testDescription . length ( ) ; if ( descLen > 255 ) { descLen = 255 ; } return descLen ; }
void test1 ( ) throws Throwable { OBMApplicationComponent oBMApplicationComponent0 = new OBMApplicationComponent ( ) ; oBMApplicationComponent0 . disposeComponent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentName ( ) { return "OBMApplicationComponent" ; }
void test2 ( ) throws Throwable { OBMApplicationComponent oBMApplicationComponent0 = new OBMApplicationComponent ( ) ; oBMApplicationComponent0 . initComponent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentName ( ) { return "OBMApplicationComponent" ; }
void test3 ( ) throws Throwable { OBMApplicationComponent oBMApplicationComponent0 = new OBMApplicationComponent ( ) ; String string0 = oBMApplicationComponent0 . getComponentName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getComponentName ( ) { return "OBMApplicationComponent" ; }
void test0 ( ) throws Throwable { OneOfConstraint oneOfConstraint0 = new OneOfConstraint ( "Xe2k + / IaJ ] ` & zP ? 17" , "4VR ] , qo@kN { 07 * - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double min ( ) { double min = super . min ( ) ; for ( Object o : values ) { if ( o instanceof Number ) { Number n = ( Number ) o ; if ( n . doubleValue ( ) < min ) { min = n . doubleValue ( ) ; } } } return min ; }
void test2 ( ) throws Throwable { OneOfConstraint oneOfConstraint0 = new OneOfConstraint ( "Xe2k + / IaJ ] ` & zP ? 17" , "6 , 8V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double min ( ) { double min = super . min ( ) ; for ( Object o : values ) { if ( o instanceof Number ) { Number n = ( Number ) o ; if ( n . doubleValue ( ) < min ) { min = n . doubleValue ( ) ; } } } return min ; }
void test3 ( ) throws Throwable { OneOfConstraint oneOfConstraint0 = new OneOfConstraint ( "Xe2k + / IaJ ] ` & zP ? 17" , "reference : Xe2k + / IaJ ] ` & zP one of { [ VR ] , [ o@kN { 07 * ] } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toJava ( ) { String java = createValidValuesJava ( " " ) ; if ( elements ) { java + = " for ( Object o : " + left . getReferredVariable ( ) + " ) { " + ln ; java + = createCondition ( "validValues . contains ( o ) " ) ; java + = " } " + ln ; return java ; } else { String check = createCondition ( "validValues . contains ( " + left . getReferredVariable ( ) + " ) " ) ; return java + check ; } }
void test4 ( ) throws Throwable { OneOfConstraint oneOfConstraint0 = new OneOfConstraint ( "Xe2k + / IaJ ] ` & zP ? 17" , "4VR ] , qo@kN { 07 * - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toJava ( ) { String java = createValidValuesJava ( " " ) ; if ( elements ) { java + = " for ( Object o : " + left . getReferredVariable ( ) + " ) { " + ln ; java + = createCondition ( "validValues . contains ( o ) " ) ; java + = " } " + ln ; return java ; } else { String check = createCondition ( "validValues . contains ( " + left . getReferredVariable ( ) + " ) " ) ; return java + check ; } }
void test5 ( ) throws Throwable { OneOfConstraint oneOfConstraint0 = new OneOfConstraint ( "Xe2k + / IaJ ] ` & zP ? 17" , "6 , 8V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String guardInvocation ( ) { if ( elements ) { return "" ; } if ( values . isEmpty ( ) ) { return "" ; } for ( Object v : values ) { if ( v instanceof Collection & & ( ( Collection ) v ) . isEmpty ( ) ) { return "" ; } } return " if ( " + left . getReferredVariable ( ) + " . isEmpty ( ) ) return false ; " + ln ; }
void test6 ( ) throws Throwable { OneOfConstraint oneOfConstraint0 = new OneOfConstraint ( "Xe2k + / IaJ ] ` & zP ? 17" , "4VR ] , qo@kN { 07 * - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String asAssert ( String returnVar ) { String assertion = createValidValuesJava ( "" ) ; if ( elements ) { assertion + = "for ( Object o : " + returnVar + " ) { " + ln ; assertion + = " assertTrue ( validValues . contains ( o ) ) ; " + ln ; assertion + = " } " + ln ; } else { assertion + = "assertTrue ( validValues . contains ( " + returnVar + " ) ) ; " + ln ; } return assertion ; }
void test7 ( ) throws Throwable { OneOfConstraint oneOfConstraint0 = new OneOfConstraint ( "Xe2k + / IaJ ] ` & zP ? 17" , "4VR ] , qo@kN { 07 * - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test8 ( ) throws Throwable { OneOfConstraint oneOfConstraint0 = new OneOfConstraint ( "Xe2k } + Iw & bD ? 7" , "5i [ " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test9 ( ) throws Throwable { OneOfConstraint oneOfConstraint0 = new OneOfConstraint ( "Xe2k + / IaJ ] ` & zP ? 17" , "4VR ] , qo@kN { 07 * - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OneOfConstraint ( String left , String value ) { / / always trim since } can have whitespace , linefeeds etc trailing left = left . trim ( ) ; if ( left . contains ( "elements" ) ) { elements = true ; left = left . substring ( 0 , left . indexOf ( "elements" ) ) . trim ( ) ; } this . left = ( ReferenceValue ) DaikonParser . parseValueObject ( left ) ; value = value . trim ( ) ; / / we need to remove the } in the end value = value . substring ( 0 , value . length ( ) - 1 ) ; / / if there is ] then it is a list of lists String [ ] valueArray = value . split ( "\\ ] , " ) ; if ( valueArray . length > 1 ) { addArrays ( valueArray ) ; } else { values . addAll ( DaikonParser . parseObjectList ( value ) ) ; } }
void test10 ( ) throws Throwable { OneOfConstraint oneOfConstraint0 = new OneOfConstraint ( "Xe2k + / IaJ ] ` & zP ? 17" , "6 , 8V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OneOfConstraint ( String left , String value ) { / / always trim since } can have whitespace , linefeeds etc trailing left = left . trim ( ) ; if ( left . contains ( "elements" ) ) { elements = true ; left = left . substring ( 0 , left . indexOf ( "elements" ) ) . trim ( ) ; } this . left = ( ReferenceValue ) DaikonParser . parseValueObject ( left ) ; value = value . trim ( ) ; / / we need to remove the } in the end value = value . substring ( 0 , value . length ( ) - 1 ) ; / / if there is ] then it is a list of lists String [ ] valueArray = value . split ( "\\ ] , " ) ; if ( valueArray . length > 1 ) { addArrays ( valueArray ) ; } else { values . addAll ( DaikonParser . parseObjectList ( value ) ) ; } }
void test11 ( ) throws Throwable { OneOfConstraint oneOfConstraint0 = new OneOfConstraint ( "Xe2k + / IaJ ] ` & zP ? 17" , "4VR ] , qo@kN { 07 * - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toJava ( ) { String java = createValidValuesJava ( " " ) ; if ( elements ) { java + = " for ( Object o : " + left . getReferredVariable ( ) + " ) { " + ln ; java + = createCondition ( "validValues . contains ( o ) " ) ; java + = " } " + ln ; return java ; } else { String check = createCondition ( "validValues . contains ( " + left . getReferredVariable ( ) + " ) " ) ; return java + check ; } }
void test12 ( ) throws Throwable { OneOfConstraint oneOfConstraint0 = new OneOfConstraint ( "Ze2Lk } w . / I - x & * ? 7" , "S" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test13 ( ) throws Throwable { OneOfConstraint oneOfConstraint0 = new OneOfConstraint ( "Xe2k } + Iw & bD ? 7" , "5i [ " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test0 ( ) throws Throwable { Trace trace0 = new Trace ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { TargetDescription targetDescription0 = new TargetDescription ( ) ; String string0 = targetDescription0 . getTargetName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTargetName ( ) { return targetName ; }
void test1 ( ) throws Throwable { TargetDescription targetDescription0 = new TargetDescription ( "" , "" ) ; String string0 = targetDescription0 . getTargetType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTargetType ( ) { return targetType ; }
void test0 ( ) throws Throwable { EventType eventType0 = EventType . NEW_MEASUREMENT_REQUEST ; ServerEvent serverEvent0 = new ServerEvent ( 401L , eventType0 , "P4 - xOLsV = : ( ( " , "P4 - xOLsV = : ( ( " , ( - 1739L ) ) ; String string0 = serverEvent0 . getTimeString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test1 ( ) throws Throwable { EventType eventType0 = EventType . NEW_MEASUREMENT_REQUEST ; ServerEvent serverEvent0 = new ServerEvent ( 401L , eventType0 , "P4 - xOLsV = : ( ( " , "P4 - xOLsV = : ( ( " , ( - 1739L ) ) ; long long0 = serverEvent0 . getSubscriptionId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return time ; }
void test2 ( ) throws Throwable { ServerEvent serverEvent0 = new ServerEvent ( ) ; String string0 = serverEvent0 . getMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMessage ( ) { return message ; }
void test4 ( ) throws Throwable { ServerEvent serverEvent0 = new ServerEvent ( ) ; String string0 = serverEvent0 . getSource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSource ( ) { return source ; }
void test5 ( ) throws Throwable { EventType eventType0 = EventType . PROBE_HUNG ; ServerEvent serverEvent0 = new ServerEvent ( 0L , eventType0 , "Qd6M = Of" , "Qd6M = Of" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test0 ( ) throws Throwable { MeasurementSubscription measurementSubscription0 = new MeasurementSubscription ( 3L , ( BMDescription ) null , 0L , 3L , 0L ) ; long long0 = measurementSubscription0 . getSacId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFrequency ( ) { return frequency ; }
void test1 ( ) throws Throwable { MeasurementSubscription measurementSubscription0 = new MeasurementSubscription ( 3L , ( BMDescription ) null , 0L , 3L , 0L ) ; measurementSubscription0 . setProbeId ( 1849L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFrequency ( ) { return frequency ; }
void test2 ( ) throws Throwable { MeasurementSubscription measurementSubscription0 = new MeasurementSubscription ( 1122L , ( BMDescription ) null , 0L , 1122L , 1L ) ; long long0 = measurementSubscription0 . getProbeId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test3 ( ) throws Throwable { MeasurementSubscription measurementSubscription0 = new MeasurementSubscription ( 1122L , ( BMDescription ) null , 0L , 1122L , 1L ) ; measurementSubscription0 . setFrequency ( ( - 1666L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFrequency ( ) { return frequency ; }
void test4 ( ) throws Throwable { MeasurementSubscription measurementSubscription0 = new MeasurementSubscription ( 1122L , ( BMDescription ) null , 0L , 1122L , 1L ) ; long long0 = measurementSubscription0 . getSubscriptionId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFrequency ( ) { return frequency ; }
void test5 ( ) throws Throwable { MeasurementSubscription measurementSubscription0 = new MeasurementSubscription ( ( - 1L ) , ( BMDescription ) null , ( - 1L ) , ( - 1724L ) , 777L ) ; long long0 = measurementSubscription0 . getFrequency ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test0 ( ) throws Throwable { DMDefinition dMDefinition0 = new DMDefinition ( ( - 1 ) , "T | sM ] " , "T | sM ] " ) ; dMDefinition0 . setScript ( "T | sM ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test1 ( ) throws Throwable { DMDefinition dMDefinition0 = new DMDefinition ( 0 , "H@Hp0Vstdf5" , "H@Hp0Vstdf5" ) ; int int0 = dMDefinition0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test2 ( ) throws Throwable { DMDefinition dMDefinition0 = new DMDefinition ( 0 , "H@Hp0Vstdf5" , "H@Hp0Vstdf5" ) ; String string0 = dMDefinition0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test3 ( ) throws Throwable { DMDefinition dMDefinition0 = new DMDefinition ( 0 , "H@Hp0Vstdf5" , "H@Hp0Vstdf5" ) ; List < BMDescription > list0 = dMDefinition0 . getRequiredBM ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test4 ( ) throws Throwable { DMDefinition dMDefinition0 = new DMDefinition ( 0 , "H@Hp0Vstdf5" , "H@Hp0Vstdf5" ) ; String string0 = dMDefinition0 . getScript ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test0 ( ) throws Throwable { DMDefinition dMDefinition0 = new DMDefinition ( 13 , " < 7fa4I" , " < 7fa4I" ) ; DMValue dMValue0 = new DMValue ( dMDefinition0 , " < 7fa4I" , ( long ) 13 ) ; long long0 = dMValue0 . getTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test1 ( ) throws Throwable { DMDefinition dMDefinition0 = new DMDefinition ( ( - 1 ) , "" , "" ) ; DMValue dMValue0 = new DMValue ( dMDefinition0 , 0 . 0 , 0L ) ; int int0 = dMValue0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test2 ( ) throws Throwable { DMDefinition dMDefinition0 = new DMDefinition ( 13 , " < 7fa4I" , " < 7fa4I" ) ; DMValue dMValue0 = new DMValue ( dMDefinition0 , " < 7fa4I" , ( long ) 13 ) ; Collection < BMDescription > collection0 = dMValue0 . getMissingBM ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return time ; }
void test3 ( ) throws Throwable { DMDefinition dMDefinition0 = new DMDefinition ( 585 , "UNSUBSCRIPTcON_REQUEgT" , "UNSUBSCRIPTcON_REQUEgT" ) ; LinkedList < BMDescription > linkedList0 = new LinkedList < BMDescription > ( ) ; DMValue dMValue0 = new DMValue ( dMDefinition0 , ( long ) 585 , ( Collection < BMDescription > ) linkedList0 ) ; String string0 = dMValue0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test4 ( ) throws Throwable { DMDefinition dMDefinition0 = new DMDefinition ( 585 , "UNSUBSCRIPTcON_REQUEgT" , "UNSUBSCRIPTcON_REQUEgT" ) ; DMValue dMValue0 = new DMValue ( dMDefinition0 , true , ( long ) 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test5 ( ) throws Throwable { DMDefinition dMDefinition0 = new DMDefinition ( 273 , "^ib#ID ( oLR < ^" , "^ib#ID ( oLR < ^" ) ; DMValue dMValue0 = new DMValue ( dMDefinition0 , "^ib#ID ( oLR < ^" , ( long ) 273 ) ; String string0 = dMValue0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test6 ( ) throws Throwable { DMDefinition dMDefinition0 = new DMDefinition ( 13 , " < 7fa4I" , " < 7fa4I" ) ; DMValue dMValue0 = new DMValue ( dMDefinition0 , " < 7fa4I" , ( long ) 13 ) ; String string0 = dMValue0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return time ; }
void test7 ( ) throws Throwable { DMDefinition dMDefinition0 = new DMDefinition ( 585 , "UNSUBSCRIPTcON_REQUEgT" , "UNSUBSCRIPTcON_REQUEgT" ) ; LinkedList < BMDescription > linkedList0 = new LinkedList < BMDescription > ( ) ; linkedList0 . add ( ( BMDescription ) null ) ; DMValue dMValue0 = new DMValue ( dMDefinition0 , ( long ) 585 , ( Collection < BMDescription > ) linkedList0 ) ; String string0 = dMValue0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test0 ( ) throws Throwable { Value value0 = new Value ( ) ; Date date0 = value0 . getTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return time ; }
void test1 ( ) throws Throwable { Value value0 = new Value ( ( BMDescription ) null , 412 , "~cx ; { 'v ] 5fRvxwJ " , ( long ) 412 ) ; Value value1 = new Value ( ( BMDescription ) null , 412 , "~cx ; { 'v ] 5fRvxwJ " , ( long ) 412 , ( long ) 412 ) ; boolean boolean0 = value0 . equals ( ( Object ) value1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrecision ( ) { return precision ; }
void test4 ( ) throws Throwable { Value value0 = new Value ( ) ; String string0 = value0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getString ( ) { checkType ( DataType . STRINGVALUE ) ; return value ; }
void test5 ( ) throws Throwable { Value value0 = new Value ( ( BMDescription ) null , ( - 1378 ) , "~cx ; { 'v ] 5fRvxwJ " , ( long ) ( - 1378 ) , ( long ) ( - 1378 ) , false ) ; value0 . getBm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrecision ( ) { return precision ; }
void test6 ( ) throws Throwable { Value value0 = new Value ( ) ; int int0 = value0 . getPrecision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrecision ( ) { return precision ; }
void test7 ( ) throws Throwable { Value value0 = new Value ( ) ; boolean boolean0 = value0 . isError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isError ( ) { return error ; }
void test8 ( ) throws Throwable { Value value0 = new Value ( ( BMDescription ) null , ( - 1378 ) , "~cx ; { 'v ] 5fRvxwJ " , ( long ) ( - 1378 ) , ( long ) ( - 1378 ) , false ) ; String string0 = value0 . getTimeFormatted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrecision ( ) { return precision ; }
void test10 ( ) throws Throwable { Value value0 = new Value ( ( BMDescription ) null , 19 , "q" , ( long ) 19 ) ; long long0 = value0 . getSubscriptionId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isError ( ) { return error ; }
void test12 ( ) throws Throwable { Value value0 = new Value ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String valueString ( ) { if ( getType ( ) = = DataType . STRINGVALUE ) { return "\"" + value + "\"" ; } return "" + value ; }
void test13 ( ) throws Throwable { Value value0 = new Value ( ) ; String string0 = value0 . valueString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String valueString ( ) { if ( getType ( ) = = DataType . STRINGVALUE ) { return "\"" + value + "\"" ; } return "" + value ; }
void test14 ( ) throws Throwable { Value value0 = new Value ( ( BMDescription ) null , ( - 1378 ) , "~cx ; { 'v ] 5fRvxwJ " , ( long ) ( - 1378 ) , ( long ) ( - 1378 ) , false ) ; Value value1 = new Value ( ( BMDescription ) null , 412 , "~cx ; { 'v ] 5fRvxwJ " , ( long ) 412 ) ; boolean boolean0 = value1 . equals ( ( Object ) value0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isError ( ) { return error ; }
void test15 ( ) throws Throwable { Value value0 = new Value ( ) ; boolean boolean0 = value0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Value value1 = ( Value ) o ; if ( precision ! = value1 . precision ) return false ; if ( bm ! = null ? ! bm . equals ( value1 . bm ) : value1 . bm ! = null ) return false ; if ( time ! = null ? ! time . equals ( value1 . time ) : value1 . time ! = null ) return false ; if ( value ! = null ? ! value . equals ( value1 . value ) : value1 . value ! = null ) return false ; if ( subscriptionId ! = value1 . subscriptionId ) return false ; return true ; }
void test16 ( ) throws Throwable { Value value0 = new Value ( ) ; boolean boolean0 = value0 . equals ( ( Object ) "\"null\"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Value value1 = ( Value ) o ; if ( precision ! = value1 . precision ) return false ; if ( bm ! = null ? ! bm . equals ( value1 . bm ) : value1 . bm ! = null ) return false ; if ( time ! = null ? ! time . equals ( value1 . time ) : value1 . time ! = null ) return false ; if ( value ! = null ? ! value . equals ( value1 . value ) : value1 . value ! = null ) return false ; if ( subscriptionId ! = value1 . subscriptionId ) return false ; return true ; }
void test17 ( ) throws Throwable { Value value0 = new Value ( ) ; Value value1 = new Value ( ( BMDescription ) null , 0 , "wF2 ( hG { g { ODwR" , ( long ) 0 , ( long ) 0 ) ; boolean boolean0 = value0 . equals ( ( Object ) value1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isError ( ) { return error ; }
void test18 ( ) throws Throwable { Value value0 = new Value ( ( BMDescription ) null , 8579 , "XX . " , ( - 1941L ) , ( long ) 8579 ) ; Value value1 = new Value ( ( BMDescription ) null , 8579 , "XX . " , ( long ) 8579 ) ; boolean boolean0 = value0 . equals ( ( Object ) value1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrecision ( ) { return precision ; }
void test19 ( ) throws Throwable { Value value0 = new Value ( ) ; Value value1 = new Value ( ) ; boolean boolean0 = value0 . equals ( ( Object ) value1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Value value1 = ( Value ) o ; if ( precision ! = value1 . precision ) return false ; if ( bm ! = null ? ! bm . equals ( value1 . bm ) : value1 . bm ! = null ) return false ; if ( time ! = null ? ! time . equals ( value1 . time ) : value1 . time ! = null ) return false ; if ( value ! = null ? ! value . equals ( value1 . value ) : value1 . value ! = null ) return false ; if ( subscriptionId ! = value1 . subscriptionId ) return false ; return true ; }
void test20 ( ) throws Throwable { Value value0 = new Value ( ( BMDescription ) null , 19 , "q" , ( long ) 19 ) ; Value value1 = new Value ( ( BMDescription ) null , 19 , " & x ( : %e" , ( long ) 19 , ( long ) 19 ) ; boolean boolean0 = value0 . equals ( ( Object ) value1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrecision ( ) { return precision ; }
void test21 ( ) throws Throwable { Value value0 = new Value ( ( BMDescription ) null , ( - 1378 ) , "~cx ; { 'v ] 5fRvxwJ " , ( long ) ( - 1378 ) , ( long ) ( - 1378 ) , false ) ; int int0 = value0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isError ( ) { return error ; }
void test0 ( ) throws Throwable { BMReport bMReport0 = new BMReport ( "" , "" , ( - 858L ) , ( - 858L ) , true , "" ) ; String string0 = bMReport0 . getMeasureTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMatchReference ( ) { return matchReference ; }
void test1 ( ) throws Throwable { BMReport bMReport0 = new BMReport ( "" , "" , ( - 858L ) , ( - 858L ) , true , "" ) ; String string0 = bMReport0 . getMeasureURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test2 ( ) throws Throwable { BMReport bMReport0 = new BMReport ( "" , "" , ( - 858L ) , ( - 858L ) , true , "" ) ; boolean boolean0 = bMReport0 . isMatchReference ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMeasureTime ( ) { return DateFormat . getDateTimeInstance ( ) . format ( measureTime ) ; }
void test3 ( ) throws Throwable { BMReport bMReport0 = new BMReport ( "" , "" , ( - 858L ) , ( - 858L ) , true , "" ) ; String string0 = bMReport0 . getReferenceValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test4 ( ) throws Throwable { BMReport bMReport0 = new BMReport ( "" , "" , ( - 858L ) , ( - 858L ) , true , "" ) ; long long0 = bMReport0 . getSubscriptionId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMeasureTime ( ) { return DateFormat . getDateTimeInstance ( ) . format ( measureTime ) ; }
void test5 ( ) throws Throwable { BMReport bMReport0 = new BMReport ( "" , "" , ( - 858L ) , ( - 858L ) , true , "" ) ; String string0 = bMReport0 . getCurrentValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMeasureTime ( ) { return DateFormat . getDateTimeInstance ( ) . format ( measureTime ) ; }
void test1 ( ) throws Throwable { ProbeDescription probeDescription0 = new ProbeDescription ( ) ; ProbeRegistered probeRegistered0 = new ProbeRegistered ( probeDescription0 , true , true ) ; boolean boolean0 = probeRegistered0 . isNewBM ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewTarget ( ) { return newTarget ; }
void test2 ( ) throws Throwable { ProbeDescription probeDescription0 = new ProbeDescription ( ) ; ProbeRegistered probeRegistered0 = new ProbeRegistered ( probeDescription0 , true , false ) ; boolean boolean0 = probeRegistered0 . isNewTarget ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isNewBM ( ) { return newBM ; }
void test0 ( ) throws Throwable { BMRequest bMRequest0 = new BMRequest ( "" , "" ) ; String string0 = bMRequest0 . getMeasureId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMeasureId ( ) { return measureId ; }
void test1 ( ) throws Throwable { BMRequest bMRequest0 = new BMRequest ( "" , "" ) ; String string0 = bMRequest0 . getTargetId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTargetId ( ) { return targetId ; }
void test0 ( ) throws Throwable { BMResults . PerDevice bMResults_PerDevice0 = new BMResults . PerDevice ( ) ; long long0 = bMResults_PerDevice0 . getDeviceId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Long > getDeviceId ( ) { if ( deviceId = = null ) { deviceId = new ArrayList < Long > ( ) ; } return this . deviceId ; }
void test1 ( ) throws Throwable { BMResults . PerDevice bMResults_PerDevice0 = new BMResults . PerDevice ( ) ; bMResults_PerDevice0 . setDeviceId ( ( - 973L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Long > getDeviceId ( ) { if ( deviceId = = null ) { deviceId = new ArrayList < Long > ( ) ; } return this . deviceId ; }
void test2 ( ) throws Throwable { BMResults bMResults0 = new BMResults ( ) ; bMResults0 . setMfwId ( ( - 1257L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMfwId ( ) { return mfwId ; }
void test3 ( ) throws Throwable { BMResults bMResults0 = new BMResults ( ) ; long long0 = bMResults0 . getMfwId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMfwId ( ) { return mfwId ; }
void test4 ( ) throws Throwable { BMResults bMResults0 = new BMResults ( ) ; List < BMResults . PerDevice > list0 = bMResults0 . getPerDevice ( ) ; List < BMResults . PerDevice > list1 = bMResults0 . getPerDevice ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BMResults . PerDevice > getPerDevice ( ) { if ( perDevice = = null ) { perDevice = new ArrayList < BMResults . PerDevice > ( ) ; } return this . perDevice ; }
void test5 ( ) throws Throwable { BMResults . PerDevice bMResults_PerDevice0 = new BMResults . PerDevice ( ) ; List < BMResult > list0 = bMResults_PerDevice0 . getBMResult ( ) ; List < BMResult > list1 = bMResults_PerDevice0 . getBMResult ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; availability0 . setMfwId ( 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMfwId ( ) { return mfwId ; }
void test1 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; long long0 = availability0 . getMfwId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMfwId ( ) { return mfwId ; }
void test2 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; List < Device > list0 = availability0 . getDevice ( ) ; List < Device > list1 = availability0 . getDevice ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Device > getDevice ( ) { if ( device = = null ) { device = new ArrayList < Device > ( ) ; } return this . device ; }
void test3 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; List < BM > list0 = availability0 . getBM ( ) ; List < BM > list1 = availability0 . getBM ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BM > getBM ( ) { if ( bm = = null ) { bm = new ArrayList < BM > ( ) ; } return this . bm ; }
void test4 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; List < Probe > list0 = availability0 . getProbe ( ) ; List < Probe > list1 = availability0 . getProbe ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Probe > getProbe ( ) { if ( probe = = null ) { probe = new ArrayList < Probe > ( ) ; } return this . probe ; }
void test1 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test2 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setClazz ( "G4@W" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test3 ( ) throws Throwable { BM bM0 = new BM ( ) ; String string0 = bM0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test4 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setId ( ( - 1229L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test5 ( ) throws Throwable { BM bM0 = new BM ( ) ; String string0 = bM0 . getClazz ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClazz ( ) { return clazz ; }
void test6 ( ) throws Throwable { BM bM0 = new BM ( ) ; Boolean boolean0 = Boolean . FALSE ; bM0 . setDisabled ( boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDisabled ( Boolean value ) { this . disabled = value ; }
void test7 ( ) throws Throwable { BM bM0 = new BM ( ) ; String string0 = bM0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test8 ( ) throws Throwable { BM bM0 = new BM ( ) ; long long0 = bM0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test9 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setDescription ( " & , 77Cd^SvPO1~qsaNS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test10 ( ) throws Throwable { BM bM0 = new BM ( ) ; List < Long > list0 = bM0 . getDeviceId ( ) ; List < Long > list1 = bM0 . getDeviceId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Long > getDeviceId ( ) { if ( deviceId = = null ) { deviceId = new ArrayList < Long > ( ) ; } return this . deviceId ; }
void test0 ( ) throws Throwable { OperationResult operationResult0 = new OperationResult ( ) ; operationResult0 . setError ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isError ( ) { return error ; }
void test1 ( ) throws Throwable { OperationResult operationResult0 = new OperationResult ( ) ; boolean boolean0 = operationResult0 . isError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isError ( ) { return error ; }
void test1 ( ) throws Throwable { Device device0 = new Device ( ) ; device0 . setId ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test2 ( ) throws Throwable { Device device0 = new Device ( ) ; device0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test3 ( ) throws Throwable { Device device0 = new Device ( ) ; long long0 = device0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test4 ( ) throws Throwable { Device device0 = new Device ( ) ; String string0 = device0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test5 ( ) throws Throwable { Device device0 = new Device ( ) ; String string0 = device0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test6 ( ) throws Throwable { Device device0 = new Device ( ) ; device0 . setType ( "09zBH" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test7 ( ) throws Throwable { Device device0 = new Device ( ) ; Boolean boolean0 = Boolean . FALSE ; device0 . setDisabled ( boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test0 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; sAC0 . setIFs ( "j ; YYKz%5 ] O" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIFs ( ) { return iFs ; }
void test1 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; XMLGregorianCalendar xMLGregorianCalendar0 = sAC0 . getTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return time ; }
void test2 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; long long0 = sAC0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test3 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; sAC0 . setCompany ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIFs ( ) { return iFs ; }
void test4 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; String string0 = sAC0 . getIFs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIFs ( ) { return iFs ; }
void test5 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; sAC0 . setTime ( ( XMLGregorianCalendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCompany ( ) { return company ; }
void test6 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; String string0 = sAC0 . getCompany ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCompany ( ) { return company ; }
void test7 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; sAC0 . setVersion ( "ua$ ) W`Z * pQ5\"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCompany ( ) { return company ; }
void test8 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; String string0 = sAC0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test9 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; sAC0 . setId ( ( - 102L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test0 ( ) throws Throwable { GetSAC getSAC0 = new GetSAC ( ) ; long long0 = getSAC0 . getMfwId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMfwId ( ) { return mfwId ; }
void test1 ( ) throws Throwable { GetSAC getSAC0 = new GetSAC ( ) ; getSAC0 . setMfwId ( 172L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMfwId ( ) { return mfwId ; }
void test0 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( ) ; bMResult0 . setId ( 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test1 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( ) ; XMLGregorianCalendar xMLGregorianCalendar0 = bMResult0 . getTimeStamp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" XMLGregorianCalendar getTimeStamp ( ) { return timeStamp ; }
void test2 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( ) ; bMResult0 . setTimeStamp ( ( XMLGregorianCalendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test3 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( ) ; String string0 = bMResult0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test4 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( ) ; bMResult0 . setError ( ( Boolean ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test5 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( ) ; bMResult0 . setValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test7 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( ) ; long long0 = bMResult0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test0 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; long long0 = probe0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test2 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; probe0 . setName ( "BA , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test3 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; probe0 . setId ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test4 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; Boolean boolean0 = Boolean . valueOf ( "" ) ; probe0 . setDisabled ( boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDisabled ( Boolean value ) { this . disabled = value ; }
void test5 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; String string0 = probe0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test6 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; List < Long > list0 = probe0 . getBmId ( ) ; List < Long > list1 = probe0 . getBmId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBmId ( ) { return bmId ; }
void test0 ( ) throws Throwable { GetAvailability getAvailability0 = new GetAvailability ( ) ; long long0 = getAvailability0 . getSacId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test1 ( ) throws Throwable { GetAvailability getAvailability0 = new GetAvailability ( ) ; getAvailability0 . setSacId ( 172L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test0 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; long long0 = mFW0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test1 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; XMLGregorianCalendar xMLGregorianCalendar0 = mFW0 . getTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return time ; }
void test2 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; String string0 = mFW0 . getIfs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIfs ( ) { return ifs ; }
void test3 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; mFW0 . setCompany ( "DE$ - ( / ors" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test4 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; String string0 = mFW0 . getCompany ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCompany ( ) { return company ; }
void test5 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; mFW0 . setTime ( ( XMLGregorianCalendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test6 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; mFW0 . setIfs ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIfs ( ) { return ifs ; }
void test7 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; String string0 = mFW0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test8 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; mFW0 . setId ( ( - 384L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test9 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; mFW0 . setVersion ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test0 ( ) throws Throwable { ProbeParametersRequest probeParametersRequest0 = new ProbeParametersRequest ( ) ; long long0 = probeParametersRequest0 . getSacId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test1 ( ) throws Throwable { ProbeParametersRequest probeParametersRequest0 = new ProbeParametersRequest ( ) ; probeParametersRequest0 . setSacId ( ( - 1548L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test2 ( ) throws Throwable { ProbeParametersRequest probeParametersRequest0 = new ProbeParametersRequest ( ) ; probeParametersRequest0 . setProbeId ( ( - 1428L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getProbeId ( ) { return probeId ; }
void test3 ( ) throws Throwable { ProbeParametersRequest probeParametersRequest0 = new ProbeParametersRequest ( ) ; long long0 = probeParametersRequest0 . getProbeId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getProbeId ( ) { return probeId ; }
void test0 ( ) throws Throwable { GetMFW getMFW0 = new GetMFW ( ) ; getMFW0 . setSacId ( 172L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test1 ( ) throws Throwable { GetMFW getMFW0 = new GetMFW ( ) ; long long0 = getMFW0 . getSacId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test0 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; availability0 . setMfwId ( 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMfwId ( ) { return mfwId ; }
void test1 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; long long0 = availability0 . getMfwId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMfwId ( ) { return mfwId ; }
void test2 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; List < Device > list0 = availability0 . getDevice ( ) ; List < Device > list1 = availability0 . getDevice ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Device > getDevice ( ) { if ( device = = null ) { device = new ArrayList < Device > ( ) ; } return this . device ; }
void test3 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; List < BM > list0 = availability0 . getBM ( ) ; List < BM > list1 = availability0 . getBM ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BM > getBM ( ) { if ( bm = = null ) { bm = new ArrayList < BM > ( ) ; } return this . bm ; }
void test4 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; List < Probe > list0 = availability0 . getProbe ( ) ; List < Probe > list1 = availability0 . getProbe ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Probe > getProbe ( ) { if ( probe = = null ) { probe = new ArrayList < Probe > ( ) ; } return this . probe ; }
void test0 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setDescription ( " & , 77Cd^SvPO1~qsaNS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test1 ( ) throws Throwable { BM bM0 = new BM ( ) ; String string0 = bM0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test3 ( ) throws Throwable { BM bM0 = new BM ( ) ; String string0 = bM0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test4 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setClazz ( "G4@W" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test5 ( ) throws Throwable { BM bM0 = new BM ( ) ; Boolean boolean0 = Boolean . FALSE ; bM0 . setDisabled ( boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test6 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClazz ( ) { return clazz ; }
void test7 ( ) throws Throwable { BM bM0 = new BM ( ) ; String string0 = bM0 . getClazz ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClazz ( ) { return clazz ; }
void test8 ( ) throws Throwable { BM bM0 = new BM ( ) ; long long0 = bM0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test9 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setId ( ( - 1229L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test10 ( ) throws Throwable { BM bM0 = new BM ( ) ; List < Long > list0 = bM0 . getDeviceId ( ) ; List < Long > list1 = bM0 . getDeviceId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Long > getDeviceId ( ) { if ( deviceId = = null ) { deviceId = new ArrayList < Long > ( ) ; } return this . deviceId ; }
void test0 ( ) throws Throwable { OperationResult operationResult0 = new OperationResult ( ) ; boolean boolean0 = operationResult0 . isError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isError ( ) { return error ; }
void test1 ( ) throws Throwable { OperationResult operationResult0 = new OperationResult ( ) ; operationResult0 . setError ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isError ( ) { return error ; }
void test0 ( ) throws Throwable { Device device0 = new Device ( ) ; device0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test1 ( ) throws Throwable { Device device0 = new Device ( ) ; device0 . setType ( "09zBH" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test2 ( ) throws Throwable { Device device0 = new Device ( ) ; String string0 = device0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { Device device0 = new Device ( ) ; device0 . setId ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test5 ( ) throws Throwable { Device device0 = new Device ( ) ; Boolean boolean0 = Boolean . FALSE ; device0 . setDisabled ( boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDisabled ( Boolean value ) { this . disabled = value ; }
void test6 ( ) throws Throwable { Device device0 = new Device ( ) ; String string0 = device0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test7 ( ) throws Throwable { Device device0 = new Device ( ) ; long long0 = device0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test0 ( ) throws Throwable { ProbeParameter probeParameter0 = new ProbeParameter ( ) ; probeParameter0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test1 ( ) throws Throwable { ProbeParameter probeParameter0 = new ProbeParameter ( ) ; probeParameter0 . setValue ( " ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test2 ( ) throws Throwable { ProbeParameter probeParameter0 = new ProbeParameter ( ) ; String string0 = probeParameter0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test3 ( ) throws Throwable { ProbeParameter probeParameter0 = new ProbeParameter ( ) ; boolean boolean0 = probeParameter0 . isMandatory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test4 ( ) throws Throwable { ProbeParameter probeParameter0 = new ProbeParameter ( ) ; String string0 = probeParameter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test5 ( ) throws Throwable { ProbeParameter probeParameter0 = new ProbeParameter ( ) ; String string0 = probeParameter0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test6 ( ) throws Throwable { ProbeParameter probeParameter0 = new ProbeParameter ( ) ; probeParameter0 . setDescription ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test7 ( ) throws Throwable { ProbeParameter probeParameter0 = new ProbeParameter ( ) ; probeParameter0 . setMandatory ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test0 ( ) throws Throwable { BMResultRequest bMResultRequest0 = new BMResultRequest ( ) ; bMResultRequest0 . setId ( 1596L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test1 ( ) throws Throwable { BMResultRequest bMResultRequest0 = new BMResultRequest ( ) ; long long0 = bMResultRequest0 . getFrequency ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFrequency ( ) { return frequency ; }
void test2 ( ) throws Throwable { BMResultRequest bMResultRequest0 = new BMResultRequest ( ) ; long long0 = bMResultRequest0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test3 ( ) throws Throwable { BMResultRequest bMResultRequest0 = new BMResultRequest ( ) ; bMResultRequest0 . setFrequency ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFrequency ( ) { return frequency ; }
void test4 ( ) throws Throwable { BMResultRequest bMResultRequest0 = new BMResultRequest ( ) ; List < Long > list0 = bMResultRequest0 . getDeviceId ( ) ; List < Long > list1 = bMResultRequest0 . getDeviceId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Long > getDeviceId ( ) { if ( deviceId = = null ) { deviceId = new ArrayList < Long > ( ) ; } return this . deviceId ; }
void test0 ( ) throws Throwable { ProbeParameterValues probeParameterValues0 = new ProbeParameterValues ( ) ; long long0 = probeParameterValues0 . getSacId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test1 ( ) throws Throwable { ProbeParameterValues probeParameterValues0 = new ProbeParameterValues ( ) ; probeParameterValues0 . setSacId ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test2 ( ) throws Throwable { ProbeParameterValues probeParameterValues0 = new ProbeParameterValues ( ) ; long long0 = probeParameterValues0 . getProbeId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getProbeId ( ) { return probeId ; }
void test3 ( ) throws Throwable { ProbeParameterValues probeParameterValues0 = new ProbeParameterValues ( ) ; probeParameterValues0 . setProbeId ( 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getProbeId ( ) { return probeId ; }
void test4 ( ) throws Throwable { ProbeParameterValues probeParameterValues0 = new ProbeParameterValues ( ) ; List < ProbeParameterValue > list0 = probeParameterValues0 . getProbeParameterValue ( ) ; List < ProbeParameterValue > list1 = probeParameterValues0 . getProbeParameterValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ProbeParameterValue > getProbeParameterValue ( ) { if ( probeParameterValue = = null ) { probeParameterValue = new ArrayList < ProbeParameterValue > ( ) ; } return this . probeParameterValue ; }
void test0 ( ) throws Throwable { ProbeParameterValue probeParameterValue0 = new ProbeParameterValue ( ) ; String string0 = probeParameterValue0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test1 ( ) throws Throwable { ProbeParameterValue probeParameterValue0 = new ProbeParameterValue ( ) ; probeParameterValue0 . setValue ( " } A4 . 0x~zL2IPZm - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test2 ( ) throws Throwable { ProbeParameterValue probeParameterValue0 = new ProbeParameterValue ( ) ; probeParameterValue0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test3 ( ) throws Throwable { ProbeParameterValue probeParameterValue0 = new ProbeParameterValue ( ) ; String string0 = probeParameterValue0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test0 ( ) throws Throwable { ProbeParameters probeParameters0 = new ProbeParameters ( ) ; List < ProbeParameter > list0 = probeParameters0 . getProbeParameter ( ) ; List < ProbeParameter > list1 = probeParameters0 . getProbeParameter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ProbeParameter > getProbeParameter ( ) { if ( probeParameter = = null ) { probeParameter = new ArrayList < ProbeParameter > ( ) ; } return this . probeParameter ; }
void test1 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; long long0 = probe0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test2 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; Boolean boolean0 = Boolean . valueOf ( "" ) ; probe0 . setDisabled ( boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDisabled ( Boolean value ) { this . disabled = value ; }
void test3 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; probe0 . setName ( "BA , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test4 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; probe0 . setId ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test5 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; String string0 = probe0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test6 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; List < Long > list0 = probe0 . getBmId ( ) ; List < Long > list1 = probe0 . getBmId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBmId ( ) { return bmId ; }
void test0 ( ) throws Throwable { BMResultsRequest bMResultsRequest0 = new BMResultsRequest ( ) ; bMResultsRequest0 . setSacId ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test1 ( ) throws Throwable { BMResultsRequest bMResultsRequest0 = new BMResultsRequest ( ) ; long long0 = bMResultsRequest0 . getSacId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test2 ( ) throws Throwable { BMResultsRequest bMResultsRequest0 = new BMResultsRequest ( ) ; List < BMResultRequest > list0 = bMResultsRequest0 . getBMResultRequest ( ) ; List < BMResultRequest > list1 = bMResultsRequest0 . getBMResultRequest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BMResultRequest > getBMResultRequest ( ) { if ( bmResultRequest = = null ) { bmResultRequest = new ArrayList < BMResultRequest > ( ) ; } return this . bmResultRequest ; }
void test2 ( ) throws Throwable { WebUIWicketApplication webUIWicketApplication0 = new WebUIWicketApplication ( ) ; Class < ? > class0 = webUIWicketApplication0 . getHomePage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < ? extends Page > getHomePage ( ) { return BodyFrame . class ; / / return ProbeListPage . class ; }
void test3 ( ) throws Throwable { WebUIWicketApplication webUIWicketApplication0 = new WebUIWicketApplication ( ) ; Folder folder0 = webUIWicketApplication0 . getUploadFolder ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Folder getUploadFolder ( ) { return uploadFolder ; }
void test0 ( ) throws Throwable { ProbeDesc probeDesc0 = new ProbeDesc ( ( - 1354L ) , ( - 1994L ) , "" , true ) ; long long0 = probeDesc0 . getProbeId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean isDisabled ( ) { return disabled ; }
void test1 ( ) throws Throwable { ProbeDesc probeDesc0 = new ProbeDesc ( ( - 1354L ) , ( - 1994L ) , "" , true ) ; boolean boolean0 = probeDesc0 . isDisabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBmId ( ) { return bmId ; }
void test2 ( ) throws Throwable { ProbeDesc probeDesc0 = new ProbeDesc ( ( - 1354L ) , ( - 1994L ) , "" , true ) ; long long0 = probeDesc0 . getBmId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean isDisabled ( ) { return disabled ; }
void test3 ( ) throws Throwable { ProbeDesc probeDesc0 = new ProbeDesc ( ( - 1354L ) , ( - 1994L ) , "" , true ) ; String string0 = probeDesc0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean isDisabled ( ) { return disabled ; }
void test0 ( ) throws Throwable { DeviceDesc deviceDesc0 = new DeviceDesc ( ( - 1800L ) , " , 8f\"XYwt'X%MG" , " , 8f\"XYwt'X%MG" , true ) ; String string0 = deviceDesc0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean isDisabled ( ) { return disabled ; }
void test1 ( ) throws Throwable { DeviceDesc deviceDesc0 = new DeviceDesc ( 0L , "" , "" , true ) ; String string0 = deviceDesc0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean isDisabled ( ) { return disabled ; }
void test2 ( ) throws Throwable { DeviceDesc deviceDesc0 = new DeviceDesc ( 1479L , "" , "" , true ) ; boolean boolean0 = deviceDesc0 . isDisabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Long > getDeviceId ( ) { if ( deviceId = = null ) { deviceId = new ArrayList < Long > ( ) ; } return this . deviceId ; }
void test3 ( ) throws Throwable { DeviceDesc deviceDesc0 = new DeviceDesc ( 0L , "" , "" , true ) ; deviceDesc0 . getDeviceId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean isDisabled ( ) { return disabled ; }
void test0 ( ) throws Throwable { DeviceComparator deviceComparator0 = new DeviceComparator ( " ; qlj . gv3Bc ( " , true ) ; DeviceDesc deviceDesc0 = new DeviceDesc ( 1L , " ; qlj . gv3Bc ( " , " ; qlj . gv3Bc ( " , true ) ; int int0 = deviceComparator0 . compare ( deviceDesc0 , deviceDesc0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test1 ( ) throws Throwable { DeviceDesc deviceDesc0 = new DeviceDesc ( ( - 1L ) , "$ ] 2_" , "$ ] 2_" , false ) ; DeviceComparator deviceComparator0 = new DeviceComparator ( "deviceId" , false ) ; int int0 = deviceComparator0 . compare ( deviceDesc0 , deviceDesc0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test2 ( ) throws Throwable { DeviceComparator deviceComparator0 = new DeviceComparator ( "name" , false ) ; DeviceDesc deviceDesc0 = new DeviceDesc ( 1767L , "type" , "6M : feD$V^" , false ) ; int int0 = deviceComparator0 . compare ( deviceDesc0 , deviceDesc0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test3 ( ) throws Throwable { DeviceComparator deviceComparator0 = new DeviceComparator ( "type" , false ) ; DeviceDesc deviceDesc0 = new DeviceDesc ( 0L , "type" , "type" , false ) ; int int0 = deviceComparator0 . compare ( deviceDesc0 , deviceDesc0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test0 ( ) throws Throwable { BMDesc bMDesc0 = new BMDesc ( ( - 1167L ) , ( - 1167L ) , "" , "" , "" , true ) ; long long0 = bMDesc0 . getDeviceId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBmId ( ) { return bmId ; }
void test1 ( ) throws Throwable { BMDesc bMDesc0 = new BMDesc ( ( - 1167L ) , ( - 1167L ) , "" , "" , "" , true ) ; String string0 = bMDesc0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Long > getDeviceId ( ) { if ( deviceId = = null ) { deviceId = new ArrayList < Long > ( ) ; } return this . deviceId ; }
void test2 ( ) throws Throwable { BMDesc bMDesc0 = new BMDesc ( ( - 1167L ) , ( - 1167L ) , "" , "" , "" , true ) ; long long0 = bMDesc0 . getBmId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Long > getDeviceId ( ) { if ( deviceId = = null ) { deviceId = new ArrayList < Long > ( ) ; } return this . deviceId ; }
void test3 ( ) throws Throwable { BMDesc bMDesc0 = new BMDesc ( 0L , 0L , "" , "" , "" , false ) ; String string0 = bMDesc0 . getClazz ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean isDisabled ( ) { return disabled ; }
void test4 ( ) throws Throwable { BMDesc bMDesc0 = new BMDesc ( ( - 1167L ) , ( - 1167L ) , "" , "" , "" , true ) ; String string0 = bMDesc0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean isDisabled ( ) { return disabled ; }
void test5 ( ) throws Throwable { BMDesc bMDesc0 = new BMDesc ( ( - 1167L ) , ( - 1167L ) , "" , "" , "" , true ) ; boolean boolean0 = bMDesc0 . isDisabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Long > getDeviceId ( ) { if ( deviceId = = null ) { deviceId = new ArrayList < Long > ( ) ; } return this . deviceId ; }
void test0 ( ) throws Throwable { AvailabilityStorage availabilityStorage0 = new AvailabilityStorage ( ) ; List < ProbeDesc > list0 = availabilityStorage0 . getProbes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return devices . size ( ) ; }
void test1 ( ) throws Throwable { AvailabilityStorage availabilityStorage0 = new AvailabilityStorage ( ) ; BMDesc bMDesc0 = new BMDesc ( ( - 1468L ) , ( - 1L ) , " < BVLM^yWI" , " < BVLM^yWI" , " < BVLM^yWI" , false ) ; availabilityStorage0 . addBM ( bMDesc0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Long > getDeviceId ( ) { if ( deviceId = = null ) { deviceId = new ArrayList < Long > ( ) ; } return this . deviceId ; }
void test2 ( ) throws Throwable { AvailabilityStorage availabilityStorage0 = new AvailabilityStorage ( ) ; ProbeDesc probeDesc0 = new ProbeDesc ( 0L , 0L , "H ] h\"^Lgv~ : ( " , false ) ; availabilityStorage0 . addProbe ( probeDesc0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean isDisabled ( ) { return disabled ; }
void test4 ( ) throws Throwable { AvailabilityStorage availabilityStorage0 = new AvailabilityStorage ( ) ; List < DeviceDesc > list0 = availabilityStorage0 . getDevices ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < DeviceDesc > getDevices ( ) { return devices ; }
void test5 ( ) throws Throwable { AvailabilityStorage availabilityStorage0 = new AvailabilityStorage ( ) ; List < BMDesc > list0 = availabilityStorage0 . getBms ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return devices . size ( ) ; }
void test1 ( ) throws Throwable { LinkedList < DeviceDesc > linkedList0 = new LinkedList < DeviceDesc > ( ) ; DeviceListDataProvider deviceListDataProvider0 = new DeviceListDataProvider ( ( List < DeviceDesc > ) linkedList0 ) ; int int0 = deviceListDataProvider0 . size ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return devices . size ( ) ; }
void test3 ( ) throws Throwable { LinkedList < DeviceDesc > linkedList0 = new LinkedList < DeviceDesc > ( ) ; DeviceListDataProvider deviceListDataProvider0 = new DeviceListDataProvider ( ( List < DeviceDesc > ) linkedList0 ) ; Iterator < DeviceDesc > iterator0 = deviceListDataProvider0 . iterator ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Iterator < DeviceDesc > iterator ( int i , int i1 ) { SortParam sp = getSort ( ) ; String key = sp . getProperty ( ) ; log . debug ( "sort key : " + key ) ; if ( sp . isAscending ( ) ) { Collections . sort ( devices , new DeviceComparator ( key , true ) ) ; } else { Collections . sort ( devices , new DeviceComparator ( key , false ) ) ; } return devices . subList ( i , i + i1 ) . iterator ( ) ; }
void test0 ( ) throws Throwable { BMComparator bMComparator0 = new BMComparator ( "bmId" , true ) ; BMDesc bMDesc0 = new BMDesc ( 0L , 0L , "bmId" , "bmId" , "bmId" , true ) ; int int0 = bMComparator0 . compare ( bMDesc0 , bMDesc0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test1 ( ) throws Throwable { BMDesc bMDesc0 = new BMDesc ( 0L , 0L , "bmId" , "bmId" , "bmId" , true ) ; BMComparator bMComparator0 = new BMComparator ( "deviceId" , false ) ; int int0 = bMComparator0 . compare ( bMDesc0 , bMDesc0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test2 ( ) throws Throwable { BMComparator bMComparator0 = new BMComparator ( "clazz" , false ) ; BMDesc bMDesc0 = new BMDesc ( 0L , 0L , "clazz" , "clazz" , "clazz" , false ) ; int int0 = bMComparator0 . compare ( bMDesc0 , bMDesc0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test3 ( ) throws Throwable { BMComparator bMComparator0 = new BMComparator ( "name" , false ) ; BMDesc bMDesc0 = new BMDesc ( 0L , 0L , "clazz" , "clazz" , "clazz" , false ) ; int int0 = bMComparator0 . compare ( bMDesc0 , bMDesc0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test4 ( ) throws Throwable { BMComparator bMComparator0 = new BMComparator ( "description" , true ) ; BMDesc bMDesc0 = new BMDesc ( 1429L , 0L , "description" , "description" , "description" , false ) ; int int0 = bMComparator0 . compare ( bMDesc0 , bMDesc0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test2 ( ) throws Throwable { ProbeComparator probeComparator0 = new ProbeComparator ( "name" , true ) ; ProbeDesc probeDesc0 = new ProbeDesc ( 1L , 1L , "name" , false ) ; int int0 = probeComparator0 . compare ( probeDesc0 , probeDesc0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test3 ( ) throws Throwable { ProbeDesc probeDesc0 = new ProbeDesc ( ( - 1387L ) , 1054L , "" , true ) ; ProbeComparator probeComparator0 = new ProbeComparator ( "19 [ ^~W5" , false ) ; int int0 = probeComparator0 . compare ( probeDesc0 , probeDesc0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test0 ( ) throws Throwable { EventType eventType0 = EventType . NO_VALUE_FOR_BM ; ServerEvent serverEvent0 = new ServerEvent ( 0L , eventType0 , "" , "" , 0L ) ; EventComparator eventComparator0 = new EventComparator ( "time" , true ) ; int int0 = eventComparator0 . compare ( serverEvent0 , serverEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test1 ( ) throws Throwable { EventComparator eventComparator0 = new EventComparator ( "message" , false ) ; EventType eventType0 = EventType . NEW_SUBSCRIPTION ; ServerEvent serverEvent0 = new ServerEvent ( 0L , eventType0 , "message" , "message" ) ; int int0 = eventComparator0 . compare ( serverEvent0 , serverEvent0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test0 ( ) throws Throwable { BMResults . PerDevice bMResults_PerDevice0 = new BMResults . PerDevice ( ) ; bMResults_PerDevice0 . setDeviceId ( ( - 973L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Long > getDeviceId ( ) { if ( deviceId = = null ) { deviceId = new ArrayList < Long > ( ) ; } return this . deviceId ; }
void test1 ( ) throws Throwable { BMResults . PerDevice bMResults_PerDevice0 = new BMResults . PerDevice ( ) ; long long0 = bMResults_PerDevice0 . getDeviceId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Long > getDeviceId ( ) { if ( deviceId = = null ) { deviceId = new ArrayList < Long > ( ) ; } return this . deviceId ; }
void test2 ( ) throws Throwable { BMResults bMResults0 = new BMResults ( ) ; bMResults0 . setMfwId ( ( - 1257L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMfwId ( ) { return mfwId ; }
void test3 ( ) throws Throwable { BMResults bMResults0 = new BMResults ( ) ; long long0 = bMResults0 . getMfwId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMfwId ( ) { return mfwId ; }
void test4 ( ) throws Throwable { BMResults bMResults0 = new BMResults ( ) ; List < BMResults . PerDevice > list0 = bMResults0 . getPerDevice ( ) ; List < BMResults . PerDevice > list1 = bMResults0 . getPerDevice ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BMResults . PerDevice > getPerDevice ( ) { if ( perDevice = = null ) { perDevice = new ArrayList < BMResults . PerDevice > ( ) ; } return this . perDevice ; }
void test5 ( ) throws Throwable { BMResults . PerDevice bMResults_PerDevice0 = new BMResults . PerDevice ( ) ; List < BMResult > list0 = bMResults_PerDevice0 . getBMResult ( ) ; List < BMResult > list1 = bMResults_PerDevice0 . getBMResult ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; long long0 = availability0 . getMfwId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMfwId ( ) { return mfwId ; }
void test1 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; availability0 . setMfwId ( 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMfwId ( ) { return mfwId ; }
void test2 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; List < Device > list0 = availability0 . getDevice ( ) ; List < Device > list1 = availability0 . getDevice ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Device > getDevice ( ) { if ( device = = null ) { device = new ArrayList < Device > ( ) ; } return this . device ; }
void test3 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; List < BM > list0 = availability0 . getBM ( ) ; List < BM > list1 = availability0 . getBM ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BM > getBM ( ) { if ( bm = = null ) { bm = new ArrayList < BM > ( ) ; } return this . bm ; }
void test4 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; List < Probe > list0 = availability0 . getProbe ( ) ; List < Probe > list1 = availability0 . getProbe ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Probe > getProbe ( ) { if ( probe = = null ) { probe = new ArrayList < Probe > ( ) ; } return this . probe ; }
void test0 ( ) throws Throwable { BM bM0 = new BM ( ) ; Boolean boolean0 = Boolean . FALSE ; bM0 . setDisabled ( boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test1 ( ) throws Throwable { BM bM0 = new BM ( ) ; String string0 = bM0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test3 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setDescription ( " & , 77Cd^SvPO1~qsaNS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test4 ( ) throws Throwable { BM bM0 = new BM ( ) ; long long0 = bM0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test5 ( ) throws Throwable { BM bM0 = new BM ( ) ; String string0 = bM0 . getClazz ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClazz ( ) { return clazz ; }
void test6 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test7 ( ) throws Throwable { BM bM0 = new BM ( ) ; String string0 = bM0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test8 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setId ( ( - 1229L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test9 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setClazz ( "G4@W" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test10 ( ) throws Throwable { BM bM0 = new BM ( ) ; List < Long > list0 = bM0 . getDeviceId ( ) ; List < Long > list1 = bM0 . getDeviceId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Long > getDeviceId ( ) { if ( deviceId = = null ) { deviceId = new ArrayList < Long > ( ) ; } return this . deviceId ; }
void test0 ( ) throws Throwable { OperationResult operationResult0 = new OperationResult ( ) ; operationResult0 . setError ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isError ( ) { return error ; }
void test1 ( ) throws Throwable { OperationResult operationResult0 = new OperationResult ( ) ; boolean boolean0 = operationResult0 . isError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isError ( ) { return error ; }
void test0 ( ) throws Throwable { Device device0 = new Device ( ) ; String string0 = device0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test1 ( ) throws Throwable { Device device0 = new Device ( ) ; device0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test2 ( ) throws Throwable { Device device0 = new Device ( ) ; long long0 = device0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test3 ( ) throws Throwable { Device device0 = new Device ( ) ; device0 . setType ( "09zBH" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test4 ( ) throws Throwable { Device device0 = new Device ( ) ; String string0 = device0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test5 ( ) throws Throwable { Device device0 = new Device ( ) ; Boolean boolean0 = Boolean . FALSE ; device0 . setDisabled ( boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test6 ( ) throws Throwable { Device device0 = new Device ( ) ; device0 . setId ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test0 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; sAC0 . setTime ( ( XMLGregorianCalendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCompany ( ) { return company ; }
void test1 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; String string0 = sAC0 . getCompany ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCompany ( ) { return company ; }
void test2 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; String string0 = sAC0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test3 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; XMLGregorianCalendar xMLGregorianCalendar0 = sAC0 . getTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return time ; }
void test4 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; sAC0 . setVersion ( "ua$ ) W`Z * pQ5\"" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test5 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; long long0 = sAC0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test6 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; sAC0 . setIFs ( "j ; YYKz%5 ] O" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test7 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; sAC0 . setId ( ( - 102L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test8 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; sAC0 . setCompany ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCompany ( ) { return company ; }
void test9 ( ) throws Throwable { SAC sAC0 = new SAC ( ) ; String string0 = sAC0 . getIFs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIFs ( ) { return iFs ; }
void test0 ( ) throws Throwable { GetSAC getSAC0 = new GetSAC ( ) ; long long0 = getSAC0 . getMfwId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMfwId ( ) { return mfwId ; }
void test1 ( ) throws Throwable { GetSAC getSAC0 = new GetSAC ( ) ; getSAC0 . setMfwId ( 172L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMfwId ( ) { return mfwId ; }
void test0 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( ) ; long long0 = bMResult0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test1 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( ) ; String string0 = bMResult0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test2 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( ) ; bMResult0 . setValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test3 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( ) ; bMResult0 . setId ( 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test4 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( ) ; XMLGregorianCalendar xMLGregorianCalendar0 = bMResult0 . getTimeStamp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" XMLGregorianCalendar getTimeStamp ( ) { return timeStamp ; }
void test5 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( ) ; bMResult0 . setError ( ( Boolean ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test6 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( ) ; bMResult0 . setTimeStamp ( ( XMLGregorianCalendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test0 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; Boolean boolean0 = Boolean . valueOf ( "" ) ; probe0 . setDisabled ( boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test1 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; probe0 . setName ( "BA , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test2 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; String string0 = probe0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test3 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; probe0 . setId ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test4 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; long long0 = probe0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test6 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; List < Long > list0 = probe0 . getBmId ( ) ; List < Long > list1 = probe0 . getBmId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBmId ( ) { return bmId ; }
void test0 ( ) throws Throwable { Class < ? > class0 = FrameTarget . class ; FrameTarget frameTarget0 = new FrameTarget ( ( Class < Page > ) class0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FrameTarget ( ) { }
void test2 ( ) throws Throwable { FrameTarget frameTarget0 = new FrameTarget ( ) ; Class < ? > class0 = frameTarget0 . getFrameClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Class < ? extends Page > getFrameClass ( ) { return frameClass ; }
void test0 ( ) throws Throwable { BMReportsStorage bMReportsStorage0 = new BMReportsStorage ( ) ; BMReport bMReport0 = new BMReport ( "" , "" , ( - 1657L ) , 0L , true , "" ) ; bMReportsStorage0 . addBMReport ( bMReport0 ) ; List < BMReport > list0 = bMReportsStorage0 . getBmReports ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BMReport > getBmReports ( ) { List < BMReport > bmReportList = new ArrayList < BMReport > ( ) ; for ( BMReport bmReport : bmReports . values ( ) ) { bmReportList . add ( bmReport ) ; } return bmReportList ; }
void test1 ( ) throws Throwable { BMReportsStorage bMReportsStorage0 = new BMReportsStorage ( ) ; List < BMReport > list0 = bMReportsStorage0 . getBmReports ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BMReport > getBmReports ( ) { List < BMReport > bmReportList = new ArrayList < BMReport > ( ) ; for ( BMReport bmReport : bmReports . values ( ) ) { bmReportList . add ( bmReport ) ; } return bmReportList ; }
void test0 ( ) throws Throwable { ValueComparator valueComparator0 = new ValueComparator ( "Hi" , false ) ; BMReport bMReport0 = new BMReport ( "Hi" , "Hi" , 0L , 1L , false , "Hi" ) ; int int0 = valueComparator0 . compare ( bMReport0 , bMReport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test1 ( ) throws Throwable { ValueComparator valueComparator0 = new ValueComparator ( "measure_uri" , true ) ; BMReport bMReport0 = new BMReport ( "measure_uri" , "measure_uri" , 2046L , 2046L , true , " > 7Anh' ] Ic% = a } 2" ) ; int int0 = valueComparator0 . compare ( bMReport0 , bMReport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test2 ( ) throws Throwable { ValueComparator valueComparator0 = new ValueComparator ( "time" , true ) ; BMReport bMReport0 = new BMReport ( "^00" , "" , 0L , 0L , true , "time" ) ; int int0 = valueComparator0 . compare ( bMReport0 , bMReport0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test1 ( ) throws Throwable { ValueComparator valueComparator0 = new ValueComparator ( "bm_id" , false ) ; BMResult bMResult0 = new BMResult ( 0L , 4L , "bm_id" , ( XMLGregorianCalendar ) null , false ) ; int int0 = valueComparator0 . compare ( bMResult0 , bMResult0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test3 ( ) throws Throwable { ValueComparator valueComparator0 = new ValueComparator ( "value" , true ) ; BMResult bMResult0 = new BMResult ( ( - 1L ) , ( - 1L ) , "value" , ( XMLGregorianCalendar ) null , false ) ; int int0 = valueComparator0 . compare ( bMResult0 , bMResult0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test0 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( 0L , 0L , "" , ( XMLGregorianCalendar ) null , true ) ; boolean boolean0 = bMResult0 . isError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isError ( ) { return error ; }
void test1 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( 1L , 1L , "U < pE`7HNQ ! W59sH * . " , ( XMLGregorianCalendar ) null , true ) ; bMResult0 . getTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBm_id ( ) { return bm_id ; }
void test2 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( 0L , 0L , "" , ( XMLGregorianCalendar ) null , true ) ; bMResult0 . getDevice_id ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isError ( ) { return error ; }
void test3 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( 1L , 1L , "U < pE`7HNQ ! W59sH * . " , ( XMLGregorianCalendar ) null , true ) ; String string0 = bMResult0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getDevice_id ( ) { return device_id ; }
void test4 ( ) throws Throwable { BMResult bMResult0 = new BMResult ( ( - 300L ) , 1379L , "%Y - %M - %D%z" , ( XMLGregorianCalendar ) null , false ) ; long long0 = bMResult0 . getBm_id ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getDevice_id ( ) { return device_id ; }
void test0 ( ) throws Throwable { BMResultsStorage bMResultsStorage0 = new BMResultsStorage ( ) ; List < BMResult > list0 = bMResultsStorage0 . getBmResults ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return devices . size ( ) ; }
void test0 ( ) throws Throwable { ProbeDesc probeDesc0 = new ProbeDesc ( ( - 1354L ) , ( - 1994L ) , "" , true ) ; long long0 = probeDesc0 . getProbeId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean isDisabled ( ) { return disabled ; }
void test1 ( ) throws Throwable { ProbeDesc probeDesc0 = new ProbeDesc ( ( - 1354L ) , ( - 1994L ) , "" , true ) ; String string0 = probeDesc0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getProbeId ( ) { return probeId ; }
void test2 ( ) throws Throwable { ProbeDesc probeDesc0 = new ProbeDesc ( ( - 1354L ) , ( - 1994L ) , "" , true ) ; boolean boolean0 = probeDesc0 . isDisabled ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getProbeId ( ) { return probeId ; }
void test3 ( ) throws Throwable { ProbeDesc probeDesc0 = new ProbeDesc ( ( - 1354L ) , ( - 1994L ) , "" , true ) ; long long0 = probeDesc0 . getBmId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getProbeId ( ) { return probeId ; }
void test0 ( ) throws Throwable { ParameterComparator parameterComparator0 = new ParameterComparator ( "" , false ) ; ProbeParameter probeParameter0 = new ProbeParameter ( ) ; int int0 = parameterComparator0 . compare ( probeParameter0 , probeParameter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test4 ( ) throws Throwable { ParameterComparator parameterComparator0 = new ParameterComparator ( "mandatory" , true ) ; ProbeParameter probeParameter0 = new ProbeParameter ( ) ; int int0 = parameterComparator0 . compare ( probeParameter0 , probeParameter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test0 ( ) throws Throwable { DMComparator dMComparator0 = new DMComparator ( "id" , true ) ; DMDefinition dMDefinition0 = new DMDefinition ( 1781 , "" , "id" ) ; int int0 = dMComparator0 . compare ( dMDefinition0 , dMDefinition0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test1 ( ) throws Throwable { DMComparator dMComparator0 = new DMComparator ( "name" , true ) ; DMDefinition dMDefinition0 = new DMDefinition ( 0 , "name" , "name" ) ; int int0 = dMComparator0 . compare ( dMDefinition0 , dMDefinition0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test2 ( ) throws Throwable { DMComparator dMComparator0 = new DMComparator ( "lIq7 = [ i7 . ei`S5w" , false ) ; int int0 = dMComparator0 . compare ( ( DMDefinition ) null , ( DMDefinition ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test0 ( ) throws Throwable { DMValueComparator dMValueComparator0 = new DMValueComparator ( "" , false ) ; int int0 = dMValueComparator0 . compare ( ( DMValue ) null , ( DMValue ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test1 ( ) throws Throwable { DMValueComparator dMValueComparator0 = new DMValueComparator ( "id" , true ) ; DMDefinition dMDefinition0 = new DMDefinition ( 823 , "id" , "id" ) ; DMValue dMValue0 = new DMValue ( dMDefinition0 , "id" , ( long ) 0 ) ; int int0 = dMValueComparator0 . compare ( dMValue0 , dMValue0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test2 ( ) throws Throwable { DMValueComparator dMValueComparator0 = new DMValueComparator ( "name" , true ) ; DMDefinition dMDefinition0 = new DMDefinition ( 1819 , "name" , "name" ) ; DMValue dMValue0 = new DMValue ( dMDefinition0 , ( double ) 0 , ( long ) 0 ) ; int int0 = dMValueComparator0 . compare ( dMValue0 , dMValue0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test3 ( ) throws Throwable { DMValueComparator dMValueComparator0 = new DMValueComparator ( "value" , true ) ; DMDefinition dMDefinition0 = new DMDefinition ( 85 , "value" , "DM_VALUE" ) ; DMValue dMValue0 = new DMValue ( dMDefinition0 , "value" , ( long ) 85 ) ; int int0 = dMValueComparator0 . compare ( dMValue0 , dMValue0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test3 ( ) throws Throwable { BMComparator bMComparator0 = new BMComparator ( "e" , true ) ; BMListItem bMListItem0 = new BMListItem ( ( BMDescription ) null , "e" ) ; int int0 = bMComparator0 . compare ( bMListItem0 , bMListItem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test4 ( ) throws Throwable { BMComparator bMComparator0 = new BMComparator ( "value" , false ) ; BMListItem bMListItem0 = new BMListItem ( ( BMDescription ) null , "" ) ; int int0 = bMComparator0 . compare ( bMListItem0 , bMListItem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test2 ( ) throws Throwable { ValueComparator valueComparator0 = new ValueComparator ( "precision" , true ) ; Value value0 = new Value ( ) ; int int0 = valueComparator0 . compare ( value0 , value0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test3 ( ) throws Throwable { ValueComparator valueComparator0 = new ValueComparator ( "" , false ) ; Value value0 = new Value ( ) ; int int0 = valueComparator0 . compare ( value0 , value0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test0 ( ) throws Throwable { GetAvailability getAvailability0 = new GetAvailability ( ) ; long long0 = getAvailability0 . getSacId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test1 ( ) throws Throwable { GetAvailability getAvailability0 = new GetAvailability ( ) ; getAvailability0 . setSacId ( 172L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test0 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; String string0 = mFW0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test1 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; mFW0 . setCompany ( "DE$ - ( / ors" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test2 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; mFW0 . setTime ( ( XMLGregorianCalendar ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIfs ( ) { return ifs ; }
void test3 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; mFW0 . setIfs ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIfs ( ) { return ifs ; }
void test4 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; XMLGregorianCalendar xMLGregorianCalendar0 = mFW0 . getTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return time ; }
void test5 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; String string0 = mFW0 . getIfs ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIfs ( ) { return ifs ; }
void test6 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; mFW0 . setVersion ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test7 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; mFW0 . setId ( ( - 384L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test8 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; long long0 = mFW0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test9 ( ) throws Throwable { MFW mFW0 = new MFW ( ) ; String string0 = mFW0 . getCompany ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCompany ( ) { return company ; }
void test0 ( ) throws Throwable { ProbeParametersRequest probeParametersRequest0 = new ProbeParametersRequest ( ) ; long long0 = probeParametersRequest0 . getSacId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test1 ( ) throws Throwable { ProbeParametersRequest probeParametersRequest0 = new ProbeParametersRequest ( ) ; probeParametersRequest0 . setProbeId ( ( - 1428L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getProbeId ( ) { return probeId ; }
void test2 ( ) throws Throwable { ProbeParametersRequest probeParametersRequest0 = new ProbeParametersRequest ( ) ; probeParametersRequest0 . setSacId ( ( - 1548L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test3 ( ) throws Throwable { ProbeParametersRequest probeParametersRequest0 = new ProbeParametersRequest ( ) ; long long0 = probeParametersRequest0 . getProbeId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getProbeId ( ) { return probeId ; }
void test0 ( ) throws Throwable { GetMFW getMFW0 = new GetMFW ( ) ; long long0 = getMFW0 . getSacId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test1 ( ) throws Throwable { GetMFW getMFW0 = new GetMFW ( ) ; getMFW0 . setSacId ( 172L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test0 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; availability0 . setMfwId ( 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMfwId ( ) { return mfwId ; }
void test1 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; long long0 = availability0 . getMfwId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getMfwId ( ) { return mfwId ; }
void test2 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; List < Device > list0 = availability0 . getDevice ( ) ; List < Device > list1 = availability0 . getDevice ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Device > getDevice ( ) { if ( device = = null ) { device = new ArrayList < Device > ( ) ; } return this . device ; }
void test3 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; List < BM > list0 = availability0 . getBM ( ) ; List < BM > list1 = availability0 . getBM ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BM > getBM ( ) { if ( bm = = null ) { bm = new ArrayList < BM > ( ) ; } return this . bm ; }
void test4 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; List < Probe > list0 = availability0 . getProbe ( ) ; List < Probe > list1 = availability0 . getProbe ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Probe > getProbe ( ) { if ( probe = = null ) { probe = new ArrayList < Probe > ( ) ; } return this . probe ; }
void test0 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setDescription ( " & , 77Cd^SvPO1~qsaNS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test1 ( ) throws Throwable { BM bM0 = new BM ( ) ; String string0 = bM0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test2 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClazz ( ) { return clazz ; }
void test3 ( ) throws Throwable { BM bM0 = new BM ( ) ; Boolean boolean0 = Boolean . FALSE ; bM0 . setDisabled ( boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test5 ( ) throws Throwable { BM bM0 = new BM ( ) ; long long0 = bM0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test6 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setClazz ( "G4@W" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test7 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setId ( ( - 1229L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test8 ( ) throws Throwable { BM bM0 = new BM ( ) ; String string0 = bM0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test9 ( ) throws Throwable { BM bM0 = new BM ( ) ; String string0 = bM0 . getClazz ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClazz ( ) { return clazz ; }
void test10 ( ) throws Throwable { BM bM0 = new BM ( ) ; List < Long > list0 = bM0 . getDeviceId ( ) ; List < Long > list1 = bM0 . getDeviceId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Long > getDeviceId ( ) { if ( deviceId = = null ) { deviceId = new ArrayList < Long > ( ) ; } return this . deviceId ; }
void test0 ( ) throws Throwable { OperationResult operationResult0 = new OperationResult ( ) ; boolean boolean0 = operationResult0 . isError ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isError ( ) { return error ; }
void test1 ( ) throws Throwable { OperationResult operationResult0 = new OperationResult ( ) ; operationResult0 . setError ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isError ( ) { return error ; }
void test0 ( ) throws Throwable { Device device0 = new Device ( ) ; device0 . setType ( "09zBH" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test2 ( ) throws Throwable { Device device0 = new Device ( ) ; String string0 = device0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { Device device0 = new Device ( ) ; device0 . setId ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test4 ( ) throws Throwable { Device device0 = new Device ( ) ; device0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test5 ( ) throws Throwable { Device device0 = new Device ( ) ; String string0 = device0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test6 ( ) throws Throwable { Device device0 = new Device ( ) ; long long0 = device0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test7 ( ) throws Throwable { Device device0 = new Device ( ) ; Boolean boolean0 = Boolean . FALSE ; device0 . setDisabled ( boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDisabled ( Boolean value ) { this . disabled = value ; }
void test0 ( ) throws Throwable { ProbeParameter probeParameter0 = new ProbeParameter ( ) ; String string0 = probeParameter0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test1 ( ) throws Throwable { ProbeParameter probeParameter0 = new ProbeParameter ( ) ; boolean boolean0 = probeParameter0 . isMandatory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test2 ( ) throws Throwable { ProbeParameter probeParameter0 = new ProbeParameter ( ) ; String string0 = probeParameter0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test3 ( ) throws Throwable { ProbeParameter probeParameter0 = new ProbeParameter ( ) ; String string0 = probeParameter0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test4 ( ) throws Throwable { ProbeParameter probeParameter0 = new ProbeParameter ( ) ; probeParameter0 . setMandatory ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test5 ( ) throws Throwable { ProbeParameter probeParameter0 = new ProbeParameter ( ) ; probeParameter0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test6 ( ) throws Throwable { ProbeParameter probeParameter0 = new ProbeParameter ( ) ; probeParameter0 . setValue ( " ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test7 ( ) throws Throwable { ProbeParameter probeParameter0 = new ProbeParameter ( ) ; probeParameter0 . setDescription ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test0 ( ) throws Throwable { BMResultRequest bMResultRequest0 = new BMResultRequest ( ) ; bMResultRequest0 . setId ( 1596L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test1 ( ) throws Throwable { BMResultRequest bMResultRequest0 = new BMResultRequest ( ) ; bMResultRequest0 . setFrequency ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test2 ( ) throws Throwable { BMResultRequest bMResultRequest0 = new BMResultRequest ( ) ; long long0 = bMResultRequest0 . getFrequency ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getFrequency ( ) { return frequency ; }
void test3 ( ) throws Throwable { BMResultRequest bMResultRequest0 = new BMResultRequest ( ) ; long long0 = bMResultRequest0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test4 ( ) throws Throwable { BMResultRequest bMResultRequest0 = new BMResultRequest ( ) ; List < Long > list0 = bMResultRequest0 . getDeviceId ( ) ; List < Long > list1 = bMResultRequest0 . getDeviceId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Long > getDeviceId ( ) { if ( deviceId = = null ) { deviceId = new ArrayList < Long > ( ) ; } return this . deviceId ; }
void test0 ( ) throws Throwable { ProbeParameterValues probeParameterValues0 = new ProbeParameterValues ( ) ; probeParameterValues0 . setSacId ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test1 ( ) throws Throwable { ProbeParameterValues probeParameterValues0 = new ProbeParameterValues ( ) ; long long0 = probeParameterValues0 . getSacId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test2 ( ) throws Throwable { ProbeParameterValues probeParameterValues0 = new ProbeParameterValues ( ) ; probeParameterValues0 . setProbeId ( 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getProbeId ( ) { return probeId ; }
void test3 ( ) throws Throwable { ProbeParameterValues probeParameterValues0 = new ProbeParameterValues ( ) ; long long0 = probeParameterValues0 . getProbeId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getProbeId ( ) { return probeId ; }
void test4 ( ) throws Throwable { ProbeParameterValues probeParameterValues0 = new ProbeParameterValues ( ) ; List < ProbeParameterValue > list0 = probeParameterValues0 . getProbeParameterValue ( ) ; List < ProbeParameterValue > list1 = probeParameterValues0 . getProbeParameterValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ProbeParameterValue > getProbeParameterValue ( ) { if ( probeParameterValue = = null ) { probeParameterValue = new ArrayList < ProbeParameterValue > ( ) ; } return this . probeParameterValue ; }
void test0 ( ) throws Throwable { ProbeParameterValue probeParameterValue0 = new ProbeParameterValue ( ) ; String string0 = probeParameterValue0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test1 ( ) throws Throwable { ProbeParameterValue probeParameterValue0 = new ProbeParameterValue ( ) ; String string0 = probeParameterValue0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test2 ( ) throws Throwable { ProbeParameterValue probeParameterValue0 = new ProbeParameterValue ( ) ; probeParameterValue0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test3 ( ) throws Throwable { ProbeParameterValue probeParameterValue0 = new ProbeParameterValue ( ) ; probeParameterValue0 . setValue ( " } A4 . 0x~zL2IPZm - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test0 ( ) throws Throwable { ProbeParameters probeParameters0 = new ProbeParameters ( ) ; List < ProbeParameter > list0 = probeParameters0 . getProbeParameter ( ) ; List < ProbeParameter > list1 = probeParameters0 . getProbeParameter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ProbeParameter > getProbeParameter ( ) { if ( probeParameter = = null ) { probeParameter = new ArrayList < ProbeParameter > ( ) ; } return this . probeParameter ; }
void test0 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; String string0 = probe0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test1 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; long long0 = probe0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test3 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; probe0 . setId ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test4 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; probe0 . setName ( "BA , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test5 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; Boolean boolean0 = Boolean . valueOf ( "" ) ; probe0 . setDisabled ( boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test6 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; List < Long > list0 = probe0 . getBmId ( ) ; List < Long > list1 = probe0 . getBmId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBmId ( ) { return bmId ; }
void test0 ( ) throws Throwable { BMResultsRequest bMResultsRequest0 = new BMResultsRequest ( ) ; bMResultsRequest0 . setSacId ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test1 ( ) throws Throwable { BMResultsRequest bMResultsRequest0 = new BMResultsRequest ( ) ; long long0 = bMResultsRequest0 . getSacId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSacId ( ) { return sacId ; }
void test2 ( ) throws Throwable { BMResultsRequest bMResultsRequest0 = new BMResultsRequest ( ) ; List < BMResultRequest > list0 = bMResultsRequest0 . getBMResultRequest ( ) ; List < BMResultRequest > list1 = bMResultsRequest0 . getBMResultRequest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BMResultRequest > getBMResultRequest ( ) { if ( bmResultRequest = = null ) { bmResultRequest = new ArrayList < BMResultRequest > ( ) ; } return this . bmResultRequest ; }
void test1 ( ) throws Throwable { BMListItem bMListItem0 = new BMListItem ( ( BMDescription ) null , "" ) ; String string0 = bMListItem0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test5 ( ) throws Throwable { BMListItem bMListItem0 = new BMListItem ( ( BMDescription ) null , "Unknown content type for a element decl in getElementContentModelValidator ( ) in AbstractDTDGrammar class" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBmClass ( ) { return bmClass ; }
void test1 ( ) throws Throwable { ProbeDescription probeDescription0 = new ProbeDescription ( ) ; ProbeListItem probeListItem0 = new ProbeListItem ( probeDescription0 ) ; int int0 = probeListItem0 . getDelay ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDelay ( ) { return delay ; }
void test2 ( ) throws Throwable { ProbeDescription probeDescription0 = new ProbeDescription ( ) ; ProbeListItem probeListItem0 = new ProbeListItem ( probeDescription0 ) ; int int0 = probeListItem0 . getPrecision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrecision ( ) { return precision ; }
void test3 ( ) throws Throwable { ProbeDescription probeDescription0 = new ProbeDescription ( ) ; ProbeListItem probeListItem0 = new ProbeListItem ( probeDescription0 ) ; probeListItem0 . setEndpoint ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDelay ( ) { return delay ; }
void test6 ( ) throws Throwable { ProbeDescription probeDescription0 = new ProbeDescription ( ) ; ProbeListItem probeListItem0 = new ProbeListItem ( probeDescription0 ) ; String string0 = probeListItem0 . getEndpoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEndpoint ( ) { return endpoint ; }
void test8 ( ) throws Throwable { ProbeDescription probeDescription0 = new ProbeDescription ( ) ; ProbeListItem probeListItem0 = new ProbeListItem ( probeDescription0 ) ; TargetDescription targetDescription0 = probeListItem0 . getTarget ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TargetDescription getTarget ( ) { return target ; }
void test0 ( ) throws Throwable { WicketValuePair wicketValuePair0 = new WicketValuePair ( "" , "" ) ; String string0 = wicketValuePair0 . getKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKey ( ) { return key ; }
void test1 ( ) throws Throwable { WicketValuePair wicketValuePair0 = new WicketValuePair ( "" , "" ) ; String string0 = wicketValuePair0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test0 ( ) throws Throwable { ValuePairComparator valuePairComparator0 = new ValuePairComparator ( "key" , false ) ; WicketValuePair wicketValuePair0 = new WicketValuePair ( "key" , "key" ) ; int int0 = valuePairComparator0 . compare ( wicketValuePair0 , wicketValuePair0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test1 ( ) throws Throwable { ValuePairComparator valuePairComparator0 = new ValuePairComparator ( "value" , true ) ; WicketValuePair wicketValuePair0 = new WicketValuePair ( "value" , "value" ) ; int int0 = valuePairComparator0 . compare ( wicketValuePair0 , wicketValuePair0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test7 ( ) throws Throwable { ProbeComparator probeComparator0 = new ProbeComparator ( "pr ? beId" , true ) ; ProbeDescription probeDescription0 = new ProbeDescription ( ) ; ProbeListItem probeListItem0 = new ProbeListItem ( probeDescription0 ) ; int int0 = probeComparator0 . compare ( probeListItem0 , probeListItem0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compare ( BMDesc a1 , BMDesc a2 ) { int result = 0 ; if ( sortKey . equals ( "bmId" ) ) { result = ( int ) ( a1 . getBmId ( ) - a2 . getBmId ( ) ) ; } if ( sortKey . equals ( "deviceId" ) ) { result = ( int ) ( a1 . getDeviceId ( ) - a2 . getDeviceId ( ) ) ; } if ( sortKey . equals ( "clazz" ) ) { result = a1 . getClazz ( ) . compareTo ( a2 . getClazz ( ) ) ; } if ( sortKey . equals ( "name" ) ) { result = a1 . getName ( ) . compareTo ( a2 . getName ( ) ) ; } if ( sortKey . equals ( "description" ) ) { result = a1 . getDescription ( ) . compareTo ( a2 . getDescription ( ) ) ; } if ( ! ascending ) { result = 0 - result ; } return result ; }
void test0 ( ) throws Throwable { ClientSubscriptionRegistry clientSubscriptionRegistry0 = new ClientSubscriptionRegistry ( ) ; ArrayList < ClientRequest > arrayList0 = clientSubscriptionRegistry0 . get ( 0L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < ClientRequest > get ( long subscribeId ) { return subs . get ( subscribeId ) ; }
void test1 ( ) throws Throwable { ClientSubscriptionRegistry clientSubscriptionRegistry0 = new ClientSubscriptionRegistry ( ) ; ClientRequest clientRequest0 = new ClientRequest ( "" , "" ) ; clientSubscriptionRegistry0 . add ( 0L , clientRequest0 ) ; clientSubscriptionRegistry0 . add ( 0L , clientRequest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEndpoint ( ) { return endpoint ; }
void test2 ( ) throws Throwable { ClientSubscriptionRegistry clientSubscriptionRegistry0 = new ClientSubscriptionRegistry ( ) ; ClientRequest clientRequest0 = new ClientRequest ( "" , "" ) ; clientSubscriptionRegistry0 . add ( 0L , clientRequest0 ) ; ClientRequest clientRequest1 = new ClientRequest ( ) ; clientSubscriptionRegistry0 . add ( 0L , clientRequest1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test3 ( ) throws Throwable { ClientSubscriptionRegistry clientSubscriptionRegistry0 = new ClientSubscriptionRegistry ( ) ; ClientRequest clientRequest0 = new ClientRequest ( "" , "" ) ; clientSubscriptionRegistry0 . remove ( 0L , clientRequest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEndpoint ( ) { return endpoint ; }
void test4 ( ) throws Throwable { ClientSubscriptionRegistry clientSubscriptionRegistry0 = new ClientSubscriptionRegistry ( ) ; ClientRequest clientRequest0 = new ClientRequest ( "" , "" ) ; clientSubscriptionRegistry0 . add ( 0L , clientRequest0 ) ; clientSubscriptionRegistry0 . remove ( 0L , clientRequest0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEndpoint ( ) { return endpoint ; }
void test5 ( ) throws Throwable { ClientSubscriptionRegistry clientSubscriptionRegistry0 = new ClientSubscriptionRegistry ( ) ; ClientRequest clientRequest0 = new ClientRequest ( "" , "" ) ; clientSubscriptionRegistry0 . add ( 0L , clientRequest0 ) ; ClientRequest clientRequest1 = new ClientRequest ( ) ; clientSubscriptionRegistry0 . remove ( 0L , clientRequest1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEndpoint ( ) { return endpoint ; }
void test0 ( ) throws Throwable { JerseyApplication jerseyApplication0 = new JerseyApplication ( ) ; Set < Class < ? > > set0 = jerseyApplication0 . getClasses ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return devices . size ( ) ; }
void test0 ( ) throws Throwable { Session session0 = new Session ( ) ; UUID uUID0 = session0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test1 ( ) throws Throwable { Session session0 = new Session ( ( UUID ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Session ( ) { }
void test2 ( ) throws Throwable { ProbesInfo probesInfo0 = new ProbesInfo ( ) ; ArrayList < Target > arrayList0 = probesInfo0 . getTargets ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < TargetDescription > getTargets ( ) { / / create copy of current state to avoid breaking on concurrent access etc . List < TargetDescription > targets = new ArrayList < TargetDescription > ( ) ; targets . addAll ( this . targets . values ( ) ) ; return targets ; }
void test3 ( ) throws Throwable { ProbesInfo probesInfo0 = new ProbesInfo ( ) ; ArrayList < Probe > arrayList0 = probesInfo0 . getProbes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ProbeDescription > getProbes ( ) { / / create copy of current state to avoid breaking on concurrent access etc . List < ProbeDescription > result = new ArrayList < ProbeDescription > ( probes . size ( ) ) ; result . addAll ( probes . values ( ) ) ; return result ; }
void test5 ( ) throws Throwable { ProbesInfo probesInfo0 = new ProbesInfo ( ) ; ArrayList < BaseMeasure > arrayList0 = probesInfo0 . getBaseMeasures ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList < BaseMeasure > getBaseMeasures ( ) { return baseMeasures ; }
void test0 ( ) throws Throwable { MeasurementValue measurementValue0 = new MeasurementValue ( ) ; measurementValue0 . setValue ( " ! E | - T@mEr ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBmid ( ) { return bmid ; }
void test1 ( ) throws Throwable { MeasurementValue measurementValue0 = new MeasurementValue ( "" , "" , ( Long ) ( - 1L ) ) ; String string0 = measurementValue0 . getBmid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBmid ( ) { return bmid ; }
void test2 ( ) throws Throwable { MeasurementValue measurementValue0 = new MeasurementValue ( "" , "" , ( Long ) ( - 1L ) ) ; measurementValue0 . setTimestamp ( ( Long ) ( - 1L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test3 ( ) throws Throwable { MeasurementValue measurementValue0 = new MeasurementValue ( "" , "" , ( Long ) ( - 1L ) ) ; Long long0 = measurementValue0 . getTimestamp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test4 ( ) throws Throwable { MeasurementValue measurementValue0 = new MeasurementValue ( ) ; String string0 = measurementValue0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test5 ( ) throws Throwable { MeasurementValue measurementValue0 = new MeasurementValue ( ) ; measurementValue0 . setBmid ( " ! E | - T@mEr ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test0 ( ) throws Throwable { BaseMeasure baseMeasure0 = new BaseMeasure ( "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" ) ; baseMeasure0 . setId ( "Y < yxBk2 : On [ jIl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTargetid ( ) { return targetid ; }
void test1 ( ) throws Throwable { BaseMeasure baseMeasure0 = new BaseMeasure ( "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" ) ; baseMeasure0 . setTargetid ( "Y < yxBk2 : On [ jIl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test2 ( ) throws Throwable { BaseMeasure baseMeasure0 = new BaseMeasure ( "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" ) ; baseMeasure0 . setDatatype ( "Y < yxBk2 : On [ jIl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test3 ( ) throws Throwable { BaseMeasure baseMeasure0 = new BaseMeasure ( ) ; String string0 = baseMeasure0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test4 ( ) throws Throwable { BaseMeasure baseMeasure0 = new BaseMeasure ( ) ; String string0 = baseMeasure0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test5 ( ) throws Throwable { BaseMeasure baseMeasure0 = new BaseMeasure ( ) ; String string0 = baseMeasure0 . getDatatype ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatatype ( ) { return datatype ; }
void test6 ( ) throws Throwable { BaseMeasure baseMeasure0 = new BaseMeasure ( "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" ) ; baseMeasure0 . setDescription ( "Y < yxBk2 : On [ jIl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatatype ( ) { return datatype ; }
void test7 ( ) throws Throwable { BaseMeasure baseMeasure0 = new BaseMeasure ( ) ; String string0 = baseMeasure0 . getTargetid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTargetid ( ) { return targetid ; }
void test8 ( ) throws Throwable { BaseMeasure baseMeasure0 = new BaseMeasure ( "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" ) ; baseMeasure0 . setName ( "Y < yxBk2 : On [ jIl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test9 ( ) throws Throwable { BaseMeasure baseMeasure0 = new BaseMeasure ( ) ; baseMeasure0 . setClas ( "C [ GN * 9E = f - MmTb ] . X" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test10 ( ) throws Throwable { BaseMeasure baseMeasure0 = new BaseMeasure ( " > 'g * ) WQvtSO` - | , 34O | " , " > 'g * ) WQvtSO` - | , 34O | " , " > 'g * ) WQvtSO` - | , 34O | " , " . 29 | %u" , "" , "" ) ; String string0 = baseMeasure0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDatatype ( ) { return datatype ; }
void test11 ( ) throws Throwable { BaseMeasure baseMeasure0 = new BaseMeasure ( "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" , "Y < yxBk2 : On [ jIl" ) ; String string0 = baseMeasure0 . getClas ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClas ( ) { return clas ; }
void test0 ( ) throws Throwable { Target target0 = new Target ( ) ; target0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test1 ( ) throws Throwable { Target target0 = new Target ( ) ; String string0 = target0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test2 ( ) throws Throwable { Target target0 = new Target ( ( String ) null , "" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test3 ( ) throws Throwable { Target target0 = new Target ( ) ; target0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test4 ( ) throws Throwable { Target target0 = new Target ( ) ; String string0 = target0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test5 ( ) throws Throwable { Target target0 = new Target ( ) ; String string0 = target0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test6 ( ) throws Throwable { Target target0 = new Target ( ) ; target0 . setId ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test0 ( ) throws Throwable { ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( ) ; ArrayList < Parameter > arrayList0 = probeConfiguration0 . getValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Value > getValues ( int first , int count , Value . SortKey sortKey , boolean ascending ) ; List < Value > getValues ( long start , long end , Long [ ] bmids , Value . SortKey sort , boolean asc ) ; int getValueCount ( ) ; ProbeDescription createProbeDescription ( Map < String , String > properties ) ; BMDescription createBMDescription ( Map < String , String > properties ) ; TargetDescription createTargetDescription ( Map < String , String > properties ) ; }
void test0 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; BM bM0 = new BM ( ) ; boolean boolean0 = availability0 . addBm ( bM0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean addBm ( BM bm ) { return bms . add ( bm ) ; }
void test1 ( ) throws Throwable { Availability availability0 = new Availability ( ) ; List < BM > list0 = availability0 . getBms ( ) ; availability0 . setBms ( list0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return devices . size ( ) ; }
void test0 ( ) throws Throwable { MeasurementHistory measurementHistory0 = new MeasurementHistory ( ) ; ArrayList < MeasurementValue > arrayList0 = measurementHistory0 . getValues ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Value > getValues ( int first , int count , Value . SortKey sortKey , boolean ascending ) ; List < Value > getValues ( long start , long end , Long [ ] bmids , Value . SortKey sort , boolean asc ) ; int getValueCount ( ) ; ProbeDescription createProbeDescription ( Map < String , String > properties ) ; BMDescription createBMDescription ( Map < String , String > properties ) ; TargetDescription createTargetDescription ( Map < String , String > properties ) ; }
void test1 ( ) throws Throwable { HistoryRequest historyRequest0 = new HistoryRequest ( ) ; Long long0 = new Long ( ( - 1597L ) ) ; historyRequest0 . setEnd ( long0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test2 ( ) throws Throwable { HistoryRequest historyRequest0 = new HistoryRequest ( ) ; ArrayList < Long > arrayList0 = historyRequest0 . getBms ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BMDesc > getBms ( ) { return bms ; }
void test0 ( ) throws Throwable { Parameter parameter0 = new Parameter ( "" , "" ) ; String string0 = parameter0 . getKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKey ( ) { return key ; }
void test1 ( ) throws Throwable { Parameter parameter0 = new Parameter ( "" , "" ) ; parameter0 . setKey ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKey ( ) { return key ; }
void test2 ( ) throws Throwable { Parameter parameter0 = new Parameter ( "" , "" ) ; String string0 = parameter0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test3 ( ) throws Throwable { Parameter parameter0 = new Parameter ( "" , "" ) ; parameter0 . setValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKey ( ) { return key ; }
void test4 ( ) throws Throwable { Parameter parameter0 = new Parameter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test0 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setBmDescription ( "FdyfLIaecZN'dWQQ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBmName ( ) { return bmName ; }
void test1 ( ) throws Throwable { BM bM0 = new BM ( ) ; String string0 = bM0 . getBmClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBmClass ( ) { return bmClass ; }
void test2 ( ) throws Throwable { BM bM0 = new BM ( ) ; long long0 = bM0 . getBmId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBmId ( ) { return bmId ; }
void test3 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setBmClass ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBmDescription ( ) { return bmDescription ; }
void test4 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setBmName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBmName ( ) { return bmName ; }
void test5 ( ) throws Throwable { BM bM0 = new BM ( ) ; bM0 . setBmId ( 1L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getBmId ( ) { return bmId ; }
void test6 ( ) throws Throwable { BM bM0 = new BM ( ) ; String string0 = bM0 . getBmDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBmDescription ( ) { return bmDescription ; }
void test7 ( ) throws Throwable { BM bM0 = new BM ( ) ; String string0 = bM0 . getBmName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBmName ( ) { return bmName ; }
void test0 ( ) throws Throwable { AvailabilityResource availabilityResource0 = new AvailabilityResource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { ClientRequest clientRequest0 = new ClientRequest ( ) ; clientRequest0 . setName ( "HQ : ( ( E | > DQlm9'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test1 ( ) throws Throwable { ClientRequest clientRequest0 = new ClientRequest ( ) ; clientRequest0 . setSession ( ( Session ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test2 ( ) throws Throwable { ClientRequest clientRequest0 = new ClientRequest ( ) ; String string0 = clientRequest0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test3 ( ) throws Throwable { ClientRequest clientRequest0 = new ClientRequest ( ) ; clientRequest0 . setEndpoint ( "HQ : ( ( E | > DQlm9'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test4 ( ) throws Throwable { ClientRequest clientRequest0 = new ClientRequest ( "HQ : ( ( E | > DQlm9'" , "HQ : ( ( E | > DQlm9'" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test5 ( ) throws Throwable { ClientRequest clientRequest0 = new ClientRequest ( ) ; String string0 = clientRequest0 . getEndpoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEndpoint ( ) { return endpoint ; }
void test6 ( ) throws Throwable { ClientRequest clientRequest0 = new ClientRequest ( ) ; Session session0 = clientRequest0 . getSession ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Session getSession ( ) { return session ; }
void test0 ( ) throws Throwable { Event event0 = new Event ( "" , "" ) ; String string0 = event0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test1 ( ) throws Throwable { Event event0 = new Event ( "" , "" ) ; event0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test2 ( ) throws Throwable { Event event0 = new Event ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test3 ( ) throws Throwable { Event event0 = new Event ( "" , "" ) ; event0 . setDescription ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test4 ( ) throws Throwable { Event event0 = new Event ( "" , "" ) ; String string0 = event0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test0 ( ) throws Throwable { FrameworkInfo frameworkInfo0 = new FrameworkInfo ( "" , "" ) ; String string0 = frameworkInfo0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test1 ( ) throws Throwable { FrameworkInfo frameworkInfo0 = new FrameworkInfo ( "" , "" ) ; frameworkInfo0 . setId ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test2 ( ) throws Throwable { FrameworkInfo frameworkInfo0 = new FrameworkInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test3 ( ) throws Throwable { FrameworkInfo frameworkInfo0 = new FrameworkInfo ( "" , "" ) ; String string0 = frameworkInfo0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test4 ( ) throws Throwable { FrameworkInfo frameworkInfo0 = new FrameworkInfo ( "" , "" ) ; frameworkInfo0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test0 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; probe0 . setId ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBmid ( ) { return bmid ; }
void test1 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; String string0 = probe0 . getBmid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBmid ( ) { return bmid ; }
void test2 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; String string0 = probe0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test3 ( ) throws Throwable { Probe probe0 = new Probe ( ( String ) null , "" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBmid ( ) { return bmid ; }
void test4 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; String string0 = probe0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test5 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; probe0 . setBmid ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getId ( ) { return dmDefinition . getId ( ) ; }
void test6 ( ) throws Throwable { Probe probe0 = new Probe ( ) ; probe0 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return dmDefinition . getName ( ) ; }
void test0 ( ) throws Throwable { BMValue bMValue0 = new BMValue ( ) ; Date date0 = bMValue0 . getTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return time ; }
void test1 ( ) throws Throwable { BMValue bMValue0 = new BMValue ( ) ; bMValue0 . setValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test2 ( ) throws Throwable { BMValue bMValue0 = new BMValue ( ) ; bMValue0 . setTime ( ( Date ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test3 ( ) throws Throwable { BMValue bMValue0 = new BMValue ( ) ; String string0 = bMValue0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test0 ( ) throws Throwable { SubscriptionRequest subscriptionRequest0 = new SubscriptionRequest ( ) ; subscriptionRequest0 . setInterval ( 172L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getInterval ( ) { return interval ; }
void test1 ( ) throws Throwable { SubscriptionRequest subscriptionRequest0 = new SubscriptionRequest ( ) ; long long0 = subscriptionRequest0 . getInterval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getInterval ( ) { return interval ; }
void test2 ( ) throws Throwable { ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent ( ) ; ProbeInformation probeInformation0 = configurableTestProbeAgent0 . getInformation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ProbeInformation getInformation ( ) ; / * * Called by the MFW components when a measurement is needed . * / BaseMeasure measure ( ) ; / * * start and stop a probe if supported * / void startProbe ( ) ; void stopProbe ( ) ; / * * Same as getConfiguration but used to set the values from the SAC . * / void setConfiguration ( Map < String , String > configuration ) ; Collection < ProbeConfiguration > getConfigurationParameters ( ) ; void init ( Properties properties ) ; }
void test0 ( ) throws Throwable { BaseMeasure baseMeasure0 = new BaseMeasure ( " - 4 ( wp / * K'V" ) ; long long0 = baseMeasure0 . getTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return time ; }
void test1 ( ) throws Throwable { BaseMeasure baseMeasure0 = new BaseMeasure ( " - 4 ( wp / * K'V" ) ; String string0 = baseMeasure0 . getMeasure ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMeasure ( ) { return measure ; }
void test1 ( ) throws Throwable { TestProbe3 testProbe3_0 = new TestProbe3 ( ) ; BaseMeasure baseMeasure0 = testProbe3_0 . measure ( ) ; MeasurementReport measurementReport0 = new MeasurementReport ( baseMeasure0 , ( ServerAgent ) null , ( ProbeInformation ) null , ( - 1074L ) , true , "sm ! 2 } pH { MELOT@r [ " ) ; long long0 = measurementReport0 . getSubscriptionId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMatchReference ( ) { return matchReference ; }
void test2 ( ) throws Throwable { TestProbe4 testProbe4_0 = new TestProbe4 ( ) ; BaseMeasure baseMeasure0 = testProbe4_0 . measure ( ) ; MeasurementReport measurementReport0 = new MeasurementReport ( baseMeasure0 , ( ServerAgent ) null , ( ProbeInformation ) null , ( - 2048L ) , false , "iwWs | `b" ) ; BaseMeasure baseMeasure1 = measurementReport0 . getMeasure ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMatchReference ( ) { return matchReference ; }
void test3 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( "SAC " , "SAC " , "SAC " , "SAC " , "SAC " , "WP$M" , 1516 , "WP$M" ) ; MeasurementReport measurementReport0 = new MeasurementReport ( ( BaseMeasure ) null , ( ServerAgent ) null , probeInformation0 , 100L , false , "WP$M" ) ; measurementReport0 . getServer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test4 ( ) throws Throwable { BaseMeasure baseMeasure0 = new BaseMeasure ( "" ) ; TestProbe4 testProbe4_0 = new TestProbe4 ( ) ; ProbeInformation probeInformation0 = testProbe4_0 . getInformation ( ) ; MeasurementReport measurementReport0 = new MeasurementReport ( baseMeasure0 , ( ServerAgent ) null , probeInformation0 , 0L , true , "" ) ; ProbeInformation probeInformation1 = measurementReport0 . getProbeInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMatchReference ( ) { return matchReference ; }
void test5 ( ) throws Throwable { TestProbe3 testProbe3_0 = new TestProbe3 ( ) ; BaseMeasure baseMeasure0 = testProbe3_0 . measure ( ) ; MeasurementReport measurementReport0 = new MeasurementReport ( baseMeasure0 , ( ServerAgent ) null , ( ProbeInformation ) null , ( - 1074L ) , true , "sm ! 2 } pH { MELOT@r [ " ) ; boolean boolean0 = measurementReport0 . isMatchReference ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test0 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , 469 , ( String ) null ) ; String string0 = probeInformation0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test1 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , 11 , ( String ) null ) ; probeInformation0 . getXmlRpcUrl ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrecision ( ) { return precision ; }
void test2 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( " * s_sAY$f8t\tIs ) 9qF@" , " * s_sAY$f8t\tIs ) 9qF@" , " * s_sAY$f8t\tIs ) 9qF@" , " * s_sAY$f8t\tIs ) 9qF@" , " * s_sAY$f8t\tIs ) 9qF@" , " * s_sAY$f8t\tIs ) 9qF@" , ( - 4 ) , " * s_sAY$f8t\tIs ) 9qF@" ) ; String string0 = probeInformation0 . getBmDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrecision ( ) { return precision ; }
void test3 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( "" , "" , "" , "" , "" , "" , 112 , "" ) ; String string0 = probeInformation0 . getMeasureURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test4 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( "" , "" , "" , "" , "" , "" , 112 , "" ) ; int int0 = probeInformation0 . getPrecision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrecision ( ) { return precision ; }
void test5 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( "fBy85 ! ^s^Bk [ ( a | = " , "fBy85 ! ^s^Bk [ ( a | = " , "fBy85 ! ^s^Bk [ ( a | = " , "fBy85 ! ^s^Bk [ ( a | = " , "fBy85 ! ^s^Bk [ ( a | = " , "~ ( `" , ( - 1151 ) , "fBy85 ! ^s^Bk [ ( a | = " ) ; String string0 = probeInformation0 . getBmClass ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getXmlRpcUrl ( ) { return xmlRpcUrl ; }
void test6 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( "" , "" , "" , "" , "" , "" , 112 , "" ) ; String string0 = probeInformation0 . getTargetName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrecision ( ) { return precision ; }
void test7 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , 469 , ( String ) null ) ; probeInformation0 . getTargetType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrecision ( ) { return precision ; }
void test8 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( "b } cg - Q ( Xpv_ = ( p ! 0" , "b } cg - Q ( Xpv_ = ( p ! 0" , "b } cg - Q ( Xpv_ = ( p ! 0" , "b } cg - Q ( Xpv_ = ( p ! 0" , "dj0 > e3bV#" , "b } cg - Q ( Xpv_ = ( p ! 0" , 1908 , "dj0 > e3bV#" ) ; String string0 = probeInformation0 . getProbeName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test9 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , 469 , ( String ) null ) ; probeInformation0 . getBmName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test10 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( "" , "" , "" , "" , "" , "" , 112 , "" ) ; ProbeInformation probeInformation1 = new ProbeInformation ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , "MFW : / / / / / " , 112 , ( String ) null ) ; boolean boolean0 = probeInformation1 . equals ( ( Object ) probeInformation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test11 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , 11 , ( String ) null ) ; boolean boolean0 = probeInformation0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrecision ( ) { return precision ; }
void test12 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( "fBy85 ! ^s^Bk [ ( a | = " , "fBy85 ! ^s^Bk [ ( a | = " , "fBy85 ! ^s^Bk [ ( a | = " , "fBy85 ! ^s^Bk [ ( a | = " , "fBy85 ! ^s^Bk [ ( a | = " , "~ ( `" , ( - 1151 ) , "fBy85 ! ^s^Bk [ ( a | = " ) ; boolean boolean0 = probeInformation0 . equals ( ( Object ) "~ ( `" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getXmlRpcUrl ( ) { return xmlRpcUrl ; }
void test13 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( "M" , "M" , "M" , "M" , "M" , ( String ) null , 437 , "M" ) ; ProbeInformation probeInformation1 = new ProbeInformation ( "M" , "M" , "M" , "M" , "M" , "M" , 0 , "M" ) ; boolean boolean0 = probeInformation0 . equals ( ( Object ) probeInformation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test14 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( " * s_sAY$ - 8t\u0001s ) 9qFo@" , " * s_sAY$ - 8t\u0001s ) 9qFo@" , " * s_sAY$ - 8t\u0001s ) 9qFo@" , " * s_sAY$ - 8t\u0001s ) 9qFo@" , " * s_sAY$ - 8t\u0001s ) 9qFo@" , " * s_sAY$ - 8t\u0001s ) 9qFo@" , ( - 34 ) , " * s_sAY$ - 8t\u0001s ) 9qFo@" ) ; ProbeInformation probeInformation1 = new ProbeInformation ( " * s_sAY$ - 8t\u0001s ) 9qFo@" , " * s_sAY$ - 8t\u0001s ) 9qFo@" , " * s_sAY$ - 8t\u0001s ) 9qFo@" , " * s_sAY$ - 8t\u0001s ) 9qFo@" , " * s_sAY$ - 8t\u0001s ) 9qFo@" , " * s_sAY$ - 8t\u0001s ) 9qFo@" , ( - 34 ) , " * s_sAY$ - 8t\u0001s ) 9qFo@" ) ; boolean boolean0 = probeInformation0 . equals ( ( Object ) probeInformation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test15 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( "b } cg - Q ( Xpv_ = ( p ! 0" , "b } cg - Q ( Xpv_ = ( p ! 0" , "b } cg - Q ( Xpv_ = ( p ! 0" , "b } cg - Q ( Xpv_ = ( p ! 0" , "dj0 > e3bV#" , "b } cg - Q ( Xpv_ = ( p ! 0" , 1908 , "dj0 > e3bV#" ) ; ProbeInformation probeInformation1 = new ProbeInformation ( "b } cg - Q ( Xpv_ = ( p ! 0" , "dj0 > e3bV#" , "dj0 > e3bV#" , "b } cg - Q ( Xpv_ = ( p ! 0" , "b } cg - Q ( Xpv_ = ( p ! 0" , "b } cg - Q ( Xpv_ = ( p ! 0" , 1908 , "b } cg - Q ( Xpv_ = ( p ! 0" ) ; boolean boolean0 = probeInformation0 . equals ( ( Object ) probeInformation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test16 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , "MFW : / / / / / " , 112 , ( String ) null ) ; ProbeInformation probeInformation1 = new ProbeInformation ( ( String ) null , ( String ) null , ( String ) null , "" , "" , ( String ) null , 112 , "" ) ; boolean boolean0 = probeInformation0 . equals ( ( Object ) probeInformation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test17 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( "b } cg - Q ( Xpv_ = ( p ! 0" , "b } cg - Q ( Xpv_ = ( p ! 0" , "b } cg - Q ( Xpv_ = ( p ! 0" , "b } cg - Q ( Xpv_ = ( p ! 0" , "dj0 > e3bV#" , "b } cg - Q ( Xpv_ = ( p ! 0" , 1908 , "dj0 > e3bV#" ) ; ProbeInformation probeInformation1 = new ProbeInformation ( "b } cg - Q ( Xpv_ = ( p ! 0" , "b } cg - Q ( Xpv_ = ( p ! 0" , "b } cg - Q ( Xpv_ = ( p ! 0" , "b } cg - Q ( Xpv_ = ( p ! 0" , "b } cg - Q ( Xpv_ = ( p ! 0" , "b } cg - Q ( Xpv_ = ( p ! 0" , 1908 , "b } cg - Q ( Xpv_ = ( p ! 0" ) ; boolean boolean0 = probeInformation1 . equals ( ( Object ) probeInformation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getXmlRpcUrl ( ) { return xmlRpcUrl ; }
void test18 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , 1864 , ( String ) null ) ; ProbeInformation probeInformation1 = new ProbeInformation ( ( String ) null , ( String ) null , ( String ) null , " - ] \"ux , KOd'cv + lx : Y" , ( String ) null , ( String ) null , 1864 , " - ] \"ux , KOd'cv + lx : Y" ) ; boolean boolean0 = probeInformation0 . equals ( ( Object ) probeInformation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Value value1 = ( Value ) o ; if ( precision ! = value1 . precision ) return false ; if ( bm ! = null ? ! bm . equals ( value1 . bm ) : value1 . bm ! = null ) return false ; if ( time ! = null ? ! time . equals ( value1 . time ) : value1 . time ! = null ) return false ; if ( value ! = null ? ! value . equals ( value1 . value ) : value1 . value ! = null ) return false ; if ( subscriptionId ! = value1 . subscriptionId ) return false ; return true ; }
void test19 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( " * s_sAY$f8t\tIs ) 9qF@" , " * s_sAY$f8t\tIs ) 9qF@" , " * s_sAY$f8t\tIs ) 9qF@" , " * s_sAY$f8t\tIs ) 9qF@" , " * s_sAY$f8t\tIs ) 9qF@" , " * s_sAY$f8t\tIs ) 9qF@" , ( - 4 ) , " * s_sAY$f8t\tIs ) 9qF@" ) ; ProbeInformation probeInformation1 = new ProbeInformation ( " * s_sAY$f8t\tIs ) 9qF@" , " * s_sAY$f8t\tIs ) 9qF@" , " * s_sAY$f8t\tIs ) 9qF@" , "2B ! B" , " * s_sAY$f8t\tIs ) 9qF@" , " * s_sAY$f8t\tIs ) 9qF@" , ( - 4 ) , "2B ! B" ) ; boolean boolean0 = probeInformation0 . equals ( ( Object ) probeInformation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test20 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , 1864 , ( String ) null ) ; ProbeInformation probeInformation1 = new ProbeInformation ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , 1864 , ( String ) null ) ; boolean boolean0 = probeInformation1 . equals ( ( Object ) probeInformation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrecision ( ) { return precision ; }
void test21 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( "h1^n ] LA4K : + - 9B , " , "h1^n ] LA4K : + - 9B , " , "h1^n ] LA4K : + - 9B , " , "h1^n ] LA4K : + - 9B , " , "h1^n ] LA4K : + - 9B , " , "h1^n ] LA4K : + - 9B , " , 379 , "h1^n ] LA4K : + - 9B , " ) ; ProbeInformation probeInformation1 = new ProbeInformation ( "h1^n ] LA4K : + - 9B , " , "h1^n ] LA4K : + - 9B , " , "h1^n ] LA4K : + - 9B , " , "h1^n ] LA4K : + - 9B , " , "h1^n ] LA4K : + - 9B , " , " { ; EOY8T8m & qW & " , 379 , "h1^n ] LA4K : + - 9B , " ) ; boolean boolean0 = probeInformation0 . equals ( ( Object ) probeInformation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test22 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( "M" , "M" , "M" , "M" , "M" , ( String ) null , 437 , "M" ) ; ProbeInformation probeInformation1 = new ProbeInformation ( "M" , "M" , "M" , "M" , "M" , "M" , 437 , ( String ) null ) ; boolean boolean0 = probeInformation0 . equals ( ( Object ) probeInformation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test23 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( "fBy85 ! ^s^Bk [ ( a | = " , "fBy85 ! ^s^Bk [ ( a | = " , "fBy85 ! ^s^Bk [ ( a | = " , "fBy85 ! ^s^Bk [ ( a | = " , "fBy85 ! ^s^Bk [ ( a | = " , "~ ( `" , ( - 1151 ) , "fBy85 ! ^s^Bk [ ( a | = " ) ; ProbeInformation probeInformation1 = new ProbeInformation ( "~ ( `" , "fBy85 ! ^s^Bk [ ( a | = " , "fBy85 ! ^s^Bk [ ( a | = " , "fBy85 ! ^s^Bk [ ( a | = " , "fBy85 ! ^s^Bk [ ( a | = " , "~ ( `" , ( - 1151 ) , "fBy85 ! ^s^Bk [ ( a | = " ) ; boolean boolean0 = probeInformation0 . equals ( ( Object ) probeInformation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test24 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , 469 , ( String ) null ) ; ProbeInformation probeInformation1 = new ProbeInformation ( "t6" , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , 469 , ( String ) null ) ; boolean boolean0 = probeInformation0 . equals ( ( Object ) probeInformation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test25 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( "~ ( `" , "fBy85 ! ^s^Bk [ ( a | = " , "~ ( `" , "~ ( `" , "~ ( `" , "~ ( `" , ( - 1151 ) , "~ ( `" ) ; ProbeInformation probeInformation1 = new ProbeInformation ( "~ ( `" , "~ ( `" , "~ ( `" , "~ ( `" , "~ ( `" , "~ ( `" , ( - 1151 ) , "~ ( `" ) ; boolean boolean0 = probeInformation0 . equals ( ( Object ) probeInformation1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test26 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( String ) null , 1173 , ( String ) null ) ; int int0 = probeInformation0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result = bm ! = null ? bm . hashCode ( ) : 0 ; result = 31 * result + precision ; result = 31 * result + ( value ! = null ? value . hashCode ( ) : 0 ) ; result = 31 * result + ( time ! = null ? time . hashCode ( ) : 0 ) ; result = 31 * result + subscriptionId . hashCode ( ) ; return result ; }
void test27 ( ) throws Throwable { ProbeInformation probeInformation0 = new ProbeInformation ( "sgWRrqg ? xPA | H" , "sgWRrqg ? xPA | H" , "sgWRrqg ? xPA | H" , "sgWRrqg ? xPA | H" , "sgWRrqg ? xPA | H" , "sgWRrqg ? xPA | H" , 1173 , "sgWRrqg ? xPA | H" ) ; int int0 = probeInformation0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result = bm ! = null ? bm . hashCode ( ) : 0 ; result = 31 * result + precision ; result = 31 * result + ( value ! = null ? value . hashCode ( ) : 0 ) ; result = 31 * result + ( time ! = null ? time . hashCode ( ) : 0 ) ; result = 31 * result + subscriptionId . hashCode ( ) ; return result ; }
void test0 ( ) throws Throwable { ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent ( ) ; BaseMeasure baseMeasure0 = configurableTestProbeAgent0 . measure ( ) ; MeasurementResponse measurementResponse0 = new MeasurementResponse ( baseMeasure0 , ( ServerAgent ) null , ( ProbeInformation ) null , 3295 , ( long ) 3295 ) ; int int0 = measurementResponse0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result = bm ! = null ? bm . hashCode ( ) : 0 ; result = 31 * result + precision ; result = 31 * result + ( value ! = null ? value . hashCode ( ) : 0 ) ; result = 31 * result + ( time ! = null ? time . hashCode ( ) : 0 ) ; result = 31 * result + subscriptionId . hashCode ( ) ; return result ; }
void test3 ( ) throws Throwable { ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent ( ) ; BaseMeasure baseMeasure0 = configurableTestProbeAgent0 . measure ( ) ; MeasurementResponse measurementResponse0 = new MeasurementResponse ( baseMeasure0 , ( ServerAgent ) null , ( ProbeInformation ) null , 1149 , ( long ) 1149 ) ; measurementResponse0 . getProbeInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test4 ( ) throws Throwable { ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent ( ) ; BaseMeasure baseMeasure0 = configurableTestProbeAgent0 . measure ( ) ; ProbeInformation probeInformation0 = configurableTestProbeAgent0 . getInformation ( ) ; MeasurementResponse measurementResponse0 = new MeasurementResponse ( baseMeasure0 , ( ServerAgent ) null , probeInformation0 , 1149 , ( long ) 1149 ) ; measurementResponse0 . server ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test5 ( ) throws Throwable { ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent ( ) ; BaseMeasure baseMeasure0 = configurableTestProbeAgent0 . measure ( ) ; ProbeInformation probeInformation0 = configurableTestProbeAgent0 . getInformation ( ) ; MeasurementResponse measurementResponse0 = new MeasurementResponse ( baseMeasure0 , ( ServerAgent ) null , probeInformation0 , 1149 , ( long ) 1149 ) ; BaseMeasure baseMeasure1 = measurementResponse0 . value ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test6 ( ) throws Throwable { ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent ( ) ; BaseMeasure baseMeasure0 = configurableTestProbeAgent0 . measure ( ) ; MeasurementResponse measurementResponse0 = new MeasurementResponse ( baseMeasure0 , ( ServerAgent ) null , ( ProbeInformation ) null , 1149 , ( long ) 1149 ) ; int int0 = measurementResponse0 . precision ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test7 ( ) throws Throwable { TestProbe2 testProbe2_0 = new TestProbe2 ( ) ; BaseMeasure baseMeasure0 = testProbe2_0 . measure ( ) ; MeasurementResponse measurementResponse0 = new MeasurementResponse ( baseMeasure0 , ( ServerAgent ) null , ( ProbeInformation ) null , 1321 , ( long ) 1321 ) ; long long0 = measurementResponse0 . getSubscriptionId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int precision ( ) { return precision ; }
void test8 ( ) throws Throwable { ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent ( ) ; BaseMeasure baseMeasure0 = configurableTestProbeAgent0 . measure ( ) ; TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode ( ) ; ProbeInformation probeInformation0 = testProbeWithCompareMode0 . getInformation ( ) ; MeasurementResponse measurementResponse0 = new MeasurementResponse ( baseMeasure0 , ( ServerAgent ) null , probeInformation0 , 1149 , ( long ) 1149 ) ; MeasurementResponse measurementResponse1 = new MeasurementResponse ( baseMeasure0 , ( ServerAgent ) null , ( ProbeInformation ) null , 1149 , ( long ) 1149 ) ; boolean boolean0 = measurementResponse0 . equals ( ( Object ) measurementResponse1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test9 ( ) throws Throwable { TestProbe3 testProbe3_0 = new TestProbe3 ( ) ; BaseMeasure baseMeasure0 = testProbe3_0 . measure ( ) ; TestProbe1 testProbe1_0 = new TestProbe1 ( ) ; ProbeInformation probeInformation0 = testProbe1_0 . getInformation ( ) ; MeasurementResponse measurementResponse0 = new MeasurementResponse ( baseMeasure0 , ( ServerAgent ) null , probeInformation0 , 18 , ( long ) 18 ) ; boolean boolean0 = measurementResponse0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int precision ( ) { return precision ; }
void test10 ( ) throws Throwable { TestProbe2 testProbe2_0 = new TestProbe2 ( ) ; BaseMeasure baseMeasure0 = testProbe2_0 . measure ( ) ; MeasurementResponse measurementResponse0 = new MeasurementResponse ( baseMeasure0 , ( ServerAgent ) null , ( ProbeInformation ) null , 1321 , ( long ) 1321 ) ; boolean boolean0 = measurementResponse0 . equals ( ( Object ) "0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int precision ( ) { return precision ; }
void test11 ( ) throws Throwable { ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent ( ) ; BaseMeasure baseMeasure0 = configurableTestProbeAgent0 . measure ( ) ; MeasurementResponse measurementResponse0 = new MeasurementResponse ( baseMeasure0 , ( ServerAgent ) null , ( ProbeInformation ) null , 1149 , ( long ) 1149 ) ; MeasurementResponse measurementResponse1 = new MeasurementResponse ( baseMeasure0 , ( ServerAgent ) null , ( ProbeInformation ) null , 1149 , ( long ) 1149 ) ; boolean boolean0 = measurementResponse0 . equals ( ( Object ) measurementResponse1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test12 ( ) throws Throwable { ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig ( 2614 , "'ddn_G0 > bz = + HRt" , 2614 , 2614 , 2614 ) ; XmlRpcServerClient xmlRpcServerClient0 = ( XmlRpcServerClient ) probeAgentConfig0 . getDestination ( ) ; TestProbe2 testProbe2_0 = new TestProbe2 ( ) ; ProbeInformation probeInformation0 = testProbe2_0 . getInformation ( ) ; MeasurementResponse measurementResponse0 = new MeasurementResponse ( ( BaseMeasure ) null , ( ServerAgent ) xmlRpcServerClient0 , probeInformation0 , 2614 , ( long ) 2614 ) ; int int0 = measurementResponse0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result = bm ! = null ? bm . hashCode ( ) : 0 ; result = 31 * result + precision ; result = 31 * result + ( value ! = null ? value . hashCode ( ) : 0 ) ; result = 31 * result + ( time ! = null ? time . hashCode ( ) : 0 ) ; result = 31 * result + subscriptionId . hashCode ( ) ; return result ; }
void test0 ( ) throws Throwable { UnsubscriptionRequest unsubscriptionRequest0 = new UnsubscriptionRequest ( ( ServerAgent ) null , "" , 926L ) ; unsubscriptionRequest0 . getServer ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test1 ( ) throws Throwable { UnsubscriptionRequest unsubscriptionRequest0 = new UnsubscriptionRequest ( ( ServerAgent ) null , "" , 926L ) ; long long0 = unsubscriptionRequest0 . getSubscriptionId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test2 ( ) throws Throwable { UnsubscriptionRequest unsubscriptionRequest0 = new UnsubscriptionRequest ( ( ServerAgent ) null , "" , 926L ) ; String string0 = unsubscriptionRequest0 . getMeasureURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test2 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; TestProbeActivator testProbeActivator0 = new TestProbeActivator ( properties0 ) ; Map < Integer , Probe > map0 = testProbeActivator0 . getProbes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ProbeDescription > getProbes ( ) { / / create copy of current state to avoid breaking on concurrent access etc . List < ProbeDescription > result = new ArrayList < ProbeDescription > ( probes . size ( ) ) ; result . addAll ( probes . values ( ) ) ; return result ; }
void test5 ( ) throws Throwable { ConfigurableTestProbeActivator configurableTestProbeActivator0 = new ConfigurableTestProbeActivator ( ( Properties ) null ) ; Collection < Properties > collection0 = configurableTestProbeActivator0 . getProbeProperties ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < Properties > getProbeProperties ( ) { return probeProperties ; }
void test6 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; TestProbeActivator testProbeActivator0 = new TestProbeActivator ( properties0 ) ; properties0 . setProperty ( "test . probe1 . test . 8obe6 - 1 . " , "test . probe1 . test . 8obe6 - 1 . " ) ; Properties properties1 = testProbeActivator0 . configSubSetFor ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test7 ( ) throws Throwable { Properties properties0 = new Properties ( ) ; TestProbeActivator testProbeActivator0 = new TestProbeActivator ( properties0 ) ; properties0 . setProperty ( "test . probe1 . test . 8obe6 - 1 . " , "test . probe1 . test . 8obe6 - 1 . " ) ; ProbeInformation probeInformation0 = testProbeActivator0 . getProbeInfo ( ( - 39 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrecision ( ) { return precision ; }
void test0 ( ) throws Throwable { EventType eventType0 = EventType . NO_VALUE_FOR_BM ; ProbeEvent probeEvent0 = new ProbeEvent ( ( ServerAgent ) null , eventType0 , "" , "" , 0L ) ; long long0 = probeEvent0 . getSubscriptionId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test1 ( ) throws Throwable { EventType eventType0 = EventType . NO_VALUE_FOR_BM ; ProbeEvent probeEvent0 = new ProbeEvent ( ( ServerAgent ) null , eventType0 , "" , "" , 0L ) ; long long0 = probeEvent0 . getTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getTime ( ) { return time ; }
void test2 ( ) throws Throwable { EventType eventType0 = EventType . NO_VALUE_FOR_BM ; ProbeEvent probeEvent0 = new ProbeEvent ( ( ServerAgent ) null , eventType0 , "" , "" , 0L ) ; EventType eventType1 = probeEvent0 . getEventType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" EventType getEventType ( ) { return type ; }
void test3 ( ) throws Throwable { EventType eventType0 = EventType . NO_VALUE_FOR_BM ; ProbeEvent probeEvent0 = new ProbeEvent ( ( ServerAgent ) null , eventType0 , "" , "" , 0L ) ; String string0 = probeEvent0 . getSource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSource ( ) { return source ; }
void test4 ( ) throws Throwable { EventType eventType0 = EventType . PROBE_HUNG ; ProbeEvent probeEvent0 = new ProbeEvent ( ( ServerAgent ) null , eventType0 , "" , "" , 1L ) ; probeEvent0 . getServerAgent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test5 ( ) throws Throwable { EventType eventType0 = EventType . NO_VALUE_FOR_BM ; ProbeEvent probeEvent0 = new ProbeEvent ( ( ServerAgent ) null , eventType0 , " | z ! # | + [ lNO / MPJ``" , "paL@Vd$n'q + A ) mMj" , ( long ) 13 ) ; String string0 = probeEvent0 . getMessage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test0 ( ) throws Throwable { MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "" , ( Probe ) null ) ; measurementRequest0 . setLastMeasureTime ( ( - 6L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test1 ( ) throws Throwable { MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "" , ( Probe ) null ) ; measurementRequest0 . getProbe ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getInterval ( ) { return interval ; }
void test2 ( ) throws Throwable { MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "" , ( Probe ) null ) ; long long0 = measurementRequest0 . getSubscriptionId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getInterval ( ) { return interval ; }
void test3 ( ) throws Throwable { HTTPProbeAgent hTTPProbeAgent0 = new HTTPProbeAgent ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "" , ( Probe ) hTTPProbeAgent0 , ( long ) ( - 487 ) ) ; long long0 = measurementRequest0 . getLastMeasureTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test4 ( ) throws Throwable { HTTPProbeAgent hTTPProbeAgent0 = new HTTPProbeAgent ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "" , ( Probe ) hTTPProbeAgent0 , ( long ) ( - 487 ) ) ; long long0 = measurementRequest0 . getInterval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getSubscriptionId ( ) { return subscriptionId ; }
void test5 ( ) throws Throwable { MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "" , ( Probe ) null ) ; String string0 = measurementRequest0 . getMeasureURI ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test7 ( ) throws Throwable { MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "" , ( Probe ) null ) ; String string0 = measurementRequest0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLastMeasureTime ( ) { return lastMeasureTime ; }
void test8 ( ) throws Throwable { HTTPProbeAgent hTTPProbeAgent0 = new HTTPProbeAgent ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "" , ( Probe ) hTTPProbeAgent0 , ( long ) ( - 487 ) ) ; boolean boolean0 = measurementRequest0 . equals ( ( Object ) " - 487" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLastMeasureTime ( ) { return lastMeasureTime ; }
void test9 ( ) throws Throwable { TestProbe1 testProbe1_0 = new TestProbe1 ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , ( String ) null , ( Probe ) testProbe1_0 , ( - 1L ) , ( - 4L ) ) ; boolean boolean0 = measurementRequest0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test10 ( ) throws Throwable { TestProbe1 testProbe1_0 = new TestProbe1 ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , ( String ) null , ( Probe ) testProbe1_0 , ( - 1L ) , ( - 1L ) ) ; MeasurementRequest measurementRequest1 = new MeasurementRequest ( ( ServerAgent ) null , ( String ) null , ( Probe ) testProbe1_0 ) ; boolean boolean0 = measurementRequest0 . equals ( ( Object ) measurementRequest1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLastMeasureTime ( ) { return lastMeasureTime ; }
void test11 ( ) throws Throwable { TestProbe1 testProbe1_0 = new TestProbe1 ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , ( String ) null , ( Probe ) testProbe1_0 , ( - 1L ) , ( - 4L ) ) ; MeasurementRequest measurementRequest1 = new MeasurementRequest ( ( ServerAgent ) null , ( String ) null , ( Probe ) testProbe1_0 , ( long ) 474 ) ; boolean boolean0 = measurementRequest0 . equals ( ( Object ) measurementRequest1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLastMeasureTime ( ) { return lastMeasureTime ; }
void test12 ( ) throws Throwable { TestProbe1 testProbe1_0 = new TestProbe1 ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , ( String ) null , ( Probe ) testProbe1_0 , ( - 1L ) , ( - 4L ) ) ; MeasurementRequest measurementRequest1 = new MeasurementRequest ( ( ServerAgent ) null , ( String ) null , ( Probe ) testProbe1_0 ) ; boolean boolean0 = measurementRequest0 . equals ( ( Object ) measurementRequest1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test13 ( ) throws Throwable { TestProbe1 testProbe1_0 = new TestProbe1 ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , ( String ) null , ( Probe ) testProbe1_0 , ( - 1L ) , ( - 1L ) ) ; int int0 = measurementRequest0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getLastMeasureTime ( ) { return lastMeasureTime ; }
void test14 ( ) throws Throwable { ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig ( 3 , " zAx : tH7 + - #" , 3 , 3 , 3 ) ; XmlRpcServerClient xmlRpcServerClient0 = ( XmlRpcServerClient ) probeAgentConfig0 . getDestination ( ) ; ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) xmlRpcServerClient0 , " zAx : tH7 + - #" , ( Probe ) configurableTestProbeAgent0 , ( long ) 3 ) ; int int0 = measurementRequest0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result = bm ! = null ? bm . hashCode ( ) : 0 ; result = 31 * result + precision ; result = 31 * result + ( value ! = null ? value . hashCode ( ) : 0 ) ; result = 31 * result + ( time ! = null ? time . hashCode ( ) : 0 ) ; result = 31 * result + subscriptionId . hashCode ( ) ; return result ; }
void test1 ( ) throws Throwable { ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig ( 30 , "w" , 30 , 30 , 30 ) ; XmlRpcServerClient xmlRpcServerClient0 = ( XmlRpcServerClient ) probeAgentConfig0 . getDestination ( ) ; TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) xmlRpcServerClient0 , "w" , ( Probe ) testProbeWithCompareMode0 ) ; BlackboardImpl blackboardImpl0 = new BlackboardImpl ( ) ; MeasurementTask measurementTask0 = new MeasurementTask ( measurementRequest0 , ( Blackboard ) blackboardImpl0 ) ; FutureTask < Long > futureTask0 = new FutureTask < Long > ( ( Runnable ) measurementTask0 , ( Long ) null ) ; WatchedTask watchedTask0 = new WatchedTask ( ( Future ) futureTask0 , measurementTask0 , ( Map < Long , WatchedTask > ) null , false , ( ServerAgent ) xmlRpcServerClient0 ) ; ProbeInformation probeInformation0 = watchedTask0 . getProbeInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPrecision ( ) { return precision ; }
void test3 ( ) throws Throwable { TestProbe1 testProbe1_0 = new TestProbe1 ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "dcaDh : L { lm" , ( Probe ) testProbe1_0 , 692L ) ; BlackboardImpl blackboardImpl0 = new BlackboardImpl ( ) ; MeasurementTask measurementTask0 = new MeasurementTask ( measurementRequest0 , ( Blackboard ) blackboardImpl0 ) ; HashMap < Long , WatchedTask > hashMap0 = new HashMap < Long , WatchedTask > ( ) ; WatchedTask watchedTask0 = new WatchedTask ( ( Future ) null , measurementTask0 , ( Map < Long , WatchedTask > ) hashMap0 , true , ( ServerAgent ) null ) ; MeasurementTask measurementTask1 = watchedTask0 . getMeasurementTask ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRunningTime ( ) { log . debug ( "Running : " + running ) ; if ( ! running ) { return 0 ; } long now = System . currentTimeMillis ( ) ; return now - startTime ; }
void test4 ( ) throws Throwable { ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig ( 30 , "w" , 30 , 30 , 30 ) ; XmlRpcServerClient xmlRpcServerClient0 = ( XmlRpcServerClient ) probeAgentConfig0 . getDestination ( ) ; TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) xmlRpcServerClient0 , "w" , ( Probe ) testProbeWithCompareMode0 ) ; BlackboardImpl blackboardImpl0 = new BlackboardImpl ( ) ; MeasurementTask measurementTask0 = new MeasurementTask ( measurementRequest0 , ( Blackboard ) blackboardImpl0 ) ; FutureTask < Long > futureTask0 = new FutureTask < Long > ( ( Runnable ) measurementTask0 , ( Long ) null ) ; WatchedTask watchedTask0 = new WatchedTask ( ( Future ) futureTask0 , measurementTask0 , ( Map < Long , WatchedTask > ) null , false , ( ServerAgent ) xmlRpcServerClient0 ) ; long long0 = watchedTask0 . getRunningTime ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRunningTime ( ) { log . debug ( "Running : " + running ) ; if ( ! running ) { return 0 ; } long now = System . currentTimeMillis ( ) ; return now - startTime ; }
void test5 ( ) throws Throwable { ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig ( 30 , "w" , 30 , 30 , 30 ) ; XmlRpcServerClient xmlRpcServerClient0 = ( XmlRpcServerClient ) probeAgentConfig0 . getDestination ( ) ; TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) xmlRpcServerClient0 , "w" , ( Probe ) testProbeWithCompareMode0 ) ; BlackboardImpl blackboardImpl0 = new BlackboardImpl ( ) ; MeasurementTask measurementTask0 = new MeasurementTask ( measurementRequest0 , ( Blackboard ) blackboardImpl0 ) ; FutureTask < Long > futureTask0 = new FutureTask < Long > ( ( Runnable ) measurementTask0 , ( Long ) null ) ; WatchedTask watchedTask0 = new WatchedTask ( ( Future ) futureTask0 , measurementTask0 , ( Map < Long , WatchedTask > ) null , true , ( ServerAgent ) xmlRpcServerClient0 ) ; watchedTask0 . checkState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRunningTime ( ) { log . debug ( "Running : " + running ) ; if ( ! running ) { return 0 ; } long now = System . currentTimeMillis ( ) ; return now - startTime ; }
void test6 ( ) throws Throwable { ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig ( 30 , "w" , 30 , 30 , 30 ) ; XmlRpcServerClient xmlRpcServerClient0 = ( XmlRpcServerClient ) probeAgentConfig0 . getDestination ( ) ; TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) xmlRpcServerClient0 , "w" , ( Probe ) testProbeWithCompareMode0 ) ; BlackboardImpl blackboardImpl0 = new BlackboardImpl ( ) ; MeasurementTask measurementTask0 = new MeasurementTask ( measurementRequest0 , ( Blackboard ) blackboardImpl0 ) ; FutureTask < Long > futureTask0 = new FutureTask < Long > ( ( Runnable ) measurementTask0 , ( Long ) null ) ; WatchedTask watchedTask0 = new WatchedTask ( ( Future ) futureTask0 , measurementTask0 , ( Map < Long , WatchedTask > ) null , false , ( ServerAgent ) xmlRpcServerClient0 ) ; watchedTask0 . checkState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRunningTime ( ) { log . debug ( "Running : " + running ) ; if ( ! running ) { return 0 ; } long now = System . currentTimeMillis ( ) ; return now - startTime ; }
void test7 ( ) throws Throwable { System . setCurrentTimeMillis ( 692L ) ; TestProbe1 testProbe1_0 = new TestProbe1 ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "dcaDh : L { lm" , ( Probe ) testProbe1_0 , 692L ) ; BlackboardImpl blackboardImpl0 = new BlackboardImpl ( ) ; MeasurementTask measurementTask0 = new MeasurementTask ( measurementRequest0 , ( Blackboard ) blackboardImpl0 ) ; HashMap < Long , WatchedTask > hashMap0 = new HashMap < Long , WatchedTask > ( ) ; WatchedTask watchedTask0 = new WatchedTask ( ( Future ) null , measurementTask0 , ( Map < Long , WatchedTask > ) hashMap0 , true , ( ServerAgent ) null ) ; measurementTask0 . run ( ) ; watchedTask0 . checkState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRunningTime ( ) { log . debug ( "Running : " + running ) ; if ( ! running ) { return 0 ; } long now = System . currentTimeMillis ( ) ; return now - startTime ; }
void test1 ( ) throws Throwable { MeasurementPluginActivator measurementPluginActivator0 = new MeasurementPluginActivator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MeasurementPluginActivator ( ) { super ( log ) ; }
void test1 ( ) throws Throwable { HTTPProbeAgent hTTPProbeAgent0 = new HTTPProbeAgent ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "^ ] J" , ( Probe ) hTTPProbeAgent0 , ( - 853L ) , ( - 853L ) ) ; BlackboardImpl blackboardImpl0 = new BlackboardImpl ( ) ; MeasurementTask measurementTask0 = new MeasurementTask ( measurementRequest0 , ( Blackboard ) blackboardImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRunning ( ) { return running ; }
void test2 ( ) throws Throwable { TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "\"@rX3q ; HZaJE / & bKO" , ( Probe ) testProbeWithCompareMode0 , 302L ) ; BlackboardImpl blackboardImpl0 = new BlackboardImpl ( ) ; MeasurementTask measurementTask0 = new MeasurementTask ( measurementRequest0 , ( Blackboard ) blackboardImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRunning ( ) { return running ; }
void test3 ( ) throws Throwable { HTTPProbeAgent hTTPProbeAgent0 = new HTTPProbeAgent ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "^ ] J" , ( Probe ) hTTPProbeAgent0 , ( - 853L ) , ( - 853L ) ) ; BlackboardImpl blackboardImpl0 = new BlackboardImpl ( ) ; MeasurementTask measurementTask0 = new MeasurementTask ( measurementRequest0 , ( Blackboard ) blackboardImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRunning ( ) { return running ; }
void test4 ( ) throws Throwable { TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "\"Zz ( { gKjR_t" , ( Probe ) testProbeWithCompareMode0 , ( - 1L ) , ( - 1L ) ) ; BlackboardImpl blackboardImpl0 = new BlackboardImpl ( ) ; MeasurementTask measurementTask0 = new MeasurementTask ( measurementRequest0 , ( Blackboard ) blackboardImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRunning ( ) { return running ; }
void test5 ( ) throws Throwable { TestProbe2 testProbe2_0 = new TestProbe2 ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "" , ( Probe ) testProbe2_0 ) ; BlackboardImpl blackboardImpl0 = new BlackboardImpl ( ) ; MeasurementTask measurementTask0 = new MeasurementTask ( measurementRequest0 , ( Blackboard ) blackboardImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRunning ( ) { return running ; }
void test6 ( ) throws Throwable { TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "\"@rX3q ; HZaJE / & bKO" , ( Probe ) testProbeWithCompareMode0 , 302L ) ; BlackboardImpl blackboardImpl0 = new BlackboardImpl ( ) ; MeasurementTask measurementTask0 = new MeasurementTask ( measurementRequest0 , ( Blackboard ) blackboardImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRunning ( ) { return running ; }
void test7 ( ) throws Throwable { TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "\"Zz ( { gKjR_t" , ( Probe ) testProbeWithCompareMode0 , ( - 1L ) , ( - 1L ) ) ; BlackboardImpl blackboardImpl0 = new BlackboardImpl ( ) ; MeasurementTask measurementTask0 = new MeasurementTask ( measurementRequest0 , ( Blackboard ) blackboardImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRunning ( ) { return running ; }
void test8 ( ) throws Throwable { TestProbe2 testProbe2_0 = new TestProbe2 ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "" , ( Probe ) testProbe2_0 ) ; BlackboardImpl blackboardImpl0 = new BlackboardImpl ( ) ; MeasurementTask measurementTask0 = new MeasurementTask ( measurementRequest0 , ( Blackboard ) blackboardImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRunning ( ) { return running ; }
void test9 ( ) throws Throwable { TestProbe1 testProbe1_0 = new TestProbe1 ( ) ; MeasurementRequest measurementRequest0 = new MeasurementRequest ( ( ServerAgent ) null , "l8^m4eL'5 [ " , ( Probe ) testProbe1_0 , 107L ) ; BlackboardImpl blackboardImpl0 = new BlackboardImpl ( ) ; MeasurementTask measurementTask0 = new MeasurementTask ( measurementRequest0 , ( Blackboard ) blackboardImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRunning ( ) { return running ; }
void test1 ( ) throws Throwable { ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig ( ) ; PAXmlRpcPluginActivator pAXmlRpcPluginActivator0 = new PAXmlRpcPluginActivator ( probeAgentConfig0 ) ; ProbeAgentImpl probeAgentImpl0 = pAXmlRpcPluginActivator0 . getProbeAgent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ProbeAgentImpl getProbeAgent ( ) { return probe ; }
void test1 ( ) throws Throwable { ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig ( ) ; int int0 = probeAgentConfig0 . getRetryDelay ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocalInUse ( ) { return localInUse ; }
void test2 ( ) throws Throwable { ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig ( ) ; int int0 = probeAgentConfig0 . getKeepAliveInterval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocalInUse ( ) { return localInUse ; }
void test3 ( ) throws Throwable { byte [ ] byteArray0 = new byte [ 5 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 ) ; PushbackInputStream pushbackInputStream0 = new PushbackInputStream ( ( InputStream ) byteArrayInputStream0 ) ; ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig ( ( InputStream ) pushbackInputStream0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProbeAgentServerPort ( ) { return port ; }
void test4 ( ) throws Throwable { ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig ( ) ; probeAgentConfig0 . setDestination ( ( ServerAgent ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocalInUse ( ) { return localInUse ; }
void test5 ( ) throws Throwable { ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig ( ) ; int int0 = probeAgentConfig0 . getSubscriptionCheckInterval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProbeAgentServerPort ( ) { return port ; }
void test6 ( ) throws Throwable { ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig ( ) ; boolean boolean0 = probeAgentConfig0 . isLocalInUse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getProbeAgentServerPort ( ) { return port ; }
void test7 ( ) throws Throwable { ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig ( ( - 1583 ) , ( String ) null , 243 , 319 , 243 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isLocalInUse ( ) { return localInUse ; }
void test2 ( ) throws Throwable { XmlRpcServerClient xmlRpcServerClient0 = new XmlRpcServerClient ( ( URL ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test3 ( ) throws Throwable { XmlRpcServerClient xmlRpcServerClient0 = new XmlRpcServerClient ( ( URL ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test4 ( ) throws Throwable { XmlRpcServerClient xmlRpcServerClient0 = new XmlRpcServerClient ( ( URL ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test5 ( ) throws Throwable { XmlRpcServerClient xmlRpcServerClient0 = new XmlRpcServerClient ( ( URL ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test6 ( ) throws Throwable { XmlRpcServerClient xmlRpcServerClient0 = new XmlRpcServerClient ( ( URL ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean keepAlive ( long probeId ) ; void unregister ( long probeId ) ; void checkSubscriptions ( long probeId , List < Long > subscriptionIds ) ; boolean BMReport ( long time , String measureURI , String value , long subscriptionId , boolean matchReference , String reference ) ; }
void test0 ( ) throws Throwable { Const const0 = new Const ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = Const . createMeasureURI ( ( String ) null , ( String ) null , ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String createMeasureURI ( String targetType , String targetName , String bmClass , String bmName ) { return "MFW : / / " + targetType + " / " + targetName + " / " + bmClass + " / " + bmName ; }
void test0 ( ) throws Throwable { ValuePair valuePair0 = new ValuePair ( "L" , "L" ) ; String string0 = valuePair0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { if ( missingBM . size ( ) > 0 ) { return "Unknown" ; } return "" + value ; }
void test1 ( ) throws Throwable { ValuePair valuePair0 = new ValuePair ( "\u0005l^^ } @" , "\u0005l^^ } @" ) ; String string0 = valuePair0 . getKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKey ( ) { return key ; }
void test2 ( ) throws Throwable { ValuePair valuePair0 = new ValuePair ( "O@Ha" , "O@Ha" ) ; String string0 = valuePair0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test3 ( ) throws Throwable { ValuePair valuePair0 = new ValuePair ( "L" , "L" ) ; boolean boolean0 = valuePair0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Value value1 = ( Value ) o ; if ( precision ! = value1 . precision ) return false ; if ( bm ! = null ? ! bm . equals ( value1 . bm ) : value1 . bm ! = null ) return false ; if ( time ! = null ? ! time . equals ( value1 . time ) : value1 . time ! = null ) return false ; if ( value ! = null ? ! value . equals ( value1 . value ) : value1 . value ! = null ) return false ; if ( subscriptionId ! = value1 . subscriptionId ) return false ; return true ; }
void test4 ( ) throws Throwable { ValuePair valuePair0 = new ValuePair ( "O@Ha" , "O@Ha" ) ; ValuePair valuePair1 = new ValuePair ( "" , "" ) ; boolean boolean0 = valuePair1 . equals ( ( Object ) valuePair0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Value value1 = ( Value ) o ; if ( precision ! = value1 . precision ) return false ; if ( bm ! = null ? ! bm . equals ( value1 . bm ) : value1 . bm ! = null ) return false ; if ( time ! = null ? ! time . equals ( value1 . time ) : value1 . time ! = null ) return false ; if ( value ! = null ? ! value . equals ( value1 . value ) : value1 . value ! = null ) return false ; if ( subscriptionId ! = value1 . subscriptionId ) return false ; return true ; }
void test5 ( ) throws Throwable { ValuePair valuePair0 = new ValuePair ( "O@Ha" , "O@Ha" ) ; Object object0 = new Object ( ) ; boolean boolean0 = valuePair0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Value value1 = ( Value ) o ; if ( precision ! = value1 . precision ) return false ; if ( bm ! = null ? ! bm . equals ( value1 . bm ) : value1 . bm ! = null ) return false ; if ( time ! = null ? ! time . equals ( value1 . time ) : value1 . time ! = null ) return false ; if ( value ! = null ? ! value . equals ( value1 . value ) : value1 . value ! = null ) return false ; if ( subscriptionId ! = value1 . subscriptionId ) return false ; return true ; }
void test6 ( ) throws Throwable { ValuePair valuePair0 = new ValuePair ( ( String ) null , "" ) ; ValuePair valuePair1 = new ValuePair ( "" , "" ) ; boolean boolean0 = valuePair0 . equals ( ( Object ) valuePair1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test7 ( ) throws Throwable { ValuePair valuePair0 = new ValuePair ( "" , "" ) ; ValuePair valuePair1 = new ValuePair ( "" , "Kr" ) ; boolean boolean0 = valuePair0 . equals ( ( Object ) valuePair1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test8 ( ) throws Throwable { ValuePair valuePair0 = new ValuePair ( ( String ) null , "" ) ; ValuePair valuePair1 = new ValuePair ( ( String ) null , ( String ) null ) ; boolean boolean0 = valuePair1 . equals ( ( Object ) valuePair0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Value value1 = ( Value ) o ; if ( precision ! = value1 . precision ) return false ; if ( bm ! = null ? ! bm . equals ( value1 . bm ) : value1 . bm ! = null ) return false ; if ( time ! = null ? ! time . equals ( value1 . time ) : value1 . time ! = null ) return false ; if ( value ! = null ? ! value . equals ( value1 . value ) : value1 . value ! = null ) return false ; if ( subscriptionId ! = value1 . subscriptionId ) return false ; return true ; }
void test9 ( ) throws Throwable { ValuePair valuePair0 = new ValuePair ( "" , "" ) ; ValuePair valuePair1 = new ValuePair ( "" , "" ) ; boolean boolean0 = valuePair0 . equals ( ( Object ) valuePair1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Value value1 = ( Value ) o ; if ( precision ! = value1 . precision ) return false ; if ( bm ! = null ? ! bm . equals ( value1 . bm ) : value1 . bm ! = null ) return false ; if ( time ! = null ? ! time . equals ( value1 . time ) : value1 . time ! = null ) return false ; if ( value ! = null ? ! value . equals ( value1 . value ) : value1 . value ! = null ) return false ; if ( subscriptionId ! = value1 . subscriptionId ) return false ; return true ; }
void test10 ( ) throws Throwable { ValuePair valuePair0 = new ValuePair ( ( String ) null , ( String ) null ) ; ValuePair valuePair1 = new ValuePair ( ( String ) null , ( String ) null ) ; boolean boolean0 = valuePair0 . equals ( ( Object ) valuePair1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Value value1 = ( Value ) o ; if ( precision ! = value1 . precision ) return false ; if ( bm ! = null ? ! bm . equals ( value1 . bm ) : value1 . bm ! = null ) return false ; if ( time ! = null ? ! time . equals ( value1 . time ) : value1 . time ! = null ) return false ; if ( value ! = null ? ! value . equals ( value1 . value ) : value1 . value ! = null ) return false ; if ( subscriptionId ! = value1 . subscriptionId ) return false ; return true ; }
void test11 ( ) throws Throwable { ValuePair valuePair0 = new ValuePair ( ( String ) null , ( String ) null ) ; int int0 = valuePair0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result = bm ! = null ? bm . hashCode ( ) : 0 ; result = 31 * result + precision ; result = 31 * result + ( value ! = null ? value . hashCode ( ) : 0 ) ; result = 31 * result + ( time ! = null ? time . hashCode ( ) : 0 ) ; result = 31 * result + subscriptionId . hashCode ( ) ; return result ; }
void test12 ( ) throws Throwable { ValuePair valuePair0 = new ValuePair ( "O@Ha" , "O@Ha" ) ; int int0 = valuePair0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int hashCode ( ) { int result = bm ! = null ? bm . hashCode ( ) : 0 ; result = 31 * result + precision ; result = 31 * result + ( value ! = null ? value . hashCode ( ) : 0 ) ; result = 31 * result + ( time ! = null ? time . hashCode ( ) : 0 ) ; result = 31 * result + subscriptionId . hashCode ( ) ; return result ; }
void test0 ( ) throws Throwable { ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( "" , "" , true , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test1 ( ) throws Throwable { ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( ( String ) null , ( String ) null , true , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test2 ( ) throws Throwable { ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( "" , "" , true , ( Object ) "" ) ; String string0 = probeConfiguration0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test3 ( ) throws Throwable { Object object0 = new Object ( ) ; ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( "@zr" , "@zr" , true , object0 ) ; String string0 = probeConfiguration0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test4 ( ) throws Throwable { ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( "" , "" , true , ( Object ) "" ) ; probeConfiguration0 . setMandatory ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test5 ( ) throws Throwable { Object object0 = new Object ( ) ; ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( "@zr" , "@zr" , true , object0 ) ; probeConfiguration0 . setName ( ( String ) null ) ; int int0 = probeConfiguration0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test6 ( ) throws Throwable { ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( "" , "" , true , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test7 ( ) throws Throwable { ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( ( String ) null , ( String ) null , true , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test8 ( ) throws Throwable { ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( ( String ) null , ( String ) null , true , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test9 ( ) throws Throwable { Object object0 = new Object ( ) ; ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( "0" , "0" , true , object0 ) ; boolean boolean0 = probeConfiguration0 . equals ( object0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test10 ( ) throws Throwable { ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( ( String ) null , ( String ) null , true , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test11 ( ) throws Throwable { Object object0 = new Object ( ) ; ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( "@zr" , "@zr" , true , object0 ) ; ProbeConfiguration probeConfiguration1 = new ProbeConfiguration ( "@zr" , "@zr" , false , ( Object ) "@zr" ) ; boolean boolean0 = probeConfiguration1 . equals ( ( Object ) probeConfiguration0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test12 ( ) throws Throwable { Object object0 = new Object ( ) ; ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( "@zr" , "@zr" , true , object0 ) ; ProbeConfiguration probeConfiguration1 = new ProbeConfiguration ( "@zr" , "@zr" , false , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Value value1 = ( Value ) o ; if ( precision ! = value1 . precision ) return false ; if ( bm ! = null ? ! bm . equals ( value1 . bm ) : value1 . bm ! = null ) return false ; if ( time ! = null ? ! time . equals ( value1 . time ) : value1 . time ! = null ) return false ; if ( value ! = null ? ! value . equals ( value1 . value ) : value1 . value ! = null ) return false ; if ( subscriptionId ! = value1 . subscriptionId ) return false ; return true ; }
void test13 ( ) throws Throwable { ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( "" , "" , true , ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return description ; }
void test14 ( ) throws Throwable { ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( "" , "" , true , ( Object ) "" ) ; ProbeConfiguration probeConfiguration1 = new ProbeConfiguration ( "" , "" , true , ( Object ) "" ) ; probeConfiguration1 . setName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Value value1 = ( Value ) o ; if ( precision ! = value1 . precision ) return false ; if ( bm ! = null ? ! bm . equals ( value1 . bm ) : value1 . bm ! = null ) return false ; if ( time ! = null ? ! time . equals ( value1 . time ) : value1 . time ! = null ) return false ; if ( value ! = null ? ! value . equals ( value1 . value ) : value1 . value ! = null ) return false ; if ( subscriptionId ! = value1 . subscriptionId ) return false ; return true ; }
void test15 ( ) throws Throwable { Object object0 = new Object ( ) ; ProbeConfiguration probeConfiguration0 = new ProbeConfiguration ( "@zr" , "@zr" , true , object0 ) ; int int0 = probeConfiguration0 . hashCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMandatory ( ) { return mandatory ; }
void test0 ( ) throws Throwable { DataType dataType0 = DataType . STRINGVALUE ; DataObject dataObject0 = new DataObject ( dataType0 ) ; DataType dataType1 = dataObject0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test1 ( ) throws Throwable { DataType dataType0 = DataType . STRINGVALUE ; DataObject dataObject0 = new DataObject ( dataType0 ) ; dataObject0 . setType ( dataType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test0 ( ) throws Throwable { ClientFactory clientFactory0 = MFWXmlRpcFactoryFactory . createFactory ( ( URL ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ClientFactory createFactory ( URL url ) { XmlRpcClientConfigImpl xmlRpcConfig = new XmlRpcClientConfigImpl ( ) ; xmlRpcConfig . setServerURL ( url ) ; xmlRpcConfig . setEnabledForExtensions ( true ) ; / / todo : put these values in a configuration file xmlRpcConfig . setConnectionTimeout ( 5000 ) ; xmlRpcConfig . setReplyTimeout ( 5000 ) ; XmlRpcClient client = new XmlRpcClient ( ) ; XmlRpcSun15HttpTransportFactory transportFactory = new XmlRpcSun15HttpTransportFactory ( client ) ; client . setTransportFactory ( transportFactory ) ; client . setConfig ( xmlRpcConfig ) ; return new ClientFactory ( client ) ; }
void test1 ( ) throws Throwable { MFWXmlRpcFactoryFactory mFWXmlRpcFactoryFactory0 = new MFWXmlRpcFactoryFactory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { HTTPProbeAgent hTTPProbeAgent0 = new HTTPProbeAgent ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; hTTPProbeAgent0 . setConfiguration ( ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setConfiguration ( long probeId , Map < String , String > configuration ) { probe . setConfiguration ( probeId , configuration ) ; }
void test4 ( ) throws Throwable { HTTPProbeAgent hTTPProbeAgent0 = new HTTPProbeAgent ( ) ; List < ProbeConfiguration > list0 = ( List < ProbeConfiguration > ) hTTPProbeAgent0 . getConfigurationParameters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < ProbeConfiguration > getConfigurationParameters ( long probeId ) { return probe . getConfigurationParameters ( probeId ) ; }
void test0 ( ) throws Throwable { ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent ( ) ; BaseMeasure baseMeasure0 = configurableTestProbeAgent0 . measure ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMeasure ( ) { return measure ; }
void test3 ( ) throws Throwable { ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent ( ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; configurableTestProbeAgent0 . setConfiguration ( ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return devices . size ( ) ; }
void test4 ( ) throws Throwable { ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent ( ) ; Collection < ProbeConfiguration > collection0 = configurableTestProbeAgent0 . getConfigurationParameters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < ProbeConfiguration > getConfigurationParameters ( long probeId ) { return probe . getConfigurationParameters ( probeId ) ; }
void test1 ( ) throws Throwable { TestProbeActivator testProbeActivator0 = new TestProbeActivator ( ( Properties ) null ) ; TestProbeWithCompareMode testProbeWithCompareMode0 = testProbeActivator0 . getTestProbeWithCompareMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TestProbeWithCompareMode getTestProbeWithCompareMode ( ) { return testProbeWithCompareMode ; }
void test2 ( ) throws Throwable { TestProbeActivator testProbeActivator0 = new TestProbeActivator ( ( Properties ) null ) ; TestProbe testProbe0 = testProbeActivator0 . getTestProbe1v2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TestProbe getTestProbe1v2 ( ) { return testProbe1v2 ; }
void test3 ( ) throws Throwable { TestProbeActivator testProbeActivator0 = new TestProbeActivator ( ( Properties ) null ) ; TestProbe testProbe0 = testProbeActivator0 . getTestProbe1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TestProbe getTestProbe1 ( ) { return testProbe1 ; }
void test4 ( ) throws Throwable { TestProbeActivator testProbeActivator0 = new TestProbeActivator ( ( Properties ) null ) ; TestProbe testProbe0 = testProbeActivator0 . getTestProbe4 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TestProbe getTestProbe4 ( ) { return testProbe4 ; }
void test5 ( ) throws Throwable { TestProbeActivator testProbeActivator0 = new TestProbeActivator ( ( Properties ) null ) ; TestProbe testProbe0 = testProbeActivator0 . getTestProbe2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" TestProbe getTestProbe2 ( ) { return testProbe2 ; }
void test1 ( ) throws Throwable { TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode ( ) ; System . setCurrentTimeMillis ( 65535L ) ; BaseMeasure baseMeasure0 = testProbeWithCompareMode0 . measure ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMeasure ( ) { return measure ; }
void test0 ( ) throws Throwable { CoreConfigurationHandler coreConfigurationHandler0 = new CoreConfigurationHandler ( ( CustomCore ) null , ( BundleContext ) null ) ; Collection < ProbeConfiguration > collection0 = coreConfigurationHandler0 . getConfigurationParameters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Collection < ProbeConfiguration > getConfigurationParameters ( long probeId ) { return probe . getConfigurationParameters ( probeId ) ; }
void test1 ( ) throws Throwable { CoreConfigurationHandler coreConfigurationHandler0 = new CoreConfigurationHandler ( ( CustomCore ) null , ( BundleContext ) null ) ; ProbeInformation probeInformation0 = coreConfigurationHandler0 . getInformation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { String values = " { " ; for ( Iterator i = this . values . iterator ( ) ; i . hasNext ( ) ; ) { Object obj = i . next ( ) ; if ( obj instanceof Collection ) { values + = obj ; } else { values + = valueObjectToString ( obj ) ; } if ( i . hasNext ( ) ) { values + = " , " ; } else { values + = " } " ; } } String item = left . toString ( ) ; if ( elements ) { item + = " elements" ; } return item + " one of " + values ; }
void test4 ( ) throws Throwable { CoreConfigurationHandler coreConfigurationHandler0 = new CoreConfigurationHandler ( ( CustomCore ) null , ( BundleContext ) null ) ; BaseMeasure baseMeasure0 = coreConfigurationHandler0 . measure ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" BaseMeasure measure ( ) ; / * * start and stop a probe if supported * / void startProbe ( ) ; void stopProbe ( ) ; / * * Same as getConfiguration but used to set the values from the SAC . * / void setConfiguration ( Map < String , String > configuration ) ; Collection < ProbeConfiguration > getConfigurationParameters ( ) ; void init ( Properties properties ) ; }
void test6 ( ) throws Throwable { CoreConfigurationHandler coreConfigurationHandler0 = new CoreConfigurationHandler ( ( CustomCore ) null , ( BundleContext ) null ) ; HashMap < String , String > hashMap0 = new HashMap < String , String > ( ) ; coreConfigurationHandler0 . setConfiguration ( ( Map < String , String > ) hashMap0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setConfiguration ( long probeId , Map < String , String > configuration ) { probe . setConfiguration ( probeId , configuration ) ; }
void test3 ( ) throws Throwable { SSHProbeAgent sSHProbeAgent0 = new SSHProbeAgent ( ) ; sSHProbeAgent0 . startProbe ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getErrors ( ) { return errors ; }
void test4 ( ) throws Throwable { SSHProbeAgent sSHProbeAgent0 = new SSHProbeAgent ( ) ; String string0 = sSHProbeAgent0 . getErrors ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getErrors ( ) { return errors ; }
void test6 ( ) throws Throwable { SSHProbeAgent sSHProbeAgent0 = new SSHProbeAgent ( ) ; sSHProbeAgent0 . stopProbe ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getErrors ( ) { return errors ; }
void test0 ( ) throws Throwable { Configuration configuration0 = new Configuration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = Configuration . getTestClassName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTestClassName ( ) { if ( testClassName = = null ) { testClassName = property ( "testclass" ) ; } return testClassName ; }
