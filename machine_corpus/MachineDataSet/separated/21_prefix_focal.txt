void test0 ( ) throws Throwable { ThoroughfareNumber thoroughfareNumber0 = new ThoroughfareNumber ( ) ; thoroughfareNumber0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicatorOccurrence ( ) { return indicatorOccurrence ; }
void test1 ( ) throws Throwable { ThoroughfareNumber thoroughfareNumber0 = new ThoroughfareNumber ( ) ; thoroughfareNumber0 . setIndicatorOccurrence ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicatorOccurrence ( ) { return indicatorOccurrence ; }
void test2 ( ) throws Throwable { ThoroughfareNumber thoroughfareNumber0 = new ThoroughfareNumber ( ) ; thoroughfareNumber0 . setNumberOccurrence ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test3 ( ) throws Throwable { ThoroughfareNumber thoroughfareNumber0 = new ThoroughfareNumber ( ) ; String string0 = thoroughfareNumber0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test4 ( ) throws Throwable { ThoroughfareNumber thoroughfareNumber0 = new ThoroughfareNumber ( ) ; String string0 = thoroughfareNumber0 . getIndicator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test5 ( ) throws Throwable { ThoroughfareNumber thoroughfareNumber0 = new ThoroughfareNumber ( ) ; String string0 = thoroughfareNumber0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test6 ( ) throws Throwable { ThoroughfareNumber thoroughfareNumber0 = new ThoroughfareNumber ( ) ; String string0 = thoroughfareNumber0 . getNumberOccurrence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberOccurrence ( ) { return numberOccurrence ; }
void test7 ( ) throws Throwable { ThoroughfareNumber thoroughfareNumber0 = new ThoroughfareNumber ( ) ; Map < QName , String > map0 = thoroughfareNumber0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test8 ( ) throws Throwable { ThoroughfareNumber thoroughfareNumber0 = new ThoroughfareNumber ( ) ; String string0 = thoroughfareNumber0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test9 ( ) throws Throwable { ThoroughfareNumber thoroughfareNumber0 = new ThoroughfareNumber ( ) ; String string0 = thoroughfareNumber0 . getNumberType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberType ( ) { return numberType ; }
void test10 ( ) throws Throwable { ThoroughfareNumber thoroughfareNumber0 = new ThoroughfareNumber ( ) ; thoroughfareNumber0 . setContent ( " ZK1^ { > qia ! 55p` { ( RK" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test11 ( ) throws Throwable { ThoroughfareNumber thoroughfareNumber0 = new ThoroughfareNumber ( ) ; thoroughfareNumber0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test12 ( ) throws Throwable { ThoroughfareNumber thoroughfareNumber0 = new ThoroughfareNumber ( ) ; String string0 = thoroughfareNumber0 . getIndicatorOccurrence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicatorOccurrence ( ) { return indicatorOccurrence ; }
void test13 ( ) throws Throwable { ThoroughfareNumber thoroughfareNumber0 = new ThoroughfareNumber ( ) ; thoroughfareNumber0 . setIndicator ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberType ( ) { return numberType ; }
void test14 ( ) throws Throwable { ThoroughfareNumber thoroughfareNumber0 = new ThoroughfareNumber ( ) ; thoroughfareNumber0 . setNumberType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test0 ( ) throws Throwable { PremiseNumber premiseNumber0 = new PremiseNumber ( ) ; String string0 = premiseNumber0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test1 ( ) throws Throwable { PremiseNumber premiseNumber0 = new PremiseNumber ( ) ; String string0 = premiseNumber0 . getNumberTypeOccurrence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberTypeOccurrence ( ) { return numberTypeOccurrence ; }
void test2 ( ) throws Throwable { PremiseNumber premiseNumber0 = new PremiseNumber ( ) ; premiseNumber0 . setNumberTypeOccurrence ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { PremiseNumber premiseNumber0 = new PremiseNumber ( ) ; String string0 = premiseNumber0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test4 ( ) throws Throwable { PremiseNumber premiseNumber0 = new PremiseNumber ( ) ; String string0 = premiseNumber0 . getNumberType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberType ( ) { return numberType ; }
void test5 ( ) throws Throwable { PremiseNumber premiseNumber0 = new PremiseNumber ( ) ; String string0 = premiseNumber0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test6 ( ) throws Throwable { PremiseNumber premiseNumber0 = new PremiseNumber ( ) ; premiseNumber0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberType ( ) { return numberType ; }
void test7 ( ) throws Throwable { PremiseNumber premiseNumber0 = new PremiseNumber ( ) ; premiseNumber0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicatorOccurrence ( ) { return indicatorOccurrence ; }
void test8 ( ) throws Throwable { PremiseNumber premiseNumber0 = new PremiseNumber ( ) ; Map < QName , String > map0 = premiseNumber0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test9 ( ) throws Throwable { PremiseNumber premiseNumber0 = new PremiseNumber ( ) ; String string0 = premiseNumber0 . getIndicator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test10 ( ) throws Throwable { PremiseNumber premiseNumber0 = new PremiseNumber ( ) ; premiseNumber0 . setContent ( " ZK1^ { > qia ! 55p` { ( RK" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberType ( ) { return numberType ; }
void test11 ( ) throws Throwable { PremiseNumber premiseNumber0 = new PremiseNumber ( ) ; premiseNumber0 . setNumberType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test12 ( ) throws Throwable { PremiseNumber premiseNumber0 = new PremiseNumber ( ) ; premiseNumber0 . setIndicator ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberTypeOccurrence ( ) { return numberTypeOccurrence ; }
void test13 ( ) throws Throwable { PremiseNumber premiseNumber0 = new PremiseNumber ( ) ; premiseNumber0 . setIndicatorOccurrence ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicatorOccurrence ( ) { return indicatorOccurrence ; }
void test14 ( ) throws Throwable { PremiseNumber premiseNumber0 = new PremiseNumber ( ) ; String string0 = premiseNumber0 . getIndicatorOccurrence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicatorOccurrence ( ) { return indicatorOccurrence ; }
void test0 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; SubPremiseType . SubPremiseLocation subPremiseType_SubPremiseLocation0 = objectFactory0 . createSubPremiseTypeSubPremiseLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test1 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; SubPremiseType . SubPremiseNumberSuffix subPremiseType_SubPremiseNumberSuffix0 = objectFactory0 . createSubPremiseTypeSubPremiseNumberSuffix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test2 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; ThoroughfareNumber thoroughfareNumber0 = objectFactory0 . createThoroughfareNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test3 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressDetails . Country . CountryNameCode addressDetails_Country_CountryNameCode0 = objectFactory0 . createAddressDetailsCountryCountryNameCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test4 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; ThoroughfarePostDirectionType thoroughfarePostDirectionType0 = objectFactory0 . createThoroughfarePostDirectionType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test5 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; Premise . PremiseName premise_PremiseName0 = objectFactory0 . createPremisePremiseName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test6 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressDetails . PostalServiceElements . KeyLineCode addressDetails_PostalServiceElements_KeyLineCode0 = objectFactory0 . createAddressDetailsPostalServiceElementsKeyLineCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test7 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressDetails . PostalServiceElements . SortingCode addressDetails_PostalServiceElements_SortingCode0 = objectFactory0 . createAddressDetailsPostalServiceElementsSortingCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test8 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; SubPremiseType . SubPremiseNumberPrefix subPremiseType_SubPremiseNumberPrefix0 = objectFactory0 . createSubPremiseTypeSubPremiseNumberPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberPrefixSeparator ( ) { return numberPrefixSeparator ; }
void test9 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = objectFactory0 . createThoroughfareThoroughfareNumberRange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test10 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; DependentLocalityType dependentLocalityType0 = objectFactory0 . createDependentLocalityType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test11 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; DependentLocalityType . DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = objectFactory0 . createDependentLocalityTypeDependentLocalityNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DependentLocalityType . DependentLocalityNumber createDependentLocalityTypeDependentLocalityNumber ( ) { return new DependentLocalityType . DependentLocalityNumber ( ) ; }
void test12 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressDetails addressDetails0 = objectFactory0 . createAddressDetails ( ) ; JAXBElement < AddressDetails > jAXBElement0 = objectFactory0 . createAddressDetails ( addressDetails0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AddressDetails createAddressDetails ( ) { return new AddressDetails ( ) ; }
void test13 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostalCode . PostalCodeNumberExtension postalCode_PostalCodeNumberExtension0 = objectFactory0 . createPostalCodePostalCodeNumberExtension ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test14 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostBox postBox0 = objectFactory0 . createPostBox ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test15 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; Department department0 = objectFactory0 . createDepartment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test16 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; Locality locality0 = objectFactory0 . createLocality ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test17 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; Thoroughfare thoroughfare0 = objectFactory0 . createThoroughfare ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDependentThoroughfares ( ) { return dependentThoroughfares ; }
void test18 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AdministrativeArea . AdministrativeAreaName administrativeArea_AdministrativeAreaName0 = objectFactory0 . createAdministrativeAreaAdministrativeAreaName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test19 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; Department . DepartmentName department_DepartmentName0 = objectFactory0 . createDepartmentDepartmentName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test20 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; ThoroughfareLeadingTypeType thoroughfareLeadingTypeType0 = objectFactory0 . createThoroughfareLeadingTypeType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test21 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostOffice . PostOfficeName postOffice_PostOfficeName0 = objectFactory0 . createPostOfficePostOfficeName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test22 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; Premise . PremiseNumberRange . PremiseNumberRangeTo premise_PremiseNumberRange_PremiseNumberRangeTo0 = objectFactory0 . createPremisePremiseNumberRangePremiseNumberRangeTo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Premise . PremiseNumberRange . PremiseNumberRangeTo createPremisePremiseNumberRangePremiseNumberRangeTo ( ) { return new Premise . PremiseNumberRange . PremiseNumberRangeTo ( ) ; }
void test23 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; MailStopType . MailStopName mailStopType_MailStopName0 = objectFactory0 . createMailStopTypeMailStopName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test24 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostBox . PostBoxNumberPrefix postBox_PostBoxNumberPrefix0 = objectFactory0 . createPostBoxPostBoxNumberPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test25 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressDetails . PostalServiceElements . Barcode addressDetails_PostalServiceElements_Barcode0 = objectFactory0 . createAddressDetailsPostalServiceElementsBarcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test26 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = objectFactory0 . createAdministrativeAreaSubAdministrativeArea ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test27 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostBox . PostBoxNumberSuffix postBox_PostBoxNumberSuffix0 = objectFactory0 . createPostBoxPostBoxNumberSuffix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test28 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; ThoroughfareTrailingTypeType thoroughfareTrailingTypeType0 = objectFactory0 . createThoroughfareTrailingTypeType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test29 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AdministrativeArea administrativeArea0 = objectFactory0 . createAdministrativeArea ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test30 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressLinesType addressLinesType0 = objectFactory0 . createAddressLinesType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AddressLinesType createAddressLinesType ( ) { return new AddressLinesType ( ) ; }
void test31 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; XAL xAL0 = objectFactory0 . createXAL ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test32 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostBox . PostBoxNumber postBox_PostBoxNumber0 = objectFactory0 . createPostBoxPostBoxNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test33 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; ThoroughfarePreDirectionType thoroughfarePreDirectionType0 = objectFactory0 . createThoroughfarePreDirectionType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test34 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostOffice . PostOfficeNumber postOffice_PostOfficeNumber0 = objectFactory0 . createPostOfficePostOfficeNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test35 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressDetails . Address addressDetails_Address0 = objectFactory0 . createAddressDetailsAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test36 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; Premise . PremiseLocation premise_PremiseLocation0 = objectFactory0 . createPremisePremiseLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test37 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; FirmType . FirmName firmType_FirmName0 = objectFactory0 . createFirmTypeFirmName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test38 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostBox . PostBoxNumberExtension postBox_PostBoxNumberExtension0 = objectFactory0 . createPostBoxPostBoxNumberExtension ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostBox . PostBoxNumberExtension createPostBoxPostBoxNumberExtension ( ) { return new PostBox . PostBoxNumberExtension ( ) ; }
void test39 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostalCode . PostTown . PostTownSuffix postalCode_PostTown_PostTownSuffix0 = objectFactory0 . createPostalCodePostTownPostTownSuffix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test40 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressDetails . PostalServiceElements . EndorsementLineCode addressDetails_PostalServiceElements_EndorsementLineCode0 = objectFactory0 . createAddressDetailsPostalServiceElementsEndorsementLineCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test41 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostalRouteType postalRouteType0 = objectFactory0 . createPostalRouteType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test42 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressDetails . PostalServiceElements . AddressLongitude addressDetails_PostalServiceElements_AddressLongitude0 = objectFactory0 . createAddressDetailsPostalServiceElementsAddressLongitude ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test43 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = objectFactory0 . createAddressDetailsPostalServiceElements ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test44 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; ThoroughfareNumberPrefix thoroughfareNumberPrefix0 = objectFactory0 . createThoroughfareNumberPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test45 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; LargeMailUserType . LargeMailUserName largeMailUserType_LargeMailUserName0 = objectFactory0 . createLargeMailUserTypeLargeMailUserName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test46 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressDetails . PostalServiceElements . SupplementaryPostalServiceData addressDetails_PostalServiceElements_SupplementaryPostalServiceData0 = objectFactory0 . createAddressDetailsPostalServiceElementsSupplementaryPostalServiceData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test47 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberTo thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 = objectFactory0 . createThoroughfareThoroughfareNumberRangeThoroughfareNumberTo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test48 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; LargeMailUserType largeMailUserType0 = objectFactory0 . createLargeMailUserType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test49 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; Premise premise0 = objectFactory0 . createPremise ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test50 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; SubPremiseType subPremiseType0 = objectFactory0 . createSubPremiseType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test51 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; Thoroughfare . DependentThoroughfare thoroughfare_DependentThoroughfare0 = objectFactory0 . createThoroughfareDependentThoroughfare ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test52 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostalCode . PostalCodeNumber postalCode_PostalCodeNumber0 = objectFactory0 . createPostalCodePostalCodeNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test53 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; SubPremiseType . SubPremiseName subPremiseType_SubPremiseName0 = objectFactory0 . createSubPremiseTypeSubPremiseName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeOccurrence ( ) { return typeOccurrence ; }
void test54 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; SubPremiseType . SubPremiseNumber subPremiseType_SubPremiseNumber0 = objectFactory0 . createSubPremiseTypeSubPremiseNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test55 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostOffice postOffice0 = objectFactory0 . createPostOffice ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test56 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostalRouteType . PostalRouteName postalRouteType_PostalRouteName0 = objectFactory0 . createPostalRouteTypePostalRouteName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test57 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressDetails . PostalServiceElements . AddressLongitudeDirection addressDetails_PostalServiceElements_AddressLongitudeDirection0 = objectFactory0 . createAddressDetailsPostalServiceElementsAddressLongitudeDirection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test58 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; FirmType firmType0 = objectFactory0 . createFirmType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test59 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; Locality . LocalityName locality_LocalityName0 = objectFactory0 . createLocalityLocalityName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test60 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; ThoroughfareNameType thoroughfareNameType0 = objectFactory0 . createThoroughfareNameType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test61 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PremiseNumber premiseNumber0 = objectFactory0 . createPremiseNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test62 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressDetails . Country addressDetails_Country0 = objectFactory0 . createAddressDetailsCountry ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AddressDetails . Country createAddressDetailsCountry ( ) { return new AddressDetails . Country ( ) ; }
void test63 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostalCode . PostTown postalCode_PostTown0 = objectFactory0 . createPostalCodePostTown ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test64 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostalCode postalCode0 = objectFactory0 . createPostalCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test65 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; DependentLocalityType . DependentLocalityName dependentLocalityType_DependentLocalityName0 = objectFactory0 . createDependentLocalityTypeDependentLocalityName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test66 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; ThoroughfareNumberSuffix thoroughfareNumberSuffix0 = objectFactory0 . createThoroughfareNumberSuffix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberSuffixSeparator ( ) { return numberSuffixSeparator ; }
void test67 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostalRouteType . PostalRouteNumber postalRouteType_PostalRouteNumber0 = objectFactory0 . createPostalRouteTypePostalRouteNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test68 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberFrom thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0 = objectFactory0 . createThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test69 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PremiseNumberSuffix premiseNumberSuffix0 = objectFactory0 . createPremiseNumberSuffix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test70 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; CountryName countryName0 = objectFactory0 . createCountryName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test71 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressDetails . PostalServiceElements . AddressLatitudeDirection addressDetails_PostalServiceElements_AddressLatitudeDirection0 = objectFactory0 . createAddressDetailsPostalServiceElementsAddressLatitudeDirection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test72 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AdministrativeArea . SubAdministrativeArea . SubAdministrativeAreaName administrativeArea_SubAdministrativeArea_SubAdministrativeAreaName0 = objectFactory0 . createAdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test73 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; Premise . PremiseNumberRange . PremiseNumberRangeFrom premise_PremiseNumberRange_PremiseNumberRangeFrom0 = objectFactory0 . createPremisePremiseNumberRangePremiseNumberRangeFrom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Premise . PremiseNumberRange . PremiseNumberRangeFrom createPremisePremiseNumberRangePremiseNumberRangeFrom ( ) { return new Premise . PremiseNumberRange . PremiseNumberRangeFrom ( ) ; }
void test74 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PremiseNumberPrefix premiseNumberPrefix0 = objectFactory0 . createPremiseNumberPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { return value ; }
void test75 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; MailStopType . MailStopNumber mailStopType_MailStopNumber0 = objectFactory0 . createMailStopTypeMailStopNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test76 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; Premise . PremiseNumberRange premise_PremiseNumberRange0 = objectFactory0 . createPremisePremiseNumberRange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test77 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; MailStopType mailStopType0 = objectFactory0 . createMailStopType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test78 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; BuildingNameType buildingNameType0 = objectFactory0 . createBuildingNameType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeOccurrence ( ) { return typeOccurrence ; }
void test79 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressDetails . PostalServiceElements . AddressIdentifier addressDetails_PostalServiceElements_AddressIdentifier0 = objectFactory0 . createAddressDetailsPostalServiceElementsAddressIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test80 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressLine addressLine0 = objectFactory0 . createAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test81 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; AddressDetails . PostalServiceElements . AddressLatitude addressDetails_PostalServiceElements_AddressLatitude0 = objectFactory0 . createAddressDetailsPostalServiceElementsAddressLatitude ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test82 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PostalCode . PostTown . PostTownName postalCode_PostTown_PostTownName0 = objectFactory0 . createPostalCodePostTownPostTownName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test83 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; LargeMailUserType . LargeMailUserIdentifier largeMailUserType_LargeMailUserIdentifier0 = objectFactory0 . createLargeMailUserTypeLargeMailUserIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test0 ( ) throws Throwable { FirmType firmType0 = new FirmType ( ) ; Map < QName , String > map0 = firmType0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test1 ( ) throws Throwable { FirmType firmType0 = new FirmType ( ) ; firmType0 . setMailStop ( ( MailStopType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test2 ( ) throws Throwable { FirmType firmType0 = new FirmType ( ) ; String string0 = firmType0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { FirmType firmType0 = new FirmType ( ) ; firmType0 . setPostalCode ( ( PostalCode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test4 ( ) throws Throwable { FirmType firmType0 = new FirmType ( ) ; PostalCode postalCode0 = firmType0 . getPostalCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalCode getPostalCode ( ) { return postalCode ; }
void test5 ( ) throws Throwable { FirmType firmType0 = new FirmType ( ) ; firmType0 . setType ( "U%X3Q38V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test6 ( ) throws Throwable { FirmType firmType0 = new FirmType ( ) ; MailStopType mailStopType0 = firmType0 . getMailStop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MailStopType getMailStop ( ) { return mailStop ; }
void test7 ( ) throws Throwable { FirmType . FirmName firmType_FirmName0 = new FirmType . FirmName ( ) ; Map < QName , String > map0 = firmType_FirmName0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test8 ( ) throws Throwable { FirmType . FirmName firmType_FirmName0 = new FirmType . FirmName ( ) ; firmType_FirmName0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test9 ( ) throws Throwable { FirmType . FirmName firmType_FirmName0 = new FirmType . FirmName ( ) ; firmType_FirmName0 . setCode ( "s * JMq - ! , ^#bbZDB08" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test10 ( ) throws Throwable { FirmType . FirmName firmType_FirmName0 = new FirmType . FirmName ( ) ; firmType_FirmName0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test11 ( ) throws Throwable { FirmType . FirmName firmType_FirmName0 = new FirmType . FirmName ( ) ; String string0 = firmType_FirmName0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test12 ( ) throws Throwable { FirmType . FirmName firmType_FirmName0 = new FirmType . FirmName ( ) ; String string0 = firmType_FirmName0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test13 ( ) throws Throwable { FirmType . FirmName firmType_FirmName0 = new FirmType . FirmName ( ) ; String string0 = firmType_FirmName0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test14 ( ) throws Throwable { FirmType firmType0 = new FirmType ( ) ; List < AddressLine > list0 = firmType0 . getAddressLine ( ) ; List < AddressLine > list1 = firmType0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test15 ( ) throws Throwable { FirmType firmType0 = new FirmType ( ) ; List < FirmType . FirmName > list0 = firmType0 . getFirmName ( ) ; List < FirmType . FirmName > list1 = firmType0 . getFirmName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < FirmType . FirmName > getFirmName ( ) { if ( firmName = = null ) { firmName = new ArrayList < FirmType . FirmName > ( ) ; } return this . firmName ; }
void test16 ( ) throws Throwable { FirmType firmType0 = new FirmType ( ) ; List < Department > list0 = firmType0 . getDepartment ( ) ; List < Department > list1 = firmType0 . getDepartment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Department > getDepartment ( ) { if ( department = = null ) { department = new ArrayList < Department > ( ) ; } return this . department ; }
void test17 ( ) throws Throwable { FirmType firmType0 = new FirmType ( ) ; List < Object > list0 = firmType0 . getAny ( ) ; List < Object > list1 = firmType0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test0 ( ) throws Throwable { BuildingNameType buildingNameType0 = new BuildingNameType ( ) ; String string0 = buildingNameType0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test1 ( ) throws Throwable { BuildingNameType buildingNameType0 = new BuildingNameType ( ) ; buildingNameType0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test2 ( ) throws Throwable { BuildingNameType buildingNameType0 = new BuildingNameType ( ) ; String string0 = buildingNameType0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test3 ( ) throws Throwable { BuildingNameType buildingNameType0 = new BuildingNameType ( ) ; String string0 = buildingNameType0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test4 ( ) throws Throwable { BuildingNameType buildingNameType0 = new BuildingNameType ( ) ; buildingNameType0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeOccurrence ( ) { return typeOccurrence ; }
void test5 ( ) throws Throwable { BuildingNameType buildingNameType0 = new BuildingNameType ( ) ; String string0 = buildingNameType0 . getTypeOccurrence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeOccurrence ( ) { return typeOccurrence ; }
void test6 ( ) throws Throwable { BuildingNameType buildingNameType0 = new BuildingNameType ( ) ; Map < QName , String > map0 = buildingNameType0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test7 ( ) throws Throwable { BuildingNameType buildingNameType0 = new BuildingNameType ( ) ; buildingNameType0 . setTypeOccurrence ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeOccurrence ( ) { return typeOccurrence ; }
void test8 ( ) throws Throwable { BuildingNameType buildingNameType0 = new BuildingNameType ( ) ; buildingNameType0 . setContent ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeOccurrence ( ) { return typeOccurrence ; }
void test0 ( ) throws Throwable { AddressLine addressLine0 = new AddressLine ( ) ; String string0 = addressLine0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test1 ( ) throws Throwable { AddressLine addressLine0 = new AddressLine ( ) ; Map < QName , String > map0 = addressLine0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test2 ( ) throws Throwable { AddressLine addressLine0 = new AddressLine ( ) ; String string0 = addressLine0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { AddressLine addressLine0 = new AddressLine ( ) ; addressLine0 . setType ( "p#eS4a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test4 ( ) throws Throwable { AddressLine addressLine0 = new AddressLine ( ) ; addressLine0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test5 ( ) throws Throwable { AddressLine addressLine0 = new AddressLine ( ) ; addressLine0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test6 ( ) throws Throwable { AddressLine addressLine0 = new AddressLine ( ) ; String string0 = addressLine0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test0 ( ) throws Throwable { ThoroughfareTrailingTypeType thoroughfareTrailingTypeType0 = new ThoroughfareTrailingTypeType ( ) ; Map < QName , String > map0 = thoroughfareTrailingTypeType0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test1 ( ) throws Throwable { ThoroughfareTrailingTypeType thoroughfareTrailingTypeType0 = new ThoroughfareTrailingTypeType ( ) ; thoroughfareTrailingTypeType0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test2 ( ) throws Throwable { ThoroughfareTrailingTypeType thoroughfareTrailingTypeType0 = new ThoroughfareTrailingTypeType ( ) ; thoroughfareTrailingTypeType0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { ThoroughfareTrailingTypeType thoroughfareTrailingTypeType0 = new ThoroughfareTrailingTypeType ( ) ; String string0 = thoroughfareTrailingTypeType0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test4 ( ) throws Throwable { ThoroughfareTrailingTypeType thoroughfareTrailingTypeType0 = new ThoroughfareTrailingTypeType ( ) ; String string0 = thoroughfareTrailingTypeType0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test5 ( ) throws Throwable { ThoroughfareTrailingTypeType thoroughfareTrailingTypeType0 = new ThoroughfareTrailingTypeType ( ) ; String string0 = thoroughfareTrailingTypeType0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test6 ( ) throws Throwable { ThoroughfareTrailingTypeType thoroughfareTrailingTypeType0 = new ThoroughfareTrailingTypeType ( ) ; thoroughfareTrailingTypeType0 . setType ( "p#eS4a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test0 ( ) throws Throwable { PremiseNumberPrefix premiseNumberPrefix0 = new PremiseNumberPrefix ( ) ; premiseNumberPrefix0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test1 ( ) throws Throwable { PremiseNumberPrefix premiseNumberPrefix0 = new PremiseNumberPrefix ( ) ; String string0 = premiseNumberPrefix0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test2 ( ) throws Throwable { PremiseNumberPrefix premiseNumberPrefix0 = new PremiseNumberPrefix ( ) ; String string0 = premiseNumberPrefix0 . getNumberPrefixSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberPrefixSeparator ( ) { return numberPrefixSeparator ; }
void test3 ( ) throws Throwable { PremiseNumberPrefix premiseNumberPrefix0 = new PremiseNumberPrefix ( ) ; premiseNumberPrefix0 . setNumberPrefixSeparator ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { return value ; }
void test4 ( ) throws Throwable { PremiseNumberPrefix premiseNumberPrefix0 = new PremiseNumberPrefix ( ) ; Map < QName , String > map0 = premiseNumberPrefix0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test5 ( ) throws Throwable { PremiseNumberPrefix premiseNumberPrefix0 = new PremiseNumberPrefix ( ) ; String string0 = premiseNumberPrefix0 . getValue ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValue ( ) { return value ; }
void test6 ( ) throws Throwable { PremiseNumberPrefix premiseNumberPrefix0 = new PremiseNumberPrefix ( ) ; premiseNumberPrefix0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test7 ( ) throws Throwable { PremiseNumberPrefix premiseNumberPrefix0 = new PremiseNumberPrefix ( ) ; String string0 = premiseNumberPrefix0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test8 ( ) throws Throwable { PremiseNumberPrefix premiseNumberPrefix0 = new PremiseNumberPrefix ( ) ; premiseNumberPrefix0 . setValue ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test0 ( ) throws Throwable { MailStopType mailStopType0 = new MailStopType ( ) ; String string0 = mailStopType0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test1 ( ) throws Throwable { MailStopType mailStopType0 = new MailStopType ( ) ; MailStopType . MailStopName mailStopType_MailStopName0 = new MailStopType . MailStopName ( ) ; mailStopType0 . setMailStopName ( mailStopType_MailStopName0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test2 ( ) throws Throwable { MailStopType mailStopType0 = new MailStopType ( ) ; MailStopType . MailStopNumber mailStopType_MailStopNumber0 = mailStopType0 . getMailStopNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MailStopType . MailStopNumber getMailStopNumber ( ) { return mailStopNumber ; }
void test3 ( ) throws Throwable { MailStopType mailStopType0 = new MailStopType ( ) ; MailStopType . MailStopName mailStopType_MailStopName0 = mailStopType0 . getMailStopName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MailStopType . MailStopName getMailStopName ( ) { return mailStopName ; }
void test4 ( ) throws Throwable { MailStopType mailStopType0 = new MailStopType ( ) ; mailStopType0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test5 ( ) throws Throwable { MailStopType mailStopType0 = new MailStopType ( ) ; Map < QName , String > map0 = mailStopType0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test6 ( ) throws Throwable { MailStopType mailStopType0 = new MailStopType ( ) ; mailStopType0 . setMailStopNumber ( ( MailStopType . MailStopNumber ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test7 ( ) throws Throwable { MailStopType . MailStopName mailStopType_MailStopName0 = new MailStopType . MailStopName ( ) ; String string0 = mailStopType_MailStopName0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test8 ( ) throws Throwable { MailStopType . MailStopName mailStopType_MailStopName0 = new MailStopType . MailStopName ( ) ; Map < QName , String > map0 = mailStopType_MailStopName0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test9 ( ) throws Throwable { MailStopType . MailStopName mailStopType_MailStopName0 = new MailStopType . MailStopName ( ) ; String string0 = mailStopType_MailStopName0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test10 ( ) throws Throwable { MailStopType . MailStopName mailStopType_MailStopName0 = new MailStopType . MailStopName ( ) ; mailStopType_MailStopName0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test11 ( ) throws Throwable { MailStopType . MailStopName mailStopType_MailStopName0 = new MailStopType . MailStopName ( ) ; mailStopType_MailStopName0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test12 ( ) throws Throwable { MailStopType . MailStopName mailStopType_MailStopName0 = new MailStopType . MailStopName ( ) ; String string0 = mailStopType_MailStopName0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test13 ( ) throws Throwable { MailStopType . MailStopName mailStopType_MailStopName0 = new MailStopType . MailStopName ( ) ; mailStopType_MailStopName0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test14 ( ) throws Throwable { MailStopType . MailStopNumber mailStopType_MailStopNumber0 = new MailStopType . MailStopNumber ( ) ; mailStopType_MailStopNumber0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test15 ( ) throws Throwable { MailStopType . MailStopNumber mailStopType_MailStopNumber0 = new MailStopType . MailStopNumber ( ) ; String string0 = mailStopType_MailStopNumber0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test16 ( ) throws Throwable { MailStopType . MailStopNumber mailStopType_MailStopNumber0 = new MailStopType . MailStopNumber ( ) ; mailStopType_MailStopNumber0 . setNameNumberSeparator ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test17 ( ) throws Throwable { MailStopType . MailStopNumber mailStopType_MailStopNumber0 = new MailStopType . MailStopNumber ( ) ; String string0 = mailStopType_MailStopNumber0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test18 ( ) throws Throwable { MailStopType . MailStopNumber mailStopType_MailStopNumber0 = new MailStopType . MailStopNumber ( ) ; String string0 = mailStopType_MailStopNumber0 . getNameNumberSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test19 ( ) throws Throwable { MailStopType . MailStopNumber mailStopType_MailStopNumber0 = new MailStopType . MailStopNumber ( ) ; Map < QName , String > map0 = mailStopType_MailStopNumber0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test20 ( ) throws Throwable { MailStopType . MailStopNumber mailStopType_MailStopNumber0 = new MailStopType . MailStopNumber ( ) ; mailStopType_MailStopNumber0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setContent ( String value ) { this . content = value ; }
void test21 ( ) throws Throwable { MailStopType mailStopType0 = new MailStopType ( ) ; List < AddressLine > list0 = mailStopType0 . getAddressLine ( ) ; List < AddressLine > list1 = mailStopType0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test22 ( ) throws Throwable { MailStopType mailStopType0 = new MailStopType ( ) ; List < Object > list0 = mailStopType0 . getAny ( ) ; List < Object > list1 = mailStopType0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test0 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberFrom thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0 = new Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberFrom ( ) ; Map < QName , String > map0 = thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test1 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberFrom thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0 = new Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberFrom ( ) ; thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test2 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberFrom thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0 = new Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberFrom ( ) ; String string0 = thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test3 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; Map < QName , String > map0 = thoroughfare0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test4 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; thoroughfare0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDependentThoroughfaresIndicator ( ) { return dependentThoroughfaresIndicator ; }
void test5 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; thoroughfare0 . setFirm ( ( FirmType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDependentThoroughfaresIndicator ( ) { return dependentThoroughfaresIndicator ; }
void test6 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; String string0 = thoroughfare0 . getDependentThoroughfares ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDependentThoroughfares ( ) { return dependentThoroughfares ; }
void test7 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; thoroughfare0 . setDependentThoroughfaresType ( "%" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDependentThoroughfaresConnector ( ) { return dependentThoroughfaresConnector ; }
void test8 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; DependentLocalityType dependentLocalityType0 = thoroughfare0 . getDependentLocality ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DependentLocalityType getDependentLocality ( ) { return dependentLocality ; }
void test9 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; Thoroughfare . DependentThoroughfare thoroughfare_DependentThoroughfare0 = thoroughfare0 . getDependentThoroughfare ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Thoroughfare . DependentThoroughfare getDependentThoroughfare ( ) { return dependentThoroughfare ; }
void test10 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; thoroughfare0 . setThoroughfareTrailingType ( ( ThoroughfareTrailingTypeType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDependentThoroughfaresIndicator ( ) { return dependentThoroughfaresIndicator ; }
void test11 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; ThoroughfareTrailingTypeType thoroughfareTrailingTypeType0 = thoroughfare0 . getThoroughfareTrailingType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThoroughfareTrailingTypeType getThoroughfareTrailingType ( ) { return thoroughfareTrailingType ; }
void test12 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; ThoroughfareLeadingTypeType thoroughfareLeadingTypeType0 = thoroughfare0 . getThoroughfareLeadingType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThoroughfareLeadingTypeType getThoroughfareLeadingType ( ) { return thoroughfareLeadingType ; }
void test13 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; ThoroughfarePostDirectionType thoroughfarePostDirectionType0 = thoroughfare0 . getThoroughfarePostDirection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThoroughfarePostDirectionType getThoroughfarePostDirection ( ) { return thoroughfarePostDirection ; }
void test14 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; thoroughfare0 . setThoroughfarePostDirection ( ( ThoroughfarePostDirectionType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDependentThoroughfaresIndicator ( ) { return dependentThoroughfaresIndicator ; }
void test15 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; thoroughfare0 . setThoroughfarePreDirection ( ( ThoroughfarePreDirectionType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDependentThoroughfares ( ) { return dependentThoroughfares ; }
void test16 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; String string0 = thoroughfare0 . getDependentThoroughfaresConnector ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDependentThoroughfaresConnector ( ) { return dependentThoroughfaresConnector ; }
void test17 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; String string0 = thoroughfare0 . getDependentThoroughfaresType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDependentThoroughfaresType ( ) { return dependentThoroughfaresType ; }
void test18 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; thoroughfare0 . setThoroughfareLeadingType ( ( ThoroughfareLeadingTypeType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDependentThoroughfaresIndicator ( ) { return dependentThoroughfaresIndicator ; }
void test19 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; thoroughfare0 . setDependentThoroughfare ( ( Thoroughfare . DependentThoroughfare ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test20 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; Premise premise0 = thoroughfare0 . getPremise ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Premise getPremise ( ) { return premise ; }
void test21 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; thoroughfare0 . setDependentThoroughfaresConnector ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDependentThoroughfares ( ) { return dependentThoroughfares ; }
void test22 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; Premise premise0 = new Premise ( ) ; thoroughfare0 . setPremise ( premise0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPremiseDependency ( ) { return premiseDependency ; }
void test23 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; ThoroughfarePreDirectionType thoroughfarePreDirectionType0 = thoroughfare0 . getThoroughfarePreDirection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThoroughfarePreDirectionType getThoroughfarePreDirection ( ) { return thoroughfarePreDirection ; }
void test24 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; thoroughfare0 . setDependentThoroughfares ( "^BAY" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDependentThoroughfaresType ( ) { return dependentThoroughfaresType ; }
void test25 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; thoroughfare0 . setDependentThoroughfaresIndicator ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test26 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; String string0 = thoroughfare0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test27 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; String string0 = thoroughfare0 . getDependentThoroughfaresIndicator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDependentThoroughfaresIndicator ( ) { return dependentThoroughfaresIndicator ; }
void test28 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; PostalCode postalCode0 = thoroughfare0 . getPostalCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalCode getPostalCode ( ) { return postalCode ; }
void test29 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; thoroughfare0 . setDependentLocality ( ( DependentLocalityType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test30 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; FirmType firmType0 = thoroughfare0 . getFirm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FirmType getFirm ( ) { return firm ; }
void test31 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; thoroughfare0 . setPostalCode ( ( PostalCode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDependentThoroughfaresIndicator ( ) { return dependentThoroughfaresIndicator ; }
void test32 ( ) throws Throwable { Thoroughfare . DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare . DependentThoroughfare ( ) ; thoroughfare_DependentThoroughfare0 . setThoroughfareLeadingType ( ( ThoroughfareLeadingTypeType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test33 ( ) throws Throwable { Thoroughfare . DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare . DependentThoroughfare ( ) ; thoroughfare_DependentThoroughfare0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test34 ( ) throws Throwable { Thoroughfare . DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare . DependentThoroughfare ( ) ; ThoroughfarePostDirectionType thoroughfarePostDirectionType0 = thoroughfare_DependentThoroughfare0 . getThoroughfarePostDirection ( ) ; thoroughfare_DependentThoroughfare0 . setThoroughfarePostDirection ( thoroughfarePostDirectionType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test35 ( ) throws Throwable { Thoroughfare . DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare . DependentThoroughfare ( ) ; thoroughfare_DependentThoroughfare0 . setThoroughfareTrailingType ( ( ThoroughfareTrailingTypeType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test36 ( ) throws Throwable { Thoroughfare . DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare . DependentThoroughfare ( ) ; Map < QName , String > map0 = thoroughfare_DependentThoroughfare0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test37 ( ) throws Throwable { Thoroughfare . DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare . DependentThoroughfare ( ) ; ThoroughfareTrailingTypeType thoroughfareTrailingTypeType0 = thoroughfare_DependentThoroughfare0 . getThoroughfareTrailingType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThoroughfareTrailingTypeType getThoroughfareTrailingType ( ) { return thoroughfareTrailingType ; }
void test38 ( ) throws Throwable { Thoroughfare . DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare . DependentThoroughfare ( ) ; String string0 = thoroughfare_DependentThoroughfare0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test39 ( ) throws Throwable { Thoroughfare . DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare . DependentThoroughfare ( ) ; ThoroughfareLeadingTypeType thoroughfareLeadingTypeType0 = thoroughfare_DependentThoroughfare0 . getThoroughfareLeadingType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThoroughfareLeadingTypeType getThoroughfareLeadingType ( ) { return thoroughfareLeadingType ; }
void test40 ( ) throws Throwable { Thoroughfare . DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare . DependentThoroughfare ( ) ; thoroughfare_DependentThoroughfare0 . setThoroughfarePreDirection ( ( ThoroughfarePreDirectionType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test41 ( ) throws Throwable { Thoroughfare . DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare . DependentThoroughfare ( ) ; ThoroughfarePreDirectionType thoroughfarePreDirectionType0 = thoroughfare_DependentThoroughfare0 . getThoroughfarePreDirection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThoroughfarePreDirectionType getThoroughfarePreDirection ( ) { return thoroughfarePreDirection ; }
void test42 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberTo thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 = new Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberTo ( ) ; thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test43 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberTo thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 = new Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberTo ( ) ; Map < QName , String > map0 = thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test44 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberTo thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 = new Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberTo ( ) ; String string0 = thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test45 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; thoroughfare_ThoroughfareNumberRange0 . setIndicator ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test46 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; thoroughfare_ThoroughfareNumberRange0 . setRangeType ( "ZRC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test47 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; String string0 = thoroughfare_ThoroughfareNumberRange0 . getRangeType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test48 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; Map < QName , String > map0 = thoroughfare_ThoroughfareNumberRange0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test49 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; thoroughfare_ThoroughfareNumberRange0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test50 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; String string0 = thoroughfare_ThoroughfareNumberRange0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test51 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberTo thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 = thoroughfare_ThoroughfareNumberRange0 . getThoroughfareNumberTo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test52 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; String string0 = thoroughfare_ThoroughfareNumberRange0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test53 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; thoroughfare_ThoroughfareNumberRange0 . setNumberRangeOccurrence ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test54 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberFrom thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0 = thoroughfare_ThoroughfareNumberRange0 . getThoroughfareNumberFrom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test55 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberTo thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 = new Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberTo ( ) ; thoroughfare_ThoroughfareNumberRange0 . setThoroughfareNumberTo ( thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test56 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; thoroughfare_ThoroughfareNumberRange0 . setIndicatorOccurrence ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setIndicatorOccurrence ( String value ) { this . indicatorOccurrence = value ; }
void test57 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; String string0 = thoroughfare_ThoroughfareNumberRange0 . getNumberRangeOccurrence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test58 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; thoroughfare_ThoroughfareNumberRange0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setType ( String value ) { this . type = value ; }
void test59 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; thoroughfare_ThoroughfareNumberRange0 . setSeparator ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicatorOccurrence ( ) { return indicatorOccurrence ; }
void test60 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; String string0 = thoroughfare_ThoroughfareNumberRange0 . getIndicatorOccurrence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicatorOccurrence ( ) { return indicatorOccurrence ; }
void test61 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; String string0 = thoroughfare_ThoroughfareNumberRange0 . getSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test62 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; String string0 = thoroughfare_ThoroughfareNumberRange0 . getIndicator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test63 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; thoroughfare_ThoroughfareNumberRange0 . setThoroughfareNumberFrom ( ( Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberFrom ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test64 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; List < AddressLine > list0 = thoroughfare0 . getAddressLine ( ) ; List < AddressLine > list1 = thoroughfare0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test65 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; List < Object > list0 = thoroughfare0 . getThoroughfareNumberOrThoroughfareNumberRange ( ) ; List < Object > list1 = thoroughfare0 . getThoroughfareNumberOrThoroughfareNumberRange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getThoroughfareNumberOrThoroughfareNumberRange ( ) { if ( thoroughfareNumberOrThoroughfareNumberRange = = null ) { thoroughfareNumberOrThoroughfareNumberRange = new ArrayList < Object > ( ) ; } return this . thoroughfareNumberOrThoroughfareNumberRange ; }
void test66 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; List < ThoroughfareNumberPrefix > list0 = thoroughfare0 . getThoroughfareNumberPrefix ( ) ; List < ThoroughfareNumberPrefix > list1 = thoroughfare0 . getThoroughfareNumberPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ThoroughfareNumberPrefix > getThoroughfareNumberPrefix ( ) { if ( thoroughfareNumberPrefix = = null ) { thoroughfareNumberPrefix = new ArrayList < ThoroughfareNumberPrefix > ( ) ; } return this . thoroughfareNumberPrefix ; }
void test67 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; List < ThoroughfareNumberSuffix > list0 = thoroughfare0 . getThoroughfareNumberSuffix ( ) ; List < ThoroughfareNumberSuffix > list1 = thoroughfare0 . getThoroughfareNumberSuffix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ThoroughfareNumberSuffix > getThoroughfareNumberSuffix ( ) { if ( thoroughfareNumberSuffix = = null ) { thoroughfareNumberSuffix = new ArrayList < ThoroughfareNumberSuffix > ( ) ; } return this . thoroughfareNumberSuffix ; }
void test68 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; List < ThoroughfareNameType > list0 = thoroughfare0 . getThoroughfareName ( ) ; List < ThoroughfareNameType > list1 = thoroughfare0 . getThoroughfareName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ThoroughfareNameType > getThoroughfareName ( ) { if ( thoroughfareName = = null ) { thoroughfareName = new ArrayList < ThoroughfareNameType > ( ) ; } return this . thoroughfareName ; }
void test69 ( ) throws Throwable { Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; List < Object > list0 = thoroughfare0 . getAny ( ) ; List < Object > list1 = thoroughfare0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test70 ( ) throws Throwable { Thoroughfare . DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare . DependentThoroughfare ( ) ; List < AddressLine > list0 = thoroughfare_DependentThoroughfare0 . getAddressLine ( ) ; List < AddressLine > list1 = thoroughfare_DependentThoroughfare0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test71 ( ) throws Throwable { Thoroughfare . DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare . DependentThoroughfare ( ) ; List < ThoroughfareNameType > list0 = thoroughfare_DependentThoroughfare0 . getThoroughfareName ( ) ; List < ThoroughfareNameType > list1 = thoroughfare_DependentThoroughfare0 . getThoroughfareName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < ThoroughfareNameType > getThoroughfareName ( ) { if ( thoroughfareName = = null ) { thoroughfareName = new ArrayList < ThoroughfareNameType > ( ) ; } return this . thoroughfareName ; }
void test72 ( ) throws Throwable { Thoroughfare . DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare . DependentThoroughfare ( ) ; List < Object > list0 = thoroughfare_DependentThoroughfare0 . getAny ( ) ; List < Object > list1 = thoroughfare_DependentThoroughfare0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test73 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare . ThoroughfareNumberRange ( ) ; List < AddressLine > list0 = thoroughfare_ThoroughfareNumberRange0 . getAddressLine ( ) ; List < AddressLine > list1 = thoroughfare_ThoroughfareNumberRange0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test74 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberFrom thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0 = new Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberFrom ( ) ; List < Object > list0 = thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0 . getContent ( ) ; List < Object > list1 = thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test75 ( ) throws Throwable { Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberTo thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 = new Thoroughfare . ThoroughfareNumberRange . ThoroughfareNumberTo ( ) ; List < Object > list0 = thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 . getContent ( ) ; List < Object > list1 = thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test0 ( ) throws Throwable { ThoroughfarePostDirectionType thoroughfarePostDirectionType0 = new ThoroughfarePostDirectionType ( ) ; Map < QName , String > map0 = thoroughfarePostDirectionType0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test1 ( ) throws Throwable { ThoroughfarePostDirectionType thoroughfarePostDirectionType0 = new ThoroughfarePostDirectionType ( ) ; thoroughfarePostDirectionType0 . setType ( "p#eS4a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test2 ( ) throws Throwable { ThoroughfarePostDirectionType thoroughfarePostDirectionType0 = new ThoroughfarePostDirectionType ( ) ; thoroughfarePostDirectionType0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test3 ( ) throws Throwable { ThoroughfarePostDirectionType thoroughfarePostDirectionType0 = new ThoroughfarePostDirectionType ( ) ; String string0 = thoroughfarePostDirectionType0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test4 ( ) throws Throwable { ThoroughfarePostDirectionType thoroughfarePostDirectionType0 = new ThoroughfarePostDirectionType ( ) ; thoroughfarePostDirectionType0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test5 ( ) throws Throwable { ThoroughfarePostDirectionType thoroughfarePostDirectionType0 = new ThoroughfarePostDirectionType ( ) ; String string0 = thoroughfarePostDirectionType0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test6 ( ) throws Throwable { ThoroughfarePostDirectionType thoroughfarePostDirectionType0 = new ThoroughfarePostDirectionType ( ) ; String string0 = thoroughfarePostDirectionType0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test0 ( ) throws Throwable { Premise . PremiseLocation premise_PremiseLocation0 = new Premise . PremiseLocation ( ) ; Map < QName , String > map0 = premise_PremiseLocation0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test1 ( ) throws Throwable { Premise . PremiseLocation premise_PremiseLocation0 = new Premise . PremiseLocation ( ) ; String string0 = premise_PremiseLocation0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test2 ( ) throws Throwable { Premise . PremiseLocation premise_PremiseLocation0 = new Premise . PremiseLocation ( ) ; premise_PremiseLocation0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test3 ( ) throws Throwable { Premise . PremiseLocation premise_PremiseLocation0 = new Premise . PremiseLocation ( ) ; premise_PremiseLocation0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test4 ( ) throws Throwable { Premise . PremiseLocation premise_PremiseLocation0 = new Premise . PremiseLocation ( ) ; String string0 = premise_PremiseLocation0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test5 ( ) throws Throwable { Premise . PremiseName premise_PremiseName0 = new Premise . PremiseName ( ) ; premise_PremiseName0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test6 ( ) throws Throwable { Premise . PremiseName premise_PremiseName0 = new Premise . PremiseName ( ) ; premise_PremiseName0 . setContent ( "Sc : ( n` + g%^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test7 ( ) throws Throwable { Premise . PremiseName premise_PremiseName0 = new Premise . PremiseName ( ) ; Map < QName , String > map0 = premise_PremiseName0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test8 ( ) throws Throwable { Premise . PremiseName premise_PremiseName0 = new Premise . PremiseName ( ) ; premise_PremiseName0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeOccurrence ( ) { return typeOccurrence ; }
void test9 ( ) throws Throwable { Premise . PremiseName premise_PremiseName0 = new Premise . PremiseName ( ) ; String string0 = premise_PremiseName0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test10 ( ) throws Throwable { Premise . PremiseName premise_PremiseName0 = new Premise . PremiseName ( ) ; String string0 = premise_PremiseName0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test11 ( ) throws Throwable { Premise . PremiseName premise_PremiseName0 = new Premise . PremiseName ( ) ; premise_PremiseName0 . setTypeOccurrence ( "8 ] dd ( Y% > = ~0%6NKZ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test12 ( ) throws Throwable { Premise . PremiseName premise_PremiseName0 = new Premise . PremiseName ( ) ; String string0 = premise_PremiseName0 . getTypeOccurrence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeOccurrence ( ) { return typeOccurrence ; }
void test13 ( ) throws Throwable { Premise . PremiseName premise_PremiseName0 = new Premise . PremiseName ( ) ; String string0 = premise_PremiseName0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test14 ( ) throws Throwable { Premise . PremiseNumberRange . PremiseNumberRangeFrom premise_PremiseNumberRange_PremiseNumberRangeFrom0 = new Premise . PremiseNumberRange . PremiseNumberRangeFrom ( ) ; List < AddressLine > list0 = premise_PremiseNumberRange_PremiseNumberRangeFrom0 . getAddressLine ( ) ; List < AddressLine > list1 = premise_PremiseNumberRange_PremiseNumberRangeFrom0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test15 ( ) throws Throwable { Premise . PremiseNumberRange premise_PremiseNumberRange0 = new Premise . PremiseNumberRange ( ) ; premise_PremiseNumberRange0 . setNumberRangeOccurence ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test16 ( ) throws Throwable { Premise . PremiseNumberRange premise_PremiseNumberRange0 = new Premise . PremiseNumberRange ( ) ; String string0 = premise_PremiseNumberRange0 . getRangeType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test17 ( ) throws Throwable { Premise . PremiseNumberRange premise_PremiseNumberRange0 = new Premise . PremiseNumberRange ( ) ; String string0 = premise_PremiseNumberRange0 . getNumberRangeOccurence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test18 ( ) throws Throwable { Premise . PremiseNumberRange premise_PremiseNumberRange0 = new Premise . PremiseNumberRange ( ) ; premise_PremiseNumberRange0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test19 ( ) throws Throwable { Premise . PremiseNumberRange premise_PremiseNumberRange0 = new Premise . PremiseNumberRange ( ) ; premise_PremiseNumberRange0 . setRangeType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test20 ( ) throws Throwable { Premise . PremiseNumberRange premise_PremiseNumberRange0 = new Premise . PremiseNumberRange ( ) ; premise_PremiseNumberRange0 . setIndicator ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setIndicator ( String value ) { this . indicator = value ; }
void test21 ( ) throws Throwable { Premise . PremiseNumberRange premise_PremiseNumberRange0 = new Premise . PremiseNumberRange ( ) ; Premise . PremiseNumberRange . PremiseNumberRangeTo premise_PremiseNumberRange_PremiseNumberRangeTo0 = new Premise . PremiseNumberRange . PremiseNumberRangeTo ( ) ; premise_PremiseNumberRange0 . setPremiseNumberRangeTo ( premise_PremiseNumberRange_PremiseNumberRangeTo0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test22 ( ) throws Throwable { Premise . PremiseNumberRange premise_PremiseNumberRange0 = new Premise . PremiseNumberRange ( ) ; String string0 = premise_PremiseNumberRange0 . getIndicatorOccurence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test23 ( ) throws Throwable { Premise . PremiseNumberRange premise_PremiseNumberRange0 = new Premise . PremiseNumberRange ( ) ; Premise . PremiseNumberRange . PremiseNumberRangeFrom premise_PremiseNumberRange_PremiseNumberRangeFrom0 = premise_PremiseNumberRange0 . getPremiseNumberRangeFrom ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test24 ( ) throws Throwable { Premise . PremiseNumberRange premise_PremiseNumberRange0 = new Premise . PremiseNumberRange ( ) ; premise_PremiseNumberRange0 . setIndicatorOccurence ( " " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test25 ( ) throws Throwable { Premise . PremiseNumberRange premise_PremiseNumberRange0 = new Premise . PremiseNumberRange ( ) ; premise_PremiseNumberRange0 . setSeparator ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test26 ( ) throws Throwable { Premise . PremiseNumberRange premise_PremiseNumberRange0 = new Premise . PremiseNumberRange ( ) ; String string0 = premise_PremiseNumberRange0 . getIndicator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test27 ( ) throws Throwable { Premise . PremiseNumberRange premise_PremiseNumberRange0 = new Premise . PremiseNumberRange ( ) ; premise_PremiseNumberRange0 . setPremiseNumberRangeFrom ( ( Premise . PremiseNumberRange . PremiseNumberRangeFrom ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test28 ( ) throws Throwable { Premise . PremiseNumberRange premise_PremiseNumberRange0 = new Premise . PremiseNumberRange ( ) ; String string0 = premise_PremiseNumberRange0 . getSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test29 ( ) throws Throwable { Premise . PremiseNumberRange premise_PremiseNumberRange0 = new Premise . PremiseNumberRange ( ) ; Premise . PremiseNumberRange . PremiseNumberRangeTo premise_PremiseNumberRange_PremiseNumberRangeTo0 = premise_PremiseNumberRange0 . getPremiseNumberRangeTo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test30 ( ) throws Throwable { Premise . PremiseNumberRange premise_PremiseNumberRange0 = new Premise . PremiseNumberRange ( ) ; String string0 = premise_PremiseNumberRange0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test31 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; FirmType firmType0 = new FirmType ( ) ; premise0 . setFirm ( firmType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPremiseDependency ( ) { return premiseDependency ; }
void test32 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; FirmType firmType0 = premise0 . getFirm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FirmType getFirm ( ) { return firm ; }
void test33 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; premise0 . setPremiseDependency ( "^`YAp : ~O^q - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPremiseDependencyType ( ) { return premiseDependencyType ; }
void test34 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; premise0 . setPremiseLocation ( ( Premise . PremiseLocation ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPremiseDependency ( ) { return premiseDependency ; }
void test35 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; String string0 = premise0 . getPremiseThoroughfareConnector ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPremiseThoroughfareConnector ( ) { return premiseThoroughfareConnector ; }
void test36 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; premise0 . setPremiseDependencyType ( " " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPremiseDependencyType ( ) { return premiseDependencyType ; }
void test37 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; String string0 = premise0 . getPremiseDependencyType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPremiseDependencyType ( ) { return premiseDependencyType ; }
void test38 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; String string0 = premise0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test39 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; premise0 . setPremiseNumberRange ( ( Premise . PremiseNumberRange ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test40 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; PostalCode postalCode0 = premise0 . getPostalCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalCode getPostalCode ( ) { return postalCode ; }
void test41 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; Map < QName , String > map0 = premise0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test42 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; premise0 . setPremiseThoroughfareConnector ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPremiseThoroughfareConnector ( ) { return premiseThoroughfareConnector ; }
void test43 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; premise0 . setPostalCode ( ( PostalCode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPremiseDependency ( ) { return premiseDependency ; }
void test44 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; Premise . PremiseNumberRange premise_PremiseNumberRange0 = premise0 . getPremiseNumberRange ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Premise . PremiseNumberRange getPremiseNumberRange ( ) { return premiseNumberRange ; }
void test45 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; MailStopType mailStopType0 = new MailStopType ( ) ; premise0 . setMailStop ( mailStopType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test46 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; premise0 . setPremise ( ( Premise ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPremiseDependency ( ) { return premiseDependency ; }
void test47 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; premise0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPremiseDependencyType ( ) { return premiseDependencyType ; }
void test48 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; String string0 = premise0 . getPremiseDependency ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPremiseDependency ( ) { return premiseDependency ; }
void test49 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; MailStopType mailStopType0 = premise0 . getMailStop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MailStopType getMailStop ( ) { return mailStop ; }
void test50 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; Premise premise1 = premise0 . getPremise ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Premise getPremise ( ) { return premise ; }
void test51 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; Premise . PremiseLocation premise_PremiseLocation0 = premise0 . getPremiseLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Premise . PremiseLocation getPremiseLocation ( ) { return premiseLocation ; }
void test52 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; List < AddressLine > list0 = premise0 . getAddressLine ( ) ; List < AddressLine > list1 = premise0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test53 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; List < Premise . PremiseName > list0 = premise0 . getPremiseName ( ) ; List < Premise . PremiseName > list1 = premise0 . getPremiseName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Premise . PremiseName > getPremiseName ( ) { if ( premiseName = = null ) { premiseName = new ArrayList < Premise . PremiseName > ( ) ; } return this . premiseName ; }
void test54 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; List < PremiseNumber > list0 = premise0 . getPremiseNumber ( ) ; List < PremiseNumber > list1 = premise0 . getPremiseNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < PremiseNumber > getPremiseNumber ( ) { if ( premiseNumber = = null ) { premiseNumber = new ArrayList < PremiseNumber > ( ) ; } return this . premiseNumber ; }
void test55 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; List < PremiseNumberPrefix > list0 = premise0 . getPremiseNumberPrefix ( ) ; List < PremiseNumberPrefix > list1 = premise0 . getPremiseNumberPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < PremiseNumberPrefix > getPremiseNumberPrefix ( ) { if ( premiseNumberPrefix = = null ) { premiseNumberPrefix = new ArrayList < PremiseNumberPrefix > ( ) ; } return this . premiseNumberPrefix ; }
void test56 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; List < PremiseNumberSuffix > list0 = premise0 . getPremiseNumberSuffix ( ) ; List < PremiseNumberSuffix > list1 = premise0 . getPremiseNumberSuffix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < PremiseNumberSuffix > getPremiseNumberSuffix ( ) { if ( premiseNumberSuffix = = null ) { premiseNumberSuffix = new ArrayList < PremiseNumberSuffix > ( ) ; } return this . premiseNumberSuffix ; }
void test57 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; List < BuildingNameType > list0 = premise0 . getBuildingName ( ) ; List < BuildingNameType > list1 = premise0 . getBuildingName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BuildingNameType > getBuildingName ( ) { if ( buildingName = = null ) { buildingName = new ArrayList < BuildingNameType > ( ) ; } return this . buildingName ; }
void test58 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; List < SubPremiseType > list0 = premise0 . getSubPremise ( ) ; List < SubPremiseType > list1 = premise0 . getSubPremise ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < SubPremiseType > getSubPremise ( ) { if ( subPremise = = null ) { subPremise = new ArrayList < SubPremiseType > ( ) ; } return this . subPremise ; }
void test59 ( ) throws Throwable { Premise premise0 = new Premise ( ) ; List < Object > list0 = premise0 . getAny ( ) ; List < Object > list1 = premise0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test60 ( ) throws Throwable { Premise . PremiseNumberRange . PremiseNumberRangeFrom premise_PremiseNumberRange_PremiseNumberRangeFrom0 = new Premise . PremiseNumberRange . PremiseNumberRangeFrom ( ) ; List < PremiseNumberPrefix > list0 = premise_PremiseNumberRange_PremiseNumberRangeFrom0 . getPremiseNumberPrefix ( ) ; List < PremiseNumberPrefix > list1 = premise_PremiseNumberRange_PremiseNumberRangeFrom0 . getPremiseNumberPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < PremiseNumberPrefix > getPremiseNumberPrefix ( ) { if ( premiseNumberPrefix = = null ) { premiseNumberPrefix = new ArrayList < PremiseNumberPrefix > ( ) ; } return this . premiseNumberPrefix ; }
void test61 ( ) throws Throwable { Premise . PremiseNumberRange . PremiseNumberRangeFrom premise_PremiseNumberRange_PremiseNumberRangeFrom0 = new Premise . PremiseNumberRange . PremiseNumberRangeFrom ( ) ; List < PremiseNumber > list0 = premise_PremiseNumberRange_PremiseNumberRangeFrom0 . getPremiseNumber ( ) ; List < PremiseNumber > list1 = premise_PremiseNumberRange_PremiseNumberRangeFrom0 . getPremiseNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < PremiseNumber > getPremiseNumber ( ) { if ( premiseNumber = = null ) { premiseNumber = new ArrayList < PremiseNumber > ( ) ; } return this . premiseNumber ; }
void test62 ( ) throws Throwable { Premise . PremiseNumberRange . PremiseNumberRangeFrom premise_PremiseNumberRange_PremiseNumberRangeFrom0 = new Premise . PremiseNumberRange . PremiseNumberRangeFrom ( ) ; List < PremiseNumberSuffix > list0 = premise_PremiseNumberRange_PremiseNumberRangeFrom0 . getPremiseNumberSuffix ( ) ; List < PremiseNumberSuffix > list1 = premise_PremiseNumberRange_PremiseNumberRangeFrom0 . getPremiseNumberSuffix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < PremiseNumberSuffix > getPremiseNumberSuffix ( ) { if ( premiseNumberSuffix = = null ) { premiseNumberSuffix = new ArrayList < PremiseNumberSuffix > ( ) ; } return this . premiseNumberSuffix ; }
void test63 ( ) throws Throwable { Premise . PremiseNumberRange . PremiseNumberRangeTo premise_PremiseNumberRange_PremiseNumberRangeTo0 = new Premise . PremiseNumberRange . PremiseNumberRangeTo ( ) ; List < AddressLine > list0 = premise_PremiseNumberRange_PremiseNumberRangeTo0 . getAddressLine ( ) ; List < AddressLine > list1 = premise_PremiseNumberRange_PremiseNumberRangeTo0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test64 ( ) throws Throwable { Premise . PremiseNumberRange . PremiseNumberRangeTo premise_PremiseNumberRange_PremiseNumberRangeTo0 = new Premise . PremiseNumberRange . PremiseNumberRangeTo ( ) ; List < PremiseNumberPrefix > list0 = premise_PremiseNumberRange_PremiseNumberRangeTo0 . getPremiseNumberPrefix ( ) ; List < PremiseNumberPrefix > list1 = premise_PremiseNumberRange_PremiseNumberRangeTo0 . getPremiseNumberPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < PremiseNumberPrefix > getPremiseNumberPrefix ( ) { if ( premiseNumberPrefix = = null ) { premiseNumberPrefix = new ArrayList < PremiseNumberPrefix > ( ) ; } return this . premiseNumberPrefix ; }
void test65 ( ) throws Throwable { Premise . PremiseNumberRange . PremiseNumberRangeTo premise_PremiseNumberRange_PremiseNumberRangeTo0 = new Premise . PremiseNumberRange . PremiseNumberRangeTo ( ) ; List < PremiseNumber > list0 = premise_PremiseNumberRange_PremiseNumberRangeTo0 . getPremiseNumber ( ) ; List < PremiseNumber > list1 = premise_PremiseNumberRange_PremiseNumberRangeTo0 . getPremiseNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < PremiseNumber > getPremiseNumber ( ) { if ( premiseNumber = = null ) { premiseNumber = new ArrayList < PremiseNumber > ( ) ; } return this . premiseNumber ; }
void test66 ( ) throws Throwable { Premise . PremiseNumberRange . PremiseNumberRangeTo premise_PremiseNumberRange_PremiseNumberRangeTo0 = new Premise . PremiseNumberRange . PremiseNumberRangeTo ( ) ; List < PremiseNumberSuffix > list0 = premise_PremiseNumberRange_PremiseNumberRangeTo0 . getPremiseNumberSuffix ( ) ; List < PremiseNumberSuffix > list1 = premise_PremiseNumberRange_PremiseNumberRangeTo0 . getPremiseNumberSuffix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < PremiseNumberSuffix > getPremiseNumberSuffix ( ) { if ( premiseNumberSuffix = = null ) { premiseNumberSuffix = new ArrayList < PremiseNumberSuffix > ( ) ; } return this . premiseNumberSuffix ; }
void test0 ( ) throws Throwable { ThoroughfareNameType thoroughfareNameType0 = new ThoroughfareNameType ( ) ; Map < QName , String > map0 = thoroughfareNameType0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test1 ( ) throws Throwable { ThoroughfareNameType thoroughfareNameType0 = new ThoroughfareNameType ( ) ; String string0 = thoroughfareNameType0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test2 ( ) throws Throwable { ThoroughfareNameType thoroughfareNameType0 = new ThoroughfareNameType ( ) ; thoroughfareNameType0 . setType ( "p#eS4a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { ThoroughfareNameType thoroughfareNameType0 = new ThoroughfareNameType ( ) ; String string0 = thoroughfareNameType0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test4 ( ) throws Throwable { ThoroughfareNameType thoroughfareNameType0 = new ThoroughfareNameType ( ) ; String string0 = thoroughfareNameType0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test5 ( ) throws Throwable { ThoroughfareNameType thoroughfareNameType0 = new ThoroughfareNameType ( ) ; thoroughfareNameType0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test6 ( ) throws Throwable { ThoroughfareNameType thoroughfareNameType0 = new ThoroughfareNameType ( ) ; thoroughfareNameType0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test0 ( ) throws Throwable { PremiseNumberSuffix premiseNumberSuffix0 = new PremiseNumberSuffix ( ) ; premiseNumberSuffix0 . setNumberSuffixSeparator ( "yxBk2 : On [ jIl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test1 ( ) throws Throwable { PremiseNumberSuffix premiseNumberSuffix0 = new PremiseNumberSuffix ( ) ; String string0 = premiseNumberSuffix0 . getNumberSuffixSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberSuffixSeparator ( ) { return numberSuffixSeparator ; }
void test2 ( ) throws Throwable { PremiseNumberSuffix premiseNumberSuffix0 = new PremiseNumberSuffix ( ) ; premiseNumberSuffix0 . setContent ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test3 ( ) throws Throwable { PremiseNumberSuffix premiseNumberSuffix0 = new PremiseNumberSuffix ( ) ; String string0 = premiseNumberSuffix0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test4 ( ) throws Throwable { PremiseNumberSuffix premiseNumberSuffix0 = new PremiseNumberSuffix ( ) ; Map < QName , String > map0 = premiseNumberSuffix0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test5 ( ) throws Throwable { PremiseNumberSuffix premiseNumberSuffix0 = new PremiseNumberSuffix ( ) ; premiseNumberSuffix0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test6 ( ) throws Throwable { PremiseNumberSuffix premiseNumberSuffix0 = new PremiseNumberSuffix ( ) ; String string0 = premiseNumberSuffix0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test7 ( ) throws Throwable { PremiseNumberSuffix premiseNumberSuffix0 = new PremiseNumberSuffix ( ) ; premiseNumberSuffix0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test8 ( ) throws Throwable { PremiseNumberSuffix premiseNumberSuffix0 = new PremiseNumberSuffix ( ) ; String string0 = premiseNumberSuffix0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test0 ( ) throws Throwable { PostBox . PostBoxNumber postBox_PostBoxNumber0 = new PostBox . PostBoxNumber ( ) ; postBox_PostBoxNumber0 . setCode ( "9 + u ! #jYCY < _x ] E [ " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test1 ( ) throws Throwable { PostBox . PostBoxNumber postBox_PostBoxNumber0 = new PostBox . PostBoxNumber ( ) ; String string0 = postBox_PostBoxNumber0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test2 ( ) throws Throwable { PostBox . PostBoxNumber postBox_PostBoxNumber0 = new PostBox . PostBoxNumber ( ) ; postBox_PostBoxNumber0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test3 ( ) throws Throwable { PostBox . PostBoxNumber postBox_PostBoxNumber0 = new PostBox . PostBoxNumber ( ) ; String string0 = postBox_PostBoxNumber0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test4 ( ) throws Throwable { PostBox . PostBoxNumber postBox_PostBoxNumber0 = new PostBox . PostBoxNumber ( ) ; Map < QName , String > map0 = postBox_PostBoxNumber0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test5 ( ) throws Throwable { PostBox . PostBoxNumberPrefix postBox_PostBoxNumberPrefix0 = new PostBox . PostBoxNumberPrefix ( ) ; Map < QName , String > map0 = postBox_PostBoxNumberPrefix0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test6 ( ) throws Throwable { PostBox . PostBoxNumberPrefix postBox_PostBoxNumberPrefix0 = new PostBox . PostBoxNumberPrefix ( ) ; String string0 = postBox_PostBoxNumberPrefix0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test7 ( ) throws Throwable { PostBox . PostBoxNumberPrefix postBox_PostBoxNumberPrefix0 = new PostBox . PostBoxNumberPrefix ( ) ; String string0 = postBox_PostBoxNumberPrefix0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test8 ( ) throws Throwable { PostBox . PostBoxNumberPrefix postBox_PostBoxNumberPrefix0 = new PostBox . PostBoxNumberPrefix ( ) ; postBox_PostBoxNumberPrefix0 . setNumberPrefixSeparator ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test9 ( ) throws Throwable { PostBox . PostBoxNumberPrefix postBox_PostBoxNumberPrefix0 = new PostBox . PostBoxNumberPrefix ( ) ; postBox_PostBoxNumberPrefix0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberPrefixSeparator ( ) { return numberPrefixSeparator ; }
void test10 ( ) throws Throwable { PostBox . PostBoxNumberPrefix postBox_PostBoxNumberPrefix0 = new PostBox . PostBoxNumberPrefix ( ) ; postBox_PostBoxNumberPrefix0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test11 ( ) throws Throwable { PostBox . PostBoxNumberPrefix postBox_PostBoxNumberPrefix0 = new PostBox . PostBoxNumberPrefix ( ) ; String string0 = postBox_PostBoxNumberPrefix0 . getNumberPrefixSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberPrefixSeparator ( ) { return numberPrefixSeparator ; }
void test12 ( ) throws Throwable { PostBox . PostBoxNumberSuffix postBox_PostBoxNumberSuffix0 = new PostBox . PostBoxNumberSuffix ( ) ; Map < QName , String > map0 = postBox_PostBoxNumberSuffix0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test13 ( ) throws Throwable { PostBox . PostBoxNumberSuffix postBox_PostBoxNumberSuffix0 = new PostBox . PostBoxNumberSuffix ( ) ; String string0 = postBox_PostBoxNumberSuffix0 . getNumberSuffixSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberSuffixSeparator ( ) { return numberSuffixSeparator ; }
void test14 ( ) throws Throwable { PostBox . PostBoxNumberSuffix postBox_PostBoxNumberSuffix0 = new PostBox . PostBoxNumberSuffix ( ) ; String string0 = postBox_PostBoxNumberSuffix0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test15 ( ) throws Throwable { PostBox . PostBoxNumberSuffix postBox_PostBoxNumberSuffix0 = new PostBox . PostBoxNumberSuffix ( ) ; String string0 = postBox_PostBoxNumberSuffix0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test16 ( ) throws Throwable { PostBox . PostBoxNumberSuffix postBox_PostBoxNumberSuffix0 = new PostBox . PostBoxNumberSuffix ( ) ; postBox_PostBoxNumberSuffix0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test17 ( ) throws Throwable { PostBox . PostBoxNumberSuffix postBox_PostBoxNumberSuffix0 = new PostBox . PostBoxNumberSuffix ( ) ; postBox_PostBoxNumberSuffix0 . setContent ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test18 ( ) throws Throwable { PostBox . PostBoxNumberSuffix postBox_PostBoxNumberSuffix0 = new PostBox . PostBoxNumberSuffix ( ) ; postBox_PostBoxNumberSuffix0 . setNumberSuffixSeparator ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test19 ( ) throws Throwable { PostBox . PostBoxNumberExtension postBox_PostBoxNumberExtension0 = new PostBox . PostBoxNumberExtension ( ) ; postBox_PostBoxNumberExtension0 . setNumberExtensionSeparator ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test20 ( ) throws Throwable { PostBox . PostBoxNumberExtension postBox_PostBoxNumberExtension0 = new PostBox . PostBoxNumberExtension ( ) ; String string0 = postBox_PostBoxNumberExtension0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test21 ( ) throws Throwable { PostBox . PostBoxNumberExtension postBox_PostBoxNumberExtension0 = new PostBox . PostBoxNumberExtension ( ) ; String string0 = postBox_PostBoxNumberExtension0 . getNumberExtensionSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test22 ( ) throws Throwable { PostBox . PostBoxNumberExtension postBox_PostBoxNumberExtension0 = new PostBox . PostBoxNumberExtension ( ) ; postBox_PostBoxNumberExtension0 . setContent ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setContent ( String value ) { this . content = value ; }
void test23 ( ) throws Throwable { PostBox . PostBoxNumberExtension postBox_PostBoxNumberExtension0 = new PostBox . PostBoxNumberExtension ( ) ; Map < QName , String > map0 = postBox_PostBoxNumberExtension0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test24 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; postBox0 . setFirm ( ( FirmType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test25 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; FirmType firmType0 = postBox0 . getFirm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FirmType getFirm ( ) { return firm ; }
void test26 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; String string0 = postBox0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test27 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; PostBox . PostBoxNumber postBox_PostBoxNumber0 = postBox0 . getPostBoxNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostBox . PostBoxNumber getPostBoxNumber ( ) { return postBoxNumber ; }
void test28 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; PostBox . PostBoxNumberExtension postBox_PostBoxNumberExtension0 = postBox0 . getPostBoxNumberExtension ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostBox . PostBoxNumberExtension getPostBoxNumberExtension ( ) { return postBoxNumberExtension ; }
void test29 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; PostBox . PostBoxNumberSuffix postBox_PostBoxNumberSuffix0 = postBox0 . getPostBoxNumberSuffix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostBox . PostBoxNumberSuffix getPostBoxNumberSuffix ( ) { return postBoxNumberSuffix ; }
void test30 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; postBox0 . setIndicator ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test31 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; String string0 = postBox0 . getIndicator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test32 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; postBox0 . setType ( "FOauY'g" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test33 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; postBox0 . setPostalCode ( ( PostalCode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test34 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; Map < QName , String > map0 = postBox0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test35 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; postBox0 . setPostBoxNumberExtension ( ( PostBox . PostBoxNumberExtension ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test36 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; postBox0 . setPostBoxNumber ( ( PostBox . PostBoxNumber ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test37 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; PostBox . PostBoxNumberSuffix postBox_PostBoxNumberSuffix0 = new PostBox . PostBoxNumberSuffix ( ) ; postBox0 . setPostBoxNumberSuffix ( postBox_PostBoxNumberSuffix0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test38 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; PostBox . PostBoxNumberPrefix postBox_PostBoxNumberPrefix0 = postBox0 . getPostBoxNumberPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostBox . PostBoxNumberPrefix getPostBoxNumberPrefix ( ) { return postBoxNumberPrefix ; }
void test39 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; PostBox . PostBoxNumberPrefix postBox_PostBoxNumberPrefix0 = new PostBox . PostBoxNumberPrefix ( ) ; postBox0 . setPostBoxNumberPrefix ( postBox_PostBoxNumberPrefix0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test40 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; PostalCode postalCode0 = postBox0 . getPostalCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalCode getPostalCode ( ) { return postalCode ; }
void test41 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; List < AddressLine > list0 = postBox0 . getAddressLine ( ) ; List < AddressLine > list1 = postBox0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test42 ( ) throws Throwable { PostBox postBox0 = new PostBox ( ) ; List < Object > list0 = postBox0 . getAny ( ) ; List < Object > list1 = postBox0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test0 ( ) throws Throwable { ThoroughfareNumberPrefix thoroughfareNumberPrefix0 = new ThoroughfareNumberPrefix ( ) ; String string0 = thoroughfareNumberPrefix0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test1 ( ) throws Throwable { ThoroughfareNumberPrefix thoroughfareNumberPrefix0 = new ThoroughfareNumberPrefix ( ) ; thoroughfareNumberPrefix0 . setNumberPrefixSeparator ( "yxBk2 : On [ jIl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test2 ( ) throws Throwable { ThoroughfareNumberPrefix thoroughfareNumberPrefix0 = new ThoroughfareNumberPrefix ( ) ; String string0 = thoroughfareNumberPrefix0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test3 ( ) throws Throwable { ThoroughfareNumberPrefix thoroughfareNumberPrefix0 = new ThoroughfareNumberPrefix ( ) ; thoroughfareNumberPrefix0 . setContent ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test4 ( ) throws Throwable { ThoroughfareNumberPrefix thoroughfareNumberPrefix0 = new ThoroughfareNumberPrefix ( ) ; String string0 = thoroughfareNumberPrefix0 . getNumberPrefixSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberPrefixSeparator ( ) { return numberPrefixSeparator ; }
void test5 ( ) throws Throwable { ThoroughfareNumberPrefix thoroughfareNumberPrefix0 = new ThoroughfareNumberPrefix ( ) ; String string0 = thoroughfareNumberPrefix0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test6 ( ) throws Throwable { ThoroughfareNumberPrefix thoroughfareNumberPrefix0 = new ThoroughfareNumberPrefix ( ) ; thoroughfareNumberPrefix0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test7 ( ) throws Throwable { ThoroughfareNumberPrefix thoroughfareNumberPrefix0 = new ThoroughfareNumberPrefix ( ) ; thoroughfareNumberPrefix0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test8 ( ) throws Throwable { ThoroughfareNumberPrefix thoroughfareNumberPrefix0 = new ThoroughfareNumberPrefix ( ) ; Map < QName , String > map0 = thoroughfareNumberPrefix0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test0 ( ) throws Throwable { Department . DepartmentName department_DepartmentName0 = new Department . DepartmentName ( ) ; department_DepartmentName0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test1 ( ) throws Throwable { Department . DepartmentName department_DepartmentName0 = new Department . DepartmentName ( ) ; String string0 = department_DepartmentName0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test2 ( ) throws Throwable { Department . DepartmentName department_DepartmentName0 = new Department . DepartmentName ( ) ; String string0 = department_DepartmentName0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test3 ( ) throws Throwable { Department . DepartmentName department_DepartmentName0 = new Department . DepartmentName ( ) ; department_DepartmentName0 . setContent ( " ( " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test4 ( ) throws Throwable { Department . DepartmentName department_DepartmentName0 = new Department . DepartmentName ( ) ; Map < QName , String > map0 = department_DepartmentName0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test5 ( ) throws Throwable { Department . DepartmentName department_DepartmentName0 = new Department . DepartmentName ( ) ; department_DepartmentName0 . setCode ( " * ej$~%c" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test6 ( ) throws Throwable { Department . DepartmentName department_DepartmentName0 = new Department . DepartmentName ( ) ; String string0 = department_DepartmentName0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test7 ( ) throws Throwable { Department department0 = new Department ( ) ; PostalCode postalCode0 = new PostalCode ( ) ; department0 . setPostalCode ( postalCode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test8 ( ) throws Throwable { Department department0 = new Department ( ) ; PostalCode postalCode0 = department0 . getPostalCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalCode getPostalCode ( ) { return postalCode ; }
void test9 ( ) throws Throwable { Department department0 = new Department ( ) ; department0 . setType ( "_~Gu`@$ = 3" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test10 ( ) throws Throwable { Department department0 = new Department ( ) ; MailStopType mailStopType0 = department0 . getMailStop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MailStopType getMailStop ( ) { return mailStop ; }
void test11 ( ) throws Throwable { Department department0 = new Department ( ) ; String string0 = department0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test12 ( ) throws Throwable { Department department0 = new Department ( ) ; Map < QName , String > map0 = department0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test13 ( ) throws Throwable { Department department0 = new Department ( ) ; MailStopType mailStopType0 = new MailStopType ( ) ; department0 . setMailStop ( mailStopType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test14 ( ) throws Throwable { Department department0 = new Department ( ) ; List < AddressLine > list0 = department0 . getAddressLine ( ) ; List < AddressLine > list1 = department0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test15 ( ) throws Throwable { Department department0 = new Department ( ) ; List < Department . DepartmentName > list0 = department0 . getDepartmentName ( ) ; List < Department . DepartmentName > list1 = department0 . getDepartmentName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Department . DepartmentName > getDepartmentName ( ) { if ( departmentName = = null ) { departmentName = new ArrayList < Department . DepartmentName > ( ) ; } return this . departmentName ; }
void test16 ( ) throws Throwable { Department department0 = new Department ( ) ; List < Object > list0 = department0 . getAny ( ) ; List < Object > list1 = department0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test0 ( ) throws Throwable { AddressLinesType addressLinesType0 = new AddressLinesType ( ) ; Map < QName , String > map0 = addressLinesType0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test1 ( ) throws Throwable { AddressLinesType addressLinesType0 = new AddressLinesType ( ) ; List < AddressLine > list0 = addressLinesType0 . getAddressLine ( ) ; List < AddressLine > list1 = addressLinesType0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test2 ( ) throws Throwable { AddressLinesType addressLinesType0 = new AddressLinesType ( ) ; List < Object > list0 = addressLinesType0 . getAny ( ) ; List < Object > list1 = addressLinesType0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test0 ( ) throws Throwable { ThoroughfareNumberSuffix thoroughfareNumberSuffix0 = new ThoroughfareNumberSuffix ( ) ; Map < QName , String > map0 = thoroughfareNumberSuffix0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test1 ( ) throws Throwable { ThoroughfareNumberSuffix thoroughfareNumberSuffix0 = new ThoroughfareNumberSuffix ( ) ; thoroughfareNumberSuffix0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test2 ( ) throws Throwable { ThoroughfareNumberSuffix thoroughfareNumberSuffix0 = new ThoroughfareNumberSuffix ( ) ; thoroughfareNumberSuffix0 . setContent ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { ThoroughfareNumberSuffix thoroughfareNumberSuffix0 = new ThoroughfareNumberSuffix ( ) ; thoroughfareNumberSuffix0 . setNumberSuffixSeparator ( "yxBk2 : On [ jIl" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test4 ( ) throws Throwable { ThoroughfareNumberSuffix thoroughfareNumberSuffix0 = new ThoroughfareNumberSuffix ( ) ; String string0 = thoroughfareNumberSuffix0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test5 ( ) throws Throwable { ThoroughfareNumberSuffix thoroughfareNumberSuffix0 = new ThoroughfareNumberSuffix ( ) ; String string0 = thoroughfareNumberSuffix0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test6 ( ) throws Throwable { ThoroughfareNumberSuffix thoroughfareNumberSuffix0 = new ThoroughfareNumberSuffix ( ) ; String string0 = thoroughfareNumberSuffix0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test7 ( ) throws Throwable { ThoroughfareNumberSuffix thoroughfareNumberSuffix0 = new ThoroughfareNumberSuffix ( ) ; String string0 = thoroughfareNumberSuffix0 . getNumberSuffixSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberSuffixSeparator ( ) { return numberSuffixSeparator ; }
void test8 ( ) throws Throwable { ThoroughfareNumberSuffix thoroughfareNumberSuffix0 = new ThoroughfareNumberSuffix ( ) ; thoroughfareNumberSuffix0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberSuffixSeparator ( ) { return numberSuffixSeparator ; }
void test0 ( ) throws Throwable { DependentLocalityType . DependentLocalityName dependentLocalityType_DependentLocalityName0 = new DependentLocalityType . DependentLocalityName ( ) ; String string0 = dependentLocalityType_DependentLocalityName0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test1 ( ) throws Throwable { DependentLocalityType . DependentLocalityName dependentLocalityType_DependentLocalityName0 = new DependentLocalityType . DependentLocalityName ( ) ; dependentLocalityType_DependentLocalityName0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test2 ( ) throws Throwable { DependentLocalityType . DependentLocalityName dependentLocalityType_DependentLocalityName0 = new DependentLocalityType . DependentLocalityName ( ) ; dependentLocalityType_DependentLocalityName0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { DependentLocalityType . DependentLocalityName dependentLocalityType_DependentLocalityName0 = new DependentLocalityType . DependentLocalityName ( ) ; String string0 = dependentLocalityType_DependentLocalityName0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test4 ( ) throws Throwable { DependentLocalityType . DependentLocalityName dependentLocalityType_DependentLocalityName0 = new DependentLocalityType . DependentLocalityName ( ) ; Map < QName , String > map0 = dependentLocalityType_DependentLocalityName0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test5 ( ) throws Throwable { DependentLocalityType . DependentLocalityName dependentLocalityType_DependentLocalityName0 = new DependentLocalityType . DependentLocalityName ( ) ; dependentLocalityType_DependentLocalityName0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test6 ( ) throws Throwable { DependentLocalityType . DependentLocalityName dependentLocalityType_DependentLocalityName0 = new DependentLocalityType . DependentLocalityName ( ) ; String string0 = dependentLocalityType_DependentLocalityName0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test7 ( ) throws Throwable { DependentLocalityType . DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = new DependentLocalityType . DependentLocalityNumber ( ) ; String string0 = dependentLocalityType_DependentLocalityNumber0 . getNameNumberOccurrence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test8 ( ) throws Throwable { DependentLocalityType . DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = new DependentLocalityType . DependentLocalityNumber ( ) ; Map < QName , String > map0 = dependentLocalityType_DependentLocalityNumber0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test9 ( ) throws Throwable { DependentLocalityType . DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = new DependentLocalityType . DependentLocalityNumber ( ) ; dependentLocalityType_DependentLocalityNumber0 . setNameNumberOccurrence ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test10 ( ) throws Throwable { DependentLocalityType . DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = new DependentLocalityType . DependentLocalityNumber ( ) ; dependentLocalityType_DependentLocalityNumber0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setContent ( String value ) { this . content = value ; }
void test11 ( ) throws Throwable { DependentLocalityType . DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = new DependentLocalityType . DependentLocalityNumber ( ) ; String string0 = dependentLocalityType_DependentLocalityNumber0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test12 ( ) throws Throwable { DependentLocalityType . DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = new DependentLocalityType . DependentLocalityNumber ( ) ; String string0 = dependentLocalityType_DependentLocalityNumber0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test13 ( ) throws Throwable { DependentLocalityType . DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = new DependentLocalityType . DependentLocalityNumber ( ) ; dependentLocalityType_DependentLocalityNumber0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setCode ( String value ) { this . code = value ; }
void test14 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; Thoroughfare thoroughfare0 = dependentLocalityType0 . getThoroughfare ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Thoroughfare getThoroughfare ( ) { return thoroughfare ; }
void test15 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; PostalRouteType postalRouteType0 = dependentLocalityType0 . getPostalRoute ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalRouteType getPostalRoute ( ) { return postalRoute ; }
void test16 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; Premise premise0 = dependentLocalityType0 . getPremise ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Premise getPremise ( ) { return premise ; }
void test17 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; dependentLocalityType0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test18 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; dependentLocalityType0 . setPostalRoute ( ( PostalRouteType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsageType ( ) { return usageType ; }
void test19 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; PostalCode postalCode0 = new PostalCode ( ) ; dependentLocalityType0 . setPostalCode ( postalCode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConnector ( ) { return connector ; }
void test20 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; PostOffice postOffice0 = new PostOffice ( ) ; dependentLocalityType0 . setPostOffice ( postOffice0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test21 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; String string0 = dependentLocalityType0 . getIndicator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test22 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; PostalCode postalCode0 = dependentLocalityType0 . getPostalCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalCode getPostalCode ( ) { return postalCode ; }
void test23 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; DependentLocalityType . DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = dependentLocalityType0 . getDependentLocalityNumber ( ) ; dependentLocalityType0 . setDependentLocalityNumber ( dependentLocalityType_DependentLocalityNumber0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsageType ( ) { return usageType ; }
void test24 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; dependentLocalityType0 . setConnector ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test25 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; dependentLocalityType0 . setLargeMailUser ( largeMailUserType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test26 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; dependentLocalityType0 . setDependentLocality ( dependentLocalityType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test27 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; dependentLocalityType0 . setPostBox ( ( PostBox ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConnector ( ) { return connector ; }
void test28 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; DependentLocalityType dependentLocalityType1 = dependentLocalityType0 . getDependentLocality ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DependentLocalityType getDependentLocality ( ) { return dependentLocality ; }
void test29 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; Map < QName , String > map0 = dependentLocalityType0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test30 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; dependentLocalityType0 . setUsageType ( "0pB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConnector ( ) { return connector ; }
void test31 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; LargeMailUserType largeMailUserType0 = dependentLocalityType0 . getLargeMailUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LargeMailUserType getLargeMailUser ( ) { return largeMailUser ; }
void test32 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; PostBox postBox0 = dependentLocalityType0 . getPostBox ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostBox getPostBox ( ) { return postBox ; }
void test33 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; dependentLocalityType0 . setPremise ( ( Premise ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsageType ( ) { return usageType ; }
void test34 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; PostOffice postOffice0 = dependentLocalityType0 . getPostOffice ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostOffice getPostOffice ( ) { return postOffice ; }
void test35 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; String string0 = dependentLocalityType0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test36 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; dependentLocalityType0 . setIndicator ( "0pB" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test37 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; String string0 = dependentLocalityType0 . getUsageType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsageType ( ) { return usageType ; }
void test38 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; dependentLocalityType0 . setThoroughfare ( thoroughfare0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsageType ( ) { return usageType ; }
void test39 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; String string0 = dependentLocalityType0 . getConnector ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getConnector ( ) { return connector ; }
void test40 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; List < AddressLine > list0 = dependentLocalityType0 . getAddressLine ( ) ; List < AddressLine > list1 = dependentLocalityType0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test41 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; List < DependentLocalityType . DependentLocalityName > list0 = dependentLocalityType0 . getDependentLocalityName ( ) ; List < DependentLocalityType . DependentLocalityName > list1 = dependentLocalityType0 . getDependentLocalityName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < DependentLocalityType . DependentLocalityName > getDependentLocalityName ( ) { if ( dependentLocalityName = = null ) { dependentLocalityName = new ArrayList < DependentLocalityType . DependentLocalityName > ( ) ; } return this . dependentLocalityName ; }
void test42 ( ) throws Throwable { DependentLocalityType dependentLocalityType0 = new DependentLocalityType ( ) ; List < Object > list0 = dependentLocalityType0 . getAny ( ) ; List < Object > list1 = dependentLocalityType0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test0 ( ) throws Throwable { CountryName countryName0 = new CountryName ( ) ; countryName0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test1 ( ) throws Throwable { CountryName countryName0 = new CountryName ( ) ; countryName0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test2 ( ) throws Throwable { CountryName countryName0 = new CountryName ( ) ; String string0 = countryName0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test3 ( ) throws Throwable { CountryName countryName0 = new CountryName ( ) ; String string0 = countryName0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test4 ( ) throws Throwable { CountryName countryName0 = new CountryName ( ) ; Map < QName , String > map0 = countryName0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test5 ( ) throws Throwable { CountryName countryName0 = new CountryName ( ) ; countryName0 . setType ( "p#eS4a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test6 ( ) throws Throwable { CountryName countryName0 = new CountryName ( ) ; String string0 = countryName0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test0 ( ) throws Throwable { ThoroughfareLeadingTypeType thoroughfareLeadingTypeType0 = new ThoroughfareLeadingTypeType ( ) ; String string0 = thoroughfareLeadingTypeType0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test1 ( ) throws Throwable { ThoroughfareLeadingTypeType thoroughfareLeadingTypeType0 = new ThoroughfareLeadingTypeType ( ) ; thoroughfareLeadingTypeType0 . setType ( "p#eS4a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test2 ( ) throws Throwable { ThoroughfareLeadingTypeType thoroughfareLeadingTypeType0 = new ThoroughfareLeadingTypeType ( ) ; thoroughfareLeadingTypeType0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { ThoroughfareLeadingTypeType thoroughfareLeadingTypeType0 = new ThoroughfareLeadingTypeType ( ) ; Map < QName , String > map0 = thoroughfareLeadingTypeType0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test4 ( ) throws Throwable { ThoroughfareLeadingTypeType thoroughfareLeadingTypeType0 = new ThoroughfareLeadingTypeType ( ) ; String string0 = thoroughfareLeadingTypeType0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test5 ( ) throws Throwable { ThoroughfareLeadingTypeType thoroughfareLeadingTypeType0 = new ThoroughfareLeadingTypeType ( ) ; String string0 = thoroughfareLeadingTypeType0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test6 ( ) throws Throwable { ThoroughfareLeadingTypeType thoroughfareLeadingTypeType0 = new ThoroughfareLeadingTypeType ( ) ; thoroughfareLeadingTypeType0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test0 ( ) throws Throwable { ThoroughfarePreDirectionType thoroughfarePreDirectionType0 = new ThoroughfarePreDirectionType ( ) ; String string0 = thoroughfarePreDirectionType0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test1 ( ) throws Throwable { ThoroughfarePreDirectionType thoroughfarePreDirectionType0 = new ThoroughfarePreDirectionType ( ) ; thoroughfarePreDirectionType0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test2 ( ) throws Throwable { ThoroughfarePreDirectionType thoroughfarePreDirectionType0 = new ThoroughfarePreDirectionType ( ) ; String string0 = thoroughfarePreDirectionType0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test3 ( ) throws Throwable { ThoroughfarePreDirectionType thoroughfarePreDirectionType0 = new ThoroughfarePreDirectionType ( ) ; thoroughfarePreDirectionType0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test4 ( ) throws Throwable { ThoroughfarePreDirectionType thoroughfarePreDirectionType0 = new ThoroughfarePreDirectionType ( ) ; String string0 = thoroughfarePreDirectionType0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test5 ( ) throws Throwable { ThoroughfarePreDirectionType thoroughfarePreDirectionType0 = new ThoroughfarePreDirectionType ( ) ; thoroughfarePreDirectionType0 . setType ( "p#eS4a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test6 ( ) throws Throwable { ThoroughfarePreDirectionType thoroughfarePreDirectionType0 = new ThoroughfarePreDirectionType ( ) ; Map < QName , String > map0 = thoroughfarePreDirectionType0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test0 ( ) throws Throwable { PostalRouteType . PostalRouteName postalRouteType_PostalRouteName0 = new PostalRouteType . PostalRouteName ( ) ; postalRouteType_PostalRouteName0 . setCode ( "$7x * Wi~F'N ] 'Y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test1 ( ) throws Throwable { PostalRouteType . PostalRouteName postalRouteType_PostalRouteName0 = new PostalRouteType . PostalRouteName ( ) ; String string0 = postalRouteType_PostalRouteName0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test2 ( ) throws Throwable { PostalRouteType . PostalRouteName postalRouteType_PostalRouteName0 = new PostalRouteType . PostalRouteName ( ) ; postalRouteType_PostalRouteName0 . setContent ( "v . HetmoQ , a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { PostalRouteType . PostalRouteName postalRouteType_PostalRouteName0 = new PostalRouteType . PostalRouteName ( ) ; String string0 = postalRouteType_PostalRouteName0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test4 ( ) throws Throwable { PostalRouteType . PostalRouteName postalRouteType_PostalRouteName0 = new PostalRouteType . PostalRouteName ( ) ; String string0 = postalRouteType_PostalRouteName0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test5 ( ) throws Throwable { PostalRouteType . PostalRouteName postalRouteType_PostalRouteName0 = new PostalRouteType . PostalRouteName ( ) ; postalRouteType_PostalRouteName0 . setType ( "jq ; U : ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test6 ( ) throws Throwable { PostalRouteType . PostalRouteName postalRouteType_PostalRouteName0 = new PostalRouteType . PostalRouteName ( ) ; Map < QName , String > map0 = postalRouteType_PostalRouteName0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test7 ( ) throws Throwable { PostalRouteType postalRouteType0 = new PostalRouteType ( ) ; postalRouteType0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test8 ( ) throws Throwable { PostalRouteType postalRouteType0 = new PostalRouteType ( ) ; String string0 = postalRouteType0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test9 ( ) throws Throwable { PostalRouteType postalRouteType0 = new PostalRouteType ( ) ; PostalRouteType . PostalRouteNumber postalRouteType_PostalRouteNumber0 = postalRouteType0 . getPostalRouteNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalRouteType . PostalRouteNumber getPostalRouteNumber ( ) { return postalRouteNumber ; }
void test10 ( ) throws Throwable { PostalRouteType postalRouteType0 = new PostalRouteType ( ) ; PostBox postBox0 = postalRouteType0 . getPostBox ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostBox getPostBox ( ) { return postBox ; }
void test11 ( ) throws Throwable { PostalRouteType postalRouteType0 = new PostalRouteType ( ) ; postalRouteType0 . setPostBox ( ( PostBox ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test12 ( ) throws Throwable { PostalRouteType postalRouteType0 = new PostalRouteType ( ) ; postalRouteType0 . setPostalRouteNumber ( ( PostalRouteType . PostalRouteNumber ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test13 ( ) throws Throwable { PostalRouteType postalRouteType0 = new PostalRouteType ( ) ; Map < QName , String > map0 = postalRouteType0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test14 ( ) throws Throwable { PostalRouteType . PostalRouteNumber postalRouteType_PostalRouteNumber0 = new PostalRouteType . PostalRouteNumber ( ) ; postalRouteType_PostalRouteNumber0 . setContent ( " ? JVg" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test15 ( ) throws Throwable { PostalRouteType . PostalRouteNumber postalRouteType_PostalRouteNumber0 = new PostalRouteType . PostalRouteNumber ( ) ; String string0 = postalRouteType_PostalRouteNumber0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test16 ( ) throws Throwable { PostalRouteType . PostalRouteNumber postalRouteType_PostalRouteNumber0 = new PostalRouteType . PostalRouteNumber ( ) ; Map < QName , String > map0 = postalRouteType_PostalRouteNumber0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test17 ( ) throws Throwable { PostalRouteType . PostalRouteNumber postalRouteType_PostalRouteNumber0 = new PostalRouteType . PostalRouteNumber ( ) ; String string0 = postalRouteType_PostalRouteNumber0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test18 ( ) throws Throwable { PostalRouteType . PostalRouteNumber postalRouteType_PostalRouteNumber0 = new PostalRouteType . PostalRouteNumber ( ) ; postalRouteType_PostalRouteNumber0 . setCode ( "I_d1KS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test19 ( ) throws Throwable { PostalRouteType postalRouteType0 = new PostalRouteType ( ) ; List < AddressLine > list0 = postalRouteType0 . getAddressLine ( ) ; List < AddressLine > list1 = postalRouteType0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test20 ( ) throws Throwable { PostalRouteType postalRouteType0 = new PostalRouteType ( ) ; List < PostalRouteType . PostalRouteName > list0 = postalRouteType0 . getPostalRouteName ( ) ; List < PostalRouteType . PostalRouteName > list1 = postalRouteType0 . getPostalRouteName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < PostalRouteType . PostalRouteName > getPostalRouteName ( ) { if ( postalRouteName = = null ) { postalRouteName = new ArrayList < PostalRouteType . PostalRouteName > ( ) ; } return this . postalRouteName ; }
void test21 ( ) throws Throwable { PostalRouteType postalRouteType0 = new PostalRouteType ( ) ; List < Object > list0 = postalRouteType0 . getAny ( ) ; List < Object > list1 = postalRouteType0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test0 ( ) throws Throwable { PostalCode . PostalCodeNumber postalCode_PostalCodeNumber0 = new PostalCode . PostalCodeNumber ( ) ; String string0 = postalCode_PostalCodeNumber0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test1 ( ) throws Throwable { PostalCode . PostalCodeNumber postalCode_PostalCodeNumber0 = new PostalCode . PostalCodeNumber ( ) ; Map < QName , String > map0 = postalCode_PostalCodeNumber0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test2 ( ) throws Throwable { PostalCode . PostalCodeNumber postalCode_PostalCodeNumber0 = new PostalCode . PostalCodeNumber ( ) ; String string0 = postalCode_PostalCodeNumber0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { PostalCode . PostalCodeNumber postalCode_PostalCodeNumber0 = new PostalCode . PostalCodeNumber ( ) ; String string0 = postalCode_PostalCodeNumber0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test4 ( ) throws Throwable { PostalCode . PostalCodeNumber postalCode_PostalCodeNumber0 = new PostalCode . PostalCodeNumber ( ) ; postalCode_PostalCodeNumber0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test5 ( ) throws Throwable { PostalCode . PostalCodeNumber postalCode_PostalCodeNumber0 = new PostalCode . PostalCodeNumber ( ) ; postalCode_PostalCodeNumber0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test6 ( ) throws Throwable { PostalCode . PostalCodeNumber postalCode_PostalCodeNumber0 = new PostalCode . PostalCodeNumber ( ) ; postalCode_PostalCodeNumber0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test7 ( ) throws Throwable { PostalCode postalCode0 = new PostalCode ( ) ; String string0 = postalCode0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test8 ( ) throws Throwable { PostalCode postalCode0 = new PostalCode ( ) ; Map < QName , String > map0 = postalCode0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test9 ( ) throws Throwable { PostalCode postalCode0 = new PostalCode ( ) ; postalCode0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test10 ( ) throws Throwable { PostalCode postalCode0 = new PostalCode ( ) ; postalCode0 . setPostTown ( ( PostalCode . PostTown ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test11 ( ) throws Throwable { PostalCode postalCode0 = new PostalCode ( ) ; PostalCode . PostTown postalCode_PostTown0 = postalCode0 . getPostTown ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalCode . PostTown getPostTown ( ) { return postTown ; }
void test12 ( ) throws Throwable { PostalCode . PostTown postalCode_PostTown0 = new PostalCode . PostTown ( ) ; postalCode_PostTown0 . setPostTownSuffix ( ( PostalCode . PostTown . PostTownSuffix ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test13 ( ) throws Throwable { PostalCode . PostTown postalCode_PostTown0 = new PostalCode . PostTown ( ) ; Map < QName , String > map0 = postalCode_PostTown0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test14 ( ) throws Throwable { PostalCode . PostTown postalCode_PostTown0 = new PostalCode . PostTown ( ) ; PostalCode . PostTown . PostTownSuffix postalCode_PostTown_PostTownSuffix0 = postalCode_PostTown0 . getPostTownSuffix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test15 ( ) throws Throwable { PostalCode . PostTown postalCode_PostTown0 = new PostalCode . PostTown ( ) ; postalCode_PostTown0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test16 ( ) throws Throwable { PostalCode . PostTown postalCode_PostTown0 = new PostalCode . PostTown ( ) ; String string0 = postalCode_PostTown0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test17 ( ) throws Throwable { PostalCode . PostTown . PostTownSuffix postalCode_PostTown_PostTownSuffix0 = new PostalCode . PostTown . PostTownSuffix ( ) ; String string0 = postalCode_PostTown_PostTownSuffix0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test18 ( ) throws Throwable { PostalCode . PostTown . PostTownSuffix postalCode_PostTown_PostTownSuffix0 = new PostalCode . PostTown . PostTownSuffix ( ) ; String string0 = postalCode_PostTown_PostTownSuffix0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test19 ( ) throws Throwable { PostalCode . PostTown . PostTownSuffix postalCode_PostTown_PostTownSuffix0 = new PostalCode . PostTown . PostTownSuffix ( ) ; postalCode_PostTown_PostTownSuffix0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test20 ( ) throws Throwable { PostalCode . PostTown . PostTownSuffix postalCode_PostTown_PostTownSuffix0 = new PostalCode . PostTown . PostTownSuffix ( ) ; postalCode_PostTown_PostTownSuffix0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test21 ( ) throws Throwable { PostalCode . PostTown . PostTownSuffix postalCode_PostTown_PostTownSuffix0 = new PostalCode . PostTown . PostTownSuffix ( ) ; Map < QName , String > map0 = postalCode_PostTown_PostTownSuffix0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test22 ( ) throws Throwable { PostalCode . PostalCodeNumberExtension postalCode_PostalCodeNumberExtension0 = new PostalCode . PostalCodeNumberExtension ( ) ; postalCode_PostalCodeNumberExtension0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test23 ( ) throws Throwable { PostalCode . PostalCodeNumberExtension postalCode_PostalCodeNumberExtension0 = new PostalCode . PostalCodeNumberExtension ( ) ; postalCode_PostalCodeNumberExtension0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test24 ( ) throws Throwable { PostalCode . PostalCodeNumberExtension postalCode_PostalCodeNumberExtension0 = new PostalCode . PostalCodeNumberExtension ( ) ; String string0 = postalCode_PostalCodeNumberExtension0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test25 ( ) throws Throwable { PostalCode . PostalCodeNumberExtension postalCode_PostalCodeNumberExtension0 = new PostalCode . PostalCodeNumberExtension ( ) ; String string0 = postalCode_PostalCodeNumberExtension0 . getNumberExtensionSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test26 ( ) throws Throwable { PostalCode . PostalCodeNumberExtension postalCode_PostalCodeNumberExtension0 = new PostalCode . PostalCodeNumberExtension ( ) ; postalCode_PostalCodeNumberExtension0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test27 ( ) throws Throwable { PostalCode . PostalCodeNumberExtension postalCode_PostalCodeNumberExtension0 = new PostalCode . PostalCodeNumberExtension ( ) ; String string0 = postalCode_PostalCodeNumberExtension0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test28 ( ) throws Throwable { PostalCode . PostalCodeNumberExtension postalCode_PostalCodeNumberExtension0 = new PostalCode . PostalCodeNumberExtension ( ) ; String string0 = postalCode_PostalCodeNumberExtension0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test29 ( ) throws Throwable { PostalCode . PostalCodeNumberExtension postalCode_PostalCodeNumberExtension0 = new PostalCode . PostalCodeNumberExtension ( ) ; postalCode_PostalCodeNumberExtension0 . setNumberExtensionSeparator ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test30 ( ) throws Throwable { PostalCode . PostalCodeNumberExtension postalCode_PostalCodeNumberExtension0 = new PostalCode . PostalCodeNumberExtension ( ) ; Map < QName , String > map0 = postalCode_PostalCodeNumberExtension0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test31 ( ) throws Throwable { PostalCode postalCode0 = new PostalCode ( ) ; List < AddressLine > list0 = postalCode0 . getAddressLine ( ) ; List < AddressLine > list1 = postalCode0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test32 ( ) throws Throwable { PostalCode postalCode0 = new PostalCode ( ) ; List < PostalCode . PostalCodeNumber > list0 = postalCode0 . getPostalCodeNumber ( ) ; List < PostalCode . PostalCodeNumber > list1 = postalCode0 . getPostalCodeNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < PostalCode . PostalCodeNumber > getPostalCodeNumber ( ) { if ( postalCodeNumber = = null ) { postalCodeNumber = new ArrayList < PostalCode . PostalCodeNumber > ( ) ; } return this . postalCodeNumber ; }
void test33 ( ) throws Throwable { PostalCode postalCode0 = new PostalCode ( ) ; List < PostalCode . PostalCodeNumberExtension > list0 = postalCode0 . getPostalCodeNumberExtension ( ) ; List < PostalCode . PostalCodeNumberExtension > list1 = postalCode0 . getPostalCodeNumberExtension ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < PostalCode . PostalCodeNumberExtension > getPostalCodeNumberExtension ( ) { if ( postalCodeNumberExtension = = null ) { postalCodeNumberExtension = new ArrayList < PostalCode . PostalCodeNumberExtension > ( ) ; } return this . postalCodeNumberExtension ; }
void test34 ( ) throws Throwable { PostalCode postalCode0 = new PostalCode ( ) ; List < Object > list0 = postalCode0 . getAny ( ) ; List < Object > list1 = postalCode0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test35 ( ) throws Throwable { PostalCode . PostTown postalCode_PostTown0 = new PostalCode . PostTown ( ) ; List < AddressLine > list0 = postalCode_PostTown0 . getAddressLine ( ) ; List < AddressLine > list1 = postalCode_PostTown0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test36 ( ) throws Throwable { PostalCode . PostTown postalCode_PostTown0 = new PostalCode . PostTown ( ) ; List < PostalCode . PostTown . PostTownName > list0 = postalCode_PostTown0 . getPostTownName ( ) ; List < PostalCode . PostTown . PostTownName > list1 = postalCode_PostTown0 . getPostTownName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLatitude addressDetails_PostalServiceElements_AddressLatitude0 = new AddressDetails . PostalServiceElements . AddressLatitude ( ) ; String string0 = addressDetails_PostalServiceElements_AddressLatitude0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test1 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLatitude addressDetails_PostalServiceElements_AddressLatitude0 = new AddressDetails . PostalServiceElements . AddressLatitude ( ) ; addressDetails_PostalServiceElements_AddressLatitude0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test2 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLatitude addressDetails_PostalServiceElements_AddressLatitude0 = new AddressDetails . PostalServiceElements . AddressLatitude ( ) ; addressDetails_PostalServiceElements_AddressLatitude0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test3 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLatitude addressDetails_PostalServiceElements_AddressLatitude0 = new AddressDetails . PostalServiceElements . AddressLatitude ( ) ; Map < QName , String > map0 = addressDetails_PostalServiceElements_AddressLatitude0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test4 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLatitude addressDetails_PostalServiceElements_AddressLatitude0 = new AddressDetails . PostalServiceElements . AddressLatitude ( ) ; String string0 = addressDetails_PostalServiceElements_AddressLatitude0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test5 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLatitude addressDetails_PostalServiceElements_AddressLatitude0 = new AddressDetails . PostalServiceElements . AddressLatitude ( ) ; addressDetails_PostalServiceElements_AddressLatitude0 . setType ( "laa } mb~ < . 1" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test6 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; addressDetails0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test7 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; AddressDetails . Country addressDetails_Country0 = addressDetails0 . getCountry ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AddressDetails . Country getCountry ( ) { return country ; }
void test8 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; String string0 = addressDetails0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test9 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; AdministrativeArea administrativeArea0 = addressDetails0 . getAdministrativeArea ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AdministrativeArea getAdministrativeArea ( ) { return administrativeArea ; }
void test10 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = addressDetails0 . getPostalServiceElements ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AddressDetails . PostalServiceElements getPostalServiceElements ( ) { return postalServiceElements ; }
void test11 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; addressDetails0 . setAdministrativeArea ( ( AdministrativeArea ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValidToDate ( ) { return validToDate ; }
void test12 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; String string0 = addressDetails0 . getAddressType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddressType ( ) { return addressType ; }
void test13 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; Integer integer0 = new Integer ( 1 ) ; addressDetails0 . setAccuracy ( integer0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValidToDate ( ) { return validToDate ; }
void test14 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; String string0 = addressDetails0 . getValidToDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValidToDate ( ) { return validToDate ; }
void test15 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; String string0 = addressDetails0 . getUsage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsage ( ) { return usage ; }
void test16 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; Thoroughfare thoroughfare0 = addressDetails0 . getThoroughfare ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Thoroughfare getThoroughfare ( ) { return thoroughfare ; }
void test17 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; addressDetails0 . setThoroughfare ( thoroughfare0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValidToDate ( ) { return validToDate ; }
void test18 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; addressDetails0 . setAddressLines ( ( AddressLinesType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValidFromDate ( ) { return validFromDate ; }
void test19 ( ) throws Throwable { AddressDetails . Address addressDetails_Address0 = new AddressDetails . Address ( ) ; AddressDetails addressDetails0 = new AddressDetails ( ) ; addressDetails0 . setAddress ( addressDetails_Address0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsage ( ) { return usage ; }
void test20 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; addressDetails0 . setValidFromDate ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddressType ( ) { return addressType ; }
void test21 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; addressDetails0 . setUsage ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddressDetailsKey ( ) { return addressDetailsKey ; }
void test22 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; String string0 = addressDetails0 . getCurrentStatus ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCurrentStatus ( ) { return currentStatus ; }
void test23 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; Locality locality0 = addressDetails0 . getLocality ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Locality getLocality ( ) { return locality ; }
void test24 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; AddressLinesType addressLinesType0 = addressDetails0 . getAddressLines ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AddressLinesType getAddressLines ( ) { return addressLines ; }
void test25 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; AddressDetails . Address addressDetails_Address0 = addressDetails0 . getAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AddressDetails . Address getAddress ( ) { return address ; }
void test26 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; addressDetails0 . setCurrentStatus ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValidFromDate ( ) { return validFromDate ; }
void test27 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; String string0 = addressDetails0 . getValidFromDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValidFromDate ( ) { return validFromDate ; }
void test29 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; addressDetails0 . setLocality ( ( Locality ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValidToDate ( ) { return validToDate ; }
void test30 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; addressDetails0 . setAddressType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCurrentStatus ( ) { return currentStatus ; }
void test31 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; addressDetails0 . setAddressDetailsKey ( "F5kjoe , ^ : s^@ , . Dr" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsage ( ) { return usage ; }
void test32 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; addressDetails0 . setPostalServiceElements ( ( AddressDetails . PostalServiceElements ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddressType ( ) { return addressType ; }
void test33 ( ) throws Throwable { AddressDetails . Country addressDetails_Country0 = new AddressDetails . Country ( ) ; AddressDetails addressDetails0 = new AddressDetails ( ) ; addressDetails0 . setCountry ( addressDetails_Country0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getValidFromDate ( ) { return validFromDate ; }
void test34 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; Map < QName , String > map0 = addressDetails0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test35 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; String string0 = addressDetails0 . getAddressDetailsKey ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddressDetailsKey ( ) { return addressDetailsKey ; }
void test36 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; addressDetails0 . setValidToDate ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddressDetailsKey ( ) { return addressDetailsKey ; }
void test37 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; Map < QName , String > map0 = addressDetails_PostalServiceElements0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test38 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; AddressDetails . PostalServiceElements . AddressLatitude addressDetails_PostalServiceElements_AddressLatitude0 = new AddressDetails . PostalServiceElements . AddressLatitude ( ) ; addressDetails_PostalServiceElements0 . setAddressLatitude ( addressDetails_PostalServiceElements_AddressLatitude0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test39 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; AddressDetails . PostalServiceElements . AddressLatitude addressDetails_PostalServiceElements_AddressLatitude0 = addressDetails_PostalServiceElements0 . getAddressLatitude ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test40 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; addressDetails_PostalServiceElements0 . setBarcode ( ( AddressDetails . PostalServiceElements . Barcode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test41 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; AddressDetails . PostalServiceElements . KeyLineCode addressDetails_PostalServiceElements_KeyLineCode0 = addressDetails_PostalServiceElements0 . getKeyLineCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test42 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; addressDetails_PostalServiceElements0 . setAddressLatitudeDirection ( ( AddressDetails . PostalServiceElements . AddressLatitudeDirection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test43 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; AddressDetails . PostalServiceElements . Barcode addressDetails_PostalServiceElements_Barcode0 = addressDetails_PostalServiceElements0 . getBarcode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test44 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; addressDetails_PostalServiceElements0 . setType ( "r" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test45 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; AddressDetails . PostalServiceElements . AddressLatitudeDirection addressDetails_PostalServiceElements_AddressLatitudeDirection0 = addressDetails_PostalServiceElements0 . getAddressLatitudeDirection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test46 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; AddressDetails . PostalServiceElements . KeyLineCode addressDetails_PostalServiceElements_KeyLineCode0 = new AddressDetails . PostalServiceElements . KeyLineCode ( ) ; addressDetails_PostalServiceElements0 . setKeyLineCode ( addressDetails_PostalServiceElements_KeyLineCode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test47 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; AddressDetails . PostalServiceElements . SortingCode addressDetails_PostalServiceElements_SortingCode0 = new AddressDetails . PostalServiceElements . SortingCode ( ) ; addressDetails_PostalServiceElements0 . setSortingCode ( addressDetails_PostalServiceElements_SortingCode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test48 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; AddressDetails . PostalServiceElements . AddressLongitudeDirection addressDetails_PostalServiceElements_AddressLongitudeDirection0 = new AddressDetails . PostalServiceElements . AddressLongitudeDirection ( ) ; addressDetails_PostalServiceElements0 . setAddressLongitudeDirection ( addressDetails_PostalServiceElements_AddressLongitudeDirection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test49 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; AddressDetails . PostalServiceElements . AddressLongitude addressDetails_PostalServiceElements_AddressLongitude0 = addressDetails_PostalServiceElements0 . getAddressLongitude ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test50 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; addressDetails_PostalServiceElements0 . setEndorsementLineCode ( ( AddressDetails . PostalServiceElements . EndorsementLineCode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test51 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; AddressDetails . PostalServiceElements . SortingCode addressDetails_PostalServiceElements_SortingCode0 = addressDetails_PostalServiceElements0 . getSortingCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test52 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; AddressDetails . PostalServiceElements . AddressLongitudeDirection addressDetails_PostalServiceElements_AddressLongitudeDirection0 = addressDetails_PostalServiceElements0 . getAddressLongitudeDirection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test53 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; String string0 = addressDetails_PostalServiceElements0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test54 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; addressDetails_PostalServiceElements0 . setAddressLongitude ( ( AddressDetails . PostalServiceElements . AddressLongitude ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test55 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; AddressDetails . PostalServiceElements . EndorsementLineCode addressDetails_PostalServiceElements_EndorsementLineCode0 = addressDetails_PostalServiceElements0 . getEndorsementLineCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test56 ( ) throws Throwable { AddressDetails . PostalServiceElements . EndorsementLineCode addressDetails_PostalServiceElements_EndorsementLineCode0 = new AddressDetails . PostalServiceElements . EndorsementLineCode ( ) ; String string0 = addressDetails_PostalServiceElements_EndorsementLineCode0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test57 ( ) throws Throwable { AddressDetails . PostalServiceElements . EndorsementLineCode addressDetails_PostalServiceElements_EndorsementLineCode0 = new AddressDetails . PostalServiceElements . EndorsementLineCode ( ) ; Map < QName , String > map0 = addressDetails_PostalServiceElements_EndorsementLineCode0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test58 ( ) throws Throwable { AddressDetails . PostalServiceElements . EndorsementLineCode addressDetails_PostalServiceElements_EndorsementLineCode0 = new AddressDetails . PostalServiceElements . EndorsementLineCode ( ) ; String string0 = addressDetails_PostalServiceElements_EndorsementLineCode0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test59 ( ) throws Throwable { AddressDetails . PostalServiceElements . EndorsementLineCode addressDetails_PostalServiceElements_EndorsementLineCode0 = new AddressDetails . PostalServiceElements . EndorsementLineCode ( ) ; String string0 = addressDetails_PostalServiceElements_EndorsementLineCode0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test60 ( ) throws Throwable { AddressDetails . PostalServiceElements . EndorsementLineCode addressDetails_PostalServiceElements_EndorsementLineCode0 = new AddressDetails . PostalServiceElements . EndorsementLineCode ( ) ; addressDetails_PostalServiceElements_EndorsementLineCode0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test61 ( ) throws Throwable { AddressDetails . PostalServiceElements . EndorsementLineCode addressDetails_PostalServiceElements_EndorsementLineCode0 = new AddressDetails . PostalServiceElements . EndorsementLineCode ( ) ; addressDetails_PostalServiceElements_EndorsementLineCode0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test62 ( ) throws Throwable { AddressDetails . PostalServiceElements . EndorsementLineCode addressDetails_PostalServiceElements_EndorsementLineCode0 = new AddressDetails . PostalServiceElements . EndorsementLineCode ( ) ; addressDetails_PostalServiceElements_EndorsementLineCode0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test63 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLongitudeDirection addressDetails_PostalServiceElements_AddressLongitudeDirection0 = new AddressDetails . PostalServiceElements . AddressLongitudeDirection ( ) ; String string0 = addressDetails_PostalServiceElements_AddressLongitudeDirection0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test64 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLongitudeDirection addressDetails_PostalServiceElements_AddressLongitudeDirection0 = new AddressDetails . PostalServiceElements . AddressLongitudeDirection ( ) ; addressDetails_PostalServiceElements_AddressLongitudeDirection0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test65 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLongitudeDirection addressDetails_PostalServiceElements_AddressLongitudeDirection0 = new AddressDetails . PostalServiceElements . AddressLongitudeDirection ( ) ; String string0 = addressDetails_PostalServiceElements_AddressLongitudeDirection0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test66 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLongitudeDirection addressDetails_PostalServiceElements_AddressLongitudeDirection0 = new AddressDetails . PostalServiceElements . AddressLongitudeDirection ( ) ; String string0 = addressDetails_PostalServiceElements_AddressLongitudeDirection0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test67 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLongitudeDirection addressDetails_PostalServiceElements_AddressLongitudeDirection0 = new AddressDetails . PostalServiceElements . AddressLongitudeDirection ( ) ; addressDetails_PostalServiceElements_AddressLongitudeDirection0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test68 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLongitudeDirection addressDetails_PostalServiceElements_AddressLongitudeDirection0 = new AddressDetails . PostalServiceElements . AddressLongitudeDirection ( ) ; Map < QName , String > map0 = addressDetails_PostalServiceElements_AddressLongitudeDirection0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test69 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLongitudeDirection addressDetails_PostalServiceElements_AddressLongitudeDirection0 = new AddressDetails . PostalServiceElements . AddressLongitudeDirection ( ) ; addressDetails_PostalServiceElements_AddressLongitudeDirection0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test70 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLatitudeDirection addressDetails_PostalServiceElements_AddressLatitudeDirection0 = new AddressDetails . PostalServiceElements . AddressLatitudeDirection ( ) ; addressDetails_PostalServiceElements_AddressLatitudeDirection0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test71 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLatitudeDirection addressDetails_PostalServiceElements_AddressLatitudeDirection0 = new AddressDetails . PostalServiceElements . AddressLatitudeDirection ( ) ; String string0 = addressDetails_PostalServiceElements_AddressLatitudeDirection0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test72 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLatitudeDirection addressDetails_PostalServiceElements_AddressLatitudeDirection0 = new AddressDetails . PostalServiceElements . AddressLatitudeDirection ( ) ; addressDetails_PostalServiceElements_AddressLatitudeDirection0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test73 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLatitudeDirection addressDetails_PostalServiceElements_AddressLatitudeDirection0 = new AddressDetails . PostalServiceElements . AddressLatitudeDirection ( ) ; String string0 = addressDetails_PostalServiceElements_AddressLatitudeDirection0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test74 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLatitudeDirection addressDetails_PostalServiceElements_AddressLatitudeDirection0 = new AddressDetails . PostalServiceElements . AddressLatitudeDirection ( ) ; Map < QName , String > map0 = addressDetails_PostalServiceElements_AddressLatitudeDirection0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test75 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLatitudeDirection addressDetails_PostalServiceElements_AddressLatitudeDirection0 = new AddressDetails . PostalServiceElements . AddressLatitudeDirection ( ) ; String string0 = addressDetails_PostalServiceElements_AddressLatitudeDirection0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test76 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLatitudeDirection addressDetails_PostalServiceElements_AddressLatitudeDirection0 = new AddressDetails . PostalServiceElements . AddressLatitudeDirection ( ) ; addressDetails_PostalServiceElements_AddressLatitudeDirection0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test77 ( ) throws Throwable { AddressDetails . PostalServiceElements . KeyLineCode addressDetails_PostalServiceElements_KeyLineCode0 = new AddressDetails . PostalServiceElements . KeyLineCode ( ) ; addressDetails_PostalServiceElements_KeyLineCode0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test78 ( ) throws Throwable { AddressDetails . PostalServiceElements . KeyLineCode addressDetails_PostalServiceElements_KeyLineCode0 = new AddressDetails . PostalServiceElements . KeyLineCode ( ) ; String string0 = addressDetails_PostalServiceElements_KeyLineCode0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test79 ( ) throws Throwable { AddressDetails . PostalServiceElements . KeyLineCode addressDetails_PostalServiceElements_KeyLineCode0 = new AddressDetails . PostalServiceElements . KeyLineCode ( ) ; String string0 = addressDetails_PostalServiceElements_KeyLineCode0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test80 ( ) throws Throwable { AddressDetails . PostalServiceElements . KeyLineCode addressDetails_PostalServiceElements_KeyLineCode0 = new AddressDetails . PostalServiceElements . KeyLineCode ( ) ; String string0 = addressDetails_PostalServiceElements_KeyLineCode0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test81 ( ) throws Throwable { AddressDetails . PostalServiceElements . KeyLineCode addressDetails_PostalServiceElements_KeyLineCode0 = new AddressDetails . PostalServiceElements . KeyLineCode ( ) ; addressDetails_PostalServiceElements_KeyLineCode0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test82 ( ) throws Throwable { AddressDetails . PostalServiceElements . KeyLineCode addressDetails_PostalServiceElements_KeyLineCode0 = new AddressDetails . PostalServiceElements . KeyLineCode ( ) ; addressDetails_PostalServiceElements_KeyLineCode0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test83 ( ) throws Throwable { AddressDetails . PostalServiceElements . KeyLineCode addressDetails_PostalServiceElements_KeyLineCode0 = new AddressDetails . PostalServiceElements . KeyLineCode ( ) ; Map < QName , String > map0 = addressDetails_PostalServiceElements_KeyLineCode0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test84 ( ) throws Throwable { AddressDetails . PostalServiceElements . SortingCode addressDetails_PostalServiceElements_SortingCode0 = new AddressDetails . PostalServiceElements . SortingCode ( ) ; String string0 = addressDetails_PostalServiceElements_SortingCode0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test85 ( ) throws Throwable { AddressDetails . PostalServiceElements . SortingCode addressDetails_PostalServiceElements_SortingCode0 = new AddressDetails . PostalServiceElements . SortingCode ( ) ; String string0 = addressDetails_PostalServiceElements_SortingCode0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test86 ( ) throws Throwable { AddressDetails . PostalServiceElements . SortingCode addressDetails_PostalServiceElements_SortingCode0 = new AddressDetails . PostalServiceElements . SortingCode ( ) ; addressDetails_PostalServiceElements_SortingCode0 . setType ( "r" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test87 ( ) throws Throwable { AddressDetails . PostalServiceElements . SortingCode addressDetails_PostalServiceElements_SortingCode0 = new AddressDetails . PostalServiceElements . SortingCode ( ) ; addressDetails_PostalServiceElements_SortingCode0 . setCode ( "r" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test89 ( ) throws Throwable { AddressDetails . Country addressDetails_Country0 = new AddressDetails . Country ( ) ; Map < QName , String > map0 = addressDetails_Country0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test90 ( ) throws Throwable { AddressDetails . Country addressDetails_Country0 = new AddressDetails . Country ( ) ; Thoroughfare thoroughfare0 = addressDetails_Country0 . getThoroughfare ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Thoroughfare getThoroughfare ( ) { return thoroughfare ; }
void test91 ( ) throws Throwable { AddressDetails . Country addressDetails_Country0 = new AddressDetails . Country ( ) ; Locality locality0 = addressDetails_Country0 . getLocality ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Locality getLocality ( ) { return locality ; }
void test92 ( ) throws Throwable { AddressDetails . Country addressDetails_Country0 = new AddressDetails . Country ( ) ; AdministrativeArea administrativeArea0 = addressDetails_Country0 . getAdministrativeArea ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AdministrativeArea getAdministrativeArea ( ) { return administrativeArea ; }
void test95 ( ) throws Throwable { AddressDetails . Address addressDetails_Address0 = new AddressDetails . Address ( ) ; addressDetails_Address0 . setCode ( "0\"OR7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test96 ( ) throws Throwable { AddressDetails . Address addressDetails_Address0 = new AddressDetails . Address ( ) ; String string0 = addressDetails_Address0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test97 ( ) throws Throwable { AddressDetails . Address addressDetails_Address0 = new AddressDetails . Address ( ) ; String string0 = addressDetails_Address0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test98 ( ) throws Throwable { AddressDetails . Address addressDetails_Address0 = new AddressDetails . Address ( ) ; String string0 = addressDetails_Address0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test99 ( ) throws Throwable { AddressDetails . Address addressDetails_Address0 = new AddressDetails . Address ( ) ; Map < QName , String > map0 = addressDetails_Address0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test100 ( ) throws Throwable { AddressDetails . Address addressDetails_Address0 = new AddressDetails . Address ( ) ; addressDetails_Address0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test101 ( ) throws Throwable { AddressDetails . Address addressDetails_Address0 = new AddressDetails . Address ( ) ; addressDetails_Address0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test102 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLongitude addressDetails_PostalServiceElements_AddressLongitude0 = new AddressDetails . PostalServiceElements . AddressLongitude ( ) ; String string0 = addressDetails_PostalServiceElements_AddressLongitude0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test103 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLongitude addressDetails_PostalServiceElements_AddressLongitude0 = new AddressDetails . PostalServiceElements . AddressLongitude ( ) ; Map < QName , String > map0 = addressDetails_PostalServiceElements_AddressLongitude0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test104 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLongitude addressDetails_PostalServiceElements_AddressLongitude0 = new AddressDetails . PostalServiceElements . AddressLongitude ( ) ; addressDetails_PostalServiceElements_AddressLongitude0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test105 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLongitude addressDetails_PostalServiceElements_AddressLongitude0 = new AddressDetails . PostalServiceElements . AddressLongitude ( ) ; addressDetails_PostalServiceElements_AddressLongitude0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test106 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLongitude addressDetails_PostalServiceElements_AddressLongitude0 = new AddressDetails . PostalServiceElements . AddressLongitude ( ) ; addressDetails_PostalServiceElements_AddressLongitude0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test107 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLongitude addressDetails_PostalServiceElements_AddressLongitude0 = new AddressDetails . PostalServiceElements . AddressLongitude ( ) ; String string0 = addressDetails_PostalServiceElements_AddressLongitude0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test108 ( ) throws Throwable { AddressDetails . PostalServiceElements . AddressLongitude addressDetails_PostalServiceElements_AddressLongitude0 = new AddressDetails . PostalServiceElements . AddressLongitude ( ) ; String string0 = addressDetails_PostalServiceElements_AddressLongitude0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test109 ( ) throws Throwable { AddressDetails . PostalServiceElements . Barcode addressDetails_PostalServiceElements_Barcode0 = new AddressDetails . PostalServiceElements . Barcode ( ) ; addressDetails_PostalServiceElements_Barcode0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test110 ( ) throws Throwable { AddressDetails . PostalServiceElements . Barcode addressDetails_PostalServiceElements_Barcode0 = new AddressDetails . PostalServiceElements . Barcode ( ) ; addressDetails_PostalServiceElements_Barcode0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test111 ( ) throws Throwable { AddressDetails . PostalServiceElements . Barcode addressDetails_PostalServiceElements_Barcode0 = new AddressDetails . PostalServiceElements . Barcode ( ) ; String string0 = addressDetails_PostalServiceElements_Barcode0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test112 ( ) throws Throwable { AddressDetails . PostalServiceElements . Barcode addressDetails_PostalServiceElements_Barcode0 = new AddressDetails . PostalServiceElements . Barcode ( ) ; addressDetails_PostalServiceElements_Barcode0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test113 ( ) throws Throwable { AddressDetails . PostalServiceElements . Barcode addressDetails_PostalServiceElements_Barcode0 = new AddressDetails . PostalServiceElements . Barcode ( ) ; String string0 = addressDetails_PostalServiceElements_Barcode0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test114 ( ) throws Throwable { AddressDetails . PostalServiceElements . Barcode addressDetails_PostalServiceElements_Barcode0 = new AddressDetails . PostalServiceElements . Barcode ( ) ; String string0 = addressDetails_PostalServiceElements_Barcode0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test115 ( ) throws Throwable { AddressDetails . PostalServiceElements . Barcode addressDetails_PostalServiceElements_Barcode0 = new AddressDetails . PostalServiceElements . Barcode ( ) ; Map < QName , String > map0 = addressDetails_PostalServiceElements_Barcode0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test116 ( ) throws Throwable { AddressDetails addressDetails0 = new AddressDetails ( ) ; List < Object > list0 = addressDetails0 . getAny ( ) ; List < Object > list1 = addressDetails0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test117 ( ) throws Throwable { AddressDetails . Country addressDetails_Country0 = new AddressDetails . Country ( ) ; List < AddressLine > list0 = addressDetails_Country0 . getAddressLine ( ) ; List < AddressLine > list1 = addressDetails_Country0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test118 ( ) throws Throwable { AddressDetails . Country addressDetails_Country0 = new AddressDetails . Country ( ) ; List < AddressDetails . Country . CountryNameCode > list0 = addressDetails_Country0 . getCountryNameCode ( ) ; List < AddressDetails . Country . CountryNameCode > list1 = addressDetails_Country0 . getCountryNameCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test119 ( ) throws Throwable { AddressDetails . Country addressDetails_Country0 = new AddressDetails . Country ( ) ; List < CountryName > list0 = addressDetails_Country0 . getCountryName ( ) ; List < CountryName > list1 = addressDetails_Country0 . getCountryName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test120 ( ) throws Throwable { AddressDetails . Country addressDetails_Country0 = new AddressDetails . Country ( ) ; List < Object > list0 = addressDetails_Country0 . getAny ( ) ; List < Object > list1 = addressDetails_Country0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test121 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; List < AddressDetails . PostalServiceElements . AddressIdentifier > list0 = addressDetails_PostalServiceElements0 . getAddressIdentifier ( ) ; List < AddressDetails . PostalServiceElements . AddressIdentifier > list1 = addressDetails_PostalServiceElements0 . getAddressIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test122 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; List < AddressDetails . PostalServiceElements . SupplementaryPostalServiceData > list0 = addressDetails_PostalServiceElements0 . getSupplementaryPostalServiceData ( ) ; List < AddressDetails . PostalServiceElements . SupplementaryPostalServiceData > list1 = addressDetails_PostalServiceElements0 . getSupplementaryPostalServiceData ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test123 ( ) throws Throwable { AddressDetails . PostalServiceElements addressDetails_PostalServiceElements0 = new AddressDetails . PostalServiceElements ( ) ; List < Object > list0 = addressDetails_PostalServiceElements0 . getAny ( ) ; List < Object > list1 = addressDetails_PostalServiceElements0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test0 ( ) throws Throwable { PostOffice postOffice0 = new PostOffice ( ) ; postOffice0 . setPostalRoute ( ( PostalRouteType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test1 ( ) throws Throwable { PostOffice postOffice0 = new PostOffice ( ) ; PostBox postBox0 = postOffice0 . getPostBox ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostBox getPostBox ( ) { return postBox ; }
void test2 ( ) throws Throwable { PostOffice postOffice0 = new PostOffice ( ) ; PostalRouteType postalRouteType0 = postOffice0 . getPostalRoute ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalRouteType getPostalRoute ( ) { return postalRoute ; }
void test3 ( ) throws Throwable { PostOffice postOffice0 = new PostOffice ( ) ; PostBox postBox0 = new PostBox ( ) ; postOffice0 . setPostBox ( postBox0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test4 ( ) throws Throwable { PostOffice postOffice0 = new PostOffice ( ) ; Map < QName , String > map0 = postOffice0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test5 ( ) throws Throwable { PostOffice postOffice0 = new PostOffice ( ) ; postOffice0 . setPostalCode ( ( PostalCode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test6 ( ) throws Throwable { PostOffice postOffice0 = new PostOffice ( ) ; String string0 = postOffice0 . getIndicator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test7 ( ) throws Throwable { PostOffice postOffice0 = new PostOffice ( ) ; postOffice0 . setIndicator ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test8 ( ) throws Throwable { PostOffice postOffice0 = new PostOffice ( ) ; postOffice0 . setPostOfficeNumber ( ( PostOffice . PostOfficeNumber ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test9 ( ) throws Throwable { PostOffice postOffice0 = new PostOffice ( ) ; PostOffice . PostOfficeNumber postOffice_PostOfficeNumber0 = postOffice0 . getPostOfficeNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostOffice . PostOfficeNumber getPostOfficeNumber ( ) { return postOfficeNumber ; }
void test10 ( ) throws Throwable { PostOffice postOffice0 = new PostOffice ( ) ; postOffice0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test11 ( ) throws Throwable { PostOffice postOffice0 = new PostOffice ( ) ; PostalCode postalCode0 = postOffice0 . getPostalCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalCode getPostalCode ( ) { return postalCode ; }
void test12 ( ) throws Throwable { PostOffice postOffice0 = new PostOffice ( ) ; String string0 = postOffice0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test13 ( ) throws Throwable { PostOffice . PostOfficeNumber postOffice_PostOfficeNumber0 = new PostOffice . PostOfficeNumber ( ) ; postOffice_PostOfficeNumber0 . setIndicator ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test14 ( ) throws Throwable { PostOffice . PostOfficeNumber postOffice_PostOfficeNumber0 = new PostOffice . PostOfficeNumber ( ) ; Map < QName , String > map0 = postOffice_PostOfficeNumber0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test15 ( ) throws Throwable { PostOffice . PostOfficeNumber postOffice_PostOfficeNumber0 = new PostOffice . PostOfficeNumber ( ) ; postOffice_PostOfficeNumber0 . setIndicatorOccurrence ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test16 ( ) throws Throwable { PostOffice . PostOfficeNumber postOffice_PostOfficeNumber0 = new PostOffice . PostOfficeNumber ( ) ; String string0 = postOffice_PostOfficeNumber0 . getIndicator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test17 ( ) throws Throwable { PostOffice . PostOfficeNumber postOffice_PostOfficeNumber0 = new PostOffice . PostOfficeNumber ( ) ; postOffice_PostOfficeNumber0 . setContent ( "7 ! eN" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicatorOccurrence ( ) { return indicatorOccurrence ; }
void test18 ( ) throws Throwable { PostOffice . PostOfficeNumber postOffice_PostOfficeNumber0 = new PostOffice . PostOfficeNumber ( ) ; String string0 = postOffice_PostOfficeNumber0 . getIndicatorOccurrence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicatorOccurrence ( ) { return indicatorOccurrence ; }
void test19 ( ) throws Throwable { PostOffice . PostOfficeNumber postOffice_PostOfficeNumber0 = new PostOffice . PostOfficeNumber ( ) ; String string0 = postOffice_PostOfficeNumber0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test20 ( ) throws Throwable { PostOffice . PostOfficeNumber postOffice_PostOfficeNumber0 = new PostOffice . PostOfficeNumber ( ) ; String string0 = postOffice_PostOfficeNumber0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test21 ( ) throws Throwable { PostOffice . PostOfficeNumber postOffice_PostOfficeNumber0 = new PostOffice . PostOfficeNumber ( ) ; postOffice_PostOfficeNumber0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test22 ( ) throws Throwable { PostOffice . PostOfficeName postOffice_PostOfficeName0 = new PostOffice . PostOfficeName ( ) ; Map < QName , String > map0 = postOffice_PostOfficeName0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test23 ( ) throws Throwable { PostOffice . PostOfficeName postOffice_PostOfficeName0 = new PostOffice . PostOfficeName ( ) ; postOffice_PostOfficeName0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test24 ( ) throws Throwable { PostOffice . PostOfficeName postOffice_PostOfficeName0 = new PostOffice . PostOfficeName ( ) ; postOffice_PostOfficeName0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test25 ( ) throws Throwable { PostOffice . PostOfficeName postOffice_PostOfficeName0 = new PostOffice . PostOfficeName ( ) ; String string0 = postOffice_PostOfficeName0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test26 ( ) throws Throwable { PostOffice . PostOfficeName postOffice_PostOfficeName0 = new PostOffice . PostOfficeName ( ) ; postOffice_PostOfficeName0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test27 ( ) throws Throwable { PostOffice . PostOfficeName postOffice_PostOfficeName0 = new PostOffice . PostOfficeName ( ) ; String string0 = postOffice_PostOfficeName0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test28 ( ) throws Throwable { PostOffice . PostOfficeName postOffice_PostOfficeName0 = new PostOffice . PostOfficeName ( ) ; String string0 = postOffice_PostOfficeName0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test29 ( ) throws Throwable { PostOffice postOffice0 = new PostOffice ( ) ; List < AddressLine > list0 = postOffice0 . getAddressLine ( ) ; List < AddressLine > list1 = postOffice0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test30 ( ) throws Throwable { PostOffice postOffice0 = new PostOffice ( ) ; List < PostOffice . PostOfficeName > list0 = postOffice0 . getPostOfficeName ( ) ; List < PostOffice . PostOfficeName > list1 = postOffice0 . getPostOfficeName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < PostOffice . PostOfficeName > getPostOfficeName ( ) { if ( postOfficeName = = null ) { postOfficeName = new ArrayList < PostOffice . PostOfficeName > ( ) ; } return this . postOfficeName ; }
void test31 ( ) throws Throwable { PostOffice postOffice0 = new PostOffice ( ) ; List < Object > list0 = postOffice0 . getAny ( ) ; List < Object > list1 = postOffice0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test0 ( ) throws Throwable { LargeMailUserType . LargeMailUserName largeMailUserType_LargeMailUserName0 = new LargeMailUserType . LargeMailUserName ( ) ; largeMailUserType_LargeMailUserName0 . setType ( " ! q" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test1 ( ) throws Throwable { LargeMailUserType . LargeMailUserName largeMailUserType_LargeMailUserName0 = new LargeMailUserType . LargeMailUserName ( ) ; String string0 = largeMailUserType_LargeMailUserName0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test2 ( ) throws Throwable { LargeMailUserType . LargeMailUserName largeMailUserType_LargeMailUserName0 = new LargeMailUserType . LargeMailUserName ( ) ; String string0 = largeMailUserType_LargeMailUserName0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test3 ( ) throws Throwable { LargeMailUserType . LargeMailUserName largeMailUserType_LargeMailUserName0 = new LargeMailUserType . LargeMailUserName ( ) ; String string0 = largeMailUserType_LargeMailUserName0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test4 ( ) throws Throwable { LargeMailUserType . LargeMailUserName largeMailUserType_LargeMailUserName0 = new LargeMailUserType . LargeMailUserName ( ) ; largeMailUserType_LargeMailUserName0 . setContent ( "4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test5 ( ) throws Throwable { LargeMailUserType . LargeMailUserName largeMailUserType_LargeMailUserName0 = new LargeMailUserType . LargeMailUserName ( ) ; Map < QName , String > map0 = largeMailUserType_LargeMailUserName0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test6 ( ) throws Throwable { LargeMailUserType . LargeMailUserName largeMailUserType_LargeMailUserName0 = new LargeMailUserType . LargeMailUserName ( ) ; largeMailUserType_LargeMailUserName0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test7 ( ) throws Throwable { LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; String string0 = largeMailUserType0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test8 ( ) throws Throwable { LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; Department department0 = largeMailUserType0 . getDepartment ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Department > getDepartment ( ) { if ( department = = null ) { department = new ArrayList < Department > ( ) ; } return this . department ; }
void test9 ( ) throws Throwable { LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; LargeMailUserType . LargeMailUserIdentifier largeMailUserType_LargeMailUserIdentifier0 = largeMailUserType0 . getLargeMailUserIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LargeMailUserType . LargeMailUserIdentifier getLargeMailUserIdentifier ( ) { return largeMailUserIdentifier ; }
void test10 ( ) throws Throwable { LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; PostBox postBox0 = largeMailUserType0 . getPostBox ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostBox getPostBox ( ) { return postBox ; }
void test11 ( ) throws Throwable { LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; largeMailUserType0 . setPostalCode ( ( PostalCode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test12 ( ) throws Throwable { LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; Map < QName , String > map0 = largeMailUserType0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test13 ( ) throws Throwable { LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; largeMailUserType0 . setPostBox ( ( PostBox ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test14 ( ) throws Throwable { LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; PostalCode postalCode0 = largeMailUserType0 . getPostalCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalCode getPostalCode ( ) { return postalCode ; }
void test15 ( ) throws Throwable { LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; largeMailUserType0 . setDepartment ( ( Department ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test16 ( ) throws Throwable { LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; largeMailUserType0 . setType ( "V8I } u ( S^wR7" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test17 ( ) throws Throwable { LargeMailUserType . LargeMailUserIdentifier largeMailUserType_LargeMailUserIdentifier0 = new LargeMailUserType . LargeMailUserIdentifier ( ) ; LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; largeMailUserType0 . setLargeMailUserIdentifier ( largeMailUserType_LargeMailUserIdentifier0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test18 ( ) throws Throwable { LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; Thoroughfare thoroughfare0 = largeMailUserType0 . getThoroughfare ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Thoroughfare getThoroughfare ( ) { return thoroughfare ; }
void test19 ( ) throws Throwable { LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; Thoroughfare thoroughfare0 = new Thoroughfare ( ) ; largeMailUserType0 . setThoroughfare ( thoroughfare0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDependentThoroughfaresIndicator ( ) { return dependentThoroughfaresIndicator ; }
void test20 ( ) throws Throwable { LargeMailUserType . LargeMailUserIdentifier largeMailUserType_LargeMailUserIdentifier0 = new LargeMailUserType . LargeMailUserIdentifier ( ) ; String string0 = largeMailUserType_LargeMailUserIdentifier0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test21 ( ) throws Throwable { LargeMailUserType . LargeMailUserIdentifier largeMailUserType_LargeMailUserIdentifier0 = new LargeMailUserType . LargeMailUserIdentifier ( ) ; largeMailUserType_LargeMailUserIdentifier0 . setType ( " + ^@ShbM | ! d$gIx" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test22 ( ) throws Throwable { LargeMailUserType . LargeMailUserIdentifier largeMailUserType_LargeMailUserIdentifier0 = new LargeMailUserType . LargeMailUserIdentifier ( ) ; largeMailUserType_LargeMailUserIdentifier0 . setContent ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test23 ( ) throws Throwable { LargeMailUserType . LargeMailUserIdentifier largeMailUserType_LargeMailUserIdentifier0 = new LargeMailUserType . LargeMailUserIdentifier ( ) ; largeMailUserType_LargeMailUserIdentifier0 . setCode ( "T'Yg + 4 | Ea`KP" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test24 ( ) throws Throwable { LargeMailUserType . LargeMailUserIdentifier largeMailUserType_LargeMailUserIdentifier0 = new LargeMailUserType . LargeMailUserIdentifier ( ) ; String string0 = largeMailUserType_LargeMailUserIdentifier0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test25 ( ) throws Throwable { LargeMailUserType . LargeMailUserIdentifier largeMailUserType_LargeMailUserIdentifier0 = new LargeMailUserType . LargeMailUserIdentifier ( ) ; Map < QName , String > map0 = largeMailUserType_LargeMailUserIdentifier0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test26 ( ) throws Throwable { LargeMailUserType . LargeMailUserIdentifier largeMailUserType_LargeMailUserIdentifier0 = new LargeMailUserType . LargeMailUserIdentifier ( ) ; String string0 = largeMailUserType_LargeMailUserIdentifier0 . getIndicator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test27 ( ) throws Throwable { LargeMailUserType . LargeMailUserIdentifier largeMailUserType_LargeMailUserIdentifier0 = new LargeMailUserType . LargeMailUserIdentifier ( ) ; largeMailUserType_LargeMailUserIdentifier0 . setIndicator ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test28 ( ) throws Throwable { LargeMailUserType . LargeMailUserIdentifier largeMailUserType_LargeMailUserIdentifier0 = new LargeMailUserType . LargeMailUserIdentifier ( ) ; String string0 = largeMailUserType_LargeMailUserIdentifier0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test29 ( ) throws Throwable { LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; List < AddressLine > list0 = largeMailUserType0 . getAddressLine ( ) ; List < AddressLine > list1 = largeMailUserType0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test30 ( ) throws Throwable { LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; List < LargeMailUserType . LargeMailUserName > list0 = largeMailUserType0 . getLargeMailUserName ( ) ; List < LargeMailUserType . LargeMailUserName > list1 = largeMailUserType0 . getLargeMailUserName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < LargeMailUserType . LargeMailUserName > getLargeMailUserName ( ) { if ( largeMailUserName = = null ) { largeMailUserName = new ArrayList < LargeMailUserType . LargeMailUserName > ( ) ; } return this . largeMailUserName ; }
void test31 ( ) throws Throwable { LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; List < BuildingNameType > list0 = largeMailUserType0 . getBuildingName ( ) ; List < BuildingNameType > list1 = largeMailUserType0 . getBuildingName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BuildingNameType > getBuildingName ( ) { if ( buildingName = = null ) { buildingName = new ArrayList < BuildingNameType > ( ) ; } return this . buildingName ; }
void test32 ( ) throws Throwable { LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; List < Object > list0 = largeMailUserType0 . getAny ( ) ; List < Object > list1 = largeMailUserType0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test0 ( ) throws Throwable { SubPremiseType . SubPremiseNumberPrefix subPremiseType_SubPremiseNumberPrefix0 = new SubPremiseType . SubPremiseNumberPrefix ( ) ; subPremiseType_SubPremiseNumberPrefix0 . setNumberPrefixSeparator ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test1 ( ) throws Throwable { SubPremiseType . SubPremiseNumberPrefix subPremiseType_SubPremiseNumberPrefix0 = new SubPremiseType . SubPremiseNumberPrefix ( ) ; Map < QName , String > map0 = subPremiseType_SubPremiseNumberPrefix0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test2 ( ) throws Throwable { SubPremiseType . SubPremiseNumberPrefix subPremiseType_SubPremiseNumberPrefix0 = new SubPremiseType . SubPremiseNumberPrefix ( ) ; subPremiseType_SubPremiseNumberPrefix0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test3 ( ) throws Throwable { SubPremiseType . SubPremiseNumberPrefix subPremiseType_SubPremiseNumberPrefix0 = new SubPremiseType . SubPremiseNumberPrefix ( ) ; subPremiseType_SubPremiseNumberPrefix0 . setCode ( " = Oe#soW | p4" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test4 ( ) throws Throwable { SubPremiseType . SubPremiseNumberPrefix subPremiseType_SubPremiseNumberPrefix0 = new SubPremiseType . SubPremiseNumberPrefix ( ) ; subPremiseType_SubPremiseNumberPrefix0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test5 ( ) throws Throwable { SubPremiseType . SubPremiseNumberPrefix subPremiseType_SubPremiseNumberPrefix0 = new SubPremiseType . SubPremiseNumberPrefix ( ) ; String string0 = subPremiseType_SubPremiseNumberPrefix0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test6 ( ) throws Throwable { SubPremiseType . SubPremiseNumberPrefix subPremiseType_SubPremiseNumberPrefix0 = new SubPremiseType . SubPremiseNumberPrefix ( ) ; String string0 = subPremiseType_SubPremiseNumberPrefix0 . getNumberPrefixSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberPrefixSeparator ( ) { return numberPrefixSeparator ; }
void test7 ( ) throws Throwable { SubPremiseType . SubPremiseNumberPrefix subPremiseType_SubPremiseNumberPrefix0 = new SubPremiseType . SubPremiseNumberPrefix ( ) ; String string0 = subPremiseType_SubPremiseNumberPrefix0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test8 ( ) throws Throwable { SubPremiseType . SubPremiseNumberPrefix subPremiseType_SubPremiseNumberPrefix0 = new SubPremiseType . SubPremiseNumberPrefix ( ) ; String string0 = subPremiseType_SubPremiseNumberPrefix0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test9 ( ) throws Throwable { SubPremiseType . SubPremiseNumber subPremiseType_SubPremiseNumber0 = new SubPremiseType . SubPremiseNumber ( ) ; subPremiseType_SubPremiseNumber0 . setNumberTypeOccurrence ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setNumberTypeOccurrence ( String value ) { this . numberTypeOccurrence = value ; }
void test10 ( ) throws Throwable { SubPremiseType . SubPremiseNumber subPremiseType_SubPremiseNumber0 = new SubPremiseType . SubPremiseNumber ( ) ; subPremiseType_SubPremiseNumber0 . setPremiseNumberSeparator ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test11 ( ) throws Throwable { SubPremiseType . SubPremiseNumber subPremiseType_SubPremiseNumber0 = new SubPremiseType . SubPremiseNumber ( ) ; subPremiseType_SubPremiseNumber0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicatorOccurrence ( ) { return indicatorOccurrence ; }
void test12 ( ) throws Throwable { SubPremiseType . SubPremiseNumber subPremiseType_SubPremiseNumber0 = new SubPremiseType . SubPremiseNumber ( ) ; subPremiseType_SubPremiseNumber0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberTypeOccurrence ( ) { return numberTypeOccurrence ; }
void test13 ( ) throws Throwable { SubPremiseType . SubPremiseNumber subPremiseType_SubPremiseNumber0 = new SubPremiseType . SubPremiseNumber ( ) ; String string0 = subPremiseType_SubPremiseNumber0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test14 ( ) throws Throwable { SubPremiseType . SubPremiseNumber subPremiseType_SubPremiseNumber0 = new SubPremiseType . SubPremiseNumber ( ) ; String string0 = subPremiseType_SubPremiseNumber0 . getPremiseNumberSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test15 ( ) throws Throwable { SubPremiseType . SubPremiseNumber subPremiseType_SubPremiseNumber0 = new SubPremiseType . SubPremiseNumber ( ) ; String string0 = subPremiseType_SubPremiseNumber0 . getIndicatorOccurrence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicatorOccurrence ( ) { return indicatorOccurrence ; }
void test16 ( ) throws Throwable { SubPremiseType . SubPremiseNumber subPremiseType_SubPremiseNumber0 = new SubPremiseType . SubPremiseNumber ( ) ; Map < QName , String > map0 = subPremiseType_SubPremiseNumber0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test17 ( ) throws Throwable { SubPremiseType . SubPremiseNumber subPremiseType_SubPremiseNumber0 = new SubPremiseType . SubPremiseNumber ( ) ; String string0 = subPremiseType_SubPremiseNumber0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test18 ( ) throws Throwable { SubPremiseType . SubPremiseNumber subPremiseType_SubPremiseNumber0 = new SubPremiseType . SubPremiseNumber ( ) ; String string0 = subPremiseType_SubPremiseNumber0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test19 ( ) throws Throwable { SubPremiseType . SubPremiseNumber subPremiseType_SubPremiseNumber0 = new SubPremiseType . SubPremiseNumber ( ) ; subPremiseType_SubPremiseNumber0 . setIndicator ( "8~ + Pphfij [ U\"Lk C" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test20 ( ) throws Throwable { SubPremiseType . SubPremiseNumber subPremiseType_SubPremiseNumber0 = new SubPremiseType . SubPremiseNumber ( ) ; String string0 = subPremiseType_SubPremiseNumber0 . getIndicator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test21 ( ) throws Throwable { SubPremiseType . SubPremiseNumber subPremiseType_SubPremiseNumber0 = new SubPremiseType . SubPremiseNumber ( ) ; subPremiseType_SubPremiseNumber0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test22 ( ) throws Throwable { SubPremiseType . SubPremiseNumber subPremiseType_SubPremiseNumber0 = new SubPremiseType . SubPremiseNumber ( ) ; String string0 = subPremiseType_SubPremiseNumber0 . getNumberTypeOccurrence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberTypeOccurrence ( ) { return numberTypeOccurrence ; }
void test23 ( ) throws Throwable { SubPremiseType . SubPremiseNumber subPremiseType_SubPremiseNumber0 = new SubPremiseType . SubPremiseNumber ( ) ; subPremiseType_SubPremiseNumber0 . setIndicatorOccurrence ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setIndicatorOccurrence ( String value ) { this . indicatorOccurrence = value ; }
void test24 ( ) throws Throwable { SubPremiseType . SubPremiseName subPremiseType_SubPremiseName0 = new SubPremiseType . SubPremiseName ( ) ; subPremiseType_SubPremiseName0 . setTypeOccurrence ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeOccurrence ( ) { return typeOccurrence ; }
void test25 ( ) throws Throwable { SubPremiseType . SubPremiseName subPremiseType_SubPremiseName0 = new SubPremiseType . SubPremiseName ( ) ; String string0 = subPremiseType_SubPremiseName0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test26 ( ) throws Throwable { SubPremiseType . SubPremiseName subPremiseType_SubPremiseName0 = new SubPremiseType . SubPremiseName ( ) ; String string0 = subPremiseType_SubPremiseName0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test27 ( ) throws Throwable { SubPremiseType . SubPremiseName subPremiseType_SubPremiseName0 = new SubPremiseType . SubPremiseName ( ) ; subPremiseType_SubPremiseName0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeOccurrence ( ) { return typeOccurrence ; }
void test28 ( ) throws Throwable { SubPremiseType . SubPremiseName subPremiseType_SubPremiseName0 = new SubPremiseType . SubPremiseName ( ) ; Map < QName , String > map0 = subPremiseType_SubPremiseName0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test29 ( ) throws Throwable { SubPremiseType . SubPremiseName subPremiseType_SubPremiseName0 = new SubPremiseType . SubPremiseName ( ) ; String string0 = subPremiseType_SubPremiseName0 . getTypeOccurrence ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTypeOccurrence ( ) { return typeOccurrence ; }
void test30 ( ) throws Throwable { SubPremiseType . SubPremiseName subPremiseType_SubPremiseName0 = new SubPremiseType . SubPremiseName ( ) ; subPremiseType_SubPremiseName0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test31 ( ) throws Throwable { SubPremiseType . SubPremiseName subPremiseType_SubPremiseName0 = new SubPremiseType . SubPremiseName ( ) ; String string0 = subPremiseType_SubPremiseName0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test32 ( ) throws Throwable { SubPremiseType . SubPremiseName subPremiseType_SubPremiseName0 = new SubPremiseType . SubPremiseName ( ) ; subPremiseType_SubPremiseName0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test33 ( ) throws Throwable { SubPremiseType . SubPremiseLocation subPremiseType_SubPremiseLocation0 = new SubPremiseType . SubPremiseLocation ( ) ; String string0 = subPremiseType_SubPremiseLocation0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test34 ( ) throws Throwable { SubPremiseType . SubPremiseLocation subPremiseType_SubPremiseLocation0 = new SubPremiseType . SubPremiseLocation ( ) ; String string0 = subPremiseType_SubPremiseLocation0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test35 ( ) throws Throwable { SubPremiseType . SubPremiseLocation subPremiseType_SubPremiseLocation0 = new SubPremiseType . SubPremiseLocation ( ) ; subPremiseType_SubPremiseLocation0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test36 ( ) throws Throwable { SubPremiseType . SubPremiseLocation subPremiseType_SubPremiseLocation0 = new SubPremiseType . SubPremiseLocation ( ) ; subPremiseType_SubPremiseLocation0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test37 ( ) throws Throwable { SubPremiseType . SubPremiseNumberSuffix subPremiseType_SubPremiseNumberSuffix0 = new SubPremiseType . SubPremiseNumberSuffix ( ) ; subPremiseType_SubPremiseNumberSuffix0 . setType ( "8~ + Pphfij [ U\"Lk C" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test38 ( ) throws Throwable { SubPremiseType . SubPremiseNumberSuffix subPremiseType_SubPremiseNumberSuffix0 = new SubPremiseType . SubPremiseNumberSuffix ( ) ; String string0 = subPremiseType_SubPremiseNumberSuffix0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test39 ( ) throws Throwable { SubPremiseType . SubPremiseNumberSuffix subPremiseType_SubPremiseNumberSuffix0 = new SubPremiseType . SubPremiseNumberSuffix ( ) ; subPremiseType_SubPremiseNumberSuffix0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test40 ( ) throws Throwable { SubPremiseType . SubPremiseNumberSuffix subPremiseType_SubPremiseNumberSuffix0 = new SubPremiseType . SubPremiseNumberSuffix ( ) ; Map < QName , String > map0 = subPremiseType_SubPremiseNumberSuffix0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test41 ( ) throws Throwable { SubPremiseType . SubPremiseNumberSuffix subPremiseType_SubPremiseNumberSuffix0 = new SubPremiseType . SubPremiseNumberSuffix ( ) ; subPremiseType_SubPremiseNumberSuffix0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test42 ( ) throws Throwable { SubPremiseType . SubPremiseNumberSuffix subPremiseType_SubPremiseNumberSuffix0 = new SubPremiseType . SubPremiseNumberSuffix ( ) ; String string0 = subPremiseType_SubPremiseNumberSuffix0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test43 ( ) throws Throwable { SubPremiseType . SubPremiseNumberSuffix subPremiseType_SubPremiseNumberSuffix0 = new SubPremiseType . SubPremiseNumberSuffix ( ) ; String string0 = subPremiseType_SubPremiseNumberSuffix0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test44 ( ) throws Throwable { SubPremiseType . SubPremiseNumberSuffix subPremiseType_SubPremiseNumberSuffix0 = new SubPremiseType . SubPremiseNumberSuffix ( ) ; subPremiseType_SubPremiseNumberSuffix0 . setNumberSuffixSeparator ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test45 ( ) throws Throwable { SubPremiseType . SubPremiseNumberSuffix subPremiseType_SubPremiseNumberSuffix0 = new SubPremiseType . SubPremiseNumberSuffix ( ) ; String string0 = subPremiseType_SubPremiseNumberSuffix0 . getNumberSuffixSeparator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNumberSuffixSeparator ( ) { return numberSuffixSeparator ; }
void test46 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; subPremiseType0 . setSubPremise ( subPremiseType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test47 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; SubPremiseType . SubPremiseLocation subPremiseType_SubPremiseLocation0 = subPremiseType0 . getSubPremiseLocation ( ) ; subPremiseType0 . setSubPremiseLocation ( subPremiseType_SubPremiseLocation0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test48 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; PostalCode postalCode0 = subPremiseType0 . getPostalCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalCode getPostalCode ( ) { return postalCode ; }
void test49 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; subPremiseType0 . setMailStop ( ( MailStopType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test50 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; SubPremiseType subPremiseType1 = subPremiseType0 . getSubPremise ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < SubPremiseType > getSubPremise ( ) { if ( subPremise = = null ) { subPremise = new ArrayList < SubPremiseType > ( ) ; } return this . subPremise ; }
void test51 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; FirmType firmType0 = subPremiseType0 . getFirm ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FirmType getFirm ( ) { return firm ; }
void test52 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; subPremiseType0 . setFirm ( ( FirmType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test53 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; String string0 = subPremiseType0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test54 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; MailStopType mailStopType0 = subPremiseType0 . getMailStop ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" MailStopType getMailStop ( ) { return mailStop ; }
void test55 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; Map < QName , String > map0 = subPremiseType0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test56 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; PostalCode postalCode0 = new PostalCode ( ) ; subPremiseType0 . setPostalCode ( postalCode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test57 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; subPremiseType0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test58 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; List < AddressLine > list0 = subPremiseType0 . getAddressLine ( ) ; List < AddressLine > list1 = subPremiseType0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test59 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; List < SubPremiseType . SubPremiseName > list0 = subPremiseType0 . getSubPremiseName ( ) ; List < SubPremiseType . SubPremiseName > list1 = subPremiseType0 . getSubPremiseName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < SubPremiseType . SubPremiseName > getSubPremiseName ( ) { if ( subPremiseName = = null ) { subPremiseName = new ArrayList < SubPremiseType . SubPremiseName > ( ) ; } return this . subPremiseName ; }
void test60 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; List < SubPremiseType . SubPremiseNumber > list0 = subPremiseType0 . getSubPremiseNumber ( ) ; List < SubPremiseType . SubPremiseNumber > list1 = subPremiseType0 . getSubPremiseNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < SubPremiseType . SubPremiseNumber > getSubPremiseNumber ( ) { if ( subPremiseNumber = = null ) { subPremiseNumber = new ArrayList < SubPremiseType . SubPremiseNumber > ( ) ; } return this . subPremiseNumber ; }
void test61 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; List < SubPremiseType . SubPremiseNumberPrefix > list0 = subPremiseType0 . getSubPremiseNumberPrefix ( ) ; List < SubPremiseType . SubPremiseNumberPrefix > list1 = subPremiseType0 . getSubPremiseNumberPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < SubPremiseType . SubPremiseNumberPrefix > getSubPremiseNumberPrefix ( ) { if ( subPremiseNumberPrefix = = null ) { subPremiseNumberPrefix = new ArrayList < SubPremiseType . SubPremiseNumberPrefix > ( ) ; } return this . subPremiseNumberPrefix ; }
void test62 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; List < SubPremiseType . SubPremiseNumberSuffix > list0 = subPremiseType0 . getSubPremiseNumberSuffix ( ) ; List < SubPremiseType . SubPremiseNumberSuffix > list1 = subPremiseType0 . getSubPremiseNumberSuffix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < SubPremiseType . SubPremiseNumberSuffix > getSubPremiseNumberSuffix ( ) { if ( subPremiseNumberSuffix = = null ) { subPremiseNumberSuffix = new ArrayList < SubPremiseType . SubPremiseNumberSuffix > ( ) ; } return this . subPremiseNumberSuffix ; }
void test63 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; List < BuildingNameType > list0 = subPremiseType0 . getBuildingName ( ) ; List < BuildingNameType > list1 = subPremiseType0 . getBuildingName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < BuildingNameType > getBuildingName ( ) { if ( buildingName = = null ) { buildingName = new ArrayList < BuildingNameType > ( ) ; } return this . buildingName ; }
void test64 ( ) throws Throwable { SubPremiseType subPremiseType0 = new SubPremiseType ( ) ; List < Object > list0 = subPremiseType0 . getAny ( ) ; List < Object > list1 = subPremiseType0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test0 ( ) throws Throwable { AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; administrativeArea_SubAdministrativeArea0 . setPostalCode ( ( PostalCode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test1 ( ) throws Throwable { AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; administrativeArea_SubAdministrativeArea0 . setIndicator ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test2 ( ) throws Throwable { AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; administrativeArea_SubAdministrativeArea0 . setLocality ( ( Locality ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; Map < QName , String > map0 = administrativeArea_SubAdministrativeArea0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test4 ( ) throws Throwable { AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; Locality locality0 = administrativeArea_SubAdministrativeArea0 . getLocality ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Locality getLocality ( ) { return locality ; }
void test5 ( ) throws Throwable { AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; String string0 = administrativeArea_SubAdministrativeArea0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test6 ( ) throws Throwable { AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; String string0 = administrativeArea_SubAdministrativeArea0 . getUsageType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsageType ( ) { return usageType ; }
void test7 ( ) throws Throwable { AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; administrativeArea_SubAdministrativeArea0 . setPostOffice ( ( PostOffice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsageType ( ) { return usageType ; }
void test8 ( ) throws Throwable { AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; String string0 = administrativeArea_SubAdministrativeArea0 . getIndicator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test9 ( ) throws Throwable { AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; PostOffice postOffice0 = administrativeArea_SubAdministrativeArea0 . getPostOffice ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostOffice getPostOffice ( ) { return postOffice ; }
void test10 ( ) throws Throwable { AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; PostalCode postalCode0 = administrativeArea_SubAdministrativeArea0 . getPostalCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalCode getPostalCode ( ) { return postalCode ; }
void test11 ( ) throws Throwable { AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; administrativeArea_SubAdministrativeArea0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test12 ( ) throws Throwable { AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; administrativeArea_SubAdministrativeArea0 . setUsageType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsageType ( ) { return usageType ; }
void test13 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; String string0 = administrativeArea0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test14 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; String string0 = administrativeArea0 . getIndicator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test15 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; PostOffice postOffice0 = administrativeArea0 . getPostOffice ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostOffice getPostOffice ( ) { return postOffice ; }
void test16 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; PostOffice postOffice0 = new PostOffice ( ) ; administrativeArea0 . setPostOffice ( postOffice0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test17 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; administrativeArea0 . setLocality ( ( Locality ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test18 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = administrativeArea0 . getSubAdministrativeArea ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AdministrativeArea . SubAdministrativeArea getSubAdministrativeArea ( ) { return subAdministrativeArea ; }
void test19 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; administrativeArea0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsageType ( ) { return usageType ; }
void test20 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; administrativeArea0 . setIndicator ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test21 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; administrativeArea0 . setUsageType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test22 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; PostalCode postalCode0 = administrativeArea0 . getPostalCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalCode getPostalCode ( ) { return postalCode ; }
void test23 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; Map < QName , String > map0 = administrativeArea0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test24 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; administrativeArea0 . setSubAdministrativeArea ( administrativeArea_SubAdministrativeArea0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test25 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; administrativeArea0 . setPostalCode ( ( PostalCode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test26 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; String string0 = administrativeArea0 . getUsageType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsageType ( ) { return usageType ; }
void test27 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; Locality locality0 = administrativeArea0 . getLocality ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Locality getLocality ( ) { return locality ; }
void test28 ( ) throws Throwable { AdministrativeArea . AdministrativeAreaName administrativeArea_AdministrativeAreaName0 = new AdministrativeArea . AdministrativeAreaName ( ) ; String string0 = administrativeArea_AdministrativeAreaName0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test29 ( ) throws Throwable { AdministrativeArea . AdministrativeAreaName administrativeArea_AdministrativeAreaName0 = new AdministrativeArea . AdministrativeAreaName ( ) ; administrativeArea_AdministrativeAreaName0 . setContent ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test30 ( ) throws Throwable { AdministrativeArea . AdministrativeAreaName administrativeArea_AdministrativeAreaName0 = new AdministrativeArea . AdministrativeAreaName ( ) ; String string0 = administrativeArea_AdministrativeAreaName0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test31 ( ) throws Throwable { AdministrativeArea . AdministrativeAreaName administrativeArea_AdministrativeAreaName0 = new AdministrativeArea . AdministrativeAreaName ( ) ; Map < QName , String > map0 = administrativeArea_AdministrativeAreaName0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test32 ( ) throws Throwable { AdministrativeArea . AdministrativeAreaName administrativeArea_AdministrativeAreaName0 = new AdministrativeArea . AdministrativeAreaName ( ) ; administrativeArea_AdministrativeAreaName0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test33 ( ) throws Throwable { AdministrativeArea . AdministrativeAreaName administrativeArea_AdministrativeAreaName0 = new AdministrativeArea . AdministrativeAreaName ( ) ; administrativeArea_AdministrativeAreaName0 . setCode ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test34 ( ) throws Throwable { AdministrativeArea . AdministrativeAreaName administrativeArea_AdministrativeAreaName0 = new AdministrativeArea . AdministrativeAreaName ( ) ; String string0 = administrativeArea_AdministrativeAreaName0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test35 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; List < AddressLine > list0 = administrativeArea0 . getAddressLine ( ) ; List < AddressLine > list1 = administrativeArea0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test36 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; List < AdministrativeArea . AdministrativeAreaName > list0 = administrativeArea0 . getAdministrativeAreaName ( ) ; List < AdministrativeArea . AdministrativeAreaName > list1 = administrativeArea0 . getAdministrativeAreaName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AdministrativeArea . AdministrativeAreaName > getAdministrativeAreaName ( ) { if ( administrativeAreaName = = null ) { administrativeAreaName = new ArrayList < AdministrativeArea . AdministrativeAreaName > ( ) ; } return this . administrativeAreaName ; }
void test37 ( ) throws Throwable { AdministrativeArea administrativeArea0 = new AdministrativeArea ( ) ; List < Object > list0 = administrativeArea0 . getAny ( ) ; List < Object > list1 = administrativeArea0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test38 ( ) throws Throwable { AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; List < AddressLine > list0 = administrativeArea_SubAdministrativeArea0 . getAddressLine ( ) ; List < AddressLine > list1 = administrativeArea_SubAdministrativeArea0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test39 ( ) throws Throwable { AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; List < AdministrativeArea . SubAdministrativeArea . SubAdministrativeAreaName > list0 = administrativeArea_SubAdministrativeArea0 . getSubAdministrativeAreaName ( ) ; List < AdministrativeArea . SubAdministrativeArea . SubAdministrativeAreaName > list1 = administrativeArea_SubAdministrativeArea0 . getSubAdministrativeAreaName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test40 ( ) throws Throwable { AdministrativeArea . SubAdministrativeArea administrativeArea_SubAdministrativeArea0 = new AdministrativeArea . SubAdministrativeArea ( ) ; List < Object > list0 = administrativeArea_SubAdministrativeArea0 . getAny ( ) ; List < Object > list1 = administrativeArea_SubAdministrativeArea0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test0 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; PostalRouteType postalRouteType0 = locality0 . getPostalRoute ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalRouteType getPostalRoute ( ) { return postalRoute ; }
void test1 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; LargeMailUserType largeMailUserType0 = locality0 . getLargeMailUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" LargeMailUserType getLargeMailUser ( ) { return largeMailUser ; }
void test2 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; locality0 . setUsageType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test3 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; locality0 . setPostOffice ( ( PostOffice ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test4 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; String string0 = locality0 . getUsageType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsageType ( ) { return usageType ; }
void test5 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; Thoroughfare thoroughfare0 = locality0 . getThoroughfare ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Thoroughfare getThoroughfare ( ) { return thoroughfare ; }
void test6 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; Map < QName , String > map0 = locality0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test7 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; LargeMailUserType largeMailUserType0 = new LargeMailUserType ( ) ; locality0 . setLargeMailUser ( largeMailUserType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test8 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; locality0 . setPostalRoute ( ( PostalRouteType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test9 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; PostOffice postOffice0 = locality0 . getPostOffice ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostOffice getPostOffice ( ) { return postOffice ; }
void test10 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; String string0 = locality0 . getIndicator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test11 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; locality0 . setDependentLocality ( ( DependentLocalityType ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test12 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; PostalCode postalCode0 = locality0 . getPostalCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalCode getPostalCode ( ) { return postalCode ; }
void test13 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; locality0 . setPostalCode ( ( PostalCode ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test14 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; DependentLocalityType dependentLocalityType0 = locality0 . getDependentLocality ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" DependentLocalityType getDependentLocality ( ) { return dependentLocality ; }
void test15 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; locality0 . setThoroughfare ( ( Thoroughfare ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsageType ( ) { return usageType ; }
void test16 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; Premise premise0 = new Premise ( ) ; locality0 . setPremise ( premise0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test17 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; PostBox postBox0 = locality0 . getPostBox ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostBox getPostBox ( ) { return postBox ; }
void test18 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; Premise premise0 = locality0 . getPremise ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Premise getPremise ( ) { return premise ; }
void test19 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; String string0 = locality0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test20 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; locality0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test21 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; PostBox postBox0 = new PostBox ( ) ; locality0 . setPostBox ( postBox0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test22 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; locality0 . setIndicator ( "N6 ! 'XyEf - w" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIndicator ( ) { return indicator ; }
void test23 ( ) throws Throwable { Locality . LocalityName locality_LocalityName0 = new Locality . LocalityName ( ) ; String string0 = locality_LocalityName0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test24 ( ) throws Throwable { Locality . LocalityName locality_LocalityName0 = new Locality . LocalityName ( ) ; Map < QName , String > map0 = locality_LocalityName0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test25 ( ) throws Throwable { Locality . LocalityName locality_LocalityName0 = new Locality . LocalityName ( ) ; locality_LocalityName0 . setCode ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test26 ( ) throws Throwable { Locality . LocalityName locality_LocalityName0 = new Locality . LocalityName ( ) ; String string0 = locality_LocalityName0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test27 ( ) throws Throwable { Locality . LocalityName locality_LocalityName0 = new Locality . LocalityName ( ) ; locality_LocalityName0 . setContent ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test28 ( ) throws Throwable { Locality . LocalityName locality_LocalityName0 = new Locality . LocalityName ( ) ; String string0 = locality_LocalityName0 . getType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getType ( ) { return type ; }
void test29 ( ) throws Throwable { Locality . LocalityName locality_LocalityName0 = new Locality . LocalityName ( ) ; locality_LocalityName0 . setType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) { return content ; }
void test30 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; List < AddressLine > list0 = locality0 . getAddressLine ( ) ; List < AddressLine > list1 = locality0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test31 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; List < Locality . LocalityName > list0 = locality0 . getLocalityName ( ) ; List < Locality . LocalityName > list1 = locality0 . getLocalityName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Locality . LocalityName > getLocalityName ( ) { if ( localityName = = null ) { localityName = new ArrayList < Locality . LocalityName > ( ) ; } return this . localityName ; }
void test32 ( ) throws Throwable { Locality locality0 = new Locality ( ) ; List < Object > list0 = locality0 . getAny ( ) ; List < Object > list1 = locality0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test0 ( ) throws Throwable { XAL xAL0 = new XAL ( ) ; String string0 = xAL0 . getVersion ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test1 ( ) throws Throwable { XAL xAL0 = new XAL ( ) ; xAL0 . setVersion ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getVersion ( ) { return version ; }
void test2 ( ) throws Throwable { XAL xAL0 = new XAL ( ) ; Map < QName , String > map0 = xAL0 . getOtherAttributes ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Map < QName , String > getOtherAttributes ( ) { return otherAttributes ; }
void test3 ( ) throws Throwable { XAL xAL0 = new XAL ( ) ; List < AddressDetails > list0 = xAL0 . getAddressDetails ( ) ; List < AddressDetails > list1 = xAL0 . getAddressDetails ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressDetails > getAddressDetails ( ) { if ( addressDetails = = null ) { addressDetails = new ArrayList < AddressDetails > ( ) ; } return this . addressDetails ; }
void test4 ( ) throws Throwable { XAL xAL0 = new XAL ( ) ; List < Object > list0 = xAL0 . getAny ( ) ; List < Object > list1 = xAL0 . getAny ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < Object > getAny ( ) { if ( any = = null ) { any = new ArrayList < Object > ( ) ; } return this . any ; }
void test0 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; ResponseType responseType0 = objectFactory0 . createResponseType ( ) ; JAXBElement < ResponseType > jAXBElement0 = objectFactory0 . createResponse ( responseType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JAXBElement < ResponseType > createResponse ( ResponseType value ) { return new JAXBElement < ResponseType > ( _Response_QNAME , ResponseType . class , null , value ) ; }
void test1 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; StatusType statusType0 = objectFactory0 . createStatusType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRequest ( ) { return request ; }
void test2 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; KmlType kmlType0 = objectFactory0 . createKmlType ( ) ; JAXBElement < KmlType > jAXBElement0 = objectFactory0 . createKml ( kmlType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JAXBElement < KmlType > createKml ( KmlType value ) { return new JAXBElement < KmlType > ( _Kml_QNAME , KmlType . class , null , value ) ; }
void test3 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PointType pointType0 = new PointType ( ) ; JAXBElement < PointType > jAXBElement0 = objectFactory0 . createPoint ( pointType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" JAXBElement < PointType > createPoint ( PointType value ) { return new JAXBElement < PointType > ( _Point_QNAME , PointType . class , null , value ) ; }
void test4 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PlacemarkType placemarkType0 = objectFactory0 . createPlacemarkType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test5 ( ) throws Throwable { ObjectFactory objectFactory0 = new ObjectFactory ( ) ; PointType pointType0 = objectFactory0 . createPointType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCoordinates ( ) { return coordinates ; }
void test0 ( ) throws Throwable { KmlType kmlType0 = new KmlType ( ) ; ResponseType responseType0 = kmlType0 . getResponse ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ResponseType getResponse ( ) { return response ; }
void test0 ( ) throws Throwable { StatusType statusType0 = new StatusType ( ) ; statusType0 . setRequest ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRequest ( ) { return request ; }
void test1 ( ) throws Throwable { StatusType statusType0 = new StatusType ( ) ; String string0 = statusType0 . getRequest ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRequest ( ) { return request ; }
void test2 ( ) throws Throwable { StatusType statusType0 = new StatusType ( ) ; int int0 = statusType0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test3 ( ) throws Throwable { StatusType statusType0 = new StatusType ( ) ; statusType0 . setCode ( 1573 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test0 ( ) throws Throwable { PlacemarkType placemarkType0 = new PlacemarkType ( ) ; PointType pointType0 = new PointType ( ) ; placemarkType0 . setPoint ( pointType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test1 ( ) throws Throwable { PlacemarkType placemarkType0 = new PlacemarkType ( ) ; PointType pointType0 = placemarkType0 . getPoint ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PointType getPoint ( ) { return point ; }
void test2 ( ) throws Throwable { PlacemarkType placemarkType0 = new PlacemarkType ( ) ; AddressDetails addressDetails0 = new AddressDetails ( ) ; placemarkType0 . setAddressDetails ( addressDetails0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsage ( ) { return usage ; }
void test3 ( ) throws Throwable { PlacemarkType placemarkType0 = new PlacemarkType ( ) ; String string0 = placemarkType0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test4 ( ) throws Throwable { PlacemarkType placemarkType0 = new PlacemarkType ( ) ; placemarkType0 . setAddress ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AddressDetails . Address getAddress ( ) { return address ; }
void test5 ( ) throws Throwable { PlacemarkType placemarkType0 = new PlacemarkType ( ) ; AddressDetails addressDetails0 = placemarkType0 . getAddressDetails ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressDetails > getAddressDetails ( ) { if ( addressDetails = = null ) { addressDetails = new ArrayList < AddressDetails > ( ) ; } return this . addressDetails ; }
void test6 ( ) throws Throwable { PlacemarkType placemarkType0 = new PlacemarkType ( ) ; placemarkType0 . setId ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return id ; }
void test7 ( ) throws Throwable { PlacemarkType placemarkType0 = new PlacemarkType ( ) ; String string0 = placemarkType0 . getAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AddressDetails . Address getAddress ( ) { return address ; }
void test1 ( ) throws Throwable { PointType pointType0 = new PointType ( ) ; Boolean boolean0 = Boolean . valueOf ( "" ) ; pointType0 . setExtrude ( boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test3 ( ) throws Throwable { PointType pointType0 = new PointType ( ) ; String string0 = pointType0 . getCoordinates ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCoordinates ( ) { return coordinates ; }
void test4 ( ) throws Throwable { PointType pointType0 = new PointType ( ) ; pointType0 . setCoordinates ( "clampToGround" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AltitudeModeType getAltitudeMode ( ) { return altitudeMode ; }
void test5 ( ) throws Throwable { PointType pointType0 = new PointType ( ) ; Boolean boolean0 = Boolean . valueOf ( "" ) ; pointType0 . setTessellate ( boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AltitudeModeType getAltitudeMode ( ) { return altitudeMode ; }
void test7 ( ) throws Throwable { PointType pointType0 = new PointType ( ) ; AltitudeModeType altitudeModeType0 = AltitudeModeType . CLAMP_TO_GROUND ; pointType0 . setAltitudeMode ( altitudeModeType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCoordinates ( ) { return coordinates ; }
void test0 ( ) throws Throwable { AltitudeModeType altitudeModeType0 = AltitudeModeType . CLAMP_TO_GROUND ; String string0 = altitudeModeType0 . value ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String value ( ) { return value ; }
void test2 ( ) throws Throwable { AltitudeModeType altitudeModeType0 = AltitudeModeType . fromValue ( "relativeToGround" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AltitudeModeType fromValue ( String v ) { for ( AltitudeModeType c : AltitudeModeType . values ( ) ) { if ( c . value . equals ( v ) ) { return c ; } } throw new IllegalArgumentException ( v ) ; }
void test0 ( ) throws Throwable { ResponseType responseType0 = new ResponseType ( ) ; responseType0 . setName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { ResponseType responseType0 = new ResponseType ( ) ; String string0 = responseType0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test2 ( ) throws Throwable { ResponseType responseType0 = new ResponseType ( ) ; StatusType statusType0 = responseType0 . getStatus ( ) ; responseType0 . setStatus ( statusType0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test3 ( ) throws Throwable { ResponseType responseType0 = new ResponseType ( ) ; List < PlacemarkType > list0 = responseType0 . getPlacemark ( ) ; List < PlacemarkType > list1 = responseType0 . getPlacemark ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < PlacemarkType > getPlacemark ( ) { if ( placemark = = null ) { placemark = new ArrayList < PlacemarkType > ( ) ; } return this . placemark ; }
void test0 ( ) throws Throwable { GeoAddressStandardizer geoAddressStandardizer0 = new GeoAddressStandardizer ( ( String ) null ) ; geoAddressStandardizer0 . getHttpClientParams ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRateLimitInterval ( ) { return _rateLimitInterval ; }
void test2 ( ) throws Throwable { GeoAddressStandardizer geoAddressStandardizer0 = new GeoAddressStandardizer ( "" , 2013L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < GeoUsAddress > standardizeToGeoUsAddresses ( String addressLine ) throws GeoException { return standardize ( addressLine , XmlToUsAddressFunctor . getInstance ( ) ) ; }
void test3 ( ) throws Throwable { HttpClient httpClient0 = new HttpClient ( ) ; SimpleHttpConnectionManager simpleHttpConnectionManager0 = ( SimpleHttpConnectionManager ) httpClient0 . getHttpConnectionManager ( ) ; GeoAddressStandardizer . setConnectionManager ( ( HttpConnectionManager ) simpleHttpConnectionManager0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setConnectionManager ( HttpConnectionManager manager ) { _connectionManager = manager ; _httpClient = new HttpClient ( _connectionManager ) ; }
void test6 ( ) throws Throwable { GeoAddressStandardizer geoAddressStandardizer0 = new GeoAddressStandardizer ( "" ) ; long long0 = geoAddressStandardizer0 . getRateLimitInterval ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRateLimitInterval ( ) { return _rateLimitInterval ; }
void test8 ( ) throws Throwable { GeoAddressStandardizer geoAddressStandardizer0 = new GeoAddressStandardizer ( "" , 5769L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRateLimitInterval ( ) { return _rateLimitInterval ; }
void test9 ( ) throws Throwable { GeoAddressStandardizer geoAddressStandardizer0 = new GeoAddressStandardizer ( "" , 5769L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRateLimitInterval ( ) { return _rateLimitInterval ; }
void test10 ( ) throws Throwable { GeoAddressStandardizer geoAddressStandardizer0 = new GeoAddressStandardizer ( "STREET_LEVEL" ) ; geoAddressStandardizer0 . setRateLimitInterval ( ( - 1032L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRateLimitInterval ( ) { return _rateLimitInterval ; }
void test12 ( ) throws Throwable { GeoAddressStandardizer geoAddressStandardizer0 = new GeoAddressStandardizer ( "" , 5769L ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRateLimitInterval ( ) { return _rateLimitInterval ; }
void test13 ( ) throws Throwable { GeoAddressStandardizer geoAddressStandardizer0 = new GeoAddressStandardizer ( ( String ) null ) ; geoAddressStandardizer0 . setHttpClientParams ( ( HttpClientParams ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRateLimitInterval ( ) { return _rateLimitInterval ; }
void test14 ( ) throws Throwable { GeoAddressStandardizer geoAddressStandardizer0 = new GeoAddressStandardizer ( "" ) ; HttpClientParams httpClientParams0 = new HttpClientParams ( ) ; MultiThreadedHttpConnectionManager multiThreadedHttpConnectionManager0 = new MultiThreadedHttpConnectionManager ( ) ; geoAddressStandardizer0 . setHttpClientParams ( httpClientParams0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getRateLimitInterval ( ) { return _rateLimitInterval ; }
void test0 ( ) throws Throwable { GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy . TOWN_LEVEL ; String string0 = geoAddressAccuracy0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test1 ( ) throws Throwable { GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy . REGION_LEVEL ; int int0 = geoAddressAccuracy0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test2 ( ) throws Throwable { GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy . getAccuracyByCode ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoAddressAccuracy getAccuracyByCode ( int code ) { switch ( code ) { case 0 : return UNKNOWN_LOCATION ; case 1 : return COUNTRY_LEVEL ; case 2 : return REGION_LEVEL ; case 3 : return SUB_REGION_LEVEL ; case 4 : return TOWN_LEVEL ; case 5 : return POST_CODE_LEVEL ; case 6 : return STREET_LEVEL ; case 7 : return INTERSECTION_LEVEL ; case 8 : return ADDRESS_LEVEL ; default : return UNKNOWN_LOCATION ; } }
void test3 ( ) throws Throwable { GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy . getAccuracyByCode ( 2 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoAddressAccuracy getAccuracyByCode ( int code ) { switch ( code ) { case 0 : return UNKNOWN_LOCATION ; case 1 : return COUNTRY_LEVEL ; case 2 : return REGION_LEVEL ; case 3 : return SUB_REGION_LEVEL ; case 4 : return TOWN_LEVEL ; case 5 : return POST_CODE_LEVEL ; case 6 : return STREET_LEVEL ; case 7 : return INTERSECTION_LEVEL ; case 8 : return ADDRESS_LEVEL ; default : return UNKNOWN_LOCATION ; } }
void test4 ( ) throws Throwable { GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy . getAccuracyByCode ( 1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoAddressAccuracy getAccuracyByCode ( int code ) { switch ( code ) { case 0 : return UNKNOWN_LOCATION ; case 1 : return COUNTRY_LEVEL ; case 2 : return REGION_LEVEL ; case 3 : return SUB_REGION_LEVEL ; case 4 : return TOWN_LEVEL ; case 5 : return POST_CODE_LEVEL ; case 6 : return STREET_LEVEL ; case 7 : return INTERSECTION_LEVEL ; case 8 : return ADDRESS_LEVEL ; default : return UNKNOWN_LOCATION ; } }
void test5 ( ) throws Throwable { GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy . getAccuracyByCode ( 3 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoAddressAccuracy getAccuracyByCode ( int code ) { switch ( code ) { case 0 : return UNKNOWN_LOCATION ; case 1 : return COUNTRY_LEVEL ; case 2 : return REGION_LEVEL ; case 3 : return SUB_REGION_LEVEL ; case 4 : return TOWN_LEVEL ; case 5 : return POST_CODE_LEVEL ; case 6 : return STREET_LEVEL ; case 7 : return INTERSECTION_LEVEL ; case 8 : return ADDRESS_LEVEL ; default : return UNKNOWN_LOCATION ; } }
void test6 ( ) throws Throwable { GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy . getAccuracyByCode ( 4 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoAddressAccuracy getAccuracyByCode ( int code ) { switch ( code ) { case 0 : return UNKNOWN_LOCATION ; case 1 : return COUNTRY_LEVEL ; case 2 : return REGION_LEVEL ; case 3 : return SUB_REGION_LEVEL ; case 4 : return TOWN_LEVEL ; case 5 : return POST_CODE_LEVEL ; case 6 : return STREET_LEVEL ; case 7 : return INTERSECTION_LEVEL ; case 8 : return ADDRESS_LEVEL ; default : return UNKNOWN_LOCATION ; } }
void test7 ( ) throws Throwable { GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy . getAccuracyByCode ( 5 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoAddressAccuracy getAccuracyByCode ( int code ) { switch ( code ) { case 0 : return UNKNOWN_LOCATION ; case 1 : return COUNTRY_LEVEL ; case 2 : return REGION_LEVEL ; case 3 : return SUB_REGION_LEVEL ; case 4 : return TOWN_LEVEL ; case 5 : return POST_CODE_LEVEL ; case 6 : return STREET_LEVEL ; case 7 : return INTERSECTION_LEVEL ; case 8 : return ADDRESS_LEVEL ; default : return UNKNOWN_LOCATION ; } }
void test8 ( ) throws Throwable { GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy . getAccuracyByCode ( 6 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoAddressAccuracy getAccuracyByCode ( int code ) { switch ( code ) { case 0 : return UNKNOWN_LOCATION ; case 1 : return COUNTRY_LEVEL ; case 2 : return REGION_LEVEL ; case 3 : return SUB_REGION_LEVEL ; case 4 : return TOWN_LEVEL ; case 5 : return POST_CODE_LEVEL ; case 6 : return STREET_LEVEL ; case 7 : return INTERSECTION_LEVEL ; case 8 : return ADDRESS_LEVEL ; default : return UNKNOWN_LOCATION ; } }
void test9 ( ) throws Throwable { GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy . getAccuracyByCode ( 7 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoAddressAccuracy getAccuracyByCode ( int code ) { switch ( code ) { case 0 : return UNKNOWN_LOCATION ; case 1 : return COUNTRY_LEVEL ; case 2 : return REGION_LEVEL ; case 3 : return SUB_REGION_LEVEL ; case 4 : return TOWN_LEVEL ; case 5 : return POST_CODE_LEVEL ; case 6 : return STREET_LEVEL ; case 7 : return INTERSECTION_LEVEL ; case 8 : return ADDRESS_LEVEL ; default : return UNKNOWN_LOCATION ; } }
void test10 ( ) throws Throwable { GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy . getAccuracyByCode ( 8 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoAddressAccuracy getAccuracyByCode ( int code ) { switch ( code ) { case 0 : return UNKNOWN_LOCATION ; case 1 : return COUNTRY_LEVEL ; case 2 : return REGION_LEVEL ; case 3 : return SUB_REGION_LEVEL ; case 4 : return TOWN_LEVEL ; case 5 : return POST_CODE_LEVEL ; case 6 : return STREET_LEVEL ; case 7 : return INTERSECTION_LEVEL ; case 8 : return ADDRESS_LEVEL ; default : return UNKNOWN_LOCATION ; } }
void test11 ( ) throws Throwable { GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy . getAccuracyByCode ( 1433 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoAddressAccuracy getAccuracyByCode ( int code ) { switch ( code ) { case 0 : return UNKNOWN_LOCATION ; case 1 : return COUNTRY_LEVEL ; case 2 : return REGION_LEVEL ; case 3 : return SUB_REGION_LEVEL ; case 4 : return TOWN_LEVEL ; case 5 : return POST_CODE_LEVEL ; case 6 : return STREET_LEVEL ; case 7 : return INTERSECTION_LEVEL ; case 8 : return ADDRESS_LEVEL ; default : return UNKNOWN_LOCATION ; } }
void test0 ( ) throws Throwable { GeoStatusCode geoStatusCode0 = GeoStatusCode . G_GEO_BAD_REQUEST ; int int0 = geoStatusCode0 . getCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCode ( ) { return code ; }
void test1 ( ) throws Throwable { GeoStatusCode geoStatusCode0 = GeoStatusCode . G_GEO_MISSING_QUERY ; String string0 = geoStatusCode0 . getCodeName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCodeName ( ) { return this . name ( ) ; }
void test2 ( ) throws Throwable { GeoStatusCode geoStatusCode0 = GeoStatusCode . G_GEO_MISSING_QUERY ; String string0 = geoStatusCode0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return _description ; }
void test3 ( ) throws Throwable { GeoStatusCode geoStatusCode0 = GeoStatusCode . getStatusCode ( 200 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoStatusCode getStatusCode ( int code ) { switch ( code ) { case 200 : return G_GEO_SUCCESS ; case 400 : return G_GEO_BAD_REQUEST ; case 500 : return G_GEO_SERVER_ERROR ; case 601 : return G_GEO_MISSING_QUERY ; case 602 : return G_GEO_UNKNOWN_ADDRESS ; case 603 : return G_GEO_UNAVAILABLE_ADDRESS ; case 604 : return G_GEO_UNKNOWN_DIRECTIONS ; case 610 : return G_GEO_BAD_KEY ; case 620 : return G_GEO_TOO_MANY_QUERIES ; default : return G_GEO_UNKOWN_STATUS ; } }
void test4 ( ) throws Throwable { GeoStatusCode geoStatusCode0 = GeoStatusCode . getStatusCode ( 400 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoStatusCode getStatusCode ( int code ) { switch ( code ) { case 200 : return G_GEO_SUCCESS ; case 400 : return G_GEO_BAD_REQUEST ; case 500 : return G_GEO_SERVER_ERROR ; case 601 : return G_GEO_MISSING_QUERY ; case 602 : return G_GEO_UNKNOWN_ADDRESS ; case 603 : return G_GEO_UNAVAILABLE_ADDRESS ; case 604 : return G_GEO_UNKNOWN_DIRECTIONS ; case 610 : return G_GEO_BAD_KEY ; case 620 : return G_GEO_TOO_MANY_QUERIES ; default : return G_GEO_UNKOWN_STATUS ; } }
void test5 ( ) throws Throwable { GeoStatusCode geoStatusCode0 = GeoStatusCode . getStatusCode ( 500 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoStatusCode getStatusCode ( int code ) { switch ( code ) { case 200 : return G_GEO_SUCCESS ; case 400 : return G_GEO_BAD_REQUEST ; case 500 : return G_GEO_SERVER_ERROR ; case 601 : return G_GEO_MISSING_QUERY ; case 602 : return G_GEO_UNKNOWN_ADDRESS ; case 603 : return G_GEO_UNAVAILABLE_ADDRESS ; case 604 : return G_GEO_UNKNOWN_DIRECTIONS ; case 610 : return G_GEO_BAD_KEY ; case 620 : return G_GEO_TOO_MANY_QUERIES ; default : return G_GEO_UNKOWN_STATUS ; } }
void test6 ( ) throws Throwable { GeoStatusCode geoStatusCode0 = GeoStatusCode . getStatusCode ( 601 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoStatusCode getStatusCode ( int code ) { switch ( code ) { case 200 : return G_GEO_SUCCESS ; case 400 : return G_GEO_BAD_REQUEST ; case 500 : return G_GEO_SERVER_ERROR ; case 601 : return G_GEO_MISSING_QUERY ; case 602 : return G_GEO_UNKNOWN_ADDRESS ; case 603 : return G_GEO_UNAVAILABLE_ADDRESS ; case 604 : return G_GEO_UNKNOWN_DIRECTIONS ; case 610 : return G_GEO_BAD_KEY ; case 620 : return G_GEO_TOO_MANY_QUERIES ; default : return G_GEO_UNKOWN_STATUS ; } }
void test7 ( ) throws Throwable { GeoStatusCode geoStatusCode0 = GeoStatusCode . getStatusCode ( 602 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoStatusCode getStatusCode ( int code ) { switch ( code ) { case 200 : return G_GEO_SUCCESS ; case 400 : return G_GEO_BAD_REQUEST ; case 500 : return G_GEO_SERVER_ERROR ; case 601 : return G_GEO_MISSING_QUERY ; case 602 : return G_GEO_UNKNOWN_ADDRESS ; case 603 : return G_GEO_UNAVAILABLE_ADDRESS ; case 604 : return G_GEO_UNKNOWN_DIRECTIONS ; case 610 : return G_GEO_BAD_KEY ; case 620 : return G_GEO_TOO_MANY_QUERIES ; default : return G_GEO_UNKOWN_STATUS ; } }
void test8 ( ) throws Throwable { GeoStatusCode geoStatusCode0 = GeoStatusCode . getStatusCode ( 603 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoStatusCode getStatusCode ( int code ) { switch ( code ) { case 200 : return G_GEO_SUCCESS ; case 400 : return G_GEO_BAD_REQUEST ; case 500 : return G_GEO_SERVER_ERROR ; case 601 : return G_GEO_MISSING_QUERY ; case 602 : return G_GEO_UNKNOWN_ADDRESS ; case 603 : return G_GEO_UNAVAILABLE_ADDRESS ; case 604 : return G_GEO_UNKNOWN_DIRECTIONS ; case 610 : return G_GEO_BAD_KEY ; case 620 : return G_GEO_TOO_MANY_QUERIES ; default : return G_GEO_UNKOWN_STATUS ; } }
void test9 ( ) throws Throwable { GeoStatusCode geoStatusCode0 = GeoStatusCode . getStatusCode ( 604 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoStatusCode getStatusCode ( int code ) { switch ( code ) { case 200 : return G_GEO_SUCCESS ; case 400 : return G_GEO_BAD_REQUEST ; case 500 : return G_GEO_SERVER_ERROR ; case 601 : return G_GEO_MISSING_QUERY ; case 602 : return G_GEO_UNKNOWN_ADDRESS ; case 603 : return G_GEO_UNAVAILABLE_ADDRESS ; case 604 : return G_GEO_UNKNOWN_DIRECTIONS ; case 610 : return G_GEO_BAD_KEY ; case 620 : return G_GEO_TOO_MANY_QUERIES ; default : return G_GEO_UNKOWN_STATUS ; } }
void test10 ( ) throws Throwable { GeoStatusCode geoStatusCode0 = GeoStatusCode . getStatusCode ( 610 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoStatusCode getStatusCode ( int code ) { switch ( code ) { case 200 : return G_GEO_SUCCESS ; case 400 : return G_GEO_BAD_REQUEST ; case 500 : return G_GEO_SERVER_ERROR ; case 601 : return G_GEO_MISSING_QUERY ; case 602 : return G_GEO_UNKNOWN_ADDRESS ; case 603 : return G_GEO_UNAVAILABLE_ADDRESS ; case 604 : return G_GEO_UNKNOWN_DIRECTIONS ; case 610 : return G_GEO_BAD_KEY ; case 620 : return G_GEO_TOO_MANY_QUERIES ; default : return G_GEO_UNKOWN_STATUS ; } }
void test11 ( ) throws Throwable { GeoStatusCode geoStatusCode0 = GeoStatusCode . getStatusCode ( 620 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoStatusCode getStatusCode ( int code ) { switch ( code ) { case 200 : return G_GEO_SUCCESS ; case 400 : return G_GEO_BAD_REQUEST ; case 500 : return G_GEO_SERVER_ERROR ; case 601 : return G_GEO_MISSING_QUERY ; case 602 : return G_GEO_UNKNOWN_ADDRESS ; case 603 : return G_GEO_UNAVAILABLE_ADDRESS ; case 604 : return G_GEO_UNKNOWN_DIRECTIONS ; case 610 : return G_GEO_BAD_KEY ; case 620 : return G_GEO_TOO_MANY_QUERIES ; default : return G_GEO_UNKOWN_STATUS ; } }
void test12 ( ) throws Throwable { GeoStatusCode geoStatusCode0 = GeoStatusCode . getStatusCode ( 1494 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoStatusCode getStatusCode ( int code ) { switch ( code ) { case 200 : return G_GEO_SUCCESS ; case 400 : return G_GEO_BAD_REQUEST ; case 500 : return G_GEO_SERVER_ERROR ; case 601 : return G_GEO_MISSING_QUERY ; case 602 : return G_GEO_UNKNOWN_ADDRESS ; case 603 : return G_GEO_UNAVAILABLE_ADDRESS ; case 604 : return G_GEO_UNKNOWN_DIRECTIONS ; case 610 : return G_GEO_BAD_KEY ; case 620 : return G_GEO_TOO_MANY_QUERIES ; default : return G_GEO_UNKOWN_STATUS ; } }
void test0 ( ) throws Throwable { GeoAltitude . GeoAltitudeMode geoAltitude_GeoAltitudeMode0 = GeoAltitude . GeoAltitudeMode . RELATIVE_TO_GROUND ; GeoAltitude geoAltitude0 = new GeoAltitude ( ( - 697 . 5968528122937 ) , geoAltitude_GeoAltitudeMode0 ) ; GeoCoordinate geoCoordinate0 = new GeoCoordinate ( ( - 919 . 8719791268037 ) , ( - 1 . 0 ) , geoAltitude0 ) ; geoCoordinate0 . equals ( ( Object ) "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLongitude ( ) { return _longitude ; }
void test1 ( ) throws Throwable { GeoCoordinate geoCoordinate0 = new GeoCoordinate ( ) ; String string0 = geoCoordinate0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLongitude ( ) { return _longitude ; }
void test2 ( ) throws Throwable { GeoCoordinate geoCoordinate0 = new GeoCoordinate ( ) ; geoCoordinate0 . setLatitude ( ( - 1528 . 8910962581933 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLongitude ( ) { return _longitude ; }
void test3 ( ) throws Throwable { GeoAltitude . GeoAltitudeMode geoAltitude_GeoAltitudeMode0 = GeoAltitude . GeoAltitudeMode . RELATIVE_TO_GROUND ; GeoAltitude geoAltitude0 = new GeoAltitude ( 0 . 0 , geoAltitude_GeoAltitudeMode0 ) ; GeoCoordinate geoCoordinate0 = new GeoCoordinate ( ( - 1 . 0 ) , 0 . 0 , geoAltitude0 ) ; geoCoordinate0 . distanceTo ( geoCoordinate0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLatitude ( ) { return _latitude ; }
void test4 ( ) throws Throwable { GeoAltitude . GeoAltitudeMode geoAltitude_GeoAltitudeMode0 = GeoAltitude . GeoAltitudeMode . RELATIVE_TO_GROUND ; GeoAltitude geoAltitude0 = new GeoAltitude ( ( - 697 . 5968528122937 ) , geoAltitude_GeoAltitudeMode0 ) ; GeoCoordinate geoCoordinate0 = new GeoCoordinate ( ( - 919 . 8719791268037 ) , ( - 1 . 0 ) , geoAltitude0 ) ; geoCoordinate0 . setLongitude ( ( - 697 . 5968528122937 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLatitude ( ) { return _latitude ; }
void test5 ( ) throws Throwable { GeoAltitude . GeoAltitudeMode geoAltitude_GeoAltitudeMode0 = GeoAltitude . GeoAltitudeMode . RELATIVE_TO_GROUND ; GeoAltitude geoAltitude0 = new GeoAltitude ( ( - 697 . 5968528122937 ) , geoAltitude_GeoAltitudeMode0 ) ; GeoCoordinate geoCoordinate0 = new GeoCoordinate ( ( - 919 . 8719791268037 ) , ( - 1 . 0 ) , geoAltitude0 ) ; GeoAltitude geoAltitude1 = geoCoordinate0 . getAltitude ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLongitude ( ) { return _longitude ; }
void test6 ( ) throws Throwable { GeoAltitude . GeoAltitudeMode geoAltitude_GeoAltitudeMode0 = GeoAltitude . GeoAltitudeMode . RELATIVE_TO_GROUND ; GeoAltitude geoAltitude0 = new GeoAltitude ( ( - 697 . 5968528122937 ) , geoAltitude_GeoAltitudeMode0 ) ; GeoCoordinate geoCoordinate0 = new GeoCoordinate ( ( - 919 . 8719791268037 ) , ( - 1 . 0 ) , geoAltitude0 ) ; geoCoordinate0 . setAltitude ( geoAltitude0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLatitude ( ) { return _latitude ; }
void test7 ( ) throws Throwable { GeoCoordinate geoCoordinate0 = new GeoCoordinate ( ) ; GeoCoordinate geoCoordinate1 = geoCoordinate0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return EqualsBuilder . reflectionEquals ( this , o ) ; }
void test0 ( ) throws Throwable { GeoAddress geoAddress0 = new GeoAddress ( ) ; GeoCoordinate geoCoordinate0 = new GeoCoordinate ( ) ; geoAddress0 . setCoordinate ( geoCoordinate0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test1 ( ) throws Throwable { GeoAddress geoAddress0 = new GeoAddress ( ) ; GeoCoordinate geoCoordinate0 = geoAddress0 . getCoordinate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" GeoCoordinate getCoordinate ( ) { return _coordinate ; }
void test2 ( ) throws Throwable { GeoAddress geoAddress0 = new GeoAddress ( ) ; AddressDetails addressDetails0 = geoAddress0 . getAddressDetails ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressDetails > getAddressDetails ( ) { if ( addressDetails = = null ) { addressDetails = new ArrayList < AddressDetails > ( ) ; } return this . addressDetails ; }
void test3 ( ) throws Throwable { GeoAddress geoAddress0 = new GeoAddress ( ) ; String string0 = geoAddress0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test4 ( ) throws Throwable { GeoAddress geoAddress0 = new GeoAddress ( ) ; boolean boolean0 = geoAddress0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return EqualsBuilder . reflectionEquals ( this , o ) ; }
void test5 ( ) throws Throwable { GeoAddress geoAddress0 = new GeoAddress ( ) ; GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy . TOWN_LEVEL ; geoAddress0 . setAccuracy ( geoAddressAccuracy0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test6 ( ) throws Throwable { GeoAddress geoAddress0 = new GeoAddress ( ) ; AddressDetails addressDetails0 = new AddressDetails ( ) ; geoAddress0 . setAddressDetails ( addressDetails0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUsage ( ) { return usage ; }
void test7 ( ) throws Throwable { GeoAddress geoAddress0 = new GeoAddress ( ) ; geoAddress0 . setAddressLine ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Integer getAccuracy ( ) { return accuracy ; }
void test8 ( ) throws Throwable { GeoAddress geoAddress0 = new GeoAddress ( ) ; GeoAddressAccuracy geoAddressAccuracy0 = geoAddress0 . getAccuracy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Integer getAccuracy ( ) { return accuracy ; }
void test9 ( ) throws Throwable { GeoAddress geoAddress0 = new GeoAddress ( ) ; String string0 = geoAddress0 . getAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" List < AddressLine > getAddressLine ( ) { if ( addressLine = = null ) { addressLine = new ArrayList < AddressLine > ( ) ; } return this . addressLine ; }
void test0 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy . ADDRESS_LEVEL ; geoUsAddress0 . setAccuracy ( geoAddressAccuracy0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddressLine2 ( ) { return _addressLine2 ; }
void test1 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; geoUsAddress0 . setPostalCode ( "9uD { ; ( z > ) %'s~lRw`AM" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddressLine2 ( ) { return _addressLine2 ; }
void test2 ( ) throws Throwable { GeoCoordinate geoCoordinate0 = new GeoCoordinate ( ) ; GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy . REGION_LEVEL ; GeoUsAddress geoUsAddress0 = new GeoUsAddress ( " [ ul` ] 8sA# ! O & * : %%b" , " [ ul` ] 8sA# ! O & * : %%b" , " [ ul` ] 8sA# ! O & * : %%b" , "Sets the altitude of the element relative to the actual ground elevation of a particular location . For example , if the ground elevation of a location is exactly at sea level and the altitude for a point is set to 9 meters , then the elevation for the icon of a point placemark elevation is 9 meters with this mode . However , if the same coordinate is set over a location where the ground elevation is 10 meters above sea level , then the elevation of the coordinate is 19 meters . A typical use of this mode is for placing telephone poles or a ski lift . " , "COUNTRY_LEVEL" , "Sets the altitude of the element relative to the actual ground elevation of a particular location . For example , if the ground elevation of a location is exactly at sea level and the altitude for a point is set to 9 meters , then the elevation for the icon of a point placemark elevation is 9 meters with this mode . However , if the same coordinate is set over a location where the ground elevation is 10 meters above sea level , then the elevation of the coordinate is 19 meters . A typical use of this mode is for placing telephone poles or a ski lift . " , "COUNTRY_LEVEL" , geoCoordinate0 , geoAddressAccuracy0 ) ; String string0 = geoUsAddress0 . toAddressLine ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddressLine2 ( ) { return _addressLine2 ; }
void test3 ( ) throws Throwable { GeoCoordinate geoCoordinate0 = new GeoCoordinate ( ) ; GeoAddressAccuracy geoAddressAccuracy0 = GeoAddressAccuracy . REGION_LEVEL ; GeoUsAddress geoUsAddress0 = new GeoUsAddress ( " [ ul` ] 8sA# ! O & * : %%b" , " [ ul` ] 8sA# ! O & * : %%b" , " [ ul` ] 8sA# ! O & * : %%b" , "Sets the altitude of the element relative to the actual ground elevation of a particular location . For example , if the ground elevation of a location is exactly at sea level and the altitude for a point is set to 9 meters , then the elevation for the icon of a point placemark elevation is 9 meters with this mode . However , if the same coordinate is set over a location where the ground elevation is 10 meters above sea level , then the elevation of the coordinate is 19 meters . A typical use of this mode is for placing telephone poles or a ski lift . " , "COUNTRY_LEVEL" , "Sets the altitude of the element relative to the actual ground elevation of a particular location . For example , if the ground elevation of a location is exactly at sea level and the altitude for a point is set to 9 meters , then the elevation for the icon of a point placemark elevation is 9 meters with this mode . However , if the same coordinate is set over a location where the ground elevation is 10 meters above sea level , then the elevation of the coordinate is 19 meters . A typical use of this mode is for placing telephone poles or a ski lift . " , "COUNTRY_LEVEL" , geoCoordinate0 , geoAddressAccuracy0 ) ; geoUsAddress0 . setCoordinate ( geoCoordinate0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toAddressLine ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( _addressLine1 ) . append ( " , " ) . append ( _city ) . append ( " , " ) . append ( _state ) . append ( " " ) . append ( _postalCode ) ; return sb . toString ( ) ; }
void test4 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; String string0 = geoUsAddress0 . getAddressLine1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddressLine1 ( ) { return _addressLine1 ; }
void test5 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; String string0 = geoUsAddress0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return ToStringBuilder . reflectionToString ( this ) ; }
void test6 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; GeoCoordinate geoCoordinate0 = geoUsAddress0 . getCoordinate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLatitude ( ) { return _latitude ; }
void test7 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; geoUsAddress0 . setState ( "9uD { ; ( z > ) %'s~lRw`AM" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Integer getAccuracy ( ) { return accuracy ; }
void test8 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; String string0 = geoUsAddress0 . getCity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCity ( ) { return _city ; }
void test9 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; String string0 = geoUsAddress0 . getCounty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCounty ( ) { return _county ; }
void test10 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; geoUsAddress0 . setCounty ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddressLine2 ( ) { return _addressLine2 ; }
void test11 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; String string0 = geoUsAddress0 . getState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) { return _state ; }
void test12 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; geoUsAddress0 . setAddressLine1 ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCounty ( ) { return _county ; }
void test13 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; geoUsAddress0 . setAddressLine2 ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getState ( ) { return _state ; }
void test14 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; String string0 = geoUsAddress0 . getPostalCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PostalCode getPostalCode ( ) { return postalCode ; }
void test15 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; boolean boolean0 = geoUsAddress0 . equals ( ( Object ) "geo . google . datamodel . GeoAltitude@3244eabe [ _altitude = 0 . 0 , _mode = CLAMP_TO_GROUND ] " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return EqualsBuilder . reflectionEquals ( this , o ) ; }
void test16 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; geoUsAddress0 . setCity ( "lbaQ%9" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AddressDetails . Country getCountry ( ) { return country ; }
void test17 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; String string0 = geoUsAddress0 . getAddressLine2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddressLine2 ( ) { return _addressLine2 ; }
void test18 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; GeoAddressAccuracy geoAddressAccuracy0 = geoUsAddress0 . getAccuracy ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Integer getAccuracy ( ) { return accuracy ; }
void test19 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; String string0 = geoUsAddress0 . getCountry ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" AddressDetails . Country getCountry ( ) { return country ; }
void test20 ( ) throws Throwable { GeoUsAddress geoUsAddress0 = new GeoUsAddress ( ) ; geoUsAddress0 . setCountry ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAddressLine1 ( ) { return _addressLine1 ; }
void test0 ( ) throws Throwable { GeoAltitude geoAltitude0 = new GeoAltitude ( ( - 1 . 0 ) ) ; geoAltitude0 . setAltitude ( ( - 1 . 0 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAltitude ( ) { return _altitude ; }
void test1 ( ) throws Throwable { GeoAltitude geoAltitude0 = new GeoAltitude ( ( - 345 . 4255421900352 ) ) ; GeoAltitude geoAltitude1 = geoAltitude0 . clone ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object o ) { return EqualsBuilder . reflectionEquals ( this , o ) ; }
void test2 ( ) throws Throwable { GeoAltitude . GeoAltitudeMode geoAltitude_GeoAltitudeMode0 = GeoAltitude . GeoAltitudeMode . RELATIVE_TO_GROUND ; GeoAltitude geoAltitude0 = new GeoAltitude ( 1 . 0 , geoAltitude_GeoAltitudeMode0 ) ; double double0 = geoAltitude0 . getAltitude ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAltitude ( ) { return _altitude ; }
void test3 ( ) throws Throwable { GeoAltitude geoAltitude0 = new GeoAltitude ( ( - 345 . 4255421900352 ) ) ; GeoAltitude . GeoAltitudeMode geoAltitude_GeoAltitudeMode0 = GeoAltitude . GeoAltitudeMode . RELATIVE_TO_GROUND ; geoAltitude0 . setMode ( geoAltitude_GeoAltitudeMode0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAltitude ( ) { return _altitude ; }
void test4 ( ) throws Throwable { GeoAltitude geoAltitude0 = new GeoAltitude ( 83 . 10227735267303 ) ; String string0 = geoAltitude0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAltitude ( ) { return _altitude ; }
void test5 ( ) throws Throwable { GeoAltitude geoAltitude0 = new GeoAltitude ( ( - 345 . 4255421900352 ) ) ; geoAltitude0 . equals ( ( Object ) "CLAMP_TO_GROUND" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAltitude ( ) { return _altitude ; }
void test6 ( ) throws Throwable { GeoAltitude geoAltitude0 = new GeoAltitude ( ) ; geoAltitude0 . getMode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getAltitude ( ) { return _altitude ; }
void test7 ( ) throws Throwable { GeoAltitude . GeoAltitudeMode geoAltitude_GeoAltitudeMode0 = GeoAltitude . GeoAltitudeMode . RELATIVE_TO_GROUND ; String string0 = geoAltitude_GeoAltitudeMode0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) { return name ; }
void test8 ( ) throws Throwable { GeoAltitude . GeoAltitudeMode geoAltitude_GeoAltitudeMode0 = GeoAltitude . GeoAltitudeMode . RELATIVE_TO_GROUND ; String string0 = geoAltitude_GeoAltitudeMode0 . getDescription ( "h\"V~Tz_1 ( !  & W / $wNV" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return _description ; }
void test0 ( ) throws Throwable { GeoCoordinate geoCoordinate0 = new GeoCoordinate ( ) ; double double0 = GeoUtils . distanceBetweenInKm ( geoCoordinate0 , geoCoordinate0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double distanceBetweenInKm ( GeoCoordinate c1 , GeoCoordinate c2 ) { return distanceInMiles ( c1 . getLatitude ( ) , c2 . getLatitude ( ) , c1 . getLongitude ( ) , c2 . getLongitude ( ) ) * KM_IN_ONE_MILE ; }
void test1 ( ) throws Throwable { GeoCoordinate geoCoordinate0 = new GeoCoordinate ( ) ; double double0 = GeoUtils . haversineDistanceBetweenInKm ( geoCoordinate0 , geoCoordinate0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double haversineDistanceBetweenInKm ( GeoCoordinate c1 , GeoCoordinate c2 ) { return distanceHaversineForumla ( c1 . getLatitude ( ) , c2 . getLatitude ( ) , c1 . getLongitude ( ) , c2 . getLongitude ( ) ) ; }
void test2 ( ) throws Throwable { GeoCoordinate geoCoordinate0 = new GeoCoordinate ( ) ; double double0 = GeoUtils . distanceBetweenInMiles ( geoCoordinate0 , geoCoordinate0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double distanceBetweenInMiles ( GeoCoordinate c1 , GeoCoordinate c2 ) { return distanceInMiles ( c1 . getLatitude ( ) , c2 . getLatitude ( ) , c1 . getLongitude ( ) , c2 . getLongitude ( ) ) ; }
void test3 ( ) throws Throwable { GeoCoordinate geoCoordinate0 = new GeoCoordinate ( ) ; double double0 = GeoUtils . haversineDistanceBetweenInMiles ( geoCoordinate0 , geoCoordinate0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double haversineDistanceBetweenInMiles ( GeoCoordinate c1 , GeoCoordinate c2 ) { return distanceHaversineForumla ( c1 . getLatitude ( ) , c2 . getLatitude ( ) , c1 . getLongitude ( ) , c2 . getLongitude ( ) ) / KM_IN_ONE_MILE ; }
void test0 ( ) throws Throwable { XmlToUsAddressFunctor xmlToUsAddressFunctor0 = XmlToUsAddressFunctor . getInstance ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" PointToCoordinateFunctor getInstance ( ) { return _instance ; }
void test1 ( ) throws Throwable { XmlToUsAddressFunctor xmlToUsAddressFunctor0 = new XmlToUsAddressFunctor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { XmlToAddressFunctor xmlToAddressFunctor0 = new XmlToAddressFunctor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { GeoCoordinate geoCoordinate0 = MappingUtils . stringToCoordinate ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" double getLatitude ( ) { return _latitude ; }
void test0 ( ) throws Throwable { File file0 = new File ( "7Dcn\"`~ + m" ) ; StreamSource streamSource0 = new StreamSource ( file0 ) ; XSLTMappingFunctor xSLTMappingFunctor0 = new XSLTMappingFunctor ( ( Source ) streamSource0 ) ; StreamSource streamSource1 = ( StreamSource ) xSLTMappingFunctor0 . getXsltSource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Source getXsltSource ( ) { return _xsltSource ; }
void test2 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( "G_GEO_BAD_REQUEST" ) ; DOMSource dOMSource0 = new DOMSource ( ( Node ) iIOMetadataNode0 ) ; XSLTMappingFunctor xSLTMappingFunctor0 = new XSLTMappingFunctor ( ( Source ) dOMSource0 ) ; StreamSource streamSource0 = new StreamSource ( ) ; xSLTMappingFunctor0 . setXsltSource ( ( Source ) streamSource0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setXsltSource ( Source xsltSource ) { _xsltSource = xsltSource ; }
void test1 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; Node node0 = XmlUtils . selectNode ( ( Node ) iIOMetadataNode0 , "XB2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Node selectNode ( Node context , String xpath ) throws XPathExpressionException { return ( Node ) newXPath ( ) . evaluate ( xpath , context , XPathConstants . NODE ) ; }
void test2 ( ) throws Throwable { IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode ( ) ; String string0 = XmlUtils . selectValue ( ( Node ) iIOMetadataNode0 , "XB2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String selectValue ( Node context , String xpath ) throws XPathExpressionException { return newXPath ( ) . evaluate ( xpath , context ) ; }
void test3 ( ) throws Throwable { XmlUtils xmlUtils0 = new XmlUtils ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
