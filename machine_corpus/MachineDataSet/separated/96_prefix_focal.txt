void test0 ( ) throws Throwable { TruncateStringTag truncateStringTag0 = new TruncateStringTag ( ) ; String string0 = truncateStringTag0 . getLength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLength ( ) { return String . valueOf ( this . length ) ; }
void test2 ( ) throws Throwable { TruncateStringTag truncateStringTag0 = new TruncateStringTag ( ) ; truncateStringTag0 . setString ( " ; Ov2A~qiQ ( 6a" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLength ( ) { return String . valueOf ( this . length ) ; }
void test3 ( ) throws Throwable { TruncateStringTag truncateStringTag0 = new TruncateStringTag ( ) ; String string0 = truncateStringTag0 . getString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLength ( ) { return String . valueOf ( this . length ) ; }
void test0 ( ) throws Throwable { LastModifiedTag lastModifiedTag0 = new LastModifiedTag ( ) ; lastModifiedTag0 . setFormat ( "EnB\" < O" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return this . id ; }
void test0 ( ) throws Throwable { FormatDateTag formatDateTag0 = new FormatDateTag ( ) ; formatDateTag0 . setFormat ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return this . id ; }
void test0 ( ) throws Throwable { DownloadFolderTag downloadFolderTag0 = new DownloadFolderTag ( ) ; ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; downloadFolderTag0 . setShortMetadata ( shortMetadataBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContributeUserId ( ) { return this . contributeUserId ; }
void test1 ( ) throws Throwable { DownloadFolderTag downloadFolderTag0 = new DownloadFolderTag ( ) ; DownloadQueueBean downloadQueueBean0 = new DownloadQueueBean ( ) ; downloadFolderTag0 . setDownloadQueue ( downloadQueueBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getPackageFormat ( ) { return packageFormat ; }
void test2 ( ) throws Throwable { DownloadFolderTag downloadFolderTag0 = new DownloadFolderTag ( ) ; int int0 = downloadFolderTag0 . doEndTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDownloadFolderType ( ) { return downloadFolderType ; }
void test3 ( ) throws Throwable { DownloadFolderTag downloadFolderTag0 = new DownloadFolderTag ( ) ; int int0 = downloadFolderTag0 . getDownloadFolderType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getDownloadFolderType ( ) { return downloadFolderType ; }
void test0 ( ) throws Throwable { DownloadFolderActionTag downloadFolderActionTag0 = new DownloadFolderActionTag ( ) ; downloadFolderActionTag0 . setType ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) { int tagAction = SKIP_BODY ; DownloadFolderTag parent = ( DownloadFolderTag ) findAncestorWithClass ( this , DownloadFolderTag . class ) ; if ( null ! = parent ) { if ( parent . getDownloadFolderType ( ) = = type ) { tagAction = EVAL_BODY_INCLUDE ; } } return tagAction ; }
void test1 ( ) throws Throwable { DownloadFolderActionTag downloadFolderActionTag0 = new DownloadFolderActionTag ( ) ; downloadFolderActionTag0 . setType ( "add" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) { int tagAction = SKIP_BODY ; DownloadFolderTag parent = ( DownloadFolderTag ) findAncestorWithClass ( this , DownloadFolderTag . class ) ; if ( null ! = parent ) { if ( parent . getDownloadFolderType ( ) = = type ) { tagAction = EVAL_BODY_INCLUDE ; } } return tagAction ; }
void test2 ( ) throws Throwable { DownloadFolderActionTag downloadFolderActionTag0 = new DownloadFolderActionTag ( ) ; downloadFolderActionTag0 . setType ( "remove" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) { int tagAction = SKIP_BODY ; DownloadFolderTag parent = ( DownloadFolderTag ) findAncestorWithClass ( this , DownloadFolderTag . class ) ; if ( null ! = parent ) { if ( parent . getDownloadFolderType ( ) = = type ) { tagAction = EVAL_BODY_INCLUDE ; } } return tagAction ; }
void test3 ( ) throws Throwable { DownloadFolderActionTag downloadFolderActionTag0 = new DownloadFolderActionTag ( ) ; downloadFolderActionTag0 . setType ( "remote image" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return this . id ; }
void test4 ( ) throws Throwable { DownloadFolderActionTag downloadFolderActionTag0 = new DownloadFolderActionTag ( ) ; int int0 = downloadFolderActionTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) { int tagAction = SKIP_BODY ; DownloadFolderTag parent = ( DownloadFolderTag ) findAncestorWithClass ( this , DownloadFolderTag . class ) ; if ( null ! = parent ) { if ( parent . getDownloadFolderType ( ) = = type ) { tagAction = EVAL_BODY_INCLUDE ; } } return tagAction ; }
void test5 ( ) throws Throwable { DownloadFolderActionTag downloadFolderActionTag0 = new DownloadFolderActionTag ( ) ; DownloadFolderTag downloadFolderTag0 = new DownloadFolderTag ( ) ; downloadFolderActionTag0 . setParent ( ( Tag ) downloadFolderTag0 ) ; int int0 = downloadFolderActionTag0 . doStartTag ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) { int tagAction = SKIP_BODY ; DownloadFolderTag parent = ( DownloadFolderTag ) findAncestorWithClass ( this , DownloadFolderTag . class ) ; if ( null ! = parent ) { if ( parent . getDownloadFolderType ( ) = = type ) { tagAction = EVAL_BODY_INCLUDE ; } } return tagAction ; }
void test6 ( ) throws Throwable { DownloadFolderActionTag downloadFolderActionTag0 = new DownloadFolderActionTag ( ) ; DownloadFolderTag downloadFolderTag0 = new DownloadFolderTag ( ) ; downloadFolderActionTag0 . setType ( "unavailable" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int doStartTag ( ) { int tagAction = SKIP_BODY ; DownloadFolderTag parent = ( DownloadFolderTag ) findAncestorWithClass ( this , DownloadFolderTag . class ) ; if ( null ! = parent ) { if ( parent . getDownloadFolderType ( ) = = type ) { tagAction = EVAL_BODY_INCLUDE ; } } return tagAction ; }
void test0 ( ) throws Throwable { DownloadFolderActionTagExtraInfo downloadFolderActionTagExtraInfo0 = new DownloadFolderActionTagExtraInfo ( ) ; Hashtable < Object , String > hashtable0 = new Hashtable < Object , String > ( ) ; TagData tagData0 = new TagData ( hashtable0 ) ; boolean boolean0 = downloadFolderActionTagExtraInfo0 . isValid ( tagData0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( TagData tagData ) { boolean ret = false ; Object temp = tagData . getAttribute ( "type" ) ; if ( temp instanceof String ) { String type = ( String ) temp ; type = type . toLowerCase ( ) ; / / type constants are known to be lowercase if ( DownloadFolderActionTag . TYPE_ADD . equals ( type ) | | DownloadFolderActionTag . TYPE_REMOVE . equals ( type ) | | DownloadFolderActionTag . TYPE_UNAVAILABLE . equals ( type ) | | DownloadFolderActionTag . TYPE_REMOTE_IMAGE . equals ( type ) ) { ret = true ; / / this means the tagData is valid ! } } return ret ; }
void test1 ( ) throws Throwable { DownloadFolderActionTagExtraInfo downloadFolderActionTagExtraInfo0 = new DownloadFolderActionTagExtraInfo ( ) ; Hashtable < Object , String > hashtable0 = new Hashtable < Object , String > ( ) ; TagData tagData0 = new TagData ( hashtable0 ) ; hashtable0 . put ( ( Object ) "type" , "RdD" ) ; boolean boolean0 = downloadFolderActionTagExtraInfo0 . isValid ( tagData0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isValid ( TagData tagData ) { boolean ret = false ; Object temp = tagData . getAttribute ( "type" ) ; if ( temp instanceof String ) { String type = ( String ) temp ; type = type . toLowerCase ( ) ; / / type constants are known to be lowercase if ( DownloadFolderActionTag . TYPE_ADD . equals ( type ) | | DownloadFolderActionTag . TYPE_REMOVE . equals ( type ) | | DownloadFolderActionTag . TYPE_UNAVAILABLE . equals ( type ) | | DownloadFolderActionTag . TYPE_REMOTE_IMAGE . equals ( type ) ) { ret = true ; / / this means the tagData is valid ! } } return ret ; }
void test0 ( ) throws Throwable { UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMinor ( ) { return minor ; }
void test1 ( ) throws Throwable { UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean ( ) ; boolean boolean0 = userPermissionsBean0 . isMinor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isApprover ( ) { return approver ; }
void test2 ( ) throws Throwable { UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean ( ) ; userPermissionsBean0 . setAdministrator ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isApprover ( ) { return approver ; }
void test3 ( ) throws Throwable { UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean ( ) ; boolean boolean0 = userPermissionsBean0 . isApprover ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test4 ( ) throws Throwable { UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean ( ) ; boolean boolean0 = userPermissionsBean0 . isAdministrator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isApprover ( ) { return approver ; }
void test5 ( ) throws Throwable { UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean ( ) ; userPermissionsBean0 . setApprover ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isApprover ( ) { return approver ; }
void test6 ( ) throws Throwable { UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean ( ) ; userPermissionsBean0 . setCataloger ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isApprover ( ) { return approver ; }
void test7 ( ) throws Throwable { UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean ( ) ; boolean boolean0 = userPermissionsBean0 . isCataloger ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isApprover ( ) { return approver ; }
void test0 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getProfessionalTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAdministrator ( ) { return administrator ; }
void test1 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setCataloger ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAdministrator ( ) { return administrator ; }
void test2 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getProfessionalSpecialty ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAdministrator ( ) { return administrator ; }
void test3 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setApprover ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAdministrator ( ) { return administrator ; }
void test4 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getUserName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isApprover ( ) { return approver ; }
void test5 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getState ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMinor ( ) { return minor ; }
void test6 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getPhoneNumber ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test7 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getUserId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isApprover ( ) { return approver ; }
void test8 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setLastName ( "Mq@ [ 38W9 = ( Pp%uC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test9 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setMiddleInitial ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test10 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; boolean boolean0 = userBean0 . isMinor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAdministrator ( ) { return administrator ; }
void test11 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setZipCode ( "v" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test12 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getZipCode ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test13 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getXML ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAdministrator ( ) { return administrator ; }
void test14 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setState ( " & , 77Cd^SvPO1~qsaNS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMinor ( ) { return minor ; }
void test15 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setInstitutionName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test16 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; boolean boolean0 = userBean0 . isApprover ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test17 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getMiddleInitial ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMinor ( ) { return minor ; }
void test18 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setCity ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test19 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setProfessionalSpecialty ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAdministrator ( ) { return administrator ; }
void test20 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getAddress1 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMinor ( ) { return minor ; }
void test21 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setFirstName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAdministrator ( ) { return administrator ; }
void test22 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getPassword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test23 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; boolean boolean0 = userBean0 . isCataloger ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAdministrator ( ) { return administrator ; }
void test24 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setCountry ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test25 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getInstitutionName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test26 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setUserName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMinor ( ) { return minor ; }
void test27 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getLastName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test28 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getAddress2 ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isApprover ( ) { return approver ; }
void test29 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . parseXML ( "x * ML" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAdministrator ( ) { return administrator ; }
void test30 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setProfessionalTitle ( "2 ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isApprover ( ) { return approver ; }
void test31 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setPassword ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAdministrator ( ) { return administrator ; }
void test32 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setAddress1 ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMinor ( ) { return minor ; }
void test33 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getEmail ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAdministrator ( ) { return administrator ; }
void test34 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setPhoneNumber ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAdministrator ( ) { return administrator ; }
void test35 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; boolean boolean0 = userBean0 . isAdministrator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test36 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setUserId ( "Mq@ [ 38W9 = ( Pp%uC" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test37 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setAddress2 ( " & , 77Cd^SvPO1~qsaNS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isApprover ( ) { return approver ; }
void test38 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getCountry ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isApprover ( ) { return approver ; }
void test39 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setAdministrator ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isApprover ( ) { return approver ; }
void test40 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getFirstName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isApprover ( ) { return approver ; }
void test41 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; String string0 = userBean0 . getCity ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test42 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setMinor ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isMinor ( ) { return minor ; }
void test43 ( ) throws Throwable { UserBean userBean0 = new UserBean ( ) ; userBean0 . setEmail ( " & , 77Cd^SvPO1~qsaNS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloger ( ) { return cataloger ; }
void test1 ( ) throws Throwable { UserRegistryBean userRegistryBean0 = new UserRegistryBean ( ) ; SQLServerDataSource sQLServerDataSource0 = new SQLServerDataSource ( ) ; userRegistryBean0 . setDataSource ( ( DataSource ) sQLServerDataSource0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPassword ( ) { return password ; }
void test2 ( ) throws Throwable { UserRegistryBean userRegistryBean0 = new UserRegistryBean ( ) ; boolean boolean0 = userRegistryBean0 . checkPermissions ( ( UserBean ) null , "l~ZWwpm , " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkPermissions ( UserBean user , String accessLevel ) { / * XXX not currently implemented * / return false ; }
void test3 ( ) throws Throwable { UserRegistryBean userRegistryBean0 = new UserRegistryBean ( ) ; UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean ( ) ; boolean boolean0 = userRegistryBean0 . setPermissions ( ( String ) null , userPermissionsBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean setPermissions ( String userId , UserPermissionsBean permissions ) { if ( userId = = null | | permissions = = null ) { return false ; } boolean success = false ; Connection conn = null ; try { conn = dataSource . getConnection ( ) ; conn . setAutoCommit ( false ) ; Row userRow = getUserProperties ( userId , false , conn ) ; UserBean user = rowToBean ( userRow ) ; if ( user ! = null ) { user . setMinor ( permissions . isMinor ( ) ) ; user . setAdministrator ( permissions . isAdministrator ( ) ) ; user . setCataloger ( permissions . isCataloger ( ) ) ; user . setApprover ( permissions . isApprover ( ) ) ; saveUserProperties ( user , conn ) ; success = true ; } } catch ( SQLException ex ) { ex . printStackTrace ( ) ; } finally { try { if ( conn ! = null ) { conn . setAutoCommit ( true ) ; conn . commit ( ) ; conn . close ( ) ; } } catch ( SQLException ex2 ) { ex2 . printStackTrace ( ) ; } } return success ; }
void test5 ( ) throws Throwable { UserRegistryBean userRegistryBean0 = new UserRegistryBean ( ) ; boolean boolean0 = userRegistryBean0 . setPermissions ( " : AXf7z0X" , ( UserPermissionsBean ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean setPermissions ( String userId , UserPermissionsBean permissions ) { if ( userId = = null | | permissions = = null ) { return false ; } boolean success = false ; Connection conn = null ; try { conn = dataSource . getConnection ( ) ; conn . setAutoCommit ( false ) ; Row userRow = getUserProperties ( userId , false , conn ) ; UserBean user = rowToBean ( userRow ) ; if ( user ! = null ) { user . setMinor ( permissions . isMinor ( ) ) ; user . setAdministrator ( permissions . isAdministrator ( ) ) ; user . setCataloger ( permissions . isCataloger ( ) ) ; user . setApprover ( permissions . isApprover ( ) ) ; saveUserProperties ( user , conn ) ; success = true ; } } catch ( SQLException ex ) { ex . printStackTrace ( ) ; } finally { try { if ( conn ! = null ) { conn . setAutoCommit ( true ) ; conn . commit ( ) ; conn . close ( ) ; } } catch ( SQLException ex2 ) { ex2 . printStackTrace ( ) ; } } return success ; }
void test0 ( ) throws Throwable { InstructionalLevelBean instructionalLevelBean0 = new InstructionalLevelBean ( ) ; instructionalLevelBean0 . setInstructionalLevelId ( "oV ! J ) ( q ? & D~ - ~q" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInstructionalLevelId ( ) { return instructionalLevelId ; }
void test1 ( ) throws Throwable { InstructionalLevelBean instructionalLevelBean0 = new InstructionalLevelBean ( ) ; String string0 = instructionalLevelBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test2 ( ) throws Throwable { InstructionalLevelBean instructionalLevelBean0 = new InstructionalLevelBean ( ) ; instructionalLevelBean0 . setUserId ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test3 ( ) throws Throwable { InstructionalLevelBean instructionalLevelBean0 = new InstructionalLevelBean ( ) ; instructionalLevelBean0 . setInstructionalLevel ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList getInstructionalLevel ( ) { return instructionalLevel ; }
void test0 ( ) throws Throwable { ProfessionalRoleBean professionalRoleBean0 = new ProfessionalRoleBean ( ) ; String string0 = professionalRoleBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test1 ( ) throws Throwable { ProfessionalRoleBean professionalRoleBean0 = new ProfessionalRoleBean ( ) ; professionalRoleBean0 . setProfessionalRole ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test2 ( ) throws Throwable { ProfessionalRoleBean professionalRoleBean0 = new ProfessionalRoleBean ( ) ; professionalRoleBean0 . setUserId ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getProfessionalRoleId ( ) { return professionalRoleId ; }
void test3 ( ) throws Throwable { ProfessionalRoleBean professionalRoleBean0 = new ProfessionalRoleBean ( ) ; professionalRoleBean0 . setProfessionalRoleId ( "oV ! J ) ( q ? & D~ - ~q" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ArrayList getProfessionalRole ( ) { return professionalRole ; }
void test0 ( ) throws Throwable { UploadServicesBean uploadServicesBean0 = new UploadServicesBean ( ) ; FileLocator fileLocator0 = uploadServicesBean0 . getFileLocator ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" FileLocator getFileLocator ( ) { return fileLocator ; }
void test1 ( ) throws Throwable { UploadServicesBean uploadServicesBean0 = new UploadServicesBean ( ) ; FileLocator fileLocator0 = new FileLocator ( ) ; uploadServicesBean0 . setFileLocator ( fileLocator0 ) ; String string0 = uploadServicesBean0 . getUploadPath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUploadPath ( ) { if ( fileLocator = = null ) return null ; return fileLocator . getUploadURL ( ) ; }
void test2 ( ) throws Throwable { UploadServicesBean uploadServicesBean0 = new UploadServicesBean ( ) ; ThumbnailBean thumbnailBean0 = uploadServicesBean0 . generateThumbnail ( ( String ) null , ( String ) null , ( PlanarImage ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThumbnailBean generateThumbnail ( String sourceLocation , String metadataId , PlanarImage image ) throws IOException { ThumbnailBean thumbnail = null ; if ( sourceLocation = = null ) { return null ; / / failed because there was no metadata bean } String thumbLocation = getThumbnailLocationFromSource ( sourceLocation , THUMB_PREFIX , JPEG_EXTENSION ) ; String thumbFilePath = fileLocator . getThumbnailFilePath ( thumbLocation ) ; if ( thumbFilePath ! = null ) { File thumbFile = new File ( thumbFilePath ) ; File parentDir = thumbFile . getParentFile ( ) ; if ( ! parentDir . exists ( ) ) { parentDir . mkdirs ( ) ; } } ParameterBlock parameters = getThumbnailParameterBlock ( image ) ; PlanarImage thumb = JAI . create ( "scale" , parameters , null ) ; thumbnail = new ThumbnailBean ( ) ; thumbnail . setFileWidth ( "" + thumb . getWidth ( ) ) ; thumbnail . setFileHeight ( "" + thumb . getHeight ( ) ) ; thumbnail . setLocation ( thumbLocation ) ; thumbnail . setMetadataId ( metadataId ) ; / / This is a workaround for a bug in the jpeg encoder , to read more / / about the bug , see : / / http : / / www . sun . com / software / imaging / JAI / 11 / bugs_codec . html ParameterBlock pb = new ParameterBlock ( ) ; pb . addSource ( thumb ) ; pb . add ( DataBuffer . TYPE_BYTE ) ; PlanarImage thumbByte = JAI . create ( "format" , pb ) ; FileOutputStream dst = null ; try { dst = new FileOutputStream ( thumbFilePath ) ; ImageEncoder enc = ImageCodec . createImageEncoder ( "JPEG" , dst , null ) ; enc . encode ( thumbByte ) ; } finally { try { if ( dst ! = null ) { dst . close ( ) ; } } catch ( Exception ex ) { / / ignore for now , we just want the stream closed . } } return thumbnail ; }
void test5 ( ) throws Throwable { UploadServicesBean uploadServicesBean0 = new UploadServicesBean ( ) ; boolean boolean0 = uploadServicesBean0 . processVideo ( ( CompleteMetadataBean ) null , "KU + m\" | h } b = RQa" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processVideo ( CompleteMetadataBean complete , String sourceFilePath ) { MetadataBean metadata ; if ( complete = = null | | ( metadata = complete . getMetadata ( ) ) = = null | | sourceFilePath = = null ) { return false ; } try { Player player = getAndRealizePlayer ( sourceFilePath ) ; if ( player = = null ) return false ; if ( ! readDuration ( player , metadata ) ) return false ; / / we got duration , so we should be able to find a frame return readWidthAndHeight ( player , metadata ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return false ; } }
void test6 ( ) throws Throwable { UploadServicesBean uploadServicesBean0 = new UploadServicesBean ( ) ; CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; boolean boolean0 = uploadServicesBean0 . processVideo ( completeMetadataBean0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processVideo ( CompleteMetadataBean complete , String sourceFilePath ) { MetadataBean metadata ; if ( complete = = null | | ( metadata = complete . getMetadata ( ) ) = = null | | sourceFilePath = = null ) { return false ; } try { Player player = getAndRealizePlayer ( sourceFilePath ) ; if ( player = = null ) return false ; if ( ! readDuration ( player , metadata ) ) return false ; / / we got duration , so we should be able to find a frame return readWidthAndHeight ( player , metadata ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return false ; } }
void test7 ( ) throws Throwable { UploadServicesBean uploadServicesBean0 = new UploadServicesBean ( ) ; CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; MetadataBean metadataBean0 = new MetadataBean ( ) ; completeMetadataBean0 . setMetadata ( metadataBean0 ) ; boolean boolean0 = uploadServicesBean0 . processVideo ( completeMetadataBean0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processVideo ( CompleteMetadataBean complete , String sourceFilePath ) { MetadataBean metadata ; if ( complete = = null | | ( metadata = complete . getMetadata ( ) ) = = null | | sourceFilePath = = null ) { return false ; } try { Player player = getAndRealizePlayer ( sourceFilePath ) ; if ( player = = null ) return false ; if ( ! readDuration ( player , metadata ) ) return false ; / / we got duration , so we should be able to find a frame return readWidthAndHeight ( player , metadata ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return false ; } }
void test8 ( ) throws Throwable { UploadServicesBean uploadServicesBean0 = new UploadServicesBean ( ) ; CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; MetadataBean metadataBean0 = new MetadataBean ( ) ; completeMetadataBean0 . setMetadata ( metadataBean0 ) ; boolean boolean0 = uploadServicesBean0 . processVideo ( completeMetadataBean0 , "3V & bQ`_J^#Wz ] PPU > n < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processVideo ( CompleteMetadataBean complete , String sourceFilePath ) { MetadataBean metadata ; if ( complete = = null | | ( metadata = complete . getMetadata ( ) ) = = null | | sourceFilePath = = null ) { return false ; } try { Player player = getAndRealizePlayer ( sourceFilePath ) ; if ( player = = null ) return false ; if ( ! readDuration ( player , metadata ) ) return false ; / / we got duration , so we should be able to find a frame return readWidthAndHeight ( player , metadata ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return false ; } }
void test9 ( ) throws Throwable { UploadServicesBean uploadServicesBean0 = new UploadServicesBean ( ) ; String string0 = uploadServicesBean0 . getUploadPath ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getUploadPath ( ) { if ( fileLocator = = null ) return null ; return fileLocator . getUploadURL ( ) ; }
void test10 ( ) throws Throwable { UploadServicesBean uploadServicesBean0 = new UploadServicesBean ( ) ; boolean boolean0 = uploadServicesBean0 . processAudio ( ( CompleteMetadataBean ) null , " ! zj ] $ } $_" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processAudio ( CompleteMetadataBean complete , String sourceFilePath ) { MetadataBean metadata ; if ( complete = = null | | ( metadata = complete . getMetadata ( ) ) = = null | | sourceFilePath = = null ) { return false ; } try { Player player = getAndRealizePlayer ( sourceFilePath ) ; if ( player = = null ) return false ; return readDuration ( player , metadata ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return false ; } }
void test11 ( ) throws Throwable { UploadServicesBean uploadServicesBean0 = new UploadServicesBean ( ) ; CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; boolean boolean0 = uploadServicesBean0 . processAudio ( completeMetadataBean0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processAudio ( CompleteMetadataBean complete , String sourceFilePath ) { MetadataBean metadata ; if ( complete = = null | | ( metadata = complete . getMetadata ( ) ) = = null | | sourceFilePath = = null ) { return false ; } try { Player player = getAndRealizePlayer ( sourceFilePath ) ; if ( player = = null ) return false ; return readDuration ( player , metadata ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return false ; } }
void test12 ( ) throws Throwable { UploadServicesBean uploadServicesBean0 = new UploadServicesBean ( ) ; CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; MetadataBean metadataBean0 = new MetadataBean ( ) ; completeMetadataBean0 . setMetadata ( metadataBean0 ) ; boolean boolean0 = uploadServicesBean0 . processAudio ( completeMetadataBean0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processAudio ( CompleteMetadataBean complete , String sourceFilePath ) { MetadataBean metadata ; if ( complete = = null | | ( metadata = complete . getMetadata ( ) ) = = null | | sourceFilePath = = null ) { return false ; } try { Player player = getAndRealizePlayer ( sourceFilePath ) ; if ( player = = null ) return false ; return readDuration ( player , metadata ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return false ; } }
void test13 ( ) throws Throwable { UploadServicesBean uploadServicesBean0 = new UploadServicesBean ( ) ; CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; MetadataBean metadataBean0 = new MetadataBean ( ) ; completeMetadataBean0 . setMetadata ( metadataBean0 ) ; boolean boolean0 = uploadServicesBean0 . processAudio ( completeMetadataBean0 , "3V & bQ`_J^#Wz ] PPU > n < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processAudio ( CompleteMetadataBean complete , String sourceFilePath ) { MetadataBean metadata ; if ( complete = = null | | ( metadata = complete . getMetadata ( ) ) = = null | | sourceFilePath = = null ) { return false ; } try { Player player = getAndRealizePlayer ( sourceFilePath ) ; if ( player = = null ) return false ; return readDuration ( player , metadata ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return false ; } }
void test14 ( ) throws Throwable { UploadServicesBean uploadServicesBean0 = new UploadServicesBean ( ) ; boolean boolean0 = uploadServicesBean0 . processImage ( ( CompleteMetadataBean ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processImage ( CompleteMetadataBean complete , String sourceFilePath ) throws IOException { MetadataBean metadata ; String sourceLocation ; String metadataId ; if ( complete = = null | | ( metadata = complete . getMetadata ( ) ) = = null | | ( sourceLocation = metadata . getLocation ( ) ) = = null | | sourceFilePath = = null ) { return false ; } / / metadataId may or may not be null metadataId = metadata . getMetadataId ( ) ; if ( sourceLocation = = null ) { return false ; } try { PlanarImage image = JAI . create ( "fileload" , sourceFilePath ) ; metadata . setFileHeight ( "" + image . getHeight ( ) ) ; metadata . setFileWidth ( "" + image . getWidth ( ) ) ; ThumbnailBean thumbnail = null ; try { thumbnail = generateThumbnail ( sourceLocation , metadataId , image ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; thumbnail = null ; } complete . setThumbnail ( thumbnail ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return false ; } return true ; }
void test15 ( ) throws Throwable { UploadServicesBean uploadServicesBean0 = new UploadServicesBean ( ) ; CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; boolean boolean0 = uploadServicesBean0 . processImage ( completeMetadataBean0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processImage ( CompleteMetadataBean complete , String sourceFilePath ) throws IOException { MetadataBean metadata ; String sourceLocation ; String metadataId ; if ( complete = = null | | ( metadata = complete . getMetadata ( ) ) = = null | | ( sourceLocation = metadata . getLocation ( ) ) = = null | | sourceFilePath = = null ) { return false ; } / / metadataId may or may not be null metadataId = metadata . getMetadataId ( ) ; if ( sourceLocation = = null ) { return false ; } try { PlanarImage image = JAI . create ( "fileload" , sourceFilePath ) ; metadata . setFileHeight ( "" + image . getHeight ( ) ) ; metadata . setFileWidth ( "" + image . getWidth ( ) ) ; ThumbnailBean thumbnail = null ; try { thumbnail = generateThumbnail ( sourceLocation , metadataId , image ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; thumbnail = null ; } complete . setThumbnail ( thumbnail ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return false ; } return true ; }
void test16 ( ) throws Throwable { UploadServicesBean uploadServicesBean0 = new UploadServicesBean ( ) ; CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; MetadataBean metadataBean0 = new MetadataBean ( ) ; completeMetadataBean0 . setMetadata ( metadataBean0 ) ; boolean boolean0 = uploadServicesBean0 . processImage ( completeMetadataBean0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean processImage ( CompleteMetadataBean complete , String sourceFilePath ) throws IOException { MetadataBean metadata ; String sourceLocation ; String metadataId ; if ( complete = = null | | ( metadata = complete . getMetadata ( ) ) = = null | | ( sourceLocation = metadata . getLocation ( ) ) = = null | | sourceFilePath = = null ) { return false ; } / / metadataId may or may not be null metadataId = metadata . getMetadataId ( ) ; if ( sourceLocation = = null ) { return false ; } try { PlanarImage image = JAI . create ( "fileload" , sourceFilePath ) ; metadata . setFileHeight ( "" + image . getHeight ( ) ) ; metadata . setFileWidth ( "" + image . getWidth ( ) ) ; ThumbnailBean thumbnail = null ; try { thumbnail = generateThumbnail ( sourceLocation , metadataId , image ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; thumbnail = null ; } complete . setThumbnail ( thumbnail ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return false ; } return true ; }
void test0 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendLanguageElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasCustomAbout ( ) { return true ; }
void test1 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; byte [ ] byteArray0 = new byte [ 1 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( - 1468 ) , ( - 1468 ) ) ; InputStreamBody inputStreamBody0 = new InputStreamBody ( ( InputStream ) byteArrayInputStream0 ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) inputStreamBody0 . getOwnerDocument ( ) ; hEALNSDLQDCRecordAdapter0 . appendDCTRightsHolderElements ( ( Element ) null , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNSDLAbout ( ) { return false ; }
void test3 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; Detail detail0 = new Detail ( ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) detail0 . getOwnerDocument ( ) ; hEALNSDLQDCRecordAdapter0 . appendDCTIsFormatOfElements ( ( Element ) detail0 , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTIsFormatOfElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test4 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; InputStreamBody inputStreamBody0 = new InputStreamBody ( ( InputStream ) null ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) inputStreamBody0 . getOwnerDocument ( ) ; hEALNSDLQDCRecordAdapter0 . appendDCTDateSubmittedElements ( ( Element ) null , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNSDLAbout ( ) { return false ; }
void test5 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; SOAPBodyElement sOAPBodyElement0 = new SOAPBodyElement ( ( String ) null , ( String ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTInstructionalMethodElements ( ( Element ) sOAPBodyElement0 , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTInstructionalMethodElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test6 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; RPCElement rPCElement0 = new RPCElement ( "xsi" ) ; hEALNSDLQDCRecordAdapter0 . appendDCTMediatorElements ( ( Element ) rPCElement0 , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTMediatorElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test7 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; MimeHeaders mimeHeaders0 = new MimeHeaders ( ) ; Message message0 = new Message ( ( Object ) "org . apache . axis . encoding . ser . ArrayDeserializerFactory" , mimeHeaders0 ) ; SOAPPart sOAPPart0 = new SOAPPart ( message0 , ( Object ) "Factory" , false ) ; RPCParam rPCParam0 = new RPCParam ( "z6E^34W * `~lvY9J" , "z6E^34W * `~lvY9J" , "deployment" ) ; hEALNSDLQDCRecordAdapter0 . addOAIAboutAttributes ( ( Element ) rPCParam0 , ( Document ) sOAPPart0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLength ( ) { return String . valueOf ( this . length ) ; }
void test8 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendInteractivityTypeElement ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasCustomAbout ( ) { return true ; }
void test9 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; Detail detail0 = new Detail ( ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) detail0 . getOwnerDocument ( ) ; hEALNSDLQDCRecordAdapter0 . appendDCTDateCopyrightedElements ( ( Element ) null , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTDateCopyrightedElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test10 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; Detail detail0 = new Detail ( ) ; hEALNSDLQDCRecordAdapter0 . appendDCTIsReplacedByElements ( ( Element ) detail0 , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTIsReplacedByElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test11 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; InputStreamBody inputStreamBody0 = new InputStreamBody ( ( InputStream ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTBibliograhicCitationElements ( ( Element ) inputStreamBody0 , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTBibliograhicCitationElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test12 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTAccessRightsElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOAIAbout ( ) { return false ; }
void test14 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; Detail detail0 = new Detail ( ) ; hEALNSDLQDCRecordAdapter0 . appendCreateorElements ( ( Element ) detail0 , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendCreateorElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub / / lifecycle contribute role / / if role is primary , then also lifecycle contribute centity }
void test15 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTAudienceElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOAIAbout ( ) { return false ; }
void test16 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; SOAPBodyElement sOAPBodyElement0 = new SOAPBodyElement ( ( String ) null , ( String ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTAccrualMethodElements ( ( Element ) sOAPBodyElement0 , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTAccrualMethodElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test18 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; String [ ] stringArray0 = new String [ 10 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 2 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , ( - 1 ) , ( String ) null , ( String ) null , ( String ) null , stringArray0 , stringArray0 , ( String ) null , stringArray0 , ( String ) null , "Node : " , oAIMetadataFormatArray0 , ( String ) null ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , hEALProviderConfig0 ) ; SOAPFaultElement sOAPFaultElement0 = new SOAPFaultElement ( ) ; NamespaceNode namespaceNode0 = new NamespaceNode ( ( Node ) sOAPFaultElement0 , "~" , "" ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) namespaceNode0 . getOwnerDocument ( ) ; hEALNSDLQDCRecordAdapter0 . addRecordAttributes ( ( Element ) sOAPFaultElement0 , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addRecordAttributes ( Element recordElem , Document doc ) { recordElem . setAttribute ( "xmlns : " + HEALXMLHelper . HEALNS , HEALXMLHelper . HEALLOC ) ; }
void test19 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTAbstractElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNSDLAbout ( ) { return false ; }
void test20 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTIsPartOfElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasCustomAbout ( ) { return true ; }
void test21 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; byte [ ] byteArray0 = new byte [ 1 ] ; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream ( byteArray0 , ( - 1468 ) , ( - 1468 ) ) ; InputStreamBody inputStreamBody0 = new InputStreamBody ( ( InputStream ) byteArrayInputStream0 ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) inputStreamBody0 . getOwnerDocument ( ) ; hEALNSDLQDCRecordAdapter0 . appendDCTMediumElements ( ( Element ) null , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTMediumElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test22 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; Detail detail0 = new Detail ( ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) detail0 . getOwnerDocument ( ) ; hEALNSDLQDCRecordAdapter0 . appendDCTLicenseElements ( ( Element ) detail0 , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTLicenseElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test23 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; SOAPHeaderElement sOAPHeaderElement0 = new SOAPHeaderElement ( "z6E^34W * `~lvY9J" , "z6E^34W * `~lvY9J" ) ; InputStreamBody inputStreamBody0 = new InputStreamBody ( ( InputStream ) null ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) inputStreamBody0 . getOwnerDocument ( ) ; hEALNSDLQDCRecordAdapter0 . appendDCTHasPartElements ( ( Element ) sOAPHeaderElement0 , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTHasPartElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test24 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendEducationLevelElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNSDLAbout ( ) { return false ; }
void test25 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; String [ ] stringArray0 = new String [ 5 ] ; String [ ] stringArray1 = new String [ 8 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 9 ] ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 2 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 3 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 4 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 5 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 6 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 7 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 8 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , 0 , ( String ) null , ( String ) null , ( String ) null , stringArray0 , stringArray0 , ( String ) null , stringArray1 , ( String ) null , ( String ) null , oAIMetadataFormatArray0 , ( String ) null ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , hEALProviderConfig0 ) ; boolean boolean0 = hEALNSDLQDCRecordAdapter0 . hasOAIAbout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOAIAbout ( ) { return false ; }
void test26 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; boolean boolean0 = hEALNSDLQDCRecordAdapter0 . hasCustomAbout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasCustomAbout ( ) { return true ; }
void test27 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; Detail detail0 = new Detail ( ) ; hEALNSDLQDCRecordAdapter0 . appendDCTIsReferencedByElements ( ( Element ) detail0 , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; String [ ] getDescriptions ( ) ; }
void test28 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendTypicalLearningTimeElement ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasCustomAbout ( ) { return true ; }
void test29 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; String [ ] stringArray0 = new String [ 10 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 2 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , ( - 1 ) , ( String ) null , ( String ) null , ( String ) null , stringArray0 , stringArray0 , ( String ) null , stringArray0 , ( String ) null , "Node : " , oAIMetadataFormatArray0 , ( String ) null ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , hEALProviderConfig0 ) ; SOAPFaultElement sOAPFaultElement0 = new SOAPFaultElement ( ) ; Message message0 = new Message ( ( Object ) "Part : name = null" , false ) ; SOAPPart sOAPPart0 = ( SOAPPart ) message0 . getSOAPPart ( ) ; hEALNSDLQDCRecordAdapter0 . appendOAIAboutElements ( ( Element ) sOAPFaultElement0 , ( Document ) sOAPPart0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendOAIAboutElements ( Element recordElement , Document doc ) { }
void test30 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendSourceElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNSDLAbout ( ) { return false ; }
void test31 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; String [ ] stringArray0 = new String [ 10 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 2 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , ( - 1 ) , ( String ) null , ( String ) null , ( String ) null , stringArray0 , stringArray0 , ( String ) null , stringArray0 , ( String ) null , "Node : " , oAIMetadataFormatArray0 , ( String ) null ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , hEALProviderConfig0 ) ; SOAPFaultElement sOAPFaultElement0 = new SOAPFaultElement ( ) ; NamespaceNode namespaceNode0 = new NamespaceNode ( ( Node ) sOAPFaultElement0 , "~" , "" ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) namespaceNode0 . getOwnerDocument ( ) ; hEALNSDLQDCRecordAdapter0 . appendDCTValidElements ( ( Element ) sOAPFaultElement0 , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTValidElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test32 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; Message message0 = new Message ( ( Object ) "soapAction" , true ) ; SOAPPart sOAPPart0 = new SOAPPart ( message0 , ( Object ) null , true ) ; hEALNSDLQDCRecordAdapter0 . appendDCTExtentElements ( ( Element ) null , ( Document ) sOAPPart0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTExtentElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test33 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTIsRequiredByElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOAIAbout ( ) { return false ; }
void test34 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; Detail detail0 = new Detail ( ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) detail0 . getOwnerDocument ( ) ; hEALNSDLQDCRecordAdapter0 . appendDCTSpatialElements ( ( Element ) null , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOAIAbout ( ) { return false ; }
void test35 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; MimeHeaders mimeHeaders0 = new MimeHeaders ( ) ; Message message0 = new Message ( ( Object ) "org . apache . axis . encoding . ser . ArrayDeserializerFactory" , mimeHeaders0 ) ; SOAPPart sOAPPart0 = new SOAPPart ( message0 , ( Object ) "Factory" , false ) ; hEALNSDLQDCRecordAdapter0 . appendDCTAvailableElements ( ( Element ) null , ( Document ) sOAPPart0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTAvailableElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test36 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; Message message0 = new Message ( ( Object ) "soapAction" , true ) ; SOAPPart sOAPPart0 = new SOAPPart ( message0 , ( Object ) null , true ) ; hEALNSDLQDCRecordAdapter0 . appendDCTAccrualPeriodicityElements ( ( Element ) null , ( Document ) sOAPPart0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTAccrualPeriodicityElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test37 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; Detail detail0 = new Detail ( ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) detail0 . getOwnerDocument ( ) ; hEALNSDLQDCRecordAdapter0 . appendDCTCreatedElements ( ( Element ) detail0 , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTCreatedElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test38 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTModifiedElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOAIAbout ( ) { return false ; }
void test39 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTDateAcceptedElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOAIAbout ( ) { return false ; }
void test40 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; String [ ] stringArray0 = new String [ 10 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 2 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , ( - 1 ) , ( String ) null , ( String ) null , ( String ) null , stringArray0 , stringArray0 , ( String ) null , stringArray0 , ( String ) null , "Node : " , oAIMetadataFormatArray0 , ( String ) null ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , hEALProviderConfig0 ) ; SOAPFaultElement sOAPFaultElement0 = new SOAPFaultElement ( ) ; Message message0 = new Message ( ( Object ) "Part : name = null" , false ) ; SOAPPart sOAPPart0 = ( SOAPPart ) message0 . getSOAPPart ( ) ; hEALNSDLQDCRecordAdapter0 . appendPublisherElements ( ( Element ) sOAPFaultElement0 , ( Document ) sOAPPart0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendPublisherElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test41 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; MimeHeaders mimeHeaders0 = new MimeHeaders ( ) ; Message message0 = new Message ( ( Object ) "org . apache . axis . encoding . ser . ArrayDeserializerFactory" , mimeHeaders0 ) ; SOAPPart sOAPPart0 = new SOAPPart ( message0 , ( Object ) "Factory" , false ) ; hEALNSDLQDCRecordAdapter0 . appendDCTIsVersionOfElements ( ( Element ) null , ( Document ) sOAPPart0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTIsVersionOfElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test42 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendInteractivityLevelElement ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOAIAbout ( ) { return false ; }
void test43 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTConformsToElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNSDLAbout ( ) { return false ; }
void test44 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTProvenanceElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOAIAbout ( ) { return false ; }
void test45 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; Detail detail0 = new Detail ( ) ; RPCElement rPCElement0 = new RPCElement ( " ) > Hf^" ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) rPCElement0 . getOwnerDocument ( ) ; hEALNSDLQDCRecordAdapter0 . appendDCTAlternativeElements ( ( Element ) detail0 , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( ) { return prefix ; }
void test46 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTEducationLevelElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNSDLAbout ( ) { return false ; }
void test47 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTTemporalElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasCustomAbout ( ) { return true ; }
void test48 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTHasFormatElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOAIAbout ( ) { return false ; }
void test49 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; String [ ] stringArray0 = new String [ 10 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 2 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , ( - 1 ) , ( String ) null , ( String ) null , ( String ) null , stringArray0 , stringArray0 , ( String ) null , stringArray0 , ( String ) null , "Node : " , oAIMetadataFormatArray0 , ( String ) null ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , hEALProviderConfig0 ) ; SOAPFaultElement sOAPFaultElement0 = new SOAPFaultElement ( ) ; NamespaceNode namespaceNode0 = new NamespaceNode ( ( Node ) sOAPFaultElement0 , "~" , "" ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) namespaceNode0 . getOwnerDocument ( ) ; hEALNSDLQDCRecordAdapter0 . appendDCTReferencesElements ( ( Element ) sOAPFaultElement0 , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTReferencesElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test50 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; Detail detail0 = new Detail ( ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) detail0 . getOwnerDocument ( ) ; hEALNSDLQDCRecordAdapter0 . appendDCTIssuedElements ( ( Element ) detail0 , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTIssuedElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test51 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; MimeHeaders mimeHeaders0 = new MimeHeaders ( ) ; Message message0 = new Message ( ( Object ) "org . apache . axis . encoding . ser . ArrayDeserializerFactory" , mimeHeaders0 ) ; SOAPPart sOAPPart0 = new SOAPPart ( message0 , ( Object ) "Factory" , false ) ; RPCParam rPCParam0 = new RPCParam ( "z6E^34W * `~lvY9J" , "z6E^34W * `~lvY9J" , "deployment" ) ; hEALNSDLQDCRecordAdapter0 . appendDCTAccrualPolicyElements ( ( Element ) rPCParam0 , ( Document ) sOAPPart0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTAccrualPolicyElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test52 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; Detail detail0 = new Detail ( ) ; RPCElement rPCElement0 = new RPCElement ( " ) > Hf^" ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) rPCElement0 . getOwnerDocument ( ) ; hEALNSDLQDCRecordAdapter0 . appendDCTReplacesElements ( ( Element ) detail0 , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( ) { return prefix ; }
void test53 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; boolean boolean0 = hEALNSDLQDCRecordAdapter0 . hasNSDLAbout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasNSDLAbout ( ) { return false ; }
void test54 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; SOAPHeaderElement sOAPHeaderElement0 = new SOAPHeaderElement ( "z6E^34W * `~lvY9J" , "z6E^34W * `~lvY9J" ) ; hEALNSDLQDCRecordAdapter0 . appendDCTAccessibilityElements ( ( Element ) sOAPHeaderElement0 , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOAIAbout ( ) { return false ; }
void test55 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; Message message0 = new Message ( ( Object ) "soapAction" , true ) ; SOAPPart sOAPPart0 = new SOAPPart ( message0 , ( Object ) null , true ) ; hEALNSDLQDCRecordAdapter0 . appendDCTRequiresElements ( ( Element ) null , ( Document ) sOAPPart0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendDCTRequiresElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test56 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTTableOfContentsElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOAIAbout ( ) { return false ; }
void test57 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendDCTHasVersionElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasCustomAbout ( ) { return true ; }
void test58 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; TaxonPathBean taxonPathBean0 = new TaxonPathBean ( ) ; completeMetadataBean0 . addTaxonPath ( taxonPathBean0 ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; Message message0 = new Message ( ( Object ) "soapAction" , true ) ; SOAPPart sOAPPart0 = new SOAPPart ( message0 , ( Object ) null , true ) ; hEALNSDLQDCRecordAdapter0 . appendSubjectElements ( ( Element ) null , ( Document ) sOAPPart0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendSubjectElements ( Element recordElement , Document doc ) { Collection taxonpaths = metadataBean . getTaxonPaths ( ) ; Iterator iter = taxonpaths . iterator ( ) ; TaxonPathBean tpb ; TaxonBean tb ; while ( iter . hasNext ( ) ) { tpb = ( TaxonPathBean ) iter . next ( ) ; HEALXMLHelper . appendTextElem ( NSDL_DCHandler . QDC_NS + " : subject" , tpb . getSource ( ) , recordElement , doc ) ; Collection taxons = tpb . getTaxons ( ) ; Iterator titer = taxons . iterator ( ) ; while ( titer . hasNext ( ) ) { tb = ( TaxonBean ) titer . next ( ) ; HEALXMLHelper . appendTextElem ( NSDL_DCHandler . QDC_NS + " : subject" , tb . getId ( ) , recordElement , doc ) ; HEALXMLHelper . appendTextElem ( NSDL_DCHandler . QDC_NS + " : subject" , tb . getEntry ( ) , recordElement , doc ) ; } } Collection keywords = metadataBean . getKeywords ( ) ; iter = keywords . iterator ( ) ; KeywordBean kb ; while ( iter . hasNext ( ) ) { kb = ( KeywordBean ) iter . next ( ) ; HEALXMLHelper . appendTextElem ( NSDL_DCHandler . QDC_NS + " : subject" , kb . getKeyword ( ) , recordElement , doc ) ; } }
void test59 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; RelationBean relationBean0 = new RelationBean ( ) ; completeMetadataBean0 . addRelation ( relationBean0 ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendRelationElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasCustomAbout ( ) { return true ; }
void test60 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; CopyrightHolderBean copyrightHolderBean0 = new CopyrightHolderBean ( ) ; completeMetadataBean0 . addCopyrightHolder ( copyrightHolderBean0 ) ; Detail detail0 = new Detail ( ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) detail0 . getOwnerDocument ( ) ; hEALNSDLQDCRecordAdapter0 . appendRightsElements ( ( Element ) null , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendRightsElements ( Element recordElement , Document doc ) { Collection col = metadataBean . getCopyrights ( ) ; Iterator iter = col . iterator ( ) ; CopyrightBean cb ; CopyrightTextBean ctb ; while ( iter . hasNext ( ) ) { cb = ( CopyrightBean ) iter . next ( ) ; ctb = cb . getCopyrightText ( ) ; HEALXMLHelper . appendTextElem ( NSDL_DCHandler . QDC_NS + " : rights" , ctb . getCopyrightText ( ) , recordElement , doc ) ; } col = metadataBean . getCopyrightHolders ( ) ; iter = col . iterator ( ) ; CopyrightHolderBean chb ; String fullName ; while ( iter . hasNext ( ) ) { chb = ( CopyrightHolderBean ) iter . next ( ) ; fullName = HEALXMLHelper . getFullNameFromVCard ( chb . getVCard ( ) ) ; HEALXMLHelper . appendTextElem ( NSDL_DCHandler . QDC_NS + " : rights" , fullName , recordElement , doc ) ; } }
void test61 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALNSDLQDCRecordAdapter0 . appendTypeElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasCustomAbout ( ) { return true ; }
void test0 ( ) throws Throwable { HEALXMLHelper hEALXMLHelper0 = new HEALXMLHelper ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test1 ( ) throws Throwable { String string0 = HEALXMLHelper . getFullNameFromVCard ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullNameFromVCard ( String vcard ) { if ( vcard ! = null ) { int fnIndex = vcard . indexOf ( "fn : " ) ; if ( fnIndex > = 0 ) { int len = vcard . length ( ) ; int stopIndex = fnIndex + 3 ; boolean endOfLine = false ; char here ; while ( stopIndex < len & & ! endOfLine ) { here = vcard . charAt ( stopIndex ) ; if ( here = = '\n' | | here = = '\r' ) { endOfLine = true ; } stopIndex + + ; } return vcard . substring ( fnIndex + 3 , stopIndex ) ; } } return null ; }
void test2 ( ) throws Throwable { String string0 = HEALXMLHelper . getFullNameFromVCard ( "Ka~Ky [ rtr" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFullNameFromVCard ( String vcard ) { if ( vcard ! = null ) { int fnIndex = vcard . indexOf ( "fn : " ) ; if ( fnIndex > = 0 ) { int len = vcard . length ( ) ; int stopIndex = fnIndex + 3 ; boolean endOfLine = false ; char here ; while ( stopIndex < len & & ! endOfLine ) { here = vcard . charAt ( stopIndex ) ; if ( here = = '\n' | | here = = '\r' ) { endOfLine = true ; } stopIndex + + ; } return vcard . substring ( fnIndex + 3 , stopIndex ) ; } } return null ; }
void test4 ( ) throws Throwable { Object [ ] objectArray0 = new Object [ 5 ] ; RPCElement rPCElement0 = new RPCElement ( ( String ) null , ( String ) null , objectArray0 ) ; SOAPFaultElement sOAPFaultElement0 = new SOAPFaultElement ( ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) sOAPFaultElement0 . getOwnerDocument ( ) ; HEALXMLHelper . appendTextElemWithLangstring ( ( String ) null , ( String ) null , ( String ) null , ( String ) null , ( Element ) rPCElement0 , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendTextElemWithLangstring ( String prefix , String namespace , String value , String language , Element parentElem , Document doc ) { if ( value = = null ) return ; String real = value . trim ( ) ; if ( real . length ( ) > 0 ) { Element outerElement = doc . createElement ( prefix ) ; Element langStrElement = doc . createElement ( namespace + " : langstring" ) ; if ( language ! = null ) { langStrElement . setAttribute ( "lang" , language ) ; } Text textElement = doc . createTextNode ( real ) ; langStrElement . appendChild ( textElement ) ; outerElement . appendChild ( langStrElement ) ; parentElem . appendChild ( outerElement ) ; } }
void test7 ( ) throws Throwable { SOAPFaultElement sOAPFaultElement0 = new SOAPFaultElement ( ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) sOAPFaultElement0 . getOwnerDocument ( ) ; HEALXMLHelper . appendTextElemWithDescriptor ( ( String ) null , ( String ) null , ( String ) null , ( Element ) sOAPFaultElement0 , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendTextElemWithDescriptor ( String prefix , String descriptor , String value , Element parentElem , Document doc ) { if ( value = = null ) return ; appendTextElem ( prefix , descriptor + " : " + value , parentElem , doc ) ; }
void test0 ( ) throws Throwable { HEALMetadataFormat hEALMetadataFormat0 = new HEALMetadataFormat ( ) ; HEALHandler hEALHandler0 = ( HEALHandler ) hEALMetadataFormat0 . getHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIMetadataHandler getHandler ( ) { return new HEALHandler ( this ) ; }
void test1 ( ) throws Throwable { HEALMetadataFormat hEALMetadataFormat0 = new HEALMetadataFormat ( ) ; String string0 = hEALMetadataFormat0 . getSchemaLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemaLocation ( ) { return "http : / / www . healcentral . org / services / schema / http : / / www . healcentral . org / services / schema / HEALmdSchemaXMLv1p5 . xsd" ; }
void test2 ( ) throws Throwable { HEALMetadataFormat hEALMetadataFormat0 = new HEALMetadataFormat ( ) ; String string0 = hEALMetadataFormat0 . getNamespace ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNamespace ( ) { return "http : / / www . healcentral . org / xsd / healmd_v1p5" ; }
void test3 ( ) throws Throwable { HEALMetadataFormat hEALMetadataFormat0 = new HEALMetadataFormat ( ) ; String string0 = hEALMetadataFormat0 . getPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( ) { return prefix ; }
void test4 ( ) throws Throwable { HEALMetadataFormat hEALMetadataFormat0 = new HEALMetadataFormat ( ) ; hEALMetadataFormat0 . setPrefix ( "TVd4lU" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemaLocation ( ) { return "http : / / www . healcentral . org / services / schema / http : / / www . healcentral . org / services / schema / HEALmdSchemaXMLv1p5 . xsd" ; }
void test5 ( ) throws Throwable { HEALMetadataFormat hEALMetadataFormat0 = new HEALMetadataFormat ( ) ; String string0 = hEALMetadataFormat0 . getSchema ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchema ( ) { return "http : / / www . healcentral . org / services / schema / HEALmdSchemaXMLv1p5 . xsd" ; }
void test0 ( ) throws Throwable { NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; HEALHandler hEALHandler0 = new HEALHandler ( ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ) ; CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALHandler0 . writeCustomAbout ( ( OAIRecordAdapter ) hEALOAIDCRecordAdapter0 , ( PrintWriter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasCustomAbout ( ) { return true ; }
void test1 ( ) throws Throwable { NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; HEALHandler hEALHandler0 = new HEALHandler ( ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ) ; CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALHandler0 . writeOAIAbout ( ( OAIRecordAdapter ) hEALOAIDCRecordAdapter0 , ( PrintWriter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOAIAbout ( ) { return false ; }
void test2 ( ) throws Throwable { NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; HEALHandler hEALHandler0 = new HEALHandler ( ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ) ; CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALHandler0 . writeAbout ( ( OAIRecordAdapter ) hEALOAIDCRecordAdapter0 , ( PrintWriter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasCustomAbout ( ) { return true ; }
void test3 ( ) throws Throwable { NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; HEALHandler hEALHandler0 = new HEALHandler ( ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ) ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat1 = ( NSDL_DCMetadataFormat ) hEALHandler0 . getFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIMetadataFormat getFormat ( ) { return metadataFormat ; }
void test4 ( ) throws Throwable { NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; HEALHandler hEALHandler0 = new HEALHandler ( ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ) ; CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; hEALHandler0 . writeMetadata ( ( OAIRecordAdapter ) hEALOAIDCRecordAdapter0 , ( PrintWriter ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOAIAbout ( ) { return false ; }
void test0 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; boolean boolean0 = hEALOAIDCRecordAdapter0 . hasCustomAbout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasCustomAbout ( ) { return true ; }
void test1 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; RPCElement rPCElement0 = new RPCElement ( "globalConfiguration" ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) rPCElement0 . getOwnerDocument ( ) ; Detail detail0 = new Detail ( ) ; hEALOAIDCRecordAdapter0 . addRecordAttributes ( ( Element ) detail0 , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addRecordAttributes ( Element recordElem , Document doc ) { recordElem . setAttribute ( "xmlns : " + HEALXMLHelper . HEALNS , HEALXMLHelper . HEALLOC ) ; }
void test2 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; PrefixedQName prefixedQName0 = new PrefixedQName ( "q = hy / k6 = l`N\"Hb" , "q = hy / k6 = l`N\"Hb" , "q = hy / k6 = l`N\"Hb" ) ; SOAPBodyElement sOAPBodyElement0 = new SOAPBodyElement ( ( Name ) prefixedQName0 ) ; RPCElement rPCElement0 = new RPCElement ( "globalConfiguration" ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) rPCElement0 . getOwnerDocument ( ) ; hEALOAIDCRecordAdapter0 . appendSourceElements ( ( Element ) sOAPBodyElement0 , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test3 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; QName qName0 = WSDDConstants . QNAME_JAXRPC_ROLE ; RPCParam rPCParam0 = new RPCParam ( qName0 , ( Object ) "role" ) ; hEALOAIDCRecordAdapter0 . appendPublisherElements ( ( Element ) rPCParam0 , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendPublisherElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test4 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; CDATAImpl cDATAImpl0 = new CDATAImpl ( "" ) ; MessageElement messageElement0 = new MessageElement ( ( CharacterData ) cDATAImpl0 ) ; hEALOAIDCRecordAdapter0 . addOAIAboutAttributes ( ( Element ) messageElement0 , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void addOAIAboutAttributes ( Element recordElem , Document doc ) { }
void test5 ( ) throws Throwable { HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( ( CompleteMetadataBean ) null , ( HEALProviderConfig ) null ) ; hEALOAIDCRecordAdapter0 . appendCreatorElements ( ( Element ) null , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasCustomAbout ( ) { return true ; }
void test7 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; PrefixedQName prefixedQName0 = new PrefixedQName ( "q = hy / k6 = l`N\"Hb" , "q = hy / k6 = l`N\"Hb" , "q = hy / k6 = l`N\"Hb" ) ; SOAPBodyElement sOAPBodyElement0 = new SOAPBodyElement ( ( Name ) prefixedQName0 ) ; RPCElement rPCElement0 = new RPCElement ( "globalConfiguration" ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) rPCElement0 . getOwnerDocument ( ) ; hEALOAIDCRecordAdapter0 . appendOAIAboutElements ( ( Element ) sOAPBodyElement0 , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendOAIAboutElements ( Element recordElement , Document doc ) { }
void test10 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; boolean boolean0 = hEALOAIDCRecordAdapter0 . hasOAIAbout ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasOAIAbout ( ) { return false ; }
void test11 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; SOAP12Constants sOAP12Constants0 = new SOAP12Constants ( ) ; SOAPEnvelope sOAPEnvelope0 = new SOAPEnvelope ( ( SOAPConstants ) sOAP12Constants0 ) ; hEALOAIDCRecordAdapter0 . appendLanguageElements ( ( Element ) sOAPEnvelope0 , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendLanguageElements ( Element recordElement , Document doc ) { / / TODO Auto - generated method stub }
void test12 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; TaxonPathBean taxonPathBean0 = new TaxonPathBean ( ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; completeMetadataBean0 . addTaxonPath ( taxonPathBean0 ) ; TaxonBean taxonBean0 = new TaxonBean ( ) ; taxonPathBean0 . addTaxon ( taxonBean0 ) ; QName qName0 = WSDDConstants . QNAME_NAMESPACE ; RPCParam rPCParam0 = new RPCParam ( qName0 , ( Object ) "axis . attachments . Directory" ) ; RPCHeaderParam rPCHeaderParam0 = new RPCHeaderParam ( rPCParam0 ) ; DeferredDocumentImpl deferredDocumentImpl0 = ( DeferredDocumentImpl ) rPCHeaderParam0 . getAsDocument ( ) ; hEALOAIDCRecordAdapter0 . appendSubjectElements ( ( Element ) rPCParam0 , ( Document ) deferredDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean hasCustomAbout ( ) { return true ; }
void test13 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; KeywordBean keywordBean0 = new KeywordBean ( ) ; completeMetadataBean0 . addKeyword ( keywordBean0 ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; QName qName0 = WSDDConstants . QNAME_NAMESPACE ; RPCParam rPCParam0 = new RPCParam ( qName0 , ( Object ) "axis . attachments . Directory" ) ; RPCHeaderParam rPCHeaderParam0 = new RPCHeaderParam ( rPCParam0 ) ; DeferredDocumentImpl deferredDocumentImpl0 = ( DeferredDocumentImpl ) rPCHeaderParam0 . getAsDocument ( ) ; hEALOAIDCRecordAdapter0 . appendSubjectElements ( ( Element ) rPCParam0 , ( Document ) deferredDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendSubjectElements ( Element recordElement , Document doc ) { Collection taxonpaths = metadataBean . getTaxonPaths ( ) ; Iterator iter = taxonpaths . iterator ( ) ; TaxonPathBean tpb ; TaxonBean tb ; while ( iter . hasNext ( ) ) { tpb = ( TaxonPathBean ) iter . next ( ) ; HEALXMLHelper . appendTextElem ( NSDL_DCHandler . QDC_NS + " : subject" , tpb . getSource ( ) , recordElement , doc ) ; Collection taxons = tpb . getTaxons ( ) ; Iterator titer = taxons . iterator ( ) ; while ( titer . hasNext ( ) ) { tb = ( TaxonBean ) titer . next ( ) ; HEALXMLHelper . appendTextElem ( NSDL_DCHandler . QDC_NS + " : subject" , tb . getId ( ) , recordElement , doc ) ; HEALXMLHelper . appendTextElem ( NSDL_DCHandler . QDC_NS + " : subject" , tb . getEntry ( ) , recordElement , doc ) ; } } Collection keywords = metadataBean . getKeywords ( ) ; iter = keywords . iterator ( ) ; KeywordBean kb ; while ( iter . hasNext ( ) ) { kb = ( KeywordBean ) iter . next ( ) ; HEALXMLHelper . appendTextElem ( NSDL_DCHandler . QDC_NS + " : subject" , kb . getKeyword ( ) , recordElement , doc ) ; } }
void test14 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; FormatBean formatBean0 = new FormatBean ( ) ; completeMetadataBean0 . addFormat ( formatBean0 ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; PrefixedQName prefixedQName0 = new PrefixedQName ( "q = hy / k6 = l`N\"Hb" , "q = hy / k6 = l`N\"Hb" , "q = hy / k6 = l`N\"Hb" ) ; SOAPBodyElement sOAPBodyElement0 = new SOAPBodyElement ( ( Name ) prefixedQName0 ) ; RPCElement rPCElement0 = new RPCElement ( "globalConfiguration" ) ; SOAPDocumentImpl sOAPDocumentImpl0 = ( SOAPDocumentImpl ) rPCElement0 . getOwnerDocument ( ) ; hEALOAIDCRecordAdapter0 . appendTypeElements ( ( Element ) sOAPBodyElement0 , ( Document ) sOAPDocumentImpl0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test15 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; RelationBean relationBean0 = new RelationBean ( ) ; completeMetadataBean0 . addRelation ( relationBean0 ) ; SOAPFaultElement sOAPFaultElement0 = new SOAPFaultElement ( ) ; hEALOAIDCRecordAdapter0 . appendRelationElements ( ( Element ) sOAPFaultElement0 , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendRelationElements ( Element recordElement , Document doc ) { Collection relations = metadataBean . getRelations ( ) ; Iterator iter = relations . iterator ( ) ; RelationBean rb ; while ( iter . hasNext ( ) ) { rb = ( RelationBean ) iter . next ( ) ; HEALXMLHelper . appendTextElem ( NSDL_DCHandler . QDC_NS + " : relation" , rb . getKind ( ) , recordElement , doc ) ; HEALXMLHelper . appendTextElem ( NSDL_DCHandler . QDC_NS + " : relation" , rb . getDescription ( ) , recordElement , doc ) ; / / XXX TODO this next line needs to have the relation lookup tweaked to include the GlobalID of / / the resource . . . and to lookup the resource's catalog entries and catalog / / HEALXMLHelper . appendTextElem ( NSDL_DCHandler . QDC_NS + " : relation" , rb . getResource ( ) , recordElement , doc ) ; } }
void test16 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; CopyrightHolderBean copyrightHolderBean0 = new CopyrightHolderBean ( ) ; completeMetadataBean0 . addCopyrightHolder ( copyrightHolderBean0 ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = new HEALOAIDCRecordAdapter ( completeMetadataBean0 , ( HEALProviderConfig ) null ) ; SOAP12Constants sOAP12Constants0 = new SOAP12Constants ( ) ; SOAPEnvelope sOAPEnvelope0 = new SOAPEnvelope ( ( SOAPConstants ) sOAP12Constants0 ) ; hEALOAIDCRecordAdapter0 . appendRightsElements ( ( Element ) sOAPEnvelope0 , ( Document ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void appendRightsElements ( Element recordElement , Document doc ) { Collection col = metadataBean . getCopyrights ( ) ; Iterator iter = col . iterator ( ) ; CopyrightBean cb ; CopyrightTextBean ctb ; while ( iter . hasNext ( ) ) { cb = ( CopyrightBean ) iter . next ( ) ; ctb = cb . getCopyrightText ( ) ; HEALXMLHelper . appendTextElem ( NSDL_DCHandler . QDC_NS + " : rights" , ctb . getCopyrightText ( ) , recordElement , doc ) ; } col = metadataBean . getCopyrightHolders ( ) ; iter = col . iterator ( ) ; CopyrightHolderBean chb ; String fullName ; while ( iter . hasNext ( ) ) { chb = ( CopyrightHolderBean ) iter . next ( ) ; fullName = HEALXMLHelper . getFullNameFromVCard ( chb . getVCard ( ) ) ; HEALXMLHelper . appendTextElem ( NSDL_DCHandler . QDC_NS + " : rights" , fullName , recordElement , doc ) ; } }
void test0 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; Date date0 = new Date ( 1818L ) ; HEALRecord hEALRecord0 = new HEALRecord ( completeMetadataBean0 , ( HEALProviderConfig ) null , " ! 'zXjd8Fe8f ? F { @A > " , date0 ) ; boolean boolean0 = hEALRecord0 . isDeleted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isDeleted ( ) { / / HEAL doesn't support deleted metadata return false ; }
void test1 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; Date date0 = new Date ( ) ; HEALRecord hEALRecord0 = new HEALRecord ( completeMetadataBean0 , ( HEALProviderConfig ) null , " 6 - brtm [ : " , date0 ) ; String string0 = hEALRecord0 . getOAIIdentifier ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOAIIdentifier ( ) { return identifier ; }
void test2 ( ) throws Throwable { Date date0 = new Date ( ) ; HEALRecord hEALRecord0 = new HEALRecord ( ( String ) null , date0 , ( HEALProviderConfig ) null ) ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; hEALRecord0 . getRecordAdapter ( ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIRecordAdapter getRecordAdapter ( OAIMetadataFormat format ) { if ( metadataBean ! = null ) { if ( format instanceof OAI_DCMetadataFormat ) { / / pass in the complete metadata return new HEALOAIDCRecordAdapter ( metadataBean , config ) ; } else if ( format instanceof NSDL_DCMetadataFormat ) { return new HEALNSDLQDCRecordAdapter ( metadataBean , config ) ; } } return null ; }
void test3 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; Date date0 = new Date ( ) ; HEALRecord hEALRecord0 = new HEALRecord ( completeMetadataBean0 , ( HEALProviderConfig ) null , ( String ) null , date0 ) ; Date date1 = hEALRecord0 . getDateStamp ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getDateStamp ( ) { return dateStamp ; }
void test4 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; Date date0 = new Date ( ) ; HEALRecord hEALRecord0 = new HEALRecord ( completeMetadataBean0 , ( HEALProviderConfig ) null , ( String ) null , date0 ) ; OAISet [ ] oAISetArray0 = hEALRecord0 . getSets ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAISet [ ] getSets ( ) { / / we don't support sets yet return null ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 11 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 2 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; nSDL_DCMetadataFormat0 . setPrefix ( " [ > kp = A4CVGY" ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; Date date0 = new Date ( ( long ) ( - 19 ) ) ; OAIMetadataFormat [ ] oAIMetadataFormatArray1 = new OAIMetadataFormat [ 1 ] ; oAIMetadataFormatArray1 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( " [ > kp = A4CVGY" , ( - 19 ) , ( String ) null , " [ > kp = A4CVGY" , ( String ) null , stringArray0 , stringArray0 , "H`C" , stringArray0 , " [ > kp = A4CVGY" , "H`C" , oAIMetadataFormatArray1 , ( String ) null ) ; HEALRecord hEALRecord0 = new HEALRecord ( ( String ) null , date0 , hEALProviderConfig0 ) ; boolean boolean0 = hEALRecord0 . supportsMetadataFormat ( oAIMetadataFormatArray0 [ 0 ] ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsMetadataFormat ( OAIMetadataFormat format ) { / / HEAL supports all formats for all records boolean result = false ; / / as long as we have only a few formats , not hundreds , this is / / efficient enough String metadataPrefix = format . getPrefix ( ) ; OAIMetadataFormat [ ] formats = config . getAllMetadataFormats ( ) ; for ( int i = 0 ; i < formats . length & & ! result ; i + + ) { result = formats [ i ] . getPrefix ( ) . equals ( metadataPrefix ) ; } return result ; }
void test6 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; String [ ] stringArray0 = new String [ 11 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 2 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; nSDL_DCMetadataFormat0 . setPrefix ( " [ > kp = A4CVGY" ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; Date date0 = new Date ( ( long ) ( - 19 ) ) ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , ( - 19 ) , ( String ) null , ( String ) null , ( String ) null , stringArray0 , stringArray0 , " [ > kp = A4CVGY" , stringArray0 , ( String ) null , ( String ) null , oAIMetadataFormatArray0 , ( String ) null ) ; HEALRecord hEALRecord0 = new HEALRecord ( completeMetadataBean0 , hEALProviderConfig0 , ( String ) null , date0 ) ; boolean boolean0 = hEALRecord0 . supportsMetadataFormat ( ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean supportsMetadataFormat ( OAIMetadataFormat format ) { / / HEAL supports all formats for all records boolean result = false ; / / as long as we have only a few formats , not hundreds , this is / / efficient enough String metadataPrefix = format . getPrefix ( ) ; OAIMetadataFormat [ ] formats = config . getAllMetadataFormats ( ) ; for ( int i = 0 ; i < formats . length & & ! result ; i + + ) { result = formats [ i ] . getPrefix ( ) . equals ( metadataPrefix ) ; } return result ; }
void test7 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; Date date0 = new Date ( ) ; HEALRecord hEALRecord0 = new HEALRecord ( completeMetadataBean0 , ( HEALProviderConfig ) null , " 6 - brtm [ : " , date0 ) ; boolean boolean0 = hEALRecord0 . checkIsValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkIsValid ( ) { if ( identifier = = null ) return false ; return true ; }
void test8 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; Date date0 = new Date ( ) ; HEALRecord hEALRecord0 = new HEALRecord ( completeMetadataBean0 , ( HEALProviderConfig ) null , ( String ) null , date0 ) ; boolean boolean0 = hEALRecord0 . checkIsValid ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean checkIsValid ( ) { if ( identifier = = null ) return false ; return true ; }
void test9 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; Date date0 = new Date ( ) ; HEALRecord hEALRecord0 = new HEALRecord ( completeMetadataBean0 , ( HEALProviderConfig ) null , " 6 - brtm [ : " , date0 ) ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; hEALRecord0 . getRecordAdapter ( ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIRecordAdapter getRecordAdapter ( OAIMetadataFormat format ) { if ( metadataBean ! = null ) { if ( format instanceof OAI_DCMetadataFormat ) { / / pass in the complete metadata return new HEALOAIDCRecordAdapter ( metadataBean , config ) ; } else if ( format instanceof NSDL_DCMetadataFormat ) { return new HEALNSDLQDCRecordAdapter ( metadataBean , config ) ; } } return null ; }
void test10 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; Date date0 = new Date ( ) ; HEALRecord hEALRecord0 = new HEALRecord ( completeMetadataBean0 , ( HEALProviderConfig ) null , " 6 - brtm [ : " , date0 ) ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; hEALRecord0 . getRecordAdapter ( ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIRecordAdapter getRecordAdapter ( OAIMetadataFormat format ) { if ( metadataBean ! = null ) { if ( format instanceof OAI_DCMetadataFormat ) { / / pass in the complete metadata return new HEALOAIDCRecordAdapter ( metadataBean , config ) ; } else if ( format instanceof NSDL_DCMetadataFormat ) { return new HEALNSDLQDCRecordAdapter ( metadataBean , config ) ; } } return null ; }
void test11 ( ) throws Throwable { CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; Date date0 = new Date ( 1818L ) ; HEALRecord hEALRecord0 = new HEALRecord ( completeMetadataBean0 , ( HEALProviderConfig ) null , " ! 'zXjd8Fe8f ? F { @A > " , date0 ) ; HEALOAIDCRecordAdapter hEALOAIDCRecordAdapter0 = ( HEALOAIDCRecordAdapter ) hEALRecord0 . getRecordAdapter ( ( OAIMetadataFormat ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIRecordAdapter getRecordAdapter ( OAIMetadataFormat format ) { if ( metadataBean ! = null ) { if ( format instanceof OAI_DCMetadataFormat ) { / / pass in the complete metadata return new HEALOAIDCRecordAdapter ( metadataBean , config ) ; } else if ( format instanceof NSDL_DCMetadataFormat ) { return new HEALNSDLQDCRecordAdapter ( metadataBean , config ) ; } } return null ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 3 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 2 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , 0 , "d ( V" , "d ( V" , ( String ) null , stringArray0 , stringArray0 , "d ( V" , stringArray0 , "d ( V" , ( String ) null , oAIMetadataFormatArray0 , "d ( V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDPrefix ( ) { return idPrefix ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 15 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 2 ] ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( "YYYY - MM - DD" , 212 , "YYYY - MM - DD" , "YYYY - MM - DD" , "YYYY - MM - DD" , stringArray0 , stringArray0 , ( String ) null , stringArray0 , "YYYY - MM - DD" , " [ G'_L7L [ < S . ) ? S { u } V" , oAIMetadataFormatArray0 , "YYYY - MM - DD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHEALVCard ( ) { return healVCard ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 1 ] ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , ( - 595 ) , ( String ) null , ( String ) null , ( String ) null , stringArray0 , stringArray0 , ( String ) null , stringArray0 , ( String ) null , " ] My" , oAIMetadataFormatArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCoverage ( ) { return coverage ; }
void test3 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 1 ] ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , ( - 595 ) , ( String ) null , ( String ) null , ( String ) null , stringArray0 , stringArray0 , ( String ) null , stringArray0 , ( String ) null , " ] My" , oAIMetadataFormatArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDPrefix ( ) { return idPrefix ; }
void test4 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 1 ] ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , ( - 595 ) , ( String ) null , ( String ) null , ( String ) null , stringArray0 , stringArray0 , ( String ) null , stringArray0 , ( String ) null , " ] My" , oAIMetadataFormatArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDPrefix ( ) { return idPrefix ; }
void test5 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 2 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , ( - 617 ) , ( String ) null , ( String ) null , ( String ) null , stringArray0 , ( String [ ] ) null , ( String ) null , stringArray0 , ( String ) null , ( String ) null , oAIMetadataFormatArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRepositoryName ( ) { return repositoryName ; }
void test6 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 1 ] ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , 17 , ( String ) null , ( String ) null , ( String ) null , stringArray0 , stringArray0 , ( String ) null , stringArray0 , ( String ) null , ( String ) null , oAIMetadataFormatArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBaseURL ( ) { return baseURL ; }
void test7 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 3 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 2 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , 0 , "d ( V" , "d ( V" , ( String ) null , stringArray0 , stringArray0 , "d ( V" , stringArray0 , "d ( V" , ( String ) null , oAIMetadataFormatArray0 , "d ( V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBaseURL ( ) { return baseURL ; }
void test8 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 1 ] ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , ( - 595 ) , ( String ) null , ( String ) null , ( String ) null , ( String [ ] ) null , stringArray0 , ( String ) null , stringArray0 , " ] My" , " ] My" , oAIMetadataFormatArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCoverage ( ) { return coverage ; }
void test9 ( ) throws Throwable { String [ ] stringArray0 = new String [ 15 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 2 ] ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( "YYYY - MM - DD" , 212 , "YYYY - MM - DD" , "YYYY - MM - DD" , "YYYY - MM - DD" , stringArray0 , stringArray0 , ( String ) null , stringArray0 , "YYYY - MM - DD" , " [ G'_L7L [ < S . ) ? S { u } V" , oAIMetadataFormatArray0 , "YYYY - MM - DD" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getDateFromString ( String dateStr ) { Date result = null ; try { result = granularity . parse ( dateStr ) ; } catch ( ParseException ex ) { if ( HEALProviderConfig . debug ) { System . out . println ( " * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * " ) ; System . out . println ( "Error occured getting date : " ) ; ex . printStackTrace ( ) ; System . out . println ( " * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * " ) ; } } return result ; }
void test10 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 3 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 2 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , 0 , "d ( V" , "d ( V" , ( String ) null , stringArray0 , stringArray0 , "d ( V" , stringArray0 , "d ( V" , ( String ) null , oAIMetadataFormatArray0 , "d ( V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBaseURL ( ) { return baseURL ; }
void test11 ( ) throws Throwable { String [ ] stringArray0 = new String [ 5 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 10 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 2 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 3 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 4 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 5 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 6 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 7 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 8 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 9 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , 1188 , " ) / LkKT - v\"2VD\" - , zK" , " ) / LkKT - v\"2VD\" - , zK" , ( String ) null , stringArray0 , stringArray0 , " ) / LkKT - v\"2VD\" - , zK" , stringArray0 , " ) / LkKT - v\"2VD\" - , zK" , ( String ) null , oAIMetadataFormatArray0 , " ) / LkKT - v\"2VD\" - , zK" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDPrefix ( ) { return idPrefix ; }
void test12 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 3 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 2 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , 0 , "d ( V" , "d ( V" , ( String ) null , stringArray0 , stringArray0 , "d ( V" , stringArray0 , "d ( V" , ( String ) null , oAIMetadataFormatArray0 , "d ( V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBaseURL ( ) { return baseURL ; }
void test13 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 3 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 2 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , 0 , "d ( V" , "d ( V" , ( String ) null , stringArray0 , stringArray0 , "d ( V" , stringArray0 , "d ( V" , ( String ) null , oAIMetadataFormatArray0 , "d ( V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBaseURL ( ) { return baseURL ; }
void test14 ( ) throws Throwable { String [ ] stringArray0 = new String [ 5 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 2 ] ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , 0 , ( String ) null , ( String ) null , ( String ) null , stringArray0 , stringArray0 , ( String ) null , stringArray0 , ( String ) null , ( String ) null , oAIMetadataFormatArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetametadataRole ( ) { return metametadataRole ; }
void test15 ( ) throws Throwable { String [ ] stringArray0 = new String [ 4 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 3 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 2 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , 0 , "d ( V" , "d ( V" , ( String ) null , stringArray0 , stringArray0 , "d ( V" , stringArray0 , "d ( V" , ( String ) null , oAIMetadataFormatArray0 , "d ( V" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDPrefix ( ) { return idPrefix ; }
void test16 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 1 ] ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , ( - 595 ) , ( String ) null , ( String ) null , ( String ) null , stringArray0 , stringArray0 , ( String ) null , stringArray0 , ( String ) null , " ] My" , oAIMetadataFormatArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRepositoryName ( ) { return repositoryName ; }
void test17 ( ) throws Throwable { String [ ] stringArray0 = new String [ 5 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 10 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 2 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 3 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 4 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 5 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 6 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 7 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 8 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 9 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , 1188 , " ) / LkKT - v\"2VD\" - , zK" , " ) / LkKT - v\"2VD\" - , zK" , ( String ) null , stringArray0 , stringArray0 , " ) / LkKT - v\"2VD\" - , zK" , stringArray0 , " ) / LkKT - v\"2VD\" - , zK" , ( String ) null , oAIMetadataFormatArray0 , " ) / LkKT - v\"2VD\" - , zK" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDPrefix ( ) { return idPrefix ; }
void test18 ( ) throws Throwable { String [ ] stringArray0 = new String [ 6 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 2 ] ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; oAIMetadataFormatArray0 [ 1 ] = ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , ( - 617 ) , ( String ) null , ( String ) null , ( String ) null , stringArray0 , ( String [ ] ) null , ( String ) null , stringArray0 , ( String ) null , ( String ) null , oAIMetadataFormatArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getBaseURL ( ) { return baseURL ; }
void test19 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 1 ] ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , 17 , ( String ) null , ( String ) null , ( String ) null , stringArray0 , stringArray0 , ( String ) null , stringArray0 , ( String ) null , ( String ) null , oAIMetadataFormatArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getIDPrefix ( ) { return idPrefix ; }
void test20 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 1 ] ; OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , ( - 595 ) , ( String ) null , ( String ) null , ( String ) null , stringArray0 , stringArray0 , ( String ) null , stringArray0 , ( String ) null , " ] My" , oAIMetadataFormatArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRepositoryName ( ) { return repositoryName ; }
void test0 ( ) throws Throwable { OAIErrorCode oAIErrorCode0 = OAIErrorCode . getErrorCode ( "Mf8" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIErrorCode getErrorCode ( String name ) { return ( OAIErrorCode ) errorCodes . get ( name ) ; }
void test1 ( ) throws Throwable { OAIErrorCode oAIErrorCode0 = OAIErrorCode . NO_METADATA_FORMATS ; String string0 = oAIErrorCode0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; String [ ] getDescriptions ( ) ; }
void test1 ( ) throws Throwable { OAIProvider oAIProvider0 = new OAIProvider ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test4 ( ) throws Throwable { OAIErrorCode oAIErrorCode0 = OAIErrorCode . CANNOT_DISSEMINATE_FORMAT ; String string0 = OAIProvider . getErrorString ( oAIErrorCode0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getErrorString ( OAIErrorCode code , String description ) { StringBuffer buf = new StringBuffer ( ) ; buf . append ( " < error code = \"" ) ; buf . append ( code . getName ( ) ) ; buf . append ( "\" > " ) ; if ( description ! = null ) { buf . append ( description ) ; } buf . append ( " < / error > " ) ; return buf . toString ( ) ; }
void test6 ( ) throws Throwable { BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . generateQueryCompleteToken ( ) ; CharArrayWriter charArrayWriter0 = new CharArrayWriter ( 101 ) ; PrintWriter printWriter0 = new PrintWriter ( ( Writer ) charArrayWriter0 ) ; OAIProvider . writeResumptionToken ( ( OAIResumptionToken ) basicResumptionToken0 , printWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test0 ( ) throws Throwable { ValidatedInput validatedInput0 = new ValidatedInput ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { OAIGranularity oAIGranularity0 = OAIGranularity . getGranularity ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIGranularity getGranularity ( ) { return granularity ; }
void test2 ( ) throws Throwable { OAIGranularity oAIGranularity0 = OAIGranularity . yearMonthDayHourMinuteSecond ; String string0 = oAIGranularity0 . getDisplay ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDisplay ( ) { return display ; }
void test3 ( ) throws Throwable { OAIGranularity oAIGranularity0 = OAIGranularity . yearMonthDayHourMinuteSecond ; Date date0 = new Date ( 0L ) ; String string0 = oAIGranularity0 . format ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String format ( Date aDate ) { return dateFormatter . format ( aDate ) ; }
void test0 ( ) throws Throwable { String [ ] stringArray0 = new String [ 10 ] ; BasicSet basicSet0 = new BasicSet ( "" , "" , stringArray0 ) ; String [ ] stringArray1 = basicSet0 . getDescriptions ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String [ ] getDescriptions ( ) { return descriptions ; }
void test1 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; BasicSet basicSet0 = new BasicSet ( "a * q" , "a * q" , stringArray0 ) ; String string0 = basicSet0 . getName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getName ( ) ; String [ ] getDescriptions ( ) ; }
void test2 ( ) throws Throwable { String [ ] stringArray0 = new String [ 3 ] ; BasicSet basicSet0 = new BasicSet ( "a * q" , "a * q" , stringArray0 ) ; String string0 = basicSet0 . getSpec ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSpec ( ) ; String getName ( ) ; String [ ] getDescriptions ( ) ; }
void test0 ( ) throws Throwable { BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . generateQueryCompleteToken ( ) ; basicResumptionToken0 . getNextID ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCursor ( ) ; / * * returns true if this resumption token is generated at the end of a query * that was resumed from a previous resumption token . * / boolean queryCompleted ( ) ; / * * Since resumptionToken is an exclusive argument , the metadata format * must be encoded in the token but the OAIProvider needs this information * to produce the metadata , so all OAIResumptionTokens must handle this * method * / String getMetadataPrefix ( ) ; }
void test1 ( ) throws Throwable { BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . generateQueryCompleteToken ( ) ; basicResumptionToken0 . getUntil ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean queryCompleted ( ) ; / * * Since resumptionToken is an exclusive argument , the metadata format * must be encoded in the token but the OAIProvider needs this information * to produce the metadata , so all OAIResumptionTokens must handle this * method * / String getMetadataPrefix ( ) ; }
void test2 ( ) throws Throwable { BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . generateQueryCompleteToken ( ) ; basicResumptionToken0 . getSet ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCursor ( ) ; / * * returns true if this resumption token is generated at the end of a query * that was resumed from a previous resumption token . * / boolean queryCompleted ( ) ; / * * Since resumptionToken is an exclusive argument , the metadata format * must be encoded in the token but the OAIProvider needs this information * to produce the metadata , so all OAIResumptionTokens must handle this * method * / String getMetadataPrefix ( ) ; }
void test3 ( ) throws Throwable { BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . generateQueryCompleteToken ( ) ; basicResumptionToken0 . getMetadataPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean queryCompleted ( ) ; / * * Since resumptionToken is an exclusive argument , the metadata format * must be encoded in the token but the OAIProvider needs this information * to produce the metadata , so all OAIResumptionTokens must handle this * method * / String getMetadataPrefix ( ) ; }
void test4 ( ) throws Throwable { BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . generateQueryCompleteToken ( ) ; long long0 = basicResumptionToken0 . getCompleteListSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) ; / * * This is an optional argument . If the return value is null it * is assumed not to have an expiration date and it is not included in * the response * / Date getExpirationDate ( ) ; / * * This is also an optional response element . It must be a positive integer . * A value of zero or less will cause this to not be set in the response . * Note that a value of zero makes no sense in that no resumption token is * needed and DataAccessor . getResumptionToken should have returned null . * / long getCompleteListSize ( ) ; / * * An optional element denoting the location in the query of the next element . * This value can be 0 or greater . A negative return value will cause this * to be suppressed in the response . * / long getCursor ( ) ; / * * returns true if this resumption token is generated at the end of a query * that was resumed from a previous resumption token . * / boolean queryCompleted ( ) ; / * * Since resumptionToken is an exclusive argument , the metadata format * must be encoded in the token but the OAIProvider needs this information * to produce the metadata , so all OAIResumptionTokens must handle this * method * / String getMetadataPrefix ( ) ; }
void test5 ( ) throws Throwable { BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . generateQueryCompleteToken ( ) ; basicResumptionToken0 . setCursor ( ( - 1029L ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCompleteListSize ( ) ; / * * An optional element denoting the location in the query of the next element . * This value can be 0 or greater . A negative return value will cause this * to be suppressed in the response . * / long getCursor ( ) ; / * * returns true if this resumption token is generated at the end of a query * that was resumed from a previous resumption token . * / boolean queryCompleted ( ) ; / * * Since resumptionToken is an exclusive argument , the metadata format * must be encoded in the token but the OAIProvider needs this information * to produce the metadata , so all OAIResumptionTokens must handle this * method * / String getMetadataPrefix ( ) ; }
void test6 ( ) throws Throwable { BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . generateQueryCompleteToken ( ) ; basicResumptionToken0 . getExpirationDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCursor ( ) ; / * * returns true if this resumption token is generated at the end of a query * that was resumed from a previous resumption token . * / boolean queryCompleted ( ) ; / * * Since resumptionToken is an exclusive argument , the metadata format * must be encoded in the token but the OAIProvider needs this information * to produce the metadata , so all OAIResumptionTokens must handle this * method * / String getMetadataPrefix ( ) ; }
void test7 ( ) throws Throwable { BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . generateQueryCompleteToken ( ) ; Date date0 = basicResumptionToken0 . getFrom ( ) ; OAIGranularity oAIGranularity0 = OAIGranularity . yearMonthDayHourMinuteSecond ; BasicResumptionToken basicResumptionToken1 = BasicResumptionToken . generateResumptionToken ( "rJ" , date0 , date0 , "rJ" , "rJ" , date0 , 1876L , 1876L , oAIGranularity0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean queryCompleted ( ) ; / * * Since resumptionToken is an exclusive argument , the metadata format * must be encoded in the token but the OAIProvider needs this information * to produce the metadata , so all OAIResumptionTokens must handle this * method * / String getMetadataPrefix ( ) ; }
void test8 ( ) throws Throwable { BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . generateQueryCompleteToken ( ) ; long long0 = basicResumptionToken0 . getCursor ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" long getCompleteListSize ( ) ; / * * An optional element denoting the location in the query of the next element . * This value can be 0 or greater . A negative return value will cause this * to be suppressed in the response . * / long getCursor ( ) ; / * * returns true if this resumption token is generated at the end of a query * that was resumed from a previous resumption token . * / boolean queryCompleted ( ) ; / * * Since resumptionToken is an exclusive argument , the metadata format * must be encoded in the token but the OAIProvider needs this information * to produce the metadata , so all OAIResumptionTokens must handle this * method * / String getMetadataPrefix ( ) ; }
void test10 ( ) throws Throwable { BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . generateQueryCompleteToken ( ) ; basicResumptionToken0 . setExpirationDate ( ( Date ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) ; / * * This is an optional argument . If the return value is null it * is assumed not to have an expiration date and it is not included in * the response * / Date getExpirationDate ( ) ; / * * This is also an optional response element . It must be a positive integer . * A value of zero or less will cause this to not be set in the response . * Note that a value of zero makes no sense in that no resumption token is * needed and DataAccessor . getResumptionToken should have returned null . * / long getCompleteListSize ( ) ; / * * An optional element denoting the location in the query of the next element . * This value can be 0 or greater . A negative return value will cause this * to be suppressed in the response . * / long getCursor ( ) ; / * * returns true if this resumption token is generated at the end of a query * that was resumed from a previous resumption token . * / boolean queryCompleted ( ) ; / * * Since resumptionToken is an exclusive argument , the metadata format * must be encoded in the token but the OAIProvider needs this information * to produce the metadata , so all OAIResumptionTokens must handle this * method * / String getMetadataPrefix ( ) ; }
void test11 ( ) throws Throwable { Date date0 = new Date ( ) ; OAIGranularity oAIGranularity0 = OAIGranularity . yearMonthDayHourMinuteSecond ; BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . generateResumptionToken ( "UTC" , date0 , date0 , "UTC" , "UTC" , oAIGranularity0 ) ; String string0 = basicResumptionToken0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test12 ( ) throws Throwable { BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . generateQueryCompleteToken ( ) ; boolean boolean0 = basicResumptionToken0 . queryCompleted ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContent ( ) ; / * * This is an optional argument . If the return value is null it * is assumed not to have an expiration date and it is not included in * the response * / Date getExpirationDate ( ) ; / * * This is also an optional response element . It must be a positive integer . * A value of zero or less will cause this to not be set in the response . * Note that a value of zero makes no sense in that no resumption token is * needed and DataAccessor . getResumptionToken should have returned null . * / long getCompleteListSize ( ) ; / * * An optional element denoting the location in the query of the next element . * This value can be 0 or greater . A negative return value will cause this * to be suppressed in the response . * / long getCursor ( ) ; / * * returns true if this resumption token is generated at the end of a query * that was resumed from a previous resumption token . * / boolean queryCompleted ( ) ; / * * Since resumptionToken is an exclusive argument , the metadata format * must be encoded in the token but the OAIProvider needs this information * to produce the metadata , so all OAIResumptionTokens must handle this * method * / String getMetadataPrefix ( ) ; }
void test13 ( ) throws Throwable { BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . parseResumptionToken ( "" , ( OAIGranularity ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIResumptionToken parseResumptionToken ( String resumptionToken ) { / / returns null if the token is poorly formatted return BasicResumptionToken . parseResumptionToken ( resumptionToken , config . getGranularity ( ) ) ; }
void test14 ( ) throws Throwable { BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . parseResumptionToken ( ( String ) null , ( OAIGranularity ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIResumptionToken parseResumptionToken ( String resumptionToken ) { / / returns null if the token is poorly formatted return BasicResumptionToken . parseResumptionToken ( resumptionToken , config . getGranularity ( ) ) ; }
void test15 ( ) throws Throwable { OAIGranularity oAIGranularity0 = OAIGranularity . yearMonthDayHourMinuteSecond ; BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . parseResumptionToken ( "1876u8 [ T ) Z~2 & 2 h2W ? 1970 - 01 - 01T00 : 00 : 01Zu8 [ T ) Z~2 & 2 h2W ? 1970 - 01 - 01T00 : 00 : 01Zu8 [ T ) Z~2 & 2 h2W ? rJu8 [ T ) Z~2 & 2 h2W ? rJu8 [ T ) Z~2 & 2 h2W ? 1970 - 01 - 01T00 : 00 : 01Zu8 [ T ) Z~2 & 2 h2W ? 1876u8 [ T ) Z~2 & 2 h2W ? rJ" , oAIGranularity0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIResumptionToken parseResumptionToken ( String resumptionToken ) { / / returns null if the token is poorly formatted return BasicResumptionToken . parseResumptionToken ( resumptionToken , config . getGranularity ( ) ) ; }
void test16 ( ) throws Throwable { BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . parseResumptionToken ( "0" , ( OAIGranularity ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIResumptionToken parseResumptionToken ( String resumptionToken ) { / / returns null if the token is poorly formatted return BasicResumptionToken . parseResumptionToken ( resumptionToken , config . getGranularity ( ) ) ; }
void test17 ( ) throws Throwable { BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . generateQueryCompleteToken ( ) ; String string0 = basicResumptionToken0 . getContent ( ) ; String string1 = basicResumptionToken0 . getContent ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean queryCompleted ( ) ; / * * Since resumptionToken is an exclusive argument , the metadata format * must be encoded in the token but the OAIProvider needs this information * to produce the metadata , so all OAIResumptionTokens must handle this * method * / String getMetadataPrefix ( ) ; }
void test18 ( ) throws Throwable { OAIGranularity oAIGranularity0 = OAIGranularity . yearMonthDayHourMinuteSecond ; Date date0 = new Date ( 1876L ) ; BasicResumptionToken basicResumptionToken0 = BasicResumptionToken . generateResumptionToken ( "rJ" , date0 , date0 , "rJ" , "rJ" , date0 , 1876L , 1876L , oAIGranularity0 ) ; basicResumptionToken0 . getContent ( ) ; String string0 = basicResumptionToken0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test0 ( ) throws Throwable { NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; String string0 = nSDL_DCMetadataFormat0 . getSchema ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchema ( ) { return "http : / / www . healcentral . org / services / schema / HEALmdSchemaXMLv1p5 . xsd" ; }
void test1 ( ) throws Throwable { NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; String string0 = nSDL_DCMetadataFormat0 . getNamespace ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNamespace ( ) { return "http : / / www . healcentral . org / xsd / healmd_v1p5" ; }
void test2 ( ) throws Throwable { NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; String string0 = nSDL_DCMetadataFormat0 . getSchemaLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemaLocation ( ) { return "http : / / www . healcentral . org / services / schema / http : / / www . healcentral . org / services / schema / HEALmdSchemaXMLv1p5 . xsd" ; }
void test3 ( ) throws Throwable { NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; NSDL_DCHandler nSDL_DCHandler0 = ( NSDL_DCHandler ) nSDL_DCMetadataFormat0 . getHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIMetadataHandler getHandler ( ) { return new HEALHandler ( this ) ; }
void test4 ( ) throws Throwable { NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; String string0 = nSDL_DCMetadataFormat0 . getPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( ) { return prefix ; }
void test5 ( ) throws Throwable { NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; nSDL_DCMetadataFormat0 . setPrefix ( "TVd4lU" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( ) { return prefix ; }
void test0 ( ) throws Throwable { OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; NSDL_DCHandler nSDL_DCHandler0 = new NSDL_DCHandler ( ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ) ; OAI_DCMetadataFormat oAI_DCMetadataFormat1 = ( OAI_DCMetadataFormat ) nSDL_DCHandler0 . getFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNamespace ( ) { return "http : / / www . healcentral . org / xsd / healmd_v1p5" ; }
void test1 ( ) throws Throwable { OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; NSDL_DCHandler nSDL_DCHandler0 = new NSDL_DCHandler ( ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ) ; CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; String [ ] stringArray0 = new String [ 9 ] ; OAIMetadataFormat [ ] oAIMetadataFormatArray0 = new OAIMetadataFormat [ 1 ] ; oAIMetadataFormatArray0 [ 0 ] = ( OAIMetadataFormat ) oAI_DCMetadataFormat0 ; HEALProviderConfig hEALProviderConfig0 = new HEALProviderConfig ( ( String ) null , 1082 , ( String ) null , ( String ) null , ( String ) null , stringArray0 , stringArray0 , ( String ) null , stringArray0 , ( String ) null , ( String ) null , oAIMetadataFormatArray0 , ( String ) null ) ; HEALNSDLQDCRecordAdapter hEALNSDLQDCRecordAdapter0 = new HEALNSDLQDCRecordAdapter ( completeMetadataBean0 , hEALProviderConfig0 ) ; PipedOutputStream pipedOutputStream0 = new PipedOutputStream ( ) ; PrintWriter printWriter0 = new PrintWriter ( ( OutputStream ) pipedOutputStream0 , true ) ; nSDL_DCHandler0 . writeOAIAbout ( ( OAIRecordAdapter ) hEALNSDLQDCRecordAdapter0 , printWriter0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void writeOAIAbout ( OAIRecordAdapter record , PrintWriter writer ) throws IOException { / / TODO Auto - generated method stub }
void test0 ( ) throws Throwable { OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; String string0 = oAI_DCMetadataFormat0 . getSchema ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchema ( ) { return "http : / / www . healcentral . org / services / schema / HEALmdSchemaXMLv1p5 . xsd" ; }
void test1 ( ) throws Throwable { OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; String string0 = oAI_DCMetadataFormat0 . getNamespace ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNamespace ( ) { return "http : / / www . healcentral . org / xsd / healmd_v1p5" ; }
void test2 ( ) throws Throwable { OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; oAI_DCMetadataFormat0 . setPrefix ( "TVd4lU" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getNamespace ( ) { return "http : / / www . healcentral . org / xsd / healmd_v1p5" ; }
void test3 ( ) throws Throwable { OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; String string0 = oAI_DCMetadataFormat0 . getSchemaLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemaLocation ( ) { return "http : / / www . healcentral . org / services / schema / http : / / www . healcentral . org / services / schema / HEALmdSchemaXMLv1p5 . xsd" ; }
void test4 ( ) throws Throwable { OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; OAI_DCHandler oAI_DCHandler0 = ( OAI_DCHandler ) oAI_DCMetadataFormat0 . getHandler ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIMetadataHandler getHandler ( ) { return new HEALHandler ( this ) ; }
void test5 ( ) throws Throwable { OAI_DCMetadataFormat oAI_DCMetadataFormat0 = new OAI_DCMetadataFormat ( ) ; String string0 = oAI_DCMetadataFormat0 . getPrefix ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrefix ( ) { return prefix ; }
void test0 ( ) throws Throwable { NSDL_DCMetadataFormat nSDL_DCMetadataFormat0 = new NSDL_DCMetadataFormat ( ) ; OAI_DCHandler oAI_DCHandler0 = new OAI_DCHandler ( ( OAIMetadataFormat ) nSDL_DCMetadataFormat0 ) ; NSDL_DCMetadataFormat nSDL_DCMetadataFormat1 = ( NSDL_DCMetadataFormat ) oAI_DCHandler0 . getFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSchemaLocation ( ) { return "http : / / www . healcentral . org / services / schema / http : / / www . healcentral . org / services / schema / HEALmdSchemaXMLv1p5 . xsd" ; }
void test0 ( ) throws Throwable { MetametadataContributorBean metametadataContributorBean0 = new MetametadataContributorBean ( ) ; Date date0 = metametadataContributorBean0 . getDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getDate ( ) { return date ; }
void test1 ( ) throws Throwable { MetametadataContributorBean metametadataContributorBean0 = new MetametadataContributorBean ( ) ; String string0 = metametadataContributorBean0 . getMetametadataContributorId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetametadataContributorId ( ) { return metametadataContributorId ; }
void test2 ( ) throws Throwable { MetametadataContributorBean metametadataContributorBean0 = new MetametadataContributorBean ( ) ; metametadataContributorBean0 . setRole ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetametadataContributorId ( ) { return metametadataContributorId ; }
void test3 ( ) throws Throwable { MetametadataContributorBean metametadataContributorBean0 = new MetametadataContributorBean ( ) ; metametadataContributorBean0 . setMetametadataContributorId ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetametadataContributorId ( ) { return metametadataContributorId ; }
void test4 ( ) throws Throwable { MetametadataContributorBean metametadataContributorBean0 = new MetametadataContributorBean ( ) ; metametadataContributorBean0 . setvCard ( "I0x6 } ~z = " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRole ( ) { return role ; }
void test5 ( ) throws Throwable { MetametadataContributorBean metametadataContributorBean0 = new MetametadataContributorBean ( ) ; String string0 = metametadataContributorBean0 . getMetadataId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test6 ( ) throws Throwable { MetametadataContributorBean metametadataContributorBean0 = new MetametadataContributorBean ( ) ; String string0 = metametadataContributorBean0 . getvCard ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getvCard ( ) { return vCard ; }
void test7 ( ) throws Throwable { MetametadataContributorBean metametadataContributorBean0 = new MetametadataContributorBean ( ) ; metametadataContributorBean0 . setMetadataId ( "8 } } 9 / SU | ^26X > PkbDH" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getvCard ( ) { return vCard ; }
void test8 ( ) throws Throwable { MetametadataContributorBean metametadataContributorBean0 = new MetametadataContributorBean ( ) ; String string0 = metametadataContributorBean0 . getDateDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDateDescription ( ) { return dateDescription ; }
void test9 ( ) throws Throwable { MetametadataContributorBean metametadataContributorBean0 = new MetametadataContributorBean ( ) ; metametadataContributorBean0 . setDateDescription ( "8 } } 9 / SU | ^26X > PkbDH" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDateDescription ( ) { return dateDescription ; }
void test10 ( ) throws Throwable { MetametadataContributorBean metametadataContributorBean0 = new MetametadataContributorBean ( ) ; String string0 = metametadataContributorBean0 . getRole ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRole ( ) { return role ; }
void test0 ( ) throws Throwable { TaxonPathBean taxonPathBean0 = new TaxonPathBean ( ) ; TaxonBean taxonBean0 = new TaxonBean ( ) ; taxonPathBean0 . addTaxon ( taxonBean0 ) ; String string0 = taxonPathBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test1 ( ) throws Throwable { TaxonPathBean taxonPathBean0 = new TaxonPathBean ( ) ; taxonPathBean0 . setMetadataId ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSource ( ) { return source ; }
void test2 ( ) throws Throwable { TaxonPathBean taxonPathBean0 = new TaxonPathBean ( ) ; String string0 = taxonPathBean0 . getSource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSource ( ) { return source ; }
void test3 ( ) throws Throwable { TaxonPathBean taxonPathBean0 = new TaxonPathBean ( ) ; taxonPathBean0 . setSource ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSource ( ) { return source ; }
void test4 ( ) throws Throwable { TaxonPathBean taxonPathBean0 = new TaxonPathBean ( ) ; String string0 = taxonPathBean0 . getTaxonPathId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTaxonPathId ( ) { return this . taxonPathId ; }
void test5 ( ) throws Throwable { TaxonPathBean taxonPathBean0 = new TaxonPathBean ( ) ; taxonPathBean0 . setTaxonPathId ( "TaxonPath : taxonPathID : null metadataId : J#2Wimxg# n source : null taxons : null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSource ( ) { return source ; }
void test6 ( ) throws Throwable { TaxonPathBean taxonPathBean0 = new TaxonPathBean ( ) ; String string0 = taxonPathBean0 . getMetadataId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test7 ( ) throws Throwable { TaxonPathBean taxonPathBean0 = new TaxonPathBean ( ) ; SortedSet < Object > sortedSet0 = taxonPathBean0 . getTaxons ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return searchParameters . size ( ) ; }
void test8 ( ) throws Throwable { TaxonPathBean taxonPathBean0 = new TaxonPathBean ( ) ; taxonPathBean0 . setTaxons ( ( SortedSet ) null ) ; String string0 = taxonPathBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test9 ( ) throws Throwable { TaxonPathBean taxonPathBean0 = new TaxonPathBean ( ) ; String string0 = taxonPathBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test0 ( ) throws Throwable { KeywordBean keywordBean0 = new KeywordBean ( ) ; String string0 = keywordBean0 . getMetadataId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test1 ( ) throws Throwable { KeywordBean keywordBean0 = new KeywordBean ( ) ; String string0 = keywordBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test2 ( ) throws Throwable { KeywordBean keywordBean0 = new KeywordBean ( ) ; keywordBean0 . setKeywordId ( "oV ! J ) ( q ? & D~ - ~q" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeyword ( ) { return this . keyword ; }
void test3 ( ) throws Throwable { KeywordBean keywordBean0 = new KeywordBean ( ) ; String string0 = keywordBean0 . getKeywordId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeywordId ( ) { return this . keywordId ; }
void test4 ( ) throws Throwable { KeywordBean keywordBean0 = new KeywordBean ( ) ; keywordBean0 . setMetadataId ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test5 ( ) throws Throwable { KeywordBean keywordBean0 = new KeywordBean ( ) ; String string0 = keywordBean0 . getKeyword ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKeyword ( ) { return this . keyword ; }
void test6 ( ) throws Throwable { KeywordBean keywordBean0 = new KeywordBean ( ) ; keywordBean0 . setKeyword ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test2 ( ) throws Throwable { HealMetadataXMLConverter healMetadataXMLConverter0 = new HealMetadataXMLConverter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test22 ( ) throws Throwable { CompleteMetadataBean [ ] completeMetadataBeanArray0 = new CompleteMetadataBean [ 8 ] ; CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean ( ) ; completeMetadataBeanArray0 [ 4 ] = completeMetadataBean0 ; ArrayList < Object > arrayList0 = completeMetadataBeanArray0 [ 4 ] . getCopyrights ( ) ; String string0 = HealMetadataXMLConverter . getPointerListXML ( arrayList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPointerListXML ( ArrayList ids ) throws IOException { if ( ids = = null ) { return null ; } ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; try { / / create a new Document using JAXP DocumentBuilderFactory dbf = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder db = dbf . newDocumentBuilder ( ) ; Document doc = db . newDocument ( ) ; Element listElem = doc . createElement ( "metadatalist" ) ; Element catalogueElem = doc . createElement ( "catalogue" ) ; catalogueElem . appendChild ( doc . createTextNode ( "HEAL . org" ) ) ; listElem . appendChild ( catalogueElem ) ; Iterator idIter = ids . iterator ( ) ; Element entryElem ; Element langstringElem ; while ( idIter . hasNext ( ) ) { String id = ( String ) idIter . next ( ) ; entryElem = doc . createElement ( "entry" ) ; langstringElem = doc . createElement ( "langstring" ) ; langstringElem . appendChild ( doc . createTextNode ( id ) ) ; entryElem . appendChild ( langstringElem ) ; listElem . appendChild ( entryElem ) ; } doc . appendChild ( listElem ) ; / / now that we have the document built , we should write it out . TransformerFactory tFactory = TransformerFactory . newInstance ( ) ; Transformer transformer = tFactory . newTransformer ( ) ; transformer . transform ( new DOMSource ( doc ) , new StreamResult ( out ) ) ; } catch ( Exception ex ) { throw new IOException ( ex . toString ( ) ) ; } return out . toString ( ) ; }
void test23 ( ) throws Throwable { String string0 = HealMetadataXMLConverter . getPointerListXML ( ( ArrayList ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPointerListXML ( ArrayList ids ) throws IOException { if ( ids = = null ) { return null ; } ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; try { / / create a new Document using JAXP DocumentBuilderFactory dbf = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder db = dbf . newDocumentBuilder ( ) ; Document doc = db . newDocument ( ) ; Element listElem = doc . createElement ( "metadatalist" ) ; Element catalogueElem = doc . createElement ( "catalogue" ) ; catalogueElem . appendChild ( doc . createTextNode ( "HEAL . org" ) ) ; listElem . appendChild ( catalogueElem ) ; Iterator idIter = ids . iterator ( ) ; Element entryElem ; Element langstringElem ; while ( idIter . hasNext ( ) ) { String id = ( String ) idIter . next ( ) ; entryElem = doc . createElement ( "entry" ) ; langstringElem = doc . createElement ( "langstring" ) ; langstringElem . appendChild ( doc . createTextNode ( id ) ) ; entryElem . appendChild ( langstringElem ) ; listElem . appendChild ( entryElem ) ; } doc . appendChild ( listElem ) ; / / now that we have the document built , we should write it out . TransformerFactory tFactory = TransformerFactory . newInstance ( ) ; Transformer transformer = tFactory . newTransformer ( ) ; transformer . transform ( new DOMSource ( doc ) , new StreamResult ( out ) ) ; } catch ( Exception ex ) { throw new IOException ( ex . toString ( ) ) ; } return out . toString ( ) ; }
void test0 ( ) throws Throwable { RequirementBean requirementBean0 = new RequirementBean ( ) ; String string0 = requirementBean0 . getMetadataId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test1 ( ) throws Throwable { RequirementBean requirementBean0 = new RequirementBean ( ) ; String string0 = requirementBean0 . getRequirementName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRequirementName ( ) { return this . requirementName ; }
void test2 ( ) throws Throwable { RequirementBean requirementBean0 = new RequirementBean ( ) ; String string0 = requirementBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test3 ( ) throws Throwable { RequirementBean requirementBean0 = new RequirementBean ( ) ; requirementBean0 . setRequirementId ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test4 ( ) throws Throwable { RequirementBean requirementBean0 = new RequirementBean ( ) ; String string0 = requirementBean0 . getRequirementId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRequirementId ( ) { return this . requirementId ; }
void test5 ( ) throws Throwable { RequirementBean requirementBean0 = new RequirementBean ( ) ; requirementBean0 . setRequirementType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test6 ( ) throws Throwable { RequirementBean requirementBean0 = new RequirementBean ( ) ; String string0 = requirementBean0 . getRequirementType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRequirementType ( ) { return this . requirementType ; }
void test7 ( ) throws Throwable { RequirementBean requirementBean0 = new RequirementBean ( ) ; requirementBean0 . setRequirementName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test8 ( ) throws Throwable { RequirementBean requirementBean0 = new RequirementBean ( ) ; requirementBean0 . setMetadataId ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRequirementType ( ) { return this . requirementType ; }
void test0 ( ) throws Throwable { FormatBean formatBean0 = new FormatBean ( ) ; String string0 = formatBean0 . getMetadataId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test1 ( ) throws Throwable { FormatBean formatBean0 = new FormatBean ( ) ; String string0 = formatBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test2 ( ) throws Throwable { FormatBean formatBean0 = new FormatBean ( ) ; formatBean0 . setFormat ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIMetadataFormat getFormat ( ) { return metadataFormat ; }
void test3 ( ) throws Throwable { FormatBean formatBean0 = new FormatBean ( ) ; String string0 = formatBean0 . getFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIMetadataFormat getFormat ( ) { return metadataFormat ; }
void test4 ( ) throws Throwable { FormatBean formatBean0 = new FormatBean ( ) ; String string0 = formatBean0 . getFormatId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFormatId ( ) { return this . formatId ; }
void test5 ( ) throws Throwable { FormatBean formatBean0 = new FormatBean ( ) ; formatBean0 . setMetadataId ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test6 ( ) throws Throwable { FormatBean formatBean0 = new FormatBean ( ) ; formatBean0 . setFormatId ( "oV ! J ) ( q ? & D~ - ~q" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test0 ( ) throws Throwable { TaxonBean taxonBean0 = new TaxonBean ( ) ; String string0 = taxonBean0 . getTaxonPathId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTaxonPathId ( ) { return this . taxonPathId ; }
void test1 ( ) throws Throwable { TaxonBean taxonBean0 = new TaxonBean ( ) ; String string0 = taxonBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test2 ( ) throws Throwable { TaxonBean taxonBean0 = new TaxonBean ( ) ; taxonBean0 . setEntry ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTaxonPathId ( ) { return this . taxonPathId ; }
void test3 ( ) throws Throwable { TaxonBean taxonBean0 = new TaxonBean ( ) ; taxonBean0 . setTaxonId ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test4 ( ) throws Throwable { TaxonBean taxonBean0 = new TaxonBean ( ) ; String string0 = taxonBean0 . getEntry ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEntry ( ) { return this . entry ; }
void test5 ( ) throws Throwable { TaxonBean taxonBean0 = new TaxonBean ( ) ; String string0 = taxonBean0 . getId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getId ( ) { return this . id ; }
void test6 ( ) throws Throwable { TaxonBean taxonBean0 = new TaxonBean ( ) ; String string0 = taxonBean0 . getTaxonId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTaxonId ( ) { return this . taxonId ; }
void test7 ( ) throws Throwable { TaxonBean taxonBean0 = new TaxonBean ( ) ; boolean boolean0 = taxonBean0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { return ( obj instanceof OAIVerb & & name . equals ( ( ( OAIVerb ) obj ) . name ) ) ; }
void test8 ( ) throws Throwable { TaxonBean taxonBean0 = new TaxonBean ( ) ; taxonBean0 . setId ( "" ) ; TaxonBean taxonBean1 = new TaxonBean ( ) ; boolean boolean0 = taxonBean0 . equals ( ( Object ) taxonBean1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { return ( obj instanceof OAIVerb & & name . equals ( ( ( OAIVerb ) obj ) . name ) ) ; }
void test9 ( ) throws Throwable { TaxonBean taxonBean0 = new TaxonBean ( ) ; taxonBean0 . setId ( "sZY = guva_IKbn" ) ; taxonBean0 . setTaxonPathId ( "sZY = guva_IKbn" ) ; boolean boolean0 = taxonBean0 . equals ( ( Object ) taxonBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean equals ( Object obj ) { return ( obj instanceof OAIVerb & & name . equals ( ( ( OAIVerb ) obj ) . name ) ) ; }
void test10 ( ) throws Throwable { TaxonBean taxonBean0 = new TaxonBean ( ) ; int int0 = taxonBean0 . compareTo ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object obj ) { return ( name . compareTo ( ( ( OAIVerb ) obj ) . name ) ) ; }
void test11 ( ) throws Throwable { TaxonBean taxonBean0 = new TaxonBean ( ) ; taxonBean0 . setId ( "sZY = guva_IKbn" ) ; int int0 = taxonBean0 . compareTo ( ( Object ) taxonBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int compareTo ( Object obj ) { return ( name . compareTo ( ( ( OAIVerb ) obj ) . name ) ) ; }
void test0 ( ) throws Throwable { TargetUserGroupBean targetUserGroupBean0 = new TargetUserGroupBean ( ) ; String string0 = targetUserGroupBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test1 ( ) throws Throwable { TargetUserGroupBean targetUserGroupBean0 = new TargetUserGroupBean ( ) ; targetUserGroupBean0 . setTargetUserGroup ( " metadataId : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test2 ( ) throws Throwable { TargetUserGroupBean targetUserGroupBean0 = new TargetUserGroupBean ( ) ; targetUserGroupBean0 . setMetadataId ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test0 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; String string0 = shortMetadataBean0 . getFileExtension ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileExtension ( ) { int index ; if ( null ! = fileName & & ( index = fileName . lastIndexOf ( " . " ) ) ! = - 1 ) { return fileName . substring ( index + 1 ) ; } return null ; }
void test1 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; shortMetadataBean0 . setGlobalId ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContributeName ( ) { return this . contributeName ; }
void test2 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; shortMetadataBean0 . setFileName ( " fileHeight : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLocation ( ) { return this . location ; }
void test3 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; shortMetadataBean0 . setFormat ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileWidth ( ) { return this . fileWidth ; }
void test4 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; shortMetadataBean0 . setFileWidth ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return this . Title ; }
void test5 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; String string0 = shortMetadataBean0 . getFormat ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" OAIMetadataFormat getFormat ( ) { return metadataFormat ; }
void test6 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; shortMetadataBean0 . setMetadataId ( " fileHeight : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return this . description ; }
void test7 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; String string0 = shortMetadataBean0 . getFileName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileName ( ) { return this . fileName ; }
void test8 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; String string0 = shortMetadataBean0 . getMetadataId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test9 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; String string0 = shortMetadataBean0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return this . description ; }
void test10 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; String string0 = shortMetadataBean0 . getLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLocation ( ) { return this . location ; }
void test11 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; String string0 = shortMetadataBean0 . getGlobalId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGlobalId ( ) { return this . globalId ; }
void test12 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; String string0 = shortMetadataBean0 . getSourceCollection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSourceCollection ( ) { return this . sourceCollection ; }
void test13 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; String string0 = shortMetadataBean0 . getFileHeight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileHeight ( ) { return this . fileHeight ; }
void test14 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; shortMetadataBean0 . setFileSize ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContributeUserId ( ) { return this . contributeUserId ; }
void test15 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; shortMetadataBean0 . setContributeUserId ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSourceCollection ( ) { return this . sourceCollection ; }
void test16 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; ThumbnailBean thumbnailBean0 = new ThumbnailBean ( ) ; shortMetadataBean0 . setThumbnail ( thumbnailBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileSize ( ) { return this . fileSize ; }
void test17 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; String string0 = shortMetadataBean0 . getTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return this . Title ; }
void test18 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; shortMetadataBean0 . setSourceCollection ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContributeUserId ( ) { return this . contributeUserId ; }
void test19 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; shortMetadataBean0 . setContributeName ( " fileHeight : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return this . description ; }
void test20 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; String string0 = shortMetadataBean0 . getContributeName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContributeName ( ) { return this . contributeName ; }
void test21 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; shortMetadataBean0 . setFileExtension ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLocation ( ) { return this . location ; }
void test22 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; ThumbnailBean thumbnailBean0 = shortMetadataBean0 . getThumbnail ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" ThumbnailBean getThumbnail ( ) { return this . thumbnail ; }
void test23 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; String string0 = shortMetadataBean0 . getFileWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileWidth ( ) { return this . fileWidth ; }
void test24 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; String string0 = shortMetadataBean0 . getFileSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileSize ( ) { return this . fileSize ; }
void test25 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; shortMetadataBean0 . setDescription ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileHeight ( ) { return this . fileHeight ; }
void test26 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; shortMetadataBean0 . setLocation ( " fileHeight : " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSourceCollection ( ) { return this . sourceCollection ; }
void test27 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; String string0 = shortMetadataBean0 . getContributeUserId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContributeUserId ( ) { return this . contributeUserId ; }
void test28 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; shortMetadataBean0 . setFileHeight ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLocation ( ) { return this . location ; }
void test29 ( ) throws Throwable { ShortMetadataBean shortMetadataBean0 = new ShortMetadataBean ( ) ; shortMetadataBean0 . setTitle ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test0 ( ) throws Throwable { ThumbnailBean thumbnailBean0 = new ThumbnailBean ( ) ; String string0 = thumbnailBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test1 ( ) throws Throwable { ThumbnailBean thumbnailBean0 = new ThumbnailBean ( ) ; thumbnailBean0 . setLocation ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test2 ( ) throws Throwable { ThumbnailBean thumbnailBean0 = new ThumbnailBean ( ) ; String string0 = thumbnailBean0 . getFileHeight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileHeight ( ) { return this . fileHeight ; }
void test3 ( ) throws Throwable { ThumbnailBean thumbnailBean0 = new ThumbnailBean ( ) ; String string0 = thumbnailBean0 . getThumbnailId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getThumbnailId ( ) { return this . thumbnailId ; }
void test4 ( ) throws Throwable { ThumbnailBean thumbnailBean0 = new ThumbnailBean ( ) ; thumbnailBean0 . setMetadataId ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test5 ( ) throws Throwable { ThumbnailBean thumbnailBean0 = new ThumbnailBean ( ) ; thumbnailBean0 . setFileHeight ( "4\bU ? & z_ + JqCj" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getThumbnailId ( ) { return this . thumbnailId ; }
void test7 ( ) throws Throwable { ThumbnailBean thumbnailBean0 = new ThumbnailBean ( ) ; String string0 = thumbnailBean0 . getLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLocation ( ) { return this . location ; }
void test8 ( ) throws Throwable { ThumbnailBean thumbnailBean0 = new ThumbnailBean ( ) ; String string0 = thumbnailBean0 . getMetadataId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test9 ( ) throws Throwable { ThumbnailBean thumbnailBean0 = new ThumbnailBean ( ) ; thumbnailBean0 . setFileWidth ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test10 ( ) throws Throwable { ThumbnailBean thumbnailBean0 = new ThumbnailBean ( ) ; thumbnailBean0 . setThumbnailId ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileHeight ( ) { return this . fileHeight ; }
void test11 ( ) throws Throwable { ThumbnailBean thumbnailBean0 = new ThumbnailBean ( ) ; String string0 = thumbnailBean0 . getFileWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileWidth ( ) { return this . fileWidth ; }
void test0 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setTitle ( "true" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getContributeDate ( ) { return this . contributeDate ; }
void test1 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setRadiographType ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileExtension ( ) { int index ; if ( null ! = fileName & & ( index = fileName . lastIndexOf ( " . " ) ) ! = - 1 ) { return fileName . substring ( index + 1 ) ; } return null ; }
void test2 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setDuration ( "T8 ; V ; 7 { `Rjk - bVq6Q^" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSourceCollection ( ) { return this . sourceCollection ; }
void test3 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getFileName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileName ( ) { return this . fileName ; }
void test4 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setPrivate ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return checkTrue ( hidden ) ; }
void test5 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setContributeDate ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloged ( ) { return ( getCatalogDate ( ) ! = null ) ; }
void test6 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getClinicalHistory ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getClinicalHistory ( ) { return this . clinicalHistory ; }
void test7 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getCatalogDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getCatalogDate ( ) { return this . catalogDate ; }
void test8 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setFileName ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileExtension ( ) { int index ; if ( null ! = fileName & & ( index = fileName . lastIndexOf ( " . " ) ) ! = - 1 ) { return fileName . substring ( index + 1 ) ; } return null ; }
void test9 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getOrientation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getOrientation ( ) { return this . orientation ; }
void test10 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getFileWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileWidth ( ) { return this . fileWidth ; }
void test11 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getInappropriate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInappropriate ( ) { return this . inappropriate ; }
void test12 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getMagnification ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMagnification ( ) { return this . magnification ; }
void test13 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setApproveDate ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isPrivate ( ) { return checkTrue ( hidden ) ; }
void test14 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setGlobalId ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAnnotated ( ) { return this . annotated ; }
void test15 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setCataloged ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test16 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setArchived ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isArchived ( ) { return checkTrue ( archived ) ; }
void test17 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getMetadataId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test18 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getTitle ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTitle ( ) { return this . Title ; }
void test19 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setCataloged ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test20 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setApproved ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test21 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getRadiographType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRadiographType ( ) { return this . radiographType ; }
void test22 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setRejectDate ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloged ( ) { return ( getCatalogDate ( ) ! = null ) ; }
void test23 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setContributeUserId ( "Metadata : MetadataId : null globalId : null fileName : null fileExtension : null fileSize : null title : null location : null sourceCollection : null contributeUserId : null annotated : false inappropriate : false approved : false cataloged : false archived : false rejected : false hidden : false description : null specimenType : null radiographType : null mriType : null orientation : null magnification : null diseaseProcess : null clinicalHistory : null fileWidth : null fileHeight : null duration : null targetUserGroup : null approveDate : null catalogDate : null rejectDate : null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTargetUserGroup ( ) { return targetUserGroup ; }
void test24 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setLocation ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileExtension ( ) { int index ; if ( null ! = fileName & & ( index = fileName . lastIndexOf ( " . " ) ) ! = - 1 ) { return fileName . substring ( index + 1 ) ; } return null ; }
void test25 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getFileHeight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileHeight ( ) { return this . fileHeight ; }
void test26 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getAnnotated ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getAnnotated ( ) { return this . annotated ; }
void test27 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getFileSize ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileSize ( ) { return this . fileSize ; }
void test28 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getFileExtension ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileExtension ( ) { int index ; if ( null ! = fileName & & ( index = fileName . lastIndexOf ( " . " ) ) ! = - 1 ) { return fileName . substring ( index + 1 ) ; } return null ; }
void test29 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setSourceCollection ( "Metadata : MetadataId : null globalId : null fileName : null fileExtension : null fileSize : null title : null location : null sourceCollection : null contributeUserId : null annotated : false inappropriate : false approved : false cataloged : false archived : false rejected : false hidden : false description : null specimenType : null radiographType : null mriType : null orientation : null magnification : null diseaseProcess : null clinicalHistory : null fileWidth : null fileHeight : null duration : null targetUserGroup : null approveDate : null catalogDate : null rejectDate : null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSpecimenType ( ) { return this . specimenType ; }
void test30 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getDuration ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDuration ( ) { return this . duration ; }
void test31 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setFileHeight ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLocation ( ) { return this . location ; }
void test32 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getRejected ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test33 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getPrivate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getPrivate ( ) { return this . hidden ; }
void test34 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setApproved ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLocation ( ) { return this . location ; }
void test35 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getApproveDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getApproveDate ( ) { return this . approveDate ; }
void test36 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setOrientation ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContributeUserId ( ) { return this . contributeUserId ; }
void test37 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getSpecimenType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSpecimenType ( ) { return this . specimenType ; }
void test38 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getApproved ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Boolean getApproved ( ) { return this . approved ; }
void test39 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLocation ( ) { return this . location ; }
void test40 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setSpecimenType ( "KLyn9h < 5p" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDuration ( ) { return this . duration ; }
void test41 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getContributeUserId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getContributeUserId ( ) { return this . contributeUserId ; }
void test42 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setFileSize ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInappropriate ( ) { return this . inappropriate ; }
void test43 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setAnnotated ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test44 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setDiseaseProcess ( "WPS" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test45 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getMriType ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test46 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getSourceCollection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSourceCollection ( ) { return this . sourceCollection ; }
void test47 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setPrivate ( "" ) ; String string0 = metadataBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test48 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setFileExtension ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getApproveDate ( ) { return this . approveDate ; }
void test49 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getDiseaseProcess ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test50 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getArchived ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getArchived ( ) { return this . archived ; }
void test51 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getContributeDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getContributeDate ( ) { return this . contributeDate ; }
void test52 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setArchived ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getApproveDate ( ) { return this . approveDate ; }
void test53 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setClinicalHistory ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAnnotated ( ) { return checkTrue ( annotated ) ; }
void test54 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setDescription ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloged ( ) { return ( getCatalogDate ( ) ! = null ) ; }
void test55 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setMetadataId ( "Metadata : MetadataId : null globalId : null fileName : null fileExtension : null fileSize : null title : null location : null sourceCollection : null contributeUserId : null annotated : false inappropriate : false approved : false cataloged : false archived : false rejected : false hidden : false description : null specimenType : null radiographType : null mriType : null orientation : null magnification : null diseaseProcess : null clinicalHistory : null fileWidth : null fileHeight : null duration : null targetUserGroup : null approveDate : null catalogDate : null rejectDate : null" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSpecimenType ( ) { return this . specimenType ; }
void test56 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setFileWidth ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setFileWidth ( String newFileWidth ) { this . fileWidth = newFileWidth ; }
void test57 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setCatalogDate ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test58 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getCataloged ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test59 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setMriType ( "'7id'Z'4xN\"v6" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test60 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getGlobalId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getGlobalId ( ) { return this . globalId ; }
void test61 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getRejectDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" Date getRejectDate ( ) { return this . rejectDate ; }
void test62 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setTargetUserGroup ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isCataloged ( ) { return ( getCatalogDate ( ) ! = null ) ; }
void test63 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setInappropriate ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getInappropriate ( ) { return this . inappropriate ; }
void test64 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getTargetUserGroup ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getTargetUserGroup ( ) { return targetUserGroup ; }
void test65 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setMagnification ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test66 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; String string0 = metadataBean0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return this . description ; }
void test67 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setAnnotated ( true ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isAnnotated ( ) { return checkTrue ( annotated ) ; }
void test68 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setRejected ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test69 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setHidden ( "true" ) ; boolean boolean0 = metadataBean0 . isPrivate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isHidden ( ) { return checkTrue ( hidden ) ; }
void test70 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setInappropriate ( "1" ) ; String string0 = metadataBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isInappropriate ( ) { return checkTrue ( inappropriate ) ; }
void test71 ( ) throws Throwable { MetadataBean metadataBean0 = new MetadataBean ( ) ; metadataBean0 . setRejected ( "yes" ) ; boolean boolean0 = metadataBean0 . isRejected ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isRejected ( ) { return ( getRejectDate ( ) ! = null ) ; }
void test0 ( ) throws Throwable { RelationBean relationBean0 = new RelationBean ( ) ; relationBean0 . setResource ( "Ak~lVI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test1 ( ) throws Throwable { RelationBean relationBean0 = new RelationBean ( ) ; String string0 = relationBean0 . getMetadataId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test2 ( ) throws Throwable { RelationBean relationBean0 = new RelationBean ( ) ; String string0 = relationBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test3 ( ) throws Throwable { RelationBean relationBean0 = new RelationBean ( ) ; String string0 = relationBean0 . getKind ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getKind ( ) { return this . kind ; }
void test4 ( ) throws Throwable { RelationBean relationBean0 = new RelationBean ( ) ; relationBean0 . setKind ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRelationId ( ) { return this . relationId ; }
void test5 ( ) throws Throwable { RelationBean relationBean0 = new RelationBean ( ) ; relationBean0 . setDescription ( "FDXU%X3Q38VVU D@eMO" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRelationId ( ) { return this . relationId ; }
void test6 ( ) throws Throwable { RelationBean relationBean0 = new RelationBean ( ) ; String string0 = relationBean0 . getDescription ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDescription ( ) { return this . description ; }
void test7 ( ) throws Throwable { RelationBean relationBean0 = new RelationBean ( ) ; relationBean0 . setMetadataId ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getResource ( ) { return this . resource ; }
void test8 ( ) throws Throwable { RelationBean relationBean0 = new RelationBean ( ) ; String string0 = relationBean0 . getResource ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getResource ( ) { return this . resource ; }
void test9 ( ) throws Throwable { RelationBean relationBean0 = new RelationBean ( ) ; relationBean0 . setRelationId ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRelationId ( ) { return this . relationId ; }
void test10 ( ) throws Throwable { RelationBean relationBean0 = new RelationBean ( ) ; String string0 = relationBean0 . getRelationId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRelationId ( ) { return this . relationId ; }
void test0 ( ) throws Throwable { SourceCollectionBean sourceCollectionBean0 = new SourceCollectionBean ( ) ; String string0 = sourceCollectionBean0 . getSourceName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSourceName ( ) { return this . name ; }
void test1 ( ) throws Throwable { SourceCollectionBean sourceCollectionBean0 = new SourceCollectionBean ( ) ; String string0 = sourceCollectionBean0 . getFileWidth ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileWidth ( ) { return this . fileWidth ; }
void test2 ( ) throws Throwable { SourceCollectionBean sourceCollectionBean0 = new SourceCollectionBean ( ) ; sourceCollectionBean0 . setFileHeight ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test3 ( ) throws Throwable { SourceCollectionBean sourceCollectionBean0 = new SourceCollectionBean ( ) ; sourceCollectionBean0 . setFileWidth ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSourceName ( ) { return this . name ; }
void test5 ( ) throws Throwable { SourceCollectionBean sourceCollectionBean0 = new SourceCollectionBean ( ) ; sourceCollectionBean0 . setLocation ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSourceId ( ) { return this . sourceId ; }
void test6 ( ) throws Throwable { SourceCollectionBean sourceCollectionBean0 = new SourceCollectionBean ( ) ; String string0 = sourceCollectionBean0 . getSourceId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSourceId ( ) { return this . sourceId ; }
void test7 ( ) throws Throwable { SourceCollectionBean sourceCollectionBean0 = new SourceCollectionBean ( ) ; String string0 = sourceCollectionBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test8 ( ) throws Throwable { SourceCollectionBean sourceCollectionBean0 = new SourceCollectionBean ( ) ; sourceCollectionBean0 . setSourceId ( "W9a * lvF ) 03NHIRG2" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileHeight ( ) { return this . fileHeight ; }
void test9 ( ) throws Throwable { SourceCollectionBean sourceCollectionBean0 = new SourceCollectionBean ( ) ; String string0 = sourceCollectionBean0 . getLink ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLink ( ) { return this . link ; }
void test10 ( ) throws Throwable { SourceCollectionBean sourceCollectionBean0 = new SourceCollectionBean ( ) ; sourceCollectionBean0 . setLink ( "4CaZQpuJN6 ! 'XyEf - " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSourceName ( ) { return this . name ; }
void test11 ( ) throws Throwable { SourceCollectionBean sourceCollectionBean0 = new SourceCollectionBean ( ) ; String string0 = sourceCollectionBean0 . getFileHeight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFileHeight ( ) { return this . fileHeight ; }
void test12 ( ) throws Throwable { SourceCollectionBean sourceCollectionBean0 = new SourceCollectionBean ( ) ; sourceCollectionBean0 . setSourceName ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSourceId ( ) { return this . sourceId ; }
void test13 ( ) throws Throwable { SourceCollectionBean sourceCollectionBean0 = new SourceCollectionBean ( ) ; String string0 = sourceCollectionBean0 . getLocation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLocation ( ) { return this . location ; }
void test0 ( ) throws Throwable { MetametadataIdentifierBean metametadataIdentifierBean0 = new MetametadataIdentifierBean ( ) ; String string0 = metametadataIdentifierBean0 . getMetametadataIdentifierId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetametadataIdentifierId ( ) { return metametadataIdentifierId ; }
void test1 ( ) throws Throwable { MetametadataIdentifierBean metametadataIdentifierBean0 = new MetametadataIdentifierBean ( ) ; metametadataIdentifierBean0 . setMetadataSchema ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test2 ( ) throws Throwable { MetametadataIdentifierBean metametadataIdentifierBean0 = new MetametadataIdentifierBean ( ) ; metametadataIdentifierBean0 . setEntry ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test3 ( ) throws Throwable { MetametadataIdentifierBean metametadataIdentifierBean0 = new MetametadataIdentifierBean ( ) ; String string0 = metametadataIdentifierBean0 . getMetadataId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test4 ( ) throws Throwable { MetametadataIdentifierBean metametadataIdentifierBean0 = new MetametadataIdentifierBean ( ) ; String string0 = metametadataIdentifierBean0 . getCatalog ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getCatalog ( ) { return catalog ; }
void test5 ( ) throws Throwable { MetametadataIdentifierBean metametadataIdentifierBean0 = new MetametadataIdentifierBean ( ) ; metametadataIdentifierBean0 . setMetadataId ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataId ( ) { return this . metadataId ; }
void test6 ( ) throws Throwable { MetametadataIdentifierBean metametadataIdentifierBean0 = new MetametadataIdentifierBean ( ) ; metametadataIdentifierBean0 . setCatalog ( "FDXU%X3Q38VVU D@eMO" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEntry ( ) { return this . entry ; }
void test7 ( ) throws Throwable { MetametadataIdentifierBean metametadataIdentifierBean0 = new MetametadataIdentifierBean ( ) ; String string0 = metametadataIdentifierBean0 . getMetadataSchema ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetadataSchema ( ) { return metadataSchema ; }
void test8 ( ) throws Throwable { MetametadataIdentifierBean metametadataIdentifierBean0 = new MetametadataIdentifierBean ( ) ; metametadataIdentifierBean0 . setMetametadataIdentifierId ( "Ak~lVI" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMetametadataIdentifierId ( ) { return metametadataIdentifierId ; }
void test9 ( ) throws Throwable { MetametadataIdentifierBean metametadataIdentifierBean0 = new MetametadataIdentifierBean ( ) ; String string0 = metametadataIdentifierBean0 . toString ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String toString ( ) { return "ProfessionalRole : " + " professionalRole : " + getProfessionalRole ( ) + " userId : " + getUserId ( ) + " professionalRoleId : " + getProfessionalRoleId ( ) ; }
void test10 ( ) throws Throwable { MetametadataIdentifierBean metametadataIdentifierBean0 = new MetametadataIdentifierBean ( ) ; String string0 = metametadataIdentifierBean0 . getEntry ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getEntry ( ) { return this . entry ; }
void test0 ( ) throws Throwable { ShortMetadataResultBean shortMetadataResultBean0 = new ShortMetadataResultBean ( ) ; shortMetadataResultBean0 . setShortMetadata ( ( ShortMetadataBean ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMatchStrength ( ) { return matchStrength ; }
void test1 ( ) throws Throwable { ShortMetadataResultBean shortMetadataResultBean0 = new ShortMetadataResultBean ( ) ; shortMetadataResultBean0 . getLastKeywordMatched ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKeywordsMatched ( ) { return keywordsMatched ; }
void test2 ( ) throws Throwable { ShortMetadataResultBean shortMetadataResultBean0 = new ShortMetadataResultBean ( ) ; shortMetadataResultBean0 . incrementMatchStrength ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKeywordsMatched ( ) { return keywordsMatched ; }
void test3 ( ) throws Throwable { ShortMetadataResultBean shortMetadataResultBean0 = new ShortMetadataResultBean ( ) ; int int0 = shortMetadataResultBean0 . getKeywordsMatched ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMatchStrength ( ) { return matchStrength ; }
void test4 ( ) throws Throwable { ShortMetadataResultBean shortMetadataResultBean0 = new ShortMetadataResultBean ( ) ; shortMetadataResultBean0 . setKeywordsMatched ( ( - 26 ) ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMatchStrength ( ) { return matchStrength ; }
void test5 ( ) throws Throwable { ShortMetadataResultBean shortMetadataResultBean0 = new ShortMetadataResultBean ( ) ; shortMetadataResultBean0 . incrementKeywordsMatched ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMatchStrength ( ) { return matchStrength ; }
void test6 ( ) throws Throwable { ShortMetadataResultBean shortMetadataResultBean0 = new ShortMetadataResultBean ( ) ; shortMetadataResultBean0 . getMetadataId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMatchStrength ( ) { return matchStrength ; }
void test7 ( ) throws Throwable { ShortMetadataResultBean shortMetadataResultBean0 = new ShortMetadataResultBean ( ) ; shortMetadataResultBean0 . getShortMetadata ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKeywordsMatched ( ) { return keywordsMatched ; }
void test8 ( ) throws Throwable { ShortMetadataResultBean shortMetadataResultBean0 = new ShortMetadataResultBean ( ) ; shortMetadataResultBean0 . setLastKeywordMatched ( "#J#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMatchStrength ( ) { return matchStrength ; }
void test9 ( ) throws Throwable { ShortMetadataResultBean shortMetadataResultBean0 = new ShortMetadataResultBean ( ) ; int int0 = shortMetadataResultBean0 . getMatchStrength ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKeywordsMatched ( ) { return keywordsMatched ; }
void test10 ( ) throws Throwable { ShortMetadataResultBean shortMetadataResultBean0 = new ShortMetadataResultBean ( ) ; boolean boolean0 = shortMetadataResultBean0 . equals ( ( Object ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMatchStrength ( ) { return matchStrength ; }
void test11 ( ) throws Throwable { ShortMetadataResultBean shortMetadataResultBean0 = new ShortMetadataResultBean ( ) ; ShortMetadataResultBean shortMetadataResultBean1 = new ShortMetadataResultBean ( ) ; shortMetadataResultBean0 . setMetadataId ( "#J#" ) ; boolean boolean0 = shortMetadataResultBean0 . equals ( ( Object ) shortMetadataResultBean1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMatchStrength ( ) { return matchStrength ; }
void test12 ( ) throws Throwable { ShortMetadataResultBean shortMetadataResultBean0 = new ShortMetadataResultBean ( ) ; shortMetadataResultBean0 . setMetadataId ( "0%" ) ; boolean boolean0 = shortMetadataResultBean0 . equals ( ( Object ) shortMetadataResultBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMatchStrength ( ) { return matchStrength ; }
void test13 ( ) throws Throwable { ShortMetadataResultBean shortMetadataResultBean0 = new ShortMetadataResultBean ( ) ; int int0 = shortMetadataResultBean0 . compareTo ( ( Object ) shortMetadataResultBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getKeywordsMatched ( ) { return keywordsMatched ; }
void test14 ( ) throws Throwable { ShortMetadataResultBean shortMetadataResultBean0 = new ShortMetadataResultBean ( ) ; shortMetadataResultBean0 . setMatchStrength ( ( - 26 ) ) ; ShortMetadataResultBean shortMetadataResultBean1 = new ShortMetadataResultBean ( ) ; int int0 = shortMetadataResultBean0 . compareTo ( ( Object ) shortMetadataResultBean1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMatchStrength ( ) { return matchStrength ; }
void test15 ( ) throws Throwable { ShortMetadataResultBean shortMetadataResultBean0 = new ShortMetadataResultBean ( ) ; ShortMetadataResultBean shortMetadataResultBean1 = new ShortMetadataResultBean ( ) ; shortMetadataResultBean0 . setMatchStrength ( 367 ) ; int int0 = shortMetadataResultBean0 . compareTo ( ( Object ) shortMetadataResultBean1 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getMatchStrength ( ) { return matchStrength ; }
void test0 ( ) throws Throwable { ParameterNode parameterNode0 = new ParameterNode ( "ty + Y . : tvY : H3EPt < " , "ty + Y . : tvY : H3EPt < " , "ty + Y . : tvY : H3EPt < " ) ; parameterNode0 . setColumnInfo ( "ty + Y . : tvY : H3EPt < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExact ( ) { return exact ; }
void test1 ( ) throws Throwable { ParameterNode parameterNode0 = new ParameterNode ( ) ; parameterNode0 . getRelation ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExact ( ) { return exact ; }
void test2 ( ) throws Throwable { ParameterNode parameterNode0 = new ParameterNode ( "z3PRWz7d8 . ) Uz" , "z3PRWz7d8 . ) Uz" , "z3PRWz7d8 . ) Uz" , false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExact ( ) { return exact ; }
void test3 ( ) throws Throwable { ParameterNode parameterNode0 = new ParameterNode ( "ty + Y . : tvY : H3EPt < " , "ty + Y . : tvY : H3EPt < " , "ty + Y . : tvY : H3EPt < " ) ; String string0 = parameterNode0 . getTableName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExact ( ) { return exact ; }
void test4 ( ) throws Throwable { ParameterNode parameterNode0 = new ParameterNode ( "z3PRWz7d8 . ) Uz" , "" ) ; String string0 = parameterNode0 . getColumnName ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExact ( ) { return exact ; }
void test5 ( ) throws Throwable { ParameterNode parameterNode0 = new ParameterNode ( "z3PRWz7d8 . ) Uz" , "" ) ; String string0 = parameterNode0 . getKeyWord ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnName ( ) { int pos = columnInfo . indexOf ( ' . ' ) ; String columnName = columnInfo . substring ( pos + 1 ) ; return columnName ; }
void test6 ( ) throws Throwable { ParameterNode parameterNode0 = new ParameterNode ( "ty + Y . : tvY : H3EPt < " , "ty + Y . : tvY : H3EPt < " , "ty + Y . : tvY : H3EPt < " ) ; boolean boolean0 = parameterNode0 . getExact ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExact ( ) { return exact ; }
void test7 ( ) throws Throwable { ParameterNode parameterNode0 = new ParameterNode ( "z3PRWz7d8 . ) Uz" , "" ) ; String string0 = parameterNode0 . getColumnInfo ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExact ( ) { return exact ; }
void test8 ( ) throws Throwable { ParameterNode parameterNode0 = new ParameterNode ( "ty + Y . : tvY : H3EPt < " , "ty + Y . : tvY : H3EPt < " , "ty + Y . : tvY : H3EPt < " ) ; parameterNode0 . setRelation ( "ty + Y" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExact ( ) { return exact ; }
void test9 ( ) throws Throwable { ParameterNode parameterNode0 = new ParameterNode ( "ty + Y . : tvY : H3EPt < " , "ty + Y . : tvY : H3EPt < " , "ty + Y . : tvY : H3EPt < " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean getExact ( ) { return exact ; }
void test10 ( ) throws Throwable { ParameterNode parameterNode0 = new ParameterNode ( "z3PRWz7d8 . ) Uz" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getColumnInfo ( ) { return columnInfo ; }
void test0 ( ) throws Throwable { SimpleSearchDAO simpleSearchDAO0 = new SimpleSearchDAO ( ) ; BaseXADataSource baseXADataSource0 = new BaseXADataSource ( ) ; simpleSearchDAO0 . setDataSource ( ( DataSource ) baseXADataSource0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDataSource ( DataSource dataSource ) { this . dataSource = dataSource ; }
void test1 ( ) throws Throwable { SimpleSearchDAO simpleSearchDAO0 = new SimpleSearchDAO ( ) ; String string0 = simpleSearchDAO0 . buildMutiQuery ( "\" x = L ( f0 6NQ0DJ" , "\" x = L ( f0 6NQ0DJ" , "\" x = L ( f0 6NQ0DJ" , "\" x = L ( f0 6NQ0DJ" , "\" x = L ( f0 6NQ0DJ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String buildMutiQuery ( String query , String column , String table , String subTable , String subColumn ) { String origQuery = null ; origQuery = addDefaultConnectives ( query ) ; StringTokenizer tk = new StringTokenizer ( origQuery ) ; String searchKey = null ; StringBuffer bf = new StringBuffer ( ) ; boolean isNOT = false ; boolean isOR = false ; boolean isAND = false ; boolean isFirst = true ; boolean isExact = false ; bf . append ( "SELECT " + table + " . metadataID from " + table + " WHERE " + column + " IN ( Select " + column + " from " + subTable + " WHERE " ) ; while ( tk . hasMoreTokens ( ) ) { searchKey = tk . nextToken ( ) ; if ( searchKey . compareTo ( "\"" ) = = 0 ) { StringBuffer exact = new StringBuffer ( ) ; searchKey = tk . nextToken ( ) ; while ( tk . hasMoreTokens ( ) & & searchKey . compareTo ( "\"" ) ! = 0 ) { exact . append ( searchKey + " " ) ; searchKey = tk . nextToken ( ) ; } searchKey = exact . toString ( ) ; searchKey = searchKey . trim ( ) ; isExact = true ; } if ( searchKey . compareTo ( " ( " ) = = 0 | | searchKey . compareTo ( " ) " ) = = 0 ) { bf . append ( searchKey + " " ) ; } else if ( searchKey . compareTo ( "or" ) = = 0 ) { bf . append ( searchKey + " " ) ; isOR = true ; } else if ( searchKey . compareTo ( "not" ) = = 0 ) { bf . append ( " AND " + column + " NOT IN ( SELECT " + column + " FROM " + subTable + " WHERE " ) ; isNOT = true ; } else if ( searchKey . compareTo ( "and" ) = = 0 ) { bf . append ( " AND " + column + " IN ( SELECT " + column + " FROM " + subTable + " WHERE " ) ; isAND = true ; } else { if ( isAND | | isNOT ) { if ( ! isExact ) { bf . append ( subColumn + " like '" + searchKey + "%' OR " + subColumn + " like '% " + searchKey + "%' ) " ) ; } else { bf . append ( subColumn + " like '% " + searchKey + " %' OR " + subColumn + " like '% " + searchKey + "%' OR " + subColumn + " like '% " + searchKey + " %' ) " ) ; } isAND = false ; isNOT = false ; isExact = false ; } else if ( isOR | | isFirst ) { if ( ! isExact ) { bf . append ( subColumn + " like '" + searchKey + "%' OR " + subColumn + " like '% " + searchKey + "%' " ) ; } else { bf . append ( subColumn + " like '% " + searchKey + " %' OR " + subColumn + " like '% " + searchKey + "%' OR " + subColumn + " like '% " + searchKey + " %' " ) ; } isFirst = false ; isOR = false ; isExact = false ; } else { if ( ! isExact ) { bf . append ( " AND " + column + " IN ( SELECT " + column + " FROM " + subTable + " WHERE " + subColumn + " like '" + searchKey + "%' OR " + subColumn + " like '% " + searchKey + "%' ) " ) ; } else { bf . append ( " AND " + column + " IN ( SELECT " + column + " FROM " + subTable + " WHERE " + subColumn + " like '% " + searchKey + " %' OR " + subColumn + " like '% " + searchKey + "%' OR " + subColumn + " like '% " + searchKey + " %' ) " ) ; } } } } bf . append ( " ) " ) ; / / System . out . println ( bf . toString ( ) ) ; return bf . toString ( ) ; }
void test2 ( ) throws Throwable { SimpleSearchDAO simpleSearchDAO0 = new SimpleSearchDAO ( ) ; ParameterBean parameterBean0 = new ParameterBean ( "The COMPUTE BY clause is not supported . " ) ; ParameterNode parameterNode0 = new ParameterNode ( " . " , "The COMPUTE BY clause is not supported . " ) ; parameterBean0 . addParameters ( parameterNode0 ) ; String string0 = simpleSearchDAO0 . makeSimpleQuery ( parameterBean0 , "The COMPUTE BY clause is not supported . " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String makeSimpleQuery ( ParameterBean param , String consumer ) { StringBuffer sql = new StringBuffer ( ) ; boolean exact = false ; String relat = null ; / / stores the AND , OR relation int i = 0 ; / / counter sql . append ( "select distinct ( Metadata . metadataID ) , Title FROM Metadata WHERE " ) ; sql . append ( " ( Metadata . CatalogDate IS NOT NULL AND Metadata . ApproveDate IS NOT NULL AND " ) ; if ( param . getHidden ( ) = = false ) { sql . append ( " Metadata . Private = '0'" ) ; } if ( param . getUsageRight ( ) = = null ) { sql . append ( " AND Metadata . SourceCollection < > 'PEIR - University of Alabama at Birmingham Department of Radiology' AND Metadata . SourceCollection < > 'PEIR - University of Alabama at Birmingham Department of Pathology'" ) ; } if ( consumer = = null ) { sql . append ( " AND Metadata . MetadataID NOT IN ( select MetadataID from TargetUserGroups where ( TargetUserGroup = 'Consumer Health / Patient Education' or TargetUserGroup = 'K - 12' ) ) " ) ; } sql . append ( " ) \n" ) ; String start = sql . toString ( ) ; for ( i = 0 ; i < param . size ( ) ; i + + ) { ParameterNode tempNode = param . getParameters ( i ) ; String key = tempNode . getKeyWord ( ) ; relat = tempNode . getRelation ( ) ; exact = tempNode . getExact ( ) ; if ( relat . compareTo ( "AND" ) = = 0 | | relat . compareTo ( "" ) = = 0 ) / / if AND or OR relation { sql . append ( "AND Metadata . MetadataID IN \n" ) ; } else if ( relat . compareTo ( "NOT" ) = = 0 ) { sql . append ( "AND Metadata . MetadataID NOT IN \n" ) ; } else if ( relat . compareTo ( "OR" ) = = 0 ) { sql . append ( "UNION \n" + start + "AND Metadata . MetadataID IN \n " ) ; } if ( ! exact ) { sql . append ( " ( " + buildCommonQuery ( key , "title" , "Metadata" ) ) ; sql . append ( "\nUNION " + buildCommonQuery ( key , "description" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "SourceCollection" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "metadataID" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "LearningResourceType" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "keyword" , "Keywords" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "tag" , "Tags" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "CopyrightTextID" , "CopyRights" , "CopyrightTexts" , "CopyrightText" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "TaxonPathID" , "TaxonPaths" , "Taxons" , "Entry" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "vcardID" , "Contributors" , "Vcards" , "vcard" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "vcardID" , "CopyrightHolders" , "Vcards" , "vcard" ) ) ; sql . append ( " ) \n" ) ; } else / / if it is exact search { sql . append ( " ( Select Metadata . MetadataID from Metadata where" ) ; sql . append ( " ( title like '" + key + "' OR title like '% " + key + " %' OR title like '" + key + " %' OR title like '% " + key + "' OR title like '% " + key + " . %' OR title like '% " + key + " , %'\n" ) ; sql . append ( "OR description like '" + key + "' OR description like '% " + key + " %' OR description like '" + key + " %' OR description like '% " + key + "' OR description like '% " + key + " . %' OR description like '% " + key + " , %'\n" ) ; sql . append ( "OR SourceCollection like '" + key + "' OR SourceCollection like '% " + key + " %' OR SourceCollection like '% " + key + "' OR SourceCollection like '" + key + " %' OR SourceCollection like '% " + key + " . %' OR SourceCollection like '% " + key + " , %'\n" ) ; sql . append ( "OR LearningResourceType like '" + key + "' OR LearningResourceType like '% " + key + " %' OR LearningResourceType like '% " + key + "' OR LearningResourceType like '" + key + " %' OR LearningResourceType like '% " + key + " . %' OR LearningResourceType like '% " + key + " , %'\n" ) ; sql . append ( "OR metadataID like '" + key + "' ) \n" ) ; sql . append ( "UNION Select keywords . metadataID FROM keywords where keyword like '" + key + "' OR keyword LIKE '% " + key + " %' OR keyword like '" + key + " %' OR keyword like '% " + key + "' OR keyword like '% " + key + " . %' OR keyword like '% " + key + " , %'\n" ) ; sql . append ( "UNION Select Copyrights . metadataID from Copyrights WHERE copyrightTextID IN ( Select copyrightTextID from CopyrightTexts WHERE " ) ; sql . append ( "copyrightText like '" + key + "' OR copyrightText LIKE '% " + key + " %' OR copyrightText like '" + key + " %' OR copyrightText like '% " + key + "' OR copyrightText like '% " + key + " . %' ) \n" ) ; / / sql . append ( "UNION Select TaxonPaths . metadataID from TaxonPaths where taxonpathid in ( select taxonpathid from taxons where " ) ; / / sql . append ( "Entry like '" + key + "' OR Entry LIKE '% " + key + " %' OR Entry like '" + key + " %' OR Entry like '% " + key + "' OR Entry like '% " + key + " . %' OR Entry like '% " + key + " , %' ) \n" ) ; sql . append ( "UNION select copyrightHolders . metadataID from copyrightHolders where vcardID in ( select vcardID from vcards where " ) ; sql . append ( "vCard like '" + key + "' OR vCard LIKE '% " + key + " %' OR vCard like '" + key + " %' OR vCard like '% " + key + "' OR vCard like '% " + key + " . %' OR vCard like '% " + key + " , %' ) \n" ) ; sql . append ( "UNION select Contributors . metadataID from Contributors where vcardID in ( select vcardID from vcards where " ) ; sql . append ( "vCard like '" + key + "' OR vCard LIKE '% " + key + " %' OR vCard like '" + key + " %' OR vCard like '% " + key + "' OR vCard like '% " + key + " . %' OR vCard like '% " + key + " , %' ) ) \n" ) ; } } sql . append ( " order by Title" ) ; String output = sql . toString ( ) ; System . out . println ( output ) ; return output ; }
void test5 ( ) throws Throwable { SimpleSearchDAO simpleSearchDAO0 = new SimpleSearchDAO ( ) ; String string0 = simpleSearchDAO0 . buildMutiQuery ( "SELECT ( . metadataID from ( WHERE ( " , " ( " , " ( " , "SELECT ( . metadataID from ( WHERE ( " , "SELECT ( . metadataID from ( WHERE ( " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String buildMutiQuery ( String query , String column , String table , String subTable , String subColumn ) { String origQuery = null ; origQuery = addDefaultConnectives ( query ) ; StringTokenizer tk = new StringTokenizer ( origQuery ) ; String searchKey = null ; StringBuffer bf = new StringBuffer ( ) ; boolean isNOT = false ; boolean isOR = false ; boolean isAND = false ; boolean isFirst = true ; boolean isExact = false ; bf . append ( "SELECT " + table + " . metadataID from " + table + " WHERE " + column + " IN ( Select " + column + " from " + subTable + " WHERE " ) ; while ( tk . hasMoreTokens ( ) ) { searchKey = tk . nextToken ( ) ; if ( searchKey . compareTo ( "\"" ) = = 0 ) { StringBuffer exact = new StringBuffer ( ) ; searchKey = tk . nextToken ( ) ; while ( tk . hasMoreTokens ( ) & & searchKey . compareTo ( "\"" ) ! = 0 ) { exact . append ( searchKey + " " ) ; searchKey = tk . nextToken ( ) ; } searchKey = exact . toString ( ) ; searchKey = searchKey . trim ( ) ; isExact = true ; } if ( searchKey . compareTo ( " ( " ) = = 0 | | searchKey . compareTo ( " ) " ) = = 0 ) { bf . append ( searchKey + " " ) ; } else if ( searchKey . compareTo ( "or" ) = = 0 ) { bf . append ( searchKey + " " ) ; isOR = true ; } else if ( searchKey . compareTo ( "not" ) = = 0 ) { bf . append ( " AND " + column + " NOT IN ( SELECT " + column + " FROM " + subTable + " WHERE " ) ; isNOT = true ; } else if ( searchKey . compareTo ( "and" ) = = 0 ) { bf . append ( " AND " + column + " IN ( SELECT " + column + " FROM " + subTable + " WHERE " ) ; isAND = true ; } else { if ( isAND | | isNOT ) { if ( ! isExact ) { bf . append ( subColumn + " like '" + searchKey + "%' OR " + subColumn + " like '% " + searchKey + "%' ) " ) ; } else { bf . append ( subColumn + " like '% " + searchKey + " %' OR " + subColumn + " like '% " + searchKey + "%' OR " + subColumn + " like '% " + searchKey + " %' ) " ) ; } isAND = false ; isNOT = false ; isExact = false ; } else if ( isOR | | isFirst ) { if ( ! isExact ) { bf . append ( subColumn + " like '" + searchKey + "%' OR " + subColumn + " like '% " + searchKey + "%' " ) ; } else { bf . append ( subColumn + " like '% " + searchKey + " %' OR " + subColumn + " like '% " + searchKey + "%' OR " + subColumn + " like '% " + searchKey + " %' " ) ; } isFirst = false ; isOR = false ; isExact = false ; } else { if ( ! isExact ) { bf . append ( " AND " + column + " IN ( SELECT " + column + " FROM " + subTable + " WHERE " + subColumn + " like '" + searchKey + "%' OR " + subColumn + " like '% " + searchKey + "%' ) " ) ; } else { bf . append ( " AND " + column + " IN ( SELECT " + column + " FROM " + subTable + " WHERE " + subColumn + " like '% " + searchKey + " %' OR " + subColumn + " like '% " + searchKey + "%' OR " + subColumn + " like '% " + searchKey + " %' ) " ) ; } } } } bf . append ( " ) " ) ; / / System . out . println ( bf . toString ( ) ) ; return bf . toString ( ) ; }
void test6 ( ) throws Throwable { SimpleSearchDAO simpleSearchDAO0 = new SimpleSearchDAO ( ) ; String string0 = simpleSearchDAO0 . buildCommonQuery ( "\" x = L ( f0 6NQ0DJ" , "SELECT \" x = L ( f0 6NQ0DJ . metadataID from \" x = L ( f0 6NQ0DJ WHERE \" x = L ( f0 6NQ0DJ IN ( Select \" x = L ( f0 6NQ0DJ from \" x = L ( f0 6NQ0DJ WHERE \" x = L ( f0 6NQ0DJ like '% and x = L ( f0 and %' OR \" x = L ( f0 6NQ0DJ like '% and x = L ( f0 and%' OR \" x = L ( f0 6NQ0DJ like '% and x = L ( f0 and %' ) " , "SELECT \" x = L ( f0 6NQ0DJ . metadataID from \" x = L ( f0 6NQ0DJ WHERE \" x = L ( f0 6NQ0DJ IN ( Select \" x = L ( f0 6NQ0DJ from \" x = L ( f0 6NQ0DJ WHERE \" x = L ( f0 6NQ0DJ like '% and x = L ( f0 and %' OR \" x = L ( f0 6NQ0DJ like '% and x = L ( f0 and%' OR \" x = L ( f0 6NQ0DJ like '% and x = L ( f0 and %' ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String buildCommonQuery ( String query , String column , String table ) { String origQuery = null ; origQuery = addDefaultConnectives ( query ) ; StringTokenizer tk = new StringTokenizer ( origQuery ) ; String searchKey = null ; StringBuffer bf = new StringBuffer ( ) ; boolean isNOT = false ; boolean isOR = false ; boolean isAND = false ; boolean isFirst = true ; boolean isExact = false ; bf . append ( "SELECT " + table + " . metadataID from " + table + " WHERE " ) ; while ( tk . hasMoreTokens ( ) ) { searchKey = tk . nextToken ( ) ; if ( searchKey . compareTo ( "\"" ) = = 0 ) { StringBuffer exact = new StringBuffer ( ) ; searchKey = tk . nextToken ( ) ; while ( tk . hasMoreTokens ( ) & & searchKey . compareTo ( "\"" ) ! = 0 ) { exact . append ( searchKey + " " ) ; searchKey = tk . nextToken ( ) ; } searchKey = exact . toString ( ) ; searchKey = searchKey . trim ( ) ; isExact = true ; } if ( searchKey . compareTo ( " ( " ) = = 0 | | searchKey . compareTo ( " ) " ) = = 0 ) { bf . append ( searchKey + " " ) ; } else if ( searchKey . compareTo ( "or" ) = = 0 ) { bf . append ( searchKey + " " ) ; isOR = true ; } else if ( searchKey . compareTo ( "not" ) = = 0 ) { bf . append ( " AND Metadata . metadataID NOT IN ( SELECT " + table + " . MetadataID from " + table + " where " ) ; isNOT = true ; } else if ( searchKey . compareTo ( "and" ) = = 0 ) { bf . append ( " AND Metadata . metadataID IN ( SELECT " + table + " . MetadataID from " + table + " where " ) ; isAND = true ; } else { if ( isAND | | isNOT ) { if ( ! isExact ) { bf . append ( column + " like '" + searchKey + "%' OR " + column + " like '% " + searchKey + "%' ) " ) ; } else { bf . append ( column + " like '% " + searchKey + " %' OR " + column + " like '% " + searchKey + "%' OR " + column + " like '%" + searchKey + " %' ) " ) ; } isAND = false ; isNOT = false ; isFirst = false ; isExact = false ; } else if ( isOR | | isFirst ) { if ( ! isExact ) { bf . append ( column + " like '" + searchKey + "%' OR " + column + " like '% " + searchKey + "%' " ) ; } else { bf . append ( column + " like '% " + searchKey + " %' OR " + column + " like '% " + searchKey + "%' OR " + column + " like '%" + searchKey + " %'" ) ; } isFirst = false ; isOR = false ; isExact = false ; } else { if ( ! isExact ) { bf . append ( " AND Metadata . metadataID IN ( SELECT Metadata . MetadataID from metadata where " + column + " like '" + searchKey + "%' OR " + column + " like '% " + searchKey + "%' ) " ) ; } else { bf . append ( " AND Metadata . metadataID IN ( SELECT Metadata . MetadataID from metadata where " + column + " like '% " + searchKey + " %' OR " + column + " like '% " + searchKey + "%' OR " + column + " like '%" + searchKey + " %' ) " ) ; } isAND = false ; isFirst = false ; isExact = false ; } } } / / System . out . println ( bf . toString ( ) ) ; return bf . toString ( ) ; }
void test7 ( ) throws Throwable { SimpleSearchDAO simpleSearchDAO0 = new SimpleSearchDAO ( ) ; String string0 = simpleSearchDAO0 . buildCommonQuery ( "SELECT \" x = L ( f0 6NQ0DJ . metadataID from \" x = L ( f0 6NQ0DJ WHERE \" x = L ( f0 6NQ0DJ IN ( Select \" x = L ( f0 6NQ0DJ from \" x = L ( f0 6NQ0DJ WHERE \" x = L ( f0 6NQ0DJ like '% and x = L ( f0 and %' OR \" x = L ( f0 6NQ0DJ like '% and x = L ( f0 and%' OR \" x = L ( f0 6NQ0DJ like '% and x = L ( f0 and %' ) " , "\" x = L ( f0 6NQ0DJ" , "\" x = L ( f0 6NQ0DJ" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String buildCommonQuery ( String query , String column , String table ) { String origQuery = null ; origQuery = addDefaultConnectives ( query ) ; StringTokenizer tk = new StringTokenizer ( origQuery ) ; String searchKey = null ; StringBuffer bf = new StringBuffer ( ) ; boolean isNOT = false ; boolean isOR = false ; boolean isAND = false ; boolean isFirst = true ; boolean isExact = false ; bf . append ( "SELECT " + table + " . metadataID from " + table + " WHERE " ) ; while ( tk . hasMoreTokens ( ) ) { searchKey = tk . nextToken ( ) ; if ( searchKey . compareTo ( "\"" ) = = 0 ) { StringBuffer exact = new StringBuffer ( ) ; searchKey = tk . nextToken ( ) ; while ( tk . hasMoreTokens ( ) & & searchKey . compareTo ( "\"" ) ! = 0 ) { exact . append ( searchKey + " " ) ; searchKey = tk . nextToken ( ) ; } searchKey = exact . toString ( ) ; searchKey = searchKey . trim ( ) ; isExact = true ; } if ( searchKey . compareTo ( " ( " ) = = 0 | | searchKey . compareTo ( " ) " ) = = 0 ) { bf . append ( searchKey + " " ) ; } else if ( searchKey . compareTo ( "or" ) = = 0 ) { bf . append ( searchKey + " " ) ; isOR = true ; } else if ( searchKey . compareTo ( "not" ) = = 0 ) { bf . append ( " AND Metadata . metadataID NOT IN ( SELECT " + table + " . MetadataID from " + table + " where " ) ; isNOT = true ; } else if ( searchKey . compareTo ( "and" ) = = 0 ) { bf . append ( " AND Metadata . metadataID IN ( SELECT " + table + " . MetadataID from " + table + " where " ) ; isAND = true ; } else { if ( isAND | | isNOT ) { if ( ! isExact ) { bf . append ( column + " like '" + searchKey + "%' OR " + column + " like '% " + searchKey + "%' ) " ) ; } else { bf . append ( column + " like '% " + searchKey + " %' OR " + column + " like '% " + searchKey + "%' OR " + column + " like '%" + searchKey + " %' ) " ) ; } isAND = false ; isNOT = false ; isFirst = false ; isExact = false ; } else if ( isOR | | isFirst ) { if ( ! isExact ) { bf . append ( column + " like '" + searchKey + "%' OR " + column + " like '% " + searchKey + "%' " ) ; } else { bf . append ( column + " like '% " + searchKey + " %' OR " + column + " like '% " + searchKey + "%' OR " + column + " like '%" + searchKey + " %'" ) ; } isFirst = false ; isOR = false ; isExact = false ; } else { if ( ! isExact ) { bf . append ( " AND Metadata . metadataID IN ( SELECT Metadata . MetadataID from metadata where " + column + " like '" + searchKey + "%' OR " + column + " like '% " + searchKey + "%' ) " ) ; } else { bf . append ( " AND Metadata . metadataID IN ( SELECT Metadata . MetadataID from metadata where " + column + " like '% " + searchKey + " %' OR " + column + " like '% " + searchKey + "%' OR " + column + " like '%" + searchKey + " %' ) " ) ; } isAND = false ; isFirst = false ; isExact = false ; } } } / / System . out . println ( bf . toString ( ) ) ; return bf . toString ( ) ; }
void test8 ( ) throws Throwable { SimpleSearchDAO simpleSearchDAO0 = new SimpleSearchDAO ( ) ; String string0 = simpleSearchDAO0 . buildCommonQuery ( " ( " , " ( " , " ( " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String buildCommonQuery ( String query , String column , String table ) { String origQuery = null ; origQuery = addDefaultConnectives ( query ) ; StringTokenizer tk = new StringTokenizer ( origQuery ) ; String searchKey = null ; StringBuffer bf = new StringBuffer ( ) ; boolean isNOT = false ; boolean isOR = false ; boolean isAND = false ; boolean isFirst = true ; boolean isExact = false ; bf . append ( "SELECT " + table + " . metadataID from " + table + " WHERE " ) ; while ( tk . hasMoreTokens ( ) ) { searchKey = tk . nextToken ( ) ; if ( searchKey . compareTo ( "\"" ) = = 0 ) { StringBuffer exact = new StringBuffer ( ) ; searchKey = tk . nextToken ( ) ; while ( tk . hasMoreTokens ( ) & & searchKey . compareTo ( "\"" ) ! = 0 ) { exact . append ( searchKey + " " ) ; searchKey = tk . nextToken ( ) ; } searchKey = exact . toString ( ) ; searchKey = searchKey . trim ( ) ; isExact = true ; } if ( searchKey . compareTo ( " ( " ) = = 0 | | searchKey . compareTo ( " ) " ) = = 0 ) { bf . append ( searchKey + " " ) ; } else if ( searchKey . compareTo ( "or" ) = = 0 ) { bf . append ( searchKey + " " ) ; isOR = true ; } else if ( searchKey . compareTo ( "not" ) = = 0 ) { bf . append ( " AND Metadata . metadataID NOT IN ( SELECT " + table + " . MetadataID from " + table + " where " ) ; isNOT = true ; } else if ( searchKey . compareTo ( "and" ) = = 0 ) { bf . append ( " AND Metadata . metadataID IN ( SELECT " + table + " . MetadataID from " + table + " where " ) ; isAND = true ; } else { if ( isAND | | isNOT ) { if ( ! isExact ) { bf . append ( column + " like '" + searchKey + "%' OR " + column + " like '% " + searchKey + "%' ) " ) ; } else { bf . append ( column + " like '% " + searchKey + " %' OR " + column + " like '% " + searchKey + "%' OR " + column + " like '%" + searchKey + " %' ) " ) ; } isAND = false ; isNOT = false ; isFirst = false ; isExact = false ; } else if ( isOR | | isFirst ) { if ( ! isExact ) { bf . append ( column + " like '" + searchKey + "%' OR " + column + " like '% " + searchKey + "%' " ) ; } else { bf . append ( column + " like '% " + searchKey + " %' OR " + column + " like '% " + searchKey + "%' OR " + column + " like '%" + searchKey + " %'" ) ; } isFirst = false ; isOR = false ; isExact = false ; } else { if ( ! isExact ) { bf . append ( " AND Metadata . metadataID IN ( SELECT Metadata . MetadataID from metadata where " + column + " like '" + searchKey + "%' OR " + column + " like '% " + searchKey + "%' ) " ) ; } else { bf . append ( " AND Metadata . metadataID IN ( SELECT Metadata . MetadataID from metadata where " + column + " like '% " + searchKey + " %' OR " + column + " like '% " + searchKey + "%' OR " + column + " like '%" + searchKey + " %' ) " ) ; } isAND = false ; isFirst = false ; isExact = false ; } } } / / System . out . println ( bf . toString ( ) ) ; return bf . toString ( ) ; }
void test9 ( ) throws Throwable { SimpleSearchDAO simpleSearchDAO0 = new SimpleSearchDAO ( ) ; String string0 = simpleSearchDAO0 . buildMutiQuery ( "SELECT or . metadataID from or WHERE or IN ( Select or from or WHERE or ) " , "SELECT or . metadataID from or WHERE or IN ( Select or from or WHERE or ) " , "SELECT or . metadataID from or WHERE or IN ( Select or from or WHERE or ) " , "SELECT or . metadataID from or WHERE or IN ( Select or from or WHERE or ) " , "SELECT or . metadataID from or WHERE or IN ( Select or from or WHERE or ) " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String buildMutiQuery ( String query , String column , String table , String subTable , String subColumn ) { String origQuery = null ; origQuery = addDefaultConnectives ( query ) ; StringTokenizer tk = new StringTokenizer ( origQuery ) ; String searchKey = null ; StringBuffer bf = new StringBuffer ( ) ; boolean isNOT = false ; boolean isOR = false ; boolean isAND = false ; boolean isFirst = true ; boolean isExact = false ; bf . append ( "SELECT " + table + " . metadataID from " + table + " WHERE " + column + " IN ( Select " + column + " from " + subTable + " WHERE " ) ; while ( tk . hasMoreTokens ( ) ) { searchKey = tk . nextToken ( ) ; if ( searchKey . compareTo ( "\"" ) = = 0 ) { StringBuffer exact = new StringBuffer ( ) ; searchKey = tk . nextToken ( ) ; while ( tk . hasMoreTokens ( ) & & searchKey . compareTo ( "\"" ) ! = 0 ) { exact . append ( searchKey + " " ) ; searchKey = tk . nextToken ( ) ; } searchKey = exact . toString ( ) ; searchKey = searchKey . trim ( ) ; isExact = true ; } if ( searchKey . compareTo ( " ( " ) = = 0 | | searchKey . compareTo ( " ) " ) = = 0 ) { bf . append ( searchKey + " " ) ; } else if ( searchKey . compareTo ( "or" ) = = 0 ) { bf . append ( searchKey + " " ) ; isOR = true ; } else if ( searchKey . compareTo ( "not" ) = = 0 ) { bf . append ( " AND " + column + " NOT IN ( SELECT " + column + " FROM " + subTable + " WHERE " ) ; isNOT = true ; } else if ( searchKey . compareTo ( "and" ) = = 0 ) { bf . append ( " AND " + column + " IN ( SELECT " + column + " FROM " + subTable + " WHERE " ) ; isAND = true ; } else { if ( isAND | | isNOT ) { if ( ! isExact ) { bf . append ( subColumn + " like '" + searchKey + "%' OR " + subColumn + " like '% " + searchKey + "%' ) " ) ; } else { bf . append ( subColumn + " like '% " + searchKey + " %' OR " + subColumn + " like '% " + searchKey + "%' OR " + subColumn + " like '% " + searchKey + " %' ) " ) ; } isAND = false ; isNOT = false ; isExact = false ; } else if ( isOR | | isFirst ) { if ( ! isExact ) { bf . append ( subColumn + " like '" + searchKey + "%' OR " + subColumn + " like '% " + searchKey + "%' " ) ; } else { bf . append ( subColumn + " like '% " + searchKey + " %' OR " + subColumn + " like '% " + searchKey + "%' OR " + subColumn + " like '% " + searchKey + " %' " ) ; } isFirst = false ; isOR = false ; isExact = false ; } else { if ( ! isExact ) { bf . append ( " AND " + column + " IN ( SELECT " + column + " FROM " + subTable + " WHERE " + subColumn + " like '" + searchKey + "%' OR " + subColumn + " like '% " + searchKey + "%' ) " ) ; } else { bf . append ( " AND " + column + " IN ( SELECT " + column + " FROM " + subTable + " WHERE " + subColumn + " like '% " + searchKey + " %' OR " + subColumn + " like '% " + searchKey + "%' OR " + subColumn + " like '% " + searchKey + " %' ) " ) ; } } } } bf . append ( " ) " ) ; / / System . out . println ( bf . toString ( ) ) ; return bf . toString ( ) ; }
void test10 ( ) throws Throwable { SimpleSearchDAO simpleSearchDAO0 = new SimpleSearchDAO ( ) ; ParameterBean parameterBean0 = new ParameterBean ( ) ; parameterBean0 . setHidden ( true ) ; String string0 = simpleSearchDAO0 . makeSimpleQuery ( parameterBean0 , "s " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String makeSimpleQuery ( ParameterBean param , String consumer ) { StringBuffer sql = new StringBuffer ( ) ; boolean exact = false ; String relat = null ; / / stores the AND , OR relation int i = 0 ; / / counter sql . append ( "select distinct ( Metadata . metadataID ) , Title FROM Metadata WHERE " ) ; sql . append ( " ( Metadata . CatalogDate IS NOT NULL AND Metadata . ApproveDate IS NOT NULL AND " ) ; if ( param . getHidden ( ) = = false ) { sql . append ( " Metadata . Private = '0'" ) ; } if ( param . getUsageRight ( ) = = null ) { sql . append ( " AND Metadata . SourceCollection < > 'PEIR - University of Alabama at Birmingham Department of Radiology' AND Metadata . SourceCollection < > 'PEIR - University of Alabama at Birmingham Department of Pathology'" ) ; } if ( consumer = = null ) { sql . append ( " AND Metadata . MetadataID NOT IN ( select MetadataID from TargetUserGroups where ( TargetUserGroup = 'Consumer Health / Patient Education' or TargetUserGroup = 'K - 12' ) ) " ) ; } sql . append ( " ) \n" ) ; String start = sql . toString ( ) ; for ( i = 0 ; i < param . size ( ) ; i + + ) { ParameterNode tempNode = param . getParameters ( i ) ; String key = tempNode . getKeyWord ( ) ; relat = tempNode . getRelation ( ) ; exact = tempNode . getExact ( ) ; if ( relat . compareTo ( "AND" ) = = 0 | | relat . compareTo ( "" ) = = 0 ) / / if AND or OR relation { sql . append ( "AND Metadata . MetadataID IN \n" ) ; } else if ( relat . compareTo ( "NOT" ) = = 0 ) { sql . append ( "AND Metadata . MetadataID NOT IN \n" ) ; } else if ( relat . compareTo ( "OR" ) = = 0 ) { sql . append ( "UNION \n" + start + "AND Metadata . MetadataID IN \n " ) ; } if ( ! exact ) { sql . append ( " ( " + buildCommonQuery ( key , "title" , "Metadata" ) ) ; sql . append ( "\nUNION " + buildCommonQuery ( key , "description" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "SourceCollection" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "metadataID" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "LearningResourceType" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "keyword" , "Keywords" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "tag" , "Tags" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "CopyrightTextID" , "CopyRights" , "CopyrightTexts" , "CopyrightText" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "TaxonPathID" , "TaxonPaths" , "Taxons" , "Entry" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "vcardID" , "Contributors" , "Vcards" , "vcard" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "vcardID" , "CopyrightHolders" , "Vcards" , "vcard" ) ) ; sql . append ( " ) \n" ) ; } else / / if it is exact search { sql . append ( " ( Select Metadata . MetadataID from Metadata where" ) ; sql . append ( " ( title like '" + key + "' OR title like '% " + key + " %' OR title like '" + key + " %' OR title like '% " + key + "' OR title like '% " + key + " . %' OR title like '% " + key + " , %'\n" ) ; sql . append ( "OR description like '" + key + "' OR description like '% " + key + " %' OR description like '" + key + " %' OR description like '% " + key + "' OR description like '% " + key + " . %' OR description like '% " + key + " , %'\n" ) ; sql . append ( "OR SourceCollection like '" + key + "' OR SourceCollection like '% " + key + " %' OR SourceCollection like '% " + key + "' OR SourceCollection like '" + key + " %' OR SourceCollection like '% " + key + " . %' OR SourceCollection like '% " + key + " , %'\n" ) ; sql . append ( "OR LearningResourceType like '" + key + "' OR LearningResourceType like '% " + key + " %' OR LearningResourceType like '% " + key + "' OR LearningResourceType like '" + key + " %' OR LearningResourceType like '% " + key + " . %' OR LearningResourceType like '% " + key + " , %'\n" ) ; sql . append ( "OR metadataID like '" + key + "' ) \n" ) ; sql . append ( "UNION Select keywords . metadataID FROM keywords where keyword like '" + key + "' OR keyword LIKE '% " + key + " %' OR keyword like '" + key + " %' OR keyword like '% " + key + "' OR keyword like '% " + key + " . %' OR keyword like '% " + key + " , %'\n" ) ; sql . append ( "UNION Select Copyrights . metadataID from Copyrights WHERE copyrightTextID IN ( Select copyrightTextID from CopyrightTexts WHERE " ) ; sql . append ( "copyrightText like '" + key + "' OR copyrightText LIKE '% " + key + " %' OR copyrightText like '" + key + " %' OR copyrightText like '% " + key + "' OR copyrightText like '% " + key + " . %' ) \n" ) ; / / sql . append ( "UNION Select TaxonPaths . metadataID from TaxonPaths where taxonpathid in ( select taxonpathid from taxons where " ) ; / / sql . append ( "Entry like '" + key + "' OR Entry LIKE '% " + key + " %' OR Entry like '" + key + " %' OR Entry like '% " + key + "' OR Entry like '% " + key + " . %' OR Entry like '% " + key + " , %' ) \n" ) ; sql . append ( "UNION select copyrightHolders . metadataID from copyrightHolders where vcardID in ( select vcardID from vcards where " ) ; sql . append ( "vCard like '" + key + "' OR vCard LIKE '% " + key + " %' OR vCard like '" + key + " %' OR vCard like '% " + key + "' OR vCard like '% " + key + " . %' OR vCard like '% " + key + " , %' ) \n" ) ; sql . append ( "UNION select Contributors . metadataID from Contributors where vcardID in ( select vcardID from vcards where " ) ; sql . append ( "vCard like '" + key + "' OR vCard LIKE '% " + key + " %' OR vCard like '" + key + " %' OR vCard like '% " + key + "' OR vCard like '% " + key + " . %' OR vCard like '% " + key + " , %' ) ) \n" ) ; } } sql . append ( " order by Title" ) ; String output = sql . toString ( ) ; System . out . println ( output ) ; return output ; }
void test11 ( ) throws Throwable { SimpleSearchDAO simpleSearchDAO0 = new SimpleSearchDAO ( ) ; ParameterBean parameterBean0 = new ParameterBean ( ) ; parameterBean0 . setUsageRights ( "" ) ; String string0 = simpleSearchDAO0 . makeSimpleQuery ( parameterBean0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String makeSimpleQuery ( ParameterBean param , String consumer ) { StringBuffer sql = new StringBuffer ( ) ; boolean exact = false ; String relat = null ; / / stores the AND , OR relation int i = 0 ; / / counter sql . append ( "select distinct ( Metadata . metadataID ) , Title FROM Metadata WHERE " ) ; sql . append ( " ( Metadata . CatalogDate IS NOT NULL AND Metadata . ApproveDate IS NOT NULL AND " ) ; if ( param . getHidden ( ) = = false ) { sql . append ( " Metadata . Private = '0'" ) ; } if ( param . getUsageRight ( ) = = null ) { sql . append ( " AND Metadata . SourceCollection < > 'PEIR - University of Alabama at Birmingham Department of Radiology' AND Metadata . SourceCollection < > 'PEIR - University of Alabama at Birmingham Department of Pathology'" ) ; } if ( consumer = = null ) { sql . append ( " AND Metadata . MetadataID NOT IN ( select MetadataID from TargetUserGroups where ( TargetUserGroup = 'Consumer Health / Patient Education' or TargetUserGroup = 'K - 12' ) ) " ) ; } sql . append ( " ) \n" ) ; String start = sql . toString ( ) ; for ( i = 0 ; i < param . size ( ) ; i + + ) { ParameterNode tempNode = param . getParameters ( i ) ; String key = tempNode . getKeyWord ( ) ; relat = tempNode . getRelation ( ) ; exact = tempNode . getExact ( ) ; if ( relat . compareTo ( "AND" ) = = 0 | | relat . compareTo ( "" ) = = 0 ) / / if AND or OR relation { sql . append ( "AND Metadata . MetadataID IN \n" ) ; } else if ( relat . compareTo ( "NOT" ) = = 0 ) { sql . append ( "AND Metadata . MetadataID NOT IN \n" ) ; } else if ( relat . compareTo ( "OR" ) = = 0 ) { sql . append ( "UNION \n" + start + "AND Metadata . MetadataID IN \n " ) ; } if ( ! exact ) { sql . append ( " ( " + buildCommonQuery ( key , "title" , "Metadata" ) ) ; sql . append ( "\nUNION " + buildCommonQuery ( key , "description" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "SourceCollection" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "metadataID" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "LearningResourceType" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "keyword" , "Keywords" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "tag" , "Tags" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "CopyrightTextID" , "CopyRights" , "CopyrightTexts" , "CopyrightText" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "TaxonPathID" , "TaxonPaths" , "Taxons" , "Entry" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "vcardID" , "Contributors" , "Vcards" , "vcard" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "vcardID" , "CopyrightHolders" , "Vcards" , "vcard" ) ) ; sql . append ( " ) \n" ) ; } else / / if it is exact search { sql . append ( " ( Select Metadata . MetadataID from Metadata where" ) ; sql . append ( " ( title like '" + key + "' OR title like '% " + key + " %' OR title like '" + key + " %' OR title like '% " + key + "' OR title like '% " + key + " . %' OR title like '% " + key + " , %'\n" ) ; sql . append ( "OR description like '" + key + "' OR description like '% " + key + " %' OR description like '" + key + " %' OR description like '% " + key + "' OR description like '% " + key + " . %' OR description like '% " + key + " , %'\n" ) ; sql . append ( "OR SourceCollection like '" + key + "' OR SourceCollection like '% " + key + " %' OR SourceCollection like '% " + key + "' OR SourceCollection like '" + key + " %' OR SourceCollection like '% " + key + " . %' OR SourceCollection like '% " + key + " , %'\n" ) ; sql . append ( "OR LearningResourceType like '" + key + "' OR LearningResourceType like '% " + key + " %' OR LearningResourceType like '% " + key + "' OR LearningResourceType like '" + key + " %' OR LearningResourceType like '% " + key + " . %' OR LearningResourceType like '% " + key + " , %'\n" ) ; sql . append ( "OR metadataID like '" + key + "' ) \n" ) ; sql . append ( "UNION Select keywords . metadataID FROM keywords where keyword like '" + key + "' OR keyword LIKE '% " + key + " %' OR keyword like '" + key + " %' OR keyword like '% " + key + "' OR keyword like '% " + key + " . %' OR keyword like '% " + key + " , %'\n" ) ; sql . append ( "UNION Select Copyrights . metadataID from Copyrights WHERE copyrightTextID IN ( Select copyrightTextID from CopyrightTexts WHERE " ) ; sql . append ( "copyrightText like '" + key + "' OR copyrightText LIKE '% " + key + " %' OR copyrightText like '" + key + " %' OR copyrightText like '% " + key + "' OR copyrightText like '% " + key + " . %' ) \n" ) ; / / sql . append ( "UNION Select TaxonPaths . metadataID from TaxonPaths where taxonpathid in ( select taxonpathid from taxons where " ) ; / / sql . append ( "Entry like '" + key + "' OR Entry LIKE '% " + key + " %' OR Entry like '" + key + " %' OR Entry like '% " + key + "' OR Entry like '% " + key + " . %' OR Entry like '% " + key + " , %' ) \n" ) ; sql . append ( "UNION select copyrightHolders . metadataID from copyrightHolders where vcardID in ( select vcardID from vcards where " ) ; sql . append ( "vCard like '" + key + "' OR vCard LIKE '% " + key + " %' OR vCard like '" + key + " %' OR vCard like '% " + key + "' OR vCard like '% " + key + " . %' OR vCard like '% " + key + " , %' ) \n" ) ; sql . append ( "UNION select Contributors . metadataID from Contributors where vcardID in ( select vcardID from vcards where " ) ; sql . append ( "vCard like '" + key + "' OR vCard LIKE '% " + key + " %' OR vCard like '" + key + " %' OR vCard like '% " + key + "' OR vCard like '% " + key + " . %' OR vCard like '% " + key + " , %' ) ) \n" ) ; } } sql . append ( " order by Title" ) ; String output = sql . toString ( ) ; System . out . println ( output ) ; return output ; }
void test12 ( ) throws Throwable { SimpleSearchDAO simpleSearchDAO0 = new SimpleSearchDAO ( ) ; ParameterBean parameterBean0 = new ParameterBean ( "The COMPUTE BY clause is not supported . " ) ; String string0 = simpleSearchDAO0 . makeSimpleQuery ( parameterBean0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String makeSimpleQuery ( ParameterBean param , String consumer ) { StringBuffer sql = new StringBuffer ( ) ; boolean exact = false ; String relat = null ; / / stores the AND , OR relation int i = 0 ; / / counter sql . append ( "select distinct ( Metadata . metadataID ) , Title FROM Metadata WHERE " ) ; sql . append ( " ( Metadata . CatalogDate IS NOT NULL AND Metadata . ApproveDate IS NOT NULL AND " ) ; if ( param . getHidden ( ) = = false ) { sql . append ( " Metadata . Private = '0'" ) ; } if ( param . getUsageRight ( ) = = null ) { sql . append ( " AND Metadata . SourceCollection < > 'PEIR - University of Alabama at Birmingham Department of Radiology' AND Metadata . SourceCollection < > 'PEIR - University of Alabama at Birmingham Department of Pathology'" ) ; } if ( consumer = = null ) { sql . append ( " AND Metadata . MetadataID NOT IN ( select MetadataID from TargetUserGroups where ( TargetUserGroup = 'Consumer Health / Patient Education' or TargetUserGroup = 'K - 12' ) ) " ) ; } sql . append ( " ) \n" ) ; String start = sql . toString ( ) ; for ( i = 0 ; i < param . size ( ) ; i + + ) { ParameterNode tempNode = param . getParameters ( i ) ; String key = tempNode . getKeyWord ( ) ; relat = tempNode . getRelation ( ) ; exact = tempNode . getExact ( ) ; if ( relat . compareTo ( "AND" ) = = 0 | | relat . compareTo ( "" ) = = 0 ) / / if AND or OR relation { sql . append ( "AND Metadata . MetadataID IN \n" ) ; } else if ( relat . compareTo ( "NOT" ) = = 0 ) { sql . append ( "AND Metadata . MetadataID NOT IN \n" ) ; } else if ( relat . compareTo ( "OR" ) = = 0 ) { sql . append ( "UNION \n" + start + "AND Metadata . MetadataID IN \n " ) ; } if ( ! exact ) { sql . append ( " ( " + buildCommonQuery ( key , "title" , "Metadata" ) ) ; sql . append ( "\nUNION " + buildCommonQuery ( key , "description" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "SourceCollection" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "metadataID" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "LearningResourceType" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "keyword" , "Keywords" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "tag" , "Tags" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "CopyrightTextID" , "CopyRights" , "CopyrightTexts" , "CopyrightText" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "TaxonPathID" , "TaxonPaths" , "Taxons" , "Entry" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "vcardID" , "Contributors" , "Vcards" , "vcard" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "vcardID" , "CopyrightHolders" , "Vcards" , "vcard" ) ) ; sql . append ( " ) \n" ) ; } else / / if it is exact search { sql . append ( " ( Select Metadata . MetadataID from Metadata where" ) ; sql . append ( " ( title like '" + key + "' OR title like '% " + key + " %' OR title like '" + key + " %' OR title like '% " + key + "' OR title like '% " + key + " . %' OR title like '% " + key + " , %'\n" ) ; sql . append ( "OR description like '" + key + "' OR description like '% " + key + " %' OR description like '" + key + " %' OR description like '% " + key + "' OR description like '% " + key + " . %' OR description like '% " + key + " , %'\n" ) ; sql . append ( "OR SourceCollection like '" + key + "' OR SourceCollection like '% " + key + " %' OR SourceCollection like '% " + key + "' OR SourceCollection like '" + key + " %' OR SourceCollection like '% " + key + " . %' OR SourceCollection like '% " + key + " , %'\n" ) ; sql . append ( "OR LearningResourceType like '" + key + "' OR LearningResourceType like '% " + key + " %' OR LearningResourceType like '% " + key + "' OR LearningResourceType like '" + key + " %' OR LearningResourceType like '% " + key + " . %' OR LearningResourceType like '% " + key + " , %'\n" ) ; sql . append ( "OR metadataID like '" + key + "' ) \n" ) ; sql . append ( "UNION Select keywords . metadataID FROM keywords where keyword like '" + key + "' OR keyword LIKE '% " + key + " %' OR keyword like '" + key + " %' OR keyword like '% " + key + "' OR keyword like '% " + key + " . %' OR keyword like '% " + key + " , %'\n" ) ; sql . append ( "UNION Select Copyrights . metadataID from Copyrights WHERE copyrightTextID IN ( Select copyrightTextID from CopyrightTexts WHERE " ) ; sql . append ( "copyrightText like '" + key + "' OR copyrightText LIKE '% " + key + " %' OR copyrightText like '" + key + " %' OR copyrightText like '% " + key + "' OR copyrightText like '% " + key + " . %' ) \n" ) ; / / sql . append ( "UNION Select TaxonPaths . metadataID from TaxonPaths where taxonpathid in ( select taxonpathid from taxons where " ) ; / / sql . append ( "Entry like '" + key + "' OR Entry LIKE '% " + key + " %' OR Entry like '" + key + " %' OR Entry like '% " + key + "' OR Entry like '% " + key + " . %' OR Entry like '% " + key + " , %' ) \n" ) ; sql . append ( "UNION select copyrightHolders . metadataID from copyrightHolders where vcardID in ( select vcardID from vcards where " ) ; sql . append ( "vCard like '" + key + "' OR vCard LIKE '% " + key + " %' OR vCard like '" + key + " %' OR vCard like '% " + key + "' OR vCard like '% " + key + " . %' OR vCard like '% " + key + " , %' ) \n" ) ; sql . append ( "UNION select Contributors . metadataID from Contributors where vcardID in ( select vcardID from vcards where " ) ; sql . append ( "vCard like '" + key + "' OR vCard LIKE '% " + key + " %' OR vCard like '" + key + " %' OR vCard like '% " + key + "' OR vCard like '% " + key + " . %' OR vCard like '% " + key + " , %' ) ) \n" ) ; } } sql . append ( " order by Title" ) ; String output = sql . toString ( ) ; System . out . println ( output ) ; return output ; }
void test13 ( ) throws Throwable { SimpleSearchDAO simpleSearchDAO0 = new SimpleSearchDAO ( ) ; ParameterBean parameterBean0 = new ParameterBean ( ) ; ParameterNode parameterNode0 = new ParameterNode ( "" , "" , "select distinct ( Metadata . metadataID ) , Title FROM Metadata WHERE ( Metadata . CatalogDate IS NOT NULL AND Metadata . ApproveDate IS NOT NULL AND Metadata . Private = '0' AND Metadata . SourceCollection < > 'PEIR - University of Alabama at Birmingham Department of Radiology' AND Metadata . SourceCollection < > 'PEIR - University of Alabama at Birmingham Department of Pathology' ) \n order by Title" ) ; parameterBean0 . addParameters ( parameterNode0 ) ; String string0 = simpleSearchDAO0 . makeSimpleQuery ( parameterBean0 , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String makeSimpleQuery ( ParameterBean param , String consumer ) { StringBuffer sql = new StringBuffer ( ) ; boolean exact = false ; String relat = null ; / / stores the AND , OR relation int i = 0 ; / / counter sql . append ( "select distinct ( Metadata . metadataID ) , Title FROM Metadata WHERE " ) ; sql . append ( " ( Metadata . CatalogDate IS NOT NULL AND Metadata . ApproveDate IS NOT NULL AND " ) ; if ( param . getHidden ( ) = = false ) { sql . append ( " Metadata . Private = '0'" ) ; } if ( param . getUsageRight ( ) = = null ) { sql . append ( " AND Metadata . SourceCollection < > 'PEIR - University of Alabama at Birmingham Department of Radiology' AND Metadata . SourceCollection < > 'PEIR - University of Alabama at Birmingham Department of Pathology'" ) ; } if ( consumer = = null ) { sql . append ( " AND Metadata . MetadataID NOT IN ( select MetadataID from TargetUserGroups where ( TargetUserGroup = 'Consumer Health / Patient Education' or TargetUserGroup = 'K - 12' ) ) " ) ; } sql . append ( " ) \n" ) ; String start = sql . toString ( ) ; for ( i = 0 ; i < param . size ( ) ; i + + ) { ParameterNode tempNode = param . getParameters ( i ) ; String key = tempNode . getKeyWord ( ) ; relat = tempNode . getRelation ( ) ; exact = tempNode . getExact ( ) ; if ( relat . compareTo ( "AND" ) = = 0 | | relat . compareTo ( "" ) = = 0 ) / / if AND or OR relation { sql . append ( "AND Metadata . MetadataID IN \n" ) ; } else if ( relat . compareTo ( "NOT" ) = = 0 ) { sql . append ( "AND Metadata . MetadataID NOT IN \n" ) ; } else if ( relat . compareTo ( "OR" ) = = 0 ) { sql . append ( "UNION \n" + start + "AND Metadata . MetadataID IN \n " ) ; } if ( ! exact ) { sql . append ( " ( " + buildCommonQuery ( key , "title" , "Metadata" ) ) ; sql . append ( "\nUNION " + buildCommonQuery ( key , "description" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "SourceCollection" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "metadataID" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "LearningResourceType" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "keyword" , "Keywords" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "tag" , "Tags" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "CopyrightTextID" , "CopyRights" , "CopyrightTexts" , "CopyrightText" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "TaxonPathID" , "TaxonPaths" , "Taxons" , "Entry" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "vcardID" , "Contributors" , "Vcards" , "vcard" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "vcardID" , "CopyrightHolders" , "Vcards" , "vcard" ) ) ; sql . append ( " ) \n" ) ; } else / / if it is exact search { sql . append ( " ( Select Metadata . MetadataID from Metadata where" ) ; sql . append ( " ( title like '" + key + "' OR title like '% " + key + " %' OR title like '" + key + " %' OR title like '% " + key + "' OR title like '% " + key + " . %' OR title like '% " + key + " , %'\n" ) ; sql . append ( "OR description like '" + key + "' OR description like '% " + key + " %' OR description like '" + key + " %' OR description like '% " + key + "' OR description like '% " + key + " . %' OR description like '% " + key + " , %'\n" ) ; sql . append ( "OR SourceCollection like '" + key + "' OR SourceCollection like '% " + key + " %' OR SourceCollection like '% " + key + "' OR SourceCollection like '" + key + " %' OR SourceCollection like '% " + key + " . %' OR SourceCollection like '% " + key + " , %'\n" ) ; sql . append ( "OR LearningResourceType like '" + key + "' OR LearningResourceType like '% " + key + " %' OR LearningResourceType like '% " + key + "' OR LearningResourceType like '" + key + " %' OR LearningResourceType like '% " + key + " . %' OR LearningResourceType like '% " + key + " , %'\n" ) ; sql . append ( "OR metadataID like '" + key + "' ) \n" ) ; sql . append ( "UNION Select keywords . metadataID FROM keywords where keyword like '" + key + "' OR keyword LIKE '% " + key + " %' OR keyword like '" + key + " %' OR keyword like '% " + key + "' OR keyword like '% " + key + " . %' OR keyword like '% " + key + " , %'\n" ) ; sql . append ( "UNION Select Copyrights . metadataID from Copyrights WHERE copyrightTextID IN ( Select copyrightTextID from CopyrightTexts WHERE " ) ; sql . append ( "copyrightText like '" + key + "' OR copyrightText LIKE '% " + key + " %' OR copyrightText like '" + key + " %' OR copyrightText like '% " + key + "' OR copyrightText like '% " + key + " . %' ) \n" ) ; / / sql . append ( "UNION Select TaxonPaths . metadataID from TaxonPaths where taxonpathid in ( select taxonpathid from taxons where " ) ; / / sql . append ( "Entry like '" + key + "' OR Entry LIKE '% " + key + " %' OR Entry like '" + key + " %' OR Entry like '% " + key + "' OR Entry like '% " + key + " . %' OR Entry like '% " + key + " , %' ) \n" ) ; sql . append ( "UNION select copyrightHolders . metadataID from copyrightHolders where vcardID in ( select vcardID from vcards where " ) ; sql . append ( "vCard like '" + key + "' OR vCard LIKE '% " + key + " %' OR vCard like '" + key + " %' OR vCard like '% " + key + "' OR vCard like '% " + key + " . %' OR vCard like '% " + key + " , %' ) \n" ) ; sql . append ( "UNION select Contributors . metadataID from Contributors where vcardID in ( select vcardID from vcards where " ) ; sql . append ( "vCard like '" + key + "' OR vCard LIKE '% " + key + " %' OR vCard like '" + key + " %' OR vCard like '% " + key + "' OR vCard like '% " + key + " . %' OR vCard like '% " + key + " , %' ) ) \n" ) ; } } sql . append ( " order by Title" ) ; String output = sql . toString ( ) ; System . out . println ( output ) ; return output ; }
void test14 ( ) throws Throwable { SimpleSearchDAO simpleSearchDAO0 = new SimpleSearchDAO ( ) ; ParameterBean parameterBean0 = new ParameterBean ( "SELECT kXa . metadataID from kXa WHERE kXa IN ( Select kXa from kXa WHERE kXa like 'kXa%' OR kXa like '% kXa%' ) " ) ; String string0 = simpleSearchDAO0 . makeSimpleQuery ( parameterBean0 , "kXa" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String makeSimpleQuery ( ParameterBean param , String consumer ) { StringBuffer sql = new StringBuffer ( ) ; boolean exact = false ; String relat = null ; / / stores the AND , OR relation int i = 0 ; / / counter sql . append ( "select distinct ( Metadata . metadataID ) , Title FROM Metadata WHERE " ) ; sql . append ( " ( Metadata . CatalogDate IS NOT NULL AND Metadata . ApproveDate IS NOT NULL AND " ) ; if ( param . getHidden ( ) = = false ) { sql . append ( " Metadata . Private = '0'" ) ; } if ( param . getUsageRight ( ) = = null ) { sql . append ( " AND Metadata . SourceCollection < > 'PEIR - University of Alabama at Birmingham Department of Radiology' AND Metadata . SourceCollection < > 'PEIR - University of Alabama at Birmingham Department of Pathology'" ) ; } if ( consumer = = null ) { sql . append ( " AND Metadata . MetadataID NOT IN ( select MetadataID from TargetUserGroups where ( TargetUserGroup = 'Consumer Health / Patient Education' or TargetUserGroup = 'K - 12' ) ) " ) ; } sql . append ( " ) \n" ) ; String start = sql . toString ( ) ; for ( i = 0 ; i < param . size ( ) ; i + + ) { ParameterNode tempNode = param . getParameters ( i ) ; String key = tempNode . getKeyWord ( ) ; relat = tempNode . getRelation ( ) ; exact = tempNode . getExact ( ) ; if ( relat . compareTo ( "AND" ) = = 0 | | relat . compareTo ( "" ) = = 0 ) / / if AND or OR relation { sql . append ( "AND Metadata . MetadataID IN \n" ) ; } else if ( relat . compareTo ( "NOT" ) = = 0 ) { sql . append ( "AND Metadata . MetadataID NOT IN \n" ) ; } else if ( relat . compareTo ( "OR" ) = = 0 ) { sql . append ( "UNION \n" + start + "AND Metadata . MetadataID IN \n " ) ; } if ( ! exact ) { sql . append ( " ( " + buildCommonQuery ( key , "title" , "Metadata" ) ) ; sql . append ( "\nUNION " + buildCommonQuery ( key , "description" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "SourceCollection" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "metadataID" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "LearningResourceType" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "keyword" , "Keywords" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "tag" , "Tags" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "CopyrightTextID" , "CopyRights" , "CopyrightTexts" , "CopyrightText" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "TaxonPathID" , "TaxonPaths" , "Taxons" , "Entry" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "vcardID" , "Contributors" , "Vcards" , "vcard" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "vcardID" , "CopyrightHolders" , "Vcards" , "vcard" ) ) ; sql . append ( " ) \n" ) ; } else / / if it is exact search { sql . append ( " ( Select Metadata . MetadataID from Metadata where" ) ; sql . append ( " ( title like '" + key + "' OR title like '% " + key + " %' OR title like '" + key + " %' OR title like '% " + key + "' OR title like '% " + key + " . %' OR title like '% " + key + " , %'\n" ) ; sql . append ( "OR description like '" + key + "' OR description like '% " + key + " %' OR description like '" + key + " %' OR description like '% " + key + "' OR description like '% " + key + " . %' OR description like '% " + key + " , %'\n" ) ; sql . append ( "OR SourceCollection like '" + key + "' OR SourceCollection like '% " + key + " %' OR SourceCollection like '% " + key + "' OR SourceCollection like '" + key + " %' OR SourceCollection like '% " + key + " . %' OR SourceCollection like '% " + key + " , %'\n" ) ; sql . append ( "OR LearningResourceType like '" + key + "' OR LearningResourceType like '% " + key + " %' OR LearningResourceType like '% " + key + "' OR LearningResourceType like '" + key + " %' OR LearningResourceType like '% " + key + " . %' OR LearningResourceType like '% " + key + " , %'\n" ) ; sql . append ( "OR metadataID like '" + key + "' ) \n" ) ; sql . append ( "UNION Select keywords . metadataID FROM keywords where keyword like '" + key + "' OR keyword LIKE '% " + key + " %' OR keyword like '" + key + " %' OR keyword like '% " + key + "' OR keyword like '% " + key + " . %' OR keyword like '% " + key + " , %'\n" ) ; sql . append ( "UNION Select Copyrights . metadataID from Copyrights WHERE copyrightTextID IN ( Select copyrightTextID from CopyrightTexts WHERE " ) ; sql . append ( "copyrightText like '" + key + "' OR copyrightText LIKE '% " + key + " %' OR copyrightText like '" + key + " %' OR copyrightText like '% " + key + "' OR copyrightText like '% " + key + " . %' ) \n" ) ; / / sql . append ( "UNION Select TaxonPaths . metadataID from TaxonPaths where taxonpathid in ( select taxonpathid from taxons where " ) ; / / sql . append ( "Entry like '" + key + "' OR Entry LIKE '% " + key + " %' OR Entry like '" + key + " %' OR Entry like '% " + key + "' OR Entry like '% " + key + " . %' OR Entry like '% " + key + " , %' ) \n" ) ; sql . append ( "UNION select copyrightHolders . metadataID from copyrightHolders where vcardID in ( select vcardID from vcards where " ) ; sql . append ( "vCard like '" + key + "' OR vCard LIKE '% " + key + " %' OR vCard like '" + key + " %' OR vCard like '% " + key + "' OR vCard like '% " + key + " . %' OR vCard like '% " + key + " , %' ) \n" ) ; sql . append ( "UNION select Contributors . metadataID from Contributors where vcardID in ( select vcardID from vcards where " ) ; sql . append ( "vCard like '" + key + "' OR vCard LIKE '% " + key + " %' OR vCard like '" + key + " %' OR vCard like '% " + key + "' OR vCard like '% " + key + " . %' OR vCard like '% " + key + " , %' ) ) \n" ) ; } } sql . append ( " order by Title" ) ; String output = sql . toString ( ) ; System . out . println ( output ) ; return output ; }
void test15 ( ) throws Throwable { SimpleSearchDAO simpleSearchDAO0 = new SimpleSearchDAO ( ) ; ParameterBean parameterBean0 = new ParameterBean ( "SELECT ; X2\" * #1% . metadataID from ; X2\" * #1% WHERE ; X2\" * #1% IN ( Select ; X2\" * #1% from ; X2\" * #1% WHERE ; X2\" * #1% like ' ; X2\" * #1%%' OR ; X2\" * #1% like '% ; X2\" * #1%%' ) " ) ; String string0 = simpleSearchDAO0 . makeSimpleQuery ( parameterBean0 , " ; X2\" * #1%" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String makeSimpleQuery ( ParameterBean param , String consumer ) { StringBuffer sql = new StringBuffer ( ) ; boolean exact = false ; String relat = null ; / / stores the AND , OR relation int i = 0 ; / / counter sql . append ( "select distinct ( Metadata . metadataID ) , Title FROM Metadata WHERE " ) ; sql . append ( " ( Metadata . CatalogDate IS NOT NULL AND Metadata . ApproveDate IS NOT NULL AND " ) ; if ( param . getHidden ( ) = = false ) { sql . append ( " Metadata . Private = '0'" ) ; } if ( param . getUsageRight ( ) = = null ) { sql . append ( " AND Metadata . SourceCollection < > 'PEIR - University of Alabama at Birmingham Department of Radiology' AND Metadata . SourceCollection < > 'PEIR - University of Alabama at Birmingham Department of Pathology'" ) ; } if ( consumer = = null ) { sql . append ( " AND Metadata . MetadataID NOT IN ( select MetadataID from TargetUserGroups where ( TargetUserGroup = 'Consumer Health / Patient Education' or TargetUserGroup = 'K - 12' ) ) " ) ; } sql . append ( " ) \n" ) ; String start = sql . toString ( ) ; for ( i = 0 ; i < param . size ( ) ; i + + ) { ParameterNode tempNode = param . getParameters ( i ) ; String key = tempNode . getKeyWord ( ) ; relat = tempNode . getRelation ( ) ; exact = tempNode . getExact ( ) ; if ( relat . compareTo ( "AND" ) = = 0 | | relat . compareTo ( "" ) = = 0 ) / / if AND or OR relation { sql . append ( "AND Metadata . MetadataID IN \n" ) ; } else if ( relat . compareTo ( "NOT" ) = = 0 ) { sql . append ( "AND Metadata . MetadataID NOT IN \n" ) ; } else if ( relat . compareTo ( "OR" ) = = 0 ) { sql . append ( "UNION \n" + start + "AND Metadata . MetadataID IN \n " ) ; } if ( ! exact ) { sql . append ( " ( " + buildCommonQuery ( key , "title" , "Metadata" ) ) ; sql . append ( "\nUNION " + buildCommonQuery ( key , "description" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "SourceCollection" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "metadataID" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "LearningResourceType" , "Metadata" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "keyword" , "Keywords" ) ) ; sql . append ( " \nUNION " + buildCommonQuery ( key , "tag" , "Tags" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "CopyrightTextID" , "CopyRights" , "CopyrightTexts" , "CopyrightText" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "TaxonPathID" , "TaxonPaths" , "Taxons" , "Entry" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "vcardID" , "Contributors" , "Vcards" , "vcard" ) ) ; sql . append ( " \nUNION " + buildMutiQuery ( key , "vcardID" , "CopyrightHolders" , "Vcards" , "vcard" ) ) ; sql . append ( " ) \n" ) ; } else / / if it is exact search { sql . append ( " ( Select Metadata . MetadataID from Metadata where" ) ; sql . append ( " ( title like '" + key + "' OR title like '% " + key + " %' OR title like '" + key + " %' OR title like '% " + key + "' OR title like '% " + key + " . %' OR title like '% " + key + " , %'\n" ) ; sql . append ( "OR description like '" + key + "' OR description like '% " + key + " %' OR description like '" + key + " %' OR description like '% " + key + "' OR description like '% " + key + " . %' OR description like '% " + key + " , %'\n" ) ; sql . append ( "OR SourceCollection like '" + key + "' OR SourceCollection like '% " + key + " %' OR SourceCollection like '% " + key + "' OR SourceCollection like '" + key + " %' OR SourceCollection like '% " + key + " . %' OR SourceCollection like '% " + key + " , %'\n" ) ; sql . append ( "OR LearningResourceType like '" + key + "' OR LearningResourceType like '% " + key + " %' OR LearningResourceType like '% " + key + "' OR LearningResourceType like '" + key + " %' OR LearningResourceType like '% " + key + " . %' OR LearningResourceType like '% " + key + " , %'\n" ) ; sql . append ( "OR metadataID like '" + key + "' ) \n" ) ; sql . append ( "UNION Select keywords . metadataID FROM keywords where keyword like '" + key + "' OR keyword LIKE '% " + key + " %' OR keyword like '" + key + " %' OR keyword like '% " + key + "' OR keyword like '% " + key + " . %' OR keyword like '% " + key + " , %'\n" ) ; sql . append ( "UNION Select Copyrights . metadataID from Copyrights WHERE copyrightTextID IN ( Select copyrightTextID from CopyrightTexts WHERE " ) ; sql . append ( "copyrightText like '" + key + "' OR copyrightText LIKE '% " + key + " %' OR copyrightText like '" + key + " %' OR copyrightText like '% " + key + "' OR copyrightText like '% " + key + " . %' ) \n" ) ; / / sql . append ( "UNION Select TaxonPaths . metadataID from TaxonPaths where taxonpathid in ( select taxonpathid from taxons where " ) ; / / sql . append ( "Entry like '" + key + "' OR Entry LIKE '% " + key + " %' OR Entry like '" + key + " %' OR Entry like '% " + key + "' OR Entry like '% " + key + " . %' OR Entry like '% " + key + " , %' ) \n" ) ; sql . append ( "UNION select copyrightHolders . metadataID from copyrightHolders where vcardID in ( select vcardID from vcards where " ) ; sql . append ( "vCard like '" + key + "' OR vCard LIKE '% " + key + " %' OR vCard like '" + key + " %' OR vCard like '% " + key + "' OR vCard like '% " + key + " . %' OR vCard like '% " + key + " , %' ) \n" ) ; sql . append ( "UNION select Contributors . metadataID from Contributors where vcardID in ( select vcardID from vcards where " ) ; sql . append ( "vCard like '" + key + "' OR vCard LIKE '% " + key + " %' OR vCard like '" + key + " %' OR vCard like '% " + key + "' OR vCard like '% " + key + " . %' OR vCard like '% " + key + " , %' ) ) \n" ) ; } } sql . append ( " order by Title" ) ; String output = sql . toString ( ) ; System . out . println ( output ) ; return output ; }
void test0 ( ) throws Throwable { ReSearchDAO reSearchDAO0 = new ReSearchDAO ( ) ; SQLServerDataSource sQLServerDataSource0 = new SQLServerDataSource ( ) ; reSearchDAO0 . setDataSource ( ( DataSource ) sQLServerDataSource0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDataSource ( DataSource dataSource ) { this . dataSource = dataSource ; }
void test1 ( ) throws Throwable { ReSearchDAO reSearchDAO0 = new ReSearchDAO ( ) ; String [ ] stringArray0 = new String [ 1 ] ; String string0 = reSearchDAO0 . getFilterString ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFilterString ( String [ ] filterAry ) { String format = "" ; String f = " OR Metadata . LearningResourceType like '" ; int t1 = 0 ; for ( int i = 0 ; i < filterAry . length ; i + + ) { if ( filterAry . length = = 1 ) { format = "Metadata . LearningResourceType like '" + filterAry [ 0 ] + "%'" ; t1 = format . length ( ) ; } else { format = format + f + filterAry [ i ] + "%'" ; } } if ( t1 = = 0 ) { format = format . replaceFirst ( "OR" , "" ) ; } return format ; }
void test2 ( ) throws Throwable { ReSearchDAO reSearchDAO0 = new ReSearchDAO ( ) ; String [ ] stringArray0 = new String [ 2 ] ; String string0 = reSearchDAO0 . getFilterString ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getFilterString ( String [ ] filterAry ) { String format = "" ; String f = " OR Metadata . LearningResourceType like '" ; int t1 = 0 ; for ( int i = 0 ; i < filterAry . length ; i + + ) { if ( filterAry . length = = 1 ) { format = "Metadata . LearningResourceType like '" + filterAry [ 0 ] + "%'" ; t1 = format . length ( ) ; } else { format = format + f + filterAry [ i ] + "%'" ; } } if ( t1 = = 0 ) { format = format . replaceFirst ( "OR" , "" ) ; } return format ; }
void test3 ( ) throws Throwable { ReSearchDAO reSearchDAO0 = new ReSearchDAO ( ) ; LinkedList < String > linkedList0 = new LinkedList < String > ( ) ; linkedList0 . add ( "direct" ) ; linkedList0 . add ( "direct" ) ; String string0 = reSearchDAO0 . makeInString ( ( List ) linkedList0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String makeInString ( List metaID ) { StringBuffer inStrs = new StringBuffer ( ) ; int msize = metaID . size ( ) ; int i = 0 ; while ( msize > i ) { inStrs . append ( metaID . get ( i ) ) ; if ( i ! = metaID . size ( ) - 1 ) { inStrs . append ( " , " ) ; } i + + ; } String inStr = inStrs . toString ( ) ; return inStr ; }
void test0 ( ) throws Throwable { SearchResultBean searchResultBean0 = new SearchResultBean ( ) ; ShortMetadataResultBean [ ] shortMetadataResultBeanArray0 = new ShortMetadataResultBean [ 9 ] ; searchResultBean0 . setShortRecords ( shortMetadataResultBeanArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimple ( ) { return simple ; }
void test1 ( ) throws Throwable { SearchResultBean searchResultBean0 = new SearchResultBean ( ) ; SearchParametersBean searchParametersBean0 = new SearchParametersBean ( ) ; searchResultBean0 . setSearchParameters ( searchParametersBean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimple ( ) { return simple ; }
void test2 ( ) throws Throwable { SearchResultBean searchResultBean0 = new SearchResultBean ( ) ; String [ ] stringArray0 = new String [ 5 ] ; searchResultBean0 . setFilterList ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimple ( ) { return simple ; }
void test3 ( ) throws Throwable { SearchResultBean searchResultBean0 = new SearchResultBean ( ) ; boolean boolean0 = searchResultBean0 . isSimple ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimple ( ) { return simple ; }
void test4 ( ) throws Throwable { SearchResultBean searchResultBean0 = new SearchResultBean ( ) ; searchResultBean0 . setSimple ( false ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimple ( ) { return simple ; }
void test5 ( ) throws Throwable { SearchResultBean searchResultBean0 = new SearchResultBean ( ) ; searchResultBean0 . getShortRecords ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimple ( ) { return simple ; }
void test6 ( ) throws Throwable { SearchResultBean searchResultBean0 = new SearchResultBean ( ) ; searchResultBean0 . getFilterList ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimple ( ) { return simple ; }
void test7 ( ) throws Throwable { SearchResultBean searchResultBean0 = new SearchResultBean ( ) ; searchResultBean0 . getSearchParameters ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isSimple ( ) { return simple ; }
void test0 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( " . ) 5w = 4 & iWcR_ ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test1 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( "z$Ci7a3 [ GN * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test2 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; boolean boolean0 = parameterBean0 . getHidden ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test3 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( "z$Ci7a3 [ GN * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test4 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; String [ ] stringArray0 = new String [ 8 ] ; parameterBean0 . setPublicationNames ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test5 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( " . ) 5w = 4 & iWcR_ ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test6 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; parameterBean0 . getPrimaryArray ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test7 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; parameterBean0 . getSourceCollection ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test8 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; parameterBean0 . getUsageRight ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test9 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return searchParameters . size ( ) ; }
void test10 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; String [ ] stringArray0 = new String [ 5 ] ; parameterBean0 . setSourceCollection ( stringArray0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test11 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; parameterBean0 . setDisease ( ( String [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test12 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( "z$Ci7a3 [ GN * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return searchParameters . size ( ) ; }
void test13 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( " . ) 5w = 4 & iWcR_ ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return searchParameters . size ( ) ; }
void test14 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; parameterBean0 . setImaging ( ( String [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test15 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; parameterBean0 . setUsageRights ( "and" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test16 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; parameterBean0 . getPublicationNames ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test17 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; parameterBean0 . setPrimaryArray ( ( String [ ] ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test18 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( " . ) 5w = 4 & iWcR_ ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getRelation ( ) { return relToNext ; }
void test19 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( "z$Ci7a3 [ GN * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return searchParameters . size ( ) ; }
void test20 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( " . ) 5w = 4 & iWcR_ ! " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isEmpty ( String str ) { boolean empty = false ; if ( null = = str | | str . trim ( ) . length ( ) = = 0 ) { empty = true ; } return empty ; }
void test21 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( "z$Ci7a3 [ GN * " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return searchParameters . size ( ) ; }
void test22 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; ParameterBean parameterBean1 = parameterBean0 . makeParameterBean ( " " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return searchParameters . size ( ) ; }
void test23 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return searchParameters . size ( ) ; }
void test24 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( "#LUaiP\"fY\" ? U / W" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test25 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; ParameterBean parameterBean1 = parameterBean0 . makeParameterBean ( "OR" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getHidden ( ) { return this . hidden ; }
void test26 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( "and" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return searchParameters . size ( ) ; }
void test27 ( ) throws Throwable { ParameterBean parameterBean0 = new ParameterBean ( ) ; ParameterBean parameterBean1 = parameterBean0 . makeParameterBean ( "NOT" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int size ( ) { return searchParameters . size ( ) ; }
void test0 ( ) throws Throwable { ConceptMappingDAO conceptMappingDAO0 = new ConceptMappingDAO ( ) ; BaseXADataSource baseXADataSource0 = new BaseXADataSource ( ) ; conceptMappingDAO0 . setDataSource ( ( DataSource ) baseXADataSource0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDataSource ( DataSource dataSource ) { this . dataSource = dataSource ; }
void test0 ( ) throws Throwable { SimpleMerlotSearch simpleMerlotSearch0 = new SimpleMerlotSearch ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" <UnknownFocalMethodText>
void test0 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; InternetAddress internetAddress0 = notificationServicesBean0 . getHealAddress ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" InternetAddress getHealAddress ( ) { return healAddress ; }
void test1 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; notificationServicesBean0 . setHealAddress ( ( InternetAddress ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMailhost ( ) { return mailhost ; }
void test2 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; notificationServicesBean0 . setMailPassword ( "o + 6qghv%~0" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMailhost ( ) { return mailhost ; }
void test3 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; String string0 = notificationServicesBean0 . getMailhost ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMailhost ( ) { return mailhost ; }
void test4 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; notificationServicesBean0 . setMailUser ( "e | #o = ) 6 } d#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getMailhost ( ) { return mailhost ; }
void test6 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; String [ ] stringArray0 = new String [ 4 ] ; boolean boolean0 = notificationServicesBean0 . sendEmailToUsers ( stringArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sendEmailToUsers ( String [ ] userNames , String messageBody ) throws MessagingException { boolean result = false ; if ( userNames = = null | | messageBody = = null ) { return false ; } StringBuffer addressBuffer = null ; String currAddress ; ArrayList emailAddresses = userRegistry . getEmailAddresses ( userNames ) ; if ( emailAddresses ! = null ) { Iterator emailIterator = emailAddresses . iterator ( ) ; while ( emailIterator . hasNext ( ) ) { currAddress = ( String ) emailIterator . next ( ) ; if ( addressBuffer ! = null ) { addressBuffer . append ( " , " + currAddress ) ; } else { addressBuffer = new StringBuffer ( currAddress ) ; } } } if ( addressBuffer ! = null ) { result = sendUserNotice ( addressBuffer . toString ( ) , messageBody ) ; } return result ; }
void test7 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; UserRegistryBean userRegistryBean0 = new UserRegistryBean ( ) ; notificationServicesBean0 . setUserRegistry ( userRegistryBean0 ) ; BaseXADataSource baseXADataSource0 = new BaseXADataSource ( ) ; userRegistryBean0 . setDataSource ( ( DataSource ) baseXADataSource0 ) ; String [ ] stringArray0 = new String [ 8 ] ; boolean boolean0 = notificationServicesBean0 . sendEmailToUsers ( stringArray0 , "e | #o = ) 6 } d#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sendEmailToUsers ( String [ ] userNames , String messageBody ) throws MessagingException { boolean result = false ; if ( userNames = = null | | messageBody = = null ) { return false ; } StringBuffer addressBuffer = null ; String currAddress ; ArrayList emailAddresses = userRegistry . getEmailAddresses ( userNames ) ; if ( emailAddresses ! = null ) { Iterator emailIterator = emailAddresses . iterator ( ) ; while ( emailIterator . hasNext ( ) ) { currAddress = ( String ) emailIterator . next ( ) ; if ( addressBuffer ! = null ) { addressBuffer . append ( " , " + currAddress ) ; } else { addressBuffer = new StringBuffer ( currAddress ) ; } } } if ( addressBuffer ! = null ) { result = sendUserNotice ( addressBuffer . toString ( ) , messageBody ) ; } return result ; }
void test8 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; boolean boolean0 = notificationServicesBean0 . sendUserNotice ( ( String ) null , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sendUserNotice ( String userAddresses , String messageBody ) throws MessagingException { boolean result = false ; if ( userAddresses = = null | | messageBody = = null ) { return false ; } try { InternetAddress [ ] addrs = InternetAddress . parse ( userAddresses , false ) ; if ( addrs ! = null ) { result = sendEmail ( addrs , messageBody , MAILER ) ; } } catch ( AddressException adex ) { adex . printStackTrace ( ) ; result = false ; } return result ; }
void test9 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; boolean boolean0 = notificationServicesBean0 . sendUserNotice ( "spylt'rybtes" , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sendUserNotice ( String userAddresses , String messageBody ) throws MessagingException { boolean result = false ; if ( userAddresses = = null | | messageBody = = null ) { return false ; } try { InternetAddress [ ] addrs = InternetAddress . parse ( userAddresses , false ) ; if ( addrs ! = null ) { result = sendEmail ( addrs , messageBody , MAILER ) ; } } catch ( AddressException adex ) { adex . printStackTrace ( ) ; result = false ; } return result ; }
void test10 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; boolean boolean0 = notificationServicesBean0 . sendUserNotice ( "" , "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sendUserNotice ( String userAddresses , String messageBody ) throws MessagingException { boolean result = false ; if ( userAddresses = = null | | messageBody = = null ) { return false ; } try { InternetAddress [ ] addrs = InternetAddress . parse ( userAddresses , false ) ; if ( addrs ! = null ) { result = sendEmail ( addrs , messageBody , MAILER ) ; } } catch ( AddressException adex ) { adex . printStackTrace ( ) ; result = false ; } return result ; }
void test11 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; boolean boolean0 = notificationServicesBean0 . sendAdminNotice ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sendAdminNotice ( String messageBody ) throws MessagingException { if ( messageBody = = null | | userRegistry = = null ) { return false ; } ArrayList addressList = userRegistry . getAdminEmailAddresses ( ) ; return sendToList ( addressList , messageBody ) ; }
void test12 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; boolean boolean0 = notificationServicesBean0 . sendAdminNotice ( "I Error rading temp file : { 0 } " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sendAdminNotice ( String messageBody ) throws MessagingException { if ( messageBody = = null | | userRegistry = = null ) { return false ; } ArrayList addressList = userRegistry . getAdminEmailAddresses ( ) ; return sendToList ( addressList , messageBody ) ; }
void test14 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; boolean boolean0 = notificationServicesBean0 . sendToList ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sendToList ( String messageBody ) throws MessagingException { if ( messageBody = = null | | userRegistry = = null ) { return false ; } ArrayList addressList = userRegistry . getSubscriberEmailAddresses ( ) ; return sendToList ( addressList , messageBody ) ; }
void test15 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; boolean boolean0 = notificationServicesBean0 . sendToList ( "e | #o = ) 6 } d#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sendToList ( String messageBody ) throws MessagingException { if ( messageBody = = null | | userRegistry = = null ) { return false ; } ArrayList addressList = userRegistry . getSubscriberEmailAddresses ( ) ; return sendToList ( addressList , messageBody ) ; }
void test16 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; UserRegistryBean userRegistryBean0 = new UserRegistryBean ( ) ; notificationServicesBean0 . setUserRegistry ( userRegistryBean0 ) ; BaseXADataSource baseXADataSource0 = new BaseXADataSource ( ) ; userRegistryBean0 . setDataSource ( ( DataSource ) baseXADataSource0 ) ; boolean boolean0 = notificationServicesBean0 . sendToList ( "e | #o = ) 6 } d#" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sendToList ( String messageBody ) throws MessagingException { if ( messageBody = = null | | userRegistry = = null ) { return false ; } ArrayList addressList = userRegistry . getSubscriberEmailAddresses ( ) ; return sendToList ( addressList , messageBody ) ; }
void test17 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; ArrayList < String > arrayList0 = new ArrayList < String > ( ) ; boolean boolean0 = notificationServicesBean0 . sendToList ( ( ArrayList ) arrayList0 , "X ( " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sendToList ( String messageBody ) throws MessagingException { if ( messageBody = = null | | userRegistry = = null ) { return false ; } ArrayList addressList = userRegistry . getSubscriberEmailAddresses ( ) ; return sendToList ( addressList , messageBody ) ; }
void test18 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; ArrayList < String > arrayList0 = new ArrayList < String > ( ) ; arrayList0 . add ( " ; q" ) ; arrayList0 . add ( " ; q" ) ; boolean boolean0 = notificationServicesBean0 . sendToList ( ( ArrayList ) arrayList0 , " ; q" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sendToList ( String messageBody ) throws MessagingException { if ( messageBody = = null | | userRegistry = = null ) { return false ; } ArrayList addressList = userRegistry . getSubscriberEmailAddresses ( ) ; return sendToList ( addressList , messageBody ) ; }
void test19 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; InternetAddress [ ] internetAddressArray0 = new InternetAddress [ 1 ] ; InternetAddress internetAddress0 = new InternetAddress ( "MmNe6x" , "MmNe6x" ) ; internetAddressArray0 [ 0 ] = internetAddress0 ; notificationServicesBean0 . setMailhost ( "MmNe6x" ) ; boolean boolean0 = notificationServicesBean0 . sendEmail ( internetAddressArray0 , ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean sendEmail ( InternetAddress [ ] toAddresses , String text , String subject ) throws MessagingException { try { if ( session = = null ) { throw new MessagingException ( "No session to use to send a " + "message ( session was null ) " ) ; } Message msg = new MimeMessage ( session ) ; / * See method note above . * / if ( toAddresses ! = null ) { if ( toAddresses . length > 1 ) { msg . setRecipients ( Message . RecipientType . TO , healAddressArray ) ; msg . setRecipients ( Message . RecipientType . BCC , toAddresses ) ; } else { msg . setRecipients ( Message . RecipientType . TO , toAddresses ) ; } } else { throw new MessagingException ( "No \"To\" address specified" ) ; } / / msg . setSubject ( MAILSUBJECT ) ; msg . setSubject ( subject ) ; msg . setFrom ( healAddress ) ; msg . setSentDate ( new Date ( ) ) ; msg . setHeader ( "X - Mailer" , MAILER ) ; if ( text ! = null ) { msg . setText ( text ) ; } else { throw new MessagingException ( "No message text specified" ) ; } msg . saveChanges ( ) ; / / implicit with send ( ) Transport transport = session . getTransport ( "smtp" ) ; transport . connect ( mailhost , mailuser , mailpassword ) ; transport . sendMessage ( msg , msg . getAllRecipients ( ) ) ; transport . close ( ) ; } catch ( MessagingException ex ) { ex . printStackTrace ( ) ; throw new MessagingException ( ex . toString ( ) ) ; / / return false ; } return true ; }
void test22 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; boolean boolean0 = notificationServicesBean0 . addUserToList ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean addUserToList ( String userName ) { if ( userRegistry = = null ) { return false ; } else { return userRegistry . addUserToSubscribers ( userName ) ; } }
void test24 ( ) throws Throwable { NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean ( ) ; boolean boolean0 = notificationServicesBean0 . removeUserFromList ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean removeUserFromList ( String userName ) { if ( userRegistry = = null ) { return false ; } else { return userRegistry . removeUserFromSubscribers ( userName ) ; } }
void test0 ( ) throws Throwable { EmailReminderAction emailReminderAction0 = new EmailReminderAction ( ) ; boolean boolean0 = emailReminderAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { AuthenticateAction authenticateAction0 = new AuthenticateAction ( ) ; boolean boolean0 = authenticateAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { EmailValidationAction emailValidationAction0 = new EmailValidationAction ( ) ; boolean boolean0 = emailValidationAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { LogoutAction logoutAction0 = new LogoutAction ( ) ; boolean boolean0 = logoutAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test1 ( ) throws Throwable { EmailFeedbackAction emailFeedbackAction0 = new EmailFeedbackAction ( ( String ) null , ( String ) null ) ; boolean boolean0 = emailFeedbackAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { SubmitDetailedViewSurveyAction submitDetailedViewSurveyAction0 = new SubmitDetailedViewSurveyAction ( ) ; String string0 = submitDetailedViewSurveyAction0 . getDelimiter ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getDelimiter ( ) { return delimiter ; }
void test2 ( ) throws Throwable { SubmitDetailedViewSurveyAction submitDetailedViewSurveyAction0 = new SubmitDetailedViewSurveyAction ( ) ; submitDetailedViewSurveyAction0 . setDelimiter ( " | " ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { DownloadAction downloadAction0 = new DownloadAction ( ) ; boolean boolean0 = downloadAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test1 ( ) throws Throwable { EmailFormServlet emailFormServlet0 = new EmailFormServlet ( ) ; emailFormServlet0 . init ( ( ServletConfig ) emailFormServlet0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void init ( ) throws ServletException { HEALProviderConfig providerConfig = null ; DataSource ds = null ; ServletConfig config = getServletConfig ( ) ; String jdbcDriverClassName = config . getInitParameter ( "jdbcDriverClassName" ) ; String jdbcURL = config . getInitParameter ( "jdbcURL" ) ; String jdbcUser = config . getInitParameter ( "jdbcUser" ) ; String jdbcPassword = config . getInitParameter ( "jdbcPassword" ) ; String contentPath = config . getInitParameter ( "healContentPath" ) ; String healBaseURL = config . getInitParameter ( "healBaseURL" ) ; System . out . println ( "content path : " + contentPath ) ; System . out . println ( "healBaseURL : " + healBaseURL ) ; ServletContext context = getServletContext ( ) ; try { / / use the DataSourceWrapper from the O'Reilly JSP library ds = new DataSourceWrapper ( jdbcDriverClassName , jdbcURL , jdbcUser , jdbcPassword ) ; } catch ( Exception e ) { throw new ServletException ( "Unable to initialize HEAL OAI Provider application" + " due to an inability to open a " + " connection to the database . Reason : " + e . toString ( ) ) ; } if ( ds = = null ) { throw new ServletException ( "Unable to initialize HEAL OAI Provider application" + " due to an inability to open a " + " connection to the database . " ) ; } String idPrefix = config . getInitParameter ( "idPrefix" ) ; if ( idPrefix = = null ) { idPrefix = OAIProviderServlet . defaultIdPrefix ; } String resumptionThresholdStr = config . getInitParameter ( "resumptionThreshold" ) ; int resumptionThreshold = 0 ; if ( resumptionThresholdStr = = null ) { resumptionThreshold = OAIProviderServlet . defaultResumptionThreshold ; } else { try { resumptionThreshold = Integer . parseInt ( resumptionThresholdStr ) ; } catch ( NumberFormatException ex ) { ex . printStackTrace ( ) ; throw new ServletException ( "Unable to initialize HEAL OAI Provider application" + " due to an invalid resumptionThreshold config parameter . The expected" + " format is an integer . The provided parameter was : " + resumptionThresholdStr ) ; } } String coverage = config . getInitParameter ( "coverage" ) ; if ( coverage = = null ) { coverage = OAIProviderServlet . defaultCoverage ; } String metametadataRole = config . getInitParameter ( "metametadataRole" ) ; if ( metametadataRole = = null ) { metametadataRole = OAIProviderServlet . defaultMetametadataRole ; } String granularity = config . getInitParameter ( "granularity" ) ; if ( granularity = = null ) { granularity = OAIProviderServlet . defaultGranularity ; } String descriptionsStr = config . getInitParameter ( "description" ) ; String [ ] descriptions = null ; if ( descriptionsStr = = null ) { descriptions = OAIProviderServlet . defaultDescriptions ; } else { descriptions = new String [ 1 ] ; descriptions [ 0 ] = descriptionsStr ; } String adminEmailsStr = config . getInitParameter ( "adminEmails" ) ; String [ ] adminEmails = null ; if ( adminEmailsStr = = null ) { adminEmails = OAIProviderServlet . defaultAdminEmails ; } else { ArrayList list = new ArrayList ( ) ; StringTokenizer tokenizer = new StringTokenizer ( adminEmailsStr , " , " ) ; while ( tokenizer . hasMoreTokens ( ) ) { list . add ( tokenizer . nextToken ( ) ) ; } if ( list . size ( ) > 0 ) { adminEmails = new String [ list . size ( ) ] ; Iterator iter = list . iterator ( ) ; for ( int i = 0 ; iter . hasNext ( ) ; i + + ) { adminEmails [ i ] = ( String ) iter . next ( ) ; } } } String healVCard = config . getInitParameter ( "healVCard" ) ; if ( healVCard = = null ) { healVCard = OAIProviderServlet . defaultHealVCard ; } String allowedCollectionsStr = config . getInitParameter ( "allowedCollections" ) ; String [ ] allowedCollections = null ; if ( allowedCollectionsStr = = null ) { allowedCollections = OAIProviderServlet . defaultAllowedCollections ; } else if ( ! "all" . equalsIgnoreCase ( allowedCollectionsStr ) ) { / / if we have 'all' then we leave it as null because the / / HealDataAccessor interprets that as it should include all source collections ArrayList list = new ArrayList ( ) ; StringTokenizer tokenizer = new StringTokenizer ( allowedCollectionsStr , " , " ) ; while ( tokenizer . hasMoreTokens ( ) ) { list . add ( tokenizer . nextToken ( ) ) ; } if ( list . size ( ) > 0 ) { allowedCollections = new String [ list . size ( ) ] ; Iterator iter = list . iterator ( ) ; for ( int i = 0 ; iter . hasNext ( ) ; i + + ) { allowedCollections [ i ] = ( String ) iter . next ( ) ; } } } String formatsString = config . getInitParameter ( "metadataFormats" ) ; OAIMetadataFormat [ ] formats = getMetadataFormats ( formatsString ) ; String repositoryName = config . getInitParameter ( "repositoryName" ) ; if ( repositoryName = = null ) { repositoryName = defaultRepositoryName ; } String baseURL = config . getInitParameter ( "baseURL" ) ; if ( baseURL = = null ) { baseURL = defaultBaseURL ; } providerConfig = new HEALProviderConfig ( idPrefix , resumptionThreshold , coverage , metametadataRole , granularity , descriptions , adminEmails , healVCard , allowedCollections , repositoryName , baseURL , formats , healBaseURL + ' / ' + contentPath ) ; dataAccessor = new HEALDataAccessor ( providerConfig , ds ) ; / / initialize the provider wrapper OAIProvider . init ( providerConfig ) ; }
void test0 ( ) throws Throwable { DetailedViewAccessAction detailedViewAccessAction0 = new DetailedViewAccessAction ( ) ; boolean boolean0 = detailedViewAccessAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test1 ( ) throws Throwable { DetailedViewAccessAction detailedViewAccessAction0 = new DetailedViewAccessAction ( ) ; String string0 = detailedViewAccessAction0 . getSuccessPage ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getSuccessPage ( ) ; / * * * @param request The < code > HttpServletRequest < / code > to parse the data * from . * @return A < code > List < / code > of String data that will be saved . * / List getData ( HttpServletRequest request ) ; }
void test2 ( ) throws Throwable { DetailedViewAccessAction detailedViewAccessAction0 = new DetailedViewAccessAction ( ) ; String string0 = detailedViewAccessAction0 . getLogFilename ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" String getLogFilename ( ) ; / * * * @return A < code > String < / code > representation of the page to forward * to upon a successful form submission . * / String getSuccessPage ( ) ; / * * * @param request The < code > HttpServletRequest < / code > to parse the data * from . * @return A < code > List < / code > of String data that will be saved . * / List getData ( HttpServletRequest request ) ; }
void test0 ( ) throws Throwable { BrowseAction browseAction0 = new BrowseAction ( ) ; boolean boolean0 = browseAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { ListIMSXMLAction listIMSXMLAction0 = new ListIMSXMLAction ( ) ; boolean boolean0 = listIMSXMLAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { AddToDownloadAction addToDownloadAction0 = new AddToDownloadAction ( ) ; boolean boolean0 = addToDownloadAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { ShowCatalogQueueAction showCatalogQueueAction0 = new ShowCatalogQueueAction ( ) ; boolean boolean0 = showCatalogQueueAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { SaveMetadataAction saveMetadataAction0 = new SaveMetadataAction ( ) ; boolean boolean0 = saveMetadataAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { RegistrationAction registrationAction0 = new RegistrationAction ( ) ; boolean boolean0 = registrationAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test1 ( ) throws Throwable { RegistrationAction registrationAction0 = new RegistrationAction ( ) ; boolean boolean0 = registrationAction0 . isStringEmpty ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStringEmpty ( String st ) { if ( ( st = = null ) | | ( st . length ( ) = = 0 ) ) { return true ; } else return false ; }
void test2 ( ) throws Throwable { RegistrationAction registrationAction0 = new RegistrationAction ( ) ; boolean boolean0 = registrationAction0 . isStringEmpty ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStringEmpty ( String st ) { if ( ( st = = null ) | | ( st . length ( ) = = 0 ) ) { return true ; } else return false ; }
void test3 ( ) throws Throwable { RegistrationAction registrationAction0 = new RegistrationAction ( ) ; boolean boolean0 = registrationAction0 . isStringEmpty ( " { TWU9 / ~`r8 = } C" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStringEmpty ( String st ) { if ( ( st = = null ) | | ( st . length ( ) = = 0 ) ) { return true ; } else return false ; }
void test0 ( ) throws Throwable { UpdateRegistrationAction updateRegistrationAction0 = new UpdateRegistrationAction ( ) ; boolean boolean0 = updateRegistrationAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test1 ( ) throws Throwable { UpdateRegistrationAction updateRegistrationAction0 = new UpdateRegistrationAction ( ) ; boolean boolean0 = updateRegistrationAction0 . isStringEmpty ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStringEmpty ( String st ) { if ( ( st = = null ) | | ( st . length ( ) = = 0 ) ) { return true ; } else return false ; }
void test2 ( ) throws Throwable { UpdateRegistrationAction updateRegistrationAction0 = new UpdateRegistrationAction ( ) ; boolean boolean0 = updateRegistrationAction0 . isStringEmpty ( " ] * c$3 * ~HC9sA" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStringEmpty ( String st ) { if ( ( st = = null ) | | ( st . length ( ) = = 0 ) ) { return true ; } else return false ; }
void test3 ( ) throws Throwable { UpdateRegistrationAction updateRegistrationAction0 = new UpdateRegistrationAction ( ) ; boolean boolean0 = updateRegistrationAction0 . isStringEmpty ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStringEmpty ( String st ) { if ( ( st = = null ) | | ( st . length ( ) = = 0 ) ) { return true ; } else return false ; }
void test0 ( ) throws Throwable { ModifyRegistrationAction modifyRegistrationAction0 = new ModifyRegistrationAction ( ) ; boolean boolean0 = modifyRegistrationAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test1 ( ) throws Throwable { ModifyRegistrationAction modifyRegistrationAction0 = new ModifyRegistrationAction ( ) ; boolean boolean0 = modifyRegistrationAction0 . isStringEmpty ( ( String ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStringEmpty ( String st ) { if ( ( st = = null ) | | ( st . length ( ) = = 0 ) ) { return true ; } else return false ; }
void test2 ( ) throws Throwable { ModifyRegistrationAction modifyRegistrationAction0 = new ModifyRegistrationAction ( ) ; boolean boolean0 = modifyRegistrationAction0 . isStringEmpty ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStringEmpty ( String st ) { if ( ( st = = null ) | | ( st . length ( ) = = 0 ) ) { return true ; } else return false ; }
void test3 ( ) throws Throwable { ModifyRegistrationAction modifyRegistrationAction0 = new ModifyRegistrationAction ( ) ; boolean boolean0 = modifyRegistrationAction0 . isStringEmpty ( " , e = f$% + n = S ? U" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean isStringEmpty ( String st ) { if ( ( st = = null ) | | ( st . length ( ) = = 0 ) ) { return true ; } else return false ; }
void test0 ( ) throws Throwable { ShowUploadFormAction showUploadFormAction0 = new ShowUploadFormAction ( ) ; boolean boolean0 = showUploadFormAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { SimpleSearchAction simpleSearchAction0 = new SimpleSearchAction ( ) ; boolean boolean0 = simpleSearchAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { AdvSearchAction advSearchAction0 = new AdvSearchAction ( ) ; boolean boolean0 = advSearchAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { SearchResultsAction searchResultsAction0 = new SearchResultsAction ( ) ; boolean boolean0 = searchResultsAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { ResearchAction researchAction0 = new ResearchAction ( ) ; boolean boolean0 = researchAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { RefineSearchAction refineSearchAction0 = new RefineSearchAction ( ) ; boolean boolean0 = refineSearchAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test1 ( ) throws Throwable { EditAdvSearchAction editAdvSearchAction0 = new EditAdvSearchAction ( ) ; boolean boolean0 = editAdvSearchAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test1 ( ) throws Throwable { ShowTop10Action showTop10Action0 = new ShowTop10Action ( ) ; boolean boolean0 = showTop10Action0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; userReviewBean0 . setComments ( "4g\"H } tAxIiu8X@" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUserRating ( ) { return this . userRating ; }
void test1 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; userReviewBean0 . setMetaDataId ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReviewId ( ) { return reviewId ; }
void test2 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; userReviewBean0 . setUserId ( "ZY + ] % ; 2L" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReviewId ( ) { return reviewId ; }
void test3 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; userReviewBean0 . getApprovalDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUserRating ( ) { return this . userRating ; }
void test4 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; userReviewBean0 . setReviewId ( 0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReviewId ( ) { return reviewId ; }
void test5 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; userReviewBean0 . getReviewDate ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUserRating ( ) { return this . userRating ; }
void test6 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; userReviewBean0 . getUser ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUserRating ( ) { return this . userRating ; }
void test7 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; userReviewBean0 . setUserRating ( 1094 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUserRating ( ) { return this . userRating ; }
void test8 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; userReviewBean0 . getComments ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReviewId ( ) { return reviewId ; }
void test9 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; Date date0 = new Date ( ( - 1134L ) ) ; userReviewBean0 . setReviewDate ( date0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReviewId ( ) { return reviewId ; }
void test10 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; Boolean boolean0 = new Boolean ( "zq" ) ; userReviewBean0 . setAnonymous ( boolean0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReviewId ( ) { return reviewId ; }
void test11 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; userReviewBean0 . setUser ( "" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReviewId ( ) { return reviewId ; }
void test12 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; userReviewBean0 . setApproved ( ( Boolean ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUserRating ( ) { return this . userRating ; }
void test13 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; userReviewBean0 . getMetaDataId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReviewId ( ) { return reviewId ; }
void test14 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; userReviewBean0 . getUserId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUserRating ( ) { return this . userRating ; }
void test15 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; int int0 = userReviewBean0 . getUserRating ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReviewId ( ) { return reviewId ; }
void test16 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; Boolean boolean0 = userReviewBean0 . getAnonymous ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUserRating ( ) { return this . userRating ; }
void test17 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; userReviewBean0 . setApprovalDate ( ( Date ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReviewId ( ) { return reviewId ; }
void test18 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; int int0 = userReviewBean0 . getReviewId ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getUserRating ( ) { return this . userRating ; }
void test19 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; userReviewBean0 . setEmail ( "9WYv" ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReviewId ( ) { return reviewId ; }
void test20 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; userReviewBean0 . getEmail ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReviewId ( ) { return reviewId ; }
void test21 ( ) throws Throwable { UserReviewBean userReviewBean0 = new UserReviewBean ( ) ; Boolean boolean0 = userReviewBean0 . getApproved ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" int getReviewId ( ) { return reviewId ; }
void test0 ( ) throws Throwable { WriteUserReviewAction writeUserReviewAction0 = new WriteUserReviewAction ( ) ; boolean boolean0 = writeUserReviewAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { ShowAllUserReviewAction showAllUserReviewAction0 = new ShowAllUserReviewAction ( ) ; boolean boolean0 = showAllUserReviewAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { ShowUserReviewAction showUserReviewAction0 = new ShowUserReviewAction ( ) ; boolean boolean0 = showUserReviewAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test0 ( ) throws Throwable { SubmitUserReviewAction submitUserReviewAction0 = new SubmitUserReviewAction ( ) ; boolean boolean0 = submitUserReviewAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
void test2 ( ) throws Throwable { UserReviewDAO userReviewDAO0 = new UserReviewDAO ( ) ; BaseXADataSource baseXADataSource0 = new BaseXADataSource ( ) ; userReviewDAO0 . setDataSource ( ( DataSource ) baseXADataSource0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void setDataSource ( DataSource dataSource ) { this . dataSource = dataSource ; }
void test5 ( ) throws Throwable { UserReviewDAO userReviewDAO0 = new UserReviewDAO ( ) ; SQLServerConnection sQLServerConnection0 = new SQLServerConnection ( ) ; userReviewDAO0 . saveUserReview ( ( UserReviewBean ) null , ( Connection ) sQLServerConnection0 ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void saveUserReview ( UserReviewBean userReviewBean ) throws SQLException { Connection conn = dataSource . getConnection ( ) ; try { saveUserReview ( userReviewBean , conn ) ; } finally { try { conn . close ( ) ; } catch ( SQLException ex ) { ex . printStackTrace ( ) ; } } }
void test7 ( ) throws Throwable { UserReviewDAO userReviewDAO0 = new UserReviewDAO ( ) ; userReviewDAO0 . approveUserReview ( ( UserReviewBean ) null , ( Connection ) null ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" void approveUserReview ( UserReviewBean userReviewBean ) throws SQLException { Connection conn = dataSource . getConnection ( ) ; try { approveUserReview ( userReviewBean , conn ) ; conn . commit ( ) ; } finally { try { conn . close ( ) ; } catch ( SQLException ex ) { ex . printStackTrace ( ) ; } } }
void test0 ( ) throws Throwable { ApproveUserReviewAction approveUserReviewAction0 = new ApproveUserReviewAction ( ) ; boolean boolean0 = approveUserReviewAction0 . actionRequiresLogin ( ) ; "<AssertPlaceHolder>" ; } "<FocalMethod>" boolean actionRequiresLogin ( ) { return false ; }
